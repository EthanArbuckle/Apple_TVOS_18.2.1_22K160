void sub_10025944C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t Object;
  os_log_s *v6;
  uint64_t v7;
  os_log_s *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  v3 = a2;
  v4 = v3;
  if (v3 && [v3 isActive])
  {
    Object = PKLogFacilityTypeGetObject(23LL);
    v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Found an existing active user notification for received transaction. Updating contents but not re-rolling banner.",  (uint8_t *)&v10,  2u);
    }

    [*(id *)(a1 + 32) setSuppressionBehavior:2];
LABEL_10:
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 32)];
    goto LABEL_11;
  }

  if (*(_BYTE *)(a1 + 56))
  {
    v7 = PKLogFacilityTypeGetObject(23LL);
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(void *)(a1 + 48);
      v10 = 138412290;
      v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Adding user notification for received transaction %@",  (uint8_t *)&v10,  0xCu);
    }

    goto LABEL_10;
  }

void sub_100259584(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(_BYTE *)(a1 + 56))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Adding user notification for expired transaction %@",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_100259658(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(_BYTE *)(a1 + 56))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Adding user notification for rejected send transaction %@",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_10025972C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(_BYTE *)(a1 + 56))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Adding user notification for rejected receive transaction %@",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_100259800(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(_BYTE *)(a1 + 56))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Adding user notification for declined transaction %@",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_1002598D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = v3;
  if (v3 && [v3 isActive])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Found an existing active user notification for received transaction. Tearing down banner.",  v7,  2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10025A244(void *a1, void *a2)
{
  id v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:1209600.0]);

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  if (v5)
  {
    [v5 updateWithNewBalance:a1[4] andNewReminderDate:v7];
    [*(id *)(a1[5] + 8) insertUserNotification:v5];
  }

  else
  {
    uint64_t v6 = -[PDPeerPaymentBalanceReminderUserNotification initWithPassUniqueIdentifier:currentBalance:reminderDate:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentBalanceReminderUserNotification),  "initWithPassUniqueIdentifier:currentBalance:reminderDate:",  a1[6],  a1[4],  v7);
    [*(id *)(a1[5] + 8) insertUserNotification:v6];
  }
}

void sub_10025BE1C(uint64_t a1)
{
}

void sub_10025BEE4(uint64_t a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) payLaterFinancingPlansRequiringMerchantCleanupWithTransactionDateWithinWindow:*(double *)(a1 + 48)]);
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v19 = [v1 count];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Processing %ld financing plans for merchant reprocessing",  buf,  0xCu);
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = v1;
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        v9 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue([v9 planIdentifier]);
          v11 = (void *)objc_claimAutoreleasedReturnValue([v9 merchant]);
          *(_DWORD *)buf = 138412546;
          id v19 = v10;
          __int16 v20 = 2112;
          v21 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Processing plan for reprocessing: %@, merchant: %@",  buf,  0x16u);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
    }

    while (v6);
  }

  [*(id *)(a1 + 32) processFinancingPlans:v4];
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(void))(v12 + 16))();
  }
}

void sub_10025C5E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 merchant]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 brand]);
  id v6 = [v3 result];
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) planIdentifier]);
    *(_DWORD *)buf = 138413058;
    v22 = v9;
    __int16 v23 = 2048;
    id v24 = v6;
    __int16 v25 = 2112;
    uint64_t v26 = v4;
    __int16 v27 = 2112;
    uint64_t v28 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Completed look up of maps data for financing plan id %@ with result %ld. Maps merchant: %@, maps brand: %@",  buf,  0x2Au);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
  v11 = v10;
  if (v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___PKPayLaterMerchant);
  }
  v13 = v12;

  -[PKPayLaterMerchant setFallbackCategory:](v13, "setFallbackCategory:", [v3 fallbackCategory]);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  -[PKPayLaterMerchant setLastMerchantReprocessingDate:](v13, "setLastMerchantReprocessingDate:", v14);

  if (!(v4 | v5)) {
    -[PKPayLaterMerchant setRequiresMerchantReprocessing:](v13, "setRequiresMerchantReprocessing:", 1LL);
  }
  if (v6 == (id)1)
  {
    -[PKPayLaterMerchant setRequiresMerchantReprocessing:](v13, "setRequiresMerchantReprocessing:", 1LL);
    -[PKPayLaterMerchant setLastMerchantReprocessingDate:](v13, "setLastMerchantReprocessingDate:", 0LL);
  }

  else if (v6 == (id)2 && v4 | v5)
  {
    -[PKPayLaterMerchant setMapsMerchant:](v13, "setMapsMerchant:", v4);
    -[PKPayLaterMerchant setMapsBrand:](v13, "setMapsBrand:", v5);
    -[PKPayLaterMerchant setRequiresMerchantReprocessing:](v13, "setRequiresMerchantReprocessing:", 0LL);
  }

  __int128 v15 = *(void **)(a1 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10025C868;
  v18[3] = &unk_10064FF48;
  v18[4] = v15;
  __int128 v16 = v13;
  id v19 = v16;
  id v20 = *(id *)(a1 + 32);
  [v15 _accessObserversWithHandler:v18];
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17) {
    (*(void (**)(void))(v17 + 16))();
  }
}

id sub_10025C868(void *a1, void *a2)
{
  return _[a2 payLaterMerchantProcessor:a1[4] didProcessPayLaterMerchant:a1[5] forFinancingPlan:a1[6]];
}

id sub_10025D190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PassLiveRender,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10025D290(id a1, PKPassLiveRender *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassLiveRender setEnabled:](v4, "setEnabled:", [a3 BOOLValue]);
}

void sub_100260414( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = PDTaskWarning(0LL, *(void **)(a1 + 40), a2, @"Received invalid pass data", a5, a6, a7, a8, v10);
  id v11 = (id)objc_claimAutoreleasedReturnValue(v9);
  [v8 addObject:v11];
}

void sub_1002621E4(uint64_t a1, void *a2)
{
  v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 archiveData]);
  [v2 safelyAddObject:v3];
}

id sub_100262C64(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v4, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss Z");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v4, "stringFromDate:", v5));

  uint64_t v7 = @"[%@] %@";
  if (a2) {
    uint64_t v7 = @"[%@] %@. This will be treated as an error in a future release.";
  }
  uint64_t v8 = v7;
  uint64_t v9 = PDErrorDescription(v3);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  uint64_t v11 = PKStringWithValidatedFormat(v8, @"%@%@");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  return v12;
}

void sub_100262E24(uint64_t a1, void *a2)
{
  v2 = *(void **)(a1 + 32);
  id v3 = sub_100262C64(a2, 1);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  [v2 addObject:v4];
}

void sub_100263690(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[3];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100263710;
  v4[3] = &unk_10063ABB8;
  uint64_t v5 = v2;
  [v3 accountsWithCompletion:v4];
}

id sub_100263710(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 72) = [a2 count] != 0;
  return [*(id *)(*(void *)(a1 + 32) + 64) recalculateNotificationNames];
}

void sub_100263804(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) _resurfaceRecentNotificationsForAccount:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) andPromote:*(unsigned __int8 *)(a1 + 40)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_100263980(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 dateByAddingTimeInterval:-43200.0]);
  id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 passUniqueIdentifierWithAssociatedAccountIdentifier:v5]);

  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    __int128 v8 = *(void **)(*(void *)(a1 + 32) + 24LL);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100263AB8;
    v11[3] = &unk_100650078;
    __int128 v10 = *(void **)(a1 + 40);
    v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    char v13 = *(_BYTE *)(a1 + 48);
    [v8 eventsForAccountIdentifier:v9 types:&__NSArray0__struct startDate:v3 endDate:v2 orderedByDate:-1 limit:0 completion:v11];
  }
}

void sub_100263AB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_100263B5C;
  v8[3] = &unk_10063B558;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 48);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  char v12 = *(_BYTE *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_100263B5C(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "_notificationForAccountEvent:account:",  *(void *)(*((void *)&v9 + 1) + 8 * (void)i),  *(void *)(a1 + 48),  (void)v9));
        __int128 v8 = v7;
        if (!*(_BYTE *)(a1 + 56)) {
          [v7 setSuppressionBehavior:2];
        }
        [v8 setReissueBannerOnUpdate:0];
        [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v8];
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

void sub_100264218(_Unwind_Exception *a1)
{
}

uint64_t sub_10026423C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10026424C(uint64_t a1)
{
}

void sub_100264254(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  __int128 v9 = *(void **)(a1[4] + 24LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100264314;
  v13[3] = &unk_1006500A0;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 accountWithIdentifier:v8 completion:v13];
}

void sub_100264314(uint64_t a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100264368(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  __int128 v9 = *(void **)(a1[4] + 24LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100264428;
  v13[3] = &unk_1006500C8;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 accountUsersForAccountWithIdentifier:v8 completion:v13];
}

uint64_t sub_100264428(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[PKAccountUserCollection alloc] initWithAccountUsers:v3];

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100264494(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) creditDetails]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 currencyCode]);

  id v4 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 associatedPassUniqueID]);
    id v6 = *(void **)(a1 + 32);
    id v7 = v5;
    uint64_t v8 = v6;
    if (v7 == v8)
    {

      goto LABEL_11;
    }

    __int128 v9 = v8;
    if (v7) {
      BOOL v10 = v8 == 0LL;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {

LABEL_38:
      goto LABEL_39;
    }

    unsigned __int8 v11 = -[NSMutableSet isEqualToString:](v7, "isEqualToString:", v8);

    if ((v11 & 1) != 0)
    {
LABEL_11:
      if (v3)
      {
        id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        id v12 = [[PKTransactionSource alloc] initWithPaymentPass:*(void *)(a1 + 40)];
        -[NSMutableSet addObject:](v7, "addObject:", v12);

        __int128 v82 = 0u;
        __int128 v83 = 0u;
        __int128 v80 = 0u;
        __int128 v81 = 0u;
        id v14 = [v13 countByEnumeratingWithState:&v80 objects:v85 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v81;
          do
          {
            for (i = 0LL; i != v15; i = (char *)i + 1)
            {
              if (*(void *)v81 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = [[PKTransactionSource alloc] initWithAccountUser:*(void *)(*((void *)&v80 + 1) + 8 * (void)i)];
              -[NSMutableSet addObject:](v7, "addObject:", v18);
            }

            id v15 = [v13 countByEnumeratingWithState:&v80 objects:v85 count:16];
          }

          while (v15);
        }

        id v19 = objc_alloc(&OBJC_CLASS___PKTransactionSourceCollection);
        id v20 = -[NSMutableSet copy](v7, "copy");
        id v21 = [v19 initWithTransactionSources:v20];

        v77[0] = _NSConcreteStackBlock;
        v77[1] = 3221225472LL;
        v77[2] = sub_100264BDC;
        v77[3] = &unk_1006500F0;
        v77[4] = *(void *)(a1 + 48);
        id v22 = v21;
        id v78 = v22;
        id v79 = *(id *)(a1 + 56);
        v70 = objc_retainBlock(v77);
        unsigned int v23 = [*(id *)(a1 + 64) containsObject:&off_1006904E8];
        id v24 = [*(id *)(a1 + 64) containsObject:&off_100690500];
        int v25 = (int)v24;
        if (PKIsPhone(v24, v26) && v23)
        {
          int v66 = v25;
          __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[PKSpendingSummaryFetcher previousStartOfWeekFromDate:]( &OBJC_CLASS___PKSpendingSummaryFetcher,  "previousStartOfWeekFromDate:",  *(void *)(a1 + 72)));
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[PKSpendingSummaryFetcher nextStartOfWeekFromDate:]( &OBJC_CLASS___PKSpendingSummaryFetcher,  "nextStartOfWeekFromDate:",  v27));
          uint64_t v29 = objc_claimAutoreleasedReturnValue([v28 dateByAddingTimeInterval:-1.0]);
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
          id v31 = [v30 component:16 fromDate:v28];

          v68 = (void *)v29;
          if (v31 == (id)1)
          {
            uint64_t Object = PKLogFacilityTypeGetObject(14LL);
            v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Ignoring weekly notification.",  buf,  2u);
            }
          }

          else
          {
            v35 = *(void **)(*(void *)(a1 + 48) + 16LL);
            v36 = (void *)objc_claimAutoreleasedReturnValue([v22 transactionSourceIdentifiers]);
            uint64_t v37 = objc_claimAutoreleasedReturnValue( [v35 transactionsForTransactionSourceIdentifiers:v36 withTransactionSource:0 withBackingData:1 startDate:v27 endDat e:v29 orderedByDate:1 limit:0]);
            uint64_t v38 = v29;
            v33 = (os_log_s *)v37;

            v39 = (void *)objc_claimAutoreleasedReturnValue( +[PKSpendingSummaryFetcher summaryWithTransactions:transactionSourceCollection:accountUser:currency:type:startDate:endDate:lastSummary:]( &OBJC_CLASS___PKSpendingSummaryFetcher,  "summaryWithTransactions:transactionSourceCollection:accountUser:currency:type:startDate:en dDate:lastSummary:",  v33,  v22,  0LL,  v3,  0LL,  v27,  v38,  0LL));
            ((void (*)(void *, void *))v70[2])(v70, v39);
            v40 = -[PDPassPaymentSpendingSummaryUserNotification initWithSpendingSummary:accountUserCollection:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassPaymentSpendingSummaryUserNotification),  "initWithSpendingSummary:accountUserCollection:forPassUniqueIdentifier:",  v39,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(void *)(a1 + 32));
            v41 = v40;
            if (v40)
            {
              v64 = *(void **)(*(void *)(a1 + 48) + 8LL);
              v42 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v40, "notificationIdentifier"));
              v74[0] = _NSConcreteStackBlock;
              v74[1] = 3221225472LL;
              v74[2] = sub_100264EC0;
              v74[3] = &unk_100650118;
              char v76 = *(_BYTE *)(a1 + 96);
              v74[4] = *(void *)(a1 + 48);
              v75 = v41;
              [v64 userNotificationWithIdentifier:v42 completion:v74];
            }
          }

          int v25 = v66;
        }

        if (v25)
        {
          v65 = v3;
          uint64_t v43 = PKStartOfMonth(*(void *)(a1 + 72));
          uint64_t v44 = objc_claimAutoreleasedReturnValue(v43);
          uint64_t Month = PKStartOfNextMonth(v44);
          v46 = (void *)objc_claimAutoreleasedReturnValue(Month);
          uint64_t v47 = objc_claimAutoreleasedReturnValue([v46 dateByAddingTimeInterval:-1.0]);

          v48 = *(void **)(*(void *)(a1 + 48) + 16LL);
          v49 = (void *)objc_claimAutoreleasedReturnValue([v22 transactionSourceIdentifiers]);
          id v50 = v22;
          uint64_t v51 = objc_claimAutoreleasedReturnValue( [v48 transactionsForTransactionSourceIdentifiers:v49 withTransactionSource:0 withBackingData:1 startDate:v44 endDate:v47  orderedByDate:1 limit:0]);

          v53 = (void *)objc_claimAutoreleasedReturnValue([v52 currencyCode]);
          uint64_t v63 = v47;
          v67 = (void *)v47;
          v69 = (void *)v51;
          v54 = (void *)v44;
          uint64_t v55 = v51;
          id v22 = v50;
          v56 = (void *)objc_claimAutoreleasedReturnValue( +[PKSpendingSummaryFetcher summaryWithTransactions:transactionSourceCollection:accountUser:currency:type:startDate:endDate:lastSummary:]( &OBJC_CLASS___PKSpendingSummaryFetcher,  "summaryWithTransactions:transactionSourceCollection:accountUser:currency:type:startDate:endD ate:lastSummary:",  v55,  v50,  0LL,  v53,  1LL,  v44,  v63,  0LL));

          ((void (*)(void *, void *))v70[2])(v70, v56);
          v57 = -[PDPassPaymentSpendingSummaryUserNotification initWithSpendingSummary:accountUserCollection:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassPaymentSpendingSummaryUserNotification),  "initWithSpendingSummary:accountUserCollection:forPassUniqueIdentifier:",  v56,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(void *)(a1 + 32));
          v58 = v57;
          if (v57)
          {
            v59 = *(void **)(*(void *)(a1 + 48) + 8LL);
            v60 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v57, "notificationIdentifier"));
            v71[0] = _NSConcreteStackBlock;
            v71[1] = 3221225472LL;
            v71[2] = sub_100264FF4;
            v71[3] = &unk_100650118;
            char v73 = *(_BYTE *)(a1 + 96);
            v71[4] = *(void *)(a1 + 48);
            v72 = v58;
            [v59 userNotificationWithIdentifier:v60 completion:v71];
          }

          else
          {
            uint64_t v61 = PKLogFacilityTypeGetObject(14LL);
            v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "No notification for monthly summary",  buf,  2u);
            }
          }

          id v3 = v65;
        }
      }

      else
      {
        uint64_t v34 = PKLogFacilityTypeGetObject(14LL);
        id v7 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "Missing current balance or currency code, not triggering summary notification",  buf,  2u);
        }
      }

      goto LABEL_38;
    }
  }

void sub_100264BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionSourceIdentifiers]);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 startDate]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 endDate]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( [v4 installmentPlanTransactionsForTransactionSourceIdentifiers:v5 accountIdentifier:v6 redeemed:1 withRedemptionT ype:0 startDate:v7 endDate:v8]);

  if ([v9 count])
  {
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v3 rewards]);
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 totalAmount]);
    id v31 = (NSString *)objc_claimAutoreleasedReturnValue([v11 currency]);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 totalAmount]);
    char v13 = (void *)objc_claimAutoreleasedReturnValue([v12 amount]);
    id v14 = v13;
    if (v13) {
      id v15 = v13;
    }
    else {
      id v15 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
    }
    uint64_t v16 = v15;

    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v17 = v9;
    id v18 = [v17 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v33;
      do
      {
        for (i = 0LL; i != v19; i = (char *)i + 1)
        {
          if (*(void *)v33 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
          unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 rewardsTotalAmount]);

          if (v23)
          {
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v22 rewardsTotalAmount]);
            uint64_t v25 = objc_claimAutoreleasedReturnValue(-[NSDecimalNumber decimalNumberByAdding:](v16, "decimalNumberByAdding:", v24));

            uint64_t v16 = (NSDecimalNumber *)v25;
          }
        }

        id v19 = [v17 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }

      while (v19);
    }

    uint64_t v26 = PKCurrencyAmountCreate(v16, v31, 0LL);
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    [v10 setTotalAmount:v27];

    objc_msgSend( v10,  "setTransactionCount:",  (char *)objc_msgSend(v10, "transactionCount") + (void)objc_msgSend(v17, "count"));
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v17 allObjects]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v10 transactions]);
    v30 = (void *)objc_claimAutoreleasedReturnValue([v28 arrayByAddingObjectsFromArray:v29]);
    [v10 setTransactions:v30];

    [v3 setRewards:v10];
  }
}

void sub_100264EC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(_BYTE *)(a1 + 48))
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v3];
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v4 setDate:v5];
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) date]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v8 = [v6 compare:v7];

  if (*(_BYTE *)(a1 + 48) || v3 && ([v3 isActive] & 1) != 0 || v8 != (id)-1)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int8 v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No notification for weekly summary", v11, 2u);
    }
  }
}

void sub_100264FF4(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8 && *(_BYTE *)(a1 + 48))
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v8];
    id v3 = *(void **)(a1 + 40);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v3 setDate:v4];
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) date]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v7 = [v5 compare:v6];
}

void sub_100265130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = 0LL;
}

id sub_1002651F0(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10026524C;
  v5[3] = &unk_100650168;
  v5[4] = v2;
  return [v2 _notificationForAccountEvent:v1 withManager:v3 completion:v5];
}

id sub_10026524C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:a2];
}

id sub_100265308(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100265364;
  v5[3] = &unk_100650168;
  v5[4] = v2;
  return [v2 _notificationForAccountEvent:v1 withManager:v3 completion:v5];
}

void sub_100265364(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    [v3 setSuppressionBehavior:2];
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v3];
  }

id sub_100265460(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002654BC;
  v5[3] = &unk_100650168;
  v5[4] = v2;
  return [v2 _notificationForAccountEvent:v1 withManager:v3 completion:v5];
}

id sub_1002654BC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:a2];
}

void sub_1002655A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pk_setByApplyingBlock:", &stru_1006501A8));
  if ([v2 count])
  {
    [*(id *)(*(void *)(a1 + 40) + 16) deleteAccountPendingFamilyMembersWithAccountIdentifier:*(void *)(a1 + 48) altDSIDs:v2];
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v3 = v2;
    id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v17;
      do
      {
        id v7 = 0LL;
        do
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountPendingFamilyMemberReminderNotification notificationIdentifierForAltDSID:]( &OBJC_CLASS___PDAccountPendingFamilyMemberReminderNotification,  "notificationIdentifierForAltDSID:",  *(void *)(*((void *)&v16 + 1) + 8LL * (void)v7)));
          [*(id *)(*(void *)(a1 + 40) + 8) removeUserNotificationWithIdentifier:v8];

          id v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v5);
    }
  }

  BOOL v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  unsigned __int8 v11 = *(void **)(v9 + 24);
  uint64_t v12 = *(void *)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100265768;
  v13[3] = &unk_100639840;
  void v13[4] = v9;
  id v14 = v10;
  id v15 = *(id *)(a1 + 56);
  [v11 accountWithIdentifier:v12 completion:v13];
}

id sub_100265760(id a1, PKAccountUser *a2)
{
  return -[PKAccountUser altDSID](a2, "altDSID");
}

void sub_100265768(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10026581C;
  v9[3] = &unk_10063B060;
  id v10 = v4;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v3;
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_10026581C(uint64_t a1)
{
  id v3 = [[PKAccountUserCollection alloc] initWithAccountUsers:*(void *)(a1 + 32)];
  id v2 = [[PKAccountUserCollection alloc] initWithAccountUsers:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updateAccountUserMonthlySpendLimitNotificationsForOldAccount:0 newAccount:*(void *)(a1 + 56) accountUserCollection:v3];
  [*(id *)(a1 + 48) _updateAccountUserIdentityStatusNotificationsWithAccount:*(void *)(a1 + 56) accountUserCollection:v3 oldAccountUserCollection:v2];
}

void *sub_1002658EC(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 72))
  {
    *(_BYTE *)(v1 + 72) = 1;
    return [*(id *)(result[4] + 64) recalculateNotificationNames];
  }

  return result;
}

void sub_1002659B8(id *a1)
{
  if ([a1[4] feature] == (id)3)
  {
    _[a1[5] updatedPayLaterAccount:a1[4] oldAccount:a1[6]];
    return;
  }

  if ([a1[4] feature] == (id)5)
  {
    _[a1[5] updatedSavingsAccount:a1[4] oldAccount:a1[6]];
    return;
  }

  else {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v3 = 0;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[5] + 2) passUniqueIdentifierWithAssociatedAccountIdentifier:v4]);
  if (((v3 ^ 1 | v2) & 1) != 0)
  {
    if (((v2 ^ 1 | v3) & 1) == 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v51 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Removing notifications for account %@",  buf,  0xCu);
      }

      if (!v5) {
        goto LABEL_47;
      }
      [*((id *)a1[5] + 1) removeUserNotificationsForPassUniqueIdentifier:v5 ofType:17];
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v8 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v51 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Resurfacing notifications for account %@",  buf,  0xCu);
    }

    [a1[5] _resurfaceRecentNotificationsForAccount:a1[4] andPromote:0];
  }

  if (v5)
  {
LABEL_21:
    id v10 = (char *)[a1[6] state];
    id v11 = (char *)[a1[4] state];
    id v12 = [a1[6] stateReason];
    id v13 = [a1[4] stateReason];
    BOOL v15 = v13 == (id)8 && v12 != (id)8;
    if ((unint64_t)(v11 - 2) >= 2)
    {
      if (v11 == (char *)4
        && (char *)[a1[4] accessLevel] - 1 <= (char *)1
        && (unint64_t)(v10 - 1) <= 2
        && [a1[4] stateReason] == (id)13)
      {
        BOOL v15 = 1;
        unsigned int v3 = 1;
      }
    }

    else if (v10 == (char *)1)
    {
      BOOL v15 = 1;
    }

    if (v15 && v3)
    {
      uint64_t v37 = objc_alloc(&OBJC_CLASS___PDPassAccountStateChangeUserNotification);
      id v16 = [a1[4] accessLevel];
      unsigned int v17 = v3;
      __int128 v18 = v4;
      id v19 = [a1[4] feature];
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] creditDetails]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 accountSummary]);
      id v22 = [v21 requiresDebtCollectionNotices];
      id v23 = v19;
      id v4 = v18;
      unsigned int v3 = v17;
      id v24 = -[PDPassAccountStateChangeUserNotification initWithPassUniqueIdentifier:accountState:accountStateReason:accessLevel:featureIdentifier:requiresDebtCollectionNotices:]( v37,  "initWithPassUniqueIdentifier:accountState:accountStateReason:accessLevel:featureIdentifier:requiresDebtCollectionNotices:",  v5,  v11,  v13,  v16,  v23,  v22);

      [*((id *)a1[5] + 1) insertUserNotification:v24];
    }

    if ([a1[4] feature] == (id)2)
    {
      if (v3) {
        [a1[5] _updateInstallmentNotificationsForOldAccount:a1[6] newAccount:a1[4] passUniqueIdentifier:v5];
      }
      uint64_t v25 = a1[5];
      id v26 = a1[6];
      __int16 v27 = (void *)v25[3];
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_100265FA0;
      v46[3] = &unk_1006501D0;
      v46[4] = v25;
      id v47 = v26;
      id v48 = a1[4];
      id v49 = v5;
      [v27 creditRecoveryPaymentPlanInformationForAccountIdentifier:v4 allowFetchFromServer:1 completion:v46];
      uint64_t v28 = (void *)*((void *)a1[5] + 3);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountIdentifier]);
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472LL;
      v43[2] = sub_100265FB4;
      v43[3] = &unk_10063C658;
      id v30 = a1[6];
      v43[4] = a1[5];
      id v44 = v30;
      id v45 = a1[4];
      [v28 accountUsersForAccountWithIdentifier:v29 completion:v43];

      if (([a1[6] isSharedAccount] & 1) == 0
        && [a1[4] isSharedAccount])
      {
        uint64_t v31 = PKLogFacilityTypeGetObject(14LL);
        __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          uint64_t v51 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Updating shared account cloud store for account %{public}@ since it just became a shared account",  buf,  0xCu);
        }

        __int128 v33 = (void *)*((void *)a1[5] + 3);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_1002660B4;
        v41[3] = &unk_10064B360;
        id v42 = v4;
        [v33 updateSharedAccountCloudStoreWithAccountIdentifier:v42 completion:v41];
      }

      __int128 v34 = (void *)*((void *)a1[5] + 3);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountIdentifier]);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_100266174;
      v39[3] = &unk_1006501F8;
      int8x16_t v38 = *((int8x16_t *)a1 + 2);
      id v36 = (id)v38.i64[0];
      int8x16_t v40 = vextq_s8(v38, v38, 8uLL);
      [v34 scheduledPaymentsWithAccountIdentifier:v35 includeFailedRecurringPayments:0 allowFetchFromServer:1 completion:v39];
    }
  }

id sub_100265FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _updatePastDueNotificationsForOldAccount:*(void *)(a1 + 40) newAccount:*(void *)(a1 + 48) passUniqueIdentifier:*(void *)(a1 + 56) enrolledInRecoveryPaymentPlan:a3];
}

void sub_100265FB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_100266064;
  v8[3] = &unk_10063B060;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 48);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_100266064(uint64_t a1)
{
  id v2 = [[PKAccountUserCollection alloc] initWithAccountUsers:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _updateAccountUserMonthlySpendLimitNotificationsForOldAccount:*(void *)(a1 + 48) newAccount:*(void *)(a1 + 56) accountUserCollection:v2];
}

void sub_1002660B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated shared account cloud store following an account becoming shared for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

id sub_100266174(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _recomputePaymentNotificationsForScheduledPayments:a2 account:*(void *)(a1 + 40)];
}

void sub_100266240(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v4 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1002662E8;
  v8[3] = &unk_100650220;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v7 = v3;
  [v6 creditRecoveryPaymentPlanInformationForAccountIdentifier:v5 allowFetchFromServer:1 completion:v8];
}

id sub_1002662E8(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_updatePastDueNotificationsForOldAccount:newAccount:passUniqueIdentifier:enrolledInRecoveryPaymentPlan:");
}

id sub_1002663AC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v2 removeUserNotificationsForPassUniqueIdentifier:v3 ofType:4];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v4 removeUserNotificationsForPassUniqueIdentifier:v5 ofType:17];

  id v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v6 removeUserNotificationsForPassUniqueIdentifier:v7 ofType:18];

  int v8 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v8 removeUserNotificationsForPassUniqueIdentifier:v9 ofType:22];

  id v10 = *(void **)(*(void *)(a1 + 32) + 8LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v10 removeUserNotificationsForPassUniqueIdentifier:v11 ofType:29];

  id v12 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v12 removeUserNotificationsForPassUniqueIdentifier:v13 ofType:21];

  id v14 = *(void **)(*(void *)(a1 + 32) + 8LL);
  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v14 removeUserNotificationsForPassUniqueIdentifier:v15 ofType:25];

  id v16 = *(void **)(*(void *)(a1 + 32) + 8LL);
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v16 removeUserNotificationsForPassUniqueIdentifier:v17 ofType:26];

  __int128 v18 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  [v18 removeUserNotificationsForPassUniqueIdentifier:v19 ofType:76];

  id v20 = [*(id *)(a1 + 40) feature];
  if (v20 == (id)3)
  {
    [*(id *)(a1 + 32) removePayLaterNotificationsForAccount:*(void *)(a1 + 40)];
  }

  else if (v20 == (id)5)
  {
    [*(id *)(a1 + 32) removeSavingsNotificationsForAccount:*(void *)(a1 + 40)];
  }

  id v21 = *(void **)(a1 + 48);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1002665AC;
  v23[3] = &unk_10063ABB8;
  v23[4] = *(void *)(a1 + 32);
  return [v21 accountsWithCompletion:v23];
}

id sub_1002665AC(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 72) = [a2 count] != 0;
  return [*(id *)(*(void *)(a1 + 32) + 64) recalculateNotificationNames];
}

void sub_100266694(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100266710;
  v4[3] = &unk_100639868;
  void v4[4] = v1;
  id v5 = *(id *)(a1 + 48);
  [v3 accountWithIdentifier:v2 completion:v4];
}

id *sub_100266710(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)_[result[4] _recomputePaymentNotificationsForScheduledPayments:result[5] account:a2];
  }
  return result;
}

void sub_1002667D4(uint64_t a1, void *a2)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "accountIdentifier", (void)v16));
        id v10 = *(void **)(a1 + 32);
        id v11 = v9;
        id v12 = v10;
        if (v11 == v12)
        {

LABEL_18:
          if ([v8 feature] == (id)5) {
            [*(id *)(a1 + 40) updatedFundingSources:*(void *)(a1 + 48) forSavingsAccount:v8];
          }
          goto LABEL_20;
        }

        id v13 = v12;
        if (v11) {
          BOOL v14 = v12 == 0LL;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
        }

        else
        {
          unsigned int v15 = [v11 isEqualToString:v12];

          if (v15) {
            goto LABEL_18;
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_100266FDC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) scheduledNotificationActivitiesForPassUniqueIdentifier:*(void *)(a1 + 40) ofType:29]);
  id v3 = (PDAccountPaymentPastDueUserNotification *)[v2 count];
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_DWORD *)buf = 134217984;
      id v30 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%lu existing past due scheduled activities",  buf,  0xCu);
    }

    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v7 = v2;
    id v8 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v8)
    {
      id v9 = v8;
      id v23 = v2;
      uint64_t v10 = *(void *)v25;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v25 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(PDAccountPaymentPastDueUserNotification **)(*((void *)&v24 + 1) + 8LL * (void)i);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification date](v12, "date"));
          [v13 timeIntervalSinceNow];
          double v15 = v14;

          if (v15 <= 0.0)
          {
            [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v12];
          }

          else
          {
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v30 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Removing upcoming past due scheduled notification: %@",  buf,  0xCu);
            }

            [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v12];
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }

      while (v9);
      id v5 = (os_log_s *)v7;
      uint64_t v2 = v23;
    }

    else
    {
      id v5 = (os_log_s *)v7;
    }
  }

  else if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "No existing past due scheduled notification to remove",  buf,  2u);
  }

  if ([*(id *)(a1 + 48) supportsShowNotifications]
    && ([*(id *)(a1 + 48) blockNotifications] & 1) == 0)
  {
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) creditDetails]);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 accountSummary]);

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 pastDueAmount]);
    __int128 v19 = v18;
    if (v18 && objc_msgSend(v18, "pk_isPositiveNumber") && !*(_BYTE *)(a1 + 56))
    {
      id v20 = -[PDAccountPaymentPastDueUserNotification initWithPassUniqueIdentifier:account:]( objc_alloc(&OBJC_CLASS___PDAccountPaymentPastDueUserNotification),  "initWithPassUniqueIdentifier:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
      if (v20)
      {
        [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v20];
        uint64_t v21 = PKLogFacilityTypeGetObject(14LL);
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v30 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Scheduled past due notification: %@",  buf,  0xCu);
        }
      }
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 8) updateWalletBadgeCount];
}

void sub_1002673E8(id *a1)
{
  v52 = (void *)objc_claimAutoreleasedReturnValue([a1[4] associatedPassUniqueID]);
  unsigned __int8 v2 = [*((id *)a1[5] + 2) passExistsWithUniqueID:v52];
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (v5)
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Recomputing Payment Reminder and Payment Due Scheduled Notifications",  (uint8_t *)&buf,  2u);
    }

    id v47 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] creditDetails]);
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v6 accountSummary]);

    id v49 = (void *)objc_claimAutoreleasedReturnValue([v51 paymentDueDate]);
    id v48 = (void *)objc_claimAutoreleasedReturnValue([v51 remainingMinimumPayment]);
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v51 remainingStatementBalance]);
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "pk_objectsPassingTest:", &stru_100650260));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sortedArrayUsingComparator:&stru_1006502A0]);

    id v50 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
    if (!v50)
    {
LABEL_15:
      unsigned int v13 = [a1[4] supportsShowNotifications];
      unsigned int v14 = [a1[4] blockNotifications];
      if ((v13 ^ 1 | v14) == 1)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109376;
          DWORD1(buf) = v13;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Skipping 'Payment Due'' notifications for account with supportsShowNotifications:%d, blockNotifications:%d",  (uint8_t *)&buf,  0xEu);
        }

        double v15 = v4;
        id v44 = v8;
        goto LABEL_42;
      }

      v78[0] = _NSConcreteStackBlock;
      v78[1] = 3221225472LL;
      v78[2] = sub_100267EEC;
      v78[3] = &unk_1006502C8;
      id v79 = v49;
      id v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_objectsPassingTest:", v78));

      uint64_t v74 = 0LL;
      v75 = &v74;
      uint64_t v76 = 0x2020000000LL;
      if (v48) {
        BOOL v16 = [v48 compare:v46] != (id)1;
      }
      else {
        BOOL v16 = 0;
      }
      BOOL v77 = v16;
      uint64_t v70 = 0LL;
      v71 = &v70;
      uint64_t v72 = 0x2020000000LL;
      if (v45)
      {
        BOOL v73 = [v45 compare:v46] != (id)1;
        if (v48)
        {
          *(void *)&__int128 buf = 0LL;
          *((void *)&buf + 1) = &buf;
          uint64_t v89 = 0x3032000000LL;
          v90 = sub_10026423C;
          v91 = sub_10026424C;
          id v92 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
          __int128 v17 = v48;
          if (!*((_BYTE *)v75 + 24) && [v44 count])
          {
            v64[0] = _NSConcreteStackBlock;
            v64[1] = 3221225472LL;
            v64[2] = sub_100267F4C;
            v64[3] = &unk_1006502F0;
            v67 = &v74;
            v68 = &v70;
            id v65 = v43;
            p___int128 buf = &buf;
            id v66 = v48;
            [v44 enumerateObjectsUsingBlock:v64];

            __int128 v17 = v48;
          }

          id v18 = [a1[4] stateReason];
          if (*((_BYTE *)v75 + 24))
          {
            if (v18 == (id)2)
            {
              __int128 v19 = v4;
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v20 = PKAccountStateReasonToString(2LL);
                uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
                *(_DWORD *)__int128 v82 = 138477827;
                *(void *)__int128 v83 = v21;
                _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Skipping 'Payment Reminder' notifications for stateReason: %{private}@",  v82,  0xCu);

LABEL_36:
                __int128 v19 = v4;
                goto LABEL_40;
              }

              goto LABEL_40;
            }

            if (*((_BYTE *)v71 + 24) || [v44 count])
            {
              __int128 v19 = v4;
              if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
              {
                int v22 = *((unsigned __int8 *)v75 + 24);
                int v23 = *((unsigned __int8 *)v71 + 24);
                id v24 = [v44 count];
                *(_DWORD *)__int128 v82 = 67109632;
                *(_DWORD *)__int128 v83 = v22;
                *(_WORD *)&v83[4] = 1024;
                *(_DWORD *)&v83[6] = v23;
                __int16 v84 = 2048;
                id v85 = v24;
                _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Skipping 'Payment Reminder' notifications with minimumPaymentMet: %d, statementBalanceMet: %d, numPayments: %lu",  v82,  0x18u);
                goto LABEL_36;
              }

void sub_100267DBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

BOOL sub_100267E1C(id a1, PKAccountPayment *a2, unint64_t a3, BOOL *a4)
{
  return -[PKAccountPayment state](a2, "state", a3, a4) == (id)1;
}

int64_t sub_100267E3C(id a1, PKAccountPayment *a2, PKAccountPayment *a3)
{
  id v4 = a2;
  BOOL v5 = a3;
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountPayment paymentDate](v4, "paymentDate"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountPayment paymentDate](v5, "paymentDate"));
  id v8 = [v6 compare:v7];

  if (!v8)
  {
    unsigned int v9 = -[PKAccountPayment isRecurring](v4, "isRecurring");
    unsigned int v10 = v9 ^ -[PKAccountPayment isRecurring](v5, "isRecurring");
    uint64_t v11 = -1LL;
    if (!v9) {
      uint64_t v11 = 1LL;
    }
    if (v10) {
      id v8 = (id)v11;
    }
    else {
      id v8 = 0LL;
    }
  }

  return (int64_t)v8;
}

BOOL sub_100267EEC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 paymentDate]);
  uint64_t v5 = PKLaterDate(v3, v4);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = v6 == *(void **)(a1 + 32);

  return v7;
}

void sub_100267F4C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v14 = a2;
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v14 scheduleDetails]);
  id v7 = [v6 preset];

  if (v7 == (id)1)
  {
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v14 currencyAmount]);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 amount]);

    if (v10 && ([v10 isEqualToNumber:*(void *)(a1 + 32)] & 1) == 0)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) decimalNumberByAdding:v10]);
      uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
      unsigned int v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    if ([*(id *)(a1 + 40) compare:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)] != (id)1) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    }
  }

  else
  {
    if (v7 == (id)3)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
      goto LABEL_12;
    }

    if (v7 == (id)2)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
LABEL_12:
      *(_BYTE *)(v8 + 24) = 1;
    }
  }

  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
}

void sub_100268088(uint64_t a1, void *a2)
{
  id v32 = a2;
  if ([v32 count])
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    id v4 = *(id *)(a1 + 32);
    id v5 = [v4 countByEnumeratingWithState:&v42 objects:v50 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v43;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v43 != v7) {
            objc_enumerationMutation(v4);
          }
          unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v42 + 1) + 8 * (void)i) notificationIdentifier]);
          -[NSMutableArray addObject:](v3, "addObject:", v9);
        }

        id v6 = [v4 countByEnumeratingWithState:&v42 objects:v50 count:16];
      }

      while (v6);
    }

    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id v10 = v32;
    id v11 = [v10 countByEnumeratingWithState:&v38 objects:v49 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v39;
      do
      {
        for (j = 0LL; j != v12; j = (char *)j + 1)
        {
          if (*(void *)v39 != v13) {
            objc_enumerationMutation(v10);
          }
          double v15 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)j);
          if ([v15 preventAutomaticDismissal])
          {
            BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v15 notificationIdentifier]);
            unsigned __int8 v17 = -[NSMutableArray containsObject:](v3, "containsObject:", v16);

            if ((v17 & 1) == 0)
            {
              uint64_t Object = PKLogFacilityTypeGetObject(14LL);
              __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                id v48 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Making active notification no longer sticky since it is no longer in the list of payment due notificat ions for tracking: %@",  buf,  0xCu);
              }

              [v15 setPreventAutomaticDismissal:0];
              [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v15];
            }
          }
        }

        id v12 = [v10 countByEnumeratingWithState:&v38 objects:v49 count:16];
      }

      while (v12);
    }
  }

  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v20 = *(id *)(a1 + 32);
  id v21 = [v20 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v35;
    do
    {
      for (k = 0LL; k != v22; k = (char *)k + 1)
      {
        if (*(void *)v35 != v23) {
          objc_enumerationMutation(v20);
        }
        __int128 v25 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)k);
        int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 date]);
        int v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        id v28 = [v26 compare:v27];

        uint64_t v29 = *(void *)(a1 + 40);
        id v30 = *(void **)(v29 + 8);
        if (v28 == (id)-1LL)
        {
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v25 notificationIdentifier]);
          v33[0] = _NSConcreteStackBlock;
          v33[1] = 3221225472LL;
          v33[2] = sub_100268448;
          v33[3] = &unk_100644C98;
          v33[4] = *(void *)(a1 + 40);
          v33[5] = v25;
          [v30 userNotificationWithIdentifier:v31 completion:v33];
        }

        else
        {
          [*(id *)(v29 + 8) insertUserNotification:v25];
        }
      }

      id v22 = [v20 countByEnumeratingWithState:&v34 objects:v46 count:16];
    }

    while (v22);
  }
}

void sub_100268448(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 isActive])
  {
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping insertion of notification with past fire date since it no longer exists in the notification center: %@",  (uint8_t *)&v8,  0xCu);
    }
  }
}

void sub_100268908(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1002689B8;
  v10[3] = &unk_10063BA88;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = *(id *)(a1 + 48);
  id v13 = v3;
  id v14 = v8;
  id v9 = v3;
  dispatch_async(v5, v10);
}

void sub_1002689B8(id *a1)
{
  if ([a1[4] type] == (id)1
    && ([a1[4] updateReasonIsInitialDownload] & 1) == 0)
  {
    unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] items]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 anyObject]);

    if (v3)
    {
      uint64_t v5 = objc_opt_class(&OBJC_CLASS___PKAccountRewards, v4);
      if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
      {
        id v6 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v3 status]);
        if (v6 == @"success"
          || (id v8 = v6) != 0LL
          && (unsigned __int8 v9 = -[__CFString isEqualToString:](v6, "isEqualToString:", @"success"),
              v8,
              v8,
              (v9 & 1) != 0))
        {
          [a1[5] updateDailyCashNotificationsWithAccount:a1[6]];
          (*((void (**)(void))a1[7] + 2))();
        }

        else if ((PKSharedCacheGetBoolForKey(PKSharedCacheDailyCashIdentityVerificationTriggeredKey, v7) & 1) == 0)
        {
          id v11 = (void *)*((void *)a1[5] + 7);
          v13[0] = _NSConcreteStackBlock;
          v13[1] = 3221225472LL;
          v13[2] = sub_100268B98;
          v13[3] = &unk_100650340;
          id v14 = a1[7];
          [v11 accountWithPreventingServerFetch:0 completion:v13];
        }
      }
    }
  }

  else if ([a1[6] supportsShowNotifications] {
         && ([a1[6] blockNotifications] & 1) == 0)
  }
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([a1[5] _notificationForAccountEvent:a1[4] account:a1[6]]);
    else {
      id v10 = 0LL;
    }
    (*((void (**)(id, id))a1[7] + 2))(a1[7], v10);
  }

  else
  {
    (*((void (**)(void))a1[7] + 2))();
  }

void sub_100268B98(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6 && ((char *)[v6 state] - 1 > (char *)1 || objc_msgSend(v6, "stage") == (id)3))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v3 = objc_alloc(&OBJC_CLASS___PDPeerPaymentNeedsVerificationUserNotification);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 associatedPassUniqueID]);
    uint64_t v5 = -[PDPeerPaymentNeedsVerificationUserNotification initWithPassUniqueIdentifier:]( v3,  "initWithPassUniqueIdentifier:",  v4);

    PKSharedCacheSetBoolForKey(1LL, PKSharedCacheDailyCashIdentityVerificationTriggeredKey);
    PKSharedCacheSetBoolForKey(0LL, PKSharedCacheHideFixPeerPaymentKey);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100268F84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100269004;
  v7[3] = &unk_1006392B0;
  v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100269004(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
  [v1 updateDailyCashNotificationsForAccountIdentifier:v2 date:0 completion:0];
}

void sub_100269260( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100269288(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v4 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100269370;
  v9[3] = &unk_1006503E0;
  uint64_t v7 = *(void *)(a1 + 80);
  void v9[4] = v4;
  uint64_t v15 = v7;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v12 = v3;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v8 = v3;
  [v6 userNotificationWithIdentifier:v5 completion:v9];
}

void sub_100269370(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v9[2] = sub_100269464;
  v9[3] = &unk_1006503B8;
  uint64_t v17 = *(void *)(a1 + 80);
  v9[1] = 3221225472LL;
  id v10 = v4;
  id v11 = *(id *)(a1 + 48);
  id v12 = v3;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 72);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_100269464(uint64_t a1)
{
  uint64_t v2 = PKStartOfDay(*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = PKEndOfDay(*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = [*(id *)(a1 + 32) component:8 fromDate:*(void *)(a1 + 40)];
  id v9 = [*(id *)(a1 + 32) component:8 fromDate:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) date]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v10 timeIntervalSinceDate:v11];
  double v13 = v12;

  if (!*(void *)(a1 + 56) && *(void *)(a1 + 48) && (v13 > 0.0 ? (BOOL v19 = v8 == v9) : (BOOL v19 = 0), v19))
  {
    uint64_t v20 = PKStartOfDay(*(void *)(a1 + 40));
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) date]);
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Daily Cash notification should update existing scheduled notifiction for today and create a new one for tomorrow",  buf,  2u);
    }

    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v26 = *(void *)(a1 + 72);
    int v27 = *(void **)(v25 + 24);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1002696D8;
    v31[3] = &unk_100650390;
    uint64_t v28 = *(void *)(a1 + 88);
    v31[4] = v25;
    uint64_t v35 = v28;
    id v32 = v7;
    id v33 = *(id *)(a1 + 72);
    id v34 = *(id *)(a1 + 80);
    [v27 dailyCashNotificationForStartDate:v21 endDate:v22 accountIdentifier:v26 completion:v31];
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 72);
    id v16 = *(void **)(v14 + 24);
    uint64_t v17 = *(void **)(a1 + 80);
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_100269920;
    v29[3] = &unk_100650368;
    v29[4] = v14;
    id v30 = v17;
    [v16 dailyCashNotificationForStartDate:v18 endDate:v7 accountIdentifier:v15 completion:v29];
  }
}

void sub_1002696D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_1002697A4;
  v8[3] = &unk_100641190;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 48);
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  uint64_t v13 = *(void *)(a1 + 64);
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1002697A4(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 24);
  uint64_t v4 = (void *)a1[8];
  uint64_t v5 = *(void *)(*(void *)(a1[9] + 8LL) + 40LL);
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10026984C;
  v8[3] = &unk_100650368;
  void v8[4] = v2;
  id v9 = v4;
  [v3 dailyCashNotificationForStartDate:v5 endDate:v7 accountIdentifier:v6 completion:v8];
}

void sub_10026984C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002698E0;
  block[3] = &unk_100639AF0;
  block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1002698E0(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100269920(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002699B4;
  block[3] = &unk_100639AF0;
  block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1002699B4(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100269AE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100269BA8;
  block[3] = &unk_10063AE10;
  id v8 = v4;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_100269BA8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUsers]);
  id v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pk_setByApplyingBlock:", &stru_100650448));
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  id v3 = *(id *)(v1 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v64 objects:v69 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v65;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v65 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v64 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accountUser]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSID]);
        unsigned __int8 v11 = [v50 containsObject:v10];

        if ((v11 & 1) == 0) {
          [*(id *)(*(void *)(v1 + 48) + 8) removeUserNotification:v8];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v64 objects:v69 count:16];
    }

    while (v5);
  }

  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  id v12 = v2;
  id v13 = [v12 countByEnumeratingWithState:&v60 objects:v68 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v49 = *(void *)v61;
    id v43 = v12;
    uint64_t v48 = v1;
    do
    {
      uint64_t v15 = 0LL;
      id v44 = v14;
      do
      {
        if (*(void *)v61 != v49) {
          objc_enumerationMutation(v12);
        }
        id v16 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)v15);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "notificationSettings", v43));
        unsigned int v18 = [v17 transactionNotificationsEnabled];
        BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v17 monthlySpendNotificationThreshold]);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) creditDetails]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 currencyCode]);

        if (v18) {
          BOOL v22 = v19 == 0LL;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22 && (objc_msgSend(v19, "pk_isNotANumber") & 1) == 0 && v21)
        {
          uint64_t v23 = objc_claimAutoreleasedReturnValue([v16 altDSID]);
          uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(v1 + 56) accountIdentifier]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v48 + 64) creditDetails]);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 accountSummary]);
          int v27 = (void *)objc_claimAutoreleasedReturnValue([v26 accountUserActivityForAccountUserAltDSID:v23]);
          id v47 = (void *)objc_claimAutoreleasedReturnValue([v27 totalSpending]);

          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v48 + 56) creditDetails]);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 accountSummary]);
          v46 = (void *)v23;
          id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 accountUserActivityForAccountUserAltDSID:v23]);
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 totalSpending]);

          id v32 = (void *)v24;
          uint64_t v1 = v48;

          if (v31)
          {
            id v33 = *(void **)(v48 + 40);
            v57[0] = _NSConcreteStackBlock;
            v57[1] = 3221225472LL;
            v57[2] = sub_10026A078;
            v57[3] = &unk_100650470;
            __int128 v45 = v32;
            id v34 = v32;
            id v58 = v34;
            __int128 v59 = v16;
            unsigned int v35 = objc_msgSend(v33, "pk_containsObjectPassingTest:", v57);
            if (v47) {
              BOOL v36 = [v47 compare:v19] != (id)1;
            }
            else {
              BOOL v36 = 0;
            }
            id v37 = [v31 compare:v19];
            if (((v35 | !v36) & 1) != 0 || v37 != (id)1)
            {
              if (v37 == (id)1) {
                unsigned int v41 = 0;
              }
              else {
                unsigned int v41 = v35;
              }
              id v32 = v45;
              uint64_t v1 = v48;
              if (v41 == 1)
              {
                __int128 v42 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountUserMonthlySpendLimitUserNotification notificationIdentifierForAccountUserAltDSID:accountIdentifier:]( &OBJC_CLASS___PDAccountUserMonthlySpendLimitUserNotification,  "notificationIdentifierForAccountUserAltDSID:accountIdentifier:",  v46,  v34));
                [*(id *)(*(void *)(v48 + 48) + 8) removeUserNotificationWithIdentifier:v42];
              }
            }

            else
            {
              uint64_t v1 = v48;
              __int128 v38 = *(void **)(v48 + 48);
              v51[0] = _NSConcreteStackBlock;
              v51[1] = 3221225472LL;
              v51[2] = sub_10026A1AC;
              v51[3] = &unk_100650498;
              v51[4] = v16;
              id v52 = v19;
              id v53 = v21;
              id v54 = v34;
              id v39 = *(id *)(v48 + 56);
              uint64_t v40 = *(void *)(v48 + 48);
              id v55 = v39;
              uint64_t v56 = v40;
              objc_msgSend(v38, "_queue_loadFamilyMemberCollectionIfNecessaryWithCompletion:", v51);

              id v32 = v45;
            }
          }

          id v12 = v43;
          id v14 = v44;
        }

        uint64_t v15 = (char *)v15 + 1;
      }

      while (v14 != v15);
      id v14 = [v12 countByEnumeratingWithState:&v60 objects:v68 count:16];
    }

    while (v14);
  }
}

NSString *__cdecl sub_10026A070(id a1, PKAccountUser *a2)
{
  return (NSString *)-[PKAccountUser altDSID](a2, "altDSID");
}

uint64_t sub_10026A078(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isActive])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    id v5 = *(void **)(a1 + 32);
    id v6 = v4;
    id v7 = v5;
    if (v6 == v7)
    {
    }

    else
    {
      id v8 = v7;
      uint64_t v9 = 0LL;
      if (!v6 || !v7)
      {
        unsigned __int8 v11 = v6;
LABEL_16:

        goto LABEL_17;
      }

      unsigned int v10 = [v6 isEqualToString:v7];

      if (!v10)
      {
        uint64_t v9 = 0LL;
LABEL_17:

        goto LABEL_18;
      }
    }

    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 accountUser]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 altDSID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) altDSID]);
    id v8 = v12;
    id v14 = v13;
    uint64_t v15 = v14;
    if (v8 == v14)
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v9 = 0LL;
      if (v8 && v14) {
        uint64_t v9 = (uint64_t)[v8 isEqualToString:v14];
      }
    }

    goto LABEL_16;
  }

  uint64_t v9 = 0LL;
LABEL_18:

  return v9;
}

void sub_10026A1AC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 altDSID]);
  id v13 = (id)objc_claimAutoreleasedReturnValue([v4 familyMemberForAltDSID:v5]);

  id v6 = objc_alloc(&OBJC_CLASS___PDAccountUserMonthlySpendLimitUserNotification);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = PKCurrencyAmountMake(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = *(void *)(a1 + 56);
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) associatedPassUniqueID]);
  id v12 = -[PDAccountUserMonthlySpendLimitUserNotification initWithAccountUser:familyMember:monthlySpendLimit:accountIdentifier:passUniqueIdentifier:]( v6,  "initWithAccountUser:familyMember:monthlySpendLimit:accountIdentifier:passUniqueIdentifier:",  v7,  v13,  v9,  v10,  v11);

  -[PDUserNotification setReissueBannerOnUpdate:](v12, "setReissueBannerOnUpdate:", 1LL);
  [*(id *)(*(void *)(a1 + 72) + 8) insertUserNotification:v12];
}

void sub_10026A434(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10026A4C8;
  block[3] = &unk_100639AF0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_10026A4C8(void *a1)
{
  uint64_t v2 = -[PKFamilyMemberCollection initWithFamilyMembers:]( objc_alloc(&OBJC_CLASS___PKFamilyMemberCollection),  "initWithFamilyMembers:",  a1[5]);
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = v2;

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1[4] + 80LL));
  }
  return result;
}

void sub_10026B520(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_10026BE2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v22 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPaymentApplication);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v22 values:a4];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentExpressMode expressModesInDatabase:forPaymentApplicationPID:]( &OBJC_CLASS___PaymentExpressMode,  "expressModesInDatabase:forPaymentApplicationPID:",  *(void *)(a1 + 40),  a2));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 allObjects]);
  -[PKPaymentApplication setSupportedExpressModes:](v7, "setSupportedExpressModes:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentAutomaticSelectionCriterion criteriaInDatabase:forPaymentApplicationPID:]( &OBJC_CLASS___PaymentAutomaticSelectionCriterion,  "criteriaInDatabase:forPaymentApplicationPID:",  *(void *)(a1 + 40),  a2));
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);
  -[PKPaymentApplication setAutomaticSelectionCriteria:](v7, "setAutomaticSelectionCriteria:", v11);

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransitNetworkIdentifier transitNetworkIdentifiersInDatabase:forPaymentApplicationPID:]( &OBJC_CLASS___PaymentTransitNetworkIdentifier,  "transitNetworkIdentifiersInDatabase:forPaymentApplicationPID:",  *(void *)(a1 + 40),  a2));
  -[PKPaymentApplication setSupportedTransitNetworkIdentifiers:](v7, "setSupportedTransitNetworkIdentifiers:", v12);

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialsInDatabase:forPaymentApplicationPID:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialsInDatabase:forPaymentApplicationPID:",  *(void *)(a1 + 40),  a2));
  -[PKPaymentApplication setSubcredentials:](v7, "setSubcredentials:", v13);
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[FelicaTransitAppletState anyInDatabase:withPaymentApplicationPID:]( &OBJC_CLASS___FelicaTransitAppletState,  "anyInDatabase:withPaymentApplicationPID:",  *(void *)(a1 + 40),  a2));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 transitAppletState]);

  if (v15
    || (v16 = (void *)objc_claimAutoreleasedReturnValue( +[TransitAppletState anyInDatabase:withPaymentApplicationPID:]( TransitAppletState,  "anyInDatabase:withPaymentApplicationPID:",  *(void *)(a1 + 40),  a2)),  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v16 transitAppletState]),  v16,  v15))
  {
    id v17 = [v22 indexOfObject:@"pass_pid"];
    if (v17 == (id)0x7FFFFFFFFFFFFFFFLL) {
      unsigned int v18 = 0LL;
    }
    else {
      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue( +[SecureElementPassField secureElementPassFieldsInDatabase:forPassPID:]( SecureElementPassField,  "secureElementPassFieldsInDatabase:forPassPID:",  *(void *)(a1 + 40),  [*(id *)(a4 + 8 * (void)v17) longLongValue]));
    }
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v15 transitPassPropertiesWithPaymentApplication:v7 fieldCollection:v18]);
    -[PKPaymentApplication setTransitProperties:](v7, "setTransitProperties:", v19);
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplicationMerchantSupport supportedCountryCodesForPaymentApplicationPID:inDatabase:]( &OBJC_CLASS___PaymentApplicationMerchantSupport,  "supportedCountryCodesForPaymentApplicationPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPaymentApplication setSupportedInAppMerchantCountryCodes:](v7, "setSupportedInAppMerchantCountryCodes:", v20);

  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplicationMerchantSupport unsupportedCountryCodesForPaymentApplicationPID:inDatabase:]( &OBJC_CLASS___PaymentApplicationMerchantSupport,  "unsupportedCountryCodesForPaymentApplicationPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPaymentApplication setUnsupportedInAppMerchantCountryCodes:](v7, "setUnsupportedInAppMerchantCountryCodes:", v21);

  [*(id *)(a1 + 48) addObject:v7];
}

uint64_t sub_10026C2FC(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v98 = a1;
  unsigned int v88 = [*(id *)(a1 + 32) hasAssociatedPeerPaymentAccount];
  v90 = v2;
  if (v88)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) paymentApplicationsInDatabase:*(void *)(a1 + 40) forPass:*(void *)(a1 + 32)]);
    id v4 = [obj countByEnumeratingWithState:&v111 objects:v128 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v112;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v112 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v111 + 1) + 8LL * (void)i);
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 secureElementIdentifier]);
          id v10 = *(void **)(a1 + 56);
          uint64_t v11 = *(void *)(a1 + 32);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 applicationIdentifier]);
          id v13 = (void *)objc_claimAutoreleasedReturnValue( [v10 _paymentApplicationForPass:v11 applicationIdentifier:v12 secureElementIdentifier:v9 inDatabase:*(void *)(a1 + 40)]);

          id v14 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v3, "objectForKey:", v9));
          if (!v14)
          {
            id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v14, v9);
          }

          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 applicationIdentifier]);
          -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v13, v15);
        }

        id v5 = [obj countByEnumeratingWithState:&v111 objects:v128 count:16];
      }

      while (v5);
    }

    uint64_t v2 = v90;
  }

  else
  {
    id v3 = 0LL;
  }

  __int16 v86 = v3;
  __int128 v109 = 0u;
  __int128 v110 = 0u;
  __int128 v107 = 0u;
  __int128 v108 = 0u;
  id v94 = *(id *)(a1 + 48);
  id v16 = [v94 countByEnumeratingWithState:&v107 objects:v127 count:16];
  id v17 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
  if (v16)
  {
    id v18 = v16;
    id obja = *(id *)v108;
    do
    {
      BOOL v19 = 0LL;
      do
      {
        if (*(id *)v108 != obja) {
          objc_enumerationMutation(v94);
        }
        uint64_t v20 = *(void **)(*((void *)&v107 + 1) + 8LL * (void)v19);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 secureElementIdentifier]);
        if (v21)
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 applicationIdentifier]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v98 + 56) _paymentApplicationForPass:*(void *)(v98 + 32) applicationIdentifier:v22 secureElementIdentifier:v21 inDatabase:*(void *)(v98 + 40)]);
          if (v23)
          {
            id v24 = v23;
            [v23 updateWithPaymentApplication:v20];
          }

          else
          {
            id v24 = [objc_alloc(*(Class *)(v98 + 56)) initWithPaymentApplication:v20 pass:*(void *)(v98 + 32) inDatabase:*(void *)(v98 + 40)];
            if (v24)
            {
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v20 supportedExpressModes]);
              id v26 =  +[PaymentExpressMode insertExpressModes:withPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentExpressMode,  "insertExpressModes:withPaymentApplication:inDatabase:",  v25,  v24,  *(void *)(v98 + 40));

              int v27 = (void *)objc_claimAutoreleasedReturnValue([v20 automaticSelectionCriteria]);
              id v28 =  +[PaymentAutomaticSelectionCriterion insertCriteria:withPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentAutomaticSelectionCriterion,  "insertCriteria:withPaymentApplication:inDatabase:",  v27,  v24,  *(void *)(v98 + 40));

              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v20 supportedTransitNetworkIdentifiers]);
              id v30 =  +[PaymentTransitNetworkIdentifier insertTransitNetworkIdentifiers:withPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentTransitNetworkIdentifier,  "insertTransitNetworkIdentifiers:withPaymentApplication:inDatabase:",  v29,  v24,  *(void *)(v98 + 40));

              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v20 subcredentials]);
              id v32 =  +[AppletSubcredential setAppletSubcredentials:forPaymentApplication:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "setAppletSubcredentials:forPaymentApplication:inDatabase:",  v31,  v24,  *(void *)(v98 + 40));

              id v92 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource insertTransactionSourceWithType:inDatabase:]( &OBJC_CLASS___TransactionSource,  "insertTransactionSourceWithType:inDatabase:",  0LL,  *(void *)(v98 + 40)));
              id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v92 persistentID]));
              [v24 setValue:v33 forProperty:@"transaction_source_pid"];

              id v34 = (void *)objc_claimAutoreleasedReturnValue([v20 supportedInAppMerchantCountryCodes]);
              uint64_t v2 = v90;
              +[PaymentApplicationMerchantSupport updateSupportedCountryCodes:forPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentApplicationMerchantSupport,  "updateSupportedCountryCodes:forPaymentApplication:inDatabase:",  v34,  v24,  *(void *)(v98 + 40));

              unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue([v20 unsupportedInAppMerchantCountryCodes]);
              +[PaymentApplicationMerchantSupport updateUnsupportedCountryCodes:forPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentApplicationMerchantSupport,  "updateUnsupportedCountryCodes:forPaymentApplication:inDatabase:",  v35,  v24,  *(void *)(v98 + 40));

              id v36 = v24;
              id v17 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
            }
          }

          id v37 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v2, "objectForKey:", v21));
          if (v37)
          {
            if (v24) {
              goto LABEL_26;
            }
          }

          else
          {
            id v37 = objc_alloc_init((Class)v17[391]);
            -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v37, v21);
            if (v24)
            {
LABEL_26:
              __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v24 applicationIdentifier]);
              [v37 setObject:v24 forKey:v38];
            }
          }
        }

        BOOL v19 = (char *)v19 + 1;
      }

      while (v18 != v19);
      id v39 = [v94 countByEnumeratingWithState:&v107 objects:v127 count:16];
      id v18 = v39;
    }

    while (v39);
  }

  uint64_t v40 = v98;
  unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v98 + 56) _predicateForPass:*(void *)(v98 + 32)]);
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  __int128 v105 = 0u;
  __int128 v106 = 0u;
  __int128 v42 = v2;
  id v89 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v42,  "countByEnumeratingWithState:objects:count:",  &v103,  v126,  16LL);
  if (v89)
  {
    uint64_t v87 = *(void *)v104;
    *(void *)&__int128 v43 = 138412290LL;
    __int128 v83 = v43;
    __int16 v84 = v42;
    id v85 = v41;
    do
    {
      uint64_t v44 = 0LL;
      do
      {
        if (*(void *)v104 != v87) {
          objc_enumerationMutation(v42);
        }
        uint64_t v91 = v44;
        uint64_t v93 = *(void *)(*((void *)&v103 + 1) + 8 * v44);
        __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v42, "objectForKey:", v83));
        v46 = v45;
        if (v88 && [v45 count])
        {
          id v47 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v86, "objectForKey:", v93));
          __int128 v99 = 0u;
          __int128 v100 = 0u;
          __int128 v101 = 0u;
          __int128 v102 = 0u;
          id v48 = [v47 countByEnumeratingWithState:&v99 objects:v125 count:16];
          if (v48)
          {
            id v49 = v48;
            id v50 = *(id *)v100;
            id objb = *(id *)v100;
            do
            {
              for (j = 0LL; j != v49; j = (char *)j + 1)
              {
                if (*(id *)v100 != v50) {
                  objc_enumerationMutation(v47);
                }
                id v52 = *(void **)(*((void *)&v99 + 1) + 8LL * (void)j);
                id v53 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:v52]);

                if (!v53)
                {
                  id v54 = (void *)objc_claimAutoreleasedReturnValue([v46 keyEnumerator]);
                  id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 nextObject]);

                  uint64_t v56 = v47;
                  __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKey:v52]);
                  id v58 = v46;
                  __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKey:v55]);
                  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
                  __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__int128 buf = 138413058;
                    v118 = v52;
                    __int16 v119 = 2112;
                    v120 = v55;
                    __int16 v121 = 2112;
                    v122 = v57;
                    __int16 v123 = 2112;
                    v124 = v59;
                    _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "The peer payment payment application as migrated from %@ to new aid %@. Existing payment applicati on existingPaymentApplication %@. New payment application %@",  buf,  0x2Au);
                  }

                  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v57 transactionSourceIdentifier]);
                  __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v59 transactionSourceIdentifier]);
                  +[TransactionSource updateTransactionSourceIdentifier:toNewTransactionSourceIdentifier:inDatabase:]( &OBJC_CLASS___TransactionSource,  "updateTransactionSourceIdentifier:toNewTransactionSourceIdentifier:inDatabase:",  v62,  v63,  *(void *)(v98 + 40));

                  id v47 = v56;
                  v46 = v58;
                  id v50 = objb;
                }
              }

              id v49 = [v47 countByEnumeratingWithState:&v99 objects:v125 count:16];
            }

            while (v49);
          }

          uint64_t v40 = v98;
          __int128 v42 = v84;
          unsigned int v41 = v85;
        }

        __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v46 allKeys]);
        __int128 v65 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "doesNotContainPredicateWithProperty:values:",  @"aid",  v64));

        __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v40 + 56) predicateForSecureElementIdentifier:v93]);
        v116[0] = v65;
        v116[1] = v41;
        v116[2] = v66;
        __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v116, 3LL));
        v68 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v67));

        v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v40 + 56) queryWithDatabase:*(void *)(v40 + 40) predicate:v68]);
        if (([v69 deleteAllEntities] & 1) == 0)
        {
          uint64_t v70 = PKLogFacilityTypeGetObject(6LL);
          v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v72 = v46;
            BOOL v73 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v40 + 32) uniqueID]);
            *(_DWORD *)__int128 buf = v83;
            v118 = v73;
            _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Failed to delete obsolete payment applications for %@",  buf,  0xCu);

            v46 = v72;
          }
        }

        uint64_t v44 = v91 + 1;
      }

      while ((id)(v91 + 1) != v89);
      id v89 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v42,  "countByEnumeratingWithState:objects:count:",  &v103,  v126,  16LL);
    }

    while (v89);
  }

  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v42, "allKeys"));
  v75 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "doesNotContainPredicateWithProperty:values:",  @"seid",  v74));

  v115[0] = v75;
  v115[1] = v41;
  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v115, 2LL));
  BOOL v77 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v76));

  id v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v40 + 56) queryWithDatabase:*(void *)(v40 + 40) predicate:v77]);
  if (([v78 deleteAllEntities] & 1) == 0)
  {
    uint64_t v79 = PKLogFacilityTypeGetObject(6LL);
    __int128 v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v98 + 32) uniqueID]);
      *(_DWORD *)__int128 buf = 138412290;
      v118 = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Failed to delete obsolete payment applications for %@",  buf,  0xCu);
    }
  }

  return 1LL;
}

id sub_10026DE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentApplication,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

uint64_t sub_10026E540(void *a1)
{
  id v2 =  +[PaymentExpressMode insertExpressModes:withPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentExpressMode,  "insertExpressModes:withPaymentApplication:inDatabase:",  a1[6],  a1[5],  a1[4]);
  return 1LL;
}

uint64_t sub_10026E630(void *a1)
{
  id v2 =  +[PaymentAutomaticSelectionCriterion insertCriteria:withPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentAutomaticSelectionCriterion,  "insertCriteria:withPaymentApplication:inDatabase:",  a1[6],  a1[5],  a1[4]);
  return 1LL;
}

uint64_t sub_10026E720(void *a1)
{
  id v2 =  +[PaymentTransitNetworkIdentifier insertTransitNetworkIdentifiers:withPaymentApplication:inDatabase:]( &OBJC_CLASS___PaymentTransitNetworkIdentifier,  "insertTransitNetworkIdentifiers:withPaymentApplication:inDatabase:",  a1[6],  a1[5],  a1[4]);
  return 1LL;
}

void sub_10026EAFC(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB04(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB0C(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB14(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB1C(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB24(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB2C(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setState:](v4, "setState:", [a3 integerValue]);
}

void sub_10026EB70(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EB78(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsContactlessPayment:]( v4,  "setSupportsContactlessPayment:",  [a3 BOOLValue]);
}

void sub_10026EBBC(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsInAppPayment:](v4, "setSupportsInAppPayment:", [a3 BOOLValue]);
}

void sub_10026EC00(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsMerchantTokens:](v4, "setSupportsMerchantTokens:", [a3 BOOLValue]);
}

void sub_10026EC44(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setHasMerchantTokens:](v4, "setHasMerchantTokens:", [a3 BOOLValue]);
}

void sub_10026EC88(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setHadMerchantTokens:](v4, "setHadMerchantTokens:", [a3 BOOLValue]);
}

void sub_10026ECCC(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026ECD4(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026ECDC(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026ECE4(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 stringValue]);
  -[PKPaymentApplication setVirtualCardIdentifier:](v4, "setVirtualCardIdentifier:", v5);
}

void sub_10026ED34(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 stringValue]);
  -[PKPaymentApplication setVirtualCardSuffix:](v4, "setVirtualCardSuffix:", v5);
}

void sub_10026ED84(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026ED8C(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setVirtualCardVPANOrigin:](v4, "setVirtualCardVPANOrigin:", [a3 integerValue]);
}

void sub_10026EDD0(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsBarcodePayment:](v4, "setSupportsBarcodePayment:", [a3 BOOLValue]);
}

void sub_10026EE14(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsOptionalAuthentication:]( v4,  "setSupportsOptionalAuthentication:",  [a3 BOOLValue]);
}

void sub_10026EE58(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EE60(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EE68(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setRequiresDeferredAuthorization:]( v4,  "setRequiresDeferredAuthorization:",  [a3 BOOLValue]);
}

void sub_10026EEAC(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setPaymentNetworkIdentifier:]( v4,  "setPaymentNetworkIdentifier:",  [a3 integerValue]);
}

void sub_10026EEF0(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentApplication setInAppPINRequiredAmount:](v4, "setInAppPINRequiredAmount:", v6);
}

void sub_10026EF40(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026EF48(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setAuxiliary:](v4, "setAuxiliary:", [a3 BOOLValue]);
}

void sub_10026EF8C(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setPaymentType:](v4, "setPaymentType:", [a3 integerValue]);
}

void sub_10026EFD0(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setAuxiliaryPaymentType:](v4, "setAuxiliaryPaymentType:", [a3 integerValue]);
}

void sub_10026F014(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setContactlessPriority:](v4, "setContactlessPriority:", [a3 integerValue]);
}

void sub_10026F058(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setInAppPriority:](v4, "setInAppPriority:", [a3 integerValue]);
}

void sub_10026F09C(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsInstantFundsIn:](v4, "setSupportsInstantFundsIn:", [a3 BOOLValue]);
}

void sub_10026F0E0(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setFundingSourcePaymentType:]( v4,  "setFundingSourcePaymentType:",  [a3 integerValue]);
}

void sub_10026F124(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setRequiresConsentForDataRelease:]( v4,  "setRequiresConsentForDataRelease:",  [a3 BOOLValue]);
}

void sub_10026F168(id a1, PKPaymentApplication *a2, id a3)
{
}

void sub_10026F170(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setSupportsServiceMode:](v4, "setSupportsServiceMode:", [a3 BOOLValue]);
}

void sub_10026F1B4(id a1, PKPaymentApplication *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentApplication setShareable:](v4, "setShareable:", [a3 BOOLValue]);
}

void sub_10026F70C(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_10026F714(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_10026F71C(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_10026F724(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_10026F808(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10026FD44(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10026FE54(id a1, PKTapToRadarPrompt *a2, id a3)
{
}

void sub_10026FE5C(id a1, PKTapToRadarPrompt *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKTapToRadarPrompt setLastPromptDate:](v4, "setLastPromptDate:", v5);
}

void sub_10026FEA8(id a1, PKTapToRadarPrompt *a2, id a3)
{
  id v4 = a2;
  -[PKTapToRadarPrompt setPromptCount:](v4, "setPromptCount:", [a3 integerValue]);
}

uint64_t PKBarcodeCreateAndValidateTrustWithCerts(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  switch(a3)
  {
    case 0LL:
      uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeSigning();
      if (ApplePayQRCodeSigning) {
        goto LABEL_5;
      }
      goto LABEL_10;
    case 1LL:
      uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeEncryption();
      if (!ApplePayQRCodeSigning) {
        goto LABEL_10;
      }
LABEL_5:
      uint64_t v8 = (const void *)ApplePayQRCodeSigning;
      id v9 = (const void *)SecCertificateCopyAppleExternalRoots();
      uint64_t v10 = PKCreateAndValidateTrustWithCertsUsingPolicy(v6, a2, v8, v9);
      CFRelease(v8);
      if (v9) {
        CFRelease(v9);
      }
      break;
    case 2LL:
      uint64_t Object = PKLogFacilityTypeGetObject(28LL);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v14 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Sever signature certificate is currently not supported",  v14,  2u);
      }

      goto LABEL_10;
    case 3LL:
      uint64_t v10 = PKCreateAndValidateTrustWithCertsUsingMarkerOIDs( v5,  a2,  @"Aquaman",  @"1.2.840.113635.100.6.2.14",  @"1.2.840.113635.100.6.64.12.2.1");
      break;
    default:
LABEL_10:
      uint64_t v10 = 0LL;
      break;
  }

  return v10;
}

void PKBarcodeCreateAndValidateTrustWithCertsAsync(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    switch(a2)
    {
      case 0LL:
        uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeSigning();
        if (ApplePayQRCodeSigning) {
          goto LABEL_9;
        }
        break;
      case 1LL:
        uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeEncryption();
        if (ApplePayQRCodeSigning)
        {
LABEL_9:
          uint64_t v10 = (const void *)ApplePayQRCodeSigning;
          uint64_t v11 = SecCertificateCopyAppleExternalRoots();
          PKCreateTrustAndValidateAsync(v5, v10, v11, v6);
          CFRelease(v10);
          if (v11)
          {
            id v12 = (const void *)v11;
            goto LABEL_13;
          }
        }

        break;
      case 2LL:
        uint64_t Object = PKLogFacilityTypeGetObject(28LL);
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v15 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sever signature certificate is currently not supported",  v15,  2u);
        }

        (*((void (**)(id, void, void))v6 + 2))(v6, 0LL, 0LL);
        break;
      case 3LL:
        uint64_t ApplePinned = SecPolicyCreateApplePinned( @"Aquaman",  @"1.2.840.113635.100.6.2.14",  @"1.2.840.113635.100.6.64.12.2.1");
        if (ApplePinned)
        {
          id v14 = (const void *)ApplePinned;
          PKCreateTrustAndValidateAsync(v5, ApplePinned, 0LL, v6);
          id v12 = v14;
LABEL_13:
          CFRelease(v12);
        }

        break;
      default:
        break;
    }
  }
}

void sub_100271970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100271988(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100271998(uint64_t a1)
{
}

BOOL sub_1002719A0(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithAccessory:*(void *)(a1 + 32) forBaseAccessory:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_100271B3C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, _BYTE *a6)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "setSpinnerEnabled:", objc_msgSend(*a4, "BOOLValue"));
  *a6 = 1;
  return result;
}

void sub_1002720B8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 80LL);
  id v3 = [*(id *)(a1 + 48) copy];
  [v2 addObject:v3];

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 64))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Already Fetching supported features queueing reply",  buf,  2u);
    }
  }

  else
  {
    *(_BYTE *)(v4 + 64) = 1;
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002721A8;
    v9[3] = &unk_10063ABB8;
    void v9[4] = v7;
    [v7 _fetchPaymentSetupFeaturesForSourceApplicationID:v8 useStaticContent:0 completion:v9];
  }

void sub_1002721A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 80) copy];
  *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 0;
  [*(id *)(*(void *)(a1 + 32) + 80) removeAllObjects];
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218242;
    id v23 = [v4 count];
    __int16 v24 = 2112;
    id v25 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Returning payment setup features to %lu completion handlers. \n%@",  buf,  0x16u);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v11);
        id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        v14[2] = sub_100272398;
        v14[3] = &unk_1006396B0;
        uint64_t v16 = v12;
        id v15 = v3;
        dispatch_async(v13, v14);

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v9);
  }
}

uint64_t sub_100272398(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1002726EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100272704(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100272714(uint64_t a1)
{
}

void sub_10027271C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1002727C8;
  v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1002727C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1002727DC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1002728AC;
  v12[3] = &unk_10063C450;
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v6;
  id v14 = v7;
  v12[4] = v9;
  id v10 = v6;
  id v11 = v7;
  [WeakRetained _updateWebServiceConfigurationWithSupportedRegionTimeInterval:v12 unsupportedRegionTimeInterval:604800.0 completion:86400.0];
}

void sub_1002728AC(uint64_t a1)
{
  id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100272938;
  v3[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_100272938(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10027294C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 32LL));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100272A24;
  v13[3] = &unk_100650B28;
  id v10 = (void *)a1[5];
  uint64_t v9 = a1[6];
  void v13[4] = a1[4];
  uint64_t v17 = v9;
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [WeakRetained validatePreconditionsWithCompletion:v13];
}

void sub_100272A24(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(v3 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_100272AD0;
  v7[3] = &unk_100650B00;
  v7[1] = 3221225472LL;
  char v12 = a2;
  uint64_t v6 = *(void *)(a1 + 64);
  v7[4] = v3;
  uint64_t v11 = v6;
  id v8 = v4;
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v5, v7);
}

uint64_t sub_100272AD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72)) {
    BOOL v2 = [*(id *)(*(void *)(a1 + 32) + 8) paymentSetupSupportedInRegion] == (id)1;
  }
  else {
    BOOL v2 = 0LL;
  }
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___PKPaymentSetupFeature);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setState:v2];
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setType:0];
  [*(id *)(a1 + 40) addObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100272B78(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 56);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100272C4C;
  v14[3] = &unk_100650B50;
  void v14[4] = v8;
  id v11 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v7;
  id v15 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 _cachedPaymentSetupFeaturesForSourceApplicationID:v9 useStaticContent:v10 completion:v14];
}

void sub_100272C4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100272D10;
  v7[3] = &unk_10063BA88;
  id v8 = v3;
  id v9 = v4;
  id v11 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_100272D10(void *a1)
{
  BOOL v2 = (void *)a1[4];
  if (v2)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v3 = v2;
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        id v7 = 0LL;
        do
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = (void *)a1[5];
          id v9 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v7), "copy", (void)v11);
          [v8 addObject:v9];

          id v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v5);
    }
  }

  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

void sub_100272E30(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(a1[6] + 8) + 40) state])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) targetDevice]);
    if ((objc_opt_respondsToSelector(v8, "supportedFeatureIdentifiersWithPaymentWebService:") & 1) != 0) {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 supportedFeatureIdentifiersWithPaymentWebService:*(void *)(a1[4] + 8)]);
    }
    else {
      id v9 = 0LL;
    }
    if ([v9 count])
    {
      __int128 v11 = (void *)a1[4];
      id v10 = (void *)a1[5];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100272F98;
      v12[3] = &unk_100650B50;
      v12[4] = v11;
      id v13 = v10;
      id v15 = v7;
      id v14 = v6;
      [v11 _fetchAccountFeaturesWithSupportedFeatureIdentifiers:v9 paymentSetupFeatures:v13 completion:v12];
    }

    else
    {
      (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
    }
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_100272F98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10027305C;
  v7[3] = &unk_10063BA88;
  id v8 = v3;
  id v9 = v4;
  id v11 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_10027305C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count]) {
    [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(a1 + 32)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100273098(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v6), "sanitizePaymentSetupFeature", (void)v9);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
}

void sub_10027326C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  uint64_t v44 = a1;
  id obj = *(id *)(a1 + 32);
  id v8 = [obj countByEnumeratingWithState:&v54 objects:v63 count:16];
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v55;
    *(void *)&__int128 v9 = 138543618LL;
    __int128 v41 = v9;
    uint64_t v46 = *(void *)v55;
    id v42 = v6;
    id v43 = v5;
    __int128 v45 = v7;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v55 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v54 + 1) + 8LL * (void)i);
        id v14 = (id)PKFeatureIdentifierFromString(v13);
        uint64_t v15 = PKPaymentSetupFeatureTypeFromPKFeatureIdentifier();
        if (v15 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v18 = v15;
          v53[0] = _NSConcreteStackBlock;
          v53[1] = 3221225472LL;
          v53[2] = sub_1002736FC;
          v53[3] = &unk_100650BC0;
          void v53[4] = v14;
          uint64_t v19 = (uint64_t)objc_msgSend(v6, "pk_containsObjectPassingTest:", v53);
          if ((v19 & 1) != 0)
          {
            uint64_t v21 = 3LL;
            goto LABEL_38;
          }

          v52[0] = _NSConcreteStackBlock;
          v52[1] = 3221225472LL;
          v52[2] = sub_10027372C;
          v52[3] = &unk_100650BC0;
          v52[4] = v14;
          id v22 = objc_msgSend(v5, "pk_containsObjectPassingTest:", v52);
          if ((_DWORD)v22)
          {
            uint64_t v19 = PKIsPhone(v22, v23);
            if ((v19 & 1) != 0
              || (uint64_t v19 = PKIsPad(), (v19 & 1) != 0)
              || (uint64_t v19 = PKIsMac(v19, v20), (v19 & 1) != 0)
              || (uint64_t v19 = PKIsVision(), (v19 & 1) != 0))
            {
              uint64_t v21 = 2LL;
              goto LABEL_38;
            }
          }

          if (PKDeviceSupportsApplicationForFeatureIdentifier(v14))
          {
            __int128 v50 = 0u;
            __int128 v51 = 0u;
            __int128 v48 = 0u;
            __int128 v49 = 0u;
            id v24 = *(id *)(v44 + 40);
            id v25 = [v24 countByEnumeratingWithState:&v48 objects:v62 count:16];
            if (v25)
            {
              id v26 = v25;
              uint64_t v27 = *(void *)v49;
              while (2)
              {
                for (j = 0LL; j != v26; j = (char *)j + 1)
                {
                  if (*(void *)v49 != v27) {
                    objc_enumerationMutation(v24);
                  }
                  uint64_t v29 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)j);
                  if (objc_msgSend(v29, "featureIdentifier", v41) == v14)
                  {
                    id v30 = v29;
                    goto LABEL_29;
                  }
                }

                id v26 = [v24 countByEnumeratingWithState:&v48 objects:v62 count:16];
                if (v26) {
                  continue;
                }
                break;
              }

              id v30 = 0LL;
LABEL_29:
              id v6 = v42;
              id v5 = v43;
            }

            else
            {
              id v30 = 0LL;
            }

            id v31 = [v30 productState];
            uint64_t v7 = v45;
            switch((unint64_t)v31)
            {
              case 0uLL:
              case 2uLL:
                uint64_t Object = PKLogFacilityTypeGetObject(6LL);
                id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v34 = PKPaymentSetupProductStateToString(v31);
                  unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
                  *(_DWORD *)__int128 buf = v41;
                  uint64_t v59 = v13;
                  __int16 v60 = 2114;
                  __int128 v61 = v35;
                  _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Product with feature identifier: %{public}@ is in state: %{public }@ - means is an unsupported setup feature",  buf,  0x16u);

                  uint64_t v7 = v45;
                }

                uint64_t v21 = 0LL;
                break;
              case 1uLL:
              case 3uLL:
              case 4uLL:
                uint64_t v21 = 1LL;
                break;
              default:
                uint64_t v21 = 0LL;
                uint64_t v7 = v45;
                break;
            }

LABEL_38:
            BOOL v36 = v18 != 1 || v21 == 0;
            if (v36 || (PKIsMac(v19, v20) & 1) != 0) {
LABEL_43:
            }
              uint64_t v37 = 0LL;
            else {
              uint64_t v37 = PKIsVision() ^ 1;
            }
            id v17 = objc_alloc_init(&OBJC_CLASS___PKPaymentSetupFeature);
            -[PKPaymentSetupFeature setState:](v17, "setState:", v21);
            -[PKPaymentSetupFeature setType:](v17, "setType:", v18);
            -[PKPaymentSetupFeature setSupportedOptions:](v17, "setSupportedOptions:", v37);
            -[NSMutableArray addObject:](v7, "addObject:", v17);
            uint64_t v11 = v46;
            goto LABEL_46;
          }

          uint64_t v21 = 0LL;
          goto LABEL_43;
        }

        uint64_t v16 = PKLogFacilityTypeGetObject(6LL);
        id v17 = (PKPaymentSetupFeature *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v59 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Error: Feature identifier: %@ could not be converted to setup type - skipping",  buf,  0xCu);
        }

BOOL sub_1002736FC(uint64_t a1, void *a2)
{
  return [a2 feature] == *(id *)(a1 + 32);
}

BOOL sub_10027372C(uint64_t a1, void *a2)
{
  return [a2 feature] == *(id *)(a1 + 32);
}

void sub_100273AC8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v15 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Returning static payment setup features for: %@",  buf,  0xCu);
  }

  if (!v6 || v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100273C00;
    v12[3] = &unk_1006415E8;
    uint64_t v11 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    [v11 _processPaymentSetupProductsResponse:v6 completion:v12];
  }
}

uint64_t sub_100273C00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100273C0C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100273C98;
  block[3] = &unk_100639AF0;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v3, block);
}

void sub_100273C98(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Returning updated payment setup features for: %@",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = [*(id *)(a1[5] + 72) copy];
  (*(void (**)(void))(a1[6] + 16LL))();
}

id sub_100273E0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleWebServiceRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100273EC8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _staticAvailableProductsRequest:&v16]);
  if (v16)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Static fetching disabled, returning nil",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1002740D0;
    v13[3] = &unk_100650C60;
    void v13[4] = *(void *)(a1 + 32);
    id v14 = *(id *)(a1 + 48);
    id v5 = objc_retainBlock(v13);
    uint64_t v6 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v8)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Getting static available products",  buf,  2u);
      }

      [v2 addDiagnosticReason:*(void *)(a1 + 40)];
      id v9 = *(void **)(*(void *)(a1 + 32) + 8LL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1002740F8;
      v11[3] = &unk_100650C88;
      __int128 v12 = v5;
      [v9 availableCommonProductsWithRequest:v2 completion:v11];
      id v10 = v12;
    }

    else
    {
      if (v8)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDPaymentSetupFeaturesCoordinator: Feature did not support static products, fetching available products",  buf,  2u);
      }

      id v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentAvailableProductsRequest);
      [v10 addDiagnosticReason:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) _productsWithRequest:v10 completion:v5];
    }
  }
}

id sub_1002740D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  else {
    return [*(id *)(a1 + 32) _applyRegionFilteringAndAgeCheckToProductsResponse:a2 completion:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1002740F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1002741B4(uint64_t a1)
{
  return [*(id *)(a1 + 40) handleWebServiceRequest:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
}

void sub_1002744D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  BOOL v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002745B0;
  block[3] = &unk_100639350;
  id v12 = v7;
  id v13 = v5;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
  *(_BYTE *)(*(void *)(a1 + 32) + 65LL) = 0;
  [*(id *)(*(void *)(a1 + 32) + 88) removeObjectAtIndex:0];
  [*(id *)(a1 + 32) _runNextProductsRequest];
}

void sub_1002745B0(uint64_t a1)
{
  id v2 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  if (v2)
  {
    id v3 = v2;
    v2[2](v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
    id v2 = (void (**)(void, void, void))v3;
  }
}

void sub_1002746C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100274798;
  block[3] = &unk_10063CD88;
  id v14 = v8;
  id v15 = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v7;
  uint64_t v17 = v10;
  id v18 = *(id *)(a1 + 48);
  id v11 = v7;
  id v12 = v6;
  dispatch_async(v9, block);
}

id sub_100274798(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2) {
    BOOL v3 = *(void *)(a1 + 48) == 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 56);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    BOOL v8 = sub_10027486C;
    id v9 = &unk_100650B50;
    uint64_t v10 = v4;
    id v11 = v2;
    id v13 = *(id *)(a1 + 64);
    id v12 = *(id *)(a1 + 48);
    [v4 _processPaymentSetupProductsResponse:v11 completion:&v6];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  return objc_msgSend(*(id *)(a1 + 56), "markProductsDirty", v6, v7, v8, v9, v10);
}

uint64_t sub_10027486C(void *a1, void *a2)
{
  BOOL v3 = (void *)a1[4];
  id v4 = [a2 mutableCopy];
  [v3 _storeServerPaymentSetupFeatures:v4 productsResponse:a1[5] priorDirtyStateIdentifier:0];

  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

void sub_100274A78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  BOOL v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100274B68;
  block[3] = &unk_100650D00;
  block[1] = 3221225472LL;
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = v5;
  char v19 = *(_BYTE *)(a1 + 64);
  id v16 = v8;
  id v18 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, block);
}

void sub_100274B68(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    BOOL v3 = *(void **)(a1 + 40);
    id v2 = *(void **)(a1 + 48);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100274C58;
    v4[3] = &unk_100650CD8;
    char v9 = *(_BYTE *)(a1 + 80);
    void v4[4] = v3;
    id v5 = v2;
    id v6 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 72);
    id v7 = *(id *)(a1 + 32);
    [v3 _processPaymentSetupProductsResponse:v5 completion:v4];
  }

uint64_t sub_100274C58(uint64_t a1, void *a2)
{
  if (!*(_BYTE *)(a1 + 72))
  {
    BOOL v3 = *(void **)(a1 + 32);
    id v4 = [a2 mutableCopy];
    [v3 _storeServerPaymentSetupFeatures:v4 productsResponse:*(void *)(a1 + 40) priorDirtyStateIdentifier:*(void *)(a1 + 48)];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100274CB4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 40);
  char v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v14[0] = _NSConcreteStackBlock;
  v14[2] = sub_100274D90;
  v14[3] = &unk_100650D50;
  __int16 v20 = *(_WORD *)(a1 + 56);
  v14[1] = 3221225472LL;
  id v15 = v7;
  id v16 = v6;
  id v10 = v8;
  uint64_t v11 = *(void *)(a1 + 32);
  id v17 = v10;
  uint64_t v18 = v11;
  id v19 = *(id *)(a1 + 48);
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v9, v14);
}

void sub_100274D90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) || !*(void *)(a1 + 32) && *(void *)(a1 + 40) || *(_BYTE *)(a1 + 73))
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___PKPaymentAvailableProductsRequest);
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sourceApplicationIdentifier]);
    [v2 setSourceApplicationIdentifier:v3];

    [v2 setCachePolicyOverride:3];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) diagnosticReasons]);
    [v2 setDiagnosticReasons:v4];

    id v5 = *(void **)(a1 + 64);
    id v6 = *(void **)(*(void *)(a1 + 56) + 8LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100274EB4;
    v7[3] = &unk_100650C88;
    id v8 = v5;
    [v6 availableProductsWithRequest:v2 completion:v7];
  }

uint64_t sub_100274EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100274F50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100274FE4;
  block[3] = &unk_100639AF0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_100274FE4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _paymentSetupFeaturesForFilteredProducts:*(void *)(a1 + 40)]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100276A24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100276B70(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKSavingsAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_100277148(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_100277150(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountFeatureDescriptor setMinimumAmount:](v4, "setMinimumAmount:", v6);
}

void sub_1002771A0(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountFeatureDescriptor setMaximumAmount:](v4, "setMaximumAmount:", v6);
}

void sub_1002771F0(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKSavingsAccountFeatureDescriptor setSupportedNetworks:](v4, "setSupportedNetworks:", v5);
}

void sub_100277248(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_100277250(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setMerchantCapabilities:]( v4,  "setMerchantCapabilities:",  [a3 unsignedIntegerValue]);
}

void sub_100277294(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setFundingSourceTypes:]( v4,  "setFundingSourceTypes:",  [a3 unsignedIntegerValue]);
}

void sub_1002772D8(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setTransferFrequencies:]( v4,  "setTransferFrequencies:",  [a3 unsignedIntegerValue]);
}

void sub_10027731C(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_100277324(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10027732C(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKSavingsAccountFeatureDescriptor setSupportedFileFormatsForTransactionData:]( v4,  "setSupportedFileFormatsForTransactionData:",  v5);
}

void sub_100277384(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setContactMethod:]( v4,  "setContactMethod:",  [a3 unsignedIntegerValue]);
}

void sub_1002773C8(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setShowCreditRewardsHubBalance:]( v4,  "setShowCreditRewardsHubBalance:",  [a3 BOOLValue]);
}

void sub_10027740C(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setShowCreditDashboardBalance:]( v4,  "setShowCreditDashboardBalance:",  [a3 BOOLValue]);
}

void sub_100277450(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setShowSettingsBalance:]( v4,  "setShowSettingsBalance:",  [a3 BOOLValue]);
}

void sub_100277494(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setHideCreditRewardsHubSignage:]( v4,  "setHideCreditRewardsHubSignage:",  [a3 BOOLValue]);
}

void sub_1002780C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

NSCopying *__cdecl sub_1002780EC(id a1, PKPassSharedEntitlement *a2)
{
  return (NSCopying *)-[PKPassSharedEntitlement entitlementIdentifier](a2, "entitlementIdentifier");
}

NSCopying *__cdecl sub_1002780F4(id a1, PKPassSharedEntitlement *a2)
{
  return (NSCopying *)-[PKPassSharedEntitlement entitlementIdentifier](a2, "entitlementIdentifier");
}

void sub_1002780FC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
  if (!v8)
  {
LABEL_4:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
    goto LABEL_6;
  }

  [*(id *)(a1 + 32) removeObjectForKey:v9];
  if (([v8 hasCanonicallyEquivalentRightsToPassEntitlement:v7] & 1) == 0)
  {
    if (![v8 hasCanonicallyEquivalentSharingCapabilityToPassEntitlement:v7])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      goto LABEL_6;
    }

    goto LABEL_4;
  }

void sub_100278700(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained pendingShareActivations]);

  id v4 = objc_msgSend(v3, "pk_createSetByApplyingBlock:", &stru_100651060);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) registrations]);
  id v6 = objc_msgSend(v5, "pk_createSetByApplyingBlock:", &stru_1006510A0);

  id v7 = [v6 mutableCopy];
  id v24 = v4;
  [v7 minusSet:v4];
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v31;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v31 != v11) {
          objc_enumerationMutation(v8);
        }
        [*(id *)(*(void *)(a1 + 32) + 16) unregisterMessageForIdentifier:*(void *)(*((void *)&v30 + 1) + 8 * (void)i)];
      }

      id v10 = [v8 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }

    while (v10);
  }

  uint64_t v23 = v8;

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = v3;
  id v13 = [obj countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v27;
    do
    {
      for (j = 0LL; j != v14; j = (char *)j + 1)
      {
        if (*(void *)v27 != v15) {
          objc_enumerationMutation(obj);
        }
        id v17 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)j);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 shareIdentifier]);
        id v19 = objc_alloc_init(&OBJC_CLASS___PKApplicationMessageRequest);
        unsigned int v20 = [v6 containsObject:v18];
        uint64_t v21 = *(void **)(*(void *)(a1 + 32) + 16LL);
        if (v20) {
          [v21 updateMessageForIdentifier:v18 withRequest:v19];
        }
        else {
          [v21 registerMessageForIdentifier:v18 withRequest:v19];
        }
        unsigned int v22 = [*(id *)(*(void *)(a1 + 32) + 40) containsObject:v18];
        if ([v17 isWaitingOnUserAction])
        {
          if ((v22 & 1) == 0)
          {
            [*(id *)(a1 + 32) _sendActivationRequiredNotificationsForShareIdentifier:v18];
            [*(id *)(*(void *)(a1 + 32) + 40) addObject:v18];
          }
        }

        else if (v22)
        {
          [*(id *)(*(void *)(a1 + 32) + 40) removeObject:v18];
        }
      }

      id v14 = [obj countByEnumeratingWithState:&v26 objects:v34 count:16];
    }

    while (v14);
  }
}

id sub_1002789C8(id a1, PKPassSharePendingActivation *a2)
{
  return -[PKPassSharePendingActivation shareIdentifier](a2, "shareIdentifier");
}

id sub_1002789D0(id a1, PKApplicationMessageRegistration *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[PKApplicationMessageRegistration key](a2, "key"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);

  return v3;
}

NSCopying *__cdecl sub_100278C84(id a1, PDShareChange *a2)
{
  return (NSCopying *)+[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[PDShareChange type](a2, "type"));
}

void sub_100278CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v9 = v3;
    id v4 = [v3 count];
    id v5 = *(void **)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    if ((unint64_t)v4 < 2)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _notificationForShareChange:v7 pass:*(void *)(a1 + 48)]);
      [v5 safelyAddObject:v8];
    }

    else
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _groupNotificationForChanges:v9 pass:*(void *)(a1 + 48)]);
      [v5 safelyAddObject:v7];
    }

    id v3 = v9;
  }
}

void sub_100279034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

NSMutableDictionary *sub_10027906C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)v8);
        if (v9 && objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v8), "active", (void)v12))
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v9, v10);
        }

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }

  return v3;
}

void sub_1002791A8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v13]);
  if (!v8)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    goto LABEL_6;
  }

  [*(id *)(a1 + 32) removeObjectForKey:v13];
  if (([v8 hasCanonicallyEquivalentRightsToPassEntitlement:v7] & 1) == 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 activeCapabilityRole]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 activeCapabilityRole]);
    int v11 = PKEqualObjects(v9, v10);

    if (!v11)
    {
LABEL_7:
      *a4 = 1;
      goto LABEL_8;
    }

    uint64_t v12 = *(void *)(a1 + 48);
LABEL_6:
    *(_BYTE *)(*(void *)(v12 + 8) + 24LL) = 1;
    goto LABEL_7;
  }

NSCopying *__cdecl sub_100279C70(id a1, PKPassShare *a2)
{
  return (NSCopying *)-[PKPassShare identifier](a2, "identifier");
}

NSCopying *__cdecl sub_100279C78(id a1, PKPassShare *a2)
{
  return (NSCopying *)-[PKPassShare identifier](a2, "identifier");
}

id sub_100279C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys", 0));
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v9]);
        if ([v3 isSameUnderlyingShareAs:v10])
        {
          [*(id *)(a1 + 32) removeObjectForKey:v9];
          goto LABEL_11;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  uint64_t v10 = 0LL;
LABEL_11:

  return v10;
}

id sub_100279DC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 senderShareIdentifier]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);

    if (!v7) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
    if (!v6) {
      goto LABEL_7;
    }
  }

  if (!v10)
  {
    int v11 = *(void **)(a1 + 32);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 senderShareIdentifier]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v12]);
  }

void sub_100279E98(uint64_t a1, uint64_t a2, void *a3)
{
  id v14 = a3;
  unsigned __int8 v4 = [v14 isLocalShare];
  id v5 = v14;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7
      || (int v11 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v14 senderShareIdentifier]),
          v11 != @"self")
      && ((__int128 v12 = v11) == 0LL
       || (id v13 = -[__CFString caseInsensitiveCompare:](v11, "caseInsensitiveCompare:", @"self"),
           v12,
           v12,
           v13)))
    {
      id v8 = objc_alloc_init(&OBJC_CLASS___PDShareChange);
      -[PDShareChange setOldShare:](v8, "setOldShare:", v7);
      -[PDShareChange setUpdatedShare:](v8, "setUpdatedShare:", v14);
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      -[PDShareChange setSender:](v8, "setSender:", v10);

      [*(id *)(a1 + 32) addObject:v8];
    }

    id v5 = v14;
  }
}

void sub_100279FA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (([v7 isLocalShare] & 1) == 0)
  {
    unsigned __int8 v4 = objc_alloc_init(&OBJC_CLASS___PDShareChange);
    -[PDShareChange setOldShare:](v4, "setOldShare:", v7);
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    -[PDShareChange setSender:](v4, "setSender:", v6);

    [*(id *)(a1 + 32) addObject:v4];
  }
}

uint64_t sub_10027AA80(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationService]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 serviceURL]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 notificationService]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 serviceURL]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationService]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 registrationURL]);

  int v11 = (void *)objc_claimAutoreleasedReturnValue([v4 notificationService]);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 registrationURL]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationService]);
  id v14 = [v13 serviceType];

  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v4 notificationService]);
  id v16 = [v15 serviceType];

  if (PKEqualObjects(v6, v8))
  {
    uint64_t v17 = 0LL;
    if (PKEqualObjects(v10, v12) && v14 == v16)
    {
      if ((objc_opt_respondsToSelector(v3, "dpanIdentifier") & 1) != 0
        && (objc_opt_respondsToSelector(v4, "dpanIdentifier") & 1) != 0)
      {
        uint64_t v18 = NSStringFromSelector("dpanIdentifier");
        id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        uint64_t v20 = objc_claimAutoreleasedReturnValue([v3 valueForKey:v19]);

        uint64_t v21 = NSStringFromSelector("dpanIdentifier");
        unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        uint64_t v23 = objc_claimAutoreleasedReturnValue([v4 valueForKey:v22]);

        if (v20 | v23) {
          uint64_t v17 = (uint64_t)[(id)v20 isEqualToString:v23];
        }
        else {
          uint64_t v17 = 1LL;
        }
      }

      else
      {
        uint64_t v17 = 1LL;
      }
    }
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return v17;
}

void sub_10028117C(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v16 expirationDate]);
  if (v3)
  {
    id v4 = 0LL;
    BOOL v5 = 1;
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PassRelevancyDates relevancyDatesForPassPID:inDatabase:]( PassRelevancyDates,  "relevancyDatesForPassPID:inDatabase:",  [v16 persistentID],  *(void *)(a1 + 32)));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[PKPassRelevantDate findDateFromDates:option:]( &OBJC_CLASS___PKPassRelevantDate,  "findDateFromDates:option:",  v6,  3LL));
    BOOL v5 = v4 != 0LL;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v16 signingDate]);
  unint64_t v8 = (unint64_t)[v16 passStyle];
  uint64_t v9 = (char *)[v16 sortingState];
  [v3 timeIntervalSinceNow];
  if (v10 < 0.0
    || ([v16 voided] & 1) != 0
    || ([v4 timeIntervalSinceNow], v11 <= -86400.0)
    || !v5 && v8 <= 9 && ((1 << v8) & 0x214) != 0 && ([v7 timeIntervalSinceNow], v12 < -31536000.0)
    || *(void *)(a1 + 40) != 1LL && (unint64_t)(v9 - 1) <= 1)
  {
    id v13 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100281350;
    v17[3] = &unk_100647810;
    id v18 = v13;
    id v14 = v16;
    uint64_t v15 = *(void *)(a1 + 40);
    id v19 = v14;
    uint64_t v20 = v15;
    sub_1002CCC5C((uint64_t)v18, v17);
  }
}

uint64_t sub_100281350(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[PassAnnotations anyInDatabase:withPassID:]( &OBJC_CLASS___PassAnnotations,  "anyInDatabase:withPassID:",  v2,  v3));
  [v4 updateSortingState:*(void *)(a1 + 48)];

  return 1LL;
}

id sub_100281494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PassAnnotations,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002816B8(id a1, PKPassAnnotations *a2, id a3)
{
  id v4 = a2;
  -[PKPassAnnotations setSortingState:](v4, "setSortingState:", [a3 integerValue]);
}

void sub_1002816FC(id a1, PKPassAnnotations *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPassAnnotations setArchivedTimestamp:](v4, "setArchivedTimestamp:", v5);
}

void sub_100281F0C(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void *sub_100282058(void *result)
{
  if (*(_BYTE *)(result[4] + 104LL))
  {
    uint64_t v1 = result;
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Attempting to restore application after database restoration",  v4,  2u);
    }

    *(_BYTE *)(v1[4] + 104LL) = 0;
    return [(id)v1[4] updateApplicationsWithCompletion:&stru_1006512C0];
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1002820EC(id a1, NSArray *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(13LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Applications updated following database restoration",  v5,  2u);
  }
}

void sub_100282A4C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100282AD8;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_100282AD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100282BAC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  if (v2)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100282C34;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_100282C34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100282CE8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationIdentifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_queue_featureApplicationWithIdentifier:", v2));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  if (!v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 32) insertOrUpdateFeatureApplication:*(void *)(a1 + 32)]);
    uint64_t v8 = *(void *)(a1 + 40);
    if (v4)
    {
      __int128 v7 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 72) objectForKeyedSubscript:v4]);
      if (!v7)
      {
        __int128 v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [*(id *)(*(void *)(a1 + 40) + 72) setObject:v7 forKeyedSubscript:v4];
      }

      goto LABEL_10;
    }

uint64_t sub_100282F90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100283048(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_featureApplicationWithIdentifier:", *(void *)(a1 + 40)));
  id v3 = v2;
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 accountIdentifier]);
    uint64_t v5 = *(void *)(a1 + 32);
    if (v4)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 72) objectForKeyedSubscript:v4]);
      [v6 removeObject:v3];
    }

    else
    {
      [*(id *)(v5 + 64) removeObject:v3];
    }

    [*(id *)(*(void *)(a1 + 32) + 32) deleteFeatureApplicationWithIdentifier:*(void *)(a1 + 40)];

    __int128 v7 = *(void **)(a1 + 32);
    id v13 = v3;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
    [v7 _processDeletedApplications:v8];

    [*(id *)(a1 + 32) _postApplicationsChangedNotification];
    [*(id *)(a1 + 32) _concludeIDVSessionIfNeededForFeatureApplication:v3];
  }

  __int128 v9 = *(void **)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002831B4;
    block[3] = &unk_10063A830;
    id v12 = v9;
    dispatch_async(v10, block);
  }
}

uint64_t sub_1002831B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002833A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100283420;
  v8[3] = &unk_10063A830;
  id v9 = v5;
  id v7 = v5;
  [v6 deleteApplicationsWithCompletion:v8];
}

void sub_100283420(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100283470(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002834F8;
  v9[3] = &unk_10063A830;
  id v10 = v5;
  id v8 = v5;
  [v7 deleteApplicationsForAccountIdentifier:v6 completion:v9];
}

void sub_1002834F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

uint64_t sub_100283548(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002835D8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10028365C;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_10028365C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100283710(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100283798;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_100283798(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002838F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v3, "applyManager:didAddApplication:") & 1) != 0) {
          objc_msgSend(v3, "applyManager:didAddApplication:", *(void *)(a1 + 40), v9, (void)v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

void sub_100283CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if (objc_msgSend(v9, "count", (void)v12) == (id)2)
        {
          __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:1]);
          if ((objc_opt_respondsToSelector(v3, "applyManager:didUpdateApplication:oldApplication:") & 1) != 0) {
            [v3 applyManager:*(void *)(a1 + 40) didUpdateApplication:v11 oldApplication:v10];
          }
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }
}

void sub_100283E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 16);
  v8[2] = sub_100283F0C;
  v8[3] = &unk_10063B060;
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void *sub_100283F0C(void *result)
{
  if (result[4])
  {
    uint64_t v1 = result;
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Silent sharing failed, roll user interaction banner",  v4,  2u);
    }

    return [*(id *)(v1[5] + 184) postApplyStateRequiresUserInteractionNotificationWithNewApplication:v1[6] oldApplication:v1[7]];
  }

  return result;
}

void sub_1002840DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v3, "applyManager:didRemoveApplication:") & 1) != 0) {
          objc_msgSend(v3, "applyManager:didRemoveApplication:", *(void *)(a1 + 40), v9, (void)v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

void sub_100284318(uint64_t a1)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        if (([v7 applicationStateDirty] & 1) == 0)
        {
          [v7 setApplicationStateDirty:1];
          id v8 = [*(id *)(*(void *)(a1 + 32) + 32) insertOrUpdateFeatureApplication:v7];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v4);
  }

  uint64_t v9 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) featureApplications]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);
  __int128 v12 = -[NSMutableArray initWithArray:](v9, "initWithArray:", v11);
  uint64_t v13 = *(void *)(a1 + 32);
  __int128 v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  __int128 v15 = *(void **)(a1 + 40);
  if (v15)
  {
    id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002844E8;
    block[3] = &unk_10063A830;
    id v18 = v15;
    dispatch_async(v16, block);
  }

uint64_t sub_1002844E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10028459C(uint64_t a1)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if (([v7 applicationStateDirty] & 1) == 0)
        {
          id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "errorForFeature:", objc_msgSend(v7, "feature")));
          if (v8)
          {
            [v7 setApplicationStateDirty:1];
            id v9 = [*(id *)(*(void *)(a1 + 32) + 32) insertOrUpdateFeatureApplication:v7];
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v4);
  }

  __int128 v10 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) featureApplications]);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 allObjects]);
  uint64_t v13 = -[NSMutableArray initWithArray:](v10, "initWithArray:", v12);
  uint64_t v14 = *(void *)(a1 + 32);
  __int128 v15 = *(void **)(v14 + 64);
  *(void *)(v14 + 64) = v13;

  id v16 = *(void **)(a1 + 48);
  if (v16)
  {
    uint64_t v17 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100284790;
    block[3] = &unk_10063A830;
    id v19 = v16;
    dispatch_async(v17, block);
  }

uint64_t sub_100284790(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100284844(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 72) objectForKeyedSubscript:a1[5]]);
  id v3 = v2;
  if (v2)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v18;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
          if (([v8 applicationStateDirty] & 1) == 0)
          {
            [v8 setApplicationStateDirty:1];
            id v9 = [*(id *)(a1[4] + 32) insertOrUpdateFeatureApplication:v8];
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }

      while (v5);
    }

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) featureApplications]);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);
    id v12 = [v11 mutableCopy];

    [*(id *)(a1[4] + 72) setObject:v12 forKeyedSubscript:a1[5]];
  }

  uint64_t v13 = (void *)a1[6];
  if (v13)
  {
    uint64_t v14 = *(dispatch_queue_s **)(a1[4] + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100284A10;
    block[3] = &unk_10063A830;
    id v16 = v13;
    dispatch_async(v14, block);
  }
}

uint64_t sub_100284A10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100284AC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_featureApplicationWithIdentifier:", *(void *)(a1 + 40)));
  id v3 = v2;
  if (v2 && ([v2 applicationStateDirty] & 1) == 0)
  {
    [v3 setApplicationStateDirty:1];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) insertOrUpdateFeatureApplication:v3]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountIdentifier]);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v7 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 72) objectForKeyedSubscript:v5]);
      if (!v7)
      {
        uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [*(id *)(*(void *)(a1 + 32) + 72) setObject:v7 forKeyedSubscript:v5];
      }

      -[NSMutableArray removeObject:](v7, "removeObject:", v3);
      -[NSMutableArray addObject:](v7, "addObject:", v4);
    }

    else
    {
      [*(id *)(v6 + 64) removeObject:v3];
      [*(id *)(*(void *)(a1 + 32) + 64) addObject:v4];
    }
  }

  id v8 = *(void **)(a1 + 48);
  if (v8)
  {
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100284C30;
    block[3] = &unk_10063A830;
    id v11 = v8;
    dispatch_async(v9, block);
  }
}

uint64_t sub_100284C30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100284CC8(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v7) copy];
        -[NSMutableArray addObject:](v2, "addObject:", v8);

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v5);
  }

  id v9 = *(void **)(a1 + 40);
  __int128 v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100284E48;
  v12[3] = &unk_1006396B0;
  uint64_t v13 = v2;
  id v14 = v9;
  id v11 = v2;
  dispatch_async(v10, v12);
}

uint64_t sub_100284E48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100284F04(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v3 = [v2 copy];

  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100284FB8;
  v7[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100284FB8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100285070(void *a1)
{
  id v3 = (void *)a1[4];
  if (v3)
  {
    id v4 = *(void **)(a1[5] + 64LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100285188;
    v13[3] = &unk_100651310;
    uint64_t v1 = &v14;
    id v14 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_objectsPassingTest:", v13));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  }

  else
  {
    id v6 = 0LL;
  }

  uint64_t v7 = (void *)a1[6];
  id v8 = *(dispatch_queue_s **)(a1[5] + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100285210;
  block[3] = &unk_1006396B0;
  id v11 = v6;
  id v12 = v7;
  id v9 = v6;
  dispatch_async(v8, block);

  if (v3) {
}
  }

uint64_t sub_100285188(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 referenceIdentifier]);
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    if (v4) {
      BOOL v7 = v5 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

uint64_t sub_100285210(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1002852CC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_featureApplicationWithIdentifier:", *(void *)(a1 + 40)));
  id v3 = *(void **)(a1 + 40);
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100285388;
  block[3] = &unk_100639AF0;
  id v7 = v2;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v2;
  dispatch_async(v4, block);
}

uint64_t sub_100285388(void *a1)
{
  if (!a1[4])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      int v6 = 138543362;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "No application with identifier: %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1002854E4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 80) count])
  {
    uint64_t v4 = -[PDApplyManagerUpdateApplicationsRequest initWithFromPush:completion:]( objc_alloc(&OBJC_CLASS___PDApplyManagerUpdateApplicationsRequest),  "initWithFromPush:completion:",  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 40));
    [*(id *)(*(void *)(a1 + 32) + 112) addObject:v4];
    objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Skipping application update as its not supported by region",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

id sub_100285664(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) objectForKey:*(void *)(a1 + 40)]);

  if (v2)
  {
    if (*(void *)(a1 + 48))
    {
      id v3 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKey:*(void *)(a1 + 40)]);
      if (!v3) {
        id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      }
      id v4 = [*(id *)(a1 + 48) copy];
      id v5 = objc_retainBlock(v4);
      -[NSMutableArray addObject:](v3, "addObject:", v5);

      [*(id *)(*(void *)(a1 + 32) + 120) setObject:v3 forKey:*(void *)(a1 + 40)];
    }

    return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Skipping application update for account %@ with no apply service URL",  (uint8_t *)&v10,  0xCu);
    }

    id result = *(id *)(a1 + 48);
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
    }
  }

  return result;
}

void sub_1002859C4(_Unwind_Exception *a1)
{
}

id sub_1002859E4(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 count];
  if (result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return result;
}

void sub_100285A1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100285AB0;
  v9[3] = &unk_10063A830;
  id v10 = v5;
  id v8 = v5;
  objc_msgSend(v7, "_queue_updateApplicationsWithRequests:completion:", v6, v9);
}

void sub_100285AB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100285B00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 copy];
  id v8 = [v6 count];

  if (v8)
  {
    [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:v5];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100285BDC;
    v10[3] = &unk_10063EC90;
    uint64_t v9 = *(void **)(a1 + 40);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v5;
    id v12 = v7;
    [v9 addOperation:v10];
  }
}

void sub_100285BDC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  *(_BYTE *)(a1[4] + 105LL) = 1;
  id v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100285C78;
  v10[3] = &unk_10063A830;
  id v11 = v5;
  id v9 = v5;
  objc_msgSend(v6, "_queue_updateApplicationsForAccountIdentifier:withCompletionBlocks:completion:", v7, v8, v10);
}

void sub_100285C78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_100285CC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(dispatch_queue_s **)(v1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100285D20;
  block[3] = &unk_100639300;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_100285D20(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
}

void sub_100285F68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100285F98(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100286040;
  v6[3] = &unk_1006415C0;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 applicationsWithCompletion:v6];
}

void sub_100286040(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v8), "completion", (void)v11));
        id v10 = (void *)v9;
        if (v9) {
          (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v3, *(void *)(a1 + 40));
        }

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100286170(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100286180(uint64_t a1)
{
}

void sub_100286188(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v32 objects:v38 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v33;
    while (2)
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v33 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v32 + 1) + 8 * (void)v7) fromPush])
        {

          char v14 = 1;
          goto LABEL_16;
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v32 objects:v38 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  if (*(void *)(*(void *)(a1 + 40) + 96) && (objc_msgSend(v2, "timeIntervalSinceDate:"), v8 < 10.0))
  {
    [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 40) + 96)];
    double v10 = v9;
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v10));
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v37 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Not updated applications because applications were last updated %@ seconds ago.",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    char v14 = 0;
LABEL_16:
    __int128 v16 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    __int128 v17 = *(void **)(v15 + 40);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10028641C;
    v22[3] = &unk_100651450;
    uint64_t v27 = *(void *)(a1 + 64);
    v22[4] = v15;
    char v30 = v14;
    id v18 = v16;
    uint64_t v19 = *(void *)(a1 + 72);
    id v23 = v18;
    uint64_t v28 = v19;
    id v20 = *(id *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 80);
    id v24 = v20;
    uint64_t v29 = v21;
    char v31 = *(_BYTE *)(a1 + 88);
    id v26 = *(id *)(a1 + 56);
    id v25 = v2;
    [v17 performHandlerOnSharedWebServiceQueue:v22];
  }
}

void sub_10028641C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 context]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 regions]);

  id v5 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v38;
    do
    {
      double v10 = 0LL;
      do
      {
        if (*(void *)v38 != v9) {
          objc_enumerationMutation(v6);
        }
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:*(void *)(*((void *)&v37 + 1) + 8 * (void)v10)]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 applyServiceURL]);

        if (v12)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
          v30[0] = _NSConcreteStackBlock;
          v30[1] = 3221225472LL;
          v30[2] = sub_1002866E0;
          v30[3] = &unk_1006513D8;
          v30[4] = *(void *)(a1 + 32);
          id v31 = v11;
          char v36 = *(_BYTE *)(a1 + 96);
          id v13 = *(id *)(a1 + 40);
          uint64_t v14 = *(void *)(a1 + 80);
          id v32 = v13;
          uint64_t v34 = v14;
          id v15 = *(id *)(a1 + 48);
          uint64_t v16 = *(void *)(a1 + 88);
          id v33 = v15;
          uint64_t v35 = v16;
          [v5 addOperation:v30];
        }

        double v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v37 objects:v41 count:16];
    }

    while (v8);
  }

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_100286CB8;
  v23[3] = &unk_100651428;
  char v29 = *(_BYTE *)(a1 + 97);
  v23[4] = *(void *)(a1 + 32);
  __int128 v22 = *(_OWORD *)(a1 + 64);
  id v18 = (id)v22;
  __int128 v26 = v22;
  uint64_t v27 = *(void *)(a1 + 88);
  id v24 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 80);
  id v25 = v19;
  uint64_t v28 = v20;
  id v21 = [v5 evaluateWithInput:v17 completion:v23];
}

void sub_1002866E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1002867DC;
  v16[3] = &unk_1006513B0;
  id v17 = v8;
  char v25 = *(_BYTE *)(a1 + 80);
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  id v18 = v10;
  uint64_t v19 = v11;
  __int128 v12 = *(void **)(a1 + 56);
  uint64_t v23 = *(void *)(a1 + 64);
  id v20 = v12;
  id v21 = v6;
  uint64_t v13 = *(void *)(a1 + 72);
  id v22 = v7;
  uint64_t v24 = v13;
  id v14 = v6;
  id v15 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v16];
}

void sub_1002867DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKApplyWebServiceApplicationsRequest);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applyServiceURL]);
  [v4 setApplyServiceURL:v5];

  id v6 = objc_alloc(&OBJC_CLASS___NSString);
  if (*(_BYTE *)(a1 + 96)) {
    id v7 = @"YES";
  }
  else {
    id v7 = @"NO";
  }
  id v8 = -[NSString initWithFormat:](v6, "initWithFormat:", @"Update Applications From Push - %@", v7);
  [v4 addDiagnosticReason:v8];

  uint64_t v9 = objc_alloc(&OBJC_CLASS___NSString);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) count]));
  uint64_t v11 = -[NSString initWithFormat:](v9, "initWithFormat:", @"Update Applications Coalesced Requests - %@", v10);
  [v4 addDiagnosticReason:v11];

  if (*(void *)(*(void *)(a1 + 48) + 96LL))
  {
    __int128 v12 = objc_alloc(&OBJC_CLASS___NSString);
    [*(id *)(*(void *)(a1 + 48) + 96) timeIntervalSinceReferenceDate];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    id v14 = -[NSString initWithFormat:]( v12,  "initWithFormat:",  @"Update Applications Last Request Timestamp - %@",  v13);
    [v4 addDiagnosticReason:v14];
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1002869F0;
  v19[3] = &unk_100651388;
  uint64_t v24 = *(void *)(a1 + 80);
  id v15 = *(id *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 48);
  id v20 = v15;
  uint64_t v21 = v16;
  id v23 = *(id *)(a1 + 72);
  id v17 = *(id *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 88);
  id v22 = v17;
  uint64_t v25 = v18;
  [v3 applicationsWithRequest:v4 completion:v19];
}

void sub_1002869F0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 featureFailures]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = *(void **)(a1 + 32);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 allFeatureApplications]);

  [v11 addObjectsFromArray:v12];
  uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (v13)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 description]);
      *(_DWORD *)__int128 buf = 138543362;
      id v32 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Could not update some applications with feature failures %{public}@",  buf,  0xCu);
    }

    id v17 = *(void **)(a1 + 40);
    uint64_t v18 = *(void **)(a1 + 56);
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100286C90;
    v28[3] = &unk_1006396B0;
    id v30 = v18;
    id v29 = *(id *)(a1 + 48);
    [v17 _applicationsAreInDirtyWithFeatureFailures:v19 completion:v28];

    id v20 = v30;
  }

  else
  {
    if (!v6)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      goto LABEL_10;
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a3);
    uint64_t v21 = PKLogFacilityTypeGetObject(13LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138543362;
      id v32 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Could not update applications with error %{public}@",  buf,  0xCu);
    }

    uint64_t v24 = *(void **)(a1 + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100286CA4;
    v25[3] = &unk_1006396B0;
    id v27 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 48);
    [v24 _applicationsAreInDirtyStateWithCompletion:v25];

    id v20 = v27;
  }

LABEL_10:
}

uint64_t sub_100286C90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_100286CA4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  1LL);
}

void sub_100286CB8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(_BYTE *)(a1 + 88) && !*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Error: Applications on disk but missing URL or push topic - forcing a re-register. FILE A RADAR !",  buf,  2u);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) deviceRegistrationServiceCoordinator]);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100286E8C;
    v27[3] = &unk_10064B4E0;
    id v19 = *(id *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 72);
    id v28 = v19;
    uint64_t v29 = v20;
    [v18 performDeviceRegistrationForReason:@"Missing Apply URL/Topic" brokerURL:0 action:1 forceApplePayRegister:1 forcePeerPaymentRegister:1 completion:v27];

    id v15 = v28;
    goto LABEL_9;
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = *(dispatch_queue_s **)(v8 + 16);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100286EA4;
    v21[3] = &unk_100651400;
    v21[4] = v8;
    id v22 = v9;
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 80);
    id v23 = v11;
    uint64_t v25 = v12;
    id v13 = *(id *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 72);
    id v24 = v13;
    uint64_t v26 = v14;
    dispatch_async(v10, v21);

    id v15 = v22;
LABEL_9:

    goto LABEL_10;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_10:
}

uint64_t sub_100286E8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

uint64_t sub_100286EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100287160( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100287180(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100287230;
  v7[3] = &unk_1006415C0;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = *(id *)(a1 + 56);
  id v6 = v3;
  [v4 applicationsForAccountIdentifier:v5 withCompletion:v7];
}

void sub_100287230(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v8) + 16LL))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v8));
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
}

void sub_100287348(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100287404;
  v6[3] = &unk_100651540;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  uint64_t v12 = *(void *)(a1 + 72);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_100287404(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100287570;
    v14[3] = &unk_10063CB58;
    void v14[4] = *(void *)(a1 + 40);
    id v4 = v3;
    uint64_t v5 = *(void *)(a1 + 72);
    id v15 = v4;
    uint64_t v18 = v5;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    [v2 addOperation:v14];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002878F4;
  v9[3] = &unk_100651518;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 72);
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 64);
  id v8 = [v2 evaluateWithInput:v6 completion:v9];
}

void sub_100287570(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100287660;
  v15[3] = &unk_1006514C8;
  id v10 = v8;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v16 = v10;
  uint64_t v17 = v11;
  id v12 = *(id *)(a1 + 48);
  id v21 = v7;
  id v18 = v12;
  id v19 = v6;
  id v20 = *(id *)(a1 + 56);
  id v13 = v6;
  id v14 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v15];
}

void sub_100287660(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKApplyWebServiceApplicationsRequest);
  [v4 setApplyServiceURL:*(void *)(a1 + 32)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100287750;
  v7[3] = &unk_1006514A0;
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 80);
  void v7[4] = v5;
  id v8 = v6;
  id v11 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  [v3 applicationsWithRequest:v4 completion:v7];
}

void sub_100287750(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a3);
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138543362;
      id v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Could not update applications with error %{public}@",  buf,  0xCu);
    }

    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1002878E0;
    v14[3] = &unk_1006396B0;
    id v16 = *(id *)(a1 + 64);
    id v15 = *(id *)(a1 + 48);
    [v10 applicationsForAccountIdentifierAreInDirtyState:v11 completion:v14];
  }

  else
  {
    uint64_t v12 = *(void **)(a1 + 56);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([a2 allFeatureApplications]);
    [v12 addObjectsFromArray:v13];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

uint64_t sub_1002878E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  1LL);
}

void sub_1002878F4(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    id v4 = *(dispatch_queue_s **)(v2 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002879C0;
    block[3] = &unk_1006514F0;
    void block[4] = v2;
    id v8 = v3;
    id v9 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    id v10 = v5;
    uint64_t v11 = v6;
    dispatch_async(v4, block);
  }

uint64_t sub_1002879C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100287AA4(uint64_t a1)
{
  uint64_t v2 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) objectForKey:*(void *)(a1 + 40)]);
  if (!v2) {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  }
  id v4 = v2;
  id v3 = [*(id *)(a1 + 48) copy];
  -[NSMutableArray addObject:](v4, "addObject:", v3);

  [*(id *)(*(void *)(a1 + 32) + 136) setObject:v4 forKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) queuePerformNextApplicationUpdateWithIdentifier:*(void *)(a1 + 40)];
}

void sub_100287D48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100287DFC;
  v8[3] = &unk_100651568;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v6;
  id v7 = v3;
  [v4 applicationWithIdentifier:v5 completion:v8];
}

void sub_100287DFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8LL * (void)v8) + 16LL))();
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v6);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = *(void **)(a1 + 56);
  uint64_t v11 = *(dispatch_queue_s **)(v9 + 16);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100287F5C;
  v12[3] = &unk_1006392B0;
  void v12[4] = v9;
  id v13 = v10;
  dispatch_async(v11, v12);
}

id sub_100287F5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) queuePerformNextApplicationUpdateWithIdentifier:*(void *)(a1 + 40)];
}

void sub_100287F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKApplyWebServiceApplyRequest);
  [v4 setApplicationIdentifier:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 applicationBaseURL]);

  [v4 setBaseURL:v5];
  id v6 = *(void **)(*(void *)(a1 + 40) + 40LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10028808C;
  v10[3] = &unk_100646D90;
  id v11 = v4;
  int8x16_t v9 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v9.i64[0];
  int8x16_t v12 = vextq_s8(v9, v9, 8uLL);
  id v13 = *(id *)(a1 + 48);
  id v8 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v10];
}

void sub_10028808C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100288128;
  v5[3] = &unk_100651590;
  uint64_t v4 = *(void *)(a1 + 32);
  v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 applyWithRequest:v4 completion:v5];
}

void sub_100288128(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int8x16_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138543362;
      id v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Could not update application with error %{public}@",  buf,  0xCu);
    }

    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1002882DC;
    v16[3] = &unk_1006396B0;
    id v18 = *(id *)(a1 + 48);
    id v17 = v6;
    [v10 applicationIsInDirtyStateWithIdentifier:v11 completion:v16];

    int8x16_t v12 = v18;
  }

  else
  {
    int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 featureApplication]);
    id v13 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1002882EC;
    v14[3] = &unk_10063A830;
    id v15 = *(id *)(a1 + 48);
    [v13 insertOrReplaceApplication:v12 completion:v14];
  }
}

uint64_t sub_1002882DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1002882EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100288418(void *a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___PKApplyWebServiceAugmentedProductRequest);
  [v2 setInstallmentConfiguration:a1[4]];
  [v2 setExperimentDetails:a1[5]];
  id v3 = (void *)a1[7];
  uint64_t v4 = *(void **)(a1[6] + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002884C8;
  v6[3] = &unk_10064B710;
  id v7 = v2;
  id v8 = v3;
  id v5 = v2;
  [v4 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_1002884C8(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10028853C;
  v4[3] = &unk_1006515E0;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 augmentedProductWithRequest:v3 completion:v4];
}

void sub_10028853C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int8x16_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v11 = 138412290;
      int8x16_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Unable to fetch augmentedProduct: %@",  (uint8_t *)&v11,  0xCu);
    }

    id v10 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    id v10 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v10();
}

void sub_1002886EC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) sharedWebServiceContext]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 regions]);

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v6)
  {
    id v7 = v6;
    LOBYTE(v_Block_object_dispose((const void *)(v27 - 184), 8) = 0;
    uint64_t v9 = *(void *)v40;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v40 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v39 + 1) + 8LL * (void)i);
        int8x16_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v11, (void)v39));
        id v13 = v12;
        if ((v8 & 1) != 0) {
          unsigned int v8 = 1;
        }
        else {
          unsigned int v8 = [v12 hasApplications];
        }
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 applyServiceURL]);
        if (v14) {
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v14, v11);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v39 objects:v47 count:16];
    }

    while (v7);

    uint64_t v15 = *(void *)(a1 + 32);
    __int128 v16 = (_BYTE *)(v15 + 56);
    if (((v8 ^ (*(_BYTE *)(v15 + 56) == 0)) & 1) != 0)
    {
      int v17 = 0;
      if (!*(_BYTE *)(v15 + 56)) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
  }

  else
  {

    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(unsigned __int8 *)(v18 + 56);
    __int128 v16 = (_BYTE *)(v18 + 56);
    if (!v19)
    {
      if ((PKEqualObjects(v4, *(void *)(*(void *)(a1 + 32) + 80LL)) & 1) != 0) {
        goto LABEL_50;
      }
      LOBYTE(v17) = 0;
      goto LABEL_33;
    }

    LOBYTE(v_Block_object_dispose((const void *)(v27 - 184), 8) = 0;
  }

  *__int128 v16 = v8;
  uint64_t Object = PKLogFacilityTypeGetObject(13LL);
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 56LL)) {
      uint64_t v22 = @"YES";
    }
    else {
      uint64_t v22 = @"NO";
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v44 = (const char *)v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "hasApplications changed to %@", buf, 0xCu);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  int v17 = 1;
  if (*(_BYTE *)(v15 + 56))
  {
LABEL_24:
    if (!objc_msgSend(*(id *)(v15 + 64), "count", (void)v39))
    {
      uint64_t v23 = PKLogFacilityTypeGetObject(13LL);
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "hasApplications YES but no applications on disk",  buf,  2u);
      }

      int v17 = 1;
    }
  }

void sub_100288B80(id a1, NSArray *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(13LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Applications updated following context and account URL change",  v5,  2u);
  }
}

void sub_1002891E8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  v11[2] = sub_100289328;
  v11[3] = &unk_100639AF0;
  id v2 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v12 = v2;
  id v13 = *(id *)(a1 + 48);
  uint64_t v3 = objc_retainBlock(v11);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) authenticationContext]);
  id v5 = v4;
  if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100289444;
    v7[3] = &unk_100651650;
    id v8 = v4;
    uint64_t v9 = v3;
    id v10 = *(id *)(a1 + 48);
    [v6 _authenticateApplyContext:v8 completion:v7];
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_100289328(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002893B4;
  v6[3] = &unk_100642480;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_1002893B4(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100289430;
  v4[3] = &unk_100651628;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [a2 applyWithRequest:v3 completion:v4];
}

id sub_100289430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100289444(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [v11 count];
  if (v7 && v9)
  {
    [*(id *)(a1 + 32) setCertificates:v11];
    [*(id *)(a1 + 32) setSignature:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v8);
    }
  }
}

void sub_100289638(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a3) {
    CFRetain(a3);
  }
  id v9 = [v7 count];
  if (!a3 || v8 || !v9)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(13LL);
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)error = 138412290;
      *(void *)&error[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Apply authentication BAA certificate generation error: %@",  error,  0xCu);
    }

    if (a3) {
      CFRelease(a3);
    }
    goto LABEL_16;
  }

  uint64_t v10 = (const __CFData *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signaturePayload]);
  *(void *)error = 0LL;
  CFDataRef Signature = SecKeyCreateSignature( (SecKeyRef)a3,  kSecKeyAlgorithmECDSASignatureMessageX962SHA256,  v10,  (CFErrorRef *)error);
  if (*(void *)error)
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(13LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unable to generate signature for apply request.",  v17,  2u);
    }
  }

  CFRelease(a3);
  if (!Signature)
  {
LABEL_16:
    CFDataRef Signature = (CFDataRef)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKApplyErrorDomain,  1LL,  0LL));
    __int128 v14 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_17;
  }

  __int128 v14 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_17:
  v14();
}

void sub_1002898D8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100289970;
  v6[3] = &unk_100642480;
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v6[1] = 3221225472LL;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_100289970(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002899EC;
  v4[3] = &unk_100651628;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [a2 submitDocumentsWithRequest:v3 completion:v4];
}

id sub_1002899EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100289AA8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100289B40;
  v6[3] = &unk_100642480;
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v6[1] = 3221225472LL;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_100289B40(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100289BBC;
  v4[3] = &unk_100651628;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [a2 submitVerificationWithRequest:v3 completion:v4];
}

id sub_100289BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100289C78(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  v11[2] = sub_100289DB8;
  v11[3] = &unk_100639AF0;
  id v2 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v12 = v2;
  id v13 = *(id *)(a1 + 48);
  uint64_t v3 = objc_retainBlock(v11);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) authenticationContext]);
  id v5 = v4;
  if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100289ED4;
    v7[3] = &unk_100651650;
    id v8 = v4;
    id v9 = v3;
    id v10 = *(id *)(a1 + 48);
    [v6 _authenticateApplyContext:v8 completion:v7];
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_100289DB8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100289E44;
  v6[3] = &unk_100642480;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_100289E44(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100289EC0;
  v4[3] = &unk_100651628;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [a2 submitTermsWithRequest:v3 completion:v4];
}

id sub_100289EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100289ED4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [v11 count];
  if (v7 && v9)
  {
    [*(id *)(a1 + 32) setCertificates:v11];
    [*(id *)(a1 + 32) setSignature:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v8);
    }
  }
}

void sub_10028A028(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10028A118;
  v12[3] = &unk_100648088;
  void v12[4] = *(void *)(a1 + 32);
  id v13 = *(id *)(a1 + 48);
  id v2 = objc_retainBlock(v12);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 40LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10028A240;
  v8[3] = &unk_100642480;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v2;
  id v7 = v2;
  [v4 performHandlerOnSharedWebServiceQueue:v8];
}

void sub_10028A118(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10028A1B8;
  block[3] = &unk_10063C6A8;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v7;
  id v12 = v6;
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_10028A1B8(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, a1[4]);
  }
  uint64_t v3 = a1[5];
  id v4 = *(dispatch_queue_s **)(v3 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10028A230;
  block[3] = &unk_100639300;
  void block[4] = v3;
  dispatch_async(v4, block);
}

id sub_10028A230(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
}

void sub_10028A240(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10028A2E8;
  v6[3] = &unk_1006516A0;
  int8x16_t v5 = *(int8x16_t *)(a1 + 32);
  id v4 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  id v8 = *(id *)(a1 + 48);
  [a2 deleteApplicationWithRequest:v4 completion:v6];
}

void sub_10028A2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 32);
    int8x16_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationIdentifier]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10028A3A0;
    v6[3] = &unk_10063A830;
    id v7 = *(id *)(a1 + 48);
    [v4 deleteLocalApplicationWithIdentifier:v5 completion:v6];
  }

uint64_t sub_10028A3A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10028A484(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) featureApplication]);
  if (v3)
  {
    dispatch_group_enter(v2);
    id v4 = *(void **)(a1 + 40);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10028A630;
    v19[3] = &unk_100639300;
    id v20 = v2;
    [v4 insertOrReplaceApplication:v3 completion:v19];
  }

  int8x16_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
  id v6 = v5;
  if (v5 && [v5 type] != (id)4)
  {
    dispatch_group_enter(v2);
    id v7 = *(void **)(*(void *)(a1 + 40) + 48LL);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10028A638;
    v17[3] = &unk_100639300;
    uint64_t v18 = v2;
    [v7 updateAccount:v6 completion:v17];
  }

  id v8 = *(void **)(a1 + 56);
  if (v8)
  {
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 24LL);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10028A640;
    v12[3] = &unk_10063CD60;
    id v16 = v8;
    id v13 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 40);
    id v14 = v10;
    uint64_t v15 = v11;
    dispatch_group_notify(v2, v9, v12);
  }
}

void sub_10028A630(uint64_t a1)
{
}

void sub_10028A638(uint64_t a1)
{
}

void sub_10028A640(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10028A6B4;
  block[3] = &unk_100639300;
  void block[4] = v2;
  dispatch_async(v3, block);
}

id sub_10028A6B4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
}

void sub_10028A6D4(id a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(13LL);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Silent sharing error: CoreIDV called on unsupported platform",  v3,  2u);
  }
}

void sub_10028A7BC(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applyServiceURL]);
  if (v2) {
    [*(id *)(*(void *)(a1 + 40) + 88) setObject:v2 forKey:v8];
  }
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) featureApplicationsWithAccountIdentifier:v8]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
  id v5 = [v4 mutableCopy];

  [*(id *)(*(void *)(a1 + 40) + 72) setObject:v5 forKeyedSubscript:v8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) additionalPushTopics]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 applications]);
  [*(id *)(*(void *)(a1 + 40) + 176) setObject:v7 forKeyedSubscript:v8];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160LL));
  [*(id *)(a1 + 40) _updatePushTopics];
}

void sub_10028A950(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  [*(id *)(*(void *)(a1 + 40) + 88) removeObjectForKey:v2];
  [*(id *)(*(void *)(a1 + 40) + 72) removeObjectForKey:v2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160LL));
  [*(id *)(*(void *)(a1 + 40) + 176) removeObjectForKey:v2];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160LL));
  [*(id *)(a1 + 40) _updatePushTopics];
}

void sub_10028AA54(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applyServiceURL]);
  [*(id *)(*(void *)(a1 + 40) + 88) setObject:v2 forKeyedSubscript:v8];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) featureApplicationsWithAccountIdentifier:v8]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
  id v5 = [v4 mutableCopy];

  [*(id *)(*(void *)(a1 + 40) + 72) setObject:v5 forKeyedSubscript:v8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) additionalPushTopics]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 applications]);
  [*(id *)(*(void *)(a1 + 40) + 176) setObject:v7 forKeyedSubscript:v8];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160LL));
  [*(id *)(a1 + 40) _updatePushTopics];
}

void sub_10028AF34(_Unwind_Exception *a1)
{
}

void sub_10028AF60(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  id v7 = v5;
  id v8 = v7;
  if (v6 == v7)
  {
  }

  else
  {
    if (!v7 || !v6)
    {

      goto LABEL_9;
    }

    unsigned int v9 = [v6 isEqualToString:v7];

    if (!v9) {
      goto LABEL_9;
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
LABEL_9:
}

void sub_10028B014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(13LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2114;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Applications for account %@ updated following push notification with error: %{public}@ ",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10028B0D4(id a1, NSArray *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(13LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138543362;
    uint64_t v7 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Applications updated following push notification with error: %{public}@ ",  (uint8_t *)&v6,  0xCu);
  }
}

int64_t sub_10028C448(id a1, PKPayLaterPayment *a2, PKPayLaterPayment *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterPayment postedDate](a2, "postedDate"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterPayment postedDate](v4, "postedDate"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10028D678(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  id v2 = (void *)qword_100707AC0;
  qword_100707AC0 = (uint64_t)v1;

  uint64_t v3 = (void *)qword_100707AC0;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSCalendar calendarWithIdentifier:]( &OBJC_CLASS___NSCalendar,  "calendarWithIdentifier:",  NSCalendarIdentifierGregorian));
  [v3 setCalendar:v4];

  [(id)qword_100707AC0 setLocalizedDateFormatFromTemplate:@"MMM d"];
}

void sub_10028F274( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10028F298(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10028F2A8(uint64_t a1)
{
}

void sub_10028F2B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = a3;
  __int16 v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentCommutePlanReminder);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) withProperties:v9 values:a4];
  *a6 = 1;
}

void sub_10028F5A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10028F5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  int v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CommutePlanReminder),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int16 v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

id sub_10028FAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___CommutePlanReminder,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10028FBC8(id a1, PKPaymentCommutePlanReminder *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentCommutePlanReminder setTimeInterval:](v4, "setTimeInterval:");
}

id sub_1002902AC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasNoPendingChanges])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] sync coordinator has no pending changes after delay",  buf,  2u);
    }

    [*(id *)(a1 + 32) resetPendingChangesDelay];
    return [*(id *)(a1 + 32) eraseDroppedProcessPendingChangesAttempt];
  }

  else if ([*(id *)(*(void *)(a1 + 32) + 48) isBusy])
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(9LL);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] manager is busy, can't process changes now",  buf,  2u);
    }

    [*(id *)(a1 + 32) increasePendingChangesDelay];
    [*(id *)(a1 + 32) scheduleProcessPendingChangesAttempt];
    return [*(id *)(a1 + 32) markDroppedProcessPendingChangesAttempt];
  }

  else
  {
    [*(id *)(a1 + 32) eraseDroppedProcessPendingChangesAttempt];
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002903F4;
    v9[3] = &unk_10063AFC0;
    void v9[4] = v7;
    return [v8 processPendingChanges:v9];
  }

void sub_1002903F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    int v9 = 138543618;
    __int16 v10 = v8;
    __int16 v11 = 2114;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] did process pending changes processing:%{public}@ originated in sync coordinator %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  if ((_DWORD)a2)
  {
    [*(id *)(a1 + 32) resetPendingChangesDelay];
    [*(id *)(a1 + 32) rescheduleDroppedProcessPendingChangesIfNecessary];
  }

  else if (+[PDCardCloudManager shouldProcessPendingChangesWhenConnectedToPowerSupplyDueToError:]( &OBJC_CLASS___PDCardCloudManager,  "shouldProcessPendingChangesWhenConnectedToPowerSupplyDueToError:",  v5))
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] will re-try processing when connected to battery",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) resetPendingChangesDelay];
    [*(id *)(a1 + 32) scheduleProcessPendingChangesAttemptWhenConnetedToPowerSupply];
  }

  else if (+[PDCardCloudManager shouldProcessPendingChangesSignificantlyLaterDueToError:]( &OBJC_CLASS___PDCardCloudManager,  "shouldProcessPendingChangesSignificantlyLaterDueToError:",  v5))
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] will re-try processing significantly later",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) resetPendingChangesDelay];
  }

  else
  {
    [*(id *)(a1 + 32) increasePendingChangesDelay];
    [*(id *)(a1 + 32) scheduleProcessPendingChangesAttempt];
  }
}

uint64_t sub_10029076C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

NSString *__cdecl sub_100290C44(id a1, PKChangeHistoryEvent *a2)
{
  id v2 = a2;
  else {
    uint64_t v3 = 0LL;
  }

  return (NSString *)v3;
}

uint64_t sub_100290C8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 supportsSyncing])
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    uint64_t v6 = [v4 containsObject:v5] ^ 1;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_100290F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", a2, a3));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localPassesWithUniqueIDs:v5]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

NSString *__cdecl sub_100291010(id a1, PKPass *a2)
{
  return (NSString *)-[PKPass uniqueID](a2, "uniqueID");
}

uint64_t sub_1002910D8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originator]);
    int v7 = 138543362;
    int v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] processing save request from: %{public}@",  (uint8_t *)&v7,  0xCu);
  }

  [*(id *)(a1 + 40) executeLocalPortionOfSaveRequest:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) executeRemotePortionOfSaveRequest:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) processPendingChangesAfterExecutionSaveRequest:*(void *)(a1 + 32)];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originator]);
    int v7 = 138543362;
    int v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] finished processing save request from: %{public}@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  return result;
}

uint64_t sub_100291C90(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

id sub_100291CB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 recordUniqueID]);
  unsigned int v5 = [v3 representsPassAddition];

  if (v5)
  {
    else {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  id v7 = v6;

  return v7;
}

id sub_100291D28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 recordUniqueID]);
  if (([v3 representsPassUpdate] & 1) != 0
    || [v3 representsPassRemoval])
  {
    else {
      unsigned int v5 = 0LL;
    }
  }

  else
  {
    unsigned int v5 = 0LL;
  }

  id v6 = v5;

  return v6;
}

void sub_1002921E8(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3));
    int v7 = 138543362;
    int v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] did process pending changes as part of save request with success: %{public}@",  (uint8_t *)&v7,  0xCu);
  }
}

void sub_1002922A8(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3));
    int v7 = 138543362;
    int v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] did process pending changes as part of save request, after conflict resoltion, with success: %{public}@",  (uint8_t *)&v7,  0xCu);
  }
}

id sub_1002924A4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) objectWithUniqueID:a2];
}

void sub_100292B50(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    unsigned int v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentMessage),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
    *a4 = !-[SQLiteEntity deleteFromDatabase](v5, "deleteFromDatabase");
  }

void sub_100292D20(uint64_t a1, uint64_t a2)
{
  id v2 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentMessage),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  -[PaymentMessage archive](v2, "archive");
}

void sub_100292E58(uint64_t a1, uint64_t a2)
{
  BOOL v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentMessage),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_100293440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentMessage,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002935C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  int v7 = objc_alloc_init(&OBJC_CLASS___PKPaymentMessage);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1002938C8(id a1, PKPaymentMessage *a2, id a3)
{
}

void sub_1002938D0(id a1, PKPaymentMessage *a2, id a3)
{
}

void sub_1002938D8(id a1, PKPaymentMessage *a2, id a3)
{
}

void sub_1002938E0(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentMessage setMessageDate:](v4, "setMessageDate:", v5);
}

void sub_10029392C(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentMessage setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_100293978(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setMessageType:](v4, "setMessageType:", [a3 BOOLValue]);
}

void sub_1002939BC(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setAllowDeepLink:](v4, "setAllowDeepLink:", [a3 BOOLValue]);
}

void sub_100293A00(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setArchived:](v4, "setArchived:", [a3 BOOLValue]);
}

void sub_100293A44(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setHasAssociatedPaymentApplication:]( v4,  "setHasAssociatedPaymentApplication:",  [a3 BOOLValue]);
}

void sub_100293ECC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10029404C(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalancePromotionConfiguration setPromotionType:](v4, "setPromotionType:", [a3 integerValue]);
}

void sub_100294090(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_100294098(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_1002940A0(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalancePromotionConfiguration setGenerationIdentifier:]( v4,  "setGenerationIdentifier:",  [a3 integerValue]);
}

void sub_1002940E4(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalancePromotionConfiguration setStamp:](v4, "setStamp:", [a3 integerValue]);
}

void sub_100294128(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAppleBalancePromotionConfiguration setBonusMinAmount:](v4, "setBonusMinAmount:", v6);
}

void sub_100294178(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAppleBalancePromotionConfiguration setBonusMaxAmount:](v4, "setBonusMaxAmount:", v6);
}

void sub_1002941C8(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_1002941D0(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_1002941D8(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAppleBalancePromotionConfiguration setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

id sub_1002949E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountPhysicalCardShippingUpdate,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_100294BA4(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AccountPhysicalCardShippingUpdate);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  int v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  id v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[AccountPhysicalCardShippingUpdate physicalCardShippingUpdate](v8, "physicalCardShippingUpdate"));
  [v6 addObject:v7];
}

void sub_100294D7C(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_100294D84(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPhysicalCardShippingUpdate setShippingStatus:](v4, "setShippingStatus:", [a3 integerValue]);
}

void sub_100294DC8(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_100294DD0(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_100294DD8(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_100294DE0(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPhysicalCardShippingUpdate setTimestamp:](v4, "setTimestamp:", v5);
}

void sub_1002954FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100295514(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100295524(uint64_t a1)
{
}

uint64_t sub_10029552C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  BOOL v3 = (char *)[*(id *)(a1 + 32) channelType];
  id v4 = v3;
  if (v3 == (char *)3)
  {
    id v5 = -[SharingLocalOnDeviceChannelEndpoint initWithLocalEndpoint:inDatabase:]( objc_alloc(&OBJC_CLASS___SharingLocalOnDeviceChannelEndpoint),  "initWithLocalEndpoint:inDatabase:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }

  else if (v3 == (char *)2)
  {
    id v5 = -[SharingIDSChannelEndpoint initWithIDSEndpoint:inDatabase:]( objc_alloc(&OBJC_CLASS___SharingIDSChannelEndpoint),  "initWithIDSEndpoint:inDatabase:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }

  else
  {
    id v5 = -[SharingRelayChannelEndpoint initWithRelayServerEndpoint:inDatabase:]( objc_alloc(&OBJC_CLASS___SharingRelayChannelEndpoint),  "initWithRelayServerEndpoint:inDatabase:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }

  id v6 = v5;
  if (!v5)
  {
    uint64_t v19 = 0LL;
    goto LABEL_18;
  }

  -[NSMutableDictionary setEntityPIDOrNull:forKey:](v2, "setEntityPIDOrNull:forKey:", v5, @"a");

LABEL_9:
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
  -[NSMutableDictionary setObjectOrNull:forKey:](v2, "setObjectOrNull:forKey:", v7, @"identifier");

  int v8 = @"unknown";
  -[NSMutableDictionary setObjectOrNull:forKey:](v2, "setObjectOrNull:forKey:", v8, @"b");
  id v9 = [*(id *)(a1 + 32) provisioningType];
  __int16 v10 = @"stateful";
  if (v9 != (id)2) {
    __int16 v10 = @"unknown";
  }
  if (v9 == (id)1) {
    __int16 v11 = @"stateless";
  }
  else {
    __int16 v11 = v10;
  }
  -[NSMutableDictionary setObjectOrNull:forKey:](v2, "setObjectOrNull:forKey:", v11, @"c");
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createdAt]);
  id v13 = (void *)_SQLValueForDate(v12);
  -[NSMutableDictionary setObjectOrNull:forKey:](v2, "setObjectOrNull:forKey:", v13, @"d");

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) updatedAt]);
  uint64_t v15 = (void *)_SQLValueForDate(v14);
  -[NSMutableDictionary setObjectOrNull:forKey:](v2, "setObjectOrNull:forKey:", v15, @"e");

  id v16 = [*(id *)(a1 + 48) initWithPropertyValues:v2 inDatabase:*(void *)(a1 + 40)];
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  uint64_t v19 = 1LL;
LABEL_18:

  return v19;
}

void sub_100295ADC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100295AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _endpointForProperties:a2 values:a3]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *a5 = 1;
}

void sub_100295C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _endpointForProperties:a2 values:a3]);
  [v3 safelyAddObject:v4];
}

void sub_100295D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _endpointForProperties:a2 values:a3]);
  [v3 safelyAddObject:v4];
}

void sub_100295EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _endpointForProperties:a2 values:a3]);
  [v3 safelyAddObject:v4];
}

uint64_t sub_100295FF4(void *a1)
{
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1 == @"relay_server") {
    goto LABEL_4;
  }
  if (!v1)
  {
LABEL_11:
    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  unsigned __int8 v3 = [@"relay_server" isEqualToString:v1];

  if ((v3 & 1) == 0)
  {
    id v5 = v2;
    if (v5 == @"ids"
      || (id v6 = v5,
          unsigned __int8 v7 = [@"ids" isEqualToString:v5],
          v6,
          (v7 & 1) != 0))
    {
      uint64_t v4 = 2LL;
      goto LABEL_12;
    }

    uint64_t v8 = v6;
    if (v8 == @"local"
      || (id v9 = v8, v10 = [@"local" isEqualToString:v8], v9, v10))
    {
      uint64_t v4 = 3LL;
      goto LABEL_12;
    }

    goto LABEL_11;
  }

void sub_100296244( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10029625C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___SharingChannelEndpoint),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[SharingChannelEndpoint deleteFromDatabase]( v3,  "deleteFromDatabase");
}

void sub_1002967CC(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
}

void sub_1002967D4(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  uint64_t v4 = a2;
  -[PDSharingRelayServerEndpoint setChannelType:](v4, "setChannelType:", sub_100295FF4(a3));
}

void sub_100296818(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  __int16 v11 = a2;
  uint64_t v4 = (__CFString *)a3;
  id v5 = v4;
  if (v4 == @"stateless") {
    goto LABEL_4;
  }
  if (!v4)
  {
LABEL_8:
    uint64_t v7 = 0LL;
    goto LABEL_9;
  }

  unsigned __int8 v6 = [@"stateless" isEqualToString:v4];

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = v5;
    if (v8 == @"stateful"
      || (id v9 = v8, v10 = [@"stateful" isEqualToString:v8], v9, v10))
    {
      uint64_t v7 = 2LL;
      goto LABEL_9;
    }

    goto LABEL_8;
  }

void sub_1002968EC(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDSharingRelayServerEndpoint setCreatedAt:](v4, "setCreatedAt:", v5);
}

void sub_100296938(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDSharingRelayServerEndpoint setUpdatedAt:](v4, "setUpdatedAt:", v5);
}

void sub_100296984(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  uint64_t v4 = a2;
  -[PDSharingRelayServerEndpoint setMailboxStatus:]( v4,  "setMailboxStatus:",  PDSharingRelayServerEndpointStatusFromString(a3));
}

void sub_1002969C8(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    unsigned __int8 v6 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v4,  0LL);

    -[PDSharingRelayServerEndpoint setPayloadEncryptionPassword:](v5, "setPayloadEncryptionPassword:", v6);
  }

void sub_100296A44(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
}

void sub_100296A4C(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setHasOutstandingMessages:]( v4,  "setHasOutstandingMessages:",  [a3 BOOLValue]);
}

void sub_100296A90(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PDSharingRelayServerEndpoint setRelayServerHost:](v4, "setRelayServerHost:", v5);
}

void sub_100296ADC(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setTimeToLive:](v4, "setTimeToLive:", [a3 unsignedIntegerValue]);
}

void sub_100296B20(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setDoesRemoteMailboxSupportPushNotifications:]( v4,  "setDoesRemoteMailboxSupportPushNotifications:",  [a3 BOOLValue]);
}

void sub_100296B64(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setPollingBackoffCounter:]( v4,  "setPollingBackoffCounter:",  [a3 unsignedIntegerValue]);
}

void sub_100296CA8(id a1, PDSharingIDSEndpoint *a2, id a3)
{
}

void sub_100296CB0(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingIDSEndpoint setChannelType:](v4, "setChannelType:", sub_100295FF4(a3));
}

void sub_100296CF4(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  __int16 v11 = a2;
  id v4 = (__CFString *)a3;
  id v5 = v4;
  if (v4 == @"stateless") {
    goto LABEL_4;
  }
  if (!v4)
  {
LABEL_8:
    uint64_t v7 = 0LL;
    goto LABEL_9;
  }

  unsigned __int8 v6 = [@"stateless" isEqualToString:v4];

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = v5;
    if (v8 == @"stateful"
      || (id v9 = v8, v10 = [@"stateful" isEqualToString:v8], v9, v10))
    {
      uint64_t v7 = 2LL;
      goto LABEL_9;
    }

    goto LABEL_8;
  }

void sub_100296DC8(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDSharingIDSEndpoint setCreatedAt:](v4, "setCreatedAt:", v5);
}

void sub_100296E14(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDSharingIDSEndpoint setUpdatedAt:](v4, "setUpdatedAt:", v5);
}

void sub_100296E60(id a1, PDSharingIDSEndpoint *a2, id a3)
{
}

void sub_100296E68(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  id v6 = a3;
  id v4 = a2;
  if ([v6 isEqualToString:@"true"])
  {
    uint64_t v5 = 1LL;
  }

  else if ([v6 isEqualToString:@"false"])
  {
    uint64_t v5 = 2LL;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  -[PDSharingIDSEndpoint setIsDeviceOnSameIDSAccount:](v4, "setIsDeviceOnSameIDSAccount:", v5);
}

void sub_100296EE4(id a1, PDSharingIDSEndpoint *a2, id a3)
{
}

void sub_100296FDC(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
}

void sub_100296FE4(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingLocalOnDeviceEndpoint setChannelType:](v4, "setChannelType:", sub_100295FF4(a3));
}

void sub_100297028(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  __int16 v11 = a2;
  id v4 = (__CFString *)a3;
  uint64_t v5 = v4;
  if (v4 == @"stateless") {
    goto LABEL_4;
  }
  if (!v4)
  {
LABEL_8:
    uint64_t v7 = 0LL;
    goto LABEL_9;
  }

  unsigned __int8 v6 = [@"stateless" isEqualToString:v4];

  if ((v6 & 1) == 0)
  {
    uint64_t v8 = v5;
    if (v8 == @"stateful"
      || (id v9 = v8, v10 = [@"stateful" isEqualToString:v8], v9, v10))
    {
      uint64_t v7 = 2LL;
      goto LABEL_9;
    }

    goto LABEL_8;
  }

void sub_1002970FC(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDSharingLocalOnDeviceEndpoint setCreatedAt:](v4, "setCreatedAt:", v5);
}

void sub_100297148(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDSharingLocalOnDeviceEndpoint setUpdatedAt:](v4, "setUpdatedAt:", v5);
}

void sub_100297194(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
}

void sub_10029719C(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
}

CFStringRef PDCloudStoreRecordsRequestTypeToString(uint64_t a1)
{
  else {
    return *(&off_100652218 + a1 - 1);
  }
}

void sub_1002980AC(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 allObjects]);
  [v3 addObjectsFromArray:v4];
}

uint64_t sub_100298398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100298BFC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 remoteObjectProxy]);
  [v4 didUpdateFamilyMembers:v3];
}

void sub_100298E18(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = sub_10015BAA0(*(os_unfair_lock_s **)(*(void *)(a1 + 32) + 32LL));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService paymentDeviceFieldPropertiesWithHandler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v3 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100298FEC(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService defaultPaymentPassUniqueIdentifier:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v3 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002991E8(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) paymentConfiguration])
  {
    [*(id *)(a1[4] + 128) updateDefaultPaymentPassIdentifier:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[PDPaymentService setDefaultPaymentPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002993BC(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v4 = PDDefaultPaymentPassCachedIngestionDate();
    int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (!v5)
    {
      int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passWithUniqueIdentifier:v3]);
      int v5 = (void *)objc_claimAutoreleasedReturnValue([v6 ingestedDate]);
      PDSetDefaultPaymentPassCachedIngestionDate();
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%li",  [v5 hash]));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingString:v7]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v12 = "-[PDPaymentService defaultPaymentPassIngestionSpecificIdentifier:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v8 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

BOOL sub_100299688(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:]( &OBJC_CLASS___PKSecureElement,  "supportsExpressForAutomaticSelectionTechnologyType:",  a2);
}

void sub_100299698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passUniqueIdentifier]);
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, a2, v4);
  }

PKExpressPassConfiguration *sub_100299DD8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 88LL);
    id v3 = a2;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passUniqueIdentifier]);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentApplicationsForPassUniqueIdentifier:v4]);

    int v6 = -[PKExpressPassConfiguration initWithPassInformation:forPaymentApplications:]( objc_alloc(&OBJC_CLASS___PKExpressPassConfiguration),  "initWithPassInformation:forPaymentApplications:",  v3,  v5);
  }

  else
  {
    int v6 = 0LL;
  }

  return v6;
}

void sub_10029A0BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "pk_setByApplyingBlock:", &stru_1006522C8));
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

PKExpressPassInformation *__cdecl sub_10029A118(id a1, PKExpressPassConfiguration *a2)
{
  return (PKExpressPassInformation *)-[PKExpressPassConfiguration passInformation](a2, "passInformation");
}

uint64_t sub_10029A4F8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10029A698(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) sharedWebServiceContext]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10029A88C(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10029A98C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) notificationServiceOfType:0 forPassWithUniqueIdentifier:a1[5]]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appLaunchToken]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService transactionsAppLaunchTokenForPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v3 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029AB5C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) notificationServiceOfType:1 forPassWithUniqueIdentifier:a1[5]]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appLaunchToken]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService messagesAppLaunchTokenForPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v3 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029AE38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10029AE5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10029AE6C(uint64_t a1)
{
}

void sub_10029AE74(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = PDHeavyQueue();
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10029AF24;
  v11[3] = &unk_1006396B0;
  id v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_10029AF24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10029AF38(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v13 = a3;
  uint64_t v7 = PDOSTransactionCreate("PDPaymentService");
  uint64_t v8 = *(void *)(a1[5] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v10 = sub_10030C794(*(id *)(a1[4] + 304LL));
  uint64_t v11 = *(void *)(a1[6] + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  v6[2](v6, v13, 0LL);
}

void sub_10029AFDC(void *a1)
{
  uint64_t v2 = a1[4];
  if ([*(id *)(*(void *)(a1[5] + 8) + 40) count]) {
    uint64_t v3 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  }
  else {
    uint64_t v3 = 0LL;
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;

  uint64_t v6 = *(void *)(a1[6] + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;
}

void sub_10029B208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10029B220(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = PDHeavyQueue();
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10029B2D0;
  v11[3] = &unk_1006396B0;
  id v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_10029B2D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10029B2E4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 304LL);
  id v7 = a4;
  id v8 = a3;
  sub_10030CE00(v6, v5);
  v7[2](v7, v8, 0LL);
}

void sub_10029B358(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_10029B54C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10029B564(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = PDHeavyQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10029B614;
  v11[3] = &unk_1006396B0;
  id v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_10029B614(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10029B628(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 304LL);
  id v7 = a4;
  id v8 = a3;
  sub_10030C9B0(v6, v5);
  v7[2](v7, v8, 0LL);
}

void sub_10029B69C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_10029B890( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10029B8A8(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = PDHeavyQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10029B958;
  v11[3] = &unk_1006396B0;
  id v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_10029B958(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10029B96C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 304LL);
  id v7 = a4;
  id v8 = a3;
  sub_10030CBE4(v6, v5);
  v7[2](v7, v8, 0LL);
}

void sub_10029B9E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_10029BC0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10029BC30(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = PDHeavyQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10029BCE0;
  v11[3] = &unk_1006396B0;
  id v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_10029BCE0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10029BCF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v14 = a3;
  uint64_t v7 = PDOSTransactionCreate("PDPaymentService");
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v10 = sub_10033B030(*(id **)(*(void *)(a1 + 32) + 192LL), *(void **)(a1 + 40), *(void *)(a1 + 64));
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  v6[2](v6, v14, 0LL);
}

void sub_10029BDA0(void *a1)
{
  uint64_t v2 = a1[4];
  if ([*(id *)(*(void *)(a1[5] + 8) + 40) count]) {
    uint64_t v3 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  }
  else {
    uint64_t v3 = 0LL;
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;

  uint64_t v6 = *(void *)(a1[6] + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;
}

void sub_10029BF80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10029BF98(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = PDHeavyQueue();
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10029C048;
  v11[3] = &unk_1006396B0;
  uint64_t v12 = v5;
  id v13 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_10029C048(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10029C05C(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
}

void sub_10029C070(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_10029C1B0(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(const char **)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v6 = PDLocalizedAppNameForPID([*(id *)(a1 + 32) remoteProcessIdentifier]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      unsigned int v8 = [*(id *)(a1 + 32) remoteProcessIdentifier];
      *(_DWORD *)__int128 buf = 138413058;
      __int128 v39 = v5;
      __int16 v40 = 2112;
      uint64_t v41 = v4;
      __int16 v42 = 2112;
      id v43 = v7;
      __int16 v44 = 1024;
      unsigned int v45 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Verification code (%@) for DPAND (%@) provided by %@ (%d)",  buf,  0x26u);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passesOfType:1]);
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id obj = v9;
    id v10 = [v9 countByEnumeratingWithState:&v32 objects:v37 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = 0LL;
      uint64_t v27 = *(void *)v33;
      do
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v33 != v27) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 devicePaymentApplications]);
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          id v16 = v15;
          id v17 = [v16 countByEnumeratingWithState:&v28 objects:v36 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v29;
            while (2)
            {
              for (j = 0LL; j != v18; j = (char *)j + 1)
              {
                if (*(void *)v29 != v19) {
                  objc_enumerationMutation(v16);
                }
                if (![v21 caseInsensitiveCompare:*(void *)(a1 + 48)])
                {
                  id v22 = v14;

                  uint64_t v12 = v22;
                  goto LABEL_20;
                }
              }

              id v18 = [v16 countByEnumeratingWithState:&v28 objects:v36 count:16];
              if (v18) {
                continue;
              }
              break;
            }
          }

void sub_10029C5F0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) transactionCountByPeriodForRequest:*(void *)(a1 + 40) calendar:*(void *)(a1 + 48) calendarUnit:*(void *)(a1 + 64) includePurchaseTotal:*(unsigned __int8 *)(a1 + 72)]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionCountByPeriodForRequest:calendar:unit:includePurchaseTotal:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10029C834(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) cashbackByPeriodForTransactionSourceIdentifiers:a1[5] withStartDate:a1[6] endDate:a1[7] calendar:a1[8] calendarUnit:a1[10] type:a1[11]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService cashbackByPeriodForTransactionSourceIdentifiers:withStartDate:endDate:calendar:calendarUni"
           "t:type:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(a1[9] + 16LL))();
}

void sub_10029CA3C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) peerPaymentCounterpartHandlesForTransactionSourceIdentifier:a1[5] startDate:a1[6] endDate:a1[7]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService peerPaymentCounterpartHandlesForTransactionSourceIdentifier:startDate:endDate:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(a1[8] + 16LL))();
}

uint64_t sub_10029CBF4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 88) hasAnyTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService hasTransactionsForTransactionSourceIdentifiers:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10029CE40(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 72) withBackingData:*(void *)(a1 + 80) startDate:*(void *)(a1 + 48) endDate :*(void *)(a1 + 56) orderedByDate:*(void *)(a1 + 88) limit:*(void *)(a1 + 96)]);
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withTransactionSource:withBackingData:startDat"
           "e:endDate:orderedByDate:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10029D050(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withPeerPaymentCounterpartHandles:*(void *)(a1 + 48) withTransactionSource :*(void *)(a1 + 64) withBackingData:*(void *)(a1 + 72) limit:*(void *)(a1 + 80)]);
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withPeerPaymentCounterpartHandles:withTransact"
           "ionSource:withBackingData:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10029D25C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) matchingMerchant:*(void *)(a1 + 48) withTransactionSource:*(void *)(a1 + 64) withBackingData:*(void *)(a1 + 72) limit:*(void *)(a1 + 80)]);
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:matchingMerchant:withTransactionSource:withBac"
           "kingData:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10029D498(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) transactionsForTransactionSourceIdentifiers:a1[5] merchantCategory:a1[9] withTransactionSource:a1[10] withBackingData:a1[11]  startDate:a1[6] endDate:a1[7] limit:a1[12]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withMerchantCategory:withTransactionSource:wit"
           "hBackingData:startDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(a1[8] + 16LL))();
}

void sub_10029D6D0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) transactionsForTransactionSourceIdentifiers:a1[5] withTransactionType:a1[9] withTransactionSource:a1[10] withBackingDa ta:a1[11] startDate:a1[6] endDate:a1[7] limit:a1[12]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withTransactionType:withTransactionSource:with"
           "BackingData:startDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(a1[8] + 16LL))();
}

void sub_10029D900(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) approvedTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 72) withBackingData:*(void *)(a1 + 80) startDate :*(void *)(a1 + 48) endDate:*(void *)(a1 + 56) orderedByDate:1 limit:*(void *)(a1 + 88)]);
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v6 = "-[PDPaymentService approvedTransactionsForTransactionSourceIdentifiers:withTransactionSource:withBackingData:"
           "startDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10029DB3C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) pendingTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 72) withBackingData:*(void *)(a1 + 80) startDate:*(void *)(a1 + 48)  endDate:*(void *)(a1 + 56) orderedByDate:1 limit:*(void *)(a1 + 88)]);
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v6 = "-[PDPaymentService pendingTransactionsForTransactionSourceIdentifiers:withTransactionSource:withBackingData:s"
           "tartDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10029DD30(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 56) withBackingData:*(void *)(a1 + 64) limit:*(void *)(a1 + 72)]);
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    id v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10029DE68(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) transactionsWithTransactionSource:a1[6] withBackingData:a1[7] limit:a1[8]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsWithTransactionSource:withBackingData:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10029E024(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) transactionWithTransactionIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionWithTransactionIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029E1E8(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) peerPaymentAllAccess])
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v3 = *(id *)(a1 + 40);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 88),  "transactionWithTransactionIdentifier:",  *(void *)(*((void *)&v10 + 1) + 8 * (void)i),  (void)v10));
          -[NSMutableArray addObject:](v2, "addObject:", v8);
        }

        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
      }

      while (v5);
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (id)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v15 = "-[PDPaymentService transactionsWithTransactionIdentifiers:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10029E494(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) paymentTransactionsWithFullPaymentHashes:a1[5] transactionSourceIdentifiers:a1[6]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsWithFullPaymentHashes:transactionSourceIdentifiers:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[7] + 16LL))();
}

uint64_t sub_10029E65C(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    [*(id *)(a1[4] + 88) transactionSourceTypeForTransactionSourceIdentifier:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionSourceTypeForTransactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_10029E83C(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) transactionWithServiceIdentifier:a1[5] transactionSourceIdentifier:a1[6]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionWithServiceIdentifier:transactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[7] + 16LL))();
}

void sub_10029EA04(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) transactionWithReferenceIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionWithReferenceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029EBC8(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) installmentTransactionsForInstallmentPlanIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService installmentTransactionsForInstallmentPlanIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029ED7C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) installmentPlansWithTransactionReferenceIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService installmentPlansWithTransactionReferenceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029EFB8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) installmentPlanTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48) redeemed:*(unsigned __int8 *)(a1 + 88) withRedemptio nType:*(void *)(a1 + 80) startDate:*(void *)(a1 + 56) endDate:*(void *)(a1 + 64)]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService installmentPlanTransactionsForTransactionSourceIdentifiers:accountIdentifier:redeemed:with"
           "RedemptionType:startDate:endDate:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10029F17C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) transactionsForRequest:*(void *)(a1 + 40)]);
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionSourceIdentifiers]);
    [v3 _requestUpdatesForTransactionSourceIdentifiers:v4];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      unsigned int v8 = "-[PDPaymentService transactionsForRequest:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v7,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10029F358(void *a1)
{
  id v4 = 0LL;
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 88) totalAmount:&v4 forTransactionsWithRequest:a1[5] count:0];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsTotalAmountForRequest:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029F514(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PKObjectDownloader sharedImageAssetDownloader]( &OBJC_CLASS___PKObjectDownloader,  "sharedImageAssetDownloader"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 cachedDataForURL:*(void *)(a1 + 40)]);

    if (v3)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PKObjectDownloader sharedImageAssetDownloader]( &OBJC_CLASS___PKObjectDownloader,  "sharedImageAssetDownloader"));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10029F6A4;
      v8[3] = &unk_100652508;
      uint64_t v7 = *(void *)(a1 + 40);
      id v9 = *(id *)(a1 + 48);
      [v6 downloadFromUrl:v7 completionHandler:v8];
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v11 = "-[PDPaymentService logoImageDataForURL:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

uint64_t sub_10029F6A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10029F77C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) transactionsForPredicate:a1[5] limit:a1[7]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService transactionsForPredicate:limit:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitlted for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029F934(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) passUniqueIdentifierForTransactionWithIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService passUniqueIdentifierForTransactionWithIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029FAF8(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) ambiguousPassUniqueIdentifierForTransactionWithServiceIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService ambiguousPassUniqueIdentifierForTransactionWithServiceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10029FCE4(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) passUniqueIdentifierForTransactionWithServiceIdentifier:a1[5] transactionSourceIdentifier:a1[6]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService passUniqueIdentifierForTransactionWithServiceIdentifier:transactionSourceIdentifier:comple"
           "tion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[7] + 16LL))();
}

void sub_10029FEAC(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) ambiguousTransactionWithServiceIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService ambiguousTransactionWithServiceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A0050(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) mapsMerchants]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService mapsMerchantsWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002A0224(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) valueAddedServiceTransactionsForPassWithUniqueIdentifier:a1[5] limit:a1[7]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService valueAddedServiceTransactionsForPassWithUniqueIdentifier:limit:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A03DC(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) valueAddedServiceTransactionsForPaymentTransaction:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService valueAddedServiceTransactionsForPaymentTransaction:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A0590(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) valueAddedServiceTransactionWithIdentifier:a1[5]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService valueAddedServiceTransactionWithIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A0744(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) messagesForPassWithUniqueIdentifier:a1[5]]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) notificationServiceOfType:1 forPassWithUniqueIdentifier:a1[5]]);
    [*(id *)(a1[4] + 40) requestUpdatesFromNotificationService:v3 passUniqueIdenitifer:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService messagesForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A0934(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) paymentBalancesForPassUniqueIdentifier:a1[5]]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) notificationServiceOfType:0 forPassWithUniqueIdentifier:a1[5]]);
    [*(id *)(a1[4] + 40) requestUpdatesFromNotificationService:v3 passUniqueIdenitifer:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService balancesForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A0B24(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) plansForPassUniqueIdentifier:a1[5]]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) notificationServiceOfType:0 forPassWithUniqueIdentifier:a1[5]]);
    [*(id *)(a1[4] + 40) requestUpdatesFromNotificationService:v3 passUniqueIdenitifer:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService plansForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v2 = 0LL;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002A0D3C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) balanceReminderThresholdForBalanceIdentifier:a1[5] withPassUniqueIdentifier:a1[6]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService balanceReminderThresholdForBalanceIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v2 = 0LL;
  }

  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v2);
  }
}

uint64_t sub_1002A0F44(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess];
  if (!(_DWORD)v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v16 = "-[PDPaymentService setBalanceReminder:forBalanceIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    goto LABEL_6;
  }

  if ([*(id *)(*(void *)(a1 + 32) + 88) setBalanceReminder:*(void *)(a1 + 40) forBalanceIdentifier:*(void *)(a1 + 48) withPassUniqueIdentifier:*(void *)(a1 + 56)])
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 112LL);
    id v4 = *(void **)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1002A10E0;
    v10[3] = &unk_10063A4B8;
    __int128 v11 = v4;
    id v12 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v13 = v5;
    uint64_t v14 = v6;
    [v3 userNotificationsForPassUniqueIdentifier:v11 ofType:7 completion:v10];

    uint64_t v7 = v11;
LABEL_6:

    goto LABEL_8;
  }

  id v2 = 0LL;
LABEL_8:
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

void sub_1002A10E0(uint64_t a1, void *a2)
{
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v26 objects:v38 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v27;
    uint64_t v7 = &OBJC_IVAR___PDNotificationServiceRegistrationTask__registrationData;
    *(void *)&__int128 v4 = 138413058LL;
    __int128 v23 = v4;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "passUniqueIdentifier", v23));
        if (PKEqualObjects(v10, *(void *)(a1 + 32)))
        {
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 balanceIdentifier]);
          int v12 = PKEqualObjects(v11, *(void *)(a1 + 40));

          if (!v12) {
            continue;
          }
          __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) threshold]);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 currentBalanceAmount]);
          id v14 = [v13 compare:v10];

          if (v14 == (id)-1LL)
          {
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 reminderCurrency]);
            [v9 updateReminderAmount:v10 currency:v18];

            [*(id *)(*(void *)(a1 + 56) + v7[130]) insertUserNotification:v9];
            uint64_t Object = PKLogFacilityTypeGetObject(6LL);
            id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              id v20 = v7;
              uint64_t v21 = *(void *)(a1 + 32);
              uint64_t v24 = *(void *)(a1 + 48);
              id v22 = (void *)objc_claimAutoreleasedReturnValue([v9 currentBalanceAmount]);
              *(_DWORD *)__int128 buf = v23;
              __int128 v31 = v9;
              __int16 v32 = 2112;
              uint64_t v33 = v21;
              uint64_t v7 = v20;
              __int16 v34 = 2112;
              uint64_t v35 = v24;
              __int16 v36 = 2112;
              uint64_t v37 = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDPaymentService lowBalance insertUserNotification %@ for pass %@ (threshold %@, currentBalance: %@)",  buf,  0x2Au);
            }
          }

          else
          {
            [*(id *)(*(void *)(a1 + 56) + v7[130]) removeUserNotification:v9];
            uint64_t v15 = PKLogFacilityTypeGetObject(6LL);
            id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v17 = *(void *)(a1 + 32);
              *(_DWORD *)__int128 buf = 138412546;
              __int128 v31 = v9;
              __int16 v32 = 2112;
              uint64_t v33 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDPaymentService lowBalance removeUserNotification %@ for pass %@",  buf,  0x16u);
            }
          }
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v26 objects:v38 count:16];
    }

    while (v5);
  }
}

void sub_1002A149C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

    __int128 v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) paymentBalancesForPassUniqueIdentifier:*(void *)(a1 + 40)]);
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v29;
LABEL_4:
      uint64_t v9 = 0LL;
      while (1)
      {
        if (*(void *)v29 != v8) {
          objc_enumerationMutation(v5);
        }
        __int128 v10 = *(void **)(*((void *)&v28 + 1) + 8 * v9);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifiers]);
        unsigned __int8 v12 = [v11 intersectsSet:*(void *)(a1 + 48)];

        if ((v12 & 1) != 0) {
          break;
        }
        if (v7 == (id)++v9)
        {
          id v7 = [v5 countByEnumeratingWithState:&v28 objects:v36 count:16];
          if (v7) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }

      id v16 = v10;

      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) notificationServiceOfType:0 forPassWithUniqueIdentifier:*(void *)(a1 + 40)]);
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void **)(*(void *)(a1 + 32) + 40LL);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v3 partnerAccountIdentifier]);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_1002A17B4;
      v26[3] = &unk_10063B3A0;
      id v27 = *(id *)(a1 + 56);
      [v19 cancelAutoTopUpFromNotificationService:v17 passUniqueIdenitifer:v18 accountIdentifier:v20 balance:v16 completion:v26];
    }

    else
    {
LABEL_10:

LABEL_17:
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v23 = *(const char **)(a1 + 40);
        uint64_t v24 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v33 = v23;
        __int16 v34 = 2112;
        uint64_t v35 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "No auto top up balance for pass: %@, balanceIdentifiers: %@",  buf,  0x16u);
      }

      uint64_t v25 = *(void *)(a1 + 56);
      if (v25) {
        (*(void (**)(uint64_t, void))(v25 + 16))(v25, 0LL);
      }
    }
  }

  else
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(6LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v33 = "-[PDPaymentService cancelAutoTopUpForPassWithUniqueIdentifier:balanceIdentifiers:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15) {
      (*(void (**)(uint64_t, void))(v15 + 16))(v15, 0LL);
    }
  }

uint64_t sub_1002A17B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002A18A8(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) commutePlanReminderForCommutePlanIdentifier:a1[5] withPassUniqueIdentifier:a1[6]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      id v7 = "-[PDPaymentService commutePlanReminderForCommutePlanIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v2 = 0LL;
  }

  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v2);
  }
}

uint64_t sub_1002A1AB0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 88) setCommutePlanReminder:a1[5] forCommutePlanIdentifier:a1[6] withPassUniqueIdentifier:a1[7]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      id v7 = "-[PDPaymentService setCommutePlanReminder:forCommutePlanIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v2 = 0LL;
  }

  uint64_t result = a1[8];
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

uint64_t sub_1002A1C60(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 88) deletePaymentTransactionWithIdentifier:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[PDPaymentService deletePaymentTransactionWithIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A1E04(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 88) deletePaymentTransactionsWithIdentifiers:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[PDPaymentService deletePaymentTransactionsWithIdentifiers:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A1FA8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 88) deleteAllTransactionsFromTransactionSourceIdentifiers:*(void *)(a1 + 40)];
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v2 = *(id *)(a1 + 40);
    id v3 = [v2 countByEnumeratingWithState:&v10 objects:v16 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v11;
      do
      {
        for (i = 0LL; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v11 != v5) {
            objc_enumerationMutation(v2);
          }
          id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 88),  "passUniqueIdentifierForTransactionWithIdentifier:",  *(void *)(*((void *)&v10 + 1) + 8 * (void)i),  (void)v10));
          if (v7) {
            [*(id *)(*(void *)(a1 + 32) + 112) removeUserNotificationsForPassUniqueIdentifier:v7 ofType:4];
          }
        }

        id v4 = [v2 countByEnumeratingWithState:&v10 objects:v16 count:16];
      }

      while (v4);
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v2 = (id)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v15 = "-[PDPaymentService deleteAllTransactionsForTransactionSourceIdentifiers:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A2228(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 88) deleteAllMessagesFromPaymentPassWithUniqueIdentifier:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[PDPaymentService deleteAllMessagesForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A23CC(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 88) archiveMessageWithIdentifier:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[PDPaymentService archiveMessageWithIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002A2598(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (const char *)a1[5];
      uint64_t v5 = a1[6];
      int v10 = 138412546;
      __int128 v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Inserting Payment Transaction via Payment Service: %@ for transactionSourceIdentifier %@",  (uint8_t *)&v10,  0x16u);
    }

    int v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) insertOrUpdatePaymentTransaction:a1[5] withTransactionSourceIdentifier:a1[6] insertionMode:0 performTruncation:1 in sertedTransaction:0]);
    [*(id *)(a1[4] + 80) processPaymentTransaction:v6 forTransactionSourceIdentifier:a1[6]];
  }

  else
  {
    uint64_t v7 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      __int128 v11 = "-[PDPaymentService insertOrUpdatePaymentTransaction:forTransactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v10,  0xCu);
    }

    int v6 = 0LL;
  }

  uint64_t v9 = a1[7];
  if (v9) {
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v6);
  }
}

void sub_1002A282C(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 136315138;
      uint64_t v19 = "-[PDPaymentService insertOrUpdatePaymentTransaction:forPassUniqueIdentifier:paymentApplication:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v18,  0xCu);
    }

    __int128 v11 = 0LL;
    goto LABEL_13;
  }

  if (*(void *)(a1 + 40) && *(void *)(a1 + 48) && *(void *)(a1 + 56))
  {
    id v2 = (os_log_s *)PKAggDKeyPaymentTransactionOtherCard;
    id v3 = *(void **)(a1 + 56);
    uint64_t v4 = PDDefaultPaymentPassUniqueIdentifier();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    int v6 = v3;
    uint64_t v7 = v5;
    if (v6 == v7)
    {
    }

    else
    {
      uint64_t v8 = v7;
      if (!v6 || !v7)
      {

        goto LABEL_21;
      }

      unsigned int v9 = -[os_log_s isEqualToString:](v6, "isEqualToString:", v7);

      if (!v9) {
        goto LABEL_22;
      }
    }

    uint64_t v8 = v2;
    id v2 = (os_log_s *)PKAggDKeyPaymentTransactionDefaultCard;
LABEL_21:

LABEL_22:
    PKAnalyticsSendEvent(v2, 0LL);
    uint64_t v13 = PKLogFacilityTypeGetObject(23LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(const char **)(a1 + 40);
      int v18 = 138412290;
      uint64_t v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Inserting Payment Transaction via Payment Service: %@",  (uint8_t *)&v18,  0xCu);
    }

    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) insertOrUpdatePaymentTransaction:*(void *)(a1 + 40) withPassUniqueIdentifier:*(void *)(a1 + 56) paymentApplication:*(void *)(a1 + 48) insertionMode:0 perform Truncation:0 insertedTransaction:&v18]);
    id v16 = *(void **)(*(void *)(a1 + 32) + 80LL);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transactionSourceIdentifier]);
    [v16 processPaymentTransaction:v11 forTransactionSourceIdentifier:v17];

LABEL_13:
    goto LABEL_15;
  }

  __int128 v11 = 0LL;
LABEL_15:
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12) {
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v11);
  }
}

void sub_1002A2BA4(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = a1[5];
    if (v2)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) removeMapsDataForTransactionWithIdentifier:v2 forTransactionSourceIdentifier:a1[6] issueReportIdentifier:a1[7]]);
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[PDPaymentService removeMapsDataForTransactionWithIdentifier:forTransactionSourceIdentifier:issueReportIdent"
           "ifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v7,  0xCu);
    }
  }

  id v3 = 0LL;
LABEL_8:
  uint64_t v6 = a1[8];
  if (v6) {
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v3);
  }
}

uint64_t sub_1002A33FC(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    int v23 = 136315138;
    uint64_t v24 = "-[PDPaymentService insertOrUpdateValueAddedServiceTransaction:forPassUniqueIdentifier:paymentTransaction:handl"
          "er:]_block_invoke";
    uint64_t v12 = "Client is not entitled for method: %s";
    goto LABEL_20;
  }

  [*(id *)(*(void *)(a1 + 32) + 88) insertOrUpdateValueAddedServiceTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 48) paymentTransaction:*(void *)(a1 + 56)];
  if (([*(id *)(a1 + 40) didSucceed] & 1) == 0)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) merchant]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) merchantURL]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v3));

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 hexEncoding]);

    unint64_t v7 = (unint64_t)[v2 timesPresented];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 scheme]);
    if ([v8 isEqualToString:@"https"])
    {
      int v9 = 1;
    }

    else
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 scheme]);
      id v14 = [v13 isEqualToString:@"http"];
      if ((_DWORD)v14) {
        int v9 = PKAllowHTTP(v14);
      }
      else {
        int v9 = 0;
      }
    }

    id v15 = [*(id *)(*(void *)(a1 + 32) + 88) passExistsWithPassTypeIdentifierHash:v6];
    int v16 = (int)v15;
    if (v7 > 2)
    {
      BOOL v17 = 0;
    }

    else
    {
      id v15 = [*(id *)(*(void *)(a1 + 32) + 88) numberOfValueAddedServiceTransactionsForMerchant:v2];
      BOOL v17 = v15 == qword_1004D6F78[v7];
    }

    int v18 = PKDisableRateLimiting(v15);
    if (((v9 ^ 1 | v16) & 1) == 0 && v17 | v18) {
      [*(id *)(*(void *)(a1 + 32) + 64) processValueAddedServiceTransaction:*(void *)(a1 + 40)];
    }
  }

  uint64_t v19 = PKLogFacilityTypeGetObject(6LL);
  __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = *(const char **)(a1 + 40);
    int v23 = 138412290;
    uint64_t v24 = v20;
    uint64_t v12 = "Inserted Value Added Service Transaction: %@";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v23, 0xCu);
  }

void sub_1002A37C4(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 88) setDefaultPaymentApplication:a1[5] forPassUniqueIdentifier:a1[6]]);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      unint64_t v7 = "-[PDPaymentService setDefaultPaymentApplication:forPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    uint64_t v2 = 0LL;
  }

  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v2);
  }
}

id sub_1002A3A80(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    return [*(id *)(*(void *)(a1 + 32) + 120) initializeSecureElementIfNecessaryWithHandler:*(void *)(a1 + 40)];
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "-[PDPaymentService initializeSecureElementIfNecessaryWithHandler:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
  }

  id result = *(id *)(a1 + 40);
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void, void))result + 2))(result, 0LL, 0LL, 0LL);
  }
  return result;
}

void sub_1002A3C3C(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Force Initializing Secure Element...",  buf,  2u);
    }

    uint64_t v4 = *(void **)(a1 + 40);
    int v5 = *(void **)(*(void *)(a1 + 32) + 120LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002A3DCC;
    v9[3] = &unk_100652530;
    id v10 = v4;
    [v5 initializeSecureElementQueuingServerConnection:1 withCompletion:v9];
  }

  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject(6LL);
    unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v12 = "-[PDPaymentService initializeSecureElement:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0LL);
    }
  }

uint64_t sub_1002A3DCC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A3E98(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 136) simulatePushForTopic:a1[5]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService simulatePaymentPushTopic:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A4048(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 176) initiateNativePairingIfPossibleFromTCIs:a1[5] brandCode:a1[7]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService simulateVehicleInitiatedPairingWithTCIs:brandCode:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A41FC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (id *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"passUniqueIdentifier"]);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"title"]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"message"]);
    switch(v3)
    {
      case 1LL:
        id v15 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  v5,  v6,  v4);
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"customActionRoute"]);
        if (v7) {
          -[PDUserNotification setCustomActionRoute:](v15, "setCustomActionRoute:", v7);
        }
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"notificationIdentifier"]);
        if (v8) {
          [0 setNotificationIdentifier:v8];
        }
        goto LABEL_80;
      case 2LL:
        id v53 = objc_alloc(&OBJC_CLASS___PDWalletValueAddedServiceTransactionUserNotification);
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"merchantIdentifier"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"localizedDescription"]);
        BOOL v17 = -[PDWalletValueAddedServiceTransactionUserNotification initWithMerchantIdentifier:localizedPassDescription:passUniqueIdentifier:]( v53,  "initWithMerchantIdentifier:localizedPassDescription:passUniqueIdentifier:",  v7,  v8,  v4);
        goto LABEL_52;
      case 3LL:
        id v14 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  @"PDUserNotificationTypePassUpdate",  @"PDUserNotificationTypePassUpdate not supported yet");
        goto LABEL_62;
      case 4LL:
      case 6LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentApplication"]);
        int v9 = &OBJC_CLASS___PDPassPaymentTransactionUserNotification;
        goto LABEL_37;
      case 5LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentApplication"]);
        int v9 = &OBJC_CLASS___PDPassTransitTransactionUserNotification;
LABEL_37:
        id v54 = objc_alloc(v9);
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue( [*v2 objectForKeyedSubscript:@"familyMember"]);
        uint64_t v25 = (NSSet *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"accountUser"]);
        __int128 v26 = (PDPassPaymentDailyDailyCashWithAmountUserNotification *)[v54 initWithPaymentTransaction:v7 forPassUniqueIdentif ier:v4 paymentApplication:v8 familyMember:v19 accountUser :v25 installmentCriteria:0];
        goto LABEL_38;
      case 7LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"currentBalance"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"balanceCurrency"]);
        __int128 v55 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"balanceExponent"]);
        id v56 = [v55 integerValue];

        __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderAmount"]);
        id v58 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderCurrency"]);
        id v15 = -[PDPassLowBalanceReminderUserNotification initWithCurrentBalance:balanceCurrency:exponent:reminderAmount:reminderCurrency:passUniqueIdentifier:balanceIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassLowBalanceReminderUserNotification),  "initWithCurrentBalance:balanceCurrency:exponent:reminderAmount:reminderCurrency:passUniqueIdentifier:balanceIdentifier:",  v7,  v8,  v56,  v57,  v58,  v4,  0LL);

        goto LABEL_76;
      case 8LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"transitCommutePlan"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentPass"]);
        BOOL v17 = -[PDPassCommutePlanRenewalReminderUserNotification initWithPaymentPass:commutePlan:]( objc_alloc(&OBJC_CLASS___PDPassCommutePlanRenewalReminderUserNotification),  "initWithPaymentPass:commutePlan:",  v8,  v7);
        goto LABEL_52;
      case 9LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentTransactionAcceptedUserNotification;
        goto LABEL_51;
      case 10LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentTransactionExpiredUserNotification;
        goto LABEL_51;
      case 11LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentTransactionRejectedSendUserNotification;
        goto LABEL_51;
      case 12LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderPeriod"]);
        id v60 = [v59 integerValue];

        BOOL v17 = -[PDPeerPaymentTransactionReminderUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:reminderPeriod:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentTransactionReminderUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:reminderPeriod:",  v7,  v4,  v8,  v60);
        goto LABEL_52;
      case 13LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentTransactionDeclinedUserNotification;
        goto LABEL_51;
      case 14LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"currencyAmount"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderDate"]);
        BOOL v17 = -[PDPeerPaymentBalanceReminderUserNotification initWithPassUniqueIdentifier:currentBalance:reminderDate:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentBalanceReminderUserNotification),  "initWithPassUniqueIdentifier:currentBalance:reminderDate:",  v4,  v7,  v8);
        goto LABEL_52;
      case 16LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v41 = -[PDPassPaymentFraudTransactionUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassPaymentFraudTransactionUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:",  v7,  v4);
        goto LABEL_74;
      case 17LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKAccountEvent);
        -[PKAccountEvent setType:](v8, "setType:", 12LL);
        int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[PKAccountEvent setDate:](v8, "setDate:", v18);

        uint64_t v19 = objc_alloc_init(&OBJC_CLASS___PKAccountPhysicalCardShippingUpdate);
        -[PKAccountPhysicalCardShippingUpdate setShippingStatus:](v19, "setShippingStatus:", 3LL);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v19));
        -[PKAccountEvent setItems:](v8, "setItems:", v20);

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantFuture](&OBJC_CLASS___NSDate, "distantFuture"));
        -[PKAccountEvent setExpirationDate:](v8, "setExpirationDate:", v21);

        id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 UUIDString]);
        -[PKAccountEvent setIdentifier:](v8, "setIdentifier:", v23);

        uint64_t v24 = objc_alloc(&OBJC_CLASS___PDPassAccountEventUserNotification);
        uint64_t v25 = (NSSet *)objc_claimAutoreleasedReturnValue([v7 transactionSourceIdentifier]);
        __int128 v26 = -[PDPassAccountEventUserNotification initWithPassUniqueIdentifier:transactionSourceIdentifier:accountEvent:featureIdentifier:requiresDebtCollectionNotices:]( v24,  "initWithPassUniqueIdentifier:transactionSourceIdentifier:accountEvent:featureIdentifier:requiresDebtCollectionNotices:",  v4,  v25,  v8,  2LL,  1LL);
        goto LABEL_38;
      case 18LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"summary"]);
        id v15 = -[PDPassPaymentSpendingSummaryUserNotification initWithSpendingSummary:accountUserCollection:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassPaymentSpendingSummaryUserNotification),  "initWithSpendingSummary:accountUserCollection:forPassUniqueIdentifier:",  v7,  0LL,  v4);
        id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        -[PDUserNotification setDate:](v15, "setDate:", v27);

        -[PDUserNotification setInsertionRequirements:](v15, "setInsertionRequirements:", 0LL);
        goto LABEL_81;
      case 19LL:
        id v14 = -[PDPeerPaymentNeedsVerificationUserNotification initWithPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentNeedsVerificationUserNotification),  "initWithPassUniqueIdentifier:",  v4);
        goto LABEL_62;
      case 20LL:
        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"accountState"]);
        id v29 = [v28 unsignedIntegerValue];

        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"accountStateReason"]);
        id v31 = [v30 unsignedIntegerValue];

        __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"accessLevel"]);
        id v33 = [v32 unsignedIntegerValue];

        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"featureIdentifier"]);
        id v35 = [v34 unsignedIntegerValue];

        __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"requiresDebtCollectionNotices"]);
        id v37 = [v36 BOOLValue];

        id v14 = -[PDPassAccountStateChangeUserNotification initWithPassUniqueIdentifier:accountState:accountStateReason:accessLevel:featureIdentifier:requiresDebtCollectionNotices:]( objc_alloc(&OBJC_CLASS___PDPassAccountStateChangeUserNotification),  "initWithPassUniqueIdentifier:accountState:accountStateReason:accessLevel:featureIdentifier:requiresDebtC ollectionNotices:",  v4,  v29,  v31,  v33,  v35,  v37);
        goto LABEL_62;
      case 21LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"payment"]);
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderOffset"]);
        id v39 = [v38 unsignedIntegerValue];

        BOOL v17 = -[PDAccountPaymentScheduledUserNotification initWithAccount:payment:reminderOffset:]( objc_alloc(&OBJC_CLASS___PDAccountPaymentScheduledUserNotification),  "initWithAccount:payment:reminderOffset:",  v7,  v8,  v39);
        goto LABEL_52;
      case 22LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue( [*v2 objectForKeyedSubscript:@"estimatedRemainingMinimumPayment"]);
        __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderOffset"]);
        id v62 = [v61 unsignedIntegerValue];

        BOOL v17 = -[PDAccountPaymentDueUserNotification initWithAccount:estimatedRemainingMinimumPayment:reminderOffset:]( objc_alloc(&OBJC_CLASS___PDAccountPaymentDueUserNotification),  "initWithAccount:estimatedRemainingMinimumPayment:reminderOffset:",  v7,  v8,  v62);
        goto LABEL_52;
      case 23LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"periodAmount"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"date"]);
        __int128 v63 = objc_alloc(&OBJC_CLASS___PDPassPaymentDailyDailyCashUserNotification);
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  &off_100690590));
        id v43 = -[PDPassPaymentDailyDailyCashUserNotification initWithMonthlyAmount:date:forPassUniqueIdentifier:lastRedemptionType:monthlyRewardTypes:]( v63,  "initWithMonthlyAmount:date:forPassUniqueIdentifier:lastRedemptionType:monthlyRewardTypes:",  v7,  v8,  v4,  1LL,  v19);
        goto LABEL_78;
      case 24LL:
        __int16 v40 = objc_alloc(&OBJC_CLASS___PDAccountPromptForVirtualCardDetailNotification);
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"accountIdentifier"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"virtualCardIdentifier"]);
        BOOL v17 = -[PDAccountPromptForVirtualCardDetailNotification initWithAccountIdentifier:virtualCardIdentifier:forPassUniqueIdentifier:]( v40,  "initWithAccountIdentifier:virtualCardIdentifier:forPassUniqueIdentifier:",  v7,  v8,  v4);
        goto LABEL_52;
      case 25LL:
      case 26LL:
      case 27LL:
      case 30LL:
      case 37LL:
      case 40LL:
        goto LABEL_63;
      case 28LL:
      case 32LL:
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"promotionDuration"]);
        [v11 doubleValue];
        double v13 = v12;

        id v14 = -[PDPassExpressModeEnabledUserNotification initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:]( objc_alloc(&OBJC_CLASS___PDPassExpressModeEnabledUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:",  v5,  v6,  v4,  2LL,  v13);
        goto LABEL_62;
      case 29LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        uint64_t v41 = -[PDAccountPaymentPastDueUserNotification initWithPassUniqueIdentifier:account:]( objc_alloc(&OBJC_CLASS___PDAccountPaymentPastDueUserNotification),  "initWithPassUniqueIdentifier:account:",  v4,  v7);
        goto LABEL_74;
      case 31LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification;
        goto LABEL_51;
      case 33LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        __int16 v42 = &OBJC_CLASS___PDPeerPaymentGraduationUserNotification;
        goto LABEL_24;
      case 34LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentAssociatedAccountTransactionSendUserNotification;
        goto LABEL_51;
      case 35LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"paymentTransaction"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        int v16 = &OBJC_CLASS___PDPeerPaymentTransactionRejectedReceiveUserNotification;
LABEL_51:
        BOOL v17 = (PDPassCommutePlanRenewalReminderUserNotification *)[[v16 alloc] initWithPaymentTransaction:v7 forPassUniqueIdentifier:v4 familyMember:v8];
        goto LABEL_52;
      case 36LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        __int16 v42 = &OBJC_CLASS___PDPeerPaymentAssociatedAccountActiveUserNotification;
LABEL_24:
        uint64_t v41 = (PDPassPaymentFraudTransactionUserNotification *)[[v42 alloc] initWithPassUniqueIdentifier:v4 familyMember:v7];
        goto LABEL_74;
      case 38LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"familyMember"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"accountIdentifier"]);
        BOOL v17 = -[PDAccountPendingFamilyMemberReminderNotification initWithFamilyMember:accountIdentifier:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountPendingFamilyMemberReminderNotification),  "initWithFamilyMember:accountIdentifier:passUniqueIdentifier:",  v7,  v8,  v4);
        goto LABEL_52;
      case 39LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"servicingToken"]);
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue( [*v2 objectForKeyedSubscript:@"expirationDate"]);
        id v43 = -[PDAccountServicingTokenUserNotification initWithAccount:servicingToken:expirationDate:]( objc_alloc(&OBJC_CLASS___PDAccountServicingTokenUserNotification),  "initWithAccount:servicingToken:expirationDate:",  v7,  v8,  v19);
        goto LABEL_78;
      case 41LL:
        uint64_t v44 = objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"message"]);

        id v15 = -[PDISO18013UpdateUserNotification initWithMessage:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDISO18013UpdateUserNotification),  "initWithMessage:forPassUniqueIdentifier:",  v44,  v4);
        uint64_t v6 = (void *)v44;
        if (!v15) {
          goto LABEL_63;
        }
        goto LABEL_82;
      case 42LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"amount"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"periodAmount"]);
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"date"]);
        uint64_t v25 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", &off_100691118);
        __int128 v26 = -[PDPassPaymentDailyDailyCashWithAmountUserNotification initWithDailyAmount:monthlyAmount:date:forPassUniqueIdentifier:dailyRewardTypes:monthlyRewardTypes:]( objc_alloc(&OBJC_CLASS___PDPassPaymentDailyDailyCashWithAmountUserNotification),  "initWithDailyAmount:monthlyAmount:date:forPassUniqueIdentifier:dailyRewardTypes:monthlyRewardTypes:",  v7,  v8,  v19,  v4,  v25,  v25);
        goto LABEL_38;
      case 43LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"percentage"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"merchantNames"]);
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue( [*v2 objectForKeyedSubscript:@"periodAmount"]);
        uint64_t v25 = (NSSet *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"date"]);
        __int128 v26 = -[PDPassPaymentDailyDailyCashWithPercentageUserNotification initWithPercentage:merchantNames:monthlyAmount:date:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassPaymentDailyDailyCashWithPercentageUserNotification),  "initWithPercentage:merchantNames:monthlyAmount:date:forPassUniqueIdentifier:",  v7,  v8,  v19,  v25,  v4);
LABEL_38:
        id v15 = (PDWalletUserNotification *)v26;

        goto LABEL_79;
      case 44LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"updateType"]);
        id v65 = [v64 integerValue];

        uint64_t v41 = -[PDAccountFinancingPlanUserNotification initWithFinancingPlan:updateType:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanUserNotification),  "initWithFinancingPlan:updateType:passUniqueIdentifier:",  v7,  v65,  v4);
        goto LABEL_74;
      case 45LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"applicationIdentifier"]);
        uint64_t v41 = -[PDUserNotificationTypePTACCompletedUserNotification initWithApplicationIdentifier:]( objc_alloc(&OBJC_CLASS___PDUserNotificationTypePTACCompletedUserNotification),  "initWithApplicationIdentifier:",  v7);
        goto LABEL_74;
      case 46LL:
        unsigned int v45 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"featureIdentifier"]);
        id v46 = [v45 unsignedIntegerValue];

        id v14 = -[PDAccountBackgroundProvisionCompleteUserNotification initWithFeatureIdentifier:passUniqueIdentifier:supportsInStorePayment:]( objc_alloc(&OBJC_CLASS___PDAccountBackgroundProvisionCompleteUserNotification),  "initWithFeatureIdentifier:passUniqueIdentifier:supportsInStorePayment:",  v46,  v4,  1LL);
        goto LABEL_62;
      case 51LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"payment"]);
        __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"requiresGenericMessaging"]);
        id v67 = [v66 BOOLValue];

        BOOL v17 = -[PDAccountFinancingPlanPaymentNotification initWithFinancingPlan:payment:requiresGenericMessaging:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanPaymentNotification),  "initWithFinancingPlan:payment:requiresGenericMessaging:passUniqueIdentifier:",  v7,  v8,  v67,  v4);
        goto LABEL_52;
      case 52LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        uint64_t v41 = -[PDAccountFinancingPlanPaidOffNotification initWithFinancingPlan:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanPaidOffNotification),  "initWithFinancingPlan:passUniqueIdentifier:",  v7,  v4);
        goto LABEL_74;
      case 53LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"installment"]);
        v68 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"reminderOffset"]);
        id v69 = [v68 integerValue];

        __int128 v51 = -[PDAccountFinancingPlanPaymentReminderNotification initWithInstallment:financingPlan:accountCreatedDate:passUniqueIdentifier:reminderOffset:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanPaymentReminderNotification),  "initWithInstallment:financingPlan:accountCreatedDate:passUniqueIdentifier:reminderOffset:",  v8,  v7,  0LL,  v4,  v69);
        goto LABEL_59;
      case 54LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"requiresGenericMessaging"]);
        id v71 = [v70 BOOLValue];

        uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"daysPastDue"]);
        id v73 = [v72 integerValue];

        id v15 = -[PDAccountFinancingPlanPastDueNotification initWithFinancingPlan:requiresGenericMessaging:daysPastDue:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanPastDueNotification),  "initWithFinancingPlan:requiresGenericMessaging:daysPastDue:passUniqueIdentifier:",  v7,  v71,  v73,  v4);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[PDUserNotification setDate:](v15, "setDate:", v8);
        goto LABEL_80;
      case 55LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        id v47 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"updateType"]);
        id v48 = [v47 integerValue];

        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"requiresGenericMessaging"]);
        id v50 = [v49 BOOLValue];

        uint64_t v41 = -[PDAccountFinancingPlanScheduleUpdateNotification initWithFinancingPlan:updateType:requiresGenericMessaging:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanScheduleUpdateNotification),  "initWithFinancingPlan:updateType:requiresGenericMessaging:passUniqueIdentifier:",  v7,  v48,  v50,  v4);
        goto LABEL_74;
      case 56LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"financingPlan"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"dispute"]);
        __int128 v51 = -[PDAccountFinancingPlanDisputeUpdateNotification initWithFinancingPlan:dispute:type:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanDisputeUpdateNotification),  "initWithFinancingPlan:dispute:type:passUniqueIdentifier:",  v7,  v8,  1LL,  v4);
LABEL_59:
        id v15 = (PDWalletUserNotification *)v51;
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[PDUserNotification setDate:](v15, "setDate:", v19);
        goto LABEL_79;
      case 58LL:
        id v14 = objc_alloc_init(&OBJC_CLASS___PDImportSafariCardConsentRequiredUserNotification);
        goto LABEL_62;
      case 59LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"fpanSuffix"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"networkName"]);
        BOOL v17 = -[PDImportSafariCardRequestUserNotification initWithFPANSuffix:networkName:]( objc_alloc(&OBJC_CLASS___PDImportSafariCardRequestUserNotification),  "initWithFPANSuffix:networkName:",  v7,  v8);
        goto LABEL_52;
      case 62LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"cardName"]);
        uint64_t v41 = -[PDVirtualCardVPANImplicitUpgradeUserNotification initWithCardName:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDVirtualCardVPANImplicitUpgradeUserNotification),  "initWithCardName:passUniqueIdentifier:",  v7,  v4);
        goto LABEL_74;
      case 64LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"fpanSuffix"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"networkName"]);
        BOOL v17 = -[PDSuggestVPANForProvisionedSafariCardRequestUserNotification initWithFPANSuffix:networkName:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDSuggestVPANForProvisionedSafariCardRequestUserNotification),  "initWithFPANSuffix:networkName:passUniqueIdentifier:",  v7,  v8,  v4);
LABEL_52:
        id v15 = (PDWalletUserNotification *)v17;
        goto LABEL_80;
      case 65LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        id v52 = &OBJC_CLASS___PDAccountAPYUpdateUserNotification;
        goto LABEL_73;
      case 66LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        id v52 = &OBJC_CLASS___PDAccountOverdrawnBalanceUserNotification;
        goto LABEL_73;
      case 67LL:
        id v15 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassExpressUpgradesAvailableUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  v5,  v6,  v4);
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"customActionURLString"]);
        if (v7) {
          -[PDUserNotification setCustomActionURLString:](v15, "setCustomActionURLString:", v7);
        }
        goto LABEL_81;
      case 70LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"amount"]);
        uint64_t v41 = -[PDAccountBalanceUpdateUserNotification initWithAmount:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountBalanceUpdateUserNotification),  "initWithAmount:forPassUniqueIdentifier:",  v7,  v4);
        goto LABEL_74;
      case 72LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"recurringPayment"]);
        uint64_t v41 = -[PDPeerPaymentRecurringPaymentStatusChangeUserNotification initWithPassUniqueIdentifier:recurringPayment:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentRecurringPaymentStatusChangeUserNotification),  "initWithPassUniqueIdentifier:recurringPayment:",  v4,  v7);
        goto LABEL_74;
      case 75LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        id v52 = &OBJC_CLASS___PDAccountFCCStepUpThresholdExceededUserNotification;
LABEL_73:
        uint64_t v41 = (PDPassPaymentFraudTransactionUserNotification *)[[v52 alloc] initWithAccount:v7];
LABEL_74:
        id v15 = (PDWalletUserNotification *)v41;
        goto LABEL_81;
      case 78LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"account"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"fundingSource"]);
        v75 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"style"]);
        id v76 = [v75 integerValue];

        BOOL v77 = objc_alloc(&OBJC_CLASS___PDAccountFundingSourceVerificationReminderUserNotification);
        __int128 v81 = v8;
        __int128 v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v81, 1LL));
        id v15 = -[PDAccountFundingSourceVerificationReminderUserNotification initWithAccount:fundingSources:style:]( v77,  "initWithAccount:fundingSources:style:",  v7,  v57,  v76);
LABEL_76:

        goto LABEL_80;
      case 81LL:
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"message"]);
        uint64_t v8 = (PKAccountEvent *)objc_claimAutoreleasedReturnValue([*v2 objectForKeyedSubscript:@"title"]);
        uint64_t v19 = (PKAccountPhysicalCardShippingUpdate *)objc_claimAutoreleasedReturnValue( [*v2 objectForKeyedSubscript:@"passUniqueIdentifier"]);
        id v43 = -[PDPassVerificationPromptNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassVerificationPromptNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  v8,  v7,  v19);
LABEL_78:
        id v15 = (PDWalletUserNotification *)v43;
LABEL_79:

LABEL_80:
LABEL_81:

        if (v15) {
          goto LABEL_82;
        }
        goto LABEL_63;
      default:
        id v14 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDGenericUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  @"Unknown Notification",  @"Unknown Notification Type",  v4);
LABEL_62:
        id v15 = v14;
        if (v14)
        {
LABEL_82:
          [*(id *)(*(void *)(a1 + 32) + 112) insertUserNotification:v15];
        }

        else
        {
LABEL_63:
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          id v15 = (PDWalletUserNotification *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 136315138;
            __int128 v80 = "-[PDPaymentService simulateNotificationOfType:userInfo:handler:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_DEFAULT,  "Not inserting a nil notificatation: %s",  buf,  0xCu);
          }
        }

        break;
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v80 = "-[PDPaymentService simulateNotificationOfType:userInfo:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A5834(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 64) initiateDevicePassesDownload];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService downloadAllPaymentPassesWithHandler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A59B4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 64) initiateConsistencyCheck];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService consistencyCheckWithHandler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002A5B34(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    if (*(void *)(*(void *)(a1 + 32) + 104LL)) {
      uint64_t v2 = @"SETUP_REMINDER_SUICA_MESSAGE";
    }
    else {
      uint64_t v2 = @"SETUP_REMINDER_MESSAGE";
    }
    uint64_t v3 = PKLocalizedPaymentString(&v2->isa);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    int v5 = -[PDGenericUserNotification initWithMessage:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithMessage:",  v4);
    uint64_t v6 = -[PDGenericUserNotification initWithMessage:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithMessage:",  v4);
    int v8 = PKShortenRemindersEnabled(v6, v7);
    double v9 = 3600.0;
    if (v8) {
      double v9 = 60.0;
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", v9));
    int v12 = PKShortenRemindersEnabled(v10, v11);
    double v13 = 86400.0;
    if (v12) {
      double v13 = 18000.0;
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", v13));
    -[PDUserNotification setNotificationIdentifier:]( v5,  "setNotificationIdentifier:",  PDWalletUserNotificationSetupApplePayReminderIdentifier1);
    -[PDUserNotification setNotificationIdentifier:]( v6,  "setNotificationIdentifier:",  PDWalletUserNotificationSetupApplePayReminderIdentifier2);
    -[PDUserNotification setInsertionRequirements:](v5, "setInsertionRequirements:", 80LL);
    -[PDUserNotification setInsertionRequirements:](v6, "setInsertionRequirements:", 80LL);
    -[PDUserNotification setDate:](v5, "setDate:", v10);
    -[PDUserNotification setDate:](v6, "setDate:", v14);
    [*(id *)(*(void *)(a1 + 32) + 112) insertUserNotification:v5];
    [*(id *)(*(void *)(a1 + 32) + 112) insertUserNotification:v6];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      int v18 = "-[PDPaymentService scheduleSetupReminders:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v17,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002A6EBC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_objectsPassingTest:", &stru_100652570));
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    int v5 = v3;
    (*(void (**)(void))(v4 + 16))();
    uint64_t v3 = v5;
  }
}

BOOL sub_1002A6F14(id a1, PKFeatureApplication *a2, unint64_t a3, BOOL *a4)
{
  return -[PKFeatureApplication applicationType](a2, "applicationType", a3, a4) == (id)2;
}

void sub_1002A6FBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1002A705C;
  v8[3] = &unk_100652590;
  void v8[4] = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_objectsPassingTest:", v8));
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

BOOL sub_1002A705C(uint64_t a1, void *a2)
{
  return [a2 applicationType] == *(id *)(a1 + 32);
}

void sub_1002A79E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 64LL);
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_1002A7AFC;
  v9[3] = &unk_100652608;
  uint64_t v18 = *(void *)(a1 + 88);
  v9[1] = 3221225472LL;
  id v10 = v4;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v14 = v3;
  id v6 = *(id *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 32);
  id v17 = v6;
  uint64_t v15 = v7;
  id v16 = *(id *)(a1 + 72);
  id v8 = v3;
  [v5 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_1002A7AFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountTransactionAnswerRequest);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 96)));
  uint64_t v19 = v5;
  uint64_t v20 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
  [v4 setAnswers:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceIdentifier]);
  [v4 setTransactionIdentifier:v7];

  [v4 setAccountIdentifier:*(void *)(a1 + 48)];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) altDSID]);
  [v4 setAccountUserAltDSID:v8];

  double v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) accountBaseURL]);
  [v4 setBaseURL:v9];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1002A7CC4;
  v13[3] = &unk_1006525E0;
  id v17 = *(id *)(a1 + 88);
  id v10 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 72);
  id v12 = *(void **)(a1 + 80);
  id v14 = v10;
  uint64_t v15 = v11;
  id v16 = v12;
  [v3 accountTransactionAnswerWithRequest:v4 completion:v13];
}

void sub_1002A7CC4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    if (!v5)
    {
      [*(id *)(a1 + 32) answeredQuestion:*(void *)(a1 + 64)];
      id v7 =  [*(id *)(*(void *)(a1 + 40) + 88) insertOrUpdatePaymentTransaction:*(void *)(a1 + 32) withTransactionSourceIdentifier:*(void *)(a1 + 48) insertionMode:0 performTruncation:1 insertedTransaction:0];
      uint64_t v6 = *(void *)(a1 + 56);
    }

    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_1002A8154(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 48) applePayContainer]);
    [v6 requestUpdatesForTransactionSourceIdentifier:*(void *)(a1 + 40)];
LABEL_5:
    id v4 = v6;
    goto LABEL_6;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v3 + 88) passUniqueIdentifierForTransactionWithIdentifier:*(void *)(a1 + 40)]);
  if (v4)
  {
    uint64_t v6 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) notificationServiceOfType:0 forPassWithUniqueIdentifier:v4]);
    [*(id *)(*(void *)(a1 + 32) + 40) requestUpdatesFromNotificationService:v5 passUniqueIdenitifer:v6];

    goto LABEL_5;
  }

void sub_1002A8C54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 264LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002A8CD4;
  v3[3] = &unk_100652658;
  id v4 = *(id *)(a1 + 48);
  [v2 sendDeviceSharingCapabilitiesRequestForHandle:v1 completion:v3];
}

uint64_t sub_1002A8CD4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002A94EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_1002A9528(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v6) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
  }
  if (v5) {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v5];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1002A95A4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

id sub_1002A9638(id a1, NSString *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[PKAppletSubcredential initWithIdentifier:]( objc_alloc(&OBJC_CLASS___PKAppletSubcredential),  "initWithIdentifier:",  v2);

  return v3;
}

uint64_t sub_1002AB230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002ABB1C(uint64_t a1)
{
  id v2 = [[PKPassOwnershipToken alloc] initWithOwnershipToken:*(void *)(a1 + 32) identifier:*(void *)(a1 + 40)];

  if (!v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to store pass ownership token with identifier: %@ token: %@",  (uint8_t *)&v7,  0x16u);
    }
  }

void sub_1002AC424(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 144LL);
  if (v2)
  {
    [v2 enforceUpgradedPasscodePolicyWithCompletion:v1];
  }

  else if (v1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, 1LL, v3);
  }

void sub_1002AC5B0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 144LL);
  if (v2)
  {
    id v6 = 0LL;
    [v2 currentPasscodeMeetsUpgradedPasscodePolicy:&v6];
    id v3 = v6;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, 1LL, v5);
    }
  }

void sub_1002AC7F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 144LL);
  if (v1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1002AC8D0;
    v4[3] = &unk_10063B3A0;
    id v5 = *(id *)(a1 + 40);
    [v1 requiresUpgradedPasscodeWithCompletion:v4];
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
    }
  }

uint64_t sub_1002AC8D0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

void sub_1002ACAA8(void *a1)
{
  if (*(void *)(a1[4] + 144LL))
  {
    _[*(id *)(a1[4] + 144) changePasscodeFrom:a1[5] toPasscode:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_1002ACCB8(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) transactionReceiptWithUniqueID:a1[5]]);
  [*(id *)(a1[4] + 256) registerDatabaseTransactionReceipt:v2];
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002ACE88(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = PKTemporaryItemURLWithExtension(PKRawTransactionReceiptExtension, 1LL);
    id v3 = (NSURL *)objc_claimAutoreleasedReturnValue(v2);
    PKTemporaryItemPrepareDirectory();
    if (PKUnarchiverZip(*(NSData **)(a1 + 32), v3))
    {
      uint64_t v4 = -[PKTransactionReceipt initWithFileURL:]( objc_alloc(&OBJC_CLASS___PKTransactionReceipt),  "initWithFileURL:",  v3);
      if (v4)
      {
        id v5 = *(void **)(a1 + 48);
        id v6 = *(void **)(*(void *)(a1 + 40) + 256LL);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_1002ACFD0;
        v10[3] = &unk_10063CAE0;
        id v12 = v5;
        uint64_t v11 = v4;
        [v6 writeTransactionReceipt:v11 completion:v10];
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 48);
        if (v9) {
          (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0LL);
        }
      }
    }

    else
    {
      uint64_t v8 = *(void *)(a1 + 48);
      if (v8) {
        (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0LL);
      }
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    }
  }

uint64_t sub_1002ACFD0(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    if (a2) {
      uint64_t v4 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v4 = 0LL;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v4);
  }

  return result;
}

uint64_t sub_1002AD160(void *a1)
{
  id v2 = [*(id *)(a1[4] + 256) deleteTransactionReceiptWithUniqueID:a1[5]];
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

void sub_1002AD324(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) transactionWithTransactionIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 associatedReceiptUniqueID]);
  uint64_t v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

  else
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) transactionReceiptWithUniqueID:v3]);
    uint64_t v8 = (void *)v7;
    if (v7) {
      [*(id *)(*(void *)(a1 + 32) + 256) registerDatabaseTransactionReceipt:v7];
    }
    if (*(_BYTE *)(a1 + 56))
    {
      id v9 = [v8 state];
      if (v8) {
        BOOL v10 = v9 == 0LL;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v9 != (id)2 && [v2 transactionStatus] == (id)1;
      }
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = @"NO";
        if (v11) {
          uint64_t v15 = @"YES";
        }
        else {
          uint64_t v15 = @"NO";
        }
        if (v8) {
          id v14 = @"YES";
        }
        int v17 = 138412546;
        uint64_t v18 = v15;
        __int16 v19 = 2112;
        uint64_t v20 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Should update existing receipt: %@, receiptExists: %@",  (uint8_t *)&v17,  0x16u);
      }

      if (v11) {
        [*(id *)(*(void *)(a1 + 32) + 64) downloadReceiptForTransaction:v2];
      }
    }

    uint64_t v16 = *(void *)(a1 + 48);
    if (v16) {
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v8);
    }
  }
}

void sub_1002AD66C(void *a1)
{
  uint64_t v1 = a1[6];
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) tagsForTransactionWithIdentifier:a1[5]]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1002AD890(void *a1)
{
  if (*(void *)(a1[4] + 296LL))
  {
    _[*(id *)(a1[4] + 296) registerAuxiliaryCapabilityForPassUniqueIdentifier:a1[5] sessionExchangeToken:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
    }
  }

id sub_1002ADA40(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 296) checkAllAuxiliaryRegistrationRequirements];
}

uint64_t (**sub_1002ADBB8(void *a1))(void)
{
  if (*(void *)(a1[4] + 224LL)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 224) invalidateCertificatesForPassUniqueIdentifier:a1[5] completion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(void))a1[6];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_1002ADDAC(void *a1)
{
  if (*(void *)(a1[4] + 224LL))
  {
    _[*(id *)(a1[4] + 224) fetchBarcodesForPassUniqueIdentifier:a1[5] sessionExchangeToken:a1[6] withCompletion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_1002AE038(void *a1)
{
  if (*(void *)(a1[4] + 224LL))
  {
    _[*(id *)(a1[4] + 224) retrieveDecryptedBarcodeCredentialForPassUniqueIdentifier:a1[5] authorization:a1[6] sessionExchangeToken:a1[7] withCompletion:a1[8]];
  }

  else
  {
    uint64_t v1 = a1[8];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
    }
  }

void sub_1002AE2A8(void *a1)
{
  if (*(void *)(a1[4] + 224LL))
  {
    _[*(id *)(a1[4] + 224) retrieveDecryptedBarcodeCredentialForPassUniqueIdentifier:a1[5] authorization:a1[6] withCompletion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
    }
  }

uint64_t (**sub_1002AE4BC(void *a1))(id, void)
{
  if (*(void *)(a1[4] + 224LL)) {
    return (uint64_t (**)(id, void))_[*(id *)(a1[4] + 224) retrievePINEncryptionCertificateForPassUniqueIdentifier:a1[5] withCompletion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(id, void))a1[6];
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0LL);
  }
  return result;
}

uint64_t (**sub_1002AE684(void *a1))(id, void)
{
  if (*(void *)(a1[4] + 224LL)) {
    return (uint64_t (**)(id, void))_[*(id *)(a1[4] + 224) retrievePINEncryptionCertificateForPassUniqueIdentifier:a1[5] sessionExchang eToken:a1[6] withCompletion:a1[7]];
  }
  uint64_t result = (uint64_t (**)(id, void))a1[7];
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0LL);
  }
  return result;
}

uint64_t (**sub_1002AE834(void *a1))(void)
{
  if (*(void *)(a1[4] + 232LL)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 232) processedAuthenticationMechanism:a1[7] forTransactionIdentifier:a1[5] completion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(void))a1[6];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

uint64_t (**sub_1002AE9D0(void *a1))(void)
{
  if (*(void *)(a1[4] + 232LL)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 232) markAuthenticationCompleteForTransactionIdentifier:a1[5] completion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(void))a1[6];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_1002AEBAC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 232LL))
  {
    _[*(id *)(*(void *)(a1 + 32) + 232) submitUserConfirmation:*(unsigned __int8 *)(a1 + 56) forTransactionIdentifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_1002AEE1C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 232LL))
  {
    _[*(id *)(*(void *)(a1 + 32) + 232) submitUserConfirmation:*(unsigned __int8 *)(a1 + 64) forTransactionIdentifier:*(void *)(a1 + 40) sessionExchangeToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }

  else
  {
    uint64_t v1 = *(void *)(a1 + 56);
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_1002AF088(void *a1)
{
  if (*(void *)(a1[4] + 232LL))
  {
    _[*(id *)(a1[4] + 232) submitEncryptedPIN:a1[5] forTransactionIdentifier:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_1002AF310(void *a1)
{
  if (*(void *)(a1[4] + 232LL))
  {
    _[*(id *)(a1[4] + 232) submitEncryptedPIN:a1[5] forTransactionIdentifier:a1[6] sessionExchangeToken:a1[7] completion:a1[8]];
  }

  else
  {
    uint64_t v1 = a1[8];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_1002AF578(void *a1)
{
  if (*(void *)(a1[4] + 232LL))
  {
    _[*(id *)(a1[4] + 232) submitTransactionSignatureForTransactionIdentifier:a1[5] sessionExchangeToken:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  -1LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

uint64_t (**sub_1002AF7AC(void *a1))(void)
{
  if (*(void *)(a1[4] + 224LL)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 224) submitBarcodePaymentEvent:a1[5] forPassUniqueIdentifier:a1[6] withCompletion:a1[7]];
  }
  uint64_t result = (uint64_t (**)(void))a1[7];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

uint64_t (**sub_1002AF990(void *a1))(void)
{
  if (*(void *)(a1[4] + 224LL)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 224) submitBarcodePaymentEvent:a1[5] forPassUniqueIdentifier:a1[6] sessionExchangeToken:a1[7] withCompletion:a1[8]];
  }
  uint64_t result = (uint64_t (**)(void))a1[8];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_1002AFF70(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) needsRegistration])
  {
    uint64_t v8 = *(void **)(a1 + 40);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1002B00E0;
    v15[3] = &unk_1006526F0;
    id v17 = v7;
    id v16 = v6;
    [v8 performDeviceRegistrationForReason:@"Prepare for identity provisioning" brokerURL:0 completion:v15];

    id v9 = v17;
LABEL_6:

    goto LABEL_7;
  }

  if (!*(void *)(a1 + 32))
  {
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) paymentWebServiceCoordinator]);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceRegistrationServiceCoordinator]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1002B01B8;
    v12[3] = &unk_100642700;
    id v14 = v7;
    id v13 = v6;
    [v11 performDeviceRegistrationForReason:@"Prepare for identity provisioning" brokerURL:0 action:0 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:v12];

    id v9 = v14;
    goto LABEL_6;
  }

  (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
LABEL_7:
}

void sub_1002B00E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Failed to register while preparing for identity provisioning with error %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002B01B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Failed to register while preparing for identity provisioning with error %@",  (uint8_t *)&v10,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002B02A8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  id v9 = (void *)a1[4];
  if (v9)
  {
    uint64_t v10 = a1[5];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1002B03C8;
    v17[3] = &unk_100652718;
    id v11 = &v19;
    id v19 = v7;
    id v12 = &v18;
    id v18 = v6;
    [v9 paymentWebService:v10 setNewAuthRandomIfNecessaryReturningPairingState:v17];
  }

  else
  {
    id v13 = (void *)a1[6];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1002B0478;
    v14[3] = &unk_100652718;
    id v11 = &v16;
    id v16 = v7;
    id v12 = &v15;
    id v15 = v6;
    [v13 initializeSecureElementIfNecessaryWithHandler:v14];
  }
}

void sub_1002B03C8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to set auth random while preparing for identity provisioning",  v11,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002B0478(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to set auth random while preparing for identity provisioning",  v11,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002B0528(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 32))
  {
    if ([a4 isCanceled]) {
      uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIdentityProvisioningErrorDomain,  8LL,  0LL));
    }
    else {
      uint64_t v5 = 0LL;
    }
    id v6 = (id)v5;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_1002B0998(uint64_t a1, void *a2, void *a3)
{
  id v10 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 secureElementPass]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 paymentPass]);

  if (v7)
  {
    id v8 = v7;
    id v9 = 0LL;
  }

  else
  {
    id v8 = 0LL;
    id v9 = v10;
  }

  (*(void (**)(void, void *, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v8, v9);
}

void sub_1002B0D44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(39LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Falling back to legacy identity provisioning flow for watch",  buf,  2u);
    }

    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1002B0E78;
    v18[3] = &unk_100652768;
    uint64_t v13 = *(void *)(a1 + 64);
    id v14 = *(id *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 32);
    id v19 = v14;
    uint64_t v20 = v15;
    [v9 provisionIdentityPassWithPassMetadata:v10 targetDeviceIdentifier:v11 credentialIdentifier:v12 attestations:v5 supplementalData:v13 completion:v18];
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  0LL,  v16,  v17);
  }
}

void sub_1002B0E78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1002B0F48;
  v11[3] = &unk_10063B060;
  id v12 = v5;
  id v13 = *(id *)(a1 + 32);
  id v14 = v6;
  uint64_t v15 = *(void *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_1002B0F48(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[PKPendingProvisioningReceipt successReceiptWithPendingProvisioning:passUniqueID:]( &OBJC_CLASS___PKPendingProvisioningReceipt,  "successReceiptWithPendingProvisioning:passUniqueID:",  v3,  v4));
  }

  else
  {
    if (a1[6]) {
      uint64_t v6 = objc_claimAutoreleasedReturnValue( +[PKPendingProvisioningReceipt failedReceiptWithPendingProvisioning:error:]( &OBJC_CLASS___PKPendingProvisioningReceipt,  "failedReceiptWithPendingProvisioning:error:",  a1[5]));
    }
    else {
      uint64_t v6 = objc_claimAutoreleasedReturnValue( +[PKPendingProvisioningReceipt remoteSuccessReceiptWithPendingProvisioning:]( &OBJC_CLASS___PKPendingProvisioningReceipt,  "remoteSuccessReceiptWithPendingProvisioning:",  a1[5]));
    }
    id v5 = (void *)v6;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v5,  1LL,  0LL));
  if (v7)
  {
    xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( v8,  "Name",  (const char *)[PKPassLibraryPendingProvisioningFinishedNotification UTF8String]);
    id v9 = (const char *)[PKPassLibraryPendingProvisioningFinishedReceiptKey UTF8String];
    id v10 = v7;
    xpc_dictionary_set_data(v8, v9, [v10 bytes], (size_t)objc_msgSend(v10, "length"));
    [*(id *)(a1[7] + 328) sendEvent:v8 completion:0];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(36LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Failed to archive pending provisioning receipt: %@",  (uint8_t *)&v13,  0xCu);
    }
  }
}

void sub_1002B1424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_1002B1448(void *a1, void *a2)
{
  id v7 = a2;
  uint64_t v3 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"productUpdate-%@", v7);
  if (a1[4])
  {
    id v4 = objc_alloc(&OBJC_CLASS___NSString);
    id v5 = -[NSString initWithFormat:](v4, "initWithFormat:", @"%@/%@", PKURLActionPaymentSetupSelectProduct, v7);
    uint64_t v6 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  a1[4],  a1[5]);
    -[PDUserNotification setNotificationIdentifier:](v6, "setNotificationIdentifier:", v3);
    -[PDUserNotification setCustomActionRoute:](v6, "setCustomActionRoute:", v5);
    -[PDUserNotification setReissueBannerOnUpdate:](v6, "setReissueBannerOnUpdate:", 1LL);
    [*(id *)(a1[6] + 112) insertUserNotification:v6];
  }

  else
  {
    [*(id *)(a1[6] + 112) removeUserNotificationWithIdentifier:v3];
  }

  (*(void (**)(void))(a1[7] + 16LL))();
}

void sub_1002B1564(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v35 = a3;
  id v5 = objc_alloc_init(&OBJC_CLASS___PKPaymentSetupProductModel);
  id v36 = v4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 JSONObject]);
  [v5 updateWithPaymentSetupProductsResponse:v6 productsFilter:0 sectionsFilter:0];

  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int16 v34 = v5;
  id obj = (id)objc_claimAutoreleasedReturnValue([v5 allSetupProducts]);
  id v7 = [obj countByEnumeratingWithState:&v41 objects:v49 count:16];
  if (!v7)
  {
LABEL_26:

LABEL_30:
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    id v29 = v35;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v46 = v32;
      __int16 v47 = 2112;
      id v48 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Could not find product with config %@, error %@",  buf,  0x16u);
    }

    uint64_t v33 = *(void *)(a1 + 40);
    id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIdentityProvisioningErrorDomain,  6LL,  0LL));
    (*(void (**)(uint64_t, void *))(v33 + 16))(v33, v27);
    __int128 v28 = v36;
    goto LABEL_33;
  }

  id v8 = v7;
  uint64_t v39 = *(void *)v42;
  uint64_t v9 = PKIdentityProductAdministrativeArea;
  uint64_t v37 = PKIdentityProductCountry;
LABEL_3:
  uint64_t v10 = 0LL;
  while (1)
  {
    if (*(void *)v42 != v39) {
      objc_enumerationMutation(obj);
    }
    uint64_t v11 = *(void **)(*((void *)&v41 + 1) + 8 * v10);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 clientInfo]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v9]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
    id v15 = v13;
    id v16 = v14;
    uint64_t v17 = v16;
    if (v15 == v16)
    {
    }

    else
    {
      if (v15) {
        BOOL v18 = v16 == 0LL;
      }
      else {
        BOOL v18 = 1;
      }
      id v19 = v16;
      id v20 = v15;
      if (v18) {
        goto LABEL_21;
      }
      id v21 = [v15 caseInsensitiveCompare:v16];

      if (v21) {
        goto LABEL_22;
      }
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v37]);
    int v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v37]);
    id v20 = v22;
    id v24 = v23;
    if (v20 == v24) {
      break;
    }
    id v19 = v24;
    if (v20) {
      BOOL v25 = v24 == 0LL;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25)
    {

LABEL_21:
LABEL_22:

      goto LABEL_24;
    }

    id v26 = [v20 caseInsensitiveCompare:v24];

    if (!v26) {
      goto LABEL_28;
    }
LABEL_24:

    if (v8 == (id)++v10)
    {
      id v8 = [obj countByEnumeratingWithState:&v41 objects:v49 count:16];
      if (v8) {
        goto LABEL_3;
      }
      goto LABEL_26;
    }
  }

LABEL_28:
  id v27 = (void *)objc_claimAutoreleasedReturnValue([v11 productIdentifier]);

  if (!v27) {
    goto LABEL_30;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  id v29 = v35;
  __int128 v28 = v36;
LABEL_33:
}

id sub_1002B1A6C(void *a1)
{
  return _[*(id *)(a1[4] + 280) processCLICommands:a1[5] completion:a1[6]];
}

uint64_t sub_1002B24F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002B2CF0(_Unwind_Exception *exception_object)
{
}

void sub_1002B2D10(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 280) hasActiveExternallySharedPasses];
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      id v12 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s - General pass, shared pass located",  (uint8_t *)&v11,  0xCu);
    }

    BOOL v10 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0;
  }

  else
  {
    BOOL v10 = 0LL;
  }

  v7[2](v7, v6, v10);
}

void sub_1002B2E3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  BOOL v10 = *(void **)(v8 + 160);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1002B2EF8;
  v13[3] = &unk_10063B8A8;
  id v15 = v7;
  uint64_t v16 = v9;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v10 defaultAccountForFeature:2 completion:v13];
}

void sub_1002B2EF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isSharedAccount])
  {
    id v4 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1002B2FD4;
    v7[3] = &unk_100642840;
    void v7[4] = v4;
    id v8 = v3;
    __int128 v6 = *(_OWORD *)(a1 + 48);
    id v5 = (id)v6;
    __int128 v10 = v6;
    id v9 = *(id *)(a1 + 40);
    [v4 familyMembersIgnoringCache:0 completion:v7];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1002B2FD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = objc_msgSend(v3, "pk_createSetByApplyingBlock:", &stru_100652800);
    id v5 = *(void **)(*(void *)(a1 + 32) + 160LL);
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1002B30F4;
    v10[3] = &unk_100652828;
    id v11 = v4;
    __int128 v9 = *(_OWORD *)(a1 + 56);
    id v7 = (id)v9;
    __int128 v13 = v9;
    id v12 = *(id *)(a1 + 48);
    id v8 = v4;
    [v5 accountUsersForAccountWithIdentifier:v6 completion:v10];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

id sub_1002B30EC(id a1, PKFamilyMember *a2)
{
  return -[PKFamilyMember altDSID](a2, "altDSID");
}

void sub_1002B30F4(void *a1, void *a2)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "accountState", (void)v13) == (id)1
          && ([v8 isCurrentUser] & 1) == 0)
        {
          __int128 v9 = (void *)a1[4];
          __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v8 altDSID]);
          LODWORD(v9) = [v9 containsObject:v10];

          if ((_DWORD)v9)
          {
            *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
            uint64_t Object = PKLogFacilityTypeGetObject(0LL);
            id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 136315138;
              BOOL v18 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke_5";
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s - First party card, shared pass located",  buf,  0xCu);
            }

            goto LABEL_15;
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v19 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_1002B32B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) peerPaymentAccount]);
  __int128 v9 = v8;
  if (v8)
  {
    if ([v8 role] == (id)1)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 136315138;
        BOOL v18 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s - First party peer payment participant, shared pass located",  (uint8_t *)&v17,  0xCu);
      }

      goto LABEL_12;
    }

    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 associatedAccountInformation]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s associatedAccounts](v11, "associatedAccounts"));
    if ([v12 count])
    {
    }

    else
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s associatedAccountInvitations](v11, "associatedAccountInvitations"));
      id v14 = [v13 count];

      if (!v14)
      {
LABEL_12:

        v7[2](v7, v6, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
        goto LABEL_13;
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    uint64_t v15 = PKLogFacilityTypeGetObject(0LL);
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      BOOL v18 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s - First party peer payment owner, shared pass located",  (uint8_t *)&v17,  0xCu);
    }

    goto LABEL_12;
  }

  v7[2](v7, v6, 0LL);
LABEL_13:
}

uint64_t sub_1002B34CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

void sub_1002B38D0(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 288) retrievePendingProvisioningsOfType:a1[5]]);
  (*(void (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_1002B3AB4(void *a1)
{
  return (*(uint64_t (**)(void, id))(a1[6] + 16))( a1[6],  [*(id *)(a1[4] + 288) hasPendingProvisioningsOfTypes:a1[5]]);
}

void sub_1002B3C7C(void *a1)
{
  uint64_t v1 = a1[7];
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 288) retrievePendingProvisioningOfType:a1[5] withUniqueIdentifier:a1[6]]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1002B3E60(void *a1)
{
  return (*(uint64_t (**)(void, id))(a1[7] + 16))( a1[7],  [*(id *)(a1[4] + 288) removePendingProvisioningOfType:a1[5] withUniqueIdentifier:a1[6] success:1]);
}

void sub_1002B3F9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 canMakeVirtualCardPayments];
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Returning virtual cards (if there are any): Device currently able to make local payments",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) _vpanVirtualCards:*(void *)(a1 + 40)];
  }

  else
  {
    if (v7)
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Not returning virtual cards: Device currently unable to make local payments: %@",  (uint8_t *)&v9,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1002B4600(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 canMakeVirtualCardPayments];
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fetching VPAN credentials: Device currently able to make local payments",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) _vpanCardCredentialsForVPANID:*(void *)(a1 + 40) authorization:*(void *)(a1 + 48) merchantHost:*(void *)(a1 + 56) regenerate:*(unsigned __int8 *)(a1 + 72) hasRefreshedBAACertificate:0 completion:*(void *)(a1 + 64)];
  }

  else
  {
    if (v7)
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Not returning VPAN credentials: Device currently unable to make local payments: %@",  (uint8_t *)&v9,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

id sub_1002B4A94(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Refreshed BAA context: Trying VPAN again",  v5,  2u);
  }

  return [*(id *)(a1 + 32) _vpanCardCredentialsForVPANID:*(void *)(a1 + 40) authorization:*(void *)(a1 + 48) merchantHost:*(void *)(a1 + 56) regenerate:*(unsigned __int8 *)(a1 + 72) hasRefreshedBAACertificate:*(unsigned __int8 *)(a1 + 73) completion:*(void *)(a1 + 64)];
}

void sub_1002B4B18(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) supportsVirtualCardNumberAccordingToWebService:v3])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1002B4C9C;
    v11[3] = &unk_100652918;
    id v17 = *(id *)(a1 + 72);
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    id v12 = v5;
    uint64_t v13 = v6;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 64);
    __int16 v18 = *(_WORD *)(a1 + 80);
    [v3 vpanNonceForPaymentPass:v4 completion:v11];

    BOOL v7 = v17;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error: Trying to retrieve a VPAN for a pass whos network isn't enabled in config",  buf,  2u);
    }

    uint64_t v10 = *(void *)(a1 + 72);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v7);
  }
}

void sub_1002B4C9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = v6;
  if (!v5 || v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to get nonce, so can't fetch VPAN credentials",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1002B4E0C;
    v14[3] = &unk_1006528F0;
    id v9 = *(id *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(void **)(a1 + 48);
    id v20 = v9;
    void v14[4] = v10;
    id v15 = v11;
    id v16 = *(id *)(a1 + 56);
    id v17 = v5;
    id v18 = *(id *)(a1 + 64);
    __int16 v21 = *(_WORD *)(a1 + 80);
    id v19 = *(id *)(a1 + 32);
    PKPersistentBAACertificateAndKey(v8, 0LL, v14);
  }
}

void sub_1002B4E0C(uint64_t a1, void *a2, const void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v7 && a3)
  {
    CFRetain(a3);
    id v9 = [[PKVirtualCardEncryptionFields alloc] initWithCertificates:v7];
    uint64_t v10 = *(void **)(a1 + 40);
    id v11 = *(void **)(*(void *)(a1 + 32) + 64LL);
    v15[0] = _NSConcreteStackBlock;
    v15[2] = sub_1002B5008;
    v15[3] = &unk_1006528C8;
    v15[1] = 3221225472LL;
    id v16 = v10;
    id v17 = *(id *)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    id v19 = v9;
    id v20 = *(id *)(a1 + 64);
    char v25 = *(_BYTE *)(a1 + 88);
    id v23 = *(id *)(a1 + 80);
    id v24 = a3;
    char v26 = *(_BYTE *)(a1 + 89);
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = *(id *)(a1 + 72);
    id v12 = v9;
    [v11 performHandlerOnSharedWebServiceQueue:v15];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v28 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Failed to get BAA certificate and key, so can't fetch VPAN credentials: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }
}

void sub_1002B5008(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fetching VPAN credentials…", buf, 2u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1002B5168;
  v14[3] = &unk_1006528A0;
  id v12 = *(id *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  id v18 = v12;
  uint64_t v19 = v13;
  char v20 = *(_BYTE *)(a1 + 105);
  void v14[4] = *(void *)(a1 + 72);
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 64);
  char v21 = *(_BYTE *)(a1 + 104);
  [v3 vpanPaymentCredentialsForPaymentPass:v6 vpanIdentifier:v7 nonce:v8 encryptionFields:v9 merchantHost:v10 regenerate:v11 completion:v14];
}

void sub_1002B5168(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v5 && !v6)
  {
    if (v9)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Attempting to decrypt VPAN credentials",  buf,  2u);
    }

    id v10 = objc_alloc(&OBJC_CLASS___PKVirtualCardCredentials);
    uint64_t v11 = *(void *)(a1 + 72);
    id v25 = 0LL;
    id v12 = [v10 initWithVPANPaymentCredentialResponse:v5 privateKey:v11 error:&v25];
    id v13 = v25;
    if (v12)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully decrypted VPAN credentials",  buf,  2u);
      }
    }

    else
    {
      int v14 = *(unsigned __int8 *)(a1 + 80);
      BOOL v15 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (!v14)
      {
        if (v15)
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v27 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Something went wrong with VPAN decryption. Refreshing BAA state and trying again: %@",  buf,  0xCu);
        }

        dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        v19[2] = sub_1002B5470;
        v19[3] = &unk_100643428;
        id v18 = *(void **)(a1 + 40);
        void v19[4] = *(void *)(a1 + 32);
        id v20 = v18;
        id v21 = *(id *)(a1 + 48);
        id v22 = *(id *)(a1 + 56);
        char v24 = *(_BYTE *)(a1 + 81);
        id v23 = *(id *)(a1 + 64);
        PKForceRefreshBAACertificateAndKey(v17, v19);

        goto LABEL_16;
      }

      if (v15)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v27 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "VPAN decryption still failing after refreshing BAA state. Error: %@",  buf,  0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_16:

    goto LABEL_17;
  }

  if (v9)
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to get VPAN credentials: %@", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_17:
  CFRelease(*(CFTypeRef *)(a1 + 72));
}

id sub_1002B5470(uint64_t a1)
{
  return [*(id *)(a1 + 32) _vpanCardCredentialsForVPANID:*(void *)(a1 + 40) authorization:*(void *)(a1 + 48) merchantHost:*(void *)(a1 + 56) regenerate:*(unsigned __int8 *)(a1 + 72) hasRefreshedBAACertificate:1 completion:*(void *)(a1 + 64)];
}

uint64_t sub_1002B55F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1002B66EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v10 = *(void **)(a1 + 40);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v9, (void)v13));
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v9]);
        [v10 safelySetObject:v11 forKey:v12];
      }

      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v6);
  }
}

void sub_1002B69C8(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    xpc_dictionary_set_string( *(xpc_object_t *)(a1 + 32), (const char *)[v15 UTF8String], (const char *)objc_msgSend(v5, "UTF8String"));
  }

  else
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSData, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      id v10 = v5;
      id v11 = [v10 bytes];
      id v12 = *(void **)(a1 + 32);
      __int128 v13 = (const char *)[v15 UTF8String];
      id v14 = [v10 length];

      xpc_dictionary_set_data(v12, v13, v11, (size_t)v14);
    }
  }
}

void sub_1002B77F0(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v29 = a4;
  id v27 = a6;
  context = objc_autoreleasePoolPush();
  __int128 v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if ((a5 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "This is the final batch of transactions to send",  buf,  2u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  }

  if ([v11 count])
  {
    unint64_t v16 = 0LL;
    do
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndex:v16]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndex:v16]);
      uint64_t v19 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v13, "objectForKey:", v18));
      if (!v19)
      {
        uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v19, v18);
      }

      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) transactionWithTransactionIdentifier:v17]);
      if (v20) {
        -[NSMutableSet addObject:](v19, "addObject:", v20);
      }

      ++v16;
    }

    while (v16 < (unint64_t)[v11 count]);
  }

  uint64_t v21 = PKLogFacilityTypeGetObject(23LL);
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = [v11 count];
    *(_DWORD *)__int128 buf = 134217984;
    id v33 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Sending batch of %lu transactions", buf, 0xCu);
  }

  char v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteObjectProxy]);
  id v25 = -[NSMutableDictionary copy](v13, "copy");
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_1002B7AC4;
  v30[3] = &unk_10063A830;
  id v26 = v27;
  id v31 = v26;
  [v24 transactionBatch:v25 moreComing:a5 readyForNextBatch:v30];

  objc_autoreleasePoolPop(context);
}

uint64_t sub_1002B7AC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002B85E0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_1002B8614( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1002B9BEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(2LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = PDErrorDescription(v3);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v13 = 138412290;
    id v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v13, 0xCu);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  unsigned int v9 = [v8 isEqualToString:@"PDTaskWarningDomain"];

  if (v9)
  {
    id v10 = *(void **)(a1 + 32);
    id v11 = [v3 code];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passTypeIdentifier]);
    [v10 _aggdLogTaskErrorCode:v11 passTypeID:v12];
  }
}

void sub_1002BA0F0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v2 = (void *)qword_100707AD0;
  qword_100707AD0 = (uint64_t)v1;
}

id sub_1002BA118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  if (a3 == 1) {
    [v5 resetPushFrequencyStateForPassTypeID:v6];
  }
  else {
    [v5 _unregisterPassesOfType:v6];
  }
  return [(id)qword_100707AD0 removeObject:*(void *)(a1 + 48)];
}

void sub_1002BA5F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

uint64_t sub_1002BA654(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002BA664(uint64_t a1)
{
}

void sub_1002BA66C(uint64_t a1, void *a2)
{
  id v10 = a2;
  [*(id *)(a1 + 32) addObject:v10];
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id v4 = [*(id *)(a1 + 32) countForObject:v10];
  id v5 = v4;
  if ((unint64_t)v4 > *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    unsigned int v6 = [v10 isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (v6)
    {
      *(void *)(v7 + 24) = v5;
      goto LABEL_9;
    }

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = *(void *)(v7 + 24);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v5;
    objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
    uint64_t v9 = *(void *)(a1 + 56);
LABEL_8:
    objc_storeStrong((id *)(*(void *)(v9 + 8) + 40LL), a2);
    goto LABEL_9;
  }

  if ((unint64_t)v4 > *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    unsigned __int8 v8 = [v10 isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v5;
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 72);
      goto LABEL_8;
    }
  }

void sub_1002BA840(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v1 doubleForKey:@"PDWebServicesStandardZeroInterval"];
  if (v2 <= 1.0)
  {
    qword_100707AE0 = 0x3FF0000000000000LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    [v3 doubleForKey:@"PDWebServicesStandardZeroInterval"];
    qword_100707AE0 = v4;
  }

  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v8 doubleForKey:@"PDWebServicesMinimumZeroInterval"];
  if (v5 <= 1.0)
  {
    qword_100707AE8 = 0x3FF0000000000000LL;
  }

  else
  {
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    [v6 doubleForKey:@"PDWebServicesMinimumZeroInterval"];
    qword_100707AE8 = v7;
  }
}

void sub_1002BAD0C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v1 doubleForKey:@"PDWebServicesMildRateLimitThreshold"];
  qword_100707AF8 = v2;

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v3 doubleForKey:@"PDWebServicesModerateRateLimitThreshold"];
  qword_100707B00 = v4;

  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v5 doubleForKey:@"PDWebServicesSevereRateLimitThreshold"];
  qword_100707B08 = v6;

  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v8 doubleForKey:@"PDWebServicesPushCutoffThreshold"];
  qword_100707B10 = v7;
}

void sub_1002BAEAC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v1 doubleForKey:@"PDWebServicesMildRateLimitInterval"];
  qword_100707B20 = v2;

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v3 doubleForKey:@"PDWebServicesModerateRateLimitInterval"];
  qword_100707B28 = v4;

  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v6 doubleForKey:@"PDWebServicesSevereRateLimitInterval"];
  qword_100707B30 = v5;
}

void sub_1002BB580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___SQLiteMetaEntity);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v7 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  id v6 = v7;
  if (v7)
  {
    [*(id *)(a1 + 40) addObject:v7];
    id v6 = v7;
  }
}

uint64_t sub_1002BC458(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      uint64_t v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_predicateForPID:", -[NSData longLongValue](v5, "longLongValue")));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) anyInDatabase:*(void *)(a1 + 32) predicate:v6]);
      id v8 = *(void **)(a1 + 40);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 transactionArchive]);
      [v8 addObject:v9];

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_1002BC9C8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002BCA20(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002BCA78(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002BCBA0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(*(Class *)(a1 + 48));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v7 = [v4 initWithPersistentID:a2 inDatabase:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 transactionArchive]);
  if (v6) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_1002BCCCC(id a1, PKPaymentTransactionArchive *a2, id a3)
{
  uint64_t v6 = a2;
  id v4 = a3;
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

    if (v5 != v4)
    {
      -[PKPaymentTransactionArchive setType:](v6, "setType:", 0LL);
      -[PKPaymentTransactionArchive setIdentifier:](v6, "setIdentifier:", v4);
    }
  }
}

void sub_1002BCD44(id a1, PKPaymentTransactionArchive *a2, id a3)
{
  uint64_t v6 = a2;
  id v4 = a3;
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

    if (v5 != v4)
    {
      -[PKPaymentTransactionArchive setType:](v6, "setType:", 1LL);
      -[PKPaymentTransactionArchive setIdentifier:](v6, "setIdentifier:", v4);
    }
  }
}

void sub_1002BCDBC(id a1, PKPaymentTransactionArchive *a2, id a3)
{
  uint64_t v6 = a2;
  id v4 = a3;
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

    if (v5 != v4)
    {
      -[PKPaymentTransactionArchive setType:](v6, "setType:", 2LL);
      -[PKPaymentTransactionArchive setIdentifier:](v6, "setIdentifier:", v4);
    }
  }
}

void sub_1002BD4E8(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentBalance),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
    *a4 = !-[SQLiteEntity deleteFromDatabase](v5, "deleteFromDatabase");
  }

void sub_1002BD9EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPaymentBalance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  objc_msgSend( *(id *)(a1 + 48),  "_updateBalance:value:currencyCode:exponent:",  v7,  *(void *)(a4 + 8 * *(void *)(a1 + 56)),  *(void *)(a4 + 8 * *(void *)(a1 + 64)),  objc_msgSend(*(id *)(a4 + 8 * *(void *)(a1 + 72)), "integerValue"));
  [*(id *)(a1 + 40) addObject:v7];
}

id sub_1002BDB80(void *a1, uint64_t a2, uint64_t a3)
{
  return +[PaymentBalance _updateBalance:value:currencyCode:exponent:]( PaymentBalance,  "_updateBalance:value:currencyCode:exponent:",  a1[5],  *(void *)(a3 + 8 * a1[6]),  *(void *)(a3 + 8 * a1[7]),  [*(id *)(a3 + 8 * a1[8]) integerValue]);
}

void sub_1002BDF08(id a1, PKPaymentBalance *a2, id a3)
{
  id v6 = a3;
  if (v6)
  {
    id v4 = a2;
    id v5 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v6, 0LL);
    -[PKPaymentBalance setIdentifiers:](v4, "setIdentifiers:", v5);
  }

  else
  {
    id v5 = a2;
    -[NSSet setIdentifiers:](v5, "setIdentifiers:", 0LL);
  }
}

void sub_1002BDF94(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_1002BDF9C(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_1002BDFA4(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_1002BDFAC(id a1, PKPaymentBalance *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentBalance setLastUpdateDate:](v4, "setLastUpdateDate:", v5);
}

void sub_1002BDFF8(id a1, PKPaymentBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentBalance setIsPrimary:](v4, "setIsPrimary:", [a3 BOOLValue]);
}

void sub_1002BE03C(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_1002BE044(id a1, PKPaymentBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentBalance setExponent:](v4, "setExponent:", [a3 integerValue]);
}

void sub_1002BE088(id a1, PKPaymentBalance *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentBalance setValue:](v4, "setValue:", v6);
}

void sub_1002BEA60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = -[CreditInstallmentPlanLineItem initWithInstallmentPlanLineItem:forInstallmentPlanPID:inDatabase:]( objc_alloc(&OBJC_CLASS___CreditInstallmentPlanLineItem),  "initWithInstallmentPlanLineItem:forInstallmentPlanPID:inDatabase:",  v5,  *(void *)(a1 + 32),  *(void *)(a1 + 40));

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  -[SQLiteEntity setValue:forProperty:](v8, "setValue:forProperty:", v6, @"order_index");

  id v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 48) addObject:v8];
    id v7 = v8;
  }
}

void sub_1002BEC18(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = -[CreditInstallmentPlanLineItem initWithInstallmentPlanLineItem:forInstallmentPlanPaymentPID:inDatabase:]( objc_alloc(&OBJC_CLASS___CreditInstallmentPlanLineItem),  "initWithInstallmentPlanLineItem:forInstallmentPlanPaymentPID:inDatabase:",  v5,  *(void *)(a1 + 32),  *(void *)(a1 + 40));

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3));
  -[SQLiteEntity setValue:forProperty:](v8, "setValue:forProperty:", v6, @"order_index");

  id v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 48) addObject:v8];
    id v7 = v8;
  }
}

void sub_1002BEEE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKCreditInstallmentPlanLineItem);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1002BF1BC(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanLineItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002BF200(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanLineItem setAmount:](v4, "setAmount:", v6);
}

void sub_1002BF250(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanLineItem setDuration:](v4, "setDuration:", [a3 unsignedIntegerValue]);
}

void sub_1002BF294(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
}

void sub_1002BF29C(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanLineItem setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1002BF2E0(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
}

void sub_1002BF2E8(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanLineItem setPaymentsToDateAmount:](v4, "setPaymentsToDateAmount:", v6);
}

void sub_1002C0064(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKCloudStoreRecordFetchTask);
  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];

  uint64_t v9 = *(void *)(a1 + 72);
  if (v9 != 0x7FFFFFFFFFFFFFFFLL
    && *(void *)(a1 + 80) != 0x7FFFFFFFFFFFFFFFLL
    && *(void *)(a1 + 88) != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v10 = *(id *)(a4 + 8 * v9);
    id v11 = [*(id *)(a4 + 8 * *(void *)(a1 + 80)) integerValue];
    id v12 = *(id *)(a4 + 8LL * *(void *)(a1 + 88));
    if ([v10 length])
    {
      if (v12)
      {
        NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
        id v28 = v12;
        int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
      }

      else
      {
        int v13 = 0LL;
      }

      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v10,  v11,  v13));
      if (v12) {
    }
      }

    else
    {
      id v14 = 0LL;
    }

    -[PKCloudStoreRecordFetchTask setLastError:](v8, "setLastError:", v14);
  }

  uint64_t v15 = *(void *)(a1 + 96);
  if (v15 != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v16 = [*(id *)(a4 + 8 * v15) longLongValue];
    if (v16)
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreZone cloudStoreZoneWithPID:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "cloudStoreZoneWithPID:inDatabase:",  v16,  *(void *)(a1 + 40)));
      -[PKCloudStoreRecordFetchTask setCloudStoreZone:](v8, "setCloudStoreZone:", v17);
    }
  }

  uint64_t v18 = objc_claimAutoreleasedReturnValue(-[PKCloudStoreRecordFetchTask identifier](v8, "identifier"));
  if (v18 && (uint64_t v19 = (void *)v18, v20 = -[PKCloudStoreRecordFetchTask type](v8, "type"), v19, v20))
  {
    [*(id *)(a1 + 56) safelyAddObject:v8];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = 138412290;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Deleting PKCloudStoreRecordFetchTask %@ since its in an invalid state",  (uint8_t *)&v25,  0xCu);
    }

    id v23 = *(void **)(a1 + 48);
    char v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
    objc_msgSend(v23, "pk_safelyAddObject:", v24);
  }
}

void sub_1002C063C(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreRecordFetchTask setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002C0680(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreRecordFetchTask setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002C06C4(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCloudStoreRecordFetchTask setStartDate:](v4, "setStartDate:", v5);
}

void sub_1002C0710(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCloudStoreRecordFetchTask setEndDate:](v4, "setEndDate:", v5);
}

void sub_1002C075C(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreRecordFetchTask setBackoffLevel:](v4, "setBackoffLevel:", [a3 integerValue]);
}

void sub_1002C07A0(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCloudStoreRecordFetchTask setNextPossibleFetchDate:](v4, "setNextPossibleFetchDate:", v5);
}

void sub_1002C07EC(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
}

id sub_1002C0F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PeerPaymentPreferences,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002C1130(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferences setRequiresConfirmation:](v4, "setRequiresConfirmation:", [a3 BOOLValue]);
}

void sub_1002C1174(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferences setCanReceiveFormalPaymentRequests:]( v4,  "setCanReceiveFormalPaymentRequests:",  [a3 BOOLValue]);
}

void sub_1002C11B8(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferences setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_1002C11FC(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentPreferences setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_1002C13D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1002C1404(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateWithReason:@"handle remotely invalidated"];
}

void sub_1002C1438(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (void *)WeakRetained[1];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1002C14B8;
    v4[3] = &unk_100653050;
    id v5 = WeakRetained;
    [v3 handleOutstandingMessage:v4];
  }
}

id sub_1002C14B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleOutstandingMessage:a2 messageHandled:a3];
}

void sub_1002C1718( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1002C1748(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    id v6 = [[PKProvisioningContinuityDiscoveryResponseMessage alloc] initWithProximityVerification:v5];
    id v7 = *(void **)(*(void *)(a1 + 32) + 8LL);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1002C1834;
    v8[3] = &unk_100647CC8;
    objc_copyWeak(&v9, (id *)(a1 + 40));
    [v7 sendMessage:v6 completion:v8];
    objc_destroyWeak(&v9);
  }

  else
  {
    [*(id *)(a1 + 32) _invalidateWithReason:@"unable to verify proximity"];
  }
}

void sub_1002C1820(_Unwind_Exception *a1)
{
}

void sub_1002C1834(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _invalidateWithReason:@"Failed to send message"];
  }

uint64_t sub_1002C1A54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2 != 0,  a2);
}

void sub_1002C1AE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(42LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDProvisioningContinuityHostManager: sending continuity prompt notification",  buf,  2u);
  }

  uint64_t v6 = PKLocalizedCredentialString(@"CONTINUITY_PROVISIONING_PROMPT_NOTIFICATION_TITLE");
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localizedDescription]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceName]);
  uint64_t v10 = PKLocalizedCredentialString( @"CONTINUITY_PROVISIONING_PROMPT_NOTIFICATION_DESCRIPTION",  @"%@%@",  v8,  v9);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  id v12 = objc_alloc(&OBJC_CLASS___PDUserNotificationProvisioningContinuityPrompt);
  int v13 = objc_alloc_init(&OBJC_CLASS___NSUUID);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v13, "UUIDString"));
  uint64_t v15 = -[PDUserNotificationProvisioningContinuityPrompt initWithTitle:message:continuitySessionIdentifier:]( v12,  "initWithTitle:message:continuitySessionIdentifier:",  v7,  v11,  v14);
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = *(void **)(v16 + 56);
  *(void *)(v16 + 56) = v15;

  [*(id *)(*(void *)(a1 + 40) + 32) insertUserNotification:*(void *)(*(void *)(a1 + 40) + 56)];
}

void sub_1002C1D54(_Unwind_Exception *a1)
{
}

void sub_1002C1D70(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(42LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDProvisioningContinuityHostManager: Presenting remote interface",  buf,  2u);
    }

    v13[0] = PKPassbookUIServiceProvisioningContinuityHandleTransferToken;
    v13[1] = PKPassbookUIServiceProvisioningContinuityPassUniqueID;
    uint64_t v6 = *(void *)(a1 + 32);
    v14[0] = v3;
    v14[1] = v6;
    v13[2] = PKPassbookUIServiceProvisioningContinuityType;
    v14[2] = PKPassbookUIServiceProvisioningContinuityTypeCarKey;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  3LL));
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 24LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1002C1F2C;
    v10[3] = &unk_1006530F0;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    sub_1001ADAC0(v8, (uint64_t)v7, (uint64_t)v10);
    objc_destroyWeak(&v11);
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _invalidateWithReason:@"unable to detach handle"];
  }
}

void sub_1002C1F10(_Unwind_Exception *a1)
{
}

void sub_1002C1F2C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _invalidateWithReason:@"unable to present remote alert"];
  }

uint64_t sub_1002C2498(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v7 = v6;
      if (v5 && v6)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v5]);
        id v9 = v8;
        if (v8)
        {
          [v8 addObject:v7];
        }

        else
        {
          uint64_t v10 = *(void **)(a1 + 32);
          id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithObject:](&OBJC_CLASS___NSMutableSet, "setWithObject:", v7));
          [v10 setObject:v11 forKey:v5];
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_1002C26DC(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AppletSubcredential),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AppletSubcredential appletSubcredential](v5, "appletSubcredential"));
  [v3 addObject:v4];
}

void sub_1002C2900(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AppletSubcredential),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 40) addObject:v3];
    id v3 = v4;
  }
}

uint64_t sub_1002C2C68(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 64),  "appletSubcredentialsInDatabase:forPaymentApplicationPID:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 40), "persistentID")));
  id v3 = [v2 mutableCopy];

  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v4 = *(id *)(a1 + 48);
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v25;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(a1 + 56);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) insertOrUpdateAppletSubcredential:*(void *)(*((void *)&v24 + 1) + 8 * (void)v8) withPaymentApplication:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 32)]);
        [v9 addObject:v10];

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }

    while (v6);
  }

  [v3 minusSet:*(void *)(a1 + 48)];
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v11 = v3;
  id v12 = [v11 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v21;
    do
    {
      uint64_t v15 = 0LL;
      do
      {
        if (*(void *)v21 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(a1 + 64);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v15), "identifier", (void)v20));
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 appletSubcredentialWithIdentifier:v17 inDatabase:*(void *)(a1 + 32)]);

        [v18 deleteFromDatabase];
        uint64_t v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }

    while (v13);
  }

  return 1LL;
}

void sub_1002C2FFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002C3014(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002C3024(uint64_t a1)
{
}

BOOL sub_1002C302C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initWithPropertyValues:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) aliroGroupResolvingKeys]);
    if ([v6 count]) {
      id v7 =  +[AppletSubcredentialAliroGroupResolvingKey insertAliroGroupResolvingKeys:withAppletSubcredential:inDatabase:]( &OBJC_CLASS___AppletSubcredentialAliroGroupResolvingKey,  "insertAliroGroupResolvingKeys:withAppletSubcredential:inDatabase:",  v6,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void *)(a1 + 48));
    }
    id v8 =  +[AppletSubcredentialRangingSuspensionReasons insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:forPaymentApplication:withReasons:inDatabase:]( &OBJC_CLASS___AppletSubcredentialRangingSuspensionReasons,  "insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:forPaymentApplication:withReasons:inDatabase:",  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void *)(a1 + 64),  0LL,  *(void *)(a1 + 48));
  }

  return v5 != 0;
}

uint64_t sub_1002C3798(uint64_t a1)
{
  if ([*(id *)(a1 + 48) count]) {
    id v2 =  +[AppletSubcredentialAliroGroupResolvingKey insertAliroGroupResolvingKeys:withAppletSubcredential:inDatabase:]( &OBJC_CLASS___AppletSubcredentialAliroGroupResolvingKey,  "insertAliroGroupResolvingKeys:withAppletSubcredential:inDatabase:",  *(void *)(a1 + 48),  *(void *)(a1 + 40),  *(void *)(a1 + 32));
  }
  return 1LL;
}

id sub_1002C39B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AppletSubcredential,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

BOOL sub_1002C39D4(id a1, PKPassEntitlement *a2)
{
  return -[PKPassEntitlement active](a2, "active");
}

void sub_1002C3DC4(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C3DCC(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1002C3E10(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAppletSubcredential sharingConfiguration](a2, "sharingConfiguration"));
  id v5 = [v4 unsignedIntegerValue];

  [v6 setMaxNumberOfSharedCredentials:v5];
}

void sub_1002C3E6C(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C3E74(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C3E7C(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C3E84(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C3E8C(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAppletSubcredential sharingConfiguration](a2, "sharingConfiguration"));
  id v5 = [v4 BOOLValue];

  [v6 setSharingRequiresPassword:v5];
}

void sub_1002C3EE8(id a1, PKAppletSubcredential *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = objc_alloc(&OBJC_CLASS___NSUUID);
    id v7 = v4;
    id v8 = [v7 bytes];

    id v9 = -[NSUUID initWithUUIDBytes:](v6, "initWithUUIDBytes:", v8);
    -[PKAppletSubcredential setSharingSessionIdentifier:](v5, "setSharingSessionIdentifier:", v9);
  }

void sub_1002C3F7C(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C3F84(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAppletSubcredential sharingConfiguration](a2, "sharingConfiguration"));
  id v5 = [v4 unsignedIntegerValue];

  [v6 setNumberOfShareableCredentials:v5];
}

void sub_1002C3FE0(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setSupportedRadioTechnologies:]( v4,  "setSupportedRadioTechnologies:",  [a3 unsignedIntegerValue]);
}

void sub_1002C4024(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1002C402C(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setIsOnlineImmobilizerToken:]( v4,  "setIsOnlineImmobilizerToken:",  [a3 BOOLValue]);
}

void sub_1002C4070(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v8 = (id)objc_claimAutoreleasedReturnValue(-[PKAppletSubcredential sharingConfiguration](a2, "sharingConfiguration"));
  id v5 = objc_alloc(&OBJC_CLASS___PKPassShareActivationOptions);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 componentsSeparatedByString:@","]);

  id v7 = [v5 initWithCarKeyIdentifiers:v6];
  [v8 setActivationOptions:v7];
}

void sub_1002C4108(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setAllSupportedRadioTechnologies:]( v4,  "setAllSupportedRadioTechnologies:",  [a3 unsignedIntegerValue]);
}

void sub_1002C414C(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setCarKeyVehicleVersion:]( v4,  "setCarKeyVehicleVersion:",  PKAppletSubcredentialCarKeyVehicleVersionFromString(a3));
}

void sub_1002C4190(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setCarKeyServerVersion:]( v4,  "setCarKeyServerVersion:",  PKAppletSubcredentialCarKeyServerVersionFromString(a3));
}

void sub_1002C41D4(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setKeyClass:](v4, "setKeyClass:", PKAppletSubcredentialKeyClassFromString(a3));
}

void sub_1002C4218(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setCredentialAuthorityType:]( v4,  "setCredentialAuthorityType:",  PKAppletSubcredentialCredentialAuthorityTypeFromString(a3));
}

void sub_1002C508C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v15 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentPendingRequest);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  uint64_t v7 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a4
                                                          + 8LL
                                                          * (void)[v6 indexOfObject:@"amount"]));
  id v8 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = [v6 indexOfObject:@"currency"];

  uint64_t v10 = (NSString *)*(id *)(a4 + 8LL * (void)v9);
  if (v8)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v12 = -[NSDecimalNumber isEqualToNumber:](v8, "isEqualToNumber:", v11);

    if ((v12 & 1) == 0)
    {
      if (v10)
      {
        uint64_t v13 = PKCurrencyAmountCreate(v8, v10, 0LL);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        -[PKPeerPaymentPendingRequest setCurrencyAmount:](v15, "setCurrencyAmount:", v14);
      }
    }
  }

  [*(id *)(a1 + 40) addObject:v15];
}

void sub_1002C53FC(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_1002C5404(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_1002C540C(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_1002C5414(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_1002C541C(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_1002C5424(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentPendingRequest setExpiryDate:](v4, "setExpiryDate:", v5);
}

void sub_1002C5470(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentPendingRequest setRequestDate:](v4, "setRequestDate:", v5);
}

void sub_1002C54BC(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentPendingRequest setLastDismissedDate:](v4, "setLastDismissedDate:", v5);
}

void sub_1002C5508(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@"-"]);
  -[PKPeerPaymentPendingRequest setActions:](v4, "setActions:", v5);
}

void sub_1002C5560(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_1002C5798( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1002C57B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002C57C0(uint64_t a1)
{
}

BOOL sub_1002C57C8(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithImage:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL;
}

id sub_1002C5900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___TileImage,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002C59D8(id a1, PKPassTileImage *a2, id a3)
{
}

void sub_1002C59E0(id a1, PKPassTileImage *a2, id a3)
{
}

void sub_1002C59E8(id a1, PKPassTileImage *a2, id a3)
{
  id v4 = a2;
  PKSemanticColorFromString(a3, &v5);
  -[PKPassTileImage setTintColor:](v4, "setTintColor:", v5);
}

void sub_1002C5A30(id a1, PKPassTileImage *a2, id a3)
{
  id v4 = a2;
  -[PKPassTileImage setHasColorContent:](v4, "setHasColorContent:", [a3 BOOLValue]);
}

void sub_1002C5BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v5, "event"));
  [v3 addObject:v4];
}

void sub_1002C5E10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v5, "event"));
  [v3 addObject:v4];
}

void sub_1002C616C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v5, "event"));
  [v3 addObject:v4];
}

void sub_1002C63E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1002C6408(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002C6418(uint64_t a1)
{
}

void sub_1002C6420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

void sub_1002C668C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1002C66AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

void sub_1002C69A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002C69C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

void sub_1002C6D78(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v5, "event"));
  [v3 addObject:v4];
}

void sub_1002C6F60(uint64_t a1, uint64_t a2)
{
  id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v6, "event"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  objc_msgSend(v3, "pk_safelyAddObject:", v5);
}

void sub_1002C71DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v5, "event"));
  [v3 addObject:v4];
}

void sub_1002C746C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountEvent event](v5, "event"));
  [v3 addObject:v4];
}

uint64_t sub_1002C84E4(uint64_t a1)
{
  return 1LL;
}

id sub_1002C88F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountEvent,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002C93D0(id a1, PKAccountEvent *a2, id a3)
{
}

void sub_1002C93D8(id a1, PKAccountEvent *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEvent setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002C941C(id a1, PKAccountEvent *a2, id a3)
{
}

void sub_1002C9424(id a1, PKAccountEvent *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountEvent setDate:](v4, "setDate:", v5);
}

void sub_1002C9470(id a1, PKAccountEvent *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountEvent setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_1002C94BC(id a1, PKAccountEvent *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEvent setBlockNotification:](v4, "setBlockNotification:", [a3 BOOLValue]);
}

void sub_1002C9500(id a1, PKAccountEvent *a2, id a3)
{
}

void sub_1002CB0C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002CB0D8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return result;
}

uint64_t sub_1002CB240(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 48);
      id v5 = *(void **)(a1 + 56);
      uint64_t v7 = *(void **)(a1 + 40);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 _predicateForPID:v8]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___WorldRegion,  "queryWithDatabase:predicate:",  v6,  v9));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 regionsFromQuery:v10]);
      [v7 addObjectsFromArray:v11];

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_1002CB7BC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_alloc_init(&OBJC_CLASS___PKWorldRegion);
  objc_msgSend(v6, "setType:", objc_msgSend(*(id *)a4, "integerValue"));
  [*(id *)(a4 + 8) doubleValue];
  CLLocationDegrees v8 = v7;
  [*(id *)(a4 + 16) doubleValue];
  CLLocationCoordinate2D v30 = CLLocationCoordinate2DMake(v8, v9);
  double latitude = v30.latitude;
  double longitude = v30.longitude;
  if (!CLLocationCoordinate2DIsValid(v30))
  {
    double latitude = kCLLocationCoordinate2DInvalid.latitude;
    double longitude = kCLLocationCoordinate2DInvalid.longitude;
  }

  [*(id *)(a4 + 24) doubleValue];
  double v13 = v12;
  [*(id *)(a4 + 32) doubleValue];
  objc_msgSend(v6, "setDisplayRegion:", latitude, longitude, v13, v14);
  [v6 setAbbreviationCode:*(void *)(a4 + 40)];
  [v6 setLocalizedName:*(void *)(a4 + 48)];
  [v6 setLocaleIdentifier:*(void *)(a4 + 56)];
  [v6 setIdentifier:*(void *)(a4 + 64)];
  id v15 = *(id *)(a4 + 72);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  char v17 = PKEqualObjects(v15, v16);

  if ((v17 & 1) == 0)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[6] _predicateForPID:v15]);
    v29[0] = v18;
    id v19 = a1[6];
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v6 localeIdentifier]);
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 _predicateForLocaleIdentifier:v20]);
    v29[1] = v21;
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v29, 2LL));
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v22));

    id v24 = a1[6];
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] database]);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v24 queryWithDatabase:v25 predicate:v23]);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v24 regionsFromQuery:v26]);

    if ([v27 count]) {
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 firstObject]);
    }
    else {
      id v28 = 0LL;
    }
    [v6 setParentRegion:v28];
  }

  [a1[5] addObject:v6];
}

uint64_t sub_1002CBC6C(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

sqlite3 **sub_1002CC258(sqlite3 **result, void *a2)
{
  if (result) {
    return sub_1002CC268(result, a2, 0LL);
  }
  return result;
}

sqlite3 **sub_1002CC268(sqlite3 **a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (a3) {
      *a3 = 0;
    }
    if (([v5 isFileURL] & 1) == 0)
    {

      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Invalid database URL");
      a1 = 0LL;
    }

    v22.receiver = a1;
    v22.super_class = (Class)&OBJC_CLASS___SQLiteDatabase;
    double v7 = (sqlite3 **)objc_msgSendSuper2(&v22, "init");
    a1 = v7;
    if (v7)
    {
      v7[1] = 0LL;
      id v8 = objc_claimAutoreleasedReturnValue([v6 path]);
      CLLocationDegrees v9 = a1 + 2;
      int v10 = sqlite3_open_v2((const char *)[v8 fileSystemRepresentation], a1 + 2, 3145734, 0);
      if (!v10) {
        goto LABEL_13;
      }
      int v11 = v10;
      uint64_t Object = PKLogFacilityTypeGetObject(24LL);
      double v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109378;
        int v24 = v11;
        __int16 v25 = 2112;
        id v26 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "SQLiteDatabase: Could not open database, resetting: [%d, %@]",  buf,  0x12u);
      }

      int v14 = sub_1002CC548((uint64_t)a1, v8);
      int v15 = v14;
      if (a3) {
        *a3 = 1;
      }
      if (!v14)
      {
LABEL_13:
        int v16 = sqlite3_exec(*v9, "PRAGMA cache_size=512;", 0LL, 0LL, 0LL);
        if (v16 != 26 && v16 != 11) {
          goto LABEL_28;
        }
        int v18 = v16;
        uint64_t v19 = PKLogFacilityTypeGetObject(24LL);
        double v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109378;
          int v24 = v18;
          __int16 v25 = 2112;
          id v26 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "SQLiteDatabase: Resetting after error: [%d, %@]",  buf,  0x12u);
        }

        int v20 = sub_1002CC548((uint64_t)a1, v8);
        int v15 = v20;
        if (a3) {
          *a3 = 1;
        }
        if (!v20)
        {
          sqlite3_exec(*v9, "PRAGMA cache_size=512;", 0LL, 0LL, 0LL);
LABEL_28:
          sqlite3_busy_timeout(*v9, 3600000);
LABEL_29:

          goto LABEL_30;
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109378;
        int v24 = v15;
        __int16 v25 = 2112;
        id v26 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "SQLiteDatabase: Could not setup database: [%d, %@]",  buf,  0x12u);
      }

      a1 = 0LL;
      if (a3) {
        *a3 = 0;
      }
      goto LABEL_29;
    }
  }

uint64_t sub_1002CC548(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    uint64_t v13 = 0LL;
    goto LABEL_14;
  }

  id v4 = (sqlite3 **)(a1 + 16);
  id v5 = *(sqlite3 **)(a1 + 16);
  if (!v5) {
    goto LABEL_12;
  }
  id v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 32) = 0LL;
    id v5 = *(sqlite3 **)(a1 + 16);
    if (!v5)
    {
      int v11 = 0LL;
LABEL_11:
      sqlite3_close_v2(v11);
      PKAccountEvent *v4 = 0LL;
LABEL_12:
      double v12 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
      -[NSFileManager removeItemAtPath:error:](v12, "removeItemAtPath:error:", v3, 0LL);

      goto LABEL_13;
    }
  }

  int v15 = 0;
  int v7 = sqlite3_file_control(v5, 0LL, 101, &v15);
  if (v7)
  {
    int v8 = v7;
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134218240;
      char v17 = v5;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to delete db handle %p!  SQLite error %i.\n",  buf,  0x12u);
    }

    int v11 = *v4;
    goto LABEL_11;
  }

  sqlite3_close_v2(*v4);
  PKAccountEvent *v4 = 0LL;
LABEL_13:
  uint64_t v13 = sqlite3_open_v2( (const char *)[v3 fileSystemRepresentation], v4, 3145734, 0);
LABEL_14:

  return v13;
}

sqlite3 *sub_1002CC714(sqlite3 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = (const void *)*((void *)result + 4);
    if (v2)
    {
      CFRelease(v2);
      *((void *)v1 + 4) = 0LL;
    }

    uint64_t result = (sqlite3 *)*((void *)v1 + 2);
    if (result)
    {
      uint64_t result = (sqlite3 *)sqlite3_close_v2(result);
      *((void *)v1 + 2) = 0LL;
    }
  }

  return result;
}

uint64_t sub_1002CC754(uint64_t a1, sqlite3_stmt *a2)
{
  unsigned __int8 v4 = 0;
  sub_1002CC79C((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2, 0LL, &v4);
  return v4;
}

void sub_1002CC79C(uint64_t a1, sqlite3_stmt *a2, _BYTE *a3, _BYTE *a4)
{
  if (a2)
  {
    while (1)
    {
      int v7 = sqlite3_step(a2);
      if (v7 == 9) {
        break;
      }
      if (v7 == 101)
      {
        if (a4) {
          *a4 = 1;
        }
        return;
      }

      if (v7 == 100)
      {
        if (a3) {
          *a3 = 1;
        }
        return;
      }

      int v8 = v7;
      if (v7 - 7 <= 0xFFFFFFFD)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(0LL);
        int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = sqlite3_sql(a2);
          double v12 = sqlite3_db_handle(a2);
          int v13 = 136315650;
          int v14 = v11;
          __int16 v15 = 1024;
          int v16 = v8;
          __int16 v17 = 2080;
          __int16 v18 = sqlite3_errmsg(v12);
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "SQLiteDatabase: Step failed: %s: [%d, %s]",  (uint8_t *)&v13,  0x1Cu);
        }

        return;
      }
    }
  }

uint64_t sub_1002CC8D8(uint64_t a1, sqlite3_stmt *a2)
{
  unsigned __int8 v4 = 0;
  sub_1002CC79C((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2, &v4, 0LL);
  return v4;
}

void sub_1002CC920(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v5[1] = 3221225472LL;
    v5[2] = sub_1002CC998;
    v5[3] = &unk_1006396B0;
    id v4 = v3;
    v5[0] = _NSConcreteStackBlock;
    v5[4] = a1;
    id v6 = v3;
    sub_1002CC9D0(a1, v5);

    id v3 = v4;
  }
}

void sub_1002CC998(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_1002CC9D0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    uint64_t v3 = a1 + 8;
    os_unfair_recursive_lock_lock_with_options(v3, 0LL);
    v4[2]();
    os_unfair_recursive_lock_unlock(v3);
  }
}

void sub_1002CCA28(void *a1)
{
}

void sub_1002CCA3C(_Unwind_Exception *a1)
{
}

BOOL sub_1002CCA50(BOOL a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v9 = 0LL;
    int v10 = &v9;
    uint64_t v11 = 0x2020000000LL;
    char v12 = 0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002CCB28;
    v6[3] = &unk_100643E78;
    void v6[4] = a1;
    id v7 = v3;
    int v8 = &v9;
    sub_1002CC9D0(a1, v6);
    a1 = *((_BYTE *)v10 + 24) != 0;

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_1002CCB10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002CCB28(uint64_t a1)
{
  errmsg = 0LL;
  int v2 = sqlite3_exec( *(sqlite3 **)(*(void *)(a1 + 32) + 16), (const char *)[*(id *)(a1 + 40) UTF8String], 0, 0, &errmsg);
  if (v2)
  {
    int v3 = v2;
    id v4 = errmsg;
    if (!errmsg) {
      id v4 = (void *)sqlite3_errmsg(*(sqlite3 **)(*(void *)(a1 + 32) + 16LL));
    }
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      int v12 = v3;
      __int16 v13 = 2080;
      int v14 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "SQLiteDatabase: Could not execute SQL: %@: [%d, %s]",  buf,  0x1Cu);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

  if (errmsg) {
    sqlite3_free(errmsg);
  }
}

void sub_1002CCC5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v5[1] = 3221225472LL;
    v5[2] = sub_1002CCCD8;
    v5[3] = &unk_10063AC90;
    v5[4] = a1;
    id v4 = v3;
    v5[0] = _NSConcreteStackBlock;
    id v6 = v3;
    sub_1002CC9D0(a1, v5);

    id v3 = v4;
  }
}

void sub_1002CCCD8(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(v3 + 24);
  if (*(_BYTE *)(v3 + 24)
    || (*(_BYTE *)(*(void *)(a1 + 32) + 24LL) = sub_1002CCA50(v3, @"BEGIN IMMEDIATE TRANSACTION;")) != 0)
  {
    int v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    if (!v4)
    {
      if (v5) {
        sub_1002CCA50(*(void *)(a1 + 32), @"COMMIT;");
      }
      else {
        sub_1002CCA50(*(void *)(a1 + 32), @"ROLLBACK;");
      }
      *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1002CCDBC(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_1002CCDD0(a1, a2, 0, a3);
  }
}

void sub_1002CCDD0(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a4;
  if (a1)
  {
    v10[1] = 3221225472LL;
    v10[2] = sub_1002CCE6C;
    v10[3] = &unk_10063B100;
    void v10[4] = a1;
    void v10[5] = a2;
    char v12 = a3;
    id v9 = v7;
    v10[0] = _NSConcreteStackBlock;
    id v11 = v7;
    id v8 = a2;
    sub_1002CC9D0(a1, v10);

    id v7 = v9;
  }
}

void sub_1002CCE6C(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  uint64_t v3 = sub_1002CCF18(*(sqlite3_stmt **)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  sqlite3_clear_bindings(v3);
  sqlite3_reset(v3);
  if (!*(_BYTE *)(a1 + 56)) {
    sqlite3_finalize(v3);
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1002CCEEC(_Unwind_Exception *a1)
{
}

sqlite3_stmt *sub_1002CCF18(sqlite3_stmt *a1, void *a2, int a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v5 = [a2 copy];
    ppStmt = 0LL;
    if (!a3
      || (id v6 = (const __CFDictionary *)*((void *)v3 + 4)) == 0LL
      || (ppStmt = (sqlite3_stmt *)CFDictionaryGetValue(v6, v5)) == 0LL)
    {
      id v7 = (const char *)[v5 UTF8String];
      size_t v8 = strlen(v7);
      int v9 = v8 + 1;
      uint64_t v10 = v8 == -1LL;
      uint64_t v11 = v10 << 63 >> 63;
      int v12 = 5;
      if (v11 != v10 || v11 < 0 || v8 - 0x7FFFFFFF < 0xFFFFFFFF80000001LL) {
        goto LABEL_10;
      }
      do
        int v13 = sqlite3_prepare_v2(*((sqlite3 **)v3 + 2), v7, v9, &ppStmt, 0LL);
      while ((v13 - 5) < 2);
      int v12 = v13;
      if (v13)
      {
LABEL_10:
        uint64_t Object = PKLogFacilityTypeGetObject(0LL);
        __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = sqlite3_errmsg(*((sqlite3 **)v3 + 2));
          *(_DWORD *)__int128 buf = 138412802;
          id v21 = v5;
          __int16 v22 = 1024;
          int v23 = v12;
          __int16 v24 = 2080;
          __int16 v25 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "SQLiteDatabase: Could not prepare statement: %@: [%d, %s]",  buf,  0x1Cu);
        }
      }

      else if (a3)
      {
        Mutable = (__CFDictionary *)*((void *)v3 + 4);
        if (!Mutable)
        {
          Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  (const CFDictionaryValueCallBacks *)&unk_100706190);
          *((void *)v3 + 4) = Mutable;
        }

        CFDictionarySetValue(Mutable, v5, ppStmt);
      }
    }

    uint64_t v3 = ppStmt;
  }

  return v3;
}

BOOL sub_1002CD0D0(BOOL result, uint64_t a2)
{
  if (result)
  {
    BOOL v2 = result;
    uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"PRAGMA user_version=%ld",  a2);
    BOOL v4 = sub_1002CCA50(v2, v3);

    return v4;
  }

  return result;
}

uint64_t sub_1002CD134(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002CD1EC;
  v3[3] = &unk_1006456F8;
  void v3[4] = &v4;
  sub_1002CCDD0(a1, @"PRAGMA user_version;", 0, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1002CD1D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002CD1EC(uint64_t a1, sqlite3_stmt *a2)
{
  char v5 = 0;
  sub_1002CC79C((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2, &v5, 0LL);
  if (v5)
  {
    uint64_t v4 = SQLiteCopyFoundationNumberValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -[NSNumber intValue](v4, "intValue");
  }

NSNumber *SQLiteCopyFoundationNumberValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  int v4 = sqlite3_column_type(a1, a2);
  if (v4 == 2) {
    return -[NSNumber initWithDouble:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithDouble:",  sqlite3_column_double(a1, a2));
  }
  if (v4 == 1) {
    return -[NSNumber initWithLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithLongLong:",  sqlite3_column_int64(a1, a2));
  }
  return 0LL;
}

BOOL sub_1002CD314(BOOL result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    BOOL v3 = result;
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteTable SQLToAddColumnWithSQL:toTableNamed:]( &OBJC_CLASS___SQLiteTable,  "SQLToAddColumnWithSQL:toTableNamed:",  a3,  a2));
    BOOL v5 = sub_1002CCA50(v3, v4);

    return v5;
  }

  return result;
}

BOOL sub_1002CD364(BOOL a1, void *a2, void *a3)
{
  BOOL v3 = a1;
  if (a1)
  {
    int v9 = a3;
    id v5 = a3;
    id v6 = a2;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));

    BOOL v3 = sub_1002CD420(v3, v6, v7, 0LL);
  }

  return v3;
}

BOOL sub_1002CD420(BOOL a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v28 = a3;
  id v8 = a4;
  __int128 v27 = v7;
  if (a1)
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteMetaEntity anyInDatabase:withType:name:]( &OBJC_CLASS___SQLiteMetaEntity,  "anyInDatabase:withType:name:",  a1,  @"table",  v7));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v9 SQL]);

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteTable tableWithSQL:](&OBJC_CLASS___SQLiteTable, "tableWithSQL:", v29));
    if (v10)
    {
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      id v11 = v28;
      id v12 = [v11 countByEnumeratingWithState:&v47 objects:v54 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v48;
        while (2)
        {
          for (i = 0LL; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v48 != v13) {
              objc_enumerationMutation(v11);
            }
            if (![v10 removeColumn:*(void *)(*((void *)&v47 + 1) + 8 * (void)i)])
            {
              a1 = 0LL;
              goto LABEL_24;
            }
          }

          id v12 = [v11 countByEnumeratingWithState:&v47 objects:v54 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      id v11 = (id)objc_claimAutoreleasedReturnValue([v10 columnNames]);
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      __int16 v15 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v8 allKeys]);
      id v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v43,  v53,  16LL);
      if (v16)
      {
        uint64_t v17 = *(void *)v44;
        while (2)
        {
          for (j = 0LL; j != v16; j = (char *)j + 1)
          {
            if (*(void *)v44 != v17) {
              objc_enumerationMutation(v15);
            }
            uint64_t v19 = *(void *)(*((void *)&v43 + 1) + 8LL * (void)j);
            int v20 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v19]);
            LODWORD(v19) = [v10 renameColumn:v19 to:v20];

            if (!(_DWORD)v19)
            {
              a1 = 0LL;
              goto LABEL_23;
            }
          }

          id v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v43,  v53,  16LL);
          if (v16) {
            continue;
          }
          break;
        }
      }

      [v10 setTableName:@"_temporary_for_table_alteration_"];
      id v21 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      v52[0] = @"trigger";
      v52[1] = @"index";
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v52, 2LL));
      int v23 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteMetaEntity queryWithDatabase:types:tableName:]( &OBJC_CLASS___SQLiteMetaEntity,  "queryWithDatabase:types:tableName:",  a1,  v22,  v27));

      __int128 v51 = @"sql";
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v51, 1LL));
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472LL;
      v41[2] = sub_1002CD970;
      v41[3] = &unk_10063C0D0;
      __int16 v25 = v21;
      __int128 v42 = v25;
      [v23 enumeratePersistentIDsAndProperties:v24 usingBlock:v41];

      uint64_t v37 = 0LL;
      __int128 v38 = &v37;
      uint64_t v39 = 0x2020000000LL;
      char v40 = 1;
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_1002CD984;
      v30[3] = &unk_1006537B8;
      void v30[4] = a1;
      id v31 = v10;
      id v36 = &v37;
      id v32 = v11;
      id v33 = v27;
      uint64_t v34 = @"_temporary_for_table_alteration_";
      __int16 v15 = v25;
      id v35 = v15;
      sub_1002CCC5C(a1, v30);
      a1 = *((_BYTE *)v38 + 24) != 0;

      _Block_object_dispose(&v37, 8);
LABEL_23:

LABEL_24:
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_1002CD878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

BOOL sub_1002CD898(BOOL a1, void *a2, void *a3, void *a4)
{
  BOOL v4 = a1;
  if (a1)
  {
    id v12 = a3;
    uint64_t v13 = a4;
    id v7 = a4;
    id v8 = a3;
    id v9 = a2;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));

    BOOL v4 = sub_1002CD420(v4, v9, 0LL, v10);
  }

  return v4;
}

id *sub_1002CD970(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

uint64_t sub_1002CD984(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) creationSQL]);
  LOBYTE(v2) = sub_1002CCA50(v2, v3);

  if ((v2 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteTable SQLToInsertColumnNames:fromTableNamed:intoTableNamed:]( &OBJC_CLASS___SQLiteTable,  "SQLToInsertColumnNames:fromTableNamed:intoTableNamed:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
  LOBYTE(v4) = sub_1002CCA50(v4, v5);

  if ((v4 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteTable SQLToDropTableNamed:]( &OBJC_CLASS___SQLiteTable,  "SQLToDropTableNamed:",  *(void *)(a1 + 56)));
  LOBYTE(v6) = sub_1002CCA50(v6, v7);

  if ((v6 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteTable SQLToRenameTable:to:]( &OBJC_CLASS___SQLiteTable,  "SQLToRenameTable:to:",  *(void *)(a1 + 64),  *(void *)(a1 + 56)));
  LOBYTE(v_Block_object_dispose(va, 8) = sub_1002CCA50(v8, v9);

  if ((v8 & 1) != 0)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v10 = *(id *)(a1 + 72);
    id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v17;
      while (2)
      {
        int v14 = 0LL;
        do
        {
          if (*(void *)v17 != v13) {
            objc_enumerationMutation(v10);
          }
          if (!sub_1002CCA50(*(void *)(a1 + 32), *(void **)(*((void *)&v16 + 1) + 8LL * (void)v14)))
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0;

            return 0LL;
          }

          int v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    uint64_t result = 1LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
  }

  else
  {
LABEL_14:
    uint64_t result = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0;
  }

  return result;
}

BOOL sub_1002CDB74(BOOL result, uint64_t a2)
{
  if (result)
  {
    BOOL v2 = result;
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"DROP TABLE %@",  a2));
    BOOL v4 = sub_1002CCA50(v2, v3);

    return v4;
  }

  return result;
}

BOOL sub_1002CDBD4(BOOL result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    BOOL v3 = result;
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteTable SQLToRenameTable:to:](&OBJC_CLASS___SQLiteTable, "SQLToRenameTable:to:", a2, a3));
    BOOL v5 = sub_1002CCA50(v3, v4);

    return v5;
  }

  return result;
}

id sub_1002CDC28(id a1)
{
  id v1 = a1;
  if (a1)
  {
    BOOL v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    BOOL v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"SELECT name FROM sqlite_master WHERE type='table';");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002CDCF0;
    v6[3] = &unk_100653140;
    id v7 = v2;
    BOOL v4 = v2;
    sub_1002CCDD0((uint64_t)v1, v3, 0, v6);
    id v1 = -[NSMutableArray copy](v4, "copy");
  }

  return v1;
}

void sub_1002CDCF0(uint64_t a1, sqlite3_stmt *a2)
{
  while (1)
  {
    objc_opt_self(&OBJC_CLASS___SQLiteDatabase);
    char v5 = 0;
    sub_1002CC79C((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2, &v5, 0LL);
    if (!v5) {
      break;
    }
    id v4 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 0);
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }

id SQLiteCopyFoundationStringValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) != 3) {
    return 0LL;
  }
  id v4 = objc_alloc(&OBJC_CLASS___NSString);
  char v5 = sqlite3_column_text(a1, a2);
  return -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v5);
}

id sub_1002CDDE0(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    char v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"PRAGMA TABLE_INFO(%@);",
                     v3));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1002CDEBC;
    v8[3] = &unk_100653140;
    id v9 = v4;
    uint64_t v6 = v4;
    sub_1002CCDD0((uint64_t)v2, v5, 0, v8);
    id v2 = -[NSMutableArray copy](v6, "copy");
  }

  return v2;
}

void sub_1002CDEBC(uint64_t a1, sqlite3_stmt *a2)
{
  while (1)
  {
    objc_opt_self(&OBJC_CLASS___SQLiteDatabase);
    char v5 = 0;
    sub_1002CC79C((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2, &v5, 0LL);
    if (!v5) {
      break;
    }
    id v4 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 1);
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }

uint64_t sub_1002CDF40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002CDF50(uint64_t a1)
{
}

NSData *SQLiteCopyFoundationValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  switch(sqlite3_column_type(a1, a2))
  {
    case 1:
      uint64_t result = -[NSNumber initWithLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithLongLong:",  sqlite3_column_int64(a1, a2));
      break;
    case 2:
      uint64_t result = -[NSNumber initWithDouble:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithDouble:",  sqlite3_column_double(a1, a2));
      break;
    case 3:
      char v5 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v6 = sqlite3_column_text(a1, a2);
      uint64_t result = -[NSString initWithUTF8String:](v5, "initWithUTF8String:", v6);
      break;
    case 5:
      uint64_t result = 0LL;
      break;
    default:
      id v7 = sqlite3_column_blob(a1, a2);
      uint64_t result = -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v7,  sqlite3_column_bytes(a1, a2));
      break;
  }

  return result;
}

id sub_1002CE088(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3032000000LL;
    __int16 v15 = sub_1002CDF40;
    __int128 v16 = sub_1002CDF50;
    id v17 = 0LL;
    id v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"PRAGMA TABLE_INFO(%@);",
           v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002CE1B8;
    v9[3] = &unk_10063D460;
    id v10 = v5;
    id v11 = &v12;
    sub_1002CCDD0((uint64_t)a1, v7, 0, v9);
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_1002CE1A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002CE1B8(uint64_t a1, sqlite3_stmt *a2)
{
  while (1)
  {
    objc_opt_self(&OBJC_CLASS___SQLiteDatabase);
    char v8 = 0;
    sub_1002CC79C((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2, &v8, 0LL);
    if (!v8) {
      break;
    }
    id v4 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 1);
    if (v4)
    {
      if ([*(id *)(a1 + 32) isEqualToString:v4])
      {
        id v5 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 2);
        uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
        id v7 = *(void **)(v6 + 40);
        *(void *)(v6 + 40) = v5;
      }
    }
  }

void SQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, NSNumber *a3)
{
  id v9 = a3;
  if (!v9
    || (id v5 = (NSNumber *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null")),
        v5,
        v5 == v9))
  {
    sqlite3_bind_null(a1, a2);
  }

  else
  {
    uint64_t v6 = v9;
    id v7 = (const char *)-[NSNumber objCType](v6, "objCType");
    if (!strcmp(v7, "d") || !strcmp(v7, "f") || !strcmp(v7, " "))
    {
      -[NSNumber doubleValue](v6, "doubleValue");
      sqlite3_bind_double(a1, a2, v8);
    }

    else
    {
      sqlite3_bind_int64(a1, a2, -[NSNumber longLongValue](v6, "longLongValue"));
    }
  }
}

void SQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, NSData *a3)
{
  id v10 = a3;
  if (!v10
    || (id v5 = (NSData *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null")),
        v5,
        v5 == v10))
  {
    sqlite3_bind_null(a1, a2);
  }

  else
  {
    uint64_t v6 = v10;
    NSUInteger v7 = -[NSData length](v6, "length");
    double v8 = v6;
    id v9 = -[NSData bytes](v8, "bytes");

    sqlite3_bind_blob64(a1, a2, v9, v7, 0LL);
  }
}

void SQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, objc_object *a3)
{
  id v5 = a3;
  if (!v5
    || (uint64_t v6 = (objc_object *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null")),
        v6,
        v6 == v5))
  {
LABEL_17:
    sqlite3_bind_null(a1, a2);
    goto LABEL_18;
  }

  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    sqlite3_bind_text( a1, a2, (const char *)-[objc_object UTF8String](v5, "UTF8String"), -1, 0LL);
    goto LABEL_18;
  }

  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDate, v9);
  if ((objc_opt_isKindOfClass(v5, v10) & 1) != 0)
  {
    -[objc_object timeIntervalSinceReferenceDate](v5, "timeIntervalSinceReferenceDate");
    sqlite3_bind_double(a1, a2, v12);
    goto LABEL_18;
  }

  uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSData, v11);
  if ((objc_opt_isKindOfClass(v5, v13) & 1) != 0)
  {
    __int16 v15 = v5;
    id v16 = -[objc_object length](v15, "length");
    id v17 = v15;
    id v18 = -[objc_object bytes](v17, "bytes");

    sqlite3_bind_blob64(a1, a2, v18, (sqlite3_uint64)v16, 0LL);
    goto LABEL_18;
  }

  uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSNumber, v14);
  if ((objc_opt_isKindOfClass(v5, v19) & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v25 = (objc_class *)objc_opt_class(v5, v24);
      id v26 = NSStringFromClass(v25);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v29[0] = 67109634;
      v29[1] = a2;
      __int16 v30 = 2112;
      id v31 = v5;
      __int16 v32 = 2114;
      id v33 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "SQLiteBindFoundationValueToStatement: Parameter (index %i) with value '%@' is of unsupported bind type '%{public}@'.",  (uint8_t *)v29,  0x1Cu);
    }

    goto LABEL_17;
  }

  int v20 = v5;
  id v21 = (const char *)-[objc_object objCType](v20, "objCType");
  if (!strcmp(v21, "d") || !strcmp(v21, "f") || !strcmp(v21, " "))
  {
    -[objc_object doubleValue](v20, "doubleValue");
    sqlite3_bind_double(a1, a2, v28);
  }

  else
  {
    sqlite3_bind_int64(a1, a2, (sqlite3_int64)-[objc_object longLongValue](v20, "longLongValue"));
  }

LABEL_18:
}

NSNumber *SQLiteCopyFoundationIntegerValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 1) {
    return -[NSNumber initWithLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithLongLong:",  sqlite3_column_int64(a1, a2));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1002CE718(int a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

id _PDPassdPlistSafeHavenURL()
{
  id v0 = [(id)CPSharedResourcesDirectory() stringByAppendingPathComponent:@"/Library/"];
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAppendingPathComponent:@"Passes/"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"com.apple.passd_safehaven.plist"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v3, 0LL));

  return v4;
}

id PDWritePassdPreferencesToSafeHaven()
{
  CFDictionaryRef v0 = CFPreferencesCopyMultiple(0LL, @"com.apple.passd", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  id v1 = _PDPassdPlistSafeHavenURL();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v10 = 0LL;
  id v3 = -[__CFDictionary writeToURL:error:](v0, "writeToURL:error:", v2, &v10);
  id v4 = v10;
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if ((_DWORD)v3) {
      uint64_t v7 = @"YES";
    }
    else {
      uint64_t v7 = @"NO";
    }
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
    *(_DWORD *)__int128 buf = 138412802;
    double v12 = v2;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDWritePassdPreferencesToSafeHaven: wrote to %@ successfully:(%@) error:(%@)",  buf,  0x20u);
  }

  return v3;
}

void PDRestorePassdPreferences()
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDRestorePassdPreferences: Restoring from passd.plist...",  buf,  2u);
  }

  id v2 = _PDPassdPlistSafeHavenURL();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v24 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfURL:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:options:error:",  v3,  0LL,  &v24));
  id v5 = (NSSet *)v24;
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  id v23 = 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v4,  0LL,  0LL,  &v23));
  uint64_t v6 = (NSSet *)v23;
  uint64_t v7 = (NSSet *)[v8 mutableCopy];

  if (v6)
  {
LABEL_6:
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDRestorePassdPreferences: Error reading safehaven passd plist %@",  buf,  0xCu);
    }

void sub_1002CF08C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = objc_alloc(&OBJC_CLASS___PKPaymentApplicationUsageSummary);
  id v7 = (id)objc_claimAutoreleasedReturnValue(-[PKPaymentApplicationUsageSummary _databaseInit](v6, "_databaseInit"));

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v5 values:a3];
  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1002CF3F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002CF710(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
}

void sub_1002CF718(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
}

void sub_1002CF720(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentApplicationUsageSummary setLastUsed:](v4, "setLastUsed:", v5);
}

void sub_1002CF76C(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentApplicationUsageSummary setLastUsedTransaction:](v4, "setLastUsedTransaction:", v5);
}

void sub_1002CFA74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002CFA8C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002CFA9C(uint64_t a1)
{
}

uint64_t sub_1002CFAA4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initWithPropertyValues:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)
    && ([*(id *)(a1 + 56) isCurrentUser] & 1) == 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource insertTransactionSourceWithType:inDatabase:]( &OBJC_CLASS___TransactionSource,  "insertTransactionSourceWithType:inDatabase:",  2LL,  *(void *)(a1 + 48)));
    uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 persistentID]));
    [v6 setValue:v7 forProperty:@"transaction_source_pid"];
  }

  return 1LL;
}

uint64_t sub_1002D0694(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _predicateForAccountPID:v5]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 32) predicate:v7]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _accountUsersWithQuery:v8]);
      id v10 = [[PKAccountUserCollection alloc] initWithAccountUsers:v9];
      [*(id *)(a1 + 40) setObject:v10 forKey:v6];

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_1002D0838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002D0850(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData integerValue](v5, "integerValue");

      if ((PKAccountStateIsTerminal(v6) & 1) == 0) {
        ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      }
      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_1002D0D3C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002D1210(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  __int128 v22 = objc_alloc_init(&OBJC_CLASS___PKAccountUser);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v22 withProperties:v7 values:a4];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CreditAccountFeatureDescriptor creditAccountFeatureDescriptorsForAccountUserPID:inDatabase:]( &OBJC_CLASS___CreditAccountFeatureDescriptor,  "creditAccountFeatureDescriptorsForAccountUserPID:inDatabase:",  v9,  v8));
  -[PKAccountUser setSupportedFeatures:](v22, "setSupportedFeatures:", v10);
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[AccountUserPreferences anyInDatabase:forAccountUserPID:]( &OBJC_CLASS___AccountUserPreferences,  "anyInDatabase:forAccountUserPID:",  v8,  v9));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 accountUserPreferences]);

  -[PKAccountUser setPreferences:](v22, "setPreferences:", v12);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountUser altDSID](v22, "altDSID"));
  -[PKAccountUser setCurrentUser:](v22, "setCurrentUser:", PKAltDSIDIsCurrentUser(v13));

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[AccountUserNotificationSettings anyInDatabase:forAccountUserPID:]( &OBJC_CLASS___AccountUserNotificationSettings,  "anyInDatabase:forAccountUserPID:",  v8,  v9));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 accountUserNotificationSettings]);
  id v16 = v15;
  if (v15) {
    id v17 = v15;
  }
  else {
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[PKAccountUserNotificationSettings defaultNotificationSettings]( &OBJC_CLASS___PKAccountUserNotificationSettings,  "defaultNotificationSettings"));
  }
  id v18 = v17;

  -[PKAccountUser setNotificationSettings:](v22, "setNotificationSettings:", v18);
  __int128 v19 = *(void **)(a1 + 56);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 _transactionSourceIdentifiersForAccountUserPID:a2 inDatabase:v20]);

  -[PKAccountUser setTransactionSourceIdentifiers:](v22, "setTransactionSourceIdentifiers:", v21);
  if (v22) {
    [*(id *)(a1 + 48) addObject:v22];
  }
}

void sub_1002D1998(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setAccessLevel:](v4, "setAccessLevel:", [a3 integerValue]);
}

void sub_1002D19DC(id a1, PKAccountUser *a2, id a3)
{
}

void sub_1002D19E4(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setAccountState:](v4, "setAccountState:", [a3 integerValue]);
}

void sub_1002D1A28(id a1, PKAccountUser *a2, id a3)
{
}

void sub_1002D1A30(id a1, PKAccountUser *a2, id a3)
{
}

void sub_1002D1A38(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_1002D1A7C(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountUser setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_1002D1AC8(id a1, PKAccountUser *a2, id a3)
{
}

void sub_1002D1AD0(id a1, PKAccountUser *a2, id a3)
{
}

void sub_1002D1AD8(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setIdentityStatus:](v4, "setIdentityStatus:", [a3 integerValue]);
}

void sub_1002D1B1C(id a1, PKAccountUser *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v6 = (PKAccountUser *)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:"));
    -[PKAccountUser setAddressableHandles:](v4, "setAddressableHandles:", v5);
  }

  else
  {
    uint64_t v6 = a2;
    -[PKAccountUser setAddressableHandles:](v6, "setAddressableHandles:", 0LL);
  }
}

void sub_1002D1DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) underlyingService]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 devices]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1002D1EB4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceIdentifier]);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "underlyingService", 0));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 devices]);

  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    while (2)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v10 = (id)IDSCopyIDForDevice(v9);
        id v11 = v2;
        id v12 = v11;
        if (v10 == v11)
        {

LABEL_16:
          uint64_t v14 = *(void *)(a1 + 48);
          id v15 = [[PKRemoteDevice alloc] initWithIDSDevice:v9];
          (*(void (**)(uint64_t, id))(v14 + 16))(v14, v15);

          goto LABEL_17;
        }

        if (v2 && v10)
        {
          unsigned int v13 = [v10 isEqualToString:v11];

          if (v13) {
            goto LABEL_16;
          }
        }

        else
        {
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_17:
}

void sub_1002D2654(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    id v16 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessage specializedMessageFromPayload:displayInformation:outError:]( &OBJC_CLASS___PKSharingMessage,  "specializedMessageFromPayload:displayInformation:outError:",  a3,  0LL,  &v16));
    id v7 = v16;
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id WeakRetained = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v10 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
    if (v6) {
      BOOL v11 = v7 == 0LL;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      if (v10)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412803;
        __int128 v18 = v14;
        __int16 v19 = 2112;
        uint64_t v20 = v15;
        __int16 v21 = 2113;
        __int128 v22 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "IDSService<%@>: Did receive message from '%@' \n\n %{private}@",  buf,  0x20u);
      }

      id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
      -[os_log_s didReceiveIDSShareMessage:endpoint:](WeakRetained, "didReceiveIDSShareMessage:endpoint:", v6, v5);
    }

    else if (v10)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v18 = v12;
      __int16 v19 = 2112;
      uint64_t v20 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "IDSService<%@>: Received message from %@, but failed to parse message.",  buf,  0x16u);
    }
  }
}

void sub_1002D28B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 transportIdentifier]);
    uint64_t v7 = *(void *)(a1 + 32);
    int v9 = 138412546;
    BOOL v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "IDSService<%@>: Did receive cancel message from '%@'",  (uint8_t *)&v9,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  [WeakRetained endpointWasRemotelyTerminated:v3];
}

void sub_1002D309C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1002D3170;
  block[3] = &unk_10063CD88;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  int v9 = *(dispatch_queue_s **)(v7 + 32);
  block[1] = 3221225472LL;
  id v13 = v5;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

uint64_t sub_1002D3170(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 40LL));
    [*(id *)(*(void *)(a1 + 48) + 48) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 32)];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 40LL));
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
    [WeakRetained endpointWasUpdated:*(void *)(a1 + 56) oldTransportIdentifier:0 allowCreation:1];

    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) transportIdentifier]);
      int v10 = 138412290;
      id v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "IDSService<%@>: Successfully sent message",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject(33LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) transportIdentifier]);
      uint64_t v5 = *(void *)(a1 + 40);
      int v10 = 138412546;
      id v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "IDSService<%@>: Failed to send message with error: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

uint64_t sub_1002D34D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  return result;
}

void sub_1002D35CC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 32) + 48) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40LL));
  if (v4)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) destinationCorrelationIdentifier]);
    [v4 setIdsCorrelationIdentifier:v2];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained endpointWasUpdated:v4 oldTransportIdentifier:0 allowCreation:0];
  }
}

void sub_1002D3A60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Family members received: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_1002D3D7C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setObject:a2 forKey:*(void *)(a1 + 40)];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1002D3DAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

uint64_t sub_1002D3F80(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = PKFamilyMemberTypeToString(a2);
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v9 = 138412290;
    int v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Current user member type: %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

id sub_1002D40A8(uint64_t a1, void *a2)
{
  return _[a2 familyCircleManagerDidUpdateFamilyMembers:*(void *)(a1 + 32)];
}

id sub_1002D44F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32LL));
  return [*(id *)(a1 + 32) _executeNextRequestIfPossible];
}

void sub_1002D4834(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v8) + 16LL))(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v8));
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
}

void sub_1002D4950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error loading family members: %@",  (uint8_t *)&v12,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 16LL)) {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 pendingMembers]);
    }
    else {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 members]);
    }
    __int128 v10 = (void *)v9;
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pkFamilyMemberArrayFromFAFamilyMemberArray:v9]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1002D50F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v8) + 16LL))(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v8));
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
}

void sub_1002D5210(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [v6 length];
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16LL);
    int v12 = 134218498;
    id v13 = v10;
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Family member image request completed with image data size %ld, for dsid %@, error %@",  (uint8_t *)&v12,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002D56B0(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v8 + 1) + 8LL * (void)v6) + 16LL))(*(void *)(*((void *)&v8 + 1) + 8LL * (void)v6));
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(result + 16))(result);
  }
  return result;
}

void sub_1002D57C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error loading family members: %@",  (uint8_t *)&v16,  0xCu);
    }

    __int128 v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    id v10 = [v5 ageCategory];
    uint64_t v11 = PKFamilyMemberTypeFromFAMemberType();
    uint64_t v12 = PKLogFacilityTypeGetObject(6LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = PKFamilyMemberTypeToString(v11);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      int v16 = 134218242;
      id v17 = v10;
      __int16 v18 = 2112;
      __int16 v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received current member age category: %ld, pk member type: %@",  (uint8_t *)&v16,  0x16u);
    }

    __int128 v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v9();
}

void sub_1002D5C3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002D5C54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D5C64(uint64_t a1)
{
}

uint64_t sub_1002D5C6C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v2)
  {
    [v2 updateWithPayLaterMerchant:*(void *)(a1 + 32)];
  }

  else
  {
    id v3 = [objc_alloc(*(Class *)(a1 + 56)) initWithPayLaterMerchant:*(void *)(a1 + 32) forFinancingPlanPID:*(void *)(a1 + 64) inDatabase:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapsBrand]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[MapsBrand insertOrUpdateMapsBrand:inDatabase:]( &OBJC_CLASS___MapsBrand,  "insertOrUpdateMapsBrand:inDatabase:",  v6,  *(void *)(a1 + 40)));

  if (v7)
  {
    __int128 v8 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v7 persistentID]));
    [v8 setValue:v9 forProperty:@"v"];
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapsMerchant]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[MapsMerchant insertOrUpdateMapsMerchant:inDatabase:]( &OBJC_CLASS___MapsMerchant,  "insertOrUpdateMapsMerchant:inDatabase:",  v10,  *(void *)(a1 + 40)));

  if (v11)
  {
    uint64_t v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v11 persistentID]));
    [v12 setValue:v13 forProperty:@"u"];
  }

  return 1LL;
}

uint64_t sub_1002D5E7C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastMerchantReprocessingDate]);
  uint64_t v4 = (void *)_SQLValueForDate(v3);
  [v2 setValue:v4 forProperty:@"x"];

  id v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 40) requiresMerchantReprocessing]));
  [v5 setValue:v6 forProperty:@"w"];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mapsBrand]);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[MapsBrand insertOrUpdateMapsBrand:inDatabase:]( &OBJC_CLASS___MapsBrand,  "insertOrUpdateMapsBrand:inDatabase:",  v7,  v8));

  if (v9)
  {
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v9 persistentID]));
    [v10 setValue:v11 forProperty:@"v"];
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mapsMerchant]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[MapsMerchant insertOrUpdateMapsMerchant:inDatabase:]( &OBJC_CLASS___MapsMerchant,  "insertOrUpdateMapsMerchant:inDatabase:",  v12,  v13));

  if (v14)
  {
    uint64_t v15 = *(void **)(a1 + 32);
    int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v14 persistentID]));
    [v15 setValue:v16 forProperty:@"u"];
  }

  return 1LL;
}

void sub_1002D630C(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = [*a3 longLongValue];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v4));
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlan anyInDatabase:withPlanPID:]( &OBJC_CLASS___PayLaterFinancingPlan,  "anyInDatabase:withPlanPID:",  v5,  v6));

  id v7 = *(void **)(a1 + 40);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v9 financingPlan]);
  [v7 safelyAddObject:v8];
}

void sub_1002D66C8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v7),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v6,  a3);

  id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:@"u"]);
  if (v15)
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MapsMerchant anyInDatabase:withPID:](&OBJC_CLASS___MapsMerchant, "anyInDatabase:withPID:", v8, v15));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 mapsMerchant]);

    [*(id *)(a1 + 48) setMapsMerchant:v10];
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:@"v"]);
  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[MapsBrand anyInDatabase:withPID:](&OBJC_CLASS___MapsBrand, "anyInDatabase:withPID:", v12, v11));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 mapsBrand]);

    [*(id *)(a1 + 48) setMapsBrand:v14];
  }
}

void sub_1002D6FAC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D6FB4(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setMerchantCategoryCode:](v4, "setMerchantCategoryCode:", [a3 integerValue]);
}

void sub_1002D6FF8(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setMerchantCategory:](v4, "setMerchantCategory:", [a3 integerValue]);
}

void sub_1002D703C(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setFallbackCategory:](v4, "setFallbackCategory:", [a3 integerValue]);
}

void sub_1002D7080(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D7088(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D7090(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D7098(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70A0(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70A8(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70B0(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70B8(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70C0(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70C8(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70D0(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70D8(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70E0(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D70E8(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setIndustryCode:](v4, "setIndustryCode:", [a3 integerValue]);
}

void sub_1002D712C(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setRequiresMerchantReprocessing:]( v4,  "setRequiresMerchantReprocessing:",  [a3 BOOLValue]);
}

void sub_1002D7170(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterMerchant setLastMerchantReprocessingDate:](v4, "setLastMerchantReprocessingDate:", v5);
}

void sub_1002D71BC(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setCleanConfidence:](v4, "setCleanConfidence:", [a3 integerValue]);
}

void sub_1002D7200(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setAdamIdentifier:](v4, "setAdamIdentifier:", [a3 integerValue]);
}

void sub_1002D7244(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D724C(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_1002D7254(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPayLaterMerchant setOriginURL:](v4, "setOriginURL:", v5);
}

void sub_1002D7460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1002D7478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D7488(uint64_t a1)
{
}

BOOL sub_1002D7490(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObjectOrNull:forKey:](v2, "setObjectOrNull:forKey:", *(void *)(a1 + 32), @"b");
  -[NSMutableDictionary setUnsignedLongLong:forKey:]( v2,  "setUnsignedLongLong:forKey:",  *(void *)(a1 + 64),  @"a");
  -[NSMutableDictionary setUnsignedLongLong:forKey:]( v2,  "setUnsignedLongLong:forKey:",  *(void *)(a1 + 72),  @"c");
  -[NSMutableDictionary setUnsignedLongLong:forKey:]( v2,  "setUnsignedLongLong:forKey:",  *(void *)(a1 + 80),  @"d");
  id v3 = [*(id *)(a1 + 40) initWithPropertyValues:v2 inDatabase:*(void *)(a1 + 48)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  BOOL v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
  return v6;
}

void sub_1002D76E4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 longLongValue];
  id v7 = [a4[1] longLongValue];
  __int128 v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___MapsBrand),  "initWithPersistentID:inDatabase:",  v6,  *(void *)(a1 + 32));
  -[SQLiteEntity deleteFromDatabase](v8, "deleteFromDatabase");

  id v9 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___MapsMerchant),  "initWithPersistentID:inDatabase:",  v7,  *(void *)(a1 + 32));
  -[SQLiteEntity deleteFromDatabase](v9, "deleteFromDatabase");
}

void sub_1002D78EC(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 longLongValue];
  id v7 = [a4[1] longLongValue];
  __int128 v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___MapsBrand),  "initWithPersistentID:inDatabase:",  v6,  *(void *)(a1 + 32));
  -[SQLiteEntity deleteFromDatabase](v8, "deleteFromDatabase");

  id v9 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___MapsMerchant),  "initWithPersistentID:inDatabase:",  v7,  *(void *)(a1 + 32));
  -[SQLiteEntity deleteFromDatabase](v9, "deleteFromDatabase");
}

void sub_1002D7B70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1002D7B94(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 longLongValue];
  id v7 = [a4[1] longLongValue];
  __int128 v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___MapsBrand),  "initWithPersistentID:inDatabase:",  v6,  *(void *)(a1 + 32));
  uint64_t v14 = objc_claimAutoreleasedReturnValue(-[MapsBrand mapsBrand](v8, "mapsBrand"));

  id v9 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___MapsMerchant),  "initWithPersistentID:inDatabase:",  v7,  *(void *)(a1 + 32));
  uint64_t v10 = objc_claimAutoreleasedReturnValue(-[MapsMerchant mapsMerchant](v9, "mapsMerchant"));

  if (v14 | v10)
  {
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___PKMerchant);
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setMapsBrand:v14];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setMapsMerchant:v10];
  }
}

void sub_1002D7E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1002D7E74(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*a4 stringValue]);
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "pk_safelyAddObject:", v5);
}

id sub_1002D83C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___NFC,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002D8684(id a1, PKNFCPayload *a2, id a3)
{
}

void sub_1002D868C(id a1, PKNFCPayload *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "pk_decodeHexadecimal"));
  -[PKNFCPayload setEncryptionPublicKeyData:](v4, "setEncryptionPublicKeyData:", v5);
}

void sub_1002D86DC(id a1, PKNFCPayload *a2, id a3)
{
  id v5 = a2;
  if (a3) {
    id v4 = [a3 BOOLValue];
  }
  else {
    id v4 = 0LL;
  }
  -[PKNFCPayload setRequiresAuthentication:](v5, "setRequiresAuthentication:", v4);
}

void sub_1002D872C(id a1, PKNFCPayload *a2, id a3)
{
  id v4 = a2;
  -[PKNFCPayload setPayloadState:](v4, "setPayloadState:", [a3 integerValue]);
}

void sub_1002D8AA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002D8AB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D8AC8(uint64_t a1)
{
}

uint64_t sub_1002D8AD0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) type]);
  [*(id *)(a1 + 64) deletePendingProvisioningInDatabase:*(void *)(a1 + 40) ofType:v2 withUniqueIdentifier:*(void *)(a1 + 48)];
  id v3 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (!v3) {
    goto LABEL_18;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypeCarKey])
  {
    id v4 = &OBJC_CLASS___PendingCarKeyProvisioning;
    goto LABEL_16;
  }

  if ([v2 isEqualToString:PKPendingProvisioningTypePaymentRemoteCredential])
  {
    id v4 = &OBJC_CLASS___PendingPaymentRemoteCredential;
    goto LABEL_16;
  }

  if ([v2 isEqualToString:PKPendingProvisioningTypeShareableCredential])
  {
    id v4 = &OBJC_CLASS___PendingShareableCredential;
    goto LABEL_16;
  }

  if ([v2 isEqualToString:PKPendingProvisioningTypeAccountCredential])
  {
    id v4 = &OBJC_CLASS___PendingAccountCredential;
    goto LABEL_16;
  }

  if ([v2 isEqualToString:PKPendingProvisioningTypeStatefulTransfer])
  {
    id v4 = &OBJC_CLASS___PendingStatefulTransferProvisioning;
    goto LABEL_16;
  }

  if ([v2 isEqualToString:PKPendingProvisioningTypePrecursorPass])
  {
    id v4 = &OBJC_CLASS___PendingPrecursorPassCredential;
    goto LABEL_16;
  }

  if ([v2 isEqualToString:PKPendingProvisioningTypeIdentityCredential])
  {
    id v4 = &OBJC_CLASS___PendingIdentityCredential;
LABEL_16:
    id v5 = (void *)objc_claimAutoreleasedReturnValue( -[__objc2_class insertPendingProvisioning:forBasePendingProvisioning:inDatabase:]( v4,  "insertPendingProvisioning:forBasePendingProvisioning:inDatabase:",  *(void *)(a1 + 32),  v3,  *(void *)(a1 + 40)));

    if (v5) {
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v6 = 0LL;
    goto LABEL_19;
  }

void sub_1002D92DC(uint64_t a1, uint64_t a2)
{
  id v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PendingProvisioning),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v2 = PKPendingProvisioningStatusToString(1LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  -[SQLiteEntity setValue:forProperty:](v4, "setValue:forProperty:", v3, @"status");
}

void sub_1002D946C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002D9484(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PendingProvisioning),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[PendingProvisioning deleteFromDatabase]( v3,  "deleteFromDatabase");
}

void sub_1002D9604(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v11 = a3;
  id v7 = *(id *)(a4 + 8LL * *(void *)(a1 + 56));
  if ([v7 isEqualToString:PKPendingProvisioningTypeCarKey])
  {
    __int128 v8 = objc_alloc_init(&OBJC_CLASS___PKAddCarKeyPassConfiguration);
    id v9 = -[PKPendingCarKeyProvisioning initWithCarKeyConfiguration:]( objc_alloc(&OBJC_CLASS___PKPendingCarKeyProvisioning),  "initWithCarKeyConfiguration:",  v8);
    +[PendingCarKeyProvisioning inflatePendingProvisioning:forBasePendingProvisioningPID:inDatabase:]( &OBJC_CLASS___PendingCarKeyProvisioning,  "inflatePendingProvisioning:forBasePendingProvisioningPID:inDatabase:",  v9,  a2,  *(void *)(a1 + 32));

    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  if ([v7 isEqualToString:PKPendingProvisioningTypePaymentRemoteCredential])
  {
    id v9 = (PKPendingCarKeyProvisioning *)-[PKPendingPaymentRemoteCredential initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingPaymentRemoteCredential),  "initForDatabase");
    uint64_t v10 = &OBJC_CLASS___PendingPaymentRemoteCredential;
  }

  else if ([v7 isEqualToString:PKPendingProvisioningTypeShareableCredential])
  {
    id v9 = (PKPendingCarKeyProvisioning *)-[PKPendingShareableCredential initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingShareableCredential),  "initForDatabase");
    uint64_t v10 = &OBJC_CLASS___PendingShareableCredential;
  }

  else if ([v7 isEqualToString:PKPendingProvisioningTypeAccountCredential])
  {
    id v9 = (PKPendingCarKeyProvisioning *)-[PKPendingAccountCredential initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingAccountCredential),  "initForDatabase");
    uint64_t v10 = &OBJC_CLASS___PendingAccountCredential;
  }

  else if ([v7 isEqualToString:PKPendingProvisioningTypeStatefulTransfer])
  {
    id v9 = (PKPendingCarKeyProvisioning *)-[PKPendingStatefulTransferProvisioning initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingStatefulTransferProvisioning),  "initForDatabase");
    uint64_t v10 = &OBJC_CLASS___PendingStatefulTransferProvisioning;
  }

  else if ([v7 isEqualToString:PKPendingProvisioningTypePrecursorPass])
  {
    id v9 = (PKPendingCarKeyProvisioning *)-[PKPendingPrecursorPassCredential initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingPrecursorPassCredential),  "initForDatabase");
    uint64_t v10 = &OBJC_CLASS___PendingPrecursorPassCredential;
  }

  else
  {
    id v9 = (PKPendingCarKeyProvisioning *)-[PKPendingIdentityCredential initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingIdentityCredential),  "initForDatabase");
    uint64_t v10 = &OBJC_CLASS___PendingIdentityCredential;
  }

  -[__objc2_class inflatePendingProvisioning:forBasePendingProvisioningPID:inDatabase:]( v10,  "inflatePendingProvisioning:forBasePendingProvisioningPID:inDatabase:",  v9,  a2,  *(void *)(a1 + 32));
  if (v9)
  {
LABEL_17:
    [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v9 withProperties:v11 values:a4];
    [*(id *)(a1 + 48) addObject:v9];
  }

id sub_1002D9A6C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _predicateForType:a2];
}

void sub_1002D9DBC(id a1, PKPendingProvisioning *a2, id a3)
{
}

void sub_1002D9DC4(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a2;
  -[PKPendingProvisioning setStatus:](v4, "setStatus:", PKPendingProvisioningStatusFromString(a3));
}

void sub_1002D9E08(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPendingProvisioning setCreatedAt:](v4, "setCreatedAt:", v5);
}

void sub_1002D9E54(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a2;
  -[PKPendingProvisioning setShouldAutoProvision:](v4, "setShouldAutoProvision:", [a3 BOOLValue]);
}

void sub_1002D9E98(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___PKSecureElementProvisioningState, v6),  v4,  0LL);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  -[PKPendingProvisioning setProvisioningState:](v5, "setProvisioningState:", v8);
}

void sub_1002D9F20(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a2;
  -[PKPendingProvisioning setProvisioningAttemptCounter:]( v4,  "setProvisioningAttemptCounter:",  [a3 integerValue]);
}

void sub_1002DAF5C(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
}

void sub_1002DAF64(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterAccountUserInfoValue setDate:](v4, "setDate:", v5);
}

void sub_1002DAFB0(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
}

void sub_1002DAFB8(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountUserInfoValue setHasHiddenValue:](v4, "setHasHiddenValue:", [a3 BOOLValue]);
}

void sub_1002DB0D8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v7),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v6,  a3);

  id v8 = *(void **)(a1 + 48);
  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currencyAmount]);
  [v8 setCurrencyAmount:v9];
}

void sub_1002DB50C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) provisioningMetadata]);
    [v3 setProvisioningMetadata:v4];

    id v16 = 0LL;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16LL));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cardFileManager]);
    [v6 writeCard:*(void *)(a1 + 32) source:2 error:&v16];

    id v7 = v16;
    if (v16)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(36LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v18 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDPaymentWebServiceTargetDevice: Failed to write pass, completing with nil addedPass: %@",  buf,  0xCu);
      }

      uint64_t v10 = 0LL;
    }

    else
    {
      id v9 = (os_log_s *)objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16LL));
      id v11 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s databaseManager](v9, "databaseManager"));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 passWithUniqueIdentifier:v12]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v13 paymentPass]);
    }

    objc_autoreleasePoolPop(v2);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v14 = (void *)PDOSTransactionCreate("PDPaymentWebServiceTargetDevice");
    id v15 = objc_autoreleasePoolPush();
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    objc_autoreleasePoolPop(v15);
  }
}

void sub_1002DBD2C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_objectsPassingTest:", &stru_100654178));
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = v3;
    (*(void (**)(void))(v4 + 16))();
    id v3 = v5;
  }
}

BOOL sub_1002DBD80(id a1, PKFeatureApplication *a2, unint64_t a3, BOOL *a4)
{
  return -[PKFeatureApplication applicationType](a2, "applicationType", a3, a4) == (id)1;
}

void sub_1002DC198(uint64_t a1, int a2)
{
  id v4 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  [*(id *)(*(void *)(a1 + 32) + 64) removeAllObjects];
  if (a2) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  }
  else {
    *(void *)(*(void *)(a1 + 32) + 56LL) = 0LL;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24LL));
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v9) + 16LL))(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v9));
        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }
}

void sub_1002DC4C8(void *a1, char a2)
{
  uint64_t v2 = a1[6];
  if ((a2 & 1) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16LL));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained databaseManager]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 passWithUniqueIdentifier:a1[5]]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 paymentPass]);
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v6);
  }

  else
  {
    (*(void (**)(void, void))(v2 + 16))(a1[6], 0LL);
  }

void sub_1002DCFB0(uint64_t a1)
{
  id v2 = [[PKPassOwnershipToken alloc] initWithOwnershipToken:*(void *)(a1 + 32) identifier:*(void *)(a1 + 40)];

  if (!v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to store pass ownership token with identifier: %@ token: %@",  (uint8_t *)&v7,  0x16u);
    }
  }

void sub_1002DD364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002DD380(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1002DD478(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002DDE60(uint64_t a1, int a2)
{
  if (a2) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
  }
  else {
    --*(void *)(*(void *)(a1 + 32) + 40LL);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24LL));
}

void sub_1002DE34C(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained pendingProvisioningManager]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 retrievePendingProvisioningsOfType:a1[5]]);

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1002DE50C(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16LL));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained provisioningRequirementsChecker]);
  [v2 meetsWithRequirementsContainer:a1[5] completion:a1[6]];
}

void sub_1002DE68C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002DE6B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002DE6C0(uint64_t a1)
{
}

void sub_1002DE6C8(uint64_t a1, char a2, id obj)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), obj);
}

uint64_t sub_1002DE7AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1002DE8F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) accountsForProvisioningWithCompletion:*(void *)(a1 + 40)];
}

void sub_1002DEBA4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v7 = [a2 copy];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v13 keyEnumerator]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 nextObject]);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      do
      {
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:v10]);
        [v7 setObject:v11 forKey:v10];

        uint64_t v12 = objc_claimAutoreleasedReturnValue([v8 nextObject]);
        uint64_t v10 = (void *)v12;
      }

      while (v12);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1002DF440(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1002DF6CC(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1002DFD20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_1002DFD40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002DFD50(uint64_t a1)
{
}

void sub_1002DFD58(uint64_t a1, uint64_t a2, id *a3)
{
}

void sub_1002DFE94(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_1002DFE9C(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKTransitAppletState setBalance:](v4, "setBalance:", v6);
}

void sub_1002DFEEC(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_1002DFEF4(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletState setBlacklisted:](v4, "setBlacklisted:", [a3 BOOLValue]);
}

void sub_1002DFF38(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_1002DFF40(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletState setAppletStateDirty:](v4, "setAppletStateDirty:", [a3 BOOLValue]);
}

void sub_1002DFF84(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKDateFromStorageValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKTransitAppletState setExpirationDate:](v4, "setExpirationDate:", v6);
}

void sub_1002DFFD4(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletState setNeedsStationProcessing:](v4, "setNeedsStationProcessing:", [a3 BOOLValue]);
}

void sub_1002E0018(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_1002E0020(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  v11[1] = objc_opt_class(&OBJC_CLASS___NSString, v7);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKTransitAppletState setEnrouteTransitTypes:](v5, "setEnrouteTransitTypes:", v10);
}

id sub_1002E0568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___TransitAppletState,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

id *sub_1002E0584(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)&OBJC_CLASS___PDVehicleFunctionsManager;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v17, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeWeak(a1 + 3, v7);
      dispatch_queue_attr_t v9 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v10 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v9);
      id v11 = PDUtilityQueue();
      uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v11);
      dispatch_queue_t v13 = dispatch_queue_create_with_target_V2("com.apple.passd.vehicleFunctionsManager", v10, v12);
      id v14 = a1[2];
      a1[2] = v13;

      id WeakRetained = objc_loadWeakRetained(a1 + 3);
      sub_10033B530((uint64_t)WeakRetained, a1, 1LL);

      PDNFSecureXPCRegisterAccessKeyEventObserver(a1);
    }
  }

  return a1;
}

void sub_1002E0784(uint64_t a1)
{
  uint64_t v34 = 0LL;
  id v35 = &v34;
  uint64_t v36 = 0x3032000000LL;
  uint64_t v37 = sub_1002E0A68;
  __int128 v38 = sub_1002E0A78;
  id v39 = 0LL;
  uint64_t v28 = 0LL;
  id v29 = &v28;
  uint64_t v30 = 0x3032000000LL;
  id v31 = sub_1002E0A68;
  __int16 v32 = sub_1002E0A78;
  id v33 = 0LL;
  v23[0] = _NSConcreteStackBlock;
  v23[2] = sub_1002E0A80;
  v23[3] = &unk_100646BE0;
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(a1 + 48);
  id v4 = *(void **)(v2 + 8);
  v23[1] = 3221225472LL;
  id v26 = &v34;
  v23[4] = v2;
  id v24 = v3;
  id v25 = *(id *)(a1 + 56);
  __int16 v27 = &v28;
  [v4 performTransactionWithBlock:v23];
  if (v35[5])
  {
    uint64_t v5 = (void *)v29[5];
    if (v5)
    {
      __int16 v21 = 0LL;
      __int128 v22 = 0LL;
      sub_1002E0AFC(v5, &v22, &v21);
      id v6 = v22;
      id v7 = *(id *)(a1 + 48);
      id v8 = v6;
      dispatch_queue_attr_t v9 = v8;
      if (v7 == v8)
      {
      }

      else
      {
        if (!v7 || !v8)
        {
          dispatch_queue_t v13 = v8;
          goto LABEL_15;
        }

        unsigned int v10 = [v7 isEqualToString:v8];

        if (!v10) {
          goto LABEL_16;
        }
      }

      id v11 = v21;
      id v7 = *(id *)(a1 + 56);
      id v12 = v11;
      dispatch_queue_t v13 = v12;
      if (v7 == v12)
      {

LABEL_20:
        __int16 v19 = objc_autoreleasePoolPush();
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 24LL));
        sub_10033B418((uint64_t)WeakRetained, (void *)v35[5]);

        objc_autoreleasePoolPop(v19);
LABEL_21:

        goto LABEL_22;
      }

      if (v7 && v12)
      {
        unsigned __int8 v14 = [v7 isEqualToString:v12];

        if ((v14 & 1) != 0) {
          goto LABEL_20;
        }
LABEL_16:
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1 + 48);
          uint64_t v18 = *(void *)(a1 + 56);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v41 = v17;
          __int16 v42 = 2112;
          uint64_t v43 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDVehicleFunctionsManager: ignoring vehicle report update for (%@: %@).",  buf,  0x16u);
        }

        dispatch_queue_t v13 = v21;
        goto LABEL_21;
      }

void sub_1002E0A38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1002E0A68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002E0A78(uint64_t a1)
{
}

uint64_t sub_1002E0A80(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:a1[5] subcredentialIdentifier:a1[6]]);
  uint64_t v3 = *(void *)(a1[7] + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL))
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "primaryPaymentApplicationForPassUniqueIdentifier:"));
    uint64_t v6 = *(void *)(a1[8] + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  return 0LL;
}

void sub_1002E0AFC(void *a1, void **a2, void **a3)
{
  id v5 = a1;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 applicationIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 subcredentials]);

  if ([v7 count] == (id)1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 anyObject]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 identifier]);
  }

  else
  {
    uint64_t v9 = 0LL;
    id v8 = v6;
    uint64_t v6 = 0LL;
  }

  unsigned int v10 = *a2;
  *a2 = v6;
  id v12 = v6;

  id v11 = *a3;
  *a3 = (void *)v9;
}

void sub_1002E160C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1002E1860(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_1002E1B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransactionAmount,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

id sub_1002E1C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransactionAmount,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002E2080(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1002E2088(id a1, TransientCurrencyAmount *a2, id a3)
{
  id v4 = a2;
  -[TransientCurrencyAmount setExponent:](v4, "setExponent:", [a3 integerValue]);
}

void sub_1002E20CC(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1002E20D4(id a1, TransientCurrencyAmount *a2, id a3)
{
  id v4 = a2;
  -[TransientCurrencyAmount setPending:](v4, "setPending:", [a3 BOOLValue]);
}

void sub_1002E2118(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1002E2120(id a1, TransientCurrencyAmount *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    [a3 decimalValue];
    id v5 = (TransientCurrencyAmount *)objc_claimAutoreleasedReturnValue( +[NSDecimalNumber decimalNumberWithDecimal:]( &OBJC_CLASS___NSDecimalNumber,  "decimalNumberWithDecimal:",  v6));
    -[TransientCurrencyAmount setAmount:](v4, "setAmount:", v5);
  }

  else
  {
    id v5 = a2;
    -[TransientCurrencyAmount setAmount:](v5, "setAmount:", 0LL);
  }
}

void sub_1002E21A8(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1002E21B0(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1002E2490( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002E24A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002E24B8(uint64_t a1)
{
}

BOOL sub_1002E24C0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) image]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileImage insertImage:inDatabase:]( &OBJC_CLASS___TileImage,  "insertImage:inDatabase:",  v2,  *(void *)(a1 + 40)));

  id v4 = [objc_alloc(*(Class *)(a1 + 64)) initWithAccessory:*(void *)(a1 + 32) forBaseAccessory:*(void *)(a1 + 48) forImage:v3 inDatabase:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  BOOL v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
  return v7;
}

void sub_1002E26B4(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  unsigned int v10 = *a4;
  if (*a4) {
    BOOL v11 = v10 == v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    id v16 = v9;
    id v12 = v10;
    uint64_t v13 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileImage alloc],  "initWithPersistentID:inDatabase:",  [v12 longLongValue],  *(void *)(a1 + 32));
    unsigned __int8 v14 = *(void **)(a1 + 40);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[TileImage tileImage](v13, "tileImage"));
    [v14 setImage:v15];

    uint64_t v9 = v16;
  }

  *a6 = 1;
}

void sub_1002E2C3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002E2C54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002E2C64(uint64_t a1)
{
}

BOOL sub_1002E2C6C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) title]);
  if (!v2)
  {
    id v3 = 0LL;
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) body]);
    if (v5)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[TileValue insertValue:inDatabase:]( &OBJC_CLASS___TileValue,  "insertValue:inDatabase:",  v5,  *(void *)(a1 + 40)));
      if (!v6)
      {
        BOOL v4 = 0LL;
LABEL_30:

        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bodyImage]);
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[TileImage insertImage:inDatabase:]( &OBJC_CLASS___TileImage,  "insertImage:inDatabase:",  v7,  *(void *)(a1 + 40)));
      if (!v8)
      {
        BOOL v4 = 0LL;
LABEL_29:

        goto LABEL_30;
      }
    }

    else
    {
      id v8 = 0LL;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) footer]);
    if (v9)
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[TileValue insertValue:inDatabase:]( &OBJC_CLASS___TileValue,  "insertValue:inDatabase:",  v9,  *(void *)(a1 + 40)));
      if (!v20)
      {
        BOOL v4 = 0LL;
LABEL_28:

        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v20 = 0LL;
    }

    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessory]);
    __int16 v19 = v8;
    if (v10)
    {
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue( +[TileAccessory insertAccessory:inDatabase:]( &OBJC_CLASS___TileAccessory,  "insertAccessory:inDatabase:",  v10,  *(void *)(a1 + 40)));
      if (!v11)
      {
        BOOL v4 = 0LL;
LABEL_27:

        id v8 = v19;
        goto LABEL_28;
      }
    }

    else
    {
      BOOL v11 = 0LL;
    }

    uint64_t v18 = v6;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) secondaryAccessory]);
    if (v12)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[TileAccessory insertAccessory:inDatabase:]( &OBJC_CLASS___TileAccessory,  "insertAccessory:inDatabase:",  v12,  *(void *)(a1 + 40)));
      if (!v13)
      {
        BOOL v4 = 0LL;
LABEL_26:

        uint64_t v6 = v18;
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    id v14 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 48) forTitleValue:v3 forBodyValue:v18 forBodyImage:v19 forFooterValue:v20 forAccessory:v11 forSecondaryA ccessory:v13 inDatabase:*(void *)(a1 + 40)];
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
    goto LABEL_26;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileValue insertValue:inDatabase:]( &OBJC_CLASS___TileValue,  "insertValue:inDatabase:",  v2,  *(void *)(a1 + 40)));
  if (v3) {
    goto LABEL_5;
  }
  BOOL v4 = 0LL;
LABEL_31:

  return v4;
}

void sub_1002E304C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v36 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v8 = *(id *)a4;
  if (v8) {
    BOOL v9 = v8 == v36;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unsigned int v10 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileValue alloc],  "initWithPersistentID:inDatabase:",  [v8 longLongValue],  *(void *)(a1 + 32));
    BOOL v11 = *(void **)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[TileValue passTileValue](v10, "passTileValue"));
    [v11 setTitle:v12];
  }

  id v13 = *(id *)(a4 + 8);
  if (v13) {
    BOOL v14 = v13 == v36;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileValue alloc],  "initWithPersistentID:inDatabase:",  [v13 longLongValue],  *(void *)(a1 + 32));
    id v16 = *(void **)(a1 + 40);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[TileValue passTileValue](v15, "passTileValue"));
    [v16 setBody:v17];
  }

  id v18 = *(id *)(a4 + 16);
  if (v18 && v18 != v36)
  {
    __int16 v19 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileImage alloc],  "initWithPersistentID:inDatabase:",  [v18 longLongValue],  *(void *)(a1 + 32));
    uint64_t v20 = *(void **)(a1 + 40);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(-[TileImage tileImage](v19, "tileImage"));
    [v20 setBodyImage:v21];
  }

  id v22 = *(id *)(a4 + 24);
  if (v22 && v22 != v36)
  {
    id v23 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileValue alloc],  "initWithPersistentID:inDatabase:",  [v22 longLongValue],  *(void *)(a1 + 32));
    id v24 = *(void **)(a1 + 40);
    id v25 = (void *)objc_claimAutoreleasedReturnValue(-[TileValue passTileValue](v23, "passTileValue"));
    [v24 setFooter:v25];
  }

  [*(id *)(a1 + 40) setPreferredStyle:PKPassTileStateStyleFromString(*(void *)(a4 + 32))];
  id v26 = *(id *)(a4 + 40);
  if (v26 && v26 != v36)
  {
    __int16 v27 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileAccessory alloc],  "initWithPersistentID:inDatabase:",  [v26 longLongValue],  *(void *)(a1 + 32));
    uint64_t v28 = *(void **)(a1 + 40);
    id v29 = (void *)objc_claimAutoreleasedReturnValue(-[TileAccessory passTileAccessory](v27, "passTileAccessory"));
    [v28 setAccessory:v29];
  }

  id v30 = *(id *)(a4 + 48);
  if (v30 && v30 != v36)
  {
    id v31 = v30;
    __int16 v32 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileAccessory alloc],  "initWithPersistentID:inDatabase:",  [v31 longLongValue],  *(void *)(a1 + 32));
    id v33 = *(void **)(a1 + 40);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[TileAccessory passTileAccessory](v32, "passTileAccessory"));
    [v33 setSecondaryAccessory:v34];
  }

  *a6 = 1;
}

void sub_1002E3C7C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKMapsMerchant);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  BOOL v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    BOOL v7 = v8;
  }
}

void sub_1002E3E30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKMapsMerchant);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v9, 0));
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v17;
    do
    {
      BOOL v14 = 0LL;
      do
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)v14) merchant]);
        [v15 setMapsMerchant:v8];

        BOOL v14 = (char *)v14 + 1;
      }

      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v12);
  }
}

void sub_1002E4368(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002E44B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKMapsMerchant);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1002E4B74(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  -[PKMapsMerchant setIdentifier:](v4, "setIdentifier:", [a3 unsignedLongLongValue]);
}

void sub_1002E4BB8(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  -[PKMapsMerchant setResultProviderIdentifier:](v4, "setResultProviderIdentifier:", [a3 intValue]);
}

void sub_1002E4BFC(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1002E4C04(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1002E4C0C(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsMerchant setURL:](v4, "setURL:", v5);
}

void sub_1002E4C58(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  [a3 doubleValue];
  -[PKMapsMerchant setLocationLatitude:](v4, "setLocationLatitude:");
}

void sub_1002E4C98(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  [a3 doubleValue];
  -[PKMapsMerchant setLocationLongitude:](v4, "setLocationLongitude:");
}

void sub_1002E4CD8(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_PostalAddressForSQLValue(a3);
  -[PKMapsMerchant setPostalAddress:](v4, "setPostalAddress:", v5);
}

void sub_1002E4D24(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsMerchant setHeroImageURL:](v4, "setHeroImageURL:", v5);
}

void sub_1002E4D70(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1002E4D78(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  -[PKMapsMerchant setCategory:](v4, "setCategory:", [a3 integerValue]);
}

void sub_1002E4DBC(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1002E4DC4(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsMerchant setBusinessChatURL:](v4, "setBusinessChatURL:", v5);
}

void sub_1002E4E10(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKMapsMerchant setLastProcessedDate:](v4, "setLastProcessedDate:", v5);
}

void sub_1002E4E5C(id a1, PKMapsMerchant *a2, id a3)
{
}

id sub_1002E4F48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _migrateAssetsIfNeeded];
}

id sub_1002E56A0(uint64_t a1)
{
  uint64_t v1 = PKHomeDirectoryPath(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"NotificationAssets"]);

  return v3;
}

void sub_1002E612C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002E6274(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentPreferencesRestriction);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1002E6390(id a1, PKPeerPaymentPreferencesRestriction *a2, id a3)
{
}

void sub_1002E6398(id a1, PKPeerPaymentPreferencesRestriction *a2, id a3)
{
  BOOL v4 = a2;
  -[PKPeerPaymentPreferencesRestriction setSendRestrictionType:]( v4,  "setSendRestrictionType:",  [a3 integerValue]);
}

void sub_1002E63DC(id a1, PKPeerPaymentPreferencesRestriction *a2, id a3)
{
  BOOL v4 = a2;
  -[PKPeerPaymentPreferencesRestriction setReceiveRestrictionType:]( v4,  "setReceiveRestrictionType:",  [a3 integerValue]);
}

void sub_1002E6A18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1002E6CD4(id a1, NSMutableString *a2, id a3)
{
}

id sub_1002E736C(id a1, BarcodeFetch *a2)
{
  return -[SQLiteEntity valueForProperty:](a2, "valueForProperty:", @"pass_pid");
}

void sub_1002E7598(uint64_t a1, uint64_t a2)
{
  BOOL v4 = objc_alloc(&OBJC_CLASS___BarcodeFetch);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  [*(id *)(a1 + 40) safelyAddObject:v6];
}

void sub_1002E7F40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id sub_1002E8110(id a1, NSNumber *a2)
{
  return -[NSNumber stringValue](a2, "stringValue");
}

id sub_1002E8164(id a1, NSString *a2)
{
  return +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NSString integerValue](a2, "integerValue"));
}

void sub_1002E82F4(id a1, PKAccountFundingSourceVerification *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountFundingSourceVerification setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002E8338(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v8 = objc_msgSend((id)objc_opt_class(v4, v7), "_optionsFromString:", v5);
  id v9 = (id)objc_claimAutoreleasedReturnValue(v8);

  [v6 setOptions:v9];
}

void sub_1002E83A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v4 database]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AccountFundingSourceVerificationAttempt verificationAttemptForPID:inDatabase:]( &OBJC_CLASS___AccountFundingSourceVerificationAttempt,  "verificationAttemptForPID:inDatabase:",  v5,  v8));

  [v6 setPendingAttempt:v7];
}

void sub_1002E8434(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v4 database]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AccountFundingSourceVerificationAttempt verificationAttemptForPID:inDatabase:]( &OBJC_CLASS___AccountFundingSourceVerificationAttempt,  "verificationAttemptForPID:inDatabase:",  v5,  v8));

  [v6 setFailedAttempt:v7];
}

void sub_1002E8DDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002E9010(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  BOOL v14 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionArchiveLocation);
  objc_msgSend(*(id *)(a1 + 56), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));

  id v7 = *(void **)(a4 + 8LL * *(void *)(a1 + 64));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v7 == v8) {
    id v9 = 0LL;
  }
  else {
    id v9 = *(void **)(a4 + 8LL * *(void *)(a1 + 64));
  }
  id v10 = v9;

  id v11 = [v10 longLongValue];
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreZone cloudStoreZoneWithPID:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "cloudStoreZoneWithPID:inDatabase:",  v11,  v12));

  -[PKPaymentTransactionArchiveLocation setCloudStoreZone:](v14, "setCloudStoreZone:", v13);
  if (v14) {
    [*(id *)(a1 + 48) addObject:v14];
  }
}

void sub_1002E931C(id a1, PKPaymentTransactionArchiveLocation *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransactionArchiveLocation setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002E9360(id a1, PKPaymentTransactionArchiveLocation *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransactionArchiveLocation setArchived:](v4, "setArchived:", [a3 BOOLValue]);
}

void sub_1002E94FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountPaymentReminder),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountPaymentReminder paymentReminder](v5, "paymentReminder"));
  [v3 addObject:v4];
}

id sub_1002E9794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountPaymentReminder,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002E992C(id a1, PKAccountPaymentReminder *a2, id a3)
{
}

void sub_1002E9934(id a1, PKAccountPaymentReminder *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountPaymentReminder setMinimumDue:](v4, "setMinimumDue:", v6);
}

void sub_1002E9984(id a1, PKAccountPaymentReminder *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPaymentReminder setPaymentDueDate:](v4, "setPaymentDueDate:", v5);
}

void sub_1002E9BE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002E9BFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002E9C0C(uint64_t a1)
{
}

BOOL sub_1002E9C14(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_1002E9DB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _BYTE *a6)
{
  id result = [*(id *)(a1 + 32) setFooter:a4[1]];
  *a6 = 1;
  return result;
}

void sub_1002EA74C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002EA7F4;
  block[3] = &unk_10063B300;
  char v12 = a2;
  id v10 = v6;
  id v11 = v5;
  id v8 = v5;
  dispatch_async(v7, block);
  [*(id *)(a1 + 32) _processPendingUpdates];
}

void sub_1002EA7F4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  (*((void (**)(id, void, void))v2 + 2))(v2, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_1002EA83C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"N";
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412802;
    if (a2) {
      id v8 = @"Y";
    }
    id v11 = v8;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDDynamicAssociatedDomainService: Set additional service details with success: %@ error: %@. \n Domains registered: %@",  (uint8_t *)&v10,  0x20u);
  }

  [*(id *)(a1 + 40) _storeDomains:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
}

id sub_1002EAC50(id a1, PDDynamicAssociatedDomainPattern *a2)
{
  id v5 = @"/";
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[PDDynamicAssociatedDomainPattern uri](a2, "uri"));
  id v6 = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));

  return v3;
}

void sub_1002EB150(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002EB344(id a1, PKAccountUserNotificationSettings *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountUserNotificationSettings setTransactionNotificationsEnabled:]( v4,  "setTransactionNotificationsEnabled:",  [a3 BOOLValue]);
}

void sub_1002EB388(id a1, PKAccountUserNotificationSettings *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountUserNotificationSettings setTransactionNotificationThreshold:]( v4,  "setTransactionNotificationThreshold:",  v6);
}

void sub_1002EB3D8(id a1, PKAccountUserNotificationSettings *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountUserNotificationSettings setMonthlySpendNotificationThreshold:]( v4,  "setMonthlySpendNotificationThreshold:",  v6);
}

void sub_1002EB5A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1002EB5C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002EB5D0(uint64_t a1)
{
}

void sub_1002EB5D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = a3;
  id v10 = -[PKDeviceEnvironment _init](objc_alloc(&OBJC_CLASS___PKDeviceEnvironment), "_init");
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int16 v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) withProperties:v9 values:a4];
  *a6 = 1;
}

void sub_1002EB768( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002EB780(uint64_t a1)
{
  id v19 = 0LL;
  uint64_t v2 = PKDeviceEnvironmentClientToString(*(void *)(a1 + 56), &v19);
  if ((_DWORD)v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _predicateForDeviceEnvironmentWithClientIdentifier:v19]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) anyInDatabase:*(void *)(a1 + 32) predicate:v3]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) countryCode]);
      [v7 setValue:v8 forProperty:@"country_code"];

      id v9 = *(void **)(a1 + 40);
      id v10 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 deviceLanguage]);
      [v10 setValue:v11 forProperty:@"device_language"];
    }

    else
    {
      id v12 = objc_alloc(*(Class *)(a1 + 64));
      id v13 = v19;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) countryCode]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceLanguage]);
      id v15 = [v12 initWithClientIdentifier:v13 countryCode:v11 deviceLanguage:v14 database:*(void *)(a1 + 32)];
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
      __int128 v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
    }
  }

  return v2;
}

void sub_1002EBA44(id a1, PKDeviceEnvironment *a2, id a3)
{
}

void sub_1002EBA4C(id a1, PKDeviceEnvironment *a2, id a3)
{
}

void sub_1002EBD5C(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: checking for market support in response to API",  buf,  2u);
    }

    id v5 = PDDefaultQueue();
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002EBE2C;
    v9[3] = &unk_1006392B0;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = v7;
    uint64_t v11 = v8;
    dispatch_async(v6, v9);
  }

id sub_1002EBE2C(uint64_t a1)
{
  return _[*(id *)(a1 + 40) _startLocationMonitoring];
}

void sub_1002EBFC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) _beginReportingIfNecessary];
    [*(id *)(a1 + 32) _reportExpressNotificationForMarket:*(void *)(a1 + 40) eligibleMarkets:*(void *)(a1 + 48) pass:*(void *)(a1 + 56) pageTag:PKAnalyticsReportExpressGeolocationEnableNotificationPageTag isReferredFromWatch:1];
    [*(id *)(a1 + 32) _endReportingIfNecessary];
    [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:v3];
    [*(id *)(a1 + 32) _schedulePromotedExpressModeNotificationDemotion:v3];
    [*(id *)(a1 + 32) _recordNotificationType:101 sentForMarket:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
      int v8 = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: missing transit Notification. fail to post pass upgraded notification for market:% @ pass with uniqueID:%@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1002EC254(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:v3];
    [*(id *)(a1 + 32) _recordNotificationType:101 sentForMarket:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
      int v8 = 138412546;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: missing transit Notification. fail to post Upgrade Selection Notification for mark et:%@ pass with uniqueID:%@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1002EC518(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = PKIsPhone(a1, a2);
  if ((v3 & 1) == 0 && (PKIsWatch(v3) & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      id v7 = "PDTransitNotificationService: should not schedule notification because device is not supported";
      goto LABEL_19;
    }

void sub_1002ECA08(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) marketsURL]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1002ECB54;
    void v13[3] = &unk_100654AB0;
    uint64_t v4 = *(void **)(a1 + 48);
    void v13[4] = *(void *)(a1 + 40);
    id v14 = v4;
    +[PKPaymentMarketsConfiguration paymentMarketsConfigurationWithURL:forDeviceClass:version:completion:]( &OBJC_CLASS___PKPaymentMarketsConfiguration,  "paymentMarketsConfigurationWithURL:forDeviceClass:version:completion:",  v3,  0LL,  0LL,  v13);

    uint64_t v5 = v14;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send notification due to notifications being disabled",  buf,  2u);
    }

    id v8 = PDDefaultQueue();
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002ECD44;
    block[3] = &unk_10063A830;
    id v11 = *(id *)(a1 + 48);
    dispatch_async(v9, block);

    uint64_t v5 = v11;
  }
}

void sub_1002ECB54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v16[0] = 0LL;
  v16[1] = v16;
  v16[2] = 0x2020000000LL;
  char v17 = 0;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 markets]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1002ECCD4;
    v15[3] = &unk_100654A88;
    void v15[4] = *(void *)(a1 + 32);
    v15[5] = v16;
    [v7 enumerateObjectsUsingBlock:v15];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send notification because markets could not be loaded",  buf,  2u);
    }
  }

  id v9 = PDDefaultQueue();
  __int16 v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1002ECD2C;
  v11[3] = &unk_1006412D0;
  id v12 = *(id *)(a1 + 40);
  uint64_t v13 = v16;
  dispatch_async(v10, v11);

  _Block_object_dispose(v16, 8);
}

void sub_1002ECCBC(_Unwind_Exception *a1)
{
}

id sub_1002ECCD4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id result = [*(id *)(a1 + 32) _eligibleNotificationsForTransitMarket:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v6 + 24)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = result == 0LL;
  }
  char v8 = !v7;
  *(_BYTE *)(v6 + 24) = v8;
  *a3 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

uint64_t sub_1002ECD2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

uint64_t sub_1002ECD44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002ED578( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1002ED5A8(uint64_t a1, void *a2)
{
  id result = objc_msgSend( *(id *)(a1 + 32),  "contextMeetsMarketGeoNotificationThresholdForRegion:paymentNetwork:",  *(void *)(a1 + 40),  objc_msgSend(a2, "integerValue"));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) |= result;
  return result;
}

id sub_1002EDB74(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(12LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: stopped monitoring location due to timeout",  v5,  2u);
  }

  return [*(id *)(a1 + 32) _cleanupLocationMonitoring];
}

void sub_1002EE000(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5)
  {
    BOOL v7 = *(void **)(*(void *)(a1 + 32) + 32LL);
    char v8 = (void *)objc_claimAutoreleasedReturnValue([v5 notificationIdentifier]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002EE100;
    v9[3] = &unk_100654B00;
    void v9[4] = *(void *)(a1 + 32);
    id v10 = v6;
    id v12 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    uint64_t v13 = a3;
    [v7 userNotificationWithIdentifier:v8 completion:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1002EE100(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (!v3 || ([v3 isActive] & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___PDPassExpressModeEnabledUserNotification, v5);
    if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0) {
      [*(id *)(a1 + 32) _schedulePromotedExpressModeNotificationDemotion:*(void *)(a1 + 40)];
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1002EE18C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  atomic_store(0, (unsigned __int8 *)(*(void *)(a1 + 32) + 120LL));
  if (v5 && a3 == 2)
  {
    [*(id *)(a1 + 32) _beginReportingIfNecessary];
    [*(id *)(a1 + 32) _reportExpressEnable:*(void *)(a1 + 40) eligibleMarkets:*(void *)(a1 + 48) pass:v5];
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1002EE2E8;
    v15[3] = &unk_100654B50;
    id v9 = *(id *)(a1 + 64);
    void v15[4] = *(void *)(a1 + 32);
    id v16 = v9;
    [v6 _expressNotificationForMarket:v7 eligibleMarkets:v8 pass:v5 expressUpgrade:1 isReferredFromWatch:0 completion:v15];
    id v10 = v16;
  }

  else
  {
    id v11 = *(void **)(a1 + 32);
    if (a3 != 3)
    {
      [*(id *)(a1 + 32) _beginReportingIfNecessary];
      [*(id *)(a1 + 32) _reportExpressModeEnableFailed:*(void *)(a1 + 40) eligibleMarkets:*(void *)(a1 + 48) pass:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _endReportingIfNecessary];
      goto LABEL_8;
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1002EE318;
    void v13[3] = &unk_100654B78;
    uint64_t v12 = *(void *)(a1 + 56);
    id v14 = *(id *)(a1 + 64);
    [v11 _expressUpgradesAvailableNotificationForPass:v12 completion:v13];
    id v10 = v14;
  }

LABEL_8:
}

id sub_1002EE2E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _endReportingIfNecessary];
}

uint64_t sub_1002EE318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1002EE328(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EE5D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || !v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      if (*(_BYTE *)(a1 + 48)) {
        id v11 = @"re-";
      }
      else {
        id v11 = &stru_100662310;
      }
      int v17 = 138412546;
      unsigned __int8 v18 = v11;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Multiple products %@notification using default strings for market: %@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v12 = PKLocalizedTransitString(@"TRANSIT_MARKET_NOTIFICATION_TITLE");
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);

    uint64_t v14 = PKLocalizedTransitString(@"TRANSIT_MARKET_GEO_NOTIFICATION_MESSAGE_MULTIPLE_PRODUCTS_MARKET_NONE");
    uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);

    uint64_t v7 = (void *)v15;
    id v5 = (id)v13;
  }

  id v16 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v5,  v7);
  -[PDUserNotification setCustomActionRoute:](v16, "setCustomActionRoute:", PKURLActionPaymentSetupSelectPaymentNetwork);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002EE758(uint64_t a1, void *a2, void *a3)
{
  id v26 = a2;
  id v5 = a3;
  if (v26)
  {
    id v6 = (NSBundle *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v26));
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(_BYTE *)(a1 + 48))
      {
        uint64_t v8 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY_IPHONE", v6);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v10 = PKLocalizedStringInMarketBundle( @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY_IPHONE",  v7);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        if (!v9
          || (uint64_t v12 = @"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY_IPHONE",
              [v9 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY_IPHONE"]))
        {
          uint64_t v12 = @"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY";
          uint64_t v13 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY", v7);
          uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);

          id v9 = (void *)v14;
        }

        if (!v11
          || (uint64_t v15 = @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY_IPHONE",
              [v11 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY_IPHONE"]))
        {
          uint64_t v15 = @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY";
          uint64_t v16 = PKLocalizedStringInMarketBundle( @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY",  v7);
          uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);

          id v11 = (void *)v17;
        }

        if (v9 && ![v9 isEqualToString:v12])
        {
          if (!v11) {
            goto LABEL_18;
          }
LABEL_17:
          if (![v11 isEqualToString:v15])
          {
LABEL_19:
            if (!v9 || [v9 isEqualToString:v12])
            {
              uint64_t v22 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE", v7);
              id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

              if (![v23 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE"])
              {
                id v9 = v23;
                if (!v11) {
                  goto LABEL_27;
                }
LABEL_26:
                if (![v11 isEqualToString:v15])
                {
LABEL_30:
                  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

                  goto LABEL_31;
                }

void sub_1002EECF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || !v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 64)) {
        uint64_t v10 = @"re-";
      }
      else {
        uint64_t v10 = &stru_100662310;
      }
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412802;
      double v28 = v10;
      __int16 v29 = 2112;
      uint64_t v30 = v11;
      __int16 v31 = 2112;
      uint64_t v32 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Using default strings for %@notification of product with name:%@ in market:%@",  buf,  0x20u);
    }

    uint64_t v13 = PKLocalizedTransitString(@"TRANSIT_MARKET_NOTIFICATION_TITLE");
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);

    uint64_t v15 = PKLocalizedTransitString(@"TRANSIT_MARKET_GEO_NOTIFICATION_MESSAGE_TRANSIT_PRODUCT_MARKET_NONE_FORMAT");
    uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);

    uint64_t v7 = (void *)v16;
    id v5 = (id)v14;
  }

  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v17 = PKStringWithValidatedFormat(v7, @"%@");
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v5,  v18,  v26);
  uint64_t v20 = PKPaymentNetworkNameForPaymentCredentialType([*(id *)(a1 + 48) credentialType]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = PKURLActionPaymentSetupSelectPaymentNetwork;
  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transitNetworkIdentifier]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v22, v21, v23, 0LL));
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v24));

  -[PDUserNotification setCustomActionRoute:](v19, "setCustomActionRoute:", v25);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1002EEF40(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  if (!v17
    || (id v6 = (NSBundle *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v17))) == 0LL)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_17;
  }

  uint64_t v7 = v6;
  if (!*(_BYTE *)(a1 + 48))
  {
    uint64_t v10 = 0LL;
    uint64_t v12 = 0LL;
    id v9 = 0LL;
    goto LABEL_9;
  }

  uint64_t v8 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY", v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = @"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_RENOTIFY_FORMAT";
  uint64_t v11 = PKLocalizedStringInMarketBundle( @"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_RENOTIFY_FORMAT",  v7);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (!v9
    || (uint64_t v13 = v9, [v9 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY"]))
  {
LABEL_9:
    uint64_t v14 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE", v7);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v14);

    if ([v13 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE"])
    {

      uint64_t v13 = 0LL;
    }
  }

  if (!v12 || [v12 isEqualToString:v10])
  {
    uint64_t v15 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_FORMAT", v7);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

    if ([v16 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_FORMAT"])
    {

      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = v16;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_17:
}

void sub_1002EF4B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 && v6)
  {
LABEL_16:
    uint64_t v38 = *(void *)(a1 + 40);
    uint64_t v21 = PKStringWithValidatedFormat(v7, @"%@");
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    id v23 = objc_alloc(&OBJC_CLASS___PDPassExpressModeEnabledUserNotification);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "uniqueID", v38));
    uint64_t v25 = *(void *)(a1 + 88);
    [*(id *)(a1 + 32) expressUpgradePromoteDuration];
    uint64_t v26 = -[PDPassExpressModeEnabledUserNotification initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:]( v23,  "initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:",  v5,  v22,  v24,  v25);

    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification customActionQueryParameters](v26, "customActionQueryParameters"));
    if (v27)
    {
      double v28 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification customActionQueryParameters](v26, "customActionQueryParameters"));
      __int16 v29 = (NSMutableDictionary *)[v28 mutableCopy];
    }

    else
    {
      __int16 v29 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) analyticsReportingNameValue]);
    if (v30)
    {
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) analyticsReportingNameValue]);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v31,  PKUserNotificationActionQueryItemMarketName);
    }

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) region]);

    if (v32)
    {
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) region]);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v33,  PKUserNotificationActionQueryItemMarketRegion);
    }

    if (*(void *)(a1 + 56))
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "_eligibleMarketNames:"));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v34,  PKUserNotificationActionQueryItemEligibleMarkets);
    }

    if (*(_BYTE *)(a1 + 97)) {
      id v35 = &PKAnalyticsReportReferralSourceWatchApp;
    }
    else {
      id v35 = &PKAnalyticsReportReferralSourceWallet;
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  *v35,  PKUserNotificationActionQueryItemReferralSource);
    uint64_t v36 = *(void *)(a1 + 72);
    if (v36) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v36,  PKUserNotificationActionQueryItemMarketNotificationAssetIdentifier);
    }
    -[PDUserNotification setCustomActionQueryParameters:](v26, "setCustomActionQueryParameters:", v29);
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();

    goto LABEL_31;
  }

  if (PKAllowExpressRenotifyNotificationDefaultStrings())
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Allowing default strings for express re-notify due to internal setting ON",  buf,  2u);
    }

    goto LABEL_8;
  }

  int v10 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v11 = PKLogFacilityTypeGetObject(12LL);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  id v9 = v12;
  if (v10)
  {
LABEL_8:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      id v40 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Using default strings for express notification for market: %@",  buf,  0xCu);
    }

    if (PKIsWatch(v14))
    {
      uint64_t v15 = PKLocalizedTransitString(@"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_NOTIFICATION_TITLE_WATCH");
      uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);

      if (*(void *)(a1 + 88) == 1LL) {
        id v17 = @"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_MARKET_NONE_FORMAT_WATCH";
      }
      else {
        id v17 = @"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_MARKET_NONE_FORMAT_WATCH_DISABLE_ACTION";
      }
    }

    else
    {
      uint64_t v18 = PKLocalizedTransitString(@"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_NOTIFICATION_TITLE");
      uint64_t v16 = objc_claimAutoreleasedReturnValue(v18);

      id v17 = @"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_MARKET_NONE_FORMAT";
    }

    id v5 = (id)v16;
    uint64_t v19 = PKLocalizedTransitString(&v17->isa);
    uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);

    uint64_t v7 = (void *)v20;
    goto LABEL_16;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412802;
    id v40 = v5;
    __int16 v41 = 2112;
    uint64_t v42 = v7;
    __int16 v43 = 2112;
    uint64_t v44 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Canceling express re-notify notification due to missing mobile asset, title (%@) and /or message (%@) for market: %@",  buf,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
LABEL_31:
}

void sub_1002EF8CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(12LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v20 = 138412802;
    id v21 = v5;
    __int16 v22 = 2112;
    uint64_t v23 = v9;
    __int16 v24 = 2112;
    id v25 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: downloaded mobile assets: %@ for market: %@ with error: %@",  (uint8_t *)&v20,  0x20u);
  }

  if (v5
    && (uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v5))) != 0)
  {
    uint64_t v11 = (NSBundle *)v10;
    if (*(_BYTE *)(a1 + 56)) {
      uint64_t v12 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_UPGRADE_TITLE";
    }
    else {
      uint64_t v12 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_RENOTIFY_TITLE";
    }
    uint64_t v13 = v12;
    uint64_t v14 = PKLocalizedStringInMarketBundle(v13, v11);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (*(_BYTE *)(a1 + 56)) {
      uint64_t v16 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_FORMAT";
    }
    else {
      uint64_t v16 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_RENOTIFY_MESSAGE_FORMAT";
    }
    id v17 = v16;
    uint64_t v18 = PKLocalizedStringInMarketBundle(v17, v11);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (v15 && [v15 isEqualToString:v13])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412290;
        id v21 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Clearing failed mobile asset express upgrade notification title: %@",  (uint8_t *)&v20,  0xCu);
      }

      uint64_t v15 = 0LL;
    }

    if (v19 && [v19 isEqualToString:v17])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412290;
        id v21 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Clearing failed mobile asset express upgrade notification message: %@",  (uint8_t *)&v20,  0xCu);
      }

      uint64_t v19 = 0LL;
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_1002F03CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 rangeOfString:@":"];
  if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v5 = 0LL;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 substringToIndex:v4]);
    id v5 = [v6 isEqualToString:*(void *)(a1 + 32)];
  }

  return v5;
}

uint64_t sub_1002F0B80(uint64_t a1, void *a2)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "paymentApplications", 0));
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        id v9 = [v8 paymentNetworkIdentifier];
        uint64_t v10 = *(void **)(a1 + 32);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v9));
        if ([v10 containsObject:v11])
        {
          unsigned __int8 v12 = [v8 _supportsTransitNetworks:*(void *)(a1 + 40)];

          if ((v12 & 1) != 0)
          {
            uint64_t v13 = 1LL;
            goto LABEL_13;
          }
        }

        else
        {
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v5);
  }

  uint64_t v13 = 0LL;
LABEL_13:

  return v13;
}

void sub_1002F0E90(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1002F0FF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = PDDefaultQueue();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  PDScheduledActivityClientRegister(@"PDTransitNotificationService", v1, v3);
}

void sub_1002F1090(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKCurrentRegion();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);

  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 configuration]);
  unsigned int v8 = [v7 shouldEnableTransitServiceCheckInForRegion:v5];

  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v12 = (void *)objc_opt_class(*(void *)(a1 + 32), v11);
      int v19 = 138412290;
      int v20 = v12;
      id v13 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: Scheduling check in due to config",  (uint8_t *)&v19,  0xCu);
    }

    [*(id *)(a1 + 32) _connect];
    uint64_t Criteria = PDScheduledActivityGetCriteria( @"PDTransitNotificationService",  @"PDTransitNotificationServiceCheckIn");
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(Criteria);
    if (!v15)
    {
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _startTime]);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v16));

      [v17 setRequireNetworkConnectivity:1];
      [v17 setRequireMainsPower:1];
      [v17 setRequireScreenSleep:1];
      [v17 setRepeating:1];
      [v17 setRepeatInterval:86400.0];
      [v17 setReason:@"PDTransitNotificationServiceCheckIn"];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 debugDescription]);
        int v19 = 138412290;
        int v20 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Scheduling transit check in: %@",  (uint8_t *)&v19,  0xCu);
      }

      PDScheduledActivityRegister( @"PDTransitNotificationService",  @"PDTransitNotificationServiceCheckIn",  v17);
    }
  }
}

void sub_1002F17B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if ([v3 isActive])
    {
      uint64_t v6 = objc_opt_class(&OBJC_CLASS___PDPassExpressModeEnabledUserNotification, v5);
      if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(12LL);
        unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 138412290;
          unsigned __int8 v12 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Demoting PDPassExpressModeEnabledUserNotification %@ to no longer be stuck to recents",  (uint8_t *)&v11,  0xCu);
        }

        id v9 = v4;
        id v10 = -[PDPassExpressModeEnabledUserNotification initAsUnpromotedReplacementForNotification:]( objc_alloc(&OBJC_CLASS___PDPassExpressModeEnabledUserNotification),  "initAsUnpromotedReplacementForNotification:",  v9);
        [*(id *)(*(void *)(a1 + 32) + 32) removeUserNotification:v9];
        [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:v10];
      }
    }
  }

  PDScheduledActivityRemove(@"PDTransitNotificationService", *(void *)(a1 + 40));
}

void sub_1002F1D84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v7 = v6;
  if (v5)
  {
    id v25 = v6;
    unsigned int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 marketsForLocation:*(void *)(a1 + 40) ofType:1]);
    id v10 = [v9 countByEnumeratingWithState:&v36 objects:v42 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v37;
      do
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v37 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)i);
          id v15 = objc_msgSend(*(id *)(a1 + 48), "_eligibleNotificationsForTransitMarket:", v14, v25);
          if (v15)
          {
            __int128 v16 = -[PKNotifiablePaymentMarket initWithPaymentMarket:eligibleNotifiableState:]( objc_alloc(&OBJC_CLASS___PKNotifiablePaymentMarket),  "initWithPaymentMarket:eligibleNotifiableState:",  v14,  v15);
            -[NSMutableSet pk_safelyAddObject:](v8, "pk_safelyAddObject:", v16);
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v36 objects:v42 count:16];
      }

      while (v11);
    }

    if (-[NSMutableSet count](v8, "count"))
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
      __int128 v17 = *(void **)(a1 + 48);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) targetDevice]);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_1002F20D0;
      v26[3] = &unk_100654D30;
      __int16 v27 = (os_log_s *)*(id *)(a1 + 32);
      int v19 = v8;
      uint64_t v20 = *(void *)(a1 + 48);
      double v28 = v19;
      uint64_t v29 = v20;
      id v30 = *(id *)(a1 + 72);
      id v31 = *(id *)(a1 + 80);
      id v32 = *(id *)(a1 + 88);
      id v33 = *(id *)(a1 + 96);
      id v34 = *(id *)(a1 + 56);
      id v35 = *(id *)(a1 + 104);
      [v17 _availableProductsForNotifiableMarkets:v19 filteredForTargetDevice:v18 completion:v26];

      id v21 = v27;
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(12LL);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v24 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v41 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: missing markets for location:%@",  buf,  0xCu);
      }
    }

    __int128 v7 = v25;
  }

  else
  {
    uint64_t v22 = PKLogFacilityTypeGetObject(12LL);
    unsigned int v8 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v41 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: failed to download market configurations (error: %@)",  buf,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1002F20D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1002F2258;
  v12[3] = &unk_100654D08;
  id v5 = *(void **)(a1 + 40);
  void v12[4] = *(void *)(a1 + 48);
  id v6 = v3;
  id v13 = v6;
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 72);
  __int128 v7 = v4;
  __int128 v17 = v7;
  id v18 = *(id *)(a1 + 80);
  [v5 enumerateObjectsUsingBlock:v12];
  if (-[NSMutableSet count](v7, "count"))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 88));
    unsigned int v8 = *(void **)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002F2388;
    v9[3] = &unk_100640DF8;
    id v10 = *(id *)(a1 + 96);
    id v11 = *(id *)(a1 + 88);
    [v8 _expressRenotifiableOpenLoopPassesForViableMarkets:v7 completion:v9];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_1002F2258(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue([v3 market]);
  unsigned int v4 = [v3 isDCINotifiable];
  unsigned int v5 = [v3 isExpressUpgradeNotifiable];
  unsigned int v6 = [v3 isDCIRenotifiable];
  unsigned int v7 = [v3 isExpressRenotifiable];

  if ((v4 & 1) != 0 || v6)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _transitProducts:*(void *)(a1 + 40) forMarket:v10]);
    if (!v4) {
      goto LABEL_8;
    }
  }

  else
  {
    unsigned int v8 = 0LL;
    if (!v4) {
      goto LABEL_8;
    }
  }

  if ([v8 count]) {
    [*(id *)(a1 + 48) unionSet:v8];
  }
LABEL_8:
  if (v5)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _expressUpgradeableOpenLoopPassesForMarket:v10]);
    if ([v9 count]) {
      [*(id *)(a1 + 56) unionSet:v9];
    }
  }

  if (v6 && [v8 count]) {
    [*(id *)(a1 + 64) unionSet:v8];
  }
  if (v7) {
    [*(id *)(a1 + 72) addObject:v10];
  }
  [*(id *)(a1 + 80) addObject:v10];
}

void sub_1002F2388(uint64_t a1, uint64_t a2)
{
}

void sub_1002F23B4(uint64_t a1)
{
  id v2 = (char *)[*(id *)(a1 + 32) count];
  id v3 = &v2[(void)[*(id *)(a1 + 40) count]];
  unsigned int v4 = (char *)[*(id *)(a1 + 48) count] + (void)v3;
  if ((char *)[*(id *)(a1 + 56) count] + (void)v4)
  {
    unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PKPaymentMarketsConfiguration closestMarketFromSet:forLocation:]( &OBJC_CLASS___PKPaymentMarketsConfiguration,  "closestMarketFromSet:forLocation:",  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    unsigned int v7 = *(void **)(a1 + 80);
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v8 = *(void **)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1002F252C;
    void v16[3] = &unk_100654DA8;
    id v13 = v8;
    uint64_t v14 = *(void *)(a1 + 80);
    id v17 = v13;
    uint64_t v18 = v14;
    id v19 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 40);
    [v7 _postNotificationForMarket:v6 eligibleMarkets:v13 transitProducts:v10 upgradeableOpenLoopPasses:v11 renotifiableProducts:v12 renotifi ablePasses:v9 completion:v16];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: no products available for location",  buf,  2u);
    }
  }
}

void sub_1002F252C(id *a1, int a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a2)
  {
    if ([a1[4] count])
    {
      [a1[5] _recordNotificationType:a4 sentForMarkets:a1[4]];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(12LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v25 = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Warning - Notification type (%lu) posted representing no transit markets. Skippi ng state update.",  buf,  0xCu);
      }
    }

    if (a4 == 101)
    {
      uint64_t v10 = a1 + 5;
      [a1[5] _beginReportingIfNecessary];
      id v19 = a1[4];
      id v18 = a1[5];
      id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[7] anyObject]);
      uint64_t v14 = PKAnalyticsReportExpressGeolocationEnableNotificationPageTag;
      id v15 = v18;
      id v16 = v7;
      id v17 = v19;
    }

    else
    {
      if (a4 != 103)
      {
LABEL_12:
        id v20 = a1[5];
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        v21[2] = sub_1002F270C;
        v21[3] = &unk_100654D80;
        uint64_t v23 = a4;
        v21[4] = v20;
        id v22 = v7;
        [v20 _accessObserversWithHandler:v21];

        goto LABEL_13;
      }

      uint64_t v10 = a1 + 5;
      [a1[5] _beginReportingIfNecessary];
      id v11 = a1[4];
      id v12 = a1[5];
      id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] anyObject]);
      uint64_t v14 = PKAnalyticsReportExpressGeolocationEnableNotificationPageTag;
      id v15 = v12;
      id v16 = v7;
      id v17 = v11;
    }

    [v15 _reportExpressNotificationForMarket:v16 eligibleMarkets:v17 pass:v13 pageTag:v14 isReferredFromWatch:0];

    [*v10 _endReportingIfNecessary];
    goto LABEL_12;
  }

void sub_1002F270C(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  uint64_t v5 = a1[6];
  uint64_t v9 = v3;
  if ((unint64_t)(v5 - 102) < 2)
  {
    char v8 = objc_opt_respondsToSelector(v3, "transitNotificationService:didAddRenotifyNotificationForMarket:");
    unsigned int v4 = v9;
    if ((v8 & 1) != 0)
    {
      [v9 transitNotificationService:a1[4] didAddRenotifyNotificationForMarket:a1[5]];
      goto LABEL_10;
    }
  }

  else
  {
    if (v5 != 101)
    {
      if (v5 != 100) {
        goto LABEL_11;
      }
      char v6 = objc_opt_respondsToSelector(v3, "transitNotificationService:didAddDCINotificationForMarket:");
      unsigned int v4 = v9;
      if ((v6 & 1) != 0)
      {
        [v9 transitNotificationService:a1[4] didAddDCINotificationForMarket:a1[5]];
        unsigned int v4 = v9;
      }
    }

    char v7 = objc_opt_respondsToSelector(v4, "transitNotificationService:didAddOpenLoopUpgradeNotificationForMarket:");
    unsigned int v4 = v9;
    if ((v7 & 1) != 0)
    {
      [v9 transitNotificationService:a1[4] didAddOpenLoopUpgradeNotificationForMarket:a1[5]];
LABEL_10:
      unsigned int v4 = v9;
    }
  }

void sub_1002F2968( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1002F2980(uint64_t a1, void *a2, _BYTE *a3)
{
  id v7 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v7 market]);
  if ([v5 productsRequiredForRegion])
  {
    if ([v7 isDCINotifiable])
    {

LABEL_6:
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      *a3 = 1;
      goto LABEL_7;
    }

    unsigned __int8 v6 = [v7 isDCIRenotifiable];

    if ((v6 & 1) != 0) {
      goto LABEL_6;
    }
  }

  else
  {
  }

void sub_1002F2A14(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002F2AA0;
  v5[3] = &unk_100654DF8;
  id v6 = *(id *)(a1 + 32);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_objectsPassingTest:", v5));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1002F2AA0(uint64_t a1, void *a2)
{
  return _[a2 supportsDevice:*(void *)(a1 + 32)];
}

void sub_1002F2B94(id *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 provisioningMethodTypes]);
  id v5 = [v4 count];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 regions]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] region]);
    unsigned int v8 = [v6 containsObject:v7];

    if (v8)
    {
      uint64_t v23 = 0LL;
      __int16 v24 = &v23;
      uint64_t v25 = 0x2020000000LL;
      uint64_t v26 = 0LL;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 paymentOptions]);
      id v17 = _NSConcreteStackBlock;
      uint64_t v18 = 3221225472LL;
      id v19 = sub_1002F2DD4;
      id v20 = &unk_100654E20;
      id v21 = a1[5];
      id v22 = &v23;
      [v9 enumerateObjectsUsingBlock:&v17];

      if (!v24[3])
      {
LABEL_10:

        _Block_object_dispose(&v23, 8);
        goto LABEL_11;
      }

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "supportedTransitNetworkIdentifiers", v17, v18, v19, v20));
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));
      id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] expressTransitNetworks]);
      if (([v11 intersectsSet:v12] & 1) != 0 || (uint64_t v13 = v24[3], v13 == 103) || v13 == 108)
      {
      }

      else
      {

        if (v13 != 109) {
          goto LABEL_9;
        }
      }

      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___PDTransitNotificationProduct);
      -[PDTransitNotificationProduct setTransitMarket:](v14, "setTransitMarket:", a1[4]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 displayName]);
      -[PDTransitNotificationProduct setDisplayName:](v14, "setDisplayName:", v15);

      -[PDTransitNotificationProduct setCredentialType:](v14, "setCredentialType:", v24[3]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);
      -[PDTransitNotificationProduct setTransitNetworkIdentifier:](v14, "setTransitNetworkIdentifier:", v16);

      [a1[6] addObject:v14];
LABEL_9:

      goto LABEL_10;
    }
  }

void sub_1002F2DB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002F2DD4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [a2 cardType];
  id v7 = *(void **)(a1 + 32);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
  LODWORD(v7) = [v7 containsObject:v8];

  if ((_DWORD)v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
    *a4 = 1;
  }

id sub_1002F30E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 56) upgradeablePaymentApplicationIdentifiersForPass:v3]);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v23 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 devicePaymentApplications]);
  id v6 = [v5 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v25;
    while (2)
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        id v11 = [v10 paymentNetworkIdentifier];
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 applicationIdentifier]);
        if ([v4 containsObject:v12])
        {
          uint64_t v13 = *(void **)(a1 + 40);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v11));
          LODWORD(v13) = [v13 containsObject:v14];

          if ((_DWORD)v13)
          {
            uint64_t v18 = v23;
            id v19 = [*(id *)(*(void *)(a1 + 32) + 56) isPassUpgradeableForExpress:v23];
            id v17 = v19;
            if ((v19 & 1) == 0)
            {
              uint64_t Object = PKLogFacilityTypeGetObject(12LL);
              id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 134217984;
                id v29 = v11;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: default payment pass with supported payment network %ld is unable to be upgraded for express",  buf,  0xCu);
              }
            }

            goto LABEL_19;
          }
        }

        else
        {
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v24 objects:v30 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  uint64_t v15 = PKLogFacilityTypeGetObject(12LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = *(void **)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412290;
    id v29 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: default payment pass is not supported by the market expressCredentials %@",  buf,  0xCu);
  }

  id v17 = 0LL;
  uint64_t v18 = v23;
LABEL_19:

  return v17;
}

void sub_1002F3404(void *a1, void *a2)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1002F352C;
  v12[3] = &unk_100654E98;
  void v12[4] = a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_setByApplyingBlock:", v12));
  if ([v3 count])
  {
    unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v5 = (void *)a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002F3578;
    v9[3] = &unk_100654EE8;
    id v10 = v3;
    id v11 = v4;
    id v6 = v4;
    [v5 enumerateObjectsUsingBlock:v9];
    uint64_t v7 = a1[6];
    id v8 = -[NSMutableSet copy](v6, "copy");
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
  }

  else
  {
    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

id sub_1002F352C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 passUniqueIdentifier]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 passWithUniqueIdentifier:v3]);

  return v4;
}

void sub_1002F3578(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002F3618;
  v5[3] = &unk_100654EC0;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 openLoopExpressCredentialTypes]);
  id v3 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  [v3 enumerateObjectsUsingBlock:v5];
}

void sub_1002F3618(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "paymentApplications", 0));
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(a1 + 32);
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) paymentNetworkIdentifier]));
        LODWORD(v9) = [v9 containsObject:v10];

        if ((_DWORD)v9) {
          [*(id *)(a1 + 40) addObject:v3];
        }
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_1002F449C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_1002F44D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002F44E8(uint64_t a1)
{
}

id sub_1002F44F0(uint64_t a1, uint64_t a2)
{
  if ((objc_opt_respondsToSelector(*(void *)(a1 + 32), "supportsExpressForAutomaticSelectionTechnologyType:") & 1) != 0) {
    return _[*(id *)(a1 + 32) supportsExpressForAutomaticSelectionTechnologyType:a2];
  }
  else {
    return 0LL;
  }
}

void sub_1002F453C(uint64_t a1, uint64_t a2)
{
  id v3 = 0LL;
  +[PKExpressPassInformation extractApplicationIdentifier:subcredentialIdentifier:fromIdentifiers:]( &OBJC_CLASS___PKExpressPassInformation,  "extractApplicationIdentifier:subcredentialIdentifier:fromIdentifiers:",  &v3,  0LL,  a2);
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "pk_safelyAddObject:", v3);
}

BOOL sub_1002F4694(id a1, NSNumber *a2, BOOL *a3)
{
  return (char *)-[NSNumber integerValue](a2, "integerValue", a3) - 1 < (char *)0x63;
}

BOOL sub_1002F46F8(id a1, NSNumber *a2, BOOL *a3)
{
  return -[NSNumber integerValue](a2, "integerValue", a3) > 100;
}

void sub_1002F583C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

uint64_t sub_1002F5884(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002F5894(uint64_t a1)
{
}

void sub_1002F589C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 identifier]);
  [v2 safelySetObject:v3 forKey:v4];
}

void sub_1002F58EC(uint64_t a1, char a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  oslog = v9;
  id v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (void *)objc_opt_class(*(void *)(a1 + 32), v11);
      *(_DWORD *)__int128 buf = 138412546;
      __int16 v43 = v12;
      __int16 v44 = 2112;
      __int128 v45 = v6;
      id v13 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: PDUserEvaluationEnvironment preflight error: %@",  buf,  0x16u);

      id v10 = oslog;
    }

LABEL_19:
    uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v21 = *(id *)(v34 + 40);
    *(void *)(v34 + 40) = 0LL;
    goto LABEL_20;
  }

  if ((a2 & 1) == 0)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = (void *)objc_opt_class(*(void *)(a1 + 32), v30);
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v43 = v31;
      id v32 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: PDUserEvaluationEnvironment preflight failed",  buf,  0xCu);

      id v10 = oslog;
    }

    id v33 = objc_alloc(&OBJC_CLASS___NSError);
    id v6 = -[NSError initWithDomain:code:userInfo:](v33, "initWithDomain:code:userInfo:", PKRulesErrorDomain, 1LL, 0LL);
    goto LABEL_19;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_100442500(v10, v14, v15, v16, v17, v18, v19, v20);
    id v10 = oslog;
  }

  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v21 = *(id *)(a1 + 40);
  id v22 = [v21 countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v39;
    do
    {
      for (i = 0LL; i != v22; i = (char *)i + 1)
      {
        if (*(void *)v39 != v23) {
          objc_enumerationMutation(v21);
        }
        __int128 v25 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "predicate", oslog));
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v26 evaluateWithObject:v7]));
        double v28 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v25 identifier]);
        [v28 setObject:v27 forKeyedSubscript:v29];
      }

      id v22 = [v21 countByEnumeratingWithState:&v38 objects:v46 count:16];
    }

    while (v22);
  }

  id v6 = 0LL;
LABEL_20:

  id v35 = oslog;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
  {
    sub_100442470(v7, oslog);
    id v35 = oslog;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1002F5E14(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (void *)objc_opt_class(*(void *)(a1 + 32), v11);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v40 = v12;
      __int16 v41 = 2112;
      id v42 = v7;
      id v13 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: PDUserEvaluationEnvironment preflight error: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else if ((a2 & 1) != 0)
  {
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v15 = *(id *)(a1 + 40);
    id v16 = [v15 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v35;
      do
      {
        for (i = 0LL; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v35 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)i);
          id v21 = *(void **)(a1 + 32);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v20]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 evaluateUserProperty:v20 withParameter:v22 usingEnvironment:v8]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v23, v20);
        }

        id v17 = [v15 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }

      while (v17);
    }

    __int128 v24 = *(_BYTE **)(a1 + 32);
    if (v24[80]) {
      [v24 overrideValues:v14 forUserProperties:*(void *)(a1 + 40) withParameters:*(void *)(a1 + 48)];
    }
    uint64_t v25 = *(void *)(a1 + 56);
    id v26 = -[NSMutableDictionary copy](v14, "copy");
    (*(void (**)(uint64_t, id, void))(v25 + 16))(v25, v26, 0LL);

    id v7 = 0LL;
  }

  else
  {
    uint64_t v27 = PKLogFacilityTypeGetObject(16LL);
    double v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = (void *)objc_opt_class(*(void *)(a1 + 32), v29);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v40 = v30;
      id v31 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@: PDUserEvaluationEnvironment preflight failed",  buf,  0xCu);
    }

    id v32 = objc_alloc(&OBJC_CLASS___NSError);
    id v33 = -[NSError initWithDomain:code:userInfo:](v32, "initWithDomain:code:userInfo:", PKRulesErrorDomain, 1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1002F717C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002F7194(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(35LL);
  id v6 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
  id v7 = *(const void **)(a1 + 32);
  id v8 = a3;
  os_signpost_id_t v9 = os_signpost_id_make_with_pointer(v6, v7);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v10 = v9;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v10,  "discovery:preflightEnvironment",  "",  v11,  2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002F77C4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1002F7EA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  __int128 v12 = objc_alloc_init(&OBJC_CLASS___PKPayLaterAppliedPayment);
  id v8 = objc_alloc(&OBJC_CLASS___PayLaterAppliedPayment);
  os_signpost_id_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  os_signpost_id_t v10 = -[SQLiteEntity initWithPersistentID:inDatabase:](v8, "initWithPersistentID:inDatabase:", a2, v9);

  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v12 withProperties:v7 values:a4];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterAppliedPayment _amountApplied](v10, "_amountApplied"));
  -[PKPayLaterAppliedPayment setAmountApplied:](v12, "setAmountApplied:", v11);

  [*(id *)(a1 + 48) safelyAddObject:v12];
}

void sub_1002F836C(id a1, PKPayLaterAppliedPayment *a2, id a3)
{
}

void sub_1002F8D58(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentCommutePlanDetail),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
    -[SQLiteEntity deleteFromDatabase](v3, "deleteFromDatabase");
  }

void sub_1002F8FD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  os_signpost_id_t v9 = objc_alloc_init(&OBJC_CLASS___PKPaymentCommutePlanDetail);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v6 values:a4];

  id v7 = *(void **)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentCommutePlanDetail _postProcessValue:]( &OBJC_CLASS___PaymentCommutePlanDetail,  "_postProcessValue:",  v9));
  [v7 addObject:v8];
}

id sub_1002F9158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentCommutePlanDetail,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002F9324(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_1002F932C(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_1002F9334(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_1002F933C(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_1002F9344(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentCommutePlanDetail setValue:](v4, "setValue:", [a3 integerValue]);
}

void sub_1002F9388(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentCommutePlanDetail setStartDate:](v4, "setStartDate:", v5);
}

void sub_1002F93D4(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentCommutePlanDetail setExpiryDate:](v4, "setExpiryDate:", v5);
}

void sub_1002F9420(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentCommutePlanDetail setLastUpdateDate:](v4, "setLastUpdateDate:", v5);
}

void sub_1002F9760(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002F9B6C(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourcePaymentPassDetails setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002F9BB0(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_1002F9BB8(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_1002F9BC0(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_1002F9BC8(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_1002F9BD0(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourcePaymentPassDetails setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_1002F9C14(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourcePaymentPassDetails setCardNetwork:](v4, "setCardNetwork:", [a3 integerValue]);
}

void sub_1002F9D08(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourceBankDetails setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002F9D4C(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
}

void sub_1002F9D54(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
}

void sub_1002F9D5C(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
}

void sub_1002F9DEC(id a1, PKPayLaterFundingSourceAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourceAccountDetails setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002F9E30(id a1, PKPayLaterFundingSourceAccountDetails *a2, id a3)
{
}

void sub_1002FA2B0(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___ValueAddedServiceTransaction),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
    *a4 = !-[ValueAddedServiceTransaction deleteFromDatabase](v5, "deleteFromDatabase");
  }

id sub_1002FAC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___ValueAddedServiceTransaction,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002FAFFC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKValueAddedServiceTransaction);
  [*(id *)(a1 + 40) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];
}

void sub_1002FB13C(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
}

void sub_1002FB144(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
}

void sub_1002FB14C(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKValueAddedServiceTransaction setDidSucceed:](v4, "setDidSucceed:", [a3 BOOLValue]);
}

void sub_1002FB190(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
}

void sub_1002FB198(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKValueAddedServiceTransaction setTerminalMode:](v4, "setTerminalMode:", [a3 integerValue]);
}

void sub_1002FB1DC(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKValueAddedServiceTransaction setTransactionDate:](v4, "setTransactionDate:", v5);
}

void sub_1002FB600(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1002FB8BC(id a1, NSMutableString *a2, id a3)
{
}

void sub_1002FBCC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002FBCD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002FBCE8(uint64_t a1)
{
}

BOOL sub_1002FBCF0(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_1002FBE48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  os_signpost_id_t v9 = *(void **)(a1 + 40);
  id v10 = a3;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_1002FC1C8(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC1D0(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setCredentialType:](v4, "setCredentialType:", [a3 integerValue]);
}

void sub_1002FC214(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC21C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_1002FC260(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC268(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC270(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC278(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPendingPaymentRemoteCredential setPassURL:](v4, "setPassURL:", v5);
}

void sub_1002FC2C4(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setSupportsSuperEasyProvisioning:]( v4,  "setSupportsSuperEasyProvisioning:",  [a3 BOOLValue]);
}

void sub_1002FC308(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setCouldSupportSuperEasyProvisioning:]( v4,  "setCouldSupportSuperEasyProvisioning:",  [a3 BOOLValue]);
}

void sub_1002FC34C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC354(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_1002FC558(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 feature];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 context]);

  uint64_t v7 = PKPassKitBundle();
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  os_signpost_id_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 applyServicePreferredLanguageForFeatureIdentifier:v5 mainLanguageBundle:v8]);

  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 56LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002FC664;
  block[3] = &unk_100655A00;
  id v14 = v10;
  id v15 = *(id *)(a1 + 48);
  id v16 = v9;
  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = v5;
  id v12 = v9;
  dispatch_async(v11, block);
}

void sub_1002FC664(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationType];
  id v3 = [*(id *)(a1 + 32) applicationState];
  id v4 = [*(id *)(a1 + 40) applicationState];
  id v5 = [*(id *)(a1 + 32) applicationStateReason];
  if ((v5 != [*(id *)(a1 + 40) applicationStateReason] || v3 != v4) && v2 == (id)1)
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationIdentifier]);
    id v8 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
    uint64_t v9 = PKLocalizedApplyFeatureString( @"APPLICATION_UPDATED_NOTIFICATION_TITLE",  *(void *)(a1 + 64),  *(void *)(a1 + 48));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = PKLocalizedApplyFeatureString( @"APPLICATION_UPDATED_NOTIFICATION_MESSAGE",  *(void *)(a1 + 64),  *(void *)(a1 + 48));
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = -[PDGenericUserNotification initWithTitle:message:](v8, "initWithTitle:message:", v10, v12);

    -[PDUserNotification setSuppressionBehavior:](v13, "setSuppressionBehavior:", 1LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _cutomRouteForFeatureIdentifier:*(void *)(a1 + 64)]);
    -[PDUserNotification setCustomActionRoute:](v13, "setCustomActionRoute:", v14);

    -[PDUserNotification setNotificationIdentifier:](v13, "setNotificationIdentifier:", v15);
    -[PDUserNotification setReissueBannerOnUpdate:](v13, "setReissueBannerOnUpdate:", 1LL);
    [*(id *)(*(void *)(a1 + 56) + 8) insertUserNotification:v13];
  }

id sub_1002FC89C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationIdentifier]);
  objc_msgSend(v2, "_queue_removeNonTerminalNotificationsForApplicationIdentifier:", v3);

  return [*(id *)(*(void *)(a1 + 32) + 8) updateWalletBadgeCount];
}

void sub_1002FCC9C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 context]);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = PKPassKitBundle();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 applyServicePreferredLanguageForFeatureIdentifier:v4 mainLanguageBundle:v6]);

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 56);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1002FCD84;
  v12[3] = &unk_10063B060;
  void v12[4] = v8;
  id v13 = v9;
  id v14 = *(id *)(a1 + 48);
  id v15 = v7;
  id v11 = v7;
  dispatch_async(v10, v12);
}

id sub_1002FCD84(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_queue_notificationForNewApplication:oldApplication:preferredLanguage:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_1002FD158(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 48);
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = 0LL;
}

LABEL_3:
}

  uint64_t v7 = 0;
LABEL_6:

  return v7;
}

void sub_1002FE458(uint64_t a1, void *a2)
{
  id v22 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) accountWithIdentifier:v3]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 associatedPassUniqueID]);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) invitationDetails]);
  id v7 = [*(id *)(a1 + 32) applicationStateReason];
  if (v7 == (id)12)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 accountUserAltDSID]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v6 accountUserNameComponents]);
  }

  else
  {
    if (v7 != (id)13)
    {
      id v10 = 0LL;
      uint64_t v8 = 0LL;
      goto LABEL_14;
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 originatorAltDSID]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v6 originatorNameComponents]);
  }

  id v10 = (void *)v9;
  if (!v8)
  {
LABEL_14:
    uint64_t v16 = PKLocalizedMadisonString(@"SHARING_INVITATION_DECLINED_NOTIFICATION_NO_NAME_MESSAGE");
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v16);
    goto LABEL_15;
  }

  if ((PKAltDSIDIsCurrentUser(v8) & 1) == 0)
  {
    if (v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v22 familyMemberForAltDSID:v8]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v11,  v10,  0LL));

      if (v12)
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 givenName]);
        uint64_t v14 = PKLocalizedMadisonString( @"SHARING_INVITATION_DECLINED_NOTIFICATION_MESSAGE",  @"%@",  v13);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

LABEL_15:
        uint64_t v17 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
        uint64_t v18 = PKLocalizedMadisonString(@"SHARING_INVITATION_DECLINED_NOTIFICATION_TITLE");
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        uint64_t v20 = -[PDGenericUserNotification initWithTitle:message:](v17, "initWithTitle:message:", v19, v15);

        -[PDUserNotification setSuppressionBehavior:](v20, "setSuppressionBehavior:", 1LL);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _customRouteForPassUniqueID:v5]);
        -[PDUserNotification setCustomActionRoute:](v20, "setCustomActionRoute:", v21);

        -[PDUserNotification setNotificationIdentifier:](v20, "setNotificationIdentifier:", *(void *)(a1 + 48));
        -[PDUserNotification setReissueBannerOnUpdate:](v20, "setReissueBannerOnUpdate:", 1LL);
        [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v20];

        goto LABEL_16;
      }
    }

    goto LABEL_14;
  }

void sub_1002FEC30(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v27 = (id)objc_claimAutoreleasedReturnValue([v3 originatorAltDSID]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "familyMemberForAltDSID:"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originatorNameComponents]);
  id v26 = (void *)v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v5,  v6,  0LL));

  uint64_t v25 = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pkFullName]);
  uint64_t v9 = PKLocalizedMadisonString(@"SHARING_INVITATION_NOTIFICATION_TITLE");
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = [*(id *)(a1 + 32) accountUserAccessLevel];
  id v12 = 0LL;
  if ((unint64_t)v11 <= 2)
  {
    uint64_t v13 = PKLocalizedMadisonString(&(*(&off_100655AE8 + (void)v11))->isa, @"%@", v8);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v13);
  }

  uint64_t v14 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v10,  v12);
  -[PDUserNotification setSuppressionBehavior:](v14, "setSuppressionBehavior:", 1LL);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 48)]);
  -[PDUserNotification setCustomActionRoute:](v14, "setCustomActionRoute:", v15);

  -[PDUserNotification setNotificationIdentifier:](v14, "setNotificationIdentifier:", *(void *)(a1 + 48));
  -[PDUserNotification setReissueBannerOnUpdate:](v14, "setReissueBannerOnUpdate:", 1LL);
  [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v14];
  uint64_t v16 = PKLocalizedMadisonString(@"SHARING_INVITATION_REMINDER_TITLE");
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  uint64_t v18 = PKLocalizedMadisonString(@"SHARING_INVITATION_REMINDER_MESSAGE", @"%@", v8);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 dateByAddingTimeInterval:604800.0]);

  id v22 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v17,  v19);
  -[PDUserNotification setSuppressionBehavior:](v22, "setSuppressionBehavior:", 1LL);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 48)]);
  -[PDUserNotification setCustomActionRoute:](v22, "setCustomActionRoute:", v23);

  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _acceptReminderIdentifierForApplicationIdentifier:*(void *)(a1 + 48)]);
  -[PDUserNotification setNotificationIdentifier:](v22, "setNotificationIdentifier:", v24);

  -[PDUserNotification setReissueBannerOnUpdate:](v22, "setReissueBannerOnUpdate:", 1LL);
  -[PDUserNotification setDate:](v22, "setDate:", v21);
  [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v22];
}

void sub_1002FF2A4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v20 = (id)objc_claimAutoreleasedReturnValue([v3 accountUserAltDSID]);
  uint64_t v5 = v20;
  if (!*(_BYTE *)(a1 + 64)) {
    uint64_t v5 = *(void **)(a1 + 40);
  }
  id v6 = v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 familyMemberForAltDSID:v6]);

  uint64_t v8 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 64)) {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 accountUserNameComponents]);
  }
  else {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 originatorNameComponents]);
  }
  id v10 = (void *)v9;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v7,  v9,  0LL));
  uint64_t v12 = PKLocalizedMadisonString(@"SHARING_JOINT_CARD_READY_NOTIFICATION_TITLE");
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 givenName]);
  uint64_t v15 = PKLocalizedMadisonString(@"SHARING_JOINT_CARD_READY_NOTIFICATION_MESSAGE", @"%@", v14);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) applicationIdentifier]);
  uint64_t v18 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v13,  v16);
  -[PDUserNotification setSuppressionBehavior:](v18, "setSuppressionBehavior:", 1LL);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _customRouteForInvitationWithIdentifier:v17]);
  -[PDUserNotification setCustomActionRoute:](v18, "setCustomActionRoute:", v19);

  -[PDUserNotification setNotificationIdentifier:](v18, "setNotificationIdentifier:", v17);
  -[PDUserNotification setReissueBannerOnUpdate:](v18, "setReissueBannerOnUpdate:", 1LL);
  [*(id *)(*(void *)(a1 + 56) + 8) insertUserNotification:v18];
}

void sub_1002FF464(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a2;
  id v19 = (id)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[5] accountUserAltDSID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "familyMemberForAltDSID:"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] accountUserNameComponents]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v5,  v6,  0LL));

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pkFullName]);
  uint64_t v9 = PKLocalizedMadisonString(@"SHARING_STARTED_NOTIFICATION_TITLE");
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = PKLocalizedMadisonString(@"SHARING_STARTED_NOTIFICATION_MESSAGE", @"%@", v8);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] applicationIdentifier]);
  if (v19)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[6] + 4) accountWithIdentifier:v19]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 associatedPassUniqueID]);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  v10,  v12,  v15);
  -[PDUserNotification setSuppressionBehavior:](v16, "setSuppressionBehavior:", 1LL);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1[6] _customRouteForPassUniqueID:v15]);
  -[PDUserNotification setCustomActionRoute:](v16, "setCustomActionRoute:", v17);

  -[PDUserNotification setNotificationIdentifier:](v16, "setNotificationIdentifier:", v13);
  -[PDUserNotification setReissueBannerOnUpdate:](v16, "setReissueBannerOnUpdate:", 1LL);
  [*((id *)a1[6] + 1) insertUserNotification:v16];
}

void sub_1002FF854(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a2;
  id v16 = (id)objc_claimAutoreleasedReturnValue([v3 originatorAltDSID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 familyMemberForAltDSID:v16]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] originatorNameComponents]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v5,  v6,  0LL));

  uint64_t v8 = PKLocalizedMadisonString(@"SHARING_INVITATION_OFFER_DECLINED_NOTIFICATION_TITLE");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 pkFullName]);
  uint64_t v11 = PKLocalizedMadisonString( @"SHARING_INVITATION_OFFER_DECLINED_NOTIFICATION_MESSAGE",  @"%@",  v10);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] applicationIdentifier]);
  uint64_t v14 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v9,  v12);
  -[PDUserNotification setSuppressionBehavior:](v14, "setSuppressionBehavior:", 1LL);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1[6] _customRouteForInvitationWithIdentifier:v13]);
  -[PDUserNotification setCustomActionRoute:](v14, "setCustomActionRoute:", v15);

  -[PDUserNotification setNotificationIdentifier:](v14, "setNotificationIdentifier:", v13);
  -[PDUserNotification setReissueBannerOnUpdate:](v14, "setReissueBannerOnUpdate:", 1LL);
  [*((id *)a1[6] + 1) insertUserNotification:v14];
}

void sub_1002FF9E0(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a2;
  id v19 = (id)objc_claimAutoreleasedReturnValue([v3 accountUserAltDSID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "familyMemberForAltDSID:"));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountUserNameComponents]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v5,  v6,  0LL));

  uint64_t v8 = PKLocalizedMadisonString(@"SHARING_INVITEE_REJECTED_NOTIFICATION_TITLE");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 pkFullName]);
  uint64_t v11 = PKLocalizedMadisonString(@"SHARING_INVITEE_REJECTED_NOTIFICATION_MESSAGE", @"%@", v10);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] applicationIdentifier]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] accountIdentifier]);
  if (v14)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[6] + 4) accountWithIdentifier:v14]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 associatedPassUniqueID]);
  }

  else
  {
    id v16 = 0LL;
  }

  uint64_t v17 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  v9,  v12,  v16);
  -[PDUserNotification setSuppressionBehavior:](v17, "setSuppressionBehavior:", 1LL);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[6] _customRouteForPassUniqueID:v16]);
  -[PDUserNotification setCustomActionRoute:](v17, "setCustomActionRoute:", v18);

  -[PDUserNotification setNotificationIdentifier:](v17, "setNotificationIdentifier:", v13);
  -[PDUserNotification setReissueBannerOnUpdate:](v17, "setReissueBannerOnUpdate:", 1LL);
  [*((id *)a1[6] + 1) insertUserNotification:v17];
}

void sub_1002FFCBC(uint64_t a1, void *a2)
{
  id v26 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originatorAltDSID]);
  if (PKAltDSIDIsCurrentUser(v3))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUserAltDSID]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v26 familyMemberForAltDSID:v4]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUserNameComponents]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v5,  v6,  0LL));

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 givenName]);
    uint64_t v9 = PKLocalizedMadisonString( @"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_ORIGINATOR_BODY",  @"%@",  v8);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    if (*(void *)(a1 + 40))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 48) + 32), "accountWithIdentifier:"));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 associatedPassUniqueID]);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v18 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
    uint64_t v19 = PKLocalizedMadisonString(@"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_TITLE");
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    id v21 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( v18,  "initWithTitle:message:forPassUniqueIdentifier:",  v20,  v10,  v12);

    -[PDUserNotification setNotificationIdentifier:](v21, "setNotificationIdentifier:", *(void *)(a1 + 56));
    -[PDUserNotification setSuppressionBehavior:](v21, "setSuppressionBehavior:", 1LL);
    -[PDUserNotification setReissueBannerOnUpdate:](v21, "setReissueBannerOnUpdate:", 1LL);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 56)]);
    -[PDUserNotification setCustomActionRoute:](v21, "setCustomActionRoute:", v22);
  }

  else
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v26 familyMemberForAltDSID:v3]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originatorNameComponents]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[PKContactResolver contactForFamilyMember:nameComponents:imageData:]( &OBJC_CLASS___PKContactResolver,  "contactForFamilyMember:nameComponents:imageData:",  v13,  v14,  0LL));

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 givenName]);
    uint64_t v16 = PKLocalizedMadisonString( @"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_ACCOUNT_USER_BODY",  @"%@",  v15);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v16);

    if (*(void *)(a1 + 40))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 48) + 32), "accountWithIdentifier:"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v17 associatedPassUniqueID]);
    }

    else
    {
      id v10 = 0LL;
    }

    uint64_t v23 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
    uint64_t v24 = PKLocalizedMadisonString(@"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_TITLE");
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    id v21 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( v23,  "initWithTitle:message:forPassUniqueIdentifier:",  v25,  v7,  v10);

    -[PDUserNotification setNotificationIdentifier:](v21, "setNotificationIdentifier:", *(void *)(a1 + 56));
    -[PDUserNotification setSuppressionBehavior:](v21, "setSuppressionBehavior:", 1LL);
    -[PDUserNotification setReissueBannerOnUpdate:](v21, "setReissueBannerOnUpdate:", 1LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 56)]);
    -[PDUserNotification setCustomActionRoute:](v21, "setCustomActionRoute:", v12);
  }

  if (v21) {
    [*(id *)(*(void *)(a1 + 48) + 8) insertUserNotification:v21];
  }
}

void sub_1003001E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10030027C;
  block[3] = &unk_100639AF0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_10030027C(void *a1)
{
  id v2 = -[PKFamilyMemberCollection initWithFamilyMembers:]( objc_alloc(&OBJC_CLASS___PKFamilyMemberCollection),  "initWithFamilyMembers:",  a1[5]);
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose(va, 8) = v2;

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1[4] + 48LL));
  }
  return result;
}

uint64_t sub_1003003FC(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)v6);
        id v8 = objc_alloc(*(Class *)(a1 + 48));

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_100300814(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PKApplyFooterContentLink);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_100300A2C(id a1, PKApplyFooterContentLink *a2, id a3)
{
}

void sub_100300A34(id a1, PKApplyFooterContentLink *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKApplyFooterContentLink setLinkURL:](v4, "setLinkURL:", v5);
}

void sub_100300A80(id a1, PKApplyFooterContentLink *a2, id a3)
{
}

void sub_100300A88(id a1, PKApplyFooterContentLink *a2, id a3)
{
}

uint64_t sub_100301380(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[6]));
  [v2 setValue:v3 forProperty:@"backoff_level"];

  id v4 = (void *)a1[4];
  id v5 = (void *)_SQLValueForDate(a1[5]);
  [v4 setValue:v5 forProperty:@"next_fetch"];

  return 1LL;
}

void sub_1003017F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10030180C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10030181C(uint64_t a1)
{
}

BOOL sub_100301824(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithMetadata:*(void *)(a1 + 32) forBaseMetadata:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_1003019E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id result = [*(id *)(a1 + 32) setGroupStyle:PKPassTileGroupStyleFromString(*(void *)(a4 + 32))];
  *a6 = 1;
  return result;
}

id sub_100301D84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _process];
}

void sub_10030211C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v5 _passDynamicStateFromState:a3]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

BOOL sub_1003036F8(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return -[NSNumber BOOLValue](a3, "BOOLValue");
}

BOOL sub_100303768(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return -[NSNumber BOOLValue](a3, "BOOLValue");
}

BOOL sub_1003037D8(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return -[NSNumber BOOLValue](a3, "BOOLValue");
}

BOOL sub_100303848(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return -[NSNumber BOOLValue](a3, "BOOLValue");
}

void sub_100304254( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10030426C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10030427C(uint64_t a1)
{
}

BOOL sub_100304284(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_1003043DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_1003046E0(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003046E8(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003046F0(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003046F8(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_100304700(id a1, PKPendingIdentityCredential *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___PKIdentityProvisioningAttestations, v6),  v4,  0LL);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

    -[PKPendingIdentityCredential setAttestations:](v5, "setAttestations:", v8);
  }

void sub_100304790(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_100304798(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003047A0(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_100304BE4(void *a1)
{
  if (*(_BYTE *)(a1[4] + 16LL))
  {
    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for discovery service",  v6,  2u);
    }

    uint64_t v4 = a1[6];
    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKDiscoveryErrorDomain,  1LL,  0LL));
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
  }

void sub_100304D80(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100304DF8;
  v3[3] = &unk_1006415E8;
  id v4 = v1;
  [v2 discoveryArticleLayoutsWithCompletion:v3];
}

uint64_t sub_100304DF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100304E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100304EFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100304F7C;
  v3[3] = &unk_100655E20;
  id v4 = *(id *)(a1 + 48);
  [v2 discoveryArticleLayoutForItemWithIdentifier:v1 completion:v3];
}

uint64_t sub_100304F7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100304F88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10030505C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003050D4;
  v3[3] = &unk_100655E48;
  id v4 = v1;
  [v2 dismissedDiscoveryItems:v3];
}

uint64_t sub_1003050D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003050E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003051E4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoveryManager]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10030527C;
  v5[3] = &unk_10063B3A0;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  [v2 updateDiscoveryItemWithIdentifier:v3 forAction:v4 completion:v5];
}

void sub_10030527C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (a2)
    {
      (*(void (**)(void, void))(v2 + 16))(*(void *)(a1 + 32), 0LL);
    }

    else
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKDiscoveryErrorDomain,  2LL,  0LL));
      (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
    }
  }

uint64_t sub_100305310(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1003053D0(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 24) manifestAllowsMiniCardsWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1003053E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1003054A8(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 24) updateDiscoveryManifestWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1003054BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100305588(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100305600;
  v3[3] = &unk_1006415E8;
  id v4 = v1;
  [v2 discoveryItemsWithCompletion:v3];
}

uint64_t sub_100305600(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100305610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10030572C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1003057B8;
  v4[3] = &unk_10063A830;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v2 insertDiscoveryItems:v1 discoveryArticleLayouts:v3 completion:v4];
}

uint64_t sub_1003057B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_1003057D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1003058A4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10030591C;
  v3[3] = &unk_1006424D0;
  id v4 = v1;
  [v2 processDiscoveryItemsAndMessagesWithCompletion:v3];
}

uint64_t sub_10030591C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10030592C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100305A28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100305AB4;
  v4[3] = &unk_1006415E8;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 discoveryEngagementMessagesForPassUniqueIdentifier:v1 active:v3 completion:v4];
}

uint64_t sub_100305AB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100305AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100305BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100305C38;
  v3[3] = &unk_100655E48;
  id v4 = *(id *)(a1 + 48);
  [v2 dialogRequestsForPlacement:v1 completion:v3];
}

uint64_t sub_100305C38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100305C48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100305D5C(void *a1)
{
  return _[*(id *)(a1[4] + 24) dismissDialogRequestWithIdentifier:a1[5] forPlacement:a1[6] completion:a1[7]];
}

uint64_t sub_100305D78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100305E74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100305F00;
  v4[3] = &unk_10063B3A0;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 updateDiscoveryEngagementMessageWithIdentifier:v1 forAction:v3 completion:v4];
}

void sub_100305F00(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void))(v2 + 16))(*(void *)(a1 + 32), 0LL);
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKDiscoveryErrorDomain,  2LL,  0LL));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
  }

uint64_t sub_100305F80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10030606C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003060EC;
  v3[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 48);
  [v2 insertDiscoveryEngagementMessages:v1 completion:v3];
}

uint64_t sub_1003060EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003060FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003061E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100306268;
  v3[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 48);
  [v2 removeDiscoveryMessageWithIdentifier:v1 completion:v3];
}

uint64_t sub_100306268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306278(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306364(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_1003063A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003064C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100306514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10030662C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100306674(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306774(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_1003067B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003068BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003069C0(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_100306A00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306ACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100306B08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306C04(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_100306C44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306D48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100306D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306E90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100306ED4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100306FA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100306FDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003070A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003070E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003071B0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100307228;
  v3[3] = &unk_10063C428;
  id v4 = v1;
  [v2 rulesWithCompletion:v3];
}

uint64_t sub_100307228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100307238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10030732C(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_100307368(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100307454(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_100307490(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10030757C(void *a1)
{
  return [*(id *)(a1[4] + 32) evaluateRulesWithIdentifiers:a1[5] completion:a1[6]];
}

uint64_t sub_100307598(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10030766C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003076E4;
  v3[3] = &unk_10063A830;
  id v4 = v1;
  [v2 removeDiscoveryUserNotificationsWithCompletion:v3];
}

uint64_t sub_1003076E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003076F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100307808(void *a1)
{
  return _[*(id *)(a1[4] + 24) fetchUserProperties:a1[5] withParameters:a1[6] completion:a1[7]];
}

uint64_t sub_100307824(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100307918(void *a1)
{
  return _[*(id *)(a1[4] + 24) fireEngagementEventNamed:a1[5] completion:a1[6]];
}

uint64_t sub_100307934(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003079DC(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

int64_t sub_100307B10(id a1, PDCandidateRelevantPass *a2, PDCandidateRelevantPass *a3)
{
  return -[PDCandidateRelevantPass comparePassDatesToPass:](a2, "comparePassDatesToPass:", a3);
}

int64_t sub_1003081A4(id a1, PDCandidateRelevantPass *a2, PDCandidateRelevantPass *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[PDCandidateRelevantPass matchedRelevantDate](v4, "matchedRelevantDate"));

  if (!v6) {
    goto LABEL_4;
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[PDCandidateRelevantPass matchedRelevantDate](v5, "matchedRelevantDate"));

  if (!v7)
  {
    int64_t v12 = -1LL;
    goto LABEL_6;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[PDCandidateRelevantPass matchedRelevantDate](v4, "matchedRelevantDate"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 relevantDateWithPriority:0]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[PDCandidateRelevantPass matchedRelevantDate](v5, "matchedRelevantDate"));
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 relevantDateWithPriority:0]);
  int64_t v12 = (int64_t)[v9 compare:v11];

  if (!v12)
  {
LABEL_4:
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(-[PDCandidateRelevantPass serialNumber](v4, "serialNumber"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[PDCandidateRelevantPass serialNumber](v5, "serialNumber"));
    int64_t v12 = (int64_t)[v13 compare:v14];
  }

void sub_100308A6C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentCounterpartImageData);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100308BC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100308D10(id a1, PKPeerPaymentCounterpartImageData *a2, id a3)
{
}

void sub_100308D18(id a1, PKPeerPaymentCounterpartImageData *a2, id a3)
{
}

void sub_100308E98(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v6),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 32),  v7,  a3);
}

uint64_t sub_100309174(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _predicateForIdentifier:*(void *)(a1 + 32)]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _predicateForType:*(void *)(a1 + 80)]);
  uint64_t v5 = -[NSMutableArray initWithObjects:](v2, "initWithObjects:", v3, v4, 0LL);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v5));
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) anyInDatabase:*(void *)(a1 + 40) predicate:v6]);
  id v8 = [v7 status];
  if (v7) {
    BOOL v9 = *(void *)(a1 + 88) == 2LL;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9 || v8 == (id)1 || v8 == (id)4)
  {
    if (v7) {
      goto LABEL_14;
    }
    int64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObjectOrNull:forKey:]( v12,  "setObjectOrNull:forKey:",  *(void *)(a1 + 32),  @"identifier");
    -[NSMutableDictionary setObjectOrNull:forKey:]( v12,  "setObjectOrNull:forKey:",  *(void *)(a1 + 48),  @"domain_identifier");
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v14 = (void *)_SQLValueForDate(v13);
    -[NSMutableDictionary setObjectOrNull:forKey:](v12, "setObjectOrNull:forKey:", v14, @"last_modified_date");

    -[NSMutableDictionary setInteger:forKey:](v12, "setInteger:forKey:", *(void *)(a1 + 80), @"type");
    -[NSMutableDictionary setInteger:forKey:](v12, "setInteger:forKey:", *(void *)(a1 + 88), @"status");
    id v7 = [objc_alloc(*(Class *)(a1 + 72)) initWithPropertyValues:v12 inDatabase:*(void *)(a1 + 40)];

    if (v7)
    {
LABEL_14:
      uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v17 = (void *)_SQLValueForDate(v16);
      -[NSMutableDictionary setObjectOrNull:forKey:](v15, "setObjectOrNull:forKey:", v17, @"last_modified_date");

      -[NSMutableDictionary setInteger:forKey:](v15, "setInteger:forKey:", *(void *)(a1 + 88), @"status");
      uint64_t v18 = *(void **)(a1 + 56);
      if (v18)
      {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 domain]);
        -[NSMutableDictionary setObjectOrNull:forKey:](v15, "setObjectOrNull:forKey:", v19, @"last_error_domain");

        -[NSMutableDictionary setInteger:forKey:]( v15,  "setInteger:forKey:",  [*(id *)(a1 + 56) code],  @"last_error_code");
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForProperty:@"status"]);
        id v21 = (char *)[v20 integerValue];

        -[NSMutableDictionary setInteger:forKey:](v15, "setInteger:forKey:", v21 + 1, @"action_try_count");
      }

      else
      {
        -[NSMutableDictionary setObjectOrNull:forKey:](v15, "setObjectOrNull:forKey:", 0LL, @"last_error_domain");
        -[NSMutableDictionary setObjectOrNull:forKey:](v15, "setObjectOrNull:forKey:", 0LL, @"last_error_code");
        -[NSMutableDictionary setObjectOrNull:forKey:](v15, "setObjectOrNull:forKey:", 0LL, @"action_try_count");
      }

      if (*(void *)(a1 + 88) || (uint64_t v23 = *(void *)(a1 + 64)) == 0)
      {
        id v22 = v15;
        uint64_t v23 = 0LL;
      }

      else
      {
        id v22 = v15;
      }

      -[NSMutableDictionary setObjectOrNull:forKey:](v22, "setObjectOrNull:forKey:", v23, @"searchable_item");
      [v7 setValuesWithDictionary:v15];
    }
  }

  return 1LL;
}

uint64_t sub_100309684(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, a2);
  uint64_t result = objc_opt_isKindOfClass(v6, v7);
  if ((result & 1) != 0) {
    return (uint64_t)[*(id *)(a1 + 32) addObject:*a4];
  }
  return result;
}

void sub_100309910(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = -[SpotlightIndexerItem initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___SpotlightIndexerItem),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 48) addObject:v8];
}

void sub_100309BDC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = -[SpotlightIndexerItem initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___SpotlightIndexerItem),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 48) addObject:v8];
}

uint64_t sub_100309DA4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _predicateForType:*(void *)(a1 + 56)]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100309E9C;
  v6[3] = &unk_100655FD0;
  uint64_t v10 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = v2;
  id v9 = *(id *)(a1 + 40);
  id v3 = v2;
  id v4 = objc_retainBlock(v6);
  ((void (*)(void *, void))v4[2])(v4, 0LL);
  ((void (*)(void *, uint64_t))v4[2])(v4, 1LL);
  ((void (*)(void *, uint64_t))v4[2])(v4, 2LL);
  ((void (*)(void *, uint64_t))v4[2])(v4, 3LL);

  return 1LL;
}

void sub_100309E9C(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _predicateForStatus:a2]);
  uint64_t v5 = *(void **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  v13[0] = *(void *)(a1 + 40);
  v13[1] = v4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v7));
  id v9 = [v5 countInDatabase:v6 predicate:v8];

  uint64_t v10 = *(void **)(a1 + 48);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
  int64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  [v10 setObject:v11 forKey:v12];
}

id sub_10030A234()
{
  CFDictionaryRef v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 dateByAddingTimeInterval:-86400.0]);

  return v1;
}

void sub_10030A788(id a1, SpotlightIndexerItem *a2, id a3)
{
}

void sub_10030A790(id a1, SpotlightIndexerItem *a2, id a3)
{
}

void sub_10030A798(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setStatus:](v4, "setStatus:", [a3 unsignedIntegerValue]);
}

void sub_10030A7DC(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setType:](v4, "setType:", [a3 unsignedIntegerValue]);
}

void sub_10030A820(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setTryCount:](v4, "setTryCount:", [a3 unsignedIntegerValue]);
}

void sub_10030A864(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setErrorCode:](v4, "setErrorCode:", [a3 integerValue]);
}

void sub_10030A8A8(id a1, SpotlightIndexerItem *a2, id a3)
{
}

void sub_10030A8B0(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[SpotlightIndexerItem setLastModifiedDate:](v4, "setLastModifiedDate:", v5);
}

void sub_10030A8FC(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSData, v4);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0) {
      -[SpotlightIndexerItem setSearchableItemData:](v7, "setSearchableItemData:", v5);
    }
  }
}

unsigned __int8 *sub_10030ACA4(unsigned __int8 *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  int64_t v12 = v11;
  __int128 v13 = 0LL;
  if (a1 && v9 && v10 && v11)
  {
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___PDApplicationMessageSink;
    uint64_t v14 = (unsigned __int8 *)objc_msgSendSuper2(&v16, "init");
    if (v14)
    {
      atomic_store(0, v14 + 8);
      *((void *)v14 + 2) = v9;
      *((void *)v14 + 3) = v10;
      *((void *)v14 + 4) = a4;
      *((void *)v14 + 5) = v12;
    }

    a1 = v14;
    __int128 v13 = a1;
  }

  return v13;
}

char *sub_10030AD60(char *result)
{
  if (result)
  {
    uint64_t v1 = (id *)result;
    uint64_t v2 = (unsigned __int8 *)(result + 8);
    while (!__ldaxr(v2))
    {
      if (!__stlxr(1u, v2)) {
        goto LABEL_7;
      }
    }

    __clrex();
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageSink (%ld): already attempted connection.",  *((void *)result + 4));
LABEL_7:
    uint64_t result = (char *)[v1[5] connectApplicationMessageSink:v1];
    while (1)
    {
      int v4 = __ldaxr(v2);
      if (v4 != 1) {
        break;
      }
      if (!__stlxr(2u, v2)) {
        return result;
      }
    }

    __clrex();
    return (char *)+[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageSink (%ld): implementation error during connection.",  v1[4]);
  }

  return result;
}

void sub_10030B228( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL sub_10030B248(uint64_t a1)
{
  id v2 = +[PKApplicationMessageKey createWithSource:identifier:]( &OBJC_CLASS___PKApplicationMessageKey,  "createWithSource:identifier:",  *(void *)(*(void *)(a1 + 32) + 32LL),  *(void *)(a1 + 40));
  id v3 = sub_1003AF674(*(void ***)(*(void *)(a1 + 32) + 24LL), v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    id v5 = (void *)v4;
    else {
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 createdDate]);
    }
    id v8 = (void *)v6;
    id v9 = [*(id *)(a1 + 48) priority];
    id v10 = [*(id *)(a1 + 48) badge];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 key]);
    id v12 = +[PKApplicationMessageRegistration createWithKey:createdDate:priority:badge:]( &OBJC_CLASS___PKApplicationMessageRegistration,  "createWithKey:createdDate:priority:badge:",  v11,  v8,  v9,  v10);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = sub_1003AF5F4( *(void *)(*(void *)(a1 + 32) + 24LL),  v12);
    BOOL v7 = *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) != 0;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_10030B464(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    id v18 = 0LL;
    id v5 = (uint64_t *)(a1 + 32);
    id v6 = +[PKApplicationMessageKey createWithSource:identifier:]( &OBJC_CLASS___PKApplicationMessageKey,  "createWithSource:identifier:",  *(void *)(a1 + 32),  v3);
    BOOL v7 = sub_1003AF64C(*(void *)(a1 + 24), v6, &v18);
    id v8 = 0LL;
    if (v7 && v18 != 0LL) {
      id v8 = (void *)PDOSTransactionCreate("PDApplicationMessageManager");
    }

    if (v7)
    {
      id v10 = v18;
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      __int128 v13 = v12;
      if (v10)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *v5;
          *(_DWORD *)__int128 buf = 134218242;
          uint64_t v20 = v14;
          __int16 v21 = 2112;
          id v22 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDApplicationMessageSink (%ld): removed message %@.",  buf,  0x16u);
        }

        [*(id *)(a1 + 40) applicationMessageSink:a1 removedMessageWithRegistration:v18];
        sub_10030B954(*(void *)(a1 + 16));
      }

      else
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          sub_100442534();
        }
      }
    }

    else
    {
      uint64_t v15 = PKLogFacilityTypeGetObject(0LL);
      objc_super v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *v5;
        *(_DWORD *)__int128 buf = 134218242;
        uint64_t v20 = v17;
        __int16 v21 = 2112;
        id v22 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDApplicationMessageSink (%ld): failed to remove message %@.",  buf,  0x16u);
      }
    }
  }
}

void sub_10030B6C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    id v5 = +[PKApplicationMessageKey createWithSource:identifier:]( &OBJC_CLASS___PKApplicationMessageKey,  "createWithSource:identifier:",  *(void *)(a1 + 32),  v3);
    id v6 = sub_1003AF674(*(void ***)(a1 + 24), v5);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      if (v10) {
        sub_1004425FC();
      }

      [*(id *)(a1 + 40) applicationMessageSink:a1 tappedMessageWithRegistration:v7];
    }

    else
    {
      if (v10) {
        sub_100442598();
      }
    }
  }
}

id *sub_10030B7A0(uint64_t a1)
{
  uint64_t v1 = (id *)a1;
  if (a1)
  {
    id v2 = sub_1003AF6B0(*(void ***)(a1 + 24), *(void *)(a1 + 32));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v4 = v3;
    if (v3 && [v3 count])
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v6 = v4;
      id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v16;
        do
        {
          for (i = 0LL; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v16 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)i);
            id v12 = objc_msgSend( v1[5],  "applicationMessageSink:createContentForMessageWithRegistration:",  v1,  v11,  (void)v15);
            if (v12)
            {
              id v13 = +[PKApplicationMessage createWithRegistration:content:]( &OBJC_CLASS___PKApplicationMessage,  "createWithRegistration:content:",  v11,  v12);
              -[NSMutableArray addObject:](v5, "addObject:", v13);
            }
          }

          id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v8);
      }

      uint64_t v1 = (id *)-[NSMutableArray copy](v5, "copy");
    }

    else
    {
      uint64_t v1 = (id *)&__NSArray0__struct;
    }
  }

  return v1;
}

uint64_t sub_10030B930(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = sub_1003AF6B0(*(void ***)(result + 24), *(void *)(result + 32));
    return objc_claimAutoreleasedReturnValue(v1);
  }

  return result;
}

void sub_10030B954(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    *(_BYTE *)(a1 + 50) = 1;
    os_unfair_lock_unlock(v2);
    sub_10030CD2C(a1);
  }

id *sub_10030B9CC(id *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v10 = a5;
  if (a1)
  {
    id v11 = a3;
    id v12 = a2;
    id v13 = sub_10030ACA4((unsigned __int8 *)objc_alloc(&OBJC_CLASS___PDApplicationMessageSink), v12, v11, a4, v10);

    if (v13)
    {
      v18.receiver = a1;
      v18.super_class = (Class)&OBJC_CLASS___PDApplicationMessageSourceRegistration;
      uint64_t v14 = (id *)objc_msgSendSuper2(&v18, "init");
      __int128 v15 = v14;
      if (v14)
      {
        objc_storeStrong(v14 + 2, a5);
        objc_storeStrong(v15 + 1, v13);
      }

      a1 = v15;
      __int128 v16 = a1;
    }

    else
    {
      __int128 v16 = 0LL;
    }
  }

  else
  {
    __int128 v16 = 0LL;
  }

  return v16;
}

void *sub_10030BAD0(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2)
    {
      int v3 = atomic_load((unsigned __int8 *)(v2 + 8));
      if (v3 == 2) {
        return (id)v1[1];
      }
      uint64_t v2 = result[1];
      NSExceptionName v4 = NSInternalInconsistencyException;
      if (v2) {
        uint64_t v2 = *(void *)(v2 + 32);
      }
    }

    else
    {
      NSExceptionName v4 = NSInternalInconsistencyException;
    }

    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  v4,  @"PDApplicationMessageSink (%ld): cannot fetch sink before connection.",  v2);
    return (id)v1[1];
  }

  return result;
}

id *sub_10030BB90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  objc_opt_self(a1);
  id v7 = sub_10030BBF8((id *)objc_alloc(&OBJC_CLASS___PDApplicationMessageManager), v6, v5);

  return v7;
}

id *sub_10030BBF8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1 && v6)
  {
    v22.receiver = a1;
    v22.super_class = (Class)&OBJC_CLASS___PDApplicationMessageManager;
    id v8 = (id *)objc_msgSendSuper2(&v22, "init");
    uint64_t v9 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      *((_DWORD *)v9 + 4) = 0;
      id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v11 = v9[3];
      v9[3] = v10;

      atomic_store(0, (unsigned __int8 *)v9 + 32);
      *((_BYTE *)v9 + 51) = 0;
      dispatch_queue_attr_t v12 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      id v13 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v12);
      dispatch_queue_attr_t initially_inactive = dispatch_queue_attr_make_initially_inactive(v13);
      __int128 v15 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(initially_inactive);
      id v16 = PDUtilityQueue();
      __int128 v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v16);
      dispatch_queue_t v18 = dispatch_queue_create_with_target_V2("com.apple.passd.applicationMessageManager", v15, v17);
      id v19 = v9[8];
      v9[8] = v18;

      objc_storeWeak(v9 + 9, v7);
    }

    a1 = v9;
    uint64_t v20 = a1;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  return v20;
}

void sub_10030BD78(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (unsigned __int8 *)(a1 + 32);
    while (!__ldaxr(v2))
    {
      if (!__stlxr(1u, v2)) {
        goto LABEL_7;
      }
    }

    __clrex();
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: already attempted connection.");
LABEL_7:
    NSExceptionName v4 = sub_10030BF64((unsigned __int8 *)a1);
    id v5 = *(void **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10030BFD4;
    block[3] = &unk_1006392B0;
    id v6 = v4;
    __int16 v21 = v6;
    uint64_t v22 = a1;
    id v7 = v5;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
    dispatch_async(v7, v8);

    dispatch_activate(*(dispatch_object_t *)(a1 + 64));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    id v9 = *(id *)(a1 + 24);
    id v10 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v11 = v9;
    id v12 = [v11 countByEnumeratingWithState:&v16 objects:v23 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v17;
      do
      {
        __int128 v15 = 0LL;
        do
        {
          if (*(void *)v17 != v14) {
            objc_enumerationMutation(v11);
          }
          dispatch_async( *(dispatch_queue_t *)(a1 + 64),  *(dispatch_block_t *)(*((void *)&v16 + 1) + 8LL * (void)v15));
          __int128 v15 = (char *)v15 + 1;
        }

        while (v13 != v15);
        id v13 = [v11 countByEnumeratingWithState:&v16 objects:v23 count:16];
      }

      while (v13);
    }
  }

unsigned __int8 *sub_10030BF64(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!atomic_load(result + 32)) {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: cannot fetch registrations before connection attempt.");
    }
    int v3 = (os_unfair_lock_s *)(v1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)v1 + 4);
    id v4 = [*((id *)v1 + 5) copy];
    os_unfair_lock_unlock(v3);
    return (unsigned __int8 *)v4;
  }

  return result;
}

void sub_10030BFD4(uint64_t a1)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v24;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v24 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
        if (v7) {
          sub_10030AD60(*(char **)(v7 + 8));
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }

    while (v4);
  }

  while (1)
  {

    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16LL));
    uint64_t v15 = *(void *)(a1 + 40);
    __int128 v16 = *(void **)(v15 + 56);
    if (!v16) {
      break;
    }
    id v8 = v16;
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(v9 + 56);
    *(void *)(v9 + 56) = 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16LL));
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v2 = v8;
    id v11 = [v2 countByEnumeratingWithState:&v19 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v20;
      do
      {
        for (j = 0LL; j != v12; j = (char *)j + 1)
        {
          if (*(void *)v20 != v13) {
            objc_enumerationMutation(v2);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v19 + 1) + 8LL * (void)j) + 16LL))();
        }

        id v12 = [v2 countByEnumeratingWithState:&v19 objects:v27 count:16];
      }

      while (v12);
    }
  }

  __int128 v17 = (unsigned __int8 *)(v15 + 32);
  while (1)
  {
    int v18 = __ldaxr(v17);
    if (v18 != 1) {
      break;
    }
    if (!__stlxr(2u, v17)) {
      goto LABEL_25;
    }
  }

  __clrex();
  +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: implementation error during connection.");
LABEL_25:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16LL));
}

void sub_10030C1E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    if (v4 != 2)
    {
      id v10 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      int v5 = atomic_load((unsigned __int8 *)(a1 + 32));
      if (v5 != 2)
      {
        id v6 = *(void **)(a1 + 56);
        if (!v6)
        {
          uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v8 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v7;

          id v6 = *(void **)(a1 + 56);
        }

        uint64_t v9 = objc_retainBlock(v10);
        [v6 addObject:v9];

        sub_10030C2BC(a1);
        id v10 = 0LL;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      id v3 = v10;
    }

    if (v3)
    {
      id v11 = v3;
      v3[2]();
      id v3 = v11;
    }
  }
}

void sub_10030C2BC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void **)(a1 + 24);
    if (v1)
    {
      dispatch_block_t v2 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &stru_100656150);
      [v1 addObject:v2];
    }

    else
    {
      dispatch_async(*(dispatch_queue_t *)(a1 + 64), &stru_100656170);
    }
  }

void sub_10030C338(uint64_t a1)
{
  if (a1)
  {
    dispatch_block_t v2 = (unsigned __int8 *)(a1 + 32);
    int v3 = atomic_load((unsigned __int8 *)(a1 + 32));
    if (v3 != 2)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      int v4 = atomic_load(v2);
      if (v4 != 2) {
        sub_10030C2BC(a1);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
  }

void sub_10030C3AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    if (!a2) {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: invalid registrations for local source.");
    }
    if (v5)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      if (atomic_load((unsigned __int8 *)(a1 + 32))) {
        +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: cannot register source %ld after initial setup.",  a2);
      }
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      id v7 = *(id *)(a1 + 40);
      id v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v8)
      {
        id v9 = v8;
        id v10 = 0LL;
        uint64_t v11 = *(void *)v22;
        do
        {
          id v12 = 0LL;
          do
          {
            if (*(void *)v22 != v11) {
              objc_enumerationMutation(v7);
            }
            uint64_t v13 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v12);
            if (v13)
            {
              uint64_t v14 = v13[1];
              if (v14) {
                uint64_t v14 = *(void *)(v14 + 32);
              }
            }

            else
            {
              uint64_t v14 = 0LL;
            }

            if (v14 == a2)
            {
              uint64_t v15 = v13;

              id v10 = v15;
            }

            id v12 = (char *)v12 + 1;
          }

          while (v9 != v12);
          id v16 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
          id v9 = v16;
        }

        while (v16);

        if (v10) {
          +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: duplicate registrations for source %ld.",  a2);
        }
      }

      else
      {

        id v10 = 0LL;
      }

      __int128 v17 = sub_10030B9CC( (id *)objc_alloc(&OBJC_CLASS___PDApplicationMessageSourceRegistration),  (void *)a1,  *(void **)(a1 + 8),  a2,  v5);

      int v18 = *(void **)(a1 + 40);
      if (!v18)
      {
        __int128 v19 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v20 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v19;

        int v18 = *(void **)(a1 + 40);
      }

      [v18 addObject:v17];
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
  }
}

id sub_10030C5DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    if (v4 != 2) {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: sinks not ready.");
    }
    if (v3 && [v3 count])
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v6 = v3;
      id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v16;
        do
        {
          for (i = 0LL; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v16 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v11 = sub_10030BAD0(*(void **)(*((void *)&v15 + 1) + 8LL * (void)i));
            id v12 = sub_10030B7A0((uint64_t)v11);
            -[NSMutableArray addObjectsFromArray:](v5, "addObjectsFromArray:", v12, (void)v15);
          }

          id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v8);
      }

      if (-[NSMutableArray count](v5, "count")) {
        id v13 = -[NSMutableArray copy](v5, "copy");
      }
      else {
        id v13 = &__NSArray0__struct;
      }
    }

    else
    {
      id v13 = &__NSArray0__struct;
    }
  }

  else
  {
    id v13 = 0LL;
  }

  return v13;
}

id sub_10030C794(id result)
{
  if (result)
  {
    uint64_t v1 = (unsigned __int8 *)result;
    int v2 = atomic_load((unsigned __int8 *)result + 32);
    if (v2 != 2) {
      dispatch_sync(*((dispatch_queue_t *)result + 8), &stru_100656130);
    }
    id v3 = sub_10030BF64(v1);
    id v4 = sub_10030C5DC((uint64_t)v1, v3);

    return v4;
  }

  return result;
}

void sub_10030C7F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10030C87C;
    v5[3] = &unk_10063AC90;
    void v5[4] = a1;
    id v6 = v3;
    sub_10030C1E8(a1, v5);
  }
}

void sub_10030C87C(uint64_t a1)
{
  int v2 = sub_10030BF64(*(unsigned __int8 **)(a1 + 32));
  id v3 = PDHeavyQueue();
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10030C92C;
  block[3] = &unk_10063C6A8;
  id v5 = *(id *)(a1 + 40);
  id v8 = v2;
  id v9 = v5;
  void block[4] = *(void *)(a1 + 32);
  id v6 = v2;
  dispatch_async(v4, block);
}

void sub_10030C92C(uint64_t a1)
{
  id v5 = (id)PDOSTransactionCreate("PDApplicationMessageManager");
  int v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = sub_10030C5DC(*(void *)(a1 + 32), *(void **)(a1 + 40));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

  objc_autoreleasePoolPop(v2);
}

void **sub_10030C9A0(void **result)
{
  if (result) {
    return sub_1003AF6EC((void **)result[1]);
  }
  return result;
}

void sub_10030C9B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    id v8 = v3;
    if (v4 != 2) {
      dispatch_sync(*(dispatch_queue_t *)(a1 + 64), &stru_100656130);
    }
    id v5 = sub_10030CA58(a1, (uint64_t)[v8 source]);
    id v6 = sub_10030BAD0(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    sub_10030B464((uint64_t)v6, v7);

    id v3 = v8;
  }
}

void *sub_10030CA58(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  if (!atomic_load((unsigned __int8 *)(a1 + 32))) {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"PDApplicationMessageManager: cannot fetch registrations before connection attempt.");
  }
  id v5 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    id v9 = 0LL;
    uint64_t v10 = *(void *)v18;
    do
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v11);
        if (v12)
        {
          uint64_t v13 = v12[1];
          if (v13) {
            uint64_t v13 = *(void *)(v13 + 32);
          }
        }

        else
        {
          uint64_t v13 = 0LL;
        }

        if (v13 == a2)
        {
          uint64_t v14 = v12;

          id v9 = v14;
        }

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v8 != v11);
      id v15 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
      id v8 = v15;
    }

    while (v15);
  }

  else
  {
    id v9 = 0LL;
  }

  os_unfair_lock_unlock(v5);
  return v9;
}

void sub_10030CBE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    ++*(_WORD *)(a1 + 48);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          sub_10030C9B0(a1, *(void **)(*((void *)&v9 + 1) + 8LL * (void)v8));
          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }

      while (v6);
    }

    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    --*(_WORD *)(a1 + 48);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    sub_10030CD2C(a1);
  }
}

void sub_10030CD2C(uint64_t a1)
{
  if (a1)
  {
    int v2 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (*(_BYTE *)(a1 + 51) || *(_WORD *)(a1 + 48) || !*(_BYTE *)(a1 + 50))
    {
      os_unfair_lock_unlock(v2);
      sub_10030C338(a1);
    }

    else
    {
      *(_BYTE *)(a1 + 51) = 1;
      os_unfair_lock_unlock(v2);
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472LL;
      v4[2] = sub_10030CEA8;
      v4[3] = &unk_1006392B0;
      void v4[4] = a1;
      id v5 = (id)PDOSTransactionCreate("PDApplicationMessageManager.publish");
      id v3 = v5;
      sub_10030C1E8(a1, v4);
    }
  }

void sub_10030CE00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    id v8 = v3;
    if (v4 != 2) {
      dispatch_sync(*(dispatch_queue_t *)(a1 + 64), &stru_100656130);
    }
    id v5 = sub_10030CA58(a1, (uint64_t)[v8 source]);
    id v6 = sub_10030BAD0(v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    sub_10030B6C0((uint64_t)v6, v7);

    id v3 = v8;
  }
}

void sub_10030CEA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_WORD *)(v2 + 48))
  {
    *(_BYTE *)(v2 + 51) = 0;
    *(_BYTE *)(*(void *)(a1 + 32) + 50LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
  }

  else
  {
    *(_BYTE *)(v2 + 51) = 2;
    *(_BYTE *)(*(void *)(a1 + 32) + 50LL) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10030CF78;
    v6[3] = &unk_100650318;
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 32);
    id v7 = v4;
    uint64_t v8 = v5;
    sub_10030C7F8(v3, v6);
  }

void sub_10030CF78(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(*(void *)(a1 + 40) + 72LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained applicationMessageManager:*(void *)(a1 + 40) didUpdateMessages:v4];

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16LL));
  *(_BYTE *)(*(void *)(a1 + 40) + 51LL) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  LODWORD(WeakRetained) = *(unsigned __int8 *)(v6 + 50);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
  if ((_DWORD)WeakRetained) {
    sub_10030CD2C(*(void *)(a1 + 40));
  }
}

void sub_10030D064(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_10030DF18(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___CloudStoreZone);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v7 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[CloudStoreZone cloudStoreZone](v7, "cloudStoreZone"));
  if (v6) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_10030E0DC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10030E320(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_10030E328(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_10030E330(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_10030E338(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_10030E340(id a1, PKCloudStoreZone *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreZone setScope:](v4, "setScope:", [a3 integerValue]);
}

void sub_10030E5A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10030E5BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10030E5CC(uint64_t a1)
{
}

BOOL sub_10030E5D4(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_10030E778(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _BYTE *a6)
{
  id result = [*(id *)(a1 + 32) setForeignReferenceType:PKPassTileForeignReferenceTypeFromString(a4[1])];
  *a6 = 1;
  return result;
}

id *sub_10030EA44(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id sub_10030F334(void *a1)
{
  return _[*(id *)(a1[4] + 8) updateDeviceEnvironment:a1[5] forClient:a1[6]];
}

id sub_10030F3F4(id a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 createdDate]);
    __int128 v9 = (void *)_SQLValueForDate(v8);
    -[NSMutableDictionary setObjectOrNull:forKey:](v7, "setObjectOrNull:forKey:", v9, @"created_date");

    -[NSMutableDictionary setLongLong:forKey:]( v7,  "setLongLong:forKey:",  [v6 priority],  @"priority");
    -[NSMutableDictionary setBool:forKey:](v7, "setBool:forKey:", [v6 badge], @"badge");
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v6 key]);

    uint64_t v11 = PKApplicationMessageSourceToString([v10 source]);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (v12)
    {
      -[NSMutableDictionary setObjectOrNull:forKey:](v7, "setObjectOrNull:forKey:", v12, @"source");
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
      -[NSMutableDictionary setObjectOrNull:forKey:](v7, "setObjectOrNull:forKey:", v13, @"identifier");

      a1 = [a1 initWithPropertyValues:v7 inDatabase:v5];
      id v14 = a1;
    }

    else
    {
      id v14 = 0LL;
    }
  }

  else
  {
    id v14 = 0LL;
  }

  return v14;
}

id sub_10030F564(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_self(a1);
  if (v5)
  {
    uint64_t v8 = v7;
    uint64_t v16 = 0LL;
    __int128 v17 = &v16;
    uint64_t v18 = 0x3032000000LL;
    __int128 v19 = sub_10030F688;
    __int128 v20 = sub_10030F698;
    id v21 = 0LL;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10030F6A0;
    v11[3] = &unk_10063D3E8;
    id v12 = v5;
    uint64_t v15 = v8;
    id v13 = v6;
    id v14 = &v16;
    sub_1002CCC5C((uint64_t)v13, v11);
    id v9 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

void sub_10030F670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10030F688(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10030F698(uint64_t a1)
{
}

BOOL sub_10030F6A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) key]);
  uint64_t v3 = *(void **)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = sub_10030F768((uint64_t)v3, v2);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 anyInDatabase:v4 predicate:v6]);

  if (v7)
  {
    BOOL v8 = 0LL;
  }

  else
  {
    id v9 = sub_10030F3F4( objc_alloc(&OBJC_CLASS___ApplicationMessageRegistration),  *(void **)(a1 + 32),  *(void **)(a1 + 40));
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL;
  }

  return v8;
}

id sub_10030F768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v5 = sub_100310318(v4, (uint64_t)[v3 source]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);

  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"identifier",  v7));
  v12[0] = v6;
  v12[1] = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v12, 2LL));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v9));

  return v10;
}

id sub_10030F878(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_self(a1);
  if (v5)
  {
    uint64_t v8 = v7;
    uint64_t v16 = 0LL;
    __int128 v17 = &v16;
    uint64_t v18 = 0x3032000000LL;
    __int128 v19 = sub_10030F688;
    __int128 v20 = sub_10030F698;
    id v21 = 0LL;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10030F99C;
    v11[3] = &unk_10063D3E8;
    id v12 = v5;
    uint64_t v15 = v8;
    id v13 = v6;
    id v14 = &v16;
    sub_1002CCC5C((uint64_t)v13, v11);
    id v9 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

void sub_10030F984( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10030F99C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) key]);
  id v3 = sub_10030FA48(*(void *)(a1 + 56), *(void **)(a1 + 40), v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = v4;
  if (v4 && [v4 deleteFromDatabase])
  {
    id v6 = sub_10030F3F4( objc_alloc(&OBJC_CLASS___ApplicationMessageRegistration),  *(void **)(a1 + 32),  *(void **)(a1 + 40));
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    BOOL v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL;
  }

  else
  {
    BOOL v9 = 0LL;
  }

  return v9;
}

id sub_10030FA48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_opt_self(a1);
  id v8 = sub_10030F768((uint64_t)v7, v5);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 anyInDatabase:v6 predicate:v9]);
  return v10;
}

BOOL sub_10030FAC4(uint64_t a1, void *a2, id *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = objc_opt_self(a1);
  if (v7)
  {
    uint64_t v25 = 0LL;
    __int128 v26 = &v25;
    uint64_t v27 = 0x2020000000LL;
    char v28 = 0;
    uint64_t v19 = 0LL;
    __int128 v20 = &v19;
    uint64_t v21 = 0x3032000000LL;
    __int128 v22 = sub_10030F688;
    __int128 v23 = sub_10030F698;
    id v24 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10030FC44;
    v12[3] = &unk_100656258;
    uint64_t v17 = v9;
    id v13 = v8;
    id v14 = v7;
    uint64_t v15 = &v25;
    uint64_t v18 = a3;
    uint64_t v16 = &v19;
    sub_1002CCC5C((uint64_t)v13, v12);
    if (a3) {
      objc_storeStrong(a3, (id)v20[5]);
    }
    BOOL v10 = *((_BYTE *)v26 + 24) != 0;

    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v25, 8);
  }

  else
  {
    BOOL v10 = 0LL;
  }

  return v10;
}

void sub_10030FC20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL sub_10030FC44(uint64_t a1)
{
  id v2 = sub_10030FA48(*(void *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (v3)
  {
    if (*(void *)(a1 + 72))
    {
      id v5 = sub_10030FCF0(v3);
      uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
      uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 deleteFromDatabase];
    BOOL v9 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) != 0;
  }

  else
  {
    BOOL v9 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

  return v9;
}

id sub_10030FCF0(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = 0LL;
  if (sub_100310118((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, 0LL, &v17, (uint64_t)&v14))
  {
    uint64_t v8 = 0LL;
    BOOL v9 = &v8;
    uint64_t v10 = 0x3032000000LL;
    uint64_t v11 = sub_10030F688;
    id v12 = sub_10030F698;
    id v13 = 0LL;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1003106C4;
    v4[3] = &unk_1006562A8;
    void v4[4] = a1;
    void v4[5] = &v8;
    __int128 v5 = v14;
    __int128 v6 = v15;
    uint64_t v7 = v16;
    [a1 getValuesForProperties:v17 withApplier:v4];
    id v2 = (id)v9[5];
    _Block_object_dispose(&v8, 8);
  }

  return v2;
}

void sub_10030FE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

id sub_10030FE1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_self(a1);
  if (v6)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x3032000000LL;
    uint64_t v18 = sub_10030F688;
    uint64_t v19 = sub_10030F698;
    id v20 = 0LL;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10030FF44;
    v10[3] = &unk_10063D3E8;
    uint64_t v14 = v7;
    id v11 = v5;
    id v12 = v6;
    id v13 = &v15;
    sub_1002CCC5C((uint64_t)v11, v10);
    id v8 = (id)v16[5];

    _Block_object_dispose(&v15, 8);
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void sub_10030FF2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10030FF44(uint64_t a1)
{
  id v2 = sub_10030FA48(*(void *)(a1 + 56), *(void **)(a1 + 32), *(void **)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_10030FCF0(v3);
  uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 1LL;
}

id sub_10030FF98(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_opt_self(a1);
  uint64_t v31 = 0LL;
  id v32 = 0LL;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v7 = 0LL;
  if (sub_100310118((uint64_t)v6, 0LL, &v32, (uint64_t)&v29))
  {
    id v8 = sub_100310318((uint64_t)v6, a3);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 queryWithDatabase:v5 predicate:v9]);

    uint64_t v25 = 0x3032000000LL;
    uint64_t v14 = 3221225472LL;
    __int128 v20 = v29;
    uint64_t v23 = 0LL;
    id v24 = &v23;
    __int128 v26 = sub_10030F688;
    uint64_t v27 = sub_10030F698;
    id v28 = 0LL;
    id v13 = _NSConcreteStackBlock;
    uint64_t v15 = sub_100310388;
    uint64_t v16 = &unk_100656280;
    uint64_t v19 = v6;
    __int128 v21 = v30;
    id v11 = v32;
    uint64_t v22 = v31;
    id v17 = v5;
    uint64_t v18 = &v23;
    [v10 enumeratePersistentIDsAndProperties:v11 usingBlock:&v13];
    id v7 = objc_msgSend((id)v24[5], "copy", v13, v14, v15, v16);

    _Block_object_dispose(&v23, 8);
  }

  return v7;
}

void sub_100310100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100310118(uint64_t a1, void *a2, void **a3, uint64_t a4)
{
  id v7 = a2;
  objc_opt_self(a1);
  if (a3) {
    BOOL v8 = a4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = !v8;
  if (!v8)
  {
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    *(void *)a4 = -[NSMutableArray count](v10, "count");
    -[NSMutableArray addObject:](v10, "addObject:", @"created_date");
    *(void *)(a4 + _Block_object_dispose(va, 8) = -[NSMutableArray count](v10, "count");
    -[NSMutableArray addObject:](v10, "addObject:", @"priority");
    *(_BYTE *)(a4 + 16) = -[NSMutableArray count](v10, "count") != 0LL;
    -[NSMutableArray addObject:](v10, "addObject:", @"badge");
    *(void *)(a4 + 24) = -[NSMutableArray count](v10, "count");
    -[NSMutableArray addObject:](v10, "addObject:", @"source");
    *(void *)(a4 + 32) = -[NSMutableArray count](v10, "count");
    -[NSMutableArray addObject:](v10, "addObject:", @"identifier");
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v11 = v7;
    id v12 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v21;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v21 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v20 + 1) + 8LL * (void)i);
          if (-[NSMutableArray indexOfObject:](v10, "indexOfObject:", v16, (void)v20) == (id)0x7FFFFFFFFFFFFFFFLL) {
            -[NSMutableArray addObject:](v10, "addObject:", v16);
          }
        }

        id v13 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v13);
    }

    id v17 = -[NSMutableArray copy](v10, "copy");
    uint64_t v18 = *a3;
    *a3 = v17;
  }

  return v9;
}

id sub_100310318(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = PKApplicationMessageSourceToString(a2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4) {
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"source",  v4));
  }
  else {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate falsePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "falsePredicate"));
  }
  uint64_t v6 = (void *)v5;

  return v6;
}

void sub_100310388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  __int128 v6 = *(_OWORD *)(a1 + 72);
  v13[0] = *(_OWORD *)(a1 + 56);
  v13[1] = v6;
  uint64_t v14 = *(void *)(a1 + 88);
  id v7 = sub_100310420(v5, a2, a3, a4, (uint64_t)v13);
  if (v7)
  {
    BOOL v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v12 = v7;
    if (!v8)
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      BOOL v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    [v8 addObject:v12];
    id v7 = v12;
  }
}

id sub_100310420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v8 = *(id *)(a4 + 8LL * *(void *)(a5 + 24));
  uint64_t v9 = v8;
  if (v8 && v8 == v7)
  {

    uint64_t v9 = 0LL;
  }

  id v10 = *(id *)(a4 + 8LL * *(void *)(a5 + 32));
  id v11 = v10;
  if (v10 && v10 == v7)
  {

    id v11 = 0LL;
    if (v9) {
      goto LABEL_7;
    }
LABEL_23:
    id v19 = 0LL;
LABEL_29:

    goto LABEL_30;
  }

  if (!v9) {
    goto LABEL_23;
  }
LABEL_7:
  id v12 = +[PKApplicationMessageKey createWithSource:identifier:]( &OBJC_CLASS___PKApplicationMessageKey,  "createWithSource:identifier:",  v21,  v11);

  if (v12)
  {
    id v13 = *(id *)(a4 + 8LL * *(void *)a5);
    id v11 = v13;
    if (v13 && v13 == v7)
    {

      id v11 = 0LL;
    }

    uint64_t v14 = (void *)_DateForSQLValue(v11);
    if (v14)
    {
      id v15 = *(id *)(a4 + 8LL * *(void *)(a5 + 8));
      uint64_t v16 = v15;
      if (v15 && v15 == v7)
      {

        uint64_t v16 = 0LL;
      }

      id v17 = *(id *)(a4 + 8LL * *(unsigned __int8 *)(a5 + 16));
      uint64_t v18 = v17;
      if (v17 && v17 == v7)
      {

        uint64_t v18 = 0LL;
      }

      if (v16) {
        id v19 = +[PKApplicationMessageRegistration createWithKey:createdDate:priority:badge:]( PKApplicationMessageRegistration,  "createWithKey:createdDate:priority:badge:",  v12,  v14,  [v16 longLongValue],  objc_msgSend(v18, "BOOLValue"));
      }
      else {
        id v19 = 0LL;
      }
    }

    else
    {
      id v19 = 0LL;
    }

    uint64_t v9 = v12;
    goto LABEL_29;
  }

  id v19 = 0LL;
LABEL_30:

  return v19;
}

id sub_1003105F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_opt_self(a1);
  id v5 = sub_100310660((uint64_t)v4, 1LL);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = [v4 countInDatabase:v3 predicate:v6];

  return v7;
}

id sub_100310660(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"badge",  v3));

  return v4;
}

void sub_1003106C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 persistentID];
  __int128 v7 = *(_OWORD *)(a1 + 64);
  v13[0] = *(_OWORD *)(a1 + 48);
  v13[1] = v7;
  uint64_t v14 = *(void *)(a1 + 80);
  id v10 = sub_100310420((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, v8, v9, a3, (uint64_t)v13);

  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

id sub_100311458(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"'"));
  id v3 = [v1 rangeOfCharacterFromSet:v2];
  id v4 = [v1 rangeOfCharacterFromSet:v2 options:4];
  if (v3 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL || v4 == (_BYTE *)0x7FFFFFFFFFFFFFFFLL || v3 >= v4) {
    id v7 = v1;
  }
  else {
    id v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "substringWithRange:", v3 + 1, v4 - (v3 + 1)));
  }
  uint64_t v8 = v7;

  return v8;
}

void sub_100311D10(id a1)
{
  id v1 = (void *)qword_100707B48;
  qword_100707B48 = (uint64_t)&off_100691160;
}

BOOL PKPassEligibleForBarcodePayment(void *a1)
{
  id v1 = a1;
  if ([v1 supportsBarcodePayment])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 devicePrimaryBarcodePaymentApplication]);
    BOOL v3 = PKPaymentApplicationStateIsPersonalized([v2 state]) != 0;
  }

  else
  {
    BOOL v3 = 0LL;
  }

  return v3;
}

void sub_100312038(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  [*(id *)(a1 + 32) _fetchBarcodesForPass:v3 fetchReason:1 sessionExchangeToken:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 56)];
}

void sub_1003121DC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  [*(id *)(a1 + 32) _retrieveDecryptedBarcodeCredentialForPass:v3 authorization:*(void *)(a1 + 48) sessionExchangeToken:*(void *)(a1 + 56) withCompletion:*(void *)(a1 + 64)];
}

void sub_10031231C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceAccountIdentifier]);
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) fetchCertificatesForDeviceAccountIdentifier:v4 withCertificateType:3]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10031246C;
    v7[3] = &unk_100656340;
    void v7[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    id v8 = v5;
    id v9 = *(id *)(a1 + 40);
    id v10 = v4;
    id v11 = v3;
    id v12 = *(id *)(a1 + 48);
    id v6 = v5;
    PKBarcodeCreateAndValidateTrustWithCertsAsync(v6, 3LL, v7);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_10031246C(uint64_t a1, char a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100312550;
  v6[3] = &unk_100656318;
  char v14 = a2;
  id v13 = *(id *)(a1 + 80);
  id v7 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  dispatch_async(v3, v6);
}

void sub_100312550(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    (*(void (**)(void, void))(*(void *)(a1 + 80) + 16LL))(*(void *)(a1 + 80), *(void *)(a1 + 32));
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v18 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Re-registering auxiliary capability since server decryption certificate is invalid or not found for pass %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 48) _removeCertificateForDeviceAccountIdentifier:*(void *)(a1 + 56) withCertificateType:3];
    uint64_t v5 = *(void **)(a1 + 40);
    id v6 = *(void **)(*(void *)(a1 + 48) + 48LL);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1003126D4;
    v12[3] = &unk_100648010;
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 48);
    id v11 = *(void **)(a1 + 56);
    id v13 = v9;
    uint64_t v14 = v10;
    id v15 = v11;
    id v16 = *(id *)(a1 + 80);
    [v6 registerAuxiliaryCapabilitiesForPass:v7 force:1 sessionExchangeToken:v8 completion:v12];
  }

void sub_1003126D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Auxiliary capability registration for pass %@ finished: %@",  buf,  0x16u);
  }

  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 40) fetchCertificatesForDeviceAccountIdentifier:*(void *)(a1 + 48) withCertificateType:3]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100312834;
    v10[3] = &unk_1006562F0;
    void v10[4] = *(void *)(a1 + 40);
    id v8 = *(id *)(a1 + 56);
    id v11 = v7;
    id v12 = v8;
    id v9 = v7;
    PKBarcodeCreateAndValidateTrustWithCertsAsync(v9, 3LL, v10);
  }
}

void sub_100312834(uint64_t a1, char a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003128C4;
  block[3] = &unk_100641500;
  char v7 = a2;
  id v6 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_1003128C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Server decryption certificate is still invalid or not found after successful auxiliary capability registration.",  v5,  2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100312A0C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceAccountIdentifier]);
  if (v3) {
    [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:*(void *)(a1 + 56)];
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_100312B38(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  if (v5)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceAccountIdentifier]);
    if (v3)
    {
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:0];
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:1];
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:2];
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:3];
    }
  }

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_100312DEC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  [*(id *)(a1 + 32) _submitBarcodePaymentEvent:*(void *)(a1 + 48) forPass:v3 sessionExchangeToken:*(void *)(a1 + 56) withCompletion:*(void *)(a1 + 64)];
}

void sub_100312ECC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v10 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "passWillBeRemoved: removing auxiliary capability data for pass: %@",  buf,  0xCu);
  }

  [*(id *)(a1 + 40) _unscheduleBackgroundFetchForPassUniqueID:v2];
  id v5 = *(void **)(*(void *)(a1 + 40) + 32LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10031300C;
  v7[3] = &unk_100656368;
  id v8 = v2;
  id v6 = v2;
  [v5 cancelTasksPassingTest:v7];
  [*(id *)(*(void *)(a1 + 40) + 88) removeObjectForKey:v6];
  [*(id *)(*(void *)(a1 + 40) + 104) removeObjectForKey:v6];
}

id sub_10031300C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 passUniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1003130D0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 64LL))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) barcodeIdentifier]);
    unsigned int v3 = [v2 isEqualToString:*(void *)(*(void *)(a1 + 32) + 64)];

    if (v3) {
      [*(id *)(a1 + 32) _disableCriticalPushReliability];
    }
  }

void sub_100313644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100313668(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100313748;
  block[3] = &unk_100648B78;
  void block[4] = v6;
  uint64_t v16 = a2;
  id v11 = v7;
  id v12 = v5;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v9 = v5;
  dispatch_async(v8, block);
}

void sub_100313748(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) objectForKey:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:*(void *)(a1 + 40)];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10031384C;
  v5[3] = &unk_100656390;
  uint64_t v7 = *(void *)(a1 + 80);
  id v6 = *(id *)(a1 + 48);
  [v4 enumerateObjectsUsingBlock:v5];
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 112) objectForKey:*(void *)(a1 + 40)]);
  unsigned int v3 = [v2 BOOLValue];

  [*(id *)(*(void *)(a1 + 32) + 112) removeObjectForKey:*(void *)(a1 + 40)];
  if (v3 && !*(void *)(a1 + 80) && !*(void *)(a1 + 56)) {
    [*(id *)(a1 + 32) _fetchBarcodesForPass:*(void *)(a1 + 64) fetchReason:1 sessionExchangeToken:0 withCompletion:*(void *)(a1 + 72)];
  }
}

uint64_t sub_10031384C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a2 + 16))(a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100313860(void *a1, void *a2)
{
  unsigned int v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[8];
  id v6 = a2;
  id v7 = [v3 _numberOfBarcodesToFetchForPass:v4 fetchReason:v5];
  if (v7)
  {
    id v8 = v7;
    id v9 = objc_alloc_init(&OBJC_CLASS___PKAuxiliaryCapabilityFetchBarcodeRequest);
    [v9 setPass:a1[5]];
    [v9 setBarcodeCount:v8];
    [v9 setDpanIdentifier:a1[6]];
    [v9 setFetchReason:a1[8]];
    id v20 = v6;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));
    [v9 setEncryptionCertificateChain:v10];

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) lastUsedBarcodeIdentifierForDPANIdentifier:a1[6]]);
    [v9 setLastUsedBarcodeIdentifier:v11];

    uint64_t v12 = a1[7];
    uint64_t v13 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v18 = NSDebugDescriptionErrorKey;
    id v19 = @"Unsupported platform";
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v13,  -1LL,  v14));
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v15);

    id v6 = v9;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v22 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Not fetching since fetch count is %ld.",  buf,  0xCu);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
  }
}

uint64_t sub_100313A7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100313A8C(uint64_t a1)
{
}

void sub_100313A94(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = a1[6];
    v16[0] = NSDebugDescriptionErrorKey;
    v16[1] = NSUnderlyingErrorKey;
    v17[0] = @"Missing certificate and auxiliary register failed.";
    v17[1] = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL));
    id v7 = PKPassKitErrorDomain;
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 40) fetchCertificatesForDeviceAccountIdentifier:a1[5] withCertificateType:1]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 firstObject]);
    uint64_t v12 = *(void *)(a1[8] + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (*(void *)(*(void *)(a1[8] + 8LL) + 40LL))
    {
      (*(void (**)(void))(a1[7] + 16LL))();
      goto LABEL_6;
    }

    uint64_t v5 = a1[6];
    NSErrorUserInfoKey v14 = NSDebugDescriptionErrorKey;
    id v15 = @"Auxiliary register succeeded but failed to retrieve certificate.";
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    id v7 = PKPassKitErrorDomain;
    uint64_t v8 = -1LL;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  v8,  v6));
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v9);

LABEL_6:
}

void sub_1003140B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1003140D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  [*(id *)(*(void *)(a1 + 32) + 128) removeObjectForKey:*(void *)(a1 + 40)];
  id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 32) + 136) removeObjectForKey:*(void *)(a1 + 40)];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1003141D0;
  void v14[3] = &unk_100656430;
  id v15 = v7;
  id v16 = v8;
  id v17 = v9;
  id v10 = v9;
  id v11 = v8;
  id v12 = v7;
  [v13 enumerateObjectsUsingBlock:v14];
}

uint64_t sub_1003141D0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(a2 + 16))(a2, a1[4], a1[5], a1[6]);
}

void sub_1003141E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 128) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003142F8;
  v10[3] = &unk_100656480;
  id v16 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v3;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 40);
  id v9 = v3;
  [v5 _decryptBarcodeCredential:v9 forPass:v6 authorization:v4 sessionExchangeToken:v7 completion:v10];
}

void sub_1003142F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 8LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 updateDisplayTimestamp:v8 forBarcodeIdentifier:v6];

    [*(id *)(a1 + 40) _enableCriticalPushReliabilityForBarcodeCredential:*(void *)(a1 + 32)];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    id v9 = [*(id *)(*(void *)(a1 + 40) + 8) numberOfValidBarcodeCredentialsForDPANIdentifier:*(void *)(a1 + 48)];
    if (v9 <= [*(id *)(a1 + 40) _barcodeCountLowWatermarkForPass:*(void *)(a1 + 56)])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(28LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 64);
        int v13 = 138412290;
        uint64_t v14 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Scheduling background barcode fetch due to low water mark hit after presentation for pass %@",  (uint8_t *)&v13,  0xCu);
      }

      [*(id *)(a1 + 40) _scheduleBackgroundFetchForPassUniqueID:*(void *)(a1 + 64) withBackgroundFetchType:3];
    }
  }
}

void sub_100314478(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  @"No valid barcode stored locally. Barcode fetch failed or returned no barcodes.",  NSDebugDescriptionErrorKey);
    if (v6) {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v6, NSUnderlyingErrorKey);
    }
    uint64_t v11 = PKAuxiliaryCapabilityErrorDomain;
    id v12 = -[NSMutableDictionary copy](v10, "copy");
    goto LABEL_9;
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) firstValidBarcodeCredentialForDPANIdentifier:a1[5]]);
  uint64_t v8 = *(void *)(a1[8] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (!*(void *)(*(void *)(a1[8] + 8LL) + 40LL))
  {
    id v10 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Successfully fetched %ld barcodes but failed to retrieve a valid barcode from database",  a2));
    uint64_t v11 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v15 = NSDebugDescriptionErrorKey;
    id v16 = v10;
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
LABEL_9:
    int v13 = v12;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  -1LL,  v12));

    (*(void (**)(void))(a1[7] + 16LL))();
    goto LABEL_10;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
LABEL_10:
}

uint64_t sub_100314904(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 identifier]);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationTimestamp]);
    if (v7) {
      BOOL v8 = v4 == 0LL;
    }
    else {
      BOOL v8 = 1;
    }
    uint64_t v9 = !v8;

    if (*(void *)(a1 + 32) && (_DWORD)v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 publicKeyHash]);
      uint64_t v9 = PKEqualObjects(v10, *(void *)(a1 + 32));
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_100314F08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0LL;
}

void sub_100315178(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v14 = 138412546;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Barcode event data signature failed for pass %@ with error: %@. Not submitting barcode event.",  (uint8_t *)&v14,  0x16u);
    }
  }

  else
  {
    BOOL v8 = objc_alloc_init(&OBJC_CLASS___PDBarcodeServiceBarcodeEventTask);
    -[os_log_s setEvent:](v8, "setEvent:", *(void *)(a1 + 40));
    -[os_log_s setSignature:](v8, "setSignature:", v5);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) barcodeIdentifier]);
    -[os_log_s setBarcodeIdentifier:](v8, "setBarcodeIdentifier:", v10);

    -[os_log_s setPassUniqueIdentifier:](v8, "setPassUniqueIdentifier:", *(void *)(a1 + 32));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) barcodeSettings]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 barcodeServiceURL]);
    -[os_log_s setBarcodeServiceURL:](v8, "setBarcodeServiceURL:", v12);

    [*(id *)(*(void *)(a1 + 64) + 32) performTask:v8];
    if (*(_BYTE *)(a1 + 96)) {
      [*(id *)(*(void *)(a1 + 64) + 8) insertOrUpdateEvaluatedPolicyDomainState:*(void *)(a1 + 72) forDPANIdentifier:*(void *)(a1 + 80)];
    }
  }

  uint64_t v13 = *(void *)(a1 + 88);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
}

void sub_100315478(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100315500;
  v6[3] = &unk_100656548;
  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = v3;
  BOOL v8 = v4;
  id v5 = v3;
  [v4 _fetchBarcodesForPass:v5 fetchReason:3 sessionExchangeToken:0 withCompletion:v6];
}

void sub_100315500(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 134218498;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    __int16 v16 = v6;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Background fetched %ld barcodes for pass %@ with error: %@",  (uint8_t *)&v13,  0x20u);
  }

  BOOL v9 = PKPassEligibleForBarcodePayment(*(void **)(a1 + 32));
  id v10 = *(id **)(a1 + 40);
  if (v9)
  {
    else {
      uint64_t v12 = 2LL;
    }
    [*(id *)(a1 + 40) _scheduleBackgroundFetchForPassUniqueID:v6 withBackgroundFetchType:v12];
  }

  else
  {
    [v10 _unscheduleBackgroundFetchForPassUniqueID:v6];
  }
}

void sub_1003156F8(id a1, unint64_t a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134218242;
    unint64_t v8 = a2;
    __int16 v9 = 2112;
    id v10 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Initial barcode fetch count: %ld, with error: %@",  (uint8_t *)&v7,  0x16u);
  }
}

void sub_1003157B4(id a1, unint64_t a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134218242;
    unint64_t v8 = a2;
    __int16 v9 = 2112;
    id v10 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Resumed background barcode fetch count: %ld, with error: %@",  (uint8_t *)&v7,  0x16u);
  }
}

void sub_100316100(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v21 = v6;
      __int16 v22 = 2112;
      uint64_t v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Barcode event task %@ for pass %@, encountered certificate invalid error. Removing device signature certificates and re-regsitering auxiliary capability.",  buf,  0x16u);
    }

    unint64_t v8 = *(void **)(a1 + 32);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceAccountIdentifier]);
    [v8 _removeCertificateForDeviceAccountIdentifier:v9 withCertificateType:0];

    id v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 48LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1003162AC;
    void v14[3] = &unk_100656620;
    id v12 = v10;
    uint64_t v13 = *(void *)(a1 + 32);
    id v15 = v12;
    uint64_t v16 = v13;
    id v17 = *(id *)(a1 + 48);
    id v18 = v3;
    id v19 = *(id *)(a1 + 56);
    [v11 registerAuxiliaryCapabilitiesForPass:v18 force:1 sessionExchangeToken:0 completion:v14];
  }
}

void sub_1003162AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Auxiliary capability registration for pass %@ finished, error: %@",  buf,  0x16u);
  }

  if (!v3)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) event]);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deviceAccountIdentifier]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100316414;
    v10[3] = &unk_1006565F8;
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 64);
    [v7 _signData:v8 withDeviceAccountIdentifier:v9 sessionExchangeToken:0 completion:v10];
  }
}

void sub_100316414(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setSignature:a2];
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Re-signed barcode event data for task %@ with error %@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10031675C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  if (![v7 isEqualToString:PKAuxiliaryCapabilityErrorDomain])
  {

    goto LABEL_6;
  }

  id v8 = [v6 code];

  if (v8 != (id)1)
  {
LABEL_6:
    int v9 = *(void (**)(void))(*(void *)(a1 + 80) + 16LL);
    goto LABEL_7;
  }

  [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:*(void *)(a1 + 40) withCertificateType:0];
  if (*(void *)(a1 + 48))
  {
    int v9 = *(void (**)(void))(*(void *)(a1 + 80) + 16LL);
LABEL_7:
    v9();
    goto LABEL_8;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v24 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Re-registering auxiliary capability for pass %@ due to missing key data for device signature certificate.",  buf,  0xCu);
  }

  uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 48LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100316948;
  v17[3] = &unk_100648450;
  uint64_t v14 = *(void *)(a1 + 64);
  id v15 = *(id *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 32);
  id v18 = v15;
  uint64_t v19 = v16;
  id v20 = *(id *)(a1 + 72);
  id v21 = *(id *)(a1 + 40);
  id v22 = *(id *)(a1 + 80);
  [v13 registerAuxiliaryCapabilitiesForPass:v14 force:1 sessionExchangeToken:0 completion:v17];

LABEL_8:
}

void sub_100316948(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Re-register auxiliary capability for pass %@ finished error: %@",  (uint8_t *)&v7,  0x16u);
  }

  if (v3) {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
  else {
    [*(id *)(a1 + 40) _signData:*(void *)(a1 + 48) withDeviceAccountIdentifier:*(void *)(a1 + 56) sessionExchangeToken:0 completion:*(void *)(a1 + 64)];
  }
}

void sub_100316E98(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) paymentPass]);
  [v1 _setupBarcodeFetchScheduleIfNecessaryForPass:v2];
}

void sub_100317510(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 expressModeStateController:*(void *)(a1 + 32) requestsUpdateExpressStatus:*(void *)(a1 + 40)];
}

uint64_t sub_100317BF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100317CE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100317E18(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) transactionWithTransactionIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 barcodeIdentifier]);
  if (v3)
  {
    v13[0] = @"confirmed";
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
    v13[1] = @"barcodeIdentifier";
    v14[0] = v4;
    v14[1] = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  2LL));
    id v10 = 0LL;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v5,  0LL,  &v10));
    id v7 = v10;

    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 56);
      if (v8) {
        (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0LL, v7);
      }
    }

    else
    {
      [*(id *)(*(void *)(a1 + 32) + 8) updateUserConfirmationData:v6 forTransactionIdentifier:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(a1 + 32) + 8) addDataCollectedAuthenticationMechanisms:4 forTransactionIdentifier:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) _collectTransactionSignatureIfNecessaryAndSubmitResultForTransaction:v2 sessionExchangeToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    }

    goto LABEL_9;
  }

  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    NSErrorUserInfoKey v11 = NSDebugDescriptionErrorKey;
    uint64_t v12 = @"Invalid transaction for user confirmation submission.";
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  v7));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v6);
LABEL_9:
  }
}

void sub_100318244(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) transactionWithTransactionIdentifier:*(void *)(a1 + 48)]);
  [*(id *)(a1 + 32) _collectTransactionSignatureIfNecessaryAndSubmitResultForTransaction:v2 sessionExchangeToken:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100318380(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) transactionWithTransactionIdentifier:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 32) _collectTransactionSignatureIfNecessaryAndSubmitResultForTransaction:v2 sessionExchangeToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100318540(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    if ((*(_BYTE *)(a1 + 56) & 2) != 0)
    {
      [*(id *)(a1 + 32) _collectTransactionSignatureForTransaction:*(void *)(a1 + 40) completion:0];
      [*(id *)(*(void *)(a1 + 32) + 8) addProcessedAuthenticationMechanisms:2 forTransactionIdentifier:*(void *)(a1 + 48)];
    }

    if (*(_BYTE *)(a1 + 73) && (*(_BYTE *)(a1 + 56) & 0xD) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      id v2 = *(void **)(a1 + 40);
      uint64_t v5 = *(void *)(v3 + 88);
      uint64_t v4 = (void **)(v3 + 88);
      if (v5)
      {
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 transactionDate]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) transactionDate]);
        id v8 = [v6 compare:v7];

        if (v8 == (id)-1LL)
        {
LABEL_10:
          [*(id *)(a1 + 32) _processLatestTransactionPendingUserNotification];
          return;
        }

        id v2 = *(void **)(a1 + 40);
        uint64_t v4 = (void **)(*(void *)(a1 + 32) + 88LL);
      }

      id v9 = v2;
      id v10 = *v4;
      void *v4 = v9;

      goto LABEL_10;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 64);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      uint64_t v15 = *(unsigned __int8 *)(a1 + 74);
      uint64_t v16 = *(unsigned __int8 *)(a1 + 75);
      uint64_t v17 = *(unsigned __int8 *)(a1 + 76);
      uint64_t v18 = *(unsigned __int8 *)(a1 + 77);
      int v19 = 134219266;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      id v22 = v14;
      __int16 v23 = 2048;
      uint64_t v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "PDTransactionAuthenticationManager not processing auth mechanisms %ld for transaction identifier %@, transaction Pending: %ld, hasUnprocessedMechanisms: %ld, isValidMechanism: %ld, isComplete: %ld",  (uint8_t *)&v19,  0x3Eu);
    }

    if (*(void *)(*(void *)(a1 + 32) + 72LL)
      && objc_msgSend(*(id *)(a1 + 48), "isEqualToString:")
      && (!*(_BYTE *)(a1 + 74) || *(_BYTE *)(a1 + 72)))
    {
      [*(id *)(a1 + 32) _disableCriticalPushReliability];
    }
  }

void sub_1003188CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0LL;
}

void sub_100318B48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      int v12 = 138412802;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      uint64_t v15 = v10;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to perform transaction signature for pass: %@, transaction: %@, error: %@",  (uint8_t *)&v12,  0x20u);
    }
  }

  [*(id *)(*(void *)(a1 + 48) + 8) updateTransactionSignatureData:v5 forTransactionIdentifier:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 48) + 8) addDataCollectedAuthenticationMechanisms:2 forTransactionIdentifier:*(void *)(a1 + 56)];
  NSErrorUserInfoKey v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 104) objectForKey:*(void *)(a1 + 56)]);
  [*(id *)(*(void *)(a1 + 48) + 104) removeObjectForKey:*(void *)(a1 + 56)];
  [v11 enumerateObjectsUsingBlock:&stru_1006566B0];
}

void sub_100318CAC(id a1, id a2)
{
}

void sub_100318D90(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_1003190D8;
  v37[3] = &unk_100656728;
  v37[4] = *(void *)(a1 + 32);
  id v10 = v9;
  id v38 = v10;
  id v39 = *(id *)(a1 + 56);
  NSErrorUserInfoKey v11 = objc_retainBlock(v37);
  int v12 = v11;
  if (v8)
  {
    ((void (*)(void *, void, id))v11[2])(v11, 0LL, v8);
  }

  else
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1003191E0;
    v30[3] = &unk_10063AD70;
    id v25 = v13;
    id v31 = v25;
    id v15 = v14;
    id v32 = v15;
    id v33 = *(id *)(a1 + 48);
    id v34 = *(id *)(a1 + 40);
    id v16 = v7;
    id v35 = v16;
    id v36 = v12;
    id v17 = objc_retainBlock(v30);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) authenticationContext]);
    int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 signingKeyMaterial]);

    if (v19)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(28LL);
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v41 = v25;
        __int16 v42 = 2112;
        id v43 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Configuring key material for pass %@ and transaction %@",  buf,  0x16u);
      }

      id v22 = objc_alloc_init(&OBJC_CLASS___PKBarcodeEventConfigurationRequest);
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceAccountIdentifier]);
      -[PKBarcodeEventConfigurationRequest setDeviceAccountIdentifier:](v22, "setDeviceAccountIdentifier:", v23);

      -[PKBarcodeEventConfigurationRequest setConfigurationData:](v22, "setConfigurationData:", v19);
      -[PKBarcodeEventConfigurationRequest setConfigurationDataType:](v22, "setConfigurationDataType:", 1LL);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100319448;
      v26[3] = &unk_100639AF0;
      uint64_t v24 = v25;
      id v27 = v25;
      id v28 = v15;
      __int16 v29 = v17;
      [v16 handleConfigurationRequest:v22 completion:v26];
    }

    else
    {
      ((void (*)(void *))v17[2])(v17);
      uint64_t v24 = v25;
    }
  }
}

void sub_1003190D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1003191A8;
  v11[3] = &unk_100656700;
  id v14 = v7;
  id v15 = *(id *)(a1 + 48);
  id v12 = v5;
  id v13 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

uint64_t sub_1003191A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1003191E0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Signing transaction details for pass %@ and transaction %@",  buf,  0x16u);
  }

  id v6 = objc_alloc(&OBJC_CLASS___PKBarcodeEventSignatureRequest);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deviceAccountIdentifier]);
  id v9 = -[PKBarcodeEventSignatureRequest initWithPaymentTransaction:deviceAccountIdentifier:]( v6,  "initWithPaymentTransaction:deviceAccountIdentifier:",  v7,  v8);

  id v10 = *(void **)(a1 + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100319354;
  v11[3] = &unk_100656750;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 72);
  [v10 handleSignatureRequest:v9 completion:v11];
}

void sub_100319354(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    int v10 = 138412546;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Signed transaction details for pass %@ and transaction %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v8 = a1[6];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 signedData]);
  (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v9, 0LL);
}

uint64_t sub_100319448(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Configured key material for pass %@ and transaction %@",  (uint8_t *)&v7,  0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1003196C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10031978C;
  void v13[3] = &unk_10063CD10;
  id v14 = v6;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v15 = v5;
  uint64_t v16 = v10;
  id v17 = v9;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, v13);
}

void sub_10031978C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void, void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 0LL);
  }

  else if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10031992C;
    v7[3] = &unk_1006567A0;
    id v3 = *(void **)(a1 + 56);
    void v7[4] = *(void *)(a1 + 48);
    id v8 = v3;
    [v2 beginExtensionRequestWithCompletion:v7];
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v9 = NSDebugDescriptionErrorKey;
    uint64_t v10 = @"No matching extensions found";
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1001LL,  v5));
    (*(void (**)(uint64_t, void, void *, void))(v4 + 16))(v4, 0LL, v6, 0LL);
  }

void sub_10031992C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003199C0;
  v7[3] = &unk_10063AC90;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1003199C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 && ([v2 isInvalidated] & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) extensionContext]);
    if (v3)
    {
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___PKPaymentInformationEventExtensionHostContext, v7);
      if ((objc_opt_isKindOfClass(v3, v8) & 1) != 0)
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_100319B54;
        v10[3] = &unk_100639300;
        uint64_t v9 = *(void *)(a1 + 40);
        id v11 = *(id *)(a1 + 32);
        (*(void (**)(uint64_t, void *, void, void *))(v9 + 16))(v9, v3, 0LL, v10);
        id v5 = v11;
        goto LABEL_5;
      }
    }
  }

  else
  {
    id v3 = 0LL;
  }

  [*(id *)(a1 + 32) invalidate];
  uint64_t v4 = *(void *)(a1 + 40);
  NSErrorUserInfoKey v12 = NSDebugDescriptionErrorKey;
  uint64_t v13 = @"Failed to begin extension request";
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  v5));
  (*(void (**)(uint64_t, void, void *, void))(v4 + 16))(v4, 0LL, v6, 0LL);

LABEL_5:
}

id sub_100319B54(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_100319BC8(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 81LL) = 1;
  return result;
}

id sub_100319C30(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 81LL) = 0;
  return [*(id *)(a1 + 32) _processLatestTransactionPendingUserNotification];
}

id sub_10031A110(uint64_t a1)
{
  return [*(id *)(a1 + 32) _submitAuthenticationResultForTransaction:*(void *)(a1 + 40) pass:*(void *)(a1 + 48) sessionExchangeToken:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

id sub_10031A478(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 96LL) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return [*(id *)(a1 + 32) _processLatestTransactionPendingUserNotification];
}

void sub_10031A7F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10031A964;
  block[3] = &unk_100656868;
  id v14 = v6;
  id v8 = *(id *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 40);
  id v25 = v8;
  uint64_t v15 = v9;
  id v16 = v10;
  id v17 = v5;
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  id v20 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 72);
  id v22 = *(id *)(a1 + 80);
  char v26 = *(_BYTE *)(a1 + 112);
  id v23 = *(id *)(a1 + 88);
  id v24 = *(id *)(a1 + 96);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, block);
}

void sub_10031A964(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v22 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to sign transaction authentication result with error: %@. Not submitting authentication results.",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 120);
    if (v5) {
      (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, 0LL, *(void *)(a1 + 32));
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 24LL);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) serviceIdentifier]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10031AB4C;
    v12[3] = &unk_100656840;
    void v12[4] = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 80);
    id v13 = *(id *)(a1 + 88);
    id v14 = *(id *)(a1 + 96);
    char v20 = *(_BYTE *)(a1 + 128);
    id v15 = *(id *)(a1 + 104);
    id v16 = *(id *)(a1 + 112);
    id v17 = *(id *)(a1 + 72);
    id v18 = *(id *)(a1 + 64);
    id v19 = *(id *)(a1 + 120);
    [v7 submitTransactionAuthenticationResultsData:v6 signature:v8 forPass:v9 transactionServiceIdentifier:v10 notificationService:v11 completion:v12];
  }

void sub_10031AB4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10031AC8C;
  block[3] = &unk_100656818;
  id v13 = v7;
  id v14 = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v6;
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 48);
  char v23 = *(_BYTE *)(a1 + 96);
  id v18 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 64);
  id v20 = *(id *)(a1 + 72);
  id v21 = *(id *)(a1 + 80);
  id v22 = *(id *)(a1 + 88);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10031AC8C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v42 = v4;
    __int16 v43 = 2112;
    uint64_t v44 = v5;
    __int16 v45 = 2112;
    uint64_t v46 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Transaction authentication result submission for transaction %@ completed with response %@, error %@",  buf,  0x20u);
  }

  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
    if ([v8 isEqualToString:@"PDTaskErrorDomain"])
    {
      id v9 = [*(id *)(a1 + 48) code];

      if (v9 == (id)40601)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        id v11 = *(void **)(*(void *)(a1 + 56) + 16LL);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472LL;
        v33[2] = sub_10031B06C;
        v33[3] = &unk_1006567F0;
        char v40 = *(_BYTE *)(a1 + 112);
        id v12 = *(id *)(a1 + 72);
        uint64_t v13 = *(void *)(a1 + 56);
        id v34 = v12;
        uint64_t v35 = v13;
        id v36 = *(id *)(a1 + 80);
        id v37 = *(id *)(a1 + 88);
        id v38 = *(id *)(a1 + 96);
        id v39 = *(id *)(a1 + 104);
        [v11 invalidateCertificateOfType:0 forPassUniqueIdentifier:v10 withCompletion:v33];

        return;
      }
    }

    else
    {
    }

    uint64_t v17 = *(void *)(a1 + 104);
    if (v17) {
      (*(void (**)(uint64_t, void, void))(v17 + 16))(v17, 0LL, *(void *)(a1 + 48));
    }
  }

  else
  {
    id v14 = [*(id *)(a1 + 40) updatedTransactionStatus];
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updatedAuthenticationContext]);
    uint64_t v16 = v15;
    if (v14 || ![v15 requestedAuthenticationMechanisms]) {
      [*(id *)(*(void *)(a1 + 56) + 8) markAuthenticationCompleteforTransactionIdentifier:*(void *)(a1 + 32)];
    }
    else {
      [*(id *)(*(void *)(a1 + 56) + 8) resetTransactionAuthenticationForTransactionIdentifier:*(void *)(a1 + 32)];
    }
    [*(id *)(a1 + 88) setTransactionStatus:v14];
    [*(id *)(a1 + 88) setAuthenticationContext:v16];
    [*(id *)(a1 + 88) addUpdateReasons:0x8000];
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) devicePrimaryBarcodePaymentApplication]);
    id v19 = *(void **)(*(void *)(a1 + 56) + 8LL);
    uint64_t v20 = *(void *)(a1 + 88);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) uniqueID]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue( [v19 insertOrUpdatePaymentTransaction:v20 withPassUniqueIdentifier:v21 paymentApplication:v18 insertionMode:0 perform Truncation:0 insertedTransaction:0]);

    if ((PKPaymentTransactionHasAuthenticationRequest(v22) & 1) == 0)
    {
      char v23 = *(void **)(*(void *)(a1 + 56) + 40LL);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v18 transactionSourceIdentifier]);
      [v23 processPaymentTransaction:v22 forTransactionSourceIdentifier:v24];

      if (![v22 transactionStatus]) {
        [*(id *)(a1 + 56) _enableCriticalPushReliabilityForTransaction:v22];
      }
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 authenticationContext]);
    objc_msgSend(v25, "setAuthenticationFailure:", objc_msgSend(*(id *)(a1 + 40), "authenticationFailure"));

    char v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) signingCertificate]);
    if (v26)
    {
      uint64_t v27 = *(void *)(a1 + 56);
      id v28 = *(dispatch_queue_s **)(v27 + 112);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_10031B1A4;
      v30[3] = &unk_100639350;
      void v30[4] = v27;
      id v31 = *(id *)(a1 + 96);
      id v32 = v26;
      dispatch_async(v28, v30);
    }

    uint64_t v29 = *(void *)(a1 + 104);
    if (v29) {
      (*(void (**)(uint64_t, void *, void))(v29 + 16))(v29, v22, 0LL);
    }
  }

void sub_10031B06C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80) && !*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = *(dispatch_queue_s **)(v3 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10031B188;
    block[3] = &unk_10063CD88;
    void block[4] = v3;
    id v8 = v4;
    id v9 = *(id *)(a1 + 56);
    id v10 = *(id *)(a1 + 64);
    id v11 = *(id *)(a1 + 72);
    dispatch_async(v5, block);
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2)
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAuxiliaryCapabilityErrorDomain,  2LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v6);
    }
  }

id sub_10031B188(uint64_t a1)
{
  return [*(id *)(a1 + 32) _submitAuthenticationResult:*(void *)(a1 + 40) forTransaction:*(void *)(a1 + 48) pass:*(void *)(a1 + 56) retryForInvalidCertificate:0 sessionExchangeToken:0 completion:*(void *)(a1 + 64)];
}

id sub_10031B1A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _configureSigningCertificateForPass:*(void *)(a1 + 40) withSigningCertificate:*(void *)(a1 + 48)];
}

void sub_10031B5C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v19 = v12;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Signing certificate configuration for pass %@ failed to acquire extension context with error: %@",  buf,  0x16u);
    }

    if (v9) {
      v9[2](v9);
    }
  }

  else
  {
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___PKBarcodeEventConfigurationRequest);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceAccountIdentifier]);
    -[PKBarcodeEventConfigurationRequest setDeviceAccountIdentifier:](v13, "setDeviceAccountIdentifier:", v14);

    -[PKBarcodeEventConfigurationRequest setConfigurationDataType:](v13, "setConfigurationDataType:", 2LL);
    -[PKBarcodeEventConfigurationRequest setConfigurationData:](v13, "setConfigurationData:", *(void *)(a1 + 48));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10031B778;
    v15[3] = &unk_10063AC90;
    id v16 = *(id *)(a1 + 32);
    uint64_t v17 = v9;
    [v7 handleConfigurationRequest:v13 completion:v15];
  }
}

uint64_t sub_10031B778(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Signing certificate configuration for pass %@ completed",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C01C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C14C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C278(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C3A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C4D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C5FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10031C7CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10031C940(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0LL);
    }
  }

  else if (v3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t sub_10031CAF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10031D534(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PKBeacon);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10031D840(id a1, PKBeacon *a2, id a3)
{
}

void sub_10031D848(id a1, PKBeacon *a2, id a3)
{
}

void sub_10031D850(id a1, PKBeacon *a2, id a3)
{
}

void sub_10031D858(id a1, PKBeacon *a2, id a3)
{
}

void sub_10031D860(id a1, PKBeacon *a2, id a3)
{
}

void sub_10031E540(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10031E784(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_10031E78C(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_10031E794(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_10031E79C(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_10031E7A4(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPaymentFundingDetailsBankAccount setStatus:](v4, "setStatus:", [a3 integerValue]);
}

NSString *__cdecl sub_10031F95C(id a1, PKPhysicalCard *a2)
{
  return (NSString *)-[PKPhysicalCard identifier](a2, "identifier");
}

void sub_100320598(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10032070C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v14 = objc_alloc_init(&OBJC_CLASS___PKPhysicalCard);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v14 withProperties:v7 values:a4];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[PhysicalCardOrderActivityEvent physicalCardOrderActivityEventsForPhysicalCardPID:inDatabase:]( &OBJC_CLASS___PhysicalCardOrderActivityEvent,  "physicalCardOrderActivityEventsForPhysicalCardPID:inDatabase:",  a2,  v8));
  -[PKPhysicalCard setOrderActivity:](v14, "setOrderActivity:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[PKPhysicalCard identifier](v14, "identifier"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AccountPhysicalCardShippingUpdate physicalCardShippingUpdatesForPhysicalCardWithIdentifier:inDatabase:]( &OBJC_CLASS___AccountPhysicalCardShippingUpdate,  "physicalCardShippingUpdatesForPhysicalCardWithIdentifier:inDatabase:",  v10,  v11));
  -[PKPhysicalCard setShippingActivity:](v14, "setShippingActivity:", v12);

  uint64_t v13 = v14;
  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 48), "addObject:");
    uint64_t v13 = v14;
  }
}

void sub_100320980(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320988(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320990(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCard setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1003209D4(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPhysicalCard setFrontFaceImageURL:](v4, "setFrontFaceImageURL:", v5);
}

void sub_100320A20(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320A28(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPhysicalCard setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_100320A74(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320A7C(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320A84(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320A8C(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_100320A94(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCard setExpirationMonth:](v4, "setExpirationMonth:", [a3 integerValue]);
}

void sub_100320AD8(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCard setExpirationYear:](v4, "setExpirationYear:", [a3 integerValue]);
}

void sub_100321174(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003212D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKPhysicalCardOrderActivityEvent);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1003213D8(id a1, PKPhysicalCardOrderActivityEvent *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCardOrderActivityEvent setActivity:](v4, "setActivity:", [a3 integerValue]);
}

void sub_10032141C(id a1, PKPhysicalCardOrderActivityEvent *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPhysicalCardOrderActivityEvent setDate:](v4, "setDate:", v5);
}

void sub_10032195C(uint64_t a1, uint64_t a2)
{
  id v11 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentOfferCurrencyAmount),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v11, "valueForProperty:", @"b"));
  uint64_t v4 = PKCurrencyStorageNumberToCurrencyDecimal(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  uint64_t v6 = objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v11, "valueForProperty:", @"c"));
  id v7 = (void *)v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    id v10 = 0LL;
  }

  else
  {
    uint64_t v9 = PKCurrencyAmountMake(v5, v6);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  }

  [*(id *)(a1 + 40) safelyAddObject:v10];
}

BOOL PKIsStringRoomNumber(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet"));
  id v3 = [v1 rangeOfCharacterFromSet:v2];

  BOOL v4 = v3 != (id)0x7FFFFFFFFFFFFFFFLL;
  return v4;
}

id sub_100322A08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateFieldDetectionState];
}

void sub_100322D80(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) supportedTerminalForTCIs:*(void *)(a1 + 40) brandCode:a3]);
    [*(id *)(a1 + 32) _requestNativePairingWithSupportedTerminal:v6];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Terminal is not requesting to pair", buf, 2u);
    }
  }

void sub_10032303C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to present native pairing card for terminal (%@)",  (uint8_t *)&v6,  0xCu);
    }
  }

void sub_1003235D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003237AC(id a1, PKTransactionReceipt *a2, id a3)
{
}

void sub_1003237B4(id a1, PKTransactionReceipt *a2, id a3)
{
}

void sub_1003237BC(id a1, PKTransactionReceipt *a2, id a3)
{
}

void sub_100323C80(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountSummary setCurrentBalance:](v4, "setCurrentBalance:", v6);
}

void sub_100323CD0(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountSummary setAvailableBalance:](v4, "setAvailableBalance:", v6);
}

void sub_100323D20(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountSummary setPendingBalance:](v4, "setPendingBalance:", v6);
}

void sub_100323D70(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountSummary setInterestYTD:](v4, "setInterestYTD:", v6);
}

void sub_100323DC0(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountSummary setInterestTotal:](v4, "setInterestTotal:", v6);
}

void sub_100323E10(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountSummary setAPY:](v4, "setAPY:", v6);
}

void sub_100323E64(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  -[PKSavingsAccountSummary setHasWithdrawalLimit:](v4, "setHasWithdrawalLimit:", [a3 BOOLValue]);
}

void sub_100323EA8(id a1, PKSavingsAccountSummary *a2, id a3)
{
  BOOL v4 = a2;
  -[PKSavingsAccountSummary setWithdrawalsRemaining:]( v4,  "setWithdrawalsRemaining:",  [a3 unsignedIntegerValue]);
}

void sub_100323FC8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100324994(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100324B9C(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDAccountWebServiceEndpointMetadata setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_100324BE8(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDAccountWebServiceEndpointMetadata setLocalLastUpdated:](v4, "setLocalLastUpdated:", v5);
}

void sub_100324C34(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  BOOL v4 = a2;
  -[PDAccountWebServiceEndpointMetadata setIsDirty:](v4, "setIsDirty:", [a3 BOOLValue]);
}

void sub_100324C78(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  BOOL v4 = a2;
  -[PDAccountWebServiceEndpointMetadata setEndpoint:](v4, "setEndpoint:", [a3 integerValue]);
}

void sub_100324CBC(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
}

void sub_10032508C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 40) addObject:v3];
    id v3 = v4;
  }
}

void sub_1003259EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKTransactionReleasedDataElement);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100325BE4(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
}

void sub_100325BEC(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
}

void sub_100325BF4(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionReleasedDataElement setRetentionIntent:]( v4,  "setRetentionIntent:",  [a3 unsignedIntegerValue]);
}

void sub_100325C38(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    -[PKTransactionReleasedDataElement setRetentionPeriod:]( v4,  "setRetentionPeriod:",  [a3 unsignedIntegerValue]);
  }

void sub_100325FB8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    if ([*(id *)(a1 + 48) count])
    {
      [*(id *)(a1 + 48) enumerateObjectsUsingBlock:&stru_100657060];
      [*(id *)(a1 + 48) removeAllObjects];
      id v3 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0LL;

      sub_1003273E8(a1);
    }

    os_unfair_lock_unlock(v2);
  }

void sub_1003262FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_100326340(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(4LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v5 = WeakRetained;
    int v6 = 134218240;
    id v7 = WeakRetained;
    __int16 v8 = 1024;
    unsigned int v9 = [v5 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDAssertionCoordinator (%p:%d): connection invalidated",  (uint8_t *)&v6,  0x12u);
  }

  sub_100326420(*(void *)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100326420(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    [v3 setIsForegroundApplication:0];
    [v3 cancelPendingAssertionRequests];
    [v3 clearConnectionReference];
    sub_100327298(a1, v3);
  }

id sub_10032647C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(4LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v5 = WeakRetained;
    int v7 = 134218240;
    id v8 = WeakRetained;
    __int16 v9 = 1024;
    unsigned int v10 = [v5 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDAssertionCoordinator (%p:%d): connection interrupted",  (uint8_t *)&v7,  0x12u);
  }

  return +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Unexpected interruption on PDAssertionCoordinator connection");
}

id sub_100326574(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 currentState]);
  uint64_t v2 = v1;
  if (v1 && [v1 taskState] == 4)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 endowmentNamespaces]);
    id v4 = [v3 containsObject:FBSSceneVisibilityEndowmentNamespace];
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

void sub_1003265EC(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 24);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    sub_1003272F0(a1, v4);

    os_unfair_lock_unlock(v3);
  }

void sub_10032672C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100326748(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  if ([v6 interestedInAssertionOfType:*(void *)(a1 + 40)])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 allowAcquisitionOfAssertionOfType:*(void *)(a1 + 40)];
    *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) ^ 1;
  }
}

void sub_1003268BC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allObjects]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24LL));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100326960;
  v5[3] = &unk_100656FF8;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = v2;
  uint64_t v7 = v3;
  [v4 enumerateObjectsUsingBlock:v5];
}

void sub_100326960(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "interestedInAssertionOfType:", objc_msgSend(*(id *)(a1 + 32), "type"))
    && (objc_opt_respondsToSelector(v3, "assertionManager:didAcquireAssertion:") & 1) != 0)
  {
    [v3 assertionManager:*(void *)(a1 + 40) didAcquireAssertion:*(void *)(a1 + 32)];
  }
}

void sub_100326AD0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allObjects]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24LL));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100326B74;
  v5[3] = &unk_100656FF8;
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = v2;
  uint64_t v7 = v3;
  [v4 enumerateObjectsUsingBlock:v5];
}

void sub_100326B74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "interestedInAssertionOfType:", objc_msgSend(*(id *)(a1 + 32), "type"))
    && (objc_opt_respondsToSelector(v3, "assertionManager:didInvalidateAssertion:") & 1) != 0)
  {
    [v3 assertionManager:*(void *)(a1 + 40) didInvalidateAssertion:*(void *)(a1 + 32)];
  }
}

void sub_100326CC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100326CE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100326CF0(uint64_t a1)
{
}

void sub_100326CF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v9 = v3;
  if (!v4)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v3 = v9;
    id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 assertionsOfType:*(void *)(a1 + 40)]);
  [v4 addObjectsFromArray:v8];
}

void sub_100327298(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 24);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      sub_1003275A0(a1, v4);

      os_unfair_lock_unlock(v3);
    }
  }

void sub_1003272F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3 && [*(id *)(a1 + 48) indexOfObjectIdenticalTo:v3] == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(4LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Adding assertion coordinator: %@.",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(a1 + 48) addObject:v4];
    [v4 setDelegate:a1];
    sub_1003273E8(a1);
  }
}

void sub_1003273E8(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v3 = *(id *)(a1 + 48);
    id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        int v7 = 0LL;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessIdentifier identifierWithPid:]( RBSProcessIdentifier,  "identifierWithPid:",  [*(id *)(*((void *)&v13 + 1) + 8 * (void)v7) remoteProcessIdentifier]));
          if (v8) {
            -[NSMutableSet addObject:](v2, "addObject:", v8);
          }

          int v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v5);
    }

    if (!-[NSMutableSet count](v2, "count"))
    {

      id v2 = 0LL;
    }

    if ((PKEqualObjects(*(void *)(a1 + 56), v2) & 1) == 0)
    {
      id v9 = -[NSMutableSet copy](v2, "copy");
      unsigned int v10 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v9;

      id v11 = *(void **)(a1 + 64);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_100327674;
      v12[3] = &unk_1006570B0;
      void v12[4] = a1;
      [v11 updateConfiguration:v12];
    }
  }

void sub_1003275A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v7 = v3;
      id v5 = [*(id *)(a1 + 48) indexOfObjectIdenticalTo:v3];
      id v4 = v7;
      if (v5 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        id v6 = v5;
        [v7 invalidateAllAssertions];
        [v7 setDelegate:0];
        [*(id *)(a1 + 48) removeObjectAtIndex:v6];
        if (*(id *)(a1 + 40) == v7)
        {
          *(void *)(a1 + 40) = 0LL;
        }

        sub_1003273E8(a1);
        id v4 = v7;
      }
    }
  }
}

void sub_100327640(id a1, PDAssertionCoordinator *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  -[PDAssertionCoordinator invalidateAllAssertions](v4, "invalidateAllAssertions");
  -[PDAssertionCoordinator setDelegate:](v4, "setDelegate:", 0LL);
}

void sub_100327674(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 56LL))
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v5 = *(id *)(*(void *)(a1 + 32) + 56LL);
    id v6 = [v5 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v17;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v17 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingIdentifier:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingIdentifier:",  *(void *)(*((void *)&v16 + 1) + 8LL * (void)v8)));
          if (v9) {
            -[NSMutableArray addObject:](v4, "addObject:", v9);
          }

          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }

      while (v6);
    }
  }

  else
  {
    id v4 = 0LL;
  }

  [v3 setPredicates:v4];
  if (v3)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(v10 + 56))
    {
      if (!*(_BYTE *)(v10 + 72))
      {
        *(_BYTE *)(v10 + 72) = 1;
        id v11 = objc_alloc_init(&OBJC_CLASS___RBSProcessStateDescriptor);
        [v11 setValues:1];
        uint64_t v20 = FBSSceneVisibilityEndowmentNamespace;
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));
        [v11 setEndowmentNamespaces:v12];

        [v3 setStateDescriptor:v11];
        [v3 setServiceClass:17];
        objc_initWeak(&location, *(id *)(a1 + 32));
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        void v13[2] = sub_1003278F4;
        void v13[3] = &unk_100657088;
        objc_copyWeak(&v14, &location);
        [v3 setUpdateHandler:v13];
        objc_destroyWeak(&v14);
        objc_destroyWeak(&location);
      }
    }
  }
}

void sub_1003278D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1003278F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = (id *)(a1 + 32);
  id v6 = a4;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  sub_100327958((uint64_t)WeakRetained, v7, v6);
}

void sub_100327958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    id v7 = [*(id *)(a1 + 48) copy];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 state]);
    id v9 = v8;
    id v19 = v6;
    if (v8) {
      BOOL v10 = [v8 taskState] == 1;
    }
    else {
      BOOL v10 = 1;
    }
    unsigned int v11 = sub_100326574(v5);
    id v20 = v5;
    unsigned int v12 = [v5 pid];
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v13 = v7;
    id v14 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v22;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v13);
          }
          __int128 v18 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
          if (objc_msgSend(v18, "remoteProcessIdentifier", v19) == v12)
          {
            if (v10)
            {
              sub_100326420(a1, v18);
            }

            else if (v11)
            {
              [v18 setIsForegroundApplication:1];
              [v18 processPendingAssertionRequests];
            }

            else if ([v18 isForegroundApplication])
            {
              [v18 setIsForegroundApplication:0];
              [v18 cancelPendingAssertionRequests];
              [v18 invalidateAssertionsForBackgroundApplicationState];
            }
          }
        }

        id v15 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v15);
    }

    id v6 = v19;
    id v5 = v20;
  }
}

void sub_100328380(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CloudStoreZoneShareParticipant),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  if (v3)
  {
    id v4 = *(void **)(a1 + 40);
    id v6 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( -[CloudStoreZoneShareParticipant cloudStoreZoneShareParticipant]( v3,  "cloudStoreZoneShareParticipant"));
    [v4 addObject:v5];

    id v3 = v6;
  }
}

void sub_10032868C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100328844(id a1, PKCloudStoreZoneShareParticipant *a2, id a3)
{
}

void sub_10032884C(id a1, PKCloudStoreZoneShareParticipant *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___CKUserIdentityLookupInfo, v6),  v4,  0LL);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  -[PKCloudStoreZoneShareParticipant setLookupInfo:](v5, "setLookupInfo:", v8);
}

void sub_1003288D4(id a1, PKCloudStoreZoneShareParticipant *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  id v7 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  objc_opt_class(&OBJC_CLASS___CKDeviceToDeviceShareInvitationToken, v6));
  id v9 = (id)objc_claimAutoreleasedReturnValue(v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_strictlyUnarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKCloudStoreZoneShareParticipant setInvitationToken:](v5, "setInvitationToken:", v8);
}

void sub_100328ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountPhysicalCardStatusUpdate),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountPhysicalCardStatusUpdate physicalCardStatusUpdate](v5, "physicalCardStatusUpdate"));
  [v3 addObject:v4];
}

void sub_100328D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [*(id *)(a1 + 48) persistentID];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[PhysicalCard physicalCardsForPhysicalCardStatusUpdatePID:inDatabase:]( &OBJC_CLASS___PhysicalCard,  "physicalCardsForPhysicalCardStatusUpdatePID:inDatabase:",  v4,  v5));

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 allObjects]);
  [v6 setUpdatedPhysicalCards:v7];
}

void sub_100328FD0(id a1, PKAccountPhysicalCardStatusUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPhysicalCardStatusUpdate setReason:](v4, "setReason:", [a3 integerValue]);
}

NSString *__cdecl sub_10032932C(id a1, PKPass *a2)
{
  return (NSString *)-[PKPass uniqueID](a2, "uniqueID");
}

void sub_10032A1B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10032A1C8(id a1, PDWorldRegionAggregatorObserver *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "worldRegionProcessingCompletedWithSuccess:") & 1) != 0) {
    -[PDWorldRegionAggregatorObserver worldRegionProcessingCompletedWithSuccess:]( v2,  "worldRegionProcessingCompletedWithSuccess:",  1LL);
  }
}

uint64_t sub_10032A208(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10032A218(uint64_t a1)
{
}

void sub_10032A220(uint64_t a1)
{
  v10[0] = 0LL;
  v10[1] = v10;
  v10[2] = 0x2020000000LL;
  char v11 = 1;
  id v2 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10032A3B4;
  v9[3] = &unk_1006396D8;
  void v9[4] = *(void *)(a1 + 32);
  [v2 addOperation:v9];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10032A4B8;
  v8[3] = &unk_1006396D8;
  void v8[4] = *(void *)(a1 + 32);
  [v2 addOperation:v8];
  if (*(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 49))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10032A5BC;
    v7[3] = &unk_10063BBC8;
    void v7[4] = *(void *)(a1 + 32);
    void v7[5] = v10;
    [v2 addOperation:v7];
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10032A6DC;
  v6[3] = &unk_100657220;
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  void v6[5] = v10;
  v6[6] = v4;
  id v5 = [v2 evaluateWithInput:v3 completion:v6];

  _Block_object_dispose(v10, 8);
}

void sub_10032A39C(_Unwind_Exception *a1)
{
}

void sub_10032A3B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(18LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Aggregation operation cleaning up regions",  buf,  2u);
  }

  BOOL v10 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10032A4A4;
  void v13[3] = &unk_1006396B0;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v10 _cleanupRegionsWithCompletion:v13];
}

uint64_t sub_10032A4A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10032A4B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(18LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Aggregation operation processing transactions",  buf,  2u);
  }

  BOOL v10 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10032A5A8;
  void v13[3] = &unk_1006396B0;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v10 _processRemainingTransactionsWithCompletion:v13];
}

uint64_t sub_10032A5A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10032A5BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(18LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Aggregation operation processing transactions localized content",  buf,  2u);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10032A6B0;
  void v14[3] = &unk_10063B580;
  id v11 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v16 = v7;
  uint64_t v17 = v10;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  [v11 _processMissingLocalizedContentWithCompletion:v14];
}

uint64_t sub_10032A6B0(void *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (*(_BYTE *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(_BYTE *)(v2 + 24) = v3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_10032A6DC(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(18LL);
  char v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Aggregation operation completed", buf, 2u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 16LL));
  *(_BYTE *)(a1[4] + 20LL) = 0;
  *(_BYTE *)(a1[4] + 22LL) = 0;
  *(_BYTE *)(a1[4] + 23LL) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 16LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10032A7C8;
  v7[3] = &unk_1006571F8;
  uint64_t v4 = (void *)a1[4];
  void v7[4] = a1[5];
  [v4 _accessObserversWithHandler:v7];
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0LL;
}

void sub_10032A7C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "worldRegionProcessingCompletedWithSuccess:") & 1) != 0) {
    [v3 worldRegionProcessingCompletedWithSuccess:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
  }
}

void sub_10032AB3C(_Unwind_Exception *a1)
{
}

void sub_10032AB68(id a1, PDWorldRegionAggregatorObserver *a2)
{
  uint64_t v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "worldRegionProcessingStarted") & 1) != 0) {
    -[PDWorldRegionAggregatorObserver worldRegionProcessingStarted](v2, "worldRegionProcessingStarted");
  }
}

void sub_10032ABA4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10032AC60;
  void v13[3] = &unk_10063EF60;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 _processMissingLocalizedContent:v9 completion:v13];
}

void *sub_10032AC60(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 || (_DWORD)a2) {
    *(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL) = 0;
  }
  uint64_t v3 = result[5];
  if (v3) {
    return (void *)(*(uint64_t (**)(void, void, uint64_t))(v3 + 16))(result[5], result[4], a2);
  }
  return result;
}

uint64_t sub_10032AC98(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  }
  return result;
}

void sub_10032AD94(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) transactionsMissingWorldRegionWithLimit:1 onlyEligibleForProcessing:1]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 anyObject]);

  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    *(_BYTE *)(*(void *)(a1 + 32) + 22LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10032AE80;
    v6[3] = &unk_1006483D8;
    uint64_t v4 = *(void **)(a1 + 40);
    id v7 = *(id *)(a1 + 32);
    id v8 = v4;
    [v7 _processTransaction:v3 completion:v6];
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }
}

uint64_t (**sub_10032AE80(uint64_t a1, int a2))(void)
{
  if (a2) {
    return (uint64_t (**)(void))[*(id *)(a1 + 32) _processRemainingTransactionsWithCompletion:*(void *)(a1 + 40)];
  }
  uint64_t Object = PKLogFacilityTypeGetObject(18LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Aborted transaction/region matching", v6, 2u);
  }

  uint64_t result = *(uint64_t (***)(void))(a1 + 40);
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_10032B278(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = v12;
  if (!v12)
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) regionsForTransaction:v9 localeIdentifier:0]);
    id v19 = [v18 count];

    if (v19)
    {
LABEL_16:
      BOOL v27 = 1LL;
      goto LABEL_17;
    }

    uint64_t v20 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _worldRegionFromPlacemark:v10 orAddress:v11]);
    __int128 v21 = (void *)v20;
    if (!v9 || !v20)
    {
      if (v10) {
        uint64_t v32 = 2LL;
      }
      else {
        uint64_t v32 = 1LL;
      }
      id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDWorldAggregatorErrorDomain",  v32,  0LL));
      uint64_t Object = PKLogFacilityTypeGetObject(18LL);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
        *(_DWORD *)__int128 buf = 138413058;
        id v62 = v36;
        __int16 v63 = 2112;
        id v64 = v10;
        __int16 v65 = 2112;
        id v66 = v11;
        __int16 v67 = 2112;
        v68 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Failed to create region for %@, placemark: %@, address: %@, error %@",  buf,  0x2Au);
      }

      [*(id *)(*(void *)(a1 + 32) + 8) failedToAssociateTransactionToRegion:v9 error:v33];
      goto LABEL_45;
    }

    context = objc_autoreleasePoolPush();
    uint64_t v22 = PKLogFacilityTypeGetObject(18LL);
    __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v24)
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier", context));
        *(_DWORD *)__int128 buf = 138412802;
        id v62 = v10;
        __int16 v63 = 2112;
        id v64 = v25;
        __int16 v65 = 2112;
        id v66 = v21;
        char v26 = "Found placemark %@ for %@.\nRegion: %@";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v26, buf, 0x20u);
      }
    }

    else if (v24)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier", context));
      *(_DWORD *)__int128 buf = 138412802;
      id v62 = v11;
      __int16 v63 = 2112;
      id v64 = v25;
      __int16 v65 = 2112;
      id v66 = v21;
      char v26 = "Found address %@ for %@.\nRegion: %@";
      goto LABEL_31;
    }

    id v54 = v11;

    [*(id *)(a1 + 32) _associateTransaction:v9 toRegion:v21];
    id v37 = *(void **)(*(void *)(a1 + 32) + 8LL);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v9 merchant]);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 mapsMerchant]);
    char v40 = (void *)objc_claimAutoreleasedReturnValue([v37 transactionsWithoutRegionMatchingMapsMerchant:v39 limit:50]);

    if ([v40 count])
    {
      uint64_t v41 = PKLogFacilityTypeGetObject(18LL);
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      do
      {
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          id v43 = [v40 count];
          *(_DWORD *)__int128 buf = 134217984;
          id v62 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Matched %ld transactions for same POI",  buf,  0xCu);
        }

        __int128 v59 = 0u;
        __int128 v60 = 0u;
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        id v44 = v40;
        id v45 = [v44 countByEnumeratingWithState:&v57 objects:v69 count:16];
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = *(void *)v58;
          do
          {
            for (i = 0LL; i != v46; i = (char *)i + 1)
            {
              if (*(void *)v58 != v47) {
                objc_enumerationMutation(v44);
              }
              objc_msgSend( *(id *)(a1 + 32),  "_associateTransaction:toRegion:",  *(void *)(*((void *)&v57 + 1) + 8 * (void)i),  v21,  context);
            }

            id v46 = [v44 countByEnumeratingWithState:&v57 objects:v69 count:16];
          }

          while (v46);
        }

        __int128 v49 = *(void **)(*(void *)(a1 + 32) + 8LL);
        __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v9 merchant]);
        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 mapsMerchant]);
        char v40 = (void *)objc_claimAutoreleasedReturnValue([v49 transactionsWithoutRegionMatchingMapsMerchant:v51 limit:50]);
      }

      while ([v40 count]);
    }

    objc_autoreleasePoolPop(context);
    id v52 = *(void **)(a1 + 32);
    v55[0] = _NSConcreteStackBlock;
    v55[1] = 3221225472LL;
    v55[2] = sub_10032B850;
    v55[3] = &unk_100657290;
    id v56 = v21;
    [v52 _accessObserversWithHandler:v55];
    id v33 = v56;
    id v11 = v54;
LABEL_45:

    BOOL v27 = 1LL;
    goto LABEL_20;
  }

  id v14 = (NSString *)(id)objc_claimAutoreleasedReturnValue([v12 domain]);
  id v15 = kCLErrorDomain;
  if (v14 == v15)
  {

    goto LABEL_14;
  }

  uint64_t v16 = v15;
  if (!v14 || !v15)
  {

    goto LABEL_16;
  }

  unsigned int v17 = -[NSString isEqualToString:](v14, "isEqualToString:", v15);

  if (!v17) {
    goto LABEL_16;
  }
LABEL_14:
  BOOL v27 = [v13 code] != (id)2;
LABEL_17:
  uint64_t v28 = PKLogFacilityTypeGetObject(18LL);
  uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
    *(_DWORD *)__int128 buf = 138412546;
    id v62 = v30;
    __int16 v63 = 2112;
    id v64 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Failed to create region for %@, error %@",  buf,  0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) failedToAssociateTransactionToRegion:v9 error:v13];
LABEL_20:
  uint64_t v31 = *(void *)(a1 + 40);
  if (v31) {
    (*(void (**)(uint64_t, BOOL))(v31 + 16))(v31, v27);
  }
}

void sub_10032B850(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "worldRegionUpdated:") & 1) != 0) {
    [v3 worldRegionUpdated:*(void *)(a1 + 32)];
  }
}

void sub_10032B89C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(18LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      int v14 = 138412546;
      id v15 = v6;
      __int16 v16 = 2112;
      unsigned int v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error reverse geocoding: %@ for %@",  (uint8_t *)&v14,  0x16u);
    }
  }

  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  (*(void (**)(uint64_t, uint64_t, void *, void, id))(v11 + 16))(v11, v10, v13, 0LL, v6);
}

void sub_10032BA78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "transaction:associatedToWorldRegion:") & 1) != 0) {
    [v3 transaction:*(void *)(a1 + 32) associatedToWorldRegion:*(void *)(a1 + 40)];
  }
}

void sub_10032BF98(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

id sub_10032C4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___ValueAddedMerchant,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10032C550(id a1, PKValueAddedMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "pk_decodeHexadecimal"));
  -[PKValueAddedMerchant setIdentifier:](v4, "setIdentifier:", v5);
}

void sub_10032C5A0(id a1, PKValueAddedMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKValueAddedMerchant setTimesPresented:](v4, "setTimesPresented:", [a3 integerValue]);
}

void sub_10032C8BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((_DWORD)a2)
  {
    [*(id *)(a1 + 32) _registerForPushNotifications];
  }

  else
  {
    id v6 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10032C98C;
    v12[3] = &unk_100657368;
    char v15 = *(_BYTE *)(a1 + 56);
    id v7 = v6;
    uint64_t v8 = *(void *)(a1 + 32);
    id v13 = v7;
    uint64_t v14 = v8;
    [v7 canInitializeContainerWithCompletion:v12];
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = CKXPCSuitableError(v5);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, a2, v11);
  }
}

id *sub_10032C98C(id *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    if (*((_BYTE *)result + 48))
    {
      id v3 = result[4];
      id v4 = (id)objc_claimAutoreleasedReturnValue([result[5] applePayContainer]);

      if (v3 == v4) {
        [v2[5] _scheduleFirstCloudStoreContainerSetupBackgroundActivityIfNeccessary];
      }
    }

    return (id *)[v2[5] _unregisterForPushNotifications];
  }

  return result;
}

void sub_10032CAE4(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDCloudStoreNotificationCoordinator setPassContainer:] finished initialization with success: %{public}@ error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10032CCA8(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDCloudStoreNotificationCoordinator setPassSyncContainer:] finished initialization with success: %{public}@ error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10032CE68(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDCloudStoreNotificationCoordinator setPassSyncContainer:] finished initialization with success: %{public}@ error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10032D078(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDCloudStoreNotificationCoordinator setApplePayContainer:] finished initialization with success: %{public}@ error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10032D2B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 40);
    id v6 = a2;
    uint64_t v7 = CKXPCSuitableError(a3);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, id, uint64_t, id))(v3 + 16))(v3, v6, v5, v8);
  }

void sub_10032D53C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixPassutil;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10032D618;
    v11[3] = &unk_10063DBF0;
    id v12 = *(id *)(a1 + 48);
    [v6 updateCloudStoreWithLocalItemsWithConfigurations:v7 groupName:v8 groupNameSuffix:v9 qualityOfService:17 completion:v11];
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v5);
    }
  }
}

void sub_10032D618(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = a2;
    uint64_t v7 = CKXPCSuitableError(a4);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v8);
  }

void sub_10032D7B0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionImplicit;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10032D87C;
    void v10[3] = &unk_1006424D0;
    id v11 = *(id *)(a1 + 48);
    [v6 removeItems:v7 groupName:v8 groupNameSuffix:0 qualityOfService:17 completion:v10];
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, id))(v9 + 16))(v9, v5);
    }
  }
}

void sub_10032D87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = CKXPCSuitableError(a2);
    id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
  }

void sub_10032D9DC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixPassutil;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10032DAC0;
    v12[3] = &unk_1006424D0;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    [v6 removeRecordWithRecordName:v7 zoneName:v10 groupName:v8 groupNameSuffix:v9 qualityOfService:17 completion:v12];
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11) {
      (*(void (**)(uint64_t, id))(v11 + 16))(v11, v5);
    }
  }
}

void sub_10032DAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = CKXPCSuitableError(a2);
    id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
  }

void sub_10032DBE8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v8 = v5;
    [*(id *)(a1 + 32) allItemsOfItemType:*(void *)(a1 + 48) storeLocally:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 40)];
LABEL_5:
    id v6 = v8;
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    id v8 = v6;
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    goto LABEL_5;
  }

void sub_10032DD50(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v8 = v5;
    [*(id *)(a1 + 32) applePayContainerItemsFromDate:*(void *)(a1 + 40) toDate:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
LABEL_5:
    id v6 = v8;
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(a1 + 56);
  if (v7)
  {
    id v8 = v6;
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    goto LABEL_5;
  }

void sub_10032DED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = CKXPCSuitableError(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v6);
  }

void sub_10032DFF4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest);
    uint64_t v7 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v6,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  0LL,  0LL,  1LL,  17LL,  PKCloudStoreOperationGroupUserActionExplicit,  PKCloudStoreOperationGroupSuffixPassutil);
    -[PDCloudStoreRecordsRequest setUseLastChangeToken:](v7, "setUseLastChangeToken:", 1LL);
    -[PDCloudStoreRecordsRequest setShouldSaveToken:](v7, "setShouldSaveToken:", 1LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10032E0F8;
    void v10[3] = &unk_10063F208;
    id v8 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    [v8 executeRecordsRequest:v7 completion:v10];
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, void, void, id))(v9 + 16))(v9, 0LL, 0LL, v5);
    }
  }
}

void sub_10032E0F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = a2;
    id v10 = (id)objc_claimAutoreleasedReturnValue([v6 cloudStoreRecords]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 deletedRecordsForAllDatabaseIdentifiers]);

    uint64_t v8 = CKXPCSuitableError(v5);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    (*(void (**)(uint64_t, id, void *, void *))(v3 + 16))(v3, v10, v7, v9);
  }

void sub_10032E294(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10032E358;
    v11[3] = &unk_10063DA70;
    id v12 = *(id *)(a1 + 48);
    [v6 itemOfItemTypeFromAllZones:v9 recordName:v7 qualityOfService:v8 completion:v11];
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v5);
    }
  }
}

void sub_10032E358(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a2;
    uint64_t v6 = CKXPCSuitableError(a3);
    id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v7);
  }

void sub_10032E4B0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10032E568;
    v9[3] = &unk_1006574B0;
    id v10 = *(id *)(a1 + 48);
    char v11 = 1;
    [v6 deleteZone:v7 completion:v9];
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0LL, v5);
    }
  }
}

void sub_10032E568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v5 = CKXPCSuitableError(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v4, v6);
  }

void sub_10032E6A8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10032E760;
    v9[3] = &unk_1006574B0;
    id v10 = *(id *)(a1 + 48);
    char v11 = 1;
    [v6 createZone:v7 completion:v9];
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0LL, v5);
    }
  }
}

void sub_10032E760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v5 = CKXPCSuitableError(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v4, v6);
  }

void sub_10032E8B4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10032E978;
    v11[3] = &unk_10064AEA8;
    uint64_t v9 = *(void *)(a1 + 56);
    id v12 = *(id *)(a1 + 48);
    [v6 removeAllItems:v9 inZoneName:v7 storeLocally:v8 completion:v11];
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v5);
    }
  }
}

void sub_10032E978(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a2;
    uint64_t v6 = CKXPCSuitableError(a3);
    id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v7);
  }

void sub_10032EAD4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10032EB84;
    v9[3] = &unk_10063DA70;
    id v10 = *(id *)(a1 + 48);
    [v6 cloudStoreRecordArrayWithConfiguration:v7 completion:v9];
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0LL, v5);
    }
  }
}

void sub_10032EB84(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a2;
    uint64_t v6 = CKXPCSuitableError(a3);
    id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v7);
  }

void sub_10032ECEC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10032EDB0;
    v11[3] = &unk_100657500;
    id v12 = *(id *)(a1 + 48);
    [v6 itemOfItemType:v9 recordName:v7 qualityOfService:v8 completion:v11];
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v5);
    }
  }
}

void sub_10032EDB0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a2;
    uint64_t v6 = CKXPCSuitableError(a3);
    id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v7);
  }

id sub_10032F458(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 40LL));
  return [*(id *)(a1 + 40) _executeNextShareInvitationRequestIfPossible];
}

void sub_10032F4AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = -[PDCloudStoreShareInvitationRequestGenericResponse initWithSuccess:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestGenericResponse),  "initWithSuccess:error:",  a2,  v5);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F51C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = -[PDCloudStoreShareInvitationRequestGenericResponse initWithSuccess:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestGenericResponse),  "initWithSuccess:error:",  a2,  v5);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F58C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v8) {
    uint64_t v6 = -[PDCloudStoreShareInvitationRequestCreateKeysResponse initWithInvitation:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestCreateKeysResponse),  "initWithInvitation:",  v8);
  }
  else {
    uint64_t v6 = -[PDCloudStoreShareInvitationRequestGenericResponse initWithSuccess:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestGenericResponse),  "initWithSuccess:error:",  0LL,  v5);
  }
  id v7 = v6;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F624(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = -[PDCloudStoreShareInvitationRequestGenericResponse initWithSuccess:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestGenericResponse),  "initWithSuccess:error:",  v4 == 0LL,  v4);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F694(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = -[PDCloudStoreShareInvitationRequestDeclineResponse initWithPriorPermission:success:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestDeclineResponse),  "initWithPriorPermission:success:error:",  a3,  a2,  v7);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F714(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = -[PDCloudStoreShareInvitationRequestRecordArray initWithCloudStoreRecords:success:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestRecordArray),  "initWithCloudStoreRecords:success:error:",  v6,  v5 == 0LL,  v5);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F798(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = -[PDCloudStoreShareInvitationRequestGenericResponse initWithSuccess:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestGenericResponse),  "initWithSuccess:error:",  a2,  v5);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F808(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = -[PDCloudStoreShareInvitationRequestGenericResponse initWithSuccess:error:]( objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationRequestGenericResponse),  "initWithSuccess:error:",  a2,  v5);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10032F960(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Accept invitation with error %@", buf, 0xCu);
  }

  id v7 = [[PKCloudStoreError alloc] initWithError:v4];
  if (([v7 isUnrecoverableDecryptionError] & 1) != 0
    || [v7 isPCSError])
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "This user has lost the keys to the invitiation. Asking the owner to create new keys by deleting the zone share.",  buf,  2u);
    }

    uint64_t v8 = 3LL;
  }

  else if (v4)
  {
    CKRetryAfterSecondsForError(v4);
    objc_msgSend(*(id *)(a1 + 32), "_scheduleZoneShareIntegrityActivityForTimeInterval:");
    uint64_t v8 = 2LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  id v9 = objc_alloc_init(&OBJC_CLASS___PKCloudStoreZoneInvitationResponse);
  [v9 setInvitation:*(void *)(a1 + 40)];
  [v9 setStatus:v8];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) fromDestination]);
  [v9 setDestination:v10];

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = PKCloudStoreZoneInvitationStatusToString(v8);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    *(_DWORD *)__int128 buf = 138543362;
    id v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending response back to IDS with status %{public}@",  buf,  0xCu);
  }

  id v13 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10032FBB8;
  void v14[3] = &unk_100657578;
  id v15 = *(id *)(a1 + 56);
  uint64_t v16 = v8;
  [v13 sendCloudStoreZoneInvitationResponse:v9 completion:v14];
}

void sub_10032FBB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Response sent with error %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, BOOL, id))(v6 + 16))(v6, *(void *)(a1 + 40) == 1LL, v3);
  }
}

void sub_10032FD88(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixShareInvitation;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10032FE6C;
    v12[3] = &unk_100639688;
    uint64_t v10 = *(void *)(a1 + 56);
    id v13 = *(id *)(a1 + 48);
    [v6 acceptShareInvitation:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v12];
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v5);
    }
  }
}

void sub_10032FE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = CKXPCSuitableError(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v6);
  }

void sub_10032FFFC(void *a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    id v6 = (void *)a1[4];
    uint64_t v7 = (void *)a1[5];
    uint64_t v8 = a1[6];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100330174;
    void v16[3] = &unk_1006575A0;
    id v17 = v6;
    id v9 = (id)a1[6];
    uint64_t v10 = a1[7];
    uint64_t v11 = (void *)a1[8];
    id v18 = v9;
    uint64_t v19 = v10;
    id v20 = v11;
    [v7 cloudStoreZoneInvitationDataForInvitation:v17 toRecipient:v8 completion:v16];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = a1[4];
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v22 = v14;
      __int16 v23 = 2112;
      id v24 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Cannot send invitation data %@ because cloud store is not setup %@",  buf,  0x16u);
    }

    uint64_t v15 = a1[8];
    if (v15) {
      (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v5);
    }
  }
}

void sub_100330174(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v8 || (a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      id v12 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412802;
      id v24 = v11;
      __int16 v25 = 2112;
      id v26 = v12;
      __int16 v27 = 2112;
      id v28 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Error trying to create zone share keys for invitation %@ with handle %@, error %@",  buf,  0x20u);
    }
  }

  id v13 = v7;
  if (!v7) {
    id v13 = *(void **)(a1 + 32);
  }
  id v14 = v13;
  uint64_t v15 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v24 = v14;
    __int16 v25 = 2112;
    id v26 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Attempting to send zone share invitation %@ with IDS. And error %@",  buf,  0x16u);
  }

  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = *(void **)(*(void *)(a1 + 48) + 24LL);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100330354;
  v20[3] = &unk_100648088;
  id v21 = v7;
  id v22 = *(id *)(a1 + 56);
  id v19 = v7;
  [v18 sendCloudStoreZoneInvitation:v14 forHandle:v17 invitationError:v8 completion:v20];
}

void sub_100330354(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Zone Share Invitation %@ sent with error %@",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, BOOL, id))(v7 + 16))(v7, v3 == 0LL, v3);
  }
}

void sub_1003305A0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixShareInvitation;
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 72);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10033069C;
    void v14[3] = &unk_10063EB60;
    uint64_t v12 = *(void *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    [v6 createShareInvitationForRecipientHandle:v7 zoneName:v12 permission:v10 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfS ervice:v11 completion:v14];
  }

  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0LL, v5);
    }
  }
}

uint64_t sub_10033069C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100330838(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Error sending message %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, *(void *)(a1 + 32), v3);
  }
}

uint64_t sub_1003309B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a4);
  }
  return result;
}

void sub_100330AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = CKXPCSuitableError(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v6);
  }

void sub_100330C2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    id v8 = v3;
    if ([v3 type] == (id)2) {
      id v4 = [v8 priorPermission];
    }
    else {
      id v4 = 0LL;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v8 success];
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v8 error]);
    (*(void (**)(uint64_t, id, id, void *))(v5 + 16))(v5, v6, v4, v7);

    id v3 = v8;
  }
}

void sub_100330E2C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    id v8 = *(void **)(a1 + 32);
    int v7 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v11 = PKCloudStoreOperationGroupSuffixShareInvitation;
    uint64_t v12 = *(void *)(a1 + 80);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100330F7C;
    v19[3] = &unk_100657640;
    char v25 = *(_BYTE *)(a1 + 88);
    id v20 = v7;
    id v21 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 64);
    id v15 = *(void **)(a1 + 72);
    id v22 = v13;
    uint64_t v23 = v14;
    id v24 = v15;
    [v8 declineInvitationForRecipientHandle:v20 zoneName:v9 operationGroupName:v10 operationGroupNameSuffix:v11 qualityOfService:v12 completion:v19];
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 72);
    if (v16)
    {
      uint64_t v17 = CKXPCSuitableError(v5);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      (*(void (**)(uint64_t, void, void, void *))(v16 + 16))(v16, 0LL, 0LL, v18);
    }
  }
}

void sub_100330F7C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = v7;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v25 = v11;
        __int16 v26 = 2112;
        uint64_t v27 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Alerting %@ via IDS that they have been removed from %@",  buf,  0x16u);
      }

      id v13 = objc_alloc_init(&OBJC_CLASS___PKCloudStoreZoneInvitation);
      -[PKCloudStoreZoneInvitation setZoneName:](v13, "setZoneName:", *(void *)(a1 + 40));
      -[PKCloudStoreZoneInvitation setContainerIdentifier:](v13, "setContainerIdentifier:", *(void *)(a1 + 48));
      uint64_t v14 = *(void **)(a1 + 64);
      id v15 = *(void **)(*(void *)(a1 + 56) + 24LL);
      uint64_t v16 = *(void *)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_100331140;
      v21[3] = &unk_100657578;
      id v22 = v14;
      uint64_t v23 = a3;
      [v15 removeCloudStoreZoneInvitation:v13 forHandle:v16 completion:v21];

      goto LABEL_10;
    }

    uint64_t v19 = *(void *)(a1 + 64);
    if (v19)
    {
      uint64_t v20 = CKXPCSuitableError(v7);
      id v13 = (PKCloudStoreZoneInvitation *)objc_claimAutoreleasedReturnValue(v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t, PKCloudStoreZoneInvitation *))(v19 + 16))(v19, 1LL, a3, v13);
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v17 = *(void *)(a1 + 64);
    if (v17)
    {
      uint64_t v18 = CKXPCSuitableError(v7);
      id v13 = (PKCloudStoreZoneInvitation *)objc_claimAutoreleasedReturnValue(v18);
      (*(void (**)(uint64_t, void, uint64_t, PKCloudStoreZoneInvitation *))(v17 + 16))(v17, 0LL, a3, v13);
LABEL_10:
    }
  }
}

void sub_100331140(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Error sending message %@",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = CKXPCSuitableError(v3);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    (*(void (**)(uint64_t, BOOL, uint64_t, void *))(v6 + 16))(v6, v3 == 0LL, v7, v9);
  }
}

void sub_10033132C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 type] == (id)3) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudStoreRecords]);
  }
  else {
    id v3 = 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v3, v5);
  }
}

uint64_t sub_10033148C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100331554(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id *sub_10033169C(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _initialCloudDatabaseSetupForContainer:result[5] operationGroupNameSuffix:PKCloudStoreOperationGroupInitialSetup completion:&stru_1006576D8];
  }
  return result;
}

void sub_1003318F8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixShareInvitation;
    id v10 = [*(id *)(a1 + 48) qualityOfService];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1003319E8;
    v12[3] = &unk_100657700;
    id v13 = *(id *)(a1 + 56);
    [v6 shareForZoneName:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v12];
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v5);
    }
  }
}

void sub_1003319E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = a2;
    uint64_t v7 = CKXPCSuitableError(a4);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v8);
  }

uint64_t sub_100331BBC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, a2);
  }
  return result;
}

void sub_100331F04(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = @"NO";
    *(_DWORD *)__int128 buf = 138412802;
    if (a2) {
      uint64_t v9 = @"YES";
    }
    uint64_t v18 = v8;
    __int16 v19 = 2114;
    uint64_t v20 = v9;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Completed invalidation of container %@, with success: %{public}@, error: %@",  buf,  0x20u);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Starting container setup for zone recreation in container %{public}@",  buf,  0xCu);
  }

  uint64_t v12 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v13 = PKCloudStoreOperationGroupSuffixServerPush;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1003320C4;
  void v14[3] = &unk_10063B468;
  id v15 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 56);
  [v12 _initialCloudDatabaseSetupForContainer:v11 operationGroupNameSuffix:v13 shouldScheduleBackgroundActivity:1 completion:v14];
}

void sub_1003320C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = @"NO";
    int v11 = 138543874;
    if ((_DWORD)a2) {
      uint64_t v9 = @"YES";
    }
    uint64_t v12 = v8;
    __int16 v13 = 2114;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Completed recreation of zones in container %{public}@, with success: %{public}@, error: %@",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);
  }
}

void sub_100332398(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) count];
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = @"NO";
    *(_DWORD *)__int128 buf = 134218754;
    id v20 = v8;
    if (a2) {
      uint64_t v10 = @"YES";
    }
    __int16 v21 = 2112;
    uint64_t v22 = v9;
    __int16 v23 = 2114;
    id v24 = v10;
    __int16 v25 = 2112;
    id v26 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Completed invalidation of %lu zones %@, with success: %{public}@, error: %@",  buf,  0x2Au);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 32) count];
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 134218242;
    id v20 = v11;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Starting container setup for %lu zones recreation %@",  buf,  0x16u);
  }

  uint64_t v14 = *(void **)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v15 = PKCloudStoreOperationGroupSuffixServerPush;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10033257C;
  void v16[3] = &unk_10063B468;
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 56);
  [v14 _initialCloudDatabaseSetupForContainer:v13 operationGroupNameSuffix:v15 shouldScheduleBackgroundActivity:1 completion:v16];
}

void sub_10033257C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) count];
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = @"NO";
    int v12 = 134218754;
    id v13 = v8;
    if ((_DWORD)a2) {
      uint64_t v10 = @"YES";
    }
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Completed recreation of %lu zones %@, with success: %{success}@, error: %@",  (uint8_t *)&v12,  0x2Au);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, id))(v11 + 16))(v11, a2, v5);
  }
}

id sub_10033276C(void *a1, void *a2)
{
  return _[a2 cloudStoreNotificationCoordinator:a1[4] createdZoneWithName:a1[5] forContainerName:a1[6] scope:a1[7]];
}

void sub_10033298C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 success])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    if (v4)
    {
    }

    else if ([v3 type] == (id)1)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 invitation]);
      id v6 = objc_alloc(&OBJC_CLASS___PDCloudStoreShareInvitationSendKeysRequest);
      uint64_t v7 = *(void *)(a1 + 32);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_100332AC4;
      void v10[3] = &unk_100657618;
      id v11 = *(id *)(a1 + 48);
      id v8 = -[PDCloudStoreShareInvitationSendKeysRequest initWithInvitation:recipientHandle:completion:]( v6,  "initWithInvitation:recipientHandle:completion:",  v5,  v7,  v10);
      -[PDCloudStoreShareInvitationRequest setQualityOfService:](v8, "setQualityOfService:", *(void *)(a1 + 56));
      [*(id *)(a1 + 40) _executeShareInvitationRequest:v8];

LABEL_8:
      goto LABEL_9;
    }
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v5);
    goto LABEL_8;
  }

void sub_100332AC4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }

void sub_100332CA8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }

void sub_100332E58(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }

void sub_10033301C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }

id *sub_100333260(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _initialCloudDatabaseSetupForContainer:result[5] operationGroupNameSuffix:PKCloudStoreOperationGroupInitialSetup completion:&stru_100657770];
  }
  return result;
}

id sub_100333698(uint64_t a1, void *a2)
{
  id result = [a2 success];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _performZoneShareIntegrityOperation];
  }
  return result;
}

void sub_100333B2C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDestination]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 name]);

  [*(id *)(a1 + 40) removedFromCloudStoreZoneInvitation:*(void *)(a1 + 48) fromHandle:v3];
}

void sub_100333EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100333F90;
  v9[3] = &unk_10063DAE8;
  id v10 = v7;
  id v11 = *(id *)(a1 + 64);
  [v5 cloudStoreContainer:v6 sendZoneShareInvitationForHandle:v10 zoneName:v8 permission:a3 qualitOfService:17 completion:v9];
}

void sub_100333F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138412802;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed deleteing and re-adding %@ to the share invitation %@ with error %@",  (uint8_t *)&v9,  0x20u);
  }
}

uint64_t sub_1003341C4(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = @"NO";
    if ((_DWORD)a2) {
      uint64_t v6 = @"YES";
    }
    int v8 = 138543362;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Missing TLKs %{public}@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

void sub_100334448(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Reset apple pay manatee view with error %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = CKXPCSuitableError(v3);
    int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, BOOL, void *))(v6 + 16))(v6, v3 == 0LL, v8);
  }
}

void sub_100334700(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v4) {
      uint64_t v7 = @"YES";
    }
    int v8 = 138543618;
    int v9 = v7;
    __int16 v10 = 2112;
    __int16 v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Did set up standard  PDPassSyncCloudStoreContainer with success:%{public}@, error:%{error}@.",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1003347D4(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v4) {
      uint64_t v7 = @"YES";
    }
    int v8 = 138543618;
    int v9 = v7;
    __int16 v10 = 2112;
    __int16 v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Did set up secure PDPassSyncCloudStoreContainer with success:%{public}@, error:%{error}@.",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1003348A8(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v4) {
      uint64_t v7 = @"YES";
    }
    int v8 = 138543618;
    int v9 = v7;
    __int16 v10 = 2114;
    __int16 v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Did set up PDPassCloudStoreContainer with success:%{public}@, error:%{public}@.",  (uint8_t *)&v8,  0x16u);
  }
}

id sub_100334F88(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  [*(id *)(a1 + 32) _recordAggdCloudStoreBackgroundContainerSetupResult:a2 forCurrentBackgroundInterval:*(void *)(a1 + 40)];
  BOOL v4 = *(void **)(a1 + 32);
  if (v2) {
    return [v4 _unscheduleBackgroundContainerSetupActivities];
  }
  else {
    return [v4 _scheduleCloudStoreContainerSetupBackgroundActivityWithNextInterval:*(void *)(a1 + 48)];
  }
}

void sub_1003352A0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Syncing local transactions to cloud store.",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) syncTransactionsToCloudStoreOriginatedOnDevice:*(void *)(a1 + 40)];
  }

  else
  {
    if (v8)
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Could not initialize the cloud database in order to sync transactions. %@",  (uint8_t *)&v9,  0xCu);
    }
  }
}

void sub_1003357CC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applePayContainer]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10033590C;
    void v10[3] = &unk_10063AC90;
    uint64_t v7 = *(void *)(a1 + 40);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = *(id *)(a1 + 48);
    [v6 fetchAndStoreAccountEventsWithIdentifiers:v7 completion:v10];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error setting up cloud database for container: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_10033590C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 32) hasAccountServicingEventsWithStatus:0];
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Still have servicing events with unknown status",  buf,  2u);
    }

    uint64_t v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (v5)
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Successfully re-fetched all servicing events with unknown status",  v8,  2u);
    }

    uint64_t v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  return v6();
}

void sub_100335C4C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  PDScheduledActivityRemove(@"PDCloudStoreClientID", @"PDCloudStoreZoneShareIntegrityActivityID");
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Performing Zone share integrity activity.",  (uint8_t *)&v9,  2u);
    }

    [*(id *)(a1 + 32) ensureZoneShareIntegrity];
  }

  else
  {
    if (v8)
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Could not initialize the cloud database in order perform a zone share integrity operation. %@",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 40) _scheduleZoneShareIntegrityActivityForTimeInterval:900.0];
  }
}

void sub_100336AA0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = @"NO";
    if (a2) {
      BOOL v8 = @"YES";
    }
    *(_DWORD *)__int128 buf = 138543618;
    id v20 = v8;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Ensured container is setup: %{public}@, error: %@",  buf,  0x16u);
  }

  int v9 = *(void **)(a1 + 32);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passSyncContainer]);

  if (v9 == v10)
  {
    __int16 v16 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passSyncContainer]);
LABEL_10:
    uint64_t v14 = v16;
    -[PDCloudStoreRecordsRequest synchronizeWithReason:](v16, "synchronizeWithReason:", 2LL);
    goto LABEL_11;
  }

  id v11 = *(void **)(a1 + 32);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passSyncSecureContainer]);

  if (v11 == v12)
  {
    __int16 v16 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passSyncSecureContainer]);
    goto LABEL_10;
  }

  id v13 = objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest);
  uint64_t v14 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v13,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  0LL,  1LL,  0LL,  17LL,  PKCloudStoreOperationGroupPushTriggered,  PKCloudStoreOperationGroupSuffixServerPush);
  -[PDCloudStoreRecordsRequest setCloudStoreZone:](v14, "setCloudStoreZone:", *(void *)(a1 + 48));
  -[PDCloudStoreRecordsRequest setContainerDatabase:](v14, "setContainerDatabase:", *(void *)(a1 + 56));
  -[PDCloudStoreRecordsRequest setUseLastChangeToken:](v14, "setUseLastChangeToken:", 1LL);
  -[PDCloudStoreRecordsRequest setShouldSaveToken:](v14, "setShouldSaveToken:", 1LL);
  uint64_t v15 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100336C9C;
  v17[3] = &unk_1006578B8;
  id v18 = v15;
  [v18 executeRecordsRequest:v14 completion:v17];

LABEL_11:
}

void sub_100336C9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v15 = 138412546;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v6;
      id v11 = "Error fetching and storing all changed records for container %@, %@";
      uint64_t v12 = v8;
      uint32_t v13 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v15, v13);
    }
  }

  else if (v9)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v14;
    id v11 = "Fetching and storing all changed records successfully for container %@";
    uint64_t v12 = v8;
    uint32_t v13 = 12;
    goto LABEL_6;
  }
}

void sub_100337074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1003370A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003370B0(uint64_t a1)
{
}

void sub_1003370B8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 zoneName]);
  id v6 = *(void **)(a1 + 32);
  id v9 = v5;
  id v7 = v6;
  if (v9 == v7)
  {

    goto LABEL_7;
  }

  if (!v9 || !v7)
  {

    return;
  }

  unsigned int v8 = [v9 isEqualToString:v7];

  if (v8)
  {
LABEL_7:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(a1 + 40));
    *a3 = 1;
  }

void sub_100338068(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_1003382D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___TransitAppletStateBalance,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10033868C(id a1, PKTransitAppletBalance *a2, id a3)
{
}

void sub_100338694(id a1, PKTransitAppletBalance *a2, id a3)
{
}

void sub_10033869C(id a1, PKTransitAppletBalance *a2, id a3)
{
  BOOL v4 = a2;
  -[PKTransitAppletBalance setExponent:](v4, "setExponent:", [a3 integerValue]);
}

void sub_1003386E0(id a1, PKTransitAppletBalance *a2, id a3)
{
}

void sub_1003386E8(id a1, PKTransitAppletBalance *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKTransitAppletBalance setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_100338EC8(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_10033905C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_1003391D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AppletStateDirty,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10033929C(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003392A4(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003392AC(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003392B4(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_100339AE4(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_queue_identifyDefaultPaymentPassWithCurrentDefaultPaymentPassUniqueIdentifier:",  v3));
  id v5 = (void *)v4;
  if (v3 | v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([(id)v4 uniqueID]);
    unsigned int v7 = [v6 isEqualToString:v3];

    if (v7)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        uint64_t v10 = "Default card and new payment pass are the same. No need to update.";
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
      }
    }

    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64LL));
      if ((objc_opt_respondsToSelector(WeakRetained, "defaultPassManagerCanUpdateDefaultPass:") & 1) != 0)
      {
        id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64LL));
        unsigned __int8 v14 = [v13 defaultPassManagerCanUpdateDefaultPass:*(void *)(a1 + 32)];

        if ((v14 & 1) == 0)
        {
          uint64_t v15 = PKLogFacilityTypeGetObject(6LL);
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_21;
          }
          *(_WORD *)__int128 buf = 0;
          uint64_t v10 = "Not updating default card because delegate prevents it.";
          goto LABEL_7;
        }
      }

      else
      {
      }

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
      uint64_t v17 = PKLogFacilityTypeGetObject(6LL);
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v24 = v16;
        __int16 v25 = 2112;
        uint64_t v26 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Updated Default Payment Pass to: %@, from: %@",  buf,  0x16u);
      }

      PDSetDefaultPaymentPassUniqueIdentifier(v16);
      PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier(0LL);
      if (v3 && v5)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Presenting notification for default payment pass update.",  buf,  2u);
        }

        [*(id *)(a1 + 32) _presentDefaultPaymentPassUpdateNotification:v5];
      }

      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = *(dispatch_queue_s **)(v19 + 56);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_100339DBC;
      v21[3] = &unk_1006392B0;
      void v21[4] = v19;
      id v22 = v16;
      id v9 = v16;
      dispatch_async(v20, v21);
    }
  }

  else
  {
    uint64_t v11 = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      uint64_t v10 = "Default card was nil and no satisfactory payment pass could be found. No need to update.";
      goto LABEL_7;
    }
  }

void sub_100339DBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64LL));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    char v4 = objc_opt_respondsToSelector( WeakRetained,  "defaultPassManager:didUpdateDefaultPaymentPassWithUniqueIdentifier:");
    uint64_t v3 = v5;
    if ((v4 & 1) != 0)
    {
      [v5 defaultPassManager:*(void *)(a1 + 32) didUpdateDefaultPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
      uint64_t v3 = v5;
    }
  }
}

void sub_100339E78(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    PDSetDefaultPaymentPassUniqueIdentifier(0LL);
    PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier(0LL);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(dispatch_queue_s **)(v4 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100339F00;
    block[3] = &unk_100639300;
    void block[4] = v4;
    dispatch_async(v5, block);
  }
}

void sub_100339F00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64LL));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    char v4 = objc_opt_respondsToSelector( WeakRetained,  "defaultPassManager:didUpdateDefaultPaymentPassWithUniqueIdentifier:");
    uint64_t v3 = v5;
    if ((v4 & 1) != 0)
    {
      [v5 defaultPassManager:*(void *)(a1 + 32) didUpdateDefaultPaymentPassWithUniqueIdentifier:0];
      uint64_t v3 = v5;
    }
  }
}

void sub_100339FE4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting default payment pass: %@", buf, 0xCu);
  }

  PDSetDefaultPaymentPassUniqueIdentifier(*(void *)(a1 + 32));
  PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier(*(void *)(a1 + 32));
  id v6 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unsigned int v7 = *(dispatch_queue_s **)(v5 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10033A0F0;
  v8[3] = &unk_1006392B0;
  void v8[4] = v5;
  id v9 = v6;
  dispatch_async(v7, v8);
}

void sub_10033A0F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64LL));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    char v4 = objc_opt_respondsToSelector( WeakRetained,  "defaultPassManager:didUpdateDefaultPaymentPassWithUniqueIdentifier:");
    uint64_t v3 = v5;
    if ((v4 & 1) != 0)
    {
      [v5 defaultPassManager:*(void *)(a1 + 32) didUpdateDefaultPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
      uint64_t v3 = v5;
    }
  }
}

uint64_t sub_10033A204(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10033A214(uint64_t a1)
{
}

void sub_10033A21C(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10033A34C(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_queue_identifyDefaultPaymentPassWithCurrentDefaultPaymentPassUniqueIdentifier:",  v3));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  unsigned __int8 v6 = [v5 isEqualToString:*(void *)(a1 + 40)];

  unsigned int v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10033A41C;
  v8[3] = &unk_100645D90;
  id v9 = *(id *)(a1 + 48);
  unsigned __int8 v10 = v6;
  dispatch_async(v7, v8);
}

uint64_t sub_10033A41C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10033A430(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10033A5F8(uint64_t a1)
{
  uint64_t v2 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_TITLE_FORMAT");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localizedDescription]);
  uint64_t v5 = (void *)v4;
  if (v4)
  {
    uint64_t v20 = v4;
    uint64_t v6 = PKStringWithValidatedFormat(v3, @"%@");
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    v22[0] = v7;
    v21[0] = kCFUserNotificationAlertHeaderKey;
    v21[1] = kCFUserNotificationAlertMessageKey;
    uint64_t v8 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_MESSAGE");
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v22[1] = v9;
    v21[2] = kCFUserNotificationOtherButtonTitleKey;
    uint64_t v10 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_SETTINGS_BUTTON");
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v22[2] = v11;
    v21[3] = kCFUserNotificationDefaultButtonTitleKey;
    uint64_t v12 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_DISMISS_BUTTON");
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v22[3] = v13;
    void v21[4] = kCFUserNotificationLocalizationURLKey;
    uint64_t v14 = PKPassKitBundle(v13);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "resourceURL", v20));
    v22[4] = v16;
    void v22[5] = &__kCFBooleanTrue;
    void v21[5] = PKUserNotificationDontDismissOnUnlock;
    v21[6] = PKUserNotificationAllowMenuButtonDismissal;
    v22[6] = &__kCFBooleanTrue;
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  7LL));

    +[PKUserNotificationAgent presentNotificationWithParameters:flags:responseHandler:]( &OBJC_CLASS___PKUserNotificationAgent,  "presentNotificationWithParameters:flags:responseHandler:",  v17,  0LL,  &stru_100657AC0);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Not presenting default pass change notification for pass: %@ because it has no localized description",  buf,  0xCu);
    }
  }
}

void sub_10033A850(id a1, __CFUserNotification *a2, unint64_t a3)
{
  if (a3 == 2) {
    PDOpenWalletUI(1LL, 0LL);
  }
}

int64_t sub_10033AD18(id a1, PKPaymentPass *a2, PKPaymentPass *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(-[PKPaymentPass originalProvisioningDate](v4, "originalProvisioningDate"));
  uint64_t v7 = objc_claimAutoreleasedReturnValue(-[PKPaymentPass originalProvisioningDate](v5, "originalProvisioningDate"));
  uint64_t v8 = (void *)v7;
  if (v6 && v7)
  {
    int64_t v9 = (int64_t)[(id)v6 compare:v7];
    if (!v9)
    {
LABEL_9:
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentPass ingestedDate](v4, "ingestedDate"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentPass ingestedDate](v5, "ingestedDate"));
      int64_t v9 = (int64_t)[v10 compare:v11];
    }
  }

  else
  {
    if (v6) {
      int64_t v9 = -1LL;
    }
    else {
      int64_t v9 = 1LL;
    }
    if (!(v6 | v7)) {
      goto LABEL_9;
    }
  }

  return v9;
}

void sub_10033AE88(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

id *sub_10033AED4(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v27.receiver = a1;
    v27.super_class = (Class)&OBJC_CLASS___PDPassTileManager;
    uint64_t v11 = (id *)objc_msgSendSuper2(&v27, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeWeak(a1 + 6, v10);
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v13 = a1[3];
      a1[3] = v12;

      dispatch_queue_attr_t v14 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v15 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v14);
      id v16 = PDUtilityQueue();
      uint64_t v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v16);
      dispatch_queue_t v18 = dispatch_queue_create_with_target_V2("com.apple.passd.passTileManager", v15, v17);
      id v19 = a1[4];
      a1[4] = v18;

      dispatch_queue_attr_t v20 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      __int16 v21 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v20);
      id v22 = PDDefaultQueue();
      __int16 v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
      dispatch_queue_t v24 = dispatch_queue_create_with_target_V2("com.apple.passd.passTileManager.reply", v21, v23);
      id v25 = a1[5];
      a1[5] = v24;
    }
  }

  return a1;
}

id *sub_10033B030(id *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    uint64_t v5 = a1[2];
    id v6 = a2;
    uint64_t v7 = sub_1003AF714(v5, (uint64_t)v6, a3);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v3 = (id *)objc_claimAutoreleasedReturnValue([v3[1] passTilesForUniqueID:v6 withDescriptorStatePairs:v8]);
  }

  return v3;
}

void sub_10033B0A4(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_10033B0B4(a1, a2, a3, 1LL);
  }
}

void sub_10033B0B4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    id v9 = (void *)PDOSTransactionCreate("PDPassTileManager");
    uint64_t v25 = 0LL;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x3032000000LL;
    id v28 = sub_10033B2F0;
    uint64_t v29 = sub_10033B300;
    id v30 = 0LL;
    id v10 = sub_1003AF754(*(void **)(a1 + 16), (uint64_t)v7, a4, (uint64_t)v8);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = (void *)v26[5];
    v26[5] = v11;

    if (v26[5])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      dispatch_queue_attr_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = PKPassTileContextToString(a4);
        id v16 = (id)objc_claimAutoreleasedReturnValue(v15);
        id v17 = [(id)v26[5] count];
        *(_DWORD *)__int128 buf = 138412802;
        id v32 = v7;
        __int16 v33 = 2112;
        id v34 = v16;
        __int16 v35 = 2048;
        id v36 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "PDPassTileManager: updated tiles for pass %@, %@ context with %lu tiles.",  buf,  0x20u);
      }

      dispatch_queue_t v18 = *(dispatch_queue_s **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10033B308;
      block[3] = &unk_100657B28;
      id v20 = v9;
      uint64_t v21 = a1;
      id v22 = v7;
      __int16 v23 = &v25;
      uint64_t v24 = a4;
      dispatch_async(v18, block);
    }

    _Block_object_dispose(&v25, 8);
  }
}

void sub_10033B2CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10033B2F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10033B300(uint64_t a1)
{
}

void sub_10033B308(void *a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1[5] + 8) passTilesForUniqueID:a1[6] withDescriptorStatePairs:*(void *)(*(void *)(a1[7] + 8) + 40)]);
  uint64_t v2 = *(void *)(a1[7] + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  id WeakRetained = objc_loadWeakRetained((id *)(a1[5] + 48LL));
  [WeakRetained passTileManager:a1[5] didUpdateTiles:v5 forPassUniqueID:a1[6] forContext:a1[8]];
}

void sub_10033B388(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (a1 && v10 && v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
    uint64_t v7 = sub_100016B5C((uint64_t)v5);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)v8;
    if (v6 && v8) {
      sub_10033B418(a1, v6);
    }
  }
}

void sub_10033B418(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)PDOSTransactionCreate("PDPassTileManager");
    id v5 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10033B778;
    block[3] = &unk_100639350;
    id v9 = v4;
    uint64_t v10 = a1;
    id v11 = v3;
    id v6 = v4;
    dispatch_block_t v7 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
    dispatch_async(v5, v7);
  }
}

void sub_10033B4E4(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    id v3 = (id)objc_claimAutoreleasedReturnValue([a2 uniqueID]);
    sub_1003AF7C8(v2, (uint64_t)v3);
  }

void sub_10033B530(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    dispatch_block_t v7 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10033B5DC;
    block[3] = &unk_10063A858;
    uint64_t v12 = a3;
    id v10 = v5;
    uint64_t v11 = a1;
    dispatch_block_t v8 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
    dispatch_async(v7, v8);
  }
}

void sub_10033B5DC(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[6]));
  if (a1[6])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 24) objectForKey:v2]);

    if (!v3)
    {
      [*(id *)(a1[5] + 24) setObject:a1[4] forKey:v2];
      goto LABEL_9;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = _PKEnumValueToString( a1[6],  @"PDPassTileDescriptorStateParticipantID",  @"PDPassTileDescriptorStateParticipantIDVehicleFunctionsManager, PDPassTileDescriptorStateParticipantIDBalanceManager");
      dispatch_block_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      uint64_t v8 = a1[4];
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPassTileManager: attempt to register second instance of participantIdentifier %@: %@",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v9 = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v12 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPassTileManager: attempt to register participant with unrecognized identifier: %@",  buf,  0xCu);
    }
  }

LABEL_9:
}

void sub_10033B778(uint64_t a1)
{
}

void sub_10033B784(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v6 = v3;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) passWithUniqueIdentifier:v3]);
    if (v4)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      v7[2] = sub_10033B84C;
      v7[3] = &unk_100657B78;
      void v7[4] = a1;
      void v7[5] = v4;
      void v7[6] = v5;
      sub_10033B0B4(a1, v6, v7, 1LL);
      sub_1003AF798(*(void **)(a1 + 16), (uint64_t)v5, (uint64_t)v6);
    }

    id v3 = v6;
  }
}

id sub_10033B84C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v27 = 0LL;
  id v28 = &v27;
  uint64_t v29 = 0x2020000000LL;
  uint64_t v30 = 0LL;
  dispatch_block_t v7 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [*(id *)(a1[4] + 24) count]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10033BAE8;
  v20[3] = &unk_100657B50;
  uint64_t v8 = *(void **)(a1[4] + 24LL);
  __int128 v21 = *((_OWORD *)a1 + 2);
  id v9 = v5;
  id v22 = v9;
  id v10 = v6;
  uint64_t v11 = a1[6];
  id v23 = v10;
  uint64_t v24 = v11;
  uint64_t v25 = v7;
  uint64_t v26 = &v27;
  [v8 enumerateKeysAndObjectsUsingBlock:v20];
  id v12 = [v10 mutableCopy];
  if ((unint64_t)-[NSMutableSet count](v7, "count") <= 1)
  {
    BOOL v17 = v28[3] != 2;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 metadata]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
      *(_DWORD *)__int128 buf = 138412546;
      id v32 = v16;
      __int16 v33 = 2112;
      id v34 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "PDPassTileManager: tile %@ had multiple isSupportedParticipants: %@",  buf,  0x16u);
    }

    BOOL v17 = 0LL;
    v28[3] = 2LL;
  }

  [v12 setSupported:v17];
  if (v28[3] == 1)
  {
    dispatch_queue_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet anyObject](v7, "anyObject"));
    if ([v18 passTileManager:a1[4] wantsUpdateDescriptorStateForPass:a1[5] tileDescriptor:v9 descriptorState:v12]) {
      [v18 passTileManager:a1[4] updateDescriptorStateForPass:a1[5] tileDescriptor:v9 descriptorState:v12];
    }
  }

  _Block_object_dispose(&v27, 8);
  return v12;
}

void sub_10033BABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10033BAE8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if ([v5 passTileManager:*(void *)(a1 + 32) isRelevantForPass:*(void *)(a1 + 40) tileDescriptor:*(void *)(a1 + 48) descriptorState:*(void *)(a1 + 56)])
  {
    id v6 = *(void **)(a1 + 64);
    uint64_t v7 = _PKEnumValueToString( [v10 integerValue],  @"PDPassTileDescriptorStateParticipantID",  @"PDPassTileDescriptorStateParticipantIDVehicleFunctionsManager, PDPassTileDescriptorStateParticipantIDBalanceManager");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v6, "addObject:", v8, 1, 2);

    id v9 = [v5 passTileManager:*(void *)(a1 + 32) isTileSupportedForPass:*(void *)(a1 + 40) tileDescriptor:*(void *)(a1 + 48) descriptorState:*(void *)(a1 + 56)];
    if (v9)
    {
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v9;
      [*(id *)(a1 + 72) addObject:v5];
    }
  }
}

uint64_t sub_10033BD40(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithPropertyValues:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  id v3 = [v2 persistentID];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) minimumAmounts]);
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:forInstallmentCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "insertOrUpdateCurrencyAmounts:forInstallmentCriteriaPID:type:inDatabase:",  v4,  v3,  1LL,  *(void *)(a1 + 40));

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) maximumAmounts]);
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:forInstallmentCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "insertOrUpdateCurrencyAmounts:forInstallmentCriteriaPID:type:inDatabase:",  v5,  v3,  2LL,  *(void *)(a1 + 40));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) icon]);
  +[PaymentOfferDynamicContentIcon insertOrUpdateIcon:forInstallmentCriteriaPID:inDatabase:]( &OBJC_CLASS___PaymentOfferDynamicContentIcon,  "insertOrUpdateIcon:forInstallmentCriteriaPID:inDatabase:",  v6,  v3,  *(void *)(a1 + 40));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) associatedStoreIdentifiers]);
  +[PaymentOfferAssociatedStoreIdentifier insertOrUpdateAssociatedStoreIdentifiers:forInstallmentCriteriaPID:inDatabase:]( &OBJC_CLASS___PaymentOfferAssociatedStoreIdentifier,  "insertOrUpdateAssociatedStoreIdentifiers:forInstallmentCriteriaPID:inDatabase:",  v7,  v3,  *(void *)(a1 + 40));

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) associatedWebDomains]);
  +[PaymentOfferAssociatedWebDomain insertOrUpdateAssociatedWebDomains:forInstallmentCriteriaPID:inDatabase:]( &OBJC_CLASS___PaymentOfferAssociatedWebDomain,  "insertOrUpdateAssociatedWebDomains:forInstallmentCriteriaPID:inDatabase:",  v8,  v3,  *(void *)(a1 + 40));

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) disclosureFooter]);
  id v10 =  +[ApplyFooterContent insertOrUpdateWithFooterContent:type:installmentCriteriaPID:inDatabase:]( &OBJC_CLASS___ApplyFooterContent,  "insertOrUpdateWithFooterContent:type:installmentCriteriaPID:inDatabase:",  v9,  1LL,  v3,  *(void *)(a1 + 40));

  return 1LL;
}

void sub_10033C3E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v14 = objc_alloc_init(&OBJC_CLASS___PKPaymentOfferInstallmentCriteria);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v14 withProperties:v7 values:a4];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferCurrencyAmount currencyAmountForInstallmentCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "currencyAmountForInstallmentCriteriaPID:type:inDatabase:",  a2,  1LL,  *(void *)(a1 + 40)));
  -[PKPaymentOfferInstallmentCriteria setMinimumAmounts:](v14, "setMinimumAmounts:", v8);

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferCurrencyAmount currencyAmountForInstallmentCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "currencyAmountForInstallmentCriteriaPID:type:inDatabase:",  a2,  2LL,  *(void *)(a1 + 40)));
  -[PKPaymentOfferInstallmentCriteria setMaximumAmounts:](v14, "setMaximumAmounts:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferDynamicContentIcon iconForInstallmentCriteriaPID:inDatabase:]( &OBJC_CLASS___PaymentOfferDynamicContentIcon,  "iconForInstallmentCriteriaPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPaymentOfferInstallmentCriteria setIcon:](v14, "setIcon:", v10);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferAssociatedStoreIdentifier associatedStoreIdentifiersForInstallmentCriteriaPID:inDatabase:]( &OBJC_CLASS___PaymentOfferAssociatedStoreIdentifier,  "associatedStoreIdentifiersForInstallmentCriteriaPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPaymentOfferInstallmentCriteria setAssociatedStoreIdentifiers:](v14, "setAssociatedStoreIdentifiers:", v11);

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferAssociatedWebDomain associatedWebDomainForInstallmentCriteriaPID:inDatabase:]( &OBJC_CLASS___PaymentOfferAssociatedWebDomain,  "associatedWebDomainForInstallmentCriteriaPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPaymentOfferInstallmentCriteria setAssociatedWebDomains:](v14, "setAssociatedWebDomains:", v12);

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[ApplyFooterContent footerContentForType:installmentCriteriaPID:inDatabase:]( &OBJC_CLASS___ApplyFooterContent,  "footerContentForType:installmentCriteriaPID:inDatabase:",  1LL,  a2,  *(void *)(a1 + 40)));
  -[PKPaymentOfferInstallmentCriteria setDisclosureFooter:](v14, "setDisclosureFooter:", v13);

  [*(id *)(a1 + 48) safelyAddObject:v14];
}

void sub_10033C870(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033C878(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setEligibility:](v4, "setEligibility:", [a3 integerValue]);
}

void sub_10033C8BC(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10033C900(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033C908(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033C910(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033C918(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  -[PKPaymentOfferInstallmentCriteria setSupportedCurrencyCodes:](v4, "setSupportedCurrencyCodes:", v5);
}

void sub_10033C998(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  -[PKPaymentOfferInstallmentCriteria setSupportedMerchantCountryCodes:](v4, "setSupportedMerchantCountryCodes:", v5);
}

void sub_10033CA18(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  -[PKPaymentOfferInstallmentCriteria setSupportedDeviceRegionCountryCodes:]( v4,  "setSupportedDeviceRegionCountryCodes:",  v5);
}

void sub_10033CA98(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKPaymentOfferInstallmentCriteria setSupportedLanguages:](v4, "setSupportedLanguages:", v5);
}

void sub_10033CAF0(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setPaymentNetworkIdentifier:]( v4,  "setPaymentNetworkIdentifier:",  [a3 integerValue]);
}

void sub_10033CB34(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setPaymentMethodType:]( v4,  "setPaymentMethodType:",  [a3 integerValue]);
}

void sub_10033CB78(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033CB80(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033CB88(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  -[PKPaymentOfferInstallmentCriteria setAssociatedApplicationIdentifiers:]( v4,  "setAssociatedApplicationIdentifiers:",  v5);
}

void sub_10033CC08(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPaymentOfferInstallmentCriteria setAppLaunchURL:](v4, "setAppLaunchURL:", v5);
}

void sub_10033CC54(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setRequiresChallenge:](v4, "setRequiresChallenge:", [a3 BOOLValue]);
}

void sub_10033CC98(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setSuppressPayInFull:](v4, "setSuppressPayInFull:", [a3 BOOLValue]);
}

void sub_10033CCDC(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setHasPreconfiguredOffers:]( v4,  "setHasPreconfiguredOffers:",  [a3 BOOLValue]);
}

void sub_10033CD20(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033CD28(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033CD30(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033CD38(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_10033D938(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPassShareActivationOption);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_10033DA8C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10033DD04(id a1, PKPassShareActivationOption *a2, id a3)
{
}

void sub_10033DD0C(id a1, PKPassShareActivationOption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassShareActivationOption setType:](v4, "setType:", PKPassShareActivationOptionTypeFromString(a3));
}

void sub_10033DD50(id a1, PKPassShareActivationOption *a2, id a3)
{
}

void sub_10033DD58(id a1, PKPassShareActivationOption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassShareActivationOption setValueLength:](v4, "setValueLength:", [a3 integerValue]);
}

id *sub_10033DD9C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)&OBJC_CLASS___PDBalanceManager;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v11, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      id v9 = objc_storeWeak(a1 + 2, v7);
      sub_10033B530((uint64_t)v7, a1, 2LL);
    }
  }

  return a1;
}

void sub_10033DE48(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = (id *)(a1 + 16);
    id v3 = a2;
    id WeakRetained = objc_loadWeakRetained(v2);
    sub_10033B418((uint64_t)WeakRetained, v3);
  }

id sub_10033DFD8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a3 stateIdentifier]);
    id v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = (id)objc_claimAutoreleasedReturnValue([v5 defaultStateIdentifier]);
    }
    id v9 = v8;

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 states]);
    objc_super v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v9]);
    a1 = (void *)objc_claimAutoreleasedReturnValue([v11 stateTypeDefaultV2]);
  }

  return a1;
}

uint64_t sub_10033E248(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 valueTypeForeignReference]);
    if ([v6 foreignReferenceType] == (id)1)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 content]);
      id v8 = v7;
      if (v7)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        void v12[2] = sub_10033E344;
        v12[3] = &unk_100657F40;
        id v13 = v7;
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pk_anyObjectPassingTest:", v12));
        if (v9) {
          uint64_t v10 = 1LL;
        }
        else {
          uint64_t v10 = 2LL;
        }
      }

      else
      {
        uint64_t v10 = 2LL;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

id sub_10033E344(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifiers]);
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

void sub_10033F1A8(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountDetails setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_10033F1F4(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountDetails setCreatedDate:](v4, "setCreatedDate:", v5);
}

void sub_10033F240(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountDetails setMergeDate:](v4, "setMergeDate:", v5);
}

void sub_10033F28C(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_10033F294(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_10033F29C(id a1, PKCreditAccountDetails *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", a3));
    -[PKCreditAccountDetails setProductTimeZone:](v4, "setProductTimeZone:", v5);
  }

void sub_10033F308(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountDetails setTermsAcceptanceRequired:]( v4,  "setTermsAcceptanceRequired:",  [a3 BOOLValue]);
}

void sub_10033F34C(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", a3));
  -[PKCreditAccountDetails setTermsURL:](v4, "setTermsURL:", v5);
}

void sub_10033F3B0(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_10033F3B8(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", a3));
  -[PKCreditAccountDetails setAssociatedPassURL:](v4, "setAssociatedPassURL:", v5);
}

void sub_10033F41C(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_10033F424(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_10033F42C(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountDetails setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_10033F470(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountDetails setRewardsDestination:](v4, "setRewardsDestination:", [a3 integerValue]);
}

void sub_10033F694(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

#error "100340EDC: too big function (funcsize=0)"
void __cdecl -[PDDatabaseManager _migratePassSettingsFromDatabase:](PDDatabaseManager *self, SEL a2, id a3)
{
  id v4;
  void v5[5];
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[SQLiteEntity queryWithDatabase:predicate:](&OBJC_CLASS___Pass, "queryWithDatabase:predicate:", a3, 0LL));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003529BC;
  v5[3] = &unk_10063C0D0;
  void v5[4] = self;
  [v4 enumeratePersistentIDsAndProperties:&off_100691178 usingBlock:v5];
}

void sub_1003529BC(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  id v7 = a4[1];
  id v8 = a4[2];
  id v9 = v8;
  if (v6) {
    BOOL v10 = v7 == 0LL;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0LL)
  {
    uint64_t v12 = [v7 BOOLValue];
    uint64_t Object = PKLogFacilityTypeGetObject(24LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 134218242;
      uint64_t v21 = v12;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Migrating settings: %ld for Pass with unqiue identifier: %@",  (uint8_t *)&v20,  0x16u);
    }

    id v15 = a4[3];
    id v16 = [v15 integerValue];
    uint64_t v17 = 72LL;
    if (v16 != (id)1) {
      uint64_t v17 = 0LL;
    }
    if (v16) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 3LL;
    }
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectSettingsManager]);
    sub_1003AFCA8((uint64_t)v19, v12, v6, v18);
  }
}

void sub_100352C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 passType] == (id)1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v4, v5));

    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication paymentApplicationsInDatabase:forPass:]( &OBJC_CLASS___PaymentApplication,  "paymentApplicationsInDatabase:forPass:",  *(void *)(a1 + 32),  v6));
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        objc_super v11 = 0LL;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v12 + 1) + 8 * (void)v11) setInAppPINRequiredAmount:0];
          objc_super v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v9);
    }

    +[PaymentApplication updatePaymentApplications:forPass:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:forPass:inDatabase:",  v7,  v6,  *(void *)(a1 + 32));
  }
}

void sub_1003531EC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  id v11 = (id)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v5));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 nfcPayload]);
  [v11 updateWithNFCPayload:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 associatedPassTypeIdentifiers]);
  [v11 updateWithAssociatedPassTypeIdentifiers:v7];

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 passTypeIdentifier]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[PassType anyInDatabase:withPassTypeID:]( &OBJC_CLASS___PassType,  "anyInDatabase:withPassTypeID:",  v8,  v9));
  [v10 updateIdentifierHash];
}

void sub_1003533E8(uint64_t a1, void *a2)
{
  id v24 = a2;
  BOOL v3 = [v24 style] == (id)6;
  id v4 = v24;
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v24 dataAccessor]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dictionary]);

    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v24 uniqueID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v7, v8));

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 PKStringForKey:PKPassKeyTransactionServiceURL]);
    if ([v10 length])
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 PKStringForKey:PKPassKeyTransactionPushTopic]);
      unint64_t v12 = [v11 length] != 0;
    }

    else
    {
      unint64_t v12 = 0LL;
    }

    uint64_t v13 = PKPassKeySupportsDPANNotifications;
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:PKPassKeySupportsDPANNotifications]);

    id v15 = (id)v12;
    if (v14) {
      id v15 = [v6 PKBoolForKey:v13];
    }
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v15));
    [v9 setValue:v16 forProperty:@"supports_dpan_notifications"];

    uint64_t v17 = PKPassKeySupportsFPANNotifications;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:PKPassKeySupportsFPANNotifications]);

    if (v18) {
      unint64_t v12 = (unint64_t)[v6 PKBoolForKey:v17];
    }
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v12));
    [v9 setValue:v19 forProperty:@"supports_fpan_notifications"];

    uint64_t v20 = PKPassKeySupportsDefaultCardSelection;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:PKPassKeySupportsDefaultCardSelection]);

    if (v21) {
      uint64_t v22 = (uint64_t)[v6 PKBoolForKey:v20];
    }
    else {
      uint64_t v22 = 1LL;
    }
    id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v22));
    [v9 setValue:v23 forProperty:@"supports_default_card_selection"];

    id v4 = v24;
  }
}

void sub_1003539D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003539E8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v6)
      {
        uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
        if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSData stringValue](v6, "stringValue"));
          id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE payment_transaction SET identifier = '%@', processed_for_location = '1' WHERE pid = '%@'",  v9,  v10));

          if (!sub_1002CCA50(*(void *)(a1 + 32), v11)) {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
          }
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100353C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_100353C1C(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    do
    {
      id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if (v6)
      {
        uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v5);
        if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
        {
          uint64_t v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE payment_application SET temp_payment_type = %ld WHERE pid = %ld",  PKPaymentMethodTypeForString(v6),  -[NSData integerValue](v4, "integerValue"));
          id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
          if (!sub_1002CCA50(*(void *)(a1 + 32), v9)) {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
          }
        }
      }
    }

    while ((sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2) & 1) != 0);
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    BOOL result = sub_1002CD364(*(void *)(a1 + 32), @"payment_application", @"payment_type");
    if (result) {
      BOOL result = sub_1002CD898( *(void *)(a1 + 32),  @"payment_application",  @"temp_payment_type",  @"payment_type");
    }
  }

  else
  {
    BOOL result = 0LL;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100353E50(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueID]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 groupingProfile]);
  if ([v5 isNFCEnabled])
  {
    [v5 setNFCEnabled:0];
    [*(id *)(a1 + 40) adjustGroupsAfterUpdatingPass:v6 oldGroupingProfile:v5];
  }
}

void sub_100354110( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100354128(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v6)
      {
        uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
        if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSData stringValue](v6, "stringValue"));
          id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE payment_transaction SET identifier = '%@' WHERE pid = '%@'",  v9,  v10));

          if (!sub_1002CCA50(*(void *)(a1 + 32), v11)) {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
          }
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100354364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10035437C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v6)
      {
        uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
        if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSData stringValue](v6, "stringValue"));
          id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE payment_message SET identifier = '%@' WHERE pid = '%@'",  v9,  v10));

          if (!sub_1002CCA50(*(void *)(a1 + 32), v11)) {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
          }
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100354564(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 passType] == (id)1)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dictionary]);

    id v7 = objc_msgSend( v5,  "PKArrayContaining:forKey:",  objc_opt_class(NSDictionary, v6),  PKPassKeyPaymentApplications);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)v8;
    if (v8) {
      uint64_t v10 = (void *)v8;
    }
    else {
      uint64_t v10 = &__NSArray0__struct;
    }
    id v11 = v10;

    uint64_t v42 = v5;
    id v13 = objc_msgSend( v5,  "PKArrayContaining:forKey:",  objc_opt_class(NSDictionary, v12),  PKPassKeyAuxiliaryPaymentApplications);
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)v14;
    if (v14) {
      id v16 = (void *)v14;
    }
    else {
      id v16 = &__NSArray0__struct;
    }
    id v17 = v16;

    id v39 = v17;
    char v40 = v11;
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v11 arrayByAddingObjectsFromArray:v17]);
    uint64_t v18 = *(void *)(a1 + 32);
    id v43 = v3;
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    uint64_t v20 = objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v18, v19));

    uint64_t v41 = a1;
    id v38 = (void *)v20;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication paymentApplicationsInDatabase:forPass:]( &OBJC_CLASS___PaymentApplication,  "paymentApplicationsInDatabase:forPass:",  *(void *)(a1 + 32),  v20));
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    id obj = v21;
    id v22 = [v21 countByEnumeratingWithState:&v54 objects:v59 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v55;
      uint64_t v25 = PKPassPaymentApplicationsKeyAID;
      uint64_t v49 = PKPassPaymentApplicationsKeySuspendedReason;
      uint64_t v44 = *(void *)v55;
      do
      {
        uint64_t v26 = 0LL;
        id v46 = v23;
        do
        {
          if (*(void *)v55 != v24) {
            objc_enumerationMutation(obj);
          }
          uint64_t v27 = *(void **)(*((void *)&v54 + 1) + 8LL * (void)v26);
          if ([v27 state] == (id)9)
          {
            __int128 v48 = v26;
            __int128 v52 = 0u;
            __int128 v53 = 0u;
            __int128 v50 = 0u;
            __int128 v51 = 0u;
            id v28 = v45;
            id v29 = [v28 countByEnumeratingWithState:&v50 objects:v58 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v51;
              do
              {
                for (i = 0LL; i != v30; i = (char *)i + 1)
                {
                  if (*(void *)v51 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  __int16 v33 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
                  id v34 = (void *)objc_claimAutoreleasedReturnValue([v27 applicationIdentifier]);
                  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKey:v25]);
                  unsigned int v36 = [v34 isEqual:v35];

                  if (v36)
                  {
                    id v37 = (void *)objc_claimAutoreleasedReturnValue([v33 PKStringForKey:v49]);
                    [v27 setSuspendedReason:v37];
                  }
                }

                id v30 = [v28 countByEnumeratingWithState:&v50 objects:v58 count:16];
              }

              while (v30);
            }

            uint64_t v24 = v44;
            id v23 = v46;
            uint64_t v26 = v48;
          }

          uint64_t v26 = (char *)v26 + 1;
        }

        while (v26 != v23);
        id v23 = [obj countByEnumeratingWithState:&v54 objects:v59 count:16];
      }

      while (v23);
    }

    +[PaymentApplication updatePaymentApplications:forPass:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:forPass:inDatabase:",  obj,  v38,  *(void *)(v41 + 32));

    id v3 = v43;
  }
}

void sub_1003549CC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v2, v4));

  id v5 = [v3 hasStoredValue];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
  [v7 setValue:v6 forProperty:@"has_stored_value"];
}

void sub_100354C30(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 paymentPass]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v6 isCobranded]));
    [v5 setValue:v7 forProperty:@"cobranded"];
  }
}

void sub_100354DC8(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 paymentPass]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v6 supportsSerialNumberBasedProvisioning]));
    [v5 setValue:v7 forProperty:@"supports_serial_number_based_provisioning"];
  }
}

void sub_100354F6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100354F84(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = PKMaxDefaultPerPassPaymentTransactionHistory;
    do
    {
      uint64_t v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v7);
      if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"DELETE FROM payment_transaction WHERE pass_pid = %ld AND NOT (transaction_sources & %ld) ORDER BY transaction_date DESC LIMIT 100000 OFFSET %ld;",
                         -[NSData unsignedLongValue](v6, "unsignedLongValue"),
                         2LL,
                         v5));
        uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
        if (*(_BYTE *)(v10 + 24))
        {
          BOOL v11 = sub_1002CCA50(*(void *)(a1 + 32), v9);
          uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
        }

        else
        {
          BOOL v11 = 0;
        }

        *(_BYTE *)(v10 + 24) = v11;
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100355274( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10035528C(uint64_t a1, sqlite3_stmt *a2)
{
  while (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
    uint64_t v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE pass SET has_background_image = %d, has_strip_image = %d WHERE pid = %lld",  v5 != 0LL,  v6 != 0LL,  -[NSData longLongValue](v4, "longLongValue")));
      if (!sub_1002CCA50(*(void *)(a1 + 32), v7)) {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
      }
    }
  }

void sub_100356124(uint64_t a1, void *a2)
{
  id v12 = a2;
  BOOL v3 = [v12 passType] == (id)1;
  id v4 = v12;
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v12 dataAccessor]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dictionary]);

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 PKStringForKey:PKPassKeyIssuerCountryCode]);
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v8, v9));

    if (v7)
    {
      [v10 setValue:v7 forProperty:@"issuer_country_code"];
    }

    else
    {
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v10 setValue:v11 forProperty:@"issuer_country_code"];
    }

    id v4 = v12;
  }
}

BOOL sub_100356A8C(uint64_t a1, void *a2, void *a3)
{
  return sub_1002CD898(*(void *)(a1 + 32), @"felica_transit_applet_state", a2, a3);
}

void sub_100357CD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100357CF0(uint64_t a1)
{
  BOOL v2 = sub_1002CD314( *(void *)(a1 + 32),  (uint64_t)@"transit_applet_state",  (uint64_t)@"en_route_flags BLOB");
  if (v2) {
    LOBYTE(v2) = sub_1002CD314( *(void *)(a1 + 32),  (uint64_t)@"felica_transit_applet_state",  (uint64_t)@"en_route_flags BLOB");
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    BOOL v3 = sub_1002CD364(*(void *)(a1 + 32), @"transit_applet_state", @"in_station");
    if (v3)
    {
      BOOL v3 = sub_1002CD364(*(void *)(a1 + 32), @"felica_transit_applet_state", @"in_station");
      if (v3)
      {
        BOOL v3 = sub_1002CD364(*(void *)(a1 + 32), @"felica_transit_applet_state", @"in_shinkansen_station");
        if (v3) {
          LOBYTE(v3) = sub_1002CD0D0(*(void *)(a1 + 32), 12011LL);
        }
      }
    }
  }

  else
  {
    LOBYTE(v3) = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100357EA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v4, v5));

  if ([v6 passFlavor] == (id)1)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v10 dataAccessor]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 dictionary]);

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 valueForKey:PKPassKeyAssociatedAccountServiceAccountIdentifier]);
    [v6 updateWithAssociatedAccountIdentifier:v9];
  }
}

void sub_10035847C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100358494(uint64_t a1)
{
  BOOL v2 = sub_1002CD314( *(void *)(a1 + 32),  (uint64_t)@"payment_transaction",  (uint64_t)@"start_station_latitude REAL");
  if (v2)
  {
    BOOL v2 = sub_1002CD314( *(void *)(a1 + 32),  (uint64_t)@"payment_transaction",  (uint64_t)@"start_station_longitude REAL");
    if (v2)
    {
      BOOL v2 = sub_1002CD314( *(void *)(a1 + 32),  (uint64_t)@"payment_transaction",  (uint64_t)@"end_station_latitude REAL");
      if (v2)
      {
        BOOL v2 = sub_1002CD314( *(void *)(a1 + 32),  (uint64_t)@"payment_transaction",  (uint64_t)@"end_station_longitude REAL");
        if (v2) {
          LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 32), 12020LL);
        }
      }
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100359560(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  id v11 = (id)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v5));

  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 lowBalanceReminderAmountForPassWithUniqueID:v7]);
  if (v11 && [v8 integerValue])
  {
    id v9 = -[PKPaymentBalanceReminder initWithThreshold:isEnabled:]( objc_alloc(&OBJC_CLASS___PKPaymentBalanceReminder),  "initWithThreshold:isEnabled:",  v8,  1LL);
    id v10 =  +[BalanceReminder insertOrUpdateBalanceReminder:forBalanceIdentifier:pass:database:]( &OBJC_CLASS___BalanceReminder,  "insertOrUpdateBalanceReminder:forBalanceIdentifier:pass:database:",  v9,  0LL,  v11,  *(void *)(a1 + 32));
  }
}

void sub_10035A0B0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 paymentPass]);
  __int128 v54 = v2;
  id v4 = v2;
  uint64_t v5 = (void *)v3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  __int128 v61 = v6;
  __int128 v53 = v5;
  if (v5 && [v5 hasAssociatedPeerPaymentAccount])
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[Account accountsInDatabase:](&OBJC_CLASS___Account, "accountsInDatabase:", *(void *)(a1 + 32)));
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    id obj = v7;
    id v8 = [v7 countByEnumeratingWithState:&v71 objects:v79 count:16];
    if (!v8) {
      goto LABEL_55;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v72;
    uint64_t v55 = *(void *)v72;
    while (1)
    {
      id v11 = 0LL;
      id v56 = v9;
      do
      {
        if (*(void *)v72 != v10) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)v11);
        if ([v12 feature] == (id)2)
        {
          __int128 v58 = v11;
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountIdentifier]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent accountEventsForAccountIdentifier:altDSID:types:startDate:endDate:orderedByDate:limit:inDatabase:]( &OBJC_CLASS___AccountEvent,  "accountEventsForAccountIdentifier:altDSID:types:startDate:endDate:orderedByDate:limit:inDatabase:",  v13,  0LL,  &off_100691190,  0LL,  0LL,  1LL,  0LL,  *(void *)(a1 + 32)));

          __int128 v69 = 0u;
          __int128 v70 = 0u;
          __int128 v67 = 0u;
          __int128 v68 = 0u;
          id v15 = v14;
          id v16 = [v15 countByEnumeratingWithState:&v67 objects:v78 count:16];
          if (!v16) {
            goto LABEL_32;
          }
          id v17 = v16;
          uint64_t v18 = *(void *)v68;
          while (1)
          {
            for (i = 0LL; i != v17; i = (char *)i + 1)
            {
              if (*(void *)v68 != v18) {
                objc_enumerationMutation(v15);
              }
              if (v20)
              {
                uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withReferenceIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withReferenceIdentifier:",  *(void *)(a1 + 32),  v20));
                id v22 = v21;
                if (v21)
                {
                  id v23 = (id)objc_claimAutoreleasedReturnValue([v21 passUniqueIdentifier]);
                  id v24 = v61;
                  uint64_t v25 = v24;
                  if (v23 == v24)
                  {

                    goto LABEL_22;
                  }

                  if (v61 && v23)
                  {
                    unsigned int v26 = [v23 isEqualToString:v24];

                    if (!v26) {
                      goto LABEL_29;
                    }
LABEL_22:
                    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v22 paymentTransaction]);
                    id v23 = v27;
                    if (v27 && [v27 suppressBehavior] != (id)1)
                    {
                      uint64_t Object = PKLogFacilityTypeGetObject(23LL);
                      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__int128 buf = 138412290;
                        BOOL v77 = v20;
                        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Suppressing transaction for identifier: %@",  buf,  0xCu);
                      }

                      [v23 setSuppressBehavior:1];
                      [v22 updateWithPaymentTransaction:v23];
                    }
                  }

                  else
                  {
                  }
                }

void sub_10035B5B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10035B5D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained setShouldSyncTransactionsToCloudStore:1];
    id WeakRetained = v2;
  }
}

void sub_10035BF5C(uint64_t a1)
{
  uint64_t DictionaryForKey = PKSharedCacheGetDictionaryForKey(@"CloudStoreServerChangeTokens");
  id v3 = (id)objc_claimAutoreleasedReturnValue(DictionaryForKey);
  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10035BFE8;
    v4[3] = &unk_1006581E8;
    id v5 = *(id *)(a1 + 32);
    [v3 enumerateKeysAndObjectsUsingBlock:v4];
  }
}

void sub_10035BFE8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v10, v7) & 1) != 0)
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSData, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0 && v10 && v5) {
      +[CloudStoreChangeToken saveChangeToken:forZoneWithName:inDatabase:]( &OBJC_CLASS___CloudStoreChangeToken,  "saveChangeToken:forZoneWithName:inDatabase:",  v5,  v10,  *(void *)(a1 + 32));
    }
  }
}

void sub_10035C23C(uint64_t a1)
{
  uint64_t ArrayForKey = PKSharedCacheGetArrayForKey(@"CloudStoreApplePayContainerZones");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(ArrayForKey);
  uint64_t DictionaryForKey = PKSharedCacheGetDictionaryForKey(@"CloudStoreServerFetchTimestamps");
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(DictionaryForKey);
  uint64_t v5 = PKSharedCacheGetDictionaryForKey(@"CloudStoreApplePayContainerSubscriptions");
  id v33 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v6 = PKSharedCacheGetDictionaryForKey(@"CloudStorePassesContainerServerFetchTimestamps");
  id v32 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v7 = PKSharedCacheGetDictionaryForKey(@"CloudStorePassesContainerSubscriptions");
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v8 = PKSharedCacheGetArrayForKey(@"CloudStorePassesContainerZones");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v3
    && (uint64_t v10 = PKCloudStoreTransactionsZoneName,
        [v3 containsObject:PKCloudStoreTransactionsZoneName]))
  {
    id v11 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  v10,  CKCurrentUserDefaultName);
    id v12 = objc_alloc(&OBJC_CLASS___PKCloudStoreZone);
    id v13 = -[PKCloudStoreZone initWithZoneID:containerName:scope:]( v12,  "initWithZoneID:containerName:scope:",  v11,  PKCloudStoreApplePayContainerName,  2LL);
  }

  else
  {
    id v13 = 0LL;
  }

  uint64_t v14 = PKCloudStorePassesZoneName;
  id v29 = v3;
  if (v9)
  {
    if ([v9 containsObject:PKCloudStorePassesZoneName])
    {
      id v15 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  v14,  CKCurrentUserDefaultName);
      id v16 = objc_alloc(&OBJC_CLASS___PKCloudStoreZone);
      id v17 = -[PKCloudStoreZone initWithZoneID:containerName:scope:]( v16,  "initWithZoneID:containerName:scope:",  v15,  PKCloudStorePassesContainerName,  2LL);
    }

    else
    {
      id v17 = 0LL;
    }

    uint64_t v19 = PKCloudStoreRemoteAssestsZoneName;
    if ([v9 containsObject:PKCloudStoreRemoteAssestsZoneName])
    {
      uint64_t v20 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  v19,  CKCurrentUserDefaultName);
      uint64_t v21 = objc_alloc(&OBJC_CLASS___PKCloudStoreZone);
      id v18 = -[PKCloudStoreZone initWithZoneID:containerName:scope:]( v21,  "initWithZoneID:containerName:scope:",  v20,  PKCloudStorePassesContainerName,  2LL);
    }

    else
    {
      id v18 = 0LL;
    }
  }

  else
  {
    id v17 = 0LL;
    id v18 = 0LL;
    uint64_t v19 = PKCloudStoreRemoteAssestsZoneName;
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreChangeToken changeTokenForZoneWithName:inDatabase:]( &OBJC_CLASS___CloudStoreChangeToken,  "changeTokenForZoneWithName:inDatabase:",  PKCloudStoreTransactionsZoneName,  *(void *)(a1 + 32)));
  id v30 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreChangeToken changeTokenForZoneWithName:inDatabase:]( &OBJC_CLASS___CloudStoreChangeToken,  "changeTokenForZoneWithName:inDatabase:",  v14,  *(void *)(a1 + 32)));
  id v23 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreChangeToken changeTokenForZoneWithName:inDatabase:]( &OBJC_CLASS___CloudStoreChangeToken,  "changeTokenForZoneWithName:inDatabase:",  v19,  *(void *)(a1 + 32)));
  uint64_t v54 = 0LL;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x3032000000LL;
  __int128 v57 = sub_10035C810;
  __int128 v58 = sub_10035C820;
  id v59 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x3032000000LL;
  __int128 v51 = sub_10035C810;
  __int128 v52 = sub_10035C820;
  id v53 = 0LL;
  uint64_t v42 = 0LL;
  id v43 = &v42;
  uint64_t v44 = 0x3032000000LL;
  unsigned int v45 = sub_10035C810;
  uint64_t v46 = sub_10035C820;
  id v47 = 0LL;
  if (v34)
  {
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_10035C828;
    v41[3] = &unk_100658210;
    void v41[4] = &v54;
    [v34 enumerateKeysAndObjectsUsingBlock:v41];
  }

  if (v33)
  {
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_10035C900;
    v39[3] = &unk_1006581E8;
    char v40 = v13;
    [v33 enumerateKeysAndObjectsUsingBlock:v39];
  }

  if (v32)
  {
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_10035C9B8;
    v38[3] = &unk_100658238;
    v38[4] = &v48;
    v38[5] = &v42;
    [v32 enumerateKeysAndObjectsUsingBlock:v38];
  }

  if (v31)
  {
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_10035CAB0;
    v35[3] = &unk_100658260;
    id v36 = v17;
    id v37 = v18;
    [v31 enumerateKeysAndObjectsUsingBlock:v35];
  }

  if (v13)
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreContainerDatabase insertOrUpdateCloudStoreDatabaseWithContainerName:scope:inDatabase:]( &OBJC_CLASS___CloudStoreContainerDatabase,  "insertOrUpdateCloudStoreDatabaseWithContainerName:scope:inDatabase:",  PKCloudStoreApplePayContainerName,  2LL,  *(void *)(a1 + 32)));
    id v25 =  +[CloudStoreZone insertOrUpdateCloudStoreZone:forContainerDatabase:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "insertOrUpdateCloudStoreZone:forContainerDatabase:inDatabase:",  v13,  v24,  *(void *)(a1 + 32));
    +[CloudStoreZone updateChangeToken:fetchTimestamp:forCloudStoreZone:inContainerDatabase:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "updateChangeToken:fetchTimestamp:forCloudStoreZone:inContainerDatabase:inDatabase:",  v22,  v55[5],  v13,  v24,  *(void *)(a1 + 32));
  }

  if ((unint64_t)v17 | (unint64_t)v18)
  {
    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreContainerDatabase insertOrUpdateCloudStoreDatabaseWithContainerName:scope:inDatabase:]( &OBJC_CLASS___CloudStoreContainerDatabase,  "insertOrUpdateCloudStoreDatabaseWithContainerName:scope:inDatabase:",  PKCloudStorePassesContainerName,  2LL,  *(void *)(a1 + 32)));
    if (v17)
    {
      id v27 =  +[CloudStoreZone insertOrUpdateCloudStoreZone:forContainerDatabase:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "insertOrUpdateCloudStoreZone:forContainerDatabase:inDatabase:",  v17,  v26,  *(void *)(a1 + 32));
      +[CloudStoreZone updateChangeToken:fetchTimestamp:forCloudStoreZone:inContainerDatabase:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "updateChangeToken:fetchTimestamp:forCloudStoreZone:inContainerDatabase:inDatabase:",  v30,  v49[5],  v17,  v26,  *(void *)(a1 + 32));
    }

    if (v18)
    {
      id v28 =  +[CloudStoreZone insertOrUpdateCloudStoreZone:forContainerDatabase:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "insertOrUpdateCloudStoreZone:forContainerDatabase:inDatabase:",  v18,  v26,  *(void *)(a1 + 32));
      +[CloudStoreZone updateChangeToken:fetchTimestamp:forCloudStoreZone:inContainerDatabase:inDatabase:]( &OBJC_CLASS___CloudStoreZone,  "updateChangeToken:fetchTimestamp:forCloudStoreZone:inContainerDatabase:inDatabase:",  v23,  v43[5],  v18,  v26,  *(void *)(a1 + 32));
    }
  }

  _Block_object_dispose(&v42, 8);

  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v54, 8);
}

void sub_10035C7D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
}

uint64_t sub_10035C810(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10035C820(uint64_t a1)
{
}

void sub_10035C828(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v13 = a2;
  id v7 = a3;
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
  if ((objc_opt_isKindOfClass(v13, v9) & 1) != 0)
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDate, v10);
    if ((objc_opt_isKindOfClass(v7, v11) & 1) != 0)
    {
      id v12 = v7;
      if (v13 && v12 && [v13 isEqualToString:PKCloudStoreTransactionsZoneName])
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
        *a4 = 1;
      }
    }
  }
}

void sub_10035C900(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v11, v7) & 1) != 0)
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      id v10 = v11;
    }
  }
}

void sub_10035C9B8(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v14, v7) & 1) != 0)
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDate, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      id v10 = v14;
      id v11 = v5;
      id v12 = v11;
      if (!v10 || !v11) {
        goto LABEL_10;
      }
      if ([v10 isEqualToString:PKCloudStorePassesZoneName])
      {
        uint64_t v13 = *(void *)(a1 + 32);
      }

      else
      {
        if (![v10 isEqualToString:PKCloudStoreRemoteAssestsZoneName])
        {
LABEL_10:

          goto LABEL_11;
        }

        uint64_t v13 = *(void *)(a1 + 40);
      }

      objc_storeStrong((id *)(*(void *)(v13 + 8) + 40LL), a3);
      goto LABEL_10;
    }
  }

void sub_10035CAB0(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v14, v7) & 1) != 0)
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      id v10 = v14;
      id v11 = v5;
      id v12 = v11;
      if (!v10 || !v11) {
        goto LABEL_10;
      }
      if ([v11 isEqualToString:PKCloudStorePassesZoneName])
      {
        uint64_t v13 = (id *)(a1 + 32);
      }

      else
      {
        if (![v12 isEqualToString:PKCloudStoreRemoteAssestsZoneName])
        {
LABEL_10:

          goto LABEL_11;
        }

        uint64_t v13 = (id *)(a1 + 40);
      }

      [*v13 setZoneSubscriptionIdentifier:v10];
      goto LABEL_10;
    }
  }

void sub_10035CD68(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[TransitAppletState allStatesInDatabase:]( &OBJC_CLASS___TransitAppletState,  "allStatesInDatabase:",  *(void *)(a1 + 32)));
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v24 = v2;
  id obj = (id)objc_claimAutoreleasedReturnValue([v2 allObjects]);
  id v3 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v37;
    uint64_t v28 = PKPaymentBalanceStoredValueDefaultIdentifier;
    uint64_t v27 = PKNoCurrencyCode;
    uint64_t v26 = PKPaymentBalanceLoyaltyBalanceDefaultIdentifier;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v37 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 transitAppletState]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 balance]);

        if (v9)
        {
          id v10 = objc_alloc(&OBJC_CLASS___PKCurrencyAmount);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 balance]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 currency]);
          uint64_t v13 = -[PKCurrencyAmount initWithAmount:currency:exponent:]( v10,  "initWithAmount:currency:exponent:",  v11,  v12,  0LL);

          id v14 = -[PKPaymentBalance initWithIdentifier:forCurrencyAmount:]( objc_alloc(&OBJC_CLASS___PKPaymentBalance),  "initWithIdentifier:forCurrencyAmount:",  v28,  v13);
        }

        else
        {
          id v14 = 0LL;
        }

        id v15 = (PKPaymentBalance *)objc_claimAutoreleasedReturnValue([v8 loyaltyBalance]);

        if (v15)
        {
          id v16 = objc_alloc(&OBJC_CLASS___PKCurrencyAmount);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v8 loyaltyBalance]);
          id v18 = v17;
          if (v17)
          {
            [v17 decimalValue];
          }

          else
          {
            v34[0] = 0LL;
            v34[1] = 0LL;
            int v35 = 0;
          }

          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDecimalNumber decimalNumberWithDecimal:]( &OBJC_CLASS___NSDecimalNumber,  "decimalNumberWithDecimal:",  v34));
          uint64_t v20 = -[PKCurrencyAmount initWithAmount:currency:exponent:]( v16,  "initWithAmount:currency:exponent:",  v19,  v27,  0LL);

          id v15 = -[PKPaymentBalance initWithIdentifier:forCurrencyAmount:]( objc_alloc(&OBJC_CLASS___PKPaymentBalance),  "initWithIdentifier:forCurrencyAmount:",  v26,  v20);
        }

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( Pass,  "anyInDatabase:withPersistentID:",  *(void *)(a1 + 32),  [v7 paymentPassPid]));
        id v22 = v21;
        if (v21)
        {
          uint64_t v23 = *(void *)(a1 + 32);
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472LL;
          _DWORD v29[2] = sub_10035D0C0;
          v29[3] = &unk_10063E468;
          id v30 = v21;
          id v31 = *(id *)(a1 + 32);
          id v32 = v14;
          id v33 = v15;
          sub_1002CCC5C(v23, v29);
        }
      }

      id v4 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
    }

    while (v4);
  }
}

uint64_t sub_10035D0C0(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    id v3 =  +[PaymentBalance insertPaymentBalance:withPaymentPass:inDatabase:]( &OBJC_CLASS___PaymentBalance,  "insertPaymentBalance:withPaymentPass:inDatabase:",  v2,  a1[4],  a1[5]);
  }
  uint64_t v4 = a1[7];
  if (v4) {
    id v5 =  +[PaymentBalance insertPaymentBalance:withPaymentPass:inDatabase:]( &OBJC_CLASS___PaymentBalance,  "insertPaymentBalance:withPaymentPass:inDatabase:",  v4,  a1[4],  a1[5]);
  }
  return 1LL;
}

void sub_10035D604(uint64_t a1, void *a2)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 uniqueID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1 + 32),  v7));
  [*(id *)(a1 + 40) commutePlanRenewalReminderTimeIntervalForPassWithUniqueID:v7];
  if (v3)
  {
    id v5 = -[PKPaymentCommutePlanReminder initWithTimeInterval:]( objc_alloc(&OBJC_CLASS___PKPaymentCommutePlanReminder),  "initWithTimeInterval:",  v4);
    id v6 =  +[CommutePlanReminder insertOrUpdateCommutePlanReminder:forCommutePlanIdentifier:pass:database:]( &OBJC_CLASS___CommutePlanReminder,  "insertOrUpdateCommutePlanReminder:forCommutePlanIdentifier:pass:database:",  v5,  PKPassPaymentLegacyCommutePlanIdentifier,  v3,  *(void *)(a1 + 32));
  }
}

void sub_10035DA78(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication paymentApplicationsInDatabase:]( &OBJC_CLASS___PaymentApplication,  "paymentApplicationsInDatabase:",  *(void *)(a1 + 32)));
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) setSupportsServiceMode:1];
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }

  +[PaymentApplication updatePaymentApplications:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:inDatabase:",  v2,  *(void *)(a1 + 32));
}

void sub_10035DC54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);
  unsigned int v5 = [v4 hasCredentials];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);

    uint64_t v26 = a1;
    uint64_t v8 = *(void *)(a1 + 32);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v8, v9));

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyPaymentApplications]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyAuxiliaryPaymentApplications]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v13 = v10;
    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v32;
      do
      {
        id v17 = 0LL;
        do
        {
          if (*(void *)v32 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v31 + 1) + 8LL * (void)v17),  0LL);
          [v12 addObject:v18];

          id v17 = (char *)v17 + 1;
        }

        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
      }

      while (v15);
    }

    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id v19 = v11;
    id v20 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        uint64_t v23 = 0LL;
        do
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v27 + 1) + 8LL * (void)v23),  1LL);
          [v12 addObject:v24];

          uint64_t v23 = (char *)v23 + 1;
        }

        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }

      while (v21);
    }

    +[PaymentApplication updatePaymentApplications:forPass:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:forPass:inDatabase:",  v12,  v25,  *(void *)(v26 + 32));
  }
}

void sub_10035E774(_Unwind_Exception *a1)
{
}

id sub_10035E798(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSourceIdentifier]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource anyInDatabase:withIdentifier:]( &OBJC_CLASS___TransactionSource,  "anyInDatabase:withIdentifier:",  *(void *)(a1 + 32),  v4));
  if (!v5)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource insertTransactionSourceWithType:inDatabase:]( &OBJC_CLASS___TransactionSource,  "insertTransactionSourceWithType:inDatabase:",  0LL,  *(void *)(a1 + 32)));
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 persistentID]));
      __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
      int v14 = 138412546;
      id v15 = v8;
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Created transaction source with pid %@ and identifier %@",  (uint8_t *)&v14,  0x16u);
    }

    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 persistentID]));
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 persistentID]));
        int v14 = 138412546;
        id v15 = v10;
        __int16 v16 = 2112;
        id v17 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Setting payment application %@ to transaction source with pid %@",  (uint8_t *)&v14,  0x16u);
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 persistentID]));
      [v3 setValue:v12 forProperty:@"transaction_source_pid"];
    }
  }

  return v5;
}

id sub_10035E9CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSourceIdentifier]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource anyInDatabase:withIdentifier:]( &OBJC_CLASS___TransactionSource,  "anyInDatabase:withIdentifier:",  *(void *)(a1 + 32),  v4));
  if (!v5)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource insertTransactionSourceWithType:inDatabase:]( &OBJC_CLASS___TransactionSource,  "insertTransactionSourceWithType:inDatabase:",  0LL,  *(void *)(a1 + 32)));
    id v6 = [v5 persistentID];
    id v7 = [v3 persistentID];
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v6));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
      int v15 = 138412546;
      __int16 v16 = v10;
      __int16 v17 = 2112;
      id v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Created transaction source with pid %@ and identifier %@",  (uint8_t *)&v15,  0x16u);
    }

    if (v5)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v7));
        id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v6));
        int v15 = 138412546;
        __int16 v16 = v12;
        __int16 v17 = 2112;
        id v18 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Setting pass %@ to transaction source with pid %@",  (uint8_t *)&v15,  0x16u);
      }

      [v3 updateWithTransactionSourcePID:v6];
    }
  }

  return v5;
}

void sub_10035EBC8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Populating source_pid for all transactions.",  buf,  2u);
  }

  uint64_t v28 = a1;
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    *(void *)&__int128 v6 = 138412290LL;
    __int128 v27 = v6;
    __int128 v29 = a2;
    do
    {
      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      __int128 v9 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withPID:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withPID:",  *(void *)(a1 + 32),  v7));
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPersistentID:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withPersistentID:",  *(void *)(a1 + 32),  -[NSData longLongValue](v8, "longLongValue")));
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withPersistentID:",  *(void *)(a1 + 32),  -[NSData longLongValue](v9, "longLongValue")));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138413570;
        __int128 v31 = v7;
        __int16 v32 = 2112;
        __int128 v33 = v10;
        __int16 v34 = 2112;
        int v35 = v8;
        __int16 v36 = 2112;
        __int128 v37 = v11;
        __int16 v38 = 2112;
        __int128 v39 = v9;
        __int16 v40 = 2112;
        uint64_t v41 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Transaction with pid %@, %@. Has payment application pid %@, %@. Has pass pid %@, %@",  buf,  0x3Eu);
      }

      if (v11 && -[NSData longLongValue](v8, "longLongValue"))
      {
        id v13 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL);
      }

      else
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = v27;
          __int128 v31 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "There is no payment application defined for payment transaction %@. Using the source from the pass.",  buf,  0xCu);
        }

        id v13 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL);
      }

      uint64_t v14 = v13();
      int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v15 persistentID]));
      [v10 setValue:v16 forProperty:@"source_pid"];

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v10 persistentID]));
        id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v15 persistentID]));
        *(_DWORD *)__int128 buf = 138412546;
        __int128 v31 = v17;
        __int16 v32 = 2112;
        __int128 v33 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Setting transaction %@ with transaction source pid %@",  buf,  0x16u);

        a1 = v28;
      }

      a2 = v29;
    }

    while ((sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, v29) & 1) != 0);
  }

  unsigned int v19 = objc_msgSend(*(id *)(a1 + 40), "containsObject:", @"pass_pid", v27);
  unsigned int v20 = [*(id *)(a1 + 40) containsObject:@"payment_application_pid"];
  if (v19)
  {
    uint64_t v21 = *(void *)(*(void *)(v28 + 64) + 8LL);
    if (*(_BYTE *)(v21 + 24))
    {
      BOOL v22 = sub_1002CD364(*(void *)(v28 + 32), @"payment_transaction", @"pass_pid");
      uint64_t v21 = *(void *)(*(void *)(v28 + 64) + 8LL);
    }

    else
    {
      BOOL v22 = 0;
    }

    *(_BYTE *)(v21 + 24) = v22;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(v28 + 64) + 8LL) + 24LL)) {
        uint64_t v23 = @"YES";
      }
      else {
        uint64_t v23 = @"NO";
      }
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v31 = (void *)v23;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Removed column pass_pid with success %@",  buf,  0xCu);
    }
  }

  if (v20)
  {
    uint64_t v24 = *(void *)(*(void *)(v28 + 64) + 8LL);
    if (*(_BYTE *)(v24 + 24))
    {
      BOOL v25 = sub_1002CD364(*(void *)(v28 + 32), @"payment_transaction", @"payment_application_pid");
      uint64_t v24 = *(void *)(*(void *)(v28 + 64) + 8LL);
    }

    else
    {
      BOOL v25 = 0;
    }

    *(_BYTE *)(v24 + 24) = v25;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(v28 + 64) + 8LL) + 24LL)) {
        uint64_t v26 = @"YES";
      }
      else {
        uint64_t v26 = @"NO";
      }
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v31 = (void *)v26;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Removed column payment_application_pid with success %@",  buf,  0xCu);
    }
  }

void sub_10035F0EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Starting _migrateFrom13402To14000 databasePopulationOperation",  buf,  2u);
  }

  if ([v3 passType] == (id)1)
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication predicateForPassWithUniqueIdentifier:]( &OBJC_CLASS___PaymentApplication,  "predicateForPassWithUniqueIdentifier:",  v6));

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___PaymentApplication,  "queryWithDatabase:predicate:",  *(void *)(a1 + 32),  v7));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10035F238;
    v9[3] = &unk_10063FE98;
    id v10 = *(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    [v8 enumeratePersistentIDsAndProperties:0 usingBlock:v9];
  }
}

void sub_10035F238(uint64_t a1, uint64_t a2)
{
  id v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentApplication),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (PaymentApplication *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
    int v9 = 138412546;
    id v10 = v7;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Payment application pid %@: %@",  (uint8_t *)&v9,  0x16u);
  }

  if (v4)
  {
    id v8 = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Added transaction source to payment application pid %@",  (uint8_t *)&v9,  0xCu);
    }
  }
}

uint64_t sub_10035F4D4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    p_superclass = &OBJC_METACLASS___PDPassSignalManager.superclass;
    p_vtable = &OBJC_CLASS___TransactionReleasedData.vtable;
    do
    {
      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if (v8)
      {
        int v9 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( p_superclass + 164,  "anyInDatabase:withPersistentID:",  *(void *)(a1 + 32),  -[NSData longLongValue](v7, "longLongValue")));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 transactionSourceIdentifier]);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([p_vtable + 392 anyInDatabase:*(void *)(a1 + 32) withIdentifier:v10]);
        if (!v11)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue( [p_vtable + 392 insertTransactionSourceWithType:1 inDatabase:*(void *)(a1 + 32)]);
          __int16 v11 = v12;
          if (v12)
          {
            id v13 = p_vtable;
            uint64_t v14 = p_superclass;
            int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v12 persistentID]));
            [v9 setValue:v15 forProperty:@"transaction_source_pid"];

            p_superclass = v14;
            p_vtable = v13;
          }
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_10035F630(uint64_t a1)
{
  uint64_t DictionaryForKey = PKSharedCacheGetDictionaryForKey(@"fetchTransactions");
  id v4 = (id)objc_claimAutoreleasedReturnValue(DictionaryForKey);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10035F6CC;
  v5[3] = &unk_100658260;
  id v3 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v5];
  PKSharedCacheSetObjectForKey(*(void *)(a1 + 40), @"fetchTransactions");
}

void sub_10035F6CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
    if ((objc_opt_isKindOfClass(v6, v10) & 1) != 0)
    {
      id v11 = v6;
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceIdentifiersForPassUniqueIdentifier:v5]);
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      id v13 = [v12 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v18;
        do
        {
          __int16 v16 = 0LL;
          do
          {
            if (*(void *)v18 != v15) {
              objc_enumerationMutation(v12);
            }
            [*(id *)(a1 + 40) setObject:v11 forKey:*(void *)(*((void *)&v17 + 1) + 8 * (void)v16)];
            __int16 v16 = (char *)v16 + 1;
          }

          while (v14 != v16);
          id v14 = [v12 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }

        while (v14);
      }
    }
  }
}

void sub_10035FA78(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v10 valueForProperty:@"container_database_pid"]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreContainerDatabase anyInDatabase:withPID:]( CloudStoreContainerDatabase,  "anyInDatabase:withPID:",  *(void *)(a1 + 32),  [v3 longLongValue]));
  id v5 = v4;
  if (v3 && v4 && ([v4 existsInDatabase] & 1) != 0)
  {
    id v6 = v5;
LABEL_9:
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v6 persistentID]));
    [v10 setValue:v9 forProperty:@"container_database_pid"];

    goto LABEL_10;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v10 valueForProperty:@"container_name"]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CloudStoreContainerDatabase anyInDatabase:withContainerName:scope:]( &OBJC_CLASS___CloudStoreContainerDatabase,  "anyInDatabase:withContainerName:scope:",  *(void *)(a1 + 32),  v7,  2LL));

  if (v6 && [v6 existsInDatabase])
  {

    goto LABEL_9;
  }

  uint64_t v8 = objc_claimAutoreleasedReturnValue( +[CloudStoreContainerDatabase insertOrUpdateCloudStoreDatabaseWithContainerName:scope:inDatabase:]( &OBJC_CLASS___CloudStoreContainerDatabase,  "insertOrUpdateCloudStoreDatabaseWithContainerName:scope:inDatabase:",  v7,  2LL,  *(void *)(a1 + 32)));

  id v6 = (void *)v8;
  if (v8) {
    goto LABEL_9;
  }
LABEL_10:
}

uint64_t sub_10035FBD0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CloudStoreZone),  "initWithPersistentID:inDatabase:",  -[NSData longLongValue](v5, "longLongValue"),  *(void *)(a1 + 32));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      -[SQLiteEntity setValue:forProperty:](v6, "setValue:forProperty:", CKCurrentUserDefaultName, @"zone_owner");

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100360470(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication paymentApplicationsInDatabase:]( &OBJC_CLASS___PaymentApplication,  "paymentApplicationsInDatabase:",  *(void *)(a1 + 32)));
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) setSupportsServiceMode:1];
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }

  +[PaymentApplication updatePaymentApplications:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:inDatabase:",  v2,  *(void *)(a1 + 32));
}

void sub_10036066C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);
  unsigned int v5 = [v4 hasCredentials];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);

    uint64_t v26 = a1;
    uint64_t v8 = *(void *)(a1 + 32);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v8, v9));

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyPaymentApplications]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyAuxiliaryPaymentApplications]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v13 = v10;
    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v32;
      do
      {
        __int128 v17 = 0LL;
        do
        {
          if (*(void *)v32 != v16) {
            objc_enumerationMutation(v13);
          }
          __int128 v18 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v31 + 1) + 8LL * (void)v17),  0LL);
          [v12 addObject:v18];

          __int128 v17 = (char *)v17 + 1;
        }

        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
      }

      while (v15);
    }

    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id v19 = v11;
    id v20 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        uint64_t v23 = 0LL;
        do
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v27 + 1) + 8LL * (void)v23),  1LL);
          [v12 addObject:v24];

          uint64_t v23 = (char *)v23 + 1;
        }

        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }

      while (v21);
    }

    +[PaymentApplication updatePaymentApplications:forPass:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:forPass:inDatabase:",  v12,  v25,  *(void *)(v26 + 32));
  }
}

void sub_1003610B4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100361118;
  v2[3] = &unk_100653140;
  id v3 = v1;
  sub_1002CCDBC( (uint64_t)v3,  @"SELECT b, SUM(g) as sumg, h from apples WHERE b is not null AND g is not null AND (d == 1 OR d == 2)  GROUP BY b, h HAVING sumg > 0;",
    v2);
}

uint64_t sub_100361118(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      unsigned int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData longLongValue](v5, "longLongValue");

      __int128 v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = -[NSData longLongValue](v7, "longLongValue");

      __int128 v9 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      id v10 = -[NSData longLongValue](v9, "longLongValue");

      id v11 = @"eligible_eligible_rewards_percent_aggregate";
      if (v10 != (id)1) {
        id v11 = 0LL;
      }
      if (v10 == (id)2) {
        id v11 = @"eligible_rewards_cash_aggregate";
      }
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE payment_transaction SET %@ = ? WHERE pid = ?",  v11));
      uint64_t v13 = *(void *)(a1 + 32);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      void v14[2] = sub_100361264;
      void v14[3] = &unk_100653790;
      void v14[4] = v8;
      void v14[5] = v6;
      sub_1002CCDBC(v13, v12, v14);

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_100361264(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

uint64_t sub_1003614B0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      unsigned int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData longLongValue](v5, "longLongValue");

      __int128 v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = v7;
      if (v7)
      {
        uint64_t v9 = *(void *)(a1 + 32);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_1003615AC;
        void v10[3] = &unk_100645290;
        id v11 = v7;
        id v12 = v6;
        sub_1002CCDBC( v9,  @"UPDATE payment_transaction SET feature = ?, account_identifier = ? WHERE pid = ?",  v10);
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_1003615AC(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

void sub_100361964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100361984(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      unsigned int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v5) {
        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v5];
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_1003619F8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      unsigned int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData longLongValue](v5, "longLongValue");

      __int128 v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      id v9 = -[NSData integerValue](v8, "integerValue");

      id v10 = SQLiteCopyFoundationValueForStatementColumn(a2, 3);
      id v11 = -[NSData longLongValue](v10, "longLongValue");

      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource anyInDatabase:withPersistentID:]( &OBJC_CLASS___TransactionSource,  "anyInDatabase:withPersistentID:",  *(void *)(a1 + 32),  v11));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);

      id v14 = *(void **)(a1 + 40);
      id v15 = v13;
      id v16 = v14;
      if (v15 == v16)
      {

LABEL_9:
        uint64_t v19 = *(void *)(a1 + 32);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_100361C28;
        v23[3] = &unk_100645290;
        id v24 = *(id *)(a1 + 48);
        id v25 = v6;
        sub_1002CCDBC( v19,  @"UPDATE payment_transaction SET account_type = ?, account_identifier = ? WHERE pid = ?",  v23);
        id v20 = v24;
LABEL_14:

        goto LABEL_15;
      }

      __int128 v17 = v16;
      if (v15 && v16)
      {
        unsigned int v18 = [v15 isEqualToString:v16];

        if (v18) {
          goto LABEL_9;
        }
        if (!v7) {
          goto LABEL_15;
        }
      }

      else
      {

        if (!v7) {
          goto LABEL_15;
        }
      }

      if (!v9)
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue( +[Account anyInDatabase:withIdentifier:]( &OBJC_CLASS___Account,  "anyInDatabase:withIdentifier:",  *(void *)(*(void *)(a1 + 56) + 8LL),  v7));
        if (v20)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472LL;
          v22[2] = sub_100361C98;
          v22[3] = &unk_100645718;
          v22[4] = v6;
          sub_1002CCDBC(v21, @"UPDATE payment_transaction SET account_type = ? WHERE pid = ?", v22);
        }

        goto LABEL_14;
      }

uint64_t sub_100361C28(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

uint64_t sub_100361C98(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

void sub_100361FEC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction paymentTransactionsForTokenizedTransactionsWithRegionsInDatabase:]( &OBJC_CLASS___PaymentTransaction,  "paymentTransactionsForTokenizedTransactionsWithRegionsInDatabase:",  *(void *)(a1 + 32)));
  uint64_t Object = PKLogFacilityTypeGetObject(24LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    id v16 = [v2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Deassociating %lu transactions from regions",  buf,  0xCu);
  }

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        +[WorldRegion associateTransaction:withWorldRegion:inDatabase:]( &OBJC_CLASS___WorldRegion,  "associateTransaction:withWorldRegion:inDatabase:",  *(void *)(*((void *)&v10 + 1) + 8LL * (void)v9),  0LL,  *(void *)(a1 + 32),  (void)v10);
        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }
}

void sub_100362D54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100362D6C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dbPeerPaymentAccount]);
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);

  uint64_t v4 = PKCloudStoreApplePayContainerName;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*v2 cloudStoreZonesForContainerDatabaseWithName:PKCloudStoreApplePayContainerName scope:2]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*v2 cloudStoreZonesForContainerDatabaseWithName:v4 scope:3]);
  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  id v9 = v5;
  id v10 = [v9 countByEnumeratingWithState:&v70 objects:v82 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v71;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v71 != v11) {
          objc_enumerationMutation(v9);
        }
        __int128 v13 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)i);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 zoneName]);
        -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v13, v14);
      }

      id v10 = [v9 countByEnumeratingWithState:&v70 objects:v82 count:16];
    }

    while (v10);
  }

  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  id v15 = v6;
  id v16 = [v15 countByEnumeratingWithState:&v66 objects:v81 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v67;
    do
    {
      for (j = 0LL; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v67 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = *(void **)(*((void *)&v66 + 1) + 8LL * (void)j);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneName]);
        -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v19, v20);
      }

      id v16 = [v15 countByEnumeratingWithState:&v66 objects:v81 count:16];
    }

    while (v16);
  }

  __int128 v57 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v7, "objectForKey:", PKCloudStoreTransactionsZoneName));
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    uint64_t v55 = PKApplePayContainerCashZoneNamePrefix;
    while (1)
    {
      __int128 v64 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withPID:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withPID:",  *(void *)(a1 + 40),  v64));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionArchive anyInDatabase:forTransaction:]( &OBJC_CLASS___PaymentTransactionArchive,  "anyInDatabase:forTransaction:",  *(void *)(a1 + 40),  v21));
      if (!v22) {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionArchive insertTransactionArchiveForTransaction:inDatabase:]( &OBJC_CLASS___PaymentTransactionArchive,  "insertTransactionArchiveForTransaction:inDatabase:",  v21,  *(void *)(a1 + 40)));
      }
      id v62 = v22;
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v22 persistentID]));
      [v21 setValue:v23 forProperty:@"archive_pid"];

      id v24 = (void *)objc_claimAutoreleasedReturnValue([v21 valueForProperty:@"is_cloud_kit_archived"]);
      unsigned int v58 = [v24 BOOLValue];

      id v25 = (void *)objc_claimAutoreleasedReturnValue([v21 valueForProperty:@"account_type"]);
      id v26 = [v25 integerValue];

      __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v21 valueForProperty:@"account_identifier"]);
      uint64_t Object = PKLogFacilityTypeGetObject(24LL);
      __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v21 identifier]);
        __int128 v30 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([v21 serviceIdentifier]);
        uint64_t v31 = PKPaymentTransactionAccountTypeToString(v26);
        __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        *(_DWORD *)__int128 buf = 138413314;
        *(void *)&uint8_t buf[4] = v62;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v29;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v79 = v30;
        *(_WORD *)__int128 v80 = 2112;
        *(void *)&v80[2] = v32;
        *(_WORD *)&v80[10] = 2112;
        *(void *)&v80[12] = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Using transaction archive %@ for transaction identifier %@, service identifier %@, accountType %@, accountIdentifier %@",  buf,  0x34u);
      }

      oslog = v28;

      if (v26 != (id)2) {
        break;
      }
      if (!v57)
      {
        uint64_t v49 = v28;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v21 identifier]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v51;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v63;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Error: there is no cloud store zone for transaction %@ and card account %@",  buf,  0x16u);

          __int128 v37 = 0LL;
          uint64_t v49 = v28;
        }

        else
        {
          __int128 v37 = 0LL;
        }

LABEL_48:
    }

    if (v26 != (id)1)
    {
      __int128 v37 = 0LL;
      goto LABEL_48;
    }

    id v33 = v56;
    id v34 = v63;
    int v35 = v34;
    if (v33 == v34)
    {
      unsigned int v36 = 1;
    }

    else
    {
      unsigned int v36 = 0;
      if (v56 && v34) {
        unsigned int v36 = [v33 isEqualToString:v34];
      }
    }

    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SELECT peer_payment_account.cloud_store_zone_names from peer_payment_account WHERE identifier = %@;",
                      v35));
    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000LL;
    uint64_t v79 = sub_10035C810;
    *(void *)__int128 v80 = sub_10035C820;
    *(void *)&v80[8] = 0LL;
    uint64_t v39 = *(void *)(a1 + 40);
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472LL;
    v65[2] = sub_10036368C;
    v65[3] = &unk_1006456F8;
    v65[4] = buf;
    sub_1002CCDBC(v39, v38, v65);
    if (!v36)
    {
      __int128 v37 = 0LL;
      char v44 = 1;
LABEL_39:
      _Block_object_dispose(buf, 8);

      if ((v44 & 1) == 0) {
        goto LABEL_48;
      }
      goto LABEL_40;
    }

    __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v7,  "objectForKey:",  *(void *)(*(void *)&buf[8] + 40LL)));
    if (!v40)
    {
      uint64_t v41 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v55, v35));
      uint64_t v42 = *(void **)(*(void *)&buf[8] + 40LL);
      *(void *)(*(void *)&buf[8] + 40LL) = v41;

      __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v7,  "objectForKey:",  *(void *)(*(void *)&buf[8] + 40LL)));
      if (!v40)
      {
        id v43 = v57;
        if (!v57)
        {
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v21 identifier]);
            *(_DWORD *)__int128 v74 = 138543618;
            v75 = v52;
            __int16 v76 = 2112;
            BOOL v77 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Error: there is no cloud store zone for transaction %{public}@ and peer payment account identifier %@",  v74,  0x16u);

            char v44 = 0;
            __int128 v37 = 0LL;
            __int16 v40 = oslog;
          }

          else
          {
            __int16 v40 = oslog;
            char v44 = 0;
            __int128 v37 = 0LL;
          }

          goto LABEL_37;
        }

        __int16 v40 = v43;
      }
    }

    __int128 v37 = -[PKPaymentTransactionArchiveLocation initWithType:archived:cloudStoreZone:]( objc_alloc(&OBJC_CLASS___PKPaymentTransactionArchiveLocation),  "initWithType:archived:cloudStoreZone:",  0LL,  v58,  v40);
    char v44 = 1;
LABEL_37:

    goto LABEL_39;
  }

void sub_100363664( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_10036368C(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    while (1)
    {
      uint64_t v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v4) {
        break;
      }
    }

    id v9 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSData componentsSeparatedByString:](v4, "componentsSeparatedByString:", @","));
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 firstObject]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

void sub_1003639F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_100363A0C(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    do
    {
      uint64_t v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v5 = -[NSData longLongValue](v4, "longLongValue");

      uint64_t v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      -[NSData doubleValue](v6, "doubleValue");
      double v8 = v7;

      id v9 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      uint64_t v10 = (uint64_t)-[NSData integerValue](v9, "integerValue");

      uint64_t v11 = SQLiteCopyFoundationValueForStatementColumn(a2, 3);
      -[NSData doubleValue](v11, "doubleValue");
      double v13 = v12;

      id v14 = SQLiteCopyFoundationValueForStatementColumn(a2, 4);
      uint64_t v15 = (uint64_t)-[NSData integerValue](v14, "integerValue");

      if (v8 != 0.0)
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEndpointBackOff insertIfNotExistsForAccountType:endpointType:accountPID:inDatabase:]( &OBJC_CLASS___AccountEndpointBackOff,  "insertIfNotExistsForAccountType:endpointType:accountPID:inDatabase:",  1LL,  2LL,  v5,  *(void *)(a1 + 32)));
        if (v10 >= 1)
        {
          do
          {
            [v16 increaseBackoffLevel];
            --v10;
          }

          while (v10);
        }
      }

      if (v13 != 0.0)
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEndpointBackOff insertIfNotExistsForAccountType:endpointType:accountPID:inDatabase:]( &OBJC_CLASS___AccountEndpointBackOff,  "insertIfNotExistsForAccountType:endpointType:accountPID:inDatabase:",  1LL,  1LL,  v5,  *(void *)(a1 + 32)));
        if (v15 >= 1)
        {
          do
          {
            [v17 increaseBackoffLevel];
            --v15;
          }

          while (v15);
        }
      }
    }

    while ((sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2) & 1) != 0);
  }

  BOOL result = sub_1002CD364( *(void *)(a1 + 32),  @"peer_payment_account",  @"associated_account_next_possible_fetch_date");
  if (result)
  {
    BOOL result = sub_1002CD364( *(void *)(a1 + 32),  @"peer_payment_account",  @"account_next_possible_fetch_date");
    if (result)
    {
      BOOL result = sub_1002CD364( *(void *)(a1 + 32),  @"peer_payment_account",  @"associated_account_backoff_level");
      if (result)
      {
        BOOL result = sub_1002CD364(*(void *)(a1 + 32), @"peer_payment_account", @"account_backoff_level");
        if (result) {
          BOOL result = sub_1002CD0D0(*(void *)(a1 + 32), 14407LL);
        }
      }
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1003648F4(uint64_t a1, void *a2)
{
  id v28 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v28 uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v28 dataAccessor]);
  double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);

  uint64_t v8 = PKPassKeyExpirationDate;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyExpirationDate]);

  if (v9
    && (uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 PKDateForKey:v8]),
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
        [v10 timeIntervalSinceDate:v11],
        double v13 = v12,
        v11,
        v10,
        v13 < 0.0))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v28 secureElementPass]);
    uint64_t v15 = v14;
    if (v14)
    {
      id v16 = [v14 passActivationState];
      BOOL v17 = v16 == (id)4;
      if (v16 == (id)4) {
        uint64_t v18 = 3LL;
      }
      else {
        uint64_t v18 = 1LL;
      }
    }

    else
    {
      BOOL v17 = 1;
      uint64_t v18 = 2LL;
    }
  }

  else
  {
    BOOL v17 = 0;
    uint64_t v18 = 1LL;
  }

  uint64_t v19 = PKPassKeyVoided;
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyVoided]);

  if (v20)
  {
    unsigned int v21 = [v7 PKBoolForKey:v19];
    if (v21) {
      uint64_t v18 = 4LL;
    }
  }

  else
  {
    unsigned int v21 = 0;
  }

  uint64_t v22 = PKPassKeyRelevantDate;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyRelevantDate]);

  if (v23)
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v7 PKDateForKey:v22]);
    [v24 timeIntervalSinceDate:v25];
    double v27 = v26;

    if (v27 >= 86400.0)
    {
      BOOL v17 = 1;
      uint64_t v18 = 5LL;
    }
  }

  [v5 updateWithSortingState:v21 | v17 forSortingReason:v18];
}

void sub_100364C8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);
  unsigned int v5 = [v4 isCarKeyPass];

  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);

    uint64_t v37 = a1;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v35 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v8, v9));

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyPaymentApplications]);
    unsigned int v36 = v7;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:PKPassKeyAuxiliaryPaymentApplications]);
    double v12 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    id v13 = v10;
    id v14 = [v13 countByEnumeratingWithState:&v51 objects:v58 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v52;
      do
      {
        BOOL v17 = 0LL;
        do
        {
          if (*(void *)v52 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v51 + 1) + 8LL * (void)v17),  0LL);
          -[NSMutableSet addObject:](v12, "addObject:", v18);

          BOOL v17 = (char *)v17 + 1;
        }

        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v51 objects:v58 count:16];
      }

      while (v15);
    }

    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    id v19 = v11;
    id v20 = [v19 countByEnumeratingWithState:&v47 objects:v57 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v48;
      do
      {
        uint64_t v23 = 0LL;
        do
        {
          if (*(void *)v48 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v47 + 1) + 8LL * (void)v23),  1LL);
          -[NSMutableSet addObject:](v12, "addObject:", v24);

          uint64_t v23 = (char *)v23 + 1;
        }

        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v47 objects:v57 count:16];
      }

      while (v21);
    }

    id v38 = v3;

    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id v25 = v12;
    id v26 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v25,  "countByEnumeratingWithState:objects:count:",  &v43,  v56,  16LL);
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v44;
      do
      {
        __int128 v29 = 0LL;
        do
        {
          if (*(void *)v44 != v28) {
            objc_enumerationMutation(v25);
          }
          __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * (void)v29), "subcredentials", v35));
          __int128 v39 = 0u;
          __int128 v40 = 0u;
          __int128 v41 = 0u;
          __int128 v42 = 0u;
          id v31 = [v30 countByEnumeratingWithState:&v39 objects:v55 count:16];
          if (v31)
          {
            id v32 = v31;
            uint64_t v33 = *(void *)v40;
            do
            {
              id v34 = 0LL;
              do
              {
                if (*(void *)v40 != v33) {
                  objc_enumerationMutation(v30);
                }
                [*(id *)(*((void *)&v39 + 1) + 8 * (void)v34) setSupportedRadioTechnologies:1];
                id v34 = (char *)v34 + 1;
              }

              while (v32 != v34);
              id v32 = [v30 countByEnumeratingWithState:&v39 objects:v55 count:16];
            }

            while (v32);
          }

          __int128 v29 = (char *)v29 + 1;
        }

        while (v29 != v27);
        id v27 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v25,  "countByEnumeratingWithState:objects:count:",  &v43,  v56,  16LL);
      }

      while (v27);
    }

    +[PaymentApplication updatePaymentApplications:forPass:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:forPass:inDatabase:",  v25,  v35,  *(void *)(v37 + 32));
    id v3 = v38;
  }
}

void sub_100365A68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100365A80(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      unsigned int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -[NSData integerValue](v5, "integerValue");

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100366338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100366350(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _migrateTableFrom2To4DecimalDigitsPrecision:*(void *)(a1 + 40)];
  if (v2)
  {
    unsigned int v2 = sub_1002CCA50(*(void *)(a1 + 40), @"CREATE TABLE IF NOT EXISTS apricots (a INTEGER); ");
    if (v2)
    {
      unsigned int v2 = [*(id *)(a1 + 32) _migrateAmountDecimalDigitsToVersion:1 inDatabase:*(void *)(a1 + 40)];
      if (v2) {
        LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 40), 14462LL);
      }
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
}

void sub_100366F10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100366F28(uint64_t a1)
{
  if (![*(id *)(a1 + 32) containsObject:@"pineapples"]
    || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 48))))
  {
    LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 40), 15001LL);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
}

void sub_100367170(_Unwind_Exception *a1)
{
}

uint64_t sub_10036718C(uint64_t a1)
{
  if ((![*(id *)(a1 + 32) containsObject:@"pineapples"]
     || (unsigned int v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 48))) != 0)
    && (![*(id *)(a1 + 32) containsObject:@"oranges"]
     || (unsigned int v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 56))) != 0))
  {
    unsigned int v2 = [*(id *)(a1 + 64) _migrateAmountDecimalDigitsToVersion:3 inDatabase:*(void *)(a1 + 40)];
    if (v2) {
      LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 40), 15002LL);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
}

uint64_t sub_100367224(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _migrateTableFrom2To4DecimalDigitsPrecision:*(void *)(a1 + 40)];
  if (v2)
  {
    unsigned int v2 = [*(id *)(a1 + 32) _migrateAmountDecimalDigitsToVersion:3 inDatabase:*(void *)(a1 + 40)];
    if (v2) {
      LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 40), 15002LL);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
}

void sub_10036750C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);
  unsigned int v5 = [v4 hasCredentials];

  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    double v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v6, v7));

    id v25 = (void *)v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication paymentApplicationsInDatabase:forPass:]( &OBJC_CLASS___PaymentApplication,  "paymentApplicationsInDatabase:forPass:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v8));
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    id obj = v9;
    id v29 = [v9 countByEnumeratingWithState:&v35 objects:v40 count:16];
    if (v29)
    {
      uint64_t v27 = *(void *)v36;
      id v28 = v3;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v36 != v27) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = v10;
          uint64_t v11 = *(void **)(*((void *)&v35 + 1) + 8 * v10);
          uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 secureElementIdentifier]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 applicationIdentifier]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:",  v12,  v13,  v14,  v15));

          BOOL v17 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialsInDatabase:forPaymentApplicationPID:]( AppletSubcredential,  "appletSubcredentialsInDatabase:forPaymentApplicationPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v16 persistentID]));
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          __int128 v33 = 0u;
          __int128 v34 = 0u;
          id v18 = [v17 countByEnumeratingWithState:&v31 objects:v39 count:16];
          if (v18)
          {
            id v19 = v18;
            uint64_t v20 = *(void *)v32;
            do
            {
              id v21 = 0LL;
              do
              {
                if (*(void *)v32 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  v22,  *(void *)(*(void *)(a1 + 32) + 8LL)));
                id v24 =  +[AppletSubcredentialRangingSuspensionReasons insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:forPaymentApplication:withReasons:inDatabase:]( &OBJC_CLASS___AppletSubcredentialRangingSuspensionReasons,  "insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:forPaymentApplication:withReasons:inDatabase:",  v23,  v16,  0LL,  *(void *)(a1 + 40));

                id v21 = (char *)v21 + 1;
              }

              while (v19 != v21);
              id v19 = [v17 countByEnumeratingWithState:&v31 objects:v39 count:16];
            }

            while (v19);
          }

          uint64_t v10 = v30 + 1;
          id v3 = v28;
        }

        while ((id)(v30 + 1) != v29);
        id v29 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
      }

      while (v29);
    }
  }
}

void sub_100367FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100367FE4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _migrateNSNotFoundTo4DecimalDigits:*(void *)(a1 + 40)];
  if (v2)
  {
    unsigned int v2 = [*(id *)(a1 + 32) _migrateAmountDecimalDigitsToVersion:3 inDatabase:*(void *)(a1 + 40)];
    if (v2) {
      LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 40), 15008LL);
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
}

void sub_100368524(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 passType] == (id)1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(24LL);
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Regenerating payment fields for pass: %@",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);

    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v8, v9));

    if (v7 && v10)
    {
      uint64_t v11 = -[PKSecureElementPassFieldCollection initWithPassDictionary:]( objc_alloc(&OBJC_CLASS___PKSecureElementPassFieldCollection),  "initWithPassDictionary:",  v7);
      [v10 updateWithSecureElementPassFields:v11];
    }
  }
}

void sub_100368828(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (![v6 passType] && objc_msgSend(v6, "isExpiredBasedOnSigningDate"))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

    [v5 updateWithSortingState:1 forSortingReason:6];
  }
}

void sub_100368B60(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 paymentPass]);
    double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 shippingAddressSeed]);
    [v5 setValue:v7 forProperty:@"shipping_address_seed"];
  }
}

void sub_100368E08(_Unwind_Exception *a1)
{
}

void sub_100368E24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 manifestHash]);

    if (!v5)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
        int v14 = 138412290;
        id v15 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Adding manifest hash for pass %@",  (uint8_t *)&v14,  0xCu);
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v10, v11));

      id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 manifestHash]);
      [v12 setValue:v13 forProperty:@"manifest_hash"];
    }
  }
}

void sub_10036931C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_100369334(uint64_t a1)
{
  BOOL v2 = sub_1002CCA50( *(void *)(a1 + 32),  @"CREATE TABLE IF NOT EXISTS kohlrabi (pid INTEGER, a TEXT, b INTEGER, c TEXT, d TEXT, e TEXT, PRIMARY KEY (pid));");
  if (v2)
  {
    BOOL v2 = sub_1002CCA50( *(void *)(a1 + 32),  @"CREATE TABLE IF NOT EXISTS bacon (pid INTEGER, a TEXT, PRIMARY KEY (pid));");
    if (v2)
    {
      BOOL v2 = sub_1002CCA50( *(void *)(a1 + 32),  @"CREATE TABLE IF NOT EXISTS egg (pid INTEGER, a INTEGER, b TEXT, PRIMARY KEY (pid));");
      if (v2)
      {
        BOOL v2 = sub_1002CD314(*(void *)(a1 + 32), (uint64_t)@"cherimoya", (uint64_t)@"i TEXT");
        if (v2)
        {
          BOOL v2 = sub_1002CD314(*(void *)(a1 + 32), (uint64_t)@"cherimoya", (uint64_t)@"j TEXT");
          if (v2) {
            LOBYTE(v2) = sub_1002CD314(*(void *)(a1 + 32), (uint64_t)@"loquat", (uint64_t)@"l TEXT");
          }
        }
      }
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v2;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    return 0LL;
  }
  unsigned int v3 = objc_msgSend( *(id *)(a1 + 40),  "_tranansaction_migrateLegacyCarKeySharesInDatabase:",  *(void *)(a1 + 32));
  if (v3) {
    LOBYTE(v3) = sub_1002CD0D0(*(void *)(a1 + 32), 15037LL);
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v3;
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) != 0;
}

void sub_10036952C(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 paymentPass]);
    double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 shippingAddressSeed]);
    [v5 setValue:v7 forProperty:@"shipping_address_seed"];
  }
}

void sub_10036B29C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueID]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

  id v6 = [v5 persistentID];
  double v7 = (void *)objc_claimAutoreleasedReturnValue( +[PassShare passSharesForPassPID:inDatabase:]( &OBJC_CLASS___PassShare,  "passSharesForPassPID:inDatabase:",  v6,  *(void *)(a1 + 32)));
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id obj = v7;
  id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(obj);
        }
        int v12 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 pass]);
        int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 secureElementPass]);
        unsigned int v15 = [v14 isCarKeyPass];

        if (v15) {
          uint64_t v16 = 1LL;
        }
        else {
          uint64_t v16 = 2LL;
        }
        [v12 setManageability:v16];
        +[PassShare addPassShare:forPassPID:inDatabase:]( &OBJC_CLASS___PassShare,  "addPassShare:forPassPID:inDatabase:",  v12,  v6,  *(void *)(a1 + 32));
      }

      id v9 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v9);
  }
}

void sub_10036B5F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10036B60C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend( *(id *)(a1 + 32),  "_tranansaction_migrateLegacyCarKeySharesInDatabase:",  *(void *)(*(void *)(a1 + 32) + 8));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10036BBE4(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v10 secureElementPass]);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v4, v5));

    id v7 = [v6 persistentID];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 auxiliaryRegistrationRequirements]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 allRequirements]);
    +[PassAuxiliaryRegistrationRequirement insertOrUpdateAuxiliaryRegistrationRequirements:passPID:inDatabase:]( &OBJC_CLASS___PassAuxiliaryRegistrationRequirement,  "insertOrUpdateAuxiliaryRegistrationRequirements:passPID:inDatabase:",  v9,  v7,  *(void *)(a1 + 32));
  }
}

void sub_10036CDB4(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 supportsIssuerBinding])
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v3, v4));

    [v5 updateWithSupportsIssuerBinding:1];
  }
}

uint64_t sub_10036D7F8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      unsigned int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData longLongValue](v5, "longLongValue");

      +[PayLaterInstallment updatePayoffDateForInstallmentPID:inDatabase:]( &OBJC_CLASS___PayLaterInstallment,  "updatePayoffDateForInstallmentPID:inDatabase:",  v6,  *(void *)(a1 + 32));
      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_10036E46C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10036E484(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___AppleBalanceAccountDetails,  "anyInDatabase:predicate:",  *(void *)(a1 + 32),  0LL));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v2 persistentID]));
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"a",  v4));

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___AppleBalanceAccountSummary,  "anyInDatabase:predicate:",  *(void *)(a1 + 32),  v5));
    if (!v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"d"]);
      if (v7)
      {
        v14[0] = @"a";
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 persistentID]));
        v14[1] = @"b";
        v15[0] = v8;
        v15[1] = v7;
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2LL));

        id v10 = -[SQLiteEntity initWithPropertyValues:inDatabase:]( objc_alloc(&OBJC_CLASS___AppleBalanceAccountSummary),  "initWithPropertyValues:inDatabase:",  v9,  *(void *)(a1 + 32));
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v10 != 0LL;
      }

      else
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
      }
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    BOOL v11 = sub_1002CD364(*(void *)(a1 + 32), @"broccoli", @"d");
    if (v11) {
      LOBYTE(v11) = sub_1002CD0D0(*(void *)(a1 + 32), 16101LL);
    }
  }

  else
  {
    LOBYTE(v11) = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v11;
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return v12;
}

void sub_10036ECBC(_Unwind_Exception *a1)
{
}

uint64_t sub_10036ECD4(uint64_t a1)
{
  if ((![*(id *)(a1 + 32) containsObject:@"ice_cream_banana"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 48))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_amount_modifiers"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 56))))
    && (![*(id *)(a1 + 32) containsObject:@"starfruits"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 64))))
    && (![*(id *)(a1 + 32) containsObject:@"strawberries"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 72))))
    && (![*(id *)(a1 + 32) containsObject:@"peer_payment_account"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 80))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_application"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 88))))
    && (![*(id *)(a1 + 32) containsObject:@"persimmon"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 96))))
    && (![*(id *)(a1 + 32) containsObject:@"mulberry"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 104))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_fee"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 112))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_balance"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 120))))
    && (![*(id *)(a1 + 32) containsObject:@"transit_applet_state_balance"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 128))))
    && (![*(id *)(a1 + 32) containsObject:@"avocados"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 136))))
    && (![*(id *)(a1 + 32) containsObject:@"apples"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 144))))
    && (![*(id *)(a1 + 32) containsObject:@"lucuma"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 152))))
    && (![*(id *)(a1 + 32) containsObject:@"watermelons"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 160))))
    && (![*(id *)(a1 + 32) containsObject:@"fig"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 168))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_tag"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 176))))
    && (![*(id *)(a1 + 32) containsObject:@"jostaberry"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 184))))
    && (![*(id *)(a1 + 32) containsObject:@"tomatoes"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 192))))
    && (![*(id *)(a1 + 32) containsObject:@"oranges"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 200))))
    && (![*(id *)(a1 + 32) containsObject:@"bananas"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 208))))
    && (![*(id *)(a1 + 32) containsObject:@"kiwi"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 216))))
    && (![*(id *)(a1 + 32) containsObject:@"peer_payment_account_feature_descriptor"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 224))))
    && (![*(id *)(a1 + 32) containsObject:@"breadfruit"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 232))))
    && (![*(id *)(a1 + 32) containsObject:@"coconuts"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 240))))
    && (![*(id *)(a1 + 32) containsObject:@"raisin"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 248))))
    && (![*(id *)(a1 + 32) containsObject:@"lychees"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 256))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_amount"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 264))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 272))))
    && (![*(id *)(a1 + 32) containsObject:@"transit_applet_state"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 280))))
    && (![*(id *)(a1 + 32) containsObject:@"prickly_pear"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 288))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_awards"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 296))))
    && (![*(id *)(a1 + 32) containsObject:@"pineapples"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 304))))
    && (![*(id *)(a1 + 32) containsObject:@"gojiberry"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 312))))
    && (![*(id *)(a1 + 32) containsObject:@"rambutans"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 320))))
    && (![*(id *)(a1 + 32) containsObject:@"currant"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 328))))
    && (![*(id *)(a1 + 32) containsObject:@"account_historical_balance"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 336))))
    && (![*(id *)(a1 + 32) containsObject:@"lemon"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 344))))
    && (![*(id *)(a1 + 32) containsObject:@"tomatillo"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 352))))
    && (![*(id *)(a1 + 32) containsObject:@"carrot"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 360))))
    && (![*(id *)(a1 + 32) containsObject:@"celery"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 368))))
    && (![*(id *)(a1 + 32) containsObject:@"apple_balance_dtu_promotion_configuration"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 376))))
    && (![*(id *)(a1 + 32) containsObject:@"credit_account_merge_summary"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 384))))
    && (![*(id *)(a1 + 32) containsObject:@"credit_account_merge_summary"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 384))))
    && (![*(id *)(a1 + 32) containsObject:@"credit_account_merge_summary_account_details"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 392))))
    && (![*(id *)(a1 + 32) containsObject:@"feijoa"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 400))))
    && (![*(id *)(a1 + 32) containsObject:@"feijoa"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 400))))
    && (![*(id *)(a1 + 32) containsObject:@"quinoa"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 408))))
    && (![*(id *)(a1 + 32) containsObject:@"okra"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 416))))
    && (![*(id *)(a1 + 32) containsObject:@"oregano"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 424))))
    && (![*(id *)(a1 + 32) containsObject:@"wasabi"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 432))))
    && (![*(id *)(a1 + 32) containsObject:@"guanabana"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 440))))
    && (![*(id *)(a1 + 32) containsObject:@"marionberry"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 448))))
    && (![*(id *)(a1 + 32) containsObject:@"pineberry"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 456))))
    && (![*(id *)(a1 + 32) containsObject:@"peer_payment_requests"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 464))))
    && (![*(id *)(a1 + 32) containsObject:@"bokchoy"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 472))))
    && (![*(id *)(a1 + 32) containsObject:@"rhubarb"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 480))))
    && (![*(id *)(a1 + 32) containsObject:@"eggplant"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 488))))
    && (![*(id *)(a1 + 32) containsObject:@"cranberry"]
     || (BOOL v2 = sub_1002CCA50(*(void *)(a1 + 40), *(void **)(a1 + 496)))))
  {
    LOBYTE(v2) = sub_1002CD0D0(*(void *)(a1 + 40), 16104LL);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 504) + 8LL) + 24LL) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 504) + 8LL) + 24LL);
}

void sub_10036F784(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 relevantDate]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 relevantDates]);
  id v6 = v5;
  if (v4 && ![v5 count])
  {
    id v7 = -[PKPassRelevantDate initWithRelevantDate:]( objc_alloc(&OBJC_CLASS___PKPassRelevantDate),  "initWithRelevantDate:",  v4);
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v8, v9));

    uint64_t v12 = v7;
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    +[PassRelevancyDates insertPassRelevancyDates:forPassPID:inDatabase:]( PassRelevancyDates,  "insertPassRelevancyDates:forPassPID:inDatabase:",  v11,  [v10 persistentID],  *(void *)(a1 + 32));
  }
}

void sub_10037110C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dbPeerPaymentAccount]);
  +[PeerPaymentAccountFeatureDescriptor updateFeatureDescriptorsSupportedForPeerPaymentAccount:inDatabase:]( &OBJC_CLASS___PeerPaymentAccountFeatureDescriptor,  "updateFeatureDescriptorsSupportedForPeerPaymentAccount:inDatabase:",  v2,  *(void *)(a1 + 40));
}

void sub_1003716D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v5, v6));
  if (v4 && v7)
  {
    +[PassRelevancyDates deleteEntitiesForPassPID:inDatabase:]( PassRelevancyDates,  "deleteEntitiesForPassPID:inDatabase:",  [v7 persistentID],  *(void *)(a1 + 32));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 dictionary]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:PKPassKeyRelevantDates]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v8 PKDateForKey:PKPassKeyRelevantDate]);
    BOOL v11 = (void *)v10;
    if (v9)
    {
      uint64_t v12 = (PKPassRelevantDate *)objc_msgSend(v9, "pk_createArrayBySafelyApplyingBlock:", &stru_100658458);
      +[PassRelevancyDates insertPassRelevancyDates:forPassPID:inDatabase:]( PassRelevancyDates,  "insertPassRelevancyDates:forPassPID:inDatabase:",  v12,  [v7 persistentID],  *(void *)(a1 + 32));
    }

    else
    {
      if (!v10) {
        goto LABEL_6;
      }
      id v13 = -[PKPassRelevantDate initWithRelevantDate:]( objc_alloc(&OBJC_CLASS___PKPassRelevantDate),  "initWithRelevantDate:",  v10);
      uint64_t v12 = v13;
      if (v13)
      {
        unsigned int v15 = v13;
        int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
        +[PassRelevancyDates insertPassRelevancyDates:forPassPID:inDatabase:]( PassRelevancyDates,  "insertPassRelevancyDates:forPassPID:inDatabase:",  v14,  [v7 persistentID],  *(void *)(a1 + 32));
      }
    }

LABEL_6:
  }
}

PKPassRelevantDate *__cdecl sub_1003718B4(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = -[PKPassRelevantDate initWithDictionary:]( objc_alloc(&OBJC_CLASS___PKPassRelevantDate),  "initWithDictionary:",  v2);

  return v3;
}

void sub_100371A34(uint64_t a1, void *a2)
{
  id v7 = a2;
  if ([v7 passType] == (id)1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 secureElementPass]);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v4, v5));

    objc_msgSend( v6,  "updateWithContactlessActivationGroupingType:",  objc_msgSend(v3, "contactlessActivationGroupingType"));
  }
}

void sub_100371DE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 updateDevicePaymentApplicationsWithSecureElementIdentifiers:*(void *)(a1 + 32)];
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v6, v7));

    id v9 = [v8 persistentID];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 auxiliaryRegistrationRequirements]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 allRequirements]);

    uint64_t v12 = (void *)v11;
    +[PassAuxiliaryRegistrationRequirement insertOrUpdateAuxiliaryRegistrationRequirements:passPID:inDatabase:]( &OBJC_CLASS___PassAuxiliaryRegistrationRequirement,  "insertOrUpdateAuxiliaryRegistrationRequirements:passPID:inDatabase:",  v11,  v9,  *(void *)(a1 + 40));
    id v13 = objc_alloc_init(&OBJC_CLASS___PDRemoteAssetDecryptionManager);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v5 dataAccessor]);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 remoteAssetManagerForSEIDs:*(void *)(a1 + 32)]);

    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v36 = v15;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 deviceSpecificItems]);
    id v17 = [v16 countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v17)
    {
      id v18 = v17;
      __int128 v35 = v8;
      uint64_t v37 = a1;
      int v19 = 0;
      uint64_t v20 = *(void *)v43;
      do
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v43 != v20) {
            objc_enumerationMutation(v16);
          }
          uint64_t v22 = *(void *)(*((void *)&v42 + 1) + 8LL * (void)i);
          if (-[PDRemoteAssetDecryptionManager assetRequiresDecryption:](v13, "assetRequiresDecryption:", v22)) {
            v19 |= -[PDRemoteAssetDecryptionManager decryptAsset:forPass:](v13, "decryptAsset:forPass:", v22, v5);
          }
        }

        id v18 = [v16 countByEnumeratingWithState:&v42 objects:v47 count:16];
      }

      while (v18);

      uint64_t v8 = v35;
      if ((v19 & 1) == 0) {
        goto LABEL_23;
      }
      __int128 v33 = v12;
      id v34 = v3;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
      uint64_t v23 = (const __CFURL *)objc_claimAutoreleasedReturnValue([v16 fileURL]);
      CFBundleRef v24 = CFBundleCreate(kCFAllocatorDefault, v23);

      if (v24)
      {
        _CFBundleFlushBundleCaches(v24);
        CFRelease(v24);
      }

      id v25 = (void *)objc_claimAutoreleasedReturnValue([v5 subcredentialConfigurationForSecureElementIdentifiers:*(void *)(v37 + 32)]);
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      id v26 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v39;
        do
        {
          for (j = 0LL; j != v27; j = (char *)j + 1)
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = *(void *)(*((void *)&v38 + 1) + 8LL * (void)j);
            __int128 v31 = *(void **)(v37 + 48);
            __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:v30]);
            [v31 setObject:v32 forKey:v30];
          }

          id v27 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
        }

        while (v27);
      }

      id v3 = v34;
      uint64_t v8 = v35;
      uint64_t v12 = v33;
    }

LABEL_23:
  }
}

void sub_100372284(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 storedPasses]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pk_objectsPassingTest:", &stru_100658498));

  id v4 = objc_msgSend(v6, "pk_createSetByApplyingBlock:", &stru_1006584D8);
  if ([v4 count])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v5 markPassWithUniqueIdentifiersForDeletion:v4];
  }
}

BOOL sub_100372328(id a1, PKPass *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if ((id)-[PKPass passType](v4, "passType") == (id)1)
  {
    uint64_t v5 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(-[PKPass organizationName](v4, "organizationName"));
    id v6 = v5;
    if (v5 == @"Apple Pay Later")
    {
      unsigned __int8 v7 = 1;
    }

    else if (v5)
    {
      unsigned __int8 v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", @"Apple Pay Later");
    }

    else
    {
      unsigned __int8 v7 = 0;
    }
  }

  else
  {
    unsigned __int8 v7 = 0;
  }

  return v7;
}

NSString *__cdecl sub_1003723C0(id a1, PKSecureElementPass *a2)
{
  return (NSString *)-[PKSecureElementPass uniqueID](a2, "uniqueID");
}

void sub_100372944(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v36 = (id)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v4, v5));
  if (v36 && v6)
  {
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v36 dictionary]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeySellURL]);
    if (v8)
    {
      [v6 setValue:v8 forProperty:@"sell_url"];
    }

    else
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v9 forProperty:@"sell_url"];
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyTransferURL]);
    if (v10)
    {
      [v6 setValue:v10 forProperty:@"transfer_url"];
    }

    else
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v11 forProperty:@"transfer_url"];
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyBagPolicyURL]);
    if (v12)
    {
      [v6 setValue:v12 forProperty:@"bag_policy_url"];
    }

    else
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v13 forProperty:@"bag_policy_url"];
    }

    int v14 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyOrderFoodURL]);
    if (v14)
    {
      [v6 setValue:v14 forProperty:@"order_food_url"];
    }

    else
    {
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v15 forProperty:@"order_food_url"];
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyTransitInformationURL]);
    if (v16)
    {
      [v6 setValue:v16 forProperty:@"transit_information_url"];
    }

    else
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v17 forProperty:@"transit_information_url"];
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyParkingInformationURL]);
    if (v18)
    {
      [v6 setValue:v18 forProperty:@"parking_information_url"];
    }

    else
    {
      int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v19 forProperty:@"parking_information_url"];
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyDirectionsInformationURL]);
    if (v20)
    {
      [v6 setValue:v20 forProperty:@"directions_information_url"];
    }

    else
    {
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v21 forProperty:@"directions_information_url"];
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyMerchandiseURL]);
    if (v22)
    {
      [v6 setValue:v22 forProperty:@"merchandise_url"];
    }

    else
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v23 forProperty:@"merchandise_url"];
    }

    CFBundleRef v24 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyAccessibilityURL]);
    if (v24)
    {
      [v6 setValue:v24 forProperty:@"accessibility_url"];
    }

    else
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v25 forProperty:@"accessibility_url"];
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyPurchaseParkingURL]);
    if (v26)
    {
      [v6 setValue:v26 forProperty:@"purchase_parking_url"];
    }

    else
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v27 forProperty:@"purchase_parking_url"];
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyAddOnURL]);
    if (v28)
    {
      [v6 setValue:v28 forProperty:@"add_on_url"];
    }

    else
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v29 forProperty:@"add_on_url"];
    }

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyContactVenuePhoneNumber]);
    if (v30)
    {
      [v6 setValue:v30 forProperty:@"contact_venue_phone_number"];
    }

    else
    {
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v31 forProperty:@"contact_venue_phone_number"];
    }

    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyContactVenueEmail]);
    if (v32)
    {
      [v6 setValue:v32 forProperty:@"contact_venue_email"];
    }

    else
    {
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v33 forProperty:@"contact_venue_email"];
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:PKPassKeyContactVenueWebsite]);
    if (v34)
    {
      [v6 setValue:v34 forProperty:@"contact_venue_website"];
    }

    else
    {
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v6 setValue:v35 forProperty:@"contact_venue_website"];
    }
  }
}

void sub_100373470(_Unwind_Exception *a1)
{
}

void sub_10037348C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 passType] == (id)1 && !*((_BYTE *)WeakRetained + 33))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dictionary]);

    id v7 = objc_msgSend( v5,  "PKArrayContaining:forKey:",  objc_opt_class(NSDictionary, v6),  PKPassKeyPaymentApplications);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)v8;
    if (v8) {
      uint64_t v10 = (void *)v8;
    }
    else {
      uint64_t v10 = &__NSArray0__struct;
    }
    id v11 = v10;

    __int128 v32 = v5;
    id v13 = objc_msgSend( v5,  "PKArrayContaining:forKey:",  objc_opt_class(NSDictionary, v12),  PKPassKeyAuxiliaryPaymentApplications);
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
    unsigned int v15 = (void *)v14;
    if (v14) {
      uint64_t v16 = (void *)v14;
    }
    else {
      uint64_t v16 = &__NSArray0__struct;
    }
    id v17 = v16;

    uint64_t v30 = v17;
    __int128 v31 = v11;
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 arrayByAddingObjectsFromArray:v17]);
    id v33 = v3;
    int v19 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id obj = v18;
    id v20 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v37;
      do
      {
        for (i = 0LL; i != v21; i = (char *)i + 1)
        {
          if (*(void *)v37 != v22) {
            objc_enumerationMutation(obj);
          }
          CFBundleRef v24 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v36 + 1) + 8LL * (void)i),  0LL);
          id v25 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentApplication automaticSelectionCriteria](v24, "automaticSelectionCriteria"));
          if ([v25 count])
          {
            uint64_t v26 = WeakRetained[1];
            id v27 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentApplication secureElementIdentifier](v24, "secureElementIdentifier"));
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentApplication applicationIdentifier](v24, "applicationIdentifier"));
            id v29 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:",  v26,  v19,  v27,  v28));

            [v29 updateAutomaticSelectionCriteria:v25];
          }
        }

        id v21 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      }

      while (v21);
    }

    id v3 = v33;
  }
}

void sub_1003737F8(_Unwind_Exception *a1)
{
}

void sub_100373814(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 passType] == (id)1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dictionary]);

    uint64_t v7 = WeakRetained[1];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v7, v8));

    if (v6 && v9)
    {
      id v25 = v9;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:PKPassKeyPaymentApplications]);
      CFBundleRef v24 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:PKPassKeyAuxiliaryPaymentApplications]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      id v12 = v10;
      id v13 = [v12 countByEnumeratingWithState:&v31 objects:v36 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v32;
        do
        {
          uint64_t v16 = 0LL;
          do
          {
            if (*(void *)v32 != v15) {
              objc_enumerationMutation(v12);
            }
            id v17 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v31 + 1) + 8LL * (void)v16),  0LL);
            [v11 addObject:v17];

            uint64_t v16 = (char *)v16 + 1;
          }

          while (v14 != v16);
          id v14 = [v12 countByEnumeratingWithState:&v31 objects:v36 count:16];
        }

        while (v14);
      }

      uint64_t v26 = v6;

      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      id v18 = v24;
      id v19 = [v18 countByEnumeratingWithState:&v27 objects:v35 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v28;
        do
        {
          uint64_t v22 = 0LL;
          do
          {
            if (*(void *)v28 != v21) {
              objc_enumerationMutation(v18);
            }
            uint64_t v23 = -[PKPaymentApplication initWithPaymentApplicationDictionary:auxiliaryApplication:]( objc_alloc(&OBJC_CLASS___PKPaymentApplication),  "initWithPaymentApplicationDictionary:auxiliaryApplication:",  *(void *)(*((void *)&v27 + 1) + 8LL * (void)v22),  1LL);
            [v11 addObject:v23];

            uint64_t v22 = (char *)v22 + 1;
          }

          while (v20 != v22);
          id v20 = [v18 countByEnumeratingWithState:&v27 objects:v35 count:16];
        }

        while (v20);
      }

      id v9 = v25;
      +[PaymentApplication updatePaymentApplications:forPass:inDatabase:]( &OBJC_CLASS___PaymentApplication,  "updatePaymentApplications:forPass:inDatabase:",  v11,  v25,  WeakRetained[1]);

      uint64_t v6 = v26;
    }
  }
}

void sub_100373B98(_Unwind_Exception *a1)
{
}

void sub_100373BB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 passType] == (id)1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 dataAccessor]);
    uint64_t v6 = objc_alloc(&OBJC_CLASS___PDPassDaemonData);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 fileURL]);
    uint64_t v8 = sub_100243FB8((id *)&v6->super.isa, v7);

    uint64_t v9 = WeakRetained[1];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v9, v10));

    if (v11 && v8)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
        int v15 = 138412546;
        uint64_t v16 = v14;
        __int16 v17 = 2112;
        id v18 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Database: Regenerating daemon data for pass %@. \n\n %@",  (uint8_t *)&v15,  0x16u);
      }

      [v11 updateWithDaemonPassData:v8];
    }
  }
}

void sub_100373DF8(_Unwind_Exception *a1)
{
}

void sub_100373E14(uint64_t a1, void *a2)
{
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v11 dataAccessor]);
    uint64_t v5 = WeakRetained[1];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[Pass anyInDatabase:withUniqueID:](&OBJC_CLASS___Pass, "anyInDatabase:withUniqueID:", v5, v6));

    if (v4 && v7)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 displayProfile]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 displayProfileOfType:0]);
      id v10 = [v8 passStyle];
      if (v10 != [v9 passStyle]) {
        [v7 updateWithPassDisplayProfile:v9];
      }
    }
  }
}

void sub_10037452C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterPaymentFundingSource),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterPaymentFundingSource fundingSource](v5, "fundingSource"));
  [v3 safelyAddObject:v4];
}

void sub_100374670(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v7),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v6,  a3);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:@"b"]);
  id v14 = (id)objc_claimAutoreleasedReturnValue( +[PayLaterFundingSourceDetails anyInDatabase:forPID:]( &OBJC_CLASS___PayLaterFundingSourceDetails,  "anyInDatabase:forPID:",  v8,  v9));

  id v10 = *(void **)(a1 + 48);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v14 fundingSourceDetails]);
  [v10 setDetails:v11];

  id v12 = *(void **)(a1 + 48);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refundAmount]);
  [v12 setRefundAmount:v13];
}

void sub_1003749FC(id a1, PKPayLaterPaymentFundingSource *a2, id a3)
{
}

void sub_100374A04(id a1, PKPayLaterPaymentFundingSource *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterPaymentFundingSource setType:](v4, "setType:", [a3 integerValue]);
}

uint64_t sub_100374B08(uint64_t a1)
{
  return 1LL;
}

uint64_t sub_100374BE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) group]);
  [*(id *)(a1 + 40) _removePass:*(void *)(a1 + 32) fromGroup:v2];
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withGroup:]( &OBJC_CLASS___Pass,  "anyInDatabase:withGroup:",  *(void *)(*(void *)(a1 + 40) + 8LL),  v2));

  if (!v3) {
    [*(id *)(a1 + 40) _removeGroup:v2];
  }

  return 1LL;
}

uint64_t sub_100374D54(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] groupingProfile]);
  unsigned int v3 = [a1[5] isEqual:v2];
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] group]);
    [a1[6] _removePass:a1[4] fromGroup:v4];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withGroup:]( &OBJC_CLASS___Pass,  "anyInDatabase:withGroup:",  *((void *)a1[6] + 1),  v4));

    if (!v5)
    {
      id v6 = +[PDAutomaticGroup createAutomaticGroupForPass:withGroupingProfile:]( &OBJC_CLASS___PDAutomaticGroup,  "createAutomaticGroupForPass:withGroupingProfile:",  a1[4],  v2);
      [v4 updateWithAutomaticGroup:v6];
    }

    [a1[6] _insertPass:a1[4] groupingProfile:v2];
  }

  return v3 ^ 1;
}

uint64_t sub_100374EE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[Pass predicateForExpired](&OBJC_CLASS___Pass, "predicateForExpired"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate negatedPredicate:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "negatedPredicate:",  v3));
  v15[0] = @"pass_group.group_order";
  v15[1] = @"ingested_date";
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v15, 2LL));
  v14[0] = @"ASC";
  v14[1] = @"DESC";
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:orderingProperties:orderingDirections:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:orderingProperties:orderingDirections:",  v2,  v4,  v5,  v6));

  v13[0] = @"unique_id";
  v13[1] = @"pass_group.group_order";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1003750C4;
  v11[3] = &unk_100639E18;
  uint64_t v9 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v9;
  [v7 enumeratePersistentIDsAndProperties:v8 usingBlock:v11];

  return 1LL;
}

void sub_1003750C4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "passWithUniqueIdentifier:"));
  if (v5) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

uint64_t sub_1003751C4(uint64_t a1)
{
  uint64_t v36 = a1;
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v63[0] = @"pass_group.group_order";
  v63[1] = @"ingested_date";
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v63, 2LL));
  v62[0] = @"ASC";
  v62[1] = @"DESC";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v62, 2LL));
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:orderingProperties:orderingDirections:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:orderingProperties:orderingDirections:",  v2,  0LL,  v3,  v4));

  v61[0] = @"group_pid";
  v61[1] = @"unique_id";
  v61[2] = @"pass_group.group_order";
  v61[3] = @"pass_flavor";
  v61[4] = @"grouping_id";
  v61[5] = @"template";
  v61[6] = @"pass_type.identifier";
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v61, 7LL));
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v56[0] = 0LL;
  v56[1] = v56;
  v56[2] = 0x3032000000LL;
  v56[3] = sub_1003757B8;
  v56[4] = sub_1003757C8;
  id v57 = 0LL;
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_1003757D0;
  v51[3] = &unk_100658588;
  uint64_t v55 = v56;
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v52 = v6;
  id v53 = *(id *)(v36 + 40);
  uint64_t v7 = v5;
  __int128 v54 = v7;
  [v31 enumeratePersistentIDsAndProperties:v30 usingBlock:v51];
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id obj = v7;
  id v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v47,  v60,  16LL);
  if (v8)
  {
    uint64_t v9 = *(void *)v48;
    uint64_t v32 = *(void *)v48;
    __int128 v33 = v6;
    do
    {
      id v10 = 0LL;
      id v34 = v8;
      do
      {
        if (*(void *)v48 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v47 + 1) + 8LL * (void)v10);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", v11, v30));
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueIDs]);
        if ((unint64_t)[v13 count] >= 2)
        {
          uint64_t v14 = *(void *)(*(void *)(v36 + 32) + 8LL);
          int v15 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"pid",  v11));
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___Group,  "anyInDatabase:predicate:",  v14,  v15));

          if (v16)
          {
            __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v16 sortedPassUniqueIdentifiers]);
            if (v38)
            {
              __int16 v17 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", v13);
              id v18 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v13 count]);
              __int128 v35 = v16;
              __int128 v45 = 0u;
              __int128 v46 = 0u;
              __int128 v43 = 0u;
              __int128 v44 = 0u;
              id v19 = v38;
              id v20 = [v19 countByEnumeratingWithState:&v43 objects:v59 count:16];
              if (v20)
              {
                uint64_t v21 = *(void *)v44;
                do
                {
                  for (i = 0LL; i != v20; i = (char *)i + 1)
                  {
                    if (*(void *)v44 != v21) {
                      objc_enumerationMutation(v19);
                    }
                    uint64_t v23 = *(void *)(*((void *)&v43 + 1) + 8LL * (void)i);
                    if ((-[NSMutableSet containsObject:](v17, "containsObject:", v23) & 1) != 0)
                    {
                      -[NSMutableArray addObject:](v18, "addObject:", v23);
                      -[NSMutableSet removeObject:](v17, "removeObject:", v23);
                    }
                  }

                  id v20 = [v19 countByEnumeratingWithState:&v43 objects:v59 count:16];
                }

                while (v20);
              }

              __int128 v41 = 0u;
              __int128 v42 = 0u;
              __int128 v39 = 0u;
              __int128 v40 = 0u;
              id v24 = v13;
              id v25 = [v24 countByEnumeratingWithState:&v39 objects:v58 count:16];
              if (v25)
              {
                uint64_t v26 = *(void *)v40;
                do
                {
                  for (j = 0LL; j != v25; j = (char *)j + 1)
                  {
                    if (*(void *)v40 != v26) {
                      objc_enumerationMutation(v24);
                    }
                    uint64_t v28 = *(void *)(*((void *)&v39 + 1) + 8LL * (void)j);
                    if ((-[NSMutableSet containsObject:](v17, "containsObject:", v28) & 1) != 0)
                    {
                      -[NSMutableArray addObject:](v18, "addObject:", v28);
                      -[NSMutableSet removeObject:](v17, "removeObject:", v28);
                    }
                  }

                  id v25 = [v24 countByEnumeratingWithState:&v39 objects:v58 count:16];
                }

                while (v25);
              }

              id v6 = v33;
              id v8 = v34;
              uint64_t v9 = v32;
              uint64_t v16 = v35;
              [v12 setUniqueIDs:v18];
            }
          }
        }

        id v10 = (char *)v10 + 1;
      }

      while (v10 != v8);
      id v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v47,  v60,  16LL);
    }

    while (v8);
  }

  _Block_object_dispose(v56, 8);
  return 1LL;
}

void sub_10037575C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t sub_1003757B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003757C8(uint64_t a1)
{
}

void sub_1003757D0(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v22 = *a4;
  id v6 = a4[1];
  id v7 = [a4[3] unsignedIntegerValue];
  id v8 = a4[4];
  id v9 = [a4[5] unsignedIntegerValue];
  id v10 = a4[6];
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (!v11
    || (id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 groupID]),
        unsigned __int8 v13 = [v12 isEqualToNumber:v22],
        v12,
        (v13 & 1) == 0))
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v22]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
    {
      id v17 = objc_alloc_init(&OBJC_CLASS___PKCatalogGroup);
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = v17;

      objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40),  "setIsUbiquitous:",  PKPassSupportsSyncing(v7, v9, v10));
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setGroupID:v22];
      [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKeyedSubscript:v22];
      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groups]);
      [v20 addObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    }
  }

  if (v7 == (id)1 && v8) {
    [*(id *)(a1 + 48) addObject:v22];
  }
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) uniqueIDs]);
  [v21 addObject:v6];
}

BOOL sub_100375A78(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"group_pid"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:",  v2,  v3));

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v21 = _NSConcreteStackBlock;
  uint64_t v22 = 3221225472LL;
  uint64_t v23 = sub_100375CD8;
  id v24 = &unk_1006585B0;
  id v7 = v5;
  id v25 = v7;
  id v8 = v6;
  uint64_t v26 = v8;
  +[Pass enumeratePassesAndGroupingProfilesForQuery:withHandler:]( &OBJC_CLASS___Pass,  "enumeratePassesAndGroupingProfilesForQuery:withHandler:",  v4,  &v21);
  id v9 = (char *)-[NSMutableArray count](v7, "count", v21, v22, v23, v24);
  if (v9)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Creating groups for %lu passes", buf, 0xCu);
    }

    id v12 = 0LL;
    do
    {
      unsigned __int8 v13 = objc_autoreleasePoolPush();
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v7, "objectAtIndex:", v12));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v8, "objectAtIndex:", v12));
      [v14 _insertPass:v15 groupingProfile:v16];

      objc_autoreleasePoolPop(v13);
      ++v12;
    }

    while (v9 != v12);
    id v17 = *(void **)(a1 + 32);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 delegate]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 catalogOfRecord]);
    [v17 _applyCatalog:v19];
  }

  return v9 != 0LL;
}

void sub_100375CD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 addObject:a2];
  [*(id *)(a1 + 40) addObject:v6];
}

uint64_t sub_100375DBC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"pass_flavor",  v2));

  unsigned int v3 = (id *)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[Pass predicateForUniqueID:](&OBJC_CLASS___Pass, "predicateForUniqueID:", *(void *)(a1 + 32)));
  v29[0] = v16;
  v29[1] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v29, 2LL));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v5));

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:",  *(void *)(*(void *)(a1 + 40) + 8LL),  v15));
  v28[0] = @"group_pid";
  v28[1] = @"unique_id";
  v28[2] = @"pass_group.group_order";
  v28[3] = @"pass_flavor";
  void v28[4] = @"template";
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v28, 5LL));
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = *v3;
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Validate default pass ordering - default PID: %@",  (uint8_t *)&buf,  0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v26 = 0x2020000000LL;
  uint64_t v27 = -1LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  uint64_t v24 = -1LL;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10037612C;
  v17[3] = &unk_1006585D8;
  id v18 = *v3;
  id v19 = &v21;
  p___int128 buf = &buf;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v17];
  uint64_t v11 = *(void *)(*((void *)&buf + 1) + 24LL);
  if (v11 != -1 && v22[3] != v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 40) + 8LL),  *(void *)(a1 + 32)));
    unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 group]);
    if (v13)
    {
      [*(id *)(a1 + 40) _moveGroup:v13 toIndex:*(void *)(*((void *)&buf + 1) + 24)];
    }

    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10044271C((uint64_t *)(a1 + 32), (uint64_t)&buf + 8, v9);
      }
    }
  }

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&buf, 8);

  return 1LL;
}

void sub_1003760F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10037612C(void *a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v11 = a4[1];
  id v6 = [a4[2] integerValue];
  if ([a4[3] unsignedIntegerValue] == (id)1 && objc_msgSend(a4[4], "integerValue") == (id)6)
  {
    uint64_t v7 = *(void *)(a1[6] + 8LL);
    unint64_t v8 = *(void *)(v7 + 24);
    else {
      id v9 = v6;
    }
    if (v8 == -1LL) {
      id v10 = v6;
    }
    else {
      id v10 = v9;
    }
    *(void *)(v7 + 24) = v10;
  }
}

uint64_t sub_10037625C(uint64_t a1)
{
  uint64_t v26 = (void *)PDOSTransactionCreate("PDDatabaseManager.groups");
  uint64_t v27 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groups]);
  id v29 = [v2 count];

  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groups]);
  id v31 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
  if (!v31)
  {
    uint64_t v3 = 0LL;
    uint64_t v5 = 0LL;
    goto LABEL_23;
  }

  uint64_t v3 = 0LL;
  char v4 = 0;
  uint64_t v5 = 0LL;
  uint64_t v30 = *(void *)v49;
  do
  {
    id v6 = 0LL;
    do
    {
      if (*(void *)v49 != v30) {
        objc_enumerationMutation(obj);
      }
      uint64_t v7 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)v6);
      unint64_t v8 = objc_autoreleasePoolPush();
      id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueIDs", v26));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _groupAtOrAfterIndex:v3 bestMatchingUniqueIDs:v9]);
      id v11 = v10;
      if (v10)
      {
        __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v10 automaticGroup]);
        objc_msgSend( *(id *)(a1 + 40),  "_fixDuplicateGroupsAtIndex:preservingGroupPID:maximumNumberOfGroups:",  v3,  objc_msgSend(v11, "persistentID"),  v29);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[Pass queryWithDatabase:group:]( &OBJC_CLASS___Pass,  "queryWithDatabase:group:",  *(void *)(*(void *)(a1 + 40) + 8LL),  v11));
        uint64_t v44 = 0LL;
        __int128 v45 = &v44;
        uint64_t v46 = 0x2020000000LL;
        uint64_t v47 = 0LL;
        uint64_t v40 = 0LL;
        __int128 v41 = &v40;
        uint64_t v42 = 0x2020000000LL;
        uint64_t v43 = 5LL;
        v54[0] = @"pass_flavor";
        v54[1] = @"template";
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v54, 2LL));
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472LL;
        v39[2] = sub_1003767E4;
        v39[3] = &unk_100658600;
        void v39[4] = &v44;
        v39[5] = &v40;
        [v32 enumeratePersistentIDsAndProperties:v12 usingBlock:v39];

        if (v45[3] == 1 && v41[3] == 6)
        {
          if ((v4 & 1) != 0)
          {
            -[NSMutableArray addObject:](v27, "addObject:", v11);
            goto LABEL_15;
          }

          char v4 = 0;
          ++v5;
        }

        else
        {
          if ((v4 & 1) == 0) {
            uint64_t v5 = v3;
          }
LABEL_15:
          char v4 = 1;
        }

        [*(id *)(a1 + 40) _moveGroup:v11 toIndex:v3];
        _Block_object_dispose(&v40, 8);
        _Block_object_dispose(&v44, 8);

        ++v3;
      }

      objc_autoreleasePoolPop(v8);
      id v6 = (char *)v6 + 1;
    }

    while (v31 != v6);
    id v13 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
    id v31 = v13;
  }

  while (v13);
LABEL_23:

  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  uint64_t v14 = v27;
  id v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v35,  v53,  16LL);
  if (v15)
  {
    uint64_t v16 = *(void *)v36;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v36 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)i);
        id v19 = objc_autoreleasePoolPush();
        [*(id *)(a1 + 40) _moveGroup:v18 toIndex:(char *)i + v5];
        objc_autoreleasePoolPop(v19);
      }

      id v15 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v35,  v53,  16LL);
      v5 += (uint64_t)i;
    }

    while (v15);
  }

  uint64_t v44 = 0LL;
  __int128 v45 = &v44;
  uint64_t v46 = 0x2020000000LL;
  uint64_t v47 = v5;
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanOrEqualToValue:",  @"group_order",  v20));

  uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int128 v52 = @"ingested_date";
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v52, 1LL));
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:orderingProperties:]( &OBJC_CLASS___Group,  "queryWithDatabase:predicate:orderingProperties:",  v22,  v21,  v23));

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  void v34[2] = sub_100376850;
  v34[3] = &unk_100651E00;
  v34[4] = *(void *)(a1 + 40);
  v34[5] = &v44;
  [v24 enumeratePersistentIDsUsingBlock:v34];

  _Block_object_dispose(&v44, 8);
  return 1LL;
}

void sub_1003767A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

id sub_1003767E4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 unsignedIntegerValue];
  id result = [a4[1] integerValue];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (*(void *)(v8 + 24) != 1LL) {
    *(void *)(v8 + 24) = v6;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(void *)(v9 + 24) != 6LL) {
    *(void *)(v9 + 24) = result;
  }
  return result;
}

void sub_100376850(uint64_t a1, uint64_t a2)
{
  char v4 = objc_autoreleasePoolPush();
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___Group),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v10 = 0LL;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000LL;
  char v13 = 0;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[Pass queryWithDatabase:group:]( &OBJC_CLASS___Pass,  "queryWithDatabase:group:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v5));
  v14[0] = @"pass_flavor";
  v14[1] = @"template";
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100376A28;
  v9[3] = &unk_10063E828;
  void v9[4] = &v10;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v9];

  if (*((_BYTE *)v11 + 24)) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
  [*(id *)(a1 + 32) _moveGroup:v5 toIndex:v8];
  if (*((_BYTE *)v11 + 24)) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }

  _Block_object_dispose(&v10, 8);
  objc_autoreleasePoolPop(v4);
}

void sub_100376A08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

id sub_100376A28(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, _BYTE *a6)
{
  id result = [*a4 unsignedIntegerValue];
  if (result == (id)1)
  {
    id result = [a4[1] integerValue];
    if (result == (id)6)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      *a6 = 1;
    }
  }

  return result;
}

void sub_100377474( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100377494(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___Group),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_100377788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1003777B4(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v11 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = *a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _groupWithPersistentID:v7]);
  if (v8)
  {
    [*(id *)(a1 + 40) addObject:v7];
    id v9 = [*(id *)(a1 + 40) countForObject:v7];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if ((unint64_t)v9 > *(void *)(v10 + 24))
    {
      *(void *)(v10 + 24) = v9;
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v8);
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100377B08(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_groupWithPersistentID:"));
  if (v5) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_100377E20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___Group),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  [*(id *)(a1 + 40) addObject:v3];
}

uint64_t sub_100377E84(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 48);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    if (v2 < v1) {
      unint64_t v1 = v2;
    }
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v7), "updateWithOrder:", (char *)v7 + v1, (void)v9);
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      v1 += (unint64_t)v7;
    }

    while (v5);
  }

  return 1LL;
}

void sub_1003781B0(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___Group),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_100378528(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 addObject:v7];
  [*(id *)(a1 + 40) addPass:v7 withGroupingProfile:v6];
}

BOOL sub_100379178(void *a1)
{
  id v1 = a1;
  id v2 = [v1 passType];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 groupingID]);

  BOOL v5 = v2 == (id)1 && v3 != 0LL;
  return v5;
}

uint64_t sub_1003792BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
    if (v5 && v4) {
      uint64_t v7 = [v4 isEqualToString:v5] ^ 1;
    }
  }

  return v7;
}

void sub_100379DBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10037A078(id a1, NSMutableString *a2, id a3)
{
  if (a3) {
    -[NSMutableString setString:](a2, "setString:");
  }
}

id sub_10037A2BC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setValue:0 forHTTPHeaderField:a2];
}

void sub_10037AD04(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountCreditTermsUpdate),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountCreditTermsUpdate creditTermsUpdate](v5, "creditTermsUpdate"));
  [v3 addObject:v4];
}

void sub_10037B04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) creditLimit]);
  [v4 setCreditLimit:v5];

  id v6 = [*(id *)(a1 + 48) persistentID];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[CreditAccountRates creditAccountRatesForCreditTermsUpdatePID:inDatabase:]( &OBJC_CLASS___CreditAccountRates,  "creditAccountRatesForCreditTermsUpdatePID:inDatabase:",  v6,  v7));

  [*(id *)(a1 + 40) setRates:v8];
}

void sub_10037B3D4(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
}

void sub_10037B3DC(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
}

void sub_10037B3E4(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountCreditTermsUpdate setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10037B428(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountCreditTermsUpdate setInitiator:](v4, "setInitiator:", [a3 integerValue]);
}

void sub_10037B604(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 context]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 configuration]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 primaryRegion]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 regionCode]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 numberOfDaysBetweenMapsReprocessingForRegion:v6]);

  if (v7) {
    double v8 = (double)(uint64_t)[v7 integerValue] * 86400.0;
  }
  else {
    double v8 = 604800.0;
  }
  *(double *)(*(void *)(a1 + 32) + 32LL) = v8;
  double v9 = *(double *)(*(void *)(a1 + 32) + 32LL);
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v9 <= 0.0)
  {
    if (v12)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Not scheduling merchant reprocessing activity because it's disabled in the config",  buf,  2u);
    }
  }

  else
  {
    if (v12)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Scheduling merchant reprocessing activity",  buf,  2u);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(dispatch_queue_s **)(v13 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10037B79C;
    block[3] = &unk_100639300;
    void block[4] = v13;
    dispatch_async(v14, block);
  }
}

void sub_10037B79C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = PDDefaultQueue();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  PDScheduledActivityClientRegister(@"PDMapsMerchantProcessingServiceClientIdentifier", v1, v3);

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria maintenanceActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "maintenanceActivityCriteriaWithStartDate:",  v4));

  [v5 setRequireMainsPower:1];
  [v5 setRequireScreenSleep:1];
  [v5 setRequireNetworkConnectivity:1];
  [v5 setRepeating:1];
  [v5 setRepeatInterval:86400.0];
  PDScheduledActivityRegister( @"PDMapsMerchantProcessingServiceClientIdentifier",  @"PDMapsMerchantProcessingActivityIdentifier",  v5);
}

void sub_10037B8D4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _processingItemsForScheduledActivity]);
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    id v19 = [v3 count];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Running maps reprocessing scheduled activity with %lu items",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) _logScheduledActivityWithItems:v3];
  objc_autoreleasePoolPop(v2);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      __int128 v10 = 0LL;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v10);
        BOOL v12 = objc_autoreleasePoolPush();
        objc_msgSend(*(id *)(a1 + 32), "_processItem:", v11, (void)v13);
        objc_autoreleasePoolPop(v12);
        __int128 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v8);
  }
}

CFStringRef PDAccountEndpointBackOffEndpointTypeToString(unint64_t a1)
{
  if (a1 > 0xA) {
    return @"account";
  }
  else {
    return off_100658788[a1];
  }
}

uint64_t sub_10037CA3C(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[6]));
  [v2 setValue:v3 forProperty:@"backoff_level"];

  id v4 = (void *)a1[4];
  id v5 = (void *)_SQLValueForDate(a1[5]);
  [v4 setValue:v5 forProperty:@"next_fetch"];

  return 1LL;
}

void sub_10037CD50(uint64_t a1)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10037CE64;
  v12[3] = &unk_100641B28;
  id v2 = *(id *)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v2;
  id v3 = objc_retainBlock(v12);
  char v11 = 0;
  id v4 = *(void **)(a1 + 32);
  id v10 = 0LL;
  [v4 _currentPasscodeMeetsUpgradedPasscodePolicy:&v10 isPasscodeCompliant:&v11];
  id v5 = v10;
  if (v5)
  {
    ((void (*)(void *, void, id))v3[2])(v3, 0LL, v5);
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10037CF20;
    v7[3] = &unk_1006587E8;
    id v8 = v3;
    char v9 = v11;
    [v6 _enforceUpgradedPasscodePolicy:1 withCompletion:v7];
  }
}

void sub_10037CE64(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  if (v6)
  {
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10037CF0C;
    block[3] = &unk_100641500;
    id v10 = v6;
    char v11 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10037CF0C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

uint64_t sub_10037CF20(uint64_t a1, uint64_t a2)
{
  if (a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(_BYTE *)(a1 + 40) == 0;
  }
  uint64_t v4 = !v3;
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  v4,  a2);
}

void sub_10037CFC0(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10037D034;
  v4[3] = &unk_10063CAE0;
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 _updateUpgradedPasscodePolicyEnforcementWithCompletion:v4];
}

void sub_10037D034(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10037D0B4;
    v5[3] = &unk_100645D90;
    id v6 = v2;
    char v7 = a2;
    dispatch_async(v4, v5);
  }

uint64_t sub_10037D0B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_10037D154(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) _requiresUpgradedPasscode];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10037D1D8;
  v5[3] = &unk_100645D90;
  id v6 = v3;
  unsigned __int8 v7 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_10037D1D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

id sub_10037D244(uint64_t a1)
{
  if (PDUpgradePasscodeCheckedVersion() > 0) {
    return _[*(id *)(a1 + 32) _updateUpgradedPasscodePolicyEnforcementWithRemovalOnly:1 completion:0];
  }
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Check if upgrade passcode is needed for OS update with version 1",  buf,  2u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10037D314;
  v6[3] = &unk_100639610;
  void v6[4] = v4;
  return [v4 _updateUpgradedPasscodePolicyEnforcementWithCompletion:v6];
}

void sub_10037D314(uint64_t a1, char a2)
{
  unsigned __int8 v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10037D36C;
  block[3] = &unk_100658808;
  char v4 = a2;
  dispatch_async(v2, block);
}

void sub_10037D36C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    PDSetUpgradePasscodeCheckedVersion(1LL);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    unsigned __int8 v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Failed to enforce upgrade passcode on OS update",  v3,  2u);
    }
  }

void sub_10037D4B8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v22 = 0LL;
  unsigned int v5 = [v2 changePasscodeFrom:v3 to:v4 outError:&v22];
  id v6 = v22;
  unsigned __int8 v7 = v6;
  if (v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Success to set the passcode", buf, 2u);
    }

    else {
      uint64_t v10 = 3LL;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error: Unhandled MCUnlockScreenType type",  buf,  2u);
    }

    id v11 = objc_alloc(&OBJC_CLASS___CDPStateController);
    id v12 = objc_alloc_init(&OBJC_CLASS___CDPContext);
    id v13 = [v11 initWithContext:v12];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10037D6C4;
    v19[3] = &unk_10063B468;
    uint64_t v14 = *(void *)(a1 + 40);
    void v19[4] = *(void *)(a1 + 48);
    id v20 = *(id *)(a1 + 56);
    [v13 localSecretChangedTo:v14 secretType:v10 completion:v19];
  }

  else
  {
    __int128 v15 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 40LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10037D810;
    void v16[3] = &unk_10063AC90;
    id v17 = v6;
    id v18 = *(id *)(a1 + 56);
    dispatch_async(v15, v16);

    id v13 = v17;
  }
}

void sub_10037D6C4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"NO";
    if (a2) {
      id v8 = @"YES";
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CDP state update success: %@ with error: %@",  buf,  0x16u);
  }

  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10037D7F4;
  block[3] = &unk_10063A830;
  id v12 = v9;
  dispatch_async(v10, block);
}

uint64_t sub_10037D7F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  return result;
}

uint64_t sub_10037D810(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to set the passcode with error %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0LL, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10037DAE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Update upgrade passcode policy enforcement failed with error: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, BOOL))(v6 + 16))(v6, v3 == 0LL);
  }
}

void sub_10037DC48(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 48)) {
      uint64_t v4 = @"Enforcing";
    }
    else {
      uint64_t v4 = @"Unenforcing";
    }
    *(_DWORD *)__int128 buf = 138412290;
    __int16 v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@ upgraded passcode policy", buf, 0xCu);
  }

  if (*(_BYTE *)(a1 + 48)) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _strongPasscodeRestrictions]);
  }
  else {
    id v5 = 0LL;
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  id v13 = 0LL;
  [v6 applyRestrictionDictionary:v5 clientType:PKServiceBundleIdentifier clientUUID:PKMCRestrictionClientUUIDUpgradedPasscode localizedClientDescription:0 localizedWarningMessage:0 outRestrictionCh anged:0 outEffectiveSettingsChanged:0 outError:&v13];
  id v7 = v13;

  id v8 = *(void **)(a1 + 40);
  if (v8)
  {
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10037DDFC;
    block[3] = &unk_1006396B0;
    id v12 = v8;
    id v11 = v7;
    dispatch_async(v9, block);
  }
}

uint64_t sub_10037DDFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_10037DFB4(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 passTypeIdentifier]);
  id v4 = [v2 isChinaRegionIdentifier:v3];

  return v4;
}

void sub_10037E93C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10037E954(uint64_t a1, uint64_t a2)
{
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PeerPaymentAccountFeatureDescriptor),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( -[PeerPaymentAccountFeatureDescriptor peerPaymentAccountFeatureDescriptor]( v8,  "peerPaymentAccountFeatureDescriptor"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 osVersionRange]);
  uint64_t v5 = PKDeviceVersionMeetsRequiredVersion(v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v6 + 24))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[SQLiteEntity setValue:forProperty:]( v8,  "setValue:forProperty:",  v7,  @"h");
  }

  else
  {
    *(_BYTE *)(v6 + 24) = 0;
  }
}

void sub_10037EB50(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10037EC9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_10037EEE8(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10037EEF0(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccountFeatureDescriptor setMinimumAmount:](v4, "setMinimumAmount:", v6);
}

void sub_10037EF40(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccountFeatureDescriptor setMaximumAmount:](v4, "setMaximumAmount:", v6);
}

void sub_10037EF90(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKPeerPaymentAccountFeatureDescriptor setSupportedNetworks:](v4, "setSupportedNetworks:", v5);
}

void sub_10037EFE8(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  v11[1] = objc_opt_class(&OBJC_CLASS___NSDecimalNumber, v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKPeerPaymentAccountFeatureDescriptor setAmountSuggestions:](v5, "setAmountSuggestions:", v10);
}

void sub_10037F0F4(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  v11[1] = objc_opt_class(&OBJC_CLASS___NSDecimalNumber, v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKPeerPaymentAccountFeatureDescriptor setThresholdSuggestions:](v5, "setThresholdSuggestions:", v10);
}

void sub_10037F200(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  v11[1] = objc_opt_class(&OBJC_CLASS___NSString, v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKPeerPaymentAccountFeatureDescriptor setFrequencyOptions:](v5, "setFrequencyOptions:", v10);
}

void sub_10037F30C(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", a3));
  -[PKPeerPaymentAccountFeatureDescriptor setProductTimeZone:](v4, "setProductTimeZone:", v5);
}

void sub_10037F370(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setMaximumPayments:]( v4,  "setMaximumPayments:",  [a3 integerValue]);
}

void sub_10037F3B4(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setEndProcessingHour:]( v4,  "setEndProcessingHour:",  [a3 integerValue]);
}

void sub_10037F3F8(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccountFeatureDescriptor setProactiveFetchPeriod:](v4, "setProactiveFetchPeriod:");
}

void sub_10037F438(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10037F440(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setMerchantCapabilities:]( v4,  "setMerchantCapabilities:",  [a3 unsignedIntegerValue]);
}

void sub_10037F484(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccountFeatureDescriptor setFeePercentage:](v4, "setFeePercentage:", v6);
}

void sub_10037F4D4(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccountFeatureDescriptor setMinimumFee:](v4, "setMinimumFee:", v6);
}

void sub_10037F524(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccountFeatureDescriptor setMaximumFee:](v4, "setMaximumFee:", v6);
}

void sub_10037F574(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_OSVersionRequirementRangeForSQLValue(a3);
  -[PKPeerPaymentAccountFeatureDescriptor setOsVersionRange:](v4, "setOsVersionRange:", v5);
}

void sub_10037F5C0(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setSupported:](v4, "setSupported:", [a3 BOOLValue]);
}

void sub_10037F818( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10037F830(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10037F840(uint64_t a1)
{
}

BOOL sub_10037F848(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithMetadata:*(void *)(a1 + 32) forBaseMetadata:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_10037F9E4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, _BYTE *a6)
{
  if (*a4)
  {
    id v8 = *a4;
    id v9 = objc_alloc(&OBJC_CLASS___NSSet);
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary, v10);
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSArray, v12);
    __int16 v15 = -[NSSet initWithObjects:](v9, "initWithObjects:", v11, v13, objc_opt_class(&OBJC_CLASS___NSNumber, v14), 0LL);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v15,  v8,  0LL));

    [*(id *)(a1 + 32) setVehicleFunctionStates:v16];
  }

  *a6 = 1;
}

void sub_10037FD20(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountAssistanceProgramMessage),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountAssistanceProgramMessage assistanceProgramMessage](v5, "assistanceProgramMessage"));
  [v3 addObject:v4];
}

id sub_10037FFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountAssistanceProgramMessage,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10038015C(id a1, PKAccountAssistanceProgramMessage *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountAssistanceProgramMessage setPastDue:](v4, "setPastDue:", v6);
}

void sub_1003801AC(id a1, PKAccountAssistanceProgramMessage *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountAssistanceProgramMessage setChargeOffPreventionAmount:](v4, "setChargeOffPreventionAmount:", v6);
}

void sub_1003801FC(id a1, PKAccountAssistanceProgramMessage *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountAssistanceProgramMessage setCurrentBalance:](v4, "setCurrentBalance:", v6);
}

uint64_t sub_1003802E4(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        +[PaymentTransactionToDeleteFromFinance deletePaymentTransactionToDeleteFromFinanceWithPID:inDatabase:]( PaymentTransactionToDeleteFromFinance,  "deletePaymentTransactionToDeleteFromFinanceWithPID:inDatabase:",  objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "longLongValue", (void)v8),  *(void *)(*(void *)(a1 + 40) + 8));
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }

  return 1LL;
}

uint64_t sub_100380484(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7, (void)v10));
        +[PaymentTransaction resetNeedsSyncWithFinanceForTransactionWithPID:updateSequenceNumber:inDatabase:]( PaymentTransaction,  "resetNeedsSyncWithFinanceForTransactionWithPID:updateSequenceNumber:inDatabase:",  v7,  [v8 integerValue],  *(void *)(*(void *)(a1 + 40) + 8));
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_100381230(_Unwind_Exception *a1)
{
}

uint64_t sub_1003812D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003812E8(uint64_t a1)
{
}

void sub_1003812F0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  __int128 v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1003813A0;
  v12[3] = &unk_100658B10;
  id v13 = v6;
  id v14 = v7;
  uint64_t v15 = v8;
  id v10 = v6;
  id v11 = v7;
  [v9 initializeSecureElementIfNecessaryWithHandler:v12];
}

void sub_1003813A0(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a2)
  {
    __int128 v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(43LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Pass Issuer Data Generation -  SE setup failed",  v15,  2u);
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIssuerBindingErrorDomain,  7LL,  0LL));
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    __int128 v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v9();
}

void sub_100381490(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(&OBJC_CLASS___LAContext);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (PKIsMac(v11, v12)) {
    uint64_t v13 = PKLocalizedPaymentString( @"ISSUER_DATA_GENERATION_BODY_TEXT_TOUCH_ID_MAC",  @"%@%@",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }
  else {
    uint64_t v13 = PKLocalizedPaymentString(@"ISSUER_DATA_GENERATION_REASON", @"%@", *(void *)(a1 + 40));
  }
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v28[0] = &off_100690770;
  v28[1] = &off_100690788;
  v29[0] = v14;
  uint64_t v15 = PKLocalizedString(@"WALLET");
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v29[1] = v16;
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  2LL));

  v23[0] = _NSConcreteStackBlock;
  uint64_t v18 = *(void *)(a1 + 48);
  int8x16_t v19 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
  id v20 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  v23[1] = 3221225472LL;
  v23[2] = sub_10038165C;
  v23[3] = &unk_100658B78;
  int8x16_t v26 = v19;
  uint64_t v27 = *(void *)(a1 + 72);
  id v24 = v6;
  id v25 = v7;
  void v23[4] = v18;
  id v21 = v6;
  id v22 = v7;
  [v20 evaluatePolicy:2 options:v17 reply:v23];
}

void sub_10038165C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 72LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 64) allObjects]);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 72LL));
  [v6 enumerateObjectsUsingBlock:&stru_100658B50];
  if (a2) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  if (v7) {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[8] + 8) + 40) externalizedContext]);
  }
  else {
    uint64_t v9 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), v9);
  if ((v8 & 1) == 0) {

  }
  uint64_t Object = PKLogFacilityTypeGetObject(43LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
      uint64_t v12 = @"Y";
    }
    else {
      uint64_t v12 = @"N";
    }
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
    int v17 = 138412546;
    uint64_t v18 = v12;
    __int16 v19 = 2112;
    id v20 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Pass Issuer Data Generation - Obtained externalized auth: %@ error: %@",  (uint8_t *)&v17,  0x16u);
  }

  if (v5)
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIssuerBindingErrorDomain,  3LL,  0LL));
    uint64_t v15 = *(void *)(a1[9] + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100381844(id a1, PDIssuerBindingManagerObserver *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if ((objc_opt_respondsToSelector(v4, "issuerBindingFlowAuthenticationPerformed") & 1) != 0) {
    -[PDIssuerBindingManagerObserver issuerBindingFlowAuthenticationPerformed]( v4,  "issuerBindingFlowAuthenticationPerformed");
  }
}

void sub_100381880(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = v7;
  uint64_t v9 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
  if (v9)
  {
    uint64_t v10 = a1[5];
    uint64_t v11 = *(void **)(a1[4] + 24LL);
    uint64_t v12 = a1[6];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100381978;
    void v13[3] = &unk_10063B580;
    uint64_t v16 = a1[8];
    id v15 = v7;
    id v14 = v6;
    [v11 checkFidoKeyPresenceForRelyingParty:v10 relyingPartyAccountHash:v12 fidoKeyHash:v9 completion:v13];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

uint64_t sub_100381978(void *a1, char a2)
{
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = a2 ^ 1;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_10038199C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = v7;
  if (*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL))
  {
    uint64_t v9 = a1[5];
    uint64_t v10 = *(void **)(a1[4] + 24LL);
    uint64_t v11 = a1[6];
    uint64_t v12 = a1[7];
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSData);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100381AB4;
    void v16[3] = &unk_100658BC8;
    uint64_t v19 = a1[9];
    id v18 = v8;
    id v14 = v6;
    uint64_t v15 = a1[10];
    id v17 = v14;
    uint64_t v20 = v15;
    [v10 createFidoKeyForRelyingParty:v9 relyingPartyAccountHash:v11 challenge:v12 externalizedAuth:v13 completion:v16];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_100381AB4(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = v12;
  if (!v9 || v12)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(43LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 description]);
      int v21 = 138412290;
      id v22 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Pass Issuer Data Generation -  key creation failed with internal error %@",  (uint8_t *)&v21,  0xCu);
    }

    uint64_t v18 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIssuerBindingErrorDomain,  4LL,  0LL));
    uint64_t v19 = *(void *)(a1[7] + 8LL);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    id v14 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a4);
    id v14 = *(void (**)(void))(a1[5] + 16LL);
  }

  v14();
}

void sub_100381C34(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100381D38;
  void v16[3] = &unk_100658C18;
  id v17 = v6;
  id v18 = v7;
  __int128 v19 = *(_OWORD *)(a1 + 80);
  id v14 = v6;
  id v15 = v7;
  [v9 signWithFidoKeyForRelyingParty:v8 relyingPartyAccountHash:v11 fidoKeyHash:v10 challenge:v12 publicKeyIdentifier:&stru_100662310 externalizedAuth:v13 completion:v16];
}

void sub_100381D38(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (!v6 || v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(43LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 description]);
      int v16 = 138412290;
      id v17 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Pass Issuer Data Generation -  key signing failed with internal error %@",  (uint8_t *)&v16,  0xCu);
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIssuerBindingErrorDomain,  5LL,  0LL));
    uint64_t v14 = *(void *)(a1[7] + 8LL);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    id v9 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a2);
    id v9 = *(void (**)(void))(a1[5] + 16LL);
  }

  v9();
}

void sub_100381E94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKIssuerBindingData);
  -[PKIssuerBindingData setSessionIdentifier:](v8, "setSessionIdentifier:", *(void *)(a1 + 32));
  -[PKIssuerBindingData setCreatedKeyHash:]( v8,  "setCreatedKeyHash:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
  -[PKIssuerBindingData setSignedData:]( v8,  "setSignedData:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *(void *)(a1 + 40)));
  -[PKIssuerBindingData setCallbackURL:](v8, "setCallbackURL:", v9);

  uint64_t Object = PKLogFacilityTypeGetObject(35LL);
  uint64_t v11 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
  os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, *(const void **)(a1 + 48));
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v13 = v12;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  v13,  "issuerBindingData:post",  "",  buf,  2u);
    }
  }

  uint64_t v14 = *(void **)(*(void *)(a1 + 48) + 32LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_100382034;
  v17[3] = &unk_100658C68;
  id v18 = v6;
  id v19 = v7;
  __int128 v20 = *(_OWORD *)(a1 + 72);
  id v15 = v6;
  id v16 = v7;
  [v14 requestPassesForIssuerBindingData:v8 handler:v17];
}

void sub_100382034(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 count];
  if (v6 || !v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(43LL);
    os_signpost_id_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      int v18 = 138412290;
      id v19 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Pass Issuer Data Generation -  pass download failed %@",  (uint8_t *)&v18,  0xCu);
    }

    uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKIssuerBindingErrorDomain,  6LL,  0LL));
    uint64_t v16 = *(void *)(a1[7] + 8LL);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v11 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    id v8 = [v5 copy];
    uint64_t v9 = *(void *)(a1[6] + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t v11 = *(void (**)(void))(a1[5] + 16LL);
  }

  v11();
}

uint64_t sub_10038219C(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(v3 + 8) + 8LL) + 40LL)) {
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, 0LL);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))( v2,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }
}

void sub_1003823D0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding]);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92LL));
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(v3 + 91);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 92));
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id obj = v2;
  id v5 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v8);
        if (v4)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v19 + 1) + 8 * (void)v8) issuerBindingInformation]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 PKStringForKey:@"issuerBindingData"]);
          os_signpost_id_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pk_decodeHexadecimal"));

          os_signpost_id_t v13 = *(void **)(a1 + 32);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 ingestedDate]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v9 fidoProfile]);
          [v13 _verifyIssuerBindingInformationForPassUniqueIdentifier:v14 passIngestionDate:v15 fidoProfile:v16 signedChallenge:v12 forFirstTime:0];
        }

        else
        {
          id v17 = *(void **)(a1 + 32);
          os_signpost_id_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v19 + 1) + 8 * (void)v8) uniqueID]);
          [v17 _updateNFCPayloadState:0 forPassUniqueIdentifier:v12 notify:0];
        }

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v6);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 89LL) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92LL));
}

void sub_1003828CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding]);
  if ([v2 count] == (id)1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 anyObject]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
    [v3 _updateNFCPayloadState:2 forPassUniqueIdentifier:v5 notify:1];
  }

  else if ((unint64_t)[v2 count] >= 2)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v6 = v2;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(a1 + 32);
          os_signpost_id_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v10), "uniqueID", (void)v16));
          [v11 _updateNFCPayloadState:2 forPassUniqueIdentifier:v12 notify:0];

          uint64_t v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v8);
    }

    uint64_t v15 = PKIsPhone(v13, v14);
  }
}

void sub_100382EF8(_Unwind_Exception *a1)
{
}

void sub_100382F18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100382FC4;
  v11[3] = &unk_100652718;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  [v8 initializeSecureElementIfNecessaryWithHandler:v11];
}

uint64_t sub_100382FC4(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 ^ 1u);
}

void sub_100382FDC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) relyingPartyIdentifier]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountHash]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) keyHash]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pk_decodeHexadecimal"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100383114;
  v18[3] = &unk_100658CE0;
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  id v21 = v7;
  uint64_t v22 = v15;
  id v19 = v14;
  id v20 = v6;
  id v16 = v6;
  id v17 = v7;
  [v9 verifySignedChallenge:v8 forRelyingParty:v10 relyingPartyAccountHash:v11 fidoKeyHash:v13 completion:v18];
}

uint64_t sub_100383114(void *a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(43LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = @"NO";
    uint64_t v7 = a1[4];
    if (a2) {
      id v6 = @"YES";
    }
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Issuer binding validation for pass: %@ valid: %@",  (uint8_t *)&v9,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = a2;
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

id sub_100383208(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    BOOL v2 = 0LL;
    uint64_t v3 = 0LL;
  }

  else
  {
    [*(id *)(a1 + 32) timeIntervalSinceNow];
    if (v4 >= -3600.0)
    {
      BOOL v2 = *(_BYTE *)(a1 + 64) == 0;
      uint64_t v3 = 3LL;
    }

    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 92LL));
      id v5 = *(id *)(*(void *)(a1 + 40) + 80LL);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 92LL));
      if (v5 && ([v5 timeIntervalSinceNow], v6 < -3600.0))
      {
        BOOL v2 = 1LL;
        uint64_t v3 = 1LL;
      }

      else
      {
        BOOL v2 = 0LL;
        uint64_t v3 = 3LL;
      }
    }
  }

  [*(id *)(a1 + 40) _updateNFCPayloadState:v3 forPassUniqueIdentifier:*(void *)(a1 + 48) notify:v2];
  return _[*(id *)(a1 + 40) _updateActivatingCheckSchedule];
}

void sub_1003834D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bindingStateChangedForPass:") & 1) != 0) {
    [v3 bindingStateChangedForPass:*(void *)(a1 + 32)];
  }
}

void sub_1003837D0(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBindingWithPayloadState:3]);
  uint64_t Object = PKLogFacilityTypeGetObject(43LL);
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    id v27 = [v2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Attempting to verify activating passes: %lu",  buf,  0xCu);
  }

  oslog = v4;

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = v2;
  id v5 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(obj);
        }
        int v9 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "issuerBindingInformation", oslog));
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 PKStringForKey:@"issuerBindingData"]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pk_decodeHexadecimal"));

        id v13 = *(void **)(a1 + 32);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 ingestedDate]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 fidoProfile]);
        [v13 _verifyIssuerBindingInformationForPassUniqueIdentifier:v14 passIngestionDate:v15 fidoProfile:v16 signedChallenge:v12 forFirstTime:0];
      }

      id v6 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v6);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 88LL) = 0;
  uint64_t v17 = *(void *)(a1 + 32);
  int v18 = *(unsigned __int8 *)(v17 + 90);
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 92));
  if (v18)
  {
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Did defer verification - verifying now.",  buf,  2u);
    }

    [*(id *)(a1 + 32) _verifyActivatingPasses];
  }
}

void sub_100383BC0(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding]);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(a1 + 32);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v9 + 1) + 8 * (void)v6) uniqueID]);
        [v7 _updateNFCPayloadState:0 forPassUniqueIdentifier:v8 notify:1];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

void sub_100383CE0(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding]);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id obj = v2;
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 issuerBindingInformation]);
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 PKStringForKey:@"issuerBindingData"]);
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_decodeHexadecimal"));

        __int128 v11 = *(void **)(a1 + 32);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 ingestedDate]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 fidoProfile]);
        [v11 _verifyIssuerBindingInformationForPassUniqueIdentifier:v12 passIngestionDate:v13 fidoProfile:v14 signedChallenge:v10 forFirstTime:0];
      }

      id v4 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v4);
  }
}

void sub_100383F04(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) hasPassesWithPayloadState:3])
  {
    if ((PDScheduledActivityExists(@"PDIssuerBindingManager", @"checkActivatingPasses") & 1) != 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(43LL);
      BOOL v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Issuer binding activity already exists.",  buf,  2u);
      }
    }

    else
    {
      BOOL v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  0LL));
      uint64_t v5 = PKLogFacilityTypeGetObject(43LL);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Scheduling issuer binding activity for every hour.",  v9,  2u);
      }

      -[os_log_s setRepeatInterval:](v2, "setRepeatInterval:", 3600.0);
      -[os_log_s setRepeating:](v2, "setRepeating:", 1LL);
      -[os_log_s setReason:](v2, "setReason:", @"check issuer bound pass state");
      PDScheduledActivityRegister(@"PDIssuerBindingManager", @"checkActivatingPasses", v2);
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(43LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "No activating passes, tearing down activity",  v7,  2u);
    }

    PDScheduledActivityRemove(@"PDIssuerBindingManager", @"checkActivatingPasses");
  }

void sub_100384834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100384860(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _entryDidTimeout:*(void *)(a1 + 32)];
}

void sub_1003852D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  __int128 v10 = objc_alloc_init(&OBJC_CLASS___PKPayLaterFinancingOptionInstallment);
  uint64_t v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterFinancingOptionInstallment),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v10 withProperties:v7 values:a4];

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOptionInstallment _dueAmount](v8, "_dueAmount"));
  -[PKPayLaterFinancingOptionInstallment setDueAmount:](v10, "setDueAmount:", v9);

  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_1003857C8(id a1, PKPayLaterFinancingOptionInstallment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingOptionInstallment setDueDate:](v4, "setDueDate:", v5);
}

id sub_100385BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___Group,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_100385CC8(id a1, PDAutomaticGroup *a2, id a3)
{
}

void sub_100385CD0(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  -[PDAutomaticGroup setPassStyle:](v4, "setPassStyle:", [a3 integerValue]);
}

void sub_100385D14(id a1, PDAutomaticGroup *a2, id a3)
{
}

void sub_100385D1C(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDAutomaticGroup setMinDate:](v4, "setMinDate:", v5);
}

void sub_100385D68(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDAutomaticGroup setMaxDate:](v4, "setMaxDate:", v5);
}

void sub_100385DB4(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDAutomaticGroup setIngestedDate:](v4, "setIngestedDate:", v5);
}

void sub_100385E00(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  -[PDAutomaticGroup setNFCEnabled:](v4, "setNFCEnabled:", [a3 BOOLValue]);
}

void sub_100385E44(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = a2;
    v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
    v11[1] = objc_opt_class(&OBJC_CLASS___NSString, v7);
    uint64_t v8 = (PDAutomaticGroup *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v11,  2LL));
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));
    -[PDAutomaticGroup setSortedPassUniqueIdentifiers:](v5, "setSortedPassUniqueIdentifiers:", v10);
  }

  else
  {
    uint64_t v8 = a2;
    -[PDAutomaticGroup setSortedPassUniqueIdentifiers:](v8, "setSortedPassUniqueIdentifiers:", 0LL);
  }
}

id _SQLValueForNotificationActionInfo(void *a1)
{
  id v1 = a1;
  if (!v1
    || (BOOL v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _NotificationActionInfoForSQLValue(void *a1)
{
  id v1 = a1;
  BOOL v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  uint64_t v6 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, objc_opt_class(&OBJC_CLASS___NSString, v5), 0LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v6,  v1,  0LL));

  return v7;
}

void sub_100386AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryNotification),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[DiscoveryNotification notification](v5, "notification"));
  [v3 addObject:v4];
}

void sub_100386D08(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryNotification),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[DiscoveryNotification notification](v5, "notification"));
  [v3 addObject:v4];
}

void sub_100386F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryNotification),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[DiscoveryNotification notification](v5, "notification"));
  [v3 addObject:v4];
}

void sub_100387158(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryNotification),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[DiscoveryNotification notification](v5, "notification"));
  [v3 addObject:v4];
}

void sub_100387408( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100387428(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100387438(uint64_t a1)
{
}

void sub_100387440(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryNotification),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(-[DiscoveryNotification notification](v6, "notification"));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100387700(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id obj = a2;
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v24;
    do
    {
      __int128 v9 = 0LL;
      id v20 = v6;
      uint64_t v10 = v19 + 8LL * (void)v6;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        __int128 v11 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v9);
        __int128 v12 = *(void **)(v10 + 8LL * (void)v9);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null", v19));
        if (v12 == v13) {
          id v14 = 0LL;
        }
        else {
          id v14 = *(void **)(v10 + 8LL * (void)v9);
        }
        id v15 = v14;

        if ([v11 isEqualToString:@"relevant_date_range_start_date"])
        {
          __int128 v16 = (void *)v7;
          uint64_t v7 = _DateForSQLValue(v15);
        }

        else if ([v11 isEqualToString:@"relevant_date_range_end_date"])
        {
          __int128 v16 = (void *)v21;
          uint64_t v21 = _DateForSQLValue(v15);
        }

        else
        {
          uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v11]);
          __int128 v16 = (void *)v17;
          if (v17) {
            (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, *(void *)(a1 + 40), v15);
          }
        }

        __int128 v9 = (char *)v9 + 1;
      }

      while (v5 != v9);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      uint64_t v6 = (char *)v9 + (void)v20;
    }

    while (v5);
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v7 = 0LL;
  }

  if (v7 | v21)
  {
    id v18 = [[PKDiscoveryRelevantDateRange alloc] initWithStartDate:v7 endDate:v21];
    [*(id *)(a1 + 40) setRelevantDateRange:v18];
  }
}

void sub_100387FA8(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100387FB0(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setVersion:](v4, "setVersion:", [a3 integerValue]);
}

void sub_100387FF4(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_100388038(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100388040(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_OSVersionRequirementRangeForSQLValue(a3);
  -[PKDiscoveryNotification setOsVersionRange:](v4, "setOsVersionRange:", v5);
}

void sub_10038808C(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_HardwareVersionRangeForSQLValue(a3);
  -[PKDiscoveryNotification setHardwareVersionRange:](v4, "setHardwareVersionRange:", v5);
}

void sub_1003880D8(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setActionType:](v4, "setActionType:", [a3 integerValue]);
}

void sub_10038811C(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100388124(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_10038812C(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100388134(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  id v5 = _NotificationActionInfoForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKDiscoveryNotification setActionInfo:](v4, "setActionInfo:", v6);
}

void sub_100388184(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKDiscoveryNotification setScheduledDeliveryDate:](v4, "setScheduledDeliveryDate:", v5);
}

void sub_1003881D0(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setDelivered:](v4, "setDelivered:", [a3 integerValue] != 0);
}

void sub_100388714(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterFinancingPlanDispute),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingPlanDispute disputeIdentifier](v5, "disputeIdentifier"));
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_1003889B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  __int128 v12 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterFinancingPlanDispute),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKPayLaterFinancingPlanDispute);
  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v8 withProperties:v7 values:a4];

  id v9 = -[SQLiteEntity persistentID](v12, "persistentID");
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterAppliedPayment payLaterAppliedPaymentsForDisputePID:inDatabase:]( &OBJC_CLASS___PayLaterAppliedPayment,  "payLaterAppliedPaymentsForDisputePID:inDatabase:",  v9,  v10));

  -[PKPayLaterFinancingPlanDispute setAppliedPayments:](v8, "setAppliedPayments:", v11);
  [*(id *)(a1 + 56) safelyAddObject:v8];
}

void sub_100389048(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
}

void sub_100389050(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanDispute setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100389094(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanDispute setRequiredDocuments:](v4, "setRequiredDocuments:", [a3 integerValue]);
}

void sub_1003890D8(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanDispute setOpenDate:](v4, "setOpenDate:", v5);
}

void sub_100389124(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanDispute setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_100389170(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanDispute setDeadlineDate:](v4, "setDeadlineDate:", v5);
}

void sub_1003891BC(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
}

void sub_100389554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10038956C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10038957C(uint64_t a1)
{
}

BOOL sub_100389584(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileMetadata insertMetadata:inDatabase:]( &OBJC_CLASS___TileMetadata,  "insertMetadata:inDatabase:",  v2,  *(void *)(a1 + 40)));
    if (v3)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[TileDescriptorState insertState:inDatabase:]( &OBJC_CLASS___TileDescriptorState,  "insertState:inDatabase:",  *(void *)(a1 + 48),  *(void *)(a1 + 40)));
      if (v4
        && (v5 = [objc_alloc(*(Class *)(a1 + 80)) initWithDescriptor:*(void *)(a1 + 32) groupDescriptor:*(void *)(a1 + 56) metadata:v3 state:v4 order:*(void *)(a1 + 88) forPass:*(void *)(a1 + 64) inDatabase:*(void *)(a1 + 40)],  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8),  v7 = *(void **)(v6 + 40),  *(void *)(v6 + 40) = v5,  v7,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)))
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) states]);
        BOOL v9 = +[TileState insertStates:forDescriptor:inDatabase:]( &OBJC_CLASS___TileState,  "insertStates:forDescriptor:inDatabase:",  v8,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void *)(a1 + 40));
      }

      else
      {
        BOOL v9 = 0LL;
      }
    }

    else
    {
      BOOL v9 = 0LL;
    }
  }

  else
  {
    BOOL v9 = 0LL;
  }

  return v9;
}

void sub_100389928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_100389948(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v13 = v7;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    id v7 = v13;
  }

  LOBYTE(v12) = 1;
  id v11 = objc_msgSend( *(id *)(a1 + 56),  "_createDescriptorStatePairForPID:withProperties:values:propertySetters:indices:inDatabase:supportGroups:",  a2,  v7,  a4,  *(void *)(a1 + 32),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 40),  v12);
  if (v11) {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v11];
  }
}

void sub_100389B48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL sub_100389B60(uint64_t a1)
{
  id v35 = 0LL;
  __int128 v34 = 0uLL;
  __int128 v37 = @"state_pid";
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileDescriptor _propertySettersWithProperties:effectiveProperties:indices:]( &OBJC_CLASS___TileDescriptor,  "_propertySettersWithProperties:effectiveProperties:indices:",  v2,  &v35,  &v34));

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _predicateForPassUniqueID:*(void *)(a1 + 32)]);
  v36[0] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _predicateForNullGroupID]);
  v36[1] = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _predicateForContext:*(void *)(a1 + 72)]);
  v36[2] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v36, 3LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v7));

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) _tileDescriptorQueryWithPredicate:v8 inDatabase:*(void *)(a1 + 40)]);
  uint64_t v30 = 0LL;
  id v31 = &v30;
  uint64_t v32 = 0x2020000000LL;
  char v33 = 0;
  uint64_t v26 = 0LL;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000LL;
  char v29 = 0;
  id v10 = v35;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100389E40;
  v18[3] = &unk_1006591E8;
  __int128 v17 = *(_OWORD *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 64);
  id v11 = (id)v17;
  __int128 v21 = v17;
  id v12 = v3;
  id v19 = v12;
  __int128 v25 = v34;
  id v20 = *(id *)(a1 + 40);
  __int128 v22 = &v26;
  __int128 v23 = &v30;
  [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:v18];
  if (*((_BYTE *)v31 + 24) || !*((_BYTE *)v27 + 24))
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0LL;

    BOOL v15 = *((_BYTE *)v31 + 24) == 0;
  }

  else
  {
    BOOL v15 = 1LL;
  }

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);

  return v15;
}

void sub_100389E14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100389E40(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v10 = a3;
  id v16 = v10;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v10 = v16;
  }

  LOBYTE(v15) = 1;
  id v14 = objc_msgSend( *(id *)(a1 + 80),  "_createUpdatedDescriptorPairForPID:transform:withProperties:values:propertySetters:indices:inDatabase:updated:supportGroups:",  a2,  *(void *)(a1 + 48),  v10,  a4,  *(void *)(a1 + 32),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 64) + 8) + 24,  v15);
  if (v14)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
    *a6 = 1;
  }
}

void sub_10038A734(id a1, PKPassTileDescriptor *a2, id a3)
{
}

void sub_10038A73C(id a1, PKPassTileDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPassTileDescriptor setDefaultEnabled:](v4, "setDefaultEnabled:", [a3 BOOLValue]);
}

void sub_10038AA84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_10038AAAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v10 = a3;
  id v16 = v10;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v10 = v16;
  }

  LOBYTE(v15) = 0;
  id v14 = objc_msgSend( *(id *)(a1 + 64),  "_createDescriptorStatePairForPID:withProperties:values:propertySetters:indices:inDatabase:supportGroups:",  a2,  v10,  a4,  *(void *)(a1 + 32),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 40),  v15);
  if (v14)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v14];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    *a6 = 1;
  }
}

void sub_10038B008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_10038B044(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v10 = a3;
  id v16 = v10;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v10 = v16;
  }

  LOBYTE(v15) = 0;
  id v14 = objc_msgSend( *(id *)(a1 + 80),  "_createUpdatedDescriptorPairForPID:transform:withProperties:values:propertySetters:indices:inDatabase:updated:supportGroups:",  a2,  *(void *)(a1 + 48),  v10,  a4,  *(void *)(a1 + 32),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 64) + 8) + 24,  v15);
  if (v14)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
    *a6 = 1;
  }
}

void sub_10038B478(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  id v29 = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _checkEndpointsToBePolledOrDetermineNextPollDate:&v29]);
  id v4 = v29;
  if (*(_BYTE *)(*(void *)(a1 + 32) + 57LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_100442854(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 57LL) = 0;
    id v14 = *(void **)(a1 + 32);
    uint64_t v15 = 1LL;
LABEL_11:
    [v14 checkForNewSharingMessagesWithShouldCheckAllEndpoint:v15 completion:0];
    goto LABEL_12;
  }

  if ([v3 count]
    || ([v4 timeIntervalSinceNow], v16 < 0.0)
    || *(_BYTE *)(*(void *)(a1 + 32) + 57LL))
  {
    uint64_t v17 = PKLogFacilityTypeGetObject(33LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      sub_1004427AC(v18, v19, v20, v21, v22, v23, v24, v25);
    }

    id v14 = *(void **)(a1 + 32);
    uint64_t v15 = 0LL;
    goto LABEL_11;
  }

  if (v4)
  {
    uint64_t v26 = PKLogFacilityTypeGetObject(33LL);
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
      sub_1004427E0((uint64_t)v4, v27);
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v4));
    [v28 setReason:@"check for new sharing messages"];
    [v28 setRequireNetworkConnectivity:1];
    PDScheduledActivityRemove(@"PDSharingManager", @"checkForNewSharingMessages");
    PDScheduledActivityRegister(@"PDSharingManager", @"checkForNewSharingMessages", v28);
  }

void sub_10038B6AC(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 56LL))
  {
    int v2 = *(unsigned __int8 *)(a1 + 48);
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v5)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: checking outstanding messages already in progress, deferring.",  buf,  2u);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 57LL) = 1;
    }

    else
    {
      if (v5)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: checking outstanding messages already in progress, skipping.",  buf,  2u);
      }
    }
  }

  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject(33LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Checking for outstanding messages on tracked endpoints",  buf,  2u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 1;
    uint64_t v8 = (void *)PDOSTransactionCreate("PDSharingManager");
    uint64_t v9 = *(id **)(a1 + 32);
    if (*(_BYTE *)(a1 + 48))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9[4] sharingEndpoints]);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10038B988;
      v27[3] = &unk_1006592C0;
      void v27[4] = *(void *)(a1 + 32);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pk_objectsPassingTest:", v27));
    }

    else
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _checkEndpointsToBePolledOrDetermineNextPollDate:0]);
    }

    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v12 = v11;
    id v13 = [v12 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v24;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(a1 + 32) _updateEndpointHasOutstandingMessages:*(void *)(*((void *)&v23 + 1) + 8 * (void)i) hasOutstandingMessages:1 didCheckForNewMessages:0];
        }

        id v14 = [v12 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }

      while (v14);
    }

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10038B994;
    v19[3] = &unk_10063C450;
    uint64_t v17 = *(void **)(a1 + 40);
    id v20 = *(id *)(a1 + 32);
    id v21 = v8;
    id v22 = v17;
    id v18 = v8;
    [v20 _processOutstandingEndpointsAndMessagesWithCompletion:v19];
  }

id sub_10038B988(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _canEndpointBePolledOrCleanUpEndpoint:a2];
}

void sub_10038B994(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Finished checking for outstanding messages.",  buf,  2u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 0;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10038BA64;
  block[3] = &unk_10063A830;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
  [*(id *)(a1 + 32) scheduleNextCheckIfNeeded];
}

uint64_t sub_10038BA64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10038BF18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained channelForEndpoint:*(void *)(a1 + 40)]);

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10038BFF8;
  void v13[3] = &unk_100641F28;
  uint64_t v10 = *(void *)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  void v13[5] = v10;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v9 checkOutstandingMessagesOn:v10 completion:v13];
}

void sub_10038BFF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  void v12[2] = sub_10038C0D0;
  v12[3] = &unk_100645E50;
  v12[1] = 3221225472LL;
  void v12[4] = v8;
  id v13 = v6;
  id v14 = v5;
  uint64_t v15 = v7;
  id v17 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10038C0D0(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = PKSharingLoggableMailboxAddress(v2);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v26 = v8;
      __int16 v27 = 2112;
      uint64_t v28 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Endpoint %@ failed to check for outstanding messages error: %@",  buf,  0x16u);
    }
  }

  else
  {
    if (v6)
    {
      id v10 = *(void **)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412547;
      __int128 v26 = v10;
      __int16 v27 = 2113;
      uint64_t v28 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Endpoint %@ found outstanding messages:\n %{private}@",  buf,  0x16u);
    }

    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v5 = (os_log_s *)*(id *)(a1 + 48);
    id v12 = -[os_log_s countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v19,  v24,  16LL);
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v20;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v20 != v14) {
            objc_enumerationMutation(v5);
          }
          uint64_t v16 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
          if ((objc_msgSend( *(id *)(*(void *)(a1 + 56) + 32),  "hasSharingMessage:transportIdentifier:",  v16,  v2,  (void)v19) & 1) == 0)
          {
            id v17 = *(void **)(*(void *)(a1 + 56) + 32LL);
            uint64_t v23 = v16;
            id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v23,  1LL));
            [v17 insertOrUpdateSharingMessages:v18 storePayloads:1 transportIdentifier:v2];
          }
        }

        id v13 = -[os_log_s countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v19,  v24,  16LL);
      }

      while (v13);
    }
  }

  [*(id *)(a1 + 56) _updateEndpointHasOutstandingMessages:*(void *)(a1 + 32) hasOutstandingMessages:0 didCheckForNewMessages:1];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10038C32C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  BOOL v6 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v7 = a4;
  id v8 = a3;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 allOutstandingSharingMessages]);
  if ([v9 count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Processing unseen outstanding messages",  buf,  2u);
    }
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10038C43C;
  v12[3] = &unk_100643450;
  void v12[4] = *(void *)(a1 + 32);
  [v9 enumerateKeysAndObjectsUsingBlock:v12];
  v7[2](v7, v8, 0LL);
}

void sub_10038C43C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) sharingEndpointForTransportIdentifier:a2]);
  if (v6)
  {
    __int128 v27 = 0uLL;
    __int128 v28 = 0uLL;
    __int128 v25 = 0uLL;
    __int128 v26 = 0uLL;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v26;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v26 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
          [WeakRetained handleOutstandingShareMessage:v12 endpoint:v6];
        }

        id v9 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }

      while (v9);
    }
  }

  else
  {
    __int128 v23 = 0uLL;
    __int128 v24 = 0uLL;
    __int128 v21 = 0uLL;
    __int128 v22 = 0uLL;
    id v14 = v5;
    id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v22;
      do
      {
        for (j = 0LL; j != v16; j = (char *)j + 1)
        {
          if (*(void *)v22 != v17) {
            objc_enumerationMutation(v14);
          }
          __int128 v19 = *(void **)(*(void *)(a1 + 32) + 32LL);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)j), "identifier", (void)v21));
          [v19 deleteSharingMessageForIdentifier:v20];
        }

        id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }

      while (v16);
    }
  }
}

void sub_10038C624(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  BOOL v6 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v7 = a4;
  id v8 = a3;
  id v15 = (id)objc_claimAutoreleasedReturnValue([v6 sharedWebService]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v15 context]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 configuration]);
  [v10 sharingMessageCacheTimeToLiveInterval];
  double v12 = v11;

  id v13 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v14 = -[NSDate initWithTimeIntervalSinceNow:](objc_alloc(&OBJC_CLASS___NSDate), "initWithTimeIntervalSinceNow:", -v12);
  [v13 deleteSharingMessagesOlderThan:v14];

  v7[2](v7, v8, 0LL);
}

uint64_t sub_10038C704(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id _SQLValueForCertificateChain(void *a1)
{
  id v1 = a1;
  if (!v1
    || (int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _CertificateChainForSQLValue(void *a1)
{
  id v1 = a1;
  v8[0] = objc_opt_class(&OBJC_CLASS___NSArray, v2);
  v8[1] = objc_opt_class(&OBJC_CLASS___NSData, v3);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v8, 2LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v5,  v1,  0LL));

  return v6;
}

void sub_10038D3C4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10038D534(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10038D53C(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalanceInStoreTopUpToken setTokenType:](v4, "setTokenType:", [a3 integerValue]);
}

void sub_10038D580(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10038D588(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAppleBalanceInStoreTopUpToken setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_10038D5D4(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalanceInStoreTopUpToken setState:](v4, "setState:", [a3 integerValue]);
}

void sub_10038D618(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKAppleBalanceInStoreTopUpToken setTermsURL:](v4, "setTermsURL:", v5);
}

void sub_10038D664(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  id v5 = _CertificateChainForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAppleBalanceInStoreTopUpToken setCertificateChain:](v4, "setCertificateChain:", v6);
}

void sub_10038D6B4(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10038D6BC(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10038E738(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountBalanceSummary setOpeningDate:](v4, "setOpeningDate:", v5);
}

void sub_10038E784(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountBalanceSummary setClosingDate:](v4, "setClosingDate:", v5);
}

void sub_10038E7D0(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setPurchases:](v4, "setPurchases:", v6);
}

void sub_10038E820(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setPendingPurchases:](v4, "setPendingPurchases:", v6);
}

void sub_10038E870(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setBalanceTransfers:](v4, "setBalanceTransfers:", v6);
}

void sub_10038E8C0(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setInterestCharged:](v4, "setInterestCharged:", v6);
}

void sub_10038E910(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setFeesCharged:](v4, "setFeesCharged:", v6);
}

void sub_10038E960(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setPaymentsAndCredits:](v4, "setPaymentsAndCredits:", v6);
}

void sub_10038E9B0(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKCreditAccountBalanceSummary setPayments:](v4, "setPayments:", v6);
  }

void sub_10038EA08(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKCreditAccountBalanceSummary setCredits:](v4, "setCredits:", v6);
  }

void sub_10038EA60(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setPayments:](v4, "setPayments:", v6);
}

void sub_10038EAB0(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setCredits:](v4, "setCredits:", v6);
}

void sub_10038EB00(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setRewardsEarned:](v4, "setRewardsEarned:", v6);
}

void sub_10038EB50(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountBalanceSummary setRewardsRedeemed:](v4, "setRewardsRedeemed:", v6);
}

void sub_10038EC7C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10038F7B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  double v12 = objc_alloc_init(&OBJC_CLASS___PKPayLaterAccountProduct);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v12 withProperties:v7 values:a4];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterAccountProductDetails payLaterProductDetailsForProductPID:inDatabase:]( &OBJC_CLASS___PayLaterAccountProductDetails,  "payLaterProductDetailsForProductPID:inDatabase:",  a2,  v8));

  -[PKPayLaterAccountProduct setProductDetails:](v12, "setProductDetails:", v9);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  double v11 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterAccountProductEligibleSpend payLaterProductEligibleSpendForProductPID:inDatabase:]( &OBJC_CLASS___PayLaterAccountProductEligibleSpend,  "payLaterProductEligibleSpendForProductPID:inDatabase:",  a2,  v10));

  -[PKPayLaterAccountProduct setEligibleSpend:](v12, "setEligibleSpend:", v11);
  [*(id *)(a1 + 48) addObject:v12];
}

void sub_10038FBF0(id a1, PKPayLaterAccountProduct *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountProduct setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_10038FF04(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 3600.0));
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v1));

  [v2 setRepeating:1];
  [v2 setRequireNetworkConnectivity:1];
  [v2 setRequireMainsPower:1];
  [v2 setRequireScreenSleep:1];
  [v2 setRepeatInterval:86400.0];
  PDScheduledActivityRegister(@"PDSpotlightServiceClientIdentifier", @"PDSpotlightActivityIdentifier", v2);
}

void sub_1003902B0(uint64_t a1, uint64_t a2, id a3)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 104) indexingMetadataStatusForType:a2];
  id v7 = [*(id *)(*(void *)(a1 + 32) + 104) indexingMetadataVersionForType:a2];
  if (v6 == (id)1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(19LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 134217984;
      uint64_t v13 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Reseting metadata status for type %lu",  (uint8_t *)&v12,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 104) updateIndexingMetadataStatus:0 version:v7 forType:a2];
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    id v6 = 0LL;
  }

  if (v7 != a3)
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(19LL);
    double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 134218240;
      uint64_t v13 = a2;
      __int16 v14 = 2048;
      id v15 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Spotlight type %lu version has changed to %ld.",  (uint8_t *)&v12,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 104) markAllIndexedContentForReindexingOfType:a2];
    [*(id *)(*(void *)(a1 + 32) + 104) updateIndexingMetadataStatus:v6 version:a3 forType:a2];
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
  }

uint64_t sub_1003906E4(uint64_t a1)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v17;
    *(void *)&__int128 v4 = 138412290LL;
    __int128 v15 = v4;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 40) + 104),  "indexerItemWithUniqueIdentifier:",  v8,  v15,  (void)v16));
        uint64_t v10 = v9;
        if (v9)
        {
          double v11 = *(void **)(*(void *)(a1 + 40) + 104LL);
          int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 domainIdentifier]);
          objc_msgSend( v11,  "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:",  v8,  v12,  0,  objc_msgSend(v10, "type"),  0,  0);
        }

        else
        {
          uint64_t Object = PKLogFacilityTypeGetObject(19LL);
          int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = v15;
            uint64_t v21 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "No matching item for searchable item %@",  buf,  0xCu);
          }
        }
      }

      id v5 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }

    while (v5);
  }

  return 1LL;
}

void sub_100390AF8(id a1, PDSpotlightIndexerObserver *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "indexingStarted") & 1) != 0) {
    -[PDSpotlightIndexerObserver indexingStarted](v2, "indexingStarted");
  }
}

void sub_100390B98(id a1, PDSpotlightIndexerObserver *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "indexingCompleted") & 1) != 0) {
    -[PDSpotlightIndexerObserver indexingCompleted](v2, "indexingCompleted");
  }
}

void sub_100390E20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_100390E4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) unsignedIntegerValue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100390F10;
  void v13[3] = &unk_10063B580;
  uint64_t v10 = *(void *)(a1 + 48);
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 _checkConsistencyForItemsOfType:v9 withCompletion:v13];
}

uint64_t sub_100390F10(void *a1, char a2)
{
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) |= a2;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_100390F38(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)
    && os_variant_has_internal_ui(PKOSVariantSubsystem))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(19LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Spotlight index is missing items that should be indexed, reporting to ABC",  v11,  2u);
    }

    id v10 = objc_alloc_init(&OBJC_CLASS___PKAutoBugCaptureReporter);
    [v10 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"PDSpotlightIndexer" subtype:@"SpotlightIndexMissingItems" subtypeContext:0 payload:0];
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100391304(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100391314(uint64_t a1)
{
}

void sub_10039131C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  id v3 = v2;
  if (!*(void *)(a1 + 48))
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1003915EC;
    v21[3] = &unk_1006396D8;
    void v21[4] = *(void *)(a1 + 32);
    [v2 addOperation:v21];
  }

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100391738;
  v20[3] = &unk_1006396D8;
  void v20[4] = *(void *)(a1 + 32);
  [v3 addOperation:v20];
  v18[0] = 0LL;
  v18[1] = v18;
  v18[2] = 0x2020000000LL;
  char v19 = 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v4 + 11)) {
    goto LABEL_6;
  }
  if ([*(id *)(v4 + 32) willRequireProcessing])
  {
    uint64_t v4 = *(void *)(a1 + 32);
LABEL_6:
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1003917E8;
    v17[3] = &unk_1006396D8;
    void v17[4] = v4;
    [v3 addOperation:v17];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1003918A8;
    void v16[3] = &unk_1006428B8;
    void v16[4] = *(void *)(a1 + 32);
    v16[5] = v18;
    v16[6] = *(void *)(a1 + 48);
    [v3 addOperation:v16];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1003919BC;
    v15[3] = &unk_1006396D8;
    void v15[4] = *(void *)(a1 + 32);
    [v3 addOperation:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100391A80;
    void v14[3] = &unk_1006396D8;
    void v14[4] = *(void *)(a1 + 32);
    [v3 addOperation:v14];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_100391B44;
    void v13[3] = &unk_1006396D8;
    void v13[4] = *(void *)(a1 + 32);
    [v3 addOperation:v13];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_100391C08;
    v12[3] = &unk_1006396D8;
    void v12[4] = *(void *)(a1 + 32);
    [v3 addOperation:v12];
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391CCC;
  v11[3] = &unk_10063BBC8;
  void v11[4] = *(void *)(a1 + 32);
  void v11[5] = v18;
  [v3 addOperation:v11];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100391E24;
  v9[3] = &unk_100659750;
  __int128 v10 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 evaluateWithInput:v5 completion:v9]);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  _Block_object_dispose(v18, 8);
}

void sub_1003915D4(_Unwind_Exception *a1)
{
}

void sub_1003915EC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391698;
  v11[3] = &unk_100659728;
  id v12 = v6;
  id v13 = v7;
  void v11[4] = v8;
  id v9 = v6;
  id v10 = v7;
  [v8 _checkConsistencyWithCompletion:v11];
}

void sub_100391698(uint64_t a1)
{
  id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100391724;
  v3[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_100391724(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100391738(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(19LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Deleting duplicate index items", v10, 2u);
  }

  [*(id *)(*(void *)(a1 + 32) + 104) deleteDuplicateIndexerItems];
  v7[2](v7, v6, 0LL);
}

void sub_1003917E8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(a1 + 32) + 104) spotlightIndexingVersion] != (id)4)
  {
    [*(id *)(a1 + 32) _indexingStarted];
    uint64_t Object = PKLogFacilityTypeGetObject(19LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Existing indexing version does not match current version, resetting indexing",  v10,  2u);
    }
  }

  v7[2](v7, v6, 0LL);
}

void sub_1003918A8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100391990;
  void v18[3] = &unk_10063B580;
  uint64_t v8 = a1[5];
  id v20 = v7;
  uint64_t v21 = v8;
  id v19 = v6;
  id v9 = v6;
  id v10 = v7;
  id v11 = objc_retainBlock(v18);
  id v12 = objc_retainBlock(v11);
  uint64_t v13 = a1[4];
  id v14 = *(void **)(v13 + 72);
  *(void *)(v13 + 72) = v12;

  uint64_t v15 = a1[6];
  uint64_t v16 = 1LL;
  if (v15 != 1) {
    uint64_t v16 = 2LL;
  }
  if (v15) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  [*(id *)(a1[4] + 32) triggerAggregatorWithTriggerOrigin:v17];
}

uint64_t sub_100391990(void *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (*(_BYTE *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(_BYTE *)(v2 + 24) = v3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_1003919BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391A64;
  v11[3] = &unk_100641D20;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchPassesMetadataWithCompletion:", v11);
}

uint64_t sub_100391A64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 != 2);
}

void sub_100391A80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391B28;
  v11[3] = &unk_100641D20;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchTransactionsMetadataWithCompletion:", v11);
}

uint64_t sub_100391B28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 != 2);
}

void sub_100391B44(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391BEC;
  v11[3] = &unk_100641D20;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchFinanceKitTransactionsMetadataWithCompletion:", v11);
}

uint64_t sub_100391BEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 != 2);
}

void sub_100391C08(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391CB0;
  v11[3] = &unk_100641D20;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchFinanceKitAccountsMetadataWithCompletion:", v11);
}

uint64_t sub_100391CB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 != 2);
}

void sub_100391CCC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
    *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
  }

  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100391DA8;
  v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_processAllIndexingBatchesWithCompletion:", v11);
}

uint64_t sub_100391DA8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(19LL);
  char v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Spotlight indexing operation completed.",  v5,  2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100391E24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;

  uint64_t Object = PKLogFacilityTypeGetObject(19LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [v5 isCanceled];
    id v11 = @"NO";
    if (v10) {
      id v11 = @"YES";
    }
    int v16 = 138412290;
    uint64_t v17 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Overall indexing operation completed, was canceled: %@",  (uint8_t *)&v16,  0xCu);
  }

  kdebug_trace(730333388LL, 0LL, 0LL, 0LL, 0LL);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = *(unsigned __int8 *)(v12 + 10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 16));
  [*(id *)(a1 + 32) _indexingCompleted];
  if (v13)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Reset was pending, resetting now",  (uint8_t *)&v16,  2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_completeReset");
  }

  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0LL;
}

uint64_t sub_100391FB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100391FBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003922BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 136)) {
    id v5 = @"YES";
  }
  else {
    id v5 = @"NO";
  }
  uint64_t v44 = v5;
  if (*(_BYTE *)(a1 + 137)) {
    uint64_t v6 = @"YES";
  }
  else {
    uint64_t v6 = @"NO";
  }
  uint64_t v42 = v6;
  __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:&off_100690800]);
  id v39 = [v50 unsignedIntegerValue];
  __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:&off_1006907E8]);
  id v37 = [v49 unsignedIntegerValue];
  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:&off_100690830]);
  id v35 = [v48 unsignedIntegerValue];
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:&off_100690848]);
  id v33 = [v47 unsignedIntegerValue];
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:&off_100690800]);
  id v32 = [v46 unsignedIntegerValue];
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:&off_1006907E8]);
  id v30 = [v40 unsignedIntegerValue];
  __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:&off_100690830]);
  id v28 = [v38 unsignedIntegerValue];
  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:&off_100690848]);
  id v26 = [v36 unsignedIntegerValue];
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:&off_100690800]);
  id v24 = [v34 unsignedIntegerValue];
  id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:&off_1006907E8]);
  id v22 = [v31 unsignedIntegerValue];
  id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:&off_100690830]);
  id v21 = [v29 unsignedIntegerValue];
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:&off_100690848]);
  id v19 = [v27 unsignedIntegerValue];
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:&off_100690800]);
  id v18 = [v25 unsignedIntegerValue];
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:&off_1006907E8]);
  id v17 = [v23 unsignedIntegerValue];
  id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:&off_100690830]);
  id v16 = [v20 unsignedIntegerValue];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:&off_100690848]);
  id v8 = [v7 unsignedIntegerValue];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKeyedSubscript:&off_100690800]);
  id v10 = [v9 unsignedIntegerValue];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKeyedSubscript:&off_1006907E8]);
  id v12 = [v11 unsignedIntegerValue];
  int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKeyedSubscript:&off_100690830]);
  id v14 = [v13 unsignedIntegerValue];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKeyedSubscript:&off_100690848]);
  __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Fetching metadata: %@.\nIndexing: %@.\nNeeds Indexing / Indexing / Indexed / Count in Spotlight\nPasses: %lu / %lu / %lu (SP:%lu) / %lu.\nCard Numbers:%lu / %lu / %lu (SP:%lu) / %lu.\nTransactions:%lu / %lu / %lu (SP:%lu) / %lu. \nFinanceKit Transactions:%lu / %lu / %lu / %lu. \nFinanceKit Accounts:%lu / %lu / %lu / %lu. \nRegions per type: %lu / %lu / %lu / %lu / %lu.\nRegions not localized: %lu\nTransactions missing regions: %lu",  v44,  v42,  v39,  v37,  v35,  a2,  v33,  v32,  v30,  v28,  a4,  v26,  v24,  v22,  v21,  a3,  v19,  v18,  v17,  v16,  v8,  v10,  v12,  v14,  [v15 unsignedIntegerValue],  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128)));

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10039291C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_10039295C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003929F4;
  v9[3] = &unk_1006597F0;
  uint64_t v6 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v5;
  uint64_t v13 = a3;
  __int128 v7 = *(_OWORD *)(a1 + 64);
  __int128 v11 = *(_OWORD *)(a1 + 48);
  __int128 v12 = v7;
  id v8 = v5;
  [v6 addOperation:v9];
}

void sub_1003929F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"contentType == %@",  *(void *)(a1 + 40)));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100392AE0;
  void v13[3] = &unk_1006597C8;
  uint64_t v18 = *(void *)(a1 + 80);
  __int128 v10 = *(_OWORD *)(a1 + 64);
  __int128 v16 = *(_OWORD *)(a1 + 48);
  __int128 v17 = v10;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v8 _performQueryWithQueryString:v9 completion:v13];
}

void sub_100392AE0(void *a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = a1[10];
  if (v7 == 4)
  {
    uint64_t v8 = a1[8];
  }

  else if (v7 == 1)
  {
    uint64_t v8 = a1[7];
  }

  else
  {
    if (v7) {
      goto LABEL_8;
    }
    uint64_t v8 = a1[6];
  }

  *(void *)(*(void *)(v8 + 8) + 24LL) = a2;
LABEL_8:
  id v9 = v6;
  if (v6) {
    objc_storeStrong((id *)(*(void *)(a1[9] + 8LL) + 40LL), a3);
  }
  (*(void (**)(void))(a1[5] + 16LL))();
}

uint64_t sub_100392B7C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  *(void *)(*(void *)(a1[6] + 8LL) + 24LL),  *(void *)(*(void *)(a1[7] + 8LL) + 24LL),  *(void *)(*(void *)(a1[8] + 8LL) + 40LL));
}

void sub_100392C78(id a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(19LL);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Spotlight reset completed after region reset.",  v3,  2u);
  }
}

void sub_100392E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100392EAC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(19LL);
    char v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating passes metadata", buf, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1LL;
    [*(id *)(*(void *)(a1 + 32) + 104) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) version:*(void *)(a1 + 56) forType:0];
  }

  if (*(_BYTE *)(a1 + 73))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject(19LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating pass details metadata", v13, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1LL;
    [*(id *)(*(void *)(a1 + 32) + 104) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) version:*(void *)(a1 + 64) forType:4];
  }

  if (*(_BYTE *)(a1 + 72))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 2LL;
    [*(id *)(*(void *)(a1 + 32) + 104) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) version:*(void *)(a1 + 56) forType:0];
    uint64_t v6 = PKLogFacilityTypeGetObject(19LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Passes metadata updated", v12, 2u);
    }
  }

  if (*(_BYTE *)(a1 + 73))
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 2LL;
    [*(id *)(*(void *)(a1 + 32) + 104) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) version:*(void *)(a1 + 64) forType:4];
    uint64_t v8 = PKLogFacilityTypeGetObject(19LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Pass details metadata updated", v11, 2u);
    }
  }

  return 1LL;
}

void sub_100393260(_Unwind_Exception *a1)
{
}

void sub_100393278(void *a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a3;
  uint64_t v11 = a6;
  id v12 = [a2 count];
  uint64_t Object = PKLogFacilityTypeGetObject(19LL);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    id v19 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Transactions metadata batch of %lu received",  buf,  0xCu);
  }

  if (v12 && v12 == [v10 count])
  {
    id v15 = *(void **)(a1[4] + 104LL);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10039344C;
    v17[3] = &unk_1006598A8;
    void v17[4] = v12;
    [v15 performTransactionWithBlock:v17];
  }

  if ((a5 & 1) != 0)
  {
    if (v11) {
      v11[2](v11);
    }
  }

  else
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Transactions metadata updated", buf, 2u);
    }

    *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = 2LL;
    [*(id *)(a1[4] + 104) updateIndexingMetadataStatus:*(void *)(*(void *)(a1[6] + 8) + 24) version:a1[7] forType:1];
    uint64_t v16 = a1[5];
    if (v16) {
      (*(void (**)(uint64_t, void))(v16 + 16))(v16, *(void *)(*(void *)(a1[6] + 8LL) + 24LL));
    }
  }
}

uint64_t sub_10039344C()
{
  return 1LL;
}

id sub_1003936A8(id a1, PKPaymentTransaction *a2)
{
  return -[PKPaymentTransaction identifier](a2, "identifier");
}

id *sub_100393B4C(id *result)
{
  if (!*((_BYTE *)result + 40)) {
    return (id *)[result[4] _performIndexingOperationsWithOrigin:1];
  }
  return result;
}

id *sub_100393C44(id *result)
{
  if (!*((_BYTE *)result + 40)) {
    return (id *)[result[4] _performIndexingOperationsWithOrigin:1];
  }
  return result;
}

id *sub_100393D3C(id *result)
{
  if (!*((_BYTE *)result + 40)) {
    return (id *)[result[4] _performIndexingOperationsWithOrigin:1];
  }
  return result;
}

void sub_1003941AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[9];
  if (v3)
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(unsigned __int8 *)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = 0LL;
  }

  else
  {
    [v2 _indexingCompleted];
  }

void sub_100394384(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_100394504(id a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(19LL);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "FinHealth data deleted after database restoration",  v3,  2u);
  }
}

uint64_t sub_1003948C0(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    LOBYTE(v6) = 1;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)i);
        id v9 = objc_alloc(*(Class *)(a1 + 48));
        id v10 = objc_msgSend(v9, "initWithEvent:inDatabase:", v8, *(void *)(a1 + 40), (void)v12);
        uint64_t v6 = v6 & (v10 != 0LL);
      }

      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v4);
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

void sub_100394BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_alloc_init(&OBJC_CLASS___PKChangeHistoryEvent);
  uint64_t v6 = *(void **)(a1 + 48);
  __int128 v7 = *(void **)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allKeys]);
  [v6 applyPropertySetters:v7 toObject:v9 withProperties:v8 values:a4];

  [*(id *)(a1 + 40) addObject:v9];
}

uint64_t sub_100394D88(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    LODWORD(v6) = 1;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(a1 + 48);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * (void)i), "identifier", (void)v13));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 predicateForChangeEventWithIdentifier:v9]);

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 40) predicate:v10]);
        uint64_t v6 = v6 & [v11 deleteAllEntities];
      }

      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v4);
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  return v6;
}

id sub_100395038(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 32) predicate:*(void *)(a1 + 40)]);
  id v2 = [v1 deleteAllEntities];

  return v2;
}

void sub_100395480(id a1, PKChangeHistoryEvent *a2, id a3)
{
}

void sub_100395488(id a1, PKChangeHistoryEvent *a2, id a3)
{
  id v4 = a2;
  -[PKChangeHistoryEvent setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003954CC(id a1, PKChangeHistoryEvent *a2, id a3)
{
  id v4 = a2;
  -[PKChangeHistoryEvent setRecordType:](v4, "setRecordType:", [a3 integerValue]);
}

void sub_100395510(id a1, PKChangeHistoryEvent *a2, id a3)
{
}

void sub_100395518(id a1, PKChangeHistoryEvent *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKChangeHistoryEvent setTimestamp:](v4, "setTimestamp:", v5);
}

void sub_100395A98(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id sub_100395BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a3 values:a4];
}

void sub_100395C80(id a1, PKPeerPaymentPreferencesProfileAppearance *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesProfileAppearance setShareLastName:](v4, "setShareLastName:", [a3 BOOLValue]);
}

void sub_100395CC4(id a1, PKPeerPaymentPreferencesProfileAppearance *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesProfileAppearance setShareProfilePicture:]( v4,  "setShareProfilePicture:",  [a3 BOOLValue]);
}

void sub_1003969AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v16 = a3;
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionFeeItem);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v6 withProperties:v16 values:a4];
  uint64_t v7 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a4
                                                          + 8LL
                                                          * (void)[v16 indexOfObject:@"amount"]));
  uint64_t v8 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = (NSString *)*(id *)(a4 + 8 * (void)[v16 indexOfObject:@"currency"]);
  if (v8)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v11 = -[NSDecimalNumber isEqualToNumber:](v8, "isEqualToNumber:", v10);

    if ((v11 & 1) == 0)
    {
      if (v9)
      {
        uint64_t v12 = PKCurrencyAmountCreate(v8, v9, 0LL);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        -[PKPaymentTransactionFeeItem setCurrencyAmount:](v6, "setCurrencyAmount:", v13);
      }
    }
  }

  id v14 = *(id *)(a4 + 8 * (void)[v16 count] - 8);
  __int128 v15 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v14]);
  if (!v15)
  {
    __int128 v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*(id *)(a1 + 40) setObject:v15 forKey:v14];
  }

  -[NSMutableArray addObject:](v15, "addObject:", v6);
}

void sub_100396C04(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = a2;
  +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransactionFee,  "applyPropertySetters:toObject:withProperties:values:",  v5,  v6,  v7,  a3);
  uint64_t v8 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a3
                                                          + 8LL
                                                          * (void)[v7 indexOfObject:@"amount"]));
  id v16 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v8);
  id v9 = [v7 indexOfObject:@"currency"];

  id v10 = (NSString *)*(id *)(a3 + 8LL * (void)v9);
  if (v16)
  {
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v12 = -[NSDecimalNumber isEqualToNumber:](v16, "isEqualToNumber:", v11);

    if ((v12 & 1) == 0)
    {
      if (v10)
      {
        __int128 v13 = *(void **)(a1 + 40);
        uint64_t v14 = PKCurrencyAmountCreate(v16, v10, 0LL);
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        [v13 setCurrencyAmount:v15];
      }
    }
  }
}

void sub_100396E58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  __int128 v15 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionFeeItem);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  uint64_t v7 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a4
                                                          + 8LL
                                                          * (void)[v6 indexOfObject:@"amount"]));
  uint64_t v8 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = [v6 indexOfObject:@"currency"];

  id v10 = (NSString *)*(id *)(a4 + 8LL * (void)v9);
  if (v8)
  {
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v12 = -[NSDecimalNumber isEqualToNumber:](v8, "isEqualToNumber:", v11);

    if ((v12 & 1) == 0)
    {
      if (v10)
      {
        uint64_t v13 = PKCurrencyAmountCreate(v8, v10, 0LL);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        -[PKPaymentTransactionFeeItem setCurrencyAmount:](v15, "setCurrencyAmount:", v14);
      }
    }
  }

  [*(id *)(a1 + 40) addObject:v15];
}

void sub_100397160(id a1, PKPaymentTransactionFeeItem *a2, id a3)
{
}

void sub_100397168(id a1, PKPaymentTransactionFeeItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionFeeItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003971AC(id a1, PKPaymentTransactionFeeItem *a2, id a3)
{
}

void sub_100397568(_Unwind_Exception *a1)
{
}

uint64_t sub_100397580(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = (NSNumber *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [*(id *)(a1 + 32) persistentID]));
  SQLiteBindFoundationValueToStatement(a2, 1, v4);

  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_10039770C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100397724(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = (NSNumber *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [*(id *)(a1 + 32) persistentID]));
  SQLiteBindFoundationValueToStatement(a2, 1, v4);

  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1003978C8(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)v6);
        uint64_t v8 = *(void **)(a1 + 40);
        id v9 = objc_alloc(*(Class *)(a1 + 64));
        id v10 = objc_msgSend( v9,  "initWithBarcodeCredential:withPaymentApplication:inDatabase:",  v7,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  (void)v12);
        [v8 safelyAddObject:v10];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v4);
  }

  return 1LL;
}

id sub_100397C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___BarcodeCredential,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1003983A8(id a1, PKBarcodeCredential *a2, id a3)
{
}

void sub_1003983B0(id a1, PKBarcodeCredential *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKBarcodeCredential setExpirationTimestamp:](v4, "setExpirationTimestamp:", v5);
}

void sub_1003983FC(id a1, PKBarcodeCredential *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___PKEncryptedDataObject, v6);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v7));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v8,  v4,  0LL));

  -[PKBarcodeCredential setValue:](v5, "setValue:", v9);
}

void sub_1003985A8(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___BarcodeCredential);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v6 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  [*(id *)(a1 + 40) safelyAddObject:v6];
}

void sub_100398D04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
}

int64_t sub_100398D4C( id a1, PKPassAuxiliaryRegistrationRequirement *a2, PKPassAuxiliaryRegistrationRequirement *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassAuxiliaryRegistrationRequirement identifier](a2, "identifier"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassAuxiliaryRegistrationRequirement identifier](v4, "identifier"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_100398DB8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) isReferencing:a2];
}

void sub_100398DC4(uint64_t a1, uint64_t a2)
{
}

void sub_100398DD0(uint64_t a1)
{
}

void sub_100398DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([*(id *)(a1 + 32) containsObject:v3] & 1) == 0)
  {
    [*(id *)(a1 + 32) addObject:v3];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v3]);
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8LL * (void)v8);
          id WeakRetained = (void (**)(id, void))objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 56)
                                                                                                  + 8LL)
                                                                                      + 40LL));
          WeakRetained[2](WeakRetained, v9);

          uint64_t v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v6);
    }

    [*(id *)(a1 + 48) addObject:v3];
  }
}

void sub_100399068( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100399080(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100399090(uint64_t a1)
{
}

void sub_100399098(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v13 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = v7;
  id v10 = v8;
  if (v9 == v10)
  {
  }

  else
  {
    __int128 v11 = v10;
    if (!v9 || !v10)
    {

      goto LABEL_9;
    }

    unsigned int v12 = [v9 isEqualToString:v10];

    if (!v12) {
      goto LABEL_9;
    }
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  *a4 = 1;
LABEL_9:
}

uint64_t PKPassEligibleForAuxiliaryCapabilityRegistration(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 auxiliaryRegistrationRequirements]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allRequirements]);
  id v3 = [v2 count];

  if ((PKIsMac(v4, v5) & 1) != 0) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = PKIsTV() ^ 1;
  }
  if (v3) {
    return v6;
  }
  else {
    return 0LL;
  }
}

void sub_1003993CC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  0LL));
    uint64_t v2 = PKAuxiliaryCapabilityManagerPerformScheduledCheckRetrySeconds();
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    if (v3)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(28LL);
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        __int128 v11 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Scheduling schedule activity for ever %@ minutes.",  (uint8_t *)&v10,  0xCu);
      }

      double v6 = (double)(uint64_t)[v3 integerValue] * 60.0;
    }

    else
    {
      [v1 setRequireScreenSleep:1];
      [v1 setRequireMainsPower:1];
      double v6 = 86400.0;
    }

    [v1 setRepeatInterval:v6];
    [v1 setRequireNetworkConnectivity:1];
    [v1 setRepeating:1];
    [v1 setReason:@"check pass registration state"];
    uint64_t Criteria = PDScheduledActivityGetCriteria( @"PDAuxiliaryCapabilityManager",  @"checkPassRegistrationState");
    uint64_t v8 = objc_claimAutoreleasedReturnValue(Criteria);
    id v9 = (void *)v8;
    if (!v8 || (PKEqualObjects(v8, v1) & 1) == 0) {
      PDScheduledActivityRegister(@"PDAuxiliaryCapabilityManager", @"checkPassRegistrationState", v1);
    }
  }

id sub_1003995DC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) addObject:*(void *)(a1 + 40)];
}

id sub_100399664(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) removeObject:*(void *)(a1 + 40)];
}

void sub_100399670(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100399700;
    v6[3] = &unk_10063AC90;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_100399700(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) allObjects]);
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      double v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        ++v6;
      }

      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1003998A8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 devicePaymentApplications]);
    BOOL v4 = [v3 count] == 0;
  }

  else
  {
    BOOL v4 = 1;
  }

  double v6 = (PDARRISO18013DecryptionProvider *)a1[5];
  uint64_t v5 = (void *)a1[6];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100399960;
  v9[3] = &unk_100659C98;
  id v7 = v5;
  uint64_t v8 = a1[5];
  id v10 = v7;
  uint64_t v11 = v8;
  BOOL v12 = v4;
  sub_100399BFC(v6, v7, !v4, v9);
}

void sub_100399960(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      *(_DWORD *)__int128 buf = 138412546;
      id v16 = v6;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "passAddedOrUpdated: Failed to check current status for pass: %@, with error: %@",  buf,  0x16u);
    }
  }

  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100399AA0;
  v11[3] = &unk_100659C98;
  char v14 = *(_BYTE *)(a1 + 48);
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 40);
  id v12 = v9;
  uint64_t v13 = v10;
  [v8 registerAuxiliaryCapabilitiesForPass:v9 force:0 sessionExchangeToken:0 completion:v11];
}

void sub_100399AA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 48)) {
      double v6 = @"new";
    }
    else {
      double v6 = @"existing";
    }
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    *(_DWORD *)__int128 buf = 138412802;
    id v12 = v6;
    __int16 v13 = 2112;
    char v14 = v7;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "passAddedOrUpdated: Auxiliary registration finished for %@ pass: %@, with error: %@",  buf,  0x20u);
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100399BF0;
  v9[3] = &unk_100659C70;
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 32);
  sub_100399670(v8, v9);
}

id sub_100399BF0(uint64_t a1, void *a2)
{
  return _[a2 registeredPassForAuxiliaryCapabilityPass:*(void *)(a1 + 32)];
}

void sub_100399BFC(PDARRISO18013DecryptionProvider *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 auxiliaryRegistrationRequirements]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allRequirements]);
    id v12 = sub_10039AE68(a1, v11, 0LL);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    if ([v13 count])
    {
      char v14 = (void *)objc_claimAutoreleasedReturnValue([v7 devicePaymentApplications]);
      id v15 = [v14 count];

      if (v15)
      {
        id v16 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v39 = 0x3032000000LL;
        uint64_t v40 = sub_100399080;
        __int128 v41 = sub_100399090;
        id v42 = 0LL;
        v36[0] = 0LL;
        v36[1] = v36;
        v36[2] = 0x3032000000LL;
        void v36[3] = sub_100399080;
        v36[4] = sub_100399090;
        id v37 = 0LL;
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_10039D6D0;
        v30[3] = &unk_100659F58;
        void v30[4] = a1;
        id v17 = v13;
        id v31 = v17;
        id v32 = v7;
        id v33 = v36;
        p___int128 buf = &buf;
        uint64_t v35 = a3;
        [v16 addOperation:v30];
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        v26[2] = sub_10039D830;
        v26[3] = &unk_100639750;
        void v26[4] = a1;
        id v27 = v17;
        id v28 = v36;
        uint64_t v29 = &buf;
        [v16 addOperation:v26];
        id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_10039DB40;
        v22[3] = &unk_10063F118;
        v22[4] = a1;
        id v23 = v9;
        __int128 v25 = &buf;
        id v24 = v8;
        id v19 = [v16 evaluateWithInput:v18 completion:v22];

        _Block_object_dispose(v36, 8);
        _Block_object_dispose(&buf, 8);
      }

      else
      {
        uint64_t Object = PKLogFacilityTypeGetObject(28LL);
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Skipping capability registration check for %@ because pass missing payment application",  (uint8_t *)&buf,  0xCu);
        }

        (*((void (**)(id, void))v8 + 2))(v8, 0LL);
      }
    }

    else
    {
      (*((void (**)(id, void))v8 + 2))(v8, 0LL);
    }
  }
}

void sub_100399F38(_Unwind_Exception *a1)
{
}

NSCopying *__cdecl sub_10039A15C(id a1, PKPassAuxiliaryRegistrationDecryptionRequirement *a2)
{
  return (NSCopying *)+[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[PKPassAuxiliaryRegistrationDecryptionRequirement type](a2, "type"));
}

void sub_10039A18C(uint64_t a1)
{
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v28;
    id v7 = (void *)PKPassSharingBundleFileName;
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v26 = v4;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v28 != v6) {
          objc_enumerationMutation(v2);
        }
        id v9 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localURL", v26));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 lastPathComponent]);

        id v12 = v11;
        id v13 = v7;
        char v14 = v13;
        if (v12 == v13)
        {

LABEL_15:
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:&off_100690860]);
          uint64_t Object = PKLogFacilityTypeGetObject(28LL);
          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          if (v17)
          {
            if (v20)
            {
              *(_DWORD *)__int128 buf = v26;
              id v32 = v12;
              __int16 v33 = 2112;
              __int128 v34 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Updating requirement to not registered because unable to handle asset %@. Requirement: %@",  buf,  0x16u);
            }

            [*(id *)(*(void *)(a1 + 48) + 8) updateAuxiliaryRegistrationRequirement:v17 pass:*(void *)(a1 + 56) isRegistered:0];
          }

          else
          {
            if (v20)
            {
              id v22 = [&off_100690860 unsignedIntegerValue];
              uint64_t v24 = PKDeviceDecryptionTypeToString(v22, v23);
              __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
              *(_DWORD *)__int128 buf = 138412290;
              id v32 = v25;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%@ decryption type found, but no corresponding decryption requirement found",  buf,  0xCu);
            }
          }

          goto LABEL_24;
        }

        if (v12) {
          BOOL v15 = v7 == 0LL;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
        }

        else
        {
          unsigned int v16 = [v12 isEqualToString:v13];

          if (v16) {
            goto LABEL_15;
          }
        }

        uint64_t v21 = PKLogFacilityTypeGetObject(28LL);
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v32 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "No valid decryption type found for %@",  buf,  0xCu);
        }

void sub_10039A464(uint64_t a1, char a2)
{
  if (a1)
  {
    int v4 = PKAuxiliaryCapabilityManagerDisabled();
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v7)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping scheduled check of pass registration state because manager disabled",  buf,  2u);
      }

      id v8 = v6;
    }

    else
    {
      if (v7)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Beginning scheduled check of pass registration state",  buf,  2u);
      }

      id v8 = (os_log_s *)objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) passesOfType:1]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectsPassingTest:&stru_10065A2F0]);

      if ([v10 count])
      {
        double Current = CFAbsoluteTimeGetCurrent();
        uint64_t Time = PDAuxiliaryCapabilityLastRemoteFetchTime(&v34);
        if ((a2 & 1) != 0 || !v34 || (double v14 = v13, Current - v13 > 604800.0))
        {
          PDSetAuxiliaryCapabilityLastRemoteFetchTime(Time, Current);
          v33[0] = _NSConcreteStackBlock;
          v33[1] = 3221225472LL;
          v33[2] = sub_1003A0990;
          v33[3] = &unk_1006396D8;
          void v33[4] = a1;
          -[os_log_s addOperation:](v8, "addOperation:", v33);
        }

        else
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 134349056;
            unint64_t v37 = (unint64_t)v14;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping checking remote state, lastCheckedTime: %{public}lu",  buf,  0xCu);
          }
        }

        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        id v22 = v10;
        id obj = v10;
        id v15 = [obj countByEnumeratingWithState:&v29 objects:v35 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v30;
          do
          {
            for (i = 0LL; i != v16; i = (char *)i + 1)
            {
              if (*(void *)v30 != v17) {
                objc_enumerationMutation(obj);
              }
              uint64_t v19 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
              v28[0] = _NSConcreteStackBlock;
              v28[1] = 3221225472LL;
              void v28[2] = sub_1003A0A4C;
              v28[3] = &unk_1006396D8;
              void v28[4] = a1;
              -[os_log_s addOperation:](v8, "addOperation:", v28);
              v26[0] = _NSConcreteStackBlock;
              v26[1] = 3221225472LL;
              v26[2] = sub_1003A0B0C;
              v26[3] = &unk_10065A318;
              char v27 = a2;
              void v26[4] = a1;
              void v26[5] = v19;
              -[os_log_s addOperation:](v8, "addOperation:", v26);
              v24[0] = _NSConcreteStackBlock;
              v24[1] = 3221225472LL;
              v24[2] = sub_1003A0BE8;
              v24[3] = &unk_10065A318;
              char v25 = a2;
              v24[4] = a1;
              v24[5] = v19;
              -[os_log_s addOperation:](v8, "addOperation:", v24);
            }

            id v16 = [obj countByEnumeratingWithState:&v29 objects:v35 count:16];
          }

          while (v16);
        }

        BOOL v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
        id v21 = -[os_log_s evaluateWithInput:completion:](v8, "evaluateWithInput:completion:", v20, &stru_10065A358);

        id v10 = v22;
      }

      else
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "No passes have auxiliary capability requirements.",  buf,  2u);
        }
      }
    }
  }

void sub_10039A930(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v3 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  v42[0] = 0LL;
  v42[1] = v42;
  v42[2] = 0x3032000000LL;
  v42[3] = sub_100399080;
  v42[4] = sub_100399090;
  uint64_t v43 = @"initial";
  v40[0] = 0LL;
  v40[1] = v40;
  v40[2] = 0x3032000000LL;
  v40[3] = sub_100399080;
  void v40[4] = sub_100399090;
  id v41 = 0LL;
  id v4 = +[NSMapTable pk_createStrongPointerPersonalityToStrongObjects]( &OBJC_CLASS___NSMapTable,  "pk_createStrongPointerPersonalityToStrongObjects");
  v38[0] = 0LL;
  v38[1] = v38;
  v38[2] = 0x3032000000LL;
  v38[3] = sub_100399080;
  v38[4] = sub_100399090;
  id v39 = 0LL;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10039ACF8;
  v32[3] = &unk_100659D00;
  uint64_t v35 = v42;
  __int128 v36 = v38;
  id v5 = *(void **)(a1 + 48);
  v32[4] = *(void *)(a1 + 40);
  id v33 = v5;
  char v34 = v2;
  unint64_t v37 = v40;
  [v3 addOperation:v32];
  v30[0] = 0LL;
  v30[1] = v30;
  v30[2] = 0x3032000000LL;
  v30[3] = sub_100399080;
  void v30[4] = sub_100399090;
  id v31 = 0LL;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10039B06C;
  v24[3] = &unk_100659D50;
  int8x16_t v13 = *(int8x16_t *)(a1 + 32);
  __int128 v26 = v42;
  char v27 = v38;
  id v6 = (id)v13.i64[0];
  int8x16_t v25 = vextq_s8(v13, v13, 8uLL);
  __int128 v28 = v30;
  __int128 v29 = v40;
  [v3 addOperation:v24];
  for (unint64_t i = 0; i < (unint64_t)[*(id *)(a1 + 48) count]; ++i)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectAtIndexedSubscript:i]);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10039B2C4;
    v23[3] = &unk_100659DA0;
    v23[9] = v30;
    v23[10] = i;
    v23[7] = v42;
    v23[8] = v38;
    void v23[4] = v8;
    void v23[5] = v4;
    v23[6] = *(void *)(a1 + 40);
    [v3 addOperation:v23];
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10039B54C;
  v22[3] = &unk_100659DC8;
  v22[4] = *(void *)(a1 + 40);
  void v22[5] = v42;
  v22[6] = v38;
  void v22[7] = v30;
  v22[8] = v40;
  [v3 addOperation:v22];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v14[0] = _NSConcreteStackBlock;
  void v14[2] = sub_10039B9D4;
  void v14[3] = &unk_100659E18;
  id v10 = *(void **)(a1 + 48);
  void v14[4] = *(void *)(a1 + 40);
  id v18 = v40;
  uint64_t v19 = v38;
  BOOL v20 = v30;
  id v21 = v42;
  v14[1] = 3221225472LL;
  id v15 = v10;
  id v11 = *(id *)(a1 + 56);
  id v16 = v4;
  id v17 = v11;
  id v12 = [v3 evaluateWithInput:v9 completion:v14];

  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v38, 8);

  _Block_object_dispose(v40, 8);
  _Block_object_dispose(v42, 8);
}

void sub_10039ACA4(_Unwind_Exception *a1)
{
}

void sub_10039ACF8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  BOOL v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateProviders";

  id v10 = sub_10039AE68(*(PDARRISO18013DecryptionProvider **)(a1 + 32), *(void **)(a1 + 40), &v21);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int8x16_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  if (v21)
  {
    BOOL v14 = 0LL;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v23 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Pass %@ has no valid providers for all requirements",  buf,  0xCu);
    }

    uint64_t v18 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  0LL));
    uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8LL);
    BOOL v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    BOOL v14 = v21 == 0;
  }

  v7[2](v7, v6, v14);
}

PKProviderForCapabilityMap *sub_10039AE68(PDARRISO18013DecryptionProvider *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id v22 = v5;
  if (a1)
  {
    id v6 = v5;
    if (a3) {
      *a3 = 1;
    }
    BOOL v7 = objc_alloc_init(&OBJC_CLASS___PKProviderForCapabilityMap);
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v24;
      do
      {
        for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(v8);
          }
          int8x16_t v13 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
          id v14 = [v13 role];
          if (v14 == (id)1)
          {
            uint64_t v17 = sub_1003A08C4(a1, v13);
            uint64_t v16 = objc_claimAutoreleasedReturnValue(v17);
          }

          else
          {
            if (v14 != (id)2) {
              goto LABEL_15;
            }
            id v15 = sub_1003A07CC((uint64_t)a1, v13);
            uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
          }

          uint64_t v18 = (void *)v16;
          if (v16)
          {
            -[PKProviderForCapabilityMap addCapability:provider:](v7, "addCapability:provider:", v13, v16);

            continue;
          }

void sub_10039B06C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateContext";

  uint64_t v10 = *(void *)(a1 + 32);
  v16[0] = (void (*)(void, void, void))_NSConcreteStackBlock;
  v16[1] = (void (*)(void, void, void))3221225472LL;
  void v16[2] = (void (*)(void, void, void))sub_10039B138;
  void v16[3] = (void (*)(void, void, void))&unk_100659D28;
  __int128 v19 = *(_OWORD *)(a1 + 64);
  id v17 = v6;
  id v18 = v7;
  id v11 = v6;
  id v12 = v7;
  sub_10039B1CC(v10, v13, v14, v15, v16);
}

void sub_10039B138(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v11 != 0LL);
}

void sub_10039B1CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  if (a1)
  {
    uint64_t v6 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v10 = NSDebugDescriptionErrorKey;
    id v11 = @"Platform not supported";
    uint64_t v7 = a5;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v6,  -1LL,  v8));
    ((void (**)(void, void, void *))a5)[2](v7, 0LL, v9);
  }

void sub_10039B2C4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ExistingKeyMaterialCheck%lu",  a1[10]));
  uint64_t v9 = *(void *)(a1[7] + 8LL);
  NSErrorUserInfoKey v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[8] + 8) + 40) providerForCapability:a1[4]]);
  if ((objc_opt_respondsToSelector(v11, "existingKeyMaterialForRequirement:context:completion:") & 1) != 0)
  {
    v25[0] = _NSConcreteStackBlock;
    uint64_t v12 = a1[8];
    uint64_t v13 = *(void *)(a1[9] + 8LL);
    v25[2] = sub_10039B454;
    v25[3] = &unk_100659D78;
    uint64_t v14 = *(void *)(v13 + 40);
    v25[1] = 3221225472LL;
    __int128 v26 = *((_OWORD *)a1 + 2);
    uint64_t v15 = a1[6];
    id v29 = v7;
    uint64_t v30 = v12;
    uint64_t v27 = v15;
    id v28 = v6;
    id v16 = v6;
    id v17 = v7;
    [v11 existingKeyMaterialForRequirement:(void)v26 context:v14 completion:v25];

    id v18 = v29;
  }

  else
  {
    __int128 v19 = *(dispatch_queue_s **)(a1[6] + 64LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10039B538;
    block[3] = &unk_1006396B0;
    id v23 = v6;
    id v24 = v7;
    id v20 = v6;
    id v21 = v7;
    dispatch_async(v19, block);

    id v18 = v24;
  }
}

void sub_10039B454(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2 == 1)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) removeCapability:*(void *)(a1 + 32)];
    if (v5) {
      [*(id *)(a1 + 40) setObject:v5 forKey:*(void *)(a1 + 32)];
    }
  }

  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 64LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10039B524;
  v7[3] = &unk_1006396B0;
  id v9 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 56);
  dispatch_async(v6, v7);
}

uint64_t sub_10039B524(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_10039B538(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10039B54C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"GenerateKeys";

  uint64_t v10 = a1[4];
  id v11 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  uint64_t v12 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10039B640;
  void v16[3] = &unk_10063B638;
  uint64_t v13 = a1[8];
  id v18 = v7;
  uint64_t v19 = v13;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  sub_10039B69C(v10, v11, v12, 1, v16);
}

void sub_10039B640(void *a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v4 != 0LL);
}

void sub_10039B69C(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v29 = a2;
  id v9 = a3;
  id v28 = a5;
  if (a1)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 pass]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v9 validCertificateIdentifiers]);
    id v12 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v53[0] = 0LL;
    v53[1] = v53;
    v53[2] = 0x3032000000LL;
    v53[3] = sub_100399080;
    void v53[4] = sub_100399090;
    id v54 = 0LL;
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    v46[2] = sub_10039E770;
    v46[3] = &unk_10065A0F0;
    id v14 = v12;
    id v47 = v14;
    id v15 = v9;
    id v48 = v15;
    __int128 v51 = v53;
    char v52 = a4;
    id v16 = v11;
    id v49 = v16;
    id v17 = v13;
    __int128 v50 = v17;
    [v29 enumerateCapabilities:v46];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_10039EAE4;
    v39[3] = &unk_10063CFE0;
    id v18 = v17;
    uint64_t v40 = v18;
    id v19 = v16;
    id v41 = v19;
    uint64_t v42 = a1;
    id v20 = v15;
    id v43 = v20;
    id v21 = v29;
    id v44 = v21;
    __int128 v45 = v53;
    [v14 addOperation:v39];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_10039F014;
    v33[3] = &unk_10065A190;
    id v22 = v14;
    id v34 = v22;
    id v23 = v19;
    id v35 = v23;
    id v36 = v20;
    __int128 v38 = v53;
    id v24 = v27;
    id v37 = v24;
    [v21 enumerateInTopologicalOrderWithContext:v36 enumerator:v33];
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10039F4B4;
    v30[3] = &unk_1006499A0;
    void v30[4] = a1;
    id v31 = v28;
    __int128 v32 = v53;
    id v26 = [v22 evaluateWithInput:v25 completion:v30];

    _Block_object_dispose(v53, 8);
  }
}

void sub_10039B9BC(_Unwind_Exception *a1)
{
}

void sub_10039B9D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 64);
  block[1] = 3221225472LL;
  __int128 v9 = *(_OWORD *)(a1 + 80);
  __int128 v18 = *(_OWORD *)(a1 + 64);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10039BA94;
  block[3] = &unk_100659DF0;
  id v13 = v5;
  uint64_t v14 = v6;
  __int128 v19 = v9;
  id v15 = v7;
  id v10 = *(id *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 48);
  id v17 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10039BA94(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL)
    || [*(id *)(a1 + 32) isCanceled])
  {
    sub_10039BB70( *(void *)(a1 + 40),  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
    sub_10039BC54( *(void *)(a1 + 40),  *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(a1 + 48));
  }

  uint64_t v2 = *(void *)(a1 + 64);
  id v5 = [*(id *)(a1 + 56) copy];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) deviceOwnedKeyMaterials]);
  id v4 = [v3 copy];
  (*(void (**)(uint64_t, id, id, void))(v2 + 16))( v2,  v5,  v4,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
}

void sub_10039BB70(uint64_t a1, void *a2, void *a3)
{
  id v10 = a3;
  if (a1)
  {
    id v5 = a2;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 pass]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceOwnedKeyMaterials]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10039F568;
    v11[3] = &unk_10065A1B8;
    void v11[4] = v8;
    id v12 = v7;
    id v13 = v10;
    id v9 = v7;
    [v5 enumerateCapabilities:v11];
  }
}

void sub_10039BC54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1 && os_variant_has_internal_ui(PKOSVariantSubsystem))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reporting registration failure!", v17, 2u);
    }

    id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v13, @"error.domain");

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v8 code]));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v14, @"error.code");

    id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_arrayByApplyingBlock:", &stru_10065A078));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v15, @"capabilities");

    id v16 = objc_alloc_init(&OBJC_CLASS___PKAutoBugCaptureReporter);
    [v16 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"AuxiliaryCapabilityManager" subtype:@"RegistrationFailure" subtypeContext:v7 payload:v12];
  }
}

void sub_10039BE74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(v1 + 64);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10039BEE8;
  v4[3] = &unk_1006392B0;
  void v4[4] = v1;
  id v5 = v2;
  dispatch_async(v3, v4);
}

void sub_10039BEE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10039BF98;
  v6[3] = &unk_10063A790;
  id v7 = v3;
  id v5 = v3;
  [v4 registerAuxiliaryCapabilitiesForPass:v5 force:1 sessionExchangeToken:0 completion:v6];
}

void sub_10039BF98(uint64_t a1, void *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = a2;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);

    int v9 = 138412546;
    id v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "registerAuxiliaryCapabilityForPassUniqueIdentifier: Auxiliary registration finished for pass: %@, with error: %@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10039C150(uint64_t a1)
{
}

void sub_10039C168(uint64_t a1, void *a2, int a3, void *a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a6;
  if (a1)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
    if (PKAuxiliaryCapabilityManagerDisabled())
    {
      uint64_t Object = PKLogFacilityTypeGetObject(28LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Skipping capability registration for %@ because manager disabled",  (uint8_t *)&buf,  0xCu);
      }
    }

    else
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v11 devicePaymentApplications]);
      id v18 = [v17 count];

      if (v18)
      {
        if (a3) {
          [*(id *)(a1 + 8) updateAuxiliaryRegistrationRequirementsForPass:v11 isRegistered:0];
        }
        id v19 = sub_10039C7DC(a1, v11, a3);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        if (v20)
        {
          id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) objectForKeyedSubscript:v14]);

          if (v21)
          {
            id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) objectForKeyedSubscript:v14]);
            id v23 = objc_retainBlock(v13);
            [v22 addObject:v23];

            uint64_t v24 = PKLogFacilityTypeGetObject(28LL);
            __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Pass %@ is already being registered - coalescing request",  (uint8_t *)&buf,  0xCu);
            }
          }

          else
          {
            uint64_t v27 = objc_alloc(&OBJC_CLASS___NSMutableArray);
            id v28 = objc_retainBlock(v13);
            id v29 = -[NSMutableArray initWithObjects:](v27, "initWithObjects:", v28, 0LL);
            [*(id *)(a1 + 80) setObject:v29 forKeyedSubscript:v14];

            id v30 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
            *(void *)&__int128 buf = 0LL;
            *((void *)&buf + 1) = &buf;
            uint64_t v65 = 0x3032000000LL;
            __int128 v66 = sub_100399080;
            __int128 v67 = sub_100399090;
            __int128 v68 = @"initial";
            v62[0] = 0LL;
            v62[1] = v62;
            void v62[2] = 0x3032000000LL;
            v62[3] = sub_100399080;
            v62[4] = sub_100399090;
            id v63 = 0LL;
            v60[0] = 0LL;
            v60[1] = v60;
            v60[2] = 0x3032000000LL;
            v60[3] = sub_100399080;
            v60[4] = sub_100399090;
            id v61 = 0LL;
            v55[0] = _NSConcreteStackBlock;
            v55[1] = 3221225472LL;
            v55[2] = sub_10039C874;
            v55[3] = &unk_100659E40;
            id v59 = v60;
            p___int128 buf = &buf;
            void v55[4] = a1;
            id v34 = v20;
            id v56 = v34;
            id v33 = v14;
            id v57 = v33;
            [v30 addOperation:v55];
            v53[0] = 0LL;
            v53[1] = v53;
            v53[2] = 0x3032000000LL;
            v53[3] = sub_100399080;
            void v53[4] = sub_100399090;
            id v54 = 0LL;
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472LL;
            v46[2] = sub_10039C9BC;
            v46[3] = &unk_100659E68;
            id v49 = &buf;
            void v46[4] = a1;
            __int128 v50 = v60;
            id v47 = v11;
            id v48 = v12;
            __int128 v51 = v53;
            char v52 = v62;
            [v30 addOperation:v46];
            v45[0] = _NSConcreteStackBlock;
            v45[1] = 3221225472LL;
            v45[2] = sub_10039CB1C;
            v45[3] = &unk_100659DC8;
            v45[4] = a1;
            v45[5] = &buf;
            v45[6] = v60;
            v45[7] = v53;
            v45[8] = v62;
            [v30 addOperation:v45];
            v44[0] = _NSConcreteStackBlock;
            v44[1] = 3221225472LL;
            v44[2] = sub_10039CC6C;
            v44[3] = &unk_100659DC8;
            v44[4] = a1;
            v44[5] = &buf;
            v44[6] = v53;
            v44[7] = v60;
            v44[8] = v62;
            [v30 addOperation:v44];
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472LL;
            v43[2] = sub_10039D00C;
            v43[3] = &unk_100659DC8;
            v43[4] = a1;
            void v43[5] = &buf;
            v43[6] = v60;
            v43[7] = v53;
            v43[8] = v62;
            [v30 addOperation:v43];
            id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            v35[0] = _NSConcreteStackBlock;
            v35[1] = 3221225472LL;
            v35[2] = sub_10039D334;
            v35[3] = &unk_100659F08;
            void v35[4] = a1;
            __int128 v38 = v62;
            id v39 = v60;
            uint64_t v40 = v53;
            char v42 = a5;
            id v41 = &buf;
            id v36 = v34;
            id v37 = v33;
            id v32 = [v30 evaluateWithInput:v31 completion:v35];

            _Block_object_dispose(v53, 8);
            _Block_object_dispose(v60, 8);

            _Block_object_dispose(v62, 8);
            _Block_object_dispose(&buf, 8);
          }
        }

        else
        {
          (*((void (**)(id, void))v13 + 2))(v13, 0LL);
        }

        goto LABEL_20;
      }

      uint64_t v26 = PKLogFacilityTypeGetObject(28LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Skipping capability registration for %@ because pass missing payment application",  (uint8_t *)&buf,  0xCu);
      }
    }

    (*((void (**)(id, void))v13 + 2))(v13, 0LL);
LABEL_20:
  }
}

void sub_10039C790(_Unwind_Exception *a1)
{
}

id sub_10039C7DC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1 && PKPassEligibleForAuxiliaryCapabilityRegistration(v5))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) unregisteredAuxiliaryCapabilityRequirementsForPass:v6]);
    id v8 = [v7 mutableCopy];

    if (a3) {
      id v9 = v8;
    }
    else {
      id v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_objectsPassingTest:", &stru_100659FC0));
    }
    id v10 = v9;
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

void sub_10039C874(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateProviders";

  id v10 = sub_10039AE68(*(PDARRISO18013DecryptionProvider **)(a1 + 32), *(void **)(a1 + 40), 0LL);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    v7[2](v7, v6, 0LL);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      int v17 = 138412290;
      uint64_t v18 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Pass %@ has no valid providers for unregistered requirements",  (uint8_t *)&v17,  0xCu);
    }

    v7[2](v7, v6, 1LL);
  }
}

void sub_10039C9BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateContext";

  uint64_t v10 = *(void *)(a1 + 32);
  v16[0] = (void (*)(void, void, void))_NSConcreteStackBlock;
  v16[1] = (void (*)(void, void, void))3221225472LL;
  void v16[2] = (void (*)(void, void, void))sub_10039CA88;
  void v16[3] = (void (*)(void, void, void))&unk_100659D28;
  __int128 v19 = *(_OWORD *)(a1 + 72);
  id v17 = v6;
  id v18 = v7;
  id v11 = v6;
  id v12 = v7;
  sub_10039B1CC(v10, v13, v14, v15, v16);
}

void sub_10039CA88(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v11 != 0LL);
}

void sub_10039CB1C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"GenerateKeys";

  uint64_t v10 = a1[4];
  id v11 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  id v12 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10039CC10;
  void v16[3] = &unk_10063B638;
  uint64_t v13 = a1[8];
  id v18 = v7;
  uint64_t v19 = v13;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  sub_10039B69C(v10, v11, v12, 0, v16);
}

void sub_10039CC10(void *a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v4 != 0LL);
}

void sub_10039CC6C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"RegisterKeys";

  uint64_t v10 = *(void (**)(void, void, void))(a1 + 32);
  v14[0] = (void (*)(void, void, void))_NSConcreteStackBlock;
  v14[1] = (void (*)(void, void, void))3221225472LL;
  void v14[2] = (void (*)(void, void, void))sub_10039CD44;
  void v14[3] = (void (*)(void, void, void))&unk_100659E90;
  __int128 v17 = *(_OWORD *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 64);
  id v15 = v6;
  id v16 = v7;
  void v14[4] = v10;
  id v11 = v6;
  id v12 = v7;
  sub_10039CF14((uint64_t)v10, v13, v14);
}

void sub_10039CD44(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2) {
    sub_10039CDD8(a1[4], *(void **)(*(void *)(a1[7] + 8) + 40LL), a2, *(void **)(*(void *)(a1[8] + 8) + 40LL));
  }
  uint64_t v6 = *(void *)(a1[9] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(uint64_t, uint64_t, BOOL))(a1[6] + 16))(a1[6], a1[5], v8 != 0LL);
}

void sub_10039CDD8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = a4;
    id v9 = a2;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 deviceOwnedKeyMaterials]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 serverOwnedKeyMaterials]);

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1003A05B0;
    void v18[3] = &unk_10065A2A8;
    id v19 = v10;
    id v20 = v11;
    id v12 = v11;
    id v13 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1003A06E8;
    v15[3] = &unk_10065A2D0;
    __int128 v17 = objc_retainBlock(v18);
    id v16 = v7;
    id v14 = v17;
    [v8 enumerateCapabilities:v15];
  }
}

void sub_10039CF14(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  if (a1)
  {
    NSErrorUserInfoKey v7 = NSDebugDescriptionErrorKey;
    id v8 = @"Device not supported";
    id v4 = a3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  v5));
    ((void (**)(void, void, void *))a3)[2](v4, 0LL, v6);
  }

void sub_10039D00C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"StoreKeys";

  uint64_t v10 = a1[4];
  id v11 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  id v12 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10039D0FC;
  void v16[3] = &unk_10063B638;
  uint64_t v13 = a1[8];
  id v18 = v7;
  uint64_t v19 = v13;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  sub_10039D158(v10, v11, v12, v16);
}

void sub_10039D0FC(void *a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v4 != 0LL);
}

void sub_10039D158(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 pass]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
    v24[0] = 0LL;
    v24[1] = v24;
    v24[2] = 0x3032000000LL;
    v24[3] = sub_100399080;
    void v24[4] = sub_100399090;
    id v25 = 0LL;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10039F678;
    v19[3] = &unk_10065A208;
    id v12 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    id v20 = v12;
    id v13 = v11;
    id v21 = v13;
    id v22 = v8;
    id v23 = v24;
    [v7 enumerateCapabilities:v19];
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10039FA48;
    void v16[3] = &unk_1006499A0;
    void v16[4] = a1;
    id v17 = v9;
    id v18 = v24;
    id v15 = [v12 evaluateWithInput:v14 completion:v16];

    _Block_object_dispose(v24, 8);
  }
}

void sub_10039D31C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10039D334(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10039D3FC;
  block[3] = &unk_100659EE0;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(v6 + 64);
  block[1] = 3221225472LL;
  id v13 = v5;
  uint64_t v14 = v6;
  __int128 v9 = *(_OWORD *)(a1 + 56);
  char v19 = *(_BYTE *)(a1 + 88);
  __int128 v10 = *(_OWORD *)(a1 + 72);
  __int128 v17 = v9;
  __int128 v18 = v10;
  id v15 = v7;
  id v16 = *(id *)(a1 + 48);
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10039D3FC(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)
    || [*(id *)(a1 + 32) isCanceled])
  {
    sub_10039BB70( *(void *)(a1 + 40),  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
    if (*(_BYTE *)(a1 + 96)) {
      sub_10039BC54( *(void *)(a1 + 40),  *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  *(void **)(a1 + 48));
    }
    int v2 = 0;
  }

  else
  {
    int v2 = 1;
  }

  sub_10039D5D4( *(void *)(a1 + 40),  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"N";
    if (v2) {
      id v5 = @"Y";
    }
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Registered auxiliary requirements for pass %@. success: %@ error: %@",  buf,  0x20u);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 80) objectForKey:*(void *)(a1 + 56)]);
  [*(id *)(*(void *)(a1 + 40) + 80) removeObjectForKey:*(void *)(a1 + 56)];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10039D6B4;
  v9[3] = &unk_100659EB8;
  void v9[4] = *(void *)(a1 + 64);
  [v8 enumerateObjectsUsingBlock:v9];
}

void sub_10039D5D4(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 requirementsSuccessfullyRegistered]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 pass]);

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1003A0538;
    v11[3] = &unk_10065A1B8;
    id v12 = v7;
    uint64_t v13 = a1;
    id v14 = v8;
    id v9 = v8;
    id v10 = v7;
    [v6 enumerateCapabilities:v11];
  }

uint64_t sub_10039D6B4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))( a2,  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL));
}

void sub_10039D6D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  v14[0] = (void (*)(void, void, void))_NSConcreteStackBlock;
  v14[1] = (void (*)(void, void, void))3221225472LL;
  void v14[2] = (void (*)(void, void, void))sub_10039D788;
  void v14[3] = (void (*)(void, void, void))&unk_100659F30;
  uint64_t v18 = *(void *)(a1 + 72);
  __int128 v17 = *(_OWORD *)(a1 + 56);
  id v15 = v6;
  id v16 = v7;
  id v9 = v6;
  id v10 = v7;
  sub_10039B1CC(v8, v11, v12, v13, v14);
}

void sub_10039D788(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  [*(id *)(*(void *)(a1[6] + 8) + 40) setSource:a1[8]];
  uint64_t v9 = *(void *)(a1[7] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v11 != 0LL);
}

void sub_10039D830(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[4];
  uint64_t v9 = (void *)a1[5];
  uint64_t v10 = a1[7];
  id v11 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10039D8F8;
  void v14[3] = &unk_10063B638;
  id v16 = v7;
  uint64_t v17 = v10;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  sub_10039D954(v8, v9, v11, v14);
}

void sub_10039D8F8(void *a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v4 != 0LL);
}

void sub_10039D954(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    unint64_t v10 = (unint64_t)[v8 source];
    unsigned int v11 = (v10 < 4) & (0xDu >> (v10 & 0xF));
    BOOL v12 = (char *)[v8 source] - 4 < (char *)0xFFFFFFFFFFFFFFFDLL;
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 pass]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueID]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10039FAFC;
    v22[3] = &unk_10065A280;
    id v23 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    uint64_t v24 = a1;
    BOOL v29 = v12;
    id v25 = v13;
    id v26 = v14;
    char v30 = v11;
    id v27 = v8;
    id v28 = v7;
    id v15 = v14;
    id v16 = v13;
    id v17 = v23;
    [v28 enumerateInTopologicalOrderWithContext:v27 enumerator:v22];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1003A048C;
    v20[3] = &unk_100650BA0;
    void v20[4] = a1;
    id v21 = v9;
    id v19 = [v17 evaluateWithInput:v18 completion:v20];
  }
}

void sub_10039DB40(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 64LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10039DBD4;
  block[3] = &unk_100659F80;
  id v7 = v2;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  id v4 = (id)v5;
  __int128 v8 = v5;
  dispatch_async(v3, block);
}

uint64_t sub_10039DBD4(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finished checking registration status for pass %@. error: %@",  (uint8_t *)&v7,  0x16u);
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

BOOL sub_10039DCA8(id a1, PKPassAuxiliaryRegistrationRequirement *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)-[PKPassAuxiliaryRegistrationRequirement registrationBackoffCounter](v4, "registrationBackoffCounter");
  if (v5 >= 26)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      uint64_t v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Excluding unregistered requirement because max backoff count reached. %@",  (uint8_t *)&v9,  0xCu);
    }
  }

  return v5 < 26;
}

void sub_10039DD78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Checking server for registration state",  buf,  2u);
    }

    id v6 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    *(void *)__int128 buf = 0LL;
    id v17 = buf;
    uint64_t v18 = 0x3032000000LL;
    id v19 = sub_100399080;
    id v20 = sub_100399090;
    id v21 = 0LL;
    v14[0] = 0LL;
    v14[1] = v14;
    void v14[2] = 0x3032000000LL;
    void v14[3] = sub_100399080;
    void v14[4] = sub_100399090;
    id v15 = 0LL;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10039DF78;
    void v13[3] = &unk_100641880;
    void v13[4] = a1;
    void v13[5] = buf;
    void v13[6] = v14;
    [v6 addOperation:v13];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10039E2A8;
    v12[3] = &unk_100639728;
    void v12[4] = a1;
    void v12[5] = v14;
    [v6 addOperation:v12];
    int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10039E648;
    v9[3] = &unk_100647710;
    unsigned int v11 = buf;
    id v10 = v3;
    id v8 = [v6 evaluateWithInput:v7 completion:v9];

    _Block_object_dispose(v14, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_10039DF54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_10039DF78(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKAuxiliaryCapabilityRegistrationStateRequest);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(v9 + 16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10039E05C;
  void v14[3] = &unk_10065A038;
  id v15 = v8;
  uint64_t v16 = v9;
  __int128 v19 = *(_OWORD *)(a1 + 40);
  id v17 = v6;
  id v18 = v7;
  id v11 = v6;
  id v12 = v7;
  id v13 = v8;
  [v10 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_10039E05C(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10039E10C;
  v8[3] = &unk_10065A010;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  void v8[4] = *(void *)(a1 + 40);
  uint64_t v11 = v5;
  __int128 v7 = *(_OWORD *)(a1 + 56);
  id v6 = (id)v7;
  __int128 v10 = v7;
  id v9 = *(id *)(a1 + 48);
  [a2 checkAuxiliaryCapabilityRegistrationStateWithRequest:v4 completion:v8];
}

void sub_10039E10C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 64LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10039E200;
  block[3] = &unk_100659FE8;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = a2;
  __int128 v13 = *(_OWORD *)(a1 + 48);
  id v15 = v8;
  id v16 = v7;
  id v10 = (id)v13;
  __int128 v18 = v13;
  id v17 = *(id *)(a1 + 40);
  id v11 = v7;
  id v12 = v8;
  dispatch_async(v9, block);
}

uint64_t sub_10039E200(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = v2;
  if (!v2)
  {
    if (*(void *)(a1 + 80) == 1LL) {
      goto LABEL_6;
    }
    uint64_t v4 = PDBasicError(@"invalid response");
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v3);
  if (!v2) {

  }
LABEL_6:
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) unregisteredRequirements]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  *(void *)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) != 0LL);
}

void sub_10039E2A8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v29 = a3;
  id v28 = a4;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  uint64_t v6 = a1;
  id obj = *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v32 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
  if (v32)
  {
    uint64_t v31 = *(void *)v41;
    do
    {
      for (unint64_t i = 0LL; i != v32; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v31) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        id v9 = *(void **)(*(void *)(v6 + 32) + 8LL);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dpanIdentifier", v28));
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 paymentApplicationWithDPANIdentifier:v10]);

        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v6 + 32) + 8) passWithPaymentApplication:v11]);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 secureElementPass]);

        if (v13)
        {
          id v33 = v11;
          id v34 = i;
          uint64_t v35 = objc_claimAutoreleasedReturnValue([v13 uniqueID]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 requirementIdentifiers]);
          __int128 v36 = 0u;
          __int128 v37 = 0u;
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 auxiliaryRegistrationRequirements]);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 allRequirements]);

          id v17 = [v16 countByEnumeratingWithState:&v36 objects:v48 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v37;
            do
            {
              for (j = 0LL; j != v18; j = (char *)j + 1)
              {
                if (*(void *)v37 != v19) {
                  objc_enumerationMutation(v16);
                }
                id v21 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
                id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 identifier]);
                unsigned int v23 = [v14 containsObject:v22];

                if (v23)
                {
                  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
                  id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__int128 buf = 138412546;
                    uint64_t v45 = v35;
                    __int16 v46 = 2112;
                    id v47 = v21;
                    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Server requested to update registration status to NO for pass %@ for requirement: %@",  buf,  0x16u);
                  }

                  [v21 setRegistrationBackoffCounter:0];
                  [*(id *)(*(void *)(v6 + 32) + 8) updateAuxiliaryRegistrationRequirement:v21 pass:v13 isRegistered:0];
                }
              }

              id v18 = [v16 countByEnumeratingWithState:&v36 objects:v48 count:16];
            }

            while (v18);
          }

          id v11 = v33;
          unint64_t i = v34;
          id v26 = (os_log_s *)v35;
        }

        else
        {
          uint64_t v27 = PKLogFacilityTypeGetObject(28LL);
          id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v45 = (uint64_t)v8;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Unable to find pass for unregistered requirements %@",  buf,  0xCu);
          }
        }
      }

      id v32 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
    }

    while (v32);
  }

  v28[2](v28, v29, 0LL);
}

void sub_10039E648(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v11)
    {
      int v15 = 138412290;
      uint64_t v16 = v8;
      id v12 = "Failed to check registration state, error %@";
      __int128 v13 = v10;
      uint32_t v14 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v15, v14);
    }
  }

  else if (v11)
  {
    LOWORD(v15) = 0;
    id v12 = "Finished checking server for registration state";
    __int128 v13 = v10;
    uint32_t v14 = 2;
    goto LABEL_6;
  }

  (*(void (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

id sub_10039E768(id a1, PKPassAuxiliaryRegistrationRequirement *a2)
{
  return -[PKPassAuxiliaryRegistrationRequirement identifier](a2, "identifier");
}

void sub_10039E770(uint64_t a1, void *a2, void *a3)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10039E860;
  void v10[3] = &unk_10065A0C8;
  id v11 = a2;
  id v12 = a3;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 64);
  id v13 = v6;
  uint64_t v16 = v7;
  char v17 = *(_BYTE *)(a1 + 72);
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v8 = v12;
  id v9 = v11;
  [v5 addOperation:v10];
}

void sub_10039E860(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyCreationMetadata]);

  if (v8)
  {
    v7[2](v7, v6, 0LL);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10039E990;
    v12[3] = &unk_10065A0A0;
    uint64_t v18 = *(void *)(a1 + 72);
    char v19 = *(_BYTE *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 64);
    char v17 = v7;
    id v16 = v6;
    [v9 requiresMetadataToGenerateKeyMaterial:v10 context:v11 completion:v12];
  }
}

void sub_10039E990(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a3);
  }

  else if (v5 && *(_BYTE *)(a1 + 80))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Missing required local metadata for pass %@ for requirement: %@",  (uint8_t *)&v15,  0x16u);
    }

    uint64_t v11 = PDBasicError(@"missing required local metadata");
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  else
  {
    [*(id *)(a1 + 48) safelyAddObject:v5];
  }

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  *(void *)(a1 + 56),  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL) != 0LL);
}

void sub_10039EAE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Requesting key creation metadata for pass %@",  buf,  0xCu);
    }

    uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 16LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10039EC8C;
    void v14[3] = &unk_10065A140;
    id v15 = *(id *)(a1 + 32);
    id v16 = *(id *)(a1 + 56);
    id v17 = *(id *)(a1 + 64);
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 72);
    id v18 = v12;
    uint64_t v21 = v13;
    id v20 = v7;
    id v19 = v6;
    [v11 performHandlerOnSharedWebServiceQueue:v14];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10039EC8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___PKAuxiliaryCapabilityKeyCreationMetadataRequest);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pass]);
  id v7 = [v4 initWithCapabilityStates:v5 pass:v6];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10039EDA4;
  void v10[3] = &unk_10065A118;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  __int128 v9 = *(_OWORD *)(a1 + 72);
  id v8 = (id)v9;
  __int128 v14 = v9;
  id v13 = *(id *)(a1 + 64);
  [v3 auxiliaryCapabilityKeyCreationMetadataWithRequest:v7 completion:v10];
}

void sub_10039EDA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) capabilities]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 entriesForCapabilities:v7]);

  if (!v5 || v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v33 = v22;
      __int16 v34 = 2112;
      id v35 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch key creation metadata from server for pass %@ error %@",  buf,  0x16u);
    }

    uint64_t v23 = v6;
    if (!v6)
    {
      uint64_t v24 = PDBasicError(@"failed to fetch key creation metadata");
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v24);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v23);
    if (!v6) {

    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v25 = v8;
    id v26 = v5;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v28;
      do
      {
        for (unint64_t i = 0LL; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v12) {
            objc_enumerationMutation(v9);
          }
          __int128 v14 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
          id v15 = *(void **)(a1 + 32);
          id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "capability", v25, v26, (void)v27));
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 identifier]);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 capabilityForIdentifier:v17]);

          id v19 = (void *)objc_claimAutoreleasedReturnValue([v14 metadata]);
          [v18 setKeyCreationMetadata:v19];
        }

        id v11 = [v9 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }

      while (v11);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    id v8 = v25;
    id v5 = v26;
  }
}

void sub_10039F014(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10039F100;
  v12[3] = &unk_10064DAC0;
  id v7 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  __int128 v11 = *(_OWORD *)(a1 + 56);
  id v8 = (id)v11;
  __int128 v17 = v11;
  id v9 = v6;
  id v10 = v5;
  [v7 addOperation:v12];
}

void sub_10039F100(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v29 = v10;
    __int16 v30 = 2112;
    uint64_t v31 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Creating key for pass %@ for requirement: %@",  buf,  0x16u);
  }

  uint64_t v12 = *(void **)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10039F2A0;
  v20[3] = &unk_10065A168;
  uint64_t v14 = *(void *)(a1 + 40);
  id v21 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 72);
  id v22 = v15;
  uint64_t v27 = v16;
  id v23 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v25 = v6;
  id v26 = v7;
  id v24 = v17;
  id v18 = v6;
  id v19 = v7;
  [v12 generateKeyMaterialForRequirement:v14 context:v13 completion:v20];
}

void sub_10039F2A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v23 = 138412802;
      uint64_t v24 = v12;
      __int16 v25 = 2112;
      uint64_t v26 = v13;
      __int16 v27 = 2112;
      id v28 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to create key for pass %@ for requirement: %@. Error: %@",  (uint8_t *)&v23,  0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL), a4);
    goto LABEL_10;
  }

  if (v7)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deviceOwnedKeyMaterials]);
    [v14 setObject:v7 forKey:*(void *)(a1 + 40)];

    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  id v15 = *(void **)(a1 + 56);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  [v15 addObject:v16];

  if (v8)
  {
LABEL_9:
    id v17 = *(void **)(a1 + 56);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 allObjects]);
    [v17 addObjectsFromArray:v18];

    goto LABEL_10;
  }

  uint64_t v19 = PKLogFacilityTypeGetObject(28LL);
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 40);
    int v23 = 138412546;
    uint64_t v24 = v21;
    __int16 v25 = 2112;
    uint64_t v26 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "WARNING: Empty key generation response found with pass %@ for requirement: %@",  (uint8_t *)&v23,  0x16u);
  }

LABEL_10:
  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 72) + 16LL))( *(void *)(a1 + 72),  *(void *)(a1 + 64),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL) != 0LL);
}

void sub_10039F4B4(void *a1, int a2)
{
  if (a2)
  {
    id v3 = (void *)a1[5];
    id v4 = *(dispatch_queue_s **)(a1[4] + 64LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10039F550;
    v7[3] = &unk_1006412D0;
    id v5 = v3;
    uint64_t v6 = a1[6];
    id v8 = v5;
    uint64_t v9 = v6;
    dispatch_async(v4, v7);
  }

  else
  {
    (*(void (**)(void))(a1[5] + 16LL))();
  }

uint64_t sub_10039F550(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_10039F568(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)a1[4];
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v5]);
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = a1[5];
    int v12 = 138412546;
    uint64_t v13 = v11;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cleaning up for newly created keys for pass %@ for requirement: %@",  (uint8_t *)&v12,  0x16u);
  }

  [v7 requirementRegistrationFailed:v8 forRequirement:v5 context:a1[6]];
}

void sub_10039F678(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10039F748;
  v12[3] = &unk_10063EE70;
  id v7 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v6;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v16 = v8;
  uint64_t v17 = v9;
  id v10 = v6;
  id v11 = v5;
  [v7 addOperation:v12];
}

void sub_10039F748(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v31 = v10;
    __int16 v32 = 2112;
    uint64_t v33 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Storing key material for pass %@ for requirement: %@",  buf,  0x16u);
  }

  int v12 = *(void **)(a1 + 48);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deviceOwnedKeyMaterials]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:*(void *)(a1 + 40)]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) serverOwnedKeyMaterials]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:*(void *)(a1 + 40)]);
  uint64_t v17 = *(void *)(a1 + 56);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10039F938;
  v23[3] = &unk_10065A1E0;
  uint64_t v18 = *(void *)(a1 + 40);
  id v24 = *(id *)(a1 + 32);
  id v25 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 64);
  id v28 = v7;
  uint64_t v29 = v20;
  id v26 = v19;
  id v27 = v6;
  id v21 = v6;
  id v22 = v7;
  [v12 requirementRegistrationSuccess:v14 serverKeyMaterial:v16 forRequirement:v18 context:v17 completion:v23];
}

void sub_10039F938(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(28LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v6;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to store key material for pass %@ error %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requirementsSuccessfullyRegistered]);
    -[os_log_s addObject:](v5, "addObject:", *(void *)(a1 + 48));
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v10 = *(void **)(v7 + 40);
  id v8 = (id *)(v7 + 40);
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v3;
  }
  objc_storeStrong(v8, v11);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10039FA48(void *a1, int a2)
{
  if (a2)
  {
    id v3 = (void *)a1[5];
    id v4 = *(dispatch_queue_s **)(a1[4] + 64LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10039FAE4;
    v7[3] = &unk_1006412D0;
    id v5 = v3;
    uint64_t v6 = a1[6];
    id v8 = v5;
    uint64_t v9 = v6;
    dispatch_async(v4, v7);
  }

  else
  {
    (*(void (**)(void))(a1[5] + 16LL))();
  }

uint64_t sub_10039FAE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_10039FAFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10039FC04;
  v11[3] = &unk_10065A258;
  uint64_t v7 = *(void **)(a1 + 32);
  void v11[4] = *(void *)(a1 + 40);
  id v12 = v5;
  id v13 = *(id *)(a1 + 48);
  char v18 = *(_BYTE *)(a1 + 80);
  id v8 = *(id *)(a1 + 56);
  char v19 = *(_BYTE *)(a1 + 81);
  id v14 = v8;
  id v15 = v6;
  id v16 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 72);
  id v9 = v6;
  id v10 = v5;
  [v7 addOperation:v11];
}

void sub_10039FC04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  unsigned __int8 v8 = [*(id *)(*(void *)(a1 + 32) + 8) isAuxiliaryRegistrationRequirementRegistered:*(void *)(a1 + 40) pass:*(void *)(a1 + 48)];
  if ((v8 & 1) != 0)
  {
    if (([*(id *)(a1 + 40) canLocallyInvalidateRegistrationState] & 1) == 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(28LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v45 = v30;
        __int16 v46 = 2112;
        uint64_t v47 = v31;
        id v13 = "Requirement is registered and canLocallyInvalidateRegistrationState is false, skipping. For pass %@ for requirement: %@";
        goto LABEL_16;
      }

uint64_t sub_10039FF90(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((a2 == 1) != (*(_BYTE *)(a1 + 96) == 0))
    {
      if (a2 != 1)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(28LL);
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = *(const __CFString **)(a1 + 32);
          uint64_t v7 = *(void *)(a1 + 40);
          int v14 = 138412546;
          uint64_t v15 = v6;
          __int16 v16 = 2112;
          uint64_t v17 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Capability already not registration for pass %@ for requirement: %@",  (uint8_t *)&v14,  0x16u);
        }

LABEL_12:
        sub_1003A014C(*(void *)(a1 + 48), *(void **)(a1 + 40), *(void **)(a1 + 64), *(void **)(a1 + 72));
      }
    }

    else
    {
      uint64_t v8 = PKLogFacilityTypeGetObject(28LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = @"No";
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        if (a2 == 1) {
          id v10 = @"Yes";
        }
        int v14 = 138412802;
        uint64_t v15 = v10;
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        __int16 v18 = 2112;
        uint64_t v19 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Updating registration status to '%@' for pass %@ for requirement: %@",  (uint8_t *)&v14,  0x20u);
      }

      [*(id *)(a1 + 40) setRegistrationBackoffCounter:0];
      [*(id *)(*(void *)(a1 + 48) + 8) updateAuxiliaryRegistrationRequirement:*(void *)(a1 + 40) pass:*(void *)(a1 + 56) isRegistered:a2 == 1];
      if (a2 != 1) {
        goto LABEL_12;
      }
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16LL))();
}

void sub_1003A014C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v33 = a4;
  uint64_t v35 = a1;
  if (a1)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 providerForCapability:v7]);
    if ((objc_opt_respondsToSelector(v9, "associatedRequirementsForRequirement:context:") & 1) != 0)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 associatedRequirementsForRequirement:v7 context:v33]);
      uint64_t v11 = v10;
      if (v10 && [v10 count])
      {
        uint64_t v30 = v9;
        id v31 = v7;
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v33 pass]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 capabilities]);
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        uint64_t v29 = v11;
        id obj = v11;
        id v14 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v38;
          uint64_t v32 = *(void *)v38;
          do
          {
            for (unint64_t i = 0LL; i != v15; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v38 != v16) {
                objc_enumerationMutation(obj);
              }
              uint64_t v18 = *(void *)(*((void *)&v37 + 1) + 8LL * (void)i);
              v36[0] = _NSConcreteStackBlock;
              v36[1] = 3221225472LL;
              v36[2] = sub_1003A052C;
              void v36[3] = &unk_100659BF8;
              v36[4] = v18;
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "pk_firstObjectPassingTest:", v36));
              if (v19
                && [*(id *)(v35 + 8) isAuxiliaryRegistrationRequirementRegistered:v19 pass:v12])
              {
                uint64_t v20 = v13;
                id v21 = v12;
                id v22 = v8;
                uint64_t Object = PKLogFacilityTypeGetObject(28LL);
                uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  id v25 = (void *)objc_claimAutoreleasedReturnValue([v33 pass]);
                  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 uniqueID]);
                  *(_DWORD *)__int128 buf = 138412546;
                  __int128 v42 = v26;
                  __int16 v43 = 2112;
                  id v44 = v19;
                  _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Updating registration status to 'NO' for pass %@ for associated requirement: %@",  buf,  0x16u);
                }

                [v19 setRegistrationBackoffCounter:0];
                id v27 = *(void **)(v35 + 8);
                uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v33 pass]);
                [v27 updateAuxiliaryRegistrationRequirement:v19 pass:v28 isRegistered:0];

                id v8 = v22;
                sub_1003A014C(v35, v19, v22, v33);
                uint64_t v12 = v21;
                id v13 = v20;
                uint64_t v16 = v32;
              }
            }

            id v15 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
          }

          while (v15);
        }

        uint64_t v9 = v30;
        id v7 = v31;
        uint64_t v11 = v29;
      }
    }
  }
}

void sub_1003A048C(uint64_t a1, int a2)
{
  if (a2)
  {
    int v2 = *(void **)(a1 + 40);
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 64LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003A051C;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_1003A051C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1003A052C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) isReferencing:a2];
}

void sub_1003A0538(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v6 = a2;
  id v4 = objc_msgSend(v3, "containsObject:");
  else {
    id v5 = (char *)[v6 registrationBackoffCounter] + 1;
  }
  [v6 setRegistrationBackoffCounter:v5];
  [*(id *)(a1[5] + 8) updateAuxiliaryRegistrationRequirement:v6 pass:a1[6] isRegistered:v4];
}

void sub_1003A05B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v15 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v15]);
    if (!v9)
    {
      id v9 = objc_alloc_init(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterial);
      [*(id *)(a1 + 32) setObject:v9 forKey:v15];
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 contents]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);
    [v11 setCertificateChain:v7];
  }

  if (v8)
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v15]);
    if (!v12)
    {
      id v12 = objc_alloc_init(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterial);
      [*(id *)(a1 + 40) setObject:v12 forKey:v15];
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 contents]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);
    [v14 setCertificateChain:v8];
  }
}

void sub_1003A06E8(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = [v11 role];
  if (v3 == (id)2)
  {
    id v6 = v11;
    if ([v6 type] == (id)4)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceSignatureCertificateChain]);
      uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverSignatureCertificateChain]);
      goto LABEL_8;
    }
  }

  else
  {
    BOOL v4 = v3 == (id)1;
    id v5 = v11;
    if (!v4) {
      goto LABEL_10;
    }
    id v6 = v11;
    if ([v6 type] == (id)4)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceDecryptionCertificateChain]);
      uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverDecryptionCertificateChain]);
LABEL_8:
      id v10 = (void *)v9;
      (*(void (**)(uint64_t, id, void *, uint64_t))(v7 + 16))(v7, v6, v8, v9);
    }
  }

  id v5 = v11;
LABEL_10:
}

_TtC5passd26PDARRFidoSignatureProvider *sub_1003A07CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    id v5 = 0LL;
    switch((unint64_t)[v3 type])
    {
      case 1uLL:
      case 2uLL:
        id v6 = &OBJC_CLASS____TtC5passd35PDARRUnifiedAccessSignatureProvider;
        goto LABEL_5;
      case 3uLL:
        uint64_t v7 = objc_alloc_init(&OBJC_CLASS____TtC5passd26PDARRFidoSignatureProvider);
        goto LABEL_13;
      case 5uLL:
        uint64_t v7 = -[PDARRISO18013SignatureProvider initWithISO18013Manager:]( objc_alloc(&OBJC_CLASS___PDARRISO18013SignatureProvider),  "initWithISO18013Manager:",  *(void *)(a1 + 40));
        goto LABEL_13;
      case 7uLL:
      case 8uLL:
        id v6 = &OBJC_CLASS____TtC5passd27PDARRAliroSignatureProvider;
LABEL_5:
        uint64_t v7 = (_TtC5passd26PDARRFidoSignatureProvider *)[[v6 alloc] initWithSubcredentialManager:*(void *)(a1 + 56)];
        goto LABEL_13;
      case 9uLL:
        id v8 = &OBJC_CLASS____TtC5passd33PDARRCoreIDCredAccountKeyProvider;
        goto LABEL_12;
      case 0xAuLL:
        id v8 = &OBJC_CLASS____TtC5passd40PDARRISO18013BiometricBindingACLProvider;
        goto LABEL_12;
      case 0xBuLL:
        id v8 = &OBJC_CLASS____TtC5passd34PDARRISO18013KeySigningKeyProvider;
        goto LABEL_12;
      case 0xCuLL:
        id v8 = &OBJC_CLASS____TtC5passd31PDARRISO18013CredentialProvider;
LABEL_12:
        uint64_t v7 = (_TtC5passd26PDARRFidoSignatureProvider *)[[v8 alloc] initWithIso18013Manager:*(void *)(a1 + 40)];
LABEL_13:
        id v5 = v7;
        break;
      default:
        break;
    }
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

PDARRISO18013DecryptionProvider *sub_1003A08C4(PDARRISO18013DecryptionProvider *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    switch((unint64_t)[v3 type])
    {
      case 1uLL:
        id v5 = -[PDARRISO18013DecryptionProvider initWithISO18013Manager:]( objc_alloc(&OBJC_CLASS___PDARRISO18013DecryptionProvider),  "initWithISO18013Manager:",  a1[2]._isoManager);
        goto LABEL_8;
      case 2uLL:
        id v5 = objc_alloc_init(&OBJC_CLASS___PDARRSyncedKMLDecryptionProvider);
        goto LABEL_8;
      case 3uLL:
        id v5 = -[PDARRUnifiedAccessDecryptionProvider initWithSubcredentialManager:]( objc_alloc(&OBJC_CLASS____TtC5passd36PDARRUnifiedAccessDecryptionProvider),  "initWithSubcredentialManager:",  a1[3]._isoManager);
        goto LABEL_8;
      case 4uLL:
        id v5 = -[PDARRBarcodeDecryptionProvider initWithBarcodeCertificateManager:]( objc_alloc(&OBJC_CLASS___PDARRBarcodeDecryptionProvider),  "initWithBarcodeCertificateManager:",  a1[3].super.isa);
LABEL_8:
        a1 = v5;
        break;
      default:
        a1 = 0LL;
        break;
    }
  }

  return a1;
}

BOOL sub_1003A0988(id a1, PKSecureElementPass *a2, BOOL *a3)
{
  return PKPassEligibleForAuxiliaryCapabilityRegistration(a2);
}

void sub_1003A0990(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1003A0A38;
  v11[3] = &unk_10063C3B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  sub_10039DD78(v8, v11);
}

uint64_t sub_1003A0A38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003A0A4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 64LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1003A0AF8;
  v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1003A0AF8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003A0B0C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v9 = 3LL;
  }
  else {
    uint64_t v9 = 2LL;
  }
  id v11 = *(PDARRISO18013DecryptionProvider **)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1003A0BD4;
  void v14[3] = &unk_10063C3B0;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v8;
  sub_100399BFC(v11, v10, v9, v14);
}

uint64_t sub_1003A0BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003A0BE8(int8x16_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  block[1] = 3221225472LL;
  int8x16_t v8 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v9 = a1[2].i64[0];
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1003A0CA8;
  block[3] = &unk_100639508;
  __int8 v10 = a1[3].i8[0];
  id v11 = *(dispatch_queue_s **)(v9 + 64);
  __int8 v18 = v10;
  int8x16_t v15 = v8;
  id v16 = v6;
  id v17 = v7;
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v11, block);
}

void sub_1003A0CA8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64)) {
    char v2 = 1;
  }
  else {
    char v2 = [*(id *)(a1 + 32) isIdentityPass];
  }
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003A0D64;
  v5[3] = &unk_10063C3B0;
  id v7 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  sub_10039C168(v3, v4, 0, 0LL, v2, v5);
}

uint64_t sub_1003A0D64(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003A0D78(id a1, BOOL a2, NSNull *a3, PKCancelable *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(28LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished scheduled check of pass registration state",  v6,  2u);
  }
}

void sub_1003A0EAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 auxiliaryRegistrationRequirementPushTopic]);
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_1003A13D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  int8x16_t v8 = objc_alloc_init(&OBJC_CLASS___PKMapsBrand);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1003A158C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  int8x16_t v8 = objc_alloc_init(&OBJC_CLASS___PKMapsBrand);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int8 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v9, 0));
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v17;
    do
    {
      id v14 = 0LL;
      do
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)v14) merchant]);
        [v15 setMapsBrand:v8];

        id v14 = (char *)v14 + 1;
      }

      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v12);
  }
}

void sub_1003A1AC4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003A1C10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKMapsBrand);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003A220C(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  -[PKMapsBrand setIdentifier:](v4, "setIdentifier:", [a3 unsignedLongLongValue]);
}

void sub_1003A2250(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  -[PKMapsBrand setResultProviderIdentifier:](v4, "setResultProviderIdentifier:", [a3 intValue]);
}

void sub_1003A2294(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_1003A229C(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_1003A22A4(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsBrand setURL:](v4, "setURL:", v5);
}

void sub_1003A22F0(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  -[PKMapsBrand setCategory:](v4, "setCategory:", [a3 integerValue]);
}

void sub_1003A2334(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_1003A233C(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsBrand setLogoURL:](v4, "setLogoURL:", v5);
}

void sub_1003A2388(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsBrand setBusinessChatURL:](v4, "setBusinessChatURL:", v5);
}

void sub_1003A23D4(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMapsBrand setHeroImageURL:](v4, "setHeroImageURL:", v5);
}

void sub_1003A2420(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_1003A2428(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKMapsBrand setLastProcessedDate:](v4, "setLastProcessedDate:", v5);
}

void sub_1003A2474(id a1, PKMapsBrand *a2, id a3)
{
}

id _SQLValueForImageURLs(void *a1)
{
  id v1 = a1;
  if (!v1
    || (char v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    char v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _ImageURLsForSQLValue(void *a1)
{
  id v1 = a1;
  char v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  id v6 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, objc_opt_class(&OBJC_CLASS___NSString, v5), 0LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v6,  v1,  0LL));

  return v7;
}

id *sub_1003A29E4(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_1003A3030(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003A3380(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_1003A3388(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_1003A3390(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_1003A3398(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_1003A33A0(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlanProduct setUpgradeEligible:](v4, "setUpgradeEligible:", [a3 BOOLValue]);
}

void sub_1003A33E4(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlanProduct setWarrantyYears:](v4, "setWarrantyYears:", [a3 unsignedIntegerValue]);
}

void sub_1003A3428(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_1003A3430(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = _ImageURLsForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanProduct setIconURLs:](v4, "setIconURLs:", v6);
}

void sub_1003A3480(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = _ImageURLsForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanProduct setSplashImageURLs:](v4, "setSplashImageURLs:", v6);
}

void sub_1003A3EF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  __int128 v16 = objc_alloc_init(&OBJC_CLASS___PKPayLaterFinancingOption);
  int8x16_t v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterFinancingOption),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v16 withProperties:v7 values:a4];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOption _totalAmount](v8, "_totalAmount"));
  -[PKPayLaterFinancingOption setTotalAmount:](v16, "setTotalAmount:", v9);

  __int8 v10 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOption _totalInterest](v8, "_totalInterest"));
  -[PKPayLaterFinancingOption setTotalInterest:](v16, "setTotalInterest:", v10);

  id v11 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOption _totalPrincipal](v8, "_totalPrincipal"));
  -[PKPayLaterFinancingOption setTotalPrincipal:](v16, "setTotalPrincipal:", v11);

  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOption _totalFees](v8, "_totalFees"));
  -[PKPayLaterFinancingOption setTotalFees:](v16, "setTotalFees:", v12);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOption _installmentAmount](v8, "_installmentAmount"));
  -[PKPayLaterFinancingOption setInstallmentAmount:](v16, "setInstallmentAmount:", v13);

  id v14 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingOption _installmentFees](v8, "_installmentFees"));
  -[PKPayLaterFinancingOption setInstallmentFees:](v16, "setInstallmentFees:", v14);

  int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingOptionInstallment payLaterFinancingOptionInstallmentsForFinancingOptionPID:inDatabase:]( &OBJC_CLASS___PayLaterFinancingOptionInstallment,  "payLaterFinancingOptionInstallmentsForFinancingOptionPID:inDatabase:",  a2,  *(void *)(a1 + 32)));
  -[PKPayLaterFinancingOption setInstallments:](v16, "setInstallments:", v15);
  [*(id *)(a1 + 48) safelyAddObject:v16];
}

void sub_1003A42EC(id a1, PKPayLaterFinancingOption *a2, id a3)
{
}

void sub_1003A42F4(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingOption setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_1003A4338(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingOption setInstallmentCount:](v4, "setInstallmentCount:", [a3 integerValue]);
}

void sub_1003A437C(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingOption setHasAPR:](v4, "setHasAPR:", [a3 BOOLValue]);
}

void sub_1003A43C0(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPayLaterFinancingOption setApr:](v4, "setApr:", v6);
}

uint64_t PDSharingChannelEndpointPollingBackoffDuration()
{
  return 14400LL;
}

uint64_t PDAggressiveSharingChannelEndpointPollingBackoffDuration(unint64_t a1)
{
  uint64_t v1 = 30LL;
  uint64_t v2 = 60LL;
  uint64_t v3 = 14400LL;
  if (a1 < 0x3C) {
    uint64_t v3 = 3600LL;
  }
  if (a1 >= 0x32) {
    uint64_t v2 = v3;
  }
  if (a1 >= 0xA) {
    uint64_t v1 = v2;
  }
  if (a1 >= 5) {
    return v1;
  }
  else {
    return 15LL;
  }
}

void sub_1003A4F0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v13 = objc_alloc_init(&OBJC_CLASS___PKPassAutomaticSelectionCriterion);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v13 withProperties:v7 values:a4];

  int8x16_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassAutomaticSelectionCriterion type](v13, "type"));
  -[PKPassAutomaticSelectionCriterion setTechnologyType:]( v13,  "setTechnologyType:",  PKPassAutomaticSelectionTechnologyTypeFromType());

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentAutomaticSelectionTCI primaryTCIsInDatabase:forPaymentAutomaticSelectionCriterionPID:]( &OBJC_CLASS___PaymentAutomaticSelectionTCI,  "primaryTCIsInDatabase:forPaymentAutomaticSelectionCriterionPID:",  *(void *)(a1 + 40),  a2));
  -[PKPassAutomaticSelectionCriterion setPrimaryTCIs:](v13, "setPrimaryTCIs:", v9);

  __int8 v10 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentAutomaticSelectionTCI TCIsInDatabase:forPaymentAutomaticSelectionCriterionPID:]( &OBJC_CLASS___PaymentAutomaticSelectionTCI,  "TCIsInDatabase:forPaymentAutomaticSelectionCriterionPID:",  *(void *)(a1 + 40),  a2));
  -[PKPassAutomaticSelectionCriterion setTCIs:](v13, "setTCIs:", v10);

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentAutomaticSelectionReaderId readerIDsInDatabase:forPaymentAutomaticSelectionCriterionPID:]( &OBJC_CLASS___PaymentAutomaticSelectionReaderId,  "readerIDsInDatabase:forPaymentAutomaticSelectionCriterionPID:",  *(void *)(a1 + 40),  a2));
  -[PKPassAutomaticSelectionCriterion setReaderIDs:](v13, "setReaderIDs:", v11);

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[ASCAssociatedReaderID associatedReaderIDsForAutomaticSelectionCriterionPID:inDatabase:]( &OBJC_CLASS___ASCAssociatedReaderID,  "associatedReaderIDsForAutomaticSelectionCriterionPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPassAutomaticSelectionCriterion setAssociatedReaderIDs:](v13, "setAssociatedReaderIDs:", v12);

  [*(id *)(a1 + 48) addObject:v13];
}

uint64_t sub_1003A5214(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v6);
        id v8 = objc_alloc(*(Class *)(a1 + 64));
        id v9 = objc_msgSend( v8,  "initWithCriterion:forPaymentApplication:database:",  v7,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v17);
        if (v9)
        {
          __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryTCIs]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 TCIs]);
          id v12 =  +[PaymentAutomaticSelectionTCI insertPrimaryTCIs:TCIs:withPaymentAutomaticSelectionCriterion:inDatabase:]( &OBJC_CLASS___PaymentAutomaticSelectionTCI,  "insertPrimaryTCIs:TCIs:withPaymentAutomaticSelectionCriterion:inDatabase:",  v10,  v11,  v9,  *(void *)(a1 + 48));

          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 readerIDs]);
          id v14 =  +[PaymentAutomaticSelectionReaderId insertReaderIds:withPaymentAutomaticSelectionCriterion:inDatabase:]( &OBJC_CLASS___PaymentAutomaticSelectionReaderId,  "insertReaderIds:withPaymentAutomaticSelectionCriterion:inDatabase:",  v13,  v9,  *(void *)(a1 + 48));

          int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 associatedReaderIDs]);
          +[ASCAssociatedReaderID insertOrUpdateAssociatedReaderIDs:forAutomaticSelectionCriterionPID:inDatabase:]( ASCAssociatedReaderID,  "insertOrUpdateAssociatedReaderIDs:forAutomaticSelectionCriterionPID:inDatabase:",  v15,  [v9 persistentID],  *(void *)(a1 + 48));

          [*(id *)(a1 + 56) addObject:v9];
        }

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_1003A57D0(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
}

void sub_1003A57D8(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
}

void sub_1003A57E0(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
  id v4 = a2;
  -[PKPassAutomaticSelectionCriterion setSupportsExpress:](v4, "setSupportsExpress:", [a3 BOOLValue]);
}

void sub_1003A5824(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
  id v4 = a2;
  -[PKPassAutomaticSelectionCriterion setSupportsInSessionExpress:]( v4,  "setSupportsInSessionExpress:",  [a3 BOOLValue]);
}

void sub_1003A6370(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___VirtualCard),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VirtualCard virtualCard](v5, "virtualCard"));
  [v3 addObject:v4];
}

id sub_1003A6C8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObjectOrNull:0 forKey:@"h"];
}

uint64_t sub_1003A6E7C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _predicateForCreditAccountDetailsPID:*(void *)(a1 + 48)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) queryWithDatabase:*(void *)(a1 + 32) predicate:v2]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003A6F28;
  v5[3] = &unk_10063BE98;
  id v6 = *(id *)(a1 + 32);
  [v3 enumeratePersistentIDsUsingBlock:v5];

  return 1LL;
}

void sub_1003A6F28(uint64_t a1, uint64_t a2)
{
  id v2 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___VirtualCard),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  -[VirtualCard removeVirtualCardEncryptedData](v2, "removeVirtualCardEncryptedData");
}

void sub_1003A715C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003A7684(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___VirtualCard),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VirtualCard virtualCard](v5, "virtualCard"));
  [v3 addObject:v4];
}

void sub_1003A7A50(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1003A7A58(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1003A7A60(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1003A7AA4(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1003A7AAC(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKVirtualCard setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_1003A7AF8(id a1, PKVirtualCard *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    uint64_t v6 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v4,  0LL);

    -[PKVirtualCard setEncryptedData:](v5, "setEncryptedData:", v6);
  }

void sub_1003A7B74(id a1, PKVirtualCard *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    uint64_t v6 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v4,  0LL);

    -[PKVirtualCard setEphemeralPublicKey:](v5, "setEphemeralPublicKey:", v6);
  }

void sub_1003A7BF0(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1003A7BF8(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003A7C3C(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKVirtualCard setLastAutoFilledBySafari:](v4, "setLastAutoFilledBySafari:", v5);
}

void sub_1003A7C88(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setSupportsLocalStorage:](v4, "setSupportsLocalStorage:", [a3 BOOLValue]);
}

void sub_1003A7CCC(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1003A7CD4(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKVirtualCard setSecurityCodeExpiration:](v4, "setSecurityCodeExpiration:", v5);
}

void sub_1003A7D20(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setHasDynamicSecurityCode:](v4, "setHasDynamicSecurityCode:", [a3 BOOLValue]);
}

void sub_1003A816C(id a1, PKAccountPromotionBehavior *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKAccountPromotionBehavior setMinRefreshPeriod:](v4, "setMinRefreshPeriod:");
}

void sub_1003A81AC(id a1, PKAccountPromotionBehavior *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPromotionBehavior setMaxImpressionCount:](v4, "setMaxImpressionCount:", [a3 integerValue]);
}

void sub_1003A81F0(id a1, PKAccountPromotionBehavior *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKAccountPromotionBehavior setTimeVisibleAfterCompleted:](v4, "setTimeVisibleAfterCompleted:");
}

void sub_1003A830C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003A8B24(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 40) addObject:v3];
    id v3 = v4;
  }
}

id sub_1003A8D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___TransitAppletStateCommutePlan,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1003A9100(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
}

void sub_1003A9108(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
}

void sub_1003A9110(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletCommutePlan setStatus:](v4, "setStatus:", PKTransitAppletCommutePlanStatusFromString(a3));
}

void sub_1003A9154(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKTransitAppletCommutePlan setStartDate:](v4, "setStartDate:", v5);
}

void sub_1003A91A0(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKTransitAppletCommutePlan setExpirationDate:](v4, "setExpirationDate:", v5);
}

uint64_t sub_1003A930C(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1003A93B0;
  v4[3] = &unk_10065AB28;
  uint64_t v8 = *(void *)(a1 + 64);
  id v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v2 enumerateObjectsUsingBlock:v4];

  return 1LL;
}

void sub_1003A93B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(objc_class **)(a1 + 56);
  id v6 = a2;
  id v7 = [[v5 alloc] initWithPaymentRewardsBalance:v6 paymentPass:*(void *)(a1 + 32) orderIndex:a3 inDatabase:*(void *)(a1 + 40)];

  [*(id *)(a1 + 48) safelyAddObject:v7];
}

void sub_1003A96E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKPaymentRewardsBalance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _monetaryValueUsingProperties:v6 values:a4]);

  -[PKPaymentRewardsBalance setMonetaryValue:](v8, "setMonetaryValue:", v7);
  [*(id *)(a1 + 40) safelyAddObject:v8];
}

void sub_1003A9BA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v6 = a2;
  objc_msgSend((id)objc_opt_class(v5, v7), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v6, a3);
  uint64_t v8 = (void *)a1[6];
  id v10 = objc_msgSend((id)objc_opt_class(a1[4], v9), "_monetaryValueUsingProperties:values:", v6, a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue(v10);

  [v8 setMonetaryValue:v11];
}

void sub_1003A9E04(id a1, PKPaymentRewardsBalance *a2, id a3)
{
}

void sub_1003A9E0C(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentRewardsBalance setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003A9E50(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 integerValue];
  uint64_t v7 = PKCurrencyStorageIntegerToCurrencyDecimal(v5, v6);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  -[PKPaymentRewardsBalance setValue:](v4, "setValue:", v8);
}

void sub_1003A9EAC(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 integerValue];
  uint64_t v7 = PKCurrencyStorageIntegerToCurrencyDecimal(v5, v6);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  -[PKPaymentRewardsBalance setConversionRate:](v4, "setConversionRate:", v8);
}

void sub_1003A9F00(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentRewardsBalance setRoundingStrategy:](v4, "setRoundingStrategy:", [a3 integerValue]);
}

void sub_1003A9F44(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentRewardsBalance setEligibility:](v4, "setEligibility:", [a3 integerValue]);
}

void sub_1003A9F88(id a1, PKPaymentRewardsBalance *a2, id a3)
{
}

void sub_1003A9F90(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPaymentRewardsBalance setProgramURL:](v4, "setProgramURL:", v5);
}

void sub_1003A9FDC(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentRewardsBalance setLastFetchedAt:](v4, "setLastFetchedAt:", v5);
}

void sub_1003AA578(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) sharedWebService]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 targetDevice]);
  id v4 = (void *)v3;
  if (v2 && (objc_opt_respondsToSelector(v3, "trustedDeviceEnrollmentInfoForWebService:") & 1) != 0) {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 trustedDeviceEnrollmentInfoForWebService:v2]);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1003AA830(id result)
{
  uint64_t v1 = *((void *)result + 8);
  if (v1 == 1) {
    return _[*((id *)result + 4) remoteTrustedDeviceEnrollmentSignatureWithAccountDSID:*((void *)result + 5) sessionData:*((void *)result + 6) handler:*((void *)result + 7)];
  }
  if (!v1) {
    return _[*((id *)result + 4) localTrustedDeviceEnrollmentSignatureWithAccountDSID:*((void *)result + 5) sessionData:*((void *)result + 6) handler:*((void *)result + 7)];
  }
  return result;
}

void sub_1003AAAD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 certificates]);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v10 certificateOfType:0]);

  [v8 certificateVersion];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003AB834(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003AB980(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKCreditAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1003AC00C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1003AC014(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountFeatureDescriptor setMinimumAmount:](v4, "setMinimumAmount:", v6);
}

void sub_1003AC064(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountFeatureDescriptor setMaximumAmount:](v4, "setMaximumAmount:", v6);
}

void sub_1003AC0B4(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKCreditAccountFeatureDescriptor setSupportedNetworks:](v4, "setSupportedNetworks:", v5);
}

void sub_1003AC10C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1003AC114(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMerchantCapabilities:]( v4,  "setMerchantCapabilities:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC158(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setPaymentFundingSourceTypes:]( v4,  "setPaymentFundingSourceTypes:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC19C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setPaymentFrequencies:]( v4,  "setPaymentFrequencies:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC1E0(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setPaymentPresets:]( v4,  "setPaymentPresets:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC224(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1003AC22C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1003AC234(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKCreditAccountFeatureDescriptor setSupportedFileFormatsForTransactionData:]( v4,  "setSupportedFileFormatsForTransactionData:",  v5);
}

void sub_1003AC28C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMaximumAccountUsers:]( v4,  "setMaximumAccountUsers:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC2D0(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMinimumOwnerAge:]( v4,  "setMinimumOwnerAge:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC314(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMinimumParticipantAge:]( v4,  "setMinimumParticipantAge:",  [a3 unsignedIntegerValue]);
}

void sub_1003AC358(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_OSVersionRequirementRangeForSQLValue(a3);
  -[PKCreditAccountFeatureDescriptor setOsVersionRange:](v4, "setOsVersionRange:", v5);
}

void sub_1003AC3A4(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKCreditAccountFeatureDescriptor setSupportedDestinations:](v4, "setSupportedDestinations:", v5);
}

void sub_1003AC3FC(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountFeatureDescriptor setSavingsAPY:](v4, "setSavingsAPY:", v6);
}

void sub_1003AC450(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountFeatureDescriptor setSavingsInterestRate:](v4, "setSavingsInterestRate:", v6);
}

void sub_1003AC68C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1003AC6A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003AC6B4(uint64_t a1)
{
}

BOOL sub_1003AC6BC(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_1003AC858(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _BYTE *a6)
{
  id result = [*(id *)(a1 + 32) setContent:*a4];
  *a6 = 1;
  return result;
}

void sub_1003ACCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentOfferAssociatedWebDomain),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v5, "valueForProperty:", @"a"));
  id v4 = (void *)_URLForSQLValue(v3);

  objc_msgSend(*(id *)(a1 + 40), "pk_safelyAddObject:", v4);
}

void sub_1003ACF58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKAppletSubcredentialSharingInvitation);
  +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AppletSubcredentialInvitation,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  v7,  v6,  a4);

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003AD140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1003AD158(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003AD168(uint64_t a1)
{
}

BOOL sub_1003AD170(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 invitationWithIdentifier:v3 inDatabase:*(void *)(a1 + 40)]);

  if (!v4)
  {
    id v5 = objc_alloc(*(Class *)(a1 + 56));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _dictionaryFromSharedCredentialInvitation:*(void *)(a1 + 32)]);
    id v7 = [v5 initWithPropertyValues:v6 inDatabase:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }

  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL;
}

id sub_1003AD690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AppletSubcredentialInvitation,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1003AD7FC(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD804(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD80C(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD814(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD81C(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD824(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = objc_alloc(&OBJC_CLASS___NSUUID);
    id v7 = v4;
    id v8 = [v7 bytes];

    id v9 = -[NSUUID initWithUUIDBytes:](v6, "initWithUUIDBytes:", v8);
    -[PKAppletSubcredentialSharingInvitation setSharingSessionIdentifier:](v5, "setSharingSessionIdentifier:", v9);
  }

void sub_1003AD8B8(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredentialSharingInvitation setEntitlement:]( v4,  "setEntitlement:",  [a3 unsignedIntegerValue]);
}

void sub_1003AD8FC(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredentialSharingInvitation setForWatch:](v4, "setForWatch:", [a3 BOOLValue]);
}

void sub_1003AD940(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD948(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD950(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_1003AD958(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredentialSharingInvitation setSupportedRadioTechnologies:]( v4,  "setSupportedRadioTechnologies:",  [a3 integerValue]);
}

id sub_1003ADB34(uint64_t a1)
{
  id v11 = 0LL;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfURL:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:options:error:",  a1,  0LL,  &v11));
  id v2 = v11;
  if (v1) {
    BOOL v3 = v2 == 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    id v10 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v1,  0LL,  &v10));
    id v7 = v10;
    id v4 = v7;
    id v5 = 0LL;
    if (v6) {
      BOOL v8 = v7 == 0LL;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      id v5 = v6;
    }
  }

  else
  {
    id v4 = v2;
    id v5 = 0LL;
  }

  return v5;
}

NSCopying *__cdecl sub_1003AE328(id a1, NSDictionary *a2)
{
  return (NSCopying *)-[NSDictionary PKStringForKey:](a2, "PKStringForKey:", @"groupIdentifier");
}

void sub_1003AE338(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "pk_groupDictionaryByApplyingBlock:", &stru_10065B170));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1003AE488;
  v8[3] = &unk_10065B198;
  id v9 = v5;
  id v10 = a1[4];
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = a1[7];
  id v6 = v5;
  [v7 enumerateKeysAndObjectsUsingBlock:v8];
}

NSNumber *__cdecl sub_1003AE42C(id a1, NSDictionary *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary PKDictionaryForKey:](a2, "PKDictionaryForKey:", @"keyConfiguration"));
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v2 PKIntegerForKey:@"rights"]));

  return (NSNumber *)v3;
}

void sub_1003AE488(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_alloc_init(&OBJC_CLASS___PKPassShare);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);

  -[PKPassShare setIdentifier:](v5, "setIdentifier:", v7);
  -[PKPassShare setGroupIdentifier:](v5, "setGroupIdentifier:", *(void *)(a1 + 32));
  -[PKPassShare setManageability:](v5, "setManageability:", 1LL);
  -[PKPassShare setSubcredentialIdentifier:](v5, "setSubcredentialIdentifier:", *(void *)(a1 + 40));
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ((-[PKPassShare appendCredentialShareDictionary:entitlements:]( v5,  "appendCredentialShareDictionary:entitlements:",  v13,  *(void *)(a1 + 48),  (void)v18) & 1) == 0)
        {
          id v14 = *(void **)(a1 + 56);
          int8x16_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 PKStringForKey:@"keyID"]);
          [v14 safelyAddObject:v15];
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v10);
  }

  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassShare credentialShares](v5, "credentialShares"));
  id v17 = [v16 count];

  if (v17) {
    [*(id *)(a1 + 64) addObject:v5];
  }
}

void sub_1003AEBA4(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = v2;
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 PKStringForKey:@"identifier"]);
    if (!v4)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int128 v114 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPassShareBundle: Unable to create entitlement from %@. Missing subcredentialID.",  buf,  0xCu);
      }

      goto LABEL_81;
    }

    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 PKDictionaryForKey:@"entitlement"]);
    id v6 = -[PKPassEntitlement initWithSubcredentialDictionary:active:subcredentialIdentifier:]( objc_alloc(&OBJC_CLASS___PKPassEntitlement),  "initWithSubcredentialDictionary:active:subcredentialIdentifier:",  v5,  1LL,  v4);
    if (!v6)
    {
      if (!v5)
      {
LABEL_80:

LABEL_81:
        goto LABEL_82;
      }

      uint64_t v52 = PKLogFacilityTypeGetObject(33LL);
      id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int128 v114 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "PDPassShareBundle: Unable to create entitlement from %@",  buf,  0xCu);
      }

LABEL_79:
      goto LABEL_80;
    }

    id v85 = v6;
    [*(id *)(a1 + 32) addObject:v6];
    BOOL v77 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"accountRole"));

    id v78 = v3;
    __int16 v76 = (void *)objc_claimAutoreleasedReturnValue([v3 PKDictionaryForKey:@"sharing"]);
    id v9 = objc_msgSend( v76,  "PKArrayContaining:forKey:",  objc_opt_class(NSDictionary, v8),  @"entitlements");
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = v10;
    __int16 v86 = v4;
    if (v7)
    {
      id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v103 = 0u;
      __int128 v104 = 0u;
      __int128 v105 = 0u;
      __int128 v106 = 0u;
      id obj = v11;
      id v13 = [obj countByEnumeratingWithState:&v103 objects:v112 count:16];
      if (v13)
      {
        id v15 = v13;
        uint64_t v16 = *(void *)v104;
        uint64_t v79 = *(void *)v104;
        do
        {
          id v17 = 0LL;
          id v81 = v15;
          do
          {
            if (*(void *)v104 != v16) {
              objc_enumerationMutation(obj);
            }
            __int128 v18 = *(void **)(*((void *)&v103 + 1) + 8LL * (void)v17);
            id v19 = objc_msgSend( v18,  "PKArrayContaining:forKey:",  objc_opt_class(NSNumber, v14),  @"accessProfiles");
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            if (!v20)
            {
              uint64_t v21 = objc_claimAutoreleasedReturnValue([v18 PKNumberForKey:@"accessProfile"]);
              id v22 = (void *)v21;
              if (v21)
              {
                uint64_t v111 = v21;
                __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v111,  1LL));
              }

              else
              {
                __int128 v20 = 0LL;
              }
            }

            uint64_t v23 = objc_claimAutoreleasedReturnValue([v18 PKStringForKey:@"accountRole"]);
            uint64_t v24 = (void *)v23;
            if (v20) {
              BOOL v25 = v23 == 0;
            }
            else {
              BOOL v25 = 1;
            }
            if (!v25)
            {
              __int128 v101 = 0u;
              __int128 v102 = 0u;
              __int128 v99 = 0u;
              __int128 v100 = 0u;
              __int128 v83 = v20;
              id v26 = v20;
              id v27 = [v26 countByEnumeratingWithState:&v99 objects:v110 count:16];
              if (v27)
              {
                id v28 = v27;
                uint64_t v29 = *(void *)v100;
                do
                {
                  for (unint64_t i = 0LL; i != v28; unint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v100 != v29) {
                      objc_enumerationMutation(v26);
                    }
                    uint64_t v31 = *(void *)(*((void *)&v99 + 1) + 8LL * (void)i);
                    uint64_t v32 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v12,  "objectForKeyedSubscript:",  v31));
                    if (!v32)
                    {
                      uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                      -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v32, v31);
                    }

                    -[NSMutableArray addObject:](v32, "addObject:", v24);
                  }

                  id v28 = [v26 countByEnumeratingWithState:&v99 objects:v110 count:16];
                }

                while (v28);
              }

              uint64_t v16 = v79;
              id v15 = v81;
              __int128 v20 = v83;
            }

            id v17 = (char *)v17 + 1;
          }

          while (v17 != v15);
          id v15 = [obj countByEnumeratingWithState:&v103 objects:v112 count:16];
        }

        while (v15);
      }

      __int128 v97 = 0u;
      __int128 v98 = 0u;
      __int128 v95 = 0u;
      __int128 v96 = 0u;
      id v33 = v12;
      id v34 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v33,  "countByEnumeratingWithState:objects:count:",  &v95,  v109,  16LL);
      if (v34)
      {
        id v35 = v34;
        uint64_t v36 = *(void *)v96;
        do
        {
          for (j = 0LL; j != v35; j = (char *)j + 1)
          {
            if (*(void *)v96 != v36) {
              objc_enumerationMutation(v33);
            }
            uint64_t v38 = *(void *)(*((void *)&v95 + 1) + 8LL * (void)j);
            __int128 v39 = objc_alloc(&OBJC_CLASS___PKPassEntitlement);
            __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", v38));
            id v41 = -[PKPassEntitlement initWithCarKeyProfile:roles:active:subcredentialIdentifier:]( v39,  "initWithCarKeyProfile:roles:active:subcredentialIdentifier:",  v38,  v40,  0LL,  v86);

            if (v41)
            {
              __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement value](v41, "value"));
              __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement value](v85, "value"));
              unsigned int v44 = [v42 isEqualToNumber:v43];

              if (v44)
              {
                uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement shareability](v41, "shareability"));
                -[PKPassEntitlement setShareability:](v85, "setShareability:", v45);

                __int16 v46 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement visibility](v41, "visibility"));
                -[PKPassEntitlement setVisibility:](v85, "setVisibility:", v46);

                uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement manageability](v41, "manageability"));
                -[PKPassEntitlement setManageability:](v85, "setManageability:", v47);
              }

              else
              {
                [*(id *)(a1 + 32) addObject:v41];
              }
            }

            else
            {
              uint64_t v48 = PKLogFacilityTypeGetObject(33LL);
              id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                __int128 v114 = v78;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "PDPassShareBundle: Unable to create entitlement from %@",  buf,  0xCu);
              }
            }
          }

          id v35 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v33,  "countByEnumeratingWithState:objects:count:",  &v95,  v109,  16LL);
        }

        while (v35);
      }

      __int128 v50 = obj;
      goto LABEL_78;
    }

    __int128 v93 = 0u;
    __int128 v94 = 0u;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    __int16 v84 = v10;
    id v54 = [v10 countByEnumeratingWithState:&v91 objects:v108 count:16];
    if (v54)
    {
      id v55 = v54;
      uint64_t v56 = *(void *)v92;
      do
      {
        for (k = 0LL; k != v55; k = (char *)k + 1)
        {
          if (*(void *)v92 != v56) {
            objc_enumerationMutation(v84);
          }
          unsigned int v58 = -[PKPassEntitlement initWithSubcredentialDictionary:active:subcredentialIdentifier:]( objc_alloc(&OBJC_CLASS___PKPassEntitlement),  "initWithSubcredentialDictionary:active:subcredentialIdentifier:",  *(void *)(*((void *)&v91 + 1) + 8LL * (void)k),  0LL,  v4);
          id v59 = v58;
          if (v58)
          {
            __int128 v60 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement value](v58, "value"));
            id v61 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassEntitlement value](v6, "value"));
            unsigned __int8 v62 = [v60 isEqualToNumber:v61];

            if ((v62 & 1) == 0) {
              [*(id *)(a1 + 32) addObject:v59];
            }
          }

          else
          {
            uint64_t v63 = PKLogFacilityTypeGetObject(33LL);
            __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              __int128 v114 = v78;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "PDPassShareBundle: Unable to create entitlement from %@",  buf,  0xCu);
            }
          }
        }

        id v55 = [v84 countByEnumeratingWithState:&v91 objects:v108 count:16];
      }

      while (v55);
    }

    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v87 = 0u;
    __int128 v88 = 0u;
    id v65 = *(id *)(a1 + 32);
    id v66 = [v65 countByEnumeratingWithState:&v87 objects:v107 count:16];
    if (!v66)
    {
LABEL_77:

      __int128 v50 = v84;
LABEL_78:

      id v5 = v77;
      BOOL v3 = v78;
      id v6 = v85;
      id v4 = v86;
      id v53 = (os_log_s *)v76;
      goto LABEL_79;
    }

    id v67 = v66;
    uint64_t v68 = *(void *)v88;
LABEL_66:
    uint64_t v69 = 0LL;
    while (1)
    {
      if (*(void *)v88 != v68) {
        objc_enumerationMutation(v65);
      }
      __int128 v70 = *(void **)(*((void *)&v87 + 1) + 8 * v69);
      uint64_t v71 = objc_claimAutoreleasedReturnValue([v70 shareability]);
      if (!v71) {
        goto LABEL_74;
      }
      __int128 v72 = (void *)v71;
      uint64_t v73 = objc_claimAutoreleasedReturnValue([v70 visibility]);
      if (!v73) {
        break;
      }
      __int128 v74 = (void *)v73;
      v75 = (void *)objc_claimAutoreleasedReturnValue([v70 manageability]);

      if (!v75) {
        goto LABEL_74;
      }
LABEL_75:
      [v70 setHasRemainingShares:1];
      if (v67 == (id)++v69)
      {
        id v67 = [v65 countByEnumeratingWithState:&v87 objects:v107 count:16];
        if (!v67) {
          goto LABEL_77;
        }
        goto LABEL_66;
      }
    }

LABEL_74:
    [v70 setShareability:&off_1006911D8];
    [v70 setVisibility:&off_1006911F0];
    [v70 setManageability:&off_100691208];
    goto LABEL_75;
  }

BOOL sub_1003AF59C(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = sub_10030F564((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, a2, *(void **)(a1 + 8));
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  BOOL v4 = v3 != 0LL;

  return v4;
}

BOOL sub_1003AF5F4(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = sub_10030F878((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, a2, *(void **)(a1 + 8));
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  BOOL v4 = v3 != 0LL;

  return v4;
}

BOOL sub_1003AF64C(BOOL result, void *a2, id *a3)
{
  if (result) {
    return sub_10030FAC4((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, a2, a3, *(void **)(result + 8));
  }
  return result;
}

void **sub_1003AF674(void **a1, void *a2)
{
  if (a1)
  {
    id v2 = sub_10030FE1C((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, a1[1], a2);
    a1 = (void **)objc_claimAutoreleasedReturnValue(v2);
  }

  return a1;
}

void **sub_1003AF6B0(void **a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = sub_10030FF98((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, a1[1], a2);
    a1 = (void **)objc_claimAutoreleasedReturnValue(v2);
  }

  return a1;
}

void **sub_1003AF6EC(void **result)
{
  if (result) {
    return (void **)sub_1003105F8((uint64_t)&OBJC_CLASS___ApplicationMessageRegistration, result[1]);
  }
  return result;
}

void *sub_1003AF714(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue( +[TileDescriptor descriptorsInDatabase:forPassUniqueID:context:]( &OBJC_CLASS___TileDescriptor,  "descriptorsInDatabase:forPassUniqueID:context:",  a1[1],  a2,  a3));
  }
  return a1;
}

void *sub_1003AF754(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue( +[TileDescriptor updatePassTileDescriptorStatesInDatabase:forPassUniqueID:forContext:withTransform:]( &OBJC_CLASS___TileDescriptor,  "updatePassTileDescriptorStatesInDatabase:forPassUniqueID:forContext:withTransform:",  a1[1],  a2,  a3,  a4));
  }
  return a1;
}

void *sub_1003AF798(void *result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (void *)+[TileDescriptorStateParticipant setPassTileDescriptorStateParticipantIDs:forPassUniqueID:inDatabase:]( &OBJC_CLASS___TileDescriptorStateParticipant,  "setPassTileDescriptorStateParticipantIDs:forPassUniqueID:inDatabase:",  a2,  a3,  result[1]);
  }
  return result;
}

BOOL sub_1003AF7C8(BOOL result, uint64_t a2)
{
  if (result) {
    return +[TileDescriptorStateParticipant removeParticipantsForPassUniqueID:inDatabase:]( &OBJC_CLASS___TileDescriptorStateParticipant,  "removeParticipantsForPassUniqueID:inDatabase:",  a2,  *(void *)(result + 8));
  }
  return result;
}

id *sub_1003AF7F4(uint64_t a1)
{
  uint64_t v1 = objc_opt_self(a1);
  uint64_t v2 = PKObjectSettingsManagerArchivePath(v1);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  BOOL v4 = -[NSMutableDictionary initWithContentsOfFile:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithContentsOfFile:",  v3);
  id v5 = sub_1003AF860((id *)objc_alloc(&OBJC_CLASS___PDObjectSettingsManager), v4);

  return v5;
}

id *sub_1003AF860(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)&OBJC_CLASS___PDObjectSettingsManager;
    BOOL v4 = (id *)objc_msgSendSuper2(&v17, "init");
    a1 = v4;
    if (v4)
    {
      *((_DWORD *)v4 + 2) = 0;
      if (v3) {
        id v5 = (NSMutableDictionary *)v3;
      }
      else {
        id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      }
      id v6 = a1[2];
      a1[2] = v5;

      id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v8 = a1[2];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      void v15[2] = sub_1003AFA38;
      v15[3] = &unk_1006581E8;
      id v9 = v7;
      uint64_t v16 = v9;
      [v8 enumerateKeysAndObjectsUsingBlock:v15];
      id v10 = -[NSMutableArray count](v9, "count");
      if (v10)
      {
        uint64_t v11 = (uint64_t)v10;
        uint64_t Object = PKLogFacilityTypeGetObject(0LL);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
          sub_100442888(v11, v13);
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 134217984;
          uint64_t v19 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: removing %lu invalid entires.",  buf,  0xCu);
        }

        [a1[2] removeObjectsForKeys:v9];
        sub_1003AFABC((uint64_t)a1);
      }
    }
  }

  return a1;
}

void sub_1003AFA38(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v10, v7) & 1) == 0
    || (uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNumber, v8), (objc_opt_isKindOfClass(v5, v9) & 1) == 0))
  {
    [*(id *)(a1 + 32) addObject:v10];
  }
}

void sub_1003AFABC(uint64_t a1)
{
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 1;
      uint64_t v2 = (void *)PDOSTransactionCreate("PDObjectSettingsManager");
      dispatch_time_t v3 = dispatch_time(0LL, 1000000000LL);
      id v4 = PDHeavyQueue();
      id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      v7[2] = sub_1003B000C;
      v7[3] = &unk_1006392B0;
      id v8 = v2;
      uint64_t v9 = a1;
      id v6 = v2;
      dispatch_after(v3, v5, v7);
    }
  }

BOOL sub_1003AFB84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  BOOL v5 = 0LL;
  if (a1 && v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) objectForKeyedSubscript:v4]);
    BOOL v5 = v6 != 0LL;

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }

  return v5;
}

id sub_1003AFBF4(uint64_t a1, void *a2, id a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (v5)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) objectForKeyedSubscript:v5]);
      if (v7)
      {
        id v8 = v7;
        a3 = [v7 unsignedIntegerValue];
      }
    }

    os_unfair_lock_unlock(v6);
  }

  else
  {
    a3 = 0LL;
  }

  return a3;
}

BOOL sub_1003AFC74(BOOL result, uint64_t a2, void *a3, void *a4)
{
  if (result) {
    return ((unint64_t)sub_1003AFBF4(result, a3, a4) & a2) != 0;
  }
  return result;
}

void sub_1003AFCA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = v7;
  if (a1 && v7)
  {
    if (a2 == a4)
    {
      sub_1003AFE64(a1, v7);
    }

    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) objectForKeyedSubscript:v8]);
      char v11 = PKEqualObjects(v10, v9);

      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((v11 & 1) != 0)
      {
        if (v14)
        {
          int v17 = 138412290;
          __int128 v18 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: preserving non-default settings for %@.",  (uint8_t *)&v17,  0xCu);
        }
      }

      else
      {
        if (v14)
        {
          int v17 = 138412290;
          __int128 v18 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: writing non-default settings for %@.",  (uint8_t *)&v17,  0xCu);
        }

        id v15 = *(void **)(a1 + 16);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
        [v15 setObject:v16 forKey:v8];

        sub_1003AFABC(a1);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    }
  }
}

void sub_1003AFE64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) objectForKeyedSubscript:v4]);

    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v8)
      {
        int v9 = 138412290;
        id v10 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: restoring default settings for %@.",  (uint8_t *)&v9,  0xCu);
      }

      [*(id *)(a1 + 16) removeObjectForKey:v4];
      sub_1003AFABC(a1);
    }

    else
    {
      if (v8)
      {
        int v9 = 138412290;
        id v10 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: preserving default settings for %@.",  (uint8_t *)&v9,  0xCu);
      }
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

id *sub_1003AFFB0(os_unfair_lock_s *a1)
{
  uint64_t v1 = (id *)a1;
  if (a1)
  {
    uint64_t v2 = a1 + 2;
    os_unfair_lock_lock(a1 + 2);
    uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue([v1[2] allKeys]);
    os_unfair_lock_unlock(v2);
  }

  return v1;
}

uint64_t sub_1003AFFF8()
{
  uint64_t v0 = objc_opt_self();
  return PKRemoveObjectSettingsManagerSafeHavenArchive(v0);
}

void sub_1003B000C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 40) + 24LL) = 0;
  uint64_t v2 = PKObjectSettingsManagerArchivePath();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(*(void *)(a1 + 40) + 16) count];
      int v8 = 134217984;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: archiving %lu entries to disk.",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 16) writeToFile:v3 atomically:1];
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1004428FC(v6);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager: failed to archive to disk - missing archive path.",  (uint8_t *)&v8,  2u);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8LL));
}

id sub_1003B0174(id result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    id v3 = a2;
    id v5 = (void *)objc_opt_class(v3, v4);
    id v6 = sub_1003B01E8(v2, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);

    id v8 = sub_1003AFBF4(v2, v7, v6);
    return v8;
  }

  return result;
}

id sub_1003B01E8(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (objc_class *)objc_opt_class(a2, v6);
      id v8 = NSStringFromClass(v7);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      int v10 = 138543362;
      char v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager (PKObjectAdditions): Error: Unknown default settings for object of class %{public}@.",  (uint8_t *)&v10,  0xCu);
    }
  }

  return 0LL;
}

BOOL sub_1003B02F4(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v5 = a3;
  id v7 = (void *)objc_opt_class(v5, v6);
  id v8 = sub_1003B01E8(a1, v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);

  BOOL v10 = ((unint64_t)sub_1003AFBF4(a1, v9, v8) & a2) != 0;
  return v10;
}

void sub_1003B0380(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v7 = (void *)objc_opt_class(v5, v6);
    id v8 = sub_1003B01E8(a1, v7);
    id v9 = (id)objc_claimAutoreleasedReturnValue([v5 uniqueID]);

    sub_1003AFCA8(a1, a2, v9, (uint64_t)v8);
  }

void sub_1003B0400(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    objc_msgSend(v3, "setSettingsWithoutUpdatingDataAccessor:", sub_1003B0174(a1, v3));
  }

id *sub_1003B0450(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = -[NSMutableDictionary initWithContentsOfURL:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithContentsOfURL:",  v3);

  id v5 = sub_1003AF860((id *)objc_alloc(&OBJC_CLASS___PDObjectSettingsManager), v4);
  return v5;
}

id sub_1003B04B8(id a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___Pass, v3);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    {
      a1 = objc_msgSend( +[PKPass classForPassType:](PKPass, "classForPassType:", objc_msgSend(v4, "passFlavor")),  "defaultSettings");
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDObjectSettingsManager (DatabasePassAdditions): Error: expected parameter to be of type 'Pass'.",  v9,  2u);
      }

      a1 = 0LL;
    }
  }

  return a1;
}

BOOL sub_1003B0580(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v5 = a3;
  id v6 = sub_1003B04B8(a1, v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);

  BOOL v8 = ((unint64_t)sub_1003AFBF4((uint64_t)a1, v7, v6) & a2) != 0;
  return v8;
}

uint64_t sub_1003B0B64(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_predicateForAccountPID:",  -[NSData longLongValue](v5, "longLongValue")));
      BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 32) predicate:v7]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _sharedAccountCloudStoreForQuery:v8]);
      [*(id *)(a1 + 40) setObject:v9 forKey:v6];

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_1003B0EC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003B101C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[SharedAccountCloudStoreZone sharedAccountCloudStoreZonesForSharedAccountCloudStorePID:inDatabase:]( &OBJC_CLASS___SharedAccountCloudStoreZone,  "sharedAccountCloudStoreZonesForSharedAccountCloudStorePID:inDatabase:",  a2,  v6));

  [*(id *)(a1 + 40) setSharedAccountCloudStoreZones:v7];
}

void sub_1003B1214(id a1, PKSharedAccountCloudStore *a2, id a3)
{
  id v4 = a2;
  -[PKSharedAccountCloudStore setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_1003B1258(id a1, PKSharedAccountCloudStore *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKSharedAccountCloudStore setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_1003B12A4(id a1, PKSharedAccountCloudStore *a2, id a3)
{
}

void sub_1003B1AC8(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountUserInfoUpdate),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountUserInfoUpdate userInfoUpdate](v5, "userInfoUpdate"));
  [v3 addObject:v4];
}

id sub_1003B1CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountUserInfoUpdate,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1003B1E64(id a1, PKAccountUserInfoUpdate *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountUserInfoUpdate setUpdatedDate:](v4, "setUpdatedDate:", v5);
}

void sub_1003B229C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003B242C(id a1, PKPayLaterFinancingPlanTermsDetails *a2, id a3)
{
}

id sub_1003B2DE8(uint64_t a1)
{
  if (PKDiscoveryShouldProcessLocaleChange()) {
    objc_msgSend( *(id *)(a1 + 32),  "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:",  1,  &stru_10065B2E0);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003B2F4C;
  v5[3] = &unk_10063ABB8;
  void v5[4] = v2;
  return [v3 accountsWithCompletion:v5];
}

void sub_1003B2E68(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  PKSetDiscoveryShouldProcessLocaleChange(0LL);
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      int v9 = 138412290;
      BOOL v10 = v2;
      uint64_t v6 = "Error - Update Discovery Manifest failed for locale change at start up, %@";
      id v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
    }
  }

  else if (v5)
  {
    LOWORD(v9) = 0;
    uint64_t v6 = "Updated Discovery Manifest for locale change at start up";
    id v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_1003B2F4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(dispatch_queue_s **)(v4 + 264);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003B2FCC;
  v7[3] = &unk_1006392B0;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1003B2FCC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 32) defaultAccountForFeature:2 forAccounts:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v2 associatedPassUniqueID]);
    unsigned int v6 = [v4 passExistsWithUniqueID:v5];
  }

  else
  {
    unsigned int v6 = 0;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 32) defaultAccountForFeature:3 forAccounts:*(void *)(a1 + 40)]);
  id v8 = v7;
  if (v7)
  {
    int v9 = *(void **)(*(void *)(a1 + 32) + 8LL);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v7 associatedPassUniqueID]);
    char v11 = [v9 passExistsWithUniqueID:v10] ^ 1;
  }

  else
  {
    char v11 = 1;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 32) defaultAccountForFeature:5 forAccounts:*(void *)(a1 + 40)]);
  id v13 = v12;
  if (v12) {
    unsigned int v14 = v6;
  }
  else {
    unsigned int v14 = 0;
  }
  BOOL v15 = v14 == 1 && [v12 state] != (id)4;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAccount]);
  int v17 = v16;
  if (v16)
  {
    __int128 v18 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 associatedPassUniqueID]);
    LODWORD(v1_Block_object_dispose(va, 8) = [v18 passExistsWithUniqueID:v19];

    if ((_DWORD)v18)
    {
      __int128 v20 = *(void **)(a1 + 32);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_1003B3280;
      v27[3] = &unk_100639610;
      void v27[4] = v20;
      [v20 loadDialogRequestsForPlacement:PKEngagementAppleCashDashboardPlacement completion:v27];
    }
  }

  if (!v6)
  {
    if ((v11 & 1) != 0) {
      goto LABEL_18;
    }
LABEL_22:
    uint64_t v23 = *(void **)(a1 + 32);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1003B3328;
    v25[3] = &unk_100639610;
    void v25[4] = v23;
    [v23 loadDialogRequestsForPlacement:PKEngagementPayLaterDashboardPlacement completion:v25];
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  id v22 = *(void **)(a1 + 32);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_1003B32D4;
  v26[3] = &unk_100639610;
  void v26[4] = v22;
  [v22 loadDialogRequestsForPlacement:PKEngagementAppleCardDashboardPlacement completion:v26];
  if ((v11 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_18:
  if (v15)
  {
LABEL_19:
    uint64_t v21 = *(void **)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1003B337C;
    v24[3] = &unk_100639610;
    void v24[4] = v21;
    [v21 loadDialogRequestsForPlacement:PKEngagementSavingsDashboardPlacement completion:v24];
  }

void sub_1003B3280(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCashDashboardPlacement];
  }

void sub_1003B32D4(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCardDashboardPlacement];
  }

void sub_1003B3328(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementPayLaterDashboardPlacement];
  }

void sub_1003B337C(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementSavingsDashboardPlacement];
  }

void sub_1003B33E0(id a1)
{
}

void sub_1003B34DC(uint64_t a1)
{
  uint64_t v2 = (void *)PDDarwinNotificationFamilyCircleChanged;
  id v6 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v6 == v3)
  {

LABEL_10:
    _[*(id *)(a1 + 40) familyCircleChanged];
    return;
  }

  if (v6) {
    BOOL v4 = v3 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {

    return;
  }

  unsigned int v5 = [v6 isEqualToString:v3];

  if (v5) {
    goto LABEL_10;
  }
}

void sub_1003B3674(uint64_t a1)
{
  uint64_t v2 = (void *)PKEngagementPassesPlacement;
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  if (v3 == v4)
  {

LABEL_10:
    objc_msgSend( *(id *)(a1 + 40),  "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:",  0,  &stru_10065B320);
    return;
  }

  unsigned int v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
  }

  else
  {
    unsigned int v7 = [v3 isEqualToString:v4];

    if (v7) {
      goto LABEL_10;
    }
  }

  id v8 = *(void **)(a1 + 32);
  int v9 = *(void **)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003B37E8;
  void v10[3] = &unk_1006426D8;
  void v10[4] = v9;
  id v11 = v8;
  [v9 loadDialogRequestsForPlacement:v11 completion:v10];
}

void sub_1003B3780(id a1, NSError *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Processed discovery items after engagement update",  v4,  2u);
  }
}

void sub_1003B37E8(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:*(void *)(a1 + 40)];
  }

void sub_1003B39D0(uint64_t a1)
{
  if ((PKForceEnableAllDiscoveryCardsInWallet() & 1) != 0)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) discoveryItems]);
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    id v4 = [v3 countByEnumeratingWithState:&v48 objects:v53 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v49;
      do
      {
        for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v49 != v5) {
            objc_enumerationMutation(v3);
          }
          unsigned int v7 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
          if ([v7 status] != (id)4) {
            -[NSMutableArray addObject:](v2, "addObject:", v7);
          }
        }

        id v4 = [v3 countByEnumeratingWithState:&v48 objects:v53 count:16];
      }

      while (v4);
    }

    id v8 = -[NSMutableArray copy](v2, "copy");
  }

  else
  {
    int v9 = *(void **)(*(void *)(a1 + 32) + 8LL);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 activeDiscoveryItemsForRelevantDate:v10]);

    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _filterItemsForViewCount:v11]);
  }

  dispatch_group_t v12 = dispatch_group_create();
  id v13 = *(void **)(*(void *)(a1 + 32) + 304LL);
  if (v13) {
    unsigned int v14 = (char *)[v13 count];
  }
  else {
    unsigned int v14 = 0LL;
  }
  id v15 = [v8 count];
  uint64_t v42 = 0LL;
  __int16 v43 = &v42;
  uint64_t v44 = 0x3032000000LL;
  uint64_t v45 = sub_1003B3DC8;
  __int16 v46 = sub_1003B3DD8;
  uint64_t v47 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  &v14[(void)v15]);
  uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 304LL);
  if (v16)
  {
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v39 = 0u;
    __int128 v38 = 0u;
    id v17 = v16;
    id v18 = [v17 countByEnumeratingWithState:&v38 objects:v52 count:16];
    if (v18)
    {
      uint64_t v19 = *(void *)v39;
      do
      {
        for (j = 0LL; j != v18; j = (char *)j + 1)
        {
          if (*(void *)v39 != v19) {
            objc_enumerationMutation(v17);
          }
          [(id)v43[5] addObject:*(void *)(*((void *)&v38 + 1) + 8 * (void)j)];
        }

        id v18 = [v17 countByEnumeratingWithState:&v38 objects:v52 count:16];
      }

      while (v18);
    }
  }

  uint64_t v21 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v15);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  void v34[2] = sub_1003B3DE0;
  v34[3] = &unk_100645578;
  id v22 = v12;
  uint64_t v23 = *(void *)(a1 + 32);
  id v35 = v22;
  uint64_t v36 = v23;
  uint64_t v24 = v21;
  __int128 v37 = v24;
  [v8 enumerateObjectsUsingBlock:v34];
  BOOL v25 = *(void **)(a1 + 40);
  id v26 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003B4150;
  block[3] = &unk_100648F60;
  id v30 = v8;
  uint64_t v31 = v24;
  id v33 = &v42;
  id v32 = v25;
  id v27 = v24;
  id v28 = v8;
  dispatch_group_notify(v22, v26, block);

  _Block_object_dispose(&v42, 8);
}

void sub_1003B3D9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_1003B3DC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003B3DD8(uint64_t a1)
{
}

void sub_1003B3DE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003B3E98;
  v6[3] = &unk_10065B348;
  id v4 = *(void **)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 32);
  id v5 = v3;
  [v7 _articleLayoutForDiscoveryItem:v5 completion:v6];
}

void sub_1003B3E98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v13[0] = _NSConcreteStackBlock;
  void v13[2] = sub_1003B3F80;
  void v13[3] = &unk_100640CE0;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  v13[1] = 3221225472LL;
  id v14 = v6;
  id v15 = v5;
  id v16 = v7;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v18 = v10;
  id v19 = *(id *)(a1 + 56);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, v13);
}

void sub_1003B3F80(uint64_t a1)
{
  if (*(void *)(a1 + 32) || (uint64_t v10 = *(void **)(a1 + 40)) == 0LL)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_opt_class(*(void *)(a1 + 64), v4);
      id v6 = *(void **)(a1 + 48);
      id v7 = v5;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      uint64_t v9 = *(void *)(a1 + 32);
      int v17 = 138412802;
      uint64_t v18 = v5;
      __int16 v19 = 2112;
      __int128 v20 = v8;
      __int16 v21 = 2112;
      uint64_t v22 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@: Failed to get Discovery Article Layout for Discovery Item Identifier: %@ with error: %@",  (uint8_t *)&v17,  0x20u);
    }
  }

  else
  {
    [v10 setItem:*(void *)(a1 + 48)];
    id v11 = *(void **)(a1 + 40);
    id v12 = sub_1003B40E8(*(void **)(a1 + 48));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    [v11 localizeWithBundle:v13];

    id v14 = *(void **)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
    [v14 setObject:v15 forKey:v16];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

NSBundle *sub_1003B40E8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSBundle);
  id v3 = sub_1003BEA34(v1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  id v5 = -[NSBundle initWithURL:](v2, "initWithURL:", v4);
  return v5;
}

void sub_1003B4150(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(a1 + 40);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v6), "identifier", (void)v12));
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v8]);

        if (v9) {
          [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v9];
        }

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v4);
  }

  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) copy];
  (*(void (**)(uint64_t, id))(v10 + 16))(v10, v11);
}

void sub_1003B4358(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000LL;
  __int128 v20 = sub_1003B3DC8;
  __int16 v21 = sub_1003B3DD8;
  id v22 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) discoveryItemWithIdentifier:*(void *)(a1 + 40)]);
  v15[0] = 0LL;
  v15[1] = v15;
  void v15[2] = 0x3032000000LL;
  v15[3] = sub_1003B3DC8;
  void v15[4] = sub_1003B3DD8;
  id v16 = 0LL;
  if (!v18[5])
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1003B4564;
    v12[3] = &unk_10063BA38;
    id v3 = *(void **)(a1 + 40);
    void v12[4] = *(void *)(a1 + 32);
    __int128 v14 = &v17;
    id v13 = v3;
    [v2 addOperation:v12];
  }

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1003B483C;
  v11[3] = &unk_100641880;
  void v11[4] = *(void *)(a1 + 32);
  void v11[5] = &v17;
  void v11[6] = v15;
  [v2 addOperation:v11];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003B49AC;
  v7[3] = &unk_100643770;
  uint64_t v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v10 = v15;
  id v9 = *(id *)(a1 + 48);
  id v6 = [v2 evaluateWithInput:v4 completion:v7];

  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1003B4540( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1003B4564(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[5];
  id v9 = *(void **)(a1[4] + 16LL);
  v13[0] = _NSConcreteStackBlock;
  void v13[2] = sub_1003B4628;
  void v13[3] = &unk_10065B3C0;
  v13[1] = 3221225472LL;
  id v14 = v6;
  uint64_t v10 = a1[6];
  id v16 = v7;
  uint64_t v17 = v10;
  id v15 = v8;
  id v11 = v6;
  id v12 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v13];
}

void sub_1003B4628(uint64_t a1, void *a2)
{
  if (a2)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1003B46F0;
    v4[3] = &unk_10065B398;
    uint64_t v8 = *(void *)(a1 + 56);
    id v5 = *(id *)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    id v6 = *(id *)(a1 + 32);
    [a2 discoveryManifestWithCompletion:v4];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_1003B46F0(uint64_t a1, void *a2)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 manifest]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 discoveryItems]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1003B47BC;
  v8[3] = &unk_10065B370;
  id v9 = *(id *)(a1 + 32);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pk_firstObjectPassingTest:", v8));
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) == 0LL);
}

uint64_t sub_1003B47BC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_1003B483C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  v13[1] = 3221225472LL;
  void v13[2] = sub_1003B4900;
  void v13[3] = &unk_10065B3E8;
  int8x16_t v16 = v9;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v8 _articleLayoutForDiscoveryItem:v10 completion:v13];
}

void sub_1003B4900(void *a1, void *a2)
{
  id v7 = a2;
  [*(id *)(*(void *)(a1[6] + 8) + 40) setItem:*(void *)(*(void *)(a1[7] + 8) + 40)];
  uint64_t v4 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  id v5 = sub_1003B40E8(*(void **)(*(void *)(a1[7] + 8LL) + 40LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v4 localizeWithBundle:v6];

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v7 == 0LL);
}

void sub_1003B49AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003B4A6C;
  block[3] = &unk_10065B410;
  id v14 = v5;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  id v10 = (id)v12;
  __int128 v17 = v12;
  id v11 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1003B4A6C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCanceled])
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___PKDiscoveryItem);
    -[PKDiscoveryItem setIdentifier:](v2, "setIdentifier:", *(void *)(a1 + 40));
    if (sub_1003B4B40(v2))
    {
      uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _discoveryArticleLayoutFromBundleForDiscoveryItem:v2 error:0]);
      uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = v3;

      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setItem:v2];
      id v6 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      id v7 = sub_1003B40E8(v2);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      [v6 localizeWithBundle:v8];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_1003B4B40(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v3 = sub_1003BEA34(v1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 path]);
  id v6 = [v2 fileExistsAtPath:v5];

  return v6;
}

void sub_1003B4C4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) dismissedDiscoveryItems]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_1003B4D54(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_1003B4FA4;
  v31[3] = &unk_10065B478;
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  v31[4] = *(void *)(a1 + 32);
  uint64_t v33 = v3;
  id v32 = v4;
  id v5 = objc_retainBlock(v31);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentPass]);
  unsigned int v7 = [v6 hasAssociatedPeerPaymentAccount];

  if (!v7)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentPass]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 associatedAccountServiceAccountIdentifier]);

    if (v15)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      __int128 v17 = *(void **)(a1 + 40);
      uint64_t v18 = *(void **)(v16 + 32);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_1003B5350;
      v23[3] = &unk_10065B4F0;
      void v23[4] = v16;
      id v10 = &v24;
      id v11 = (id *)&v25;
      id v24 = v17;
      BOOL v25 = v5;
      v26[1] = 2LL;
      __int128 v12 = (id *)v26;
      v26[0] = *(id *)(a1 + 48);
      uint64_t v19 = v5;
      [v18 defaultAccountForFeature:2 completion:v23];
      goto LABEL_6;
    }

LABEL_8:
    __int128 v20 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1003B5540;
    v21[3] = &unk_10063A830;
    id v22 = *(id *)(a1 + 48);
    dispatch_async(v20, v21);
    id v2 = v22;
    goto LABEL_9;
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 48);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1003B5144;
  v27[3] = &unk_10065B4C8;
  void v27[4] = v8;
  id v10 = &v28;
  id v11 = (id *)&v29;
  id v28 = v2;
  uint64_t v29 = v5;
  v30[1] = 1LL;
  __int128 v12 = (id *)v30;
  v30[0] = *(id *)(a1 + 48);
  id v13 = v5;
  [v9 accountWithPreventingServerFetch:0 completion:v27];
LABEL_6:

LABEL_9:
}

void sub_1003B4FA4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (a2)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [v4 engagementMessagesForPassQualifier:v2 relevantDate:v5 active:*(void *)(a1 + 48)]);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _filterEngagementMessagesForViewCount:v2]);

  [v6 enumerateObjectsUsingBlock:&stru_10065B450];
  unsigned int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003B5134;
  void v10[3] = &unk_1006396B0;
  id v11 = v6;
  id v12 = v7;
  id v9 = v6;
  dispatch_async(v8, v10);
}

void sub_1003B50A0(id a1, PKDiscoveryEngagementMessage *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  id v5 = sub_1003B50E8();
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKDiscoveryEngagementMessage localizeWithBundle:](v4, "localizeWithBundle:", v6);
}

NSBundle *sub_1003B50E8()
{
  uint64_t v0 = objc_alloc(&OBJC_CLASS___NSBundle);
  id v1 = sub_1003BB9B8();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = -[NSBundle initWithURL:](v0, "initWithURL:", v2);

  return v3;
}

uint64_t sub_1003B5134(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1003B5144(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003B5210;
  v9[3] = &unk_10065B4A0;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 48);
  unsigned int v7 = *(void **)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v6;
  id v14 = v7;
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_1003B5210(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedPassSerialNumber]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serialNumber]);
  id v4 = v2;
  id v5 = v3;
  if (v4 == v5)
  {

LABEL_10:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    return;
  }

  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
  }

  else
  {
    unsigned __int8 v8 = [v4 isEqualToString:v5];

    if ((v8 & 1) != 0) {
      goto LABEL_10;
    }
  }

  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003B5340;
  block[3] = &unk_10063A830;
  id v11 = *(id *)(a1 + 64);
  dispatch_async(v9, block);
}

uint64_t sub_1003B5340(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B5350(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003B541C;
  v9[3] = &unk_10065B4A0;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 48);
  BOOL v7 = *(void **)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v6;
  id v14 = v7;
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_1003B541C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedPassUniqueID]);
  id v3 = *(void **)(a1 + 40);
  id v4 = v2;
  id v5 = v3;
  if (v4 == v5)
  {

LABEL_10:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    return;
  }

  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
  }

  else
  {
    unsigned int v8 = [v4 isEqualToString:v5];

    if (v8) {
      goto LABEL_10;
    }
  }

  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003B5530;
  block[3] = &unk_10063A830;
  id v11 = *(id *)(a1 + 64);
  dispatch_async(v9, block);
}

uint64_t sub_1003B5530(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003B5540(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B55F8(void *a1)
{
  uint64_t v1 = a1[6];
  if (a1[4])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 136), "objectForKeyedSubscript:"));
    (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v3, 0LL);

    id v4 = (void *)a1[4];
    id v5 = (void *)a1[5];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1003B56D4;
    v6[3] = &unk_1006426D8;
    void v6[4] = v5;
    id v7 = v4;
    [v5 loadDialogRequestsForPlacement:v7 completion:v6];
  }

  else
  {
    (*(void (**)(void, void *))(v1 + 16))(a1[6], &__NSArray0__struct);
  }

void sub_1003B56D4(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:*(void *)(a1 + 40)];
  }

uint64_t sub_1003B57E4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v12 = v4;
    __int16 v13 = 2112;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Dismissing dialog request with identifier:%@ for placement:%@",  buf,  0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 48) + 136), "objectForKeyedSubscript:"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1003B5934;
    v9[3] = &unk_10065B518;
    id v10 = *(id *)(a1 + 32);
    id v7 = objc_msgSend(v6, "pk_createArrayByRemovingObjectsPassingTest:", v9);
    [*(id *)(*(void *)(a1 + 48) + 136) setObject:v7 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_1003B5934(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1003B5C94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1003B5CC0(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  uint64_t v23 = v2;
  id obj = (id)objc_claimAutoreleasedReturnValue([v2 messageActions]);
  id v27 = [obj countByEnumeratingWithState:&v38 objects:v45 count:16];
  if (v27)
  {
    uint64_t v25 = *(void *)v39;
    do
    {
      uint64_t v4 = 0LL;
      do
      {
        if (*(void *)v39 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = v4;
        uint64_t v5 = *(void **)(*((void *)&v38 + 1) + 8 * v4);
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 placementsMap]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:*(void *)(a1 + 32)]);

        id v8 = [v7 countByEnumeratingWithState:&v34 objects:v44 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v35;
          do
          {
            for (unint64_t i = 0LL; i != v9; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v35 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)i);
              uint64_t Object = PKLogFacilityTypeGetObject(16LL);
              uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138543362;
                uint64_t v43 = v12;
                _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "received AMS engagement request: %{public}@",  buf,  0xCu);
              }

              -[NSMutableArray addObject:](v3, "addObject:", v12);
            }

            id v9 = [v7 countByEnumeratingWithState:&v34 objects:v44 count:16];
          }

          while (v9);
        }

        uint64_t v4 = v28 + 1;
      }

      while ((id)(v28 + 1) != v27);
      id v27 = [obj countByEnumeratingWithState:&v38 objects:v45 count:16];
    }

    while (v27);
  }

  uint64_t v15 = PKLogFacilityTypeGetObject(16LL);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v43 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "fetched AMSEngagementMessageRequests for placement %{public}@",  buf,  0xCu);
  }

  uint64_t v18 = (os_log_s *)*(id *)(a1 + 40);
  uint64_t v19 = v18;
  os_signpost_id_t v20 = *(void *)(a1 + 72);
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_INTERVAL_END,  v20,  "com.apple.passkit.dashboard.message-fetch",  "",  buf,  2u);
  }

  __int16 v21 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 264LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003B606C;
  block[3] = &unk_10065B568;
  objc_copyWeak(&v33, (id *)(a1 + 64));
  id v30 = v3;
  id v31 = *(id *)(a1 + 32);
  id v32 = *(id *)(a1 + 56);
  id v22 = v3;
  dispatch_async(v21, block);

  objc_destroyWeak(&v33);
}

void sub_1003B606C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v5 = *(id *)(a1 + 32);
    id v6 = (id *)[v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v18;
      do
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (id *)((char *)i + 1))
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 makeDialogRequest]);
          if (v10 && [v9 presentationAction]) {
            -[NSMutableArray addObject:](v4, "addObject:", v10);
          }
        }

        id v7 = (id *)[v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }

      while (v7);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[17] objectForKeyedSubscript:*(void *)(a1 + 40)]);
    id v12 = [v11 count];
    id v13 = -[NSMutableArray count](v4, "count");
    if (v12 == v13)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      void v15[2] = sub_1003B62B0;
      v15[3] = &unk_10065B540;
      unint64_t i = (id *)&v16;
      uint64_t v14 = v4;
      uint64_t v16 = v14;
      objc_msgSend(v11, "pk_countObjectsPassingTest:", v15);
      -[NSMutableArray count](v14, "count");
    }

    [WeakRetained[17] setObject:v4 forKeyedSubscript:*(void *)(a1 + 40)];
    [WeakRetained[18] setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    if (v12 == v13) {
  }
    }
}

uint64_t sub_1003B62B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:a3]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  id v8 = v5;
  id v9 = v7;
  uint64_t v10 = v9;
  if (v8 == v9)
  {
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    if (v8 && v9) {
      uint64_t v11 = (uint64_t)[v8 isEqualToString:v9];
    }
  }

  return v11;
}

void sub_1003B6408(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) engagementMessageWithIdentifier:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 status];
    id v5 = [v3 type];
    if (v5 != (id)3) {
      [v3 updatedStatusForAction:*(void *)(a1 + 56)];
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) updateEngagementMessage:v3]);
    unsigned __int8 v7 = [v6 isTerminalStatus];
    if (v5 == (id)3) {
      char v8 = 1;
    }
    else {
      char v8 = v7;
    }
    [*(id *)(*(void *)(a1 + 32) + 88) performedAction:*(void *)(a1 + 56) onEngagementMessage:v3];
    if (v4 != [v3 status])
    {
      unsigned int v9 = [v3 isTerminalStatus];
      if (v5 != (id)3 && v9 != 0) {
        objc_msgSend(*(id *)(a1 + 32), "_queue_updateDiscoveryEngagementMessageStatusDefaults");
      }
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)objc_opt_class(*(void *)(a1 + 32), v13);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v23 = v14;
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      __int16 v26 = 2048;
      uint64_t v27 = v16;
      id v17 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%@: No Discovery Item found for updateDiscoveryItemWithIdentifier: called with item identifier: %@ and action: %ld",  buf,  0x20u);
    }

    char v8 = 0;
  }

  __int128 v18 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1003B6600;
  v19[3] = &unk_100645D90;
  id v20 = *(id *)(a1 + 48);
  char v21 = v8;
  dispatch_async(v18, v19);
}

uint64_t sub_1003B6600(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_1003B66C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) discoveryItemWithIdentifier:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 status];
    [v3 updatedStatusForAction:*(void *)(a1 + 56)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) updateDiscoveryItem:v3]);
    unsigned __int8 v6 = [v5 isTerminalStatus];
    [*(id *)(*(void *)(a1 + 32) + 88) performedAction:*(void *)(a1 + 56) onDiscoveryItem:v3];
    [*(id *)(*(void *)(a1 + 32) + 64) updateWalletBadgeCount];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)objc_opt_class(*(void *)(a1 + 32), v9);
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412802;
      __int128 v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      id v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: No Discovery Item found for updateDiscoveryItemWithIdentifier: called with item identifier: %@ and action: %ld",  buf,  0x20u);
    }

    unsigned __int8 v6 = 0;
  }

  uint64_t v14 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1003B68A4;
  v15[3] = &unk_100645D90;
  id v16 = *(id *)(a1 + 48);
  unsigned __int8 v17 = v6;
  dispatch_async(v14, v15);
}

uint64_t sub_1003B68A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

id sub_1003B6AAC(void *a1)
{
  return [*(id *)(a1[4] + 88) tappedDiscoveryItemCTA:a1[6] itemIdentifier:a1[5] cardSize:a1[7]];
}

void sub_1003B6BD0(void *a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003B6C6C;
  v9[3] = &unk_10065B5E0;
  id v5 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v10 = v3;
  uint64_t v11 = v5;
  id v6 = v4;
  uint64_t v7 = a1[6];
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v3;
  [v5 fetchWelcomeCardCount:v9];
}

id sub_1003B6C6C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend( *(id *)(*(void *)(a1 + 40) + 88),  "discoveryItemWithIdentifier:launchedWithReferralSource:cardCount:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  (char *)objc_msgSend(*(id *)(a1 + 32), "count") + a2);
}

void sub_1003B6D50(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 paymentSetupSupportedInRegion] == (id)1;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003B6DDC;
  block[3] = &unk_100644C20;
  BOOL v9 = v3;
  void block[4] = v4;
  id v8 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_1003B6DDC(uint64_t a1)
{
  if (PKSecureElementIsAvailable(a1) && *(_BYTE *)(a1 + 48))
  {
    +[PKSecureElement isInFailForward](&OBJC_CLASS___PKSecureElement, "isInFailForward");
    uint64_t v2 = a1 + 32;
    [*(id *)(*(void *)(a1 + 32) + 8) passExistsWithPassType:1];
  }

  else
  {
    uint64_t v2 = a1 + 32;
    [*(id *)(*(void *)(a1 + 32) + 8) passExistsWithPassType:1];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1003B6FC4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isPeerPaymentPass])
  {
    uint64_t v2 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1003B7100;
    v11[3] = &unk_100639610;
    void v11[4] = v2;
    [v2 loadDialogRequestsForPlacement:PKEngagementAppleCashDashboardPlacement completion:v11];
  }

  if ([*(id *)(a1 + 32) isAppleCardPass])
  {
    BOOL v3 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1003B7154;
    void v10[3] = &unk_100639610;
    void v10[4] = v3;
    [v3 loadDialogRequestsForPlacement:PKEngagementAppleCardDashboardPlacement completion:v10];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1003B71A8;
    v9[3] = &unk_10063A2F0;
    void v9[4] = v4;
    [v5 defaultAccountForFeature:5 completion:v9];
  }

  id result = [*(id *)(a1 + 32) isPayLaterPass];
  if ((_DWORD)result)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1003B72E4;
    v8[3] = &unk_100639610;
    void v8[4] = v7;
    return [v7 loadDialogRequestsForPlacement:PKEngagementPayLaterDashboardPlacement completion:v8];
  }

  return result;
}

void sub_1003B7100(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCashDashboardPlacement];
  }

void sub_1003B7154(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCardDashboardPlacement];
  }

void sub_1003B71A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 264);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003B7228;
  v7[3] = &unk_1006392B0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void *sub_1003B7228(void *result)
{
  if (result[4])
  {
    uint64_t v1 = (void *)result[5];
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_1003B7290;
    v2[3] = &unk_100639610;
    void v2[4] = v1;
    return [v1 loadDialogRequestsForPlacement:PKEngagementSavingsDashboardPlacement completion:v2];
  }

  return result;
}

void sub_1003B7290(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementSavingsDashboardPlacement];
  }

void sub_1003B72E4(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementPayLaterDashboardPlacement];
  }

void sub_1003B7568(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 40) transactionStatus] == (id)1
    || [*(id *)(a1 + 32) transactionStatus] != (id)1;
  if ([*(id *)(a1 + 32) accountType] == (id)2)
  {
    id v3 = [*(id *)(a1 + 32) transactionType];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
    BOOL v5 = (PKAltDSIDIsCurrentUser(v4) & 1) == 0
      && [*(id *)(*(void *)(a1 + 48) + 8) transactionSourceTypeForTransactionSourceIdentifier:*(void *)(a1 + 56)] != 0;

    if (v3) {
      char v6 = 1;
    }
    else {
      char v6 = v2;
    }
    if ((v6 & 1) != 0 || v5) {
      return;
    }
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rewards]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 promotionalRewardsItems]);
    id v9 = [v8 count];

    if (v9) {
      +[PKEngagementEventTrigger fireDefaultCreditAccountReceivedBonusDailyCashEvent]( &OBJC_CLASS___PKEngagementEventTrigger,  "fireDefaultCreditAccountReceivedBonusDailyCashEvent");
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 mapsBrand]);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 mapsMerchant]);

    uint64_t v14 = (char *)[*(id *)(a1 + 32) cardType];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 enhancedMerchantRewardsItems]);
    id v16 = [v15 count];

    if (v11 && (unint64_t)(v14 - 7) >= 0xFFFFFFFFFFFFFFFELL && !v16)
    {
      unsigned __int8 v17 = *(void **)(*(void *)(a1 + 48) + 8LL);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 accountEnhancedMerchantsForAccountIdentifier:v18]);

      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v11 identifier]));
      BOOL v39 = v2;
      __int128 v37 = v11;
      __int128 v38 = v7;
      __int128 v36 = v13;
      if (v13) {
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v13 identifier]));
      }
      else {
        uint64_t v21 = 0LL;
      }
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      id v22 = v19;
      id v23 = [v22 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = *(void *)v41;
        while (2)
        {
          for (unint64_t i = 0LL; i != v24; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v41 != v25) {
              objc_enumerationMutation(v22);
            }
            uint64_t v27 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "brandMUIDs", v36, v37, v38));
            uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 excludedMUIDs]);
            unsigned int v30 = [v28 containsObject:v20];
            if (v21) {
              unsigned int v31 = [v29 containsObject:v21];
            }
            else {
              unsigned int v31 = 0;
            }
            if (v31) {
              unsigned int v32 = 0;
            }
            else {
              unsigned int v32 = v30;
            }
            if (v32 == 1)
            {
              +[PKEngagementEventTrigger fireDefaultCreditAccountPurchaseMissedApplePayMerchantRewardsEvent]( &OBJC_CLASS___PKEngagementEventTrigger,  "fireDefaultCreditAccountPurchaseMissedApplePayMerchantRewardsEvent");

              goto LABEL_38;
            }
          }

          id v24 = [v22 countByEnumeratingWithState:&v40 objects:v44 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }

void sub_1003B7D50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1003B7D74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6 || ![v5 count])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(16LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138412290;
        id v14 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Discovery manager failed to get placemark, error: %@",  (uint8_t *)&v13,  0xCu);
      }
    }

    else
    {
      uint64_t v10 = PKLogFacilityTypeGetObject(16LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Discovery manager got a new placemark",  (uint8_t *)&v13,  2u);
      }

      id v12 = *(void **)(a1 + 32);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      [v12 _putLatestValidPlacemarkAndNotify:v9];
    }

    [WeakRetained processLocationUpdate];
  }
}

void sub_1003B80DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1003B80F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6 || ![v5 count])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(16LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138412290;
        id v14 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Discovery manager failed to get placemark, error: %@",  (uint8_t *)&v13,  0xCu);
      }
    }

    else
    {
      uint64_t v10 = PKLogFacilityTypeGetObject(16LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Discovery manager got a new placemark",  (uint8_t *)&v13,  2u);
      }

      id v12 = *(void **)(a1 + 32);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      [v12 _putLatestValidPlacemarkAndNotify:v9];
    }

    [WeakRetained processLocationUpdate];
  }
}

void sub_1003B86A0(id a1, NSError *a2)
{
  BOOL v2 = a2;
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error processing Discovery Items after account promotions updated: %@",  (uint8_t *)&v5,  0xCu);
    }
  }
}

id sub_1003B8D74(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldReprocessForTransaction:*(void *)(a1 + 40) previousTransactionProcessingDate:*(void *)(*(void *)(a1 + 32) + 296)];
  if ((_DWORD)result)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSDate);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 296);
    *(void *)(v4 + 296) = v3;

    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received transactions updated event", v8, 2u);
    }

    return +[PKEngagementEventTrigger fireTransactionsUpdatedEvent]( &OBJC_CLASS___PKEngagementEventTrigger,  "fireTransactionsUpdatedEvent");
  }

  return result;
}

id sub_1003B8E88(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:",  1,  &stru_10065B670);
}

void sub_1003B8EBC(id a1, NSError *a2)
{
  BOOL v2 = a2;
  PKSetDiscoveryShouldProcessLocaleChange(0LL);
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      int v9 = 138412290;
      uint64_t v10 = v2;
      id v6 = "Error - Update Discovery Manifest failed for locale change, %@";
      uint64_t v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
    }
  }

  else if (v5)
  {
    LOWORD(v9) = 0;
    id v6 = "Updated Discovery Manifest for locale change";
    uint64_t v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_1003B92F4(_Unwind_Exception *a1)
{
}

void sub_1003B9334(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 40));
  uint32_t v8 = WeakRetained;
  if (WeakRetained)
  {
    int v9 = WeakRetained[33];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1003B93F8;
    v12[3] = &unk_10063B060;
    id v13 = v6;
    id v14 = v8;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    id v15 = v10;
    uint64_t v16 = v11;
    dispatch_async(v9, v12);
  }
}

id sub_1003B93F8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_opt_class(*(void *)(a1 + 56), v4);
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)id v10 = 138412546;
      *(void *)&void v10[4] = v5;
      *(_WORD *)&v10[12] = 2112;
      *(void *)&v10[14] = v6;
      id v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@: Error during rules evaluation for discovery notifications: %@",  v10,  0x16u);
    }
  }

  else
  {
    id v8 =  [*(id *)(*(void *)(a1 + 40) + 8) updateDiscoveryNotificationsForRuleResults:*(void *)(a1 + 48)];
    objc_msgSend(*(id *)(a1 + 40), "_queue_insertDiscoveryNotificationsIfNecessary");
  }

  objc_msgSend(*(id *)(a1 + 40), "_queue_scheduleTaskForNextAction", *(_OWORD *)v10, *(void *)&v10[16]);
  *(_BYTE *)(*(void *)(a1 + 40) + 249LL) = 0;
  return objc_msgSend(*(id *)(a1 + 40), "_queue_performNextProcessingDiscoveryObjects");
}

void sub_1003B97C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003B97DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 160);
  if (v3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v3);
  }

  else
  {
    uint64_t v4 = *(void **)(v2 + 208);
    id v5 = objc_retainBlock(*(id *)(a1 + 40));
    [v4 addObject:v5];

    _objc_msgSend(*(id *)(a1 + 32), "_lock_startLocationQueryTimeoutIfNecessary");
  }

void sub_1003B9934( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003B994C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 168);
  if (v3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v3);
  }

  else
  {
    uint64_t v4 = *(void **)(v2 + 216);
    id v5 = objc_retainBlock(*(id *)(a1 + 40));
    [v4 addObject:v5];

    _objc_msgSend(*(id *)(a1 + 32), "_lock_startLocationQueryTimeoutIfNecessary");
  }

void sub_1003B9B4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_1003B9B78(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 208) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 208) removeAllObjects];
}

void sub_1003B9D58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_1003B9D84(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 216) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 216) removeAllObjects];
}

void sub_1003B9F24(_Unwind_Exception *a1)
{
}

void sub_1003B9F38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    v36[0] = 0LL;
    v36[1] = v36;
    v36[2] = 0x3032000000LL;
    void v36[3] = sub_1003B3DC8;
    v36[4] = sub_1003B3DD8;
    id v37 = 0LL;
    v34[0] = 0LL;
    v34[1] = v34;
    void v34[2] = 0x3032000000LL;
    v34[3] = sub_1003B3DC8;
    void v34[4] = sub_1003B3DD8;
    id v35 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = &v28;
    uint64_t v30 = 0x3032000000LL;
    unsigned int v31 = sub_1003B3DC8;
    unsigned int v32 = sub_1003B3DD8;
    id v33 = 0LL;
    uint64_t v22 = 0LL;
    id v23 = &v22;
    uint64_t v24 = 0x3032000000LL;
    uint64_t v25 = sub_1003B3DC8;
    __int16 v26 = sub_1003B3DD8;
    id v27 = 0LL;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1003BA240;
    v21[3] = &unk_10065B6C0;
    v21[6] = v36;
    void v21[7] = &v28;
    uint64_t v4 = *(void *)(a1 + 32);
    void v21[4] = WeakRetained;
    void v21[5] = v4;
    v21[8] = v34;
    v21[9] = &v22;
    [WeakRetained _executeWithLock:v21];
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v5 = (id)v29[5];
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v39 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v18;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v5);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v17 + 1) + 8LL * (void)v8) + 16LL))();
          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v17 objects:v39 count:16];
      }

      while (v6);
    }

    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v9 = (id)v23[5];
    id v10 = [v9 countByEnumeratingWithState:&v13 objects:v38 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v14;
      do
      {
        id v12 = 0LL;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v9);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8LL * (void)v12) + 16LL))(*(void *)(*((void *)&v13 + 1) + 8LL * (void)v12));
          id v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v9 countByEnumeratingWithState:&v13 objects:v38 count:16];
      }

      while (v10);
    }

    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v28, 8);

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(v36, 8);
  }
}

void sub_1003BA1E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

id sub_1003BA240(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = 0LL;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), *(id *)(a1[4] + 160LL));
  objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), *(id *)(a1[5] + 208LL));
  [*(id *)(a1[5] + 208) removeAllObjects];
  objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), *(id *)(a1[4] + 168LL));
  objc_storeStrong((id *)(*(void *)(a1[9] + 8LL) + 40LL), *(id *)(a1[5] + 216LL));
  return [*(id *)(a1[5] + 216) removeAllObjects];
}

void sub_1003BA468(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003BA4F8;
  v7[3] = &unk_1006396B0;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1003BA4F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1003BA598(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) discoveryItems]);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003BA634;
  v6[3] = &unk_1006396B0;
  id v7 = v2;
  id v8 = v3;
  id v5 = v2;
  dispatch_async(v4, v6);
}

uint64_t sub_1003BA634(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1003BA70C(id *a1)
{
  if (![a1[6] count])
  {
    [a1[4] _cleanArticleLayoutsDirectories];
    [a1[4] _updateDiscoveryItemStatusDefaultsForUpdatedItems:&__NSArray0__struct];
  }

  uint64_t v2 = (dispatch_queue_s *)*((void *)a1[4] + 34);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BA7C0;
  block[3] = &unk_10063A830;
  id v4 = a1[7];
  dispatch_async(v2, block);
}

uint64_t sub_1003BA7C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003BA848(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1003BA8BC;
  v2[3] = &unk_100648088;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  objc_msgSend(v3, "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:", 0, v2);
}

void sub_1003BA8BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003BA94C;
  v7[3] = &unk_1006396B0;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1003BA94C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1003BAA04(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2 || ![v2 count])
  {
    id v3 = [*(id *)(a1 + 40) _deleteMessagesBundle];
    [*(id *)(a1 + 40) _updateDiscoveryEngagementMessageStatusDefaultsForUpdatedMessages:0];
    objc_msgSend(*(id *)(a1 + 40), "_queue_updateDiscoveryNotificationsStatusDefaultsForUpdatedNotifications:", 0);
    objc_msgSend(*(id *)(a1 + 40), "_queue_updateWithServerNotifications:", 0);
    [*(id *)(a1 + 40) _processUpdatedNotifications];
  }

  objc_msgSend(*(id *)(a1 + 40), "_queue_updateWithServerEngagementMessages:", *(void *)(a1 + 32));
  id v4 = *(void **)(a1 + 48);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BAACC;
  block[3] = &unk_10063A830;
  id v7 = v4;
  dispatch_async(v5, block);
}

uint64_t sub_1003BAACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003BAB80(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BAC04;
  block[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_1003BAC04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003BAC8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(v1 + 64);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1003BAD04;
  v4[3] = &unk_10063F520;
  void v4[4] = v1;
  id v5 = v2;
  [v3 userNotificationsOfType:27 completion:v4];
}

void sub_1003BAD04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BAD98;
  block[3] = &unk_100639AF0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1003BAD98(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v20 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Removing discovery user notifications %@",  buf,  0xCu);
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(*(void *)(a1 + 40) + 64) removeUserNotification:*(void *)(*((void *)&v14 + 1) + 8 * (void)v9)];
        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v7);
  }

  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 272LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BAF34;
  block[3] = &unk_10063A830;
  id v13 = v10;
  dispatch_async(v11, block);
}

uint64_t sub_1003BAF34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003BAFE4(uint64_t a1)
{
  unsigned int v2 = +[PKEngagementEventTrigger fireEngagementEventNamed:]( &OBJC_CLASS___PKEngagementEventTrigger,  "fireEngagementEventNamed:",  *(void *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0LL);
  }

  else
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  0LL));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }

id sub_1003BB0F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_shouldUpdateDiscoveryManifestWithCompletion:", *(void *)(a1 + 40));
}

void sub_1003BB210(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BB2A4;
  block[3] = &unk_100639AF0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1003BB2A4(void *a1)
{
  *(_BYTE *)(a1[4] + 248LL) = 0;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fetching discovery manifest returned error: %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1003BB3F4(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1003BB468;
  v4[3] = &unk_10065B6E8;
  id v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [a2 discoveryManifestWithCompletion:v4];
}

void sub_1003BB468(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1003BB52C;
  void v13[3] = &unk_10063CD10;
  id v14 = v6;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v15 = v5;
  uint64_t v16 = v10;
  id v17 = v9;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, v13);
}

void sub_1003BB52C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) manifest]);
    objc_msgSend(*(id *)(a1 + 48), "_queue_processDiscoveryManifest:completion:", v2, *(void *)(a1 + 56));
  }

id sub_1003BB638(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processDiscoveryManifest:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_1003BB954(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _cleanArticleLayoutsDirectories];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003BB9A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003BB9AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1003BB9B8()
{
  uint64_t v0 = PKDiscoveryDirectoryPath();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAppendingPathComponent:@"messages"]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v2));

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 URLByAppendingPathExtension:@"pkmessage"]);
  return v4;
}

void sub_1003BBA3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _discoveryMessageManifestFromBundle:a2 withError:a3]);
  if (a3 && !*a3)
  {
    id v6 = v5;
    objc_msgSend(*(id *)(a1 + 32), "_queue_processDownloadedMessagesManifest:", v5);
    id v5 = v6;
  }
}

void sub_1003BBA9C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1003BBB18;
  block[3] = &unk_100644C20;
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(v1 + 264);
  block[1] = 3221225472LL;
  void block[4] = v1;
  char v6 = *(_BYTE *)(a1 + 48);
  id v5 = v2;
  dispatch_async(v3, block);
}

void sub_1003BBB18(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003BBB8C;
  v3[3] = &unk_1006424D0;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:", v1, v3);
}

uint64_t sub_1003BBB8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003BBC30(_Unwind_Exception *a1)
{
}

void sub_1003BBC4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BBCF8;
  block[3] = &unk_10063D688;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_1003BBCF8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_queue_processExistingDiscoveryUserNotifications:", *(void *)(a1 + 32));
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) discoveryNotificationsToScheduleForDate:v4]);
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
          [v10 scheduleDeliveryForCurrentDate:v4];
          id v11 = [v3[1] insertOrUpdateDiscoveryNotification:v10];
        }

        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v7);
    }

    objc_msgSend(v3, "_queue_insertDiscoveryNotificationsIfNecessary");
    objc_msgSend(v3, "_queue_scheduleTaskForNextAction");
  }
}

void sub_1003BBF08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));

  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(dispatch_queue_s **)(v5 + 272);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1003BBFAC;
    v7[3] = &unk_1006392B0;
    void v7[4] = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_1003BBFAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
  [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) sendDiscoveryArticleLayoutsUpdated:*(void *)(a1 + 40)];
}

void sub_1003BBFEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
  [WeakRetained sendDiscoveryEngagementMessagesUpdatedToDefaultDiscoveryManager:*(void *)(a1 + 32)];
}

void sub_1003BC418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1003BC434(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BC4B0;
  block[3] = &unk_100653028;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_1003BC4B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[249] = 0;
    uint64_t v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_queue_performNextProcessingDiscoveryObjects");
    id WeakRetained = v2;
  }
}

void sub_1003BCC7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, id location)
{
}

void sub_1003BCD00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = WeakRetained;
  if (WeakRetained)
  {
    __int128 v12 = (void *)*((void *)WeakRetained + 6);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1003BCE30;
    v15[3] = &unk_10065B788;
    objc_copyWeak(&v19, (id *)(a1 + 40));
    id v17 = v9;
    id v13 = v8;
    uint64_t v14 = *(void *)(a1 + 32);
    id v16 = v13;
    uint64_t v18 = v14;
    [v12 accountWithPreventingServerFetch:0 completion:v15];

    objc_destroyWeak(&v19);
  }

  else
  {
    (*((void (**)(id, id, uint64_t))v9 + 2))(v9, v8, 1LL);
  }
}

void sub_1003BCE1C(_Unwind_Exception *a1)
{
}

void sub_1003BCE30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[33];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1003BCF0C;
    v7[3] = &unk_100643360;
    uint64_t v11 = *(void *)(a1 + 48);
    id v8 = v3;
    id v10 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v6, v7);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_1003BCF0C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedPassUniqueID]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1003BCF54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = WeakRetained;
  if (WeakRetained)
  {
    __int128 v12 = (void *)*((void *)WeakRetained + 4);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1003BD084;
    v15[3] = &unk_10065B7B0;
    objc_copyWeak(&v19, (id *)(a1 + 40));
    id v17 = v9;
    id v13 = v8;
    uint64_t v14 = *(void *)(a1 + 32);
    id v16 = v13;
    uint64_t v18 = v14;
    [v12 defaultAccountForFeature:2 completion:v15];

    objc_destroyWeak(&v19);
  }

  else
  {
    (*((void (**)(id, id, uint64_t))v9 + 2))(v9, v8, 1LL);
  }
}

void sub_1003BD070(_Unwind_Exception *a1)
{
}

void sub_1003BD084(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[33];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1003BD160;
    v7[3] = &unk_100643360;
    uint64_t v11 = *(void *)(a1 + 48);
    id v8 = v3;
    id v10 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v6, v7);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_1003BD160(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedPassUniqueID]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1003BD1A8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!WeakRetained)
  {
    v7[2](v7, v6, 1LL);
    goto LABEL_22;
  }

  uint64_t v28 = v7;
  id v29 = v6;
  id v9 = sub_1003B50E8();
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v9);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id v10 = *(id *)(a1 + 32);
  id v11 = [v10 countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (!v11) {
    goto LABEL_20;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v32;
  do
  {
    for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v32 != v13) {
        objc_enumerationMutation(v10);
      }
      __int128 v15 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "relevantDateRange", v28, v29));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 scheduledDeliveryDate]);
      unsigned int v18 = [v16 isValidForTime:v17];

      if (v18)
      {
        if ([v15 passQualifier] == (id)1)
        {
          uint64_t v19 = *(void *)(a1 + 48);
          goto LABEL_15;
        }

        if ([v15 passQualifier] == (id)2)
        {
          uint64_t v19 = *(void *)(a1 + 56);
LABEL_15:
          id v24 = *(id *)(*(void *)(v19 + 8) + 40LL);
        }

        else
        {
          id v24 = 0LL;
        }

        [v15 localizeWithBundle:v30];
        uint64_t v25 = (void *)*((void *)WeakRetained + 8);
        __int16 v26 = -[PDDiscoveryUserNotification initWithDiscoveryNotification:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDDiscoveryUserNotification),  "initWithDiscoveryNotification:passUniqueIdentifier:",  v15,  v24);
        [v25 insertUserNotification:v26];

        [v15 setDelivered:1];
        id v27 = [*((id *)WeakRetained + 1) insertOrUpdateDiscoveryNotification:v15];

        continue;
      }

      uint64_t Object = PKLogFacilityTypeGetObject(16LL);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v36 = v22;
        __int16 v37 = 2112;
        __int128 v38 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%@: Discovery Notification had invalid schedule delivery date: %@",  buf,  0x16u);
      }

      [v15 setScheduledDeliveryDate:0];
      id v23 = [*((id *)WeakRetained + 1) insertOrUpdateDiscoveryNotification:v15];
    }

    id v12 = [v10 countByEnumeratingWithState:&v31 objects:v39 count:16];
  }

  while (v12);
LABEL_20:

  id v7 = v28;
  id v6 = v29;
  v28[2](v28, v29, 0LL);

LABEL_22:
}

void sub_1003BD48C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 isCanceled])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      int v8 = 138412290;
      id v9 = WeakRetained;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@: Operation to insert notifications was cancelled.",  (uint8_t *)&v8,  0xCu);
    }
  }

void sub_1003BD9AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_1003BD9C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      int v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v8) + 16LL))(*(void *)(*((void *)&v9 + 1) + 8LL * (void)v8));
        int v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
}

void sub_1003BDAD8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  PKTimeProfileBegin(0LL, @"updateDiscoveryItems");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1003BDB94;
  v12[3] = &unk_100642778;
  __int128 v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v14 = v7;
  uint64_t v15 = v8;
  void v12[4] = v9;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  objc_msgSend(v9, "_queue_activeDialogRequestSourcedDiscoveryItems:", v12);
}

void sub_1003BDB94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BDC78;
  block[3] = &unk_10063B9E8;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v5;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v12;
  __int128 v18 = v12;
  id v17 = *(id *)(a1 + 40);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

uint64_t sub_1003BDC78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), v2);
  }

  else
  {
    objc_msgSend( *(id *)(a1 + 40),  "_queue_restoreDiscoveryItemStatusFromDefaultsIfNecessaryWithServerItems:",  *(void *)(a1 + 48));
    id v3 =  [*(id *)(*(void *)(a1 + 40) + 8) updateDiscoveryItemsWithDialogRequestSourcedItems:*(void *)(a1 + 48)];
  }

  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(Object);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Updated %lu items",  [*(id *)(a1 + 48) count]));
  id v7 = (id)PKTimeProfileEnd(v5, @"updateDiscoveryItems", v6);

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1003BDD48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  PKTimeProfileBegin(0LL, @"evaluateRules");
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1003BDE14;
  void v13[3] = &unk_10063B638;
  id v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  objc_msgSend(v10, "_queue_evaluateRulesAndForceBadgeCountUpdate:completion:", v8, v13);
}

void sub_1003BDE14(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
  }
  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(Object);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Error: %@", v8));
  id v7 = (id)PKTimeProfileEnd(v5, @"evaluateRules", v6);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003BDED0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_1003BE0D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1003BE0FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v23 = a3;
  if (v23) {
    id v6 = 0LL;
  }
  else {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  }
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v24 = v5;
  id obj = (id)objc_claimAutoreleasedReturnValue([v5 messageActions]);
  id v28 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
  if (v28)
  {
    uint64_t v27 = *(void *)v35;
    uint64_t v26 = PKEngagementPassesPlacement;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v35 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v29 = v7;
        id v8 = *(void **)(*((void *)&v34 + 1) + 8 * v7);
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 placementsMap]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v26]);

        id v11 = [v10 countByEnumeratingWithState:&v30 objects:v40 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v31;
          do
          {
            for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v31 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
              [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"received AMS engagement request: %@", v15];
              uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 engagementRequest]);
              id v17 = (void *)objc_claimAutoreleasedReturnValue( +[PKDiscoveryItem activeItemFromEngagementRequest:]( &OBJC_CLASS___PKDiscoveryItem,  "activeItemFromEngagementRequest:",  v16));
              [v6 safelyAddObject:v17];
            }

            id v12 = [v10 countByEnumeratingWithState:&v30 objects:v40 count:16];
          }

          while (v12);
        }

        uint64_t v7 = v29 + 1;
      }

      while ((id)(v29 + 1) != v28);
      id v28 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
    }

    while (v28);
  }

  uint64_t Object = PKLogFacilityTypeGetObject(16LL);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v39 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v21 = *(void *)(a1 + 32);
  id v22 = [v6 copy];
  (*(void (**)(uint64_t, id, id))(v21 + 16))(v21, v22, v23);
}

void sub_1003BE5E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1003BE60C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1003BE6FC;
  v12[3] = &unk_10065B850;
  objc_copyWeak(&v17, (id *)(a1 + 48));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v13 = v6;
  uint64_t v14 = v8;
  id v15 = v5;
  char v18 = *(_BYTE *)(a1 + 56);
  id v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);

  objc_destroyWeak(&v17);
}

void sub_1003BE6FC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(16LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v13 = WeakRetained;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Error evaluating rules for Discovery Objects",  buf,  0xCu);
      }
    }

    else
    {
      unsigned __int8 v5 = [*(id *)(*(void *)(a1 + 40) + 8) activeDiscoveryItemRequiringBadgeExistsForRelevantDate:0];
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 8) updateDiscoveryNotificationsForRuleResults:*(void *)(a1 + 48)]);
      objc_msgSend(WeakRetained, "_queue_updateDiscoveryNotificationsStatusDefaultsForUpdatedNotifications:", v4);
      [*(id *)(a1 + 40) _processUpdatedNotifications];
      if (*(_BYTE *)(a1 + 72)
        || (v5 & 1) != 0
        || (id v6 = *(void **)(*(void *)(a1 + 40) + 8LL),
            uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now")),
            LODWORD(v6) = [v6 activeDiscoveryItemRequiringBadgeExistsForRelevantDate:v7],
            v7,
            (_DWORD)v6))
      {
        [WeakRetained[8] updateWalletBadgeCount];
      }

      [WeakRetained _callDelegateWithLayoutsForUpdatedDiscoveryItemsAndMessages];
    }

    uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 272LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1003BE8C4;
    v9[3] = &unk_1006396B0;
    id v11 = *(id *)(a1 + 56);
    id v10 = *(id *)(a1 + 32);
    dispatch_async(v8, v9);
  }
}

uint64_t sub_1003BE8C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1003BEA34(void *a1)
{
  id v1 = a1;
  id v2 = sub_1003C00CC();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 identifier]);

  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingPathComponent:v4]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v5));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 URLByAppendingPathExtension:@"pkarticle"]);

  return v7;
}

void sub_1003BEAD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003BEB8C;
  block[3] = &unk_10063C6A8;
  id v13 = v6;
  id v14 = v7;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_1003BEB8C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1003BEC84(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = v3;
    id v5 = 0LL;
    id v6 = 0LL;
  }

  else
  {
    uint64_t v7 = (void *)a1[4];
    uint64_t v8 = a1[5];
    id v10 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 _discoveryArticleLayoutFromBundleForDiscoveryItem:v8 error:&v10]);
    id v4 = v10;
    id v5 = v4;
  }

  uint64_t v9 = a1[6];
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v6, v4);
  }
}

void sub_1003BEE0C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003BEEBC;
  v5[3] = &unk_10065B8F0;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  [a2 discoveryBundleForURL:v4 completion:v5];
}

void sub_1003BEEBC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1003BEFA0;
  block[3] = &unk_10065B8C8;
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 264LL);
  block[1] = 3221225472LL;
  id v13 = v7;
  id v14 = v6;
  id v15 = v8;
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v10 = v6;
  id v11 = v7;
  dispatch_async(v9, block);
}

void sub_1003BEFA0(uint64_t a1)
{
  id v2 = (__CFBundle *)*(id *)(a1 + 32);
  if (v2)
  {
    CFBundleRef v3 = v2;
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      CFBundleRef v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Fetching messages bundle failed with error: %@",  buf,  0xCu);
    }

    goto LABEL_34;
  }

  if (*(void *)(a1 + 40))
  {
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    -[os_log_s removeItemAtURL:error:](v5, "removeItemAtURL:error:", *(void *)(a1 + 48), 0LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) pathExtension]);
    uint64_t v7 = PKTemporaryItemURLWithExtension(v6, 1LL);
    id v8 = (NSURL *)objc_claimAutoreleasedReturnValue(v7);

    if (!*(void *)(a1 + 40))
    {
      uint64_t v15 = PKLogFacilityTypeGetObject(16LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Attempting to cache nil data", buf, 2u);
      }

      goto LABEL_29;
    }

    PKTemporaryItemPrepareDirectory();
    PKUnarchiverZip(*(NSData **)(a1 + 40), v8);
    if (*(void *)(a1 + 56))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v8));
      uint64_t v10 = *(void *)(a1 + 56);
      v35[1] = 0LL;
      (*(void (**)(void))(v10 + 16))();
      id v11 = (__CFBundle *)0LL;
      if (v11)
      {
        CFBundleRef v3 = v11;
        uint64_t v12 = PKLogFacilityTypeGetObject(16LL);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          CFBundleRef v37 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Processing temp bundle failed with error: %@",  buf,  0xCu);
        }

LABEL_32:
        goto LABEL_33;
      }
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) URLByDeletingLastPathComponent]);
    char v18 = (void *)objc_claimAutoreleasedReturnValue([v17 path]);

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    unsigned __int8 v20 = [v19 fileExistsAtPath:v18];

    if ((v20 & 1) != 0)
    {
      uint64_t v21 = 0LL;
    }

    else
    {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      v35[0] = 0LL;
      unsigned __int8 v26 = [v25 createDirectoryAtPath:v18 withIntermediateDirectories:1 attributes:0 error:v35];
      uint64_t v21 = (__CFBundle *)v35[0];

      if ((v26 & 1) == 0 && v21)
      {
        uint64_t v27 = PKLogFacilityTypeGetObject(16LL);
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = PKDiscoveryDirectoryPath();
          __int128 v30 = (__CFBundle *)objc_claimAutoreleasedReturnValue(v29);
          *(_DWORD *)__int128 buf = 138412546;
          CFBundleRef v37 = v30;
          __int16 v38 = 2112;
          CFBundleRef v39 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Could not create directory at %@ with error: %@",  buf,  0x16u);
        }

        goto LABEL_29;
      }
    }

    uint64_t v22 = *(void *)(a1 + 48);
    __int128 v34 = v21;
    unsigned int v23 = -[os_log_s copyItemAtURL:toURL:error:](v5, "copyItemAtURL:toURL:error:", v8, v22, &v34);
    CFBundleRef v3 = v34;

    if (!v23 || v3)
    {
      uint64_t v31 = PKLogFacilityTypeGetObject(16LL);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v32 = *(__CFBundle **)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412546;
        CFBundleRef v37 = v32;
        __int16 v38 = 2112;
        CFBundleRef v39 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "Failed to copy discovery bundle to %@ with error: %@",  buf,  0x16u);
      }

      goto LABEL_32;
    }

    CFBundleRef v24 = CFBundleCreate(kCFAllocatorDefault, *(CFURLRef *)(a1 + 48));
    CFBundleRef v3 = v24;
    if (!v24)
    {
LABEL_33:

      goto LABEL_34;
    }

    _CFBundleFlushBundleCaches(v24);
    CFRelease(v3);
LABEL_29:
    CFBundleRef v3 = 0LL;
    goto LABEL_33;
  }

  uint64_t v14 = PKLogFacilityTypeGetObject(16LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to cache empty data", buf, 2u);
  }

  CFBundleRef v3 = 0LL;
LABEL_34:

  uint64_t v33 = *(void *)(a1 + 64);
  if (v33) {
    (*(void (**)(uint64_t, CFBundleRef))(v33 + 16))(v33, v3);
  }
}

void sub_1003BFEC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v3 = sub_1003C00CC();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  unsigned int v5 = [v2 fileExistsAtPath:v4];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) nonTerminalDiscoveryItemIdentifiers]);
    id v7 = sub_1003C00CC();
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v8));
    v17[0] = NSURLNameKey;
    v17[1] = NSURLPathKey;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v17, 2LL));
    id v11 = (void *)objc_claimAutoreleasedReturnValue( [v2 enumeratorAtURL:v9 includingPropertiesForKeys:v10 options:1 errorHandler:&stru_10065B958]);

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 allObjects]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1003C010C;
    void v14[3] = &unk_10065B980;
    id v15 = v6;
    id v16 = v2;
    id v13 = v6;
    [v12 enumerateObjectsUsingBlock:v14];
  }
}

BOOL sub_1003C007C(id a1, NSURL *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_10044293C((uint64_t)a3, v5);
  }

  return 0;
}

id sub_1003C00CC()
{
  uint64_t v0 = PKDiscoveryDirectoryPath();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAppendingPathComponent:@"Articles"]);

  return v2;
}

void sub_1003C010C(uint64_t a1, void *a2)
{
  uint64_t v10 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 path]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPathComponent]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByDeletingPathExtension]);

  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0)
  {
    unsigned int v6 = [*(id *)(a1 + 40) removeItemAtPath:v3 error:&v10];
    uint64_t v7 = v10;
    if (!v6 || v10)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(16LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v12 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Couldn't remove stale discovery bundle due to error: %{public}@",  buf,  0xCu);
      }
    }
  }
}

id sub_1003C03CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  id v7 = [v6 longValue];
  if (v6)
  {
    [v3 setStatus:v7];
    id v8 = v3;
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

id sub_1003C083C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  id v7 = [v6 longValue];
  if (v6)
  {
    [v3 setStatus:v7];
    id v8 = v3;
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

id sub_1003C0C54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  id v7 = [v6 longValue];
  if (v6)
  {
    [v3 setStatus:v7];
    id v8 = v3;
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void sub_1003C120C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = PKSharedPeerPaymentWebServiceContextPath();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v1 archiveAtPath:v3];

  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v4 postNotificationName:PDSharedPeerPaymentWebServiceDidChangeNotification object:0];
}

void sub_1003C1D38(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Migrating local peer payment transactions to include the peer payment account identifier",  v5,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
  [WeakRetained addPeerPaymentAccountIdentifierToDatabaseTransactions];
}

void sub_1003C1DBC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 associatedPassUniqueID]);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained passWithUniqueIdentifier:v3]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 paymentPass]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceTransactionSourceIdentifiers]);
  if ([v7 count])
  {
    uint64_t v19 = a1;
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v27 = v3;
      __int16 v28 = 2112;
      uint64_t v29 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetching all transactions from the cloud store associated with the peer payment pass %@, deviceTransactionSourceIdentifiers: %@",  buf,  0x16u);
    }

    char v18 = v6;

    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id obj = v7;
    id v11 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v22;
      do
      {
        for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)i);
          id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"paymentApplication, %@, %@",  v3,  @"Apple Cash"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v16, v15);
        }

        id v12 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v12);
    }

    a1 = v19;
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v19 + 32) + 208) applePayContainer]);
    [v17 passProvisioningDidStartForPassUniqueID:v3 transactionSourceIdentifiers:v10 ignoreExistingRecordHash:0 groupNameSuffix:PKCloudStoreOperationGroupSuffixPeerPaymentAccountAdded completion:0];

    unsigned int v6 = v18;
  }

  [*(id *)(a1 + 32) updatePreferencesWithCompletion:0];
}

id sub_1003C202C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "registerConsumer:");
}

uint64_t sub_1003C2164(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003C2174(uint64_t a1)
{
}

void sub_1003C217C(uint64_t a1)
{
}

void sub_1003C220C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v39 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Deleting shared peer payment webservice… (reason: '%{public}@')",  buf,  0xCu);
  }

  id v5 = *(id *)(*(void *)(a1 + 40) + 56LL);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 208) applePayContainer]);
  [v6 invalidateCloudStoreIfPossibleWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixPKDeletePeerPaymentWebService clearCache:1];

  unsigned __int8 v7 = [v5 needsRegistration];
  id v8 = *(_BYTE **)(a1 + 40);
  if ((v7 & 1) != 0)
  {
    [v8 deleteAccountWithCompletion:0];
    [v5 invalidate];
    [*(id *)(a1 + 40) _updatePushTopics];
  }

  else
  {
    v8[168] = 1;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_1003C2608;
    v37[3] = &unk_10063AFE8;
    uint64_t v9 = *(void *)(a1 + 32);
    v37[4] = *(void *)(a1 + 40);
    [v5 diagnosticSessionWithReason:v9 sessionHandler:v37];
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v11 = PKSharedPeerPaymentWebServiceContextPath();
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v10 removeItemAtPath:v12 error:0];

  uint64_t v13 = *(void *)(a1 + 40);
  if (*(void *)(v13 + 56))
  {
    [*(id *)(v13 + 8) unregisterConsumer:*(void *)(a1 + 40)];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recreating shared webservice…", buf, 2u);
    }

    uint64_t v14 = PKSharedPeerPaymentWebServiceContextPath();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PKPeerPaymentWebServiceContext contextWithArchive:]( &OBJC_CLASS___PKPeerPaymentWebServiceContext,  "contextWithArchive:",  v15));

    id v17 = objc_alloc(&OBJC_CLASS___PKPeerPaymentWebService);
    id v18 = [[PKPeerPaymentWebServiceTargetDevice alloc] initWithTargetDeviceDelegate:*(void *)(a1 + 40)];
    uint64_t v19 = -[PKPeerPaymentWebService initWithContext:targetDevice:archiver:]( v17,  "initWithContext:targetDevice:archiver:",  v16,  v18,  *(void *)(*(void *)(a1 + 40) + 48LL));
    uint64_t v20 = *(void *)(a1 + 40);
    __int128 v21 = *(void **)(v20 + 56);
    *(void *)(v20 + 56) = v19;

    id v22 = PDDefaultQueue();
    __int128 v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_1003C2754;
    void v36[3] = &unk_100639300;
    v36[4] = *(void *)(a1 + 40);
    dispatch_async(v23, v36);

    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(v13 + 56);
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  [(id)v13 _updateSharedCacheWithWebService:v24];
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v25 postNotificationName:PDSharedPeerPaymentWebServiceDidChangeNotification object:0];

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104LL));
  uint64_t v27 = objc_claimAutoreleasedReturnValue([WeakRetained peerPaymentAccount]);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = *(void **)(v28 + 64);
  *(void *)(v28 + 64) = v27;

  id v30 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104LL));
  uint64_t v31 = objc_claimAutoreleasedReturnValue([v30 peerPaymentPreferences]);
  uint64_t v32 = *(void *)(a1 + 40);
  uint64_t v33 = *(void **)(v32 + 72);
  *(void *)(v32 + 72) = v31;

  [*(id *)(a1 + 40) _postAccountChangedNotification];
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v34 postNotificationName:PDPeerPaymentServicePreferencesChangedDistributedNotification object:0 userInfo:0 deliverImmediately:0];

  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(+[PKPeerPaymentRecipientCache sharedCache](&OBJC_CLASS___PKPeerPaymentRecipientCache, "sharedCache"));
  LOBYTE(v30) = [v35 purgeCache];

  if ((v30 & 1) == 0)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to purge the peer payment recipient cache.",  buf,  2u);
    }
  }
}

void sub_1003C2608(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003C2680;
  v5[3] = &unk_10063DAE8;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  [v4 peerPaymentUnregisterWithCompletion:v5];
}

id sub_1003C2680(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1003C26F0;
  v4[3] = &unk_100639300;
  void v4[4] = v2;
  [v2 deleteAccountWithCompletion:v4];
  [*(id *)(a1 + 40) invalidate];
  return [*(id *)(a1 + 32) _updatePushTopics];
}

void sub_1003C26F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003C2748;
  block[3] = &unk_100639300;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_1003C2748(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 168LL) = 0;
  return result;
}

id sub_1003C2754(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "registerConsumer:");
}

void sub_1003C2838(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) context]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 pushToken]);

  [*(id *)(*(void *)(a1 + 32) + 56) setContext:*(void *)(a1 + 40)];
  if (v7)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) context]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushToken]);
    unsigned __int8 v5 = [v7 isEqualToString:v4];

    if ((v5 & 1) == 0)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) context]);
      [v6 setPushToken:v7];
    }
  }

  [*(id *)(a1 + 32) _archiveSharedPeerPaymentWebServiceContext];
}

uint64_t sub_1003C2994(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = PKUseMockSURFServer(a1, a2);
  if ((v3 & 1) != 0 || PKStoreDemoModeEnabled(v3, v4))
  {
    unsigned __int8 v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
    return v5();
  }

  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    unsigned __int8 v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
    return v5();
  }

  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Preventing fetching the peer payment account from the server if it was necessary.",  buf,  2u);
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  if (![*(id *)(*(void *)(a1 + 32) + 64) isAccountStateDirty]
    || (uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation]),
        unsigned int v10 = [v9 isAssociatedAccountStateDirty],
        v9,
        !v10))
  {
    unsigned int v14 = [*(id *)(*(void *)(a1 + 32) + 64) isAccountStateDirty];
    uint64_t v15 = *(id **)(a1 + 32);
    if (v14)
    {
      id v16 = @"CashReasonAccountDirty";
LABEL_17:
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v16));
      [v15 updateAccountWithDiagnosticReasons:v13 completion:0];
      goto LABEL_21;
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v15[8] associatedAccountInformation]);
    unsigned int v18 = [v17 isAssociatedAccountStateDirty];

    uint64_t v19 = *(id **)(a1 + 32);
    if (v18)
    {
      uint64_t v20 = @"CashReasonAssociatedAccountDirty";
    }

    else
    {
      unsigned int v21 = [v19[8] isAccountOutOfDate];
      uint64_t v15 = *(id **)(a1 + 32);
      if (v21)
      {
        id v16 = @"CashReasonAccountProactiveFetch";
        goto LABEL_17;
      }

      if ([v15[8] areAssociatedAccountsOutOfDate]
        && [*(id *)(*(void *)(a1 + 32) + 64) isAccountOutOfDate])
      {
        uint64_t v11 = *(void **)(a1 + 32);
        id v12 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"CashReasonAssociatedAccountProactiveFetch",  @"CashReasonAccountProactiveFetch",  0LL);
        goto LABEL_14;
      }

      uint64_t v19 = *(id **)(a1 + 32);
      uint64_t v20 = @"CashReasonAssociatedAccountProactiveFetch";
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v20));
    [v19 updateAssociatedAccountsWithDiagnosticReasons:v13 completion:0];
    goto LABEL_21;
  }

  uint64_t v11 = *(void **)(a1 + 32);
  id v12 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"CashReasonAccountDirty",  @"CashReasonAssociatedAccountDirty",  0LL);
LABEL_14:
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  [v11 updateAccountAndAssociatedAccountsWithDiagnosticReasons:v13 completion:0];
LABEL_21:

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003C2C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = PKUseMockSURFServer(a1, a2);
  if ((v3 & 1) != 0
    || PKStoreDemoModeEnabled(v3, v4)
    || ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration] & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
    uint64_t v7 = 0LL;
  }

  else
  {
    unsigned __int8 v9 = [*(id *)(*(void *)(a1 + 32) + 72) isDirty];
    uint64_t v10 = *(void *)(a1 + 32);
    if ((v9 & 1) != 0
      || (unsigned __int8 v11 = [*(id *)(v10 + 72) isOutOfDate],
          uint64_t v10 = *(void *)(a1 + 32),
          (v11 & 1) != 0)
      || !*(void *)(v10 + 72))
    {
      if (!*(_BYTE *)(v10 + 136))
      {
        [(id)v10 _updatePreferencesWithCompletion:0];
        uint64_t v10 = *(void *)(a1 + 32);
      }
    }

    uint64_t v7 = *(void *)(v10 + 72);
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL);
    uint64_t v5 = *(void *)(a1 + 40);
  }

  return v6(v5, v7);
}

void sub_1003C2F3C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentIdentityVerificationRequest);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) context]);
    objc_msgSend(v3, "setDevSigned:", objc_msgSend(v2, "devSigned"));

    [*(id *)(*(void *)(a1 + 32) + 56) peerPaymentIdentityVerificationRequest:v3 completion:*(void *)(a1 + 40)];
  }

uint64_t sub_1003C3040(uint64_t a1)
{
  uint64_t v2 = PKIsTV();
  if ((v2 & 1) != 0 || (uint64_t v4 = PKIsMac(v2, v3), (_DWORD)v4))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(Object);
    if (!os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
    {
LABEL_6:

      unsigned __int8 v9 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
      return v9();
    }

    *(_WORD *)__int128 buf = 0;
    uint64_t v7 = "Returning peer payment registration status device not compatible due to unsupported platform";
    id v8 = buf;
LABEL_5:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    goto LABEL_6;
  }

  if (!PKSecureElementIsAvailable(v4))
  {
    uint64_t v15 = PKLogFacilityTypeGetObject(11LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if (!os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    __int16 v21 = 0;
    uint64_t v7 = "Returning peer payment registration status device not compatible for device without secure element";
    id v8 = (uint8_t *)&v21;
    goto LABEL_5;
  }

  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    unsigned int v11 = [*(id *)(*(void *)(a1 + 32) + 224) _canRegisterForPeerPayment];
    uint64_t v12 = PKLogFacilityTypeGetObject(11LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v14)
      {
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Returning peer payment registration status device not registered",  v19,  2u);
      }

      unsigned __int8 v9 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      if (v14)
      {
        *(_WORD *)unsigned int v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Returning peer payment registration status not eligible",  v18,  2u);
      }

      unsigned __int8 v9 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
    }
  }

  else
  {
    uint64_t v16 = PKLogFacilityTypeGetObject(11LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Returning peer payment registration status registered",  v20,  2u);
    }

    unsigned __int8 v9 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  return v9();
}

void sub_1003C3280(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Handling companion serial number changed",  buf,  2u);
  }

  id v4 = *(id *)(*(void *)(a1 + 32) + 56LL);
  if (([v4 needsRegistration] & 1) == 0)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Scheduling a peer payment register to update server with our new companion serial number…",  v5,  2u);
    }

    [*(id *)(a1 + 32) _schedulePeerPaymentReregisterActivityForReason:@"serial number changed re-register"];
  }
}

void sub_1003C365C(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration] & 1) != 0
    || *(_BYTE *)(a1 + 72))
  {
    if (*(void *)(a1 + 40))
    {
      if (*(void *)(a1 + 48))
      {
        uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 216LL);
        uint64_t v3 = *(void **)(a1 + 64);
        if (*(void *)(a1 + 56)) {
          id v4 = *(const __CFString **)(a1 + 56);
        }
        else {
          id v4 = @"Peer Payment Registration";
        }
        uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        void v16[2] = sub_1003C3844;
        void v16[3] = &unk_10065BA48;
        id v17 = v3;
        [v2 performDeviceRegistrationForReason:v4 brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:v5 completion:v16];

        return;
      }

      uint64_t Object = PKLogFacilityTypeGetObject(11LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)__int128 buf = 0;
      id v8 = "Cannot register with the peer payment server. Registration url is nil.";
    }

    else
    {
      uint64_t v6 = PKLogFacilityTypeGetObject(11LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)__int128 buf = 0;
      id v8 = "Cannot register with the peer payment server. Push token is nil.";
    }

    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
LABEL_18:

    uint64_t v13 = *(void *)(a1 + 64);
    if (v13)
    {
      uint64_t v14 = PKDisplayableErrorForCommonType(0LL, 0LL);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v15);
    }

    return;
  }

  uint64_t v9 = PKLogFacilityTypeGetObject(11LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "The peer payment service is already registered.",  buf,  2u);
  }

  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, void))(v11 + 16))(v11, 1LL, 0LL);
  }
}

void sub_1003C3844(uint64_t a1, char a2, void *a3, void *a4)
{
  id v12 = a3;
  uint64_t v7 = a4;
  unint64_t v8 = a2 & 0x20 | (unint64_t)v7;
  BOOL v9 = v8 != 0;
  if (!v8)
  {
    uint64_t v10 = PKDisplayableErrorForCommonType(0LL, 0LL);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v10);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, BOOL, uint64_t))(v11 + 16))(v11, v9, v7);
  }
}

void sub_1003C39B0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v18 = v4;
    __int16 v19 = 2112;
    uint64_t v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Attempting to register with the peer payment service with url: '%@' pushToken: %@",  buf,  0x16u);
  }

  unsigned __int8 v6 = [*(id *)(*(void *)(a1 + 48) + 56) needsRegistration];
  if ((v6 & 1) != 0 || *(_BYTE *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    unint64_t v8 = *(void **)(a1 + 56);
    BOOL v9 = *(void **)(v7 + 56);
    v13[0] = _NSConcreteStackBlock;
    void v13[2] = sub_1003C3B4C;
    void v13[3] = &unk_10065BAC0;
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    v13[1] = 3221225472LL;
    void v13[4] = v7;
    char v15 = v6 ^ 1;
    char v16 = *(_BYTE *)(a1 + 65);
    id v14 = v8;
    [v9 peerPaymentRegisterWithURL:v10 pushToken:v11 completion:v13];
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Skipped registration with the peer payment service because already registered.",  buf,  2u);
    }

    uint64_t v12 = *(void *)(a1 + 56);
    if (v12) {
      (*(void (**)(uint64_t, uint64_t, void))(v12 + 16))(v12, 1LL, 0LL);
    }
  }

void sub_1003C3B4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1003C3C14;
  block[3] = &unk_100647D68;
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void **)(a1 + 40);
  BOOL v9 = *(dispatch_queue_s **)(v7 + 32);
  block[1] = 3221225472LL;
  void block[4] = v7;
  id v13 = v5;
  id v14 = v6;
  __int16 v16 = *(_WORD *)(a1 + 48);
  id v15 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

void sub_1003C3C14(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 65);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003C3CB0;
  v6[3] = &unk_10065BA98;
  void v6[4] = v1;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  objc_msgSend( v1,  "_queue_processRegistrationResponse:registrationError:previouslyRegistered:abridgedRegistration:completion:",  v2,  v5,  v3,  v4,  v6);
}

void sub_1003C3CB0(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) _archiveSharedPeerPaymentWebServiceContext];
  if (a2 == 4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully registered with the peer payment service.",  (uint8_t *)&v17,  2u);
    }

    PKSetUserHasDisabledPeerPayment(0LL);
  }

  else
  {
    if (!v5) {
      id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPeerPaymentWebServiceErrorDomain,  0LL,  0LL));
    }
    uint64_t v8 = PKLogFacilityTypeGetObject(11LL);
    BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 3) {
        id v10 = @"unknown";
      }
      else {
        id v10 = off_10065C148[a2];
      }
      int v17 = 138543618;
      uint64_t v18 = v10;
      __int16 v19 = 2112;
      id v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Failed to register with the peer payment service with state: %{public}@ and error: %@",  (uint8_t *)&v17,  0x16u);
    }
  }

  [*(id *)(a1 + 32) _updatePushTopics];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[PKPeerPaymentRecipientCache sharedCache](&OBJC_CLASS___PKPeerPaymentRecipientCache, "sharedCache"));
  unsigned __int8 v12 = [v11 purgeCache];

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(11LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Failed to purge the peer payment recipient cache.",  (uint8_t *)&v17,  2u);
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v15 postNotificationName:PKPeerPaymentRegistrationStatusChangedNotification object:0 userInfo:0 options:1];

  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(uint64_t, BOOL, id))(v16 + 16))(v16, a2 == 4, v5);
  }
}

void sub_1003C42D0(void *a1, int a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1[4] + 56) removeDiagnosticReason:a1[5]];
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5 || !a2)
  {
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v13 = a1[5];
    int v15 = 138412546;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    id v18 = v5;
    id v10 = "Unregister failed for reason %@, with error %@.";
    id v11 = v7;
    uint32_t v12 = 22;
  }

  else
  {
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v9 = a1[5];
    int v15 = 138412290;
    uint64_t v16 = v9;
    id v10 = "Unregister was successful for reason %@.";
    id v11 = v7;
    uint32_t v12 = 12;
  }

  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v15, v12);
LABEL_8:

  uint64_t v14 = a1[7];
  if (v14) {
    (*(void (**)(uint64_t, void, void))(v14 + 16))(v14, a1[8], a1[6]);
  }
}

uint64_t sub_1003C4404(void *a1)
{
  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[8], a1[6]);
  }
  return result;
}

void sub_1003C444C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _peerPaymentErrorStateForRegistrationResponse:*(void *)(a1 + 40) error:*(void *)(a1 + 48) expectsPass:*(_BYTE *)(a1 + 64) == 0];
  if (v2 == (id)4)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 4LL, *(void *)(a1 + 48));
    }
    if (([*(id *)(*(void *)(a1 + 32) + 64) supportsThresholdTopUp] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 32) + 64) supportsRecurringPayments] & 1) != 0
      || [*(id *)(*(void *)(a1 + 32) + 64) hasRecurringPayments])
    {
      [*(id *)(a1 + 32) updateRecurringPaymentsWithCompletion:0];
    }

    [*(id *)(a1 + 32) _updateEncryptionCertificatesIfNeededWithAccount:*(void *)(*(void *)(a1 + 32) + 64)];
  }

  else
  {
    unint64_t v4 = (unint64_t)v2;
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (v4 > 3) {
        id v7 = @"unknown";
      }
      else {
        id v7 = off_10065C148[v4];
      }
      *(_DWORD *)__int128 buf = 138543362;
      __int16 v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDPeerPaymentWebServiceCoordinator: non-nil error state registering %{public}@",  buf,  0xCu);
    }

    if (*(_BYTE *)(a1 + 65))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      if (v8) {
        (*(void (**)(uint64_t, unint64_t, void))(v8 + 16))(v8, v4, *(void *)(a1 + 48));
      }
    }

    else
    {
      if (v4 > 3) {
        uint64_t v9 = @"unknown";
      }
      else {
        uint64_t v9 = off_10065C148[v4];
      }
      [*(id *)(*(void *)(a1 + 32) + 56) addDiagnosticReason:v9];
      id v10 = *(void **)(a1 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_1003C4688;
      v11[3] = &unk_10065BAE8;
      void v11[4] = v10;
      uint32_t v12 = (__CFString *)v9;
      id v14 = *(id *)(a1 + 56);
      unint64_t v15 = v4;
      id v13 = *(id *)(a1 + 48);
      [v10 unregisterDeviceWithCompletion:v11];
    }
  }

uint64_t sub_1003C4688(void *a1)
{
  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[8], a1[6]);
  }
  return result;
}

void sub_1003C46D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1003C4774;
  v8[3] = &unk_10063B100;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 32);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  char v12 = *(_BYTE *)(a1 + 48);
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1003C4774(uint64_t a1)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0LL;
    id v6 = 0LL;
    uint64_t v7 = *(void *)v24;
    do
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v2);
        }
        id v9 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        if (objc_msgSend(v9, "isMe", (void)v23))
        {
          id v10 = v9;

          id v6 = v10;
        }

        else if ([v9 memberType] == (id)1 || objc_msgSend(v9, "memberType") == (id)2)
        {
          ++v5;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v4);
  }

  else
  {
    uint64_t v5 = 0LL;
    id v6 = 0LL;
  }

  [*(id *)(*(void *)(a1 + 40) + 64) setAccountStateDirty:1];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104LL));
  uint64_t v12 = objc_claimAutoreleasedReturnValue([WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 40) + 64)]);
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  if ([v6 memberType] == (id)1
    || [v6 memberType] == (id)2
    || [v6 canSharePeerPaymentAccount] && v5 >= 1)
  {
    if (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 64), "supportsFamilySharing", (void)v23))
    {
      id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) associatedAccountInformation]);
      if (!v15)
      {
        id v15 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentAssociatedAccountInformation);
        [*(id *)(*(void *)(a1 + 40) + 64) setAssociatedAccountInformation:v15];
      }

      [v15 setAssociatedAccountStateDirty:1];
      id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104LL));
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v16 insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 40) + 64)]);
      uint64_t v18 = *(void *)(a1 + 40);
      __int16 v19 = *(void **)(v18 + 64);
      *(void *)(v18 + 64) = v17;
    }

    id v20 = *(void **)(a1 + 40);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"CashReasonNewRegistration"));
    [v20 updateAccountAndAssociatedAccountsWithDiagnosticReasons:v21 abridgedRegistration:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }

  else
  {
    id v22 = *(void **)(a1 + 40);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  @"CashReasonNewRegistration",  (void)v23));
    [v22 updateAccountWithDiagnosticReasons:v21 abridgedRegistration:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }
}

void sub_1003C4B0C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "The peer payment service is already unregistered.",  buf,  2u);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, void))(v4 + 16))(v4, 1LL, 0LL);
    }
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedPassUniqueID]);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void **)(v6 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1003C4C20;
    void v10[3] = &unk_1006464A0;
    void v10[4] = v6;
    id v11 = v5;
    id v12 = v7;
    id v9 = v5;
    [v8 peerPaymentUnregisterWithCompletion:v10];
  }

void sub_1003C4C20(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 || !a2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to unregister from the peer payment service.",  (uint8_t *)&v17,  2u);
    }

    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0LL, v5);
      }

      else
      {
        uint64_t v15 = PKDisplayableErrorForCommonType(2LL, 0LL);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v16);
      }
    }
  }

  else
  {
    [*(id *)(a1 + 32) deleteSharedWebServiceWithDiagnosticReason:@"User Initiated Unregister"];
    uint64_t v6 = PKLogFacilityTypeGetObject(11LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully unregistered from the peer payment service.",  (uint8_t *)&v17,  2u);
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138412290;
        uint64_t v18 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Removing peer payment pass with unique id %@",  (uint8_t *)&v17,  0xCu);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
      [WeakRetained deleteCardWithUniqueID:*(void *)(a1 + 40) forReason:6 withDiagnosticReason:@"Peer Payment Unregister"];
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    [v10 postNotificationName:PKPeerPaymentRegistrationStatusChangedNotification object:0 userInfo:0 options:1];

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, void))(v11 + 16))(v11, 1LL, 0LL);
    }
  }
}

void sub_1003C52EC(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "peerPaymentWebServiceCoordinatorDidDeleteAccount") & 1) != 0) {
    -[PDPeerPaymentWebServiceCoordinatorObserver peerPaymentWebServiceCoordinatorDidDeleteAccount]( v2,  "peerPaymentWebServiceCoordinatorDidDeleteAccount");
  }
}

void sub_1003C5474(void *a1)
{
  id v2 = [[PKPeerPaymentUpdatePreferencesRequest alloc] initWithPeerPaymentPreferences:a1[4]];
  uint64_t v3 = a1[5];
  uint64_t v4 = (void *)a1[6];
  id v5 = *(void **)(v3 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003C550C;
  v6[3] = &unk_10065BBA0;
  void v6[4] = v3;
  id v7 = v4;
  [v5 peerPaymentUpdatePreferencesWithRequest:v2 completion:v6];
}

void sub_1003C550C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1003C55CC;
  v12[3] = &unk_10063B440;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v6;
  id v16 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_1003C55CC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentPreferences]);
  objc_msgSend(*(id *)(a1 + 40), "_writePreferences:withError:");
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 48))
  {
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(v2 + 16);
LABEL_6:
      v3();
    }
  }

  else if (v2)
  {
    uint64_t v3 = *(void (**)(void))(v2 + 16);
    goto LABEL_6;
  }
}

void sub_1003C59F0(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 224LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedPassUniqueID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedPassURL]);
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v5 + 168)
    || (id v11 = *(void **)(v5 + 56)) == 0LL
    || (id v12 = [v11 needsRegistration], (_DWORD)v12))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v8 = "Not downloading the peer payment pass because the user in unregistered.";
    goto LABEL_4;
  }

  if (PKStoreDemoModeEnabled(v12, v13))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    if (!v14) {
      goto LABEL_8;
    }
    id v10 = *(void (**)(void))(v14 + 16);
    goto LABEL_7;
  }

  if (v3) {
    BOOL v15 = v4 == 0LL;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 && v2 != 0LL)
  {
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1003C5CE4;
    v41[3] = &unk_10065BBC8;
    void v41[4] = *(void *)(a1 + 32);
    id v18 = v4;
    id v42 = v18;
    id v43 = v3;
    id v44 = *(id *)(a1 + 40);
    __int16 v19 = objc_retainBlock(v41);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_1003C5E98;
    void v36[3] = &unk_10063BA88;
    id v20 = v2;
    id v37 = v20;
    id v38 = v18;
    __int16 v21 = v19;
    uint64_t v39 = *(void *)(a1 + 32);
    id v40 = v21;
    id v22 = objc_retainBlock(v36);
    uint64_t v28 = _NSConcreteStackBlock;
    uint64_t v29 = 3221225472LL;
    id v30 = sub_1003C611C;
    uint64_t v31 = &unk_10063CF68;
    uint64_t v32 = *(void *)(a1 + 32);
    __int128 v23 = v22;
    id v34 = v23;
    id v33 = v20;
    __int128 v24 = v21;
    id v35 = v24;
    __int128 v25 = objc_retainBlock(&v28);
    id v26 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 64), "role", v28, v29, v30, v31, v32);
    uint64_t v27 = (void ***)v23;
    if (v26)
    {
      if (v26 != (id)1)
      {
LABEL_30:

        goto LABEL_8;
      }

      else {
        uint64_t v27 = v25;
      }
    }

    ((void (*)(void))v27[2])();
    goto LABEL_30;
  }

  uint64_t v17 = PKLogFacilityTypeGetObject(11LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    uint64_t v8 = "Not downloading the peer payment pass because there is no pass unique ID or passURL defined.";
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
  }

LABEL_5:
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    id v10 = *(void (**)(void))(v9 + 16);
LABEL_7:
    v10();
  }

    return;
  }

  __break(1u);
}

  id v18 = sub_100417EC8(&qword_100706F08);
  __int16 v19 = swift_allocObject(v18, 24LL, 7LL);
  *(_DWORD *)(v19 + 20) = 0;
  id v20 = (os_unfair_lock_s *)(v19 + 20);
  *(_BYTE *)(v19 + 16) = 0;
  __int16 v21 = swift_getObjectType(a1);
  id v22 = (void *)swift_allocObject(&unk_10065F8D8, 48LL, 7LL);
  v22[2] = v19;
  v22[3] = a1;
  __int128 v23 = v95;
  __int128 v24 = v93;
  void v22[4] = v95;
  void v22[5] = v24;
  __int128 v25 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v23 + 16);
  swift_retain(v19);
  swift_unknownObjectRetain(a1);
  id v26 = v24;
  v25(sub_100424B78, v22, v21, v23);
  swift_release(v22);
  os_unfair_lock_lock((os_unfair_lock_t)(v19 + 20));
  uint64_t v27 = *(unsigned __int8 *)(v19 + 16);
  if (*(_BYTE *)(v19 + 16))
  {
    os_unfair_lock_unlock(v20);
    uint64_t v29 = v94;
    if (v27 != 2)
    {
      os_unfair_lock_unlock(v92);
      swift_release(v19);
      return 1LL;
    }
  }

  else
  {
    *(_BYTE *)(v19 + 16) = 2;
    os_unfair_lock_unlock(v20);
    uint64_t v29 = v94;
  }

  id v53 = v88;
  static Logger.Provisioning.add.getter(v28);
  swift_unknownObjectRetain_n(a1, 2LL);
  id v54 = swift_retain_n(v29, 2LL);
  id v55 = (os_log_s *)Logger.logObject.getter(v54);
  uint64_t v56 = static os_log_type_t.default.getter();
  id v57 = os_log_type_enabled(v55, (os_log_type_t)v56);
  unsigned int v58 = v91;
  if (v57)
  {
    __int128 v93 = v55;
    __int128 v94 = v26;
    id v59 = swift_slowAlloc(22LL, -1LL);
    __int16 v86 = swift_slowAlloc(64LL, -1LL);
    v97[0] = v86;
    *(_DWORD *)id v59 = 136315394;
    __int128 v60 = [*((id *)v29 + 2) provisioningState];
    LODWORD(v87) = v56;
    if (v60)
    {
      id v61 = v60;
      unsigned __int8 v62 = v21;
      uint64_t v63 = [v60 sid];
    }

    else
    {
      unsigned __int8 v62 = v21;
      uint64_t v63 = [*((id *)v29 + 2) uniqueIdentifier];
    }

    id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63, v64);
    id v67 = v66;

    __int128 v96 = sub_100430468(v65, v67, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v59 + 4);
    swift_release_n(v29, 2LL);
    swift_bridgeObjectRelease(v67);
    *(_WORD *)(v59 + 12) = 2080;
    uint64_t v68 = (*(uint64_t (**)(uint64_t))(v95 + 8))(v62);
    __int128 v70 = v69;
    __int128 v96 = sub_100430468(v68, v69, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v59 + 14);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v70);
    uint64_t v71 = v93;
    _os_log_impl( (void *)&_mh_execute_header,  v93,  (os_log_type_t)v87,  "[%s] Task is waiting for precondition %s",  (uint8_t *)v59,  0x16u);
    __int128 v72 = v86;
    swift_arrayDestroy(v86, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v90);
  }

  else
  {

    swift_unknownObjectRelease_n(a1, 2LL);
    swift_release_n(v29, 2LL);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v53, v90);
  }

  uint64_t v73 = sub_100417EC8(&qword_100706DC0);
  __int128 v74 = swift_allocObject(v73, 40LL, 7LL);
  *(_OWORD *)(v74 + 16) = xmmword_1004D7DD0;
  *(void *)(v74 + 32) = v29;
  v97[0] = v74;
  specialized Array._endMutation()(v74);
  v75 = v97[0];
  swift_beginAccess(v58, v97, 33LL, 0LL);
  __int16 v76 = (char *)*((void *)v58 + 2);
  swift_unknownObjectRetain(a1);
  swift_retain(v29);
  BOOL v77 = swift_isUniquelyReferenced_nonNull_native(v76);
  *((void *)v58 + 2) = v76;
  if ((v77 & 1) == 0)
  {
    __int16 v76 = sub_10043E8F8(0LL, *((void *)v76 + 2) + 1LL, 1, v76);
    *((void *)v58 + 2) = v76;
  }

  uint64_t v79 = *((void *)v76 + 2);
  id v78 = *((void *)v76 + 3);
  if (v79 >= v78 >> 1)
  {
    __int16 v76 = sub_10043E8F8((char *)(v78 > 1), v79 + 1, 1, v76);
    *((void *)v58 + 2) = v76;
  }

  *((void *)v76 + 2) = v79 + 1;
  __int128 v80 = &v76[24 * v79];
  id v81 = v95;
  *((void *)v80 + 4) = a1;
  *((void *)v80 + 5) = v81;
  *((void *)v80 + 6) = v75;
  swift_endAccess(v97);
  os_unfair_lock_unlock(v92);
  sub_10041C14C(v29);
  swift_release(v19);
  return 0LL;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  id v18 = *(void *)(v3 + 16);
  __int16 v19 = __OFSUB__(v18, 1LL);
  id v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void sub_1003C5CE4(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1003C5D88;
  block[3] = &unk_10063DA48;
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(v3 + 32);
  block[1] = 3221225472LL;
  char v10 = a2;
  void block[4] = v3;
  id v7 = v4;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v5, block);
}

uint64_t sub_1003C5D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 168)
    || (id v9 = *(void **)(v2 + 56)) == 0LL
    || (int v10 = *(unsigned __int8 *)(a1 + 64),
        unsigned int v11 = [v9 needsRegistration],
        BOOL v7 = v10 != 0,
        v11))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v12 = 138412290;
      uint64_t v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing downloaded peer payment pass %@ since the user is unregistered.",  (uint8_t *)&v12,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
    [WeakRetained deleteCardWithUniqueID:*(void *)(a1 + 48) forReason:6 withDiagnosticReason:@"peer payment web service unregistered"];

    BOOL v7 = 0LL;
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, v7);
  }
  return result;
}

void sub_1003C5E98(uint64_t a1)
{
  uint64_t v2 = (void *)PDOSTransactionCreate("PDPeerPaymentWebServiceCoordinator.pass.download");
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1003C5F44;
  v8[3] = &unk_10065BC18;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v2;
  uint64_t v10 = v6;
  id v11 = v5;
  id v7 = v2;
  [v3 passAtURL:v4 completion:v8];
}

void sub_1003C5F44(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 == 1 && v5)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1003C6018;
    v9[3] = &unk_10065BBF0;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = v7;
    uint64_t v11 = v8;
    id v12 = v6;
    id v13 = *(id *)(a1 + 48);
    [v12 downloadRemoteAssetsWithCompletion:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1003C6018(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = PDDefaultQueue();
    uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1003C60C4;
    v8[3] = &unk_10063B440;
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = *(void **)(a1 + 48);
    id v9 = v5;
    uint64_t v10 = v6;
    id v11 = v7;
    id v12 = *(id *)(a1 + 56);
    dispatch_async(v4, v8);
  }

uint64_t sub_1003C60C4(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[5] + 112LL));
  [WeakRetained writeCard:a1[6] source:1 error:0];

  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

void sub_1003C611C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 208LL);
  uint64_t v3 = PKCurrentCloudStoreApplePayContainerName();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003C61DC;
  v7[3] = &unk_10065BCB8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  id v11 = *(id *)(a1 + 56);
  [v2 cloudStoreStatusForContainer:v4 completion:v7];
}

void sub_1003C61DC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  unsigned __int8 v8 = [v6 supportsDeviceToDeviceEncryption];
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((v8 & 1) != 0)
  {
    if (v11)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Participant with no terms required and HSA2, attempting pass provisioning",  buf,  2u);
    }

    *(void *)__int128 buf = 0LL;
    uint64_t v29 = buf;
    uint64_t v30 = 0x3032000000LL;
    uint64_t v31 = sub_1003C2164;
    uint64_t v32 = sub_1003C2174;
    id v33 = 0LL;
    v26[0] = 0LL;
    v26[1] = v26;
    void v26[2] = 0x3032000000LL;
    v26[3] = sub_1003C2164;
    void v26[4] = sub_1003C2174;
    id v27 = 0LL;
    id v12 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1003C647C;
    v21[3] = &unk_10065BC40;
    __int128 v24 = buf;
    id v13 = *(id *)(a1 + 32);
    __int128 v25 = v26;
    uint64_t v14 = *(void *)(a1 + 40);
    id v22 = v13;
    uint64_t v23 = v14;
    [v12 addOperation:v21];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1003C66B0;
    v20[3] = &unk_100641880;
    void v20[4] = *(void *)(a1 + 40);
    void v20[5] = buf;
    v20[6] = v26;
    [v12 addOperation:v20];
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1003C6A80;
    v17[3] = &unk_10065BC90;
    id v18 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 56);
    id v16 = [v12 evaluateWithInput:v15 completion:v17];

    _Block_object_dispose(v26, 8);
    _Block_object_dispose(buf, 8);
  }

  else
  {
    if (v11)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Participant with no terms required, but does not have HSA2, not attempting pass provisioning",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1003C6458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1003C647C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  unsigned __int8 v8 = -[PKPaymentProvisioningController initWithWebService:localPaymentService:]( objc_alloc(&OBJC_CLASS___PKPaymentProvisioningController),  "initWithWebService:localPaymentService:",  a1[4],  0LL);
  uint64_t v9 = *(void *)(a1[6] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = [[PKPeerPaymentCredential alloc] initWithPeerPaymentAccount:*(void *)(a1[5] + 64)];
  uint64_t v12 = *(void *)(a1[7] + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  uint64_t v14 = a1[7];
  BOOL v15 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  uint64_t v22 = *(void *)(*(void *)(v14 + 8) + 40LL);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v22, 1LL));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1003C65E0;
  v19[3] = &unk_100641B28;
  id v20 = v6;
  id v21 = v7;
  id v17 = v6;
  id v18 = v7;
  [v15 associateCredentials:v16 withCompletionHandler:v19];
}

void sub_1003C65E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Peer Payment failed to setup provisioning controller: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1003C66B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(dispatch_queue_s **)(v8 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003C6768;
  block[3] = &unk_10065BC68;
  id v13 = v6;
  id v14 = v7;
  void block[4] = v8;
  __int128 v15 = *(_OWORD *)(a1 + 40);
  id v10 = v6;
  id v11 = v7;
  dispatch_async(v9, block);
}

void sub_1003C6768(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) targetDevice]);
  uint64_t v3 = (void *)v2;
  if (v2)
  {
    char v4 = objc_opt_respondsToSelector( v2,  "provisionPeerPaymentPassWithProvisioningController:peerPaymentWebService:credential:completion:");
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    if ((v4 & 1) != 0)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 56LL);
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_1003C68E0;
      void v13[3] = &unk_100641B28;
      id v15 = *(id *)(a1 + 48);
      id v14 = *(id *)(a1 + 40);
      [v3 provisionPeerPaymentPassWithProvisioningController:v5 peerPaymentWebService:v6 credential:v7 completion:v13];

      uint64_t v8 = v15;
    }

    else
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_1003C69B0;
      void v10[3] = &unk_100641B28;
      id v12 = *(id *)(a1 + 48);
      id v11 = *(id *)(a1 + 40);
      [v3 provisionPeerPaymentPassWithProvisioningController:v5 credential:v9 completion:v10];

      uint64_t v8 = v12;
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1003C68E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Pass provisioning failed with error %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1003C69B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Pass provisioning failed with error %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003C6A80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Defaulting to shell pass.", v8, 2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003C6CC0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Submitting device score identifiers for transaction %@",  (uint8_t *)&v11,  0xCu);
  }

  id v5 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentSubmitDeviceScoreIdentifiersRequest);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceIdentifier]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendDeviceScoreIdentifier]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestDeviceScoreIdentifier]);
  uint64_t v9 = v8;
  if (v6)
  {
    if (v7 | v8)
    {
      [v5 setPaymentIdentifier:v6];
      [v5 setSendDeviceScoreIdentifier:v7];
      [v5 setRequestDeviceScoreIdentifier:v9];
      [*(id *)(*(void *)(a1 + 40) + 56) submitDeviceScoreIdentifiersWithRequest:v5 completion:*(void *)(a1 + 48)];
      goto LABEL_14;
    }
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cannot submit device score identifiers without a serviceIdentifier",  (uint8_t *)&v11,  2u);
    }

    if (v7 | v9) {
      goto LABEL_12;
    }
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cannot submit device score identifiers without a sendDeviceScoreIdentifier or requestDeviceScoreIdentifier defined.",  (uint8_t *)&v11,  2u);
  }

LABEL_12:
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, 0LL, 0LL);
  }
LABEL_14:
}

id sub_1003C6F20(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) cloudStoreStatusWithCompletion:*(void *)(a1 + 40)];
}

id sub_1003C6FAC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) checkTLKsMissingWithCompletion:*(void *)(a1 + 40)];
}

id sub_1003C7034(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) resetApplePayManateeViewWithCompletion:*(void *)(a1 + 40)];
}

id sub_1003C7108(void *a1)
{
  return [*(id *)(a1[4] + 16) sendRemoteRegistrationRequest:a1[5] forHandle:a1[6] completion:a1[7]];
}

void sub_1003C73D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedPassUniqueID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained passWithUniqueIdentifier:v3]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 paymentPass]);

  id v5 = v6;
  if (!v6)
  {
    [*(id *)(a1 + 32) _downloadAssociatedPeerPaymentPassWithCompletion:0];
    id v5 = 0LL;
  }
}

uint64_t sub_1003C7468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003C7660(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) context]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 serviceURL]);

  if (([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration] & 1) != 0 || !v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Scheduled peer payment re-register no longer needed as we are currently unregistered. Unscheduling.",  v8,  2u);
    }

    PDScheduledActivityRemove(@"PDPeerPaymentWebServiceCoordinator", @"PeerPaymentReregisterActivity");
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) context]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 pushToken]);

    [*(id *)(a1 + 32) registerDeviceWithRegistrationURL:v3 pushToken:v5 forceReregister:1 reason:*(void *)(a1 + 40) completion:&stru_10065BCD8];
  }
}

void sub_1003C776C(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  uint64_t v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sucessfully re-registered. Unscheduling peer payment re-register activity.",  buf,  2u);
    }

    PDScheduledActivityRemove(@"PDPeerPaymentWebServiceCoordinator", @"PeerPaymentReregisterActivity");
  }

  else
  {
    if (v7)
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Failed to re-register with peer payment re-register activity.",  v8,  2u);
    }
  }
}

void sub_1003C7894(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    int v6 = 0;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
      }

      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v5);
    if ((v6 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(dispatch_queue_s **)(v10 + 32);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_1003C79E0;
      void v13[3] = &unk_10063A8A8;
      void v13[4] = v10;
      void v13[5] = v11;
      dispatch_async(v12, v13);
    }
  }
}

void sub_1003C79E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 associatedAccountInvitations]);

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v37;
    *(void *)&__int128 v5 = 138412546LL;
    __int128 v34 = v5;
    do
    {
      for (unint64_t i = 0LL; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "altDSID", v34));
        if ([v9 status] == (id)1)
        {
          if (v10)
          {
            uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _associatedAccountRemoteRegistrationActivityIdentifierForAltDSID:v10]);
            unsigned __int8 v12 = [v9 registrationResult];
            unsigned __int8 v13 = [v9 registrationResult];
            int v14 = PDScheduledActivityExists(@"PDPeerPaymentWebServiceCoordinator", v11);
            int v15 = v14;
            if ((v12 & 0x10) != 0 && (v13 & 0x20) != 0)
            {
              uint64_t Object = PKLogFacilityTypeGetObject(11LL);
              __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                __int128 v41 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "The users %@ is already broker and peer payment registered. Not scheduling a remote registration activity.",  buf,  0xCu);
              }

              if (v15)
              {
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  __int128 v41 = v9;
                  _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Removing remote registration activity for invitation %@ since it is already broker and peer payment registered.",  buf,  0xCu);
                }

                PDScheduledActivityRemove(@"PDPeerPaymentWebServiceCoordinator", v11);
              }
            }

            else if (v14)
            {
              uint64_t v19 = PKLogFacilityTypeGetObject(11LL);
              id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                __int128 v41 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "An associated account remote registration request is already scheduled for altDSID %@.",  buf,  0xCu);
              }
            }

            else
            {
              id v21 = (char *)[v9 remoteRegistrationRequestLevel];
              else {
                uint64_t v22 = (uint64_t)v21;
              }
              double v23 = dbl_1004D7870[v22];
              [v9 setRemoteRegistrationRequestLevel:v21 + 1];
              id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
              uint64_t v25 = objc_claimAutoreleasedReturnValue( [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)]);
              uint64_t v26 = *(void *)(a1 + 32);
              id v27 = *(void **)(v26 + 64);
              *(void *)(v26 + 64) = v25;

              if (v22) {
                uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  v23));
              }
              else {
                uint64_t v28 = 0LL;
              }
              uint64_t v29 = PKLogFacilityTypeGetObject(11LL);
              uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = v34;
                __int128 v41 = v10;
                __int16 v42 = 2112;
                id v43 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Scheduling peer payment remote registration activity for altDSID %@ at time %@.",  buf,  0x16u);
              }

              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v28));
              [v31 setRequireNetworkConnectivity:1];
              unint64_t v32 = *(void *)(a1 + 40);
              if (v32 > 3) {
                id v33 = 0LL;
              }
              else {
                id v33 = off_10065C168[v32];
              }
              [v31 setReason:v33];
              PDScheduledActivityRegister(@"PDPeerPaymentWebServiceCoordinator", v11, v31);
            }
          }

          else
          {
            uint64_t v18 = PKLogFacilityTypeGetObject(11LL);
            uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              __int128 v41 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error: and altDSID is not defined for this peer payment account invitation %@",  buf,  0xCu);
            }
          }
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v6);
  }
}

void sub_1003C8088(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 64) accountInvitationWithAltDSID:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2 && [v2 status] == (id)1)
  {
    id v4 = *(void **)(a1 + 40);
    __int128 v5 = *(void **)(*(void *)(a1 + 32) + 24LL);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1003C81F0;
    v11[3] = &unk_10063A4B8;
    id v12 = v4;
    id v13 = *(id *)(a1 + 48);
    id v6 = *(id *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 32);
    id v14 = v6;
    uint64_t v15 = v7;
    [v5 familyMembersWithCachePolicy:0 completion:v11];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "There is no pending invitation for altDSID %@. Not performing remote registration activity",  buf,  0xCu);
    }

    PDScheduledActivityRemove(*(void *)(a1 + 48), *(void *)(a1 + 56));
  }
}

void sub_1003C81F0(uint64_t a1, void *a2)
{
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v29;
LABEL_3:
    uint64_t v7 = 0LL;
    while (1)
    {
      if (*(void *)v29 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v8 = *(void **)(*((void *)&v28 + 1) + 8 * v7);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 altDSID]);
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = v9;
      id v12 = v10;
      if (v11 == v12) {
        break;
      }
      id v13 = v12;
      if (v11) {
        BOOL v14 = v12 == 0LL;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
      }

      else
      {
        unsigned __int8 v15 = [v11 isEqualToString:v12];

        if ((v15 & 1) != 0) {
          goto LABEL_18;
        }
      }

      if (v5 == (id)++v7)
      {
        id v5 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_16;
      }
    }

LABEL_18:
    id v16 = v8;

    if (!v16) {
      goto LABEL_20;
    }
    id v17 = objc_alloc_init(&OBJC_CLASS___PKRemoteRegistrationRequest);
    [v17 setRegisterPeerPayment:1];
    [v17 setRegisterBroker:1];
    uint64_t v18 = *(void **)(*(void *)(a1 + 56) + 16LL);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 appleID]);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1003C849C;
    v24[3] = &unk_10065BD00;
    void v24[4] = *(void *)(a1 + 56);
    id v25 = v16;
    id v26 = *(id *)(a1 + 40);
    id v27 = *(id *)(a1 + 48);
    id v20 = v16;
    [v18 sendRemoteRegistrationRequest:v17 forHandle:v19 completion:v24];
  }

  else
  {
LABEL_16:

LABEL_20:
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v33 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "There is no family member found for altDSID %@. Not performing remote registration activity",  buf,  0xCu);
    }

    PDScheduledActivityRemove(*(void *)(a1 + 40), *(void *)(a1 + 48));
  }
}

void sub_1003C849C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003C8560;
  block[3] = &unk_10063AE10;
  id v10 = v4;
  id v11 = v3;
  id v12 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v13 = v6;
  uint64_t v14 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1003C8560(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appleID]);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finished sending remote registration request to handle %@, with error %@",  (uint8_t *)&v6,  0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    PDScheduledActivityRemove(*(void *)(a1 + 48), *(void *)(a1 + 56));
    [*(id *)(a1 + 64) _scheduleAssociatedAccountRemoteRegistrationActivityIfNecessaryForReason:3];
  }

void sub_1003C878C(uint64_t a1)
{
  if (v2 != 0.0)
  {
    double v3 = v2;
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:v3]);

    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = @"YES";
      int v9 = *(unsigned __int8 *)(a1 + 57);
      if (*(_BYTE *)(a1 + 56)) {
        id v10 = @"YES";
      }
      else {
        id v10 = @"NO";
      }
      int v12 = 138412802;
      if (!v9) {
        __int16 v8 = @"NO";
      }
      id v13 = v10;
      __int16 v14 = 2112;
      unsigned __int8 v15 = v8;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Scheduling task to check if account is stale after a new transaction has been added. accountEndpoint: %@. associ atedAccountEndpoint: %@. fireDate: %@.",  (uint8_t *)&v12,  0x20u);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v5));
    [v11 setRequireNetworkConnectivity:1];
    PDScheduledActivityRegister(*(void *)(a1 + 40), *(void *)(a1 + 48), v11);
  }

void sub_1003C8AF4(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) lastUpdated]);
  [*(id *)(*(void *)(a1 + 32) + 64) accountFetchAfterTransactionWaitPeriod];
  double v4 = v3;
  [*(id *)(*(void *)(a1 + 32) + 64) accountFetchAfterTransactionWaitTolerance];
  double v6 = v4 + v5;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 dateByAddingTimeInterval:-v6]);

  id v9 = [v2 compare:v8];
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v9 != (id)-1LL)
  {
    if (v12)
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v27 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Not fetching an updated peer payment account after a new transaction beacuse the lastUpdatedDate is too recent %@",  buf,  0xCu);
    }

    goto LABEL_18;
  }

  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    id v27 = v2;
    __int16 v28 = 2112;
    uint64_t v29 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Updating peer payment account since it is stale after a new transaciton. lastUpdatedDate %@. activityIdentifier %@",  buf,  0x16u);
  }

  __int16 v14 = (__CFString *)*(id *)(a1 + 40);
  if (v14 == @"CashStaleAccountAndAssociatedAccount"
    || (unsigned __int8 v15 = v14) != 0LL
    && (unsigned int v16 = -[__CFString isEqualToString:]( v14,  "isEqualToString:",  @"CashStaleAccountAndAssociatedAccount"),  v15,  v16))
  {
    id v17 = *(void **)(a1 + 32);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"CashReasonAccountFetchAfterTransaction",  @"CashReasonAssociatedAccountFetchAfterTransaction",  0LL));
    [v17 updateAccountAndAssociatedAccountsWithDiagnosticReasons:v11 completion:0];
LABEL_18:

    goto LABEL_19;
  }

  uint64_t v18 = (__CFString *)*(id *)(a1 + 40);
  if (v18 == @"CashStaleAccount"
    || (uint64_t v19 = v18) != 0LL
    && (unsigned int v20 = -[__CFString isEqualToString:](v18, "isEqualToString:", @"CashStaleAccount"),
        v19,
        v20))
  {
    id v21 = *(void **)(a1 + 32);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  @"CashReasonAccountFetchAfterTransaction"));
    [v21 updateAccountWithDiagnosticReasons:v11 completion:0];
    goto LABEL_18;
  }

  uint64_t v22 = (__CFString *)*(id *)(a1 + 40);
  if (v22 == @"CashStaleAssociatedAccount"
    || (uint64_t v23 = v22) != 0LL
    && (unsigned int v24 = -[__CFString isEqualToString:](v22, "isEqualToString:", @"CashStaleAssociatedAccount"),
        v23,
        v24))
  {
    id v25 = *(void **)(a1 + 32);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  @"CashReasonAssociatedAccountFetchAfterTransaction"));
    [v25 updateAssociatedAccountsWithDiagnosticReasons:v11 completion:0];
    goto LABEL_18;
  }

void sub_1003C8F60(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 56LL);
  if (([v2 needsRegistration] & 1) == 0)
  {
    double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) cloudStoreZoneNames]);
    unsigned int v4 = [v3 containsObject:*(void *)(a1 + 40)];

    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v7)
      {
        LOWORD(v9) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Scheduling a peer payment reregister to update server now that our zone has been created…",  (uint8_t *)&v9,  2u);
      }

      [*(id *)(a1 + 32) _schedulePeerPaymentReregisterActivityForReason:@"cloud store zone created re-register"];
    }

    else
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v9 = 138412290;
        uint64_t v10 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "The peer payment account does not contain zone %@. Ignoring zone creation notification.",  (uint8_t *)&v9,  0xCu);
      }
    }
  }
}

id sub_1003C95F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)]);
  uint64_t v4 = *(void *)(a1 + 32);
  double v5 = *(void **)(v4 + 64);
  *(void *)(v4 + 64) = v3;

  return _[*(id *)(a1 + 32) _updateAccountFromPush:1 diagnosticReasons:0 abridgedRegistration:0 completion:&stru_10065BD68];
}

void sub_1003C966C(id a1, PKPeerPaymentAccount *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Peer Payment Account updated following push notification",  v4,  2u);
  }
}

void sub_1003C96D4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) additionalPushTopics]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 preferences]);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = v3;
  id v6 = v4;
  if (v5 == v6)
  {

LABEL_10:
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v49) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Updating preferences following push",  (uint8_t *)&v49,  2u);
    }

    [*(id *)(a1 + 32) updatePreferencesWithCompletion:0];
    goto LABEL_56;
  }

  BOOL v7 = v6;
  if (v5) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
  }

  else
  {
    unsigned int v9 = [v5 isEqualToString:v6];

    if (v9) {
      goto LABEL_10;
    }
  }

  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v2 associatedAccounts]);
  uint64_t v13 = *(void **)(a1 + 40);
  id v14 = v12;
  id v15 = v13;
  if (v14 == v15)
  {

LABEL_22:
    id v19 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation]);
    if (!v19)
    {
      id v19 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentAssociatedAccountInformation);
      [*(id *)(*(void *)(a1 + 32) + 64) setAssociatedAccountInformation:v19];
    }

    [v19 setAssociatedAccountStateDirty:1];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    uint64_t v21 = objc_claimAutoreleasedReturnValue([WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)]);
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void **)(v22 + 64);
    *(void *)(v22 + 64) = v21;

    uint64_t v24 = PKLogFacilityTypeGetObject(11LL);
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v49) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Updating associated accounts following push",  (uint8_t *)&v49,  2u);
    }

    [*(id *)(a1 + 32) _updateAssociatedAccountsFromPush:1 diagnosticReasons:0 abridgedRegistration:0 completion:0];
    goto LABEL_55;
  }

  unsigned int v16 = v15;
  if (v14) {
    BOOL v17 = v15 == 0LL;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
  }

  else
  {
    unsigned int v18 = [v14 isEqualToString:v15];

    if (v18) {
      goto LABEL_22;
    }
  }

  id v26 = (void *)objc_claimAutoreleasedReturnValue([v2 requests]);
  id v27 = *(void **)(a1 + 40);
  id v28 = v26;
  id v29 = v27;
  if (v28 == v29)
  {
  }

  else
  {
    __int128 v30 = v29;
    if (!v28 || !v29)
    {

LABEL_38:
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v2 endpoint]);
      __int128 v38 = *(void **)(a1 + 40);
      id v19 = v37;
      id v39 = v38;
      if (v19 == v39)
      {

LABEL_44:
        uint64_t v42 = PKLogFacilityTypeGetObject(11LL);
        id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = *(void *)(a1 + 48);
          int v49 = 138412290;
          uint64_t v50 = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Endpoint push received with info %@",  (uint8_t *)&v49,  0xCu);
        }

        uint64_t v45 = *(void **)(a1 + 48);
        if (v45)
        {
          __int16 v46 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v45 objectForKey:@"endpoint"]);
          uint64_t v47 = v46;
          if (v46 == @"recurringPayments"
            || v46
            && (unsigned int v48 = -[__CFString isEqualToString:](v46, "isEqualToString:", @"recurringPayments"),
                v47,
                v48))
          {
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v49) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Updating recurring payments following push",  (uint8_t *)&v49,  2u);
            }

            [*(id *)(a1 + 32) updateRecurringPaymentsWithCompletion:0];
          }
        }

        goto LABEL_56;
      }

      id v40 = v39;
      if (v19 && v39)
      {
        unsigned int v41 = [v19 isEqualToString:v39];

        if (!v41) {
          goto LABEL_56;
        }
        goto LABEL_44;
      }

LABEL_55:
      goto LABEL_56;
    }

    unsigned int v31 = [v28 isEqualToString:v29];

    if (!v31) {
      goto LABEL_38;
    }
  }

  uint64_t v32 = PKLogFacilityTypeGetObject(11LL);
  uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v49) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Updating pending requests following push",  (uint8_t *)&v49,  2u);
  }

  __int128 v34 = *(void **)(a1 + 48);
  if (v34)
  {
    id v19 = (id)objc_claimAutoreleasedReturnValue([v34 objectForKey:PKPeerPaymentAdditionalPushTopicsRequestTokenKey]);
    id v35 = *(void **)(a1 + 32);
    id v51 = v19;
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v51, 1LL));
    [v35 updatePendingRequestsWithRequestTokens:v36];

    goto LABEL_55;
  }

void sub_1003C9C50(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    int v14 = 138412290;
    id v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Applying push notification token: %@",  (uint8_t *)&v14,  0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    id v5 = *(id *)(*(void *)(a1 + 40) + 56LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
    unsigned __int8 v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

    if ((v8 & 1) == 0)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 pushToken]);
        int v14 = 138412290;
        id v15 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "New push token is different than current push token: %@",  (uint8_t *)&v14,  0xCu);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
      [v11 setPushToken:*(void *)(a1 + 32)];

      [*(id *)(a1 + 40) _archiveSharedPeerPaymentWebServiceContext];
      if (([v5 needsRegistration] & 1) == 0)
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v14) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Scheduling a peer payment register to update server with our new push token…",  (uint8_t *)&v14,  2u);
        }

        [*(id *)(a1 + 40) _schedulePeerPaymentReregisterActivityForReason:@"new push token re-register"];
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);
      int v14 = 138412290;
      id v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Applied token: %@", (uint8_t *)&v14, 0xCu);
    }
  }

void sub_1003CA244(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = PKDeviceRegistrationResultToString(*(void *)(a1 + 48));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v25 = v4;
    __int16 v26 = 2112;
    id v27 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDPeerPaymentWebServiceCoordinator didReceiveRemoteRegistationResult: was called fromDestination %@, with result %@",  buf,  0x16u);
  }

  unsigned int v7 = *(unsigned __int8 *)(a1 + 48);
  int v8 = (v7 >> 5) & 1;
  int v9 = (v7 >> 4) & 1;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDestination]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);

  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  int v14 = *(void **)(v12 + 24);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1003CA3C0;
  void v18[3] = &unk_10065BDB8;
  void v18[4] = v12;
  id v19 = v11;
  id v15 = v13;
  char v22 = v8;
  char v23 = v9;
  uint64_t v16 = *(void *)(a1 + 48);
  id v20 = v15;
  uint64_t v21 = v16;
  id v17 = v11;
  [v14 familyMembersWithCachePolicy:0 completion:v18];
}

void sub_1003CA3C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003CA484;
  v9[3] = &unk_10065BD90;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 48);
  __int16 v15 = *(_WORD *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  uint64_t v14 = *(void *)(a1 + 56);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_1003CA484(uint64_t a1)
{
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v27 objects:v37 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v28;
    while (2)
    {
      for (unint64_t i = 0LL; i != v3; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
        uint64_t v7 = *(void **)(a1 + 40);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "appleID", (void)v27));
        id v9 = v7;
        id v10 = v8;
        if (v9 == v10)
        {

LABEL_16:
          id v3 = v6;
          goto LABEL_17;
        }

        id v11 = v10;
        if (v9 && v10)
        {
          unsigned int v12 = [v9 isEqualToString:v10];

          if (v12) {
            goto LABEL_16;
          }
        }

        else
        {
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v27 objects:v37 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

void sub_1003CA850(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x3032000000LL;
    char v23 = sub_1003C2164;
    uint64_t v24 = sub_1003C2174;
    id v25 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 countByEnumeratingWithState:&v16 objects:v26 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v17;
      do
      {
        for (unint64_t i = 0LL; i != v3; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v4) {
            objc_enumerationMutation(v2);
          }
          id v6 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          uint64_t v7 = (void *)v21[5];
          id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 requestToken]);
          [v7 setObject:v6 forKey:v8];
        }

        id v3 = [v2 countByEnumeratingWithState:&v16 objects:v26 count:16];
      }

      while (v3);
    }

    id v9 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentPendingRequestsRequest);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v21[5] allKeys]);
    [v9 setRequestTokens:v10];

    id v11 = *(void **)(a1 + 48);
    unsigned int v12 = *(void **)(*(void *)(a1 + 40) + 56LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1003CAA90;
    void v13[3] = &unk_10065BDE0;
    __int16 v15 = &v20;
    id v14 = v11;
    [v12 peerPaymentPendingRequestsWithRequest:v9 completion:v13];

    _Block_object_dispose(&v20, 8);
  }

void sub_1003CAA64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_1003CAA90(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(void, void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), 0LL);
  }

  else
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "requestSummaries", 0));
    id v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v18;
      do
      {
        for (unint64_t i = 0LL; i != v6; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 requestToken]);
          if (v11)
          {
            unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v9 status]);
            [v11 setStatus:v12];

            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 expiryDate]);
            [v11 setExpiryDate:v13];

            id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 actions]);
            [v11 setActions:v14];

            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKey:v10];
          }
        }

        id v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }

      while (v6);
    }

    uint64_t v15 = *(void *)(a1 + 32);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) allValues]);
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }

void sub_1003CAD58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    uint64_t v32 = a1;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained peerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40)]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v10));

    id v33 = v5;
    __int128 v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v5 requestSummaries]);
    id v39 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
    if (!v39) {
      goto LABEL_31;
    }
    uint64_t v37 = *(void *)v45;
    __int128 v38 = v8;
    id v36 = (id)PKPeerPaymentPendingRequestStatusPending;
    while (1)
    {
      for (unint64_t i = 0LL; i != v39; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v37) {
          objc_enumerationMutation(obj);
        }
        unsigned int v12 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        id v13 = v8;
        id v14 = [v13 countByEnumeratingWithState:&v40 objects:v50 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v41;
          do
          {
            for (j = 0LL; j != v15; j = (char *)j + 1)
            {
              if (*(void *)v41 != v16) {
                objc_enumerationMutation(v13);
              }
              __int128 v18 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)j);
              __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v12 requestToken]);
              __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v18 requestToken]);
              unsigned int v21 = [v19 isEqualToString:v20];

              if (v21)
              {
                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v12 status]);
                [v18 setStatus:v22];

                char v23 = (void *)objc_claimAutoreleasedReturnValue([v12 actions]);
                [v18 setActions:v23];

                uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v12 expiryDate]);
                [v18 setExpiryDate:v24];
              }
            }

            id v15 = [v13 countByEnumeratingWithState:&v40 objects:v50 count:16];
          }

          while (v15);
        }

        id v25 = (id)objc_claimAutoreleasedReturnValue([v12 status]);
        if (v25 == v36)
        {

          __int128 v28 = v36;
          id v8 = v38;
          goto LABEL_28;
        }

        __int16 v26 = v25;
        if (v25) {
          BOOL v27 = v36 == 0LL;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {

          id v8 = v38;
LABEL_27:
          __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v12 requestToken]);
          -[NSMutableArray addObject:](v34, "addObject:", v28);
LABEL_28:

          continue;
        }

        unsigned __int8 v29 = [v25 isEqualToString:v36];

        id v8 = v38;
        if ((v29 & 1) == 0) {
          goto LABEL_27;
        }
      }

      id v39 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
      if (!v39)
      {
LABEL_31:

        id v30 = objc_loadWeakRetained((id *)(*(void *)(v32 + 32) + 104LL));
        [v30 insertOrUpdatePeerPaymentPendingRequests:v8];

        id v31 = objc_loadWeakRetained((id *)(*(void *)(v32 + 32) + 104LL));
        [v31 deletePeerPaymentPendingRequestsForRequestTokens:v34];

        [*(id *)(v32 + 32) _accessObserversWithHandler:&stru_10065BE00];
        id v6 = 0LL;
        id v5 = v33;
        goto LABEL_32;
      }
    }
  }

  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v49 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "Error updating Peer Payment pending requests: %@",  buf,  0xCu);
  }

void sub_1003CB14C(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "peerPaymentWebServiceCoordinatorPendingRequestsChanged") & 1) != 0) {
    -[PDPeerPaymentWebServiceCoordinatorObserver peerPaymentWebServiceCoordinatorPendingRequestsChanged]( v2,  "peerPaymentWebServiceCoordinatorPendingRequestsChanged");
  }
}

void sub_1003CB214(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 48)
    && [*(id *)(*(void *)(a1 + 32) + 64) areRecurringPaymentsOutOfDate])
  {
    [*(id *)(a1 + 32) updateRecurringPaymentsWithCompletion:0];
  }

  if (*(void *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    id v3 = (id)objc_claimAutoreleasedReturnValue([WeakRetained peerPaymentRecurringPayments]);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1003CB324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 64) identifier]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003CB3BC;
  v6[3] = &unk_10065BE70;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 peerPaymentRecurringPaymentsForAccountIdentifier:v4 withCompletion:v6];
}

void sub_1003CB3BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v68 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error: Failed to fetch updated peer payment recurring payments with error: %@.",  buf,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained peerPaymentRecurringPayments]);

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v10, v6);
    }
  }

  else
  {
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    PKPeerPaymentRecurringPaymentsSetLastUpdated();

    id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 peerPaymentRecurringPayments]);

    id v49 = v5;
    uint64_t v15 = objc_claimAutoreleasedReturnValue([v5 recurringPayments]);
    uint64_t v51 = a1;
    id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    id v53 = (void *)v15;
    [v16 updateAllPeerPaymentRecurringPayments:v15];

    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    id v17 = v14;
    id obj = v17;
    id v54 = [v17 countByEnumeratingWithState:&v63 objects:v71 count:16];
    if (v54)
    {
      uint64_t v52 = *(void *)v64;
      do
      {
        for (unint64_t i = 0LL; i != v54; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v64 != v52) {
            objc_enumerationMutation(obj);
          }
          __int128 v19 = *(void **)(*((void *)&v63 + 1) + 8LL * (void)i);
          __int128 v59 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          __int128 v62 = 0u;
          id v20 = v53;
          id v21 = [v20 countByEnumeratingWithState:&v59 objects:v70 count:16];
          if (v21)
          {
            id v22 = v21;
            uint64_t v23 = *(void *)v60;
            while (2)
            {
              for (j = 0LL; j != v22; j = (char *)j + 1)
              {
                if (*(void *)v60 != v23) {
                  objc_enumerationMutation(v20);
                }
                id v25 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)j);
                __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v19 identifier]);
                BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v25 identifier]);
                id v28 = v26;
                id v29 = v27;
                if (v28 == v29)
                {

LABEL_26:
                  if ((char *)[v25 status] - 3 <= (char *)1)
                  {
                    id v33 = (void *)objc_claimAutoreleasedReturnValue([v19 lastExecutedTransaction]);
                    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 executionDate]);
                    __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v25 lastExecutedTransaction]);
                    id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 executionDate]);
                    char v37 = PKEqualObjects(v34, v36);

                    if ((v37 & 1) == 0)
                    {
                      __int128 v38 = objc_alloc(&OBJC_CLASS___PDPeerPaymentRecurringPaymentStatusChangeUserNotification);
                      id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v51 + 32) + 64) associatedPassUniqueID]);
                      __int128 v40 = -[PDPeerPaymentRecurringPaymentStatusChangeUserNotification initWithPassUniqueIdentifier:recurringPayment:]( v38,  "initWithPassUniqueIdentifier:recurringPayment:",  v39,  v19);

                      [*(id *)(*(void *)(v51 + 32) + 96) insertUserNotification:v40];
                    }
                  }

                  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v19 memo]);

                  if (v41)
                  {
                    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v19 memo]);
                    [v25 setMemo:v42];
                  }

                  goto LABEL_31;
                }

                id v30 = v29;
                if (v28 && v29)
                {
                  unsigned __int8 v31 = [v28 isEqualToString:v29];

                  if ((v31 & 1) != 0) {
                    goto LABEL_26;
                  }
                }

                else
                {
                }
              }

              id v22 = [v20 countByEnumeratingWithState:&v59 objects:v70 count:16];
              if (v22) {
                continue;
              }
              break;
            }
          }

          uint64_t v32 = *(void **)(v51 + 32);
          id v20 = (id)objc_claimAutoreleasedReturnValue([v19 identifier]);
          [v32 _removeUpcomingPaymentNotificationForRecurringPaymentIdentifier:v20];
LABEL_31:
        }

        id v17 = obj;
        id v54 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
      }

      while (v54);
    }

    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    id v43 = v53;
    id v44 = [v43 countByEnumeratingWithState:&v55 objects:v69 count:16];
    if (v44)
    {
      id v45 = v44;
      uint64_t v46 = *(void *)v56;
      do
      {
        for (k = 0LL; k != v45; k = (char *)k + 1)
        {
          if (*(void *)v56 != v46) {
            objc_enumerationMutation(v43);
          }
          [*(id *)(v51 + 32) _scheduleOrRemoveNotificationsForRecurringPayment:*(void *)(*((void *)&v55 + 1) + 8 * (void)k)];
        }

        id v45 = [v43 countByEnumeratingWithState:&v55 objects:v69 count:16];
      }

      while (v45);
    }

    [*(id *)(v51 + 32) _accessObserversWithHandler:&stru_10065BE48];
    uint64_t v48 = *(void *)(v51 + 40);
    if (v48) {
      (*(void (**)(uint64_t, id, void))(v48 + 16))(v48, v43, 0LL);
    }

    id v6 = 0LL;
    id v5 = v49;
    id v10 = obj;
  }
}

void sub_1003CB8F4(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  uint64_t v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "peerPaymentWebServiceCoordinatorRecurringPaymentsChanged") & 1) != 0) {
    -[PDPeerPaymentWebServiceCoordinatorObserver peerPaymentWebServiceCoordinatorRecurringPaymentsChanged]( v2,  "peerPaymentWebServiceCoordinatorRecurringPaymentsChanged");
  }
}

void sub_1003CB9E8(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void **)(v2 + 56);
    uint64_t v5 = *(void *)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1003CBA98;
    v6[3] = &unk_10065BEB8;
    void v6[4] = v2;
    uint64_t v9 = v5;
    id v7 = v3;
    id v8 = *(id *)(a1 + 48);
    [v4 peerPaymentRecurringPaymentPerformAction:v5 identifier:v7 completion:v6];
  }

void sub_1003CBA98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 recurringPayment]);
    if (v11)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
      char v37 = v11;
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
      [WeakRetained insertOrUpdatePeerPaymentRecurringPayments:v13];

      [*(id *)(a1 + 32) _scheduleOrRemoveNotificationsForRecurringPayment:v11];
LABEL_15:
      [*(id *)(a1 + 32) _accessObserversWithHandler:&stru_10065BE90];
      goto LABEL_16;
    }

    if (*(void *)(a1 + 56) != 2LL)
    {
LABEL_16:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      goto LABEL_17;
    }

    id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 peerPaymentRecurringPaymentWithIdentifier:*(void *)(a1 + 40)]);

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 memo]);
    id v17 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    uint64_t v36 = *(void *)(a1 + 40);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v36, 1LL));
    [v17 deletePeerPaymentRecurringPaymentsForIdentifiers:v18];

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v16 emoji]);
    if ([v19 length])
    {
    }

    else
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 text]);
      id v21 = [v20 length];

      if (!v21)
      {
LABEL_14:
        [*(id *)(a1 + 32) _removeUpcomingPaymentNotificationForRecurringPaymentIdentifier:*(void *)(a1 + 40)];

        goto LABEL_15;
      }
    }

    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void **)(a1 + 40);
      int v31 = 138412290;
      uint64_t v32 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Recurring payment %@ is cancelled but had a memo, keeping it locally",  (uint8_t *)&v31,  0xCu);
    }

    id v25 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentRecurringPayment);
    -[PKPeerPaymentRecurringPayment setIdentifier:](v25, "setIdentifier:", *(void *)(a1 + 40));
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v15 senderAddress]);
    -[PKPeerPaymentRecurringPayment setSenderAddress:](v25, "setSenderAddress:", v26);

    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([v15 recipientAddress]);
    -[PKPeerPaymentRecurringPayment setRecipientAddress:](v25, "setRecipientAddress:", v27);

    id v28 = (void *)objc_claimAutoreleasedReturnValue([v15 memo]);
    -[PKPeerPaymentRecurringPayment setMemo:](v25, "setMemo:", v28);

    id v29 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
    __int16 v35 = v25;
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
    [v29 insertOrUpdatePeerPaymentRecurringPayments:v30];

    goto LABEL_14;
  }

  uint64_t v7 = PKLogFacilityTypeGetObject(11LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = PKPeerPaymentRecurringPaymentActionToString(*(void *)(a1 + 56));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    int v31 = 138412546;
    uint64_t v32 = v10;
    __int16 v33 = 2112;
    id v34 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error: Failed to perform peer payment recurring payment %@ action with error: %@.",  (uint8_t *)&v31,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_17:
}

void sub_1003CBE34(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  uint64_t v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "peerPaymentWebServiceCoordinatorRecurringPaymentsChanged") & 1) != 0) {
    -[PDPeerPaymentWebServiceCoordinatorObserver peerPaymentWebServiceCoordinatorRecurringPaymentsChanged]( v2,  "peerPaymentWebServiceCoordinatorRecurringPaymentsChanged");
  }
}

void sub_1003CC080(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[PDPeerPaymentRecurringPaymentUpcomingPaymentNotification notificationIdentifierForRecurringPaymentIdentifier:]( &OBJC_CLASS___PDPeerPaymentRecurringPaymentUpcomingPaymentNotification,  "notificationIdentifierForRecurringPaymentIdentifier:",  v2));

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(*(void *)(a1 + 40) + 96LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003CC15C;
  void v10[3] = &unk_10065BF08;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = v3;
  id v14 = v8;
  id v9 = v3;
  [v5 userNotificationWithIdentifier:v9 completion:v10];
}

void sub_1003CC15C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = (void *)a1[4];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 recurringPayment]);
    LODWORD(v5) = [v5 isEqual:v6];

    if ((_DWORD)v5)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(11LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Found existing notification for upcoming recurring payment. Ignoring.",  (uint8_t *)&v19,  2u);
      }

      goto LABEL_13;
    }

    [*(id *)(a1[5] + 96) removeUserNotificationWithIdentifier:a1[6]];
  }

  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 64) associatedPassUniqueID]);
  id v9 = -[PDPeerPaymentRecurringPaymentUpcomingPaymentNotification initWithPassUniqueIdentifier:recurringPayment:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentRecurringPaymentUpcomingPaymentNotification),  "initWithPassUniqueIdentifier:recurringPayment:",  v8,  a1[4]);
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 components:28 fromDate:a1[7]]);
    [v11 setHour:9];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 dateFromComponents:v11]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 dateByAddingUnit:16 value:-1 toDate:v12 options:0]);

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v15 = [v13 compare:v14];

    if (v15 == (id)1)
    {
      uint64_t v16 = PKLogFacilityTypeGetObject(11LL);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v9, "notificationIdentifier"));
        int v19 = 138412546;
        id v20 = v18;
        __int16 v21 = 2112;
        id v22 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Scheduling notification for recurring payment with identifier: %@, scheduled date: %@",  (uint8_t *)&v19,  0x16u);
      }

      -[PDUserNotification setDate:](v9, "setDate:", v13);
      [*(id *)(a1[5] + 96) insertUserNotification:v9];
    }
  }

LABEL_13:
}

void sub_1003CC60C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained peerPaymentEncryptionCertificateForDestination:*(void *)(a1 + 48)]);

  if (v3 && [v3 certificatesVersion] == *(id *)(a1 + 56) && !*(_BYTE *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v3, 0LL);
    }
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    id v6 = *(void **)(v4 + 56);
    uint64_t v7 = *(void *)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1003CC6F8;
    v9[3] = &unk_10065BF30;
    void v9[4] = v4;
    id v10 = v5;
    [v6 peerPaymentEncryptionCertificateForDestination:v7 withCompletion:v9];
  }
}

void sub_1003CC6F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1003CC7B8;
  v12[3] = &unk_10063B440;
  id v13 = v5;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_1003CC7B8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) certificate]);
  id v3 = (void *)v2;
  if (*(void *)(a1 + 40)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  uint64_t v7 = (void *)v2;
  if (!v4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 104LL));
    [WeakRetained insertOrUpdatePeerPaymentEncryptionCertificate:v7];

    id v3 = v7;
  }

  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    (*(void (**)(uint64_t, void *, void))(v6 + 16))(v6, v7, *(void *)(a1 + 40));
    id v3 = v7;
  }
}

void sub_1003CC8F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  void v11[2] = sub_1003CC9C0;
  v11[3] = &unk_10063B440;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v11[1] = 3221225472LL;
  id v12 = v5;
  id v13 = v6;
  id v14 = v7;
  id v15 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_1003CC9C0(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    uint64_t v3 = PKPeerPaymentEncryptDataUsingPrivacySchemeWithCert();
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 keysOfEntriesPassingTest:&stru_10065BF98]);
    id v6 = objc_msgSend(v5, "pk_arrayCopy");
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 dictionaryWithValuesForKeys:v6]);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) description]);
    int v11 = 138412802;
    id v12 = v2;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    id v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Nearby Peer Payment: generated encryption fields: %@, for data: %@, error: %@",  (uint8_t *)&v11,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

BOOL sub_1003CCB18(id a1, id a2, id a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0
    && (uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString, v9), (objc_opt_isKindOfClass(v6, v10) & 1) != 0))
  {
    BOOL v11 = 1;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412546;
      id v16 = v5;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Nearby Peer Payment: WARNING - encryption field with key or value not of type string returned, ignored. key: %@, value: %@",  (uint8_t *)&v15,  0x16u);
    }

    BOOL v11 = 0;
  }

  return v11;
}

void sub_1003CCCD4(void *a1)
{
  id v2 = [[PKPeerPaymentFailureDiagnosticRequest alloc] initWithFailureDiagnostic:a1[4]];
  uint64_t v3 = a1[5];
  BOOL v4 = (void *)a1[6];
  id v5 = *(void **)(v3 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003CCD6C;
  v6[3] = &unk_10063B468;
  void v6[4] = v3;
  id v7 = v4;
  [v5 peerPaymentFailureDiagnosticWithRequest:v2 withCompletion:v6];
}

void sub_1003CCD6C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003CCE0C;
  block[3] = &unk_100641500;
  char v12 = a2;
  id v10 = v5;
  id v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1003CCE0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
  }
  return result;
}

void sub_1003CD300(_Unwind_Exception *a1)
{
}

void sub_1003CD320(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1[4] + 184) updateAccount])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 104LL));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained nextPossibleFetchDateForAccountType:1 endpointType:1 accountIdentifier:a1[5]]);

    if (([*(id *)(a1[4] + 184) fromPush] & 1) == 0
      && v9
      && (id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          [v10 timeIntervalSinceDate:v9],
          double v12 = v11,
          v10,
          v12 <= 0.0))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(11LL);
      BOOL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v34 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Not fetching peer payment account because the next possible fetch date is in the future %@",  buf,  0xCu);
      }

      v7[2](v7, v6, 0LL);
    }

    else
    {
      uint64_t v13 = a1[4];
      if (*(_BYTE *)(v13 + 168)
        || (__int16 v17 = *(void **)(v13 + 56)) == 0LL
        || [v17 needsRegistration])
      {
        uint64_t v14 = PKLogFacilityTypeGetObject(11LL);
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          id v16 = *(void **)(a1[4] + 184LL);
          *(_DWORD *)__int128 buf = 138412290;
          id v34 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Not fetching an an updated peer payment account for request because we are unregistering from peer payment %@",  buf,  0xCu);
        }

        v7[2](v7, v6, 1LL);
      }

      else
      {
        uint64_t v18 = PKLogFacilityTypeGetObject(11LL);
        int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = *(void **)(a1[4] + 184LL);
          *(_DWORD *)__int128 buf = 138412290;
          id v34 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Fetching an updated peer payment account for request %@.",  buf,  0xCu);
        }

        uint64_t v21 = a1[4];
        id v22 = *(void **)(v21 + 56);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        void v28[2] = sub_1003CD60C;
        v28[3] = &unk_10065C010;
        void v28[4] = v21;
        int v31 = v7;
        id v23 = v6;
        id v25 = (void *)a1[5];
        uint64_t v24 = a1[6];
        id v29 = v23;
        uint64_t v32 = v24;
        id v30 = v25;
        [v22 peerPaymentAccountWithCompletion:v28];
      }
    }
  }

  else
  {
    v7[2](v7, v6, 0LL);
  }
}

void sub_1003CD60C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(dispatch_queue_s **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003CD700;
  block[3] = &unk_10065BFE8;
  void block[4] = v7;
  id v18 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 64);
  id v14 = v9;
  id v15 = v5;
  uint64_t v19 = v10;
  id v16 = v6;
  id v17 = *(id *)(a1 + 48);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_1003CD700(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 168))
  {
    id v6 = *(void **)(v2 + 56);
    if (v6)
    {
      if (![v6 needsRegistration])
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) account]);
        if (!v7 || *(void *)(a1 + 56))
        {
          uint64_t Object = PKLogFacilityTypeGetObject(11LL);
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void **)(a1 + 56);
            *(_DWORD *)__int128 buf = 138412290;
            id v29 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error: Failed to fetch an updated peer payment account with error: %@.",  buf,  0xCu);
          }

          if (*(void *)(a1 + 64))
          {
            id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
            [WeakRetained increaseRetryBackoffLevelForAccountType:1 endpointType:1 accountIdentifier:*(void *)(a1 + 64)];
          }

          (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
          goto LABEL_32;
        }

        id v12 = *(id *)(*(void *)(a1 + 32) + 64LL);
        [*(id *)(a1 + 32) _handleUpdatedAccount:v7 withOldAccount:v12];
        [*(id *)(*(void *)(a1 + 32) + 64) setAccountStateDirty:0];
        id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
        [v13 deleteRetryBackoffForAccountType:1 endpointType:1 accountIdentifier:*(void *)(a1 + 64)];

        id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
        uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 insertOrUpdatePeerPaymentAccount:v7]);
        uint64_t v16 = *(void *)(a1 + 32);
        id v17 = *(void **)(v16 + 64);
        *(void *)(v16 + 64) = v15;

        [*(id *)(*(void *)(a1 + 32) + 96) updateWalletBadgeCount];
        id v18 = PDDefaultQueue();
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        PDWakePassbookInBackground();

        uint64_t v20 = PKLogFacilityTypeGetObject(11LL);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v29 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Received an updated account %@.",  buf,  0xCu);
        }

        BOOL v22 = 0;
        BOOL v23 = 0;
        if ([*(id *)(*(void *)(a1 + 32) + 64) role] == (id)1 && v12)
        {
          BOOL v22 = [v12 role] == 0;
          BOOL v23 = [v12 state] == (id)4
             && [*(id *)(*(void *)(a1 + 32) + 64) state] == (id)1;
        }

        if ([*(id *)(*(void *)(a1 + 32) + 184) updatePass])
        {
          if (([*(id *)(a1 + 32) _hasAssociatedPeerPaymentPass] ^ 1 | (v22 || v23)) == 1)
          {
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Downloading associated peer payment pass",  buf,  2u);
            }

            uint64_t v24 = *(void **)(a1 + 32);
            v25[0] = _NSConcreteStackBlock;
            v25[1] = 3221225472LL;
            v25[2] = sub_1003CDB44;
            v25[3] = &unk_100659728;
            void v25[4] = v24;
            id v27 = *(id *)(a1 + 72);
            id v26 = *(id *)(a1 + 40);
            [v24 _downloadAssociatedPeerPaymentPassWithCompletion:v25];

            goto LABEL_31;
          }
        }

        else
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Skipping downloading associated peer payment pass because request specifies not to update pass.",  buf,  2u);
          }

          [*(id *)(a1 + 32) _downloadAssociatedPeerPaymentPassWithCompletion:0];
        }

        (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
LABEL_31:

LABEL_32:
        return;
      }
    }
  }

  uint64_t v3 = PKLogFacilityTypeGetObject(11LL);
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 184LL);
    *(_DWORD *)__int128 buf = 138412290;
    id v29 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not processing the updated peer payment account for request because we are unregistering from peer payment %@",  buf,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_1003CDB44(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003CDBD0;
  v3[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_1003CDBD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003CDBE4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  if (([*(id *)(a1[4] + 184) updateAssociatedAccounts] & 1) == 0)
  {
LABEL_10:
    v7[2](v7, v6, 0LL);
    goto LABEL_11;
  }

  if (([*(id *)(a1[4] + 64) supportsFamilySharing] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Not fetching peer payment associated accounts since the user is not whitelisted via familySharing supported feature.",  buf,  2u);
    }

    goto LABEL_10;
  }

  uint64_t v8 = a1[4];
  if (*(_BYTE *)(v8 + 168)
    || (id v14 = *(void **)(v8 + 56)) == 0LL
    || [v14 needsRegistration])
  {
    uint64_t v9 = PKLogFacilityTypeGetObject(11LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *(void **)(a1[4] + 184LL);
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v33 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Not fetching an an updated peer payment associated accounts for request because we are unregistering from peer payment %@",  buf,  0xCu);
    }

    v7[2](v7, v6, 1LL);
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 104LL));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained nextPossibleFetchDateForAccountType:1 endpointType:2 accountIdentifier:a1[5]]);

    if (([*(id *)(a1[4] + 184) fromPush] & 1) == 0
      && v16
      && (id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          [v17 timeIntervalSinceDate:v16],
          double v19 = v18,
          v17,
          v19 <= 0.0))
    {
      uint64_t v25 = PKLogFacilityTypeGetObject(11LL);
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v33 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Not fetching peer payment associated accounts because the next possible fetch date is in the future %@",  buf,  0xCu);
      }

      v7[2](v7, v6, 0LL);
    }

    else
    {
      uint64_t v20 = a1[4];
      uint64_t v21 = *(void **)(v20 + 24);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_1003CDED0;
      v27[3] = &unk_10065C088;
      void v27[4] = v20;
      id v30 = v7;
      id v22 = v6;
      uint64_t v24 = (void *)a1[5];
      uint64_t v23 = a1[6];
      id v28 = v22;
      uint64_t v31 = v23;
      id v29 = v24;
      [v21 familyMembersWithCachePolicy:0 completion:v27];
    }
  }

void sub_1003CDED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003CDFA0;
  v9[3] = &unk_10065C060;
  id v10 = v3;
  uint64_t v11 = v4;
  id v14 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v15 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_1003CDFA0(uint64_t a1)
{
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v23;
    while (2)
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(v2);
        }
        if ([*(id *)(*((void *)&v22 + 1) + 8 * (void)v6) isMe])
        {

          uint64_t Object = PKLogFacilityTypeGetObject(11LL);
          uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 184LL);
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v27 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Fetching an updated peer payment associated accounts for request %@.",  buf,  0xCu);
          }

          uint64_t v13 = *(void *)(a1 + 40);
          id v14 = *(void **)(v13 + 56);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472LL;
          void v17[2] = sub_1003CE1F8;
          v17[3] = &unk_10065C038;
          void v17[4] = v13;
          id v20 = *(id *)(a1 + 64);
          id v15 = *(id *)(a1 + 48);
          uint64_t v16 = *(void *)(a1 + 72);
          id v18 = v15;
          uint64_t v21 = v16;
          id v19 = *(id *)(a1 + 56);
          [v14 peerPaymentAssociatedAccountsWithCompletion:v17];

          return;
        }

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v22 objects:v28 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t v7 = PKLogFacilityTypeGetObject(11LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 184LL);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v27 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Not fetching an updated peer payment associated accounts because the user does not have a family circle for request %@.",  buf,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1003CE1F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(dispatch_queue_s **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003CE2E8;
  block[3] = &unk_10065BFE8;
  void block[4] = v7;
  id v17 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 64);
  id v13 = v9;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

void sub_1003CE2E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 168) || (id v6 = *(void **)(v2 + 56)) == 0 || [v6 needsRegistration])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 184LL);
      int v28 = 138412290;
      uint64_t v29 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not processing the updated peer payment associated accounts for request because we are unregistering from peer payment %@",  (uint8_t *)&v28,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      uint64_t v8 = PKLogFacilityTypeGetObject(11LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 138412290;
        uint64_t v29 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error: Failed to fetch an updated peer payment associated account with error: %@.",  (uint8_t *)&v28,  0xCu);
      }

      id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation]);
      if (!v10)
      {
        id v10 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentAssociatedAccountInformation);
        [*(id *)(*(void *)(a1 + 32) + 64) setAssociatedAccountInformation:v10];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
        uint64_t v12 = objc_claimAutoreleasedReturnValue( [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)]);
        uint64_t v13 = *(void *)(a1 + 32);
        id v14 = *(void **)(v13 + 64);
        *(void *)(v13 + 64) = v12;
      }

      id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
      [v15 increaseRetryBackoffLevelForAccountType:1 endpointType:2 accountIdentifier:*(void *)(a1 + 56)];

      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    }

    else
    {
      id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) associatedAccountInformation]);
      id v17 = *(id *)(*(void *)(a1 + 32) + 64LL);
      id v18 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
      [v18 deleteRetryBackoffForAccountType:1 endpointType:2 accountIdentifier:*(void *)(a1 + 56)];

      [v16 setAssociatedAccountStateDirty:0];
      [v17 setAssociatedAccountInformation:v16];
      id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104LL));
      uint64_t v20 = objc_claimAutoreleasedReturnValue([v19 insertOrUpdatePeerPaymentAccount:v17]);
      uint64_t v21 = *(void *)(a1 + 32);
      __int128 v22 = *(void **)(v21 + 64);
      *(void *)(v21 + 64) = v20;

      [*(id *)(a1 + 32) _scheduleAssociatedAccountRemoteRegistrationActivityIfNecessaryForReason:1];
      [*(id *)(a1 + 32) _postGraduationNotificationIfNecessary];
      __int128 v23 = *(id **)(a1 + 32);
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23[8] associatedAccountInformation]);
      [v23 _postAssociatedAccountActiveNotificationIfNecessaryForNewAssociatedAccountInformation:v24 oldAssociatedAccountInformation:v10];

      uint64_t v25 = PKLogFacilityTypeGetObject(11LL);
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 64LL);
        int v28 = 138412290;
        uint64_t v29 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Received an updated account with associated accounts %@.",  (uint8_t *)&v28,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    }
  }

id sub_1003CE644(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 56);
  uint64_t v7 = *(void **)(v5 + 184);
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 diagnosticReasonString]);
  [v6 removeDiagnosticReason:v9];

  if ([*(id *)(*(void *)(a1 + 32) + 184) updateAssociatedAccounts]
    && [*(id *)(*(void *)(a1 + 32) + 184) updateAccount])
  {
    PDScheduledActivityRemove( @"PDPeerPaymentWebServiceCoordinator",  @"CashStaleAccountAndAssociatedAccount");
    PDScheduledActivityRemove(@"PDPeerPaymentWebServiceCoordinator", @"CashStaleAssociatedAccount");
LABEL_7:
    id v10 = @"CashStaleAccount";
    goto LABEL_8;
  }

  if (([*(id *)(*(void *)(a1 + 32) + 184) updateAssociatedAccounts] & 1) == 0)
  {
    goto LABEL_7;
  }

  id v10 = @"CashStaleAssociatedAccount";
LABEL_8:
  PDScheduledActivityRemove(@"PDPeerPaymentWebServiceCoordinator", v10);
LABEL_9:
  [*(id *)(a1 + 32) _updateSharedCacheWithAccount:*(void *)(*(void *)(a1 + 32) + 64)];
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 184LL);
    int v18 = 138412290;
    uint64_t v19 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Calling completions for peer payment fetch request %@",  (uint8_t *)&v18,  0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 184) callCompletionsWithAccount:*(void *)(*(void *)(a1 + 32) + 64)];
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 184);
  *(void *)(v14 + 184) = 0LL;

  unsigned __int8 v16 = [v8 isCanceled];
  if ((v16 & 1) == 0 && *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    [*(id *)(a1 + 32) _postAccountChangedNotification];
  }
  kdebug_trace(730333332LL, 0LL, 0LL, 0LL, 0LL);
  return objc_msgSend(*(id *)(a1 + 32), "_queue_executeNextAccountFetchRequestIfPossible");
}

void sub_1003CEAA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 altDSID]);
        -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v10, v11);
      }

      id v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v7);
  }

  uint64_t v12 = *(void **)(a1 + 40);
  uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003CEC40;
  block[3] = &unk_100639350;
  id v16 = v12;
  id v17 = v4;
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v14 = v4;
  dispatch_async(v13, block);
}

void sub_1003CEC40(uint64_t a1)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v25;
    *(void *)&__int128 v3 = 138412290LL;
    __int128 v19 = v3;
    do
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "altDSID", v19));
        if (v8)
        {
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
          if (v9)
          {
            id v10 = objc_alloc(&OBJC_CLASS___PDPeerPaymentGraduationUserNotification);
            id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 64) associatedPassUniqueID]);
            uint64_t v12 = -[PDPeerPaymentGraduationUserNotification initWithPassUniqueIdentifier:familyMember:]( v10,  "initWithPassUniqueIdentifier:familyMember:",  v11,  v9);

            uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v12, "notificationIdentifier"));
            uint64_t v14 = *(void *)(a1 + 48);
            id v15 = *(void **)(v14 + 96);
            v21[0] = _NSConcreteStackBlock;
            v21[1] = 3221225472LL;
            v21[2] = sub_1003CEEEC;
            v21[3] = &unk_10065C0B0;
            void v21[4] = v14;
            void v21[5] = v7;
            __int128 v22 = v12;
            id v23 = v8;
            id v16 = v12;
            [v15 userNotificationWithIdentifier:v13 completion:v21];
          }

          else
          {
            uint64_t Object = PKLogFacilityTypeGetObject(11LL);
            uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = v19;
              uint64_t v29 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Not creating graduation notification since they are not in the family anymore %@",  buf,  0xCu);
            }
          }
        }

        else
        {
          uint64_t v17 = PKLogFacilityTypeGetObject(11LL);
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = v19;
            uint64_t v29 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error: cannot display graduation notification for a nil altDSID %@",  buf,  0xCu);
          }
        }
      }

      id v4 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
    }

    while (v4);
  }
}

void sub_1003CEEEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1003CEFA4;
  block[3] = &unk_10063AE10;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  block[1] = 3221225472LL;
  id v10 = v3;
  uint64_t v11 = v4;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = *(id *)(a1 + 56);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1003CEFA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Object = PKLogFacilityTypeGetObject(23LL);
  id WeakRetained = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v2;
      __int16 v14 = 2112;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Not creating a graduation notification for removed record since one already exists %@, %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v12 = 138412290;
      uint64_t v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Creating new graduation notification for removed record %@",  (uint8_t *)&v12,  0xCu);
    }

    [*(id *)(a1 + 48) setSuppressionBehavior:1];
    [*(id *)(*(void *)(a1 + 56) + 96) insertUserNotification:*(void *)(a1 + 48)];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 64) associatedAccountInformation]);
    [v8 markAssociatedAccountRemovalRecordWithAltDSID:*(void *)(a1 + 64) hasPresentedNotification:1];

    id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 104LL));
    uint64_t v9 = objc_claimAutoreleasedReturnValue( -[os_log_s insertOrUpdatePeerPaymentAccount:]( WeakRetained,  "insertOrUpdatePeerPaymentAccount:",  *(void *)(*(void *)(a1 + 56) + 64LL)));
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void **)(v10 + 64);
    *(void *)(v10 + 64) = v9;
  }
}

void sub_1003CF4EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v26 count:16];
  uint64_t v7 = v5;
  if (!v6) {
    goto LABEL_12;
  }
  id v8 = v6;
  int v9 = 0;
  uint64_t v10 = *(void *)v23;
  do
  {
    for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v23 != v10) {
        objc_enumerationMutation(v5);
      }
      int v12 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 altDSID]);
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v12, v13);
    }

    id v8 = [v5 countByEnumeratingWithState:&v22 objects:v26 count:16];
  }

  while (v8);

  if ((v9 & 1) != 0)
  {
    __int16 v14 = *(void **)(a1 + 40);
    uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003CF6AC;
    block[3] = &unk_100639350;
    id v19 = v14;
    id v16 = v4;
    uint64_t v17 = *(void *)(a1 + 32);
    __int128 v20 = v16;
    uint64_t v21 = v17;
    dispatch_async(v15, block);

    uint64_t v7 = v19;
LABEL_12:
  }
}

void sub_1003CF6AC(uint64_t a1)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v20;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v20 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectForKey:*(void *)(*((void *)&v19 + 1) + 8 * (void)v5)]);
        uint64_t v7 = objc_alloc(&OBJC_CLASS___PDPeerPaymentAssociatedAccountActiveUserNotification);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 64) associatedPassUniqueID]);
        int v9 = -[PDPeerPaymentAssociatedAccountActiveUserNotification initWithPassUniqueIdentifier:familyMember:]( v7,  "initWithPassUniqueIdentifier:familyMember:",  v8,  v6);

        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v9, "notificationIdentifier"));
        uint64_t v11 = *(void *)(a1 + 48);
        int v12 = *(void **)(v11 + 96);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        void v16[2] = sub_1003CF884;
        void v16[3] = &unk_10064FE80;
        void v16[4] = v11;
        id v17 = v6;
        uint64_t v18 = v9;
        uint64_t v13 = v9;
        id v14 = v6;
        [v12 userNotificationWithIdentifier:v10 completion:v16];

        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v3);
  }
}

void sub_1003CF884(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003CF938;
  v9[3] = &unk_10063B060;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_1003CF938(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Object = PKLogFacilityTypeGetObject(23LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138412546;
      uint64_t v9 = v2;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not creating a associated account active for family member since one already exists %@, %@",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Creating new associated account active notification for family member %@",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(a1 + 48) setSuppressionBehavior:1];
    [*(id *)(*(void *)(a1 + 56) + 96) insertUserNotification:*(void *)(a1 + 48)];
  }

uint64_t (**sub_1003CFBA0(uint64_t a1))(id, void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Note: Asked to update the peer payment account, however we aren't currently registered. Bailing out.",  buf,  2u);
    }

    uint64_t result = *(uint64_t (***)(id, void))(a1 + 48);
    if (result) {
      return (uint64_t (**)(id, void))result[2](result, 0LL);
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5)
    {
      uint64_t v6 = PKLogFacilityTypeGetObject(11LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v8 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Error: no PDPeerPaymentWebServiceAccountFetch defined when fetching an account",  v8,  2u);
      }

      uint64_t v5 = *(void *)(a1 + 40);
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_addAccountFetchRequest:", v5);
    return (uint64_t (**)(id, void))objc_msgSend( *(id *)(a1 + 32),  "_queue_executeNextAccountFetchRequestIfPossible");
  }

  return result;
}

void sub_1003CFD3C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Note: Asked to update the peer payment preferences, however we aren't currently registered. Bailing out.",  buf,  2u);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v5 + 136))
    {
      uint64_t v6 = PKLogFacilityTypeGetObject(11LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received a request to update peer payment preferences while update already in progress. Queuing request...",  buf,  2u);
      }

      int v8 = -[PDPeerPaymentWebServicePendingPreferencesFetch initWithCompletionHandler:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentWebServicePendingPreferencesFetch),  "initWithCompletionHandler:",  *(void *)(a1 + 40));
      [*(id *)(*(void *)(a1 + 32) + 128) addObject:v8];
    }

    else
    {
      *(_BYTE *)(v5 + 136) = 1;
      uint64_t v9 = PKLogFacilityTypeGetObject(11LL);
      __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Fetching updated peer payment preferences.",  buf,  2u);
      }

      int v8 = -[PDPeerPaymentWebServicePendingPreferencesFetch initWithCompletionHandler:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentWebServicePendingPreferencesFetch),  "initWithCompletionHandler:",  *(void *)(a1 + 40));
      [*(id *)(*(void *)(a1 + 32) + 120) addObject:v8];
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = *(void **)(v11 + 56);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_1003CFF0C;
      void v13[3] = &unk_10065C0D8;
      void v13[4] = v11;
      [v12 peerPaymentPreferencesWithCompletion:v13];
    }
  }

void sub_1003CFF0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(dispatch_queue_s **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003CFFB8;
  block[3] = &unk_100639350;
  void block[4] = v7;
  id v12 = v5;
  id v13 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

id sub_1003CFFB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) peerPaymentPreferences]);
  [v2 _writePreferences:v3 withError:*(void *)(a1 + 48)];

  return _[*(id *)(a1 + 32) _completeUpdatingPreferences];
}

void sub_1003D05B4(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "peerPaymentWebServiceCoordinator:didUpdateAccount:oldAccount:") & 1) != 0) {
    [v3 peerPaymentWebServiceCoordinator:a1[4] didUpdateAccount:a1[5] oldAccount:a1[6]];
  }
}

id sub_1003D065C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Archiving shared peer payment web service context.",  v8,  2u);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 48);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 56) context]);
  [v5 archiveContext:v6];

  return [*(id *)(a1 + 32) _updateSharedCacheWithWebService:*(void *)(*(void *)(a1 + 32) + 56)];
}

void sub_1003D077C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 208LL);
  uint64_t v3 = PKCurrentCloudStoreApplePayContainerName();
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  [v2 setupCloudDatabaseForContainerName:v4 completion:*(void *)(a1 + 40)];
}

void sub_1003D12B8(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

uint64_t sub_1003D1680(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    int v3 = PKSafariCredentialProvisioningRequestConsentNotified();
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v6)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "We've previously notified about the import consent, don't notify again",  buf,  2u);
      }
    }

    else
    {
      if (v6)
      {
        *(_WORD *)__int128 v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Notifying user of requirement to consent to Safari Card Import",  v9,  2u);
      }

      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___PDImportSafariCardConsentRequiredUserNotification);
      [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v5];
      id v8 = objc_alloc_init(&OBJC_CLASS___PKApplicationMessageRequest);
      [*(id *)(*(void *)(a1 + 32) + 24) registerMessageForIdentifier:@"SafariImportConsentAMID" withRequest:v8];
      PKSetSafariCredentialImportRequestConsentNotified(1LL);
    }

    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
    }
  }

  else
  {
    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0LL, 0LL);
    }
  }

  return result;
}

void sub_1003D1878(void *a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1003D1A18;
    v17[3] = &unk_10065C190;
    int v3 = (void *)a1[4];
    void v17[4] = a1[5];
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pk_objectsPassingTest:", v17));
    if ([v4 count])
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      void v15[2] = sub_1003D1A38;
      v15[3] = &unk_100639118;
      void v15[4] = a1[5];
      uint64_t v5 = objc_retainBlock(v15);
      BOOL v6 = (void *)a1[6];
      __int128 v7 = *(void **)(a1[5] + 16LL);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1003D1DFC;
      v12[3] = &unk_10065C1B8;
      id v13 = v5;
      id v14 = v6;
      id v8 = v5;
      [v7 checkSafariCredentialEligibility:v4 completion:v12];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "We've previously notified about the import of these cards, don't notify again",  buf,  2u);
      }

      (*(void (**)(void))(a1[6] + 16LL))();
    }
  }

  else
  {
    uint64_t v9 = a1[6];
    if (v9) {
      (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, 0LL, 0LL);
    }
  }

uint64_t sub_1003D1A18(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _safariCredentialImportNotifiedForCredential:a2] ^ 1;
}

void sub_1003D1A38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = v5;
  id v7 = [v5 countByEnumeratingWithState:&v35 objects:v40 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v36;
    do
    {
      for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v36 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)i);
        [*(id *)(a1 + 32) _addSafariCredentialImportNotifiedForCredential:v11];
        id v12 = -[PDImportSafariCardRequestUserNotification initWithPaymentSafariCredential:]( objc_alloc(&OBJC_CLASS___PDImportSafariCardRequestUserNotification),  "initWithPaymentSafariCredential:",  v11);
        [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v12];
        id v13 = objc_alloc_init(&OBJC_CLASS___PKApplicationMessageRequest);
        id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _safariImportCardApplicationMessageIdentifierForCredential:v11]);
        [*(id *)(*(void *)(a1 + 32) + 24) registerMessageForIdentifier:v14 withRequest:v13];
      }

      id v8 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
    }

    while (v8);
  }

  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v26 = v6;
  id v15 = [v26 countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v32;
    do
    {
      for (j = 0LL; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v32 != v17) {
          objc_enumerationMutation(v26);
        }
        __int128 v19 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)j);
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 paymentPass]);
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 credential]);
        uint64_t v22 = *(void *)(a1 + 32);
        __int128 v23 = *(void **)(v22 + 16);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        void v28[2] = sub_1003D1CE8;
        v28[3] = &unk_100655A28;
        void v28[4] = v22;
        id v29 = v20;
        id v30 = v21;
        id v24 = v20;
        id v25 = v21;
        [v23 performHandlerOnSharedWebServiceQueue:v28];
      }

      id v16 = [v26 countByEnumeratingWithState:&v31 objects:v39 count:16];
    }

    while (v16);
  }
}

void sub_1003D1CE8(uint64_t a1, void *a2)
{
  id v10 = a2;
  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) sharedWebService]);
  if (!PKVirtualCardEnabledWithWebService()
    || ![*(id *)(a1 + 40) supportsVirtualCardNumberAccordingToWebService:v10])
  {
    goto LABEL_5;
  }

  unsigned __int8 v4 = [*(id *)(a1 + 40) hasActiveVirtualCardAccordingToWebService:v10];

  if ((v4 & 1) == 0)
  {
    [*(id *)(a1 + 32) _addSafariCredentialImportNotifiedForCredential:*(void *)(a1 + 48)];
    int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) primaryAccountNumberSuffix]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) devicePrimaryPaymentApplication]);
    uint64_t v7 = PKDisplayablePaymentNetworkCardNameForPaymentCredentialType([v6 paymentNetworkIdentifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    uint64_t v9 = -[PDSuggestVPANForProvisionedSafariCardRequestUserNotification initWithFPANSuffix:networkName:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDSuggestVPANForProvisionedSafariCardRequestUserNotification),  "initWithFPANSuffix:networkName:passUniqueIdentifier:",  v5,  v8,  v3);
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v9];

LABEL_5:
  }
}

void sub_1003D1DFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v7 count] || objc_msgSend(v8, "count"))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, 1LL);
    }
    goto LABEL_5;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (!v13) {
      goto LABEL_12;
    }
    int v18 = 138412290;
    id v19 = v9;
    id v14 = "Error checking credential eligibility:  %@";
    id v15 = v12;
    uint32_t v16 = 12;
  }

  else
  {
    if (!v13) {
      goto LABEL_12;
    }
    LOWORD(v1_Block_object_dispose((const void *)(v1 - 128), 8) = 0;
    id v14 = "Unknown error checking credential eligibility, or 0 credentials eligible";
    id v15 = v12;
    uint32_t v16 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v18, v16);
LABEL_12:

  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    (*(void (**)(uint64_t, void))(v17 + 16))(v17, 0LL);
  }
LABEL_5:
}

void sub_1003D2014(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    unsigned __int8 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PAN Issuance: Notifying user of implicit VPAN upgrade",  v10,  2u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localizedDescription]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    id v7 = -[PDVirtualCardVPANImplicitUpgradeUserNotification initWithCardName:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDVirtualCardVPANImplicitUpgradeUserNotification),  "initWithCardName:passUniqueIdentifier:",  v5,  v6);
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v7];
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, 1LL, 0LL);
    }
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, 0LL, 0LL);
    }
  }

uint64_t sub_1003D21F0(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) _handlePossibleVPANIssued:*(void *)(a1 + 40) fromPreviousApplications:*(void *)(a1 + 48)];
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  return result;
}

void sub_1003D26C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) sharedWebService]);
  uint64_t v2 = PKVirtualCardEnabledWithWebService();
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v1, v2);
}

uint64_t sub_1003D2B34(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 applicationIdentifier]);
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    if (v4) {
      BOOL v7 = v5 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

uint64_t sub_1003D2BBC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 applicationIdentifier]);
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    if (v4) {
      BOOL v7 = v5 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

void sub_1003D4440(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003D46C0(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setTransactionSpendLimitEnabled:]( v4,  "setTransactionSpendLimitEnabled:",  [a3 BOOLValue]);
}

void sub_1003D4704(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountUserPreferences setTransactionSpendLimitAmount:](v4, "setTransactionSpendLimitAmount:", v6);
}

void sub_1003D4754(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setMonthlySpendLimitEnabled:]( v4,  "setMonthlySpendLimitEnabled:",  [a3 BOOLValue]);
}

void sub_1003D4798(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountUserPreferences setMonthlySpendLimitAmount:](v4, "setMonthlySpendLimitAmount:", v6);
}

void sub_1003D47E8(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setSpendingEnabled:](v4, "setSpendingEnabled:", [a3 BOOLValue]);
}

void sub_1003D482C(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setShowAvailableCredit:](v4, "setShowAvailableCredit:", [a3 BOOLValue]);
}

void sub_1003D4A7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1003D4A94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003D4AA4(uint64_t a1)
{
}

BOOL sub_1003D4AAC(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithAccessory:*(void *)(a1 + 32) forBaseAccessory:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_1003D4C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "setSpinnerEnabled:", objc_msgSend(*(id *)(a4 + 8), "BOOLValue"));
  *a6 = 1;
  return result;
}

void sub_1003D5850(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKAccountHistoricalBalance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003D5AF0(id a1, PKAccountHistoricalBalance *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountHistoricalBalance setBalance:](v4, "setBalance:", v6);
}

void sub_1003D5B40(id a1, PKAccountHistoricalBalance *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountHistoricalBalance setDate:](v4, "setDate:", v5);
}

void sub_1003D5B8C(id a1, PKAccountHistoricalBalance *a2, id a3)
{
  id v4 = a2;
  -[PKAccountHistoricalBalance setType:](v4, "setType:", [a3 unsignedIntegerValue]);
}

void sub_1003D7148(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  id v6 = *a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v6 == v7) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = *a4;
  }
  id v9 = v8;

  objc_msgSend(*(id *)(a1 + 32), "pk_safelyAddObject:", v9);
}

void sub_1003D7880(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentRecurringPayment);
  uint64_t v68 = a1;
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];
  id v8 = [v6 indexOfObject:@"i"];
  id v9 = *(void **)(a4 + 8LL * (void)v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v9 == v10) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = *(void **)(a4 + 8LL * (void)v8);
  }
  unint64_t v12 = v11;

  id v13 = [v6 indexOfObject:@"j"];
  id v14 = *(void **)(a4 + 8LL * (void)v13);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v14 == v15) {
    uint32_t v16 = 0LL;
  }
  else {
    uint32_t v16 = *(void **)(a4 + 8LL * (void)v13);
  }
  unint64_t v72 = v16;

  id v17 = [v6 indexOfObject:@"v"];
  int v18 = *(void **)(a4 + 8LL * (void)v17);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v18 == v19) {
    __int128 v20 = 0LL;
  }
  else {
    __int128 v20 = *(void **)(a4 + 8LL * (void)v17);
  }
  unint64_t v71 = v20;

  id v21 = [v6 indexOfObject:@"k"];
  uint64_t v22 = *(void **)(a4 + 8LL * (void)v21);
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v22 == v23) {
    id v24 = 0LL;
  }
  else {
    id v24 = *(void **)(a4 + 8LL * (void)v21);
  }
  id v69 = v24;

  id v25 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"l")), "integerValue");
  id v26 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"m")), "integerValue");
  id v27 = [v6 indexOfObject:@"n"];
  int v28 = *(void **)(a4 + 8LL * (void)v27);
  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v28 == v29) {
    id v30 = 0LL;
  }
  else {
    id v30 = *(void **)(a4 + 8LL * (void)v27);
  }
  id v31 = v30;

  if (v12 | v71 | v72 && v69 && v31)
  {
    __int128 v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v12,  PKPeerPaymentRecurringPaymentFundingSourceDPANIdentifierKey);
    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v72,  PKPeerPaymentRecurringPaymentFundingSourceFPANIdentifierKey);
    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v71,  PKPeerPaymentRecurringPaymentFundingSourceMPANIdentifierKey);
    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v69,  PKPeerPaymentRecurringPaymentFundingSourceNameKey);
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v25));
    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v33,  PKPeerPaymentRecurringPaymentFundingSourceTypeKey);

    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v26));
    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v34,  PKPeerPaymentRecurringPaymentFundingSourceNetworkKey);

    -[NSMutableDictionary safelySetObject:forKey:]( v32,  "safelySetObject:forKey:",  v31,  PKPeerPaymentRecurringPaymentFundingSourceSuffixKey);
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[PKPeerPaymentRecurringPaymentFundingSource fundingSourceWithDictionary:]( &OBJC_CLASS___PKPeerPaymentRecurringPaymentFundingSource,  "fundingSourceWithDictionary:",  v32));
    -[PKPeerPaymentRecurringPayment setFundingSource:](v7, "setFundingSource:", v35);
  }

  id v36 = [v6 indexOfObject:@"w"];
  __int128 v37 = *(void **)(a4 + 8LL * (void)v36);
  __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v37 == v38) {
    id v39 = 0LL;
  }
  else {
    id v39 = *(void **)(a4 + 8LL * (void)v36);
  }
  id v70 = v39;

  id v40 = [v6 indexOfObject:@"y"];
  __int128 v41 = *(void **)(a4 + 8LL * (void)v36);
  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v41 == v42) {
    id v43 = 0LL;
  }
  else {
    id v43 = *(void **)(a4 + 8LL * (void)v40);
  }
  id v44 = v43;

  id v45 = [v6 indexOfObject:@"x"];
  uint64_t v46 = *(void **)(a4 + 8LL * (void)v36);
  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v46 == v47) {
    uint64_t v48 = 0LL;
  }
  else {
    uint64_t v48 = *(void **)(a4 + 8LL * (void)v45);
  }
  id v67 = v31;
  id v49 = v48;

  if (v70 || v44 || v49)
  {
    id v50 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentRecurringPaymentMemo);
    PKSemanticColorFromString(v44, &v73);
    [v50 setColor:v73];
    [v50 setText:v70];
    [v50 setEmoji:v49];
    -[PKPeerPaymentRecurringPayment setMemo:](v7, "setMemo:", v50);
  }

  id v65 = v44;
  uint64_t v51 = (void *)v12;
  id v52 = objc_msgSend(v6, "indexOfObject:", @"aa", v65);
  id v53 = *(void **)(a4 + 8LL * (void)v52);
  id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  __int128 v55 = v7;
  if (v53 == v54) {
    __int128 v56 = 0LL;
  }
  else {
    __int128 v56 = *(void **)(a4 + 8LL * (void)v52);
  }
  id v57 = v56;

  id v58 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"ab")), "integerValue");
  id v59 = [v6 indexOfObject:@"ac"];
  __int128 v60 = *(void **)(a4 + 8LL * (void)v59);
  __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v60 == v61) {
    __int128 v62 = 0LL;
  }
  else {
    __int128 v62 = (void *)_DateForSQLValue(*(void *)(a4 + 8LL * (void)v59));
  }

  id v63 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"ad")), "integerValue");
  if (v57 || v58 || v62)
  {
    id v64 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentRecurringPaymentTransaction);
    [v64 setIdentifier:v57];
    [v64 setStatus:v58];
    [v64 setExecutionDate:v62];
    [v64 setErrorCode:v63];
    -[PKPeerPaymentRecurringPayment setLastExecutedTransaction:](v55, "setLastExecutedTransaction:", v64);
  }

  [*(id *)(v68 + 40) addObject:v55];
}

void sub_1003D8154(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_1003D815C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003D81A0(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_1003D81A8(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_1003D81B0(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_1003D81B8(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setSentByMe:](v4, "setSentByMe:", [a3 BOOLValue]);
}

void sub_1003D81FC(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentRecurringPayment setAmount:](v4, "setAmount:", v6);
}

void sub_1003D824C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentRecurringPayment setThreshold:](v4, "setThreshold:", v6);
}

void sub_1003D829C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_1003D82A4(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setFrequency:](v4, "setFrequency:", [a3 integerValue]);
}

void sub_1003D82E8(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentRecurringPayment setStartDate:](v4, "setStartDate:", v5);
}

void sub_1003D8334(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1003D8378(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setActions:](v4, "setActions:", [a3 integerValue]);
}

void sub_1003D83BC(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  v11[1] = objc_opt_class(&OBJC_CLASS___NSDate, v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKPeerPaymentRecurringPayment setUpcomingPaymentDates:](v5, "setUpcomingPaymentDates:", v10);
}

void sub_1003D84C8(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setUsesAppleCashBalance:]( v4,  "setUsesAppleCashBalance:",  [a3 BOOLValue]);
}

void sub_1003D850C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentRecurringPayment setCreatedDate:](v4, "setCreatedDate:", v5);
}

void sub_1003D89AC(id a1, PKFeatureApplicationDeclineDetails *a2, id a3)
{
}

void sub_1003D8A90(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003D8E34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1003D8E4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003D8E5C(uint64_t a1)
{
}

uint64_t sub_1003D8E64(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
  if (!v2)
  {
    uint64_t v3 = 0LL;
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) icon]);
    if (v5)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[TileImage insertImage:inDatabase:]( &OBJC_CLASS___TileImage,  "insertImage:inDatabase:",  v5,  *(void *)(a1 + 40)));
      if (!v6)
      {
        uint64_t v4 = 0LL;
LABEL_27:

        goto LABEL_28;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    if (*(_BYTE *)(a1 + 64))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) actionState]);
      if (v7)
      {
        uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _insertState:v7 inDatabase:*(void *)(a1 + 40) root:0]);
        if (!v8)
        {
          uint64_t v4 = 0LL;
LABEL_26:

          goto LABEL_27;
        }

        id v9 = (void *)v8;
LABEL_15:
        id v10 = [objc_alloc(*(Class *)(a1 + 56)) initWithState:*(void *)(a1 + 32) metadata:v3 icon:v6 actionState:v9 inDatabase:*(void *)(a1 + 40)];
        if (v10)
        {
          uint64_t v4 = 0LL;
          switch((unint64_t)[*(id *)(a1 + 32) type])
          {
            case 0uLL:
              uint64_t v11 = &OBJC_CLASS___TileStateDefault;
              uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateTypeDefault]);
              goto LABEL_23;
            case 1uLL:
              uint64_t v11 = &OBJC_CLASS___TileStateDefaultV2;
              uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateTypeDefaultV2]);
              goto LABEL_23;
            case 2uLL:
              uint64_t v11 = &OBJC_CLASS___TileStateCheckIn;
              uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateTypeCheckIn]);
              goto LABEL_23;
            case 3uLL:
              uint64_t v11 = &OBJC_CLASS___TileStateGroup;
              uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateTypeGroup]);
LABEL_23:
              id v13 = (void *)v12;
              uint64_t v4 = objc_claimAutoreleasedReturnValue( -[__objc2_class insertState:forBaseState:inDatabase:]( v11,  "insertState:forBaseState:inDatabase:",  v12,  v10,  *(void *)(a1 + 40)));

              if (v4) {
                goto LABEL_24;
              }
              break;
            case 4uLL:
              break;
            default:
LABEL_24:
              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v10);
              uint64_t v4 = 1LL;
              break;
          }
        }

        else
        {
          uint64_t v4 = 0LL;
        }

        goto LABEL_26;
      }
    }

    else
    {
      id v7 = 0LL;
    }

    id v9 = 0LL;
    goto LABEL_15;
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileStateMetadata insertMetadata:inDatabase:]( &OBJC_CLASS___TileStateMetadata,  "insertMetadata:inDatabase:",  v2,  *(void *)(a1 + 40)));
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v4 = 0LL;
LABEL_28:

  return v4;
}

void sub_1003D93A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1003D93C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = *(id *)(a4 + 8LL * *(void *)(a1 + 56));
  if (v8)
  {
    id v9 = *(void **)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    __int128 v12 = *(_OWORD *)(a1 + 88);
    v18[0] = *(_OWORD *)(a1 + 72);
    v18[1] = v12;
    id v13 = [v9 _createStateForPID:a2 withProperties:a3 values:a4 propertySetters:v10 indices:v18 inDatabase:v11];
    id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    if (!v14)
    {
      id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
      id v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    }

    [v14 setObject:v13 forKeyedSubscript:v8];
  }
}

void sub_1003D95B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1003D95C8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = [v5 persistentID];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
  __int128 v10 = *(_OWORD *)(a1 + 72);
  v14[0] = *(_OWORD *)(a1 + 56);
  v14[1] = v10;
  id v11 = +[TileState _createStateForPID:withProperties:values:propertySetters:indices:inDatabase:]( &OBJC_CLASS___TileState,  "_createStateForPID:withProperties:values:propertySetters:indices:inDatabase:",  v7,  v6,  a3,  v8,  v14,  v9);

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1003D9A88(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassTileState setEnabled:](v4, "setEnabled:", [a3 BOOLValue]);
}

void sub_1003D9ACC(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassTileState setSelected:](v4, "setSelected:", [a3 BOOLValue]);
}

void sub_1003D9B10(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  if (a3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  0LL));
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    {
      uint64_t v9 = v5;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
      -[PKPassTileState setActionDictionaries:](v4, "setActionDictionaries:", v8);
    }
  }
}

void sub_1003D9BE8(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  if (a3)
  {
    uint64_t v8 = v4;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  0LL));
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSArray, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0
      && (objc_msgSend(v5, "pk_containsObjectPassingTest:", &stru_10065C6F8) & 1) == 0)
    {
      -[PKPassTileState setActionDictionaries:](v8, "setActionDictionaries:", v5);
    }

    uint64_t v4 = v8;
  }
}

BOOL sub_1003D9C7C(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  return (isKindOfClass & 1) == 0;
}

void sub_1003DA104(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountBillPaymentSelectedSuggestedAmountData),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( -[AccountBillPaymentSelectedSuggestedAmountData billPaymentSelectedSuggestedAmountData]( v5,  "billPaymentSelectedSuggestedAmountData"));
  [v3 addObject:v4];
}

id sub_1003DA3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountBillPaymentSelectedSuggestedAmountData,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1003DA578(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
}

void sub_1003DA580(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKBillPaymentSelectedSuggestedAmountData setTransactionDate:](v4, "setTransactionDate:", v5);
}

void sub_1003DA5CC(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKBillPaymentSelectedSuggestedAmountData setTransactionAmount:](v4, "setTransactionAmount:", v6);
}

void sub_1003DA61C(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKBillPaymentSelectedSuggestedAmountData setSuggestedAmountCategory:]( v4,  "setSuggestedAmountCategory:",  [a3 integerValue]);
}

void sub_1003DABF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PKLocation);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));

  if (*(void *)(a4 + 8LL * *(void *)(a1 + 56))) {
    objc_msgSend(*(id *)(a1 + 40), "insertLocation:forUniqueID:", v7);
  }
}

void sub_1003DAD50(id a1, PKLocation *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKLocation setLatitude:](v4, "setLatitude:");
}

void sub_1003DAD90(id a1, PKLocation *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKLocation setLongitude:](v4, "setLongitude:");
}

void sub_1003DADD0(id a1, PKLocation *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKLocation setMaxDistance:](v4, "setMaxDistance:");
}

void sub_1003DAE10(id a1, PKLocation *a2, id a3)
{
  if (a3)
  {
    uint64_t v4 = a2;
    [a3 doubleValue];
    -[PKLocation setAltitude:](v4, "setAltitude:");
  }

void sub_1003DAE58(id a1, PKLocation *a2, id a3)
{
}

void sub_1003DAE60(id a1, PKLocation *a2, id a3)
{
}

void sub_1003DB914(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  __int128 v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionQuestion);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  id v7 = [v6 count];

  id v8 = *(id *)(a4 + 8LL * (void)v7 - 8);
  uint64_t v9 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
  if (!v9)
  {
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    [*(id *)(a1 + 40) setObject:v9 forKey:v8];
  }

  -[NSMutableSet addObject:](v9, "addObject:", v10);
}

void sub_1003DBB3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionQuestion);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003DBD70(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransactionQuestion setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003DBDB4(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransactionQuestion setAnswered:](v4, "setAnswered:", [a3 BOOLValue]);
}

void sub_1003DBDF8(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransactionQuestion setAnsweredOnThisDevice:]( v4,  "setAnsweredOnThisDevice:",  [a3 BOOLValue]);
}

void sub_1003DBE3C(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransactionQuestion setExpirationDate:](v4, "setExpirationDate:", v5);
}

id sub_1003DC4E8(id a1, PKPassSharedEntitlement *a2)
{
  return -[PKPassSharedEntitlement dictionaryRepresentation](a2, "dictionaryRepresentation");
}

void sub_1003DCF88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKAccountEntityOrdering);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003DD720(id a1, PKAccountEntityOrdering *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountEntityOrdering setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003DD764(id a1, PKAccountEntityOrdering *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountEntityOrdering setContext:](v4, "setContext:", [a3 integerValue]);
}

void sub_1003DD7A8(id a1, PKAccountEntityOrdering *a2, id a3)
{
}

void sub_1003DD88C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003DDFDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003DE1AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKAppleBalanceAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1003DE494(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1003DE49C(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAppleBalanceAccountFeatureDescriptor setMinimumAmount:](v4, "setMinimumAmount:", v6);
}

void sub_1003DE4EC(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAppleBalanceAccountFeatureDescriptor setMaximumAmount:](v4, "setMaximumAmount:", v6);
}

void sub_1003DE53C(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKAppleBalanceAccountFeatureDescriptor setSupportedNetworks:](v4, "setSupportedNetworks:", v5);
}

void sub_1003DE594(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1003DE59C(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAppleBalanceAccountFeatureDescriptor setMerchantCapabilities:]( v4,  "setMerchantCapabilities:",  [a3 unsignedIntegerValue]);
}

CFStringRef sub_1003DE65C(uint64_t a1)
{
  else {
    return off_10065CB00[a1 - 1];
  }
}

void sub_1003E39C4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003E3A3C;
  v5[3] = &unk_10065C1E0;
  id v4 = v2;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_1003E3A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 primaryRegion]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 paymentOffersServiceURL]);

  if (v6)
  {
LABEL_14:
    id v17 = objc_alloc_init(&OBJC_CLASS___PKPaymentOfferWebServiceCatalogRequest);
    [v17 setBaseURL:v6];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1003E3CE8;
    v19[3] = &unk_10065CB80;
    id v18 = *(id *)(a1 + 40);
    void v19[4] = *(void *)(a1 + 32);
    id v20 = v18;
    [v3 paymentOfferCatalogWithRequest:v17 completion:v19];
  }

  else
  {
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 regions]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allValues]);

    id v9 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v22;
      while (2)
      {
        uint64_t v12 = 0LL;
        do
        {
          if (*(void *)v22 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v21 + 1) + 8 * (void)v12) paymentOffersServiceURL]);
          if (v13)
          {
            id v6 = (void *)v13;

            goto LABEL_14;
          }

          uint64_t v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      int v28 = @"Error no payment offers service URL";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v16 = *(void *)(a1 + 40);
    NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
    id v26 = @"Error no payment offers service URL";
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPaymentErrorDomain,  -9001LL,  v6));
    (*(void (**)(uint64_t, void, id))(v16 + 16))(v16, 0LL, v17);
  }
}

void sub_1003E3CE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error getting payment offer catalog: %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(dispatch_queue_s **)(v9 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003E3E34;
    block[3] = &unk_100639AF0;
    void block[4] = v9;
    id v12 = v5;
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v10, block);
  }
}

void sub_1003E3E34(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentOfferCatalog]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) catalog]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v3 setLastUpdated:v4];

  [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePaymentOfferCatalog:v3];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentOfferCatalog]);

  if ((PKEqualObjects(v2, v5) & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      uint64_t v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Payment Offer Catalog has changed: %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1003E4020(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) issuerInstallmentTransactionsForPassUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003E40C8;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1003E40C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003E41B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) issuerInstallmentTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) paymentHashes:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003E425C;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1003E425C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003E431C(uint64_t a1)
{
  id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003E43A0;
  block[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_1003E43A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1003E4774(uint64_t a1)
{
  return [*(id *)(a1 + 32) _executeNextPaymentOffersManagerFetchIfPossibleForRequestIdentifier:*(void *)(a1 + 40)];
}

void sub_1003E493C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003E49AC;
  block[3] = &unk_10063A830;
  id v4 = v1;
  dispatch_async(v2, block);
}

uint64_t sub_1003E49AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003E49C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1003E4D2C(id a1, PKPaymentOfferCatalog *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Updating payment offer catalog following push",  v5,  2u);
  }
}

void sub_1003E4F04(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1003E5390(id a1, PKPaymentOfferCatalog *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    __int128 v7 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPaymentOffersManager updating catalog after a pass change with error %@",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_1003E5640(id a1, PKPaymentOfferCatalog *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed updating payment offers following scheduled task",  v5,  2u);
  }
}

void sub_1003E56A8(id a1, NSArray *a2, NSError *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  if (v5 || !-[NSArray count](v4, "count"))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      __int128 v8 = "Failed updating payment rewards balance following scheduled task";
      __int128 v9 = (uint8_t *)&v12;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(6LL);
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v11 = 0;
      __int128 v8 = "Completed updating payment rewards balance following scheduled task";
      __int128 v9 = (uint8_t *)&v11;
      goto LABEL_7;
    }
  }
}

void sub_1003E577C(id a1, NSArray *a2, NSError *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  if (v5 || !-[NSArray count](v4, "count"))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      __int128 v8 = "Failed updating payment rewards redemptions following scheduled task";
      __int128 v9 = (uint8_t *)&v12;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(6LL);
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v11 = 0;
      __int128 v8 = "Completed updating payment rewards redemptions following scheduled task";
      __int128 v9 = (uint8_t *)&v11;
      goto LABEL_7;
    }
  }
}

id sub_1003E58A8(uint64_t a1)
{
  if (PDScheduledActivityExists( @"PaymentOffersClientIdentifier",  @"PaymentOffersFetchCatalog"))
  {
    PDScheduledActivityRemove(@"PaymentOffersClientIdentifier", @"PaymentOffersFetchCatalog");
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v9 = @"PaymentOffersFetchCatalog";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDPaymentOffersManager removing scheduled activity %@",  buf,  0xCu);
    }
  }

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003E59C4;
  v7[3] = &unk_10064C5A0;
  void v7[4] = v4;
  return [v5 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_1003E59C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003E5A44;
  block[3] = &unk_100639300;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1003E5A44(uint64_t a1)
{
  if (PKPaymentOffersEligibleToFetchCatalog(*(void *)(a1 + 32)))
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeInterval:sinceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeInterval:sinceDate:",  v1,  120.0));

    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v2));
    [v3 setRepeating:0];
    [v3 setRequireNetworkConnectivity:1];
    [v3 setRequireScreenSleep:0];
    [v3 setRequireMainsPower:0];
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412546;
      id v7 = @"PaymentOffersFetchCatalog";
      __int16 v8 = 2112;
      __int128 v9 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPaymentOffersManager scheduling activity %@ for startDate %@",  (uint8_t *)&v6,  0x16u);
    }

    PDScheduledActivityRegister(@"PaymentOffersClientIdentifier", @"PaymentOffersFetchCatalog", v3);
  }

void sub_1003E5C24(uint64_t a1)
{
  if (PDScheduledActivityExists( @"PaymentOffersClientIdentifier",  @"PaymentOffersFetchRewardsBalance"))
  {
    PDScheduledActivityRemove(@"PaymentOffersClientIdentifier", @"PaymentOffersFetchRewardsBalance");
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v10 = @"PaymentOffersFetchRewardsBalance";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDPaymentOffersManager removing scheduled activity %@",  buf,  0xCu);
    }
  }

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  int v6 = *(void **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003E5D54;
  v7[3] = &unk_10063A700;
  void v7[4] = v4;
  id v8 = v5;
  [v6 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_1003E5D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003E5DE8;
  v7[3] = &unk_1006392B0;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1003E5DE8(uint64_t a1)
{
  if (PKPaymentOffersEligibleToFetchCatalog(*(void *)(a1 + 32)))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeInterval:sinceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeInterval:sinceDate:",  v2,  30.0));

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v3));
    [v4 setRepeating:0];
    [v4 setRequireNetworkConnectivity:1];
    [v4 setRequireScreenSleep:0];
    [v4 setRequireMainsPower:0];
    [v4 setReason:*(void *)(a1 + 40)];
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412546;
      id v8 = @"PaymentOffersFetchRewardsBalance";
      __int16 v9 = 2112;
      uint64_t v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDPaymentOffersManager scheduling activity %@ for startDate %@",  (uint8_t *)&v7,  0x16u);
    }

    PDScheduledActivityRegister(@"PaymentOffersClientIdentifier", @"PaymentOffersFetchRewardsBalance", v4);
  }

id sub_1003E5FB0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Payment Web Service context changed in PDPaymentOffersManager",  v5,  2u);
  }

  return [*(id *)(a1 + 32) _updatePushTopics];
}

void sub_1003E6174(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) paymentRewardsRedemptionsForPassUniqueIdentifier:*(void *)(a1 + 40) paymentHashes:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003E6220;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1003E6220(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003E6538(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(48LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003E6650;
  v9[3] = &unk_1006396B0;
  id v10 = v3;
  id v11 = v6;
  id v8 = v3;
  dispatch_async(v7, v9);
}

void sub_1003E6650(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  uint64_t v6 = v1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPaymentErrorDomain,  -9001LL,  v3));
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0LL, v4);
}

void sub_1003E6724(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1003E6800;
  v6[3] = &unk_10065CCE0;
  id v7 = v2;
  id v12 = *(id *)(a1 + 72);
  id v8 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v9 = v4;
  uint64_t v10 = v5;
  id v11 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 80);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_1003E6800(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 regionForIdentifier:v5]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 paymentOffersServiceURL]);

  if (v7)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___PKPaymentOfferWebServiceRewardsBalancesRequest);
    [v8 setBaseURL:v7];
    [v8 setFpanIdentifier:*(void *)(a1 + 40)];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
    [v8 setCriteriaIdentifier:v9];

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1003E6958;
    v11[3] = &unk_10065CCB8;
    uint64_t v10 = *(void **)(a1 + 64);
    void v11[4] = *(void *)(a1 + 56);
    id v12 = v10;
    id v13 = *(id *)(a1 + 80);
    [v3 paymentRewardsBalancesWithRequest:v8 completion:v11];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_1003E6958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 code];
    uint64_t Object = PKLogFacilityTypeGetObject(48LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v8 == (id)40030)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v27 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Payment Rewards opted-out, %@", buf, 0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 24) deletePaymentRewardsBalancesForPassUniqueIdentifier:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(a1 + 32) + 24) deletePaymentRewardsRedemptionsForPassUniqueIdentifier:*(void *)(a1 + 40)];
    }

    else
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v27 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Error getting payment rewards balance: %@",  buf,  0xCu);
      }
    }

    id v18 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003E6B80;
    block[3] = &unk_1006396B0;
    id v13 = &v25;
    id v25 = *(id *)(a1 + 48);
    id v24 = v7;
    dispatch_async(v18, block);
    id v17 = v24;
  }

  else
  {
    id v12 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1003E6B94;
    v19[3] = &unk_10063B440;
    id v13 = (id *)v20;
    id v14 = v5;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(a1 + 40);
    v20[0] = v14;
    v20[1] = v15;
    id v21 = v16;
    id v22 = *(id *)(a1 + 48);
    dispatch_async(v12, v19);

    id v17 = v21;
  }
}

uint64_t sub_1003E6B80(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_1003E6B94(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rewardsBalances]);
  [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdatePaymentRewardsBalances:v2 withPassUniqueIdentifier:*(void *)(a1 + 48)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1003E6EFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(48LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003E7014;
  v9[3] = &unk_1006396B0;
  id v10 = v3;
  id v11 = v6;
  id v8 = v3;
  dispatch_async(v7, v9);
}

void sub_1003E7014(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  uint64_t v6 = v1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPaymentErrorDomain,  -9001LL,  v3));
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0LL, v4);
}

void sub_1003E70E8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(48LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating Payment Rewards Redemptions", buf, 2u);
  }

  id v4 = *(void **)(a1 + 40);
  NSErrorUserInfoKey v5 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1003E7214;
  v11[3] = &unk_10065CD58;
  id v12 = v4;
  id v6 = *(id *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 32);
  id v17 = v6;
  uint64_t v13 = v7;
  id v14 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v10 = *(void **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  id v15 = v8;
  uint64_t v19 = v9;
  id v18 = v10;
  id v16 = *(id *)(a1 + 64);
  [v5 performHandlerOnSharedWebServiceQueue:v11];
}

void sub_1003E7214(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  NSErrorUserInfoKey v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 regionForIdentifier:v5]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 paymentOffersServiceURL]);

  if (v7)
  {
    uint64_t v24 = 0LL;
    id v25 = &v24;
    uint64_t v26 = 0x3032000000LL;
    id v27 = sub_1003E7474;
    int v28 = sub_1003E7484;
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    id v29 = (id)objc_claimAutoreleasedReturnValue([v8 _endpointMetadataForPassUniqueID:v9 type:2]);

    id v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentOfferWebServiceRewardsRedemptionsRequest);
    [v10 setBaseURL:v7];
    [v10 setFpanIdentifier:*(void *)(a1 + 48)];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) identifier]);
    [v10 setCriteriaIdentifier:v11];

    if (([(id)v25[5] isDirty] & 1) == 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([(id)v25[5] lastUpdated]);
      [v10 setLastUpdated:v12];
    }

    if (*(uint64_t *)(a1 + 88) >= 1)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
      [v10 setLimit:v13];
    }

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    _OWORD v18[2] = sub_1003E748C;
    void v18[3] = &unk_10065CD30;
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = *(void **)(a1 + 48);
    id v22 = &v24;
    void v18[4] = v14;
    id v19 = v15;
    id v21 = *(id *)(a1 + 80);
    id v16 = *(id *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 88);
    id v20 = v16;
    uint64_t v23 = v17;
    [v3 paymentRewardsRedemptionsWithRequest:v10 completion:v18];

    _Block_object_dispose(&v24, 8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_1003E745C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1003E7474(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003E7484(uint64_t a1)
{
}

void sub_1003E748C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (v6)
  {
    [v7 setDirty:1];
    uint64_t v8 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePassEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t Object = PKLogFacilityTypeGetObject(48LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v46 = v13;
      __int16 v47 = 2112;
      id v48 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Error getting payment rewards redemptions for fpanIdentifier: %@, error: %@",  buf,  0x16u);
    }

    uint64_t v14 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003E7834;
    block[3] = &unk_1006396B0;
    id v43 = *(id *)(a1 + 56);
    id v42 = v6;
    dispatch_async(v14, block);

    id v15 = v43;
  }

  else
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v7 lastUpdated]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 lastUpdated]);
    unsigned int v18 = [v16 isEqualToDate:v17];

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setDirty:0];
    id v19 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 lastUpdated]);
    [v19 setLastUpdated:v20];

    uint64_t v21 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePassEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)]);
    uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 rewardsRedemptions]);
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    id v24 = [v15 countByEnumeratingWithState:&v37 objects:v44 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v38;
      do
      {
        for (unint64_t i = 0LL; i != v25; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v38 != v26) {
            objc_enumerationMutation(v15);
          }
          [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePaymentRewardsRedemption:*(void *)(*((void *)&v37 + 1) + 8 * (void)i) withPassUniqueIdentifier:*(void *)(a1 + 48)];
        }

        id v25 = [v15 countByEnumeratingWithState:&v37 objects:v44 count:16];
      }

      while (v25);
    }

    if ([v15 count]) {
      PKSharedCacheSetBoolForKey(1LL, PKSharedCacheHasEverMadePayWithRewardsTransaction);
    }
    unsigned int v28 = [v5 moreComing] ^ 1 | v18;
    id v29 = *(id **)(a1 + 32);
    if ((v28 & 1) != 0)
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue( [v29[3] paymentRewardsRedemptionsForPassUniqueIdentifier:*(void *)(a1 + 48) limit:*(void *)(a1 + 72)]);
      id v31 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      void v34[2] = sub_1003E7848;
      v34[3] = &unk_1006396B0;
      id v32 = *(id *)(a1 + 56);
      id v35 = v30;
      id v36 = v32;
      id v33 = v30;
      dispatch_async(v31, v34);
    }

    else
    {
      [v29 updatePaymentRewardsRedemptionsWithPassUniqueIdentifier:*(void *)(a1 + 48) limit:*(void *)(a1 + 72) completion:*(void *)(a1 + 56)];
    }
  }
}

uint64_t sub_1003E7834(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

uint64_t sub_1003E7848(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1003E82E4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003E863C(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v7 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_arrayByApplyingBlock:", &stru_10065CDE0));

  if ([v5 count])
  {
    uint64_t v6 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v5);
    -[PKAccountFetchPeriods setBlockedEndpoints:](v7, "setBlockedEndpoints:", v6);
  }
}

id sub_1003E86D4(id a1, NSString *a2)
{
  return +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NSString integerValue](a2, "integerValue"));
}

void sub_1003E8704(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setAccountFetchPeriod:]( v4,  "setAccountFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E8748(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setExtendedAccountFetchPeriod:]( v4,  "setExtendedAccountFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E878C(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setUsersFetchPeriod:]( v4,  "setUsersFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E87D0(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setSharedCloudStoreModelFetchPeriod:]( v4,  "setSharedCloudStoreModelFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E8814(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setFinancingPlansFetchPeriod:]( v4,  "setFinancingPlansFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E8858(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setFundingSourcesFetchPeriod:]( v4,  "setFundingSourcesFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E889C(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setRecoveryPaymentPlansFetchPeriod:]( v4,  "setRecoveryPaymentPlansFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_1003E88E0(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setPhysicalCardsFetchPeriod:]( v4,  "setPhysicalCardsFetchPeriod:",  (double)(uint64_t)[a3 integerValue]);
}

CFStringRef PDCloudStoreZoneActionToString(unint64_t a1)
{
  if (a1 > 3) {
    return @"fetch";
  }
  else {
    return *(&off_10065D078 + a1);
  }
}

void sub_1003E96C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003E96E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003E96F0(uint64_t a1)
{
}

void sub_1003E96F8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
  id v12 = v7;
  id v10 = v9;
  if (v10 == v12)
  {
  }

  else
  {
    if (!v12 || !v10)
    {

      goto LABEL_9;
    }

    unsigned int v11 = [v12 isEqualToString:v10];

    if (!v11) {
      goto LABEL_9;
    }
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  *a4 = 1;
LABEL_9:
}

void sub_1003E99D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1003E99F0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7 = a3;
  id v8 = *(void **)(a1 + 32);
  id v15 = v7;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneSubscriptionIdentifier]);
  id v10 = v8;
  id v11 = v9;
  if (v10 == v11)
  {

LABEL_10:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
    goto LABEL_11;
  }

  id v12 = v11;
  if (v10) {
    BOOL v13 = v11 == 0LL;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
  }

  else
  {
    unsigned int v14 = [v10 isEqualToString:v11];

    if (v14) {
      goto LABEL_10;
    }
  }

void sub_1003EAA18(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 zoneSubscription]);
  if (v4)
  {
    uint64_t v5 = v4;
    [*(id *)(a1 + 32) addObject:v4];
    id v4 = v5;
  }
}

void sub_1003EB420(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 cloudStoreZonesForItem:*(void *)(a1 + 32) action:*(void *)(a1 + 48)]);
  if ([v5 count]) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

void sub_1003EB530(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 cloudStoreZonesForItemType:*(void *)(a1 + 40) action:*(void *)(a1 + 48)]);
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_1003EB658(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [a3 cloudStoreZonesForItemType:*(void *)(a1 + 48) configuration:*(void *)(a1 + 32) action:*(void *)(a1 + 56)]);
  if ([v5 count]) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

void sub_1003EB8FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003EB914(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) cloudStoreZoneForZoneName:*(void *)(a1 + 40) inContainerDatabase:a3]);
  if (v6)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_1003EBA94(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 zonesThatNeedToBeCreated]);
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_1003EBB88(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 subscriptionsThatNeedsToBeCreated]);
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_1003EBC7C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 allPossibleZoneIDs]);
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_1003EBD70(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 allPossibleSubscriptionIdentifiers]);
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_1003EBE78(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 databaseForIdentifier:v9]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 subscriptionsForZones:v6]);

  if ([v8 count]) {
    [*(id *)(a1 + 40) setObject:v8 forKey:v9];
  }
}

void sub_1003EBFB4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 databaseForIdentifier:v9]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 subscriptionIdentifiersForZoneIDs:v6]);

  if ([v8 count]) {
    [*(id *)(a1 + 40) setObject:v8 forKey:v9];
  }
}

void sub_1003EC4F8(id a1, NSString *a2, PDCloudStoreContainerDatabase *a3, BOOL *a4)
{
}

id sub_1003EC57C(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 clearCacheForZoneName:*(void *)(a1 + 32)];
}

void sub_1003EC59C(id a1, NSString *a2, PDCloudStoreContainerDatabase *a3, BOOL *a4)
{
}

uint64_t sub_1003EE5BC(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 queryDescriptor]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 predicate]);

  uint64_t v3 = sub_1003EF134(v2);
  return v3;
}

void sub_1003EE604(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v21 = a3;
  id v6 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionRewardsItem);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v6 withProperties:v21 values:a4];
  uint64_t v7 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a4
                                                          + 8LL
                                                          * (void)[v21 indexOfObject:@"e"]));
  id v8 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = (NSString *)*(id *)(a4 + 8 * (void)[v21 indexOfObject:@"f"]);
  if (v8)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v11 = -[NSDecimalNumber isEqualToNumber:](v8, "isEqualToNumber:", v10);

    if ((v11 & 1) == 0)
    {
      if (v9)
      {
        uint64_t v12 = PKCurrencyAmountCreate(v8, v9, 0LL);
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        -[PKPaymentTransactionRewardsItem setCurrencyAmount:](v6, "setCurrencyAmount:", v13);
      }
    }
  }

  id v14 = -[PKPaymentTransactionRewardsItem state](v6, "state");
  id v15 = *(id *)(a4 + 8 * (void)[v21 count] - 8);
  if (v14 == (id)4)
  {
    unsigned int v18 = *(void **)(a1 + 40);
    uint64_t v17 = (id *)(a1 + 40);
    id v16 = v18;
  }

  else
  {
    id v19 = *(void **)(a1 + 48);
    uint64_t v17 = (id *)(a1 + 48);
    id v16 = v19;
  }

  id v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v15]);
  if (!v20)
  {
    id v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*v17 setObject:v20 forKey:v15];
  }

  -[NSMutableArray addObject:](v20, "addObject:", v6);
}

void sub_1003EE950(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v15 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionRewardsItem);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  uint64_t v7 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a4
                                                          + 8 * (void)[v6 indexOfObject:@"e"]));
  id v8 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = [v6 indexOfObject:@"f"];

  id v10 = (NSString *)*(id *)(a4 + 8LL * (void)v9);
  if (v8)
  {
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v12 = -[NSDecimalNumber isEqualToNumber:](v8, "isEqualToNumber:", v11);

    if ((v12 & 1) == 0)
    {
      if (v10)
      {
        uint64_t v13 = PKCurrencyAmountCreate(v8, v10, 0LL);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        -[PKPaymentTransactionRewardsItem setCurrencyAmount:](v15, "setCurrencyAmount:", v14);
      }
    }
  }

  [*(id *)(a1 + 40) addObject:v15];
}

void sub_1003EEFAC(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1003EEFB4(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003EEFF8(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1003EF03C(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransactionRewardsItem setEligibleValue:](v4, "setEligibleValue:", v6);
}

void sub_1003EF08C(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setEligibleValueUnit:]( v4,  "setEligibleValueUnit:",  [a3 integerValue]);
}

void sub_1003EF0D0(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1003EF0D8(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1003EF0E0(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1003EF0E8(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setHasEnhancedMerchantProgramIdentifier:]( v4,  "setHasEnhancedMerchantProgramIdentifier:",  [a3 BOOLValue]);
}

uint64_t sub_1003EF134(void *a1)
{
  id v1 = a1;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___SQLiteCompoundPredicate, v2);
  if ((objc_opt_isKindOfClass(v1, v3) & 1) != 0)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "predicates", 0));
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v18;
      while (2)
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          if ((sub_1003EF134(*(void *)(*((void *)&v17 + 1) + 8LL * (void)i)) & 1) != 0)
          {

            uint64_t v14 = 1LL;
            goto LABEL_24;
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }

    goto LABEL_16;
  }

  uint64_t v10 = objc_opt_class(0x1006F6000LL, v4);
  if ((objc_opt_isKindOfClass(v1, v10) & 1) != 0)
  {
    unsigned __int8 v11 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v1 property]);
    unsigned __int8 v12 = v11;
    if (v11 != @"i")
    {
      if (v11)
      {
        unsigned __int8 v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", @"i");

        if ((v13 & 1) != 0) {
          goto LABEL_15;
        }
        id v15 = v12;
        if (v15 == @"j") {
          uint64_t v14 = 1LL;
        }
        else {
          uint64_t v14 = (uint64_t)-[__CFString isEqualToString:](v15, "isEqualToString:", @"j");
        }
      }

      else
      {
        uint64_t v14 = 0LL;
      }

      goto LABEL_23;
    }

id sub_1003EFA28(uint64_t a1, uint64_t a2)
{
  return +[PassShareTimeConfiguration deletePassShareTimeConfigurationsForPassEntitlementPID:inDatabase:]( &OBJC_CLASS___PassShareTimeConfiguration,  "deletePassShareTimeConfigurationsForPassEntitlementPID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

void sub_1003EFC78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___PKPassEntitlement);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PassShareTimeConfiguration passShareTimeConfigurationsForPassEntitlementPID:inDatabase:]( &OBJC_CLASS___PassShareTimeConfiguration,  "passShareTimeConfigurationsForPassEntitlementPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);

  -[PKPassEntitlement setTimeConfiguration:](v10, "setTimeConfiguration:", v9);
  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_1003EFE70(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1003F04B8(id a1, PKPassEntitlement *a2, id a3)
{
}

void sub_1003F04C0(id a1, PKPassEntitlement *a2, id a3)
{
}

void sub_1003F04C8(id a1, PKPassEntitlement *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassEntitlement setActive:](v4, "setActive:", [a3 BOOLValue]);
}

void sub_1003F050C(id a1, PKPassEntitlement *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassEntitlement setHasRemainingShares:](v4, "setHasRemainingShares:", [a3 BOOLValue]);
}

void sub_1003F0550(id a1, PKPassEntitlement *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [a3 integerValue]));
  -[PKPassEntitlement setValue:](v4, "setValue:", v5);
}

void sub_1003F05BC(id a1, PKPassEntitlement *a2, id a3)
{
  uint64_t v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  uint64_t v5 = PKSharingCapabilityShareabilitiesFromStringArray();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassEntitlement setShareability:](v4, "setShareability:", v6);
}

void sub_1003F0624(id a1, PKPassEntitlement *a2, id a3)
{
  uint64_t v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  uint64_t v5 = PKSharingCapabilityVisibilitiesFromStringArray();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassEntitlement setVisibility:](v4, "setVisibility:", v6);
}

void sub_1003F068C(id a1, PKPassEntitlement *a2, id a3)
{
  uint64_t v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  uint64_t v5 = PKSharingCapabilityManageabilitiesFromStringArray();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassEntitlement setManageability:](v4, "setManageability:", v6);
}

void sub_1003F06F4(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  uint64_t v6 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary, v7);
  unsigned __int8 v11 = -[NSSet initWithObjects:](v6, "initWithObjects:", v8, objc_opt_class(&OBJC_CLASS___NSString, v9), 0LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v11,  v4,  0LL));

  -[PKPassEntitlement setTemplateFields:](v5, "setTemplateFields:", v10);
}

void sub_1003F07BC(id a1, PKPassEntitlement *a2, id a3)
{
}

void sub_1003F07C4(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  PKSharingCapabilityShareabilityFromString(a3));
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKPassEntitlement setActiveShareability:](v4, "setActiveShareability:", v6);
  }

void sub_1003F0838(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  PKSharingCapabilityManageabilityFromString(a3));
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKPassEntitlement setActiveManageability:](v4, "setActiveManageability:", v6);
  }

void sub_1003F08AC(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  PKSharingCapabilityVisibilityFromString(a3));
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKPassEntitlement setActiveVisibility:](v4, "setActiveVisibility:", v6);
  }

void sub_1003F0920(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3) {
    -[PKPassEntitlement setActiveCapabilityRole:](a2, "setActiveCapabilityRole:");
  }
}

uint64_t sub_1003F0FCC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_1003F1244(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) iconImageURL]);
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_1003F1334;
  __int128 v17 = &unk_10065D400;
  uint64_t v10 = *(void **)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 40);
  id v20 = v6;
  id v21 = v7;
  id v19 = v10;
  id v11 = v6;
  id v12 = v7;
  unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 dataTaskWithURL:v9 completionHandler:&v14]);

  objc_msgSend(v13, "resume", v14, v15, v16, v17, v18);
}

void sub_1003F1334(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  if (v6 && !a4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) iconImageURL]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pathExtension]);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 stringByAppendingPathExtension:v8]);

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) URLByAppendingPathComponent:v10]);
    id v17 = 0LL;
    unsigned int v12 = [v6 writeToURL:v11 options:0 error:&v17];
    id v13 = v17;
    if (v12)
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = (os_log_s *)[[PKImage alloc] initWithData:v6 scale:0.0];
      [v14 setImage:v15];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Error storing receipt image: %@",  buf,  0xCu);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_1003F14DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1003F17AC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  v156 = a1;
  id v157 = a4;
  if (a1)
  {
    id v8 = a3;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 amount]);
    uint64_t v11 = PKCurrencyDecimalToStorageNumber(v10);
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 subtotalAmount]);
    uint64_t v14 = PKCurrencyDecimalToStorageNumber(v13);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v7 amountAddedToAuth]);
    uint64_t v17 = PKCurrencyDecimalToStorageNumber(v16);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);

    id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 paymentHash]);
    uint64_t v20 = objc_claimAutoreleasedReturnValue([v19 uppercaseString]);

    id v21 = [v8 persistentID];
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v21));
    [v9 setObjectOrNull:v22 forKey:@"source_pid"];

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
    [v9 setObjectOrNull:v23 forKey:@"identifier"];

    id v24 = (void *)objc_claimAutoreleasedReturnValue([v7 serviceIdentifier]);
    [v9 setObjectOrNull:v24 forKey:@"service_identifier"];

    v152 = (void *)v20;
    [v9 setObjectOrNull:v20 forKey:@"payment_hash"];
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v7 locationDate]);
    [v9 setObjectOrNull:v25 forKey:@"location_date"];

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v7 transactionDate]);
    [v9 setObjectOrNull:v26 forKey:@"transaction_date"];

    id v27 = (void *)objc_claimAutoreleasedReturnValue([v7 transactionStatusChangedDate]);
    [v9 setObjectOrNull:v27 forKey:@"transaction_status_changed_date"];

    unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v7 expirationDate]);
    [v9 setObjectOrNull:v28 forKey:@"expiration_date"];

    id v29 = (void *)objc_claimAutoreleasedReturnValue([v7 locality]);
    [v9 setObjectOrNull:v29 forKey:@"locality"];

    id v30 = (void *)objc_claimAutoreleasedReturnValue([v7 administrativeArea]);
    [v9 setObjectOrNull:v30 forKey:@"administrative_area"];

    id v31 = (void *)objc_claimAutoreleasedReturnValue([v7 timeZone]);
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 name]);
    [v9 setObjectOrNull:v32 forKey:@"af"];

    id v33 = (void *)objc_claimAutoreleasedReturnValue([v7 currencyCode]);
    [v9 setObjectOrNull:v33 forKey:@"currency_code"];

    v155 = (void *)v12;
    [v9 setObjectOrNull:v12 forKey:@"amount"];
    v154 = (void *)v15;
    [v9 setObjectOrNull:v15 forKey:@"subtotal_amount"];
    v153 = (void *)v18;
    [v9 setObjectOrNull:v18 forKey:@"amount_added_to_auth"];
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionStatus"), @"transaction_status");
    objc_msgSend( v9,  "setInteger:forKey:",  objc_msgSend(v7, "transactionDeclinedReason"),  @"transaction_declined_reason");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionType"), @"transaction_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "technologyType"), @"technology_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionSource"), @"transaction_source");
    [v7 locationLatitude];
    objc_msgSend(v9, "setDouble:forKey:", @"location_latitude");
    [v7 locationLongitude];
    objc_msgSend(v9, "setDouble:forKey:", @"location_longitude");
    [v7 locationAltitude];
    objc_msgSend(v9, "setDouble:forKey:", @"location_altitude");
    [v7 locationHorizontalAccuracy];
    objc_msgSend(v9, "setDouble:forKey:", @"location_horizontal_accuracy");
    [v7 locationVerticalAccuracy];
    objc_msgSend(v9, "setDouble:forKey:", @"location_vertical_accuracy");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "requiresLocation"), @"requires_location");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isCoarseLocation"), @"is_coarse_location");
    objc_msgSend( v9,  "setBool:forKey:",  objc_msgSend(v7, "hasNotificationServiceData"),  @"has_notification_service_data");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "processedForLocation"), @"processed_for_location");
    objc_msgSend( v9,  "setBool:forKey:",  objc_msgSend(v7, "processedForMerchantCleanup"),  @"processed_for_merchant_cleanup");
    objc_msgSend( v9,  "setBool:forKey:",  objc_msgSend(v7, "requiresMerchantReprocessing"),  @"requires_merchant_reprocessing");
    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v7 lastMerchantReprocessingDate]);
    id v35 = (void *)_SQLValueForDate(v34);
    [v9 setObjectOrNull:v35 forKey:@"last_merchant_reprocessing_date"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "processedForStations"), @"processed_for_stations");
    id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v7 transitType]));
    [v9 setObject:v36 forKeyedSubscript:@"transit_type"];

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v7 transitModifiers]));
    [v9 setObject:v37 forKeyedSubscript:@"transit_modifiers"];

    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v7 enRoute]));
    [v9 setObject:v38 forKeyedSubscript:@"en_route"];

    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v7 stationCodeProvider]);
    [v9 setObjectOrNull:v39 forKey:@"station_code_provider"];

    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v7 startStationCode]);
    [v9 setObjectOrNull:v40 forKey:@"start_station_code"];

    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v7 startStation]);
    [v9 setObjectOrNull:v41 forKey:@"start_station"];

    [v7 startStationLatitude];
    objc_msgSend(v9, "setDouble:forKey:", @"start_station_latitude");
    [v7 startStationLongitude];
    objc_msgSend(v9, "setDouble:forKey:", @"start_station_longitude");
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v7 endStationCode]);
    [v9 setObjectOrNull:v42 forKey:@"end_station_code"];

    id v43 = (void *)objc_claimAutoreleasedReturnValue([v7 endStation]);
    [v9 setObjectOrNull:v43 forKey:@"end_station"];

    [v7 endStationLatitude];
    objc_msgSend(v9, "setDouble:forKey:", @"end_station_latitude");
    [v7 endStationLongitude];
    objc_msgSend(v9, "setDouble:forKey:", @"end_station_longitude");
    id v44 = (void *)objc_claimAutoreleasedReturnValue([v7 cityCode]);
    [v9 setObjectOrNull:v44 forKey:@"city_code"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "shouldSuppressDate"), @"should_suppress_date");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "suppressNotifications"), @"suppress_notifications");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isRecurring"), @"recurring");
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v7 merchant]);
    if ([v45 isValid])
    {
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 name]);
      [v9 setObjectOrNull:v46 forKey:@"merchant_name"];

      __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v45 rawName]);
      [v9 setObjectOrNull:v47 forKey:@"merchant_raw_name"];

      id v48 = (void *)objc_claimAutoreleasedReturnValue([v45 industryCategory]);
      [v9 setObjectOrNull:v48 forKey:@"merchant_industry_category"];

      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v45, "industryCode"), @"merchant_industry_code");
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v45 rawCANL]);
      [v9 setObjectOrNull:v49 forKey:@"f"];

      id v50 = (void *)objc_claimAutoreleasedReturnValue([v45 rawCity]);
      [v9 setObjectOrNull:v50 forKey:@"g"];

      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v45 rawCountry]);
      [v9 setObjectOrNull:v51 forKey:@"i"];

      id v52 = (void *)objc_claimAutoreleasedReturnValue([v45 rawState]);
      [v9 setObjectOrNull:v52 forKey:@"h"];

      id v53 = (void *)objc_claimAutoreleasedReturnValue([v45 city]);
      [v9 setObjectOrNull:v53 forKey:@"j"];

      id v54 = (void *)objc_claimAutoreleasedReturnValue([v45 state]);
      [v9 setObjectOrNull:v54 forKey:@"k"];

      __int128 v55 = (void *)objc_claimAutoreleasedReturnValue([v45 zip]);
      [v9 setObjectOrNull:v55 forKey:@"l"];

      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v45, "cleanConfidenceLevel"), @"m");
      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v45, "adamIdentifier"), @"q");
      __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v45 originURL]);
      id v57 = (void *)_SQLValueForURL(v56);
      [v9 setObjectOrNull:v57 forKey:@"p"];

      id v58 = (void *)objc_claimAutoreleasedReturnValue([v45 webMerchantIdentifier]);
      [v9 setObjectOrNull:v58 forKey:@"ag"];

      id v59 = (void *)objc_claimAutoreleasedReturnValue([v45 webMerchantName]);
      [v9 setObjectOrNull:v59 forKey:@"ah"];

      __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v45 merchantIdentifier]);
      [v9 setObjectOrNull:v60 forKey:@"t"];

      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v45, "fallbackcategory"), @"x");
      __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v45 fallbackDetailedCategory]);
      [v9 setObjectOrNull:v61 forKey:@"y"];

      objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v45, "useRawMerchantData"), @"use_raw_merchant_data");
      __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v45 fallbackLogoImageURL]);
      id v63 = (void *)_SQLValueForURL(v62);
      [v9 setObjectOrNull:v63 forKey:@"merchant_fallback_logo_image_url"];
    }

    id v64 = v157;
    if ([v7 technologyType] == (id)1)
    {
      id v65 = (void *)objc_claimAutoreleasedReturnValue([v7 paymentHash]);
      id v66 = sub_1003F3008(v65);
      id v67 = (void *)objc_claimAutoreleasedReturnValue(v66);

      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v7 paymentHash]);
      id v69 = sub_1003F3058(v68);
      id v70 = (void *)objc_claimAutoreleasedReturnValue(v69);

      if (v67
        && ([v67 isEqualToString:@"00000000000000000000000000000000"] & 1) == 0)
      {
        [v9 setObjectOrNull:v67 forKey:@"payment_hash_component_1"];
      }

      if (v70
        && ([v70 isEqualToString:@"00000000000000000000000000000000"] & 1) == 0)
      {
        [v9 setObjectOrNull:v70 forKey:@"payment_hash_component_2"];
      }
    }

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "adjustmentType"), @"adjustment_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "topUpType"), @"top_up_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "peerPaymentType"), @"peer_payment_type");
    unint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v7 peerPaymentCounterpartHandle]);
    [v9 setObjectOrNull:v71 forKey:@"peer_payment_counterpart_handle"];

    unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v7 peerPaymentMemo]);
    [v9 setObjectOrNull:v72 forKey:@"peer_payment_memo"];

    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v7 peerPaymentMessageReceivedDate]);
    [v9 setObjectOrNull:v73 forKey:@"peer_payment_message_received_date"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "peerPaymentPaymentMode"), @"ca");
    __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([v7 peerPaymentCounterpartImageRecordIdentifier]);
    [v9 setObjectOrNull:v74 forKey:@"cb"];

    v75 = (void *)objc_claimAutoreleasedReturnValue([v7 foreignExchangeInformation]);
    __int16 v76 = v75;
    if (v75)
    {
      BOOL v77 = (void *)objc_claimAutoreleasedReturnValue([v75 destinationCurrencyAmount]);
      id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 amount]);
      uint64_t v79 = PKCurrencyDecimalToStorageNumber(v78);
      __int128 v80 = (void *)objc_claimAutoreleasedReturnValue(v79);

      [v9 setObjectOrNull:v80 forKey:@"foreign_exchange_information_destination_amount"];
      id v81 = (void *)objc_claimAutoreleasedReturnValue([v76 destinationCurrencyAmount]);
      __int128 v82 = (void *)objc_claimAutoreleasedReturnValue([v81 currency]);
      [v9 setObjectOrNull:v82 forKey:@"foreign_exchange_information_destination_currency_code"];

      __int128 v83 = (void *)objc_claimAutoreleasedReturnValue([v76 exchangeRate]);
      __int16 v84 = (void *)objc_claimAutoreleasedReturnValue([v83 stringValue]);
      [v9 setObjectOrNull:v84 forKey:@"foreign_exchange_information_exchange_rate"];
    }

    id v85 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryFundingSourceAmount]);
    uint64_t v86 = PKCurrencyDecimalToStorageNumber(v85);
    __int128 v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
    [v9 setObjectOrNull:v87 forKey:@"primary_funding_source_amount"];

    __int128 v88 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryFundingSourceCurrencyCode]);
    [v9 setObjectOrNull:v88 forKey:@"primary_funding_source_currency_code"];

    __int128 v89 = (void *)objc_claimAutoreleasedReturnValue([v7 secondaryFundingSourceAmount]);
    uint64_t v90 = PKCurrencyDecimalToStorageNumber(v89);
    __int128 v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
    [v9 setObjectOrNull:v91 forKey:@"secondary_funding_source_amount"];

    __int128 v92 = (void *)objc_claimAutoreleasedReturnValue([v7 secondaryFundingSourceCurrencyCode]);
    [v9 setObjectOrNull:v92 forKey:@"secondary_funding_source_currency_code"];

    objc_msgSend( v9,  "setInteger:forKey:",  objc_msgSend(v7, "secondaryFundingSourceNetwork"),  @"secondary_funding_source_network");
    __int128 v93 = (void *)objc_claimAutoreleasedReturnValue([v7 secondaryFundingSourceDPANSuffix]);
    [v9 setObjectOrNull:v93 forKey:@"secondary_funding_source_dpan_suffix"];

    __int128 v94 = (void *)objc_claimAutoreleasedReturnValue([v7 secondaryFundingSourceFPANIdentifier]);
    [v9 setObjectOrNull:v94 forKey:@"secondary_funding_source_fpan_identifier"];

    __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v7 secondaryFundingSourceDescription]);
    [v9 setObjectOrNull:v95 forKey:@"secondary_funding_source_description"];

    objc_msgSend( v9,  "setInteger:forKey:",  objc_msgSend(v7, "secondaryFundingSourceType"),  @"secondary_funding_source_type");
    __int128 v96 = (void *)objc_claimAutoreleasedReturnValue([v7 requestDeviceScoreIdentifier]);
    __int128 v97 = (void *)_SQLValueForUUID(v96);
    [v9 setObject:v97 forKey:@"request_device_score_identifier"];

    __int128 v98 = (void *)objc_claimAutoreleasedReturnValue([v7 sendDeviceScoreIdentifier]);
    __int128 v99 = (void *)_SQLValueForUUID(v98);
    [v9 setObject:v99 forKey:@"send_device_score_identifier"];

    objc_msgSend( v9,  "setBool:forKey:",  objc_msgSend(v7, "deviceScoreIdentifiersRequired"),  @"device_score_identifiers_required");
    objc_msgSend( v9,  "setBool:forKey:",  objc_msgSend(v7, "deviceScoreIdentifiersSubmitted"),  @"device_score_identifiers_submitted");
    __int128 v100 = (void *)objc_claimAutoreleasedReturnValue([v7 merchantProvidedDescription]);
    [v9 setObjectOrNull:v100 forKey:@"merchant_provided_description"];

    __int128 v101 = (void *)objc_claimAutoreleasedReturnValue([v7 merchantProvidedTitle]);
    [v9 setObjectOrNull:v101 forKey:@"merchant_provided_title"];

    __int128 v102 = (void *)objc_claimAutoreleasedReturnValue([v7 rewardsTotalAmount]);
    uint64_t v103 = PKCurrencyDecimalToStorageNumber(v102);
    __int128 v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
    [v9 setObjectOrNull:v104 forKey:@"c"];

    __int128 v105 = (void *)objc_claimAutoreleasedReturnValue([v7 rewardsTotalCurrencyCode]);
    [v9 setObjectOrNull:v105 forKey:@"d"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "rewardsEligibilityReason"), @"e");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "cardType"), @"a");
    __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);
    [v9 setObjectOrNull:v106 forKey:@"account_identifier"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "accountType"), @"account_type");
    __int128 v107 = (void *)objc_claimAutoreleasedReturnValue([v7 lifecycleIdentifier]);
    [v9 setObjectOrNull:v107 forKey:@"o"];

    __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v7 authNetworkData]);
    [v9 setObjectOrNull:v108 forKey:@"r"];

    __int128 v109 = (void *)objc_claimAutoreleasedReturnValue([v7 clearingNetworkData]);
    [v9 setObjectOrNull:v109 forKey:@"s"];

    __int128 v110 = (void *)objc_claimAutoreleasedReturnValue([v7 cardIdentifier]);
    [v9 setObjectOrNull:v110 forKey:@"v"];

    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v7 dpanIdentifier]);
    [v9 setObjectOrNull:v111 forKey:@"dpan_identifier"];

    objc_msgSend( v9,  "setInteger:forKey:",  objc_msgSend(v7, "paymentNetworkIdentifier"),  @"payment_network_identifier");
    __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v7 panIdentifier]);
    [v9 setObjectOrNull:v112 forKey:@"zm"];

    __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v7 isMerchantTokenTransaction]);
    [v9 setObjectOrNull:v113 forKey:@"is_merchant_token_transaction"];

    __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([v7 cardNumberSuffix]);
    [v9 setObjectOrNull:v114 forKey:@"ae"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "adjustmentTypeReason"), @"w");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "associatedFeatureIdentifier"), @"afi");
    v115 = (void *)objc_claimAutoreleasedReturnValue([v7 referenceIdentifier]);
    [v9 setObjectOrNull:v115 forKey:@"ab"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "suppressBehavior"), @"ac");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "redemptionType"), @"ad");
    v116 = (void *)objc_claimAutoreleasedReturnValue([v7 receiptProviderURL]);
    v117 = (void *)_SQLValueForURL(v116);
    [v9 setObjectOrNull:v117 forKey:@"receipt_provider_url"];

    v118 = (void *)objc_claimAutoreleasedReturnValue([v7 receiptProviderIdentifier]);
    [v9 setObjectOrNull:v118 forKey:@"receipt_provider_identifier"];

    __int16 v119 = (void *)objc_claimAutoreleasedReturnValue([v7 receiptIdentifier]);
    [v9 setObjectOrNull:v119 forKey:@"receipt_identifier"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "originatedByDevice"), @"n");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isFuzzyMatched"), @"fuzzy_matched");
    v120 = (void *)objc_claimAutoreleasedReturnValue([v7 issueReportIdentifier]);
    [v9 setObjectOrNull:v120 forKey:@"issue_report_identifier"];

    __int16 v121 = (void *)objc_claimAutoreleasedReturnValue([v7 barcodeIdentifier]);
    [v9 setObjectOrNull:v121 forKey:@"barcode_identifier"];

    v122 = (void *)objc_claimAutoreleasedReturnValue([v7 authenticationContext]);
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v122, "paymentPINFormat"), @"payment_pin_format");
    objc_msgSend( v9,  "setInteger:forKey:",  objc_msgSend(v122, "requestedAuthenticationMechanisms"),  @"requested_auth_mechanisms");
    __int16 v123 = (void *)objc_claimAutoreleasedReturnValue([v122 nonce]);
    [v9 setObjectOrNull:v123 forKey:@"nonce"];

    v124 = (void *)objc_claimAutoreleasedReturnValue([v122 signingKeyMaterial]);
    [v9 setObjectOrNull:v124 forKey:@"signing_key_material"];

    v125 = (void *)objc_claimAutoreleasedReturnValue([v122 partialSignature]);
    [v9 setObjectOrNull:v125 forKey:@"partial_signature"];

    v126 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryFundingSourceDescription]);
    [v9 setObjectOrNull:v126 forKey:@"primary_funding_source_description"];

    v127 = (void *)objc_claimAutoreleasedReturnValue([v7 nominalAmount]);
    uint64_t v128 = PKCurrencyDecimalToStorageNumber(v127);
    v129 = (void *)objc_claimAutoreleasedReturnValue(v128);

    [v9 setObjectOrNull:v129 forKey:@"nominal_amount"];
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "hasAdditionalOffers"), @"has_additional_offers");
    v130 = (void *)objc_claimAutoreleasedReturnValue([v7 associatedStatementIdentifiers]);
    v131 = (void *)objc_claimAutoreleasedReturnValue([v130 componentsJoinedByString:@","]);
    [v9 setObjectOrNull:v131 forKey:@"associated_statement_identifiers"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "interestReassessment"), @"interest_reassessment");
    [v9 setInteger:0 forKey:@"update_sequence_number"];
    [v9 setBool:1 forKey:@"needs_sync_to_finance"];
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isIssuerInstallmentTransaction"), @"iit");
    v132 = (void *)objc_claimAutoreleasedReturnValue([v7 issuerInstallmentManagementURL]);
    v133 = (void *)_SQLValueForURL(v132);
    [v9 setObjectOrNull:v133 forKey:@"iimu"];

    v134 = (NSString *)objc_claimAutoreleasedReturnValue([v7 metadata]);
    v151 = v76;
    if (v134)
    {
      v135 = (void *)objc_claimAutoreleasedReturnValue([v7 metadata]);
      v136 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v135,  0LL,  0LL));

      v134 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v136, 4LL);
    }

    [v9 setObjectOrNull:v134 forKey:@"metadata"];
    sub_1003F30A8((uint64_t)v156, v9, v7);
    v158.receiver = v156;
    v158.super_class = (Class)&OBJC_CLASS___PaymentTransaction;
    id v137 = objc_msgSendSuper2(&v158, "initWithPropertyValues:inDatabase:", v9, v157);
    if (v137)
    {
      v138 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionArchive insertTransactionArchiveForTransaction:inDatabase:]( &OBJC_CLASS___PaymentTransactionArchive,  "insertTransactionArchiveForTransaction:inDatabase:",  v137,  v157));
      v139 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v138 persistentID]));
      [v137 setValue:v139 forProperty:@"archive_pid"];

      v140 = (void *)objc_claimAutoreleasedReturnValue([v7 amounts]);
      sub_1003F3190(v137, v140);

      v141 = (void *)objc_claimAutoreleasedReturnValue([v7 plans]);
      sub_1003F3220(v137, v141);

      v142 = (void *)objc_claimAutoreleasedReturnValue([v7 fees]);
      sub_1003F32B0(v137, v142);

      v143 = (void *)objc_claimAutoreleasedReturnValue([v7 rewards]);
      v144 = (void *)objc_claimAutoreleasedReturnValue([v7 rewardsInProgress]);
      sub_1003F3320(v137, v143, v144);

      v145 = (void *)objc_claimAutoreleasedReturnValue([v7 questions]);
      sub_1003F33D4(v137, v145);

      sub_1003F3444(v137, v7);
      sub_1003F34D8(v137, v7);
      if (v122) {
        sub_1003F356C(v137);
      }
      v146 = (void *)objc_claimAutoreleasedReturnValue([v7 awards]);
      sub_1003F35D0(v137, v146);

      v147 = (void *)objc_claimAutoreleasedReturnValue([v7 amountModifiers]);
      sub_1003F3660(v137, v147);

      v148 = (void *)objc_claimAutoreleasedReturnValue([v7 releasedData]);
      sub_1003F36F0(v137, v148);

      id v64 = v157;
    }

    id v149 = v137;
  }

  else
  {
    id v149 = 0LL;
    id v64 = v157;
  }

  return v149;
}

id sub_1003F3008(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)64) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 substringToIndex:32]);
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1003F3058(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)64) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:32]);
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

void sub_1003F30A8(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 rewards]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 totalEligibleValueForUnit:1]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 totalEligibleValueForUnit:2]);
    if ((objc_msgSend(v6, "pk_isZeroNumber") & 1) == 0)
    {
      uint64_t v8 = PKCurrencyDecimalToStorageNumber(v6);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      [v12 setObjectOrNull:v9 forKey:@"eligible_eligible_rewards_percent_aggregate"];
    }

    if ((objc_msgSend(v7, "pk_isZeroNumber") & 1) == 0)
    {
      uint64_t v10 = PKCurrencyDecimalToStorageNumber(v7);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      [v12 setObjectOrNull:v11 forKey:@"eligible_rewards_cash_aggregate"];
    }
  }
}

void sub_1003F3190(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v5 = [v3 count];
      id v4 = v8;
      if (v5)
      {
        id v6 = [a1 persistentID];
        id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
        +[PaymentTransactionAmount updateWithPaymentAmounts:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___PaymentTransactionAmount,  "updateWithPaymentAmounts:forPaymentTransactionPID:inDatabase:",  v8,  v6,  v7);

        id v4 = v8;
      }
    }
  }
}

void sub_1003F3220(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v5 = [v3 count];
      id v4 = v8;
      if (v5)
      {
        id v6 = [a1 persistentID];
        id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
        +[TransactionCommutePlanUnit updateWithCommutePlanUnits:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___TransactionCommutePlanUnit,  "updateWithCommutePlanUnits:forPaymentTransactionPID:inDatabase:",  v8,  v6,  v7);

        id v4 = v8;
      }
    }
  }
}

void sub_1003F32B0(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue([a1 database]);
    +[PaymentTransactionFee updatePaymentTransactionFees:forPaymentTransaction:inDatabase:]( &OBJC_CLASS___PaymentTransactionFee,  "updatePaymentTransactionFees:forPaymentTransaction:inDatabase:",  v3,  a1,  v4);
  }

void sub_1003F3320(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
    +[PaymentTransactionReward updatePaymentTransactionRewards:forPaymentTransaction:inDatabase:]( &OBJC_CLASS___PaymentTransactionReward,  "updatePaymentTransactionRewards:forPaymentTransaction:inDatabase:",  v6,  a1,  v7);

    id v8 = (id)objc_claimAutoreleasedReturnValue([a1 database]);
    +[PaymentTransactionReward updatePaymentTransactionRewardsInProgress:forPaymentTransaction:inDatabase:]( &OBJC_CLASS___PaymentTransactionReward,  "updatePaymentTransactionRewardsInProgress:forPaymentTransaction:inDatabase:",  v5,  a1,  v8);
  }

void sub_1003F33D4(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue([a1 database]);
    +[PaymentTransactionQuestion updatePaymentTransactionQuestions:forPaymentTransaction:inDatabase:]( &OBJC_CLASS___PaymentTransactionQuestion,  "updatePaymentTransactionQuestions:forPaymentTransaction:inDatabase:",  v3,  a1,  v4);
  }

void sub_1003F3444(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100404C14;
    v5[3] = &unk_1006455C8;
    id v6 = v4;
    id v7 = a1;
    sub_1002CCC5C((uint64_t)v3, v5);
  }
}

void sub_1003F34D8(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100404EE8;
    v5[3] = &unk_1006455C8;
    id v6 = v4;
    id v7 = a1;
    sub_1002CCC5C((uint64_t)v3, v5);
  }
}

void sub_1003F356C(void *a1)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([a1 database]);
    id v2 =  +[PaymentTransactionAuthentication createIfNotExistInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "createIfNotExistInDatabase:withPaymentTransactionPID:",  v3,  [a1 persistentID]);
  }

void sub_1003F35D0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v5 = [v3 count];
      id v4 = v8;
      if (v5)
      {
        id v6 = [a1 persistentID];
        id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
        +[PaymentTransactionAward updateWithPaymentTransactionAwards:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___PaymentTransactionAward,  "updateWithPaymentTransactionAwards:forPaymentTransactionPID:inDatabase:",  v8,  v6,  v7);

        id v4 = v8;
      }
    }
  }
}

void sub_1003F3660(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v5 = [v3 count];
      id v4 = v8;
      if (v5)
      {
        id v6 = [a1 persistentID];
        id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 database]);
        +[PaymentTransactionAmountModifier updateWithPaymentTransactionAmountModifiers:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___PaymentTransactionAmountModifier,  "updateWithPaymentTransactionAmountModifiers:forPaymentTransactionPID:inDatabase:",  v8,  v6,  v7);

        id v4 = v8;
      }
    }
  }
}

void sub_1003F36F0(void *a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = a2;
      id v4 = [a1 persistentID];
      id v5 = (id)objc_claimAutoreleasedReturnValue([a1 database]);
      +[TransactionReleasedData insertReleasedData:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___TransactionReleasedData,  "insertReleasedData:forPaymentTransactionPID:inDatabase:",  v3,  v4,  v5);
    }
  }

id sub_1003F4640(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  if (v3)
  {
    uint64_t v5 = v4;
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v7 = v3;
    id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v17;
      do
      {
        uint64_t v11 = 0LL;
        do
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = sub_1003F55AC(v5, *(void **)(*((void *)&v16 + 1) + 8LL * (void)v11));
          id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          -[NSMutableArray addObject:](v6, "addObject:", v13, (void)v16);

          uint64_t v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v9);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v6));
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v14;
}

id sub_1003F47B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v3 = &__kCFBooleanFalse;
    }

    else
    {
      if (a2 != 1)
      {
        uint64_t v4 = 0LL;
        return v4;
      }

      id v3 = &__kCFBooleanTrue;
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"has_notification_service_data",  v3));
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v4;
}

id sub_1003F4844(uint64_t a1, int a2)
{
  if (a2) {
    return (id)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ac",  &off_100690908));
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ac",  &off_100690998));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ac",  &off_1006909B0));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"ac"));
  v9[0] = v4;
  v9[1] = v6;
  v9[2] = v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v9, 3LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v7));

  return v8;
}

void sub_1003F497C(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  if (*(void *)(a1 + 48) <= a3)
  {
    id v9 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentTransaction),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentTransaction identifier](v9, "identifier"));
    unsigned int v7 = -[PaymentTransaction deleteFromDatabase](v9, "deleteFromDatabase");
    char v8 = v7;
    if (v7)
    {
      +[ValueAddedServiceTransaction deleteEntitiesForPaymentTransaction:inDatabase:]( &OBJC_CLASS___ValueAddedServiceTransaction,  "deleteEntitiesForPaymentTransaction:inDatabase:",  v9,  *(void *)(a1 + 32));
      [*(id *)(a1 + 40) addObject:v6];
    }

    *a4 = v8 ^ 1;
  }

id sub_1003F4AB8(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"source_pid",  v3));

  return v4;
}

void sub_1003F5208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

uint64_t sub_1003F5278(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003F5288(uint64_t a1)
{
}

void sub_1003F5290(void *a1, uint64_t a2, id *a3)
{
}

id sub_1003F5310(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 serviceIdentifier]);
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PKPaymentTransaction recordTypesAndNamesForCodingType:serviceIdentifier:]( &OBJC_CLASS___PKPaymentTransaction,  "recordTypesAndNamesForCodingType:serviceIdentifier:",  2LL,  v1));
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

void sub_1003F5368(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 database]);
  +[CloudStoreRecord removeCloudStoreRecordsWithName:recordType:inDatabase:]( &OBJC_CLASS___CloudStoreRecord,  "removeCloudStoreRecordsWithName:recordType:inDatabase:",  v5,  v6,  v7);
}

id sub_1003F53E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"maps_merchant_pid",  v3));

  return v4;
}

id sub_1003F5434(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"u",  v3));

  return v4;
}

id sub_1003F54F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"pid",  v3));

  return v4;
}

id sub_1003F55AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3) {
    uint64_t v4 = objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_source.identifier",  v3));
  }
  else {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }
  id v5 = (void *)v4;

  return v5;
}

id sub_1003F5750(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"account_identifier",  v3));

  return v4;
}

id sub_1003F57A4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"account_type",  v3));

  return v4;
}

id sub_1003F5808(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"service_identifier",  v3));

  return v4;
}

id sub_1003F59DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"identifier",  v3));

  return v4;
}

id sub_1003F5A98(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ab",  v3));

  return v4;
}

id sub_1003F5E04(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"t",  v3));

  return v4;
}

id sub_1003F5E58(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    uint64_t v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanOrEqualToValue:",  @"transaction_date",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003F5EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    uint64_t v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanOrEqualToValue:",  @"transaction_date",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003F6200(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"maps_merchant.identifier",  v3));

  return v4;
}

id sub_1003F64E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"plantains.a",  v3));

  return v4;
}

id sub_1003F65C0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_type",  v3));

  return v4;
}

void sub_1003F6844( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

id sub_1003F6864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  switch(a2)
  {
    case 0LL:
      return (id)objc_claimAutoreleasedReturnValue( +[SQLiteBooleanPredicate truePredicate]( &OBJC_CLASS___SQLiteBooleanPredicate,  "truePredicate"));
    case 2LL:
      id v11 = sub_1003F47B8(v3, 2LL);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v11);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"transaction_type",  &off_100690968));
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"transaction_type",  &off_100690980));
      v13[0] = v5;
      v13[1] = v6;
      void v13[2] = v7;
      char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 3LL));
      uint64_t v9 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v8));
      goto LABEL_7;
    case 1LL:
      id v4 = sub_1003F47B8(v3, 1LL);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_type",  &off_100690968));
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_type",  &off_100690980));
      v14[0] = v5;
      v14[1] = v6;
      _OWORD v14[2] = v7;
      char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 3LL));
      uint64_t v9 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v8));
LABEL_7:
      id v12 = (void *)v9;

      return v12;
  }

  return 0LL;
}

void sub_1003F6A38(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentTransaction),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  char v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL;
}

id sub_1003F6C2C(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_source",  &off_100690938));
      -[NSMutableArray addObject:](v5, "addObject:", v10);

      if ((a3 & 1) == 0)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"a",  &off_100690938));
        -[NSMutableArray addObject:](v5, "addObject:", v11);
      }

      uint64_t v8 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v5));
    }

    else
    {
      if (a2 != 1)
      {
        uint64_t v9 = 0LL;
        return v9;
      }

      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"transaction_source",  &off_1006914A0));
      -[NSMutableArray addObject:](v5, "addObject:", v6);

      if ((a3 & 1) == 0)
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"a",  &off_1006914A0));
        -[NSMutableArray addObject:](v5, "addObject:", v7);
      }

      uint64_t v8 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v5));
    }

    uint64_t v9 = (void *)v8;
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v9;
}

id sub_1003F6DB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = sub_1003F3008(v3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = sub_1003F3058(v3);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_hash",  v3));

  [v4 addObject:v9];
  if (v6 && v8)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"payment_hash_component_1",  &off_100690968));
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_hash_component_1",  v6));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_hash_component_2",  v8));
    v20[0] = v11;
    v20[1] = v12;
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 2LL));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v13));

    v19[0] = v10;
    v19[1] = v14;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v19, 2LL));
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v15));
    [v4 addObject:v16];
  }

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v4));

  return v17;
}

id sub_1003F7224(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v5 = sub_1003F75B4(v4, v3, 0LL, 0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

void *sub_1003F75B4(uint64_t a1, void *a2, void **a3, void **a4)
{
  BOOL v7 = a4 != 0LL;
  id v8 = a2;
  objc_opt_self(a1);
  uint64_t v9 = objc_autoreleasePoolPush();
  uint64_t v10 = (id *)sub_1004052C4( objc_alloc(&OBJC_CLASS___PaymentTransactionDeserializationContext),  (a3 != 0LL) | (2 * v7));
  id v11 = sub_100406EE8(v10, v8);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 database]);
  sub_100405728((uint64_t)v10, v12);
  if (a3)
  {
    id v13 = sub_100406FD4(v10, v11);
    uint64_t v14 = *a3;
    *a3 = v13;
  }

  if (a4)
  {
    uint64_t v15 = sub_10040716C(v10, v11);
    __int128 v16 = *a4;
    *a4 = v15;
  }

  objc_autoreleasePoolPop(v9);
  return v11;
}

id sub_1003F7F48(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  objc_opt_self(a1);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v5 dateByAddingTimeInterval:a3]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 dateByAddingTimeInterval:-a3]);
    uint64_t v9 = (void *)_SQLValueForDate(v7);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanOrEqualToValue:",  @"transaction_date",  v9));
    [v6 addObject:v10];

    id v11 = (void *)_SQLValueForDate(v8);
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanOrEqualToValue:",  @"transaction_date",  v11));
    [v6 addObject:v12];

    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v6));
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v13;
}

id sub_1003F81E8(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_status",  v3));

  return v4;
}

id sub_1003F824C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"merchant_name",  v3));

  return v4;
}

PaymentTransaction *sub_1003F82A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, double a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v15 = objc_opt_self(a1);
  if (v12 && (__int128 v16 = (void *)v15, [v13 count]))
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v18 = sub_1003F4640((uint64_t)v16, v13);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    [v17 addObject:v19];

    id v20 = sub_1003F7F48((uint64_t)v16, v12, a6);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    [v17 addObject:v21];

    if (v14) {
      [v17 addObjectsFromArray:v14];
    }
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v17));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v16 queryWithDatabase:v11 predicate:v22]);
    __int128 v37 = @"transaction_date";
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
    uint64_t v33 = 0LL;
    __int128 v34 = &v33;
    uint64_t v35 = 0x2020000000LL;
    uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    v32[0] = 0LL;
    v32[1] = v32;
    v32[2] = 0x2020000000LL;
    v32[3] = 0LL;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    void v28[2] = sub_100407304;
    v28[3] = &unk_1006585D8;
    id v29 = v12;
    id v30 = &v33;
    id v31 = v32;
    [v23 enumeratePersistentIDsAndProperties:v24 usingBlock:v28];
    if (v34[3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v25 = 0LL;
    }

    else
    {
      uint64_t v26 = objc_alloc(&OBJC_CLASS___PaymentTransaction);
      id v25 = -[SQLiteEntity initWithPersistentID:inDatabase:](v26, "initWithPersistentID:inDatabase:", v34[3], v11);
    }

    _Block_object_dispose(v32, 8);
    _Block_object_dispose(&v33, 8);
  }

  else
  {
    id v25 = 0LL;
  }

  return v25;
}

void sub_1003F852C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_1003F86A0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"adjustment_type",  v3));

  return v4;
}

id sub_1003F8704(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11 = a6;
  id v12 = a5;
  id v13 = a2;
  uint64_t v14 = objc_opt_self(a1);
  uint64_t v15 = objc_alloc(&OBJC_CLASS___NSArray);
  id v16 = sub_1003F4640(v14, v13);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

  id v18 = sub_1003F6C2C(v14, a3, 0);
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  id v20 = sub_1003F6864(v14, a4);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  id v22 = sub_1003F5E58(v14, v12);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

  id v24 = sub_1003F5EE4(v14, v11);
  id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

  id v26 = sub_1003F4844(v14, 0);
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  unsigned int v28 = -[NSArray initWithObjects:](v15, "initWithObjects:", v17, v19, v21, v23, v25, v27, 0LL);

  id v29 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v28));
  return v29;
}

id sub_1003F8DB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    uint64_t v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanOrEqualToValue:",  @"transaction_status_changed_date",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003F8E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    uint64_t v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanOrEqualToValue:",  @"transaction_status_changed_date",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003F9394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = objc_opt_self(a1);
  id v6 = sub_1003F6C2C(v5, a2, 0);
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v15 = v7;
  id v8 = sub_1003F6864(v5, a3);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v16 = v9;
  id v10 = sub_1003F4844(v5, 0);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  __int128 v17 = v11;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 3LL));

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v12,  v15,  v16));
  return v13;
}

id sub_1003F9624(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  if ([v3 count])
  {
    uint64_t v5 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v3 count]);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v6 = v3;
    id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v16;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = sub_1003F65C0( v4,  (uint64_t)objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * (void)v10), "integerValue", (void)v15));
          id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          -[NSMutableArray addObject:](v5, "addObject:", v12);

          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v8);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v5));
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v13;
}

id sub_1003F9A0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = sub_100406B2C(v4, *(void **)(*((void *)&v16 + 1) + 8LL * (void)v10));
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        -[NSMutableArray addObject:](v5, "addObject:", v12, (void)v16);

        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v8);
  }

  if (-[NSMutableArray count](v5, "count")) {
    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v5));
  }
  else {
    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }
  uint64_t v14 = (void *)v13;

  return v14;
}

id sub_1003F9DEC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"peer_payment_type",  v3));

  return v4;
}

id sub_1003F9F90(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"plantains.a",  v3));

  return v4;
}

id sub_1003FA134(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"maps_merchant.identifier",  v3));

  return v4;
}

id sub_1003FA554(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if ([v3 hasMapsMatch] && (objc_msgSend(v3, "useRawMerchantData") & 1) == 0)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v3 mapsMerchant]);
    id v16 = [v15 identifier];

    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v3 mapsBrand]);
    id v18 = [v17 identifier];

    if (v16)
    {
      id v19 = sub_1003FA134(v4, (uint64_t)v16);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      -[NSMutableArray addObject:](v6, "addObject:", v20);
    }

    if (v18)
    {
      id v21 = sub_1003F9F90(v4, (uint64_t)v18);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v21);
      -[NSMutableArray addObject:](v6, "addObject:", v12);
      goto LABEL_11;
    }
  }

  else
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 rawName]);

    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 rawName]);
      id v9 = sub_100406924(v4, v8);
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      -[NSMutableArray addObject:](v6, "addObject:", v10);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);

    if (v11)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
      id v13 = sub_1003F824C(v4, v12);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      -[NSMutableArray addObject:](v6, "addObject:", v14);

LABEL_11:
    }
  }

  if (-[NSMutableArray count](v6, "count"))
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v6));
    -[NSMutableArray addObject:](v5, "addObject:", v22);
  }

  uint64_t v23 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
  if ([v3 hasMapsMatch] && (objc_msgSend(v3, "useRawMerchantData") & 1) == 0)
  {
    id v25 = sub_100400234(v4);
    id v53 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v57[0] = v53;
    id v52 = (void *)objc_claimAutoreleasedReturnValue([v3 mapsBrand]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v52 name]);
    id v27 = sub_100406AD8(v4, v26);
    unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v57[1] = v28;
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v3 mapsMerchant]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 name]);
    id v31 = sub_100406A84(v4, v30);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    v57[2] = v32;
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v57, 3LL));
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v33));

    uint64_t v23 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
  }

  else
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v3 rawCANL]);

  if (v34)
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v3 rawCANL]);
    id v36 = sub_100406978(v4, v35);
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    v56[0] = v37;
    v56[1] = v24;
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v23[360] arrayWithObjects:v56 count:2]);
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v38));
    -[NSMutableArray addObject:](v5, "addObject:", v39);
  }

  if ((uint64_t)[v3 adamIdentifier] >= 1)
  {
    id v40 = sub_1004069CC(v4, (uint64_t)[v3 adamIdentifier]);
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v55[0] = v41;
    v55[1] = v24;
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v23[360] arrayWithObjects:v55 count:2]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v42));
    -[NSMutableArray addObject:](v5, "addObject:", v43);
  }

  id v44 = (void *)objc_claimAutoreleasedReturnValue([v3 webMerchantIdentifier]);

  if (v44)
  {
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v3 webMerchantIdentifier]);
    id v46 = sub_100406A30(v4, v45);
    __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
    v54[0] = v47;
    v54[1] = v24;
    id v48 = (void *)objc_claimAutoreleasedReturnValue([v23[360] arrayWithObjects:v54 count:2]);
    id v49 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v48));
    -[NSMutableArray addObject:](v5, "addObject:", v49);
  }

  if (-[NSMutableArray count](v5, "count")) {
    id v50 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v5));
  }
  else {
    id v50 = 0LL;
  }

  return v50;
}

uint64_t sub_1003FB018(void *a1, sqlite3_stmt *a2)
{
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, 1, v5);
    int v6 = 2;
  }

  else
  {
    int v6 = 1;
  }

  id v7 = (void *)a1[5];
  if (v7)
  {
    [v7 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, v6++, v8);
  }

  id v9 = (void *)a1[6];
  if (v9) {
    sqlite3_bind_int64(a2, v6, (sqlite3_int64)[v9 persistentID]);
  }
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v11 = (void *)a1[7];
      id v12 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      [v11 addObject:v12];

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_1003FB318(void *a1, sqlite3_stmt *a2)
{
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, 1, v5);
    int v6 = 2;
  }

  else
  {
    int v6 = 1;
  }

  id v7 = (void *)a1[5];
  if (v7)
  {
    [v7 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, v6++, v8);
  }

  id v9 = (void *)a1[6];
  if (v9) {
    sqlite3_bind_int64(a2, v6++, (sqlite3_int64)[v9 persistentID]);
  }
  sqlite3_bind_int64(a2, v6, a1[8]);
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v11 = (void *)a1[7];
      id v12 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      [v11 addObject:v12];

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

id sub_1003FB690(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  uint64_t v4 = v3;
  if (a2)
  {
    id v5 = sub_100406DD4(v3, a2);
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = sub_100406CC0(v4, a2);
    double v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v33[0] = v8;
    id v9 = sub_100406DD4(v4, 0LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v33[1] = v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v33, 2LL));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v11));

    id v13 = sub_100406C5C(v4, a2);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v32[0] = v14;
    id v15 = sub_100406CC0(v4, 0LL);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v32[1] = v16;
    id v17 = sub_100406DD4(v4, 0LL);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v32[2] = v18;
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v32, 3LL));
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v19));

    v31[0] = v6;
    v31[1] = v12;
    v31[2] = v20;
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v31, 3LL));
    uint64_t v22 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v21));
  }

  else
  {
    id v23 = sub_100406DD4(v3, 0LL);
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v23);
    unsigned int v28 = v6;
    id v24 = sub_100406CC0(v4, 0LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v24);
    id v29 = v12;
    id v25 = sub_100406C5C(v4, 0LL);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v25);
    id v30 = v20;
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 3LL));
    uint64_t v22 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v21,  v28,  v29));
  }

  id v26 = (void *)v22;

  return v26;
}

void sub_1003FBE78(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v9 = *a4;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v7 = v9;
  if (v9 != (id)v6)
  {
    double v8 = (void *)v6;
    id v10 = *a4;

    if (!v10) {
      return;
    }
    [*(id *)(a1 + 32) addObject:v10];
    id v7 = v10;
  }
}

id sub_1003FC134(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    uint64_t v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanOrEqualToValue:",  @"grapes.d",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003FC1C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    uint64_t v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanOrEqualToValue:",  @"grapes.d",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003FC24C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ad",  v3));

  return v4;
}

id sub_1003FC2B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [(id)objc_opt_self(a1) predicateForRequest:v5];
  double v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v17 = @"transaction_date";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  id v10 = [v5 dateOrder];
  id v11 = SQLiteOrderAscending;
  if (v10 != (id)-1LL) {
    id v11 = &SQLiteOrderDescending;
  }
  id v16 = *v11;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
  id v13 = [v5 limit];

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:orderingProperties:orderingDirections:limit:]( &OBJC_CLASS___PaymentTransaction,  "queryWithDatabase:predicate:orderingProperties:orderingDirections:limit:",  v6,  v8,  v9,  v12,  v13));
  return v14;
}

void sub_1003FC4C0(uint64_t a1, void *a2, void **a3, void *a4, void *a5, void *a6)
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = (void *)objc_opt_self(a1);
  id v15 = v14;
  if (a2) {
    *a2 = [v14 countInDatabase:v13 predicate:v12];
  }
  if (a3 && v11)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"transaction_status",  &off_100690968));
    v28[0] = v12;
    v28[1] = v16;
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v28, 2LL));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v17));

    id v19 = (void *)objc_claimAutoreleasedReturnValue([v15 sumForProperty:@"amount" predicate:v18 database:v13]);
    id v20 = v19;
    if (v19) {
      id v21 = v19;
    }
    else {
      id v21 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
    }
    uint64_t v22 = v21;

    uint64_t v23 = PKCurrencyStorageNumberToCurrencyDecimal(v22);
    id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = PKCurrencyAmountMake(v24, v11);
    uint64_t v26 = objc_claimAutoreleasedReturnValue(v25);
    id v27 = *a3;
    *a3 = (void *)v26;
  }
}

LABEL_62:
  if (v140)
  {
    __int128 v83 = (void *)objc_claimAutoreleasedReturnValue([v140 currency]);
    __int16 v84 = sub_1003FD8B0((uint64_t)a1, v83);
    id v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
    -[NSMutableArray addObject:](v45, "addObject:", v85);

    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v140 amount]);
    __int128 v87 = sub_1003FD904((uint64_t)a1, v86, (uint64_t)v129);
    __int128 v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
    -[NSMutableArray addObject:](v45, "addObject:", v88);

    __int128 v89 = (void *)v141;
  }

  else
  {
    __int128 v89 = (void *)v141;
    if (!v138) {
      goto LABEL_67;
    }
    uint64_t v90 = sub_1003FD8B0((uint64_t)a1, v138);
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(v90);
    -[NSMutableArray addObject:](v45, "addObject:", v86);
  }

LABEL_67:
  if ([v145 count])
  {
    __int128 v91 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    __int128 v92 = v145;
    __int128 v93 = [v92 countByEnumeratingWithState:&v160 objects:v185 count:16];
    if (v93)
    {
      __int128 v94 = v93;
      __int128 v95 = *(void *)v161;
      do
      {
        for (iunint64_t i = 0LL; ii != v94; iunint64_t i = (char *)ii + 1)
        {
          if (*(void *)v161 != v95) {
            objc_enumerationMutation(v92);
          }
          __int128 v97 = sub_1003FDB44((uint64_t)a1, *(void **)(*((void *)&v160 + 1) + 8LL * (void)ii));
          __int128 v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
          -[NSMutableArray addObject:](v91, "addObject:", v98);
        }

        __int128 v94 = [v92 countByEnumeratingWithState:&v160 objects:v185 count:16];
      }

      while (v94);
    }

    __int128 v99 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v91));
    id v45 = v151;
    -[NSMutableArray addObject:](v151, "addObject:", v99);

    id v58 = (void *)v149;
    id v57 = v150;
    __int128 v89 = (void *)v141;
  }

  if (v133)
  {
    __int128 v100 = sub_1003F9DEC((uint64_t)a1, (uint64_t)v133);
    __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
    -[NSMutableArray addObject:](v45, "addObject:", v101);
  }

  if (v134)
  {
    __int128 v102 = sub_1003FDD3C((uint64_t)a1, (uint64_t)v134);
    uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
    -[NSMutableArray addObject:](v45, "addObject:", v103);
  }

  if (v135)
  {
    __int128 v104 = sub_1003FDDA0((uint64_t)a1, (uint64_t)v135);
    __int128 v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
    -[NSMutableArray addObject:](v45, "addObject:", v105);
  }

  __int128 v106 = v132;
  if (v142 && v132)
  {
    __int128 v107 = sub_1003FDE04((uint64_t)a1, v142, (uint64_t)v132);
    __int128 v108 = (void *)objc_claimAutoreleasedReturnValue(v107);
    -[NSMutableArray addObject:](v45, "addObject:", v108);
  }

  if (v131)
  {
    __int128 v109 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:notEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:notEqualToValue:",  @"tomatoes.g",  &off_1006908F0));
    -[NSMutableArray addObject:](v45, "addObject:", v109);
  }

  if (v89)
  {
    __int128 v110 = sub_1003FDEC8((uint64_t)a1, v89);
    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
    -[NSMutableArray addObject:](v45, "addObject:", v111);
  }

  if (objc_msgSend(v143, "count", v106))
  {
    __int128 v112 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v156 = 0u;
    id v157 = 0u;
    objc_super v158 = 0u;
    v159 = 0u;
    __int128 v113 = v143;
    __int128 v114 = [v113 countByEnumeratingWithState:&v156 objects:v184 count:16];
    if (v114)
    {
      v115 = v114;
      v116 = *(void *)v157;
      do
      {
        for (jj = 0LL; jj != v115; jj = (char *)jj + 1)
        {
          if (*(void *)v157 != v116) {
            objc_enumerationMutation(v113);
          }
          v118 = sub_1003FDF1C( (uint64_t)a1,  (uint64_t)[*(id *)(*((void *)&v156 + 1) + 8 * (void)jj) integerValue]);
          __int16 v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
          -[NSMutableArray addObject:](v112, "addObject:", v119);
        }

        v115 = [v113 countByEnumeratingWithState:&v156 objects:v184 count:16];
      }

      while (v115);
    }

    v120 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v112));
    id v45 = v151;
    -[NSMutableArray addObject:](v151, "addObject:", v120);

    id v58 = (void *)v149;
    id v57 = v150;
    __int128 v89 = (void *)v141;
  }

  if (v144)
  {
    __int16 v121 = sub_1003F8DB0((uint64_t)a1, v144);
    v122 = (void *)objc_claimAutoreleasedReturnValue(v121);
    -[NSMutableArray addObject:](v45, "addObject:", v122);
  }

  if (v58)
  {
    __int16 v123 = sub_1003F8E3C((uint64_t)a1, v58);
    v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
    -[NSMutableArray addObject:](v45, "addObject:", v124);
  }

  v125 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v45));

  return v125;
}

id sub_1003FD728(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"transaction_source",  v3));
  v10[0] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"a",  v5));
  v10[1] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v10, 2LL));
  double v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v7));

  return v8;
}

id sub_1003FD85C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"world_region_left.identifier",  v3));

  return v4;
}

id sub_1003FD8B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"currency_code",  v3));

  return v4;
}

id sub_1003FD904(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  objc_opt_self(a1);
  uint64_t v6 = PKCurrencyDecimalToStorageNumber(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  double v8 = -[NSDecimalNumber initWithInt:](objc_alloc(&OBJC_CLASS___NSDecimalNumber), "initWithInt:", 0xFFFFFFFFLL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 decimalNumberByMultiplyingBy:v8]);

  uint64_t v10 = PKCurrencyDecimalToStorageNumber(v9);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  if (a3 == 1)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanValue:",  @"amount",  v11));
    v20[0] = v12;
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanValue:",  @"amount",  v7));
    v20[1] = v13;
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 2LL));
    uint64_t v16 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v15));
  }

  else
  {
    if (a3 == -1)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanValue:",  @"amount",  v7));
      v21[0] = v12;
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanValue:",  @"amount",  v11));
      v21[1] = v13;
      uint64_t v14 = v21;
    }

    else
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"amount",  v7));
      v19[0] = v12;
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"amount",  v11));
      v19[1] = v13;
      uint64_t v14 = v19;
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
    uint64_t v16 = objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v15));
  }

  id v17 = (void *)v16;

  return v17;
}

id sub_1003FDB44(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedTitle]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v3 type]));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_transaction_tag.type",  v5));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedTitle", v6));
    double v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_transaction_tag.localized_title",  v7));
    v15[1] = v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 localeIdentifier]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_transaction_tag.locale_identifier",  v9));
    void v15[2] = v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v15, 3LL));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v11));
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v3 type]));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"payment_transaction_tag.type",  v13));
  }

  return v12;
}

id sub_1003FDD3C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"top_up_type",  v3));

  return v4;
}

id sub_1003FDDA0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ca",  v3));

  return v4;
}

id sub_1003FDE04(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  objc_opt_self(a1);
  if (a3 == 1)
  {
    uint64_t v6 = @"eligible_eligible_rewards_percent_aggregate";
  }

  else
  {
    if (a3 != 2)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
      goto LABEL_7;
    }

    uint64_t v6 = @"eligible_rewards_cash_aggregate";
  }

  id v7 = +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  PKCurrencyDecimalToStorageInteger(v5));
  double v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  v6,  v8));

LABEL_7:
  return v9;
}

id sub_1003FDEC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"zm",  v3));

  return v4;
}

id sub_1003FDF1C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"zucchini.m",  v3));

  return v4;
}

id sub_1003FE3A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"o",  v3));

  return v4;
}

id sub_1003FE550(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v2 = (void *)_SQLValueForDate(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanOrEqualToValue:",  @"mangos.c",  v2));

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"mangos.c"));
  v12[0] = v3;
  v12[1] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v12, 2LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v5));

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"mangos.d",  &__kCFBooleanFalse));
  v11[0] = v6;
  v11[1] = v7;
  double v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v8));

  return v9;
}

BOOL sub_1003FE6C8(id a1, PKPaymentTransaction *a2, BOOL *a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction unansweredQuestions](a2, "unansweredQuestions", a3));
  BOOL v4 = [v3 count] != 0;

  return v4;
}

id sub_1003FE7C4(uint64_t a1, int a2)
{
  uint64_t v2 = objc_opt_self(a1);
  id v3 = sub_1003F65C0(v2, 0LL);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v54[0] = v4;
  id v5 = sub_1003F65C0(v2, 1LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v54[1] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v54, 2LL));
  id v46 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v7));

  id v8 = sub_1003FD728(v2, 1LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v53[0] = v9;
  id v10 = sub_1003FD728(v2, 5LL);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v53[1] = v11;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v53, 2LL));
  id v45 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v12));

  objc_opt_self(v2);
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"maps_merchant_pid"));
  v52[0] = v13;
  objc_opt_self(v2);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"location_latitude"));
  v52[1] = v14;
  id v15 = sub_1003FEF5C(v2);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  void v52[2] = v16;
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v52, 3LL));
  id v44 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v17));

  id v18 = &OBJC_CLASS___SQLitePropertyPredicate;
  id v19 = sub_1003F57A4(v2, 1LL);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v51[0] = v20;
  id v21 = sub_1003F57A4(v2, 2LL);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v51[1] = v22;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v51, 2LL));
  id v43 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v23));

  objc_opt_self(v2);
  if (a2)
  {
    id v42 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"world_region_mapping_left.world_region_pid"));
    v50[0] = v42;
    id v40 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanValue:",  @"world_region_mapping_left.match_try_count",  &off_100690920));
    v49[0] = v40;
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"world_region_mapping_left.match_try_count"));
    v49[1] = v39;
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v49, 2LL));
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v38));
    v50[1] = v37;
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -82800.0));
    uint64_t v25 = (void *)_SQLValueForDate(v24);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanValue:",  @"world_region_mapping_left.last_modified_date",  v25));
    v48[0] = v26;
    id v27 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"world_region_mapping_left.last_modified_date"));
    v48[1] = v27;
    unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v48, 2LL));
    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v28));
    v50[2] = v29;
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v50, 3LL));
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v30));

    id v18 = &OBJC_CLASS___SQLitePropertyPredicate;
  }

  else
  {
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"world_region_mapping_left.world_region_pid"));
  }

  v47[0] = v46;
  v47[1] = v45;
  v47[2] = v44;
  v47[3] = v31;
  v47[4] = v43;
  id v32 = sub_1003FF038(v2);
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  v47[5] = v33;
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v47, 6LL));
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([&v18[10] predicateMatchingAllPredicates:v34]);

  return v35;
}

void sub_1003FEEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withPID:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withPID:",  v3,  v5));
  [v2 addObject:v4];
}

id sub_1003FEF5C(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"j"));
  v6[0] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"i"));
  v6[1] = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v6, 2LL));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v3));

  return v4;
}

id sub_1003FF038(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"processed_for_location",  &__kCFBooleanTrue));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"processed_for_stations",  &__kCFBooleanTrue,  v1));
  v7[1] = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"processed_for_merchant_cleanup",  &__kCFBooleanTrue));
  v7[2] = v3;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v7, 3LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v4));

  return v5;
}

id sub_1003FF53C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if ([v3 length])
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%%", v3));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteStringLikePredicate predicateWithProperty:matchingPattern:]( &OBJC_CLASS___SQLiteStringLikePredicate,  "predicateWithProperty:matchingPattern:",  @"world_region_localized_content.name",  v4));

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%% %@%%", v3));
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteStringLikePredicate predicateWithProperty:matchingPattern:]( &OBJC_CLASS___SQLiteStringLikePredicate,  "predicateWithProperty:matchingPattern:",  @"world_region_localized_content.name",  v6));

    v11[0] = v5;
    v11[1] = v7;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v8));
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v9;
}

id sub_1003FF6A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"world_region_localized_content.locale_identifier",  v3));

  return v4;
}

id sub_1003FF6FC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"world_region.type",  v3));

  return v4;
}

id *sub_1003FF760(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id sub_1003FF89C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"n",  v3));

  return v4;
}

id sub_1003FFA30(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    BOOL v4 = (void *)_SQLValueForDate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanValue:",  @"transaction_date",  v4));
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[SQLiteBooleanPredicate truePredicate](&OBJC_CLASS___SQLiteBooleanPredicate, "truePredicate"));
  }

  return v5;
}

id sub_1003FFB18(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"receipt_provider_identifier"));
  v6[0] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"receipt_identifier"));
  v6[1] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v6, 2LL));

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v3));
  return v4;
}

void sub_1003FFD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  else {
    id v8 = *(void **)a4;
  }
  id v15 = v8;

  id v9 = *(void **)(a4 + 8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  else {
    id v11 = *(void **)(a4 + 8);
  }
  id v12 = v11;

  uint64_t v13 = PKGenerateTransactionReceiptUniqueID(v15, v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  [*(id *)(a1 + 32) addObject:v14];
}

id sub_1004001D0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"requires_merchant_reprocessing",  v3));

  return v4;
}

id sub_100400234(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"maps_merchant_pid"));
  v6[0] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"u"));
  v6[1] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v6, 2LL));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v3));

  return v4;
}

id sub_100400310(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"last_merchant_reprocessing_date"));
  id v5 = (void *)_SQLValueForDate(v3);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:lessThanOrEqualToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:lessThanOrEqualToValue:",  @"last_merchant_reprocessing_date",  v5));
  v10[0] = v4;
  v10[1] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v10, 2LL));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v7));

  return v8;
}

void sub_100400594(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v44 = a2;
  id v46 = a3;
  id v9 = a5;
  uint64_t v10 = objc_opt_self(a1);
  if (v9)
  {
    id v11 = (void *)v10;
    id v42 = v9;
    uint64_t v65 = 0LL;
    id v66 = &v65;
    uint64_t v67 = 0x2020000000LL;
    uint64_t v68 = a4;
    uint64_t v61 = 0LL;
    __int128 v62 = &v61;
    uint64_t v63 = 0x2020000000LL;
    char v64 = 1;
    id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v39 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    id v15 = v44;
    id v16 = [v15 countByEnumeratingWithState:&v57 objects:v72 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v58;
      do
      {
        id v18 = 0LL;
        do
        {
          if (*(void *)v58 != v17) {
            objc_enumerationMutation(v15);
          }
          id v19 = sub_1003F5750((uint64_t)v11, *(void **)(*((void *)&v57 + 1) + 8LL * (void)v18));
          id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          -[NSMutableArray addObject:](v14, "addObject:", v20);

          id v18 = (char *)v18 + 1;
        }

        while (v16 != v18);
        id v16 = [v15 countByEnumeratingWithState:&v57 objects:v72 count:16];
      }

      while (v16);
    }

    id v45 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v66[3]));
    id v22 = sub_100400AF0((uint64_t)v11, v21);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    -[NSMutableArray addObject:](v45, "addObject:", v23);

    if (-[NSMutableArray count](v14, "count"))
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v14));
      -[NSMutableArray addObject:](v45, "addObject:", v24);
    }

    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v45));
    unint64_t v71 = @"pid";
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v71, 1LL));
    id v70 = @"ASC";
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v70, 1LL));
    id v43 = (void *)objc_claimAutoreleasedReturnValue( [v11 queryWithDatabase:v46 predicate:v41 orderingProperties:v25 orderingDirections:v26 limit:100]);

    id v69 = @"identifier";
    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v69, 1LL));
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472LL;
    void v51[2] = sub_100400B44;
    v51[3] = &unk_10065D4B8;
    __int128 v56 = &v65;
    unsigned int v28 = (id *)v46;
    id v52 = v28;
    id v40 = v12;
    id v53 = v40;
    id v29 = v13;
    id v54 = v29;
    id v30 = v39;
    __int128 v55 = v30;
    [v43 enumeratePersistentIDsAndProperties:v27 usingBlock:v51];

    BOOL v31 = [v43 countOfEntities] == (id)100;
    *((_BYTE *)v62 + 24) = v31;
    id v32 = -[NSMutableArray copy](v40, "copy");
    id v33 = -[NSMutableArray copy](v29, "copy");
    id v34 = -[NSMutableArray copy](v30, "copy");
    int v35 = *((unsigned __int8 *)v62 + 24);
    if (*((_BYTE *)v62 + 24))
    {
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      v47[2] = sub_100400CC4;
      v47[3] = &unk_10065D4E0;
      v50[1] = &v61;
      void v50[3] = v11;
      id v36 = v47;
      __int128 v38 = &v48;
      id v48 = v15;
      __int128 v39 = (NSMutableArray *)&v49;
      id v49 = v28;
      v50[2] = &v65;
      unsigned int v28 = (id *)v50;
      __int128 v37 = v42;
      v50[0] = v42;
    }

    else
    {
      id v36 = 0LL;
      __int128 v37 = v42;
    }

    v37[2](v37, v32, v33, v34, v35 != 0, v36);

    if (v35)
    {
    }

    _Block_object_dispose(&v61, 8);
    _Block_object_dispose(&v65, 8);
    id v9 = v42;
  }
}

void sub_100400AA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

id sub_100400AF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:greaterThanValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:greaterThanValue:",  @"pid",  v3));

  return v4;
}

void sub_100400B44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = a2;
  id v18 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentTransaction),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentTransaction passUniqueIdentifier](v18, "passUniqueIdentifier"));
  uint64_t v7 = objc_claimAutoreleasedReturnValue(-[PaymentTransaction accountIdentifier](v18, "accountIdentifier"));
  id v8 = (void *)v7;
  id v9 = &stru_100662310;
  if (v7) {
    id v9 = (__CFString *)v7;
  }
  uint64_t v10 = v9;

  if (v6) {
    goto LABEL_4;
  }
  if ((id)-[PaymentTransaction accountType](v18, "accountType") == (id)2)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentTransaction transactionSourceIdentifier](v18, "transactionSourceIdentifier"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource anyInDatabase:withIdentifier:]( &OBJC_CLASS___TransactionSource,  "anyInDatabase:withIdentifier:",  v11,  v12));
    id v14 = [v13 type];

    if (v14 == (id)2)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentTransaction accountIdentifier](v18, "accountIdentifier"));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withAssociatedAccountIdentifier:]( &OBJC_CLASS___Pass,  "anyInDatabase:withAssociatedAccountIdentifier:",  v15,  v16));

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v17 uniqueID]);
      if (v6)
      {
LABEL_4:
        [*(id *)(a1 + 40) addObject:*a4];
        [*(id *)(a1 + 48) addObject:v6];
        [*(id *)(a1 + 56) addObject:v10];
      }
    }
  }
}

void *sub_100400CC4(void *result)
{
  if (*(_BYTE *)(*(void *)(result[7] + 8LL) + 24LL)) {
    return (void *)sub_100400594( result[9],  result[4],  result[5],  *(void *)(*(void *)(result[8] + 8LL) + 24LL),  result[6]);
  }
  return result;
}

id sub_100400D5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = objc_opt_self(a1);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___PaymentTransaction,  "queryWithDatabase:predicate:",  v6,  v5));

  id v9 = sub_1003F7224(v7, v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));

  return v11;
}

void sub_100400FF0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  id v3 = (void *)a1[5];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 anyInDatabase:v4 withPID:v5]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1[6]));
  [v7 setValue:v6 forProperty:@"source_pid"];
}

uint64_t sub_1004011C0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData longLongValue](v5, "longLongValue");
      uint64_t v8 = PKCurrencyStorageIntegerToCurrencyDecimal(v6, v7);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

      if (v9) {
        [*(id *)(a1 + 32) addObject:v9];
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_100401DF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_100401E34(void *a1, sqlite3_stmt *a2)
{
  uint64_t v2 = a2;
  sqlite3_bind_int64(a2, 1, 0LL);
  sqlite3_bind_int64(v2, 2, 14LL);
  sqlite3_bind_int64(v2, 3, 1LL);
  sqlite3_bind_int64(v2, 4, 2LL);
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(v2, 5, v5);
    int v6 = 6;
  }

  else
  {
    int v6 = 5;
  }

  uint64_t v7 = (void *)a1[5];
  if (v7)
  {
    [v7 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(v2, v6++, v8);
  }

  sqlite3_bind_int64(v2, v6, 1LL);
  sqlite3_int64 v9 = PKCurrencyDecimalToStorageInteger(a1[6]);
  sqlite3_bind_int64(v2, v6 + 1, v9);
  sqlite3_bind_int64(v2, v6 + 2, 5LL);
  sqlite3_bind_int64(v2, v6 + 3, 1LL);
  sqlite3_int64 v10 = PKCurrencyDecimalToStorageInteger(a1[7]);
  sqlite3_bind_int64(v2, v6 + 4, v10);
  sqlite3_bind_int64(v2, v6 + 5, 2LL);
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, v2);
  if ((_DWORD)result)
  {
    id v40 = v2;
    __int128 v41 = a1;
    while (1)
    {
      id v12 = SQLiteCopyFoundationValueForStatementColumn(v2, 0);
      uint64_t v13 = v12;
      if (v12 == (NSData *)a1[8])
      {
        uint64_t v15 = 0LL;
      }

      else
      {
        uint64_t v14 = PKCurrencyStorageNumberToCurrencyDecimal(v12);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      }

      id v16 = SQLiteCopyFoundationValueForStatementColumn(v2, 1);
      uint64_t v17 = SQLiteCopyFoundationValueForStatementColumn(v2, 2);
      id v43 = v17;
      id v44 = v13;
      if (v17 == (NSData *)a1[8])
      {
        id v19 = 0LL;
      }

      else
      {
        uint64_t v18 = PKCurrencyStorageNumberToCurrencyDecimal(v17);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      }

      id v20 = SQLiteCopyFoundationValueForStatementColumn(v2, 3);
      id v21 = SQLiteCopyFoundationValueForStatementColumn(v2, 4);
      id v42 = v16;
      id v22 = (char *)-[NSData integerValue](v16, "integerValue");
      uint64_t v23 = v20;
      id v24 = -[NSData integerValue](v20, "integerValue");
      uint64_t v25 = v21;
      LODWORD(v21) = -[NSData BOOLValue](v21, "BOOLValue");
      a1 = v41;
      unsigned int v26 = [v19 isEqualToNumber:v41[6]];
      unsigned int v27 = [v19 isEqualToNumber:v41[7]];
      unsigned int v28 = [v19 isEqualToNumber:v41[9]];
      if ((_DWORD)v21)
      {
        uint64_t v29 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v41[10] + 8) + 40) decimalNumberByAdding:v15]);
        uint64_t v30 = v41[10];
        goto LABEL_16;
      }

      if (v24 != (id)1) {
        break;
      }
      if ((unint64_t)(v22 - 1) < 3)
      {
        if (v26)
        {
          a1 = v41;
          uint64_t v29 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v41[12] + 8) + 40) decimalNumberByAdding:v15]);
          uint64_t v30 = v41[12];
          goto LABEL_16;
        }

        if (v27)
        {
          a1 = v41;
          uint64_t v29 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v41[13] + 8) + 40) decimalNumberByAdding:v15]);
          uint64_t v30 = v41[13];
LABEL_16:
          uint64_t v31 = *(void *)(v30 + 8);
          id v32 = *(void **)(v31 + 40);
          *(void *)(v31 + 40) = v29;
          id v34 = v43;
          id v33 = v44;
          int v35 = v42;
          uint64_t v2 = v40;
LABEL_26:

          goto LABEL_27;
        }

        id v34 = v43;
        id v33 = v44;
        a1 = v41;
        int v35 = v42;
        uint64_t v2 = v40;
        if (v28)
        {
          uint64_t v37 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v41[10] + 8) + 40) decimalNumberByAdding:v15]);
          uint64_t v38 = v41[10];
          goto LABEL_25;
        }

LABEL_91:
  v124 = (void *)objc_claimAutoreleasedReturnValue([v122 merchant]);
  if ([v124 isValid])
  {
    if ((v96 & 1) != 0)
    {

      v125 = v274;
    }

    else
    {
      v127 = sub_10040425C(self);

      v125 = v274;
      if (v127) {
        goto LABEL_99;
      }
    }

    v124 = (void *)objc_claimAutoreleasedReturnValue([v125 merchant]);
    -[PaymentTransaction updateWithMerchant:](self, "updateWithMerchant:", v124);
  }

  v125 = v274;
LABEL_99:
  uint64_t v128 = (void *)objc_claimAutoreleasedReturnValue([v125 serviceIdentifier]);
  if (v128) {
    v129 = v96;
  }
  else {
    v129 = 0;
  }

  if (v129 == 1)
  {
    v130 = (void *)objc_claimAutoreleasedReturnValue([v274 serviceIdentifier]);
    [v4 setObjectOrNull:v130 forKey:@"service_identifier"];
  }

  objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "peerPaymentType"), @"peer_payment_type");
  v131 = (void *)objc_claimAutoreleasedReturnValue([v274 peerPaymentCounterpartHandle]);
  [v4 setObjectOrNull:v131 forKey:@"peer_payment_counterpart_handle"];

  [v4 setObjectOrNull:v269 forKey:@"peer_payment_memo"];
  objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "peerPaymentPaymentMode"), @"ca");
  [v4 setObjectOrNull:v268 forKey:@"cb"];
  v132 = (void *)objc_claimAutoreleasedReturnValue( -[SQLiteEntity valueForProperty:]( self,  "valueForProperty:",  @"peer_payment_message_received_date"));
  v133 = (void *)_DateForSQLValue(v132);

  v134 = (void *)objc_claimAutoreleasedReturnValue([v274 peerPaymentMessageReceivedDate]);
  v238 = v133;
  if (v134)
  {
    v135 = (id)objc_claimAutoreleasedReturnValue([v274 peerPaymentMessageReceivedDate]);
  }

  else
  {
    v135 = v133;
  }

  v236 = v135;
  [v4 setObjectOrNull:v135 forKey:@"peer_payment_message_received_date"];
  v136 = (void *)objc_claimAutoreleasedReturnValue([v274 amounts]);
  sub_1003F3190(self, v136);

  id v137 = (void *)objc_claimAutoreleasedReturnValue([v274 plans]);
  sub_1003F3220(self, v137);

  v138 = (void *)objc_claimAutoreleasedReturnValue([v274 fees]);
  sub_1003F32B0(self, v138);

  v139 = (void *)objc_claimAutoreleasedReturnValue([v274 rewards]);
  v140 = (void *)objc_claimAutoreleasedReturnValue([v274 rewardsInProgress]);
  sub_1003F3320(self, v139, v140);

  v141 = (void *)objc_claimAutoreleasedReturnValue([v274 questions]);
  sub_1003F33D4(self, v141);

  sub_1003F3444(self, v274);
  sub_1003F34D8(self, v274);
  v142 = (void *)objc_claimAutoreleasedReturnValue([v274 foreignExchangeInformation]);
  v143 = v142;
  if (v142)
  {
    v144 = (void *)objc_claimAutoreleasedReturnValue([v142 destinationCurrencyAmount]);
    v145 = (void *)objc_claimAutoreleasedReturnValue([v144 amount]);
    v146 = PKCurrencyDecimalToStorageNumber(v145);
    v147 = (void *)objc_claimAutoreleasedReturnValue(v146);

    [v4 setObjectOrNull:v147 forKey:@"foreign_exchange_information_destination_amount"];
    v148 = (void *)objc_claimAutoreleasedReturnValue([v143 destinationCurrencyAmount]);
    id v149 = (void *)objc_claimAutoreleasedReturnValue([v148 currency]);
    [v4 setObjectOrNull:v149 forKey:@"foreign_exchange_information_destination_currency_code"];

    v150 = (void *)objc_claimAutoreleasedReturnValue([v143 exchangeRate]);
    v151 = (void *)objc_claimAutoreleasedReturnValue([v150 stringValue]);
    [v4 setObjectOrNull:v151 forKey:@"foreign_exchange_information_exchange_rate"];
  }

  v152 = (void *)objc_claimAutoreleasedReturnValue([v274 primaryFundingSourceAmount]);
  v153 = PKCurrencyDecimalToStorageNumber(v152);
  v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
  [v4 setObjectOrNull:v154 forKey:@"primary_funding_source_amount"];

  v155 = (void *)objc_claimAutoreleasedReturnValue([v274 primaryFundingSourceCurrencyCode]);
  [v4 setObjectOrNull:v155 forKey:@"primary_funding_source_currency_code"];

  v156 = (void *)objc_claimAutoreleasedReturnValue([v274 secondaryFundingSourceAmount]);
  id v157 = PKCurrencyDecimalToStorageNumber(v156);
  objc_super v158 = (void *)objc_claimAutoreleasedReturnValue(v157);
  [v4 setObjectOrNull:v158 forKey:@"secondary_funding_source_amount"];

  v159 = (void *)objc_claimAutoreleasedReturnValue([v274 secondaryFundingSourceCurrencyCode]);
  [v4 setObjectOrNull:v159 forKey:@"secondary_funding_source_currency_code"];

  objc_msgSend( v4,  "setInteger:forKey:",  objc_msgSend(v274, "secondaryFundingSourceNetwork"),  @"secondary_funding_source_network");
  v160 = (void *)objc_claimAutoreleasedReturnValue([v274 secondaryFundingSourceDPANSuffix]);
  [v4 setObjectOrNull:v160 forKey:@"secondary_funding_source_dpan_suffix"];

  [v4 setObjectOrNull:v267 forKey:@"secondary_funding_source_fpan_identifier"];
  [v4 setObjectOrNull:v266 forKey:@"secondary_funding_source_description"];
  [v4 setInteger:v231 forKey:@"secondary_funding_source_type"];
  v161 = (void *)objc_claimAutoreleasedReturnValue([v274 requestDeviceScoreIdentifier]);

  if (v161)
  {
    v162 = (void *)objc_claimAutoreleasedReturnValue([v274 requestDeviceScoreIdentifier]);
    v163 = (void *)_SQLValueForUUID(v162);
    [v4 setObject:v163 forKey:@"request_device_score_identifier"];
  }

  v164 = (void *)objc_claimAutoreleasedReturnValue([v274 sendDeviceScoreIdentifier]);

  if (v164)
  {
    v165 = (void *)objc_claimAutoreleasedReturnValue([v274 sendDeviceScoreIdentifier]);
    v166 = (void *)_SQLValueForUUID(v165);
    [v4 setObject:v166 forKey:@"send_device_score_identifier"];
  }

  v167 = (void *)objc_claimAutoreleasedReturnValue([v274 rewardsTotalAmount]);
  v168 = PKCurrencyDecimalToStorageNumber(v167);
  v169 = (void *)objc_claimAutoreleasedReturnValue(v168);
  [v4 setObjectOrNull:v169 forKey:@"c"];

  v170 = (void *)objc_claimAutoreleasedReturnValue([v274 rewardsTotalCurrencyCode]);
  [v4 setObjectOrNull:v170 forKey:@"d"];

  objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "rewardsEligibilityReason"), @"e");
  objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "cardType"), @"a");
  v171 = (void *)objc_claimAutoreleasedReturnValue([v274 accountIdentifier]);
  [v4 setObjectOrNull:v171 forKey:@"account_identifier"];

  objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "accountType"), @"account_type");
  v172 = (void *)objc_claimAutoreleasedReturnValue([v274 lifecycleIdentifier]);
  [v4 setObjectOrNull:v172 forKey:@"o"];

  v173 = (void *)objc_claimAutoreleasedReturnValue([v274 authNetworkData]);
  if (v173)
  {
    v174 = (void *)objc_claimAutoreleasedReturnValue([v274 authNetworkData]);
    [v4 setObjectOrNull:v174 forKey:@"r"];
  }

  v175 = (void *)objc_claimAutoreleasedReturnValue([v274 clearingNetworkData]);

  if (v175)
  {
    v176 = (void *)objc_claimAutoreleasedReturnValue([v274 clearingNetworkData]);
    [v4 setObjectOrNull:v176 forKey:@"s"];
  }

  v177 = (void *)objc_claimAutoreleasedReturnValue([v274 cardIdentifier]);
  [v4 setObjectOrNull:v177 forKey:@"v"];

  v178 = (void *)objc_claimAutoreleasedReturnValue([v274 dpanIdentifier]);
  [v4 setObjectOrNull:v178 forKey:@"dpan_identifier"];

  objc_msgSend( v4,  "setInteger:forKey:",  objc_msgSend(v274, "paymentNetworkIdentifier"),  @"payment_network_identifier");
  v179 = (void *)objc_claimAutoreleasedReturnValue([v274 panIdentifier]);
  [v4 setObjectOrNull:v179 forKey:@"zm"];

  v180 = (void *)objc_claimAutoreleasedReturnValue([v274 isMerchantTokenTransaction]);
  [v4 setObjectOrNull:v180 forKey:@"is_merchant_token_transaction"];

  v181 = (void *)objc_claimAutoreleasedReturnValue([v274 cardNumberSuffix]);
  [v4 setObjectOrNull:v181 forKey:@"ae"];

  objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "adjustmentTypeReason"), @"w");
  v182 = (void *)objc_claimAutoreleasedReturnValue([v274 referenceIdentifier]);
  [v4 setObjectOrNull:v182 forKey:@"ab"];

  if ([v274 associatedFeatureIdentifier]) {
    objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "associatedFeatureIdentifier"), @"afi");
  }
  if ([v274 suppressBehavior]) {
    objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "suppressBehavior"), @"ac");
  }
  if ([v274 redemptionType]) {
    objc_msgSend(v4, "setInteger:forKey:", objc_msgSend(v274, "redemptionType"), @"ad");
  }
  v183 = (void *)objc_claimAutoreleasedReturnValue([v274 receiptProviderURL]);

  if (v183)
  {
    v184 = (void *)objc_claimAutoreleasedReturnValue([v274 receiptProviderURL]);
    v185 = (void *)_SQLValueForURL(v184);
    [v4 setObjectOrNull:v185 forKey:@"receipt_provider_url"];
  }

  v186 = (void *)objc_claimAutoreleasedReturnValue([v274 receiptProviderIdentifier]);

  if (v186)
  {
    v187 = (void *)objc_claimAutoreleasedReturnValue([v274 receiptProviderIdentifier]);
    [v4 setObjectOrNull:v187 forKey:@"receipt_provider_identifier"];
  }

  v188 = (void *)objc_claimAutoreleasedReturnValue([v274 receiptIdentifier]);

  if (v188)
  {
    v189 = (void *)objc_claimAutoreleasedReturnValue([v274 receiptIdentifier]);
    [v4 setObjectOrNull:v189 forKey:@"receipt_identifier"];
  }

  v190 = (void *)objc_claimAutoreleasedReturnValue([v274 barcodeIdentifier]);

  if (v190)
  {
    v191 = (void *)objc_claimAutoreleasedReturnValue([v274 barcodeIdentifier]);
    [v4 setObjectOrNull:v191 forKey:@"barcode_identifier"];
  }

  v192 = (void *)objc_claimAutoreleasedReturnValue([v274 authenticationContext]);
  if ([v192 requestedAuthenticationMechanisms]) {
    objc_msgSend( v4,  "setInteger:forKey:",  objc_msgSend(v192, "requestedAuthenticationMechanisms"),  @"requested_auth_mechanisms");
  }
  v193 = (void *)objc_claimAutoreleasedReturnValue([v192 nonce]);

  if (v193)
  {
    v194 = (void *)objc_claimAutoreleasedReturnValue([v192 nonce]);
    [v4 setObjectOrNull:v194 forKey:@"nonce"];
  }

  v195 = (void *)objc_claimAutoreleasedReturnValue([v192 signingKeyMaterial]);

  if (v195)
  {
    v196 = (void *)objc_claimAutoreleasedReturnValue([v192 signingKeyMaterial]);
    [v4 setObjectOrNull:v196 forKey:@"signing_key_material"];
  }

  v197 = (void *)objc_claimAutoreleasedReturnValue([v192 partialSignature]);

  if (v197)
  {
    v198 = (void *)objc_claimAutoreleasedReturnValue([v192 partialSignature]);
    [v4 setObjectOrNull:v198 forKey:@"partial_signature"];
  }

  v240 = v90;
  v263 = (void *)v85;
  v199 = (void *)objc_claimAutoreleasedReturnValue([v274 primaryFundingSourceDescription]);
  [v4 setObjectOrNull:v199 forKey:@"primary_funding_source_description"];

  v200 = (void *)objc_claimAutoreleasedReturnValue([v274 nominalAmount]);
  v201 = PKCurrencyDecimalToStorageNumber(v200);
  v202 = (void *)objc_claimAutoreleasedReturnValue(v201);

  [v4 setObjectOrNull:v202 forKey:@"nominal_amount"];
  objc_msgSend(v4, "setBool:forKey:", objc_msgSend(v274, "hasAdditionalOffers"), @"has_additional_offers");
  v203 = (void *)objc_claimAutoreleasedReturnValue([v274 awards]);
  sub_1003F35D0(self, v203);

  v204 = (void *)objc_claimAutoreleasedReturnValue([v274 amountModifiers]);
  sub_1003F3660(self, v204);

  v205 = (void *)objc_claimAutoreleasedReturnValue([v274 releasedData]);
  sub_1003F36F0(self, v205);

  v206 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](self, "valueForProperty:", @"iit"));
  v207 = [v206 BOOLValue];

  objc_msgSend( v4,  "setBool:forKey:",  objc_msgSend(v274, "isIssuerInstallmentTransaction") | v207,  @"iit");
  v208 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](self, "valueForProperty:", @"iimu"));
  v209 = (void *)_URLForSQLValue(v208);

  v210 = (void *)objc_claimAutoreleasedReturnValue([v274 issuerInstallmentManagementURL]);
  v234 = v92;
  if (v210)
  {
    v211 = (id)objc_claimAutoreleasedReturnValue([v274 issuerInstallmentManagementURL]);
  }

  else
  {
    v211 = v209;
  }

  v212 = (void *)_SQLValueForURL(v211);
  [v4 setObjectOrNull:v212 forKey:@"iimu"];

  objc_msgSend(v4, "setBool:forKey:", objc_msgSend(v274, "suppressNotifications"), @"suppress_notifications");
  objc_msgSend(v4, "setBool:forKey:", objc_msgSend(v274, "isRecurring"), @"recurring");
  v213 = (void *)objc_claimAutoreleasedReturnValue( -[SQLiteEntity valueForProperty:]( self,  "valueForProperty:",  @"device_score_identifiers_submitted"));
  v214 = [v213 BOOLValue];

  objc_msgSend( v4,  "setBool:forKey:",  objc_msgSend(v274, "deviceScoreIdentifiersSubmitted") | v214,  @"device_score_identifiers_submitted");
  objc_msgSend( v4,  "setBool:forKey:",  objc_msgSend(v274, "deviceScoreIdentifiersRequired"),  @"device_score_identifiers_required");
  v215 = (void *)objc_claimAutoreleasedReturnValue([v274 merchantProvidedDescription]);
  [v4 setObjectOrNull:v215 forKey:@"merchant_provided_description"];

  v216 = (void *)objc_claimAutoreleasedReturnValue([v274 merchantProvidedTitle]);
  [v4 setObjectOrNull:v216 forKey:@"merchant_provided_title"];

  v217 = (void *)objc_claimAutoreleasedReturnValue([v274 metadata]);
  if (v217)
  {
    v218 = (void *)objc_claimAutoreleasedReturnValue([v274 metadata]);
    v219 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v218,  0LL,  0LL));

    v220 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v219, 4LL);
    [v4 setObjectOrNull:v220 forKey:@"metadata"];
  }

  sub_1003F30A8((uint64_t)self, v4, v274);
  -[SQLiteEntity setValuesWithDictionary:](self, "setValuesWithDictionary:", v4);
}

BOOL sub_10040425C(void *a1)
{
  BOOL v1 = (BOOL)a1;
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"merchant_name"]);
    if (v2)
    {
      BOOL v1 = 1LL;
    }

    else
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([(id)v1 valueForProperty:@"merchant_raw_name"]);
      BOOL v1 = v3 != 0LL;
    }
  }

  return v1;
}

void sub_10040475C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10040477C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, _BYTE *a6)
{
  id result = [*a4 integerValue];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  *a6 = 1;
  return result;
}

uint64_t sub_100404C14(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mapsMerchant]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) valueForProperty:@"maps_merchant_pid"]);
  if ([v3 isValid])
  {
    double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
    int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v3 identifier]));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[MapsMerchant anyInDatabase:withIdentifier:]( &OBJC_CLASS___MapsMerchant,  "anyInDatabase:withIdentifier:",  v5,  v6));

    if (v7)
    {
      [v7 updateWithMapsMerchant:v3];
    }

    else
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[MapsMerchant insertMapsMerchant:inDatabase:]( &OBJC_CLASS___MapsMerchant,  "insertMapsMerchant:inDatabase:",  v3,  v12));
    }

    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v7 persistentID]));
    [v13 setValue:v14 forProperty:@"maps_merchant_pid"];
  }

  else if (v4)
  {
    if (((unint64_t)[*(id *)(a1 + 32) updateReasons] & 0x4010) != 0)
    {
      double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
      id v9 = sub_100404E70((uint64_t)&OBJC_CLASS___PaymentTransaction, v4, v8);

      if ((unint64_t)v9 <= 1)
      {
        sqlite3_int64 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[MapsMerchant anyInDatabase:withPID:]( &OBJC_CLASS___MapsMerchant,  "anyInDatabase:withPID:",  v10,  v4));
        [v11 deleteFromDatabase];
      }

      [*(id *)(a1 + 40) setValue:0 forProperty:@"maps_merchant_pid"];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(23LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Transaction not a maps reprocessing or CloudKit update, skip clearing merchant",  v18,  2u);
      }
    }
  }

  return 1LL;
}

id sub_100404E70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_opt_self(a1);
  id v8 = sub_1003F53E0((uint64_t)v7, v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  id v10 = [v7 countInDatabase:v5 predicate:v9];
  return v10;
}

uint64_t sub_100404EE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mapsBrand]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) valueForProperty:@"u"]);
  if ([v3 isValid])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v3 identifier]));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[MapsBrand anyInDatabase:withIdentifier:]( &OBJC_CLASS___MapsBrand,  "anyInDatabase:withIdentifier:",  v5,  v6));

    if (v7)
    {
      [v7 updateWithMapsBrand:v3];
    }

    else
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[MapsBrand insertMapsBrand:inDatabase:]( &OBJC_CLASS___MapsBrand,  "insertMapsBrand:inDatabase:",  v3,  v12));
    }

    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v7 persistentID]));
    [v13 setValue:v14 forProperty:@"u"];
  }

  else if (v4)
  {
    if (((unint64_t)[*(id *)(a1 + 32) updateReasons] & 0x4010) != 0)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
      id v9 = sub_100405144((uint64_t)&OBJC_CLASS___PaymentTransaction, v4, v8);

      if ((unint64_t)v9 <= 1)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[MapsBrand anyInDatabase:withPID:](&OBJC_CLASS___MapsBrand, "anyInDatabase:withPID:", v10, v4));
        [v11 deleteFromDatabase];
      }

      [*(id *)(a1 + 40) setValue:0 forProperty:@"u"];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(23LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Transaction not a maps reprocessing update or CloudKit update, skip clearing brand",  v18,  2u);
      }
    }
  }

  return 1LL;
}

id sub_100405144(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_opt_self(a1);
  id v8 = sub_1003F5434((uint64_t)v7, v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  id v10 = [v7 countInDatabase:v5 predicate:v9];
  return v10;
}

_BYTE *sub_1004052C4(void *a1, char a2)
{
  if (!a1) {
    return 0LL;
  }
  v43.receiver = a1;
  v43.super_class = (Class)&OBJC_CLASS___PaymentTransactionDeserializationContext;
  id v3 = objc_msgSendSuper2(&v43, "init");
  uint64_t v4 = v3;
  if (v3)
  {
    v3[8] = a2;
    uint64_t v5 = sub_10040738C((uint64_t)&OBJC_CLASS___PaymentTransaction);
    id v6 = (void *)*((void *)v4 + 4);
    *((void *)v4 + 4) = v5;

    uint64_t v7 = sub_10040929C((uint64_t)&OBJC_CLASS___PaymentTransaction);
    id v8 = (void *)*((void *)v4 + 5);
    *((void *)v4 + 5) = v7;

    uint64_t v9 = sub_10040970C((uint64_t)&OBJC_CLASS___PaymentTransaction);
    id v10 = (void *)*((void *)v4 + 6);
    *((void *)v4 + 6) = v9;

    uint64_t v11 = sub_100405F3C((uint64_t)&OBJC_CLASS___PaymentTransaction);
    id v12 = (void *)*((void *)v4 + 7);
    *((void *)v4 + 7) = v11;

    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v14 = objc_claimAutoreleasedReturnValue([*((id *)v4 + 4) allKeys]);
    uint64_t v15 = (void *)*((void *)v4 + 9);
    *((void *)v4 + 9) = v14;

    -[NSMutableArray addObjectsFromArray:](v13, "addObjectsFromArray:", *((void *)v4 + 9));
    *((void *)v4 + 10) = -[NSMutableArray count](v13, "count");
    uint64_t v16 = objc_claimAutoreleasedReturnValue([*((id *)v4 + 5) allKeys]);
    uint64_t v17 = (void *)*((void *)v4 + 11);
    *((void *)v4 + 11) = v16;

    -[NSMutableArray addObjectsFromArray:](v13, "addObjectsFromArray:", *((void *)v4 + 11));
    *((void *)v4 + 12) = -[NSMutableArray count](v13, "count");
    uint64_t v18 = objc_claimAutoreleasedReturnValue([*((id *)v4 + 6) allKeys]);
    id v19 = (void *)*((void *)v4 + 13);
    *((void *)v4 + 13) = v18;

    -[NSMutableArray addObjectsFromArray:](v13, "addObjectsFromArray:", *((void *)v4 + 13));
    *((void *)v4 + 14) = -[NSMutableArray count](v13, "count");
    uint64_t v20 = objc_claimAutoreleasedReturnValue([*((id *)v4 + 7) allKeys]);
    id v21 = (void *)*((void *)v4 + 15);
    *((void *)v4 + 15) = v20;

    -[NSMutableArray addObjectsFromArray:](v13, "addObjectsFromArray:", *((void *)v4 + 15));
    *((void *)v4 + 20) = -[NSMutableArray count](v13, "count");
    -[NSMutableArray addObject:](v13, "addObject:", @"source_pid");
    *((void *)v4 + 21) = -[NSMutableArray count](v13, "count");
    -[NSMutableArray addObject:](v13, "addObject:", @"maps_merchant_pid");
    *((void *)v4 + 22) = -[NSMutableArray count](v13, "count");
    -[NSMutableArray addObject:](v13, "addObject:", @"u");
    id v22 = -[NSMutableArray copy](v13, "copy");
    uint64_t v23 = (void *)*((void *)v4 + 8);
    *((void *)v4 + _Block_object_dispose(va, 8) = v22;

    *((void *)v4 + 16) = [*((id *)v4 + 11) indexOfObject:@"merchant_name"];
    *((void *)v4 + 17) = [*((id *)v4 + 11) indexOfObject:@"merchant_raw_name"];
    *((void *)v4 + 1_Block_object_dispose(va, 8) = [*((id *)v4 + 13) indexOfObject:@"foreign_exchange_information_destination_amount"];
    *((void *)v4 + 19) = [*((id *)v4 + 13) indexOfObject:@"foreign_exchange_information_destination_currency_code"];
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
    uint64_t v25 = objc_claimAutoreleasedReturnValue([v24 localeIdentifier]);
    unsigned int v26 = (void *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v25;

    unsigned int v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    unsigned int v28 = (void *)*((void *)v4 + 23);
    *((void *)v4 + 23) = v27;

    id v29 = +[NSMapTable pk_createStrongPointerPersonalityToStrongObjects]( &OBJC_CLASS___NSMapTable,  "pk_createStrongPointerPersonalityToStrongObjects");
    uint64_t v30 = (void *)*((void *)v4 + 24);
    *((void *)v4 + 24) = v29;

    char v31 = v4[8];
    if ((v31 & 1) != 0)
    {
      id v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v33 = (void *)*((void *)v4 + 25);
      *((void *)v4 + 25) = v32;

      char v31 = v4[8];
    }

    if ((v31 & 2) != 0)
    {
      id v34 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      int v35 = (void *)*((void *)v4 + 26);
      *((void *)v4 + 26) = v34;
    }

    BOOL v36 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v37 = (void *)*((void *)v4 + 27);
    *((void *)v4 + 27) = v36;

    uint64_t v38 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v39 = (void *)*((void *)v4 + 28);
    *((void *)v4 + 2_Block_object_dispose(va, 8) = v38;

    id v40 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v41 = (void *)*((void *)v4 + 29);
    *((void *)v4 + 29) = v40;
  }

  return v4;
}

id *sub_1004055C4(id *a1, void *a2)
{
  id result = a2;
  uint64_t v4 = result;
  if (!a1)
  {
LABEL_8:

    return a1;
  }

  if (result && !*((_BYTE *)a1 + 9))
  {
    id v5 = [result persistentID];
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5));
    uint64_t v13 = 0LL;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000LL;
    uint64_t v16 = sub_1003F5278;
    uint64_t v17 = sub_1003F5288;
    id v18 = (id)objc_claimAutoreleasedReturnValue([a1[23] objectForKeyedSubscript:v6]);
    uint64_t v7 = (void *)v14[5];
    if (v7)
    {
      a1 = v7;
    }

    else
    {
      id v8 = a1[8];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10040AAB0;
      void v9[3] = &unk_10065E8E8;
      uint64_t v11 = &v13;
      id v12 = v5;
      void v9[4] = a1;
      id v10 = v4;
      [v10 getValuesForProperties:v8 withApplier:v9];
      a1 = (id *)(id)v14[5];
    }

    _Block_object_dispose(&v13, 8);

    goto LABEL_8;
  }

  __break(1u);
  return result;
}

void sub_100405710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100405728(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (!a1) {
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a1 + 9))
  {
    *(_BYTE *)(a1 + 9) = 1;
    if ([*(id *)(a1 + 184) count])
    {
      +[PaymentTransactionReward associateRewardsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___PaymentTransactionReward,  "associateRewardsToPaymentTransactions:inDatabase:",  *(void *)(a1 + 184),  v9);
      +[PaymentTransactionFee associateFeesToPaymentTransactions:inDatabase:]( &OBJC_CLASS___PaymentTransactionFee,  "associateFeesToPaymentTransactions:inDatabase:",  *(void *)(a1 + 184),  v9);
      +[PaymentTransactionQuestion associateQuestionsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___PaymentTransactionQuestion,  "associateQuestionsToPaymentTransactions:inDatabase:",  *(void *)(a1 + 184),  v9);
      +[TransactionSource associateTransactionSourcesToPaymentTransactions:inDatabase:]( &OBJC_CLASS___TransactionSource,  "associateTransactionSourcesToPaymentTransactions:inDatabase:",  *(void *)(a1 + 216),  v9);
      +[MapsMerchant associateMapsMerchantsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___MapsMerchant,  "associateMapsMerchantsToPaymentTransactions:inDatabase:",  *(void *)(a1 + 224),  v9);
      +[MapsBrand associateMapsBrandsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___MapsBrand,  "associateMapsBrandsToPaymentTransactions:inDatabase:",  *(void *)(a1 + 232),  v9);
      +[PaymentTransactionAward associateAwardsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___PaymentTransactionAward,  "associateAwardsToPaymentTransactions:inDatabase:",  *(void *)(a1 + 184),  v9);
      +[PaymentTransactionAmountModifier associateAmountModifiersToPaymentTransactions:inDatabase:]( &OBJC_CLASS___PaymentTransactionAmountModifier,  "associateAmountModifiersToPaymentTransactions:inDatabase:",  *(void *)(a1 + 184),  v9);
      +[PaymentTransactionFee associateFeesToPaymentTransactions:inDatabase:]( &OBJC_CLASS___PaymentTransactionFee,  "associateFeesToPaymentTransactions:inDatabase:",  *(void *)(a1 + 184),  v9);
      id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v5 = *(void **)(a1 + 184);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_10040AB3C;
      void v10[3] = &unk_10065E910;
      id v6 = v9;
      id v11 = v6;
      id v12 = v3;
      uint64_t v13 = v4;
      uint64_t v7 = v4;
      id v8 = v3;
      [v5 enumerateKeysAndObjectsUsingBlock:v10];
      +[MapsMerchant associateMapsMerchantsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___MapsMerchant,  "associateMapsMerchantsToPaymentTransactions:inDatabase:",  v8,  v6);
      +[MapsBrand associateMapsBrandsToPaymentTransactions:inDatabase:]( &OBJC_CLASS___MapsBrand,  "associateMapsBrandsToPaymentTransactions:inDatabase:",  v7,  v6);
    }

id sub_1004059CC(id a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"source_pid"]);
    if (v2)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 database]);
      id v1 = (id)objc_claimAutoreleasedReturnValue( +[TransactionSource anyInDatabase:withPersistentID:]( TransactionSource,  "anyInDatabase:withPersistentID:",  v3,  [v2 longLongValue]));
    }

    else
    {
      id v1 = 0LL;
    }
  }

  return v1;
}

uint64_t sub_100405D58(uint64_t a1)
{
  v2[0] = @"payment_transaction_authentication.auth_data_payment_pin";
  v2[1] = @"payment_transaction_authentication.auth_data_transaction_signature";
  v3[0] = &stru_10065E6B8;
  v3[1] = &stru_10065E6D8;
  v2[2] = @"payment_transaction_authentication.auth_data_user_confirmation";
  v2[3] = @"service_identifier";
  v3[2] = &stru_10065E6F8;
  v3[3] = &stru_10065E718;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  4LL));
}

void sub_100405E0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

PKTransactionAuthenticationContext *sub_100405E64(PKTransactionAuthenticationContext *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___PKTransactionAuthenticationContext);
    id v3 = (void *)sub_100405F3C((uint64_t)&OBJC_CLASS___PaymentTransaction);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100406040;
    void v9[3] = &unk_100638EF0;
    void v9[4] = v1;
    id v10 = v3;
    uint64_t v5 = v2;
    id v11 = v5;
    id v6 = v3;
    -[PKTransactionAuthenticationContext getValuesForProperties:withApplier:]( v1,  "getValuesForProperties:withApplier:",  v4,  v9);

    id v7 = v11;
    id v1 = v5;
  }

  return v1;
}

uint64_t sub_100405F3C(uint64_t a1)
{
  v2[0] = @"payment_pin_format";
  v2[1] = @"nonce";
  v3[0] = &stru_10065E758;
  v3[1] = &stru_10065E778;
  v2[2] = @"signing_key_material";
  v2[3] = @"partial_signature";
  v3[2] = &stru_10065E798;
  v3[3] = &stru_10065E7B8;
  void v2[4] = @"requested_auth_mechanisms";
  void v2[5] = @"payment_transaction_authentication.processed_auth_mechanisms";
  void v3[4] = &stru_10065E7D8;
  void v3[5] = &stru_10065E7F8;
  v2[6] = @"payment_transaction_authentication.data_collected_auth_mechanisms";
  v2[7] = @"payment_transaction_authentication.complete";
  v3[6] = &stru_10065E818;
  v3[7] = &stru_10065E838;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  8LL));
}

void sub_100406040(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

uint64_t sub_10040613C(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withPID:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withPID:",  a1[4],  a1[5]));
  id v3 = v2;
  if (v2
    && (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 valueForProperty:@"update_sequence_number"]),
        id v5 = [v4 integerValue],
        v4,
        (id)a1[6] == v5))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    [v3 setValue:v6 forProperty:@"needs_sync_to_finance"];

    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_100406298(_Unwind_Exception *a1)
{
}

uint64_t sub_1004062B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) databaseTable]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE %@ SET %@ = 1",  v2,  @"needs_sync_to_finance"));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100406374;
  void v7[3] = &unk_1006456F8;
  uint64_t v4 = *(void *)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  sub_1002CCDD0(v4, v3, 0, v7);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return v5;
}

uint64_t sub_100406374(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_10040644C(uint64_t a1)
{
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  char v11 = 0;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) databaseTable]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE %@ SET %@ = 1 WHERE %@ = '%@'",  v2,  @"needs_sync_to_finance",  @"account_identifier",  *(void *)(a1 + 32)));

  uint64_t v4 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10040655C;
  void v7[3] = &unk_1006456F8;
  void v7[4] = &v8;
  sub_1002CCDD0(v4, v3, 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);

  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_100406544(_Unwind_Exception *a1)
{
}

uint64_t sub_10040655C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void *sub_100406838(void *a1, void *a2)
{
  uint64_t result = a2;
  uint64_t v4 = result;
  if (!a1) {
    goto LABEL_4;
  }
  if (!*((_BYTE *)a1 + 9))
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 database]);
    uint64_t v7 = a1[8];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_10040AA44;
    void v10[3] = &unk_10065E8C0;
    char v11 = v5;
    id v12 = a1;
    id v13 = v6;
    id v8 = v6;
    id v9 = v5;
    [v4 enumeratePersistentIDsAndProperties:v7 usingBlock:v10];
    a1 = -[NSMutableDictionary copy](v9, "copy");

LABEL_4:
    return a1;
  }

  __break(1u);
  return result;
}

id sub_100406924(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"merchant_raw_name",  v3));

  return v4;
}

id sub_100406978(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"f",  v3));

  return v4;
}

id sub_1004069CC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"q",  v3));

  return v4;
}

id sub_100406A30(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"ag",  v3));

  return v4;
}

id sub_100406A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"maps_merchant.name",  v3));

  return v4;
}

id sub_100406AD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"plantains.c",  v3));

  return v4;
}

id sub_100406B2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"peer_payment_counterpart_handle",  v3));

  return v4;
}

id sub_100406B80(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"maps_merchant_pid"));
  v6[0] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"u"));
  v6[1] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v6, 2LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v3));

  return v4;
}

id sub_100406C5C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"x",  v3));

  return v4;
}

id sub_100406CC0(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"maps_merchant.c",  v3));

  if (a2)
  {
    id v5 = v4;
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"maps_merchant.c"));
    v9[0] = v4;
    v9[1] = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v9, 2LL));
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v7));
  }

  return v5;
}

id sub_100406DD4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"plantains.g",  v3));

  if (a2)
  {
    id v5 = v4;
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNullPredicateWithProperty:",  @"plantains.g"));
    v9[0] = v4;
    v9[1] = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v9, 2LL));
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v7));
  }

  return v5;
}

void *sub_100406EE8(void *a1, void *a2)
{
  uint64_t result = a2;
  uint64_t v4 = result;
  if (!a1) {
    goto LABEL_4;
  }
  if (!*((_BYTE *)a1 + 9))
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 database]);
    uint64_t v7 = a1[8];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_10040AA00;
    void v10[3] = &unk_10065E8C0;
    char v11 = v5;
    id v12 = a1;
    id v13 = v6;
    id v8 = v6;
    id v9 = v5;
    [v4 enumeratePersistentIDsAndProperties:v7 usingBlock:v10];
    a1 = -[NSMutableArray copy](v9, "copy");

LABEL_4:
    return a1;
  }

  __break(1u);
  return result;
}

id *sub_100406FD4(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (a1[25])
    {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v5 = v3;
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v16;
        do
        {
          for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
            char v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "objectForKey:", v10, (void)v15));
            if (v11)
            {
              id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
              if (v12)
              {
                id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[25] objectForKeyedSubscript:v11]);
                if (v13) {
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v13, v12);
                }
              }
            }
          }

          id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v7);
      }

      a1 = (id *)-[NSMutableDictionary copy](v4, "copy");
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

id *sub_10040716C(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (a1[26])
    {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v5 = v3;
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v16;
        do
        {
          for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
            char v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "objectForKey:", v10, (void)v15));
            if (v11)
            {
              id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
              if (v12)
              {
                id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[26] objectForKeyedSubscript:v11]);
                if (v13) {
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v13, v12);
                }
              }
            }
          }

          id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v7);
      }

      a1 = (id *)-[NSMutableDictionary copy](v4, "copy");
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_100407304(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (void *)_DateForSQLValue(*a4);
  [v6 timeIntervalSinceDate:a1[4]];
  double v8 = fabs(v7);

  uint64_t v9 = *(void *)(a1[5] + 8LL);
  if (*(void *)(v9 + 24) == 0x7FFFFFFFFFFFFFFFLL || v8 < *(double *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    *(void *)(v9 + 24) = a2;
    *(double *)(*(void *)(a1[6] + 8LL) + 24LL) = v8;
  }

uint64_t sub_10040738C(uint64_t a1)
{
  v2[0] = @"identifier";
  v2[1] = @"service_identifier";
  v3[0] = &stru_10065D598;
  v3[1] = &stru_10065D5B8;
  v2[2] = @"payment_hash";
  v2[3] = @"currency_code";
  v3[2] = &stru_10065D5D8;
  v3[3] = &stru_10065D5F8;
  void v2[4] = @"transaction_date";
  void v2[5] = @"city_code";
  void v3[4] = &stru_10065D618;
  void v3[5] = &stru_10065D638;
  v2[6] = @"transaction_status_changed_date";
  v2[7] = @"expiration_date";
  v3[6] = &stru_10065D658;
  v3[7] = &stru_10065D678;
  void v2[8] = @"locality";
  v2[9] = @"administrative_area";
  void v3[8] = &stru_10065D698;
  v3[9] = &stru_10065D6B8;
  v2[10] = @"af";
  v2[11] = @"transaction_status";
  v3[10] = &stru_10065D6D8;
  v3[11] = &stru_10065D6F8;
  v2[12] = @"transaction_declined_reason";
  v2[13] = @"transaction_type";
  v3[12] = &stru_10065D718;
  v3[13] = &stru_10065D738;
  v2[14] = @"technology_type";
  v2[15] = @"transaction_source";
  v3[14] = &stru_10065D758;
  v3[15] = &stru_10065D778;
  v2[16] = @"requires_location";
  v2[17] = @"has_notification_service_data";
  uint8_t v3[16] = &stru_10065D798;
  v3[17] = &stru_10065D7B8;
  v2[18] = @"amount";
  v2[19] = @"subtotal_amount";
  v3[18] = &stru_10065D7D8;
  v3[19] = &stru_10065D7F8;
  v2[20] = @"amount_added_to_auth";
  v2[21] = @"location_date";
  v3[20] = &stru_10065D818;
  v3[21] = &stru_10065D838;
  v2[22] = @"location_latitude";
  v2[23] = @"location_longitude";
  v3[22] = &stru_10065D858;
  v3[23] = &stru_10065D878;
  v2[24] = @"location_altitude";
  v2[25] = @"location_horizontal_accuracy";
  v3[24] = &stru_10065D898;
  v3[25] = &stru_10065D8B8;
  v2[26] = @"location_vertical_accuracy";
  v2[27] = @"is_coarse_location";
  v3[26] = &stru_10065D8D8;
  v3[27] = &stru_10065D8F8;
  v2[28] = @"processed_for_location";
  v2[29] = @"processed_for_merchant_cleanup";
  v3[28] = &stru_10065D918;
  v3[29] = &stru_10065D938;
  v2[30] = @"requires_merchant_reprocessing";
  v2[31] = @"last_merchant_reprocessing_date";
  v3[30] = &stru_10065D958;
  v3[31] = &stru_10065D978;
  v2[32] = @"processed_for_stations";
  v2[33] = @"transit_type";
  v3[32] = &stru_10065D998;
  v3[33] = &stru_10065D9B8;
  v2[34] = @"transit_modifiers";
  v2[35] = @"station_code_provider";
  v3[34] = &stru_10065D9D8;
  v3[35] = &stru_10065D9F8;
  v2[36] = @"en_route";
  v2[37] = @"start_station_code";
  v3[36] = &stru_10065DA18;
  v3[37] = &stru_10065DA38;
  v2[38] = @"start_station";
  v2[39] = @"start_station_latitude";
  v3[38] = &stru_10065DA58;
  v3[39] = &stru_10065DA78;
  v2[40] = @"start_station_longitude";
  v2[41] = @"end_station_code";
  v3[40] = &stru_10065DA98;
  v3[41] = &stru_10065DAB8;
  v2[42] = @"end_station";
  v2[43] = @"end_station_latitude";
  v3[42] = &stru_10065DAD8;
  v3[43] = &stru_10065DAF8;
  v2[44] = @"end_station_longitude";
  v2[45] = @"adjustment_type";
  v3[44] = &stru_10065DB18;
  v3[45] = &stru_10065DB38;
  v2[46] = @"top_up_type";
  v2[47] = @"peer_payment_type";
  v3[46] = &stru_10065DB58;
  v3[47] = &stru_10065DB78;
  v2[48] = @"peer_payment_counterpart_handle";
  v2[49] = @"peer_payment_memo";
  v3[48] = &stru_10065DB98;
  v3[49] = &stru_10065DBB8;
  v2[50] = @"peer_payment_message_received_date";
  v2[51] = @"ca";
  v3[50] = &stru_10065DBD8;
  v3[51] = &stru_10065DBF8;
  v2[52] = @"cb";
  v2[53] = @"primary_funding_source_amount";
  v3[52] = &stru_10065DC18;
  v3[53] = &stru_10065DC38;
  v2[54] = @"primary_funding_source_currency_code";
  v2[55] = @"secondary_funding_source_amount";
  v3[54] = &stru_10065DC58;
  v3[55] = &stru_10065DC78;
  v2[56] = @"secondary_funding_source_currency_code";
  v2[57] = @"secondary_funding_source_network";
  v3[56] = &stru_10065DC98;
  v3[57] = &stru_10065DCB8;
  v2[58] = @"secondary_funding_source_dpan_suffix";
  v2[59] = @"secondary_funding_source_fpan_identifier";
  v3[58] = &stru_10065DCD8;
  v3[59] = &stru_10065DCF8;
  v2[60] = @"secondary_funding_source_description";
  v2[61] = @"secondary_funding_source_type";
  v3[60] = &stru_10065DD18;
  v3[61] = &stru_10065DD38;
  v2[62] = @"request_device_score_identifier";
  v2[63] = @"send_device_score_identifier";
  v3[62] = &stru_10065DD58;
  v3[63] = &stru_10065DD78;
  v2[64] = @"device_score_identifiers_required";
  v3[64] = &stru_10065DD98;
  v2[65] = @"device_score_identifiers_submitted";
  v3[65] = &stru_10065DDB8;
  v2[66] = @"merchant_provided_description";
  v3[66] = &stru_10065DDD8;
  v2[67] = @"merchant_provided_title";
  v3[67] = &stru_10065DDF8;
  v2[68] = @"metadata";
  v3[68] = &stru_10065DE18;
  v2[69] = @"n";
  v3[69] = &stru_10065DE38;
  v2[70] = @"fuzzy_matched";
  v3[70] = &stru_10065DE58;
  v2[71] = @"should_suppress_date";
  v3[71] = &stru_10065DE78;
  v2[72] = @"issue_report_identifier";
  v3[72] = &stru_10065DE98;
  v2[73] = @"c";
  v3[73] = &stru_10065DEB8;
  v2[74] = @"d";
  v3[74] = &stru_10065DED8;
  v2[75] = @"e";
  v3[75] = &stru_10065DEF8;
  v2[76] = @"a";
  v3[76] = &stru_10065DF18;
  v2[77] = @"account_identifier";
  v3[77] = &stru_10065DF38;
  v2[78] = @"account_type";
  v3[78] = &stru_10065DF58;
  v2[79] = @"o";
  v3[79] = &stru_10065DF78;
  v2[80] = @"r";
  v3[80] = &stru_10065DF98;
  v2[81] = @"s";
  v3[81] = &stru_10065DFB8;
  v2[82] = @"v";
  v3[82] = &stru_10065DFD8;
  v2[83] = @"dpan_identifier";
  v3[83] = &stru_10065DFF8;
  v2[84] = @"payment_network_identifier";
  v3[84] = &stru_10065E018;
  v2[85] = @"zm";
  v3[85] = &stru_10065E038;
  v2[86] = @"is_merchant_token_transaction";
  v3[86] = &stru_10065E058;
  v2[87] = @"ae";
  v3[87] = &stru_10065E078;
  v2[88] = @"w";
  v3[88] = &stru_10065E098;
  v2[89] = @"ab";
  v3[89] = &stru_10065E0B8;
  v2[90] = @"afi";
  v3[90] = &stru_10065E0D8;
  v2[91] = @"ac";
  v3[91] = &stru_10065E0F8;
  v2[92] = @"ad";
  v3[92] = &stru_10065E118;
  v2[93] = @"suppress_notifications";
  v3[93] = &stru_10065E138;
  v2[94] = @"recurring";
  v3[94] = &stru_10065E158;
  v2[95] = @"receipt_provider_url";
  v3[95] = &stru_10065E178;
  v2[96] = @"receipt_provider_identifier";
  v3[96] = &stru_10065E198;
  v2[97] = @"receipt_identifier";
  v3[97] = &stru_10065E1B8;
  v2[98] = @"transaction_source.identifier";
  v3[98] = &stru_10065E1D8;
  v2[99] = @"gooseberry.c";
  v3[99] = &stru_10065E1F8;
  v2[100] = @"barcode_identifier";
  v3[100] = &stru_10065E218;
  v2[101] = @"primary_funding_source_description";
  v3[101] = &stru_10065E238;
  v2[102] = @"nominal_amount";
  v3[102] = &stru_10065E258;
  v2[103] = @"has_additional_offers";
  v3[103] = &stru_10065E278;
  v2[104] = @"interest_reassessment";
  v3[104] = &stru_10065E298;
  v2[105] = @"associated_statement_identifiers";
  v3[105] = &stru_10065E2B8;
  v2[106] = @"update_sequence_number";
  v3[106] = &stru_10065E2D8;
  v2[107] = @"needs_sync_to_finance";
  v3[107] = &stru_10065E2F8;
  v2[108] = @"iit";
  v3[108] = &stru_10065E318;
  v2[109] = @"iimu";
  v3[109] = &stru_10065E338;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  110LL));
}

void sub_100407DC8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407DD0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407DD8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407DE0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407DE8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransaction setTransactionDate:](v4, "setTransactionDate:", v5);
}

void sub_100407E34(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407E3C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransaction setTransactionStatusChangedDate:](v4, "setTransactionStatusChangedDate:", v5);
}

void sub_100407E88(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransaction setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_100407ED4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407EDC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100407EE4(id a1, PKPaymentTransaction *a2, id a3)
{
  if (a3)
  {
    uint64_t v4 = a2;
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", a3));
    -[PKPaymentTransaction setTimeZone:](v4, "setTimeZone:", v5);
  }

void sub_100407F50(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTransactionStatus:](v4, "setTransactionStatus:", [a3 integerValue]);
}

void sub_100407F94(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTransactionDeclinedReason:]( v4,  "setTransactionDeclinedReason:",  [a3 integerValue]);
}

void sub_100407FD8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTransactionType:](v4, "setTransactionType:", [a3 integerValue]);
}

void sub_10040801C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTechnologyType:](v4, "setTechnologyType:", [a3 integerValue]);
}

void sub_100408060(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTransactionSource:](v4, "setTransactionSource:", [a3 integerValue]);
}

void sub_1004080A4(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setRequiresLocation:](v4, "setRequiresLocation:", [a3 BOOLValue]);
}

void sub_1004080E8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setHasNotificationServiceData:]( v4,  "setHasNotificationServiceData:",  [a3 BOOLValue]);
}

void sub_10040812C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setAmount:](v4, "setAmount:", v6);
}

void sub_10040817C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setSubtotalAmount:](v4, "setSubtotalAmount:", v6);
}

void sub_1004081CC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setAmountAddedToAuth:](v4, "setAmountAddedToAuth:", v6);
}

void sub_10040821C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransaction setLocationDate:](v4, "setLocationDate:", v5);
}

void sub_100408268(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationLatitude:](v4, "setLocationLatitude:");
}

void sub_1004082A8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationLongitude:](v4, "setLocationLongitude:");
}

void sub_1004082E8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationAltitude:](v4, "setLocationAltitude:");
}

void sub_100408328(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationHorizontalAccuracy:](v4, "setLocationHorizontalAccuracy:");
}

void sub_100408368(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationVerticalAccuracy:](v4, "setLocationVerticalAccuracy:");
}

void sub_1004083A8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setCoarseLocation:](v4, "setCoarseLocation:", [a3 BOOLValue]);
}

void sub_1004083EC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setProcessedForLocation:](v4, "setProcessedForLocation:", [a3 BOOLValue]);
}

void sub_100408430(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setProcessedForMerchantCleanup:]( v4,  "setProcessedForMerchantCleanup:",  [a3 BOOLValue]);
}

void sub_100408474(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setRequiresMerchantReprocessing:]( v4,  "setRequiresMerchantReprocessing:",  [a3 BOOLValue]);
}

void sub_1004084B8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransaction setLastMerchantReprocessingDate:](v4, "setLastMerchantReprocessingDate:", v5);
}

void sub_100408504(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setProcessedForStations:](v4, "setProcessedForStations:", [a3 BOOLValue]);
}

void sub_100408548(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTransitType:](v4, "setTransitType:", [a3 integerValue]);
}

void sub_10040858C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTransitModifiers:](v4, "setTransitModifiers:", [a3 unsignedIntegerValue]);
}

void sub_1004085D0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004085D8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setEnRoute:](v4, "setEnRoute:", [a3 BOOLValue]);
}

void sub_10040861C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408624(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_10040862C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setStartStationLatitude:](v4, "setStartStationLatitude:");
}

void sub_10040866C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setStartStationLongitude:](v4, "setStartStationLongitude:");
}

void sub_1004086AC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004086B4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004086BC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setEndStationLatitude:](v4, "setEndStationLatitude:");
}

void sub_1004086FC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setEndStationLongitude:](v4, "setEndStationLongitude:");
}

void sub_10040873C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setAdjustmentType:](v4, "setAdjustmentType:", [a3 integerValue]);
}

void sub_100408780(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setTopUpType:](v4, "setTopUpType:", [a3 integerValue]);
}

void sub_1004087C4(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setPeerPaymentType:](v4, "setPeerPaymentType:", [a3 integerValue]);
}

void sub_100408808(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408810(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408818(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransaction setPeerPaymentMessageReceivedDate:](v4, "setPeerPaymentMessageReceivedDate:", v5);
}

void sub_100408864(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setPeerPaymentPaymentMode:](v4, "setPeerPaymentPaymentMode:", [a3 integerValue]);
}

void sub_1004088A8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004088B0(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setPrimaryFundingSourceAmount:](v4, "setPrimaryFundingSourceAmount:", v6);
}

void sub_100408900(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408908(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setSecondaryFundingSourceAmount:](v4, "setSecondaryFundingSourceAmount:", v6);
}

void sub_100408958(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408960(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setSecondaryFundingSourceNetwork:]( v4,  "setSecondaryFundingSourceNetwork:",  [a3 integerValue]);
}

void sub_1004089A4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004089AC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004089B4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004089BC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setSecondaryFundingSourceType:]( v4,  "setSecondaryFundingSourceType:",  [a3 integerValue]);
}

void sub_100408A00(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_UUIDForSQLValue(a3);
  -[PKPaymentTransaction setRequestDeviceScoreIdentifier:](v4, "setRequestDeviceScoreIdentifier:", v5);
}

void sub_100408A4C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_UUIDForSQLValue(a3);
  -[PKPaymentTransaction setSendDeviceScoreIdentifier:](v4, "setSendDeviceScoreIdentifier:", v5);
}

void sub_100408A98(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setDeviceScoreIdentifiersRequired:]( v4,  "setDeviceScoreIdentifiersRequired:",  [a3 BOOLValue]);
}

void sub_100408ADC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setDeviceScoreIdentifiersSubmitted:]( v4,  "setDeviceScoreIdentifiersSubmitted:",  [a3 BOOLValue]);
}

void sub_100408B20(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408B28(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408B30(id a1, PKPaymentTransaction *a2, id a3)
{
  id v6 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 dataUsingEncoding:4]);
  if (v4) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v4,  0LL,  0LL));
  }
  else {
    id v5 = 0LL;
  }
  -[PKPaymentTransaction setMetadata:](v6, "setMetadata:", v5);
}

void sub_100408BB4(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setOriginatedByDevice:](v4, "setOriginatedByDevice:", [a3 BOOLValue]);
}

void sub_100408BF8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setFuzzyMatched:](v4, "setFuzzyMatched:", [a3 BOOLValue]);
}

void sub_100408C3C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setShouldSuppressDate:](v4, "setShouldSuppressDate:", [a3 BOOLValue]);
}

void sub_100408C80(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408C88(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setRewardsTotalAmount:](v4, "setRewardsTotalAmount:", v6);
}

void sub_100408CD8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408CE0(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setRewardsEligibilityReason:]( v4,  "setRewardsEligibilityReason:",  [a3 integerValue]);
}

void sub_100408D24(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_100408D68(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408D70(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setAccountType:](v4, "setAccountType:", [a3 integerValue]);
}

void sub_100408DB4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408DBC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408DC4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408DCC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408DD4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408DDC(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setPaymentNetworkIdentifier:]( v4,  "setPaymentNetworkIdentifier:",  [a3 integerValue]);
}

void sub_100408E20(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408E28(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408E30(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408E38(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setAdjustmentTypeReason:](v4, "setAdjustmentTypeReason:", [a3 integerValue]);
}

void sub_100408E7C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100408E84(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setAssociatedFeatureIdentifier:]( v4,  "setAssociatedFeatureIdentifier:",  [a3 integerValue]);
}

void sub_100408EC8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setSuppressBehavior:](v4, "setSuppressBehavior:", [a3 integerValue]);
}

void sub_100408F0C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setRedemptionType:](v4, "setRedemptionType:", [a3 integerValue]);
}

void sub_100408F50(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setSuppressNotifications:](v4, "setSuppressNotifications:", [a3 BOOLValue]);
}

void sub_100408F94(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setRecurring:](v4, "setRecurring:", [a3 BOOLValue]);
}

void sub_100408FD8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPaymentTransaction setReceiptProviderURL:](v4, "setReceiptProviderURL:", v5);
}

void sub_100409024(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_10040902C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100409034(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_10040903C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100409044(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_10040904C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_100409054(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransaction setNominalAmount:](v4, "setNominalAmount:", v6);
}

void sub_1004090A4(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setHasAdditionalOffers:](v4, "setHasAdditionalOffers:", [a3 BOOLValue]);
}

void sub_1004090E8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setInterestReassessment:](v4, "setInterestReassessment:", [a3 BOOLValue]);
}

void sub_10040912C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKPaymentTransaction setAssociatedStatementIdentifiers:](v4, "setAssociatedStatementIdentifiers:", v5);
}

void sub_100409184(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setUpdateSequenceNumber:](v4, "setUpdateSequenceNumber:", [a3 integerValue]);
}

void sub_1004091C8(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setNeedsSyncWithFinance:](v4, "setNeedsSyncWithFinance:", [a3 BOOLValue]);
}

void sub_10040920C(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransaction setIsIssuerInstallmentTransaction:]( v4,  "setIsIssuerInstallmentTransaction:",  [a3 BOOLValue]);
}

void sub_100409250(id a1, PKPaymentTransaction *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPaymentTransaction setIssuerInstallmentManagementURL:](v4, "setIssuerInstallmentManagementURL:", v5);
}

uint64_t sub_10040929C(uint64_t a1)
{
  v2[0] = @"merchant_name";
  v2[1] = @"merchant_raw_name";
  v3[0] = &stru_10065E378;
  v3[1] = &stru_10065E398;
  v2[2] = @"merchant_industry_category";
  v2[3] = @"merchant_industry_code";
  v3[2] = &stru_10065E3B8;
  v3[3] = &stru_10065E3D8;
  void v2[4] = @"f";
  void v2[5] = @"g";
  void v3[4] = &stru_10065E3F8;
  void v3[5] = &stru_10065E418;
  v2[6] = @"h";
  v2[7] = @"i";
  v3[6] = &stru_10065E438;
  v3[7] = &stru_10065E458;
  void v2[8] = @"j";
  v2[9] = @"k";
  void v3[8] = &stru_10065E478;
  v3[9] = &stru_10065E498;
  v2[10] = @"l";
  v2[11] = @"m";
  v3[10] = &stru_10065E4B8;
  v3[11] = &stru_10065E4D8;
  v2[12] = @"q";
  v2[13] = @"p";
  v3[12] = &stru_10065E4F8;
  v3[13] = &stru_10065E518;
  v2[14] = @"ag";
  v2[15] = @"ah";
  v3[14] = &stru_10065E538;
  v3[15] = &stru_10065E558;
  v2[16] = @"t";
  v2[17] = @"x";
  uint8_t v3[16] = &stru_10065E578;
  v3[17] = &stru_10065E598;
  v2[18] = @"y";
  v2[19] = @"use_raw_merchant_data";
  v3[18] = &stru_10065E5B8;
  v3[19] = &stru_10065E5D8;
  v2[20] = @"merchant_fallback_logo_image_url";
  v3[20] = &stru_10065E5F8;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  21LL));
}

void sub_1004094B0(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004094B8(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004094C0(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004094C8(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMerchant setIndustryCode:](v4, "setIndustryCode:", [a3 integerValue]);
}

void sub_10040950C(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409514(id a1, PKMerchant *a2, id a3)
{
}

void sub_10040951C(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409524(id a1, PKMerchant *a2, id a3)
{
}

void sub_10040952C(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409534(id a1, PKMerchant *a2, id a3)
{
}

void sub_10040953C(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409544(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMerchant setCleanConfidenceLevel:](v4, "setCleanConfidenceLevel:", [a3 integerValue]);
}

void sub_100409588(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMerchant setAdamIdentifier:](v4, "setAdamIdentifier:", [a3 integerValue]);
}

void sub_1004095CC(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMerchant setOriginURL:](v4, "setOriginURL:", v5);
}

void sub_100409618(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409620(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409628(id a1, PKMerchant *a2, id a3)
{
}

void sub_100409630(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMerchant setFallbackcategory:](v4, "setFallbackcategory:", [a3 integerValue]);
}

void sub_100409674(id a1, PKMerchant *a2, id a3)
{
}

void sub_10040967C(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMerchant setUseRawMerchantData:](v4, "setUseRawMerchantData:", [a3 BOOLValue]);
}

void sub_1004096C0(id a1, PKMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKMerchant setFallbackLogoImageURL:](v4, "setFallbackLogoImageURL:", v5);
}

uint64_t sub_10040970C(uint64_t a1)
{
  v2[0] = @"foreign_exchange_information_exchange_rate";
  v2[1] = @"foreign_exchange_information_destination_amount";
  v3[0] = &stru_10065E638;
  v3[1] = &stru_10065E658;
  v2[2] = @"foreign_exchange_information_destination_currency_code";
  v3[2] = &stru_10065E678;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  3LL));
}

void sub_1004097B0(id a1, PKPaymentTransactionForeignExchangeInformation *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber decimalNumberWithString:](&OBJC_CLASS___NSDecimalNumber, "decimalNumberWithString:", a3));
  -[PKPaymentTransactionForeignExchangeInformation setExchangeRate:](v4, "setExchangeRate:", v5);
}

void sub_10040981C(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_100409824(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_10040982C(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_100409834(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_10040983C(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKTransactionAuthenticationContext setPaymentPINFormat:]( v4,  "setPaymentPINFormat:",  [a3 integerValue]);
}

void sub_100409880(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
}

void sub_100409888(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
}

void sub_100409890(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
}

void sub_100409898(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKTransactionAuthenticationContext setRequestedAuthenticationMechanisms:]( v4,  "setRequestedAuthenticationMechanisms:",  [a3 integerValue]);
}

void sub_1004098DC(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKTransactionAuthenticationContext setProcessedAuthenticationMechanisms:]( v4,  "setProcessedAuthenticationMechanisms:",  [a3 integerValue]);
}

void sub_100409920(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKTransactionAuthenticationContext setDataCollectedAuthenticationMechanisms:]( v4,  "setDataCollectedAuthenticationMechanisms:",  [a3 integerValue]);
}

void sub_100409964(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKTransactionAuthenticationContext setComplete:](v4, "setComplete:", [a3 BOOLValue]);
}

PKMerchant *sub_1004099F4(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = a2 + 8LL * a1[10];
  uint64_t v4 = a1[16];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    id v5 = 0LL;
  }
  else {
    id v5 = *(void **)(v3 + 8 * v4);
  }
  id v6 = v5;
  uint64_t v7 = a1[17];
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    double v8 = 0LL;
  }
  else {
    double v8 = *(void **)(v3 + 8 * v7);
  }
  id v9 = v8;
  if ([v6 length] || objc_msgSend(v9, "length"))
  {
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___PKMerchant);
    +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransaction,  "applyPropertySetters:toObject:withProperties:values:",  a1[5],  v10,  a1[11],  v3);
    if (!-[PKMerchant category](v10, "category") && (uint64_t)-[PKMerchant industryCode](v10, "industryCode") >= 1)
    {
      char v11 = objc_alloc_init(&OBJC_CLASS___PKMerchantCategoryCodeMap);
      -[PKMerchant setFallbackcategory:]( v10,  "setFallbackcategory:",  -[PKMerchantCategoryCodeMap categoryForIndustryCode:]( v11,  "categoryForIndustryCode:",  -[PKMerchant industryCode](v10, "industryCode")));
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

PKPaymentTransactionForeignExchangeInformation *sub_100409B20(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = a2 + 8LL * a1[12];
  uint64_t v4 = a1[18];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    id v5 = 0LL;
  }
  else {
    id v5 = *(void **)(v3 + 8 * v4);
  }
  id v6 = v5;
  uint64_t v7 = a1[19];
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    double v8 = 0LL;
  }
  else {
    double v8 = *(void **)(v3 + 8 * v7);
  }
  id v10 = v8;
  if (v6)
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
    if ((objc_opt_isKindOfClass(v6, v11) & 1) != 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
      unsigned __int8 v13 = [v6 isEqualToNumber:v12];

      __int128 v15 = 0LL;
      if ((v13 & 1) != 0 || !v10) {
        goto LABEL_18;
      }
      uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString, v14);
      if ((objc_opt_isKindOfClass(v10, v16) & 1) != 0 && [v10 length])
      {
        uint64_t v17 = PKCurrencyStorageNumberToCurrencyDecimal(v6);
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        if (v18
          && (id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber")),
              unsigned __int8 v20 = [v18 isEqualToNumber:v19],
              v19,
              (v20 & 1) == 0))
        {
          __int128 v15 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionForeignExchangeInformation);
          +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransaction,  "applyPropertySetters:toObject:withProperties:values:",  a1[6],  v15,  a1[13],  v3);
          id v22 = -[PKCurrencyAmount initWithAmount:currency:exponent:]( objc_alloc(&OBJC_CLASS___PKCurrencyAmount),  "initWithAmount:currency:exponent:",  v18,  v10,  0LL);
          -[PKPaymentTransactionForeignExchangeInformation setDestinationCurrencyAmount:]( v15,  "setDestinationCurrencyAmount:",  v22);
        }

        else
        {
          __int128 v15 = 0LL;
        }

        goto LABEL_18;
      }
    }
  }

  __int128 v15 = 0LL;
LABEL_18:

  return v15;
}

void sub_100409CE0(uint64_t a1, void *a2, void *a3)
{
  id v30 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionRequest);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v30 transactionDate]);
    double v8 = *(void **)(a1 + 24);
    if (!v8)
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue( +[TransactionSource transactionSourceIdentifiersInDatabase:ofType:]( &OBJC_CLASS___TransactionSource,  "transactionSourceIdentifiersInDatabase:ofType:",  v5,  0LL));
      id v10 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v9;

      double v8 = *(void **)(a1 + 24);
    }

    id v11 = [v8 mutableCopy];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v30 transactionSourceIdentifier]);
    if (v12) {
      [v11 removeObject:v12];
    }
    [v6 setTransactionSourceIdentifiers:v11];
    unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 dateByAddingTimeInterval:-10.0]);
    [v6 setStartDate:v13];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 dateByAddingTimeInterval:10.0]);
    [v6 setEndDate:v14];

    id v15 = sub_1003FC2B0((uint64_t)&OBJC_CLASS___PaymentTransaction, v5, v6);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = (void *)sub_100406EE8(a1, v16);

    if ([v17 count] != (id)1) {
      goto LABEL_18;
    }
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 firstObject]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 recurringPeerPayment]);
    unsigned __int8 v20 = v19;
    if (!v19)
    {
LABEL_17:

LABEL_18:
      goto LABEL_19;
    }

    unsigned int v28 = v18;
    id v29 = v5;
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 fundingSource]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 mpanIdentifier]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v30 panIdentifier]);
    id v24 = v22;
    id v25 = v23;
    if (v24 == v25)
    {

      __int128 v18 = v28;
      id v5 = v29;
    }

    else
    {
      unsigned int v26 = v25;
      if (!v24 || !v25)
      {

        __int128 v18 = v28;
        id v5 = v29;
        goto LABEL_16;
      }

      unsigned __int8 v27 = [v24 isEqualToString:v25];

      __int128 v18 = v28;
      id v5 = v29;
      if ((v27 & 1) == 0) {
        goto LABEL_17;
      }
    }

    [v30 setAssociatedFeatureIdentifier:1];
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v18 recurringPeerPayment]);
    [v30 setRecurringPeerPayment:v21];
LABEL_16:

    goto LABEL_17;
  }

id *sub_100409F68(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  if (a1)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[23] objectForKeyedSubscript:v9]);
    if (v10)
    {
      a1 = v10;
LABEL_73:

      goto LABEL_74;
    }

    id v11 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransaction);
    [a1[23] setObject:v11 forKeyedSubscript:v9];
    [a1[24] setObject:v9 forKey:v11];
    +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransaction,  "applyPropertySetters:toObject:withProperties:values:",  a1[4],  v11,  a1[9],  a4);
    id v12 = sub_1004099F4(a1, a4);
    -[PKPaymentTransaction setMerchant:](v11, "setMerchant:", v12);

    unsigned __int8 v13 = sub_100409B20(a1, a4);
    -[PKPaymentTransaction setForeignExchangeInformation:](v11, "setForeignExchangeInformation:", v13);

    uint64_t v14 = a4 + 8LL * (void)a1[14];
    id v15 = objc_alloc_init(&OBJC_CLASS___PKTransactionAuthenticationContext);
    +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentTransaction,  "applyPropertySetters:toObject:withProperties:values:",  a1[7],  v15,  a1[15],  v14);
    -[PKPaymentTransaction setAuthenticationContext:](v11, "setAuthenticationContext:", v15);

    uint64_t v16 = objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v11, "serviceIdentifier"));
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction panIdentifier](v11, "panIdentifier"));
    uint64_t v17 = objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction accountIdentifier](v11, "accountIdentifier"));
    if (v17)
    {
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent servicingAccountEventsWithTransactionIdentifier:accountIdentifier:inDatabase:]( &OBJC_CLASS___AccountEvent,  "servicingAccountEventsWithTransactionIdentifier:accountIdentifier:inDatabase:",  v16,  v17,  v8));
      -[PKPaymentTransaction setServicingEvents:](v11, "setServicingEvents:", v18);
    }

    char v64 = (void *)v17;
    id v66 = (void *)v16;
    id v19 = -[PKPaymentTransaction accountType](v11, "accountType");
    id v20 = v19;
    BOOL v22 = v19 == (id)1 || v19 == (id)3;
    unint64_t v23 = (unint64_t)-[PKPaymentTransaction transactionType](v11, "transactionType");
    unint64_t v24 = (unint64_t)-[PKPaymentTransaction transactionSource](v11, "transactionSource");
    id v63 = -[PKPaymentTransaction associatedFeatureIdentifier](v11, "associatedFeatureIdentifier");
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction paymentHash](v11, "paymentHash"));
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction referenceIdentifier](v11, "referenceIdentifier"));
    if (v23 == 10)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue( +[AccountPayment paymentsForTransactionServiceIdentifier:inDatabase:]( &OBJC_CLASS___AccountPayment,  "paymentsForTransactionServiceIdentifier:inDatabase:",  v66,  v8));
      -[PKPaymentTransaction setPayments:](v11, "setPayments:", v25);
      goto LABEL_43;
    }

    if (v20 == (id)1)
    {
      if ([v67 length] && v23 <= 6 && ((1 << v23) & 0x61) != 0 && (v24 & 0xFFFFFFFFFFFFFFFBLL) == 0)
      {
        if (!v23)
        {
          id v45 = (void *)objc_claimAutoreleasedReturnValue( +[AccountPayment paymentsForTransactionReferenceIdentifier:inDatabase:]( &OBJC_CLASS___AccountPayment,  "paymentsForTransactionReferenceIdentifier:inDatabase:",  v67,  v8));
          if ([v45 count])
          {
            id v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "pk_objectsPassingTest:", &stru_10065E858));
            -[PKPaymentTransaction setPayments:](v11, "setPayments:", v46);
          }
        }

        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue( +[AccountTransfer transfersForTransactionReferenceIdentifier:inDatabase:]( &OBJC_CLASS___AccountTransfer,  "transfersForTransactionReferenceIdentifier:inDatabase:",  v67,  v8));
        if ([v47 count])
        {
          id v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "pk_objectsPassingTest:", &stru_10065E898));
          -[PKPaymentTransaction setTransfers:](v11, "setTransfers:", v48);

          id v49 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction transfers](v11, "transfers"));
          id v50 = [v49 count];

          if (v50)
          {
            __int128 v62 = v47;
            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction transfers](v11, "transfers"));
            id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 firstObject]);

            __int128 v60 = v52;
            id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 referenceIdentifier]);
            id v54 = sub_1003F5808((uint64_t)&OBJC_CLASS___PaymentTransaction, v53);
            __int128 v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
            __int128 v56 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:predicate:",  v8,  v55));

            if ([v56 accountType] == (id)3) {
              -[PKPaymentTransaction setAssociatedFeatureIdentifier:](v11, "setAssociatedFeatureIdentifier:", 5LL);
            }

            __int16 v47 = v62;
          }
        }

        if (-[PKPaymentTransaction isRecurring](v11, "isRecurring") && v23 == 6)
        {
          __int128 v57 = (void *)objc_claimAutoreleasedReturnValue( +[PeerPaymentRecurringPayment peerPaymentRecurringPaymentForIdentifier:inDatabase:]( &OBJC_CLASS___PeerPaymentRecurringPayment,  "peerPaymentRecurringPaymentForIdentifier:inDatabase:",  v67,  v8));
          -[PKPaymentTransaction setRecurringPeerPayment:](v11, "setRecurringPeerPayment:", v57);
        }

        goto LABEL_92;
      }

      if ([v67 length]
        && -[PKPaymentTransaction isRecurring](v11, "isRecurring")
        && v23 == 3)
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[PeerPaymentRecurringPayment peerPaymentRecurringPaymentForIdentifier:inDatabase:]( &OBJC_CLASS___PeerPaymentRecurringPayment,  "peerPaymentRecurringPaymentForIdentifier:inDatabase:",  v67,  v8));
        -[PKPaymentTransaction setRecurringPeerPayment:](v11, "setRecurringPeerPayment:", v25);
        goto LABEL_43;
      }
    }

    else
    {
      if (v23 - 5 <= 1)
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v11, "serviceIdentifier"));
        unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[AccountTransfer transfersForTransactionServiceIdentifier:inDatabase:]( &OBJC_CLASS___AccountTransfer,  "transfersForTransactionServiceIdentifier:inDatabase:",  v25,  v8));
        -[PKPaymentTransaction setTransfers:](v11, "setTransfers:", v26);
LABEL_42:

        goto LABEL_43;
      }

      unsigned __int8 v27 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction isMerchantTokenTransaction](v11, "isMerchantTokenTransaction"));
      if ([v27 BOOLValue])
      {
        id v61 = [v65 length];

        if (v61 && !v23 && !v20)
        {
          sub_100409CE0((uint64_t)a1, v11, v8);
          goto LABEL_92;
        }
      }

      else
      {
      }

      if (v20 == (id)2 && !v23)
      {
        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v11, "serviceIdentifier"));
        id v29 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent redemptionAccountEventWithTransactionIdentifier:inDatabase:]( &OBJC_CLASS___AccountEvent,  "redemptionAccountEventWithTransactionIdentifier:inDatabase:",  v28,  v8));
        -[PKPaymentTransaction setRedemptionEvent:](v11, "setRedemptionEvent:", v29);

        goto LABEL_92;
      }
    }

    if (v23 == 8 && v22)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction referenceIdentifier](v11, "referenceIdentifier"));
      unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent accountEventWithIdentifier:inDatabase:]( &OBJC_CLASS___AccountEvent,  "accountEventWithIdentifier:inDatabase:",  v25,  v8));
      char v31 = (void *)objc_claimAutoreleasedReturnValue([v26 event]);
      -[PKPaymentTransaction setRedemptionEvent:](v11, "setRedemptionEvent:", v31);

      goto LABEL_42;
    }

    if (v20 == (id)2 && v23 == 14)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v11, "serviceIdentifier"));
      unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent redemptionAccountEventWithTransactionIdentifier:inDatabase:]( &OBJC_CLASS___AccountEvent,  "redemptionAccountEventWithTransactionIdentifier:inDatabase:",  v25,  v8));
      -[PKPaymentTransaction setRedemptionEvent:](v11, "setRedemptionEvent:", v26);
      goto LABEL_42;
    }

    switch(v23)
    {
      case 7uLL:
        if (-[PKPaymentTransaction accountType](v11, "accountType") != (id)3 || ![v67 length]) {
          goto LABEL_44;
        }
        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[AccountTransfer transfersForTransactionServiceIdentifier:inDatabase:]( &OBJC_CLASS___AccountTransfer,  "transfersForTransactionServiceIdentifier:inDatabase:",  v67,  v8));
        if ([v25 count]) {
          -[PKPaymentTransaction setTransfers:](v11, "setTransfers:", v25);
        }
        goto LABEL_43;
      case 0xFuLL:
        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionReleasedData releasedDataForPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___TransactionReleasedData,  "releasedDataForPaymentTransactionPID:inDatabase:",  a2,  v8));
        -[PKPaymentTransaction setReleasedData:](v11, "setReleasedData:", v25);
        goto LABEL_43;
      case 0xDuLL:
        id v44 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction identifier](v11, "identifier"));
        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[CreditInstallmentPlanPayment paymentWithIdentifier:inDatabase:]( &OBJC_CLASS___CreditInstallmentPlanPayment,  "paymentWithIdentifier:inDatabase:",  v44,  v8));

        -[PKPaymentTransaction setInstallmentPayment:](v11, "setInstallmentPayment:", v25);
        goto LABEL_43;
    }

LABEL_92:
    if (v23 || !v68 || v63 != (id)3) {
      goto LABEL_44;
    }
    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterPayment payLaterFinancingPlanIdentifierForPaymentWithPaymentAssociatedTransactionPaymentHash:inDatabase:]( &OBJC_CLASS___PayLaterPayment,  "payLaterFinancingPlanIdentifierForPaymentWithPaymentAssociatedTransactionPaymentHash:inDatabase:",  v68,  v8));
    if (v25)
    {
      __int128 v58 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlan anyInDatabase:withPlanIdentifier:]( &OBJC_CLASS___PayLaterFinancingPlan,  "anyInDatabase:withPlanIdentifier:",  v8,  v25));
      __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v58 financingPlan]);

      -[PKPaymentTransaction setAssociatedFinancingPlan:](v11, "setAssociatedFinancingPlan:", v59);
    }

BOOL sub_10040A988(id a1, PKAccountPayment *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountPayment fundingSource](a2, "fundingSource", a3, a4));
  BOOL v5 = [v4 type] == (id)2;

  return v5;
}

BOOL sub_10040A9C4(id a1, PKAccountTransfer *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer externalAccount](a2, "externalAccount", a3, a4));
  BOOL v5 = [v4 type] == (id)2;

  return v5;
}

void sub_10040AA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  BOOL v5 = sub_100409F68(*(id **)(a1 + 40), a2, a3, a4, *(void **)(a1 + 48));
  [v4 addObject:v5];
}

void sub_10040AA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = sub_100409F68(*(id **)(a1 + 40), a2, a3, a4, *(void **)(a1 + 48));
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_10040AAB0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[7];
  id v6 = (id *)a1[4];
  uint64_t v7 = (void *)a1[5];
  id v8 = a2;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v7 database]);
  id v10 = sub_100409F68(v6, v5, v9, a3, v13);

  uint64_t v11 = *(void *)(a1[6] + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_10040AB3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 merchant]);
  BOOL v6 = [v4 transactionType] == (id)15 && objc_msgSend(v4, "transactionSource") == (id)2;
  id v7 = [v4 featureIdentifier];
  if (v5)
  {
    id v8 = v7;
    if (([v5 hasMapsMatch] & 1) == 0
      && (([v5 useRawMerchantData] | v6) & 1) == 0
      && v8 != (id)4)
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v10 = sub_1003F4844((uint64_t)&OBJC_CLASS___PaymentTransaction, 0);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      -[NSMutableArray addObject:](v9, "addObject:", v11);

      id v12 = sub_1003FA554((uint64_t)&OBJC_CLASS___PaymentTransaction, v5);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      -[NSMutableArray addObject:](v9, "addObject:", v13);

      id v14 = sub_100406B80((uint64_t)&OBJC_CLASS___PaymentTransaction);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      -[NSMutableArray addObject:](v9, "addObject:", v15);

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v9));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:orderingProperties:orderingDirections:limit:]( &OBJC_CLASS___PaymentTransaction,  "queryWithDatabase:predicate:orderingProperties:orderingDirections:limit:",  *(void *)(a1 + 32),  v16,  &__NSArray0__struct,  &__NSArray0__struct,  1LL));
      v23[0] = @"maps_merchant_pid";
      v23[1] = @"u";
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL));
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_10040AD8C;
      v19[3] = &unk_10065E8C0;
      id v20 = *(id *)(a1 + 40);
      id v21 = v4;
      id v22 = *(id *)(a1 + 48);
      [v17 enumeratePersistentIDsAndProperties:v18 usingBlock:v19];
    }
  }
}

void sub_10040AD8C(id *a1, uint64_t a2, void *a3, id *a4)
{
  id v11 = a3;
  id v6 = *a4;
  if (v6)
  {
    id v7 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v6]);
    if (!v7)
    {
      id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      [a1[4] setObject:v7 forKeyedSubscript:v6];
    }

    -[NSMutableArray addObject:](v7, "addObject:", a1[5]);

    id v8 = a4[1];
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }

  id v8 = a4[1];
  if (v8)
  {
LABEL_7:
    uint64_t v9 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([a1[6] objectForKeyedSubscript:v8]);
    if (!v9)
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      [a1[6] setObject:v9 forKeyedSubscript:v8];
    }

    -[NSMutableArray addObject:](v9, "addObject:", a1[5]);

LABEL_10:
    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[5] merchant]);
    [v10 setMapsDataIsFromLocalMatch:1];
  }
}

BOOL sub_10040B35C(id a1, PKAccountPaymentFundingSource *a2, unint64_t a3, BOOL *a4)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountPaymentFundingSource fundingDetails](a2, "fundingDetails", a3, a4));
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___PKAccountPaymentFundingDetailsBankAccount, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 verificationDetails]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pendingAttempt]);
    BOOL v9 = v8 != 0LL;
  }

  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

id sub_10040B3E0(id a1, PKAccountPaymentFundingSource *a2)
{
  return -[PKAccountPaymentFundingSource identifier](a2, "identifier");
}

void sub_10040B3E8(uint64_t a1, void *a2)
{
  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472LL;
  v79[2] = sub_10040BB2C;
  v79[3] = &unk_100639950;
  id v80 = *(id *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_objectsPassingTest:", v79));
  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472LL;
  v77[2] = sub_10040BBC4;
  v77[3] = &unk_10065E9B8;
  id v78 = *(id *)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_arrayBySafelyApplyingBlock:", v77));

  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472LL;
  v75[2] = sub_10040BCDC;
  v75[3] = &unk_10065E9E0;
  id v45 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int16 v76 = v45;
  id v44 = objc_retainBlock(v75);
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  id obj = v5;
  id v6 = [obj countByEnumeratingWithState:&v71 objects:v86 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v72;
    id v10 = sub_10040BCF4;
    *(void *)&__int128 v7 = 138412546LL;
    __int128 v40 = v7;
    do
    {
      id v11 = 0LL;
      id v41 = v8;
      do
      {
        if (*(void *)v72 != v9) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)v11);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "fundingSources", v40));
        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3221225472LL;
        v69[2] = v10;
        v69[3] = &unk_10065EA08;
        id v70 = *(id *)(a1 + 48);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "pk_objectsPassingTest:", v69));
        if ([v14 count])
        {
          id v15 = [v14 count];
          if (v15 == [v13 count])
          {
            uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "pk_arrayByApplyingBlock:", &stru_10065EA48));
            ((void (*)(void *, os_log_s *, id))v44[2])(v44, v16, [v12 style]);
          }

          else
          {
            uint64_t v19 = v9;
            id v20 = v10;
            [v12 setFundingSources:v14];
            [*(id *)(a1 + 40) insertUserNotification:v12];
            uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "pk_arrayByApplyingBlock:", &stru_10065EA28));
            ((void (*)(void *, os_log_s *, id))v44[2])(v44, v16, [v12 style]);
            uint64_t Object = PKLogFacilityTypeGetObject(14LL);
            id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v23 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v12 notificationIdentifier]);
              *(_DWORD *)__int128 buf = v40;
              __int128 v83 = v23;
              __int16 v84 = 2112;
              id v85 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Added verification notification (%@) with removed funding sources %@",  buf,  0x16u);
            }

            id v10 = v20;
            uint64_t v9 = v19;
            id v8 = v41;
          }
        }

        else
        {
          [*(id *)(a1 + 40) removeUserNotification:v12];
          uint64_t v17 = PKLogFacilityTypeGetObject(14LL);
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v18 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v12 notificationIdentifier]);
            *(_DWORD *)__int128 buf = 138412290;
            __int128 v83 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Removed verification notification (%@) as no funding sources remain",  buf,  0xCu);
          }
        }

        id v11 = (char *)v11 + 1;
      }

      while (v8 != v11);
      id v8 = [obj countByEnumeratingWithState:&v71 objects:v86 count:16];
    }

    while (v8);
  }

  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  id v42 = *(id *)(a1 + 56);
  id v24 = [v42 countByEnumeratingWithState:&v65 objects:v81 count:16];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = *(void *)v66;
    do
    {
      for (unint64_t i = 0LL; i != v25; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v66 != v26) {
          objc_enumerationMutation(v42);
        }
        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) objectForKey:*(void *)(*((void *)&v65 + 1) + 8 * (void)i)]);
        v63[0] = _NSConcreteStackBlock;
        v63[1] = 3221225472LL;
        void v63[2] = sub_10040BD48;
        v63[3] = &unk_10065EA08;
        id v29 = v45;
        char v64 = v29;
        id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "pk_objectsPassingTest:", v63));
        id v31 = [v30 count];
        if (v31 == [v28 count])
        {
          id v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          v56[0] = _NSConcreteStackBlock;
          v56[1] = 3221225472LL;
          __int128 v57 = sub_10040BD8C;
          __int128 v58 = &unk_10065EA70;
          id v59 = *(id *)(a1 + 64);
          id v33 = v30;
          id v60 = v33;
          id v61 = *(id *)(a1 + 40);
          id v34 = v32;
          __int128 v62 = v34;
          sub_10040BD8C((uint64_t)v56, 0LL);
          v57((uint64_t)v56, 1LL);
          int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "pk_arrayByApplyingBlock:", &stru_10065EA90));
          uint64_t v36 = PKLogFacilityTypeGetObject(14LL);
          id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            __int128 v83 = v34;
            __int16 v84 = 2112;
            id v85 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Added verification notifications (%@) for funding sources %@",  buf,  0x16u);
          }
        }

        else
        {
          if (![v30 count]) {
            goto LABEL_28;
          }
          v54[0] = _NSConcreteStackBlock;
          v54[1] = 3221225472LL;
          void v54[2] = sub_10040BE14;
          v54[3] = &unk_10065EA08;
          __int128 v55 = v29;
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "pk_objectsPassingTest:", v54));
          v46[0] = _NSConcreteStackBlock;
          v46[1] = 3221225472LL;
          __int16 v47 = sub_10040BE58;
          id v48 = &unk_10065EAD8;
          id v49 = *(id *)(a1 + 32);
          id v50 = v38;
          uint64_t v51 = *(void *)(a1 + 72);
          id v52 = v28;
          id v53 = *(id *)(a1 + 40);
          id v39 = v38;
          sub_10040BE58((uint64_t)v46, 0LL);
          v47((uint64_t)v46, 1LL);

          id v34 = v55;
        }

LABEL_28:
      }

      id v25 = [v42 countByEnumeratingWithState:&v65 objects:v81 count:16];
    }

    while (v25);
  }
}

uint64_t sub_10040BB2C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 account]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
  id v5 = v2;
  id v6 = v4;
  __int128 v7 = v6;
  if (v5 == v6)
  {
    uint64_t v9 = 1LL;
  }

  else
  {
    if (v5) {
      BOOL v8 = v6 == 0LL;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      uint64_t v9 = 0LL;
    }
    else {
      uint64_t v9 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v9;
}

id sub_10040BBC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 fundingSources]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFundingSourceVerificationReminderUserNotification identifierForAccountIdentifier:fundingSources:style:]( PDAccountFundingSourceVerificationReminderUserNotification,  "identifierForAccountIdentifier:fundingSources:style:",  v4,  v5,  [v3 style]));

  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationIdentifier]);
  id v8 = v6;
  id v9 = v7;
  if (v8 == v9)
  {
  }

  else
  {
    id v10 = v9;
    if (!v8 || !v9)
    {

LABEL_9:
      [*(id *)(a1 + 32) removeUserNotification:v3];
      id v12 = 0LL;
      goto LABEL_10;
    }

    unsigned __int8 v11 = [v8 isEqualToString:v9];

    if ((v11 & 1) == 0) {
      goto LABEL_9;
    }
  }

  id v12 = v3;
LABEL_10:

  return v12;
}