void sub_1000EC238(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  void v5[5];
  id v6;
  __int128 v7;
  v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000EC2D0;
  v5[3] = &unk_100643388;
  v5[4] = v2;
  v4 = *(_OWORD *)(a1 + 48);
  v3 = (id)v4;
  v7 = v4;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_allRelevantTransactionSourceIdentifiersWithCompletion:", v5);
}

void sub_1000EC2D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EC390;
  block[3] = &unk_100643360;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  __int128 v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000EC390(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000EC3CC(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v6[2] = sub_1000EC47C;
  v6[3] = &unk_1006434C8;
  uint64_t v11 = *(void *)(a1 + 64);
  v6[1] = 3221225472LL;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  __int16 v12 = *(_WORD *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 56);
  dispatch_async(v3, v6);
}

void sub_1000EC47C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController will sync recently modified transactions for %@",  buf,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) allKeys]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));

  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 73);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000EC5E4;
  v12[3] = &unk_100643478;
  uint64_t v11 = *(void **)(a1 + 56);
  v12[4] = *(void *)(a1 + 48);
  id v13 = v11;
  [v7 backgroundModifiedRecordSyncForTranasctionSourceIdentifiers:v6 fromDate:v8 returnRecords:v9 formReport:v10 completion:v12];
}

void sub_1000EC5E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EC6A0;
  block[3] = &unk_10063C6A8;
  id v13 = v6;
  id v14 = v7;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_1000EC6A0(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1000EC8D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000EC8F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000EC9A4;
  v13[3] = &unk_1006434A0;
  id v15 = v7;
  uint64_t v16 = v9;
  v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v10, v13);
}

void sub_1000EC9A4(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000ECA3C;
  v5[3] = &unk_100643388;
  v5[4] = v2;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  id v3 = (id)v4;
  __int128 v7 = v4;
  id v6 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_allRelevantTransactionSourceIdentifiersWithCompletion:", v5);
}

void sub_1000ECA3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ECAFC;
  block[3] = &unk_100643360;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  __int128 v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000ECAFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000ECB38(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[5];
  id v9 = *(dispatch_queue_s **)(a1[4] + 40LL);
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_1000ECC08;
  v15[3] = &unk_100643540;
  uint64_t v10 = a1[6];
  id v19 = v7;
  uint64_t v20 = v10;
  v15[1] = 3221225472LL;
  id v16 = v6;
  id v11 = v8;
  uint64_t v12 = a1[4];
  id v17 = v11;
  uint64_t v18 = v12;
  uint64_t v21 = a1[7];
  id v13 = v6;
  id v14 = v7;
  dispatch_async(v9, v15);
}

void sub_1000ECC08(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController background record sync starting for: %@",  buf,  0xCu);
    }

    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) allKeys]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
    v10[0] = _NSConcreteStackBlock;
    v10[2] = sub_1000ECDC0;
    v10[3] = &unk_100643518;
    uint64_t v8 = *(void *)(a1 + 72);
    id v9 = *(void **)(a1 + 56);
    v10[4] = *(void *)(a1 + 48);
    uint64_t v13 = v8;
    v10[1] = 3221225472LL;
    id v12 = v9;
    id v11 = *(id *)(a1 + 32);
    [v5 backgroundRecordChangedSyncForTranasctionSourceIdentifiers:v7 completion:v10];
  }

  else
  {
    (*(void (**)(void, void, void))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  *(void *)(a1 + 32),  0LL);
  }

void sub_1000ECDC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ECE80;
  block[3] = &unk_100643360;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  __int128 v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000ECE80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000ECEBC(uint64_t a1)
{
  v1 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ECF3C;
  block[3] = &unk_1006427A0;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  dispatch_async(v1, block);
}

uint64_t sub_1000ECF3C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  __int128 v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController background record sync completed with error %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

void sub_1000ED2B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42)
{
}

void sub_1000ED2E8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[4];
  id v9 = (void *)a1[5];
  id v10 = *(dispatch_queue_s **)(v8 + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1000ED3B0;
  v16[3] = &unk_10063EE20;
  v16[4] = v8;
  id v11 = v9;
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  id v17 = v11;
  uint64_t v18 = v12;
  id v20 = v7;
  uint64_t v21 = v13;
  id v19 = v6;
  id v14 = v6;
  id v15 = v7;
  dispatch_async(v10, v16);
}

void sub_1000ED3B0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000ED45C;
  v7[3] = &unk_100643388;
  v7[4] = v2;
  __int128 v6 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v6;
  __int128 v9 = v6;
  id v8 = *(id *)(a1 + 56);
  objc_msgSend( v2,  "_queue_relevantTransactionSourceIdentifiersToSyncForPaymentApplication:onPaymentPass:completion:",  v3,  v4,  v7);
}

void sub_1000ED45C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ED51C;
  block[3] = &unk_100643360;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  __int128 v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000ED51C(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1000ED558(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000ED608;
  v13[3] = &unk_1006435B8;
  v13[4] = v8;
  id v14 = v6;
  id v15 = v7;
  uint64_t v16 = v9;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v10, v13);
}

void sub_1000ED608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000ED6A4;
  v6[3] = &unk_1006435E0;
  void v6[4] = v2;
  id v8 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = v4;
  uint64_t v9 = v5;
  [v3 defaultAccountForFeature:5 completion:v6];
}

void sub_1000ED6A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000ED760;
  v8[3] = &unk_1006435B8;
  id v9 = v3;
  id v11 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1000ED760(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v2 transactionSourceIdentifier]);
    if (v5)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Savings Account: %@",  v3));

      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) safelySetObject:v4 forKey:v5];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_1000ED840(uint64_t a1)
{
  v1 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ED8C0;
  block[3] = &unk_1006427A0;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  dispatch_async(v1, block);
}

void sub_1000ED8C0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  __int128 v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v7 = 138412290;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController all relevant transactionSourceIdentifiers: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) copy];
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

void sub_1000EDDE8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EDE0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1000EDE24(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = *(void **)(v8 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000EDF30;
    v12[3] = &unk_100643658;
    uint64_t v11 = *(void *)(a1 + 56);
    v12[4] = v8;
    uint64_t v17 = v11;
    id v16 = v7;
    id v13 = v6;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 48);
    [v10 accountWithIdentifier:v9 completion:v12];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_1000EDF30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EE01C;
  block[3] = &unk_100643630;
  id v11 = v3;
  __int128 v9 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v9;
  __int128 v16 = v9;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v15 = v7;
  id v8 = v3;
  dispatch_async(v4, block);
}

void sub_1000EE01C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL), v2);
    (*(void (**)(void, void, void))(*(void *)(a1 + 72) + 16LL))( *(void *)(a1 + 72),  *(void *)(a1 + 40),  0LL);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
      *(_DWORD *)buf = 138412546;
      uint64_t v16 = v5;
      __int16 v17 = 2114;
      uint64_t v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "The account with identifier %@ for pass %{public}@ is not on device. Fetching all the accounts now.",  buf,  0x16u);
    }

    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = *(void **)(v7 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000EE1C4;
    v10[3] = &unk_100643608;
    uint64_t v9 = *(void *)(a1 + 80);
    v10[4] = v7;
    uint64_t v14 = v9;
    id v11 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 72);
    id v12 = *(id *)(a1 + 40);
    [v8 updateAccountsWithCompletion:v10];
  }

void sub_1000EE1C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EE290;
  block[3] = &unk_10063B880;
  uint64_t v12 = *(void *)(a1 + 64);
  id v8 = v3;
  id v9 = v4;
  id v11 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1000EE290(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000EE324;
  v6[3] = &unk_10063F2D0;
  id v2 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pk_firstObjectPassingTest:", v6));
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_1000EE324(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 accountIdentifier]);
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_1000EE3A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (([*(id *)(a1 + 32) hasAssociatedPeerPaymentAccount] & 1) != 0
    && ([*(id *)(*(void *)(a1 + 40) + 8) hasPeerPaymentAccount] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "The peer payment account was missing from device after a provisioning. Updating now.",  buf,  2u);
    }

    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(void **)(v10 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000EE4CC;
    v12[3] = &unk_1006436A8;
    v12[4] = v10;
    id v14 = v7;
    id v13 = v6;
    [v11 updateAccountAndAssociatedAccountsWithCompletion:v12];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_1000EE4CC(uint64_t a1)
{
  id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000EE558;
  v3[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_1000EE558(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000EE56C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) hasAssociatedPeerPaymentAccount])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) peerPaymentAccount]);
    id v9 = v8;
    if (v8)
    {
      v22 = v7;
      id v23 = v6;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      uint64_t v21 = v8;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 associatedAccountInformation]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 associatedAccounts]);

      id v12 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v25;
        do
        {
          for (i = 0LL; i != v13; i = (char *)i + 1)
          {
            if (*(void *)v25 != v14) {
              objc_enumerationMutation(v11);
            }
            uint64_t v16 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
            __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 transactionSourceIdentifier]);
            if (v17)
            {
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 identifier]);
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 altDSID]);
              id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Peer Payment Associated Account: %@, %@",  v18,  v19));

              [*(id *)(a1 + 48) safelySetObject:v20 forKey:v17];
            }
          }

          id v13 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
        }

        while (v13);
      }

      id v7 = v22;
      id v6 = v23;
      v22[2](v22, v23, 0LL);
      id v9 = v21;
    }

    else
    {
      v7[2](v7, v6, 0LL);
    }
  }

  else
  {
    v7[2](v7, v6, 0LL);
  }
}

void sub_1000EE790(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(v8 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000EE880;
    v11[3] = &unk_1006436D0;
    v11[4] = v8;
    id v12 = *(id *)(a1 + 48);
    id v14 = v7;
    id v13 = v6;
    [v10 accountUsersForAccountWithIdentifier:v9 completion:v11];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_1000EE880(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000EE944;
  v7[3] = &unk_10063BA88;
  id v8 = v3;
  id v9 = v4;
  id v11 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1000EE944(uint64_t a1)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v25;
    uint64_t v16 = *(void *)v25;
    do
    {
      id v5 = 0LL;
      id v17 = v3;
      do
      {
        if (*(void *)v25 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)v5);
        if (([v6 isCurrentUser] & 1) == 0)
        {
          id v19 = v5;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          __int128 v20 = 0u;
          __int128 v21 = 0u;
          id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionSourceIdentifiers]);
          id v8 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v8)
          {
            id v9 = v8;
            uint64_t v10 = *(void *)v21;
            do
            {
              for (i = 0LL; i != v9; i = (char *)i + 1)
              {
                if (*(void *)v21 != v10) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v12 = *(void *)(*((void *)&v20 + 1) + 8LL * (void)i);
                id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
                id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Account User: %@",  v13));

                [*(id *)(a1 + 40) safelySetObject:v14 forKey:v12];
              }

              id v9 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
            }

            while (v9);
          }

          uint64_t v4 = v16;
          id v3 = v17;
          id v5 = v19;
        }

        id v5 = (char *)v5 + 1;
      }

      while (v5 != v3);
      id v3 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    }

    while (v3);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000EEB4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) length]
    && (id v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)) != 0LL
    && [v8 feature] == (id)2)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(dispatch_queue_s **)(v9 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000EEC4C;
    v11[3] = &unk_10063CD10;
    v11[4] = v9;
    id v14 = v7;
    id v12 = v6;
    id v13 = *(id *)(a1 + 48);
    dispatch_async(v10, v11);
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_1000EEC4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000EECF4;
  v4[3] = &unk_1006436F8;
  v4[4] = v2;
  id v7 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v3 defaultAccountForFeature:5 completion:v4];
}

void sub_1000EECF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000EEDBC;
  v6[3] = &unk_10063CD10;
  id v7 = v3;
  id v10 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1000EEDBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v2 transactionSourceIdentifier]);
    if (v5)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Savings Account: %@",  v3));

      [*(id *)(a1 + 48) safelySetObject:v4 forKey:v5];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_1000EEEA0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = *(dispatch_queue_s **)(v8 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000EEF88;
    block[3] = &unk_100642818;
    void block[4] = v8;
    id v11 = v9;
    uint64_t v12 = *(void *)(a1 + 48);
    id v14 = v11;
    uint64_t v17 = v12;
    id v16 = v7;
    id v15 = v6;
    dispatch_async(v10, block);
  }

  else
  {
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

void sub_1000EEF88(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000EF02C;
  v6[3] = &unk_100643388;
  void v6[4] = v2;
  __int128 v5 = *(_OWORD *)(a1 + 56);
  id v4 = (id)v5;
  __int128 v8 = v5;
  id v7 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_queue_filterRelevantTransactionSourceIdentifiersThatCanSyncWithCloudKit:completion:", v3, v6);
}

void sub_1000EF02C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EF0EC;
  block[3] = &unk_100643360;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  __int128 v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000EF0EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000EF128(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EF1C0;
  block[3] = &unk_100643748;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v9 = v4;
  uint64_t v10 = v5;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v6 = (id)v7;
  __int128 v11 = v7;
  dispatch_async(v3, block);
}

void sub_1000EF1C0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) organizationName]);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    *(_DWORD *)buf = 138543874;
    id v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Revelant cloud store transaction source identifiers for payment pass uniqueID %{public}@, pass name %@.\n%@",  buf,  0x20u);
  }

  __int128 v7 = *(void **)(a1 + 48);
  __int128 v8 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 48LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000EF308;
  v11[3] = &unk_1006412D0;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 56);
  id v12 = v9;
  uint64_t v13 = v10;
  dispatch_async(v8, v11);
}

void sub_1000EF308(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000EF4F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_1000EF508(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000EF5C8;
  v12[3] = &unk_1006423B8;
  __int128 v7 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v16 = v6;
  uint64_t v17 = v9;
  uint64_t v15 = v8;
  id v10 = v6;
  id v11 = v5;
  [v7 addOperation:v12];
}

void sub_1000EF5C8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_1000EF6B0;
  v15[3] = &unk_1006437C0;
  uint64_t v9 = (void *)a1[7];
  uint64_t v8 = a1[8];
  uint64_t v10 = a1[5];
  void v15[4] = a1[6];
  uint64_t v20 = v8;
  id v11 = (void *)a1[4];
  v15[1] = 3221225472LL;
  id v16 = v9;
  id v12 = (id)a1[5];
  id v18 = v6;
  id v19 = v7;
  id v17 = v12;
  id v13 = v6;
  id v14 = v7;
  [v11 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v10 completion:v15];
}

void sub_1000EF6B0(uint64_t a1, char a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[2] = sub_1000EF76C;
  v5[3] = &unk_100643798;
  id v3 = *(void **)(a1 + 40);
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v5[1] = 3221225472LL;
  char v11 = a2;
  uint64_t v10 = *(void *)(a1 + 72);
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 56);
  dispatch_async(v4, v5);
}

uint64_t sub_1000EF76C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) safelySetObject:*(void *)(a1 + 32) forKey:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer will not sync transaction from CloudKit with transactionSourceIdentifier %@, description %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000EF850(void *a1)
{
  id v2 = (void *)a1[5];
  id v3 = *(dispatch_queue_s **)(a1[4] + 48LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000EF8C8;
  v6[3] = &unk_1006412D0;
  id v4 = v2;
  uint64_t v5 = a1[6];
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, v6);
}

void sub_1000EF8C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1000EF98C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = PDScheduledActivityExists( @"CloudStoreTransactionSourceClientIdentifier",  @"CloudStoreTransactionSourceSync");
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v1, v2);
  }

  return result;
}

void sub_1000EFB60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKRule);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  -[PKRule parsePredicateFormat](v7, "parsePredicateFormat");
  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1000EFD08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKRule);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  -[PKRule parsePredicateFormat](v7, "parsePredicateFormat");
  [*(id *)(a1 + 40) addObject:v7];
}

id sub_1000F01FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___Rule,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1000F03CC(id a1, PKRule *a2, id a3)
{
}

void sub_1000F03D4(id a1, PKRule *a2, id a3)
{
}

void sub_1000F03DC(id a1, PKRule *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_OSVersionRequirementRangeForSQLValue(a3);
  -[PKRule setOsVersionRequirementRange:](v4, "setOsVersionRequirementRange:", v5);
}

void sub_1000F09A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  [*(id *)(a1 + 32) recordExpressUpgradeAttemptStatus:a3];
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v6 = v7;
    if (a3 != 2) {
      id v6 = 0LL;
    }
    (*(void (**)(uint64_t, id, uint64_t))(v5 + 16))(v5, v6, a3);
  }
}

BOOL sub_1000F0AA0(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:]( &OBJC_CLASS___PKSecureElement,  "supportsExpressForAutomaticSelectionTechnologyType:",  a2);
}

void sub_1000F0DCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
}

uint64_t sub_1000F0E18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F0E28(uint64_t a1)
{
}

void sub_1000F0E30(uint64_t a1)
{
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    BOOL v3 = WeakRetained == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v8 = WeakRetained;
    objc_msgSend(WeakRetained[6], "invalidateAssertionOfType:withIdentifier:handler:", 1);
    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0LL;

    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0LL;

    WeakRetained = v8;
  }
}

void sub_1000F0EC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  BOOL v3 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F0F68;
  block[3] = &unk_100643948;
  void block[4] = *(void *)(a1 + 48);
  objc_copyWeak(&v5, (id *)(a1 + 64));
  void block[5] = *(void *)(a1 + 56);
  dispatch_async(v3, block);
  objc_destroyWeak(&v5);
}

void sub_1000F0F68(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)) {
    BOOL v6 = WeakRetained == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    __int16 v9 = WeakRetained;
    objc_msgSend(WeakRetained[6], "invalidateAssertionOfType:withIdentifier:handler:", 1);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0LL;

    WeakRetained = v9;
  }
}

void sub_1000F1000(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_resume(*(dispatch_object_t *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40LL);
    uint64_t v5 = *(void *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000F119C;
    v16[3] = &unk_1006439E0;
    objc_copyWeak(&v19, (id *)(a1 + 88));
    id v18 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 48);
    [v4 requestPassUpgrade:v3 pass:v5 diagnosticReason:@"Transit Notification Service Automatic" completion:v16];

    objc_destroyWeak(&v19);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Pass ugprade failed because an assertion could not be acquired",  buf,  2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F151C;
    block[3] = &unk_100643A08;
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v8 = *(dispatch_queue_s **)(a1 + 56);
    id v9 = *(id *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    id v12 = v9;
    uint64_t v14 = v10;
    dispatch_async(v8, block);
  }

void sub_1000F1188(_Unwind_Exception *a1)
{
}

void sub_1000F119C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    if (v5 || !v6)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = a1[4];
        *(_DWORD *)buf = 138412546;
        id v22 = v13;
        __int16 v23 = 2112;
        id v24 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Failed to upgrade default payment pass to express: %@ %@",  buf,  0x16u);
      }

      (*((void (**)(void))a1[5] + 2))();
    }

    else
    {
      id v8 = -[PKExpressPassInformation initForPaymentPass:withTechologyTest:]( objc_alloc(&OBJC_CLASS___PKExpressPassInformation),  "initForPaymentPass:withTechologyTest:",  v6,  &stru_100643990);
      if (v8)
      {
        id v9 = -[PKExpressPassConfiguration initWithPassInformation:forSecureElementPass:]( objc_alloc(&OBJC_CLASS___PKExpressPassConfiguration),  "initWithPassInformation:forSecureElementPass:",  v8,  v6);
        uint64_t v10 = WeakRetained[3];
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_1000F143C;
        v17[3] = &unk_1006439B8;
        objc_copyWeak(&v20, a1 + 6);
        id v19 = a1[5];
        id v18 = a1[4];
        sub_10014C9F8(v10, v9, 0LL, v17);

        objc_destroyWeak(&v20);
      }

      else
      {
        uint64_t v14 = PKLogFacilityTypeGetObject(6LL);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          id v16 = a1[4];
          *(_DWORD *)buf = 138412290;
          id v22 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Express info failed to init: %@",  buf,  0xCu);
        }

        (*((void (**)(void))a1[5] + 2))();
      }
    }
  }

  else
  {
    (*((void (**)(void))a1[5] + 2))();
  }
}

void sub_1000F1410(_Unwind_Exception *a1)
{
}

BOOL sub_1000F142C(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:]( &OBJC_CLASS___PKSecureElement,  "supportsExpressForAutomaticSelectionTechnologyType:",  a2);
}

void sub_1000F143C(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
LABEL_9:
    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_10;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (!a2)
  {
    if (v7)
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Failed to set default payment pass as express.",  v9,  2u);
    }

    goto LABEL_9;
  }

  if (v7)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Set default payment pass as express.", buf, 2u);
  }

  id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_10:
  v8();
}

void sub_1000F151C(void *a1)
{
  uint64_t v2 = *(void *)(a1[5] + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  (*(void (**)(void))(a1[4] + 16LL))();
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1[6] + 8LL) + 40LL));
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;
}

void sub_1000F1914(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000F1ADC(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setUnknownCount:](v4, "setUnknownCount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1B20(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setFoodAndDrinksCount:]( v4,  "setFoodAndDrinksCount:",  [a3 unsignedIntegerValue]);
}

void sub_1000F1B64(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setShoppingCount:](v4, "setShoppingCount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1BA8(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setTravelCount:](v4, "setTravelCount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1BEC(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setServicesCount:](v4, "setServicesCount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1C30(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setFunCount:](v4, "setFunCount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1C74(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setHealthCount:](v4, "setHealthCount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1CB8(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setTransportcount:](v4, "setTransportcount:", [a3 unsignedIntegerValue]);
}

void sub_1000F1F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountVirtualCardStatusUpdate),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountVirtualCardStatusUpdate virtualCardStatusUpdate](v5, "virtualCardStatusUpdate"));
  [v3 addObject:v4];
}

void sub_1000F21F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [*(id *)(a1 + 48) persistentID];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[VirtualCard virtualCardsForVirtualCardStatusUpdatePID:inDatabase:]( &OBJC_CLASS___VirtualCard,  "virtualCardsForVirtualCardStatusUpdatePID:inDatabase:",  v4,  v5));

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 allObjects]);
  [v6 setUpdatedVirtualCards:v7];
}

void sub_1000F2470(id a1, PKAccountVirtualCardStatusUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountVirtualCardStatusUpdate setReason:](v4, "setReason:", [a3 integerValue]);
}

void sub_1000F2914(id a1, PKPeerPaymentPaymentModeIdentifiers *a2, id a3)
{
}

void sub_1000F29F8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id sub_1000F2DD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateDownloadMissingAssetsActivityWithForcedReschedule:0];
}

void sub_1000F2E70(uint64_t a1)
{
  if (PKPassbookIsSupported())
  {
    uint64_t v2 = -[PDUbiquityManager initWithDelegate:]( objc_alloc(&OBJC_CLASS___PDUbiquityManager),  "initWithDelegate:",  *(void *)(a1 + 32));
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = v2;

    [*(id *)(*(void *)(a1 + 32) + 32) start];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Passbook is not supported - sync disabled",  v7,  2u);
    }
  }

void sub_1000F3478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t sub_1000F34DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F34EC(uint64_t a1)
{
}

void sub_1000F34F4(void *a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000F356C;
  v6[3] = &unk_100643BF8;
  uint64_t v2 = (void *)a1[4];
  void v6[4] = a1[5];
  id v3 = objc_msgSend(v2, "pk_createArrayByApplyingBlock:", v6);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1000F356C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", a2));
  id v3 = v2;
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  uint64_t v5 = v4;

  return v5;
}

void sub_1000F35C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  unint64_t v2 = *(void *)(a1 + 96);
  unint64_t v4 = v3 * a2;
  if (v3 * a2 < v2)
  {
    uint64_t v6 = (char *)(v4 + v3);
    if (a2 == 1) {
      id v7 = *(char **)(a1 + 96);
    }
    else {
      id v7 = v6;
    }
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v32 = v4;
      __int16 v33 = 2048;
      v34 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: beginning image migration for indices [%lu, %lu).",  buf,  0x16u);
    }

    BOOL v11 = *(_BYTE *)(a1 + 120) != 0;
    unint64_t v28 = v4;
    if (v4 < (unint64_t)v7)
    {
      uint64_t v30 = 0LL;
      char v29 = 0;
      id v12 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
      *(void *)&__int128 v10 = 134217984LL;
      __int128 v27 = v10;
      while (1)
      {
        id v13 = objc_autoreleasePoolPush();
        uint64_t v14 = (char *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v4]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectAtIndexedSubscript:v4]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v12[398] null]);

        if (v15 == v16)
        {

          uint64_t v15 = 0LL;
          if (v11)
          {
LABEL_13:
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218242;
              unint64_t v32 = v4;
              __int16 v33 = 2112;
              v34 = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: partially migrating images for index %lu, pass (%@).",  buf,  0x16u);
            }

            objc_autoreleasePoolPop(v13);
            goto LABEL_16;
          }
        }

        else if (v11)
        {
          goto LABEL_13;
        }

        id v17 = v7;
        id v18 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "_cardWithUniqueID:cardDirectoryCoordinator:error:",  v14,  v15,  0,  v27));
        id v19 = (char *)[v18 passType];
        id v20 = [v18 style];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218754;
          unint64_t v32 = v4;
          __int16 v33 = 2048;
          v34 = v19;
          __int16 v35 = 2048;
          id v36 = v20;
          __int16 v37 = 2112;
          v38 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: migrating images for index %lu, pass (%lu-%ld:%@).",  buf,  0x2Au);
        }

        ++v30;

        __int128 v21 = *(void **)(a1 + 40);
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v18 displayProfile]);
        [v21 _createImageSetsForCardWithUniqueID:v14 cardDirectoryCoordinator:v15 displayProfile:v22];

        objc_autoreleasePoolPop(v13);
        if ((v29 + 1) < 8u)
        {
          ++v29;
          BOOL v11 = 0;
          id v7 = v17;
LABEL_22:
          id v12 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
          goto LABEL_23;
        }

        id v7 = v17;
        if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 104) < *(double *)(a1 + 112))
        {
          BOOL v11 = 0;
          char v29 = 0;
          goto LABEL_22;
        }

        id v12 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v27;
          unint64_t v32 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: image migration timing out at index %lu.",  buf,  0xCu);
        }

        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8LL) + 32LL));
        *(double *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = fmax( *(double *)(*(void *)(*(void *)(a1 + 64)
                                                                                              + 8LL)
                                                                                  + 24LL),
                                                                        CFAbsoluteTimeGetCurrent());
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8LL) + 32LL));
        char v29 = 0;
LABEL_16:
        BOOL v11 = 1;
LABEL_23:
      }
    }

    uint64_t v30 = 0LL;
LABEL_31:
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8LL) + 32LL));
    if (v11)
    {
      __int16 v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      if (!v23)
      {
        id v24 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
        uint64_t v25 = *(void *)(*(void *)(a1 + 72) + 8LL);
        __int128 v26 = *(void **)(v25 + 40);
        *(void *)(v25 + 40) = v24;

        __int16 v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      }

      objc_msgSend(v23, "addIndexesInRange:", v30 + v28, &v7[-v30 - v28], v27);
    }

    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) += v30;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8LL) + 32LL));
  }

void sub_1000F3A28(uint64_t a1)
{
  unint64_t v2 = (void *)PDOSTransactionCreate("PDCardFileManager");
  uint64_t v3 = v2;
  if (*(void *)(a1 + 56))
  {
    id v19 = v2;
    unint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = objc_autoreleasePoolPush();
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v4]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectAtIndexedSubscript:v4]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

      if (v7 == v8)
      {

        id v7 = 0LL;
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cardWithUniqueID:v6 cardDirectoryCoordinator:v7 error:0]);
      id v10 = [v9 passType];
      id v11 = [v9 style];
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218754;
        unint64_t v21 = v4;
        __int16 v22 = 2048;
        CFAbsoluteTime v23 = *(double *)&v10;
        __int16 v24 = 2048;
        id v25 = v11;
        __int16 v26 = 2112;
        __int128 v27 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: migrating images for deferred index %lu, pass (%lu-%ld:%@).",  buf,  0x2Au);
      }

      uint64_t v14 = *(void **)(a1 + 40);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 displayProfile]);
      [v14 _createImageSetsForCardWithUniqueID:v6 cardDirectoryCoordinator:v7 displayProfile:v15];

      objc_autoreleasePoolPop(v5);
      ++v4;
      unint64_t v16 = *(void *)(a1 + 56);
    }

    while (v4 < v16);
    uint64_t v3 = v19;
  }

  else
  {
    uint64_t v17 = PKLogFacilityTypeGetObject(0LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    unint64_t v16 = 0LL;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v18 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 64);
    *(_DWORD *)buf = 134218240;
    unint64_t v21 = v16;
    __int16 v22 = 2048;
    CFAbsoluteTime v23 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: finished deferred image migration for %lu passes in %0.3fs.",  buf,  0x16u);
  }
}

void sub_1000F3D38(uint64_t a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40LL);
  id v26 = 0LL;
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [v2 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:&__NSArray0__struct options:4 error:&v26]);
  id v5 = v26;

  if (!v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Unable to enumerate cards directory: %@",  buf,  0xCu);
    }
  }

  unint64_t v21 = v5;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v23;
    uint64_t v12 = PKRawPassExtension;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 lastPathComponent]);
        unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 pathExtension]);
        unsigned int v17 = [v16 isEqualToString:v12];

        if (v17)
        {
          CFAbsoluteTime v18 = *(void **)(a1 + 40);
          id v19 = sub_1000F3F44(v14);
          id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          [v18 addObject:v20];
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }

    while (v10);
  }
}

id sub_1000F3F44(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 lastPathComponent]);
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByDeletingPathExtension]);

  return v2;
}

void sub_1000F41A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_1000F41C8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F4204(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:NSUnderlyingErrorKey]);

  if (!v3) {
    goto LABEL_8;
  }
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  if (([v4 isEqualToString:PKPassKitErrorDomain] & 1) == 0)
  {

    goto LABEL_8;
  }

  id v5 = [v3 code];

  if (v5 != (id)-6000LL)
  {
LABEL_8:
    [*(id *)(a1 + 48) _deletePossibleInvalidCardWithUniqueID:*(void *)(a1 + 40) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    goto LABEL_9;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Skipping delete of missing object with uniqueID: %@ due to signature check being unreachable",  (uint8_t *)&v9,  0xCu);
  }

LABEL_9:
}

void sub_1000F4444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F445C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000F4798()
{
  if (qword_100707998 != -1) {
    dispatch_once(&qword_100707998, &stru_100643F58);
  }
  return (id)qword_100707990;
}

void sub_1000F48D4(uint64_t a1)
{
  id v4 = (id)PDOSTransactionCreate("PDCardFileManager");
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contentForCardWithUniqueID:*(void *)(a1 + 40)]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

  objc_autoreleasePoolPop(v2);
}

void sub_1000F4AAC(_Unwind_Exception *a1)
{
}

void sub_1000F4AD8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F4B14(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = sub_100243FB8((id *)objc_alloc(&OBJC_CLASS___PDPassDaemonData), v3);

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

void sub_1000F4D2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000F4D58(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F4D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v3));
    id v34 = v3;
    uint64_t v5 = PKPassPrivateDirectoryURLWithPassURL(v3);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v6));

    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    uint64_t v35 = a1;
    id obj = *(id *)(a1 + 32);
    id v38 = [obj countByEnumeratingWithState:&v45 objects:v50 count:16];
    if (!v38) {
      goto LABEL_28;
    }
    uint64_t v37 = *(void *)v46;
    while (1)
    {
      for (id i = 0LL; i != v38; id i = v28 + 1)
      {
        if (*(void *)v46 != v37) {
          objc_enumerationMutation(obj);
        }
        v40 = (char *)i;
        uint64_t v9 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v44 = 0u;
        uint64_t v39 = v9;
        uint64_t v11 = sub_100016B74(v9);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        id v13 = [v12 countByEnumeratingWithState:&v41 objects:v49 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v42;
          do
          {
            for (j = 0LL; j != v14; j = (char *)j + 1)
            {
              if (*(void *)v42 != v15) {
                objc_enumerationMutation(v12);
              }
              uint64_t v17 = *(void *)(*((void *)&v41 + 1) + 8LL * (void)j);
              uint64_t v18 = sub_100016B5C(v17);
              id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
              uint64_t v20 = sub_100016B68(v17);
              unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
              id v22 = [v19 createTileForState:v21 childTiles:0 withBundle:v4 privateBundle:v7];

              if (v22) {
                -[NSMutableArray addObject:](v10, "addObject:", v22);
              }
            }

            id v14 = [v12 countByEnumeratingWithState:&v41 objects:v49 count:16];
          }

          while (v14);
        }

        if (-[NSMutableArray count](v10, "count")) {
          id v23 = -[NSMutableArray copy](v10, "copy");
        }
        else {
          id v23 = 0LL;
        }
        uint64_t v24 = sub_100016B5C(v39);
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 metadata]);
        if ([v26 isGroupType])
        {
          id v27 = [v23 count];

          unint64_t v28 = v40;
          if (!v27) {
            goto LABEL_26;
          }
        }

        else
        {

          unint64_t v28 = v40;
        }

        uint64_t v29 = sub_100016B5C(v39);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        uint64_t v31 = sub_100016B68(v39);
        unint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        id v33 = [v30 createTileForState:v32 childTiles:v23 withBundle:v4 privateBundle:v7];

        if (v33) {
          [*(id *)(*(void *)(*(void *)(v35 + 40) + 8) + 40) addObject:v33];
        }

LABEL_26:
      }

      id v38 = [obj countByEnumeratingWithState:&v45 objects:v50 count:16];
      if (!v38)
      {
LABEL_28:

        id v3 = v34;
        break;
      }
    }
  }
}

void sub_1000F52A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000F52D0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000F5350;
  v4[3] = &unk_100643D10;
  uint64_t v6 = *(void *)(a1 + 56);
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  *(_OWORD *)uint64_t v5 = v3;
  [v1 performCoordinatedAction:v4];
}

void sub_1000F5350(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
    uint64_t v6 = a1 + 40;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 fileExistsAtPath:v5];
  }

  else
  {
    uint64_t v6 = a1 + 40;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

  if (*(_BYTE *)(*(void *)(*(void *)v6 + 8LL) + 24LL))
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = v3;
    if (qword_1007079B8 != -1) {
      dispatch_once(&qword_1007079B8, &stru_100643F98);
    }
    if (qword_1007079C0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
        int v13 = 138412546;
        uint64_t v14 = v11;
        __int16 v15 = 2112;
        uint64_t v16 = qword_1007079C0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Unable to move %@ due to previous error: %@",  (uint8_t *)&v13,  0x16u);
      }

      char v12 = 0;
    }

    else
    {
      char v12 = PKWriteBadPass(v7, v8, qword_1007079B0);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v12;
  }
}

void sub_1000F563C(uint64_t a1)
{
  id v5 = (id)PDOSTransactionCreate("PDCardFileManager");
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 64);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _cachedImageSetContainerForUniqueID:*(void *)(a1 + 40) type:*(void *)(a1 + 72) withDisplayProfile:*(void *)(a1 + 48) displayTraits:*(void *)(a1 + 56)]);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

  objc_autoreleasePoolPop(v2);
}

void sub_1000F57CC(uint64_t a1)
{
  id v5 = (id)PDOSTransactionCreate("PDCardFileManager");
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 64);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _imageSetContainerForUniqueID:*(void *)(a1 + 40) ofType:*(void *)(a1 + 72) withDisplayProfile:*(void *)(a1 + 48) suffix:*(void *)(a1 + 56)]);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

  objc_autoreleasePoolPop(v2);
}

void sub_1000F5D90(_Unwind_Exception *a1)
{
}

void sub_1000F5DF8(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL) + 40LL;
  uint64_t v5 = *(void *)(a1[8] + 8LL) + 40LL;
  uint64_t v6 = *(void *)(a1[9] + 8LL) + 40LL;
  uint64_t v7 = *(void *)(a1[10] + 8LL) + 40LL;
  id obj = 0LL;
  unsigned __int8 v8 = objc_msgSend( v2,  "_dc_writeCard:writtenCard:diff:daemonData:undecryptableAssets:error:",  v3,  v4,  v5,  v6,  v7,  &obj);
  id v9 = obj;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v8;
  objc_storeStrong((id *)(*(void *)(a1[11] + 8LL) + 40LL), v9);
}

void sub_1000F5F60(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = sub_1000F4798();
  id v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = -[PDCardFileManager localNonUbiquitousCatalogURL]_0();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v1 writeToURL:v5 nonUbiquitousCatalogURL:v4 atomically:1];
}

void sub_1000F60D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F60F0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F63A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1000F63C4(uint64_t a1)
{
  id result = objc_msgSend( *(id *)(a1 + 32),  "_dc_deleteCardWithUniqueID:cardDirectoryCoordinator:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000F6678( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F6694(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000F6A68(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dc_performCacheMaintenanceActivity");
}

id sub_1000F6BCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _recursivelyCheckRevocationStatusForPassUniqueIdentifiers:*(void *)(a1 + 40) osTransaction:*(void *)(a1 + 48)];
}

void sub_1000F6CE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F6CFC(uint64_t a1, char a2, char a3)
{
  id v6 = PDDefaultQueue();
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F6DB4;
  block[3] = &unk_100643E00;
  id v11 = *(id *)(a1 + 32);
  char v13 = a2;
  char v14 = a3;
  __int128 v9 = *(_OWORD *)(a1 + 40);
  id v8 = (id)v9;
  __int128 v12 = v9;
  dispatch_async(v7, block);
}

void sub_1000F6DB4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serialNumber]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@/%@", v2, v3));

  LODWORD(v3) = *(unsigned __int8 *)(a1 + 56);
  uint64_t Object = PKLogFacilityTypeGetObject(5LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (!(_DWORD)v3)
  {
    if (v7)
    {
      *(_DWORD *)buf = 138412290;
      __int16 v15 = v4;
      __int128 v12 = "Revocation check for pass [%@] failed";
      goto LABEL_11;
    }

void sub_1000F71A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F71BC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F7368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000F7380(void *a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = +[PKImageSet cachedXPCContainerForImageSetWithType:displayProfile:displayTraits:cacheURL:]( &OBJC_CLASS___PKImageSet,  "cachedXPCContainerForImageSetWithType:displayProfile:displayTraits:cacheURL:",  a1[8],  a1[4],  a1[5],  a1[6]);
    uint64_t v4 = *(void *)(a1[7] + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

void sub_1000F74F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000F750C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F76B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000F76D0(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a1[8];
    uint64_t v4 = a1[4];
    id v5 = a2;
    double v6 = PKScreenScale();
    double v7 = PKScreenSize();
    id v9 = +[PKImageSet createXPCContainerForImageSetWithType:displayProfile:screenScale:screenSize:suffix:fileURL:cacheURL:]( &OBJC_CLASS___PKImageSet,  "createXPCContainerForImageSetWithType:displayProfile:screenScale:screenSize:suffix:fileURL:cacheURL:",  v3,  v4,  a1[5],  v5,  a1[6],  v6,  v7,  v8);

    uint64_t v10 = *(void *)(a1[7] + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

void sub_1000F7940(_Unwind_Exception *a1)
{
}

void sub_1000F796C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F79A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = +[PKContent createWithFileURL:dataTypeIdentifier:]( &OBJC_CLASS___PKContent,  "createWithFileURL:dataTypeIdentifier:",  a2,  PKPassDataTypeIdentifier);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

id sub_1000F79F8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _objectURLForUniqueID:v4]);
    int v8 = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Content for object with unique ID %@ unavailable at %@",  (uint8_t *)&v8,  0x16u);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CardFileManager unable to load content for uniqueID %@",  (uint8_t *)&v8,  0xCu);
  }

  return [*(id *)(a1 + 40) _deletePossibleInvalidCardWithUniqueID:*(void *)(a1 + 32) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

void sub_1000F7DA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void *sub_1000F7DC8(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    id v3 = a2;
    id v4 = objc_alloc(&OBJC_CLASS___PKFileDataAccessor);
    uint64_t v5 = *(void *)(v2[6] + 8LL);
    id obj = *(id *)(v5 + 40);
    id v6 = [v4 initWithFileURL:v3 error:&obj coordinator:v2[4]];

    objc_storeStrong((id *)(v5 + 40), obj);
    uint64_t v7 = *(void *)(v2[5] + 8LL);
    int v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    return [*(id *)(*(void *)(v2[5] + 8) + 40) setExplicitDataTypeIdentifier:PKPassDataTypeIdentifier];
  }

  return result;
}

void sub_1000F8048(uint64_t a1, void *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 path]);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138412802;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    __int128 v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to instantiate card from %@ - %@: %@",  (uint8_t *)&v9,  0x20u);
  }
}

LABEL_49:
  return v25;
}

          v50 = PKLogFacilityTypeGetObject(14LL);
          id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v19 serviceIdentifier]);
            *(_DWORD *)buf = 138412290;
            v112 = v23;
            uint64_t v24 = "Not suppressing transaction from UI: %@, waiting for more events";
            goto LABEL_51;
          }
        }

        else
        {
          unint64_t v21 = PKLogFacilityTypeGetObject(14LL);
          id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v91 identifier]);
            *(_DWORD *)buf = 138412290;
            v112 = v23;
            uint64_t v24 = "No disbursement found for %@";
LABEL_51:
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0xCu);
          }
        }

        goto LABEL_53;
      }
    }
  }

void sub_1000F8950(_Unwind_Exception *a1)
{
}

void sub_1000F8978(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 48LL));
  [WeakRetained removeMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 48)];
}

void sub_1000F89B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = sub_100243FB8((id *)objc_alloc(&OBJC_CLASS___PDPassDaemonData), v3);

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

void sub_1000F8A1C(uint64_t a1)
{
  id v2 = (id)PDOSTransactionCreate("PDCardFileManager");
  [*(id *)(a1 + 32) _createImageSetsForCardWithUniqueID:*(void *)(a1 + 40) cardDirectoryCoordinator:*(void *)(a1 + 48) displayProfile:*(void *)(a1 + 56)];
}

id sub_1000F8A60(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) isInvalidated];
  if ((result & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 48LL));
    [WeakRetained insertOrReplaceMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 56)];

    return [*(id *)(a1 + 48) _evaluateDownloadMissingAssetsActivityWithForcedReschedule:1];
  }

  return result;
}

void sub_1000F8CD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  [WeakRetained removeMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 40)];
}

void sub_1000F9EE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = objc_autoreleasePoolPush();
  __int16 v11 = *(void **)(a1 + 32);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000F9FD0;
  v15[3] = &unk_1006396B0;
  id v13 = v9;
  id v17 = v13;
  id v14 = v8;
  id v16 = v14;
  [v11 _downloadRemoteAssetsForCardWithUniqueID:v12 completion:v15];

  objc_autoreleasePoolPop(v10);
}

uint64_t sub_1000F9FD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

id sub_1000F9FE4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: missing remote asset download activity finished.",  v5,  2u);
  }

  return [*(id *)(a1 + 32) _evaluateDownloadMissingAssetsActivityWithForcedReschedule:0];
}

void sub_1000FA4C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
}

void sub_1000FA518(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000FA554(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = objc_autoreleasePoolPush();
  if ([*(id *)(*(void *)(a1[7] + 8) + 40) isInvalidated])
  {
    v9[2](v9, v8, 1LL);
  }

  else
  {
    __int16 v11 = (void *)a1[4];
    uint64_t v12 = a1[5];
    uint64_t v13 = *(void *)(a1[6] + 80LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1000FA66C;
    v14[3] = &unk_10063EF60;
    uint64_t v17 = a1[8];
    id v16 = v9;
    id v15 = v8;
    [v11 downloadRemoteAssetItem:v12 withCloudStoreCoordinatorDelegate:v13 completion:v14];
  }

  objc_autoreleasePoolPop(v10);
}

uint64_t sub_1000FA66C(void *a1, int a2)
{
  if (a2) {
    ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
  }
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_1000FA698(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000FA744;
  v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1000FA744(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000FA758(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) isInvalidated])
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }
    goto LABEL_20;
  }

  id v9 = objc_autoreleasePoolPush();
  uint64_t v46 = 0LL;
  __int128 v47 = &v46;
  uint64_t v48 = 0x2020000000LL;
  char v49 = 0;
  unint64_t v10 = *(void *)(a1 + 80);
  unint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v11 >= v10)
  {
    if (v14)
    {
      unint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 134218242;
      unint64_t v51 = v10;
      __int16 v52 = 2112;
      unint64_t v53 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: Downloaded all %lu pending assets for pass with uniqueID:%@",  buf,  0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 48LL));
    [WeakRetained removeMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 48)];

    *((_BYTE *)v47 + 24) = 1;
    goto LABEL_13;
  }

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 134218498;
    unint64_t v51 = v11;
    __int16 v52 = 2048;
    unint64_t v53 = v10;
    __int16 v54 = 2112;
    uint64_t v55 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDCardFileManager: Downloaded %lu of %lu pending assets for pass with uniqueID:%@",  buf,  0x20u);
  }

  BOOL v16 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) != 0LL;
  *((_BYTE *)v47 + 24) = v16;
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    if (!v16) {
      goto LABEL_18;
    }
LABEL_13:
    id v19 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    v43[2] = sub_1000FAB68;
    v43[3] = &unk_100643C20;
    uint64_t v20 = *(void *)(a1 + 40);
    unint64_t v21 = *(void **)(a1 + 48);
    __int128 v45 = &v46;
    v43[4] = v20;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    id v44 = v21;
    [v19 performCoordinatedAction:v43];
    id v22 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _cardWithUniqueID:*(void *)(a1 + 48) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) error:0]);
    id v23 = v22;
    if (v22)
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 displayProfile]);
      id v25 = PDHeavyUtilityQueue();
      id v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000FAC08;
      block[3] = &unk_100643EF0;
      id v27 = *(void **)(a1 + 48);
      void block[4] = *(void *)(a1 + 40);
      id v28 = v27;
      uint64_t v29 = *(void *)(a1 + 64);
      id v41 = v24;
      uint64_t v42 = v29;
      id v40 = v28;
      id v30 = v24;
      dispatch_block_t v31 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
      dispatch_async(v26, v31);
    }

    if (*((_BYTE *)v47 + 24))
    {
      id v32 = PDDefaultQueue();
      id v33 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v32);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_1000FAC54;
      v37[3] = &unk_1006392B0;
      id v34 = *(void **)(a1 + 48);
      v37[4] = *(void *)(a1 + 40);
      id v38 = v34;
      dispatch_async(v33, v37);
    }

    goto LABEL_18;
  }

  id v36 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 48LL));
  [v36 incrementMissingRemoteAssetsPersistentStoreItemDownloadRetriesCountWithUniqueID:*(void *)(a1 + 48)];

  if (*((_BYTE *)v47 + 24)) {
    goto LABEL_13;
  }
LABEL_18:
  _Block_object_dispose(&v46, 8);
  objc_autoreleasePoolPop(v9);
  uint64_t v35 = *(void *)(a1 + 56);
  if (v35) {
    (*(void (**)(void))(v35 + 16))();
  }
LABEL_20:
}

void sub_1000FAB40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000FAB68(uint64_t a1, const __CFURL *a2)
{
  if (a2)
  {
    CFBundleRef v3 = CFBundleCreate(kCFAllocatorDefault, a2);
    if (v3)
    {
      CFBundleRef v4 = v3;
      _CFBundleFlushBundleCaches(v3);
      CFRelease(v4);
    }

    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cacheURLForUniqueID:*(void *)(a1 + 40)]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    [v5 removeItemAtURL:v6 error:0];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

void sub_1000FAC08(uint64_t a1)
{
  id v2 = (id)PDOSTransactionCreate("PDCardFileManager");
  [*(id *)(a1 + 32) _createImageSetsForCardWithUniqueID:*(void *)(a1 + 40) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) displayProfile:*(void *)(a1 + 48)];
}

void sub_1000FAC54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  [WeakRetained cardFileManager:*(void *)(a1 + 32) didUpdateRemoteAssetsForPassWithUniqueID:*(void *)(a1 + 40)];
}

void sub_1000FAD30(id a1)
{
  uint64_t v1 = PKCardsDirectoryURL(a1);
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  CFBundleRef v3 = (void *)qword_100707980;
  qword_100707980 = v2;
}

void sub_1000FAD54(id a1)
{
  uint64_t v1 = PKCardsCatalogFileURL(a1);
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  CFBundleRef v3 = (void *)qword_100707990;
  qword_100707990 = v2;
}

void sub_1000FAD78(id a1)
{
  uint64_t v1 = PKCardsNonUbiquitousCatalogFileURL(a1);
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  CFBundleRef v3 = (void *)qword_1007079A0;
  qword_1007079A0 = v2;
}

void sub_1000FAD9C(id a1)
{
  uint64_t v1 = PKHomeDirectoryPath(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"BadLocalPasses"]);
  CFBundleRef v4 = (void *)qword_1007079B0;
  qword_1007079B0 = v3;

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v20 = 0LL;
  unsigned __int8 v6 = [v5 createDirectoryAtPath:qword_1007079B0 withIntermediateDirectories:1 attributes:0 error:&v20];
  id v7 = (NSError *)v20;

  if ((v6 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v24 = qword_1007079B0;
      __int16 v25 = 2112;
      uint64_t v26 = qword_1007079C0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Unable to create directory %@: %@",  buf,  0x16u);
    }

    if (!v7)
    {
      unint64_t v10 = objc_alloc(&OBJC_CLASS___NSError);
      NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
      unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{Failed to create directory=%@}",  qword_1007079B0));
      id v22 = v11;
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
      id v7 = -[NSError initWithDomain:code:userInfo:]( v10,  "initWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  v12);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v14 = PKHomeDirectoryPath(v13);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    unsigned __int8 v16 = [v13 fileExistsAtPath:v15];

    if ((v16 & 1) == 0)
    {
      BOOL v17 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        uint64_t v18 = PKHomeDirectoryPath(v17);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        *(_DWORD *)buf = 138412290;
        uint64_t v24 = (uint64_t)v19;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Home directory does not exist, failed to create intermediaries: %@",  buf,  0xCu);
      }
    }

    objc_storeStrong((id *)&qword_1007079C0, v7);
  }
}

void sub_1000FB1C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000FB1D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000FB1E8(uint64_t a1)
{
}

uint64_t sub_1000FB1F0(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithValue:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (v2)
  {
    switch((unint64_t)[*(id *)(a1 + 32) type])
    {
      case 0uLL:
        uint64_t v3 = &OBJC_CLASS___TileValueText;
        uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueTypeText]);
        goto LABEL_7;
      case 1uLL:
        uint64_t v3 = &OBJC_CLASS___TileValueDate;
        uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueTypeDate]);
        goto LABEL_7;
      case 2uLL:
        uint64_t v3 = &OBJC_CLASS___TileValueNumber;
        uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueTypeNumber]);
        goto LABEL_7;
      case 3uLL:
        uint64_t v3 = &OBJC_CLASS___TileValueForeignReference;
        uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueTypeForeignReference]);
LABEL_7:
        uint64_t v5 = (void *)v4;
        unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue( -[__objc2_class insertValue:forBaseValue:inDatabase:]( v3,  "insertValue:forBaseValue:inDatabase:",  v4,  v2,  *(void *)(a1 + 40)));

        if (v6) {
          goto LABEL_8;
        }
        goto LABEL_9;
      default:
LABEL_8:
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v2);
        uint64_t v7 = 1LL;
        break;
    }
  }

  else
  {
LABEL_9:
    uint64_t v7 = 0LL;
  }

  return v7;
}

id *sub_1000FB4C8(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  unint64_t v11 = 0LL;
  if (a1 && v8 && v9)
  {
    v15.receiver = a1;
    v15.super_class = (Class)&OBJC_CLASS___PDPassTileDescriptorDescriptorStatePair;
    id v12 = (id *)objc_msgSendSuper2(&v15, "init");
    id v13 = v12;
    if (v12)
    {
      objc_storeStrong(v12 + 1, a2);
      objc_storeStrong(v13 + 2, a3);
      objc_storeStrong(v13 + 3, a4);
    }

    a1 = v13;
    unint64_t v11 = a1;
  }

  return v11;
}

void sub_1000FB8C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000FB9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _predicateForPersistentID:v7]);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v4 anyInDatabase:v5 predicate:v8]);

  id v9 = *(void **)(a1 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v11 _verificationAttempt]);
  [v9 safelyAddObject:v10];
}

void sub_1000FBC88(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountFundingSourceVerificationAttempt setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1000FBCCC(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountFundingSourceVerificationAttempt setSentDate:](v4, "setSentDate:", v5);
}

void sub_1000FBD18(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountFundingSourceVerificationAttempt setExpiryDate:](v4, "setExpiryDate:", v5);
}

void sub_1000FBD64(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountFundingSourceVerificationAttempt setFailureReason:]( v4,  "setFailureReason:",  [a3 integerValue]);
}

NSMutableArray *PDSharesFromLegacyCarKeyTables(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 devicePrimaryPaymentApplication]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 subcredentials]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 anyObject]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  v9,  v3));
    if (v10)
    {
      id v30 = v3;
      id v28 = v10;
      id v11 = [v10 persistentID];
      uint64_t Object = PKLogFacilityTypeGetObject(27LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        id v41 = v5;
        __int16 v42 = 2112;
        __int128 v43 = v9;
        __int16 v44 = 2048;
        id v45 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: Migrating shares for pass %@, subcredential: %@ (pid: %lld)",  buf,  0x20u);
      }

      uint64_t v29 = v5;

      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_1000FC1B4;
      v37[3] = &unk_1006440A0;
      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v38 = v14;
      id v39 = v9;
      objc_super v15 = objc_retainBlock(v37);
      unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v11));
      BOOL v17 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"b",  v16));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___AppletSubcredentialInvitationReceipt,  "queryWithDatabase:predicate:",  v30,  v17));

      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      v34[2] = sub_1000FC2F4;
      v34[3] = &unk_1006440C8;
      id v19 = v30;
      id v35 = v19;
      id v20 = v15;
      id v36 = v20;
      [v18 enumeratePersistentIDsUsingBlock:v34];
      NSErrorUserInfoKey v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v11));
      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"a",  v21));
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___SharedAppletSubcredential,  "queryWithDatabase:predicate:",  v19,  v22));

      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      v31[2] = sub_1000FC858;
      v31[3] = &unk_1006440C8;
      id v32 = v19;
      id v33 = v20;
      uint64_t v24 = v20;
      [v23 enumeratePersistentIDsUsingBlock:v31];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v41 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: migrating shares from old tables before deleting: %@",  buf,  0xCu);
      }

      __int16 v25 = v33;
      uint64_t v26 = v14;

      id v10 = v28;
      id v5 = v29;
      id v3 = v30;
    }

    else
    {
      uint64_t v26 = 0LL;
    }
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  return v26;
}

id sub_1000FC1B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if (objc_msgSend(v3, "isSameUnderlyingShareAs:", v9, (void)v12))
        {
          id v10 = v9;

          goto LABEL_11;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  [v3 setSubcredentialIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) addObject:v3];
  id v10 = v3;
LABEL_11:

  return v10;
}

void sub_1000FC2F4(uint64_t a1, PKPassCredentialShare *a2)
{
  id v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AppletSubcredentialInvitationReceipt),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[SQLiteEntity persistentID](v4, "persistentID")));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"b",  v5));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___SharedAppletSubcredentialMetadata,  "anyInDatabase:predicate:",  *(void *)(a1 + 32),  v6));
  if (v7)
  {
    id v8 = v4;
    id v9 = objc_alloc_init(&OBJC_CLASS___PKPassCredentialShare);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v8, "valueForProperty:", @"a"));
    -[PKPassCredentialShare setIdentifier:](v9, "setIdentifier:", v10);

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForProperty:@"e"]);
    -[PKPassCredentialShare setChannelTransportIdentifier:](v9, "setChannelTransportIdentifier:", v11);

    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForProperty:@"c"]);
    unsigned int v13 = [v12 BOOLValue];

    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v8, "valueForProperty:", @"f"));
    unsigned int v15 = [v14 BOOLValue];

    uint64_t v16 = 4LL;
    if (!v15) {
      uint64_t v16 = 5LL;
    }
    if (v13) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    -[PKPassCredentialShare setTargetDevice:](v9, "setTargetDevice:", v17);
    -[PKPassCredentialShare setStatus:](v9, "setStatus:", 2LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForProperty:@"f"]);
    unsigned int v19 = [v18 BOOLValue];

    if (v19)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(27LL);
      NSErrorUserInfoKey v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 138412290;
        id v32 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: discarding credential share from invite because revoked. %@",  (uint8_t *)&v31,  0xCu);
      }

      id v22 = 0LL;
    }

    else
    {
      id v22 = v9;
    }

    if (v22)
    {
      uint64_t v24 = *(void *)(a1 + 40);
      __int16 v25 = sub_1000FC674(v7);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      uint64_t v27 = (*(uint64_t (**)(uint64_t, void *))(v24 + 16))(v24, v26);
      id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

      [v28 addCredentialShare:v22];
      [v28 setManageability:1];
      uint64_t v29 = PKLogFacilityTypeGetObject(27LL);
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 134218498;
        id v32 = a2;
        __int16 v33 = 2112;
        id v34 = v22;
        __int16 v35 = 2112;
        id v36 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: Migrating invite %lld and creating new credential share: %@ \n Share: %@",  (uint8_t *)&v31,  0x20u);
      }
    }
  }

  else
  {
    uint64_t v23 = PKLogFacilityTypeGetObject(27LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v31) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: Unable to find metadata for invite",  (uint8_t *)&v31,  2u);
    }
  }
}

PKPassShare *sub_1000FC674(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(&OBJC_CLASS___PKPassShare);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 valueForProperty:@"i"]);
  -[PKPassShare setGroupIdentifier:](v2, "setGroupIdentifier:", v3);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 valueForProperty:@"h"]);
  id v5 = v4;
  if (v4)
  {
    id v6 = -[NSUUID initWithUUIDBytes:]( [NSUUID alloc], "initWithUUIDBytes:", [v4 bytes]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v6, "UUIDString"));
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  if (v7) {
    id v8 = v7;
  }
  else {
    id v8 = v3;
  }
  -[PKPassShare setIdentifier:](v2, "setIdentifier:", v8);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v1 valueForProperty:@"g"]);
  id v10 = [v9 unsignedIntegerValue];

  id v11 = -[PKPassSharedEntitlement initWithCarKeyEntitlementValue:]( objc_alloc(&OBJC_CLASS___PKPassSharedEntitlement),  "initWithCarKeyEntitlementValue:",  v10);
  uint64_t v17 = v11;
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  -[PKPassShare setSharedEntitlements:](v2, "setSharedEntitlements:", v12);

  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v1 valueForProperty:@"c"]);
  unsigned __int8 v14 = [v13 BOOLValue];

  if ((v14 & 1) == 0)
  {
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v1 valueForProperty:@"e"]);
    -[PKPassShare setRecipientHandle:](v2, "setRecipientHandle:", v15);
  }

  -[PKPassShare setManageability:](v2, "setManageability:", 1LL);

  return v2;
}

void sub_1000FC858(uint64_t a1, uint64_t a2)
{
  id v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___SharedAppletSubcredential),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[SQLiteEntity persistentID](v4, "persistentID")));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"a",  v5));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___SharedAppletSubcredentialMetadata,  "anyInDatabase:predicate:",  *(void *)(a1 + 32),  v6));
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = sub_1000FC674(v7);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(v9 + 16))(v9, v11);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    unsigned __int8 v14 = v4;
    id v15 = v8;
    uint64_t v16 = objc_alloc_init(&OBJC_CLASS___PKPassCredentialShare);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v14, "valueForProperty:", @"b"));
    -[PKPassCredentialShare setIdentifier:](v16, "setIdentifier:", v17);

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 valueForProperty:@"d"]);
    -[PKPassCredentialShare setChannelTransportIdentifier:](v16, "setChannelTransportIdentifier:", v18);

    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v15 valueForProperty:@"c"]);
    LODWORD(v15) = [v19 BOOLValue];

    if ((_DWORD)v15) {
      uint64_t v20 = 4LL;
    }
    else {
      uint64_t v20 = 0LL;
    }
    -[PKPassCredentialShare setTargetDevice:](v16, "setTargetDevice:", v20);
    NSErrorUserInfoKey v21 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v14, "valueForProperty:", @"d"));
    unint64_t v22 = (unint64_t)[v21 integerValue];

    uint64_t v23 = 0LL;
    if (v22 <= 5) {
      uint64_t v23 = qword_1004D68D0[v22];
    }
    -[PKPassCredentialShare setStatus:](v16, "setStatus:", v23);

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v14, "valueForProperty:", @"c"));
    [v13 setRecipientNickname:v24];

    [v13 addCredentialShare:v16];
    [v13 setManageability:1];
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 134218498;
      uint64_t v29 = a2;
      __int16 v30 = 2112;
      int v31 = v16;
      __int16 v32 = 2112;
      __int16 v33 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: Migrating shared subcredential %lld and creating new credential share: %@ \n Share: %@",  (uint8_t *)&v28,  0x20u);
    }
  }

  else
  {
    uint64_t v27 = PKLogFacilityTypeGetObject(27LL);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v2_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_DEFAULT,  "CarKeyDatabaseMigration: Unable to find metadata for shared subcredential",  (uint8_t *)&v28,  2u);
    }
  }
}

uint64_t PDUEEKeyFromString(void *a1)
{
  id v1 = a1;
  if ([@"currentRegion" isEqualToString:v1])
  {
    uint64_t v2 = 1LL;
  }

  else if ([@"isApplePayActive" isEqualToString:v1])
  {
    uint64_t v2 = 2LL;
  }

  else if ([@"isApplePaySetupAvailable" isEqualToString:v1])
  {
    uint64_t v2 = 104LL;
  }

  else if ([@"isPrimaryAppleAccountVerified" isEqualToString:v1])
  {
    uint64_t v2 = 105LL;
  }

  else if ([@"isDeviceRegisteredWithBroker" isEqualToString:v1])
  {
    uint64_t v2 = 106LL;
  }

  else if ([@"hasPaymentCard" isEqualToString:v1])
  {
    uint64_t v2 = 107LL;
  }

  else if ([@"hasDebitCard" isEqualToString:v1])
  {
    uint64_t v2 = 108LL;
  }

  else if ([@"hasApplePayTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 109LL;
  }

  else if ([@"daysSinceLastTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 110LL;
  }

  else if ([@"daysSinceOldestPaymentPassIngestDate" isEqualToString:v1])
  {
    uint64_t v2 = 111LL;
  }

  else if ([@"daysSinceOldestCreditCardIngestDate" isEqualToString:v1])
  {
    uint64_t v2 = 112LL;
  }

  else if ([@"defaultCreditAccountSetupFeatureState" isEqualToString:v1])
  {
    uint64_t v2 = 3LL;
  }

  else if ([@"hasDefaultCreditAccount" isEqualToString:v1])
  {
    uint64_t v2 = 4LL;
  }

  else if ([@"defaultCreditAccountState" isEqualToString:v1])
  {
    uint64_t v2 = 5LL;
  }

  else if ([@"defaultCreditAccountLifetimeRewards" isEqualToString:v1])
  {
    uint64_t v2 = 6LL;
  }

  else if ([@"defaultCreditAccountHasPhysicalCard" isEqualToString:v1])
  {
    uint64_t v2 = 7LL;
  }

  else if ([@"defaultCreditAccountHasVirtualCard" isEqualToString:v1])
  {
    uint64_t v2 = 8LL;
  }

  else if ([@"defaultCreditAccountHasDynamicSecurityCode" isEqualToString:v1])
  {
    uint64_t v2 = 9LL;
  }

  else if ([@"defaultCreditAccountRequiresDebtCollectionNotices" isEqualToString:v1])
  {
    uint64_t v2 = 10LL;
  }

  else if ([@"defaultCreditAccountBalanceStatus" isEqualToString:v1])
  {
    uint64_t v2 = 11LL;
  }

  else if ([@"defaultCreditAccountCyclesPastDue" isEqualToString:v1])
  {
    uint64_t v2 = 12LL;
  }

  else if ([@"defaultCreditAccountInGrace" isEqualToString:v1])
  {
    uint64_t v2 = 13LL;
  }

  else if ([@"defaultCreditAccountInDisasterRecovery" isEqualToString:v1])
  {
    uint64_t v2 = 14LL;
  }

  else if ([@"defaultCreditAccountHasDisputeOpen" isEqualToString:v1])
  {
    uint64_t v2 = 15LL;
  }

  else if ([@"defaultCreditAccountDaysSinceDisputeOpened" isEqualToString:v1])
  {
    uint64_t v2 = 16LL;
  }

  else if ([@"defaultCreditAccountAvailableCredit" isEqualToString:v1])
  {
    uint64_t v2 = 17LL;
  }

  else if ([@"defaultCreditAccountSupportsShowNotifications" isEqualToString:v1])
  {
    uint64_t v2 = 18LL;
  }

  else if ([@"defaultCreditAccountPassIsDefault" isEqualToString:v1])
  {
    uint64_t v2 = 19LL;
  }

  else if ([@"defaultCreditAccountDaysSinceLastTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 20LL;
  }

  else if ([@"defaultCreditAccountHasInStoreTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 21LL;
  }

  else if ([@"defaultCreditAccountHasInAppTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 22LL;
  }

  else if ([@"defaultCreditAccountHasWebTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 23LL;
  }

  else if ([@"defaultCreditAccountHasVirtualCardTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 24LL;
  }

  else if ([@"defaultCreditAccountHasPhysicalCardTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 25LL;
  }

  else if ([@"defaultCreditAccountDaysSinceCreatedDate" isEqualToString:v1])
  {
    uint64_t v2 = 26LL;
  }

  else if ([@"defaultCreditAccountMerchantIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 31LL;
  }

  else if ([@"defaultCreditAccountMerchantIdentifiersLast30Days" isEqualToString:v1])
  {
    uint64_t v2 = 32LL;
  }

  else if ([@"defaultCreditAccountMapsIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 33LL;
  }

  else if ([@"defaultCreditAccountMapsIdentifiersLast30Days" isEqualToString:v1])
  {
    uint64_t v2 = 34LL;
  }

  else if ([@"defaultCreditAccountMapsBrandIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 35LL;
  }

  else if ([@"defaultCreditAccountMapsBrandIdentifiersLast30Days" isEqualToString:v1])
  {
    uint64_t v2 = 36LL;
  }

  else if ([@"defaultCreditApplicationCount" isEqualToString:v1])
  {
    uint64_t v2 = 37LL;
  }

  else if ([@"currentDefaultCreditApplictionDaysSinceLastUpdated" isEqualToString:v1])
  {
    uint64_t v2 = 38LL;
  }

  else if ([@"currentDefaultCreditApplicationState" isEqualToString:v1])
  {
    uint64_t v2 = 39LL;
  }

  else if ([@"defaultCreditAccountHasAutopaySetup" isEqual:v1])
  {
    uint64_t v2 = 50LL;
  }

  else if ([@"defaultCreditAccountIsShared" isEqualToString:v1])
  {
    uint64_t v2 = 40LL;
  }

  else if ([@"defaultCreditAccountAccessLevel" isEqualToString:v1])
  {
    uint64_t v2 = 41LL;
  }

  else if ([@"defaultCreditAccountIsCoOwner" isEqualToString:v1])
  {
    uint64_t v2 = 42LL;
  }

  else if ([@"defaultCreditAccountParticipantUsersCount" isEqualToString:v1])
  {
    uint64_t v2 = 43LL;
  }

  else if ([@"defaultCreditAccountHasUnderageParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 44LL;
  }

  else if ([@"defaultCreditAccountPhysicalAppleCardStatus" isEqualToString:v1])
  {
    uint64_t v2 = 45LL;
  }

  else if ([@"daysSincePhysicalAppleCardShipmentUpdate" isEqualToString:v1])
  {
    uint64_t v2 = 46LL;
  }

  else if ([@"defaultCreditAccountActivePromotionIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 47LL;
  }

  else if ([@"defaultCreditAccountActivePromotionIdentifiersExpiringSoon" isEqualToString:v1])
  {
    uint64_t v2 = 48LL;
  }

  else if ([@"defaultCreditAccountDaysUntilActivePromotionExpires" isEqualToString:v1])
  {
    uint64_t v2 = 49LL;
  }

  else if ([@"anyCreditAccountStateIsClosed" isEqualToString:v1])
  {
    uint64_t v2 = 51LL;
  }

  else if ([@"anyCreditAccountStateIsRemoved" isEqualToString:v1])
  {
    uint64_t v2 = 52LL;
  }

  else if ([@"hasPeerPaymentAccount" isEqualToString:v1])
  {
    uint64_t v2 = 64LL;
  }

  else if ([@"hasPeerPaymentPassProvisioned" isEqualToString:v1])
  {
    uint64_t v2 = 65LL;
  }

  else if ([@"peerPaymentAccountState" isEqualToString:v1])
  {
    uint64_t v2 = 66LL;
  }

  else if ([@"peerPaymentAccountStage" isEqualToString:v1])
  {
    uint64_t v2 = 68LL;
  }

  else if ([@"peerPaymentAccountStateReason" isEqualToString:v1])
  {
    uint64_t v2 = 67LL;
  }

  else if ([@"peerPaymentAccountHasTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 69LL;
  }

  else if ([@"peerPaymentAccountHasContactlessTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 71LL;
  }

  else if ([@"peerPaymentHasOnlinePurchaseTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 70LL;
  }

  else if ([@"daysSinceLastPeerPaymentTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 72LL;
  }

  else if ([@"peerPaymentDaysSinceLastP2PTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 73LL;
  }

  else if ([@"peerPaymentDaysSinceLastP2PTransactionToAnyParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 74LL;
  }

  else if ([@"peerPaymentAccountHasBalance" isEqualToString:v1])
  {
    uint64_t v2 = 75LL;
  }

  else if ([@"peerPaymentAccountBalanceBase" isEqualToString:v1])
  {
    uint64_t v2 = 76LL;
  }

  else if ([@"peerPaymentHasP2PTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 83LL;
  }

  else if ([@"peerPaymentHasAutoReloadEnabled" isEqualToString:v1])
  {
    uint64_t v2 = 84LL;
  }

  else if ([@"peerPaymentHasSetupRecurringP2PPayment" isEqualToString:v1])
  {
    uint64_t v2 = 85LL;
  }

  else if ([@"peerPaymentHasSetupRecurringP2PPaymentForAnyParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 86LL;
  }

  else if ([@"peerPaymentDaysSinceLastPurchaseTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 87LL;
  }

  else if ([@"peerPaymentHasSentP2PPayment" isEqualToString:v1])
  {
    uint64_t v2 = 88LL;
  }

  else if ([@"peerPaymentHasReceivedP2PPayment" isEqualToString:v1])
  {
    uint64_t v2 = 89LL;
  }

  else if ([@"peerPaymentHasSentDeviceTapTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 90LL;
  }

  else if ([@"peerPaymentHasReceivedDeviceTapTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 91LL;
  }

  else if ([@"peerPaymentNumberOfDeviceTapTransactions" isEqualToString:v1])
  {
    uint64_t v2 = 92LL;
  }

  else if ([@"daysSinceLastDeviceTapSendTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 93LL;
  }

  else if ([@"deviceLanguage" isEqualToString:v1])
  {
    uint64_t v2 = 77LL;
  }

  else if ([@"defaultCreditAccountHasActiveInstallment" isEqualToString:v1])
  {
    uint64_t v2 = 27LL;
  }

  else if ([@"defaultCreditAccountHasUsedInstallments" isEqualToString:v1])
  {
    uint64_t v2 = 28LL;
  }

  else if ([@"defaultCreditAccountSupportedDestinations" isEqualToString:v1])
  {
    uint64_t v2 = 29LL;
  }

  else if ([@"defaultCreditAccountRewardsDestination" isEqualToString:v1])
  {
    uint64_t v2 = 30LL;
  }

  else if ([@"merchantIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 59LL;
  }

  else if ([@"mapsIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 60LL;
  }

  else if ([@"mapsBrandIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 61LL;
  }

  else if ([@"hasPaymentTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 62LL;
  }

  else if ([@"hasTransitTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 63LL;
  }

  else if ([@"peerPaymentAccountRole" isEqualToString:v1])
  {
    uint64_t v2 = 78LL;
  }

  else if ([@"peerPaymentAccountDaysSinceCreatedDate" isEqualToString:v1])
  {
    uint64_t v2 = 79LL;
  }

  else if ([@"peerPaymentAccountDaysSinceIdentifiedDate" isEqualToString:v1])
  {
    uint64_t v2 = 80LL;
  }

  else if ([@"daysSinceParticipantPeerPaymentAccountIdentifiedDate" isEqualToString:v1])
  {
    uint64_t v2 = 81LL;
  }

  else if ([@"peerPaymentAccountHasSentMoneyToAnyParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 82LL;
  }

  else if ([@"passStyles" isEqualToString:v1])
  {
    uint64_t v2 = 53LL;
  }

  else if ([@"unexpiredPassStyles" isEqualToString:v1])
  {
    uint64_t v2 = 54LL;
  }

  else if ([@"secureElementCardTypes" isEqualToString:v1])
  {
    uint64_t v2 = 55LL;
  }

  else if ([@"unexpiredSecureElementCardTypes" isEqualToString:v1])
  {
    uint64_t v2 = 56LL;
  }

  else if ([@"transitNetworksPresent" isEqualToString:v1])
  {
    uint64_t v2 = 57LL;
  }

  else if ([@"transitNetworksPresentAndUnexpired" isEqualToString:v1])
  {
    uint64_t v2 = 58LL;
  }

  else if ([@"peerPaymentFamilyParticipantAccounts" isEqualToString:v1])
  {
    uint64_t v2 = 94LL;
  }

  else if ([@"familyCircleFamilyOrganizer" isEqualToString:v1])
  {
    uint64_t v2 = 95LL;
  }

  else if ([@"familyCircleParent" isEqualToString:v1])
  {
    uint64_t v2 = 96LL;
  }

  else if ([@"familyCircleHasFamily" isEqualToString:v1])
  {
    uint64_t v2 = 97LL;
  }

  else if ([@"familyCircleCurrentUserAge" isEqualToString:v1])
  {
    uint64_t v2 = 98LL;
  }

  else if ([@"familyCircleMembersUnderAge" isEqualToString:v1])
  {
    uint64_t v2 = 99LL;
  }

  else if ([@"familyCircleMembersCount" isEqualToString:v1])
  {
    uint64_t v2 = 100LL;
  }

  else if ([@"familyCircleDaysSinceNewestJoinedDate" isEqualToString:v1])
  {
    uint64_t v2 = 101LL;
  }

  else if ([@"familyCircleMinimumMemberAge" isEqualToString:v1])
  {
    uint64_t v2 = 102LL;
  }

  else if ([@"familyCircleAgeCategory" isEqualToString:v1])
  {
    uint64_t v2 = 103LL;
  }

  else if ([@"discoveryItemsWithActiveStatus" isEqualToString:v1])
  {
    uint64_t v2 = 113LL;
  }

  else if ([@"discoveryItemsWithActionedStatus" isEqualToString:v1])
  {
    uint64_t v2 = 114LL;
  }

  else if ([@"discoveryItemsWithDismissedStatus" isEqualToString:v1])
  {
    uint64_t v2 = 115LL;
  }

  else if ([@"discoveryItemsWithWaitingForTriggerStatus" isEqualToString:v1])
  {
    uint64_t v2 = 116LL;
  }

  else if ([@"discoveryItemsExpanded" isEqualToString:v1])
  {
    uint64_t v2 = 117LL;
  }

  else if ([@"discoveryItemsDismissed" isEqualToString:v1])
  {
    uint64_t v2 = 118LL;
  }

  else if ([@"discoveryCTAsTapped" isEqualToString:v1])
  {
    uint64_t v2 = 119LL;
  }

  else if ([@"discoveryCTAsCompleted" isEqualToString:v1])
  {
    uint64_t v2 = 120LL;
  }

  else if ([@"sentTransitDCINotifications" isEqualToString:v1])
  {
    uint64_t v2 = 121LL;
  }

  else if ([@"sentTransitOpenLoopUpgradeNotifications" isEqualToString:v1])
  {
    uint64_t v2 = 122LL;
  }

  else if ([@"sentTransitOpenLoopRenotifiedInMarketNotifications" isEqualToString:v1])
  {
    uint64_t v2 = 123LL;
  }

  else if ([@"cardTypesWithExpressEnabled" isEqualToString:v1])
  {
    uint64_t v2 = 124LL;
  }

  else if ([@"supportedMarketsForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 125LL;
  }

  else if ([@"supportedTransitMarketsForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 126LL;
  }

  else if ([@"supportedTransitNetworksForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 127LL;
  }

  else if ([@"expressTransitNetworksForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 128LL;
  }

  else if ([@"hasTransitPassForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 129LL;
  }

  else if ([@"hasUnexpiredTransitPassForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 130LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByString:@"."]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
    unsigned __int8 v5 = [@"currentPlacemark" isEqualToString:v4];

    if ((v5 & 1) != 0)
    {
      uint64_t v2 = 131LL;
    }

    else if ([@"hasPayLaterAccount" isEqualToString:v1])
    {
      uint64_t v2 = 132LL;
    }

    else if ([@"isPayLaterHidden" isEqualToString:v1])
    {
      uint64_t v2 = 133LL;
    }

    else if ([@"hasEverProvisionedPayLaterPass" isEqualToString:v1])
    {
      uint64_t v2 = 134LL;
    }

    else if ([@"hasPayLaterPass" isEqualToString:v1])
    {
      uint64_t v2 = 135LL;
    }

    else if ([@"payLaterNumberOfLoans" isEqualToString:v1])
    {
      uint64_t v2 = 136LL;
    }

    else if ([@"payLaterDaysSinceFirstActiveLoan" isEqualToString:v1])
    {
      uint64_t v2 = 137LL;
    }

    else if ([@"payLaterNumberOfActiveLoans" isEqualToString:v1])
    {
      uint64_t v2 = 138LL;
    }

    else if ([@"payLaterNumberOfPendingLoans" isEqualToString:v1])
    {
      uint64_t v2 = 139LL;
    }

    else if ([@"payLaterNumberOfDelinquentLoans" isEqualToString:v1])
    {
      uint64_t v2 = 140LL;
    }

    else if ([@"payLaterNumberOfCanceledLoans" isEqualToString:v1])
    {
      uint64_t v2 = 141LL;
    }

    else if ([@"payLaterNumberOfCompleteLoans" isEqualToString:v1])
    {
      uint64_t v2 = 142LL;
    }

    else if ([@"hasSavingsAccount" isEqualToString:v1])
    {
      uint64_t v2 = 143LL;
    }

    else if ([@"savingsAccountDaysSinceCreatedDate" isEqualToString:v1])
    {
      uint64_t v2 = 144LL;
    }

    else if ([@"savingsAccountHasExternalTransferIn" isEqualToString:v1])
    {
      uint64_t v2 = 145LL;
    }

    else if ([@"savingsAccountHasExternalTransferOut" isEqualToString:v1])
    {
      uint64_t v2 = 146LL;
    }

    else if ([@"savingsAccountHasCashTransferIn" isEqualToString:v1])
    {
      uint64_t v2 = 147LL;
    }

    else if ([@"savingsAccountBinnedBalance" isEqualToString:v1])
    {
      uint64_t v2 = 148LL;
    }

    else if ([@"enrolledAuthenticationMechanisms" isEqualToString:v1])
    {
      uint64_t v2 = 149LL;
    }

    else
    {
      id v6 = (__CFString *)v1;
      if (v6 == @"hasIssuerInstallmentCard") {
        goto LABEL_302;
      }
      uint64_t v2 = (uint64_t)v6;
      if (!v6) {
        goto LABEL_319;
      }
      unsigned __int8 v7 = [@"hasIssuerInstallmentCard" isEqualToString:v6];

      if ((v7 & 1) != 0)
      {
LABEL_302:
        uint64_t v2 = 150LL;
        goto LABEL_319;
      }

      id v8 = (__CFString *)(id)v2;
      if (v8 == @"hasEverMadeIssuerInstallmentTransaction"
        || (uint64_t v9 = v8,
            unsigned __int8 v10 = [@"hasEverMadeIssuerInstallmentTransaction" isEqualToString:v8],  v9,  (v10 & 1) != 0))
      {
        uint64_t v2 = 151LL;
      }

      else
      {
        id v11 = v9;
        if (v11 == @"hasRewardsCard"
          || (uint64_t v12 = v11,
              unsigned __int8 v13 = [@"hasRewardsCard" isEqualToString:v11],
              v12,
              (v13 & 1) != 0))
        {
          uint64_t v2 = 152LL;
        }

        else
        {
          unsigned __int8 v14 = v12;
          if (v14 == @"hasEverMadeRewardsTransaction"
            || (id v15 = v14,
                unsigned __int8 v16 = [@"hasEverMadeRewardsTransaction" isEqualToString:v14],
                v15,
                (v16 & 1) != 0))
          {
            uint64_t v2 = 153LL;
          }

          else
          {
            uint64_t v17 = v15;
            if (v17 == @"hasAppleAccountCardProvisioned"
              || (uint64_t v18 = v17,
                  unsigned __int8 v19 = [@"hasAppleAccountCardProvisioned" isEqualToString:v17],
                  v18,
                  (v19 & 1) != 0))
            {
              uint64_t v2 = 154LL;
            }

            else
            {
              uint64_t v20 = v18;
              if (v20 == @"daysSinceAppleAccountInStoreTopUp"
                || (NSErrorUserInfoKey v21 = v20,
                    unsigned int v22 = [@"daysSinceAppleAccountInStoreTopUp" isEqualToString:v20],  v21,  v22))
              {
                uint64_t v2 = 155LL;
              }

              else
              {
                uint64_t v2 = 0LL;
              }
            }
          }
        }
      }
    }
  }

LABEL_319:
  return v2;
}

BOOL sub_1000FF0AC(id a1, PKPaymentPass *a2, BOOL *a3)
{
  id v3 = a2;
  if (-[PKPaymentPass hasAssociatedPeerPaymentAccount](v3, "hasAssociatedPeerPaymentAccount"))
  {
    else {
      BOOL v4 = 0;
    }
  }

  else
  {
    BOOL v4 = 1;
  }

  return v4;
}

BOOL sub_1000FF328(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  unsigned __int8 v5 = *(void **)(a1 + 32);
  id v6 = v4;
  id v7 = v5;
  if (v6 == v7)
  {

    BOOL v10 = 0LL;
    id v11 = v6;
LABEL_9:

    goto LABEL_10;
  }

  id v8 = v7;
  if (!v6 || !v7)
  {

    goto LABEL_8;
  }

  unsigned __int8 v9 = [v6 isEqualToString:v7];

  if ((v9 & 1) == 0)
  {
LABEL_8:
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 devicePrimaryPaymentApplication]);
    BOOL v10 = [v11 paymentType] == (id)2;
    goto LABEL_9;
  }

  BOOL v10 = 0LL;
LABEL_10:

  return v10;
}

void sub_1000FF47C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000FF494(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  if ([v6 type] == (id)1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 state];
    *a4 = 1;
  }
}

BOOL sub_100100078(id a1, PKAccountPayment *a2)
{
  return -[PKAccountPayment isRecurring](a2, "isRecurring");
}

id sub_1001041A8(id a1, PKFamilyMember *a2)
{
  return -[PKFamilyMember joinedDate](a2, "joinedDate");
}

BOOL sub_100104A88(id a1, PKPayLaterFinancingPlan *a2, unint64_t a3, BOOL *a4)
{
  unint64_t v4 = (unint64_t)-[PKPayLaterFinancingPlan state](a2, "state", a3, a4);
  return (v4 > 8) | (0x52u >> v4) & 1;
}

BOOL sub_100104C88(uint64_t a1, void *a2)
{
  return [a2 productType] == *(id *)(a1 + 32);
}

BOOL sub_100104D0C(uint64_t a1, void *a2)
{
  return [a2 state] == *(id *)(a1 + 32);
}

BOOL sub_1001051B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 type] == *(id *)(a1 + 32))
  {
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedPassUniqueID]);
    if (v4) {
      BOOL v5 = [v3 eligibility] == (id)1;
    }
    else {
      BOOL v5 = 0LL;
    }
  }

  else
  {
    BOOL v5 = 0LL;
  }

  return v5;
}

void sub_100106434(_Unwind_Exception *a1)
{
}

void sub_100106490(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 10, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_1001064F8(uint64_t a1, void *a2)
{
  id v18 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong((id *)WeakRetained + 15, a2);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v18 altDSID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _unactivatedPhysicalCardForAltDSID:v6]);

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 latestShippingActivity]);
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 latestOrderActivity]);
    BOOL v10 = v9;
    if (v7 && v8)
    {
      if (((unint64_t)[v8 shippingStatus] | 2) != 3)
      {
LABEL_13:
        [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];

        goto LABEL_14;
      }

      id v11 = [v8 shippingStatus];
      uint64_t v12 = 2LL;
      if (v11 != (id)1) {
        uint64_t v12 = 3LL;
      }
      v5[13] = v12;
      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v8 timestamp]);
    }

    else
    {
      if (!v7 || !v9 || [v9 activity] != (id)1) {
        goto LABEL_13;
      }
      v5[13] = 1LL;
      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v10 date]);
    }

    id v15 = (void *)v14;
    [v13 timeIntervalSinceDate:v14];
    double v17 = v16;

    v5[14] = vcvtmd_s64_f64(v17 / 86400.0);
    goto LABEL_13;
  }

void sub_100106694(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 22, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_1001066FC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 23, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100106764(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v24 = WeakRetained;
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v7 = v3;
    id v8 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
    id v25 = v3;
    uint64_t v23 = a1;
    if (v8)
    {
      id v9 = v8;
      id v10 = 0LL;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (id i = 0LL; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v7);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
          if ([v13 feature] == (id)2)
          {
            -[NSMutableArray addObject:](v6, "addObject:", v13);
            if (v10)
            {
              if ([v13 isActive])
              {
                id v14 = v13;

                id v10 = v14;
              }

              else if (([v10 isActive] & 1) == 0)
              {
                id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 lastUpdated]);
                double v16 = (void *)objc_claimAutoreleasedReturnValue([v10 lastUpdated]);
                id v17 = [v15 compare:v16];

                if (v17 == (id)1)
                {
                  id v18 = v13;

                  id v10 = v18;
                }
              }
            }

            else
            {
              id v10 = v13;
            }
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }

      while (v9);
    }

    else
    {
      id v10 = 0LL;
    }

    id v19 = -[NSMutableArray copy](v6, "copy");
    BOOL v5 = v24;
    uint64_t v20 = (void *)v24[20];
    v24[20] = v19;

    NSErrorUserInfoKey v21 = (void *)v24[21];
    v24[21] = v10;
    id v22 = v10;

    [v24 _prefetchDataSources:*(void *)(v23 + 32) completion:*(void *)(v23 + 40)];
    id v3 = v25;
  }
}

void sub_100106990(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v11 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 107, a2);
    objc_storeStrong(v11 + 108, a3);
    objc_storeStrong(v11 + 109, a4);
    [v11 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100106A40(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 24, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100106AA8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    WeakRetained[25] = a2;
    BOOL v5 = WeakRetained;
    [WeakRetained _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
    id WeakRetained = v5;
  }
}

void sub_100106AF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v10), "passInformation", (void)v16));
        uint64_t v12 = PKPaymentCardTypeToString([v11 cardType]);
        unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        -[NSMutableSet addObject:](v5, "addObject:", v13);

        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v8);
  }

  id v14 = (void *)WeakRetained[110];
  WeakRetained[110] = v5;
  id v15 = v5;

  [WeakRetained _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

void sub_100106C64(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 12, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100106CCC(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v5 = objc_alloc(&OBJC_CLASS___PKAccountServicePayLaterFinancingPlanQuery);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    id v7 = [v5 initWithAccountIdentifier:v6 queryItems:32];

    id v8 = (void *)WeakRetained[1];
    id v16 = v7;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100106E6C;
    v11[3] = &unk_100644398;
    objc_copyWeak(&v15, a1 + 6);
    id v10 = v7;
    id v12 = v10;
    id v13 = a1[4];
    id v14 = a1[5];
    [v8 financingPlansWithQueries:v9 completion:v11];

    objc_destroyWeak(&v15);
  }
}

void sub_100106E50(_Unwind_Exception *a1)
{
}

void sub_100106E6C(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryIdentifier]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v4]);

    uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 relevantFinancingPlans]);
    id v7 = (void *)WeakRetained[84];
    WeakRetained[84] = v6;

    [WeakRetained _prefetchDataSources:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_100106F08(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 85, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100106F70(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 11, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100106FD8(id *a1)
{
  if ((PKLocationServicesEnabled() & 1) != 0)
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1001071FC;
    v13[3] = &unk_1006443E8;
    objc_copyWeak(&v14, a1 + 7);
    [v2 addOperation:v13];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10010738C;
    v11[3] = &unk_100644438;
    objc_copyWeak(&v12, a1 + 7);
    void v11[4] = a1[4];
    [v2 addOperation:v11];
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001077D4;
    v7[3] = &unk_100644460;
    objc_copyWeak(&v10, a1 + 7);
    id v8 = a1[5];
    id v9 = a1[6];
    id v4 = [v2 evaluateWithInput:v3 completion:v7];

    objc_destroyWeak(&v10);
    objc_destroyWeak(&v12);
    objc_destroyWeak(&v14);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Location services are off. Can't fetch PDUEELocationDataSource.",  buf,  2u);
    }

    [a1[4] _prefetchDataSources:a1[5] completion:a1[6]];
  }

void sub_1001071C4(_Unwind_Exception *a1)
{
}

void sub_1001071FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v12 = WeakRetained;
  if (WeakRetained)
  {
    id v13 = (void *)*((void *)WeakRetained + 9);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100107320;
    v14[3] = &unk_1006443C0;
    objc_copyWeak(&v17, v10);
    id v16 = v9;
    id v15 = v8;
    [v13 fetchLatestValidLocation:v14];

    objc_destroyWeak(&v17);
  }

  else
  {
    (*((void (**)(id, id, void))v9 + 2))(v9, v8, 0LL);
  }
}

void sub_10010730C(_Unwind_Exception *a1)
{
}

void sub_100107320(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained) {
    objc_storeStrong(WeakRetained + 105, a2);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10010738C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_5;
  }
  if (!WeakRetained[105])
  {
    objc_storeStrong(WeakRetained + 111, (id)qword_1007079C8);
    objc_storeStrong(v11 + 112, (id)qword_1007079D0);
    objc_storeStrong(v11 + 113, (id)qword_1007079D8);
    objc_storeStrong(v11 + 114, (id)qword_1007079E0);
LABEL_5:
    v9[2](v9, v8, 0LL);
    goto LABEL_6;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[5] sharedWebService]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 context]);

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 configuration]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 marketsURL]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100107564;
  v18[3] = &unk_100644410;
  objc_copyWeak(&v22, (id *)(a1 + 40));
  NSErrorUserInfoKey v21 = v9;
  id v16 = v8;
  uint64_t v17 = *(void *)(a1 + 32);
  id v19 = v16;
  uint64_t v20 = v17;
  +[PKPaymentMarketsConfiguration paymentMarketsConfigurationWithURL:forDeviceClass:version:completion:]( &OBJC_CLASS___PKPaymentMarketsConfiguration,  "paymentMarketsConfigurationWithURL:forDeviceClass:version:completion:",  v15,  0LL,  0LL,  v18);

  objc_destroyWeak(&v22);
LABEL_6:
}

void sub_100107550(_Unwind_Exception *a1)
{
}

void sub_100107564(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v23 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 marketsForLocation:*(void *)(*(void *)(a1 + 40) + 840)]);
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v25;
      do
      {
        for (id i = 0LL; i != v10; id i = (char *)i + 1)
        {
          if (*(void *)v25 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
          if (v14)
          {
            -[NSMutableSet addObject:](v7, "addObject:", v14);
            if ([v13 type] == (id)1) {
              -[NSMutableSet addObject:](v6, "addObject:", v14);
            }
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }

      while (v10);
    }

    id v15 = -[NSMutableSet copy](v7, "copy");
    id v16 = (void *)qword_1007079C8;
    qword_1007079C8 = (uint64_t)v15;

    id v17 = -[NSMutableSet copy](v6, "copy");
    __int128 v18 = (void *)qword_1007079D0;
    qword_1007079D0 = (uint64_t)v17;

    id v3 = v23;
    uint64_t v19 = objc_claimAutoreleasedReturnValue([v23 supportedTransitNetworksForLocation:*(void *)(*(void *)(a1 + 40) + 840)]);
    uint64_t v20 = (void *)qword_1007079D8;
    qword_1007079D8 = v19;

    uint64_t v21 = objc_claimAutoreleasedReturnValue([v23 expressTransitNetworksForLocation:*(void *)(*(void *)(a1 + 40) + 840)]);
    id v22 = (void *)qword_1007079E0;
    qword_1007079E0 = v21;

    objc_storeStrong(WeakRetained + 111, (id)qword_1007079C8);
    objc_storeStrong(WeakRetained + 112, (id)qword_1007079D0);
    objc_storeStrong(WeakRetained + 113, (id)qword_1007079D8);
    objc_storeStrong(WeakRetained + 114, (id)qword_1007079E0);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1001077D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

void sub_100107810(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001078D4;
  v3[3] = &unk_1006444B0;
  objc_copyWeak(&v6, (id *)(a1 + 56));
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 fetchLatestValidPlacemark:v3];

  objc_destroyWeak(&v6);
}

void sub_1001078C0(_Unwind_Exception *a1)
{
}

void sub_1001078D4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 106, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_10010793C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 86, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_1001079A4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 91, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

BOOL sub_100108138(uint64_t a1, void *a2)
{
  return [a2 accessLevel] == *(id *)(a1 + 32);
}

void sub_100109494( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10010988C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PDDynamicAssociatedDomainPattern);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_100109AB4(id a1, PDDynamicAssociatedDomainPattern *a2, id a3)
{
}

id sub_100109DA0(uint64_t a1, uint64_t a2)
{
  return +[DynamicAssociatedDomainPattern deletePatternsForDomainPID:inDatabase:]( &OBJC_CLASS___DynamicAssociatedDomainPattern,  "deletePatternsForDomainPID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

void sub_100109EE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PDDynamicAssociatedDomain);
  objc_msgSend(*(id *)(a1 + 56), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[DynamicAssociatedDomainPattern patternsForDomainPID:inDatabase:]( &OBJC_CLASS___DynamicAssociatedDomainPattern,  "patternsForDomainPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  if ([v6 count])
  {
    -[PDDynamicAssociatedDomain setPatterns:](v7, "setPatterns:", v6);
    [*(id *)(a1 + 48) safelyAddObject:v7];
  }
}

void sub_10010A078(id a1, PDDynamicAssociatedDomain *a2, id a3)
{
}

uint64_t sub_10010A2D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentID];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) items]);
  id v4 =  +[AccountStatementMetadataItem insertOrUpdateAccountStatementMetadataItems:forStatementMetadataPID:inDatabase:]( &OBJC_CLASS___AccountStatementMetadataItem,  "insertOrUpdateAccountStatementMetadataItems:forStatementMetadataPID:inDatabase:",  v3,  v2,  *(void *)(a1 + 48));

  id v5 = *(void **)(a1 + 56);
  id v17 = 0LL;
  id v18 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statementIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  objc_msgSend( v5,  "openingDate:closingDate:statementIdentifier:accountIdentifier:accountType:inDatabase:",  &v18,  &v17,  v6,  v7,  objc_msgSend(*(id *)(a1 + 32), "accountType"),  *(void *)(a1 + 48));
  id v8 = v18;
  id v9 = v17;

  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)_SQLValueForDate(v8);
  [v10 setValue:v11 forProperty:@"opening_date"];

  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)_SQLValueForDate(v9);
  [v12 setValue:v13 forProperty:@"closing_date"];

  id v14 = *(void **)(a1 + 32);
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  +[AccountStatementMetadataItem allItemsAreProcessedForStatementMetadataPID:inDatabase:]( &OBJC_CLASS___AccountStatementMetadataItem,  "allItemsAreProcessedForStatementMetadataPID:inDatabase:",  v2,  *(void *)(a1 + 48))));
  [v14 setValue:v15 forProperty:@"has_been_processed"];

  return 1LL;
}

void sub_10010A780(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AccountStatementMetadata);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  id v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[AccountStatementMetadata accountStatementMetadata](v8, "accountStatementMetadata"));
  [v6 safelyAddObject:v7];
}

void sub_10010A9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_10010A9E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10010A9F8(uint64_t a1)
{
}

uint64_t sub_10010AA00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10010AA88;
  v7[3] = &unk_10063D460;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v8 = v4;
  uint64_t v9 = v5;
  sub_1002CCDBC(v2, v3, v7);

  return 1LL;
}

void sub_10010AA88(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

uint64_t sub_10010ABFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentID];
  +[AccountStatementMetadataItem markItems:asProcessed:error:forStatementMetadataPID:inDatabase:]( &OBJC_CLASS___AccountStatementMetadataItem,  "markItems:asProcessed:error:forStatementMetadataPID:inDatabase:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 56),  v2,  *(void *)(a1 + 48));
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  +[AccountStatementMetadataItem allItemsAreProcessedForStatementMetadataPID:inDatabase:]( &OBJC_CLASS___AccountStatementMetadataItem,  "allItemsAreProcessedForStatementMetadataPID:inDatabase:",  v2,  *(void *)(a1 + 48))));
  [v3 setValue:v4 forProperty:@"has_been_processed"];

  return 1LL;
}

uint64_t sub_10010AD64(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentID];
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)_SQLValueForDate(*(void *)(a1 + 40));
  [v3 setValue:v4 forProperty:@"last_report_date"];

  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)[v5 reportCount] + 1));
  [v5 setValue:v6 forProperty:@"report_count"];

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) items]);
  +[AccountStatementMetadataItem updateReportDate:forItems:forStatementMetadataPID:inDatabase:]( &OBJC_CLASS___AccountStatementMetadataItem,  "updateReportDate:forItems:forStatementMetadataPID:inDatabase:",  v7,  v8,  v2,  *(void *)(a1 + 56));

  return 1LL;
}

void sub_10010AF6C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10010B3D8(id a1, PKAccountStatementMetadata *a2, id a3)
{
}

void sub_10010B3E0(id a1, PKAccountStatementMetadata *a2, id a3)
{
}

void sub_10010B3E8(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountStatementMetadata setOpeningDate:](v4, "setOpeningDate:", v5);
}

void sub_10010B434(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountStatementMetadata setClosingDate:](v4, "setClosingDate:", v5);
}

void sub_10010B480(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadata setHasBeenProcessed:](v4, "setHasBeenProcessed:", [a3 BOOLValue]);
}

void sub_10010B4C4(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountStatementMetadata setLastReportDate:](v4, "setLastReportDate:", v5);
}

void sub_10010B510(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadata setReportCount:](v4, "setReportCount:", [a3 integerValue]);
}

void sub_10010B554(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadata setAccountType:](v4, "setAccountType:", [a3 integerValue]);
}

void sub_10010BC2C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AccountPayment);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[AccountPayment payment](v8, "payment"));
  [v6 addObject:v7];
}

void sub_10010C3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) currencyAmount]);
  [v4 setCurrencyAmount:v5];
}

id sub_10010C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountPayment,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10010CC98(id a1, PKAccountPayment *a2, id a3)
{
}

void sub_10010CCA0(id a1, PKAccountPayment *a2, id a3)
{
}

void sub_10010CCA8(id a1, PKAccountPayment *a2, id a3)
{
}

void sub_10010CCB0(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPayment setPaymentDate:](v4, "setPaymentDate:", v5);
}

void sub_10010CCFC(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPayment setPaymentStatusDate:](v4, "setPaymentStatusDate:", v5);
}

void sub_10010CD48(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPayment setState:](v4, "setState:", [a3 integerValue]);
}

void sub_10010CD8C(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPayment setStatusCode:](v4, "setStatusCode:", [a3 integerValue]);
}

void sub_10010CDD0(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPayment setCancellable:](v4, "setCancellable:", [a3 BOOLValue]);
}

void sub_10010CE14(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPayment setCancellationExpiryDate:](v4, "setCancellationExpiryDate:", v5);
}

void sub_10010CE60(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPayment setExpectedCreditReleaseDate:](v4, "setExpectedCreditReleaseDate:", v5);
}

void sub_10010CEAC(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment fundingSource](a2, "fundingSource"));
  [v5 setIdentifier:v4];
}

void sub_10010CEF8(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment fundingSource](a2, "fundingSource"));
  id v5 = [v4 integerValue];

  [v6 setType:v5];
}

void sub_10010CF54(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment fundingSource](a2, "fundingSource"));
  [v5 setAccountSuffix:v4];
}

void sub_10010CFA0(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment scheduleDetails](a2, "scheduleDetails"));
  id v5 = [v4 integerValue];

  [v6 setFrequency:v5];
}

void sub_10010CFFC(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment scheduleDetails](a2, "scheduleDetails"));
  LODWORD(a2) = [v4 intValue];

  [v5 setScheduledDay:(int)a2];
}

void sub_10010D058(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment scheduleDetails](a2, "scheduleDetails"));
  id v5 = [v4 integerValue];

  [v6 setPreset:v5];
}

void sub_10010D0B4(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment scheduleDetails](a2, "scheduleDetails"));
  id v5 = (void *)_DateForSQLValue(v4);

  [v6 setScheduledDate:v5];
}

void sub_10010D114(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountPayment scheduleDetails](a2, "scheduleDetails"));
  [v5 setPaymentTermsIdentifier:v4];
}

void sub_10010D1D4(id a1, PKAccountPayment *a2, id a3)
{
  id v8 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountPayment fundingSource](a2, "fundingSource"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 fundingDetails]);

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___PKAccountPaymentFundingDetailsBankAccount, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
    [v5 setName:v8];
  }
}

id sub_10010DA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___NotificationService,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10010DDD0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PDNotificationService);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10010E0C4(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10010E0CC(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10010E0D4(id a1, PDNotificationService *a2, id a3)
{
  id v4 = a2;
  -[PDNotificationService setServiceType:](v4, "setServiceType:", [a3 integerValue]);
}

void sub_10010E118(id a1, PDNotificationService *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PDNotificationService setServiceURL:](v4, "setServiceURL:", v5);
}

void sub_10010E164(id a1, PDNotificationService *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PDNotificationService setRegistrationURL:](v4, "setRegistrationURL:", v5);
}

void sub_10010E1B0(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10010E1B8(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10010E1C0(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10010E1C8(id a1, PDNotificationService *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDNotificationService setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_10010E214(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10010E21C(id a1, PDNotificationService *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDNotificationService setLastUpdatedTagDate:](v4, "setLastUpdatedTagDate:", v5);
}

uint64_t sub_10010E3E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10010E9A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) sharedPeerPaymentWebService]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

uint64_t sub_10010EBA8(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10010ECC8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 accountWithPreventingServerFetch:0 completion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService accountWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10010EEBC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 preferencesWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService preferencesWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10010F0AC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 updateAccountWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService updateAccountWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10010F29C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 updateAssociatedAccountsWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService updateAssociatedAccountsWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10010F48C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 updateAccountAndAssociatedAccountsWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService updateAccountAndAssociatedAccountsWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10010F67C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 updatePreferencesWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService updatePreferencesWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10010F894(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 updateMockAccountBalanceByAddingAmount:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService updateMockAccountBalanceByAddingAmount:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_10010FA80(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v5 deleteAccountWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService deleteAccountWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(void))(v4 + 16))();
    }
  }

void sub_10010FC6C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v5 deletePreferencesWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService deletePreferencesWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(void))(v4 + 16))();
    }
  }

void sub_10010FE84(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v5 setPreferences:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService setPreferences:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void, void))(v4 + 16))(v4, 0LL, 0LL);
    }
  }

void sub_10011007C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v4 registrationStatusWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService registrationStatusWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_100110374(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PDDefaultQueue();
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100110430;
  v8[3] = &unk_10063B440;
  id v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v3;
  id v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100110430(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001104BC;
  v4[3] = &unk_10063B3A0;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  sub_1001AD804(v2, v1, v3, (uint64_t)v4);
}

uint64_t sub_1001104BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001104D0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 rawData]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10011073C(uint64_t a1)
{
  uint64_t v2 = PKBundleIdentifierForPID([*(id *)(a1 + 32) remoteProcessIdentifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100110820;
  v12[3] = &unk_10063B3A0;
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 96);
  id v13 = *(id *)(a1 + 88);
  sub_1001ADAFC(v5, v4, v6, v11, v7, v8, v9, v10, (uint64_t)v3, (uint64_t)v12);
}

uint64_t sub_100110820(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100110A08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && (uint64_t v2 = *(void *)(a1 + 40)) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 16LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100110AE0;
    v7[3] = &unk_10063B3A0;
    uint64_t v5 = *(void *)(a1 + 64);
    id v8 = *(id *)(a1 + 72);
    sub_1001ADB18(v4, v1, v2, v3, v5, (uint64_t)v7);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

uint64_t sub_100110AE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100110C44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100110CD8;
  v6[3] = &unk_100644BD0;
  v6[1] = 3221225472LL;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v3 registrationStatusWithCompletion:v6];
}

uint64_t sub_100110CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a2 == 1)
  {
    id v3 = [[PKProtobufPeerPaymentMessage alloc] initWithData:*(void *)(a1 + 32)];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 40) peerPaymentWebServiceCoordinator]);
    [v4 receivedPeerPaymentMessage:v3];

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionIdentifier]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 memo]);
    if (v6) {
      BOOL v7 = v5 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      [*(id *)(*(void *)(v2 + 40) + 40) updatePeerPaymentMemo:v6 forTransactionWithServiceIdentifier:v5];
    }
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 requestToken]);
    id v9 = *(id **)(v2 + 40);
    if (v8)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 peerPaymentAccountManager]);
      id v38 = v8;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v38, 1LL));
      [v10 deletePeerPaymentPendingRequestsForRequestTokens:v11 completion:0];

      id v12 = *(void **)(v2 + 40);
      uint64_t v37 = v8;
      id v13 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
      [v12 _removeNotificationsForPeerPaymentPendingRequestWithRequestTokens:v13];
    }

    else
    {
      __int128 v28 = v6;
      __int128 v29 = v5;
      uint64_t v30 = v2;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v9[5] peerPaymentPendingRequestsForPeerPaymentAccount]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 senderAddress]);
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      id v13 = v15;
      id v18 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v33;
        do
        {
          for (id i = 0LL; i != v19; id i = (char *)i + 1)
          {
            if (*(void *)v33 != v20) {
              objc_enumerationMutation(v13);
            }
            id v22 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 requesteeAddress]);
            unsigned int v24 = [v23 isEqualToString:v17];

            if (v24)
            {
              __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v22 requestToken]);
              [v16 addObject:v25];
            }
          }

          id v19 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }

        while (v19);
      }

      uint64_t v2 = v30;
      if ([v16 count])
      {
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v30 + 40) peerPaymentWebServiceCoordinator]);
        [v26 updatePendingRequestsWithRequestTokens:v16];
      }

      uint64_t v6 = v28;
      uint64_t v5 = v29;
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v3 = (id)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "Not updating memo for device that is not peer payment registered.",  buf,  2u);
    }
  }

  uint64_t result = *(void *)(v2 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011117C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100111224;
  v6[3] = &unk_100644BF8;
  v6[1] = 3221225472LL;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 56);
  [v3 registrationStatusWithCompletion:v6];
}

uint64_t sub_100111224(void *a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2 == 1)
  {
    if (v6)
    {
      uint64_t v7 = a1[4];
      uint64_t v8 = a1[5];
      int v10 = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Updating peer payment message received date to %@ for transaction with service identifier: %@.",  (uint8_t *)&v10,  0x16u);
    }

    [*(id *)(a1[6] + 40) updatePeerPaymentMessageReceivedDate:a1[4] forTransactionWithServiceIdentifier:a1[5]];
  }

  else
  {
    if (v6)
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Not updating peer payment message received date for device that is not peer payment registered.",  (uint8_t *)&v10,  2u);
    }
  }

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011142C(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8
    && (id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serialNumber]),
        id v4 = (void *)objc_claimAutoreleasedReturnValue([v8 associatedPassSerialNumber]),
        unsigned int v5 = [v3 isEqualToString:v4],
        v4,
        v3,
        v5))
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v8 currentBalance]);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v6);
  }
}

void sub_1001115AC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = PDLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier();
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService lastUsedAlternateFundingSourcePassUniqueIdentifier:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    id v3 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100111798(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (const char *)a1[5];
      int v8 = 138412290;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Setting last used alternative funding source pass unique identifier: %@",  (uint8_t *)&v8,  0xCu);
    }

    PDSetLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier(a1[5]);
  }

  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(0LL);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      uint64_t v9 = "-[PDPeerPaymentService setLastUsedAlternateFundingSourcePassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v8,  0xCu);
    }
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001119D0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  [v2 downloadPassIfNecessaryWithCompletion:*(void *)(a1 + 40)];
}

void sub_100111B14(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100111B9C;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 registerDeviceWithReason:0 completion:v3];
}

uint64_t sub_100111B9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100111CC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100111D5C;
  v4[3] = &unk_100639688;
  id v5 = *(id *)(a1 + 40);
  [v2 registerDeviceWithForceReregister:v3 reason:0 completion:v4];
}

uint64_t sub_100111D5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100111ECC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  [v2 registerDeviceWithRegistrationURL:*(void *)(a1 + 40) pushToken:*(void *)(a1 + 48) forceReregister:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
}

void sub_100112018(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10011209C;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 unregisterDeviceWithCompletion:v3];
}

uint64_t sub_10011209C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001121B4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100112238;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 initalizeCloudStoreIfNecessaryWithHandler:v3];
}

uint64_t sub_100112238(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100112354(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001123D8;
  v3[3] = &unk_10063DAC0;
  id v4 = *(id *)(a1 + 40);
  [v2 cloudStoreStatusWithCompletion:v3];
}

uint64_t sub_1001123D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001124F0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100112574;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 checkTLKsMissingWithCompletion:v3];
}

uint64_t sub_100112574(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011268C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100112710;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 resetApplePayManateeViewWithCompletion:v3];
}

uint64_t sub_100112710(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011286C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_100112904;
  v5[3] = &unk_1006424D0;
  id v6 = *(id *)(a1 + 56);
  [v2 remoteRegistrationRequest:v3 forHandle:v4 completion:v5];
}

uint64_t sub_100112904(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100112A18(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 peerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService peerPaymentPendingRequestsForRequestTokens:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_100112C08(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 peerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService peerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_100112E2C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v2 insertOrUpdatePeerPaymentPendingRequests:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

    if (*(_BYTE *)(a1 + 56)) {
      _[*(id *)(a1 + 32) _scheduleNotificationsForPeerPaymentPendingRequests:*(void *)(a1 + 40)];
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService insertOrUpdatePeerPaymentPendingRequests:shouldScheduleNotifications:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }

uint64_t (**sub_100113050(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v2 deletePeerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

    return (uint64_t (**)(void))[*(id *)(a1 + 32) _removeNotificationsForPeerPaymentPendingRequestWithRequestTokens:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService deletePeerPaymentPendingRequestsForRequestTokens:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 48);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }

  return result;
}

uint64_t (**sub_100113240(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v2 deletePeerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:*(void *)(a1 + 40)];

    return (uint64_t (**)(void))_[*(id *)(a1 + 32) _removeAllNotificationsForPeerPaymentPendingRequests];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService deletePeerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 40);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }

  return result;
}

void sub_100113430(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v5 recurringPaymentsWithPreventingServerFetch:0 completion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService recurringPaymentsWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_10011369C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 updateAutoReloadAmount:*(void *)(a1 + 40) threshold:*(void *)(a1 + 48) identifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService updateAutoReloadAmount:threshold:identifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 64);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_100113890(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v5 updateRecurringPaymentsWithCompletion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService updateRecurringPaymentsWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, void, void))(v4 + 16))(v4, 0LL, 0LL);
    }
  }

void sub_100113AB0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 insertOrUpdateRecurringPayments:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService insertOrUpdateRecurringPayments:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(void))(v4 + 16))();
    }
  }

uint64_t (**sub_100113CC8(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v2 deleteRecurringPaymentsForIdentifiers:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

    return (uint64_t (**)(void))_[*(id *)(a1 + 32) _removeNotificationsForPeerPaymentRecurringPaymentsWithIdentifiers:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService deleteRecurringPaymentsForIdentifiers:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 48);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }

  return result;
}

uint64_t (**sub_100113EB8(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v2 deleteAllRecurringPaymentsWithCompletion:*(void *)(a1 + 40)];

    return (uint64_t (**)(void))_[*(id *)(a1 + 32) _removeAllNotificationsForPeerPaymentRecurringPayments];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService deleteAllRecurringPaymentsWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v6,  0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 40);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }

  return result;
}

void sub_1001140D8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentWebServiceCoordinator]);
    [v5 performRecurringPaymentAction:*(void *)(a1 + 56) identifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService performRecurringPaymentAction:identifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void, void))(v4 + 16))(v4, 0LL, 0LL);
    }
  }

void sub_10011431C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 updateRecurringPaymentMemo:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService updateRecurringPaymentMemo:identifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_100114540(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 updateRecurringPaymentStatus:*(void *)(a1 + 56) identifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService updateRecurringPaymentStatus:identifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_100114734(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 hasRecurringPayments:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService hasRecurringPayments:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

id sub_100114B3C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess]) {
    return [*(id *)(*(void *)(a1 + 32) + 32) encryptionCertificateForDestination:*(void *)(a1 + 48) forceUpdate:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 40)];
  }
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "-[PDPeerPaymentService encryptionCertificateForDestination:forceUpdate:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
  }

  id result = *(id *)(a1 + 40);
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
  }
  return result;
}

id sub_100114D5C(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess]) {
    return _[*(id *)(a1[4] + 32) encryptData:a1[5] usingCertificateWithDestination:a1[7] completion:a1[6]];
  }
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "-[PDPeerPaymentService encryptData:usingCertificateWithDestination:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
  }

  id result = (id)a1[6];
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
  }
  return result;
}

void sub_100114FEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100115078;
  v4[3] = &unk_10063B3A0;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  sub_1001AD804(v2, v3, v1, (uint64_t)v4);
}

uint64_t sub_100115078(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100115204(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100115290;
  v4[3] = &unk_10063B3A0;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  sub_1001AD804(v2, v1, v3, (uint64_t)v4);
}

uint64_t sub_100115290(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001153F0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
    [v5 insertOrUpdateDeviceOriginatedNearbyPeerPaymentTransactionWithIdentifier:*(void *)(a1 + 40) memo:*(void *)(a1 + 48) counterpartAppearanceData:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService insertOrUpdateDeviceOriginatedNearbyPeerPaymentTransactionWithIdentifier:memo:counterp"
           "artAppearanceData:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 64);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_10011567C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1001157F8;
    v8[3] = &unk_100644C48;
    uint64_t v2 = *(void **)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v3 = *(id *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 32);
    id v12 = v3;
    uint64_t v13 = v4;
    id v14 = *(id *)(a1 + 72);
    [v2 accountWithCompletion:v8];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v16 = "-[PDPeerPaymentService insertOrUpdateNearbyPeerPaymentSetupNotificationWithTransactionIdentifier:amount:curr"
            "ency:senderName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 72);
    if (v7) {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0LL);
    }
  }

void sub_1001157F8(void *a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 associatedPassUniqueID]);
  uint64_t v4 = objc_alloc(&OBJC_CLASS___PDPeerPaymentNearbySetupUserNotification);
  uint64_t v5 = a1[4];
  uint64_t v6 = PKCurrencyAmountMake(a1[5], a1[6]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = -[PDPeerPaymentNearbySetupUserNotification initWithPassUniqueIdentifier:transactionIdentifier:amount:senderName:]( v4,  "initWithPassUniqueIdentifier:transactionIdentifier:amount:senderName:",  v3,  v5,  v7,  a1[7]);

  [*(id *)(a1[8] + 48) insertUserNotification:v8];
  (*(void (**)(void))(a1[9] + 16LL))();
}

void sub_100115984(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) peerPaymentCounterpartImageData]);
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      uint64_t v7 = v2;
      (*(void (**)(void))(v3 + 16))();
      uint64_t v2 = v7;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v9 = "-[PDPeerPaymentService counterpartImageDataWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

void sub_100115BB8(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) peerPaymentCounterpartImageDataWithIdentifier:a1[5]]);
    uint64_t v3 = a1[6];
    if (v3)
    {
      uint64_t v7 = v2;
      (*(void (**)(void))(v3 + 16))();
      uint64_t v2 = v7;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v9 = "-[PDPeerPaymentService counterpartImageDataWithIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v6 = a1[6];
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

void sub_100115DEC(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 40) peerPaymentCounterpartImageDataForTransactionWithIdentifier:a1[5]]);
    uint64_t v3 = a1[6];
    if (v3)
    {
      uint64_t v7 = v2;
      (*(void (**)(void))(v3 + 16))();
      uint64_t v2 = v7;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v9 = "-[PDPeerPaymentService counterpartImageDataForTransactionWithIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v6 = a1[6];
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

uint64_t sub_100115FF4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 40) deleteAllPeerPaymentCounterpartImageData];
    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPeerPaymentService deleteAllCounterpartImageDataWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }

  return result;
}

id sub_100116210(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[PDPeerPaymentService reportFailureDiagnostic:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v5,  0xCu);
  }

  id result = (id)a1[6];
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
  }
  return result;
}

void sub_1001165C4(uint64_t a1, void *a2)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 requestToken]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[PDPeerPaymentPendingRequestReceivedUserNotification notificationIdentifierForRequestToken:]( &OBJC_CLASS___PDPeerPaymentPendingRequestReceivedUserNotification,  "notificationIdentifierForRequestToken:",  v8));

        uint64_t v10 = *(void *)(a1 + 32);
        id v11 = *(void **)(v10 + 48);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_100116744;
        v13[3] = &unk_100644C98;
        void v13[4] = v10;
        void v13[5] = v7;
        [v11 userNotificationWithIdentifier:v9 completion:v13];
      }

      id v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v4);
  }
}

void sub_100116744(int8x16_t *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Found existing notification for pending request received. Ignoring.",  buf,  2u);
    }
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100116808;
    v7[3] = &unk_100644C70;
    int8x16_t v6 = a1[2];
    int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
    [(id)v6.i64[0] accountWithCompletion:v7];
  }
}

void sub_100116808(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 associatedPassUniqueID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) actions]);
  unsigned int v5 = [v4 containsObject:PKPeerPaymentPendingRequestActionReject];

  if (v5)
  {
    int8x16_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requesterAddress]);
    int8x16_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _displayNameForAddress:v7]);

    id v9 = -[PDPeerPaymentPendingRequestReceivedUserNotification initWithPendingRequest:requesterName:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentPendingRequestReceivedUserNotification),  "initWithPendingRequest:requesterName:forPassUniqueIdentifier:",  *(void *)(a1 + 32),  v8,  v3);
    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) expiryDate]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 dateByAddingUnit:16 value:-1 toDate:v11 options:0]);

      -[PDUserNotification setDate:](v9, "setDate:", v12);
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v9, "notificationIdentifier"));
        int v16 = 138412546;
        __int128 v17 = v15;
        __int16 v18 = 2112;
        id v19 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Scheduling notification for pending request with identifier: %@, scheduled date: %@",  (uint8_t *)&v16,  0x16u);
      }

      [*(id *)(*(void *)(a1 + 40) + 48) insertUserNotification:v9];
    }
  }

  else
  {
    id v9 = 0LL;
    int8x16_t v8 = 0LL;
  }
}

void sub_1001169F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
  [v4 insertOrUpdatePeerPaymentPendingRequests:v3 completion:0];

  unsigned int v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    id v10 = (id)PKPeerPaymentPendingRequestStatusPending;
    do
    {
      for (id i = 0LL; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "status", (void)v19));
        if (v13 == v10)
        {

          int v16 = v10;
          goto LABEL_16;
        }

        __int128 v14 = v13;
        if (v13) {
          BOOL v15 = v10 == 0LL;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {

LABEL_15:
          int v16 = (void *)objc_claimAutoreleasedReturnValue([v12 requestToken]);
          -[NSMutableArray addObject:](v5, "addObject:", v16);
LABEL_16:

          continue;
        }

        unsigned __int8 v17 = [v13 isEqualToString:v10];

        if ((v17 & 1) == 0) {
          goto LABEL_15;
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v8);
  }

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerPaymentAccountManager]);
  [v18 deletePeerPaymentPendingRequestsForRequestTokens:v5 completion:0];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100116C9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) requestToken]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[PDPeerPaymentPendingRequestReceivedUserNotification notificationIdentifierForRequestToken:]( &OBJC_CLASS___PDPeerPaymentPendingRequestReceivedUserNotification,  "notificationIdentifierForRequestToken:",  v8));

        [*(id *)(*(void *)(a1 + 32) + 48) removeUserNotificationWithIdentifier:v9];
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }
}

void sub_100117010(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteObjectProxy]);
    [v2 pendingRequestsChanged];
  }

void sub_10011712C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteObjectProxy]);
    [v2 recurringPaymentsChanged];
  }

void sub_1001172BC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_10011783C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1001183BC(id a1, NSData *a2)
{
  return -[NSData hexEncoding](a2, "hexEncoding");
}

BOOL sub_10011873C(uint64_t a1, void *a2)
{
  return sub_1003B02F4(*(void *)(*(void *)(a1 + 32) + 80LL), 16LL, a2);
}

void sub_10011885C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_100118878(uint64_t a1, void *a2, _BYTE *a3)
{
  BOOL result = sub_1003AFC74(*(void *)(*(void *)(a1 + 32) + 80LL), 1LL, a2, (void *)3);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  *a3 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

id *sub_100118BEC(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id sub_1001195BC(id a1, NSNumber *a2)
{
  return +[Pass predicateForPaymentType:]( &OBJC_CLASS___Pass,  "predicateForPaymentType:",  -[NSNumber unsignedIntValue](a2, "unsignedIntValue"));
}

void sub_1001197B0(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v9 = *a4;
  id v6 = [a4[1] integerValue];
  id v7 = [a4[2] integerValue];
  id v8 = a4[3];
}

id sub_10011A528(uint64_t a1, void *a2)
{
  return _[a2 supportsMultiTokensWithImplicitlyEnabledNetworks:*(void *)(a1 + 32)];
}

id sub_10011A534(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [a2 paymentNetworkIdentifier]));
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_10011AEB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10011AED0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v7 = a2;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___PKSecureElementPass, v5);
  if ((objc_opt_isKindOfClass(v7, v6) & 1) != 0
    && [v7 associatedAccountFeatureIdentifier] == *(id *)(a1 + 40))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

void sub_10011AFE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10011AFFC(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___PKSecureElementPass, v3);
}

id sub_10011B878(id a1, NSData *a2)
{
  return -[NSData hexEncoding](a2, "hexEncoding");
}

void sub_10011BCD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10011BCF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011BD00(uint64_t a1)
{
}

uint64_t sub_10011BD08(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  a1[4],  *(void *)(a1[5] + 8LL)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPersistentID:]( PaymentApplication,  "anyInDatabase:withPersistentID:",  *(void *)(a1[5] + 8),  [v2 paymentApplicationPID]));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( Pass,  "anyInDatabase:withPersistentID:",  *(void *)(a1[5] + 8),  [v3 passPID]));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 1LL;
}

void sub_10011C9F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

BOOL sub_10011CA54(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(a1 + 40)));
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v34 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDDatabaseManager: failed to insert pass %@ because it already exists.",  buf,  0xCu);
    }

    BOOL v7 = 0LL;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _passTypeForPass:*(void *)(a1 + 48)]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _webServiceForPass:*(void *)(a1 + 48) passType:v8]);
    BOOL v10 = sub_1003B02F4(*(void *)(*(void *)(a1 + 32) + 80LL), 2LL, *(void **)(a1 + 48));
    if (v10) {
      int v12 = PKIsMac(v10, v11) ^ 1;
    }
    else {
      LOBYTE(v12) = 0;
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v12;
    if (*(void *)(a1 + 56))
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_transactionServiceForPass:"));
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _messageServiceForPass:*(void *)(a1 + 56)]);
    }

    else
    {
      __int128 v13 = 0LL;
      __int128 v14 = 0LL;
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[Pass insertPass:withPassType:webService:transactionService:messageService:daemonPassData:inDatabase:]( &OBJC_CLASS___Pass,  "insertPass:withPassType:webService:transactionService:messageService:daemonPassData:inDatabase:",  *(void *)(a1 + 48),  v8,  v9,  v13,  v14,  *(void *)(a1 + 64),  *(void *)(*(void *)(a1 + 32) + 8LL)));
    BOOL v7 = v3 != 0LL;
    if (v3)
    {
      if (*(void *)(a1 + 56))
      {
        uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:*(void *)(a1 + 40)]);
        uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8LL);
        unsigned __int8 v17 = *(void **)(v16 + 40);
        *(void *)(v16 + 40) = v15;
      }

      if ([*(id *)(a1 + 48) isExpired])
      {
        __int16 v18 = *(void **)(a1 + 56);
        if (v18)
        {
          id v19 = [v18 passActivationState];
          BOOL v20 = v19 == (id)4;
          if (v19 == (id)4) {
            uint64_t v21 = 3LL;
          }
          else {
            uint64_t v21 = 1LL;
          }
        }

        else
        {
          uint64_t v21 = 2LL;
          BOOL v20 = 1LL;
        }

        __int128 v22 = v3;
      }

      else if ([*(id *)(a1 + 48) isVoided])
      {
        __int128 v22 = v3;
        BOOL v20 = 1LL;
        uint64_t v21 = 4LL;
      }

      else if ([*(id *)(a1 + 48) isPastRelevancy])
      {
        __int128 v22 = v3;
        BOOL v20 = 1LL;
        uint64_t v21 = 5LL;
      }

      else if ([*(id *)(a1 + 48) isExpiredBasedOnSigningDate])
      {
        __int128 v22 = v3;
        BOOL v20 = 1LL;
        uint64_t v21 = 6LL;
      }

      else
      {
        __int128 v22 = v3;
        BOOL v20 = 0LL;
        uint64_t v21 = 1LL;
      }

      [v22 updateWithSortingState:v20 forSortingReason:v21];
      [v3 updateWithLastModifiedSource:*(void *)(a1 + 120)];
      [*(id *)(a1 + 32) adjustGroupsAfterAddingPass:v3];
      if (v13)
      {
        uint64_t v23 = objc_claimAutoreleasedReturnValue([v13 notificationService]);
        uint64_t v24 = *(void *)(*(void *)(a1 + 88) + 8LL);
        __int128 v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 40) = v23;
      }

      if (v14)
      {
        uint64_t v26 = objc_claimAutoreleasedReturnValue([v14 notificationService]);
        uint64_t v27 = *(void *)(*(void *)(a1 + 96) + 8LL);
        __int128 v28 = *(void **)(v27 + 40);
        *(void *)(v27 + 40) = v26;
      }

      if (v9)
      {
        uint64_t v29 = objc_claimAutoreleasedReturnValue([v9 webService]);
        uint64_t v30 = *(void *)(*(void *)(a1 + 104) + 8LL);
        int v31 = *(void **)(v30 + 40);
        *(void *)(v30 + 40) = v29;
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL) = 1;
    }
  }

  return v7;
}

void sub_10011D3E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
}

BOOL sub_10011D478(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(a1 + 40)));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 pass]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) passType] == (id)1) {
      [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) updateDevicePaymentApplicationsWithSecureElementIdentifiers:*(void *)(a1 + 48)];
    }
    BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 groupingProfile]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v3 webService]);
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 passType]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 _webServiceForPass:v10 passType:v11]);

    BOOL v13 = sub_1003B0580(*(void **)(*(void *)(a1 + 32) + 80LL), 2LL, v3);
    if (v13) {
      char v15 = PKIsMac(v13, v14) ^ 1;
    }
    else {
      char v15 = 0;
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = v15;
    if (*(void *)(a1 + 64))
    {
      uint64_t v18 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:*(void *)(a1 + 40)]);
      uint64_t v19 = *(void *)(*(void *)(a1 + 96) + 8LL);
      BOOL v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;

      uint64_t v21 = objc_claimAutoreleasedReturnValue([v3 transactionService]);
      uint64_t v22 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _transactionServiceForPass:*(void *)(a1 + 64)]);
      uint64_t v23 = objc_claimAutoreleasedReturnValue([v3 messageService]);
      uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _messageServiceForPass:*(void *)(a1 + 64)]);
    }

    else
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
    }

    [v3 updateWithPass:*(void *)(a1 + 56) webService:v12 transactionSevice:v22 messageService:v24 daemonPassData:*(void *)(a1 + 72)];
    if (*(void *)(a1 + 168) != 5LL)
    {
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) cloudKitMetadata]);
      [v3 udpateWithCloudKitMetadata:v25];

      objc_msgSend( v3,  "udpateWithIsCloudKitArchived:",  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "isCloudKitArchived"));
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) cloudKitSecureMetadata]);
      [v3 udpateWithCloudKitSecureMetadata:v26];

      objc_msgSend( v3,  "udpateWithIsCloudKitSecurelyArchived:",  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "isCloudKitSecurelyArchived"));
    }

    if (*(void *)(a1 + 64))
    {
      uint64_t v27 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:*(void *)(a1 + 40)]);
      uint64_t v28 = *(void *)(*(void *)(a1 + 104) + 8LL);
      uint64_t v29 = *(void **)(v28 + 40);
      *(void *)(v28 + 40) = v27;
    }

    [v3 updateWithLastModifiedSource:*(void *)(a1 + 168)];
    [*(id *)(a1 + 32) adjustGroupsAfterUpdatingPass:v3 oldGroupingProfile:v7];
    if (v21 | v22)
    {
      uint64_t v30 = objc_claimAutoreleasedReturnValue([(id)v21 notificationService]);
      uint64_t v31 = *(void *)(*(void *)(a1 + 112) + 8LL);
      __int128 v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = v30;

      uint64_t v33 = objc_claimAutoreleasedReturnValue([(id)v22 notificationService]);
      uint64_t v34 = *(void *)(*(void *)(a1 + 120) + 8LL);
      __int128 v35 = *(void **)(v34 + 40);
      *(void *)(v34 + 40) = v33;

      if (v21)
      {
        if (!v22 || (id v36 = [(id)v21 persistentID], v36 != objc_msgSend((id)v22, "persistentID"))) {
          [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v21];
        }
      }
    }

    if (v23 | v24)
    {
      uint64_t v37 = objc_claimAutoreleasedReturnValue([(id)v23 notificationService]);
      uint64_t v38 = *(void *)(*(void *)(a1 + 128) + 8LL);
      id v39 = *(void **)(v38 + 40);
      *(void *)(v38 + 40) = v37;

      uint64_t v40 = objc_claimAutoreleasedReturnValue([(id)v24 notificationService]);
      uint64_t v41 = *(void *)(*(void *)(a1 + 136) + 8LL);
      __int16 v42 = *(void **)(v41 + 40);
      *(void *)(v41 + 40) = v40;

      if (v23)
      {
        if (!v24 || (id v43 = [(id)v23 persistentID], v43 != objc_msgSend((id)v24, "persistentID"))) {
          [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v23];
        }
      }
    }

    if (!(v8 | v12)) {
      goto LABEL_35;
    }
    uint64_t v44 = objc_claimAutoreleasedReturnValue([(id)v12 webService]);
    uint64_t v45 = *(void *)(*(void *)(a1 + 144) + 8LL);
    uint64_t v46 = *(void **)(v45 + 40);
    *(void *)(v45 + 40) = v44;

    if (v8 && v12)
    {
      id v47 = [(id)v8 persistentID];
      id v48 = [(id)v12 persistentID];
      uint64_t v49 = *(void *)(*(void *)(a1 + 152) + 8LL);
      if (v47 == v48)
      {
        *(_BYTE *)(v49 + 24) = 0;
LABEL_35:
        *(_BYTE *)(*(void *)(*(void *)(a1 + 160) + 8LL) + 24LL) = 1;

        goto LABEL_36;
      }

      *(_BYTE *)(v49 + 24) = 1;
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 152) + 8LL) + 24LL) = 1;
      if (!v8) {
        goto LABEL_35;
      }
    }

    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [(id)v8 updateWithLastDeletionDate:v50];

    [*(id *)(a1 + 32) _deleteWebServiceIfOrphaned:v8];
    goto LABEL_35;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 40);
    int v52 = 138412290;
    uint64_t v53 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDDatabaseManager: failed to update pass %@ because it no longer exists.",  (uint8_t *)&v52,  0xCu);
  }

void sub_10011DBCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

BOOL sub_10011DC14(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 pass]);
    uint64_t v5 = *(void *)(a1[6] + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v3 webService]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionService]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 messageService]);
    BOOL v10 = sub_1003B0580(*(void **)(a1[4] + 80LL), 2LL, v3);
    if (v10) {
      int v12 = PKIsMac(v10, v11) ^ 1;
    }
    else {
      LOBYTE(v12) = 0;
    }
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = v12;
    if (v7)
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([v7 webService]);
      uint64_t v14 = *(void *)(a1[8] + 8LL);
      char v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 updateWithLastDeletionDate:v16];
    }

    if (v8)
    {
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v8 notificationService]);
      uint64_t v18 = *(void *)(a1[9] + 8LL);
      uint64_t v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = v17;
    }

    if (v9)
    {
      uint64_t v20 = objc_claimAutoreleasedReturnValue([v9 notificationService]);
      uint64_t v21 = *(void *)(a1[10] + 8LL);
      uint64_t v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;
    }
  }

  return v3 != 0LL;
}

void sub_10011DEBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10011DEE0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(a1 + 40)));
  if (v2)
  {
    [*(id *)(a1 + 32) adjustGroupsBeforeRemovingPass:v2];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 passType]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passTypeID]);
    id v5 = [v4 copy];
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    BOOL v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 serialNumber]);
    id v9 = [v8 copy];
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    int v12 = (void *)objc_claimAutoreleasedReturnValue([v2 webService]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 transactionService]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v2 messageService]);
    char v15 = (void *)objc_claimAutoreleasedReturnValue([v2 associatedAccountIdentifier]);
    if (v15) {
      [*(id *)(a1 + 32) deleteAccountEventsForAccountIdentifier:v15];
    }
    [v2 deleteFromDatabase];
    sub_1003AFE64(*(void *)(*(void *)(a1 + 32) + 80LL), *(void **)(a1 + 40));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[PKPassPreferencesManager sharedInstance](&OBJC_CLASS___PKPassPreferencesManager, "sharedInstance"));
    [v16 removeAllPreferencesForPassWithUniqueID:*(void *)(a1 + 40)];

    [*(id *)(a1 + 32) _deleteWebServiceIfOrphaned:v12];
    [*(id *)(a1 + 32) _deletePassTypeIfOrphaned:v3];
    [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v13];
    [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v14];
  }

  return v2 != 0LL;
}

void sub_10011E7E8(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  id v2 = [*(id *)(a1 + 40) copy];
  [v3 passUniqueIdentifiersMovedToExpired:v2];
}

void sub_10011E83C(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[PassAnnotations insertPassAnnotationsForSortingState:forPassPID:inDatabase:]( &OBJC_CLASS___PassAnnotations,  "insertPassAnnotationsForSortingState:forPassPID:inDatabase:",  *(void *)(a1 + 56),  a2,  *(void *)(*(void *)(a1 + 32) + 8LL)));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 passAnnotations]);

  [*(id *)(a1 + 40) setObject:v4 forKeyedSubscript:*(void *)(a1 + 48)];
}

void sub_10011EB78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10011EB90(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(a1 + 40)));
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[PassLiveRender passLiveRenderInDatabase:forPass:]( &OBJC_CLASS___PassLiveRender,  "passLiveRenderInDatabase:forPass:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v2));
    if (v3)
    {
      id v4 = v3;
      [v3 updateWithEnabled:*(unsigned __int8 *)(a1 + 56)];
    }

    else
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[PassLiveRender insertEnabled:forPass:inDatabase:]( &OBJC_CLASS___PassLiveRender,  "insertEnabled:forPass:inDatabase:",  *(unsigned __int8 *)(a1 + 56),  v2,  *(void *)(*(void *)(a1 + 32) + 8LL)));
    }

    uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 passLiveRender]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    BOOL v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL;
  }

  else
  {
    BOOL v5 = 0LL;
  }

  return v5;
}

void sub_10011EF40(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) willRemoveTransaction:*(void *)(a1 + 48)];
}

void sub_10011EF80(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didRemoveTransactionWithIdentifier:*(void *)(a1 + 48)];
}

void sub_10011EFC0(void *a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 72LL));
    uint64_t v12 = a1[5];
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    [WeakRetained removeItems:v4 completion:0];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id WeakRetained = (id)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled((os_log_t)WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[6];
      uint64_t v7 = a1[7];
      int v8 = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)WeakRetained,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer will not sync transaction from CloudKit with serviceIdentifier %{public}@ and tran sactionSourceIdentifier %@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_10011F518(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v17 = a1;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionSourceIdentifier]);
        __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v2, "objectForKey:", v9));
        uint64_t v11 = v10;
        if (v10) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        }
        uint64_t v13 = v12;

        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 paymentTransaction]);
        -[NSMutableSet addObject:](v13, "addObject:", v14);

        char v15 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionSourceIdentifier]);
        -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v13, v15);
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v17 + 40) delegate]);
  [v16 willRemoveTransactionsWithSourceIdentifierMapping:v2];
}

void sub_10011F6D8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 didRemoveTransactionsWithSourceIdentifierMapping:*(void *)(a1 + 40)];
}

void sub_10011F718(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  int v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained applePayContainer]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10011F7F4;
  v11[3] = &unk_10063A6D8;
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v6;
  id v13 = v5;
  id v9 = v5;
  id v10 = v6;
  [v8 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v9 completion:v11];
}

void sub_10011F7F4(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    [WeakRetained removeItems:*(void *)(a1 + 40) completion:0];
  }

  else
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v4 = *(id *)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v16;
      do
      {
        int v8 = 0LL;
        do
        {
          if (*(void *)v16 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)v8) serviceIdentifier]);
          -[NSMutableArray addObject:](v3, "addObject:", v9);

          int v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v15 objects:v23 count:16];
      }

      while (v6);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v3, "componentsJoinedByString:", @", "));
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      __int128 v20 = v10;
      __int16 v21 = 2112;
      uint64_t v22 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer will not sync transactions from cloud kit with serviceIdentifiers %{public}@ and t ransactionSourceIdentifier %@",  buf,  0x16u);
    }
  }

void sub_100120698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t sub_1001206F4(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 pass]);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2 && *(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 webService]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 webService]);
    uint64_t v8 = *(void *)(a1[7] + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v2 transactionService]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 notificationService]);
    uint64_t v12 = *(void *)(a1[8] + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v2 messageService]);
    uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 notificationService]);
    uint64_t v16 = *(void *)(a1[9] + 8LL);
    __int128 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    *(void *)(*(void *)(a1[10] + 8LL) + 24LL) = sub_1003B0174( *(id *)(a1[4] + 80LL),  *(void **)(*(void *)(a1[6] + 8LL) + 40LL));
    sub_1003B0380(*(void *)(a1[4] + 80LL), a1[12], *(void **)(*(void *)(a1[6] + 8LL) + 40LL));
    *(void *)(*(void *)(a1[11] + 8LL) + 24LL) = sub_1003B0174( *(id *)(a1[4] + 80LL),  *(void **)(*(void *)(a1[6] + 8LL) + 40LL));
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = a1[5];
      int v22 = 138412290;
      uint64_t v23 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Error: Failed to find a pass in database with unique identifier '%@'.",  (uint8_t *)&v22,  0xCu);
    }
  }

  return 1LL;
}

void sub_1001208F0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didEnableTransactionService:(*(unsigned __int8 *)(a1 + 48) >> 3) & 1];
}

void sub_100120938(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didEnableMessageService:(*(unsigned __int8 *)(a1 + 48) >> 2) & 1];
}

void sub_100120FA4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[Pass predicateForHasAnyWebService](&OBJC_CLASS___Pass, "predicateForHasAnyWebService"));
  v19[0] = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"pass_type_pid",  v9));
  v19[1] = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v19, 2LL));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v11));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:",  v7,  v12));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100121168;
  v16[3] = &unk_100644F90;
  uint64_t v14 = *(void **)(a1 + 40);
  void v16[4] = *(void *)(a1 + 32);
  id v17 = v14;
  id v18 = v6;
  id v15 = v6;
  +[Pass enumeratePassUniqueIDsAndTypesForQuery:withHandler:]( &OBJC_CLASS___Pass,  "enumeratePassUniqueIDsAndTypesForQuery:withHandler:",  v13,  v16);
}

void sub_100121168(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 80LL);
  id v8 = a2;
  LODWORD(a3) = sub_1003AFC74( v7,  2,  v8,  objc_msgSend( +[PKPass classForPassType:](PKPass, "classForPassType:", a3),  "defaultSettings"));

  if ((_DWORD)a3)
  {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
    *a4 = 1;
  }

void sub_1001212E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001212FC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 80LL);
  id v8 = a2;
  LODWORD(a3) = sub_1003AFC74( v7,  2,  v8,  objc_msgSend( +[PKPass classForPassType:](PKPass, "classForPassType:", a3),  "defaultSettings"));

  if ((_DWORD)a3)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

void sub_1001224C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001224E0(void *a1, void *a2, _BYTE *a3)
{
  id v5 = (void *)a1[4];
  id v6 = (void *)a1[5];
  id v7 = a2;
  id v8 = [v6 serviceType];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);

  id v10 = [v5 registrationStatusForNotificationServiceType:v8 passUniqueIdentifier:v9];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v10 == (id)1;
  *a3 = *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL);
}

void sub_100122BA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_100122BC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) secureElementIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) applicationIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:",  v3,  v2,  v4,  v5));

  if (v6 && [*(id *)(a1 + 48) supportsSuica])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[FelicaTransitAppletState anyInDatabase:withPaymentApplicationPID:]( FelicaTransitAppletState,  "anyInDatabase:withPaymentApplicationPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v6 persistentID]));
    id v8 = v7;
    if (v7)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 transitAppletState]);
      id v10 = [v9 copy];
      uint64_t v11 = *(void **)(a1 + 56);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_100122DC4;
      v21[3] = &unk_100645008;
      id v12 = v10;
      id v22 = v12;
      [v11 enumerateKeysAndObjectsUsingBlock:v21];
      [v12 setNeedsStationProcessing:0];
      if (([v9 isEqual:v12] & 1) == 0)
      {
        [v8 updateWithAppletState:v12];
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[SecureElementPassField secureElementPassFieldsInDatabase:forPassPID:]( SecureElementPassField,  "secureElementPassFieldsInDatabase:forPassPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v6 passPID]));
        uint64_t v14 = objc_claimAutoreleasedReturnValue( [v9 transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v13]);
        uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8LL);
        uint64_t v16 = *(void **)(v15 + 40);
        *(void *)(v15 + 40) = v14;

        uint64_t v17 = objc_claimAutoreleasedReturnValue( [v12 transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v13]);
        uint64_t v18 = *(void *)(*(void *)(a1 + 72) + 8LL);
        __int128 v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;
      }
    }
  }

  return 1LL;
}

void sub_100122DC4(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shinkansenOriginStationCode]);
  int v7 = PKEqualObjects(v18, v6);

  if (v7) {
    [*(id *)(a1 + 32) setShinkansenOriginStationString:v5];
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shinkansenDestinationStationCode]);
  int v9 = PKEqualObjects(v18, v8);

  if (v9) {
    [*(id *)(a1 + 32) setShinkansenDestinationStationString:v5];
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shinkansenSecondaryOriginStationCode]);
  int v11 = PKEqualObjects(v18, v10);

  if (v11) {
    [*(id *)(a1 + 32) setShinkansenSecondaryOriginStationString:v5];
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shinkansenSecondaryDestinationStationCode]);
  int v13 = PKEqualObjects(v18, v12);

  if (v13) {
    [*(id *)(a1 + 32) setShinkansenSecondaryDestinationStationString:v5];
  }
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) greenCarOriginStationCode]);
  int v15 = PKEqualObjects(v18, v14);

  if (v15) {
    [*(id *)(a1 + 32) setGreenCarOriginStationString:v5];
  }
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) greenCarDestinationStationCode]);
  int v17 = PKEqualObjects(v18, v16);

  if (v17) {
    [*(id *)(a1 + 32) setGreenCarDestinationStationString:v5];
  }
}

void sub_100122F44(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateFromTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) toTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_100123544( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_1001235B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) secureElementIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) applicationIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withPassUniqueIdentifier:secureElementIdentifier:paymentApplicationIdentifier:",  v3,  v2,  v4,  v5));

  if (v6)
  {
    id v107 = 0LL;
    id obj = 0LL;
    id v106 = 0LL;
    if ([*(id *)(a1 + 48) supportsSuica])
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) felicaHistory]);
      id v8 = v7;
      if (!v7 || [v7 type] == (id)1)
      {
        int v9 = (void *)objc_claimAutoreleasedReturnValue( +[FelicaTransitAppletState anyInDatabase:withPaymentApplicationPID:]( FelicaTransitAppletState,  "anyInDatabase:withPaymentApplicationPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v6 persistentID]));
        if (v9)
        {
          id v10 = v9;
          int v11 = (PKFelicaTransitAppletState *)objc_claimAutoreleasedReturnValue([v9 transitAppletState]);
          uint64_t v12 = objc_claimAutoreleasedReturnValue( -[PKFelicaTransitAppletState processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:]( v11,  "processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:",  v8,  &v107,  &obj));
          uint64_t v13 = *(void *)(*(void *)(a1 + 96) + 8LL);
          uint64_t v14 = *(void **)(v13 + 40);
          *(void *)(v13 + 40) = v12;

          if ((-[PKFelicaTransitAppletState isEqual:]( v11,  "isEqual:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) & 1) != 0)
          {
            char v15 = 0;
          }

          else
          {
            uint64_t Object = PKLogFacilityTypeGetObject(12LL);
            uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[PKFelicaTransitAppletState historySequenceNumber](v11, "historySequenceNumber"));
              uint64_t v30 = v10;
              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) historySequenceNumber]);
              *(_DWORD *)buf = 138412546;
              uint64_t v111 = (uint64_t)v29;
              __int16 v112 = 2112;
              v113 = v31;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Updating Applet State history sequence number: %@ -> %@",  buf,  0x16u);

              id v10 = v30;
            }

            [v10 updateWithAppletState:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
            char v15 = 1;
          }
        }

        else
        {
          uint64_t v20 = objc_alloc_init(&OBJC_CLASS___PKFelicaTransitAppletState);
          uint64_t v21 = objc_claimAutoreleasedReturnValue( -[PKFelicaTransitAppletState processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:]( v20,  "processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:",  v8,  0LL,  &obj));
          uint64_t v22 = *(void *)(*(void *)(a1 + 96) + 8LL);
          uint64_t v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;

          uint64_t v24 = PKLogFacilityTypeGetObject(12LL);
          __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) historySequenceNumber]);
            *(_DWORD *)buf = 138412290;
            uint64_t v111 = (uint64_t)v26;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Inserting Applet State history sequence number: %@",  buf,  0xCu);
          }

          id v10 = (void *)objc_claimAutoreleasedReturnValue( +[FelicaTransitAppletState insertFelicaTransitAppletState:forPaymentApplicationPID:inDatabase:]( FelicaTransitAppletState,  "insertFelicaTransitAppletState:forPaymentApplicationPID:inDatabase:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40),  [v6 persistentID],  *(void *)(*(void *)(a1 + 32) + 8)));
          char v15 = 1;
          int v11 = v20;
        }

        goto LABEL_28;
      }
    }

    else if ([*(id *)(a1 + 48) supportsTransit])
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[TransitAppletState anyInDatabase:withPaymentApplicationPID:]( TransitAppletState,  "anyInDatabase:withPaymentApplicationPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v6 persistentID]));
      if (v16)
      {
        id v10 = v16;
        int v11 = (PKFelicaTransitAppletState *)objc_claimAutoreleasedReturnValue([v16 transitAppletState]);
        uint64_t v17 = objc_claimAutoreleasedReturnValue( -[PKFelicaTransitAppletState processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:mutatedBalances:balanceLabelDictionary:unitDictionary:planLabelDictionary:]( v11,  "processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:mutatedBalances:balanceLabelD ictionary:unitDictionary:planLabelDictionary:",  *(void *)(a1 + 56),  &v107,  &obj,  &v106,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80)));
        uint64_t v18 = *(void *)(*(void *)(a1 + 96) + 8LL);
        __int128 v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;

        if ((-[PKFelicaTransitAppletState isEqual:]( v11,  "isEqual:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) & 1) != 0)
        {
          char v15 = 0;
          goto LABEL_28;
        }

        uint64_t v39 = PKLogFacilityTypeGetObject(12LL);
        uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      }

      else
      {
        __int128 v32 = objc_alloc_init(&OBJC_CLASS___PKTransitAppletState);
        uint64_t v33 = objc_claimAutoreleasedReturnValue( -[PKTransitAppletState processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:mutatedBalances:balanceLabelDictionary:unitDictionary:planLabelDictionary:]( v32,  "processUpdateWithAppletHistory:concreteTransactions:ephemeralTransaction:mutatedBalances:balanceLabelD ictionary:unitDictionary:planLabelDictionary:",  *(void *)(a1 + 56),  0LL,  &obj,  &v106,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80)));
        uint64_t v34 = *(void *)(*(void *)(a1 + 96) + 8LL);
        __int128 v35 = *(void **)(v34 + 40);
        *(void *)(v34 + 40) = v33;

        uint64_t v36 = PKLogFacilityTypeGetObject(12LL);
        uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v111 = (uint64_t)v38;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Inserting Applet State history sequence number: %@",  buf,  0xCu);
        }

        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[TransitAppletState insertTransitAppletState:forPaymentApplicationPID:inDatabase:]( TransitAppletState,  "insertTransitAppletState:forPaymentApplicationPID:inDatabase:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40),  [v6 persistentID],  *(void *)(*(void *)(a1 + 32) + 8)));
        int v11 = v32;
      }

      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[PKFelicaTransitAppletState historySequenceNumber](v11, "historySequenceNumber"));
        *(_DWORD *)buf = 138412546;
        uint64_t v111 = (uint64_t)v40;
        __int16 v112 = 2112;
        v113 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Applet state changed to Dirty. Updating Applet State history sequence number: %@ -> %@",  buf,  0x16u);
      }

      [v10 updateWithAppletState:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
      char v15 = 1;
LABEL_28:
      uint64_t v42 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
      if (v42)
      {
        objc_msgSend( *(id *)(a1 + 32),  "_updatePaymentBalancesAndPlansForTransitAppletState:passUniqueIdentifier:paymentApplicationPID:unitDictionary:",  v42,  *(void *)(a1 + 40),  objc_msgSend(v6, "persistentID"),  *(void *)(a1 + 72));
        char v43 = v15 ^ 1;
        if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) {
          char v43 = 1;
        }
        if ((v43 & 1) == 0)
        {
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[SecureElementPassField secureElementPassFieldsInDatabase:forPassPID:]( SecureElementPassField,  "secureElementPassFieldsInDatabase:forPassPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v6 passPID]));
          uint64_t v45 = objc_claimAutoreleasedReturnValue( -[PKFelicaTransitAppletState transitPassPropertiesWithPaymentApplication:fieldCollection:]( v11,  "transitPassPropertiesWithPaymentApplication:fieldCollection:",  *(void *)(a1 + 48),  v44));
          uint64_t v46 = *(void *)(*(void *)(a1 + 104) + 8LL);
          id v47 = *(void **)(v46 + 40);
          *(void *)(v46 + 40) = v45;

          uint64_t v48 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v44]);
          uint64_t v49 = *(void *)(*(void *)(a1 + 112) + 8LL);
          uint64_t v50 = *(void **)(v49 + 40);
          *(void *)(v49 + 40) = v48;
        }
      }

      if ((v15 & 1) == 0 && !*(_BYTE *)(a1 + 144)) {
        goto LABEL_81;
      }
      unint64_t v51 = *(void **)(a1 + 88);
      if (v51) {
        id v52 = v51;
      }
      else {
        id v52 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      }
      uint64_t v53 = v52;
      v101 = v10;
      if (!obj)
      {
        v73 = (void *)objc_claimAutoreleasedReturnValue([v72 lastObject]);

        if (v73)
        {
          if ([0 length])
          {
            uint64_t v74 = PKLogFacilityTypeGetObject(12LL);
            v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v111 = 0LL;
              _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Retaining Ephemeral Transaction: %@",  buf,  0xCu);
            }
          }

          v69 = 0LL;
        }

        else
        {
          v69 = (void *)objc_claimAutoreleasedReturnValue([v10 paymentTransactionIdentifier]);
          if ([v69 length])
          {
            v76 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v69));
            uint64_t v77 = objc_claimAutoreleasedReturnValue([v76 paymentTransaction]);
            uint64_t v78 = *(void *)(*(void *)(a1 + 128) + 8LL);
            v79 = *(void **)(v78 + 40);
            *(void *)(v78 + 40) = v77;
          }

          if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL))
          {
            uint64_t v80 = PKLogFacilityTypeGetObject(12LL);
            v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v111 = (uint64_t)v69;
              _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "Removing Ephemeral Transaction: %@",  buf,  0xCu);
            }

            uint64_t v66 = 0LL;
            goto LABEL_64;
          }
        }

LABEL_65:
        v82 = (char *)[v107 count];
        v83 = v82;
        if (!obj)
        {
          if (v82) {
            goto LABEL_68;
          }
          if (!*(_BYTE *)(a1 + 144))
          {
            v83 = 0LL;
            goto LABEL_68;
          }
        }

        v83 = v82 + 1;
LABEL_68:
        v84 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", v83);
        v85 = v84;
        if (v107) {
          -[NSMutableArray addObjectsFromArray:](v84, "addObjectsFromArray:");
        }
        if (obj) {
          -[NSMutableArray addObject:](v85, "addObject:");
        }
        v100 = v6;
        if (!-[NSMutableArray count](v85, "count") && *(_BYTE *)(a1 + 144) && !*(_BYTE *)(a1 + 145))
        {
          v98 = (void *)objc_claimAutoreleasedReturnValue( +[PKPaymentTransaction paymentTransactionWithSource:]( &OBJC_CLASS___PKPaymentTransaction,  "paymentTransactionWithSource:",  1LL));
          [v98 setTransactionType:2];
          [v98 setTransitType:517];
          [v98 setOriginatedByDevice:1];
          [v98 setTransactionStatus:-1];
          -[NSMutableArray addObject:](v85, "addObject:", v98);
        }

        v99 = v11;
        v86 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) appletCurrencyCode]);
        __int128 v102 = 0u;
        __int128 v103 = 0u;
        __int128 v104 = 0u;
        __int128 v105 = 0u;
        v87 = v85;
        id v88 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v87,  "countByEnumeratingWithState:objects:count:",  &v102,  v109,  16LL);
        if (v88)
        {
          id v89 = v88;
          uint64_t v90 = *(void *)v103;
          do
          {
            v91 = 0LL;
            v92 = v53;
            do
            {
              if (*(void *)v103 != v90) {
                objc_enumerationMutation(v87);
              }
              v93 = *(void **)(*((void *)&v102 + 1) + 8LL * (void)v91);
              [v93 setTransactionDate:v92];
              uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v92 dateByAddingTimeInterval:0.001]);

              [v93 setCurrencyCode:v86];
              v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) stationCodeProvider]);
              [v93 setStationCodeProvider:v94];

              [v93 setTransactionStatus:-1];
              [v93 setShouldSuppressDate:*(unsigned __int8 *)(a1 + 145)];
              v91 = (char *)v91 + 1;
              v92 = v53;
            }

            while (v89 != v91);
            id v89 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v87,  "countByEnumeratingWithState:objects:count:",  &v102,  v109,  16LL);
          }

          while (v89);
        }

        uint64_t v95 = *(void *)(*(void *)(a1 + 136) + 8LL);
        v96 = *(void **)(v95 + 40);
        *(void *)(v95 + 40) = v87;

        int v11 = v99;
        id v6 = v100;
        id v10 = v101;
        goto LABEL_81;
      }

      [obj setTransactionStatus:-1];
      __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(-[PKFelicaTransitAppletState enrouteTransitTypes](v11, "enrouteTransitTypes"));
      id v55 = [v54 count];

      if (v55)
      {
        v57 = (void *)objc_claimAutoreleasedReturnValue([v56 lastObject]);

        v58 = objc_alloc(&OBJC_CLASS___NSSet);
        v59 = (void *)objc_claimAutoreleasedReturnValue(-[PKFelicaTransitAppletState enrouteTransitTypes](v11, "enrouteTransitTypes"));
        v60 = -[NSSet initWithArray:](v58, "initWithArray:", v59);

        if (v57 && -[NSSet containsObject:](v60, "containsObject:", v57)) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL), obj);
        }

        id v10 = v101;
      }

      v61 = (void *)objc_claimAutoreleasedReturnValue([v10 paymentTransactionIdentifier]);
      if ([v61 length])
      {
        v62 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v61));
        uint64_t v63 = objc_claimAutoreleasedReturnValue([v62 paymentTransaction]);
        uint64_t v64 = *(void *)(*(void *)(a1 + 128) + 8LL);
        v65 = *(void **)(v64 + 40);
        *(void *)(v64 + 40) = v63;
      }

      uint64_t v66 = objc_claimAutoreleasedReturnValue([obj identifier]);

      uint64_t v67 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL);
      uint64_t v68 = PKLogFacilityTypeGetObject(12LL);
      v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
      BOOL v70 = os_log_type_enabled((os_log_t)v69, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        if (v70)
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v111 = v66;
          v71 = "Replacing Ephemeral Transaction: %@";
LABEL_57:
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v69, OS_LOG_TYPE_DEFAULT, v71, buf, 0xCu);
        }
      }

      else if (v70)
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v111 = (uint64_t)obj;
        v71 = "Inserting Ephemeral Transaction: %@";
        goto LABEL_57;
      }

            uint64_t v48 = (v52 - 1) & v52;
            uint64_t v49 = __clz(__rbit64(v52)) + (v50 << 6);
          }

          __int16 v54 = *(id *)(*(void *)(v35 + 48) + 8 * v49);
        }
      }

      sub_100422D78(v35);
      int v9 = v85;
      uint64_t v22 = v91;
      uint64_t v23 = v90;
      uint64_t v24 = v89;
    }

    char v15 = v22;
    uint64_t v16 = v23;
  }

  if (v16)
  {
    uint64_t v23 = (v16 - 1) & v16;
    __int128 v25 = __clz(__rbit64(v16)) | (v15 << 6);
    uint64_t v22 = v15;
    goto LABEL_35;
  }

  uint64_t v28 = v15 + 1;
  if (__OFADD__(v15, 1LL)) {
    goto LABEL_85;
  }
  if (v28 < v83)
  {
    uint64_t v29 = *(void *)(v84 + 8 * v28);
    uint64_t v22 = v15 + 1;
    if (!v29)
    {
      uint64_t v22 = v15 + 2;
      if (v15 + 2 >= v83) {
        goto LABEL_80;
      }
      uint64_t v29 = *(void *)(v84 + 8 * v22);
      if (!v29)
      {
        uint64_t v22 = v15 + 3;
        if (v15 + 3 >= v83) {
          goto LABEL_80;
        }
        uint64_t v29 = *(void *)(v84 + 8 * v22);
        if (!v29)
        {
          uint64_t v22 = v15 + 4;
          if (v15 + 4 >= v83) {
            goto LABEL_80;
          }
          uint64_t v29 = *(void *)(v84 + 8 * v22);
          if (!v29)
          {
            uint64_t v30 = v15 + 5;
            do
            {
              if (v83 == v30) {
                goto LABEL_80;
              }
              uint64_t v29 = *(void *)(v84 + 8 * v30++);
            }

            while (!v29);
            uint64_t v22 = v30 - 1;
          }
        }
      }
    }

    uint64_t v23 = (v29 - 1) & v29;
    __int128 v25 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_35:
    uint64_t v24 = *(id *)(*(void *)(v9 + 48) + 8 * v25);
    if (!v24) {
      goto LABEL_80;
    }
    goto LABEL_36;
  }

void sub_1001241BC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateFromTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) toTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_1001245F8(uint64_t a1)
{
  id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dbPeerPaymentAccount]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v11 associatedPassUniqueID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryPaymentApplicationForPassUniqueIdentifier:v2]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSourceIdentifier]);
  id v5 = (PKPaymentTransaction *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v4]);
  if (!v5)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransaction);
    -[PKPaymentTransaction setTransactionType:](v5, "setTransactionType:", 3LL);
    -[PKPaymentTransaction addUpdateReasons:](v5, "addUpdateReasons:", 256LL);
    -[PKPaymentTransaction setServiceIdentifier:](v5, "setServiceIdentifier:", *(void *)(a1 + 40));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[PKPaymentTransaction setTransactionDate:](v5, "setTransactionDate:", v6);
  }

  int v7 = *(void **)(a1 + 48);
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction peerPaymentMemo](v5, "peerPaymentMemo"));
    unsigned __int8 v9 = [v7 isEqualToString:v8];

    if ((v9 & 1) == 0)
    {
      -[PKPaymentTransaction setPeerPaymentMemo:](v5, "setPeerPaymentMemo:", *(void *)(a1 + 48));
      id v10 =  [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:v5 transactionSourceIdentifier:v4 transactionArchive:0 originDeviceID:0 insertio nMode:0 performTruncation:0 insertedTransaction:0];
    }
  }
}

void sub_100124804(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dbPeerPaymentAccount]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v8 associatedPassUniqueID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryPaymentApplicationForPassUniqueIdentifier:v2]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSourceIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v4]);
  id v6 = v5;
  if (v5 && *(void *)(a1 + 48))
  {
    objc_msgSend(v5, "setPeerPaymentMessageReceivedDate:");
    [v6 addUpdateReasons:512];
    id v7 =  [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:v6 transactionSourceIdentifier:v4 transactionArchive:0 originDeviceID:0 insertionMo de:0 performTruncation:0 insertedTransaction:0];
  }
}

void sub_1001249DC(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dbPeerPaymentAccount]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v8 associatedPassUniqueID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryPaymentApplicationForPassUniqueIdentifier:v2]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSourceIdentifier]);
  id v5 = (PKPaymentTransaction *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v4]);
  if (!v5)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransaction);
    -[PKPaymentTransaction setTransactionType:](v5, "setTransactionType:", 3LL);
    -[PKPaymentTransaction setPeerPaymentPaymentMode:](v5, "setPeerPaymentPaymentMode:", 2LL);
    -[PKPaymentTransaction addUpdateReasons:](v5, "addUpdateReasons:", 256LL);
    -[PKPaymentTransaction setServiceIdentifier:](v5, "setServiceIdentifier:", *(void *)(a1 + 40));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[PKPaymentTransaction setTransactionDate:](v5, "setTransactionDate:", v6);
  }

  -[PKPaymentTransaction setPeerPaymentMemo:](v5, "setPeerPaymentMemo:", *(void *)(a1 + 48));
  -[PKPaymentTransaction setPeerPaymentCounterpartImageRecordIdentifier:]( v5,  "setPeerPaymentCounterpartImageRecordIdentifier:",  *(void *)(a1 + 56));
  -[PKPaymentTransaction setOriginatedByDevice:](v5, "setOriginatedByDevice:", 1LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:v5 transactionSourceIdentifier:v4 transactionArchive:0 originDeviceID:0 inser tionMode:0 performTruncation:0 insertedTransaction:0]);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100124E3C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didReceiveMessage:*(void *)(a1 + 48)];
}

void sub_10012597C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didResolvePendingTransitTransactionAmountsWithTransaction:*(void *)(a1 + 48) paymentApplication:*(void *)(a1 + 56) balance:*(void *)(a1 + 64)];
}

uint64_t sub_100126794(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  +[PaymentCommutePlanDetail deleteEntitiesForPass:inDatabase:]( &OBJC_CLASS___PaymentCommutePlanDetail,  "deleteEntitiesForPass:inDatabase:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL));
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = *(id *)(a1 + 48);
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentCommutePlanDetail insertPaymentPlan:withPaymentPass:inDatabase:]( &OBJC_CLASS___PaymentCommutePlanDetail,  "insertPaymentPlan:withPaymentPass:inDatabase:",  *(void *)(*((void *)&v17 + 1) + 8LL * (void)v7),  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL)));
        unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 paymentPlan]);
        -[NSMutableArray addObject:](v2, "addObject:", v9);

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v5);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(dispatch_queue_s **)(v10 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100126958;
  block[3] = &unk_100639350;
  void block[4] = v10;
  id v15 = *(id *)(a1 + 56);
  uint64_t v16 = v2;
  uint64_t v12 = v2;
  dispatch_async(v11, block);

  return 1LL;
}

void sub_100126958(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateToPlans:*(void *)(a1 + 48)];
}

LABEL_42:
    goto LABEL_43;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int16 v112 = v81;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Payment balances updated for pass that doesn't exist: %@",  buf,  0xCu);
  }

  id v55 = v80;
LABEL_45:
}

              ++v30;
            }

            while (v30 != v29);
            if (-[NSMutableIndexSet count](v31, "count")) {
              [v127 removeObjectsAtIndexes:v31];
            }

            if ((v119 & 1) != 0) {
              *((_BYTE *)v186 + 24) = 1;
            }
          }

          else
          {
          }

          objc_autoreleasePoolPop(contexta);
        }

        uint64_t v48 = objc_autoreleasePoolPush();
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v118 merchantIdentifiers]);
        if ([v49 count])
        {
          uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentPassesWithAssociatedPassTypeIdentifierHashes:automaticSelectionOnly:]( self,  "paymentPassesWithAssociatedPassTypeIdentifierHashes:automaticSelectionOnly:",  v49,  1LL));
          if ([v50 count])
          {
            *((_BYTE *)v186 + 24) = 1;
            v151 = 0u;
            v152 = 0u;
            v153 = 0u;
            v154 = 0u;
            unint64_t v51 = v50;
            id v52 = [v51 countByEnumeratingWithState:&v151 objects:v202 count:16];
            if (v52)
            {
              uint64_t v53 = *(void *)v152;
              do
              {
                for (iid i = 0LL; ii != v52; iid i = (char *)ii + 1)
                {
                  if (*(void *)v152 != v53) {
                    objc_enumerationMutation(v51);
                  }
                  -[NSMutableOrderedSet addObject:](v24, "addObject:", v55);
                }

                id v52 = [v51 countByEnumeratingWithState:&v151 objects:v202 count:16];
              }

              while (v52);
            }
          }
        }

        objc_autoreleasePoolPop(v48);
        if (v111) {
          -[NSMutableOrderedSet addObject:](v24, "addObject:", v111);
        }
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v56 = v125;
        v57 = [v56 countByEnumeratingWithState:&v147 objects:v201 count:16];
        if (v57)
        {
          v58 = *(void *)v148;
          do
          {
            for (jj = 0LL; jj != v57; jj = (char *)jj + 1)
            {
              if (*(void *)v148 != v58) {
                objc_enumerationMutation(v56);
              }
              v60 = *(void **)(*((void *)&v147 + 1) + 8LL * (void)jj);
              if (([v60 isAccessPass] & 1) == 0)
              {
                v61 = (void *)objc_claimAutoreleasedReturnValue([v60 uniqueID]);
                -[NSMutableOrderedSet addObject:](v24, "addObject:", v61);
              }
            }

            v57 = [v56 countByEnumeratingWithState:&v147 objects:v201 count:16];
          }

          while (v57);
        }

        v145 = 0u;
        v146 = 0u;
        v143 = 0u;
        v144 = 0u;
        v62 = v24;
        uint64_t v63 = -[NSMutableOrderedSet countByEnumeratingWithState:objects:count:]( v62,  "countByEnumeratingWithState:objects:count:",  &v143,  v200,  16LL);
        if (v63)
        {
          uint64_t v64 = *(void *)v144;
          do
          {
            for (kk = 0LL; kk != v63; kk = (char *)kk + 1)
            {
              if (*(void *)v144 != v64) {
                objc_enumerationMutation(v62);
              }
              [(id)v190[5] addObject:*(void *)(*((void *)&v143 + 1) + 8 * (void)kk)];
            }

            uint64_t v63 = -[NSMutableOrderedSet countByEnumeratingWithState:objects:count:]( v62,  "countByEnumeratingWithState:objects:count:",  &v143,  v200,  16LL);
          }

          while (v63);
        }

        if (!v123) {
          goto LABEL_155;
        }
LABEL_94:
        if (![obj count])
        {
LABEL_155:

          v208[0] = 0LL;
          v208[1] = v208;
          v208[2] = 0x3032000000LL;
          v208[3] = sub_100169B54;
          v208[4] = sub_100169B64;
          v209 = 0LL;
          v132[0] = _NSConcreteStackBlock;
          v132[1] = 3221225472LL;
          v132[2] = sub_10016A018;
          v132[3] = &unk_100647250;
          v138 = v112;
          v134 = &v181;
          v135 = &v189;
          v97 = v111;
          v133 = v97;
          v136 = v208;
          v137 = &v185;
          [v117 addOperation:v132];
          v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          v129[0] = _NSConcreteStackBlock;
          v129[1] = 3221225472LL;
          v129[2] = sub_10016A128;
          v129[3] = &unk_100639778;
          v130 = v114;
          v131 = v208;
          v99 = [v117 evaluateWithInput:v98 completion:v129];

          _Block_object_dispose(v208, 8);
          _Block_object_dispose(&v181, 8);
          _Block_object_dispose(&v185, 8);
          _Block_object_dispose(&v189, 8);

          id v8 = v114;
          goto LABEL_156;
        }

        *((_BYTE *)v186 + 24) = 1;
        v139 = 0u;
        v140 = 0u;
        v141 = 0u;
        v142 = 0u;
        uint64_t v12 = obj;
        uint64_t v66 = [v12 countByEnumeratingWithState:&v139 objects:v199 count:16];
        if (v66)
        {
          uint64_t v67 = *(void *)v140;
          do
          {
            for (mm = 0LL; mm != v66; mm = (char *)mm + 1)
            {
              if (*(void *)v140 != v67) {
                objc_enumerationMutation(v12);
              }
              v69 = (void *)v190[5];
              [v69 addObject:v70];
            }

            uint64_t v66 = [v12 countByEnumeratingWithState:&v139 objects:v199 count:16];
          }

          while (v66);
        }

        goto LABEL_15;
      }

      if (!v39 || v39 == (id)5) {
        goto LABEL_155;
      }
    }

    else
    {
      id obj = 0LL;
    }

    v123 = 0;
    goto LABEL_19;
  }
}

    if (-[PDTransitNotificationService _shouldSendDCIRenotifyNotificationForTransitMarket:]( self,  "_shouldSendDCIRenotifyNotificationForTransitMarket:",  v4))
    {
      if (!-[PDTransitNotificationService _hasExistingTransitPassesForMarket:]( self,  "_hasExistingTransitPassesForMarket:",  v4)) {
        goto LABEL_47;
      }
      uint64_t v26 = PKLogFacilityTypeGetObject(12LL);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = 138412290;
        uint64_t v30 = (unint64_t)v4;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send DCI renotify notification for %@.\n We already have a valid transit pass - marking as suppressed to prevent future DCI renotify notification attempts",  (uint8_t *)&v29,  0xCu);
      }

      -[PDTransitNotificationService _recordNotificationType:sentForMarket:]( self,  "_recordNotificationType:sentForMarket:",  2LL,  v4);
      if (-[PDTransitNotificationService _shouldSendOpenLoopRenotifyNotificationForTransitMarket:]( self,  "_shouldSendOpenLoopRenotifyNotificationForTransitMarket:",  v4))
      {
LABEL_47:
        uint64_t v10 = 12LL;
        goto LABEL_40;
      }

    sub_100422720((void **)&v59, (const void **)&v58, &v57);
    return 1LL;
  }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

  _Block_release(a3);
  _Block_release(a3);
  __break(1u);
LABEL_43:
  _Block_release(a3);
  _Block_release(a3);
  __break(1u);
}

uint64_t sub_10012717C(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 48);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 =  +[PaymentBalance insertPaymentBalance:withPaymentPass:inDatabase:]( &OBJC_CLASS___PaymentBalance,  "insertPaymentBalance:withPaymentPass:inDatabase:",  *(void *)(*((void *)&v9 + 1) + 8LL * (void)v6),  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL),  (void)v9);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_10012729C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) copy];
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateBalancesFrom:v3 toBalances:*(void *)(a1 + 56)];
}

void sub_1001274CC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allObjects]);
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateBalancesFrom:0 toBalances:v3];
}

void sub_1001275EC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateBalancesFrom:0 toBalances:v3];
}

void sub_1001277F4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateBalanceReminder:*(void *)(a1 + 48) forBalanceWithIdentifier:*(void *)(a1 + 56)];
}

void sub_100127984(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 rescheduleCommutePlanRenewalRemindersForPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
}

LABEL_207:
          __int128 v20 = v170;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543618;
            *(void *)v206 = v170;
            *(_WORD *)&v206[8] = 2112;
            *(void *)&v206[10] = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Inserting New Transaction with identifier %{public}@: %@",  buf,  0x16u);
          }

          if (a9) {
            *a9 = 1;
          }
          v136 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource anyInDatabase:withIdentifier:]( &OBJC_CLASS___TransactionSource,  "anyInDatabase:withIdentifier:",  self->_database,  v15));
          v169 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction insertPaymentTransaction:withTransactionSource:inDatabase:]( &OBJC_CLASS___PaymentTransaction,  "insertPaymentTransaction:withTransactionSource:inDatabase:",  v14));
          v128 = (void *)objc_claimAutoreleasedReturnValue([v169 dbPaymentTransactionArchive]);
          v146 = (id)objc_claimAutoreleasedReturnValue([v128 transactionArchive]);
          v157 = v128;
          [v128 updateWithTransactionArchive:v172];
          +[PaymentMessage archiveMessagesOfType:forPass:inDatabase:]( &OBJC_CLASS___PaymentMessage,  "archiveMessagesOfType:forPass:inDatabase:",  1LL,  v99,  self->_database);
          if (((v144 | !v148) & 1) != 0)
          {
            v97 = v169;
            v100 = v128;
          }

          else
          {
            v151 = v99;
            v129 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction truncateEntitiesForTransactionSourceIdentifiers:withNotificationServiceData:suppressedFromUI:inDatabase:toCount:]( &OBJC_CLASS___PaymentTransaction,  "truncateEntitiesForTransactionSourceIdentifiers:withNotificationServiceData:suppressedFro mUI:inDatabase:toCount:",  v162,  0LL,  0LL,  self->_database,  v126));
            v191 = 0u;
            v192 = 0u;
            v193 = 0u;
            v194 = 0u;
            v130 = [v129 countByEnumeratingWithState:&v191 objects:v221 count:16];
            if (v130)
            {
              v131 = v130;
              v132 = *(void *)v192;
              do
              {
                for (id i = 0LL; i != v131; id i = (char *)i + 1)
                {
                  if (*(void *)v192 != v132) {
                    objc_enumerationMutation(v129);
                  }
                  v134 = *(void *)(*((void *)&v191 + 1) + 8LL * (void)i);
                  v135 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager delegate](self, "delegate"));
                  [v135 transactionSourceIdentifier:v15 didRemoveTransactionWithIdentifier:v134];
                }

                v131 = [v129 countByEnumeratingWithState:&v191 objects:v221 count:16];
              }

              while (v131);
            }

            v97 = v169;
            if (([v169 existsInDatabase] & 1) == 0)
            {

              v97 = 0LL;
            }

            __int128 v20 = v170;
            v100 = v157;

            v99 = v151;
          }

          goto LABEL_224;
        }
      }

      v144 = 1;
      goto LABEL_207;
    }

    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager passWithUniqueIdentifier:](self, "passWithUniqueIdentifier:", v161));
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v67 paymentPass]);

    v156 = v68;
    if ([v68 hasAssociatedPeerPaymentAccount])
    {
      v69 = [v163 length] == 0;
    }

    else
    {
      v76 = (void *)objc_claimAutoreleasedReturnValue([v68 associatedAccountServiceAccountIdentifier]);
      if (v76) {
        v69 = [v163 length] == 0;
      }
      else {
        v69 = 1;
      }
    }

    v113 = (void *)objc_claimAutoreleasedReturnValue([v14 dpanIdentifier]);
    v114 = (void *)objc_claimAutoreleasedReturnValue([v14 altDSID]);
    if (!v69)
    {
      LODWORD(v53) = 0;
      v115 = 0LL;
      goto LABEL_196;
    }

    v147 = v114;
    if ([v113 length])
    {
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentApplicationWithDPANIdentifier:]( self,  "paymentApplicationWithDPANIdentifier:",  v113));

      if (!v53) {
        goto LABEL_194;
      }
    }

    else if ([v147 length] && !PKAltDSIDIsCurrentUser(v147))
    {
LABEL_193:
      LODWORD(v53) = 0;
LABEL_194:
      v115 = 0LL;
LABEL_195:
      v114 = v147;
LABEL_196:

      uint64_t v22 = v115;
      if (v115)
      {
LABEL_65:
        __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([v22 paymentTransaction]);
        v167 = v22;
        id v55 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionArchive anyInDatabase:forTransaction:]( &OBJC_CLASS___PaymentTransactionArchive,  "anyInDatabase:forTransaction:",  self->_database,  v22));
        v149 = (void *)objc_claimAutoreleasedReturnValue([v55 transactionArchive]);
        v56 = PKLogFacilityTypeGetObject(9LL);
        v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)v206 = v149;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Existing transaction archive %@",  buf,  0xCu);
        }

        if (v172)
        {
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v206 = v172;
            _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Updating existing transaction archive with new archive %@",  buf,  0xCu);
          }

          [v55 updateWithTransactionArchive:v172];
        }

        v155 = (void *)objc_claimAutoreleasedReturnValue([v55 transactionArchive]);
        if ((v158 & 1) != 0
          || ![v14 hasCloudArchivableDeviceData]
          || ([v14 isCloudArchivableDeviceDataEqual:v54] & 1) != 0)
        {
          v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
          if ((v152 & 0x10000) != 0)
          {
            if (v58)
            {
              *(_DWORD *)buf = 138543618;
              *(void *)v206 = v171;
              *(_WORD *)&v206[8] = 2114;
              *(void *)&v206[10] = v170;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "setting isArchived to NO because of upload-after-reset for transaction: %{public}@ service: %{public}@",  buf,  0x16u);
            }

            [v155 updateArchiveLocationsWithType:0 isArchived:0];
          }

          else
          {
            if (v58)
            {
              *(_DWORD *)buf = 138543618;
              *(void *)v206 = v170;
              *(_WORD *)&v206[8] = 2114;
              *(void *)&v206[10] = v171;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "setting isArchived to YES on every matching location in the archive for transaction: %{public}@ service: %{public}@",  buf,  0x16u);
            }

            [v155 updateTransactionArchiveLocationsWithArchive:v149 type:0 archived:1];
          }

          v142 = 0;
          if (!(_DWORD)v53) {
            goto LABEL_95;
          }
        }

        else
        {
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543618;
            *(void *)v206 = v170;
            *(_WORD *)&v206[8] = 2114;
            *(void *)&v206[10] = v171;
            _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "setting isArchived to NO because the local device data has changed for transaction: %{public}@ service: %{public}@",  buf,  0x16u);
          }

          [v155 updateArchiveLocationsWithType:0 isArchived:0];
          v142 = 1;
          if (!(_DWORD)v53) {
            goto LABEL_95;
          }
        }

        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543618;
          *(void *)v206 = v170;
          *(_WORD *)&v206[8] = 2114;
          *(void *)&v206[10] = v171;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "marking transaction as fuzzy matched: %{public}@ service: %{public}@",  buf,  0x16u);
        }

        [v14 setFuzzyMatched:1];
LABEL_95:
        if (v54) {
          BOOL v70 = v158;
        }
        else {
          BOOL v70 = 0;
        }
        __int128 v20 = v170;
        if (v70 == 1)
        {
          v71 = (void *)objc_claimAutoreleasedReturnValue([v54 merchant]);
          v72 = (void *)objc_claimAutoreleasedReturnValue([v14 merchant]);
          if (([v71 mapsDataIsFromLocalMatch] & 1) != 0
            || ([v71 useRawMerchantData] & 1) != 0)
          {
            v145 = 0LL;
            v73 = 0LL;
          }

          else
          {
            uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v71 mapsBrand]);
            v73 = [v77 identifier];

            uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v71 mapsMerchant]);
            v145 = [v78 identifier];
          }

          v139 = v55;
          if (([v72 mapsDataIsFromLocalMatch] & 1) != 0
            || ([v72 useRawMerchantData] & 1) != 0)
          {
            v79 = 0LL;
            uint64_t v80 = 0LL;
          }

          else
          {
            v81 = (void *)objc_claimAutoreleasedReturnValue([v72 mapsBrand]);
            uint64_t v80 = [v81 identifier];

            v82 = (void *)objc_claimAutoreleasedReturnValue([v72 mapsMerchant]);
            v137 = v72;
            v83 = v71;
            v84 = v82;
            v79 = [v82 identifier];

            v71 = v83;
            v72 = v137;
          }

          if (v73 == v80 && v145 == v79)
          {
            else {
              v85 = (uint64_t)[v54 requiresMerchantReprocessing];
            }
            __int128 v20 = v170;
            id v55 = v139;
            [v14 setRequiresMerchantReprocessing:v85];
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)v206 = v85;
              *(_WORD *)&v206[4] = 2114;
              *(void *)&v206[6] = v170;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "maps data did not change, setting last reprocessing date: %d for transaction: %{public}@",  buf,  0x12u);
            }

            if ((_DWORD)v85)
            {
              v86 = (void *)objc_claimAutoreleasedReturnValue([v54 lastMerchantReprocessingDate]);
              [v14 setLastMerchantReprocessingDate:v86];
            }
          }

          else
          {
            __int128 v20 = v170;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              *(void *)v206 = v170;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "maps data changed for transaction: %{public}@",  buf,  0xCu);
            }

            [v14 setRequiresMerchantReprocessing:0];
            [v14 setLastMerchantReprocessingDate:0];
            id v55 = v139;
          }
        }

        v87 = v55;
        id v88 = (unint64_t)[v14 transactionStatus];
        id v89 = (unint64_t)[v54 transactionStatus];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          *(void *)v206 = v89;
          *(_WORD *)&v206[8] = 2048;
          *(void *)&v206[10] = v88;
          v207 = 2114;
          *(void *)v208 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "updating state from %ld to %ld for transaction: %{public}@",  buf,  0x20u);
        }

        if (v54 && (v88 & 0xFFFFFFFFFFFFFFFDLL) == 1 && !v89)
        {
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)v206 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "stated changed, will require merchant reprocessing for transaction: %{public}@",  buf,  0xCu);
          }

          uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v14 dpanIdentifier]);
          if (!v90
            || (v91 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentApplicationWithDPANIdentifier:]( self,  "paymentApplicationWithDPANIdentifier:",  v90)),  v91,  v91))
          {
            [v14 setRequiresMerchantReprocessing:1];
          }

          __int128 v20 = v170;
        }

        if (v88 == 1)
        {
          v92 = (void *)objc_claimAutoreleasedReturnValue([v54 amount]);
          if (v92)
          {

            if ((v89 & 0xFFFFFFFFFFFFFFF7LL) == 0)
            {
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)v206 = v20;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "updating amount added to auth for transaction: %{public}@",  buf,  0xCu);
              }

              v93 = (void *)objc_claimAutoreleasedReturnValue([v14 amount]);
              v94 = (void *)objc_claimAutoreleasedReturnValue([v54 amount]);
              uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v93 decimalNumberBySubtracting:v94]);
              [v14 setAmountAddedToAuth:v95];

              __int128 v20 = v170;
            }
          }
        }

        objc_msgSend(v14, "setUpdateSequenceNumber:", (char *)objc_msgSend(v54, "updateSequenceNumber") + 1);
        [v167 updateWithPaymentTransactionSource:v15];
        v96 = self->_database;
        v195[0] = _NSConcreteStackBlock;
        v195[1] = 3221225472LL;
        v195[2] = sub_1001299D8;
        v195[3] = &unk_100645080;
        uint64_t v50 = v54;
        v196 = v50;
        v197 = v14;
        v198 = v20;
        v97 = v167;
        v199 = v97;
        v146 = v149;
        v200 = v146;
        v201 = v155;
        v98 = v87;
        v99 = v201;
        v100 = v98;
        v202 = v98;
        sub_1002CCC5C((uint64_t)v96, v195);

        v101 = v196;
        goto LABEL_150;
      }

      goto LABEL_197;
    }

    v116 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction closestTransactionInDatabase:fromTransaction:forTransactionSourceIdentifiers:]( &OBJC_CLASS___PaymentTransaction,  "closestTransactionInDatabase:fromTransaction:forTransactionSourceIdentifiers:",  self->_database,  v14,  v162));
    if (v116)
    {
      v117 = v116;
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v116 identifier]);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)v206 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Fuzzy-Matched Transaction to Transaction with Identifier: %{public}@",  buf,  0xCu);
      }

      LODWORD(v53) = 1;
      v115 = v117;
      goto LABEL_195;
    }

    goto LABEL_193;
  }

  __int128 v19 = PKLogFacilityTypeGetObject(0LL);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceIdentifier]);
    *(_DWORD *)buf = 138543618;
    *(void *)v206 = v21;
    *(_WORD *)&v206[8] = 2112;
    *(void *)&v206[10] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "Error: Cannot insert transaction with service ID %{public}@ with a nil transactionSourceIdentifier %@",  buf,  0x16u);
  }

  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
LABEL_178:

  uint64_t v111 = v23;
  return v111;
}

uint64_t sub_1001299D8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(23LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v10 = 138412802;
    uint64_t v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updating Existing Transaction: %@ with Transaction: %@ for identifier %{public}@",  (uint8_t *)&v10,  0x20u);
  }

  [*(id *)(a1 + 56) updateWithPaymentTransaction:*(void *)(a1 + 40)];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    int v10 = 138412546;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updating Existing Transaction Archive: %@ with Updated Transaction Archive: %@",  (uint8_t *)&v10,  0x16u);
  }

  [*(id *)(a1 + 80) updateWithTransactionArchive:*(void *)(a1 + 72)];
  return 1LL;
}

void sub_100129B0C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_100129B50(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_100129B94(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) willRemoveTransaction:*(void *)(a1 + 48)];
}

void sub_100129BD4(void *a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 72LL));
    uint64_t v12 = a1[5];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    [WeakRetained removeItems:v4 completion:0];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id WeakRetained = (id)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled((os_log_t)WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[6];
      uint64_t v7 = a1[7];
      int v8 = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)WeakRetained,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer will not sync transaction from CloudKit with serviceIdentifier %{public}@ and tran sactionSourceIdentifier %@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_100129CD8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didRemoveTransactionWithIdentifier:*(void *)(a1 + 48)];
}

void sub_100129E90(uint64_t a1)
{
  uint64_t v16 = 0LL;
  __int128 v17 = &v16;
  uint64_t v18 = 0x3032000000LL;
  __int128 v19 = sub_10011BCF0;
  __int128 v20 = sub_10011BD00;
  id v21 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceIdentifier]);
  uint64_t v2 = v17[5];
  if (!v2)
  {
    id v3 = *(void **)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t v9 = _NSConcreteStackBlock;
      uint64_t v10 = 3221225472LL;
      uint64_t v11 = sub_100129FC8;
      uint64_t v12 = &unk_100644E28;
      uint64_t v13 = v4;
      id v14 = v3;
      uint64_t v15 = &v16;
      sub_1002CCC5C(v5, &v9);

      uint64_t v2 = v17[5];
    }

    else
    {
      uint64_t v2 = 0LL;
    }
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_insertOrUpdatePaymentTransaction:transactionSourceIdentifier:transactionArchive:originDeviceID:insertionMode :performTruncation:insertedTransaction:",  *(void *)(a1 + 56),  v2,  0,  *(void *)(a1 + 64),  *(void *)(a1 + 80),  *(unsigned __int8 *)(a1 + 96),  *(void *)(a1 + 88),  v9,  v10,  v11,  v12,  v13));
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8LL);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  _Block_object_dispose(&v16, 8);
}

void sub_100129FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100129FC8(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1[4] + 8LL),  a1[5]));
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 transactionSourceIdentifier]);
    uint64_t v5 = *(void *)(a1[6] + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource insertTransactionSourceWithType:inDatabase:]( &OBJC_CLASS___TransactionSource,  "insertTransactionSourceWithType:inDatabase:",  0LL,  *(void *)(a1[4] + 8LL)));
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 identifier]);
      uint64_t v9 = *(void *)(a1[6] + 8LL);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t Object = PKLogFacilityTypeGetObject(24LL);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = a1[5];
        uint64_t v14 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
        *(_DWORD *)buf = 138543618;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        uint64_t v24 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Pass %{public}@ did not have a transaction source, adding one now %@ and notifying the delegate that the pass has been updated",  buf,  0x16u);
      }

      objc_msgSend(v3, "updateWithTransactionSourcePID:", objc_msgSend(v7, "persistentID"));
      uint64_t v15 = a1[4];
      uint64_t v16 = (void *)a1[5];
      __int128 v17 = *(dispatch_queue_s **)(v15 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_10012A18C;
      v19[3] = &unk_1006392B0;
      v19[4] = v15;
      id v20 = v16;
      dispatch_async(v17, v19);
    }
  }

  return 1LL;
}

void sub_10012A18C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  [WeakRetained passDidUpdateTransactionSourceIdentifierWithPassUniqueIdentifier:*(void *)(a1 + 40)];
}

void sub_10012A330(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:*(void *)(a1 + 40) transactionSourceIdentifier:*(void *)(a1 + 48) transactionArchive:*(void *)(a1 + 56) originDeviceID:*(void *)(a1 + 64) insertionMode :*(void *)(a1 + 80) performTruncation:*(unsigned __int8 *)(a1 + 96) insertedTransaction:*(void *)(a1 + 88)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10012A5B8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_10012A714(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_10012A844(_Unwind_Exception *a1)
{
}

BOOL sub_10012A860(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v3 = a1[4];
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          if (objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "suppressBehavior", (void)v10) != a1[7]) {
            id v8 = objc_msgSend(WeakRetained, "updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:");
          }
          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v5);
    }
  }

  return WeakRetained != 0LL;
}

void sub_10012AB5C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_10012ACC8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

NSString *__cdecl sub_10012B150(id a1, PKPass *a2)
{
  return (NSString *)-[PKPass uniqueID](a2, "uniqueID");
}

void sub_10012B158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)a4]);
  objc_msgSend(v7, "setIsCloudKitArchived:", objc_msgSend(*(id *)(a4 + 8), "BOOLValue"));
  [v7 setCloudKitMetadata:*(void *)(a4 + 16)];
  objc_msgSend(v7, "setIsCloudKitSecurelyArchived:", objc_msgSend(*(id *)(a4 + 24), "BOOLValue"));
  [v7 setCloudKitSecureMetadata:*(void *)(a4 + 32)];
  id v5 = (void *)_DateForSQLValue(*(void *)(a4 + 40));
  [v7 setIngestedDate:v5];

  uint64_t v6 = (void *)_DateForSQLValue(*(void *)(a4 + 48));
  [v7 setModifiedDate:v6];

  objc_msgSend(v7, "setRevoked:", objc_msgSend(*(id *)(a4 + 56), "BOOLValue"));
}

void sub_10012B300(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitMetadata]);

  if (v3)
  {
    [v7 udpateWithIsCloudKitArchived:1];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitMetadata]);
    [v7 udpateWithCloudKitMetadata:v4];
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitSecureMetadata]);

  if (v5)
  {
    [v7 udpateWithIsCloudKitSecurelyArchived:1];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitSecureMetadata]);
    [v7 udpateWithCloudKitSecureMetadata:v6];
  }
}

void sub_10012B5FC(uint64_t a1, void *a2)
{
  id v14 = a2;
  id v3 = (void *)PKCloudStorePassesSyncContainerName;
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  if (v4 != v5)
  {
    uint64_t v6 = v5;
    if (v4) {
      BOOL v7 = v5 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
    }

    else
    {
      unsigned int v8 = [v4 isEqualToString:v5];

      if (v8) {
        goto LABEL_10;
      }
    }

    uint64_t v9 = (void *)PKCloudStorePassesSyncSecureContainerName;
    id v10 = *(id *)(a1 + 32);
    id v11 = v9;
    if (v10 == v11)
    {
    }

    else
    {
      __int128 v12 = v11;
      if (v10 && v11)
      {
        unsigned int v13 = [v10 isEqualToString:v11];

        if (v13) {
          goto LABEL_19;
        }
      }

      else
      {
      }

      [v14 udpateWithIsCloudKitArchived:0];
      [v14 udpateWithCloudKitMetadata:0];
    }

void sub_10012BF80(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 passWithUniqueIdentifier:*(void *)(a1 + 40) didReceiveValueAddedServiceTransaction:*(void *)(a1 + 48)];
}

void sub_10012C360(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) paymentApplication]);
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateDefaultPaymentApplication:v3];
}

void sub_10012D770( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_10012D7A0(uint64_t a1, sqlite3_stmt *a2)
{
  if (*(_BYTE *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8LL);
    int v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    sqlite3_bind_text( a2, v5, (const char *)[*(id *)(a1 + 40) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }

  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      BOOL v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      unsigned int v8 = (void *)_DateForSQLValue(v7);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 dateByAddingTimeInterval:(double)(uint64_t)-*(void *)(a1 + 88)]);

      id v10 = *(void **)(a1 + 48);
      if (*(_BYTE *)(a1 + 105)) {
        uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 closestStartOfYearFromDate:v9]);
      }
      else {
        uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 closestStartOfMonthFromDate:v9]);
      }
      __int128 v12 = (void *)v11;

      unsigned int v13 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if ([v12 compare:*(void *)(a1 + 56)] == (id)1
        && [v12 compare:*(void *)(a1 + 64)] == (id)-1)
      {
        id v14 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionGroup);
        -[PKPaymentTransactionGroup setStartDate:](v14, "setStartDate:", v12);
        if (*(_BYTE *)(a1 + 105))
        {
          uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) nextStartOfYearFromDate:v12]);
        }

        else
        {
          uint64_t Month = PKStartOfNextMonth(v12);
          uint64_t v15 = objc_claimAutoreleasedReturnValue(Month);
        }

        __int128 v17 = (void *)v15;
        -[PKPaymentTransactionGroup setEndDate:](v14, "setEndDate:", v15);

        -[PKPaymentTransactionGroup setTransactionCount:]( v14,  "setTransactionCount:",  -[NSData integerValue](v13, "integerValue"));
        -[PKPaymentTransactionGroup setType:](v14, "setType:", *(void *)(a1 + 96));
        [*(id *)(a1 + 72) setObject:v14 forKey:v12];
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_10012D980(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v6 = (void *)_DateForSQLValue(v5);
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dateByAddingTimeInterval:(double)(uint64_t)-*(void *)(a1 + 72)]);

      unsigned int v8 = *(void **)(a1 + 32);
      if (*(_BYTE *)(a1 + 88)) {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 closestStartOfYearFromDate:v7]);
      }
      else {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 closestStartOfMonthFromDate:v7]);
      }
      id v10 = (void *)v9;

      uint64_t v11 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if ([v10 compare:*(void *)(a1 + 40)] == (id)1
        && [v10 compare:*(void *)(a1 + 48)] == (id)-1)
      {
        __int128 v12 = (PKPaymentTransactionGroup *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:v10]);
        if (v12)
        {
          unsigned int v13 = v12;
          -[PKPaymentTransactionGroup setTransactionCount:]( v12,  "setTransactionCount:",  (char *)-[PKPaymentTransactionGroup transactionCount](v12, "transactionCount")
          + (void)-[NSData integerValue](v11, "integerValue"));
        }

        else
        {
          unsigned int v13 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionGroup);
          -[PKPaymentTransactionGroup setStartDate:](v13, "setStartDate:", v10);
          if (*(_BYTE *)(a1 + 88))
          {
            uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nextStartOfYearFromDate:v10]);
          }

          else
          {
            uint64_t Month = PKStartOfNextMonth(v10);
            uint64_t v14 = objc_claimAutoreleasedReturnValue(Month);
          }

          uint64_t v16 = (void *)v14;
          -[PKPaymentTransactionGroup setEndDate:](v13, "setEndDate:", v14);

          -[PKPaymentTransactionGroup setTransactionCount:]( v13,  "setTransactionCount:",  -[NSData integerValue](v11, "integerValue"));
          -[PKPaymentTransactionGroup setType:](v13, "setType:", *(void *)(a1 + 80));
          [*(id *)(a1 + 56) setObject:v13 forKey:v10];
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_10012DB50(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      int v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v6 = (void *)_DateForSQLValue(v5);
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dateByAddingTimeInterval:(double)(uint64_t)-*(void *)(a1 + 72)]);

      unsigned int v8 = *(void **)(a1 + 48);
      if (*(_BYTE *)(a1 + 80)) {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 closestStartOfYearFromDate:v7]);
      }
      else {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 closestStartOfMonthFromDate:v7]);
      }
      id v10 = (void *)v9;

      uint64_t v11 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:v10]);
      if (v12) {
        BOOL v13 = v11 == 0LL;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v14 = PKCurrencyStorageNumberToCurrencyDecimal(v11);
        uint64_t v15 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(v14);
        uint64_t v16 = PKCurrencyAmountCreate(v15, *(NSString **)(a1 + 40), 0LL);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        [v12 setTotalAmount:v17];
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

int64_t sub_10012DD74(id a1, PKPaymentTransactionGroup *a2, PKPaymentTransactionGroup *a3)
{
  uint64_t v4 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransactionGroup startDate](a3, "startDate"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransactionGroup startDate](v4, "startDate"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10012EA70(id *a1)
{
  uint64_t v2 = a1 + 9;
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10012EB7C;
  v4[3] = &unk_100645240;
  objc_copyWeak(&v10, v2);
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  id v9 = a1[8];
  [WeakRetained performTransactionWithBlock:v4];

  objc_destroyWeak(&v10);
}

void sub_10012EB68(_Unwind_Exception *a1)
{
}

BOOL sub_10012EB7C(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  if (WeakRetained)
  {
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([a1[4] merchant]);
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    uint64_t v39 = a1;
    id obj = a1[5];
    id v3 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v48;
      uint64_t v40 = *(void *)v48;
      do
      {
        id v6 = 0LL;
        id v41 = v4;
        do
        {
          if (*(void *)v48 != v5) {
            objc_enumerationMutation(obj);
          }
          id v7 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)v6);
          id v8 = objc_autoreleasePoolPush();
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 statementIdentifier]);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 statementDate]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
          unsigned int v12 = [WeakRetained hasTransactionWithTransactionIdentifier:v11];
          if (v12) {
            BOOL v13 = v9 == 0LL;
          }
          else {
            BOOL v13 = 0;
          }
          if (v13)
          {
            [WeakRetained deletePaymentTransactionWithIdentifier:v11];
          }

          else if (v9)
          {
            unsigned int v14 = v12;
            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 originalAmountDue]);
            uint64_t v16 = v15;
            if (v15) {
              id v17 = v15;
            }
            else {
              id v17 = (id)objc_claimAutoreleasedReturnValue([v7 amountDue]);
            }
            char v43 = v17;

            if (v10)
            {
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
              unsigned __int8 v19 = [v43 isEqualToNumber:v18];

              if ((v19 & 1) == 0)
              {
                if (v14
                  && (id v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained paymentTransactionForIdentifier:v11])) != 0)
                {
                  id v21 = v20;
                  uint64_t v38 = v21;
                }

                else
                {
                  id v21 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransaction);
                  uint64_t v38 = 0LL;
                }

                -[PKPaymentTransaction setTransactionDate:](v21, "setTransactionDate:", v10);
                -[PKPaymentTransaction setTransactionStatus:](v21, "setTransactionStatus:", 1LL);
                -[PKPaymentTransaction setTransactionSource:](v21, "setTransactionSource:", 8LL);
                -[PKPaymentTransaction setTransactionType:](v21, "setTransactionType:", 13LL);
                -[PKPaymentTransaction setIdentifier:](v21, "setIdentifier:", v11);
                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v39[4] identifier]);
                -[PKPaymentTransaction setReferenceIdentifier:](v21, "setReferenceIdentifier:", v22);

                -[PKPaymentTransaction setAmount:](v21, "setAmount:", v43);
                __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v7 currencyCode]);
                -[PKPaymentTransaction setCurrencyCode:](v21, "setCurrencyCode:", v23);

                -[PKPaymentTransaction setAccountIdentifier:](v21, "setAccountIdentifier:", v39[6]);
                -[PKPaymentTransaction setAccountType:](v21, "setAccountType:", 2LL);
                uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v39[4] accountUserAltDSID]);
                -[PKPaymentTransaction setAltDSID:](v21, "setAltDSID:", v24);

                if (v37)
                {
                  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction merchant](v21, "merchant"));

                  if (!v25)
                  {
                    uint64_t v26 = objc_alloc_init(&OBJC_CLASS___PKMerchant);
                    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v37 name]);
                    -[PKMerchant setName:](v26, "setName:", v27);

                    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v37 identifier]);
                    -[PKMerchant setMerchantIdentifier:](v26, "setMerchantIdentifier:", v28);

                    -[PKMerchant setIndustryCode:](v26, "setIndustryCode:", [v37 categoryCode]);
                    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v37 city]);
                    -[PKMerchant setCity:](v26, "setCity:", v29);

                    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v37 state]);
                    -[PKMerchant setState:](v26, "setState:", v30);

                    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v37 postalCode]);
                    -[PKMerchant setZip:](v26, "setZip:", v31);

                    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v37 country]);
                    -[PKMerchant setRawCountry:](v26, "setRawCountry:", v32);

                    -[PKPaymentTransaction setMerchant:](v21, "setMerchant:", v26);
                  }
                }

                uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( [WeakRetained _insertOrUpdatePaymentTransaction:v21 transactionSourceIdentifier:v39[7] transactionArchive:0 origi nDeviceID:0 insertionMode:0 performTruncation:0 insertedTransaction:0]);
                if (v33 && v39[8])
                {
                  id v34 = PDUtilityQueue();
                  __int128 v35 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v34);
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472LL;
                  block[2] = sub_10012F07C;
                  block[3] = &unk_1006396B0;
                  id v46 = v39[8];
                  id v45 = v33;
                  dispatch_async(v35, block);
                }
              }
            }

            uint64_t v5 = v40;
            id v4 = v41;
          }

          objc_autoreleasePoolPop(v8);
          id v6 = (char *)v6 + 1;
        }

        while (v4 != v6);
        id v4 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
      }

      while (v4);
    }
  }

  return WeakRetained != 0LL;
}

uint64_t sub_10012F07C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10012F828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10012F840(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[PeerPaymentAccount anyInDatabase:]( &OBJC_CLASS___PeerPaymentAccount,  "anyInDatabase:",  *(void *)(*(void *)(a1 + 32) + 8LL)));
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing peer payment account from database",  v9,  2u);
    }

    uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 peerPaymentAccount]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [*(id *)(a1 + 32) deletePeerPaymentPendingRequestsForPeerPaymentAccount];
    [v2 deleteFromDatabase];
  }

  return 1LL;
}

void sub_10012FBC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10012FBDC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[1];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 dbPeerPaymentAccount]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[PeerPaymentPreferences anyInDatabase:forPeerPaymentAccount:]( &OBJC_CLASS___PeerPaymentPreferences,  "anyInDatabase:forPeerPaymentAccount:",  v3,  v4));

  if (v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Removing peer payment preferences from database",  v12,  2u);
    }

    uint64_t v8 = objc_claimAutoreleasedReturnValue([v5 peerPaymentPreferences]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    [v5 deleteFromDatabase];
  }

  return 1LL;
}

uint64_t sub_10012FDB8(void *a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      uint64_t v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[NSData longLongValue](v5, "longLongValue");

      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      uint64_t v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      id v9 = -[NSData longLongValue](v8, "longLongValue");

      if (!v7 && v9 == (id)a1[6])
      {
        id v10 = (void *)a1[5];
        uint64_t v11 = *(void *)(a1[4] + 8LL);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        v12[2] = sub_10012FEE0;
        v12[3] = &unk_100645290;
        id v13 = v10;
        id v14 = v6;
        sub_1002CCDBC( v11,  @"UPDATE payment_transaction SET account_type = ?, account_identifier = ? WHERE pid = ?",  v12);
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

uint64_t sub_10012FEE0(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

void sub_100130E20(_Unwind_Exception *a1)
{
}

id sub_100130E4C(uint64_t a1, void *a2)
{
  id result = [a2 count];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

id sub_100130E7C(uint64_t a1, void *a2)
{
  id result = [a2 count];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1001310B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1001310E0(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100131114(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v6 = *a4;
  else {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1001314B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_1001314F0(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100131524(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v6 = *a4;
  else {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100131D4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100131D64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100131DF8;
  v9[3] = &unk_10063D148;
  id v10 = v3;
  id v8 = v3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 objectsPassingTest:v9]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id sub_100131DF8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueID]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_100131E3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  [WeakRetained handleDatabaseIntegrityProblem];
}

void sub_100134358(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6 = a2;
  id v5 =  objc_msgSend( *(id *)(a1 + 40),  "insertOrUpdatePaymentTransaction:withPassUniqueIdentifier:paymentApplication:insertionMode:performTruncation: insertedTransaction:",  v6,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  0,  (char *)objc_msgSend(*(id *)(a1 + 32), "count") - 1 == a3,  0);
}

id sub_1001343C0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) insertOrUpdateAccountEvent:a2];
}

void sub_1001343CC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionSourceIdentifier]);
  id v5 =  [v3 insertOrUpdatePaymentTransaction:v6 withTransactionSourceIdentifier:v4 insertionMode:0 performTruncation:0 insertedTransaction:0];
}

id sub_100134434(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) insertOrUpdateAccountEvent:a2];
}

void sub_100134870(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained applePayContainer]);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10013496C;
  v16[3] = &unk_1006453A8;
  id v12 = *(id *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 40);
  id v17 = v12;
  uint64_t v18 = v13;
  id v19 = v6;
  id v20 = v7;
  id v14 = v6;
  id v15 = v7;
  [v9 canSyncTransactionToCloudKit:v10 forTransactionSourceIdentifier:v11 completion:v16];
}

uint64_t sub_10013496C(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1001349A0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id obj = *(id *)(a1 + 32);
    id v19 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v19)
    {
      uint64_t v18 = *(void *)v21;
      uint64_t v17 = PKCloudStoreOperationGroupUserActionImplicit;
      do
      {
        for (id i = 0LL; i != v19; id i = (char *)i + 1)
        {
          if (*(void *)v21 != v18) {
            objc_enumerationMutation(obj);
          }
          id v4 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
          id v5 = *(void **)(a1 + 40);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceIdentifier]);
          id v7 = (void *)objc_claimAutoreleasedReturnValue( [v5 transactionArchiveForTransactionWithServiceIdentifier:v6 transactionSourceIdentifier:*(void *)(a1 + 48)]);

          id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 archiveLocationsWithType:0 isArchived:0]);
          id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_setByApplyingBlock:", &stru_1006453C8));
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained applePayContainer]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudStoreSpecificKeysForItem:v4]);

          uint64_t v13 = -[PKCloudStoreUploadItemConfiguration initWithItem:recordSpecificKeys:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:recordSpecificKeys:",  v4,  v12);
          -[PKCloudStoreUploadItemConfiguration setCloudStoreZones:](v13, "setCloudStoreZones:", v9);
          -[NSMutableSet addObject:](v2, "addObject:", v13);
          id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 applePayContainer]);
          [v15 updateCloudStoreWithLocalItemsWithConfigurations:v2 groupName:v17 groupNameSuffix:0 qualityOfService:17 completion:0];
        }

        id v19 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v19);
    }
  }

id sub_100134BE8(id a1, PKPaymentTransactionArchiveLocation *a2)
{
  return -[PKPaymentTransactionArchiveLocation cloudStoreZone](a2, "cloudStoreZone");
}

PKAccountUser *__cdecl sub_1001358C0(id a1, AccountUser *a2)
{
  return (PKAccountUser *)-[AccountUser accountUser](a2, "accountUser");
}

LABEL_41:
          uint64_t v26 = 0LL;
          goto LABEL_44;
        }

      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);
      id v15 = v79;
LABEL_42:

      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( [*((id *)a1[5] + 1) scheduledNotificationActivitiesForPassUniqueIdentifier:v52 ofType:21]);
      v62 = 0u;
      uint64_t v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      uint64_t v30 = [v29 countByEnumeratingWithState:&v60 objects:v81 count:16];
      if (v30)
      {
        uint64_t v31 = *(void *)v61;
        do
        {
          for (id i = 0LL; i != v30; id i = (char *)i + 1)
          {
            if (*(void *)v61 != v31) {
              objc_enumerationMutation(v29);
            }
            uint64_t v33 = *(void *)(*((void *)&v60 + 1) + 8LL * (void)i);
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v33;
              _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing 'Upcoming Scheduled Payment' scheduled activity for notification: %@",  (uint8_t *)&buf,  0xCu);
            }

            [*((id *)a1[5] + 1) removeUserNotification:v33];
          }

          uint64_t v30 = [v29 countByEnumeratingWithState:&v60 objects:v81 count:16];
        }

        while (v30);
      }

      id v34 = (void *)objc_claimAutoreleasedReturnValue( [*((id *)a1[5] + 1) scheduledNotificationActivitiesForPassUniqueIdentifier:v52 ofType:22]);

      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      __int128 v35 = v34;
      uint64_t v36 = [v35 countByEnumeratingWithState:&v56 objects:v80 count:16];
      if (v36)
      {
        uint64_t v37 = *(void *)v57;
        do
        {
          for (j = 0LL; j != v36; j = (char *)j + 1)
          {
            if (*(void *)v57 != v37) {
              objc_enumerationMutation(v35);
            }
            uint64_t v39 = *(void *)(*((void *)&v56 + 1) + 8LL * (void)j);
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v39;
              _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing 'Payment Due' scheduled activity for notification: %@",  (uint8_t *)&buf,  0xCu);
            }

            [*((id *)a1[5] + 1) removeUserNotification:v39];
          }

          uint64_t v36 = [v35 countByEnumeratingWithState:&v56 objects:v80 count:16];
        }

        while (v36);
      }

      uint64_t v40 = a1[5];
      id v41 = (void *)v40[1];
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472LL;
      v53[2] = sub_100268088;
      v53[3] = &unk_100650318;
      __int16 v54 = v47;
      id v55 = v40;
      uint64_t v42 = v47;
      [v41 userNotificationsForPassUniqueIdentifier:v52 ofType:22 completion:v53];

      id v4 = (os_log_s *)v51;
      goto LABEL_61;
    }

    if (v49)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v50 paymentDate]);
      if ([v49 compare:v9] == (id)-1)
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v50 currencyAmount]);
        uint64_t v11 = v10 == 0LL;

        if (v11)
        {
          id v12 = v4;
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v50;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Skipping 'Upcoming Scheduled Payment' notifications for payment without currencyAmount beyond paymentDueDate: %@",  (uint8_t *)&buf,  0xCu);
            id v12 = v4;
          }

          goto LABEL_14;
        }
      }

      else
      {
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Scheduling 'Upcoming Scheduled Payment' notification for payment: %@",  (uint8_t *)&buf,  0xCu);
    }

    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1[5] _upcomingScheduledPaymentNotificationsForPayment:v50 account:a1[4]]);
    -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v12);
LABEL_14:

    goto LABEL_15;
  }

  if (v5)
  {
    LOWORD(buf) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Skipping Payment Reminder and Payment Due Scheduled Notifications - Pass doesn't exist on device.",  (uint8_t *)&buf,  2u);
  }

          LOBYTE(v15) = 1;
          uint64_t v30 = v8;
LABEL_59:

LABEL_60:
          goto LABEL_61;
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v36) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "IDSService: equal lhs destination identifier with rhs device",  (uint8_t *)&v36,  2u);
      }

      LOBYTE(v15) = 1;
      __int128 v20 = v8;
      goto LABEL_60;
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "IDSService: equal device identifiers",  (uint8_t *)&v36,  2u);
  }

  LOBYTE(v15) = 1;
  uint64_t v16 = v8;
LABEL_61:

  return v15;
}

BOOL sub_10013722C(id a1, PKAccountUser *a2)
{
  return -[PKAccountUser isCurrentUser](a2, "isCurrentUser");
}

void sub_100137234(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didRecomputeCategoryVisualizationMagnitudes:*(void *)(a1 + 48) withStyle:*(void *)(a1 + 56)];
}

LABEL_78:
                    v69 = (void *)objc_claimAutoreleasedReturnValue([v207 redemptionEvent]);
                    goto LABEL_63;
                  }

    uint64_t v13 = PKLocalizedTransitString(&v10->isa);
    id v12 = objc_claimAutoreleasedReturnValue(v13);
LABEL_79:
    id v14 = (void *)v12;
    if (v12)
    {
      id v15 = PKStringWithValidatedFormat(v12, @"%@");
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v15);
    }

    else
    {
      id v8 = 0LL;
    }
  }

LABEL_77:
                  v207 = (id)objc_claimAutoreleasedReturnValue([v66 anyObject]);
                  if (v69) {
                    goto LABEL_63;
                  }
                  goto LABEL_78;
                }

                continue;
              }

              goto LABEL_43;
            }

            break;
          }

          goto LABEL_51;
        }

  __break(1u);
  return result;
}

LABEL_74:
        v56 = (char *)v56 + 1;
      }

      while (v56 != v194);
      __int16 v112 = [obj countByEnumeratingWithState:&v229 objects:v244 count:16];
      v194 = v112;
    }

    while (v112);
  }

  v113 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent accountEventsForAccountIdentifier:altDSID:types:startDate:endDate:orderedByDate:limit:inDatabase:]( &OBJC_CLASS___AccountEvent,  "accountEventsForAccountIdentifier:altDSID:types:startDate:endDate:orderedByDate:limit:inDatabase:",  v169,  0LL,  &off_100690FC8,  v181,  v180,  1LL,  0LL,  v185->_database));
  v217 = 0u;
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v172 = v113;
  v184 = [v113 countByEnumeratingWithState:&v217 objects:v241 count:16];
  if (v184)
  {
    v114 = *(void *)v218;
    v171 = *(void *)v218;
    do
    {
      v115 = 0LL;
      do
      {
        if (*(void *)v218 != v114) {
          objc_enumerationMutation(v113);
        }
        v187 = v115;
        v116 = *(void **)(*((void *)&v217 + 1) + 8 * v115);
        v117 = (void *)objc_claimAutoreleasedReturnValue([v116 items]);
        v118 = (void *)objc_claimAutoreleasedReturnValue([v117 anyObject]);

        v198 = v116;
        v119 = (void *)objc_claimAutoreleasedReturnValue([v116 identifier]);
        LOBYTE(v116) = -[NSMutableSet containsObject:](v53, "containsObject:", v119);

        if ((v116 & 1) == 0)
        {
          v120 = (void *)objc_claimAutoreleasedReturnValue([v118 rewards]);
          v121 = (void *)objc_claimAutoreleasedReturnValue([v120 rewardsItems]);

          if (v118 && [v121 count] && objc_msgSend(v118, "type") == v199)
          {
            v176 = v121;
            v122 = (void *)objc_claimAutoreleasedReturnValue([v198 date]);
            v173 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager _startOfTimeBlockForUnit:inCalendar:fromDate:forward:]( v185,  "_startOfTimeBlockForUnit:inCalendar:fromDate:forward:",  a7,  v175,  v122,  0LL));
            v123 = (PKPaymentTransactionGroup *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v177, "objectForKey:"));
            if (!v123)
            {
              v123 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionGroup);
              -[PKPaymentTransactionGroup setStartDate:](v123, "setStartDate:", v173);
              -[PKPaymentTransactionGroup setEndDate:](v123, "setEndDate:", v122);
              -[PKPaymentTransactionGroup setType:](v123, "setType:", 5LL);
              v124 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
              v125 = (void *)objc_claimAutoreleasedReturnValue([v118 currencyAmount]);
              v126 = (NSString *)objc_claimAutoreleasedReturnValue([v125 currency]);
              v127 = PKCurrencyAmountCreate(v124, v126, 0LL);
              v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
              -[PKPaymentTransactionGroup setTotalAmount:](v123, "setTotalAmount:", v128);

              -[PKPaymentTransactionGroup setTransactionCount:](v123, "setTransactionCount:", 0LL);
              -[PKPaymentTransactionGroup setTransactions:](v123, "setTransactions:", &__NSArray0__struct);
              -[NSMutableDictionary setObject:forKey:](v177, "setObject:forKey:", v123, v173);
            }

            v129 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransactionGroup endDate](v123, "endDate"));
            v130 = [v122 compare:v129];

            if (v130 == (id)1) {
              -[PKPaymentTransactionGroup setEndDate:](v123, "setEndDate:", v122);
            }
            v215 = 0u;
            v216 = 0u;
            v213 = 0u;
            v214 = 0u;
            v190 = v176;
            v205 = [v190 countByEnumeratingWithState:&v213 objects:v240 count:16];
            if (v205)
            {
              v202 = *(void *)v214;
              v193 = v123;
              v195 = v118;
              do
              {
                for (j = 0LL; j != v205; j = (char *)j + 1)
                {
                  if (*(void *)v214 != v202) {
                    objc_enumerationMutation(v190);
                  }
                  v132 = *(void **)(*((void *)&v213 + 1) + 8LL * (void)j);
                  v133 = (void *)objc_claimAutoreleasedReturnValue([v132 currencyAmount]);
                  if (v133)
                  {
                    v134 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransaction);
                    -[PKPaymentTransaction setTransactionType:](v134, "setTransactionType:", 12LL);
                    -[PKPaymentTransaction setTransactionSource:](v134, "setTransactionSource:", 4LL);
                    -[PKPaymentTransaction setRedemptionType:](v134, "setRedemptionType:", v199);
                    -[PKPaymentTransaction setTransactionDate:](v134, "setTransactionDate:", v122);
                    v135 = (void *)objc_claimAutoreleasedReturnValue([v133 amount]);
                    -[PKPaymentTransaction setAmount:](v134, "setAmount:", v135);

                    v136 = (void *)objc_claimAutoreleasedReturnValue([v133 currency]);
                    -[PKPaymentTransaction setCurrencyCode:](v134, "setCurrencyCode:", v136);

                    -[PKPaymentTransaction setTransactionStatus:](v134, "setTransactionStatus:", 1LL);
                    v137 = (void *)objc_claimAutoreleasedReturnValue([v198 identifier]);
                    -[PKPaymentTransaction setIdentifier:](v134, "setIdentifier:", v137);

                    v138 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction amount](v134, "amount"));
                    -[PKPaymentTransaction setRewardsTotalAmount:](v134, "setRewardsTotalAmount:", v138);

                    v139 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction currencyCode](v134, "currencyCode"));
                    -[PKPaymentTransaction setRewardsTotalCurrencyCode:](v134, "setRewardsTotalCurrencyCode:", v139);

                    v140 = objc_alloc(&OBJC_CLASS___PKPaymentTransactionRewards);
                    v239 = v132;
                    v141 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v239,  1LL));
                    v208 = [v140 initWithRewardsItems:v141];

                    -[PKPaymentTransaction setRewards:](v134, "setRewards:", v208);
                    v142 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransactionGroup transactions](v123, "transactions"));
                    v143 = (void *)objc_claimAutoreleasedReturnValue([v142 arrayByAddingObject:v134]);
                    -[PKPaymentTransactionGroup setTransactions:](v123, "setTransactions:", v143);

                    v144 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransactionGroup totalAmount](v123, "totalAmount"));
                    v145 = (void *)objc_claimAutoreleasedReturnValue([v144 amount]);
                    v146 = v122;
                    v147 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction amount](v134, "amount"));
                    v148 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue([v145 decimalNumberByAdding:v147]);
                    v149 = (NSString *)objc_claimAutoreleasedReturnValue([v144 currency]);
                    v150 = PKCurrencyAmountCreate(v148, v149, 0LL);
                    v151 = v133;
                    v152 = (void *)objc_claimAutoreleasedReturnValue(v150);

                    v122 = v146;
                    v123 = v193;

                    v118 = v195;
                    -[PKPaymentTransactionGroup setTotalAmount:](v193, "setTotalAmount:", v152);

                    v133 = v151;
                  }

                  else
                  {
                    v153 = PKLogFacilityTypeGetObject(6LL);
                    v134 = (PKPaymentTransaction *)objc_claimAutoreleasedReturnValue(v153);
                    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "Rewards added doesn't have a valid amount",  buf,  2u);
                    }
                  }
                }

                v205 = [v190 countByEnumeratingWithState:&v213 objects:v240 count:16];
              }

              while (v205);
            }

            uint64_t v53 = v179;
            v114 = v171;
            v113 = v172;
            v121 = v176;
          }
        }

        v115 = v187 + 1;
      }

      while ((id)(v187 + 1) != v184);
      v184 = [v113 countByEnumeratingWithState:&v217 objects:v241 count:16];
    }

    while (v184);
  }

  v211 = 0u;
  v212 = 0u;
  v209 = 0u;
  v210 = 0u;
  v154 = v177;
  v155 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v154,  "countByEnumeratingWithState:objects:count:",  &v209,  v238,  16LL);
  if (v155)
  {
    v156 = v155;
    v157 = *(void *)v210;
    do
    {
      for (k = 0LL; k != v156; k = (char *)k + 1)
      {
        if (*(void *)v210 != v157) {
          objc_enumerationMutation(v154);
        }
        v159 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v154,  "objectForKey:",  *(void *)(*((void *)&v209 + 1) + 8LL * (void)k)));
        v160 = (void *)objc_claimAutoreleasedReturnValue([v159 transactions]);
        v161 = (void *)objc_claimAutoreleasedReturnValue([v160 sortedArrayUsingComparator:&stru_1006454F0]);

        [v159 setTransactions:v161];
        v162 = (void *)objc_claimAutoreleasedReturnValue([v159 transactions]);
        objc_msgSend(v159, "setTransactionCount:", objc_msgSend(v162, "count"));
      }

      v156 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v154,  "countByEnumeratingWithState:objects:count:",  &v209,  v238,  16LL);
    }

    while (v156);
  }

  v163 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v154, "allValues"));
  v164 = (void *)objc_claimAutoreleasedReturnValue([v163 sortedArrayUsingComparator:&stru_100645510]);

  return v164;
}

  return a1;
}

NSString *__cdecl sub_100138708(id a1, PKPaymentTransaction *a2)
{
  return (NSString *)-[PKPaymentTransaction serviceIdentifier](a2, "serviceIdentifier");
}

int64_t sub_100138710(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 transactionDate]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 transactionDate]);

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

int64_t sub_10013877C(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 startDate]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 startDate]);

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_10013A06C(id a1, PayLaterFinancingPlan *a2)
{
  return -[PayLaterFinancingPlan financingPlan](a2, "financingPlan");
}

uint64_t sub_10013AE50(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10013AF10;
  v6[3] = &unk_100645578;
  id v3 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v2;
  id v8 = *(id *)(a1 + 48);
  id v4 = v2;
  [v3 enumerateObjectsUsingBlock:v6];
  +[DiscoveryItem deleteItemsNotIncludingIdentifiers:inDatabase:]( &OBJC_CLASS___DiscoveryItem,  "deleteItemsNotIncludingIdentifiers:inDatabase:",  v4,  *(void *)(*(void *)(a1 + 40) + 8LL));

  return 1LL;
}

void sub_10013AF10(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1[4] + 8LL);
  id v6 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[DiscoveryItem insertOrUpdateItem:itemOrder:inDatabase:]( &OBJC_CLASS___DiscoveryItem,  "insertOrUpdateItem:itemOrder:inDatabase:",  v6,  a3,  v5));
  id v7 = (void *)a1[5];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);

  [v7 addObject:v8];
  id v9 = (void *)a1[6];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 item]);
  [v9 addObject:v10];
}

void sub_10013B0A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013B0C0(uint64_t a1)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        id v8 = *(void **)(a1 + 40);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier", (void)v15));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 discoveryItemWithIdentifier:v9]);

        if (v10)
        {
          objc_msgSend(v7, "setStatus:", objc_msgSend(v10, "status"));
          objc_msgSend(v7, "setViewCount:", objc_msgSend(v10, "viewCount"));
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v4);
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setDiscoveryItems:*(void *)(a1 + 32)]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  return 1LL;
}

void sub_10013B314( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013B32C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", (void)v18));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) discoveryItemWithIdentifier:v9]);
        if (v10)
        {
          id v11 = v10;
          [v10 updateWithDiscoveryItem:v8];
        }

        else
        {
          id v11 = [v8 copy];
          if ([v11 hasTrigger])
          {
            uint64_t v12 = v11;
            uint64_t v13 = 5LL;
          }

          else
          {
            uint64_t v12 = v11;
            uint64_t v13 = 1LL;
          }

          [v12 setStatus:v13];
        }

        -[NSMutableArray addObject:](v2, "addObject:", v11);
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }

  uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) setDiscoveryItems:v2]);
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int128 v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  return 1LL;
}

void sub_10013B5B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013B5C8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoveryItemsWaitingForTrigger]);
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v39 objects:v46 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v40;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v40 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 triggerRuleIdentifier]);
        if (v9)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v9]);
          unsigned int v11 = [v10 BOOLValue];

          uint64_t v12 = objc_claimAutoreleasedReturnValue([v8 identifier]);
          uint64_t v13 = (void *)v12;
          uint64_t v14 = "not triggered";
          if (v11) {
            uint64_t v14 = "triggered";
          }
          -[NSMutableString appendFormat:]( v3,  "appendFormat:",  @"Applying result for trigger rule identifier: %@\nItem with identifier: %@ %s\n",  v9,  v12,  v14);

          if (v11)
          {
            [v8 setStatus:1];
            id v15 = [*(id *)(a1 + 32) updateDiscoveryItem:v8];
          }
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v39 objects:v46 count:16];
    }

    while (v5);
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveryItemsForRelevantDate:"));
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id v17 = [v16 countByEnumeratingWithState:&v35 objects:v45 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v36;
    do
    {
      for (j = 0LL; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v36 != v19) {
          objc_enumerationMutation(v16);
        }
        __int128 v21 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)j);
        if ([v21 status] != (id)5)
        {
          uint64_t v22 = objc_claimAutoreleasedReturnValue([v21 ruleIdentifier]);
          __int128 v23 = (void *)v22;
          if (v22)
          {
            -[NSMutableString appendFormat:]( v3,  "appendFormat:",  @"Applying result for rule identifier: %@\n",  v22);
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v23]);
            id v25 = [v24 BOOLValue];

            [v21 updateForRuleResult:v25];
            id v26 = [*(id *)(a1 + 32) updateDiscoveryItem:v21];
          }
        }
      }

      id v18 = [v16 countByEnumeratingWithState:&v35 objects:v45 count:16];
    }

    while (v18);
  }

  uint64_t v27 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoveryItems]);
  uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v29 = *(void **)(v28 + 40);
  *(void *)(v28 + 40) = v27;

  if (-[NSMutableString length](v3, "length"))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(16LL);
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v44 = v3;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }
  }

  return 1LL;
}

uint64_t sub_10013BADC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[Rule insertOrUpdateRule:inDatabase:]( &OBJC_CLASS___Rule,  "insertOrUpdateRule:inDatabase:",  v8,  *(void *)(*(void *)(a1 + 40) + 8LL),  (void)v14));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        -[NSMutableSet addObject:](v2, "addObject:", v10);

        unsigned int v11 = *(void **)(a1 + 48);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 rule]);
        [v11 addObject:v12];
      }

      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v5);
  }

  +[Rule deleteRulesNotIncludingIdentifiers:inDatabase:]( &OBJC_CLASS___Rule,  "deleteRulesNotIncludingIdentifiers:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 40) + 8LL));
  return 1LL;
}

void sub_10013BE24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013BE3C(void *a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10013BEEC;
  v6[3] = &unk_1006455A0;
  id v3 = (void *)a1[4];
  void v6[4] = a1[5];
  id v7 = v2;
  uint64_t v8 = a1[6];
  id v4 = v2;
  [v3 enumerateObjectsUsingBlock:v6];
  +[DiscoveryEngagementMessage deleteEngagementMessagesNotIncludingIdentifiers:inDatabase:]( &OBJC_CLASS___DiscoveryEngagementMessage,  "deleteEngagementMessagesNotIncludingIdentifiers:inDatabase:",  v4,  *(void *)(a1[5] + 8LL));

  return 1LL;
}

void sub_10013BEEC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1[4] + 8LL);
  id v6 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue( +[DiscoveryEngagementMessage insertOrUpdateEngagementMessage:messageOrder:inDatabase:]( &OBJC_CLASS___DiscoveryEngagementMessage,  "insertOrUpdateEngagementMessage:messageOrder:inDatabase:",  v6,  a3,  v5));
  id v7 = (void *)a1[5];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);

  [v7 addObject:v8];
  id v9 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 engagementMessage]);
  [v9 addObject:v10];
}

void sub_10013C09C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013C0B4(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", (void)v16));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) engagementMessageWithIdentifier:v9]);
        if (v10)
        {
          id v11 = v10;
          [v10 updateWithDiscoveryEngagementMessage:v8];
        }

        else
        {
          id v11 = [v8 copy];
          [v11 setStatus:1];
        }

        -[NSMutableArray addObject:](v2, "addObject:", v11);
      }

      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v5);
  }

  uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updateEngagementMessages:v2]);
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int128 v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  return 1LL;
}

void sub_10013C330( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013C348(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engagementMessages]);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 ruleIdentifier]);
        if (v8)
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v8]);
          id v10 = [v9 BOOLValue];

          [v7 updateForRuleResult:v10];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v4);
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) updateEngagementMessages:v2]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  return 1LL;
}

void sub_10013C6B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013C6C8(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[DiscoveryNotification insertOrUpdateNotification:inDatabase:]( &OBJC_CLASS___DiscoveryNotification,  "insertOrUpdateNotification:inDatabase:",  v8,  *(void *)(*(void *)(a1 + 40) + 8LL),  (void)v14));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        -[NSMutableArray addObject:](v2, "addObject:", v10);

        uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 notification]);
        [v11 addObject:v12];
      }

      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v5);
  }

  +[DiscoveryNotification deleteNotificationsNotIncludingIdentifiers:inDatabase:]( &OBJC_CLASS___DiscoveryNotification,  "deleteNotificationsNotIncludingIdentifiers:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 40) + 8LL));
  return 1LL;
}

void sub_10013C948( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013C960(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", (void)v16));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) discoveryNotificationWithIdentifier:v9]);
        if (v10)
        {
          id v11 = v10;
          [v10 updateWithNotification:v8];
        }

        else
        {
          id v11 = v8;
          [v11 setStatus:1];
        }

        -[NSMutableArray addObject:](v2, "addObject:", v11);
      }

      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v5);
  }

  uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updateDiscoveryNotifications:v2]);
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int128 v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  return 1LL;
}

void sub_10013CBD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013CBF0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoveryNotifications]);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 ruleIdentifier]);
        if (v8)
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v8]);
          id v10 = [v9 BOOLValue];

          [v7 updateForRuleResult:v10];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v4);
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) updateDiscoveryNotifications:v2]);
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  return 1LL;
}

void sub_10013D174( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013D18C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = a1[6];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 64) secureElementIdentifiers]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withApplicationIdentifier:subcredentialIdentifier:secureElementIdentifiers:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withApplicationIdentifier:subcredentialIdentifier:secureElementIdentifiers:",  v4,  v3,  v5,  v6));

  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( Pass,  "anyInDatabase:withPersistentID:",  *(void *)(a1[4] + 8),  [v7 passPID]));
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 uniqueID]);
    uint64_t v10 = *(void *)(a1[7] + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

  return 1LL;
}

void sub_10013D338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10013D350(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  a1[4],  *(void *)(a1[5] + 8LL)));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPersistentID:]( PaymentApplication,  "anyInDatabase:withPersistentID:",  *(void *)(a1[5] + 8),  [v2 paymentApplicationPID]));
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( Pass,  "anyInDatabase:withPersistentID:",  *(void *)(a1[5] + 8),  [v4 passPID]));
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 uniqueID]);
      uint64_t v8 = *(void *)(a1[6] + 8LL);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
    }
  }

  BOOL v10 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL;

  return v10;
}

uint64_t sub_10013D4FC(uint64_t a1)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialsWithPairedReaderIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialsWithPairedReaderIdentifier:inDatabase:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 40) + 8LL)));
  id v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v16;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPersistentID:]( PaymentApplication,  "anyInDatabase:withPersistentID:",  *(void *)(*(void *)(a1 + 40) + 8),  [*(id *)(*((void *)&v15 + 1) + 8 * (void)v5) paymentApplicationPID]));
        uint64_t v7 = v6;
        if (v6)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( Pass,  "anyInDatabase:withPersistentID:",  *(void *)(*(void *)(a1 + 40) + 8),  [v6 passPID]));
          uint64_t v9 = *(void **)(a1 + 40);
          BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v8 pass]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _registeredPass:v10]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 secureElementPass]);

          if (v12) {
            [*(id *)(a1 + 48) addObject:v12];
          }
        }

        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v3);
  }

  return 1LL;
}

void sub_10013D7E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013D7FC(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PassShare passShareForCredentialShareIdentifier:inDatabase:]( &OBJC_CLASS___PassShare,  "passShareForCredentialShareIdentifier:inDatabase:",  a1[4],  *(void *)(a1[5] + 8LL)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 subcredentialIdentifier]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  v3,  *(void *)(a1[5] + 8LL)));
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 appletSubcredential]);
    uint64_t v6 = *(void *)(a1[6] + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  return 1LL;
}

void sub_10013D954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013D96C(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier", (void)v17));
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  v8,  *(void *)(*(void *)(a1 + 40) + 8LL)));

        if (v9)
        {
          BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withPersistentID:]( PaymentApplication,  "anyInDatabase:withPersistentID:",  *(void *)(*(void *)(a1 + 40) + 8),  [v9 paymentApplicationPID]));
          if (v10)
          {
            id v11 =  +[AppletSubcredential insertOrUpdateAppletSubcredential:withPaymentApplication:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "insertOrUpdateAppletSubcredential:withPaymentApplication:inDatabase:",  v7,  v10,  *(void *)(*(void *)(a1 + 40) + 8LL));
            uint64_t v12 = *(void **)(a1 + 40);
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 paymentApplication]);
            __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 passUniqueIdentifierWithPaymentApplication:v13]);

            __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 40) + 8LL),  v14));
            [v15 updateWithLastModifiedSource:4];
          }

          else
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
          }
        }

        else
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v4);
  }

  return 1LL;
}

uint64_t sub_10013DC34(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) secureElementIdentifiers]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withApplicationIdentifier:secureElementIdentifiers:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withApplicationIdentifier:secureElementIdentifiers:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(a1 + 40),  v2));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AppletSubcredential appletSubcredentialWithIdentifier:inDatabase:]( &OBJC_CLASS___AppletSubcredential,  "appletSubcredentialWithIdentifier:inDatabase:",  v4,  *(void *)(*(void *)(a1 + 32) + 8LL)));
  id v6 =  +[AppletSubcredentialRangingSuspensionReasons insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:forPaymentApplication:withReasons:inDatabase:]( &OBJC_CLASS___AppletSubcredentialRangingSuspensionReasons,  "insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:forPaymentApplication:withReasons:inDatabase:",  v5,  v3,  *(void *)(a1 + 56),  *(void *)(*(void *)(a1 + 32) + 8LL));

  return 1LL;
}

void sub_10013DF18(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 didAddCredentialInvitation:*(void *)(a1 + 40)];
}

uint64_t sub_10013E394(uint64_t a1)
{
  return 1LL;
}

NSCopying *__cdecl sub_10013FF34(id a1, PDPassAuxiliaryRegistrationRequirementStatus *a2)
{
  return (NSCopying *)-[PDPassAuxiliaryRegistrationRequirementStatus requirementIdentifier](a2, "requirementIdentifier");
}

uint64_t sub_10013FF3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (v6)
  {
    objc_msgSend(v3, "setRegistrationBackoffCounter:", objc_msgSend(v6, "registrationBackoffCounter"));
    uint64_t v7 = [v6 isRegistered] ^ 1;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

uint64_t sub_1001400DC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 requirementIdentifier]);
  uint64_t v4 = PKEqualObjects(v3, *(void *)(a1 + 32));

  return v4;
}

void sub_100140348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140360(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[BarcodeCredential insertBarcodeCredentials:forPaymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "insertBarcodeCredentials:forPaymentApplication:inDatabase:",  *(void *)(a1 + 48),  v2,  *(void *)(*(void *)(a1 + 32) + 8LL)));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v3 != 0LL;
  }

  uint64_t v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v4;
}

void sub_100140498( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001404B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = +[BarcodeCredential numberOfValidCredentialsForPaymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "numberOfValidCredentialsForPaymentApplication:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  }

  return 1LL;
}

void sub_1001405F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140610(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2) {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = +[BarcodeCredential numberOfBarcodeCredentialsDisplayedAfterDate:paymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "numberOfBarcodeCredentialsDisplayedAfterDate:payment Application:inDatabase:",  *(void *)(a1 + 48),  v2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  }

  return 1LL;
}

void sub_100140750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140768(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[BarcodeCredential firstValidBarcodeCredentialForPaymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "firstValidBarcodeCredentialForPaymentApplication:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 32) + 8LL)));
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 barcodeCredential]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  return 1LL;
}

void sub_1001408C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001408E0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[BarcodeCredential lastUsedBarcodeIdentifierForPaymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "lastUsedBarcodeIdentifierForPaymentApplication:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 32) + 8LL)));
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  return 1LL;
}

void sub_100140A04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140A1C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = +[BarcodeCredential removeAllBarcodeCredentialValuesForPaymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "removeAllBarcodeCredentialValuesForPaymentApplication:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  }
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v3;
}

void sub_100140B40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140B58(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  if (v2) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = +[BarcodeCredential removeAllBarcodeCredentialsForPaymentApplication:inDatabase:]( &OBJC_CLASS___BarcodeCredential,  "removeAllBarcodeCredentialsForPaymentApplication:inDatabase:",  v2,  *(void *)(*(void *)(a1 + 32) + 8LL));
  }
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v3;
}

void sub_100140CAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140CC4(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[BarcodeCredential anyInDatabase:withBarcodeIdentifier:]( &OBJC_CLASS___BarcodeCredential,  "anyInDatabase:withBarcodeIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2) {
    *(_BYTE *)(*(void *)(a1[7] + 8) + 24) = [v2 updateWithDisplayTimestamp:a1[6]];
  }
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL);

  return v4;
}

void sub_100140E14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140E2C(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[7] + 8) + 24) = [v4 updateWithPaymentPINData:a1[6]];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL);

  return v5;
}

void sub_100140FB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100140FCC(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[7] + 8) + 24) = [v4 updateWithTransactionSignatureData:a1[6]];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL);

  return v5;
}

void sub_100141154( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10014116C(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[7] + 8) + 24) = [v4 updateWithUserConfirmationData:a1[6]];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL);

  return v5;
}

void sub_1001412CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001412E4(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [v4 addProcessedAuthenticationMechanisms:a1[7]];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);

  return v5;
}

void sub_100141444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10014145C(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [v4 addDataCollectedAuthenticationMechanisms:a1[7]];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);

  return v5;
}

void sub_1001415B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001415CC(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [v4 updateAuthenticationComplete:1];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);

  return v5;
}

void sub_100141724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10014173C(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withIdentifier:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:]( PaymentTransactionAuthentication,  "anyInDatabase:withPaymentTransactionPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [v4 reset];
  }

  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);

  return v5;
}

void sub_1001418D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001418F0(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2) {
    *(void *)(*(void *)(a1[6] + 8) + 24) = +[BarcodeFetch backgroundFetchRetryLevelForPassPID:inDatabase:]( BarcodeFetch,  "backgroundFetchRetryLevelForPassPID:inDatabase:",  [v2 persistentID],  *(void *)(a1[4] + 8));
  }

  return 1LL;
}

void sub_100141A5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100141A74(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2) {
    *(_BYTE *)(*(void *)(a1[7] + 8) + 24) = +[BarcodeFetch updateNextBackgroundFetchDate:withBackgroundFetchRetryLevel:forPassPID:inDatabase:]( BarcodeFetch,  "updateNextBackgroundFetchDate:withBackgroundFetchRetryLevel:forPassPID:inDatabase:",  a1[6],  a1[8],  [v2 persistentID],  *(void *)(a1[4] + 8));
  }

  return 1LL;
}

void sub_100141C38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100141C5C(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1[4] + 8LL),  a1[5]));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[BarcodeFetch anyInDatabase:withPassPID:]( BarcodeFetch,  "anyInDatabase:withPassPID:",  *(void *)(a1[4] + 8),  [v2 persistentID]));
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 nextBackgroundFetchDate]);
      uint64_t v7 = *(void *)(a1[6] + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
    }
  }

  return 1LL;
}

void sub_100141DC4(uint64_t a1, void *a2)
{
  id v3 = [a2 longLongValue];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withPersistentID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withPersistentID:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v3));
  uint64_t v5 = *(void **)(a1 + 32);
  id v9 = v4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 pass]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _registeredPass:v6]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 paymentPass]);

  if (v8) {
    [*(id *)(a1 + 40) addObject:v8];
  }
  else {
    +[BarcodeFetch removeBarcodeFetchForPassPID:inDatabase:]( &OBJC_CLASS___BarcodeFetch,  "removeBarcodeFetchForPassPID:inDatabase:",  v3,  *(void *)(*(void *)(a1 + 32) + 8LL));
  }
}

void sub_100141F6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100141F84(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10014202C;
    v8[3] = &unk_10063D460;
    id v5 = v2;
    uint64_t v6 = *(void *)(a1 + 48);
    id v9 = v5;
    uint64_t v10 = v6;
    sub_1002CCDBC( v4,  @"SELECT evaluated_policy_domain_state FROM payment_application_barcode_service_metadata WHERE payment_application_pid = ? LIMIT 1",  v8);
  }

  return 1LL;
}

void sub_10014202C(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    uint64_t v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

void sub_10014218C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001421A4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1001422DC;
    v16[3] = &unk_10063D460;
    id v5 = v2;
    uint64_t v6 = *(void *)(a1 + 56);
    id v17 = v5;
    uint64_t v18 = v6;
    sub_1002CCDBC( v4,  @"DELETE FROM payment_application_barcode_service_metadata WHERE payment_application_pid = ?",  v16);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100142330;
      v12[3] = &unk_1006456D0;
      id v13 = v5;
      id v8 = *(id *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      id v14 = v8;
      uint64_t v15 = v9;
      sub_1002CCDBC( v7,  @"INSERT INTO payment_application_barcode_service_metadata (payment_application_pid, evaluated_policy_domain_state) VALUES (?, ?)",  v12);
    }
  }

  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v10;
}

uint64_t sub_1001422DC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100142330(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = result;
  return result;
}

void sub_1001424E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001424F8(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    uint64_t v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -[NSData unsignedIntegerValue]( v4,  "unsignedIntegerValue");
  }

uint64_t sub_1001425E0(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

void sub_1001426AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001426C4(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    uint64_t v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -[NSData unsignedIntegerValue]( v4,  "unsignedIntegerValue");
  }

void sub_1001427D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001427F0(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    uint64_t v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -[NSData unsignedIntegerValue]( v4,  "unsignedIntegerValue");
  }

uint64_t sub_1001428D0(sqlite3_int64 *a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

void sub_100142944(id a1, sqlite3_stmt *a2)
{
}

void sub_1001429A4(id a1, sqlite3_stmt *a2)
{
}

void sub_100142A04(id a1, sqlite3_stmt *a2)
{
}

uint64_t sub_100142AA8(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

uint64_t sub_100142B60(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

uint64_t sub_100142C18(uint64_t a1, sqlite3_stmt *a2)
{
  return sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
}

void sub_100142C8C(id a1, sqlite3_stmt *a2)
{
}

uint64_t sub_100142D2C(uint64_t a1)
{
  return 1LL;
}

void sub_100143ED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_100143F24(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v15 = (id)objc_claimAutoreleasedReturnValue([v5 transactionSourceIdentifierForPeerPaymentAccountIdentifier:v6]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v15]);
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 transactionSourceIdentifier]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    uint64_t v12 = objc_claimAutoreleasedReturnValue([v8 accountIdentifier]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v8 accountType];
    *a3 = 1;
  }
}

void sub_1001449CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001449E4(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[DeviceEnvironment environmentForClient:inDatabase:]( &OBJC_CLASS___DeviceEnvironment,  "environmentForClient:inDatabase:",  a1[7],  *(void *)(a1[4] + 8LL)));
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = (_BYTE *)a1[8];
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
    if (!v6)
    {
LABEL_5:
      *id v5 = 1;
      return 1LL;
    }

    if (([v6 isEqual:a1[5]] & 1) == 0)
    {
      id v5 = (_BYTE *)a1[8];
      goto LABEL_5;
    }
  }

  return 1LL;
}

uint64_t sub_100144B20(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(a1 + 40)));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NFC anyInDatabase:forPassPID:]( NFC,  "anyInDatabase:forPassPID:",  *(void *)(*(void *)(a1 + 32) + 8),  [v2 persistentID]));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nfcPayload]);

    id v6 = *(id *)(a1 + 48);
    if (v6 == [v5 payloadState])
    {
      char v7 = 0;
    }

    else
    {
      +[NFC insertOrUpdateNFCPayload:forPass:computedPayloadState:inDatabase:]( &OBJC_CLASS___NFC,  "insertOrUpdateNFCPayload:forPass:computedPayloadState:inDatabase:",  v5,  v3,  *(void *)(a1 + 48),  *(void *)(*(void *)(a1 + 32) + 8LL));
      char v7 = 1;
    }

    **(_BYTE **)(a1 + 56) = v7;
  }

  return 1LL;
}

id *sub_100145158(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_100145AC4(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_100145DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___TransactionCommutePlanUnit,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_100146098(id a1, TransientUnit *a2, id a3)
{
}

void sub_1001460A0(id a1, TransientUnit *a2, id a3)
{
}

void sub_1001460A8(id a1, TransientUnit *a2, id a3)
{
}

void sub_1001460B0(id a1, TransientUnit *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[TransientUnit setValue:](v4, "setValue:", v6);
}

void sub_100146100(id a1, TransientUnit *a2, id a3)
{
  uint64_t v4 = a2;
  -[TransientUnit setPlanType:](v4, "setPlanType:", [a3 unsignedIntegerValue]);
}

void sub_1001487C4(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setCreditLimit:](v4, "setCreditLimit:", v6);
}

void sub_100148814(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setAvailableCredit:](v4, "setAvailableCredit:", v6);
}

void sub_100148864(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setCurrentBalance:](v4, "setCurrentBalance:", v6);
}

void sub_1001488B4(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setAdjustedBalance:](v4, "setAdjustedBalance:", v6);
}

void sub_100148904(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setRewardsBalance:](v4, "setRewardsBalance:", v6);
}

void sub_100148954(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setRemainingStatementBalance:](v4, "setRemainingStatementBalance:", v6);
}

void sub_1001489A4(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setRemainingStatementBalanceForInterestCalculation:]( v4,  "setRemainingStatementBalanceForInterestCalculation:",  v6);
}

void sub_1001489F4(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setRemainingMinimumPayment:](v4, "setRemainingMinimumPayment:", v6);
}

void sub_100148A44(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setPastDueAmount:](v4, "setPastDueAmount:", v6);
}

void sub_100148A94(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditAccountSummary setAutoPayEnabled:](v4, "setAutoPayEnabled:", [a3 BOOLValue]);
}

void sub_100148AD8(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditAccountSummary setRequiresDebtCollectionNotices:]( v4,  "setRequiresDebtCollectionNotices:",  [a3 BOOLValue]);
}

void sub_100148B1C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditAccountSummary setBalanceStatus:](v4, "setBalanceStatus:", [a3 integerValue]);
}

void sub_100148B60(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditAccountSummary setCyclesPastDue:](v4, "setCyclesPastDue:", [a3 integerValue]);
}

void sub_100148BA4(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountSummary setLastPaymentDate:](v4, "setLastPaymentDate:", v5);
}

void sub_100148BF0(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountSummary setPaymentDueDate:](v4, "setPaymentDueDate:", v5);
}

void sub_100148C3C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setUnpostedInterest:](v4, "setUnpostedInterest:", v6);
}

void sub_100148C8C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountSummary setUnpostedInterestTimestamp:](v4, "setUnpostedInterestTimestamp:", v5);
}

void sub_100148CD8(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditAccountSummary setInGrace:](v4, "setInGrace:", [a3 BOOLValue]);
}

void sub_100148D1C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setChargeOffPreventionAmount:](v4, "setChargeOffPreventionAmount:", v6);
}

void sub_100148D6C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setPastDueAmount:](v4, "setPastDueAmount:", v6);
}

void sub_100148DBC(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setInstallmentBalance:](v4, "setInstallmentBalance:", v6);
}

void sub_100148E0C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountSummary setRemainingMinimumPaymentExcludedFromInterestCalculation:]( v4,  "setRemainingMinimumPaymentExcludedFromInterestCalculation:",  v6);
}

void sub_100148E5C(id a1, PKCreditAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditAccountSummary setRecoveryPaymentPlansSupported:]( v4,  "setRecoveryPaymentPlansSupported:",  [a3 BOOLValue]);
}

void sub_100149098(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

CFStringRef PDSharingRelayServerEndpointStatusToString(uint64_t a1)
{
  else {
    return *(&off_100645C70 + a1 - 1);
  }
}

uint64_t PDSharingRelayServerEndpointStatusFromString(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1 == @"nonexistent") {
    goto LABEL_4;
  }
  if (!v1)
  {
LABEL_14:
    uint64_t v4 = 0LL;
    goto LABEL_15;
  }

  unsigned __int8 v3 = [@"nonexistent" isEqualToString:v1];

  if ((v3 & 1) == 0)
  {
    uint64_t v5 = v2;
    if (v5 == @"created"
      || (uint64_t v6 = v5,
          unsigned __int8 v7 = [@"created" isEqualToString:v5],
          v6,
          (v7 & 1) != 0))
    {
      uint64_t v4 = 2LL;
      goto LABEL_15;
    }

    id v8 = v6;
    if (v8 == @"attached"
      || (uint64_t v9 = v8,
          unsigned __int8 v10 = [@"attached" isEqualToString:v8],
          v9,
          (v10 & 1) != 0))
    {
      uint64_t v4 = 3LL;
      goto LABEL_15;
    }

    id v11 = v9;
    if (v11 == @"deleted"
      || (uint64_t v12 = v11, v13 = [@"deleted" isEqualToString:v11], v12, v13))
    {
      uint64_t v4 = 4LL;
      goto LABEL_15;
    }

    goto LABEL_14;
  }

LABEL_4:
  uint64_t v4 = 1LL;
LABEL_15:

  return v4;
}

  uint64_t v4 = 1LL;
LABEL_12:

  return v4;
}

  unsigned __int8 v7 = 1LL;
LABEL_9:

  -[PDSharingRelayServerEndpoint setProvisioningType:](v11, "setProvisioningType:", v7);
}

  unsigned __int8 v7 = 1LL;
LABEL_9:

  -[PDSharingIDSEndpoint setProvisioningType:](v11, "setProvisioningType:", v7);
}

  unsigned __int8 v7 = 1LL;
LABEL_9:

  -[PDSharingLocalOnDeviceEndpoint setProvisioningType:](v11, "setProvisioningType:", v7);
}

  id v8 = 0;
LABEL_7:

  return v8;
}

uint64_t PDSharingRelayServerEndpointStatusIsActive(unint64_t a1)
{
  return (a1 < 5) & (0xCu >> a1);
}

void sub_100149C68(id a1, PKPayLaterAccountTermsDetails *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterAccountTermsDetails setTermsAcceptanceRequired:]( v4,  "setTermsAcceptanceRequired:",  [a3 BOOLValue]);
}

void sub_100149CAC(id a1, PKPayLaterAccountTermsDetails *a2, id a3)
{
}

void sub_100149D90(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

CFStringRef PKWatchExpressStatusToString(uint64_t a1)
{
  else {
    return off_1006462A8[a1 - 1];
  }
}

id PDExpressTransactionQueue()
{
  if (qword_1007079E8 != -1) {
    dispatch_once(&qword_1007079E8, &stru_100645CF0);
  }
  return (id)qword_1007079F0;
}

void sub_100149EF8(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, 0);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(v2, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);

  dispatch_queue_t v4 = dispatch_queue_create("com.apple.passd.express-transaction", attr);
  uint64_t v5 = (void *)qword_1007079F0;
  qword_1007079F0 = (uint64_t)v4;
}

void sub_100149FA8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

id *sub_10014A00C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___PDExpressRestorationRequest;
    uint64_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id *sub_10014A128( dispatch_queue_attr_s *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, unsigned int a8)
{
  id v95 = a2;
  id v97 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  v96 = v17;
  if (!a1)
  {
    __int128 v39 = 0LL;
    __int128 v40 = v95;
    goto LABEL_62;
  }

  __int128 v19 = a1;
  if (PKSecureElementIsAvailable(v17, v18))
  {
    id obj = v16;
    v108.receiver = a1;
    v108.super_class = (Class)&OBJC_CLASS___PDExpressPassManager;
    __int128 v20 = (id *)-[dispatch_queue_attr_s init](&v108, "init");
    if (v20)
    {
      __int128 v21 = v20;
      id v93 = v15;
      uint64_t v22 = v20 + 1;
      objc_storeStrong(v20 + 1, a2);
      objc_storeStrong(v21 + 2, a3);
      objc_storeStrong(v21 + 3, a4);
      objc_storeWeak(v21 + 4, obj);
      objc_storeStrong(v21 + 5, a6);
      *((_DWORD *)v21 + 30) = 0;
      v21[13] = 0LL;
      dispatch_queue_attr_t v23 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      __int128 v19 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v23);
      dispatch_queue_attr_t initially_inactive = dispatch_queue_attr_make_initially_inactive(v19);
      id v25 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(initially_inactive);
      dispatch_queue_t v26 = dispatch_queue_create("com.apple.passd.expressPassManager", v25);
      id v27 = v21[9];
      v21[9] = v26;

      dispatch_queue_t v28 = dispatch_queue_create("com.apple.passd.expressPassManager.reply", v19);
      id v29 = v21[10];
      v21[10] = v28;

      uint64_t v30 = PDExpressPassConfigurations();
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      __int128 v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v33 = v32;
      id v34 = &off_1004D6000;
      if (a8)
      {
        id v35 = v21[7];
        v21[7] = v32;

        uint64_t v33 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        if (v31)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            id v38 = [v31 count];
            LODWORD(buf) = 134217984;
            *(void *)((char *)&buf + 4) = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: database recreating with express pass configurations: %ld",  (uint8_t *)&buf,  0xCu);
          }

          goto LABEL_12;
        }
      }

      else if (v31)
      {
LABEL_12:
        __int128 v106 = 0u;
        __int128 v107 = 0u;
        __int128 v104 = 0u;
        __int128 v105 = 0u;
        id v41 = v31;
        id v42 = [v41 countByEnumeratingWithState:&v104 objects:v110 count:16];
        if (!v42)
        {
          __int128 v40 = v95;
LABEL_55:

          id v78 = -[NSMutableDictionary copy](v33, "copy");
          id v79 = v21[12];
          v21[12] = v78;

          *((_BYTE *)v21 + 64) = a8;
          if (a8)
          {
            if ([v21[7] count])
            {
              uint64_t v80 = (void *)PDOSTransactionCreate("PDExpressPassManager.database_restore");
              id v81 = v21[6];
              v21[6] = v80;
            }

            else
            {
              id v81 = v21[7];
              v21[7] = 0LL;
            }
          }

          uint64_t v82 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
          id v83 = v21[16];
          v21[16] = (id)v82;

          id v84 = v21[9];
          block[0] = _NSConcreteStackBlock;
          block[1] = *((void *)v34 + 190);
          block[2] = sub_10014A9EC;
          block[3] = &unk_100639300;
          __int128 v39 = v21;
          v99 = v39;
          v85 = (dispatch_queue_s *)v84;
          dispatch_block_t v86 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
          dispatch_async(v85, v86);

          [v21[5] registerConsumer:v39];
          dispatch_activate((dispatch_object_t)v21[9]);

          id v15 = v93;
          id v16 = obj;
          goto LABEL_61;
        }

        id v43 = v42;
        v91 = v31;
        v92 = v19;
        uint64_t v44 = *(void *)v105;
        do
        {
          for (id i = 0LL; i != v43; id i = (char *)i + 1)
          {
            if (*(void *)v105 != v44) {
              objc_enumerationMutation(v41);
            }
            id v46 = *(void **)(*((void *)&v104 + 1) + 8LL * (void)i);
            __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 passUniqueIdentifier]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v33, "setObject:forKeyedSubscript:", v46, v47);
            if (a8)
            {
              __int128 v48 = sub_10014A00C((id *)objc_alloc(&OBJC_CLASS___PDExpressRestorationRequest), v46);
              [v21[7] setObject:v48 forKeyedSubscript:v47];
            }
          }

          id v43 = [v41 countByEnumeratingWithState:&v104 objects:v110 count:16];
        }

        while (v43);
LABEL_54:
        __int128 v40 = v95;
        uint64_t v31 = v91;
        __int128 v19 = v92;
        id v34 = &off_1004D6000;
        goto LABEL_55;
      }

      v92 = v19;
      uint64_t v49 = PKLogFacilityTypeGetObject(6LL);
      __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = a8;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: migrating to express pass configurations (databaseRecreated: %lu)",  (uint8_t *)&buf,  0xCu);
      }

      if ((a8 & 1) != 0) {
        unint64_t v51 = 0LL;
      }
      else {
        unint64_t v51 = *v22;
      }
      id v90 = v51;
      uint64_t v52 = PDExpressPassesInformation();
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        id v54 = [v53 count];
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: migrating %ld express passes information",  (uint8_t *)&buf,  0xCu);
      }

      id v55 = [v53 count];
      id v89 = v53;
      if (v55)
      {
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        v116 = sub_100151648;
        v117 = &unk_100646288;
        BOOL v119 = v90 == 0LL;
        id v88 = &v118;
        v56 = v90;
        id v118 = v90;
        v57 = (NSSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "pk_setBySafelyApplyingBlock:", &buf));
      }

      else
      {
        v57 = objc_alloc_init(&OBJC_CLASS___NSSet);
        v56 = v90;
      }

      id v58 = v55;
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        NSUInteger v59 = -[NSSet count](v57, "count");
        *(_DWORD *)uint64_t v111 = 134217984;
        NSUInteger v112 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: migrated to %ld express pass configurations",  v111,  0xCu);
      }

      NSUInteger v60 = -[NSSet count](v57, "count");
      NSUInteger v61 = v60;
      if (v56 || !v60) {
        PDSetExpressPassConfigurations(v57);
      }
      v91 = v31;
      if (v58 != (id)v61)
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v111 = 134218240;
          NSUInteger v112 = (NSUInteger)v58;
          __int16 v113 = 2048;
          NSUInteger v114 = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: pre-/post- migration count mismatch (%lu != %lu)",  v111,  0x16u);
        }

        v62 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v56 == 0LL));
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 stringValue]);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v62,  "setObject:forKeyedSubscript:",  v64,  @"DatabaseRecreated");

        v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v58));
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 stringValue]);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v62,  "setObject:forKeyedSubscript:",  v66,  @"PreMigrationCount");

        v56 = v90;
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v61));
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v67 stringValue]);
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v62,  "setObject:forKeyedSubscript:",  v68,  @"PostMigrationCount");

        id v69 = objc_alloc_init(&OBJC_CLASS___PKAutoBugCaptureReporter);
        [v69 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"Express" subtype:@"ConfigMigration" subtypeContext:@"MigrationCountMismatch" payload:v62];
      }

      id v70 = -[NSSet copy](v57, "copy");

      if (v58) {
      __int128 v100 = 0u;
      }
      __int128 v101 = 0u;
      __int128 v102 = 0u;
      __int128 v103 = 0u;
      id v41 = v70;
      id v71 = [v41 countByEnumeratingWithState:&v100 objects:v109 count:16];
      if (v71)
      {
        id v72 = v71;
        uint64_t v73 = *(void *)v101;
        do
        {
          for (j = 0LL; j != v72; j = (char *)j + 1)
          {
            if (*(void *)v101 != v73) {
              objc_enumerationMutation(v41);
            }
            v75 = *(void **)(*((void *)&v100 + 1) + 8LL * (void)j);
            v76 = (void *)objc_claimAutoreleasedReturnValue([v75 passUniqueIdentifier]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v33, "setObject:forKeyedSubscript:", v75, v76);
            if (a8)
            {
              uint64_t v77 = sub_10014A00C((id *)objc_alloc(&OBJC_CLASS___PDExpressRestorationRequest), 0LL);
              [v21[7] setObject:v77 forKeyedSubscript:v76];
            }
          }

          id v72 = [v41 countByEnumeratingWithState:&v100 objects:v109 count:16];
        }

        while (v72);
      }

      goto LABEL_54;
    }

    __int128 v19 = 0LL;
    __int128 v39 = 0LL;
    __int128 v40 = v95;
  }

  else
  {
    __int128 v39 = 0LL;
    __int128 v40 = v95;
  }

id sub_10014A9EC(uint64_t a1)
{
  return sub_10014A9F4(*(id *)(a1 + 32));
}

id sub_10014A9F4(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t result = (id)PKNearFieldRadioIsAvailable(result);
    if ((_DWORD)result)
    {
      sub_10014AA4C(v1);
      atomic_store(1u, (unsigned __int8 *)(v1 + 88));
      return [*(id *)(v1 + 40) recalculateNotificationNames];
    }

    else
    {
      atomic_store(1u, (unsigned __int8 *)(v1 + 88));
    }
  }

  return result;
}

void sub_10014AA4C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[FMDFMIPManager sharedInstance](&OBJC_CLASS___FMDFMIPManager, "sharedInstance"));
    unsigned int v3 = [v2 lostModeIsActive];

    if (*(unsigned __int8 *)(a1 + 136) != v3)
    {
      *(_BYTE *)(a1 + 136) = v3;
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      if (v3)
      {
        if (v6)
        {
          __int16 v10 = 0;
          objc_super v7 = "PKExpressPassManager: device is in lost mode - disabling express mode.";
          id v8 = (uint8_t *)&v10;
LABEL_8:
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
        }
      }

      else if (v6)
      {
        __int16 v9 = 0;
        objc_super v7 = "PKExpressPassManager: device exited lost mode - enabling express mode.";
        id v8 = (uint8_t *)&v9;
        goto LABEL_8;
      }
    }
  }

void sub_10014AB18(uint64_t a1)
{
  if (a1)
  {
    if (PKNearFieldRadioIsAvailable(a1))
    {
      uint64_t v2 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      unsigned int v3 = *(dispatch_queue_s **)(a1 + 72);
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472LL;
      id v5[2] = sub_10014ABA8;
      v5[3] = &unk_1006392B0;
      id v6 = v2;
      uint64_t v7 = a1;
      id v4 = v2;
      dispatch_async(v3, v5);
    }
  }

uint64_t sub_10014ABA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (!*(_BYTE *)(v1 + 89)) {
    *(_BYTE *)(v1 + 89) = 1;
  }
  return result;
}

void sub_10014ABC4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014AC20;
    block[3] = &unk_100639300;
    void block[4] = a1;
    dispatch_async(v1, block);
  }

void sub_10014AC20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 64))
  {
    *(_BYTE *)(v1 + 64) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0LL;

    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 4_Block_object_dispose(va, 8) = 0LL;
    id v7 = v6;
  }

  else
  {
    __break(1u);
  }

void sub_10014ACF0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    uint64_t v3 = *(dispatch_queue_s **)(a1 + 72);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    id v5[2] = sub_10014AD78;
    v5[3] = &unk_1006392B0;
    id v6 = v2;
    uint64_t v7 = a1;
    id v4 = v2;
    dispatch_async(v3, v5);
  }

void sub_10014AD78(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 40) + 96) count];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104LL));
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0LL;

    sub_10014ADE8(*(void *)(a1 + 40), &__NSDictionary0__struct);
  }

void sub_10014ADE8(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (os_unfair_lock_s *)(a1 + 104);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    id v5 = [v4 copy];
    id v6 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v5;

    os_unfair_lock_unlock(v3);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10014D534;
    v11[3] = &unk_100645E08;
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v12 = v7;
    [v4 enumerateKeysAndObjectsUsingBlock:v11];

    PDSetExpressPassConfigurations(v7);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10014D53C;
    v9[3] = &unk_100645F28;
    void v9[4] = a1;
    __int16 v10 = v7;
    id v8 = v7;
    sub_10014B7D8(a1, v9);
    dispatch_async(*(dispatch_queue_t *)(a1 + 80), &stru_100645F48);
  }

void sub_10014AF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    id v5 = objc_autoreleasePoolPush();
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) passWithUniqueIdentifier:v3]);
    objc_autoreleasePoolPop(v5);
    if (v6)
    {
      uint64_t v7 = (dispatch_queue_s *)PDExpressTransactionQueue();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10014AFFC;
      v8[3] = &unk_10063B060;
      id v9 = v4;
      uint64_t v10 = a1;
      id v11 = v6;
      id v12 = v3;
      dispatch_async(v7, v8);
    }
  }
}

void sub_10014AFFC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10014B080;
  v3[3] = &unk_100645D18;
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  sub_10014B174(v2, 0LL, v3);
}

uint64_t sub_10014B080(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) passType] == (id)1)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) devicePrimaryContactlessPaymentApplication]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 applicationIdentifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 subcredentials]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 anyObject]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);

    if (v5 && ([v3 isAssociated] & 1) == 0) {
      [v3 associateWithApplicationIdentifier:v5 keyIdentifier:v8 terminalReaderIdentifier:0 passUniqueIdentifier:*(void *)(a1 + 40)];
    }
  }

  else
  {
    id v5 = 0LL;
    id v8 = 0LL;
  }

  [v3 receiveEvents:4];
  [v3 resolve];

  return 1LL;
}

uint64_t sub_10014B174(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!a1) {
    goto LABEL_19;
  }
  __int128 v19 = 0LL;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
  sub_10014DE74(a1, (void **)&v19, &stru_100646000);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: unbalanced entrance of express - preserving existing state.",  buf,  2u);
    }

    if (v5) {
      sub_10014DF3C(a1, v5, (void **)&v19);
    }
    id v10 = PDUtilityQueue();
    id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014E004;
    block[3] = &unk_100639300;
    void block[4] = a1;
    dispatch_async(v11, block);
  }

  else
  {
    if (v9)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: entered express.",  buf,  2u);
    }

    id v13 = +[PKExpressTransactionState createForExpressType:]( &OBJC_CLASS___PKExpressTransactionState,  "createForExpressType:",  a2);
    id v14 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = v13;

    if (!v5 || (sub_10014DF3C(a1, v5, (void **)&v19) & 1) == 0)
    {
      id v12 = v19;
      if (!v19)
      {
        id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v19 = v12;
      }

      id v15 = [*(id *)(a1 + 112) copy];
      -[NSMutableArray addObject:](v12, "addObject:", v15);

      goto LABEL_16;
    }
  }

  id v12 = v19;
LABEL_16:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
  if (v12) {
    sub_10014E10C(a1, v12);
  }
  BOOL v20 = v6 == 0;

  a1 = v20;
LABEL_19:

  return a1;
}

void sub_10014B360(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
LABEL_9:

    return;
  }

  if (v3)
  {
    if (([v3 isProcessing] & 1) == 0 && objc_msgSend(v4, "standaloneTransactionType"))
    {
      if ([v4 isAssociated])
      {
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 passUniqueIdentifier]);

        if (!v5)
        {
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472LL;
          v9[2] = sub_10014B470;
          v9[3] = &unk_100645D40;
          void v9[4] = a1;
          [v4 _populatePassUniqueIdentifierWithLookup:v9];
        }
      }

      uint64_t v6 = (dispatch_queue_s *)PDExpressTransactionQueue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10014B484;
      block[3] = &unk_1006392B0;
      void block[4] = a1;
      id v8 = v4;
      dispatch_async(v6, block);
    }

    goto LABEL_9;
  }

  __break(1u);
}

id sub_10014B470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:a2 subcredentialIdentifier:a3];
}

void sub_10014B484(uint64_t a1)
{
}

void sub_10014B494(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (!v5
      || [v5 isProcessing]
      || (id v7 = [v6 standaloneTransactionType]) == 0)
    {
      __break(1u);
    }

    id v8 = v7;
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v6 passUniqueIdentifier]);
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v12)
      {
        *(_DWORD *)__int128 buf = 134218242;
        id v19 = v8;
        __int16 v20 = 2112;
        __int128 v21 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: presenting standalone transaction %ld for %@...",  buf,  0x16u);
      }

      id v13 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_10014F024;
      v15[3] = &unk_1006460B8;
      id v16 = v13;
      char v17 = a3;
      id v11 = v13;
      sub_1001AD9FC((uint64_t)WeakRetained, v6, a3, v15);
    }

    else if (v12)
    {
      *(_DWORD *)__int128 buf = 134217984;
      id v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: cannot present standalone transaction %ld - could not resolve pass.",  buf,  0xCu);
    }
  }
}

void sub_10014B65C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10014B788;
    v15[3] = &unk_100645D68;
    void v15[4] = a1;
    id v16 = v7;
    id v17 = v8;
    id v18 = v9;
    sub_10014B7D8(a1, v15);
    id v11 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = nullsub_40;
    block[3] = &unk_100639300;
    id v14 = v10;
    id v12 = v10;
    dispatch_async(v11, block);
  }
}

void sub_10014B788(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "expressPassManager:willProcessPaymentApplicationsUpdateFromPriorPaymentApplications:toPaymentApplications:forP assUniqueIdentifier:") & 1) != 0) {
    [v3 expressPassManager:a1[4] willProcessPaymentApplicationsUpdateFromPriorPaymentApplications:a1[5] toPaymentApplications:a1[6] forPassU niqueIdentifier:a1[7]];
  }
}

void sub_10014B7D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) allObjects]);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    uint64_t v6 = *(dispatch_queue_s **)(a1 + 80);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10014DC5C;
    v8[3] = &unk_10063AC90;
    id v9 = v5;
    id v10 = v4;
    id v7 = v5;
    dispatch_async(v6, v8);
  }
}

void sub_10014B8A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = *(dispatch_queue_s **)(a1 + 72);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10014B968;
      block[3] = &unk_100639AF0;
      void block[4] = a1;
      id v10 = v5;
      id v11 = v7;
      dispatch_async(v8, block);
    }

    else
    {
      (*((void (**)(id, void))v6 + 2))(v6, 0LL);
    }
  }
}

void sub_10014B968(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) objectForKey:*(void *)(a1 + 40)]);
  BOOL v3 = v2 != 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104LL));
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_10014BA20;
  v5[3] = &unk_100645D90;
  id v6 = *(id *)(a1 + 48);
  BOOL v7 = v3;
  dispatch_async(v4, v5);
}

uint64_t sub_10014BA20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_10014BA34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    BOOL v7 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014BAE0;
    block[3] = &unk_100639AF0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10014BAE0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104LL));
  BOOL v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10014BBA0;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10014BBA0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10014BBB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014BC44;
    block[3] = &unk_10063AEB0;
    void block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10014BC44(void *a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 104LL));
  BOOL v3 = *(void **)(a1[4] + 96LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10014BD50;
  v11[3] = &unk_100645DB8;
  uint64_t v13 = a1[6];
  id v4 = v2;
  id v12 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v11];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 104LL));
  id v5 = (void *)a1[5];
  id v6 = *(dispatch_queue_s **)(a1[4] + 80LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10014BDB8;
  v8[3] = &unk_1006396B0;
  id v9 = v4;
  id v10 = v5;
  id v7 = v4;
  dispatch_async(v6, v8);
}

void sub_10014BD50(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v7 passInformation]);
  id v5 = [v4 cardType];
  id v6 = *(id *)(a1 + 40);

  if (v5 == v6) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_10014BDB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10014BDF8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014BE8C;
    block[3] = &unk_10063AEB0;
    void block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10014BE8C(void *a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 104LL));
  id v3 = [*(id *)(a1[4] + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 104LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10014BFA4;
  v11[3] = &unk_100645DB8;
  uint64_t v13 = a1[6];
  id v4 = v2;
  id v12 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v11];
  id v5 = (void *)a1[5];
  id v6 = *(dispatch_queue_s **)(a1[4] + 80LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10014C188;
  v8[3] = &unk_1006396B0;
  id v9 = v4;
  id v10 = v5;
  id v7 = v4;
  dispatch_async(v6, v8);
}

void sub_10014BFA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 passInformation]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10014C044;
  v8[3] = &unk_100645DE0;
  id v5 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v9 = v5;
  id v10 = v4;
  id v6 = v4;
  [v7 enumerateCredentialsWithHandler:v8];
}

void sub_10014C044(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v6 = a3;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    while (2)
    {
      for (id i = 0LL; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        if (objc_msgSend(v11, "supportsExpress", (void)v14)
          && [v11 technologyType] == *(id *)(a1 + 48))
        {
          id v12 = *(void **)(a1 + 32);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passInformation]);
          [v12 addObject:v13];

          *a4 = 1;
          goto LABEL_12;
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

void sub_10014C188(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10014C1C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10014C258;
    v6[3] = &unk_10063AC90;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10014C258(uint64_t a1)
{
  id v2 = sub_10014C2F0(*(os_unfair_lock_s **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10014C3A8;
  v7[3] = &unk_1006396B0;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

os_unfair_lock_s *sub_10014C2F0(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v3 = v1 + 26;
    os_unfair_lock_lock(v1 + 26);
    id v4 = *(void **)&v1[24]._os_unfair_lock_opaque;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10014C3B8;
    v7[3] = &unk_100645E08;
    id v8 = v2;
    id v5 = v2;
    [v4 enumerateKeysAndObjectsUsingBlock:v7];
    os_unfair_lock_unlock(v3);
    uint64_t v1 = (os_unfair_lock_s *)-[NSMutableSet copy](v5, "copy");
  }

  return v1;
}

uint64_t sub_10014C3A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_10014C3B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_10014C3C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014C46C;
    block[3] = &unk_100639AF0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10014C46C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104LL));
  sub_10014C4CC(*(void *)(a1 + 32), *(void **)(a1 + 40), v2, *(void **)(a1 + 48));
}

void sub_10014C4CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([a2 passUniqueIdentifier]);
    if (v9 && [v7 count])
    {
      id v10 = *(dispatch_queue_s **)(a1 + 80);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10014C9E8;
      block[3] = &unk_1006396B0;
      uint64_t v11 = &v15;
      id v14 = 0LL;
      id v15 = v8;
      dispatch_async(v10, block);
    }

    else
    {
      id v12 = *(dispatch_queue_s **)(a1 + 80);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_10014C9D8;
      v16[3] = &unk_10063A830;
      uint64_t v11 = &v17;
      id v17 = v8;
      dispatch_async(v12, v16);
    }
  }
}

void sub_10014C5F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = a3;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10014C720;
    v17[3] = &unk_10063C6F8;
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v18 = v10;
    [v9 enumerateObjectsUsingBlock:v17];

    uint64_t v11 = *(dispatch_queue_s **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014C78C;
    block[3] = &unk_10063B440;
    void block[4] = a1;
    id v14 = v7;
    id v15 = v10;
    id v16 = v8;
    id v12 = v10;
    dispatch_async(v11, block);
  }
}

void sub_10014C720(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 passUniqueIdentifier]);

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 passUniqueIdentifier]);
    [v4 setObject:v6 forKey:v5];
  }
}

void sub_10014C78C(uint64_t a1)
{
}

void sub_10014C79C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10014C824;
    v6[3] = &unk_1006392B0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_10014C824(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) objectForKey:v2]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104LL));
  if (v3)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___PDExpressMutationRequest);
    id v6 = v4;
    if (v4)
    {
      objc_setProperty_nonatomic_copy(v4, v5, v2, 16LL);
      v6->_userInitiated = 0;
    }

    id v7 = -[PKExpressPassConfiguration initForPaymentPass:isNFCExpressEnabled:isUWBExpressEnabled:withTechologyTest:]( [PKExpressPassConfiguration alloc],  "initForPaymentPass:isNFCExpressEnabled:isUWBExpressEnabled:withTechologyTest:",  *(void *)(a1 + 32),  [v3 isNFCExpressEnabled],  objc_msgSend(v3, "isUWBExpressEnabled"),  &stru_100645E28);
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PDExpressMutationRequest);
    id v10 = v8;
    if (v8)
    {
      objc_setProperty_nonatomic_copy(v8, v9, v2, 16LL);
      sub_100149FA8((uint64_t)v10, v7);
      v10->_userInitiated = 0;
    }

    else
    {
      sub_100149FA8(0LL, v7);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    v13[0] = v6;
    v13[1] = v10;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
    if (v11) {
      sub_10014D37C(v11, v12);
    }
  }
}

BOOL sub_10014C9C8(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:]( &OBJC_CLASS___PKSecureElement,  "supportsExpressForAutomaticSelectionTechnologyType:",  a2);
}

uint64_t sub_10014C9D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10014C9E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10014C9F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    if (v7 && (uint64_t v10 = objc_claimAutoreleasedReturnValue([v7 passUniqueIdentifier])) != 0)
    {
      uint64_t v11 = (void *)v10;
      id v12 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      uint64_t v13 = *(dispatch_queue_s **)(a1 + 72);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_10014CCE4;
      v19[3] = &unk_100645E50;
      id v20 = v12;
      id v21 = v11;
      id v22 = v7;
      id v23 = v8;
      uint64_t v24 = a1;
      id v25 = v9;
      id v14 = v11;
      id v15 = v12;
      dispatch_async(v13, v19);
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: cannot set invalid express pass configuration.",  buf,  2u);
      }

      if (v9)
      {
        id v18 = *(dispatch_queue_s **)(a1 + 80);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10014CBC4;
        block[3] = &unk_10063AC90;
        void block[4] = a1;
        id v27 = v9;
        dispatch_async(v18, block);
      }
    }
  }
}

void sub_10014CBC4(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104LL));
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_10014CC40(v5);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1LL, v4);
}

NSMutableSet *sub_10014CC40(void *a1)
{
  id v1 = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001516F0;
  v4[3] = &unk_100645E08;
  uint64_t v2 =  -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [v1 count]);
  id v5 = v2;
  [v1 enumerateKeysAndObjectsUsingBlock:v4];

  return v2;
}

void sub_10014CCE4(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___PDExpressMutationRequest);
  self = v2;
  if (v2)
  {
    objc_setProperty_nonatomic_copy(v2, v3, *(id *)(a1 + 40), 16LL);
    sub_100149FA8((uint64_t)self, *(void **)(a1 + 48));
    objc_setProperty_nonatomic_copy(self, v4, *(id *)(a1 + 56), 32LL);
    objc_setProperty_nonatomic_copy(self, v5, *(id *)(a1 + 72), 40LL);
  }

  else
  {
    sub_100149FA8(0LL, *(void **)(a1 + 48));
  }

  sub_10014CD70(*(void *)(a1 + 64), self);
}

void sub_10014CD70(uint64_t a1, void *a2)
{
  if (a1)
  {
    SEL v5 = a2;
    id v3 = a2;
    SEL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));

    sub_10014D37C(a1, v4);
  }

void sub_10014CE0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    if (a2)
    {
      id v6 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id v7 = *(dispatch_queue_s **)(a1 + 72);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_10014D014;
      v12[3] = &unk_100645F00;
      id v13 = v6;
      uint64_t v16 = a2;
      uint64_t v14 = a1;
      id v15 = v5;
      id v8 = v6;
      dispatch_async(v7, v12);
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: cannot remove invalid card type.",  buf,  2u);
      }

      if (v5)
      {
        uint64_t v11 = *(dispatch_queue_s **)(a1 + 80);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10014CF70;
        block[3] = &unk_10063AC90;
        void block[4] = a1;
        id v18 = v5;
        dispatch_async(v11, block);
      }
    }
  }
}

void sub_10014CF70(uint64_t a1)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104LL));
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_10014CC40(v6);
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_setByApplyingBlock:", &stru_100645E90));
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1LL, v5);
}

PKExpressPassInformation *__cdecl sub_10014D00C(id a1, PKExpressPassConfiguration *a2)
{
  return (PKExpressPassInformation *)-[PKExpressPassConfiguration passInformation](a2, "passInformation");
}

void sub_10014D014(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___PDExpressMutationRequest);
  id v3 = v2;
  if (v2) {
    v2->_cardTypeToRemove = *(void *)(a1 + 56);
  }
  newValue[0] = _NSConcreteStackBlock;
  newValue[1] = 3221225472LL;
  newValue[2] = sub_10014D0B8;
  newValue[3] = &unk_100645ED8;
  id v6 = *(id *)(a1 + 48);
  if (v3) {
    objc_setProperty_nonatomic_copy(v3, v4, newValue, 56LL);
  }
  sub_10014CD70(*(void *)(a1 + 40), v3);
}

void sub_10014D0B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "pk_setByApplyingBlock:", &stru_100645EB0));
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

PKExpressPassInformation *__cdecl sub_10014D114(id a1, PKExpressPassConfiguration *a2)
{
  return (PKExpressPassInformation *)-[PKExpressPassConfiguration passInformation](a2, "passInformation");
}

void sub_10014D11C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (v5)
    {
      id v7 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id v8 = *(dispatch_queue_s **)(a1 + 72);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_10014D314;
      v13[3] = &unk_10063BA88;
      id v14 = v7;
      id v15 = v5;
      uint64_t v16 = a1;
      id v17 = v6;
      id v9 = v7;
      dispatch_async(v8, v13);
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: cannot remove nil pass unique identifier.",  buf,  2u);
      }

      if (v6)
      {
        id v12 = *(dispatch_queue_s **)(a1 + 80);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10014D298;
        block[3] = &unk_10063AC90;
        void block[4] = a1;
        id v19 = v6;
        dispatch_async(v12, block);
      }
    }
  }
}

void sub_10014D298(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104LL));
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_10014CC40(v5);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1LL, v4);
}

void sub_10014D314(uint64_t a1)
{
  self = objc_alloc_init(&OBJC_CLASS___PDExpressMutationRequest);
  if (self)
  {
    objc_setProperty_nonatomic_copy(self, v2, *(id *)(a1 + 40), 16LL);
    objc_setProperty_nonatomic_copy(self, v3, *(id *)(a1 + 56), 40LL);
  }

  sub_10014CD70(*(void *)(a1 + 48), self);
}

void sub_10014D37C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && [v3 count])
  {
    id v5 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    id v6 = [*(id *)(a1 + 96) copy];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
    id v7 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [v6 count]);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10014D5BC;
    v21[3] = &unk_100645F70;
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v22 = v8;
    id v9 = v7;
    id v23 = v9;
    [v6 enumerateKeysAndObjectsUsingBlock:v21];
    uint64_t v10 = *(dispatch_queue_s **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014D6A8;
    block[3] = &unk_10063AE10;
    id v16 = v5;
    id v17 = v4;
    id v18 = v6;
    id v19 = v9;
    id v20 = v8;
    uint64_t v11 = v8;
    id v12 = v9;
    id v13 = v6;
    id v14 = v5;
    dispatch_async(v10, block);
  }
}

id sub_10014D534(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_10014D53C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector(v5, "expressPassManager:didUpdateExpressPassConfigurations:") & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [*(id *)(a1 + 40) copy];
    [v5 expressPassManager:v3 didUpdateExpressPassConfigurations:v4];
  }
}

void sub_10014D59C(id a1)
{
}

void sub_10014D5BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 passInformation]);
  id v6 = [v5 cardType];

  id v7 = *(void **)(a1 + 32);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
  uint64_t v11 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

  if (!v11)
  {
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
    [v9 setObject:v11 forKeyedSubscript:v10];
  }

  -[NSMutableSet addObject:](v11, "addObject:", v4);
  [*(id *)(a1 + 40) addObject:v4];
}

void sub_10014D6A8(uint64_t a1)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = *(id *)(a1 + 40);
  id v20 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v20)
  {
    uint64_t v19 = *(void *)v22;
    do
    {
      uint64_t v2 = 0LL;
      do
      {
        if (*(void *)v22 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)v2);
        if (v3) {
          id v4 = *(void **)(v3 + 24);
        }
        else {
          id v4 = 0LL;
        }
        id v5 = v4;
        id v6 = (id)objc_claimAutoreleasedReturnValue([v5 passUniqueIdentifier]);
        if (v6 || (!v3 ? (v7 = 0LL) : (v7 = *(void **)(v3 + 16)), (id v6 = v7) != 0LL))
        {
          id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v6]);
          if (!v3) {
            goto LABEL_20;
          }
        }

        else
        {
          id v8 = 0LL;
          if (!v3)
          {
LABEL_20:
            id v9 = 0LL;
            goto LABEL_17;
          }
        }

        id v9 = (void (**)(id, uint64_t, void))*(id *)(v3 + 40);
        if (v9)
        {
          uint64_t v10 = PKEqualObjects(v5, v8);
          v9[2](v9, v10, *(void *)(a1 + 56));
        }

        id v11 = *(id *)(v3 + 56);
        if (v11)
        {
          id v12 = (void (**)(void, void, void))v11;
          id v13 = *(void **)(a1 + 64);
          id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(v3 + 48)));
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v14]);
          BOOL v16 = [v15 count] == 0;

          v12[2](v12, v16, *(void *)(a1 + 56));
        }

id sub_10014D8CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = 0LL;
  if (a1 && v5)
  {
    uint64_t v16 = 0LL;
    id v17 = &v16;
    uint64_t v18 = 0x3032000000LL;
    uint64_t v19 = sub_10014DA38;
    id v20 = sub_10014DA48;
    id v21 = 0LL;
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    -[NSMutableArray addObject:](v8, "addObject:", v5);
    if (v6) {
      -[NSMutableArray addObject:](v8, "addObject:", v6);
    }
    id v9 = (os_unfair_lock_s *)(a1 + 104);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    id v10 = [*(id *)(a1 + 96) copy];
    os_unfair_lock_unlock(v9);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10014DA50;
    v13[3] = &unk_100645FC0;
    id v11 = v8;
    id v14 = v11;
    id v15 = &v16;
    [v10 enumerateKeysAndObjectsUsingBlock:v13];
    id v7 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  return v7;
}

void sub_10014DA1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10014DA38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10014DA48(uint64_t a1)
{
}

void sub_10014DA50(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  char v16 = 0;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 passInformation]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10014DB6C;
  v10[3] = &unk_100645F98;
  id v11 = *(id *)(a1 + 32);
  id v12 = &v13;
  [v9 enumerateCredentialsWithHandler:v10];

  if (*((_BYTE *)v14 + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
  }

  _Block_object_dispose(&v13, 8);
}

void sub_10014DB54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10014DB6C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = PKEqualObjects(*(void *)(a1 + 32), a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10014DBAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v4 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    [*(id *)(a1 + 128) addObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    id v3 = v4;
  }
}

void sub_10014DC04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v4 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    [*(id *)(a1 + 128) removeObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    id v3 = v4;
  }
}

void sub_10014DC5C(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

os_unfair_lock_s *sub_10014DD50(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = result + 27;
    os_unfair_lock_lock(result + 27);
    id v3 = [*(id *)&v1[28]._os_unfair_lock_opaque copy];
    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)v3;
  }

  return result;
}

void sub_10014DD94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_4;
  }
  if (v3)
  {
    uint64_t v5 = (dispatch_queue_s *)PDExpressTransactionQueue();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10014DE30;
    v6[3] = &unk_10063AC90;
    void v6[4] = a1;
    id v7 = v4;
    dispatch_async(v5, v6);

LABEL_4:
    return;
  }

  __break(1u);
}

void sub_10014DE30(uint64_t a1)
{
  id v2 = sub_10014DD50(*(os_unfair_lock_s **)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10014DE74(uint64_t a1, void **a2, void *a3)
{
  id result = a3;
  id v6 = result;
  if (!a1) {
    goto LABEL_14;
  }
  if (a2)
  {
    id v7 = *(void **)(a1 + 112);
    if (!v7)
    {
LABEL_12:
      uint64_t v13 = 1LL;
LABEL_13:

      return (id)v13;
    }

    if (!result)
    {
LABEL_7:
      id v8 = v7;
      __int128 v9 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = 0LL;

      if ([v8 isProcessing])
      {
        [v8 resolve];
        __int128 v10 = *a2;
        if (!*a2)
        {
          id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v12 = *a2;
          *a2 = v11;

          __int128 v10 = *a2;
        }

        [v10 addObject:v8];
      }

      goto LABEL_12;
    }

    if ((*((unsigned int (**)(id))result + 2))(result))
    {
      id v7 = *(void **)(a1 + 112);
      goto LABEL_7;
    }

id sub_10014DF3C(uint64_t a1, void *a2, void **a3)
{
  id result = a2;
  id v6 = result;
  if (!a1)
  {
LABEL_10:

    return (id)a1;
  }

  if (result && a3)
  {
    if (*(void *)(a1 + 112) && (*((unsigned int (**)(id))result + 2))(result))
    {
      id v7 = *a3;
      if (!*a3)
      {
        id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v9 = *a3;
        *a3 = v8;

        id v7 = *a3;
      }

      id v10 = [*(id *)(a1 + 112) copy];
      [v7 addObject:v10];

      a1 = 1LL;
    }

    else
    {
      a1 = 0LL;
    }

    goto LABEL_10;
  }

  __break(1u);
  return result;
}

BOOL sub_10014DFE8(id a1, PKExpressTransactionState *a2)
{
  return -[PKExpressTransactionState isProcessing](a2, "isProcessing") ^ 1;
}

void sub_10014E004(uint64_t a1)
{
}

void sub_10014E018(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_4;
  }
  if (v3)
  {
    id v7 = v3;
    id v4 = objc_autoreleasePoolPush();
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:]( v5,  "setObject:forKey:",  PKAnalyticsReportEventTypeExpressTransactionError,  PKAnalyticsReportEventKey);
    -[NSMutableDictionary setObject:forKey:]( v5,  "setObject:forKey:",  PKAnalyticsReportExpressTransactionPageTag,  PKAnalyticsReportPageTagKey);
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v7, PKAnalyticsReportErrorTypeKey);
    uint64_t v6 = PKAnalyticsSubjectExpressPresentment;
    +[PKAnalyticsReporter beginSubjectReporting:]( &OBJC_CLASS___PKAnalyticsReporter,  "beginSubjectReporting:",  PKAnalyticsSubjectExpressPresentment);
    +[PKAnalyticsReporter subject:sendEvent:](&OBJC_CLASS___PKAnalyticsReporter, "subject:sendEvent:", v6, v5);
    +[PKAnalyticsReporter endSubjectReporting:](&OBJC_CLASS___PKAnalyticsReporter, "endSubjectReporting:", v6);

    objc_autoreleasePoolPop(v4);
    id v3 = v7;
LABEL_4:

    return;
  }

  __break(1u);
}

void sub_10014E10C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_23;
  }
  if (!v3) {
    __break(1u);
  }
  uint64_t v5 = a1;
  if (![v3 count]) {
    goto LABEL_23;
  }
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v6 = v4;
  id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v31,  v35,  16LL);
  if (!v7) {
    goto LABEL_22;
  }
  id v8 = v7;
  __int128 v24 = v4;
  __int128 v9 = 0LL;
  uint64_t v10 = *(void *)v32;
  do
  {
    for (id i = 0LL; i != v8; id i = (char *)i + 1)
    {
      if (*(void *)v32 != v10) {
        objc_enumerationMutation(v6);
      }
      id v12 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
      unsigned __int8 v13 = objc_msgSend(v12, "isExpress", v24);
      unsigned __int8 v14 = [v12 isProcessing];
      unsigned __int8 v15 = v14;
      if ((v13 & 1) != 0)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 32));
        sub_1001AD840((uint64_t)WeakRetained, v12);

        if ((v15 & 1) != 0) {
          continue;
        }
      }

      else
      {
        if ((v14 & 1) != 0) {
          continue;
        }
        if ([v12 standaloneTransactionType]) {
          sub_10014B494(v5, v12, 0LL);
        }
      }

      if (!v9) {
        __int128 v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      }
      -[NSMutableArray addObject:](v9, "addObject:", v12);
    }

    id v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v31,  v35,  16LL);
  }

  while (v8);

  id v4 = v24;
  if (v9)
  {
    id v17 = (void *)PDOSTransactionCreate("PDExpressPassManager.express_transaction.resolved");
    id v18 = PDDefaultQueue();
    uint64_t v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v18);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10014EC44;
    block[3] = &unk_100639350;
    void block[4] = v5;
    id v29 = v17;
    id v20 = v9;
    uint64_t v30 = v20;
    id v21 = v17;
    dispatch_async(v19, block);

    id v22 = PDUtilityQueue();
    __int128 v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10014EDF8;
    v25[3] = &unk_1006392B0;
    dispatch_queue_t v26 = v20;
    uint64_t v27 = v5;
    uint64_t v6 = v20;
    dispatch_async(v23, v25);

LABEL_22:
  }

id sub_10014E398(uint64_t a1, void *a2)
{
  id result = a2;
  id v4 = result;
  if (!a1)
  {
LABEL_15:

    return (id)a1;
  }

  if (result)
  {
    char v16 = 0LL;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
    sub_10014DE74(a1, (void **)&v16, &stru_100646020);
    uint64_t v5 = *(void *)(a1 + 112);
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v8)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: updating existing express transaction state for generic standalone event.",  buf,  2u);
      }

      sub_10014DF3C(a1, v4, (void **)&v16);
      __int128 v9 = v16;
    }

    else
    {
      if (v8)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: creating express transaction state for generic standalone event.",  buf,  2u);
      }

      id v10 = +[PKExpressTransactionState createForExpressType:]( &OBJC_CLASS___PKExpressTransactionState,  "createForExpressType:",  0LL);
      id v11 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v10;

      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      void v13[2] = sub_10014E594;
      v13[3] = &unk_100646048;
      id v14 = v4;
      sub_10014DF3C(a1, v13, (void **)&v16);
      [*(id *)(a1 + 112) resolve];
      __int128 v9 = v16;
      if (!v16)
      {
        __int128 v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        char v16 = v9;
      }

      id v12 = [*(id *)(a1 + 112) copy];
      -[NSMutableArray addObject:](v9, "addObject:", v12);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
    if (v9) {
      sub_10014E10C(a1, v9);
    }
    BOOL v17 = v5 == 0;

    a1 = v17;
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

BOOL sub_10014E578(id a1, PKExpressTransactionState *a2)
{
  return -[PKExpressTransactionState isProcessing](a2, "isProcessing") ^ 1;
}

uint64_t sub_10014E594(uint64_t a1)
{
  return 0LL;
}

void *sub_10014E5B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  if (!a1)
  {
    uint64_t v45 = 0LL;
    goto LABEL_65;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:v11 subcredentialIdentifier:v12]);
  if (a2 != 1)
  {
    BOOL v17 = 0LL;
    goto LABEL_7;
  }

  id result = (void *)objc_claimAutoreleasedReturnValue([v13 aliro]);
  if (result)
  {
    char v16 = result;
    if ([result operationSource] != (id)5)
    {
      unsigned __int8 v53 = 0;

LABEL_64:
      uint64_t v45 = v53;
LABEL_65:

      return (void *)v45;
    }

    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([v16 terminalReaderIdentifier]);

LABEL_7:
    uint64_t v52 = 0LL;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
    sub_10014DE74(a1, (void **)&v52, &stru_100646068);
    id v18 = *(void **)(a1 + 112);
    if (!v18)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v55 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: creating express transaction state for standalone transaction of type %ld.",  buf,  0xCu);
      }

      if (v17) {
        id v28 = (id)objc_claimAutoreleasedReturnValue( +[PKExpressTransactionState createForStandaloneTransaction:applicationIdentifier:keyIdentifier:passUniqueIdentifier:terminalReaderIdentifier:]( &OBJC_CLASS___PKExpressTransactionState,  "createForStandaloneTransaction:applicationIdentifier:keyIdentifier:passUniqueIdentifier:terminalReaderIdentifier:",  a3,  v11,  v12,  v14,  v17));
      }
      else {
        id v28 = +[PKExpressTransactionState createForStandaloneTransaction:applicationIdentifier:keyIdentifier:passUniqueIdentifier:]( &OBJC_CLASS___PKExpressTransactionState,  "createForStandaloneTransaction:applicationIdentifier:keyIdentifier:passUniqueIdentifier:",  a3,  v11,  v12,  v14);
      }
      __int128 v32 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v28;

      goto LABEL_26;
    }

    unsigned int v19 = [v18 isAssociated];
    if ((v19 & 1) == 0)
    {
      uint64_t v29 = PKLogFacilityTypeGetObject(6LL);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v55 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: associating existing express transaction state with target of standalone transaction of type %ld.",  buf,  0xCu);
      }

      [*(id *)(a1 + 112) associateWithApplicationIdentifier:v11 keyIdentifier:v12 terminalReaderIdentifier:v17 passUniqueIdentifier:v14];
LABEL_22:
      if (v19 & (objc_msgSend(*(id *)(a1 + 112), "receiveStandaloneTransaction:", a3, v46) ^ 1))
      {
        char v31 = 1;
LABEL_60:
        __int128 v33 = v52;
LABEL_61:
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
        if (v33) {
          sub_10014E10C(a1, v33);
        }
        unsigned __int8 v53 = v31;

        goto LABEL_64;
      }

BOOL sub_10014EB04(id a1, PKExpressTransactionState *a2)
{
  return -[PKExpressTransactionState isProcessing](a2, "isProcessing") ^ 1;
}

uint64_t sub_10014EB20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (uint64_t (**)(void, void))v3;
  if (!a1) {
    goto LABEL_14;
  }
  if (!v3)
  {
    __break(1u);
LABEL_14:
    uint64_t v7 = 0LL;
    goto LABEL_10;
  }

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
  uint64_t v5 = *(void **)(a1 + 112);
  if (!v5 || ![v5 isProcessing])
  {
    uint64_t v7 = 0LL;
LABEL_9:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
    goto LABEL_10;
  }

  if ((v4[2](v4, *(void *)(a1 + 112)) & 1) == 0)
  {
    uint64_t v7 = 1LL;
    goto LABEL_9;
  }

  id v6 = [*(id *)(a1 + 112) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
  if (v6)
  {
    id v10 = v6;
    uint64_t v7 = 1LL;
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
    sub_10014E10C(a1, v8);
  }

  else
  {
    uint64_t v7 = 1LL;
  }

void sub_10014EC44(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_10014ECCC;
  v5[3] = &unk_100646090;
  uint64_t v2 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  sub_10014B7D8(v2, v5);
}

void sub_10014ECCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v3, "expressPassManager:didFinishExpressTransactionWithState:") & 1) != 0) {
          objc_msgSend( v3,  "expressPassManager:didFinishExpressTransactionWithState:",  *(void *)(a1 + 48),  v9,  (void)v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

void sub_10014EDF8(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if (objc_msgSend(v7, "isAssociated", (void)v8)
          && ([v7 isIgnorable] & 1) == 0)
        {
          sub_10014EF0C(*(void *)(a1 + 40), v7);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_10014EF0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
LABEL_11:

    return;
  }

  if (v3)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 passUniqueIdentifier]);
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) passWithUniqueIdentifier:v6]);
      if (v7)
      {
        if ([v4 type] == (id)5) {
          uint64_t v8 = 3LL;
        }
        else {
          uint64_t v8 = 0LL;
        }
        id v9 = PDHeavyQueue();
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        v11[2] = sub_100151360;
        v11[3] = &unk_10063A790;
        id v12 = v6;
        +[PKWalletTransactionSignal donateSignalForPass:transactionType:queue:completion:]( &OBJC_CLASS___PKWalletTransactionSignal,  "donateSignalForPass:transactionType:queue:completion:",  v7,  v8,  v10,  v11);
      }
    }

    objc_autoreleasePoolPop(v5);
    goto LABEL_11;
  }

  __break(1u);
}

uint64_t sub_10014F024(uint64_t result, char a2)
{
  if (!*(_BYTE *)(result + 40) && (a2 & 1) == 0) {
    return notify_post((const char *)[PKNotifyEventOutstandingExpressTransactionReady cStringUsingEncoding:4]);
  }
  return result;
}

void *sub_10014F1E0(uint64_t a1)
{
  return sub_10014E5B4( *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  *(void **)(a1 + 48),  *(void **)(a1 + 56),  *(void **)(a1 + 64));
}

void *sub_10014F308(uint64_t a1)
{
  return sub_10014E5B4( *(void *)(a1 + 40),  *(void *)(a1 + 72),  2LL,  *(void **)(a1 + 48),  *(void **)(a1 + 56),  *(void **)(a1 + 64));
}

void sub_10014F3D8(uint64_t a1)
{
}

void sub_10014F3E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_83;
  }
  switch((unint64_t)[v3 type])
  {
    case 0uLL:
      id v5 = v4;
      unint64_t v6 = (unint64_t)[v5 technologyType];
      uint64_t v7 = v6;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      __int16 v113 = sub_10014DA38;
      NSUInteger v114 = sub_10014DA48;
      id v115 = 0LL;
      uint64_t v106 = 0LL;
      __int128 v107 = &v106;
      uint64_t v108 = 0x3032000000LL;
      v109 = sub_10014DA38;
      v110 = sub_10014DA48;
      id v111 = 0LL;
      *(void *)__int128 v100 = 0LL;
      __int128 v101 = v100;
      uint64_t v102 = 0x3032000000LL;
      __int128 v103 = sub_10014DA38;
      __int128 v104 = sub_10014DA48;
      id v105 = 0LL;
      if (v6 <= 7 && ((1LL << v6) & 0xEA) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
        id v8 = [*(id *)(a1 + 96) copy];
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
        v99[0] = _NSConcreteStackBlock;
        v99[1] = 3221225472LL;
        v99[2] = sub_1001501B0;
        v99[3] = &unk_100646108;
        v99[4] = buf;
        v99[5] = &v106;
        v99[7] = v7;
        v99[6] = v100;
        [v8 enumerateKeysAndObjectsUsingBlock:v99];
      }

      v98[0] = _NSConcreteStackBlock;
      v98[1] = 3221225472LL;
      v98[2] = sub_1001503C8;
      v98[3] = &unk_100646130;
      v98[4] = buf;
      v98[5] = &v106;
      v98[6] = v100;
      sub_10014B174(a1, v7, v98);
      _Block_object_dispose(v100, 8);

      _Block_object_dispose(&v106, 8);
      _Block_object_dispose(buf, 8);

      goto LABEL_83;
    case 1uLL:
      v94[0] = _NSConcreteStackBlock;
      v94[1] = 3221225472LL;
      v94[2] = sub_1001504C4;
      v94[3] = &unk_100646158;
      v94[4] = a1;
      if ((sub_10014EB20(a1, v94) & 1) == 0)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: unbalanced exit of express mode.",  buf,  2u);
        }

        id v11 = PDUtilityQueue();
        id v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v11);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10015063C;
        block[3] = &unk_100639300;
        void block[4] = a1;
        dispatch_async(v12, block);
      }

      goto LABEL_83;
    case 2uLL:
      id v13 = v4;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 applicationIdentifier]);
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 keyIdentifier]);
      if (v14)
      {
        id v16 = sub_10014D8CC(a1, v14, v15);
        BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 passUniqueIdentifier]);
      }

      else
      {
        id v18 = 0LL;
      }

      v88[0] = _NSConcreteStackBlock;
      v88[1] = 3221225472LL;
      v88[2] = sub_100150650;
      v88[3] = &unk_100646180;
      id v89 = v14;
      id v90 = v15;
      id v91 = v18;
      uint64_t v92 = a1;
      id v40 = v14;
      id v41 = v15;
      id v42 = v18;
      if ((sub_10014EB20(a1, v88) & 1) == 0)
      {
        uint64_t v43 = PKLogFacilityTypeGetObject(6LL);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: ERROR - received transaction start event outside of express boundaries.",  buf,  2u);
        }
      }

      goto LABEL_83;
    case 3uLL:
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      __int16 v113 = sub_10014DA38;
      NSUInteger v114 = sub_10014DA48;
      id v115 = 0LL;
      uint64_t v106 = 0LL;
      __int128 v107 = &v106;
      uint64_t v108 = 0x3032000000LL;
      v109 = sub_10014DA38;
      v110 = sub_10014DA48;
      id v111 = 0LL;
      v87[0] = _NSConcreteStackBlock;
      v87[1] = 3221225472LL;
      v87[2] = sub_1001507E0;
      v87[3] = &unk_1006461A8;
      v87[4] = buf;
      v87[5] = &v106;
      if ((sub_10014EB20(a1, v87) & 1) != 0)
      {
        if (*(void *)(*(void *)&buf[8] + 40LL))
        {
          id v19 = PDUtilityQueue();
          id v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v19);
          v86[0] = _NSConcreteStackBlock;
          v86[1] = 3221225472LL;
          v86[2] = sub_100150864;
          v86[3] = &unk_1006461D0;
          v86[4] = a1;
          v86[5] = buf;
          v86[6] = &v106;
          dispatch_async(v20, v86);
        }
      }

      else
      {
        uint64_t v38 = PKLogFacilityTypeGetObject(6LL);
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 v100 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: ERROR - received transaction timeout event outside of express boundaries.",  v100,  2u);
        }
      }

      _Block_object_dispose(&v106, 8);

      _Block_object_dispose(buf, 8);
      goto LABEL_83;
    case 4uLL:
      id v21 = v4;
      switch((unint64_t)[v21 status])
      {
        case 0uLL:
          *(void *)__int128 buf = 0LL;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000LL;
          __int16 v113 = sub_10014DA38;
          NSUInteger v114 = sub_10014DA48;
          id v115 = 0LL;
          uint64_t v106 = 0LL;
          __int128 v107 = &v106;
          uint64_t v108 = 0x3032000000LL;
          v109 = sub_10014DA38;
          v110 = sub_10014DA48;
          id v111 = 0LL;
          v85[0] = _NSConcreteStackBlock;
          v85[1] = 3221225472LL;
          v85[2] = sub_100150EB8;
          v85[3] = &unk_1006461A8;
          v85[4] = buf;
          v85[5] = &v106;
          if ((sub_10014EB20(a1, v85) & 1) != 0)
          {
            if (*(void *)(*(void *)&buf[8] + 40LL))
            {
              id v22 = PDUtilityQueue();
              id v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
              v84[0] = _NSConcreteStackBlock;
              v84[1] = 3221225472LL;
              v84[2] = sub_100150F3C;
              v84[3] = &unk_1006461D0;
              v84[4] = a1;
              v84[5] = buf;
              v84[6] = &v106;
              dispatch_async(v23, v84);
            }
          }

          else
          {
            uint64_t v62 = PKLogFacilityTypeGetObject(6LL);
            uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 v100 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: ERROR - received transaction ended event outside of express boundaries.",  v100,  2u);
            }
          }

          _Block_object_dispose(&v106, 8);

          _Block_object_dispose(buf, 8);
          break;
        case 1uLL:
          if ((sub_10014EB20(a1, &stru_1006461F0) & 1) == 0)
          {
            uint64_t v59 = PKLogFacilityTypeGetObject(6LL);
            NSUInteger v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: ERROR - received transaction failed event outside of express boundaries.",  buf,  2u);
            }

            goto LABEL_60;
          }

          id v49 = PDUtilityQueue();
          __int128 v50 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v49);
          v83[0] = _NSConcreteStackBlock;
          v83[1] = 3221225472LL;
          v83[2] = sub_100150F68;
          v83[3] = &unk_100639300;
          v83[4] = a1;
          dispatch_async(v50, v83);

          break;
        case 2uLL:
          if ((sub_10014EB20(a1, &stru_100646210) & 1) != 0)
          {
            id v51 = PDUtilityQueue();
            uint64_t v52 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v51);
            v82[0] = _NSConcreteStackBlock;
            v82[1] = 3221225472LL;
            v82[2] = sub_100150F88;
            v82[3] = &unk_100639300;
            v82[4] = a1;
            dispatch_async(v52, v82);
          }

          else
          {
            uint64_t v61 = PKLogFacilityTypeGetObject(6LL);
            NSUInteger v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: ERROR - received transaction incompatible event outside of express boundaries.",  buf,  2u);
            }

LABEL_60:
          }

          break;
        case 3uLL:
          unsigned __int8 v53 = sub_10014DD50((os_unfair_lock_s *)a1);
          id v54 = v53;
          if (v53 && (-[os_unfair_lock_s isProcessing](v53, "isProcessing") & 1) != 0)
          {
            id v55 = (id)objc_claimAutoreleasedReturnValue(-[os_unfair_lock_s TCIs](v54, "TCIs"));
            if ([v55 count])
            {
              id v56 = PDDefaultQueue();
              v57 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v56);
              v79[0] = _NSConcreteStackBlock;
              v79[1] = 3221225472LL;
              v79[2] = sub_100150F9C;
              v79[3] = &unk_100639350;
              v79[4] = a1;
              id v80 = v55;
              id v81 = v21;
              id v55 = v55;
              dispatch_async(v57, v79);
            }

            else
            {
              uint64_t v71 = PKLogFacilityTypeGetObject(6LL);
              id v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
              if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: received transaction in key pairing mode event with no TCIs.",  buf,  2u);
              }
            }
          }

          else
          {
            uint64_t v58 = PKLogFacilityTypeGetObject(6LL);
            id v55 = (id)objc_claimAutoreleasedReturnValue(v58);
            if (os_log_type_enabled((os_log_t)v55, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v55,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: ERROR - received transaction in key pairing mode event outside of express boundaries.",  buf,  2u);
            }
          }

          break;
        default:
          break;
      }

      goto LABEL_83;
    case 5uLL:
      id v24 = v4;
      unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 applicationIdentifier]);
      dispatch_queue_t v26 = (void *)objc_claimAutoreleasedReturnValue([v24 keyIdentifier]);
      if (!v25)
      {
        uint64_t v45 = PKLogFacilityTypeGetObject(6LL);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          uint64_t v46 = "PKExpressPassManager: WARNING RECEIVED MALFORMED CREDENTIAL NOT FOUND EVENT.";
          uint64_t v47 = v29;
          uint32_t v48 = 2;
LABEL_70:
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
        }

void sub_100150160(_Unwind_Exception *a1)
{
}

void sub_1001501B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 passInformation]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100150254;
  v8[3] = &unk_1006460E0;
  __int128 v10 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = v6;
  id v9 = v4;
  id v7 = v4;
  [v5 enumerateCredentialsWithHandler:v8];
}

void sub_100150254(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v8 = a3;
  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    while (2)
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        if (objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v12), "technologyType", (void)v16) == *(id *)(a1 + 64))
        {

          if (+[PKExpressPassInformation extractApplicationIdentifier:subcredentialIdentifier:fromIdentifiers:]( &OBJC_CLASS___PKExpressPassInformation,  "extractApplicationIdentifier:subcredentialIdentifier:fromIdentifiers:",  *(void *)(*(void *)(a1 + 40) + 8LL) + 40LL,  *(void *)(*(void *)(a1 + 48) + 8LL) + 40LL,  v7))
          {
            uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passUniqueIdentifier]);
            uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
            unsigned __int8 v15 = *(void **)(v14 + 40);
            *(void *)(v14 + 40) = v13;
          }

          *a4 = 1;
          goto LABEL_13;
        }

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

LABEL_13:
}

uint64_t sub_1001503C8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(*(void *)(a1[4] + 8) + 40) && ([v3 isAssociated] & 1) == 0)
  {
    [v4 associateWithApplicationIdentifier:*(void *)(*(void *)(a1[4] + 8) + 40) keyIdentifier:*(void *)(*(void *)(a1[5] + 8) + 40) terminalReaderIdentifier:0 passUniqueIdentifier:*(void *)(*(void *)(a1[6] + 8) + 40)];
    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

uint64_t sub_100150448(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) TCIs]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 set]);

  if (v5) {
    [v3 associateWithTCIs:v5];
  }

  return 0LL;
}

void sub_1001504B0(uint64_t a1)
{
}

uint64_t sub_1001504C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passUniqueIdentifier]);

  if (!v4)
  {
    unsigned int v7 = [v3 isAssociated];
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v10)
      {
        *(_WORD *)__int128 buf = 0;
        uint64_t v11 = "PKExpressPassManager: exited express without identifying a pass.";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
      }
    }

    else if (v10)
    {
      *(_WORD *)__int128 buf = 0;
      uint64_t v11 = "PKExpressPassManager: exited express without identifying an applet or key.";
      goto LABEL_10;
    }

    id v12 = PDUtilityQueue();
    uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100150628;
    block[3] = &unk_100639300;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v13, block);

    goto LABEL_12;
  }

  uint64_t v5 = PKLogFacilityTypeGetObject(6LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: exited express.", buf, 2u);
  }

LABEL_12:
  [v3 resolve];

  return 1LL;
}

void sub_100150628(uint64_t a1)
{
}

void sub_10015063C(uint64_t a1)
{
}

uint64_t sub_100150650(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (uint64_t)[v3 receiveEvents:1];
  if (a1[4])
  {
    if ([v3 isAssociated])
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 applicationIdentifier]);
      if ((PKEqualObjects(v5, a1[4]) & 1) == 0)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = a1[4];
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v14 = v5;
          __int16 v15 = 2114;
          uint64_t v16 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: WARNING EXPRESS APPLET USED DOES NOT MATCH EXPECTATION: EXPECTED: %{public}@ ACTUAL: % {public}@! Please file a radar.",  buf,  0x16u);
        }

        id v9 = PDUtilityQueue();
        BOOL v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001507CC;
        block[3] = &unk_100639300;
        void block[4] = a1[7];
        dispatch_async(v10, block);
      }
    }

    else
    {
      [v3 associateWithApplicationIdentifier:a1[4] keyIdentifier:a1[5] terminalReaderIdentifier:0 passUniqueIdentifier:a1[6]];
      uint64_t v4 = 1LL;
    }
  }

  return v4;
}

void sub_1001507CC(uint64_t a1)
{
}

id sub_1001507E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 receiveEvents:2];
  if ((_DWORD)v4)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 passUniqueIdentifier]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    unsigned int v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = objc_claimAutoreleasedReturnValue([v3 applicationIdentifier]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    BOOL v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  return v4;
}

void sub_100150864(uint64_t *a1)
{
}

void sub_100150884(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  if (a1)
  {
    if (!v5) {
      __break(1u);
    }
    unsigned int v7 = objc_autoreleasePoolPush();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) passWithUniqueIdentifier:v5]);
    if (!v8)
    {
LABEL_50:

      objc_autoreleasePoolPop(v7);
      goto LABEL_51;
    }

    uint64_t v59 = v7;
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:]( v9,  "setObject:forKey:",  PKAnalyticsReportEventTypeExpressTransaction,  PKAnalyticsReportEventKey);
    -[NSMutableDictionary setObject:forKey:]( v9,  "setObject:forKey:",  PKAnalyticsReportExpressTransactionPageTag,  PKAnalyticsReportPageTagKey);
    BOOL v10 = v9;
    id v11 = v8;
    id v12 = v11;
    if (!v10)
    {
LABEL_29:

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v12 secureElementPass]);
      id v39 = (char *)[v38 cardType];

      if ((unint64_t)(v39 - 1) <= 1)
      {
        uint64_t v40 = objc_claimAutoreleasedReturnValue([v12 organizationName]);
        id v41 = (void *)v40;
        if (v40) {
          uint64_t v42 = v40;
        }
        else {
          uint64_t v42 = PKAnalyticsReportUnknownValue;
        }
        -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v42, PKAnalyticsReportIssuerNameKey);
      }

      if (-[__CFString length](v6, "length"))
      {
        v57 = v8;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v12 paymentPass]);
        uint64_t v58 = v6;
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 paymentApplicationForAID:v6]);

        uint64_t v45 = PKPaymentNetworkNameForPaymentCredentialType([v44 paymentNetworkIdentifier]);
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        -[NSMutableDictionary safelySetObject:forKey:]( v10,  "safelySetObject:forKey:",  v46,  PKAnalyticsReportPaymentNetworkNameKey);
        __int128 v60 = 0u;
        __int128 v61 = 0u;
        __int128 v62 = 0u;
        __int128 v63 = 0u;
        uint64_t v47 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v44, 0LL);
        id v48 = -[NSSet countByEnumeratingWithState:objects:count:]( v47,  "countByEnumeratingWithState:objects:count:",  &v60,  v64,  16LL);
        if (v48)
        {
          id v49 = v48;
          id v50 = 0LL;
          uint64_t v51 = *(void *)v61;
          while (2)
          {
            for (id i = 0LL; i != v49; id i = (char *)i + 1)
            {
              if (*(void *)v61 != v51) {
                objc_enumerationMutation(v47);
              }
              unsigned __int8 v53 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)i);
              if (v50 && v50 != [*(id *)(*((void *)&v60 + 1) + 8 * (void)i) paymentType])
              {

                id v54 = @"multiple";
                goto LABEL_48;
              }

              id v50 = [v53 paymentType];
            }

            id v49 = -[NSSet countByEnumeratingWithState:objects:count:]( v47,  "countByEnumeratingWithState:objects:count:",  &v60,  v64,  16LL);
            if (v49) {
              continue;
            }
            break;
          }
        }

        else
        {
          id v50 = 0LL;
        }

        uint64_t v55 = PKPaymentMethodTypeToString(v50);
        id v54 = (__CFString *)objc_claimAutoreleasedReturnValue(v55);
LABEL_48:

        -[NSMutableDictionary safelySetObject:forKey:]( v10,  "safelySetObject:forKey:",  v54,  PKAnalyticsReportPaymentMethodTypeKey);
        uint64_t v8 = v57;
        uint64_t v6 = v58;
      }

      uint64_t v56 = PKAnalyticsSubjectExpressPresentment;
      +[PKAnalyticsReporter beginSubjectReporting:]( &OBJC_CLASS___PKAnalyticsReporter,  "beginSubjectReporting:",  PKAnalyticsSubjectExpressPresentment);
      +[PKAnalyticsReporter subject:sendEvent:](&OBJC_CLASS___PKAnalyticsReporter, "subject:sendEvent:", v56, v10);
      +[PKAnalyticsReporter endSubjectReporting:](&OBJC_CLASS___PKAnalyticsReporter, "endSubjectReporting:", v56);

      unsigned int v7 = v59;
      goto LABEL_50;
    }

    id v13 = [v11 passType];
    else {
      uint64_t v14 = off_1006462C0[(void)v13 + 1];
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v14,  PKAnalyticsReportPassTypeKey);

    unint64_t v15 = (unint64_t)[v12 style];
    if (v15 < 0xD && ((0x13FFu >> v15) & 1) != 0) {
      uint64_t v16 = off_1006462D8[v15];
    }
    else {
      uint64_t v16 = (__CFString *)PKAnalyticsReportUnknownValue;
    }
    __int128 v17 = v6;
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v16,  PKAnalyticsReportPassStyleKey);

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v12 nfcPayload]);
    uint64_t v19 = PKAnalyticsReportSwitchToggleResultValue(v18 != 0LL);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v20,  PKAnalyticsReportPassHasNFCKey);

    id v21 = v12;
    if ([v21 passType] == (id)1)
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 secureElementPass]);
      id v23 = [v22 cardType];
    }

    else
    {
      uint64_t v6 = @"other";
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v6,  PKAnalyticsReportPassProductTypeKey);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v21 secureElementPass]);
    if ([v24 isIdentityPass])
    {
      unsigned int v25 = (char *)[v24 identityType];
      if ((unint64_t)(v25 - 1) < 3)
      {
        id v26 = *(&off_100646368 + (void)(v25 - 1));
        goto LABEL_24;
      }
    }

    else if ([v24 isAccessPass])
    {
      id v27 = [v24 accessType];
      if ((unint64_t)v27 < 7)
      {
        id v26 = *(&off_100646380 + (void)v27);
        goto LABEL_24;
      }
    }

    id v26 = PKAnalyticsReportUnknownValue;
LABEL_24:

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v26,  PKAnalyticsReportPassProductSubtypeKey);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v21 secureElementPass]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 devicePaymentApplications]);
    BOOL v30 = (unint64_t)[v29 count] > 1;

    uint64_t v31 = PKAnalyticsReportSwitchToggleResultValue(v30);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v32,  PKAnalyticsReportCoBadgeEnableKey);
    uint32_t v33 = (void *)objc_claimAutoreleasedReturnValue([v21 secureElementPass]);
    id v34 = PKAnalyticsReportUnknownValue;
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v33 organizationName]);
    if ([v35 length])
    {
      unint64_t v36 = (unint64_t)[v33 cardType];
      if (v36 <= 4 && ((1LL << v36) & 0x16) != 0)
      {
        id v37 = v35;

        id v34 = v37;
      }
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v34,  PKAnalyticsReportIssuerNameKey);
    uint64_t v6 = v17;
    goto LABEL_29;
  }

id sub_100150EB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 receiveEvents:4];
  if ((_DWORD)v4)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 passUniqueIdentifier]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    unsigned int v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = objc_claimAutoreleasedReturnValue([v3 applicationIdentifier]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    BOOL v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  return v4;
}

void sub_100150F3C(uint64_t *a1)
{
}

BOOL sub_100150F5C(id a1, PKExpressTransactionState *a2)
{
  return -[PKExpressTransactionState receiveEvents:](a2, "receiveEvents:", 256LL);
}

void sub_100150F68(uint64_t a1)
{
}

BOOL sub_100150F7C(id a1, PKExpressTransactionState *a2)
{
  return -[PKExpressTransactionState receiveEvents:](a2, "receiveEvents:", 512LL);
}

void sub_100150F88(uint64_t a1)
{
}

void sub_100150F9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 144LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) brandCode]);
  objc_msgSend(v2, "initiateNativePairingIfPossibleFromTCIs:brandCode:", v1, objc_msgSend(v3, "integerValue"));
}

uint64_t sub_100150FEC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  unsigned __int8 v5 = [v3 isAssociated];
  if (v4)
  {
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 applicationIdentifier]);
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v3 keyIdentifier]);
      uint64_t v8 = (void *)a1[4];
      id v9 = v6;
      id v10 = v8;
      if (v9 == v10)
      {
      }

      else
      {
        id v11 = v10;
        if (!v9 || !v10)
        {

LABEL_18:
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          if (v7)
          {
            if (v20)
            {
              uint64_t v21 = a1[4];
              int v35 = 138543874;
              id v36 = v9;
              __int16 v37 = 2114;
              id v38 = v7;
              __int16 v39 = 2114;
              uint64_t v40 = v21;
              id v22 = "PKExpressPassManager: WARNING EXPRESS KEY (%{public}@:%{public}@) IN USE. DOES NOT MATCH REQUESTED A"
                    "PPLET %{public}@! Please file a radar.";
LABEL_31:
              BOOL v30 = v19;
              uint32_t v31 = 32;
LABEL_37:
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&v35, v31);
              goto LABEL_38;
            }

            goto LABEL_38;
          }

          if (!v20) {
            goto LABEL_38;
          }
          id v26 = (void *)a1[4];
          int v35 = 138543618;
          id v36 = v9;
          __int16 v37 = 2114;
          id v38 = v26;
          id v22 = "PKExpressPassManager: WARNING EXPRESS APPLET %{public}@ IN USE. DOES NOT MATCH REQUESTED APPLET %{public"
                "}@! Please file a radar.";
          goto LABEL_36;
        }

        unsigned __int8 v12 = [v9 isEqualToString:v10];

        if ((v12 & 1) == 0) {
          goto LABEL_18;
        }
      }

      id v13 = (void *)a1[5];
      id v14 = v7;
      id v15 = v13;
      if (v14 == v15)
      {
      }

      else
      {
        uint64_t v16 = v15;
        if (!v14 || !v15)
        {

          if (!v14)
          {
            uint64_t v32 = PKLogFacilityTypeGetObject(6LL);
            uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_38;
            }
            uint32_t v33 = (void *)a1[5];
            int v35 = 138543618;
            id v36 = v9;
            __int16 v37 = 2114;
            id v38 = v33;
            id v22 = "PKExpressPassManager: WARNING EXPRESS APPLET %{public}@ IN USE. DOES NOT MATCH REQUESTED KEY %{public}"
                  "@! Please file a radar.";
            goto LABEL_36;
          }

          goto LABEL_28;
        }

        unsigned __int8 v17 = [v14 isEqualToString:v15];

        if ((v17 & 1) == 0)
        {
LABEL_28:
          uint64_t v27 = a1[5];
          uint64_t v28 = PKLogFacilityTypeGetObject(6LL);
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          BOOL v29 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          if (v27)
          {
            if (v29)
            {
              int v35 = 138543874;
              id v36 = v9;
              __int16 v37 = 2114;
              id v38 = v14;
              __int16 v39 = 2114;
              uint64_t v40 = v27;
              id v22 = "PKExpressPassManager: WARNING EXPRESS KEY (%{public}@:%{public}@) IN USE. DOES NOT MATCH REQUESTED K"
                    "EY %{public}@! Please file a radar.";
              goto LABEL_31;
            }

void sub_10015134C(uint64_t a1)
{
}

void sub_100151360(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Unable to donate signal for pass %@. Error: %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_10015151C(uint64_t a1)
{
}

void sub_100151588(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 144), a2);
  }
}

PKExpressPassConfiguration *sub_100151648(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passUniqueIdentifier]);
  if (*(_BYTE *)(a1 + 40))
  {
    unsigned __int8 v5 = -[PKExpressPassConfiguration initWithPassInformation:isNFCExpressEnabled:isUWBExpressEnabled:]( objc_alloc(&OBJC_CLASS___PKExpressPassConfiguration),  "initWithPassInformation:isNFCExpressEnabled:isUWBExpressEnabled:",  v3,  1LL,  1LL);
  }

  else
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:v4]);
    unsigned __int8 v5 = -[PKExpressPassConfiguration initWithPassInformation:forPaymentApplications:]( objc_alloc(&OBJC_CLASS___PKExpressPassConfiguration),  "initWithPassInformation:forPaymentApplications:",  v3,  v6);

    id v3 = (id)v6;
  }

  return v5;
}

id sub_1001516F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_100151A24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100151A3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100151A4C(uint64_t a1)
{
}

BOOL sub_100151A54(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_100151C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = *(id *)(a4 + 24);
  id v10 = *(void **)(a1 + 32);
  id v13 = v9;
  if (v9)
  {
    uint64_t v11 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)a4);
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v10 setContent:v12];

    [*(id *)(a1 + 32) setCurrencyCode:v13];
  }

  else
  {
    [v10 setContent:*(void *)(a4 + 8)];
  }

  objc_msgSend( *(id *)(a1 + 32),  "setNumberStyle:",  (int)_PKEnumValueFromString( *(void *)(a4 + 16),  0,  @"PKNumberStyle",  @"PKNumberStyleDecimal, WLNumberStyleDecimal, PKNumberStylePercent, WLNumberStylePercent, PKNumberStyleScientific, WLNumberStyleScientific, PKNumberStyleSpellOut, WLNumberStyleSpellOut"),  1,  1,  3,  3,  4,  4,  5,  5);
  *a6 = 1;
}

void sub_10015240C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100152578(id a1, PKApplyFooterContent *a2, id a3)
{
}

id sub_1001537F4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(34LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Handle<%@> End Tracking", (uint8_t *)&v6, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_lock_removeAncillaryServiceForTracker:", *(void *)(a1 + 48));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 72LL));
  return [*(id *)(a1 + 32) _handleDidInvalidateForTransportIdentifier:*(void *)(a1 + 40)];
}

id sub_1001539C8(uint64_t a1, void *a2)
{
  return [a2 handleOutstandingShareMessage:*(void *)(a1 + 32) transportIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_100153BE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_100153D60(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_100153F1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100154238(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 transportIdentifier]);
  [v4 handleOutstandingShareMessage:v2 transportIdentifier:v5];
}

id sub_1001543E0(uint64_t a1, void *a2)
{
  return _[a2 channelWasRemotelyTerminatedWithTransportIdentifier:*(void *)(a1 + 32)];
}

uint64_t sub_100154E04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100154F7C(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 || !a2) {
    return (id)(*(uint64_t (**)(void, void))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), 0LL);
  }
  id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v8 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));
  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transportIdentifier]);
  [v4 insertOrUpdateSharingMessages:v5 storePayloads:0 transportIdentifier:v6];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  id result = [*(id *)(a1 + 56) type];
  if (result == (id)1) {
    return [*(id *)(*(void *)(a1 + 32) + 96) scheduleNextCheckIfNeeded];
  }
  return result;
}

void sub_100155178(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0LL, v6);
    }
  }

  else
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v8 = [v5 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v19;
      do
      {
        for (id i = 0LL; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v5);
          }
          unsigned __int8 v12 = *(void **)(*(void *)(a1 + 32) + 16LL);
          uint64_t v22 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)i);
          id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v22,  1LL));
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transportIdentifier]);
          [v12 insertOrUpdateSharingMessages:v13 storePayloads:1 transportIdentifier:v14];
        }

        id v9 = [v5 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }

      while (v9);
    }

    id v15 = *(void **)(*(void *)(a1 + 32) + 16LL);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transportIdentifier]);
    unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([v15 sharingMessagesForTransportIdentifier:v16]);

    [*(id *)(a1 + 40) didReceiveMessages:v17];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100155424(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!v5 && (_DWORD)a2)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportIdentifier", 0));
    [*(id *)(*(void *)(a1 + 40) + 16) deleteSharingEndpointForTransportIdentifier:v6];
    [*(id *)(*(void *)(a1 + 40) + 16) deleteSharingMessagesForTransportIdentifier:v6];

    id v5 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v8);
    id v5 = v8;
  }
}

void sub_10015559C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!v5 && (_DWORD)a2)
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 16LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "transportIdentifier", 0));
    [v6 deleteSharingEndpointForTransportIdentifier:v7];

    id v5 = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v9);
    id v5 = v9;
  }
}

void sub_100155A84(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_arrayBySafelyApplyingBlock:", &stru_1006464E0));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100155AD4(id a1, IDSDevice *a2)
{
  uint64_t v2 = a2;
  if (-[IDSDevice deviceType](v2, "deviceType") == (id)2)
  {
    id v3 = (void *)IDSCopyIDForDevice(v2);
    id v4 = +[PKSharingIDSChannelDescriptor createWithDeviceIdentifier:]( &OBJC_CLASS___PKSharingIDSChannelDescriptor,  "createWithDeviceIdentifier:",  v3);
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

BOOL sub_100155D68(id a1, PDSharingChannel_AncillaryService *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___PDSharingChannel_BLEProximityVerificationAncillaryService, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  return isKindOfClass & 1;
}

void sub_100155E7C(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [*(id *)(a1 + 32) type];
  if (!v9) {
    goto LABEL_9;
  }
  if (v3 != (id)1) {
    goto LABEL_9;
  }
  id v4 = -[PDSharingChannel_BLEProximityVerificationAncillaryService initDetectorWithAdvertisement:remoteDevice:delegate:completion:]( objc_alloc(&OBJC_CLASS___PDSharingChannel_BLEProximityVerificationAncillaryService),  "initDetectorWithAdvertisement:remoteDevice:delegate:completion:",  *(void *)(a1 + 32),  v9,  *(void *)(a1 + 40),  *(void *)(a1 + 56));
  if (!v4) {
    goto LABEL_9;
  }
  id v5 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 72LL));
  id v6 = *(void **)(*(void *)(a1 + 40) + 80LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transportIdentifier]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v7]);

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "_lock_addAncillaryService:forTracker:", v5, v8);
  }

  else
  {

    id v5 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 72LL));

  if (v5)
  {
    [v5 start];
  }

  else
  {
LABEL_9:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100156F2C(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CreditAccountStatement),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[CreditAccountStatement creditAccountStatement](v5, "creditAccountStatement"));
  [v3 addObject:v4];
}

void sub_1001570EC(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CreditAccountStatement),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[CreditAccountStatement creditAccountStatement](v5, "creditAccountStatement"));
  [v3 addObject:v4];
}

void sub_10015755C(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CreditAccountStatement),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_100157FF8(id a1, PKCreditAccountStatement *a2, id a3)
{
}

void sub_100158000(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountStatement setOpeningDate:](v4, "setOpeningDate:", v5);
}

void sub_10015804C(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountStatement setClosingDate:](v4, "setClosingDate:", v5);
}

void sub_100158098(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountStatement setPaymentDueDate:](v4, "setPaymentDueDate:", v5);
}

void sub_1001580E4(id a1, PKCreditAccountStatement *a2, id a3)
{
}

void sub_1001580EC(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setStatementBalance:](v4, "setStatementBalance:", v6);
}

void sub_10015813C(id a1, PKCreditAccountStatement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKCreditAccountStatement setTotalBalance:](v4, "setTotalBalance:", v6);
  }

void sub_100158194(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setMinimumDue:](v4, "setMinimumDue:", v6);
}

void sub_1001581E4(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setPurchases:](v4, "setPurchases:", v6);
}

void sub_100158234(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setFeesCharged:](v4, "setFeesCharged:", v6);
}

void sub_100158284(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setInterestCharged:](v4, "setInterestCharged:", v6);
}

void sub_1001582D4(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setBalanceTransfers:](v4, "setBalanceTransfers:", v6);
}

void sub_100158324(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setPaymentsAndCredits:](v4, "setPaymentsAndCredits:", v6);
}

void sub_100158374(id a1, PKCreditAccountStatement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKCreditAccountStatement setPayments:](v4, "setPayments:", v6);
  }

void sub_1001583CC(id a1, PKCreditAccountStatement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    -[PKCreditAccountStatement setCredits:](v4, "setCredits:", v6);
  }

void sub_100158424(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setRewardsBalance:](v4, "setRewardsBalance:", v6);
}

void sub_100158474(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setRewardsEarned:](v4, "setRewardsEarned:", v6);
}

void sub_1001584C4(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setRewardsRedeemed:](v4, "setRewardsRedeemed:", v6);
}

void sub_100158514(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setRewardsYTD:](v4, "setRewardsYTD:", v6);
}

void sub_100158564(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountStatement setRewardsLifetime:](v4, "setRewardsLifetime:", v6);
}

void sub_1001585B4(id a1, PKCreditAccountStatement *a2, id a3)
{
}

void sub_100158698(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id sub_100158A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a3 values:a4];
}

void sub_100158BCC(id a1, PKTransactionReleasedDataApplication *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    -[PKTransactionReleasedDataApplication setClient:](v4, "setClient:", [a3 unsignedIntegerValue]);
  }

void sub_100158C18(id a1, PKTransactionReleasedDataApplication *a2, id a3)
{
  if (a3) {
    -[PKTransactionReleasedDataApplication setBundleIdentifier:](a2, "setBundleIdentifier:");
  }
}

void sub_100158C28(id a1, PKTransactionReleasedDataApplication *a2, id a3)
{
  if (a3) {
    -[PKTransactionReleasedDataApplication setUsageDescription:](a2, "setUsageDescription:");
  }
}

id sub_100158E94(uint64_t a1, uint64_t a2)
{
  return +[ASCAssociatedReaderIDReaderCA deleteAssociatedReaderIDReaderCAForAssociatedReaderIDPID:inDatabase:]( &OBJC_CLASS___ASCAssociatedReaderIDReaderCA,  "deleteAssociatedReaderIDReaderCAForAssociatedReaderIDPID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

void sub_1001592F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v9 = objc_alloc_init(&OBJC_CLASS___PKASCAssociatedReaderID);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v7 values:a4];

  if (v9)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[ASCAssociatedReaderIDReaderCA associatedReaderIDReaderCAForAssociatedReaderIDPID:inDatabase:]( &OBJC_CLASS___ASCAssociatedReaderIDReaderCA,  "associatedReaderIDReaderCAForAssociatedReaderIDPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
    -[PKASCAssociatedReaderID setReaderCA:](v9, "setReaderCA:", v8);

    [*(id *)(a1 + 48) addObject:v9];
  }
}

void sub_1001594DC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001596D8(id a1, PKASCAssociatedReaderID *a2, id a3)
{
}

void sub_1001596E0(id a1, PKASCAssociatedReaderID *a2, id a3)
{
  id v4 = a2;
  -[PKASCAssociatedReaderID setPriority:](v4, "setPriority:", [a3 unsignedIntegerValue]);
}

void sub_1001599FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100159A14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100159A24(uint64_t a1)
{
}

uint64_t sub_100159A2C(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithMetadata:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (!v2) {
    goto LABEL_10;
  }
  id v3 = [*(id *)(a1 + 32) type];
  if (v3 == (id)3)
  {
    id v4 = &OBJC_CLASS___TileMetadataVerticalFlowGroup;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataTypeVerticalFlowGroup]);
    goto LABEL_8;
  }

  if (v3 == (id)2)
  {
    id v4 = &OBJC_CLASS___TileMetadataHorizontalFlowGroup;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataTypeHorizontalFlowGroup]);
LABEL_8:
    uint64_t v6 = (void *)v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( -[__objc2_class insertMetadata:forBaseMetadata:inDatabase:]( v4,  "insertMetadata:forBaseMetadata:inDatabase:",  v5,  v2,  *(void *)(a1 + 40)));

    if (v7) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v8 = 0LL;
    goto LABEL_11;
  }

  if (v3 == (id)1)
  {
    id v4 = &OBJC_CLASS___TileMetadataRKE;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataTypeVehicleFunction]);
    goto LABEL_8;
  }

void sub_100159D60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100159D80(uint64_t a1, void *a2, id *a3)
{
  id v10 = a2;
  id v5 = *a3;
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (!v6)
    {
      id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    }

    [v6 addObject:v5];
  }
}

void sub_10015A0A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
}

void sub_10015A0D4(uint64_t a1, uint64_t a2, id *a3)
{
  id v14 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v5 = *a3;
  if (v5 == v14)
  {

    id v5 = 0LL;
  }

  PKPassTileTypeFromString(v5, *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  id v6 = a3[1];
  if (v6) {
    BOOL v7 = v6 == v14;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    id v8 = a3[2];

    if (v8 == v14)
    {

      id v8 = 0LL;
    }

    id v9 = +[PKPassTileMetadata _createMetadataForType:identifier:context:]( &OBJC_CLASS___PKPassTileMetadata,  "_createMetadataForType:identifier:context:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),  v6,  PKPassTileContextFromString(v8));
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v5 = a3[3];
    if (v5 == v14)
    {

      id v5 = 0LL;
    }

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setPreferredStyle:PKPassTileStyleFromString(v5)];
    id v12 = a3[4];
    if (v12 == v14)
    {

      id v12 = 0LL;
    }

    objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40),  "setSelectable:",  objc_msgSend(v12, "BOOLValue"));
    id v13 = a3[5];

    if (v13 == v14)
    {

      id v13 = 0LL;
    }

    objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40),  "setShowInPrearm:",  objc_msgSend(v13, "BOOLValue"));
  }
}

void sub_10015AA98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v15 = objc_alloc_init(&OBJC_CLASS___PKPayLaterPayment);
  id v8 = objc_alloc(&OBJC_CLASS___PayLaterPayment);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v10 = -[SQLiteEntity initWithPersistentID:inDatabase:](v8, "initWithPersistentID:inDatabase:", a2, v9);

  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v15 withProperties:v7 values:a4];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterPayment _amount](v10, "_amount"));
  -[PKPayLaterPayment setAmount:](v15, "setAmount:", v11);

  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterPayment _interestPaid](v10, "_interestPaid"));
  -[PKPayLaterPayment setInterestPaid:](v15, "setInterestPaid:", v12);

  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterPayment _principalPaid](v10, "_principalPaid"));
  -[PKPayLaterPayment setPrincipalPaid:](v15, "setPrincipalPaid:", v13);

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterPaymentFundingSource paymentFundingSourcesForPaymentPID:inDatabase:]( &OBJC_CLASS___PayLaterPaymentFundingSource,  "paymentFundingSourcesForPaymentPID:inDatabase:",  a2,  *(void *)(a1 + 48)));
  -[PKPayLaterPayment setFundingSources:](v15, "setFundingSources:", v14);

  [*(id *)(a1 + 56) safelyAddObject:v15];
}

void sub_10015B5D0(id a1, PKPayLaterPayment *a2, id a3)
{
}

void sub_10015B5D8(id a1, PKPayLaterPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterPayment setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10015B61C(id a1, PKPayLaterPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterPayment setSubtype:](v4, "setSubtype:", [a3 integerValue]);
}

void sub_10015B660(id a1, PKPayLaterPayment *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterPayment setPostedDate:](v4, "setPostedDate:", v5);
}

void sub_10015B6AC(id a1, PKPayLaterPayment *a2, id a3)
{
}

void *sub_10015B6CC(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  v6.receiver = a1;
  v6.super_class = (Class)&OBJC_CLASS___PDFieldDetectorManager;
  uint64_t v1 = objc_msgSendSuper2(&v6, "init");
  id v2 = v1;
  if (v1)
  {
    *((_DWORD *)v1 + 3) = 0;
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
    id v4 = (void *)v2[3];
    v2[3] = v3;

    PDNFSecureXPCRegisterFieldDetectEventObserver(v2);
  }

  return v2;
}

void sub_10015B78C(uint64_t a1)
{
  if (a1)
  {
    id v2 = (dispatch_queue_s *)sub_10015B7F8();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10015B838;
    block[3] = &unk_100639300;
    void block[4] = a1;
    dispatch_async(v2, block);
  }

id sub_10015B7F8()
{
  if (qword_1007079F8 != -1) {
    dispatch_once(&qword_1007079F8, &stru_100646A28);
  }
  return (id)qword_100707A00;
}

uint64_t sub_10015B838(uint64_t result)
{
  uint64_t v1 = result;
  id v2 = (unsigned __int8 *)(*(void *)(result + 32) + 8LL);
  while (!__ldaxr(v2))
  {
    if (!__stlxr(1u, v2))
    {
      id result = PDFieldDetectAvailable();
      *(_BYTE *)(*(void *)(v1 + 32) + 48LL) = result;
      return result;
    }
  }

  __clrex();
  __break(1u);
  return result;
}

void sub_10015B884(uint64_t a1)
{
  if (a1)
  {
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 8));
    if ((v1 & 1) != 0)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10015B91C;
      block[3] = &unk_100639300;
      void block[4] = a1;
      id v2 = (dispatch_queue_s *)sub_10015B7F8();
      dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
      dispatch_async(v2, v3);
    }
  }

uint64_t sub_10015B91C(uint64_t a1)
{
  uint64_t result = PDFieldDetectAvailable();
  uint64_t v3 = *(void *)(a1 + 32);
  return result;
}

void sub_10015B950(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_4;
  }
  id v4 = v3;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 12));
    [*(id *)(a1 + 24) addObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 12));
    id v3 = v4;
LABEL_4:

    return;
  }

  __break(1u);
}

void sub_10015B9AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_4;
  }
  id v4 = v3;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 12));
    [*(id *)(a1 + 24) removeObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 12));
    id v3 = v4;
LABEL_4:

    return;
  }

  __break(1u);
}

id *sub_10015BA08(os_unfair_lock_s *a1)
{
  id WeakRetained = (id *)a1;
  if (a1)
  {
    id v2 = a1 + 3;
    os_unfair_lock_lock(a1 + 3);
    id WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 2);
    os_unfair_lock_unlock(v2);
  }

  return WeakRetained;
}

void sub_10015BA4C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 12);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    objc_storeWeak((id *)(a1 + 16), v4);

    os_unfair_lock_unlock(v3);
  }

id *sub_10015BAA0(os_unfair_lock_s *a1)
{
  unsigned __int8 v1 = (id *)a1;
  if (a1)
  {
    id v2 = a1 + 3;
    os_unfair_lock_lock(a1 + 3);
    unsigned __int8 v1 = (id *)v1[4];
    os_unfair_lock_unlock(v2);
  }

  return v1;
}

void sub_10015BB74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 40))
  {
    [*(id *)(v2 + 40) invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  id v5 = sub_10015BA08((os_unfair_lock_s *)v2);
  objc_super v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v6 && [v6 fieldDetectorManagerShouldSuppressFieldEvents:*(void *)(a1 + 32)])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDFieldDetectorManager: ignoring field entrance.",  (uint8_t *)&v21,  2u);
    }
  }

  else
  {
    id v10 = [*(id *)(a1 + 40) terminalType];
    uint64_t v11 = PKLogFacilityTypeGetObject(6LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v10 == (id)5)
    {
      if (v13)
      {
        LOWORD(v21) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "PDFieldDetectorManager: ignoring connection handover entrance.",  (uint8_t *)&v21,  2u);
      }
    }

    else
    {
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v21 = 138412290;
        uint64_t v22 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "PDFieldDetectorManager: did enter field %@.",  (uint8_t *)&v21,  0xCu);
      }

      uint64_t v15 = PKAnalyticsSubjectFieldDetect;
      +[PKAnalyticsReporter beginSubjectReporting:]( &OBJC_CLASS___PKAnalyticsReporter,  "beginSubjectReporting:",  PKAnalyticsSubjectFieldDetect);
      uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v16,  "setObject:forKeyedSubscript:",  PKAnalyticsReportEventTypeFieldEntered,  PKAnalyticsReportEventKey);
      unsigned __int8 v17 = *(void **)(a1 + 40);
      __int128 v18 = v16;
      unint64_t v19 = (unint64_t)[v17 terminalType];
      if (v19 <= 5)
      {
        if (((1LL << v19) & 0x2D) == 0)
        {
          uint64_t v20 = PKAnalyticsReportReaderTypeKey;
          if (v19 != 1) {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  @"identity",  PKAnalyticsReportReaderTypeKey);
          }
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  @"payment",  v20);
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v18,  "setObject:forKeyedSubscript:",  PKAnalyticsReportOtherValue,  PKAnalyticsReportReaderTypeKey);
      }

      +[PKAnalyticsReporter subject:sendEvent:](&OBJC_CLASS___PKAnalyticsReporter, "subject:sendEvent:", v15, v18);
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
      sub_10015BE24(*(void *)(a1 + 32), *(void **)(a1 + 40));
    }
  }
}

void sub_10015BE24(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 12));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) allObjects]);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 12));
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend( *(id *)(*((void *)&v10 + 1) + 8 * (void)v9),  "fieldDetectorManager:didEnterFieldWithProperties:",  a1,  v3,  (void)v10);
          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v7);
    }
  }
}

void sub_10015BFBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 40))
  {
    [*(id *)(v4 + 40) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;

    uint64_t v4 = *(void *)(a1 + 32);
  }

  id v7 = sub_10015BA08((os_unfair_lock_s *)v4);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v8) {
    unsigned __int8 v10 = [v8 fieldDetectorManagerShouldSuppressFieldEvents:*(void *)(a1 + 32)];
  }
  else {
    unsigned __int8 v10 = 0;
  }
  uint64_t v11 = PKAnalyticsSubjectFieldDetect;
  uint64_t v29 = PKAnalyticsReportEventKey;
  uint64_t v30 = PKAnalyticsReportEventTypeFieldExited;
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
  +[PKAnalyticsReporter subject:sendEvent:](&OBJC_CLASS___PKAnalyticsReporter, "subject:sendEvent:", v11, v12);

  +[PKAnalyticsReporter endSubjectReporting:](&OBJC_CLASS___PKAnalyticsReporter, "endSubjectReporting:", v11);
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if ((v10 & 1) != 0)
    {
      if (!v15) {
        goto LABEL_25;
      }
      *(_WORD *)__int128 buf = 0;
      uint64_t v22 = "PDFieldDetectorManager: did exit field (suppressed).";
    }

    else
    {
      if (!v15) {
        goto LABEL_25;
      }
      *(_WORD *)__int128 buf = 0;
      uint64_t v22 = "PDFieldDetectorManager: did exit field (unbalanced).";
    }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v22, buf, 2u);
    goto LABEL_25;
  }

  if (v15)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "PDFieldDetectorManager: did exit field.",  buf,  2u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) allObjects]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v14 = v16;
  id v17 = -[os_log_s countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v23,  v28,  16LL);
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v24;
    do
    {
      for (id i = 0LL; i != v18; id i = (char *)i + 1)
      {
        if (*(void *)v24 != v19) {
          objc_enumerationMutation(v14);
        }
        int v21 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v21, "fieldDetectorManagerDidExitField:") & 1) != 0) {
          objc_msgSend(v21, "fieldDetectorManagerDidExitField:", *(void *)(a1 + 32), (void)v23);
        }
      }

      id v18 = -[os_log_s countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v23,  v28,  16LL);
    }

    while (v18);
  }

LABEL_25:
}

void sub_10015C2D4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(v2, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);

  dispatch_queue_t v4 = dispatch_queue_create("com.apple.passd.field-detect", attr);
  uint64_t v5 = (void *)qword_100707A00;
  qword_100707A00 = (uint64_t)v4;
}

id sub_10015C570(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) deviceSupportsCredentials];
  if ((_DWORD)result)
  {
    dispatch_queue_attr_t v3 = objc_alloc(&OBJC_CLASS___PKBluetoothMonitorer);
    uint64_t v8 = CBManagerNeedsRestrictedStateOperation;
    id v9 = &__kCFBooleanTrue;
    dispatch_queue_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    uint64_t v5 = -[PKBluetoothMonitorer initWithManagerOptions:](v3, "initWithManagerOptions:", v4);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = v5;

    return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "setDelegate:");
  }

  return result;
}

void sub_10015D2D0(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if (objc_msgSend(v7, "state", (void)v10) == (id)1)
        {
          uint64_t v8 = *(void **)(a1 + 40);
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
          [v8 containsObject:v9];
        }

        [*(id *)(a1 + 48) didUpdateCredential:v7 onPassWithIdentifier:*(void *)(a1 + 56)];
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

uint64_t sub_10015D58C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_10015D65C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_10015D72C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_10015D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

void sub_10015E070(_Unwind_Exception *a1)
{
}

uint64_t sub_10015E0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (a3) {
      a2 = 0LL;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }

  return result;
}

void sub_10015E0C0(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = (void *)*((void *)WeakRetained + 11);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10015E1E8;
    v7[3] = &unk_100646AF0;
    id v11 = a1[6];
    id v8 = v3;
    id v9 = a1[4];
    id v10 = a1[5];
    objc_copyWeak(&v12, a1 + 7);
    [v6 performHandlerOnSharedWebServiceQueue:v7];
    objc_destroyWeak(&v12);
  }

  else
  {
    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_10015E1D4(_Unwind_Exception *a1)
{
}

void sub_10015E1E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10015E32C;
    v7[3] = &unk_100646AC8;
    uint64_t v4 = *(void *)(a1 + 32);
    id v8 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 48);
    objc_copyWeak(&v11, (id *)(a1 + 64));
    [v3 passAtURL:v4 completion:v7];
    objc_destroyWeak(&v11);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to get shared web service", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_10015E318(_Unwind_Exception *a1)
{
}

void sub_10015E32C(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 == 1 && v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10015E484;
    v10[3] = &unk_100646AA0;
    id v11 = a1[4];
    id v14 = a1[6];
    id v12 = a1[5];
    objc_copyWeak(&v15, a1 + 7);
    id v13 = v6;
    [v13 downloadRemoteAssetsWithCompletion:v10];

    objc_destroyWeak(&v15);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to download new pass", v9, 2u);
    }

    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_10015E470(_Unwind_Exception *a1)
{
}

void sub_10015E484(id *a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2)
  {
    if (v5)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(22LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to download new pass assets",  buf,  2u);
      }

      (*((void (**)(void))a1[7] + 2))();
    }

    else
    {
      id v9 = PDDefaultQueue();
      id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10015E5DC;
      block[3] = &unk_100646A78;
      id v12 = a1[4];
      id v13 = a1[5];
      objc_copyWeak(&v16, a1 + 8);
      id v14 = a1[6];
      id v15 = a1[7];
      dispatch_async(v10, block);

      objc_destroyWeak(&v16);
    }
  }
}

void sub_10015E5DC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)id v7 = 138412290;
    *(void *)&void v7[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updating pass for registered credential: %@",  v7,  0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v6 = WeakRetained;
  *(void *)id v7 = 0LL;
  if (WeakRetained) {
    [WeakRetained[9] writeCard:*(void *)(a1 + 48) source:1 error:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10015E6D0(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 8);
  id v5 = (void *)WeakRetained[11];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10015E7E4;
  v6[3] = &unk_100646B68;
  id v7 = a1[4];
  objc_copyWeak(&v11, a1 + 8);
  id v9 = a1[6];
  id v8 = a1[5];
  id v10 = a1[7];
  [v5 registerCredentialWithRequest:v3 completion:v6];

  objc_destroyWeak(&v11);
}

void sub_10015E7D0(_Unwind_Exception *a1)
{
}

void sub_10015E7E4(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passURL]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 credentialAttestation]);
  uint64_t v6 = (void *)v5;
  if (v4 && v5)
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 8);
    if (WeakRetained)
    {
      id v8 = -[PKAppletSubcredential initWithIdentifier:]( objc_alloc(&OBJC_CLASS___PKAppletSubcredential),  "initWithIdentifier:",  a1[5]);
      id v9 = (void *)WeakRetained[1];
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 vehicleMobilizationEncryptedContainer]);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_10015EA28;
      v16[3] = &unk_100646B40;
      id v17 = a1[4];
      id v18 = a1[5];
      id v20 = a1[7];
      id v19 = v4;
      id v21 = a1[6];
      [v9 updateTrackingAttestation:v6 forCredential:v8 encryptedContainer:v10 completion:v16];

LABEL_12:
      goto LABEL_13;
    }

    id v15 = a1[6];
    if (!v15) {
      goto LABEL_12;
    }
    id v14 = (void (*)(void))*((void *)v15 + 2);
LABEL_11:
    v14();
    goto LABEL_12;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = a1[5];
    *(_DWORD *)__int128 buf = 138412290;
    id v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Registering credential (%@) failed", buf, 0xCu);
  }

  if (a1[6])
  {
    id WeakRetained = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKSubcredentialProvisioningErrorDomain,  7LL,  0LL));
    id v14 = (void (*)(void))*((void *)a1[6] + 2);
    goto LABEL_11;
  }

void sub_10015EA28(void *a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = a1[5];
      int v10 = 138412290;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Registered credential: %@",  (uint8_t *)&v10,  0xCu);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = a1[5];
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to register credential: %@",  (uint8_t *)&v10,  0xCu);
    }

    if (a1[8])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKSubcredentialProvisioningErrorDomain,  7LL,  0LL));
      (*(void (**)(void))(a1[8] + 16LL))();
    }
  }

void sub_10015EC1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10015EC38(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v2);
  [WeakRetained[11] backgroundRegisterCredentialWithRequest:v3];
}

id sub_10015EE2C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _removeBackgroundRegistrationRequestForCredentials:*(void *)(a1 + 40) withPaymentWebService:a2];
}

void sub_10015EF44(uint64_t a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 32) count];
    uint64_t v7 = @"No";
    if (a2) {
      uint64_t v7 = @"Yes";
    }
    int v8 = 134218242;
    id v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished restoring %ld credentials in database. Success: %@)",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10015F0E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v27;
    *(void *)&__int128 v5 = 138412546LL;
    __int128 v20 = v5;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(v3);
        }
        uint64_t v10 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
        uint64_t v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "member:", v10, v20));
        id v12 = (void *)v11;
        if (v11)
        {
          PKAppletSubcredentialMergeDeviceCredential(v11, v10);
          uint64_t Object = PKLogFacilityTypeGetObject(22LL);
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = v20;
            uint32_t v31 = v12;
            __int16 v32 = 2112;
            uint64_t v33 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Inflated credential %@ from %@",  buf,  0x16u);
          }

          ++v7;
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }

    while (v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  id v15 = *(void **)(a1 + 32);
  id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10015F2E4;
  block[3] = &unk_10063C928;
  uint64_t v25 = v7;
  id v17 = v15;
  uint64_t v18 = *(void *)(a1 + 40);
  id v19 = *(void **)(a1 + 48);
  id v22 = v17;
  uint64_t v23 = v18;
  id v24 = v19;
  dispatch_async(v16, block);
}

uint64_t sub_10015F2E4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 56);
  id v3 = [*(id *)(a1 + 32) count];
  unsigned int v4 = [*(id *)(*(void *)(a1 + 40) + 64) updateAppletSubcredentials:*(void *)(a1 + 32)];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    if (v2 == v3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 0LL;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v6);
  }

  return result;
}

void sub_10015F8FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_10015F928(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 40) + 64),  "passShareForCredentialShareIdentifier:",  v7,  (void)v14));
        if ([*(id *)(*(void *)(a1 + 40) + 64) deletePassCredentialShareForIdentifier:v7])
        {
          ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
          if (v8)
          {
            id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 credentialShares]);
            id v10 = [v9 count];

            if (v10 == (id)1)
            {
              uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 64LL);
              id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
              [v11 deletePassShareWithIdentifier:v12];
            }
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v4);
  }

  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) != 0LL;
}

void sub_10015FD74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015FDA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10015FDB0(uint64_t a1)
{
}

BOOL sub_10015FDB8(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 64) updatePassCredentialShareIdentifier:a1[5] updatedStatus:1 updatedIdentifier:a1[6]]);
  uint64_t v3 = *(void *)(a1[7] + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
    return 0LL;
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 64) passShareForCredentialShareIdentifier:a1[6]]);
  uint64_t v6 = *(void **)(a1[4] + 64LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 subcredentialIdentifier]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 appletSubcredentialWithIdentifier:v7]);
  uint64_t v9 = *(void *)(a1[8] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  return *(void *)(*(void *)(a1[7] + 8LL) + 40LL) != 0LL;
}

void sub_10016033C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_100160378(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = (void *)*((void *)WeakRetained + 11);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10016045C;
    v7[3] = &unk_100646C08;
    objc_copyWeak(&v9, v2);
    id v8 = *(id *)(a1 + 32);
    [v5 performHandlerOnSharedWebServiceQueue:v7];

    objc_destroyWeak(&v9);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }
}

void sub_100160448(_Unwind_Exception *a1)
{
}

void sub_10016045C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained[11] initiateConsistencyCheck];
    uint64_t v3 = v5;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    uint64_t v3 = v5;
  }
}

void sub_1001604B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "appletSubcredentialManager:didTerminateProvisioningForCredential:") & 1) != 0) {
    [v3 appletSubcredentialManager:*(void *)(a1 + 32) didTerminateProvisioningForCredential:*(void *)(a1 + 40)];
  }
}

void sub_100160A20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100160A44(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  __int128 v20 = v3;
  if (WeakRetained)
  {
    if (!v3)
    {
LABEL_5:
      uint64_t Object = PKLogFacilityTypeGetObject(22LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "No reason to decline related invitations",  (uint8_t *)&buf,  2u);
      }

      id v8 = (void (**)(id, void))a1[5];
      if (v8) {
        v8[2](v8, 0LL);
      }
      goto LABEL_26;
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
    if ([v4 isEqualToString:PKSubcredentialProvisioningErrorDomain])
    {
      id v5 = [v20 code];

      if (v5 != (id)11) {
        goto LABEL_5;
      }
    }

    else
    {
    }

    uint64_t v10 = PKLogFacilityTypeGetObject(22LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Found reason to decline related invitations: %@",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v12 = dispatch_group_create();
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v39 = 0x2020000000LL;
    uint64_t v40 = 0LL;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained invitations]);
    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v37 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v32;
      do
      {
        for (id i = 0LL; i != v14; id i = (char *)i + 1)
        {
          if (*(void *)v32 != v15) {
            objc_enumerationMutation(v13);
          }
          uint64_t v17 = *(void *)(*((void *)&v31 + 1) + 8LL * (void)i);
          if ([a1[4] isSameInvitationAsInvitation:v17])
          {
            dispatch_group_enter(v12);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int v35 = 138412290;
              uint64_t v36 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Declining related invite: %@",  v35,  0xCu);
            }

            uint64_t v18 = (void *)WeakRetained[1];
            v26[0] = _NSConcreteStackBlock;
            v26[1] = 3221225472LL;
            v26[2] = sub_100160E58;
            v26[3] = &unk_100646CA8;
            objc_copyWeak(&v30, a1 + 6);
            __int128 v27 = v12;
            uint64_t v28 = v17;
            p___int128 buf = &buf;
            [v18 declineSharingInvitation:v17 completion:v26];

            objc_destroyWeak(&v30);
          }
        }

        id v14 = [v13 countByEnumeratingWithState:&v31 objects:v37 count:16];
      }

      while (v14);
    }

    id v19 = (dispatch_queue_s *)WeakRetained[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100161038;
    block[3] = &unk_100646CD0;
    uint64_t v25 = &buf;
    id v23 = a1[4];
    id v24 = a1[5];
    dispatch_group_notify(v12, v19, block);

    _Block_object_dispose(&buf, 8);
  }

  else
  {
    id v9 = (void (**)(id, void))a1[5];
    if (v9) {
      v9[2](v9, 0LL);
    }
  }

void sub_100160E20(_Unwind_Exception *a1)
{
}

void sub_100160E58(uint64_t a1, char a2)
{
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100160F08;
    block[3] = &unk_100646C80;
    char v11 = a2;
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v7 = *(void **)(a1 + 32);
    void block[4] = *(void *)(a1 + 40);
    void block[5] = WeakRetained;
    id v9 = v7;
    dispatch_async(v6, block);
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_100160F08(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  int v3 = *(unsigned __int8 *)(a1 + 64);
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      int v7 = 138412290;
      id v8 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Successfully declined related invite: %@",  (uint8_t *)&v7,  0xCu);
    }

    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  }

  else
  {
    if (v6)
    {
      int v7 = 138412290;
      id v8 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to decline related invite: %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  [*(id *)(a1 + 40) removeSharingInvitationWithIdentifier:v2];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_100161038(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
    uint64_t v5 = a1[4];
    int v7 = 134218242;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Declined %ld invitations related to invitation: %@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))( result,  *(void *)(*(void *)(a1[6] + 8LL) + 24LL) != 0LL);
  }
  return result;
}

void sub_100161854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, id location)
{
}

void sub_100161878(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  BOOL v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(22LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        int v17 = 138412546;
        uint64_t v18 = v16;
        __int16 v19 = 2112;
        __int128 v20 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unable to send invitation for request (%@): %@",  (uint8_t *)&v17,  0x16u);
      }
    }

    else
    {
      __int16 v9 = (void *)*((void *)WeakRetained + 8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9 passShareForIdentifier:v10]);

      -[os_log_s addCredentialShare:](v11, "addCredentialShare:", v5);
      uint64_t v12 = PKLogFacilityTypeGetObject(22LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v17 = 138412546;
        uint64_t v18 = v14;
        __int16 v19 = 2112;
        __int128 v20 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Fulfilled invitation request (%@): %@",  (uint8_t *)&v17,  0x16u);
      }

      if (([v8 addPassShare:v11 onCredentialWithIdentifier:*(void *)(a1 + 48)] & 1) == 0)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v17) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to add invite receipt to the database",  (uint8_t *)&v17,  2u);
        }
      }
    }
  }
}

uint64_t sub_100161BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100161F44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "sessionDidChangeConnectionStatus:") & 1) != 0) {
    [v3 sessionDidChangeConnectionStatus:*(void *)(a1 + 32)];
  }
}

void sub_10016203C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "sessionDidReceiveData:") & 1) != 0) {
    [v3 sessionDidReceiveData:*(void *)(a1 + 32)];
  }
}

void sub_100162218(uint64_t a1, void *a2)
{
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v19;
    while (2)
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(v3);
        }
        int v7 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
        unsigned int v9 = [v8 isEqualToString:*(void *)(a1 + 32)];

        if (v9)
        {
          id v4 = v7;
          goto LABEL_11;
        }
      }

      id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

void sub_1001623D4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  if (v4)
  {
    id v5 = [v4 credentialState];
    if (v5 == (id)21) {
      goto LABEL_9;
    }
    id v6 = v5;
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[5];
      *(_DWORD *)__int128 v27 = 138412546;
      *(void *)&v27[4] = v9;
      *(_WORD *)&v27[12] = 2048;
      *(void *)&v27[14] = v6;
      uint64_t v10 = "Registering credential %@ in unexpected state: %ld";
      char v11 = v8;
      uint32_t v12 = 22;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, v27, v12);
    }
  }

  else
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(22LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = a1[5];
      *(_DWORD *)__int128 v27 = 138412290;
      *(void *)&v27[4] = v14;
      uint64_t v10 = "Unable to find matching KML credential to register with identifier: %@";
      char v11 = v8;
      uint32_t v12 = 12;
      goto LABEL_7;
    }
  }

LABEL_9:
  id v15 = (void *)a1[4];
  if (!v15) {
    id v15 = (void *)a1[6];
  }
  id v16 = v15;
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 trackingRequest]);
  if (!v17)
  {
    uint64_t v18 = PKLogFacilityTypeGetObject(22LL);
    __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = a1[5];
      *(_DWORD *)__int128 v27 = 138412290;
      *(void *)&v27[4] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Registering credential %@ without an attestation!",  v27,  0xCu);
    }
  }

  id v21 = objc_msgSend( [PKCarKeyCredentialRegistrationMetadata alloc],  "initWithMake:model:keyType:",  0,  0,  objc_msgSend(v16, "isSharedCredential", *(_OWORD *)v27, *(void *)&v27[16]));
  id v22 = [[PKPaymentRegisterTrackCredentialRequest alloc] initWithCredential:v16 registrationData:v17 metadata:v21];
  if (!v22)
  {
    uint64_t v23 = PKLogFacilityTypeGetObject(22LL);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = a1[5];
      *(_DWORD *)__int128 v27 = 138412290;
      *(void *)&v27[4] = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Unable to create credential registration request for credential: %@",  v27,  0xCu);
    }
  }

  uint64_t v26 = a1[7];
  if (v26) {
    (*(void (**)(uint64_t, id))(v26 + 16))(v26, v22);
  }
}

void sub_100162728(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 backgroundContext]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  uint64_t v5 = PKCredentialRegistrationRecordNameForCredentialIdentifier();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v3 backgroundDownloadRecordForRecordName:v6]);

  if (v11)
  {
    if ([v11 taskType] == (id)5)
    {
      int v7 = v11;
      goto LABEL_6;
    }
  }

  id v8 = objc_msgSend( [PKCarKeyCredentialRegistrationMetadata alloc],  "initWithMake:model:keyType:",  0,  0,  objc_msgSend(*(id *)(a1 + 32), "isSharedCredential"));
  id v9 = [[PKPaymentRegisterTrackCredentialRequest alloc] initWithCredential:*(void *)(a1 + 32) registrationData:*(void *)(a1 + 40) metadata:v8];
  [*(id *)(*(void *)(a1 + 48) + 88) backgroundRegisterCredentialWithRequest:v9];

  int v7 = 0LL;
LABEL_6:
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    id v12 = v7;
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, 1LL);
    int v7 = v12;
  }
}

void sub_100162C18(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "appletSubcredentialManager:didUpdateCredential:onPassWithIdentifier:oldShares:") & 1) != 0) {
    [v3 appletSubcredentialManager:a1[4] didUpdateCredential:a1[5] onPassWithIdentifier:a1[6] oldShares:a1[7]];
  }
}

void sub_1001630E0(_Unwind_Exception *a1)
{
}

void sub_100163134(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (*(_BYTE *)(a1 + 48))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 UUIDString]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 80LL);
    uint64_t v15 = *(void *)(*(void *)(v13 + 8) + 40LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100163248;
    v16[3] = &unk_10063CAE0;
    id v18 = v8;
    id v17 = v6;
    [v14 acquireAssertionOfType:1 withIdentifier:v15 reason:@"Unsigned pass provisioning" handler:v16];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

uint64_t sub_100163248(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Unable to acquire provisioning assertion",  v6,  2u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001632D4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[5];
  id v9 = *(void **)(a1[4] + 88LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100163394;
  v14[3] = &unk_100642340;
  id v10 = v8;
  uint64_t v11 = a1[6];
  id v17 = v7;
  uint64_t v18 = v11;
  id v15 = v10;
  id v16 = v6;
  id v12 = v6;
  id v13 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_100163394(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100163438;
  v7[3] = &unk_100646E08;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v6;
  __int128 v9 = v6;
  id v8 = *(id *)(a1 + 40);
  [a2 passAtURL:v4 completion:v7];
}

void sub_100163438(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a3);
  uint64_t v6 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  if (!v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to download pass after credential registration",  v9,  2u);
    }

    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v6 == 0);
}

void sub_100163500(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 104) secureElementIdentifiers]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[PKDownloadRemoteAssetConfiguration configurationWithSEIDs:]( &OBJC_CLASS___PKDownloadRemoteAssetConfiguration,  "configurationWithSEIDs:",  v8));

  uint64_t v10 = a1[6];
  uint64_t v11 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001635F8;
  v14[3] = &unk_100646E30;
  id v16 = v7;
  uint64_t v17 = v10;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  [v11 downloadRemoteAssetsWithConfiguration:v9 completion:v14];
}

void sub_1001635F8(void *a1, int a2, void *a3)
{
  id v6 = a3;
  if (a2)
  {
    id v7 = v6;
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a3);
    (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
    id v6 = v7;
  }
}

void sub_100163670(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PDDefaultQueue();
  __int128 v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10016372C;
  v14[3] = &unk_1006434A0;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v16 = v7;
  uint64_t v17 = v11;
  void v14[4] = v10;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v9, v14);
}

uint64_t sub_10016372C(void *a1)
{
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_100163774(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (*(_BYTE *)(a1 + 56))
  {
    __int128 v9 = *(void **)(*(void *)(a1 + 32) + 88LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100163844;
    v10[3] = &unk_100646E80;
    __int128 v13 = *(_OWORD *)(a1 + 40);
    id v12 = v7;
    id v11 = v6;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_100163844(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 targetDevice]);
  if (PKTargetDeviceSupportsExpress())
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) paymentPass]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001639E8;
    v9[3] = &unk_100646E58;
    int8x16_t v12 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
    id v11 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    [v4 paymentWebService:v3 handlePotentialExpressPass:v5 withCompletionHandler:v9];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) uniqueID]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      id v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Skipping enabling express for %@. Target device (%@) does not support express",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_1001639E8(void *a1, void *a2)
{
  *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [a2 count] != 0;
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[7] + 8) + 40) uniqueID]);
    id v6 = (void *)v5;
    if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL)) {
      id v7 = @"Yes";
    }
    else {
      id v7 = @"No";
    }
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    int8x16_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Enabling express for %@. Success %@",  (uint8_t *)&v9,  0x16u);
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_100163B0C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v15 = a3;
  id v6 = a4;
  if (*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    uint64_t v7 = PKLocalizedShareableCredentialString(@"EXPRESS_NOTIFICATION_TITLE");
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) localizedDescription]);
    uint64_t v10 = PKLocalizedShareableCredentialString(@"EXPRESS_NOTIFICATION_MESSAGE", @"%@", v9);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    int8x16_t v12 = objc_alloc(&OBJC_CLASS___PDPassExpressModeEnabledUserNotification);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) uniqueID]);
    uint64_t v14 = -[PDPassExpressModeEnabledUserNotification initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:]( v12,  "initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:",  v8,  v11,  v13,  2LL,  604800.0);

    [*(id *)(a1[4] + 96) insertUserNotification:v14];
  }

  v6[2](v6, v15, 0LL);
}

void sub_100163C3C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  [*(id *)(a1[5] + 80) invalidateAssertionOfType:1 withIdentifier:*(void *)(*(void *)(a1[6] + 8) + 40) handler:0];
  id v6 = @"No";
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
    int v10 = 138412546;
    __int16 v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Finished downloading car key after credential registration with success: %@. %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_1001641B0(uint64_t a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = "failed";
    uint64_t v7 = *(void *)(a1 + 40);
    if (a2) {
      id v6 = "succeeded";
    }
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2080;
    __int16 v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Tracking credential (%@) %s",  (uint8_t *)&v8,  0x16u);
  }
}

uint64_t sub_1001648E8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 64) rangingSuspensionReasonForAppletSubcredential:*(void *)(a1 + 40) forPaymentApplicationID:*(void *)(a1 + 48)] != *(id *)(a1 + 64))
  {
    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 64),  "updateRangingSuspensionReasons:onCredential:forPaymentApplicationID:");
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56LL));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) allObjects]);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56LL));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1001649D8;
    v6[3] = &unk_100646F20;
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 40);
    void v6[4] = *(void *)(a1 + 32);
    uint64_t v9 = v3;
    id v7 = v4;
    id v8 = *(id *)(a1 + 56);
    [v2 enumerateObjectsUsingBlock:v6];
  }

  return 1LL;
}

void sub_1001649D8(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "appletSubcredentialManager:didUpdateRangingSuspensionReasons:forCredential:forPaymentApplication:") & 1) != 0) {
    [v3 appletSubcredentialManager:a1[4] didUpdateRangingSuspensionReasons:a1[7] forCredential:a1[5] forPaymentApplication:a1[6]];
  }
}

void sub_100164EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_alloc_init(&OBJC_CLASS___PDPassAuxiliaryRegistrationRequirementStatus);
  -[PDPassAuxiliaryRegistrationRequirementStatus setIsRegistered:](v5, "setIsRegistered:", 0LL);
  -[PDPassAuxiliaryRegistrationRequirementStatus setRequirementIdentifier:]( v5,  "setRequirementIdentifier:",  *(void *)a3);
  -[PDPassAuxiliaryRegistrationRequirementStatus setRegistrationBackoffCounter:]( v5,  "setRegistrationBackoffCounter:",  [*(id *)(a3 + 8) integerValue]);
  [*(id *)(a1 + 32) addObject:v5];
}

void sub_10016510C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_alloc_init(&OBJC_CLASS___PDPassAuxiliaryRegistrationRequirementStatus);
  -[PDPassAuxiliaryRegistrationRequirementStatus setRequirementIdentifier:]( v5,  "setRequirementIdentifier:",  *(void *)a3);
  -[PDPassAuxiliaryRegistrationRequirementStatus setIsRegistered:]( v5,  "setIsRegistered:",  [*(id *)(a3 + 8) BOOLValue]);
  -[PDPassAuxiliaryRegistrationRequirementStatus setRegistrationBackoffCounter:]( v5,  "setRegistrationBackoffCounter:",  [*(id *)(a3 + 16) integerValue]);
  [*(id *)(a1 + 32) addObject:v5];
}

void sub_100165828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100165848(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PassAuxiliaryRegistrationRequirement),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v4 + 24))
  {
    id v6 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[SQLiteEntity setValue:forProperty:]( v6,  "setValue:forProperty:",  v5,  @"e");

    id v3 = v6;
  }

  else
  {
    *(_BYTE *)(v4 + 24) = 0;
  }
}

void sub_1001659FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100165A14(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PassAuxiliaryRegistrationRequirement),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v4 + 24))
  {
    id v6 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[SQLiteEntity setValue:forProperty:]( v6,  "setValue:forProperty:",  v5,  @"e");

    id v3 = v6;
  }

  else
  {
    *(_BYTE *)(v4 + 24) = 0;
  }
}

void sub_100166094(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10016614C;
  v9[3] = &unk_100641488;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_10016614C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 32));
}

void sub_100166270(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100166328;
  v9[3] = &unk_100641488;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_100166328(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 32));
}

void sub_100166464(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10016651C;
  v9[3] = &unk_100641488;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_10016651C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 32));
  }
  return result;
}

void sub_10016664C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100166704;
  v9[3] = &unk_100641488;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_100166704(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 32));
  }
  return result;
}

void sub_100166834(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001668EC;
  v9[3] = &unk_100641488;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1001668EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 32));
  }
  return result;
}

void sub_100166B0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(dispatch_queue_s **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100166BDC;
  v10[3] = &unk_10063CD60;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

uint64_t sub_100166BDC(void *a1)
{
  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

id sub_100167040(uint64_t a1)
{
  return _[*(id *)(a1 + 32) invalidateWithSource:2 completion:0];
}

id sub_100167050(uint64_t a1)
{
  return _[*(id *)(a1 + 32) invalidateWithSource:2 completion:0];
}

uint64_t sub_10016713C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100167150(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001673C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001673D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10016794C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKASCAssociatedReaderIDReaderCA);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  objc_msgSend(*(id *)(a1 + 40), "pk_safelyAddObject:", v7);
}

void sub_100167AA0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100167C6C(id a1, PKASCAssociatedReaderIDReaderCA *a2, id a3)
{
}

void sub_100167C74(id a1, PKASCAssociatedReaderIDReaderCA *a2, id a3)
{
}

uint64_t sub_100167DA8(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithPropertyValues:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  id v3 = [v2 persistentID];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) minimumAmounts]);
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:forRewardsCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "insertOrUpdateCurrencyAmounts:forRewardsCriteriaPID:type:inDatabase:",  v4,  v3,  1LL,  *(void *)(a1 + 40));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) maximumAmounts]);
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:forRewardsCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "insertOrUpdateCurrencyAmounts:forRewardsCriteriaPID:type:inDatabase:",  v5,  v3,  2LL,  *(void *)(a1 + 40));

  return 1LL;
}

void sub_100168230(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentOfferRewardsCriteria);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferCurrencyAmount currencyAmountForRewardsCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "currencyAmountForRewardsCriteriaPID:type:inDatabase:",  a2,  1LL,  *(void *)(a1 + 40)));
  -[PKPaymentOfferRewardsCriteria setMinimumAmounts:](v10, "setMinimumAmounts:", v8);

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentOfferCurrencyAmount currencyAmountForRewardsCriteriaPID:type:inDatabase:]( &OBJC_CLASS___PaymentOfferCurrencyAmount,  "currencyAmountForRewardsCriteriaPID:type:inDatabase:",  a2,  2LL,  *(void *)(a1 + 40)));
  -[PKPaymentOfferRewardsCriteria setMaximumAmounts:](v10, "setMaximumAmounts:", v9);

  [*(id *)(a1 + 48) safelyAddObject:v10];
}

id sub_10016844C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10016874C(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_100168754(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferRewardsCriteria setEligibility:](v4, "setEligibility:", [a3 integerValue]);
}

void sub_100168798(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferRewardsCriteria setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1001687DC(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001687E4(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001687EC(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001687F4(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPaymentOfferRewardsCriteria setRedemptionTermsURL:](v4, "setRedemptionTermsURL:", v5);
}

void sub_100168840(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  -[PKPaymentOfferRewardsCriteria setSupportedCurrencyCodes:](v4, "setSupportedCurrencyCodes:", v5);
}

void sub_1001688C0(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferRewardsCriteria setSupportedDeferredPayments:]( v4,  "setSupportedDeferredPayments:",  [a3 BOOLValue]);
}

void sub_100168904(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferRewardsCriteria setSupportedRecurringPayments:]( v4,  "setSupportedRecurringPayments:",  [a3 BOOLValue]);
}

LABEL_156:
}

void sub_100169A50(_Unwind_Exception *a1)
{
}

uint64_t sub_100169B54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100169B64(uint64_t a1)
{
}

id sub_100169B6C(id a1, PKPaymentPass *a2)
{
  return -[PKPaymentPass uniqueID](a2, "uniqueID");
}

void sub_100169B74(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100169C50;
  v13[3] = &unk_100647228;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 64);
  void v13[4] = *(void *)(a1 + 40);
  uint64_t v18 = v9;
  id v14 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v16 = v6;
  id v17 = v7;
  id v15 = v10;
  id v11 = v6;
  id v12 = v7;
  sub_10014C1C8(v8, v13);
}

void sub_100169C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v35;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v35 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v34 + 1) + 8 * (void)i) passUniqueIdentifier]);
        -[NSMutableSet addObject:](v4, "addObject:", v10);
      }

      id v7 = [v5 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v7);
  }

  id v11 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) firstObject]);
  uint64_t v14 = objc_claimAutoreleasedReturnValue([v12 sortedPassUniqueIdentifiersForGroupContainingPassWithUniqueIdentifier:v13]);
  id v15 = (void *)v14;
  if (v14) {
    id v16 = (void *)v14;
  }
  else {
    id v16 = &__NSArray0__struct;
  }
  id v17 = -[NSMutableArray initWithArray:](v11, "initWithArray:", v16);

  uint64_t v18 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v17);
  __int128 v19 = -[NSMutableArray initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithArray:",  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _readerIDPriorityForPasses:*(void *)(a1 + 40) readerID:*(void *)(a1 + 48)]);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_100169EE8;
  v29[3] = &unk_100647200;
  id v30 = v20;
  __int128 v31 = v4;
  __int128 v32 = v18;
  __int128 v33 = v17;
  id v21 = v17;
  id v22 = v18;
  uint64_t v23 = v4;
  id v24 = v20;
  -[NSMutableArray sortUsingComparator:](v19, "sortUsingComparator:", v29);
  uint64_t v25 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v26 = *(void **)(v25 + 40);
  *(void *)(v25 + 40) = v19;
  __int128 v27 = v19;

  (*(void (**)(void, void, void, uint64_t))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  *(void *)(a1 + 56),  0LL,  v28);
}

uint64_t sub_100169EE8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v5]);
  id v8 = [v7 unsignedIntegerValue];
  if (v8) {
    unint64_t v9 = (unint64_t)v8;
  }
  else {
    unint64_t v9 = -1LL;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v6]);
  id v11 = [v10 unsignedIntegerValue];
  if (v11) {
    unint64_t v12 = (unint64_t)v11;
  }
  else {
    unint64_t v12 = -1LL;
  }

  if (v9 == v12)
  {
    unsigned int v13 = [a1[5] containsObject:v5];
    unsigned int v14 = [a1[5] containsObject:v6];
    if (v13 == v14
      && (unsigned int v13 = [a1[6] containsObject:v5],
          unsigned int v14 = [a1[6] containsObject:v6],
          v13 == v14))
    {
      id v16 = [a1[7] indexOfObject:v5];
      id v17 = [a1[7] indexOfObject:v6];
      uint64_t v18 = -1LL;
      if (v16 >= v17) {
        uint64_t v18 = 1LL;
      }
      if (v16 == v17) {
        uint64_t v15 = 0LL;
      }
      else {
        uint64_t v15 = v18;
      }
    }

    else if ((v13 & (v14 ^ 1)) != 0)
    {
      uint64_t v15 = -1LL;
    }

    else
    {
      uint64_t v15 = 1LL;
    }
  }

  else if (v9 < v12)
  {
    uint64_t v15 = -1LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  return v15;
}

void sub_10016A018(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  BOOL v9 = (*(_BYTE *)(a1 + 72) || *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    && [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count] == 0;
  if (![*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count] && *(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), "addObject:");
  }
  id v10 = [[PKFieldMetadata alloc] initWithAssociatedPassIdentifiers:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) shouldIgnoreField:v9 foundExplicitlyRequestedPass:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)];
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
  unint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  v8[2](v8, v7, 0LL);
}

uint64_t sub_10016A128(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

LABEL_2:
  uint64_t v4 = 1;
LABEL_7:

  return v4;
}

void sub_10016B130(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = *(void **)(a1 + 40);
  id v7 = a3;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v6 _sharingMessageForProperties:v7 values:a4]);
  id v8 = [v7 indexOfObject:@"a"];

  BOOL v9 = v13;
  if (v13) {
    BOOL v10 = v8 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    id v11 = *(id *)(a4 + 8LL * (void)v8);
    unint64_t v12 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v11]);
    if (!v12)
    {
      unint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:v11];
    }

    -[NSMutableArray addObject:](v12, "addObject:", v13);

    BOOL v9 = v13;
  }
}

void sub_10016B2E8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_sharingMessageForProperties:values:"));
  [*(id *)(a1 + 32) safelyAddObject:v2];
}

void sub_10016B3FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10016B414(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10016B424(uint64_t a1)
{
}

void sub_10016B42C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  id v8 = objc_msgSend((id)objc_opt_class(v5, v7), "_sharingMessageForProperties:values:", v6, a3);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);

  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

id sub_10016B7B8(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) indexOfObject:a2];
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL) {
    id v4 = 0LL;
  }
  else {
    id v4 = *(id *)(*(void *)(a1 + 40) + 8LL * (void)v3);
  }
  return v4;
}

void sub_10016C00C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10016C154(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentAssociatedAccountRemovalRecord);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_10016C280(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
}

void sub_10016C288(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAssociatedAccountRemovalRecord setReason:](v4, "setReason:", [a3 integerValue]);
}

void sub_10016C2CC(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentAssociatedAccountRemovalRecord setDate:](v4, "setDate:", v5);
}

void sub_10016C318(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAssociatedAccountRemovalRecord setHasPresentedNotification:]( v4,  "setHasPresentedNotification:",  [a3 BOOLValue]);
}

id _SQLValueForIdentifiers(void *a1)
{
  id v1 = a1;
  if (!v1
    || (id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _IdentifiersForSQLValue(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSSet, v3);
  id v6 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, objc_opt_class(&OBJC_CLASS___NSString, v5), 0LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v6,  v1,  0LL));

  return v7;
}

void sub_10016CF48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentSetupFeature),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentSetupFeature paymentSetupFeature](v5, "paymentSetupFeature"));
  [v3 addObject:v4];
}

id sub_10016D770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PaymentSetupFeature,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_10016DAF8(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = _IdentifiersForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentSetupFeature setIdentifiers:](v4, "setIdentifiers:", v6);
}

void sub_10016DB48(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016DB50(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10016DB94(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setState:](v4, "setState:", [a3 integerValue]);
}

void sub_10016DBD8(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setSupportedOptions:](v4, "setSupportedOptions:", [a3 integerValue]);
}

void sub_10016DC1C(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setSupportedDevices:](v4, "setSupportedDevices:", [a3 integerValue]);
}

void sub_10016DC60(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016DC68(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016DC70(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setFeatureIdentifier:](v4, "setFeatureIdentifier:", [a3 integerValue]);
}

void sub_10016DCB4(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016DCBC(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentSetupFeature setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_10016DD08(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentSetupFeature setExpiry:](v4, "setExpiry:", v5);
}

void sub_10016DD54(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_10016DD98(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentSetupFeature setProductState:](v4, "setProductState:", [a3 integerValue]);
}

void sub_10016DDDC(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016DDE4(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016DDEC(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_10016E170(uint64_t a1, void *a2, void *a3)
{
  id v23 = a2;
  id v5 = a3;
  if (a1 && v23 && v5)
  {
    id v6 = v5;
    id v7 = sub_10016E35C(a1, 0LL);
    id v8 = (NSURL *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v6);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(-[NSURL host](v9, "host"));
    id v11 = (void *)v10;
    if (v9 && v10)
    {
      id v22 = -[NSURLComponents initWithURL:resolvingAgainstBaseURL:]( objc_alloc(&OBJC_CLASS___NSURLComponents),  "initWithURL:resolvingAgainstBaseURL:",  v9,  1LL);
      unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLComponents URL](v22, "URL"));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pathComponents]);

      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 lastObject]);
      uint64_t v15 = objc_alloc(&OBJC_CLASS___NSURL);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL scheme](v9, "scheme"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@://%@",  v16,  v11));
      uint64_t v18 = -[NSURL initWithString:](v15, "initWithString:", v17);

      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL fragment](v9, "fragment"));
      if (v19)
      {
        uint64_t v20 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v19,  0LL);
        if (v20) {
          [v23 setPayloadEncryptionPassword:v20];
        }
      }

      id v8 = v18;
    }

    else
    {
      unsigned int v14 = v6;
    }

    if (v14) {
      id v21 = v14;
    }
    else {
      id v21 = v6;
    }
    [v23 setTransportIdentifier:v21];
    [v23 setRelayServerHost:v8];
  }
}

NSURL *sub_10016E35C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) sharedWebServiceContext]);
    id v5 = v4;
    if (v3)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 regionForIdentifier:v3]);
      id v7 = v6;
      if (v6) {
        id v8 = (id)objc_claimAutoreleasedReturnValue([v6 regionCode]);
      }
      else {
        id v8 = v3;
      }
      uint64_t v10 = v8;
    }

    else
    {
      uint64_t v9 = PKCurrentRegion();
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 relayServerHostForRegion:v10]);

    if (!v12)
    {
      uint64_t v13 = PKSharingRelayServerURLForCurrentEnvironment(0LL);
      unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v13);
    }

    unsigned int v14 = objc_alloc(&OBJC_CLASS___NSURL);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([@"https://" stringByAppendingString:v12]);
    id v16 = -[NSURL initWithString:](v14, "initWithString:", v15);
  }

  else
  {
    id v16 = 0LL;
  }

  return v16;
}

void sub_10016E6B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
    uint64_t v8 = PKSharingLoggableMailboxAddress(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    int v10 = 138543619;
    id v11 = v9;
    __int16 v12 = 2113;
    id v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "RelayServer: pinged remote mailbox %{public}@ with result: %{private}@",  (uint8_t *)&v10,  0x16u);
  }

  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v4 == 0LL, v4);
}

void sub_10016E7BC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001719C4;
    v10[3] = &unk_100647788;
    id v11 = v7;
    id v12 = v8;
    uint64_t v13 = a3;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_10016E8F8(PDSharingMailboxPayload *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 transportIdentifier]);
      uint64_t v13 = PKSharingLoggableMailboxAddress(v12);
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)__int128 buf = 138543619;
      __int128 v35 = v14;
      __int16 v36 = 2113;
      id v37 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Putting payload for remote mailbox %{public}@ \n\n %{private}@",  buf,  0x16u);
    }

    [v7 setProvisioningType:2];
    uint64_t v15 = objc_alloc(&OBJC_CLASS___PDSharingRelayServerUpdateMailboxRequest);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v7 transportIdentifier]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 relayServerHost]);
    uint64_t v18 = -[PDSharingRelayServerRequest initWithMailboxIdentifier:relayServerHost:]( v15,  "initWithMailboxIdentifier:relayServerHost:",  v16,  v17);

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceClaim]);
    -[PDSharingRelayServerRequest setDeviceClaim:](v18, "setDeviceClaim:", v19);

    id v20 = sub_10016F130((uint64_t)a1, v7, 0);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v8 payload]);
    id v23 = sub_10016F2BC(a1, (uint64_t)v22, v21);
    id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    -[PDSharingRelayServerUpdateMailboxRequest setPayload:](v18, "setPayload:", v24);

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    -[PDSharingRelayServerRequest setCorrelationIdentifier:](v18, "setCorrelationIdentifier:", v25);

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v7 transportIdentifier]);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v7 relayServerHost]);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10016FEA0;
    v29[3] = &unk_100647670;
    id v30 = v18;
    __int128 v31 = a1;
    id v32 = v7;
    id v33 = v9;
    uint64_t v28 = v18;
    sub_10016F658((uint64_t)a1, v26, v27, 0, v29);
  }
}

void sub_10016EBA8(uint64_t a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    id v12 = (PDSharingMailboxPayload *)a1;
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    uint64_t v15 = v14;
    unint64_t v43 = a4;
    if (a4 >= 4)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 transportIdentifier]);
        uint64_t v17 = PKSharingLoggableMailboxAddress(v16);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Unable to creating remote mailbox %{public}@, max attempts reached",  (uint8_t *)&buf,  0xCu);
      }

      NSErrorUserInfoKey v72 = NSLocalizedDescriptionKey;
      uint64_t v73 = @"max attempts";
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v73,  &v72,  1LL));
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v19));
      v11[2](v11, 0LL, v20);
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Creating remote mailbox \n\n %{private}@",  (uint8_t *)&buf,  0xCu);
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue([v9 transportIdentifier]);
    id v22 = objc_alloc(&OBJC_CLASS___PDSharingRelayServerCreateMailboxRequest);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v9 relayServerHost]);
    id v24 = -[PDSharingRelayServerRequest initWithMailboxIdentifier:relayServerHost:]( v22,  "initWithMailboxIdentifier:relayServerHost:",  v21,  v23);

    id v25 = sub_10016F130(a1, v9, 1);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v10 payload]);
    uint64_t v28 = sub_10016F2BC(v12, (uint64_t)v27, v26);
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    -[PDSharingRelayServerCreateMailboxRequest setPayload:](v24, "setPayload:", v29);

    id v30 = (void *)objc_claimAutoreleasedReturnValue([v10 displayInformation]);
    -[PDSharingRelayServerCreateMailboxRequest setDisplayInformation:](v24, "setDisplayInformation:", v30);

    id v31 = sub_10016F3D0((uint64_t)v12, v9);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    -[PDSharingRelayServerRequest setDeviceClaim:](v24, "setDeviceClaim:", v32);

    -[PDSharingRelayServerCreateMailboxRequest setTimeToLive:](v24, "setTimeToLive:", [v9 timeToLive]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
    -[PDSharingRelayServerRequest setCorrelationIdentifier:](v24, "setCorrelationIdentifier:", v33);

    id v34 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v68 = 0x3032000000LL;
    id v69 = sub_10016F460;
    id v70 = sub_10016F470;
    id v71 = 0LL;
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472LL;
    v62[2] = sub_10016F478;
    v62[3] = &unk_1006433B0;
    id v42 = v9;
    id v35 = v9;
    id v63 = v35;
    __int16 v36 = v24;
    id v64 = v36;
    id v65 = v12;
    p___int128 buf = &buf;
    [v34 addOperation:v62];
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472LL;
    v59[2] = sub_10016F870;
    v59[3] = &unk_10063B5A8;
    v59[4] = v12;
    id v37 = v36;
    __int128 v60 = v37;
    __int128 v61 = &buf;
    [v34 addOperation:v59];
    v57[0] = 0LL;
    v57[1] = v57;
    v57[2] = 0x3032000000LL;
    v57[3] = sub_10016F460;
    v57[4] = sub_10016F470;
    id v58 = 0LL;
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_10016FA7C;
    v53[3] = &unk_100639750;
    v53[4] = v12;
    id v38 = v37;
    id v54 = v38;
    uint64_t v55 = v57;
    uint64_t v56 = &buf;
    [v34 addOperation:v53];
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_10016FBE0;
    v44[3] = &unk_100647620;
    id v50 = &buf;
    id v40 = v21;
    id v45 = v40;
    id v46 = v35;
    uint64_t v47 = v12;
    id v48 = v10;
    unint64_t v52 = v43;
    id v49 = v11;
    uint64_t v51 = v57;
    id v41 = [v34 evaluateWithInput:v39 completion:v44];

    id v9 = v42;
    _Block_object_dispose(v57, 8);

    _Block_object_dispose(&buf, 8);
  }
}

void sub_10016F0FC(_Unwind_Exception *a1)
{
}

id sub_10016F130(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 payloadEncryptionPassword]);
    if (!v7 && a3)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) sharedWebService]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 context]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 configuration]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 targetDevice]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceRegion]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 featureWithType:5 inRegion:v12]);

      size_t v14 = (unint64_t)fmax((double)(unint64_t)[v13 relayServerPasswordLength], 16.0);
      arc4random_buf((char *)&v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), v14);
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  (char *)&v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14));
      [v6 setPayloadEncryptionPassword:v7];
      [*(id *)(a1 + 24) endpointWasUpdated:v6 oldTransportIdentifier:0];
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

PDSharingMailboxPayload *sub_10016F2BC(PDSharingMailboxPayload *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    uint64_t v7 = PKAESGCMEncrypt(v5, a2);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = PDSharingMailboxPayloadEncryptionSchemeFromKeyLength((uint64_t)[v6 length]);
    if (v9)
    {
      a1 = -[PDSharingMailboxPayload initWithData:scheme:]( objc_alloc(&OBJC_CLASS___PDSharingMailboxPayload),  "initWithData:scheme:",  v8,  v9);
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138477827;
        size_t v14 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Unable to determine encryption scheme from key %{private}@",  (uint8_t *)&v13,  0xCu);
      }

      a1 = 0LL;
    }
  }

  return a1;
}

id sub_10016F3D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceClaim]);
    if (!v5)
    {
      id v6 = objc_alloc_init(&OBJC_CLASS___NSUUID);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v6, "UUIDString"));

      [v4 setDeviceClaim:v5];
      [*(id *)(a1 + 24) endpointWasUpdated:v4 oldTransportIdentifier:0];
    }
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

uint64_t sub_10016F460(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10016F470(uint64_t a1)
{
}

void sub_10016F478(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) provisioningType] == (id)2)
  {
    [*(id *)(a1 + 40) setAccessRights:@"RWD"];
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayServerHost]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10016F5AC;
    v13[3] = &unk_1006475A8;
    id v11 = *(id *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    id v14 = v11;
    uint64_t v17 = v12;
    id v16 = v7;
    id v15 = v6;
    sub_10016F658(v8, v9, v10, 0, v13);
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10016F5AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a2 && !v7)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = a3;
    [v9 setNotificationToken:a2];
    [*(id *)(a1 + 32) setNotificationTopic:v10];
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v8;
  id v13 = v8;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  v13 != 0LL);
}

void sub_10016F658(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    id v11 = sub_10017139C(a1, a3);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ((a4 & 1) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v12]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 firstObject]);
      if (v14)
      {
        id v15 = (void *)v14;
        [v13 removeObjectAtIndex:0];
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
        v10[2](v10, v15, v12, 0LL);

LABEL_9:
        goto LABEL_10;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    }

    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v26 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Creating push token for '%@'",  buf,  0xCu);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v9 dataUsingEncoding:4]);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 SHA1Hash]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v19 hexEncoding]);

    id v20 = *(void **)(a1 + 40);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100171778;
    v21[3] = &unk_100647738;
    char v24 = a4;
    void v21[4] = a1;
    id v22 = v12;
    id v23 = v10;
    [v20 generateSingleUsePushTokenForTopic:v22 identifier:v13 completion:v21];

    goto LABEL_9;
  }

void sub_10016F870(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) payload]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 data]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10016F95C;
  v15[3] = &unk_1006475D0;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_10016F9D8(v8, v10, v15);
}

void sub_10016F95C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setDeviceAttestation:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  v8 != 0LL);
}

void sub_10016F9D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 SHA256Hash]);
    id v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1001718E0;
    v8[3] = &unk_100641F00;
    id v9 = v5;
    [v7 attestChallenge:v6 completion:v8];
  }
}

void sub_10016FA7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___PDSharingRelayServerCreateMailboxResponse, v10);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10016FB4C;
  v14[3] = &unk_1006475F8;
  __int128 v17 = *(_OWORD *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  sub_10016E7BC(v8, v9, v11, v14);
}

void sub_10016FB4C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v11 != 0LL);
}

void sub_10016FBE0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  if (v8)
  {
    if ([v8 code] != (id)401)
    {
LABEL_11:
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transportIdentifier]);
        uint64_t v19 = PKSharingLoggableMailboxAddress(v18);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
        int v28 = 138412546;
        __int128 v29 = v20;
        __int16 v30 = 2112;
        uint64_t v31 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Created remote mailbox %@ with error: %@",  (uint8_t *)&v28,  0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      goto LABEL_14;
    }
  }

  else
  {
    unsigned __int8 v9 = [v7 isCanceled];
    if ([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) code] != (id)401)
    {
      if ((v9 & 1) == 0)
      {
        id v23 = *(void **)(a1 + 40);
        uint64_t v22 = *(void *)(a1 + 48);
        sub_10016E170(v22, v23, v24);

        id v25 = *(void **)(a1 + 40);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        [v25 setCreatedAt:v26];

        [*(id *)(a1 + 40) setMailboxStatus:2];
        objc_msgSend( *(id *)(a1 + 40),  "setDoesRemoteMailboxSupportPushNotifications:",  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "supportsPushNotifications"));
        uint64_t v27 = *(void *)(a1 + 48);
        if (v27) {
          [*(id *)(v27 + 24) endpointWasUpdated:*(void *)(a1 + 40) oldTransportIdentifier:*(void *)(a1 + 32)];
        }
      }

      goto LABEL_11;
    }
  }

  uint64_t v10 = PKLogFacilityTypeGetObject(33LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 32));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v28 = 138412290;
    __int128 v29 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Could not create remote mailbox %@, mailbox identifier already in use.",  (uint8_t *)&v28,  0xCu);
  }

  [*(id *)(a1 + 40) rollTransportIdentifer];
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    [*(id *)(v14 + 24) endpointWasUpdated:*(void *)(a1 + 40) oldTransportIdentifier:*(void *)(a1 + 32)];
    uint64_t v15 = *(void *)(a1 + 48);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  sub_10016EBA8(v15, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 88) + 1LL, *(void *)(a1 + 64));
LABEL_14:
}

void sub_10016FEA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2 && !a4)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a3;
    [v6 setNotificationToken:a2];
    [*(id *)(a1 + 32) setNotificationTopic:v7];
  }

  unsigned __int8 v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___PDSharingRelayServerUpdateMailboxResponse, a2);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10016FF80;
  v13[3] = &unk_100647648;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  id v14 = v11;
  uint64_t v15 = v12;
  id v16 = *(id *)(a1 + 56);
  sub_10016E7BC(v8, v9, v10, v13);
}

void sub_10016FF80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
    uint64_t v10 = PKSharingLoggableMailboxAddress(v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v15 = 138543618;
    id v16 = v11;
    __int16 v17 = 2114;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Updated remote mailbox %{public}@ with result: %{public}@",  (uint8_t *)&v15,  0x16u);
  }

  objc_msgSend( *(id *)(a1 + 32),  "setDoesRemoteMailboxSupportPushNotifications:",  objc_msgSend(v5, "supportsPushNotifications"));
  uint64_t v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v12 setUpdatedAt:v13];

  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    [*(id *)(v14 + 24) endpointWasUpdated:*(void *)(a1 + 32) oldTransportIdentifier:0];
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v6 == 0LL, v6);
}

void sub_100170268(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v19 = 0LL;
  }

  else
  {
    id v8 = sub_10016F130(*(void *)(a1 + 32), *(void **)(a1 + 40), 0);
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 payload]);
      uint64_t v11 = *(void *)(a1 + 32);
      id v34 = 0LL;
      id v12 = sub_1001705B0(v11, v10, v9, &v34);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = v34;
      id v7 = v14;
      if (v14) {
        id v15 = v14;
      }

      if (v13)
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 displayInfo]);
        id v33 = 0LL;
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessage specializedMessageFromPayload:displayInformation:outError:]( &OBJC_CLASS___PKSharingMessage,  "specializedMessageFromPayload:displayInformation:outError:",  v13,  v16,  &v33));
        id v18 = v33;

        if (!v17 || v18)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(33LL);
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  v13,  4LL);
            *(_DWORD *)__int128 buf = 138477827;
            __int16 v36 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Unable to serialize message from %{private}@",  buf,  0xCu);
          }

          id v23 = v18;
          uint64_t v19 = 0LL;
          id v7 = v23;
        }

        else
        {
          id v41 = v17;
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v41,  1LL));
        }

        if (![*(id *)(a1 + 40) mailboxStatus]) {
          [*(id *)(a1 + 40) setMailboxStatus:3];
        }
      }

      else
      {
        uint64_t v19 = 0LL;
      }
    }

    else
    {
      uint64_t v19 = 0LL;
      id v7 = 0LL;
    }
  }

  char v24 = *(void **)(a1 + 40);
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v24 setUpdatedAt:v25];

  uint64_t v26 = *(void *)(a1 + 32);
  if (v26) {
    [*(id *)(v26 + 24) endpointWasUpdated:*(void *)(a1 + 40) oldTransportIdentifier:0];
  }
  uint64_t v27 = PKLogFacilityTypeGetObject(33LL);
  int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transportIdentifier]);
    uint64_t v30 = PKSharingLoggableMailboxAddress(v29);
    uint64_t v31 = (NSString *)objc_claimAutoreleasedReturnValue(v30);
    *(_DWORD *)__int128 buf = 138543875;
    __int16 v36 = v31;
    __int16 v37 = 2113;
    id v38 = v19;
    __int16 v39 = 2114;
    id v40 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Fetched content from remote mailbox %{public}@. Messages: %{private}@ Error: %{public}@",  buf,  0x20u);
  }

  if (v7) {
    id v32 = 0LL;
  }
  else {
    id v32 = v19;
  }
  (*(void (**)(void, void *, void *))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v32, v7);
}

id sub_1001705B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (!a1) {
    return 0LL;
  }
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 data]);
  uint64_t v8 = PKAESGCMDecrypt(v6, v7);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (a4)
  {
    if (!v9)
    {
      NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
      id v13 = @"Unable to decrypt payload";
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
      *a4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v10));
    }
  }

  return v9;
}

void sub_1001708AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
    uint64_t v10 = PKSharingLoggableMailboxAddress(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v15 = 138543619;
    id v16 = v11;
    __int16 v17 = 2113;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Deleted remote mailbox %{public}@ with result: %{private}@",  (uint8_t *)&v15,  0x16u);
  }

  [*(id *)(a1 + 32) setMailboxStatus:4];
  NSErrorUserInfoKey v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v12 setUpdatedAt:v13];

  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    [*(id *)(v14 + 24) endpointWasUpdated:*(void *)(a1 + 32) oldTransportIdentifier:0];
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v6 == 0LL, v6);
}

void sub_100170C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
    uint64_t v10 = PKSharingLoggableMailboxAddress(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v15 = 138543618;
    id v16 = v11;
    __int16 v17 = 2114;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "RelayServer: relinquished remote mailbox %{public}@ with result: %{public}@",  (uint8_t *)&v15,  0x16u);
  }

  [*(id *)(a1 + 32) setMailboxStatus:0];
  NSErrorUserInfoKey v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v12 setUpdatedAt:v13];

  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    [*(id *)(v14 + 24) endpointWasUpdated:*(void *)(a1 + 32) oldTransportIdentifier:0];
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v6 == 0LL, v6);
}

void sub_100171380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

id sub_10017139C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    id v20 = 0LL;
    goto LABEL_14;
  }

  if (PKSharingUseThirdPartyPushTopic())
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v23 = 0;
    }

    uint64_t v6 = PKSharingRelayServerThirdPartyPushTopic();
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    goto LABEL_13;
  }

  if (!v3)
  {
    uint64_t v21 = PKSharingRelayServerPushTopicForCurrentEnvironment();
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v21);
LABEL_13:
    id v20 = (void *)v7;
    goto LABEL_14;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) sharedWebService]);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 context]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 configuration]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 targetDevice]);
  NSErrorUserInfoKey v12 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceRegion]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 featureWithType:5 inRegion:v12]);

  if (v13
    && (uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 relayServerHostsToUseThirdPartyPushTopic]),
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v3 host]),
        unsigned int v16 = [v14 containsObject:v15],
        v15,
        v14,
        v16))
  {
    uint64_t v17 = PKSharingRelayServerThirdPartyPushTopic();
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
  }

  else
  {
    uint64_t v19 = PKSharingRelayServerPushTopicForCurrentEnvironment();
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v19);
  }

  id v20 = (void *)v18;

LABEL_14:
  return v20;
}

void sub_100171530(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSUUID);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v8, "UUIDString"));

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100171614;
  v14[3] = &unk_1006476E8;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v16 = v7;
  uint64_t v17 = v10;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  sub_10016F658(v11, v9, 0LL, 1, v14);
}

void sub_100171614(uint64_t a1, int a2, int a3, id obj)
{
  id v6 = obj;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10017166C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543362;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Failed to prewarm endpoint creation with error: %{public}@",  (uint8_t *)&v11,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100171778(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543362;
      id v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Failed to generate push notification token with result: %{public}@",  (uint8_t *)&v11,  0xCu);
    }
  }

  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 hexEncoding]);
  if (v9 && *(_BYTE *)(a1 + 56))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48LL));
    uint64_t v10 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    if (!v10)
    {
      uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      [*(id *)(*(void *)(a1 + 32) + 56) setObject:v10 forKeyedSubscript:*(void *)(a1 + 40)];
    }

    -[NSMutableArray addObject:](v10, "addObject:", v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48LL));
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001718E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138543362;
      id v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Failed to generate app attestation. %{public}@",  (uint8_t *)&v9,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001719C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayServerHost]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _urlRequest]);
    id v6 = [v3 nextTaskID];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100171B64;
    v15[3] = &unk_100647760;
    __int128 v14 = *(_OWORD *)(a1 + 40);
    id v7 = (id)v14;
    __int128 v16 = v14;
    [v3 performRequest:v5 taskIdentifier:v6 retries:1 authHandling:0 completionHandler:v15];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (void *)objc_opt_class(*(void *)(a1 + 32), v10);
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v18 = v11;
      id v12 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "RelayServer: Request missing host, unable to perform request: %{public}@",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 1LL));
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v5);
  }
}

void sub_100171B64(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    int v11 = v9;
LABEL_3:
    id v12 = 0LL;
    goto LABEL_10;
  }

  uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSHTTPURLResponse, v10);
  if ((objc_opt_isKindOfClass(v8, v13) & 1) != 0)
  {
    uint64_t v14 = (uint64_t)[v8 statusCode];
    if (v14 >= 300)
    {
      uint64_t v15 = v14;
      NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
      uint64_t v18 = @"Received non 2XX http status code";
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
      int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  v15,  v16));

      if (v11) {
        goto LABEL_3;
      }
    }
  }

  id v12 = [objc_alloc(*(Class *)(a1 + 40)) initWithData:v7];
  if (v12) {
    int v11 = 0LL;
  }
  else {
    int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  0LL));
  }
LABEL_10:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

NSString *sub_100172228(void *a1)
{
  id v1 = a1;
  id v2 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%li|%@%@",  PKRandomNumberOfLength(5LL),  @"VerificationCheck.",  v1);

  return v2;
}

void sub_100172304(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = PDDefaultQueue();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  PDScheduledActivityClientRegister(@"PDPassVerificationManager", v1, v3);
}

id *sub_100172F1C(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_100173698(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PushProvisioningSharingMetadata),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PushProvisioningSharingMetadata sharingMetaData](v5, "sharingMetaData"));
  [v3 addObject:v4];
}

void sub_1001737EC(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PushProvisioningSharingMetadata),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PushProvisioningSharingMetadata sharingMetaData](v5, "sharingMetaData"));
  [v3 addObject:v4];
}

void sub_1001739B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001739D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001739E0(uint64_t a1)
{
}

uint64_t sub_1001739E8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharingInstanceIdentifier]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue( [v2 pushProvisioningSharingMetadataForProvisioningSharingIdentifier:v3 inDatabase:*(void *)(a1 + 40)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v7)
  {
    [v7 _updateProvisioningSharingMetadata:*(void *)(a1 + 32)];
  }

  else
  {
    id v8 = [objc_alloc(*(Class *)(a1 + 56)) initWithSharingMetadata:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  return 1LL;
}

id sub_100173B34(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharingInstanceIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [v2 pushProvisioningSharingMetadataForProvisioningSharingIdentifier:v3 inDatabase:*(void *)(a1 + 40)]);

  if (v4) {
    id v5 = [v4 deleteFromDatabase];
  }
  else {
    id v5 = 0LL;
  }

  return v5;
}

id sub_100173DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PushProvisioningSharingMetadata,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_100173F6C(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 stringValue]);
  -[PKPushProvisioningSharingMetadata setSharingInstanceIdentifier:](v4, "setSharingInstanceIdentifier:", v5);
}

void sub_100173FBC(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPushProvisioningSharingMetadata setSharingStatus:](v4, "setSharingStatus:", [a3 integerValue]);
}

void sub_100174000(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 stringValue]);
  -[PKPushProvisioningSharingMetadata setProvisioningCredentialHash:](v4, "setProvisioningCredentialHash:", v5);
}

void sub_100174050(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPushProvisioningSharingMetadata setSource:](v4, "setSource:", [a3 integerValue]);
}

void sub_100174094(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
}

void sub_10017409C(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPushProvisioningSharingMetadata setCreatedAt:](v4, "setCreatedAt:", v5);
}

void sub_1001740E8(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPushProvisioningSharingMetadata setSecurityOptions:](v4, "setSecurityOptions:", [a3 integerValue]);
}

void sub_1001768C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001768D8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  return result;
}

void sub_100178050(uint64_t a1)
{
  context = objc_autoreleasePoolPush();
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8LL));
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(*(void *)(a1 + 40) + 24) count]));
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 40) + 24LL);
  id v3 = [v2 countByEnumeratingWithState:&v33 objects:v44 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v34;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v34 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)v6);
        id v32 = 0LL;
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v7,  1LL,  &v32,  context));
        id v9 = v32;
        if (v8)
        {
          [v26 addObject:v8];
        }

        else
        {
          uint64_t Object = PKLogFacilityTypeGetObject(0LL);
          int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v41 = v9;
            __int16 v42 = 2112;
            uint64_t v43 = v7;
            _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "PDNetworkTask failed to archive with error: %@, task: %@",  buf,  0x16u);
          }
        }

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v33 objects:v44 count:16];
    }

    while (v4);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(*(void *)(a1 + 40) + 16) count]));
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  uint64_t v25 = a1;
  id v13 = *(id *)(*(void *)(a1 + 40) + 16LL);
  id v14 = [v13 countByEnumeratingWithState:&v28 objects:v39 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v29;
    do
    {
      NSErrorUserInfoKey v17 = 0LL;
      do
      {
        if (*(void *)v29 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)v17);
        id v27 = 0LL;
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v18,  1LL,  &v27,  context));
        id v20 = v27;
        if (v19)
        {
          [v12 addObject:v19];
        }

        else
        {
          uint64_t v21 = PKLogFacilityTypeGetObject(0LL);
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v41 = v20;
            __int16 v42 = 2112;
            uint64_t v43 = v18;
            _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "PDNetworkTask failed to archive with error: %@, task: %@",  buf,  0x16u);
          }
        }

        NSErrorUserInfoKey v17 = (char *)v17 + 1;
      }

      while (v15 != v17);
      id v15 = [v13 countByEnumeratingWithState:&v28 objects:v39 count:16];
    }

    while (v15);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v25 + 40) + 8LL));
  v37[0] = @"scheduled";
  v37[1] = @"enqueued";
  v38[0] = v26;
  v38[1] = v12;
  id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v38,  v37,  2LL));
  [v23 writeToFile:*(void *)(*(void *)(v25 + 40) + 48) atomically:1];
  PKExcludePathFromBackup(*(void *)(*(void *)(v25 + 40) + 48LL));

  objc_autoreleasePoolPop(context);
  *(_BYTE *)(*(void *)(v25 + 40) + 76LL) = 0;
}

id sub_100178B28(uint64_t a1)
{
  return [*(id *)(a1 + 32) _tryToDequeueTasks];
}

id sub_100178C20(uint64_t a1)
{
  return [*(id *)(a1 + 32) _tryToDequeueTasks];
}

NSString *__cdecl sub_100178F28(id a1, PKCreditAccountMergeSummaryAccountDetails *a2)
{
  return (NSString *)-[PKCreditAccountMergeSummaryAccountDetails accountIdentifier](a2, "accountIdentifier");
}

void sub_100179250(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKCreditAccountMergeSummaryAccountDetails);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  uint64_t v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    uint64_t v7 = v8;
  }
}

void sub_100179494(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
}

void sub_10017949C(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
}

void sub_1001794A4(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountMergeSummaryAccountDetails setStatementBalance:](v4, "setStatementBalance:", v6);
}

void sub_1001794F4(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountMergeSummaryAccountDetails setCurrentBalance:](v4, "setCurrentBalance:", v6);
}

void sub_10017A3DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10017A410(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _handleConnectionSuccessWithResponse:v6 data:v5];
}

void sub_10017A474(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleConnectionFailureWithError:v3];
}

void sub_10017A6C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void (***)(void, void, void))(v2 + 48);
  if (v3 && !*(_BYTE *)(v2 + 41))
  {
    v3[2](v3, *(void *)(v2 + 32), *(void *)(v2 + 24));
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void (***)(void, void, void))(v2 + 48);
  }

  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0LL;
}

void sub_10017A7B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3 && !*(_BYTE *)(v2 + 41))
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v4 = *(void **)(v2 + 48);
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 56);
  *(void *)(v5 + 56) = 0LL;
}

id PDTaskError( uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a2;
  id v15 = -[NSString initWithFormat:arguments:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:arguments:", v13, &a9);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ encountered error: %@",  v14,  v15));
  if (v12)
  {
    v25[0] = NSLocalizedDescriptionKey;
    v25[1] = NSUnderlyingErrorKey;
    v26[0] = v16;
    v26[1] = v12;
    NSErrorUserInfoKey v17 = (void **)v26;
    uint64_t v18 = (NSErrorUserInfoKey *)v25;
    uint64_t v19 = 2LL;
  }

  else
  {
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    char v24 = v16;
    NSErrorUserInfoKey v17 = &v24;
    uint64_t v18 = &v23;
    uint64_t v19 = 1LL;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v18,  v19));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDTaskErrorDomain",  a1,  v20));

  return v21;
}

id PDTaskWarning( uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a2;
  id v15 = -[NSString initWithFormat:arguments:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:arguments:", v13, &a9);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ warning: %@",  v14,  v15));
  if (v12)
  {
    v25[0] = NSLocalizedDescriptionKey;
    v25[1] = NSUnderlyingErrorKey;
    v26[0] = v16;
    v26[1] = v12;
    NSErrorUserInfoKey v17 = (void **)v26;
    uint64_t v18 = (NSErrorUserInfoKey *)v25;
    uint64_t v19 = 2LL;
  }

  else
  {
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    char v24 = v16;
    NSErrorUserInfoKey v17 = &v24;
    uint64_t v18 = &v23;
    uint64_t v19 = 1LL;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v18,  v19));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDTaskWarningDomain",  a1,  v20));

  return v21;
}

id _SQLValueForEncryptionCertificates(void *a1)
{
  id v1 = a1;
  if (!v1
    || (uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _EncryptionCertificatesForSQLValue(void *a1)
{
  id v1 = a1;
  v8[0] = objc_opt_class(&OBJC_CLASS___NSArray, v2);
  v8[1] = objc_opt_class(&OBJC_CLASS___NSData, v3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v8, 2LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v5,  v1,  0LL));

  return v6;
}

void sub_10017B9A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10017BB5C(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentEncryptionCertificate setDestination:](v4, "setDestination:", [a3 integerValue]);
}

void sub_10017BBA0(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentEncryptionCertificate setEncryptionScheme:]( v4,  "setEncryptionScheme:",  [a3 integerValue]);
}

void sub_10017BBE4(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentEncryptionCertificate setCertificatesVersion:]( v4,  "setCertificatesVersion:",  [a3 integerValue]);
}

void sub_10017BC28(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = _EncryptionCertificatesForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentEncryptionCertificate setEncryptionCertificates:](v4, "setEncryptionCertificates:", v6);
}

void sub_10017C098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10017C0B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10017C0C0(uint64_t a1)
{
}

BOOL sub_10017C0C8(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_10017C220(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  int v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_10017C510(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_10017C518(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_10017C520(id a1, PKPendingShareableCredential *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPendingShareableCredential setSource:](v4, "setSource:", [a3 integerValue]);
}

void sub_10017C564(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_10017C56C(id a1, PKPendingShareableCredential *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPendingShareableCredential setSecurityOptions:]( v4,  "setSecurityOptions:",  PKPushProvisioningSecurityOptionsFromString(a3));
}

void sub_10017C5B0(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_10017C5B8(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_10017CA74(void *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[PDGetPassTask taskWithWebService:updateContext:source:]( &OBJC_CLASS___PDGetPassTask,  "taskWithWebService:updateContext:source:",  a1[4],  a1[5],  2LL));
    id v9 = (id)v3;
    if (v3)
    {
      uint64_t v4 = (void *)a1[7];
      if (v4)
      {
        id v5 = *(void **)(a1[6] + 48LL);
        id v6 = [v4 copy];
        id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPointer:](&OBJC_CLASS___NSValue, "valueWithPointer:", v9));
        [v5 setObject:v6 forKey:v7];

        uint64_t v3 = (uint64_t)v9;
      }
    }

    [*(id *)(a1[6] + 40) performTask:v3];
  }

  else
  {
    uint64_t v8 = a1[7];
    if (v8) {
      (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0LL);
    }
  }

void sub_10017D1F8(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  unsigned __int8 v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  if ((v4 & 1) == 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) passesForWebService:v6]);
    [v6 setPushToken:*(void *)(a1 + 32)];
    [v6 generateNewDeviceIdentifier];
    [*(id *)(*(void *)(a1 + 40) + 24) updateWebService:v6];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10017D2E4;
    v7[3] = &unk_10063E008;
    void v7[4] = *(void *)(a1 + 40);
    id v8 = v6;
    [v5 enumerateObjectsUsingBlock:v7];
  }
}

void sub_10017D2E4(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "settingEnabled:forPass:", 2))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v6 serialNumber]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 authenticationToken]);
    [v3 _registerWithSerialNumber:v4 authToken:v5 webService:*(void *)(a1 + 40)];
  }
}

void sub_10017DCA8(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[PDRegistrationTask registerTaskWithWebService:serialNumber:authToken:]( &OBJC_CLASS___PDRegistrationTask,  "registerTaskWithWebService:serialNumber:authToken:",  a1[4],  a1[5],  a1[6]));
  [*(id *)(a1[7] + 40) performTask:v2];
}

void sub_10017E1F4(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v6 passUniqueIdentifier]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v6 serialNumber]);
  if ([*(id *)(*(void *)(a1 + 32) + 24) settingEnabled:2 forPassWithUniqueIdentifier:v3]
    && [*(id *)(a1 + 40) containsObject:v4])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[PDGetPassTask taskWithWebService:updateContext:source:]( &OBJC_CLASS___PDGetPassTask,  "taskWithWebService:updateContext:source:",  *(void *)(a1 + 48),  v6,  1LL));
    [v5 setServerRequested:*(unsigned __int8 *)(a1 + 56)];
    [*(id *)(*(void *)(a1 + 32) + 40) performTask:v5];
    [*(id *)(a1 + 40) removeObject:v4];
  }
}

id sub_10017E8B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___PDRegistrationTask, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    || (uint64_t v7 = objc_opt_class(&OBJC_CLASS___PDGetPassTask, v6), (objc_opt_isKindOfClass(v3, v7) & 1) != 0))
  {
    id v8 = [v3 pertainsToPassTypeIdentifier:*(void *)(a1 + 32) serialNumber:*(void *)(a1 + 40)];
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

uint64_t sub_10017E9D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___PDGetPassTask, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    && [v3 pertainsToPassTypeIdentifier:*(void *)(a1 + 32) serialNumber:*(void *)(a1 + 40)])
  {
    uint64_t v6 = [v3 userRequested] ^ 1;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

id sub_10017EAB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___PDWhatChangedTask, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    || (uint64_t v7 = objc_opt_class(&OBJC_CLASS___PDGetSerialNumbersTask, v6), (objc_opt_isKindOfClass(v3, v7) & 1) != 0))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 passTypeIdentifier]);
    id v9 = [v8 isEqualToString:*(void *)(a1 + 32)];
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

void sub_10017F074( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

CFStringRef PDCloudStoreContainerStateToString(uint64_t a1)
{
  else {
    return off_100649840[a1 - 1];
  }
}

CFStringRef PDCloudStoreContainerStateToUserString(uint64_t a1)
{
  else {
    return off_1006498B8[a1 - 1];
  }
}

void sub_10017F63C(id *a1)
{
  unsigned int v2 = objc_msgSend(a1[4], "_queue_canInitializeContainer");
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([a1[4] description]);
    uint64_t v6 = (void *)v5;
    uint64_t v7 = @"NO";
    if (v2) {
      uint64_t v7 = @"YES";
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v37 = v5;
    __int16 v38 = 2114;
    __int16 v39 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Container %@ can be initialized %{public}@",  buf,  0x16u);
  }

  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] description]);
      id v9 = (const __CFString *)a1[5];
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v37 = (uint64_t)v8;
      __int16 v38 = 2114;
      __int16 v39 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Starting initialCloudDatabaseSetup for container %@, operationGroupNameSuffix: %{public}@",  buf,  0x16u);
    }

    if (a1[6])
    {
      os_unfair_lock_lock((os_unfair_lock_t)a1[4] + 16);
      id v12 = (void *)*((void *)a1[4] + 1);
      id v13 = objc_retainBlock(a1[6]);
      [v12 addObject:v13];

      os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 16);
    }

    if (PKForceCloudStoreInitializationFailure(v10, v11))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "**** PKForceCloudStoreInitializationFailure switch is on!! Forcing cloud store error.",  buf,  2u);
      }

      *((void *)a1[4] + 22) = 3LL;
      objc_initWeak((id *)buf, a1[4]);
      id v14 = a1[4];
      id v15 = a1[5];
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      v34[2] = sub_10017FB38;
      v34[3] = &unk_100647CC8;
      objc_copyWeak(&v35, (id *)buf);
      objc_msgSend(v14, "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", 3, v15, 3, v34);
      objc_destroyWeak(&v35);
      objc_destroyWeak((id *)buf);
    }

    else
    {
      uint64_t v21 = a1[4];
      if (*((void *)v21 + 22) == 15LL && !v21[48])
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v37 = (uint64_t)v21;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "The cloud store %@ is already setup.",  buf,  0xCu);
        }

        [a1[4] _markEndCloudStoreDatabaseSetupWithSuccess:1 error:0];
      }

      else if (v21[129])
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v37 = (uint64_t)v21;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "All cloud store %@ setup is already in progress. The completion will be called when it is finished.",  buf,  0xCu);
        }
      }

      else
      {
        v21[129] = 1;
        uint64_t v22 = a1 + 4;
        *((void *)a1[4] + 22) = 1LL;
        id v23 = a1[4];
        id v25 = a1[5];
        char v24 = a1 + 5;
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( [v23 reportContainerChangeIntervalBeginEventWithType:2 stateName:0 objectNames:0 operationGroupName:0 opera tionGroupNameSuffix:v25]);
        objc_msgSend(*v22, "_queue_startCloudStoreInitializationTimer");
        objc_initWeak((id *)buf, *v22);
        id v27 = *v22;
        id v28 = *v24;
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_10017FBF4;
        v30[3] = &unk_100647CF0;
        objc_copyWeak(&v33, (id *)buf);
        id v29 = v26;
        id v31 = v29;
        id v32 = *v24;
        objc_msgSend( v27,  "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:",  1,  v28,  3,  v30);

        objc_destroyWeak(&v33);
        objc_destroyWeak((id *)buf);
      }
    }
  }

  else
  {
    uint64_t v16 = (void (**)(id, void, void *))a1[6];
    if (v16)
    {
      id v17 = a1[4];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 description]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot initialize container %@",  v18));
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 errorWithCode:-5001 description:v19]);
      v16[2](v16, 0LL, v20);
    }
  }

void sub_10017FAFC(_Unwind_Exception *a1)
{
}

void sub_10017FB38(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = (dispatch_queue_s *)WeakRetained[20];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10017FBE0;
  v9[3] = &unk_1006392B0;
  id v10 = WeakRetained;
  id v11 = v4;
  id v7 = v4;
  id v8 = WeakRetained;
  dispatch_async(v6, v9);
}

id sub_10017FBE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _markEndCloudStoreDatabaseSetupWithSuccess:0 error:*(void *)(a1 + 40)];
}

void sub_10017FBF4(id *a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v7 = (dispatch_queue_s *)WeakRetained[20];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10017FCD4;
  block[3] = &unk_10063ADC0;
  id v12 = WeakRetained;
  id v8 = a1[4];
  char v16 = a2;
  id v13 = v8;
  id v14 = v5;
  id v15 = a1[5];
  id v9 = v5;
  id v10 = WeakRetained;
  dispatch_async(v7, block);
}

id sub_10017FCD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2)
  {
    [0 reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:0];
    objc_msgSend(*(id *)(a1 + 32), "_queue_cancelCloudStoreInitializationTimer");
    return [*(id *)(a1 + 32) _markEndCloudStoreDatabaseSetupWithSuccess:*(unsigned __int8 *)(a1 + 64) error:*(void *)(a1 + 48)];
  }

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (objc_class *)objc_opt_class(v2, v5);
    id v7 = NSStringFromClass(v6);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)__int128 buf = 138412290;
    id v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed initialCloudDatabaseSetup for class %@",  buf,  0xCu);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) container]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 containerIdentifier]);
  uint64_t v11 = PKCurrentCloudStoreApplePayContainerName();
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = v10;
  id v14 = v12;
  if (v13 == v14)
  {

    goto LABEL_14;
  }

  id v15 = v14;
  if (v13) {
    BOOL v16 = v14 == 0LL;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {

LABEL_15:
    goto LABEL_16;
  }

  unsigned __int8 v18 = [v13 isEqualToString:v14];

  if ((v18 & 1) != 0)
  {
LABEL_14:
    uint64_t v19 = PKAggDKeyCloudStoreSetup;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 64),  @"success"));
    id v25 = v9;
    id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    PKAnalyticsSendEvent(v19, v13);
    goto LABEL_15;
  }

uint64_t sub_100180204(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 32), "_queue_canInitializeContainer"));
}

void sub_100180538(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = @"YES";
    if (*(_BYTE *)(a1 + 64)) {
      uint64_t v5 = @"YES";
    }
    else {
      uint64_t v5 = @"NO";
    }
    if (!*(_BYTE *)(a1 + 65)) {
      id v4 = @"NO";
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 40LL);
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v35 = v6;
    __int16 v36 = 2114;
    uint64_t v37 = v5;
    __int16 v38 = 2114;
    double v39 = *(double *)&v4;
    __int16 v40 = 2114;
    uint64_t v41 = v7;
    __int16 v42 = 2114;
    uint64_t v43 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "invalidateCloudStoreWithOperationGroupNameSuffix called with suffix %{public}@, clearCache %{public}@, resultOfZon eRecreation %{public}@, zoneNames %{public}@, lastInvalidationDate %{public}@",  buf,  0x34u);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (*(_BYTE *)(v9 + 129) && !*(_BYTE *)(v9 + 48))
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cannot detach from cloud store while a setup is in process. When the setup is complete, the cloud store will be invalidated.",  buf,  2u);
    }

    uint64_t v15 = *(void *)(a1 + 48);
    if (*(_BYTE *)(a1 + 65) && *(void *)(v15 + 40))
    {
      BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 48) + 40)];
      double v18 = v17;

      BOOL v19 = v18 >= 60.0;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 40LL);
        uint64_t v21 = @"NO";
        *(_DWORD *)__int128 buf = 138543874;
        if (v18 >= 60.0) {
          uint64_t v21 = @"YES";
        }
        uint64_t v35 = v20;
        __int16 v36 = 2114;
        uint64_t v37 = v21;
        __int16 v38 = 2048;
        double v39 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "lastInvalidationDate is %{public}@, shouldInvalidateCloudStore %{public}@, secondsSinceLastInvalidation %f",  buf,  0x20u);
      }

      uint64_t v15 = *(void *)(a1 + 48);
    }

    else
    {
      BOOL v19 = 1;
    }

    *(_BYTE *)(v15 + 32) = v19;
    if (*(void *)(a1 + 56))
    {
      uint64_t v23 = *(os_unfair_lock_s **)(a1 + 48);
      uint64_t v22 = (id *)(a1 + 48);
      os_unfair_lock_lock(v23 + 16);
      uint64_t v24 = (void *)*((void *)*v22 + 1);
      id v25 = objc_retainBlock(v22[1]);
      [v24 addObject:v25];

      os_unfair_lock_unlock((os_unfair_lock_t)*v22 + 16);
    }
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v35 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Invalidating cloud store for class %@.",  buf,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) reportContainerChangeIntervalBeginEventWithType:4 stateName:0 objectNames:*(void *)(a1 + 40) operationGroupName:0 operation GroupNameSuffix:*(void *)(a1 + 32)]);
    *(void *)(*(void *)(a1 + 48) + 176LL) = 2LL;
    objc_initWeak((id *)buf, *(id *)(a1 + 48));
    uint64_t v11 = *(void **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 32);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100180964;
    v27[3] = &unk_100647D40;
    objc_copyWeak(&v32, (id *)buf);
    id v31 = *(id *)(a1 + 56);
    char v33 = *(_BYTE *)(a1 + 64);
    int8x16_t v26 = *(int8x16_t *)(a1 + 40);
    id v13 = (id)v26.i64[0];
    int8x16_t v28 = vextq_s8(v26, v26, 8uLL);
    id v29 = *(id *)(a1 + 32);
    id v14 = v10;
    id v30 = v14;
    objc_msgSend(v11, "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", 2, v12, 3, v27);

    objc_destroyWeak(&v32);
    objc_destroyWeak((id *)buf);
  }

void sub_100180940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_100180964(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v7 = (dispatch_queue_s *)WeakRetained[20];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100180A78;
  v12[3] = &unk_100647D18;
  id v13 = WeakRetained;
  id v19 = *(id *)(a1 + 64);
  char v20 = a2;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v8;
  char v21 = *(_BYTE *)(a1 + 80);
  id v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = WeakRetained;
  dispatch_async(v7, v12);
}

uint64_t sub_100180A78(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 40LL);
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updating lastInvalidationDate to %{public}@",  buf,  0xCu);
    }

    objc_msgSend(*(id *)(a1 + 48), "_queue_didInvalidateContainer:", *(unsigned __int8 *)(a1 + 89));
    if (*(_BYTE *)(a1 + 89))
    {
      if ([*(id *)(a1 + 56) count])
      {
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        id v8 = *(id *)(a1 + 56);
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v19;
          do
          {
            for (id i = 0LL; i != v10; id i = (char *)i + 1)
            {
              if (*(void *)v19 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)i);
              if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v14 = *(void *)(a1 + 32);
                *(_DWORD *)__int128 buf = 138412546;
                uint64_t v23 = v13;
                __int16 v24 = 2112;
                uint64_t v25 = v14;
                _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Clearing zone %@ in local database after invalidating %@",  buf,  0x16u);
              }

              [*(id *)(*(void *)(a1 + 32) + 152) clearCacheInContainerForZoneName:v13];
            }

            id v10 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
          }

          while (v10);
        }

        [*(id *)(a1 + 48) reportContainerChangeSignpostEventType:5 stateName:0 objectNames:*(void *)(a1 + 56) changeToken:0 error:*(void *)(a1 + 40) operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 64)];
      }

      else
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v23 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Clearing local database after invalidating %@",  buf,  0xCu);
        }

        [*(id *)(*(void *)(a1 + 32) + 152) clearCacheInContainer];
        [*(id *)(a1 + 48) reportContainerChangeSignpostEventType:6 stateName:0 objectNames:0 changeToken:0 error:*(void *)(a1 + 40) operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 64)];
      }
    }

    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v23 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Not clearing local database after invalidating for %@",  buf,  0xCu);
      }
    }

    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 72) error:*(void *)(a1 + 40)];
    uint64_t result = *(void *)(a1 + 80);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 88),  *(void *)(a1 + 40));
    }
  }

  else
  {
    uint64_t result = *(void *)(a1 + 80);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 88),  *(void *)(a1 + 40));
    }
  }

  return result;
}

id sub_100180F38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_cloudStoreAccountInformationWithCompletion:", *(void *)(a1 + 40));
}

void sub_100180FDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100181098;
  block[3] = &unk_100639AF0;
  id v12 = v5;
  id v13 = v6;
  id v14 = v7;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_100181098(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = CKStringFromAccountStatus([*(id *)(a1 + 32) accountStatus]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    unsigned int v6 = [*(id *)(a1 + 32) supportsDeviceToDeviceEncryption];
    uint64_t v7 = @"NO";
    uint64_t v8 = *(void *)(a1 + 40);
    int v10 = 138412802;
    uint64_t v11 = v5;
    if (v6) {
      uint64_t v7 = @"YES";
    }
    __int16 v12 = 2114;
    id v13 = v7;
    __int16 v14 = 2112;
    uint64_t v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Apple Account status: %@, supportsDeviceToDeviceEncryption: %{public}@, with error: %@",  (uint8_t *)&v10,  0x20u);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }
  return result;
}

id sub_100181268(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:",  *(void *)(a1 + 56),  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(a1 + 48));
}

void sub_100181AEC(_Unwind_Exception *a1)
{
}

void sub_100181B10(void *a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100181BC4;
  block[3] = &unk_10063B150;
  uint64_t v4 = a1[4];
  id v5 = (void *)a1[5];
  unsigned int v6 = *(dispatch_queue_s **)(v4 + 160);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v12 = v3;
  id v7 = v5;
  id v9 = (void *)a1[6];
  uint64_t v8 = a1[7];
  id v13 = v7;
  uint64_t v15 = v8;
  id v14 = v9;
  id v10 = v3;
  dispatch_async(v6, block);
}

id sub_100181BC4(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:",  *(void *)(a1 + 40),  7,  *(void *)(a1 + 48),  *(void *)(a1 + 64),  1,  *(void *)(a1 + 56));
}

void sub_100181BE0(void *a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100181C94;
  block[3] = &unk_10063B150;
  uint64_t v4 = a1[4];
  id v5 = (void *)a1[5];
  unsigned int v6 = *(dispatch_queue_s **)(v4 + 160);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v12 = v3;
  id v7 = v5;
  id v9 = (void *)a1[6];
  uint64_t v8 = a1[7];
  id v13 = v7;
  uint64_t v15 = v8;
  id v14 = v9;
  id v10 = v3;
  dispatch_async(v6, block);
}

id sub_100181C94(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:",  *(void *)(a1 + 40),  8,  *(void *)(a1 + 48),  *(void *)(a1 + 64),  1,  *(void *)(a1 + 56));
}

void sub_100181CB0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100181D64;
  block[3] = &unk_10063B150;
  uint64_t v5 = a1[4];
  unsigned int v6 = (void *)a1[5];
  id v7 = *(dispatch_queue_s **)(v5 + 160);
  block[1] = 3221225472LL;
  void block[4] = v5;
  id v13 = v4;
  id v8 = v6;
  id v10 = (void *)a1[6];
  uint64_t v9 = a1[7];
  id v14 = v8;
  uint64_t v16 = v9;
  id v15 = v10;
  id v11 = v4;
  dispatch_async(v7, block);
}

id sub_100181D64(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:",  *(void *)(a1 + 40),  9,  *(void *)(a1 + 48),  *(void *)(a1 + 64),  1,  *(void *)(a1 + 56));
}

void sub_100181D80(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100181E34;
  block[3] = &unk_10063B150;
  uint64_t v5 = a1[4];
  unsigned int v6 = (void *)a1[5];
  id v7 = *(dispatch_queue_s **)(v5 + 160);
  block[1] = 3221225472LL;
  void block[4] = v5;
  id v13 = v4;
  id v8 = v6;
  id v10 = (void *)a1[6];
  uint64_t v9 = a1[7];
  id v14 = v8;
  uint64_t v16 = v9;
  id v15 = v10;
  id v11 = v4;
  dispatch_async(v7, block);
}

id sub_100181E34(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:",  *(void *)(a1 + 40),  13,  *(void *)(a1 + 48),  *(void *)(a1 + 64),  1,  *(void *)(a1 + 56));
}

void sub_100181E50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    WeakRetained[22] = 11LL;
    uint64_t v5 = WeakRetained;
    [WeakRetained _setContainerState:11 operationGroupNameSuffix:*(void *)(a1 + 32) retryCount:*(void *)(a1 + 56) completion:*(void *)(a1 + 40)];
LABEL_5:
    id WeakRetained = v5;
    goto LABEL_6;
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = 0LL;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([0 errorWithCode:-4000 description:@"An unknown error occured"]);
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);

    goto LABEL_5;
  }

void sub_100181EE4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100181F98;
  block[3] = &unk_10063B150;
  uint64_t v5 = a1[4];
  unsigned int v6 = (void *)a1[5];
  id v7 = *(dispatch_queue_s **)(v5 + 160);
  block[1] = 3221225472LL;
  void block[4] = v5;
  id v13 = v4;
  id v8 = v6;
  id v10 = (void *)a1[6];
  uint64_t v9 = a1[7];
  id v14 = v8;
  uint64_t v16 = v9;
  id v15 = v10;
  id v11 = v4;
  dispatch_async(v7, block);
}

id sub_100181F98(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:",  *(void *)(a1 + 40),  12,  *(void *)(a1 + 48),  *(void *)(a1 + 64),  1,  *(void *)(a1 + 56));
}

void sub_100181FB4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100182068;
  block[3] = &unk_10063B150;
  uint64_t v5 = a1[4];
  unsigned int v6 = (void *)a1[5];
  id v7 = *(dispatch_queue_s **)(v5 + 160);
  block[1] = 3221225472LL;
  void block[4] = v5;
  id v13 = v4;
  id v8 = v6;
  id v10 = (void *)a1[6];
  uint64_t v9 = a1[7];
  id v14 = v8;
  uint64_t v16 = v9;
  id v15 = v10;
  id v11 = v4;
  dispatch_async(v7, block);
}

id sub_100182068(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:",  *(void *)(a1 + 40),  2,  *(void *)(a1 + 48),  *(void *)(a1 + 64),  1,  *(void *)(a1 + 56));
}

id sub_1001825C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSetupAssistantStateFrom:2 toState:3];
}

id sub_100182A60(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_cloudStoreAccountChanged:", *(void *)(a1 + 40));
}

void sub_100182B10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 removeObserver:*(void *)(a1 + 32) name:CKIdentityUpdateNotification object:0];

  [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:21 stateName:0 objectNames:0 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 120))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Keychain syncing has finished. A cloud store reset is currently happening. Ignoring notification.",  buf,  2u);
    }
  }

  else
  {
    int v6 = *(unsigned __int8 *)(v3 + 129);
    uint64_t v7 = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v9)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Keychain syncing has finished. A cloud store setup is currently happening. Ignoring notification.",  buf,  2u);
      }
    }

    else
    {
      if (v9)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Keychain syncing has finished. Trying to setup the container again",  buf,  2u);
      }

      id v10 = *(void **)(a1 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100182CC8;
      v11[3] = &unk_10063AFC0;
      void v11[4] = v10;
      [v10 initialCloudDatabaseSetupWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixCKIdentityUpdateNotification completion:v11];
    }
  }

void sub_100182CC8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100182D50;
  block[3] = &unk_10063B300;
  char v11 = a2;
  void block[4] = v6;
  id v10 = v5;
  id v8 = v5;
  dispatch_async(v7, block);
}

void sub_100182D50(uint64_t a1)
{
  uint64_t v2 = PKAggDKeyCloudStoreKeychainSyncNotificationDidFireContainerSetup;
  id v14 = @"success";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  id v15 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
  PKAnalyticsSendEvent(v2, v4);

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136LL));
  [WeakRetained cloudStoreContainerShouldUnscheduleAllBackgroundActivities:*(void *)(a1 + 32)];

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48)) {
      BOOL v9 = @"YES";
    }
    else {
      BOOL v9 = @"NO";
    }
    int v10 = 138543618;
    char v11 = v9;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDCloudStoreContainer _keychainSyncFinishedFired]: Finished cloud database setup with success %{public}@, error %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_100183030(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10018311C;
  v11[3] = &unk_100647E30;
  id v12 = v6;
  id v13 = v7;
  id v17 = *(id *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = v5;
  id v16 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

void sub_10018311C(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412546;
      id v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "All zones were created after zone create request: %@, error %@",  buf,  0x16u);
    }

    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 152) subscriptionsForDatabaseZones:*(void *)(a1 + 56)]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Creating subscriptions for create zone request %@",  buf,  0xCu);
    }

    id v10 = *(void **)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100183358;
    v12[3] = &unk_100647E08;
    uint64_t v11 = *(void *)(a1 + 64);
    id v13 = *(id *)(a1 + 72);
    objc_msgSend( v10,  "_queue_createSubscriptionsByDatabaseIdentifier:operationGroupNameSuffix:completion:",  v2,  v11,  v12);
    id v6 = v13;
    goto LABEL_11;
  }

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Creation of %lu zones %@ failed with error %@",  [*(id *)(a1 + 40) count],  *(void *)(a1 + 40),  *(void *)(a1 + 32)));
  uint64_t v3 = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) errorWithCode:-4012 description:v2]);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
LABEL_11:
  }
}

void sub_100183358(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Subscriptions created for create zone request %@, with error %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, BOOL, id))(v9 + 16))(v9, v6 == 0LL, v6);
  }
}

void sub_10018354C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) == 0xE)
  {
    if ([*(id *)(v1 + 40) count])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = *(void **)(v1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        id v71 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Trying to insert or update items %@...",  buf,  0xCu);
      }

      double v39 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v64 = 0u;
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      __int128 v67 = 0u;
      id obj = *(id *)(v1 + 40);
      id v43 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
      if (v43)
      {
        uint64_t v41 = 0LL;
        uint64_t v42 = *(void *)v65;
        oslog = v4;
        do
        {
          uint64_t v6 = 0LL;
          do
          {
            if (*(void *)v65 != v42) {
              objc_enumerationMutation(obj);
            }
            uint64_t v48 = v6;
            uint64_t v7 = *(void **)(*((void *)&v64 + 1) + 8 * v6);
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v7 item]);
            id v46 = (void *)objc_claimAutoreleasedReturnValue([v7 recordSpecificKeys]);
            id v45 = [v7 codingType];
            id v50 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            __int128 v60 = 0u;
            __int128 v61 = 0u;
            __int128 v62 = 0u;
            __int128 v63 = 0u;
            uint64_t v44 = v7;
            uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudStoreZones]);
            id v9 = [v8 countByEnumeratingWithState:&v60 objects:v68 count:16];
            if (v9)
            {
              id v10 = v9;
              uint64_t v11 = *(void *)v61;
              do
              {
                for (id i = 0LL; i != v10; id i = (char *)i + 1)
                {
                  if (*(void *)v61 != v11) {
                    objc_enumerationMutation(v8);
                  }
                  id v13 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)i);
                  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v1 + 32) + 152) databaseForCloudStoreZone:v13]);
                  if (v14)
                  {
                    uint64_t v15 = v1;
                    __int16 v16 = *(void **)(v1 + 32);
                    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v13));
                    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( [v16 filterCloudStoreZones:v17 action:1 inContainerDatabase:v14]);

                    if ([v18 count])
                    {
                      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
                      __int128 v20 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v50, "objectForKey:", v19));

                      if (!v20)
                      {
                        __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
                        -[NSMutableDictionary setObject:forKey:](v50, "setObject:forKey:", v20, v21);
                      }

                      -[NSMutableSet addObject:](v20, "addObject:", v13);
                    }

                    else
                    {
                      __int128 v20 = (NSMutableSet *)oslog;
                      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__int128 buf = 138412290;
                        id v71 = v13;
                        __int128 v20 = (NSMutableSet *)oslog;
                        _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Filtering cloud store zone %@ from upload action",  buf,  0xCu);
                      }
                    }

                    uint64_t v1 = v15;
                  }
                }

                id v10 = [v8 countByEnumeratingWithState:&v60 objects:v68 count:16];
              }

              while (v10);
            }

            if (-[NSMutableDictionary count](v50, "count")) {
              id v22 = -[NSMutableDictionary copy](v50, "copy");
            }
            else {
              id v22 = 0LL;
            }
            if (![v22 count])
            {
              uint64_t v23 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(v1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItem:v47 action:1]);

              id v22 = (id)v23;
            }

            if ([v22 count])
            {
              __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v47 recordTypesAndNamesForCodingType:v45]);
              if (-[os_log_s count](v24, "count"))
              {
                v53[0] = _NSConcreteStackBlock;
                v53[1] = 3221225472LL;
                v53[2] = sub_100183CF4;
                v53[3] = &unk_100647ED0;
                id v54 = v39;
                uint64_t v25 = v24;
                uint64_t v26 = *(void *)(v1 + 32);
                uint64_t v55 = v25;
                uint64_t v56 = v26;
                id v27 = v47;
                id v57 = v27;
                id v58 = v46;
                id v59 = v45;
                [v22 enumerateKeysAndObjectsUsingBlock:v53];
                if ((v41 & 0x100000000LL) != 0 || (objc_opt_respondsToSelector(v27, "cloudKitMetadata") & 1) != 0) {
                  BYTE4(v41) = 1;
                }
                else {
                  BYTE4(v41) = [v44 detectConflicts];
                }
                if ((v41 & 1) != 0) {
                  LOBYTE(v41) = 1;
                }
                else {
                  LOBYTE(v41) = [v44 returnRecords];
                }

                int8x16_t v28 = (os_log_s *)v54;
              }

              else
              {
                if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  id v71 = v47;
                  _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "There are no record types or names associated with item %@",  buf,  0xCu);
                }

                int8x16_t v28 = oslog;
              }
            }

            else
            {
              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                id v71 = v47;
                _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "There is no databases associated with item %@",  buf,  0xCu);
              }

              __int16 v24 = oslog;
            }

            uint64_t v6 = v48 + 1;
          }

          while ((id)(v48 + 1) != v43);
          id v43 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
        }

        while (v43);
      }

      else
      {
        uint64_t v41 = 0LL;
      }

      uint64_t v37 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  6LL,  0LL,  v41 & 1,  *(void *)(v1 + 72),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
      -[PDCloudStoreRecordsRequest setRecordsToSaveByDatabaseIdentifier:]( v37,  "setRecordsToSaveByDatabaseIdentifier:",  v39);
      -[PDCloudStoreRecordsRequest setDetectConflicts:](v37, "setDetectConflicts:", BYTE4(v41) & 1);
      __int16 v38 = *(void **)(v1 + 32);
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_100184260;
      v51[3] = &unk_10063F208;
      id v52 = *(id *)(v1 + 64);
      [v38 executeRecordsRequest:v37 completion:v51];
    }

    else
    {
      uint64_t v36 = *(void *)(v1 + 64);
      if (v36) {
        (*(void (**)(uint64_t, void, void, void))(v36 + 16))(v36, 0LL, 0LL, 0LL);
      }
    }
  }

  else
  {
    id v29 = PDCloudStoreContainerStateToString(v2);
    id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer updateCloudStoreWithLocalItemsWithConfigurations:groupName:groupNameSuffix :qualityOfService:completion:]_block_invoke",  v30));

    uint64_t v32 = PKLogFacilityTypeGetObject(9LL);
    char v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v71 = v31;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v34 = *(void *)(v1 + 64);
    if (v34)
    {
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) _cannotPerformActionErrorWithFailureReason:v31]);
      (*(void (**)(uint64_t, void, void, void *))(v34 + 16))(v34, 0LL, 0LL, v35);
    }
  }

void sub_100183CF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id obj = a3;
  id v6 = [obj countByEnumeratingWithState:&v43 objects:v53 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v44;
    *(void *)&__int128 v7 = 138412802LL;
    __int128 v34 = v7;
    do
    {
      for (id i = 0LL; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v44 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v5, v34));
        id v13 = v12;
        if (v12) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        }
        uint64_t v15 = v14;

        __int16 v38 = v15;
        [*(id *)(a1 + 32) setObject:v15 forKey:v5];
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v11 recordZone]);
        uint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472LL;
        v39[2] = sub_100184084;
        v39[3] = &unk_100647EA8;
        __int128 v18 = *(void **)(a1 + 40);
        v39[4] = *(void *)(a1 + 48);
        id v40 = *(id *)(a1 + 56);
        id v37 = v16;
        id v41 = v37;
        __int128 v19 = v17;
        uint64_t v42 = v19;
        [v18 enumerateObjectsUsingBlock:v39];
        uint64_t v36 = v19;
        id v20 = [[PKCloudStoreRecord alloc] initWithRecords:v19];
        [v20 setCloudStoreSpecificKeys:*(void *)(a1 + 64)];
        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = PKCloudStoreCodingTypeToString(*(void *)(a1 + 72));
          __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v48 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Uploading record with coding type %@",  buf,  0xCu);
        }

        [*(id *)(a1 + 56) encodeWithCloudStoreCoder:v20 codingType:*(void *)(a1 + 72)];
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v20 records]);
        uint64_t v26 = v38;
        -[NSMutableSet addObjectsFromArray:](v38, "addObjectsFromArray:", v25);

        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
          id v28 = v8;
          uint64_t v29 = v9;
          id v30 = v5;
          uint64_t v31 = *(void *)(a1 + 56);
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v20 records]);
          id v33 = [v32 count];
          *(_DWORD *)__int128 buf = v34;
          uint64_t v48 = v27;
          __int16 v49 = 2112;
          uint64_t v50 = v31;
          id v5 = v30;
          uint64_t v9 = v29;
          id v8 = v28;
          uint64_t v26 = v38;
          __int16 v51 = 2048;
          id v52 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Inserting items to zone %@: %@, with %ld records",  buf,  0x20u);
        }
      }

      id v8 = [obj countByEnumeratingWithState:&v43 objects:v53 count:16];
    }

    while (v8);
  }
}

void sub_100184084(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_100184124;
  v5[3] = &unk_100647E80;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [a2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_100184124(id *a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] containerManager]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 container]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 containerIdentifier]);

  if ((objc_opt_respondsToSelector(a1[5], "systemFieldsDataForCloudStoreWithIdentifier:") & 1) == 0
    || (uint64_t v9 = objc_claimAutoreleasedReturnValue([a1[5] systemFieldsDataForCloudStoreWithIdentifier:v8])) == 0
    || (id v10 = (void *)v9,
        uint64_t v11 = (CKRecord *)objc_claimAutoreleasedReturnValue( +[CKRecord pk_recordWithSystemFieldsData:]( &OBJC_CLASS___CKRecord,  "pk_recordWithSystemFieldsData:",  v9)),  v10,  !v11))
  {
    __int16 v12 = objc_alloc(&OBJC_CLASS___CKRecordID);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] zoneID]);
    uint64_t v14 = -[CKRecordID initWithRecordName:zoneID:](v12, "initWithRecordName:zoneID:", v5, v13);

    uint64_t v11 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  v15,  v14);
  }

  [a1[7] addObject:v11];
}

void sub_100184260(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Update of records failed with error %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 cloudStoreRecords]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 allItems]);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 conflictingCloudStoreRecords]);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 allItems]);

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100184578(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[2] = sub_100184654;
  v14[3] = &unk_100643428;
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v14[1] = 3221225472LL;
  id v15 = v7;
  id v16 = v6;
  id v10 = v8;
  uint64_t v11 = *(void *)(a1 + 32);
  id v17 = v10;
  uint64_t v18 = v11;
  char v20 = *(_BYTE *)(a1 + 56);
  id v19 = *(id *)(a1 + 48);
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v9, v14);
}

uint64_t sub_100184654(uint64_t a1)
{
  if (*(void *)(a1 + 32) || ![*(id *)(a1 + 40) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) debugDescription]);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v13 = v4;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Unable to create record zones %{public}@ due to error: %{public}@",  buf,  0x16u);
    }

    goto LABEL_9;
  }

  uint64_t v6 = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully created record zones.", buf, 2u);
  }

  id v8 = *(void **)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10018482C;
  v11[3] = &unk_10063A468;
  void v11[4] = *(void *)(a1 + 56);
  [v8 enumerateKeysAndObjectsUsingBlock:v11];
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v9 = objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest);
    uint64_t v3 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v9,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  0LL,  1LL,  0LL,  17LL,  PKCloudStoreOperationGroupInitialSetup,  0LL);
    -[os_log_s setShouldSaveToken:](v3, "setShouldSaveToken:", 1LL);
    [*(id *)(a1 + 56) executeRecordsRequest:v3 completion:0];
LABEL_9:
  }

  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(a1 + 40),  *(void *)(a1 + 32));
  }
  return result;
}

void sub_10018482C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v25 = v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForIdentifier:v5]);
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v26 objects:v33 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v27;
    do
    {
      for (id i = 0LL; i != v10; id i = (char *)i + 1)
      {
        if (*(void *)v27 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 zoneID]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneName]);

        id v16 = *(void **)(*(void *)(a1 + 32) + 152LL);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 zoneID]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 cloudStoreZoneForZoneID:v17 inContainerDatabase:v7]);

        if (!v18)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(9LL);
          char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138543362;
            uint64_t v32 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "The zone %{public}@ did not exist before. Informing delegate that a new zone was created.",  buf,  0xCu);
          }

          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
          uint64_t v22 = *(void *)(a1 + 32);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v22 + 152) containerName]);
          objc_msgSend( v21,  "cloudStoreContainer:createdZoneWithName:forContainerName:scope:",  v22,  v15,  v23,  objc_msgSend(v7, "scope"));

          if (v15)
          {
            id v30 = v15;
            __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v30,  1LL));
          }

          else
          {
            __int16 v24 = 0LL;
          }

          [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:9 stateName:0 objectNames:v24 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v26 objects:v33 count:16];
    }

    while (v10);
  }

  [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:v25 didCreateZones:v8];
}

void sub_100184C64(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 160);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100184D24;
  v13[3] = &unk_10063B440;
  id v14 = v6;
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v9;
  id v11 = v7;
  id v12 = v6;
  dispatch_async(v10, v13);
}

uint64_t sub_100184D24(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count] && !*(void *)(a1 + 40))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully created subscriptions", buf, 2u);
    }

    id v7 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100184E80;
    v9[3] = &unk_10063A468;
    void v9[4] = *(void *)(a1 + 48);
    [v7 enumerateKeysAndObjectsUsingBlock:v9];
  }

  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to create subscriptions with error %@",  buf,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }
  return result;
}

id sub_100184E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didCreateSubscriptions:a3];
}

void sub_100184FC0(uint64_t a1)
{
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v18 = sub_1001851C0;
  id v19 = &unk_100647F70;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 96);
  uint64_t v17 = 3221225472LL;
  uint64_t v20 = v2;
  id v21 = v3;
  id v5 = [v4 indexOfObjectPassingTest:&v16];
  if (v5 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(a1 + 40), "addCompletion:", *(void *)(a1 + 48), v16, v17, v18, v19, v20);
    [*(id *)(*(void *)(a1 + 32) + 96) addObject:*(void *)(a1 + 40)];
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Records request queued %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_executeNextFecthRequestIfPossible");
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "objectAtIndex:", v5, v16, v17, v18, v19, v20));
    [*(id *)(a1 + 32) coalesceRequest:v9 withNewRequest:*(void *)(a1 + 40)];
    [v9 addCompletion:*(void *)(a1 + 48)];
    uint64_t v10 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      uint64_t v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Records request coalesced %@ onto existing request %@",  buf,  0x16u);
    }

    id v13 = [v9 qualityOfService];
    id v14 = [*(id *)(a1 + 40) qualityOfService];
    id v15 = v9;
    objc_msgSend(v9, "setQualityOfService:", objc_msgSend(v15, "qualityOfService"));
  }
}

id sub_1001851C0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 32) canCoalesceRequest:a2 withNewRequest:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    *a4 = 1;
  }
  return result;
}

void sub_100186520(_Unwind_Exception *a1)
{
}

void sub_100186540(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 160);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100186600;
  v12[3] = &unk_10063B060;
  void v12[4] = v7;
  id v13 = v8;
  id v14 = v6;
  id v15 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

id sub_100186600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0LL;

  return objc_msgSend(*(id *)(a1 + 32), "_queue_executeNextFecthRequestIfPossible");
}

uint64_t sub_10018664C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10018665C(uint64_t a1)
{
}

void sub_100186664(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([*(id *)(a1 + 32) shouldContinueWithRequest:*(void *)(*(void *)(a1 + 32) + 104)])
  {
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 40LL);
    v18[0] = _NSConcreteStackBlock;
    v18[2] = sub_100186828;
    v18[3] = &unk_100647FC0;
    id v13 = *(void **)(a1 + 32);
    uint64_t v12 = *(void **)(a1 + 40);
    uint64_t v14 = v13[13];
    v18[1] = 3221225472LL;
    uint64_t v23 = v10;
    void v18[4] = v13;
    id v19 = v12;
    id v20 = v8;
    id v21 = *(id *)(a1 + 48);
    id v22 = v9;
    [v13 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v7 deletedRecordsByDatabaseIdentifier:v20 carriedOver RecordsByDatabaseIdentifier:v11 conflictingRecordsByDatabaseIdentifier:0 request:v14 completion:v18];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Records request aborting %@", buf, 0xCu);
    }

    (*((void (**)(id, void))v9 + 2))(v9, 0LL);
  }
}

void sub_100186828(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a3);
  if ([*(id *)(*(void *)(a1 + 32) + 104) returnRecords])
  {
    [*(id *)(a1 + 40) applyCloudRecordArray:v7];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1001868FC;
    v8[3] = &unk_10063A468;
    id v6 = *(void **)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v6 enumerateKeysAndObjectsUsingBlock:v8];
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1001868FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v7]);
  id v9 = v8;
  if (v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  }
  uint64_t v11 = v10;

  -[NSMutableSet unionSet:](v11, "unionSet:", v6);
  [*(id *)(a1 + 32) setObject:v11 forKey:v7];
}

void sub_10018699C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 104LL);
    int v9 = 138412546;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Records request completed %@ with error %@",  (uint8_t *)&v9,  0x16u);
  }

  id v7 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
  -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v7, "setCloudStoreRecords:", *(void *)(a1 + 40));
  id v8 = [*(id *)(a1 + 48) copy];
  -[PDCloudStoreRecordsResponse setDeletedRecordsByDatabaseIdentifier:]( v7,  "setDeletedRecordsByDatabaseIdentifier:",  v8);

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100186AB4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v8 = v7[13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100186B68;
  v10[3] = &unk_100648038;
  id v11 = v6;
  id v12 = v5;
  id v9 = v5;
  [v7 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:a2 deletedRecordsByDatabaseIdentifier:&__NSDictionary0__struct carriedOverRe cordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v8 completion:v10];
}

void sub_100186B68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
  -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v4, "setCloudStoreRecords:", v3);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100186C14;
  v6[3] = &unk_10063B3A0;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v5 + 16))(v5, v4, v6);
}

uint64_t sub_100186C14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100186C20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 104LL);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Records request completed %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }

  id v7 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100186D14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  if (v7) {
    [v7 applyCloudRecordArray:v5];
  }
  if (*(void *)(a1 + 40))
  {
    int v8 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
    -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v8, "setCloudStoreRecords:", v5);
    uint64_t v9 = *(void *)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100186DF8;
    v10[3] = &unk_10063B3A0;
    id v11 = v6;
    (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v9 + 16))(v9, v8, v10);
  }

  else
  {
    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1LL);
  }
}

uint64_t sub_100186DF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100186E04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  int v8 = objc_alloc(&OBJC_CLASS___CKQuery);
  id v21 = -[CKQuery initWithRecordType:predicate:]( v8,  "initWithRecordType:predicate:",  PKCloudTransactionRecordType,  *(void *)(a1 + 32));
  uint64_t v9 = *(id **)(a1 + 40);
  id v10 = [v9[13] batchLimit];
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  id v20 = v10;
  uint64_t v12 = *(void *)(a1 + 96);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 104) cloudStoreZone]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 recordZone]);
  uint64_t v15 = *(void *)(a1 + 64);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100186FB8;
  v27[3] = &unk_100648060;
  void v27[4] = *(void *)(a1 + 40);
  id v28 = *(id *)(a1 + 88);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10018714C;
  v22[3] = &unk_100648100;
  id v23 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v25 = v6;
  id v26 = v7;
  id v24 = v16;
  id v17 = v6;
  id v18 = v7;
  [v9 fetchRecordsWithQuery:v21 batchLimit:v20 operationGroupName:v11 operationGroupNameSuffix:v19 qualityOfService:v12 zone:v14 containerDatabase :v15 batchHandler:v27 completion:v22];
}

void sub_100186FB8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = *(void **)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  uint64_t v8 = v7[13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10018706C;
  v10[3] = &unk_1006480D8;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v9 = v5;
  [v7 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:a2 deletedRecordsByDatabaseIdentifier:0 carriedOverRe cordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v8 completion:v10];
}

void sub_10018706C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) ignoreRecordsBeforeDate]);
    int v7 = 138412290;
    uint64_t v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Transactions from since %@ fetched.",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10018714C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100187180(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v17 = a2;
  id v20 = a3;
  id v19 = a4;
  int v7 = -[CKQuery initWithRecordType:predicate:]( objc_alloc(&OBJC_CLASS___CKQuery),  "initWithRecordType:predicate:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  v27[0] = 0LL;
  v27[1] = v27;
  v27[2] = 0x2020000000LL;
  v27[3] = 0LL;
  uint64_t v8 = *(id **)(a1 + 48);
  id v18 = [v8[13] batchLimit];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 88);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 104) cloudStoreZone]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 recordZone]);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100187358;
  v24[3] = &unk_100648150;
  id v26 = v27;
  uint64_t v14 = *(void *)(a1 + 72);
  id v25 = *(id *)(a1 + 80);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100187518;
  v21[3] = &unk_10063C3B0;
  id v15 = v19;
  id v23 = v15;
  id v16 = v20;
  id v22 = v16;
  [v8 fetchRecordsWithQuery:v7 batchLimit:v18 operationGroupName:v9 operationGroupNameSuffix:v10 qualityOfService:v11 zone:v13 containerDatabase :v14 batchHandler:v24 completion:v21];

  _Block_object_dispose(v27, 8);
}

void sub_100187340(_Unwind_Exception *a1)
{
}

void sub_100187358(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v15 = a3;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v10]);
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v11 count];
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v10]);
        if (v12)
        {
          id v13 = (id)objc_claimAutoreleasedReturnValue([v11 allObjects]);
          [v12 addObjectsFromArray:v13];
        }

        else
        {
          uint64_t v14 = *(void **)(a1 + 32);
          id v13 = [v11 mutableCopy];
          [v14 setObject:v13 forKey:v10];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v7);
  }

  if (v15) {
    v15[2](v15, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) < 0xC9uLL);
  }
}

uint64_t sub_100187518(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10018752C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = v8[13];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100187620;
  v14[3] = &unk_1006481A0;
  void v14[4] = v8;
  id v15 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v17 = v6;
  id v18 = v7;
  id v16 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v9 deletedRecordsByDatabaseIdentifier:0 carriedOverRe cordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v10 completion:v14];
}

uint64_t sub_100187620(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) ignoreRecordsBeforeDate]);
    int v6 = 138412290;
    id v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Events from since %@ processed.",  (uint8_t *)&v6,  0xCu);
  }

  [*(id *)(a1 + 40) setCloudStoreRecords:*(void *)(a1 + 48)];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

uint64_t sub_1001876FC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) ignoreRecordsBeforeDate]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104LL);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Records request since %@ succeeded %@",  (uint8_t *)&v7,  0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001877E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 104LL);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Records request with custom query %@ completed",  buf,  0xCu);
  }

  [v5 enumerateKeysAndObjectsUsingBlock:&stru_1006481E0];
  id v11 = *(void **)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v12 = v11[13];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100187A28;
  v14[3] = &unk_1006480D8;
  id v15 = v10;
  id v16 = *(id *)(a1 + 48);
  id v17 = v6;
  id v13 = v6;
  [v11 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v5 deletedRecordsByDatabaseIdentifier:0 carriedOverRe cordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v12 completion:v14];
}

void sub_100187954(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a2;
    NSUInteger v9 = -[NSSet count](a3, "count");

    int v10 = 134218242;
    NSUInteger v11 = v9;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Number of records fetched: %ld for database %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_100187A28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  NSUInteger v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Processed custom query batch", buf, 2u);
  }

  __int16 v12 = *(void **)(a1 + 32);
  if (v12) {
    [v12 applyCloudRecordArray:v7];
  }
  if (*(void *)(a1 + 40))
  {
    id v13 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
    -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v13, "setCloudStoreRecords:", v7);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100187B6C;
    v15[3] = &unk_10063B3A0;
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v14 + 16))(v14, v13, v15);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_100187B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100187B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 104LL);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Records request with custom query %@, failed with error %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  [*(id *)(a1 + 40) setCloudStoreRecords:*(void *)(a1 + 48)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100187C64(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v34 = v16;
      __int16 v35 = 2112;
      id v36 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Records request with upload %@, failed with error %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v34 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Records modification request succesfully completed %@",  buf,  0xCu);
    }

    [v9 enumerateKeysAndObjectsUsingBlock:&stru_100648228];
    id v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100187FA0;
    v30[3] = &unk_10063F230;
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v31 = v18;
    uint64_t v32 = v19;
    id v20 = v18;
    [v10 enumerateKeysAndObjectsUsingBlock:v30];
    if (-[NSMutableDictionary count](v20, "count")) {
      id v21 = v20;
    }
    else {
      id v21 = 0LL;
    }
    id v22 = v21;

    id v24 = *(void **)(a1 + 32);
    id v23 = *(void **)(a1 + 40);
    uint64_t v25 = v24[13];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_1001881B0;
    v27[3] = &unk_100648250;
    id v28 = v22;
    id v29 = v23;
    id v26 = v22;
    [v24 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v9 deletedRecordsByDatabaseIdentifier:v26 carriedOver RecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:v11 request:v25 completion:v27];
  }
}

void sub_100187ECC(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a2;
    NSUInteger v9 = -[NSSet count](a3, "count");

    int v10 = 134218242;
    NSUInteger v11 = v9;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Number of records uploaded: %ld for database %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_100187FA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v21 = v5;
  if ([v6 count])
  {
    int v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    [*(id *)(a1 + 32) setObject:v7 forKey:v5];
  }

  else
  {
    int v7 = 0LL;
  }

  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      for (id i = 0LL; i != v10; id i = (char *)i + 1)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        uint64_t v14 = *(void **)(a1 + 40);
        BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v13 recordName]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 recordTypeFromRecordName:v15]);

        uint64_t v17 = -[PKCloudDeletedRecord initWithRecordID:recordType:]( objc_alloc(&OBJC_CLASS___PKCloudDeletedRecord),  "initWithRecordID:recordType:",  v13,  v16);
        -[NSMutableSet addObject:](v7, "addObject:", v17);
      }

      id v10 = [v8 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v10);
  }

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = [v8 count];
    *(_DWORD *)__int128 buf = 134218242;
    id v27 = v20;
    __int16 v28 = 2112;
    id v29 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Number of records deleted: %ld for database %@",  buf,  0x16u);
  }
}

void sub_1001881B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
  -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v8, "setCloudStoreRecords:", v7);

  -[PDCloudStoreRecordsResponse setDeletedRecordsByDatabaseIdentifier:]( v8,  "setDeletedRecordsByDatabaseIdentifier:",  *(void *)(a1 + 32));
  -[PDCloudStoreRecordsResponse setConflictingCloudStoreRecords:](v8, "setConflictingCloudStoreRecords:", v6);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100188244(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v26;
    while (2)
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( [v7 objectForKeyedSubscript:*(void *)(*((void *)&v25 + 1) + 8 * (void)v11)]);
        id v13 = [v12 count];

        if (v13)
        {

          goto LABEL_14;
        }

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v25 objects:v33 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v30 = v16;
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Records request with recordIDs %@, failed with error %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
LABEL_14:
    uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v30 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Records request with recordIDs %@, successfully fetched.",  buf,  0xCu);
    }

    [v7 enumerateKeysAndObjectsUsingBlock:&stru_100648298];
    id v21 = *(void **)(a1 + 32);
    id v20 = *(void **)(a1 + 40);
    uint64_t v22 = v21[13];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_1001885A0;
    v23[3] = &unk_1006482C0;
    id v24 = v20;
    [v21 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v7 deletedRecordsByDatabaseIdentifier:0 carriedOver RecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v22 completion:v23];
  }
}

void sub_1001884CC(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = a2;
    NSUInteger v9 = -[NSSet count](a3, "count");

    int v10 = 134218242;
    NSUInteger v11 = v9;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Number of records fetched: %ld for database %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_1001885A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
  -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v4, "setCloudStoreRecords:", v3);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10018860C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    NSUInteger v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) ckQuery]);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Records request with raw query %@ completed batch.",  buf,  0xCu);
  }

  if ([*(id *)(*(void *)(a1 + 32) + 104) returnRecords])
  {
    int v10 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
    NSUInteger v11 = objc_alloc_init(&OBJC_CLASS___PKCloudRecordArray);
  }

  else
  {
    int v10 = 0LL;
    NSUInteger v11 = 0LL;
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100188808;
  v16[3] = &unk_10063F230;
  void v16[4] = *(void *)(a1 + 32);
  __int16 v12 = v11;
  uint64_t v17 = v12;
  [v5 enumerateKeysAndObjectsUsingBlock:v16];
  [*(id *)(a1 + 40) applyCloudRecordArray:v12];
  if (*(void *)(a1 + 48))
  {
    -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v10, "setCloudStoreRecords:", v12);
    uint64_t v13 = *(void *)(a1 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001889EC;
    v14[3] = &unk_10063B3A0;
    id v15 = v6;
    (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v13 + 16))(v13, v10, v14);
  }

  else
  {
    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1LL);
  }
}

void sub_100188808(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218242;
    id v25 = [v6 count];
    __int16 v26 = 2112;
    id v27 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Batch contains %ld records for database %@",  buf,  0x16u);
  }

  if ([*(id *)(*(void *)(a1 + 32) + 104) returnRecords])
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v18 = v6;
    id v9 = v6;
    id v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v20;
      do
      {
        uint64_t v13 = 0LL;
        do
        {
          if (*(void *)v20 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)v13);
          id v15 = objc_alloc(&OBJC_CLASS___PKCloudRecordObject);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v14));
          id v17 = [v15 initWithRecords:v16];

          [*(id *)(a1 + 40) addCloudRecord:v17 forContainerDatabaseIdentifier:v5];
          uint64_t v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }

      while (v11);
    }

    id v6 = v18;
  }
}

uint64_t sub_1001889EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001889F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setCloudStoreRecords:*(void *)(a1 + 40)];
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 104LL);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Records request with custom query %@, failed with error %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100188AE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100188BF0;
  v14[3] = &unk_100648338;
  id v15 = v6;
  id v21 = *(id *)(a1 + 64);
  id v16 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v17 = v8;
  uint64_t v18 = v9;
  id v19 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 72);
  id v20 = v10;
  uint64_t v22 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v7, v14);
}

void sub_100188BF0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100188D28;
    v11[3] = &unk_10063F230;
    id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v2 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    id v3 = v12;
    [v2 enumerateKeysAndObjectsUsingBlock:v11];
    uint64_t v4 = *(void **)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100188EB4;
    v9[3] = &unk_100648310;
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 88);
    id v8 = *(id *)(a1 + 80);
    void v9[4] = *(void *)(a1 + 56);
    id v10 = v8;
    [v4 fetchRecordsWithRecordIDsByDatabaseIdentifier:v3 operationGroupName:v5 operationGroupNameSuffix:v6 qualityOfService:v7 completion:v9];
  }

void sub_100188D28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:");
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v19;
    do
    {
      for (id i = 0LL; i != v9; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        id v13 = objc_alloc(&OBJC_CLASS___CKRecordID);
        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
        id v16 = -[CKRecordID initWithRecordName:zoneID:](v13, "initWithRecordName:zoneID:", v14, v15);

        if (v16) {
          -[NSMutableSet addObject:](v17, "addObject:", v16);
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v9);
  }
}

void sub_100188EB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v5]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 anyObject]);

  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v21 = v10;
      __int16 v22 = 2112;
      __int128 v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Records request with recordIDs %@, successfully fetched %@ record",  buf,  0x16u);
    }

    uint64_t v11 = *(void **)(a1 + 32);
    __int128 v18 = v5;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v7));
    __int128 v19 = v12;
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
    uint64_t v14 = *(void **)(a1 + 40);
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 104LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1001890A0;
    v16[3] = &unk_1006482C0;
    id v17 = v14;
    [v11 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v13 deletedRecordsByDatabaseIdentifier:0 carriedOver RecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v15 completion:v16];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1001890A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsResponse);
  -[PDCloudStoreRecordsResponse setCloudStoreRecords:](v4, "setCloudStoreRecords:", v3);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100189AA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 recordType]);
      int v19 = 138543618;
      __int128 v20 = v9;
      __int16 v21 = 2114;
      __int16 v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received error: %{public}@ instead of record of type: %{public}@",  (uint8_t *)&v19,  0x16u);
    }
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v13 recordName]);

    uint64_t v14 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v8 recordType]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v8 modifiedByDevice]);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v8 modificationDate]);
      int v19 = 138544130;
      __int128 v20 = v11;
      __int16 v21 = 2114;
      __int16 v22 = v16;
      __int16 v23 = 2114;
      id v24 = v17;
      __int16 v25 = 2114;
      __int16 v26 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received record: %{public}@ of type: %{public}@ modified by: %{public}@ on: %{public}@",  (uint8_t *)&v19,  0x2Au);
    }

    if (v8) {
      [*(id *)(a1 + 32) addObject:v8];
    }
  }
}

void sub_100189C94(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a6;
  id v13 = [*(id *)(a1 + 32) copy];
  [*(id *)(a1 + 32) removeAllObjects];
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
    *(_DWORD *)__int128 buf = 138543362;
    __int128 v44 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "initial CKFetchRecordZoneChangesOperation received completion block %{public}@",  buf,  0xCu);
  }

  v26[0] = _NSConcreteStackBlock;
  void v26[2] = sub_100189EE4;
  v26[3] = &unk_100648400;
  char v40 = *(_BYTE *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 40);
  __int128 v18 = *(void **)(a1 + 48);
  int v19 = *(dispatch_queue_s **)(v17 + 160);
  v26[1] = 3221225472LL;
  id v27 = v12;
  id v28 = v10;
  uint64_t v29 = v17;
  id v30 = v11;
  id v31 = v18;
  char v41 = a5;
  id v32 = *(id *)(a1 + 56);
  char v42 = *(_BYTE *)(a1 + 113);
  id v33 = *(id *)(a1 + 64);
  id v34 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 104);
  id v35 = v20;
  uint64_t v39 = v21;
  id v37 = *(id *)(a1 + 88);
  id v38 = *(id *)(a1 + 96);
  id v36 = v13;
  id v22 = v13;
  id v23 = v11;
  id v24 = v10;
  id v25 = v12;
  dispatch_async(v19, v26);
}

void sub_100189EE4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      id v36 = v4;
      __int16 v37 = 2112;
      uint64_t v38 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "initial sync CKFetchRecordZoneChangesOperation zoneFetchCompletion failed for zone %@: %@",  buf,  0x16u);
    }
  }

  else if ([*(id *)(*(void *)(a1 + 48) + 104) requestType] == (id)1)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10018A1F8;
    v18[3] = &unk_1006483B0;
    char v30 = *(_BYTE *)(a1 + 136);
    int v19 = (os_log_s *)*(id *)(a1 + 56);
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    id v20 = v6;
    uint64_t v21 = v7;
    id v22 = *(id *)(a1 + 64);
    char v31 = *(_BYTE *)(a1 + 137);
    id v23 = *(id *)(a1 + 72);
    char v32 = *(_BYTE *)(a1 + 138);
    id v24 = *(id *)(a1 + 80);
    id v25 = *(id *)(a1 + 88);
    id v8 = *(id *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 128);
    id v26 = v8;
    uint64_t v29 = v9;
    id v27 = *(id *)(a1 + 112);
    id v28 = *(id *)(a1 + 120);
    id v10 = objc_retainBlock(v18);
    if ([*(id *)(a1 + 104) count])
    {
      uint64_t v11 = *(void *)(a1 + 104);
      uint64_t v12 = *(void *)(a1 + 112);
      uint64_t v33 = *(void *)(a1 + 64);
      uint64_t v34 = v11;
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_10018A564;
      v16[3] = &unk_1006483D8;
      void v16[4] = *(void *)(a1 + 48);
      uint64_t v17 = v10;
      (*(void (**)(uint64_t, void *, void *))(v12 + 16))(v12, v13, v16);
    }

    else
    {
      ((void (*)(void *, void))v10[2])(v10, *(unsigned __int8 *)(a1 + 137));
    }

    id v3 = v19;
  }

  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      *(_DWORD *)__int128 buf = 138543362;
      id v36 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "initial sync CKFetchRecordZoneChangesOperation was cancelled %{public}@",  buf,  0xCu);
    }
  }
}

void sub_10018A1F8(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 120))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      int v27 = 138412546;
      id v28 = v6;
      __int16 v29 = 2114;
      char v30 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "initial sync CKFetchRecordZoneChangesOperation saving token %@ for zone %{public}@",  (uint8_t *)&v27,  0x16u);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  *(void *)(a1 + 32),  1LL,  0LL));
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = *(void **)(*(void *)(a1 + 48) + 152LL);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v10 containerDatabaseIdentifier:v9 didUpdateChangeToken:v8 fetchTimestamp:v11 forZoneID:*(void *)(a1 + 40)];
  }

  if (*(_BYTE *)(a1 + 121)) {
    BOOL v12 = a2 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (!*(_BYTE *)(a1 + 121))
    {
      uint64_t v13 = PKLogFacilityTypeGetObject(9LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
        int v27 = 138543362;
        id v28 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "initial sync CKFetchRecordZoneChangesOperation no more changes in zone %{public}@",  (uint8_t *)&v27,  0xCu);
      }

      if (*(_BYTE *)(a1 + 120)) {
        [*(id *)(*(void *)(a1 + 48) + 152) containerDatabaseIdentifier:*(void *)(a1 + 56) didFinishInitialSync:1 forZoneID:*(void *)(a1 + 40)];
      }
      uint64_t v16 = *(void *)(a1 + 104);
      if (v16) {
        (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0LL);
      }
    }
  }

  else
  {
    uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
    __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      int v27 = 138543362;
      id v28 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "initial sync CKFetchRecordZoneChangesOperation issuing followup for zone %{public}@",  (uint8_t *)&v27,  0xCu);
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 152) cloudStoreZoneForZoneID:*(void *)(a1 + 40) inContainerDatabase:*(void *)(a1 + 64)]);
    id v22 = -[PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken initWithCloudStoreZone:changeToken:]( objc_alloc(&OBJC_CLASS___PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken),  "initWithCloudStoreZone:changeToken:",  v21,  *(void *)(a1 + 32));
    id v23 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreTokenRecordFetchConfiguration);
    -[PDCloudStoreTokenRecordFetchConfiguration setShouldSaveToken:]( v23,  "setShouldSaveToken:",  *(unsigned __int8 *)(a1 + 120));
    -[PDCloudStoreTokenRecordFetchConfiguration setUseStoredChangeToken:]( v23,  "setUseStoredChangeToken:",  *(unsigned __int8 *)(a1 + 122));
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v22));
    -[PDCloudStoreTokenRecordFetchConfiguration setCloudStoreZonesAndChangeTokens:]( v23,  "setCloudStoreZonesAndChangeTokens:",  v24);

    -[PDCloudStoreTokenRecordFetchConfiguration setContainerDatabase:]( v23,  "setContainerDatabase:",  *(void *)(a1 + 64));
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) ignoreRecordsBeforeDate]);
    -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreRecordsBeforeDate:](v23, "setIgnoreRecordsBeforeDate:", v25);

    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) ignoreRecordsAfterDate]);
    -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreRecordsAfterDate:](v23, "setIgnoreRecordsAfterDate:", v26);

    -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreChangesMadeByThisDevice:]( v23,  "setIgnoreChangesMadeByThisDevice:",  [*(id *)(a1 + 72) ignoreChangesMadeByThisDevice]);
    -[PDCloudStoreTokenRecordFetchConfiguration setBatchLimit:]( v23,  "setBatchLimit:",  [*(id *)(a1 + 72) batchLimit]);
    objc_msgSend( *(id *)(a1 + 48),  "_queue_fetchInitialRecordsUsingConfiguration:operationGroupName:operationGroupNameSuffix:qualityOfService:batchHan dler:completion:",  v23,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 112),  *(void *)(a1 + 96),  *(void *)(a1 + 104));
  }

void sub_10018A564(uint64_t a1, char a2)
{
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_10018A5DC;
  v5[3] = &unk_100645D90;
  id v6 = v3;
  char v7 = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_10018A5DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_10018A5F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_10018A6C8;
  v8[3] = &unk_10063AD70;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 160);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_10018A6C8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "initial sync CKFetchRecordZoneChangesOperation fetchRecordZoneChangesCompletionBlock called",  buf,  2u);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Zone changes completion block called with error: %@",  buf,  0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10018A828;
    v10[3] = &unk_100639688;
    uint64_t v9 = *(void *)(a1 + 64);
    id v11 = *(id *)(a1 + 72);
    objc_msgSend( v5,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v6,  0,  v7,  v8,  v9,  v10);
  }

uint64_t sub_10018A828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_10018B5D8(_Unwind_Exception *a1)
{
}

void sub_10018B670(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 changeToken]);
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___CKFetchRecordZoneChangesConfiguration);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 cloudStoreZone]);
  if (v4)
  {
    id v7 = v4;
LABEL_5:
    uint64_t v8 = v7;
    goto LABEL_6;
  }

  if (*(_BYTE *)(a1 + 80))
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) changeTokenForCloudStoreStore:v6]);
    goto LABEL_5;
  }

  uint64_t v8 = 0LL;
LABEL_6:
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 data]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneName]);
    *(_DWORD *)__int128 buf = 138412546;
    char v31 = v11;
    __int16 v32 = 2114;
    uint64_t v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Using server change token %@ for zone %{public}@",  buf,  0x16u);
  }

  if (*(_BYTE *)(a1 + 80) && !v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Stored token was requested but no token present, overriding operation as initial downnload and QoS as utility",  buf,  2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 17LL;
    [*(id *)(*(void *)(a1 + 32) + 104) setQualityOfService:17];
    uint64_t v13 = PKCloudStoreOperationGroupInitialDownload;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), PKCloudStoreOperationGroupInitialDownload);
    [*(id *)(*(void *)(a1 + 32) + 104) setGroupName:v13];
  }

  -[CKFetchRecordZoneChangesConfiguration setPreviousServerChangeToken:](v5, "setPreviousServerChangeToken:", v8);
  -[CKFetchRecordZoneChangesConfiguration setResultsLimit:](v5, "setResultsLimit:", 50LL);
  [*(id *)(a1 + 32) _updateFetchNewestChangesFirstFlagForConfiguration:v5 request:*(void *)(*(void *)(a1 + 32) + 104)];
  if (*(_BYTE *)(a1 + 81)) {
    -[CKFetchRecordZoneChangesConfiguration setFetchChangesMadeByThisDevice:]( v5,  "setFetchChangesMadeByThisDevice:",  0LL);
  }
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 recordZone]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);

  [*(id *)(a1 + 40) setObject:v5 forKey:v15];
  [*(id *)(a1 + 48) addObject:v15];
  id v28 = v3;
  [v3 setChangeToken:v8];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
  int v27 = v4;
  uint64_t v17 = v6;
  if (v16)
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
    __int16 v29 = v18;
    int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v29, 1LL));
  }

  else
  {
    int v19 = 0LL;
  }

  id v20 = *(void **)(a1 + 32);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v8 data]);
  uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) groupName]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue( [v20 reportContainerChangeIntervalBeginEventWithType:15 stateName:0 objectNames:v19 changeToken:v21 operationGroupName :v22 operationGroupNameSuffix:v23]);

  id v25 = *(void **)(a1 + 56);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
  [v25 safelySetObject:v24 forKey:v26];
}

void sub_10018BA00(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_10018BAD8;
  v8[3] = &unk_100640CE0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 160);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_10018BAD8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 recordName]);

  unsigned int v4 = [*(id *)(*(void *)(a1 + 40) + 104) ignoreExistingRecordHash];
  if (*(void *)(a1 + 32))
  {
    unsigned int v5 = v4;
    uint64_t Object = PKLogFacilityTypeGetObject(35LL);
    id v7 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
    os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v7, *(const void **)(a1 + 40));
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v9 = v8;
      if (os_signpost_enabled(v7))
      {
        LOWORD(v2_Block_object_dispose(&STACK[0x3C0], 8) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  v9,  "cloudstore:recordChanged",  "",  (uint8_t *)&v28,  2u);
      }
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creationDate]);
    id v11 = *(void **)(*(void *)(a1 + 40) + 152LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudStoreZoneForZoneID:v13 inContainerDatabase:*(void *)(a1 + 48)]);

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 144LL));
    LODWORD(v13) = [WeakRetained hasMatchingCloudStoreRecord:*(void *)(a1 + 32) inCloudStoreZone:v14];

    if (((v13 ^ 1 | v5) & 1) != 0)
    {
      uint64_t v16 = *(void **)(a1 + 56);
      if (v16 && [v16 compare:v10] == (id)1)
      {
        uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
        __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = 138543362;
          __int16 v29 = v3;
          int v19 = "Ignoring record before start date %{public}@";
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v28, 0xCu);
        }
      }

      else
      {
        uint64_t v21 = *(void **)(a1 + 64);
        if (!v21 || [v21 compare:v10] != (id)-1)
        {
          uint64_t v22 = PKLogFacilityTypeGetObject(9LL);
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordType]);
            id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modifiedByDevice]);
            id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) modificationDate]);
            int v28 = 138544130;
            __int16 v29 = v3;
            __int16 v30 = 2114;
            char v31 = v24;
            __int16 v32 = 2114;
            uint64_t v33 = v25;
            __int16 v34 = 2114;
            id v35 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Received record: %{public}@ of type: %{public}@ modified by: %{public}@ on: %{public}@",  (uint8_t *)&v28,  0x2Au);
          }

          [*(id *)(a1 + 72) addObject:*(void *)(a1 + 32)];
          goto LABEL_19;
        }

        uint64_t v27 = PKLogFacilityTypeGetObject(9LL);
        __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = 138543362;
          __int16 v29 = v3;
          int v19 = "Ignoring record after end date %{public}@";
          goto LABEL_12;
        }
      }
    }

    else
    {
      uint64_t v20 = PKLogFacilityTypeGetObject(9LL);
      __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 138543362;
        __int16 v29 = v3;
        int v19 = "Ignoring changed record since the local hash is the same as the remote hash %{public}@";
        goto LABEL_12;
      }
    }

LABEL_19:
  }
}

void sub_10018BE38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10018BF0C;
  block[3] = &unk_10063AE10;
  uint64_t v7 = *(void *)(a1 + 32);
  os_signpost_id_t v8 = *(void **)(a1 + 40);
  os_signpost_id_t v9 = *(dispatch_queue_s **)(v7 + 160);
  block[1] = 3221225472LL;
  id v13 = v5;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

void sub_10018BF0C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v15 = 138543618;
    uint64_t v16 = v4;
    __int16 v17 = 2114;
    uint64_t v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cloud store record deleted with recordID %{public}@: recordType: %{public}@",  (uint8_t *)&v15,  0x16u);
  }

  id v6 = -[PKCloudDeletedRecord initWithRecordID:recordType:]( objc_alloc(&OBJC_CLASS___PKCloudDeletedRecord),  "initWithRecordID:recordType:",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  if (v6)
  {
    uint64_t v7 = PKLogFacilityTypeGetObject(35LL);
    os_signpost_id_t v8 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(v7);
    os_signpost_id_t v9 = os_signpost_id_make_with_pointer(v8, *(const void **)(a1 + 48));
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v10 = v9;
      if (os_signpost_enabled(v8))
      {
        LOWORD(v15) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  v10,  "cloudstore:recordDeleted",  "",  (uint8_t *)&v15,  2u);
      }
    }

    id v11 = *(void **)(*(void *)(a1 + 48) + 152LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudStoreZoneForZoneID:v12 inContainerDatabase:*(void *)(a1 + 56)]);

    [*(id *)(a1 + 64) addObject:v6];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 144LL));
    [WeakRetained removeCloudStoreRecordID:*(void *)(a1 + 32) recordType:*(void *)(a1 + 40) cloudStoreZone:v13];
  }
}

void sub_10018C0C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 8LL);
  int v5 = *(unsigned __int8 *)(v4 + 24);
  if (*(_BYTE *)(v4 + 24) && *(uint64_t *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) < 1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(35LL);
    id v12 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
    os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, *(const void **)(a1 + 32));
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v14 = v13;
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v14,  "cloudstore:fetchRecordChangesBlock",  "",  buf,  2u);
      }
    }

    id v15 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) count];
    uint64_t v16 = *(void *)(a1 + 32);
    __int16 v17 = *(dispatch_queue_s **)(v16 + 160);
    if (v15)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10018C3C0;
      block[3] = &unk_1006484F0;
      uint64_t v35 = *(void *)(a1 + 112);
      void block[4] = v16;
      __int16 v37 = *(_WORD *)(a1 + 128);
      id v29 = *(id *)(a1 + 40);
      id v30 = *(id *)(a1 + 48);
      id v31 = *(id *)(a1 + 56);
      id v18 = *(id *)(a1 + 64);
      uint64_t v19 = *(void *)(a1 + 120);
      id v32 = v18;
      uint64_t v36 = v19;
      id v33 = *(id *)(a1 + 80);
      id v34 = *(id *)(a1 + 88);
      dispatch_async(v17, block);

      uint64_t v20 = v29;
    }

    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_10018C568;
      v23[3] = &unk_10063B440;
      id v21 = *(id *)(a1 + 72);
      uint64_t v22 = *(void *)(a1 + 32);
      id v24 = v21;
      uint64_t v25 = v22;
      id v26 = v3;
      id v27 = *(id *)(a1 + 88);
      dispatch_async(v17, v23);

      uint64_t v20 = v24;
    }
  }

  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      os_signpost_id_t v8 = @"YES";
      if (!v5) {
        os_signpost_id_t v8 = @"NO";
      }
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104LL);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v39 = v8;
      __int16 v40 = 2048;
      uint64_t v41 = v9;
      __int16 v42 = 2112;
      uint64_t v43 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Still processing records fetch because completedProcessingRecordsFetch is %{public}@ and processingRecordsCounte r is %ld for request %@",  buf,  0x20u);
    }
  }
}

void sub_10018C3C0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) count];
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 104LL);
    int v11 = 134218498;
    id v12 = v4;
    __int16 v13 = 2112;
    uint64_t v14 = v5;
    __int16 v15 = 2112;
    uint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "There are %lu additional zones that require more items to be fetched %@ for request %@",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreTokenRecordFetchConfiguration);
  -[PDCloudStoreTokenRecordFetchConfiguration setShouldSaveToken:]( v7,  "setShouldSaveToken:",  *(unsigned __int8 *)(a1 + 104));
  -[PDCloudStoreTokenRecordFetchConfiguration setUseStoredChangeToken:]( v7,  "setUseStoredChangeToken:",  *(unsigned __int8 *)(a1 + 105));
  id v8 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) copy];
  -[PDCloudStoreTokenRecordFetchConfiguration setCloudStoreZonesAndChangeTokens:]( v7,  "setCloudStoreZonesAndChangeTokens:",  v8);

  -[PDCloudStoreTokenRecordFetchConfiguration setContainerDatabase:](v7, "setContainerDatabase:", *(void *)(a1 + 40));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ignoreRecordsBeforeDate]);
  -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreRecordsBeforeDate:](v7, "setIgnoreRecordsBeforeDate:", v9);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ignoreRecordsAfterDate]);
  -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreRecordsAfterDate:](v7, "setIgnoreRecordsAfterDate:", v10);

  -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreChangesMadeByThisDevice:]( v7,  "setIgnoreChangesMadeByThisDevice:",  [*(id *)(a1 + 48) ignoreChangesMadeByThisDevice]);
  objc_msgSend( *(id *)(a1 + 32),  "_queue_fetchAllRecordsUsingConfiguration:operationGroupName:operationGroupNameSuffix:qualityOfService:batchHandler:completion:",  v7,  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 96),  *(void *)(a1 + 72),  *(void *)(a1 + 80));
}

uint64_t sub_10018C568(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys", 0));
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
        [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v8 error:*(void *)(a1 + 48)];
        [*(id *)(a1 + 32) removeObjectForKey:v7];
      }

      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }

    while (v4);
  }

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 104LL);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Completed processing records fetch for request %@.",  buf,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 48));
  }
  return result;
}

void sub_10018C6FC(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a6;
  v23[0] = _NSConcreteStackBlock;
  v23[2] = sub_10018C8A4;
  v23[3] = &unk_1006485F0;
  __int128 v13 = *(void **)(a1 + 40);
  __int128 v14 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v23[1] = 3221225472LL;
  id v24 = v12;
  id v25 = v10;
  id v15 = v13;
  uint64_t v16 = *(void *)(a1 + 32);
  id v26 = v15;
  uint64_t v27 = v16;
  id v17 = *(id *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 112);
  id v28 = v17;
  uint64_t v37 = v18;
  id v29 = *(id *)(a1 + 56);
  id v30 = *(id *)(a1 + 64);
  id v31 = *(id *)(a1 + 72);
  id v32 = *(id *)(a1 + 80);
  id v35 = *(id *)(a1 + 96);
  id v19 = *(id *)(a1 + 88);
  char v39 = a5;
  id v33 = v19;
  id v34 = v11;
  uint64_t v38 = *(void *)(a1 + 120);
  char v40 = *(_BYTE *)(a1 + 128);
  id v36 = *(id *)(a1 + 104);
  id v20 = v11;
  id v21 = v10;
  id v22 = v12;
  dispatch_async(v14, v23);
}

void sub_10018C8A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v5)
    {
      id v10 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543362;
      id v54 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CKFetchRecordZoneChangesOperation calling batch handler for zoneID %{public}@",  buf,  0xCu);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 56) + 152) cloudStoreZoneForZoneID:*(void *)(a1 + 40) inContainerDatabase:*(void *)(a1 + 64)]);
    ++*(void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 24LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) allObjects]);
    id v8 = objc_msgSend(v12, "pk_createArrayBySafelyApplyingBlock:", &stru_100648558);

    if ([v8 count])
    {
      __int128 v13 = *(void **)(a1 + 56);
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      [v13 reportContainerChangeSignpostEventType:17 stateName:v14 objectNames:v8 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 80) operationGroupNameSuffix:*(void *)(a1 + 88)];
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) allObjects]);
    id v9 = objc_msgSend(v15, "pk_createArrayBySafelyApplyingBlock:", &stru_100648578);

    if ([v9 count])
    {
      uint64_t v16 = *(void **)(a1 + 56);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      [v16 reportContainerChangeSignpostEventType:18 stateName:v17 objectNames:v9 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 80) operationGroupNameSuffix:*(void *)(a1 + 88)];
    }

    uint64_t v18 = PKLogFacilityTypeGetObject(35LL);
    id v19 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(v18);
    os_signpost_id_t v20 = os_signpost_id_make_with_pointer(v19, *(const void **)(a1 + 56));
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v21 = v20;
      if (os_signpost_enabled(v19))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_INTERVAL_BEGIN,  v21,  "cloudstore:fetchRecordChangesCallBatchHandler",  "",  buf,  2u);
      }
    }

    uint64_t v22 = *(void *)(a1 + 120);
    uint64_t v51 = *(void *)(a1 + 104);
    id v23 = [*(id *)(a1 + 72) copy];
    id v52 = v23;
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v52,  &v51,  1LL));
    id v25 = *(void **)(a1 + 96);
    uint64_t v49 = *(void *)(a1 + 104);
    id v26 = [v25 copy];
    id v50 = v26;
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v50,  &v49,  1LL));
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_10018CD7C;
    v35[3] = &unk_1006485C8;
    uint8_t v35[4] = *(void *)(a1 + 56);
    char v47 = *(_BYTE *)(a1 + 152);
    id v36 = *(id *)(a1 + 40);
    id v37 = v11;
    id v28 = *(id *)(a1 + 112);
    uint64_t v29 = *(void *)(a1 + 144);
    id v38 = v28;
    uint64_t v45 = v29;
    id v39 = *(id *)(a1 + 48);
    id v40 = *(id *)(a1 + 32);
    char v48 = *(_BYTE *)(a1 + 153);
    id v41 = *(id *)(a1 + 104);
    id v42 = *(id *)(a1 + 80);
    id v30 = *(id *)(a1 + 88);
    id v32 = *(void **)(a1 + 128);
    uint64_t v31 = *(void *)(a1 + 136);
    id v43 = v30;
    uint64_t v46 = v31;
    id v44 = v32;
    id v33 = *(void (**)(uint64_t, void *, void *, void *))(v22 + 16);
    id v34 = v11;
    v33(v22, v24, v27, v35);

    goto LABEL_16;
  }

  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543618;
    id v54 = v6;
    __int16 v55 = 2112;
    uint64_t v56 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CKFetchRecordZoneChangesOperation zoneFetchCompletion failed for zone %{public}@: %@",  buf,  0x16u);
  }

  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  if (v8)
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v8]);
    [*(id *)(a1 + 56) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v9 error:*(void *)(a1 + 32)];
    [*(id *)(a1 + 48) removeObjectForKey:v8];
LABEL_16:
  }
}

id sub_10018CD38(id a1, CKRecord *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](a2, "recordID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 recordName]);

  return v3;
}

id sub_10018CD74(id a1, PKCloudDeletedRecord *a2)
{
  return -[PKCloudDeletedRecord recordName](a2, "recordName");
}

void sub_10018CD7C(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10018CEB8;
  block[3] = &unk_1006485A0;
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  BOOL v5 = *(dispatch_queue_s **)(v3 + 160);
  block[1] = 3221225472LL;
  void block[4] = v3;
  char v22 = a2;
  char v23 = *(_BYTE *)(a1 + 128);
  id v11 = v4;
  id v12 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 112);
  id v13 = v6;
  uint64_t v20 = v7;
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 72);
  char v24 = *(_BYTE *)(a1 + 129);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v8 = *(id *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 120);
  id v18 = v8;
  uint64_t v21 = v9;
  id v19 = *(id *)(a1 + 104);
  dispatch_async(v5, block);
}

uint64_t sub_10018CEB8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(35LL);
  uint64_t v3 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
  os_signpost_id_t v4 = os_signpost_id_make_with_pointer(v3, *(const void **)(a1 + 32));
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v5 = v4;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_INTERVAL_END,  v5,  "cloudstore:fetchRecordChangesCallBatchHandler",  "",  buf,  2u);
    }
  }

  uint64_t v6 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"YES";
    if (*(_BYTE *)(a1 + 128)) {
      uint64_t v9 = @"YES";
    }
    else {
      uint64_t v9 = @"NO";
    }
    uint64_t v10 = *(void *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 129)) {
      id v8 = @"NO";
    }
    *(_DWORD *)__int128 buf = 138543874;
    id v28 = v9;
    __int16 v29 = 2114;
    id v30 = v8;
    __int16 v31 = 2114;
    uint64_t v32 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CKFetchRecordZoneChangesOperation continue: %{public}@, moreComing: %{public}@, for zoneID %{public}@",  buf,  0x20u);
  }

  if (*(_BYTE *)(a1 + 128)) {
    BOOL v12 = *(_BYTE *)(a1 + 129) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (PKIsWatch(v11) && (PKDeviceIsPluggedIn() & 1) == 0)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543362;
      id v28 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CKFetchRecordZoneChangesOperation not fetting from zone %{public}@ again since the device is a watch that is not plugged in.",  buf,  0xCu);
    }
  }

  else if (v12)
  {
    id v13 = -[PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken initWithCloudStoreZone:changeToken:]( objc_alloc(&OBJC_CLASS___PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken),  "initWithCloudStoreZone:changeToken:",  *(void *)(a1 + 48),  *(void *)(a1 + 56));
    [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) addObject:v13];
    goto LABEL_23;
  }

  id v13 = (PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  if (v13)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKeyedSubscript:v13]);
    [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v15 error:*(void *)(a1 + 72)];
    [*(id *)(a1 + 64) removeObjectForKey:v13];
  }

void sub_10018D29C(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10018D37C;
  block[3] = &unk_100648640;
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 32);
  os_signpost_id_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 160);
  block[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_10018D37C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CKFetchRecordZoneChangesOperation fetchRecordZoneChangesCompletionBlock called",  buf,  2u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Zone changes completion block called with error: %@",  buf,  0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    os_signpost_id_t v5 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10018D500;
    v10[3] = &unk_100639688;
    uint64_t v9 = *(void *)(a1 + 64);
    id v11 = *(id *)(a1 + 72);
    objc_msgSend( v5,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v6,  0,  v7,  v8,  v9,  v10);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

uint64_t sub_10018D500(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10018DE74(_Unwind_Exception *a1)
{
}

void sub_10018DEA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [[PKCloudStoreError alloc] initWithError:v6];

  if ([v7 isChangeTokenExpired])
  {
    id v8 = v5;
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543362;
      id v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "The server change token expired for zoneID %{public}@.",  (uint8_t *)&v11,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:*(void *)(a1 + 40) didUpdateChangeToken:0 fetchTimestamp:0 forZoneID:v8];
  }
}

void sub_10018DFC4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v19 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Trying to fetch and re-create zones in database %{public}@ after a zone not found error",  buf,  0xCu);
    }

    int v11 = *(void **)(a1 + 48);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", *(void *)(a1 + 40)));
    uint64_t v13 = PKCloudStoreOperationGroupSuffixZoneNotFoundError;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10018E14C;
    v14[3] = &unk_10063B638;
    uint64_t v17 = *(void *)(a1 + 56);
    id v16 = v7;
    id v15 = v6;
    [v11 _fetchAndSaveRecordZonesWithContainerDatabaseIdentifiers:v12 operationGroupNameSuffix:v13 completion:v14];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10018E14C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v7 = *(void **)(v4 + 40);
    id v5 = (id *)(v4 + 40);
    id v6 = v7;
    if (v7) {
      id v8 = v6;
    }
    else {
      id v8 = v3;
    }
    objc_storeStrong(v5, v8);
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543362;
      id v12 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Trying to fetch and re-create zones in database %{public}@ after a zone not found error",  (uint8_t *)&v11,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10018E230(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138543362;
      uint64_t v12 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Ensuring zone integrity after a zone not found error occured in database %{public}@",  (uint8_t *)&v11,  0xCu);
    }

    [*(id *)(a1 + 48) ensureZoneShareIntegrity];
  }

  v7[2](v7, v6, 0LL);
}

void sub_10018E324(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", *(void *)(a1 + 48)));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10018E48C;
    v12[3] = &unk_100641A38;
    int v11 = *(void **)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    id v13 = v11;
    id v15 = v7;
    id v14 = v6;
    [v8 resetContainerWithAdditionalZoneIDsByDatabaseIdentifiers:v9 includedCachedZoneForDatabaseIdentifiers:v10 completion:v12];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10018E48C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = *(void *)(a1[7] + 8LL);
    id v8 = *(void **)(v5 + 40);
    id v6 = (id *)(v5 + 40);
    id v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v4;
    }
    objc_storeStrong(v6, v9);
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a1[4];
      int v13 = 138412546;
      uint64_t v14 = v12;
      __int16 v15 = 2112;
      id v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Trying to reset databas %@ with error %@",  (uint8_t *)&v13,  0x16u);
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10018E580(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v9 = *(id *)(a1 + 32);
    id v10 = [v9 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v32;
      do
      {
        for (id i = 0LL; i != v11; id i = (char *)i + 1)
        {
          if (*(void *)v32 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  CKRecordNameZoneWideShare,  *(void *)(*((void *)&v31 + 1) + 8LL * (void)i));
          -[NSMutableSet addObject:](v8, "addObject:", v14);
        }

        id v11 = [v9 countByEnumeratingWithState:&v31 objects:v39 count:16];
      }

      while (v11);
    }

    __int16 v15 = objc_alloc_init(&OBJC_CLASS___PDCloudStoreRecordsRequestModificationOperationConfiguration);
    -[PDCloudStoreRecordsRequestModificationOperationConfiguration setMarkAsParticipantNeedsNewInvitationToken:]( v15,  "setMarkAsParticipantNeedsNewInvitationToken:",  1LL);
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v38 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Removing zone wide share for recordIDs %{public}@",  buf,  0xCu);
    }

    uint64_t v18 = *(void **)(a1 + 40);
    uint64_t v35 = *(void *)(a1 + 48);
    id v19 = -[NSMutableSet copy](v8, "copy");
    id v36 = v19;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    uint64_t v21 = PKCloudStoreOperationGroupSharedZoneUnrecoverableError;
    uint64_t v22 = PKCloudStoreOperationGroupSuffixUnrecoverableError;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    void v25[2] = sub_10018E880;
    v25[3] = &unk_1006486B8;
    id v26 = *(id *)(a1 + 32);
    id v23 = *(id *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 56);
    id v27 = v23;
    uint64_t v30 = v24;
    id v29 = v7;
    id v28 = v6;
    [v18 modifyRecordsOperationWithRecordsToSaveByDatabaseIdentifier:0 recordIDsToDeleteByDatabaseIdentifier:v20 recordModificati onOperationConfiguration:v15 emitErrorIfConflictDetected:0 isModifyingShare:1 operationGroupName:v21 operationGroupNameSuffix:v22  qualityOfService:17 completion:v25];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10018E880(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    int v16 = 138543874;
    uint64_t v17 = v9;
    __int16 v18 = 2112;
    id v19 = v6;
    __int16 v20 = 2114;
    uint64_t v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Completed removing zone share for zoneIDs %{public}@, with error %@ in scope %{public}@",  (uint8_t *)&v16,  0x20u);
  }

  uint64_t v11 = *(void *)(a1[8] + 8LL);
  uint64_t v14 = *(void **)(v11 + 40);
  uint64_t v12 = (id *)(v11 + 40);
  int v13 = v14;
  if (v14) {
    __int16 v15 = v13;
  }
  else {
    __int16 v15 = v6;
  }
  objc_storeStrong(v12, v15);
  (*(void (**)(void))(a1[7] + 16LL))();
}

void sub_10018E97C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v6 = a4;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)
    && [*(id *)(a1 + 32) shouldForwardErrorsToRequestCompletionHandlers])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), *(id *)(a1 + 40));
  }

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, BOOL))(v7 + 16))( v7,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) == 0LL);
  }
}

void sub_10018EBC0(uint64_t a1)
{
  group = dispatch_group_create();
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v81 objects:v87 count:16];
  if (v3)
  {
    uint64_t v48 = *(void *)v82;
    do
    {
      for (id i = 0LL; i != v3; id i = (char *)i + 1)
      {
        if (*(void *)v82 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v81 + 1) + 8LL * (void)i);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v5]);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allObjects]);

        id v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v2, "objectForKey:", v5));
        uint64_t v9 = v8;
        if (v8) {
          uint64_t v10 = v8;
        }
        else {
          uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        }
        uint64_t v11 = v10;

        if ([v7 count])
        {
          uint64_t v12 = 0LL;
          unint64_t v13 = 0LL;
          do
          {
            else {
              uint64_t v14 = 400LL;
            }
            __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subarrayWithRange:", v13, v14));
            -[NSMutableArray addObject:](v11, "addObject:", v15);

            v13 += 400LL;
            v12 -= 400LL;
          }

          while (v13 < (unint64_t)[v7 count]);
        }

        -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v11, v5);
      }

      id v3 = [obj countByEnumeratingWithState:&v81 objects:v87 count:16];
    }

    while (v3);
  }

  v79[0] = 0LL;
  v79[1] = v79;
  v79[2] = 0x3032000000LL;
  v79[3] = sub_10018664C;
  v79[4] = sub_10018665C;
  id v80 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v77[0] = 0LL;
  v77[1] = v77;
  v77[2] = 0x3032000000LL;
  v77[3] = sub_10018664C;
  v77[4] = sub_10018665C;
  id v78 = 0LL;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  id v40 = v2;
  id v39 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v40,  "countByEnumeratingWithState:objects:count:",  &v73,  v86,  16LL);
  if (v39)
  {
    uint64_t v38 = *(void *)v74;
    do
    {
      for (j = 0LL; j != v39; j = (char *)j + 1)
      {
        if (*(void *)v74 != v38) {
          objc_enumerationMutation(v40);
        }
        id obja = *(id *)(*((void *)&v73 + 1) + 8LL * (void)j);
        context = objc_autoreleasePoolPush();
        int v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v40, "objectForKey:", obja));
        __int128 v71 = 0u;
        __int128 v72 = 0u;
        __int128 v69 = 0u;
        __int128 v70 = 0u;
        id v43 = v16;
        id v17 = [v43 countByEnumeratingWithState:&v69 objects:v85 count:16];
        if (v17)
        {
          uint64_t v45 = *(void *)v70;
          do
          {
            id v49 = v17;
            for (k = 0LL; k != v49; k = (char *)k + 1)
            {
              if (*(void *)v70 != v45) {
                objc_enumerationMutation(v43);
              }
              id v19 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)k);
              __int16 v20 = -[CKFetchRecordsOperation initWithRecordIDs:]( objc_alloc(&OBJC_CLASS___CKFetchRecordsOperation),  "initWithRecordIDs:",  v19);
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
              -[CKFetchRecordsOperation setGroup:](v20, "setGroup:", v21);

              -[CKFetchRecordsOperation setQualityOfService:](v20, "setQualityOfService:", *(void *)(a1 + 72));
              uint64_t v22 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
              -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v22, "setDiscretionaryNetworkBehavior:", 0LL);
              -[CKFetchRecordsOperation setConfiguration:](v20, "setConfiguration:", v22);
              id v23 = objc_msgSend(v19, "pk_createArrayByApplyingBlock:", &stru_100648720);
              uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) reportContainerChangeIntervalBeginEventWithType:19 stateName:0 objectNames:v23 operationGroupName :*(void *)(a1 + 40) operationGroupNameSuffix:*(void *)(a1 + 48)]);
              id v25 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 56) + 160LL));
              dispatch_time_t v26 = dispatch_time(0LL, 60000000000LL);
              dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
              handler[0] = _NSConcreteStackBlock;
              handler[1] = 3221225472LL;
              handler[2] = sub_10018F398;
              handler[3] = &unk_10063AE10;
              id v27 = v20;
              uint64_t v28 = *(void *)(a1 + 56);
              __int128 v64 = v27;
              uint64_t v65 = v28;
              id v29 = v23;
              id v66 = v29;
              id v67 = *(id *)(a1 + 40);
              id v68 = *(id *)(a1 + 48);
              dispatch_source_set_event_handler(v25, handler);
              dispatch_resume(v25);
              dispatch_group_enter(group);
              v54[0] = _NSConcreteStackBlock;
              v54[1] = 3221225472LL;
              v54[2] = sub_10018F4CC;
              v54[3] = &unk_100648770;
              v54[4] = *(void *)(a1 + 56);
              uint64_t v30 = v25;
              __int16 v55 = v30;
              __int128 v61 = v77;
              __int128 v31 = group;
              __int128 v62 = v79;
              uint64_t v56 = v31;
              id v57 = obja;
              id v32 = v24;
              id v58 = v32;
              id v59 = *(id *)(a1 + 40);
              id v60 = *(id *)(a1 + 48);
              -[CKFetchRecordsOperation setFetchRecordsCompletionBlock:](v27, "setFetchRecordsCompletionBlock:", v54);
              __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 152) databaseForIdentifier:obja]);
              __int128 v34 = *(void **)(a1 + 56);
              uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v33 database]);
              objc_msgSend(v34, "_queue_addOperation:forDatabase:", v27, v35);
            }

            id v17 = [v43 countByEnumeratingWithState:&v69 objects:v85 count:16];
          }

          while (v17);
        }

        objc_autoreleasePoolPop(context);
      }

      id v39 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v40,  "countByEnumeratingWithState:objects:count:",  &v73,  v86,  16LL);
    }

    while (v39);
  }

  id v36 = *(void **)(a1 + 64);
  id v37 = *(dispatch_queue_s **)(*(void *)(a1 + 56) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018F950;
  block[3] = &unk_100648798;
  id v51 = v36;
  id v52 = v79;
  unsigned __int8 v53 = v77;
  dispatch_group_notify(group, v37, block);

  _Block_object_dispose(v77, 8);
  _Block_object_dispose(v79, 8);
}

void sub_10018F2A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

id sub_10018F304(id a1, CKRecordID *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID recordName](v2, "recordName"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordID zoneID](v2, "zoneID"));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ - %@", v3, v5));

  return v6;
}

void sub_10018F398(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationID]);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cloud store record fetch timer fired. Canceling fetch operationID: %{public}@",  buf,  0xCu);
  }

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cloud store fetching records has timed out. Current timeout is %f seconds.",  0x404E000000000000LL));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 errorWithCode:-4007 description:v6]);

  [*(id *)(a1 + 32) cancelWithUnderlyingError:v7];
  [*(id *)(a1 + 40) reportContainerChangeSignpostEventType:22 stateName:0 objectNames:*(void *)(a1 + 48) changeToken:0 error:v7 operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64)];
}

void sub_10018F4CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018F5EC;
  block[3] = &unk_100648748;
  id v9 = v7;
  uint64_t v24 = *(void *)(a1 + 88);
  id v15 = v9;
  id v16 = v6;
  id v17 = *(id *)(a1 + 48);
  id v18 = v5;
  uint64_t v25 = *(void *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = v10;
  id v21 = v11;
  id v22 = *(id *)(a1 + 72);
  id v23 = *(id *)(a1 + 80);
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v8, block);
}

void sub_10018F5EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8LL);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 40);
  }
  objc_storeStrong(v3, v4);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  void v26[2] = sub_10018F860;
  v26[3] = &unk_100643EF0;
  id v27 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 64);
  id v28 = v6;
  uint64_t v29 = v8;
  uint64_t v30 = v7;
  id v9 = objc_retainBlock(v26);
  [*(id *)(a1 + 72) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 80) error:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 40))
  {
    id v10 = [[PKCloudStoreError alloc] initWithError:*(void *)(a1 + 40)];
    if (([v10 isPartialErrorWithUnkownItems] & 1) == 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(void **)(a1 + 40);
        uint64_t v14 = *(void *)(a1 + 64);
        *(_DWORD *)__int128 buf = 138412546;
        id v32 = v13;
        __int16 v33 = 2112;
        uint64_t v34 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Error fetching records %@ in database %@",  buf,  0x16u);
      }
    }

    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 64);
    id v16 = *(void **)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 96);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10018F944;
    v24[3] = &unk_100639688;
    uint64_t v25 = v9;
    objc_msgSend( v16,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v15,  0,  v17,  v19,  v18,  v24);
  }

  else
  {
    uint64_t v20 = PKLogFacilityTypeGetObject(9LL);
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = [*(id *)(a1 + 56) count];
      uint64_t v23 = *(void *)(a1 + 64);
      *(_DWORD *)__int128 buf = 134218242;
      id v32 = v22;
      __int16 v33 = 2112;
      uint64_t v34 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched %lu records for database %@",  buf,  0x16u);
    }

    ((void (*)(void *))v9[2])(v9);
  }
}

void sub_10018F860(uint64_t a1)
{
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKey:*(void *)(a1 + 48)]);
    id v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    uint64_t v7 = v4;

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allValues]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));
    -[NSMutableSet unionSet:](v7, "unionSet:", v6);

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v7 forKey:*(void *)(a1 + 48)];
  }

uint64_t sub_10018F944(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void *sub_10018F950(void *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = result;
    id v3 = [*(id *)(*(void *)(result[5] + 8) + 40) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(*(void *)(v2[6] + 8LL) + 40LL));

    return [*(id *)(*(void *)(v2[5] + 8) + 40) removeAllObjects];
  }

  return result;
}

void sub_10018FA60(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = PKCloudStoreItemTypeToString(*(void *)(a1 + 48));
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fetching all items for item type %{public}@...",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItemType:*(void *)(a1 + 48) action:2]);
    if ([v7 count])
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:*(void *)(a1 + 48)]);
      if ([v8 count])
      {
        dispatch_group_t v9 = dispatch_group_create();
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v55 = 0x3032000000LL;
        uint64_t v56 = sub_10018664C;
        id v57 = sub_10018665C;
        id v58 = 0LL;
        id v10 = objc_alloc_init(&OBJC_CLASS___PKCloudRecordArray);
        id v11 = PKCloudStoreOperationGroupUserActionExplicit;
        id v12 = PKCloudStoreOperationGroupSuffixPassutil;
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472LL;
        v44[2] = sub_10018FFD8;
        v44[3] = &unk_100648810;
        id v8 = v8;
        id v45 = v8;
        id v13 = v9;
        uint64_t v46 = v13;
        char v53 = *(_BYTE *)(a1 + 56);
        id v14 = v11;
        id v47 = v14;
        id v15 = v12;
        uint64_t v16 = *(void *)(a1 + 32);
        id v48 = v15;
        uint64_t v49 = v16;
        uint64_t v17 = v10;
        uint64_t v18 = *(void *)(a1 + 48);
        p___int128 buf = &buf;
        uint64_t v52 = v18;
        id v50 = v17;
        [v7 enumerateKeysAndObjectsUsingBlock:v44];
        uint64_t v19 = *(void **)(a1 + 40);
        uint64_t v20 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100190464;
        block[3] = &unk_100641998;
        id v41 = v17;
        id v42 = v19;
        id v43 = &buf;
        id v21 = v17;
        dispatch_group_notify(v13, v20, block);

        _Block_object_dispose(&buf, 8);
      }

      else
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = PKCloudStoreItemTypeToString(*(void *)(a1 + 48));
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no record types associated with item type %{public}@",  (uint8_t *)&buf,  0xCu);
        }

        uint64_t v35 = *(void *)(a1 + 40);
        if (!v35) {
          goto LABEL_20;
        }
        id v36 = *(void **)(a1 + 32);
        uint64_t v37 = PKCloudStoreItemTypeToString(*(void *)(a1 + 48));
        id v13 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue(v37);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no record types associated with item type %@",  v13));
        id v39 = (void *)objc_claimAutoreleasedReturnValue([v36 errorWithCode:-4001 description:v38]);
        (*(void (**)(uint64_t, void, void *))(v35 + 16))(v35, 0LL, v39);
      }

      goto LABEL_19;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = PKCloudStoreItemTypeToString(*(void *)(a1 + 48));
      id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no zone associated with item type %{public}@",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v29 = *(void *)(a1 + 40);
    if (v29)
    {
      uint64_t v30 = *(void **)(a1 + 32);
      uint64_t v31 = PKCloudStoreItemTypeToString(*(void *)(a1 + 48));
      id v8 = (id)objc_claimAutoreleasedReturnValue(v31);
      id v13 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone associated with item type %@",  v8));
      id v32 = (void *)objc_claimAutoreleasedReturnValue([v30 errorWithCode:-4001 description:v13]);
      (*(void (**)(uint64_t, void, void *))(v29 + 16))(v29, 0LL, v32);

LABEL_19:
      goto LABEL_20;
    }
  }

  else
  {
    id v22 = PDCloudStoreContainerStateToString(v2);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer allItemsOfItemType:storeLocally:completion:]_block_invoke",  v23));

    uint64_t v24 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v26 = *(void *)(a1 + 40);
    if (v26)
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v7]);
      (*(void (**)(uint64_t, void, id))(v26 + 16))(v26, 0LL, v8);
LABEL_20:
    }
  }
}

void sub_10018FFB4(_Unwind_Exception *a1)
{
}

void sub_10018FFD8(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id obj = a3;
  id v21 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v21)
  {
    uint64_t v20 = *(void *)v34;
    do
    {
      uint64_t v4 = 0LL;
      do
      {
        if (*(void *)v34 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = v4;
        uint64_t v5 = *(void *)(*((void *)&v33 + 1) + 8 * v4);
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        id v6 = *(id *)(a1 + 32);
        id v7 = [v6 countByEnumeratingWithState:&v29 objects:v37 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v30;
          do
          {
            id v10 = 0LL;
            do
            {
              if (*(void *)v30 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)v10);
              id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithValue:](&OBJC_CLASS___NSPredicate, "predicateWithValue:", 1LL));
              id v13 = -[CKQuery initWithRecordType:predicate:]( objc_alloc(&OBJC_CLASS___CKQuery),  "initWithRecordType:predicate:",  v11,  v12);
              dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
              id v14 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  4LL,  *(unsigned __int8 *)(a1 + 96),  1LL,  25LL,  *(void *)(a1 + 48),  *(void *)(a1 + 56));
              -[PDCloudStoreRecordsRequest setCkQuery:](v14, "setCkQuery:", v13);
              -[PDCloudStoreRecordsRequest setCloudStoreZone:](v14, "setCloudStoreZone:", v5);
              v23[0] = _NSConcreteStackBlock;
              v23[1] = 3221225472LL;
              v23[2] = sub_100190268;
              v23[3] = &unk_1006487E8;
              id v15 = *(void **)(a1 + 72);
              uint64_t v24 = *(void **)(a1 + 64);
              uint64_t v16 = v24;
              id v17 = v15;
              uint64_t v18 = *(void *)(a1 + 88);
              uint64_t v27 = *(void *)(a1 + 80);
              uint64_t v28 = v18;
              id v25 = v17;
              id v26 = *(id *)(a1 + 40);
              [v16 executeRecordsRequest:v14 completion:v23];

              id v10 = (char *)v10 + 1;
            }

            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v29 objects:v37 count:16];
          }

          while (v8);
        }

        uint64_t v4 = v22 + 1;
      }

      while ((id)(v22 + 1) != v21);
      id v21 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    }

    while (v21);
  }
}

void sub_100190268(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019034C;
  block[3] = &unk_1006487C0;
  id v15 = v7;
  id v16 = v5;
  uint64_t v9 = *(void *)(a1 + 64);
  id v17 = v6;
  uint64_t v19 = v9;
  __int128 v13 = *(_OWORD *)(a1 + 48);
  id v10 = (id)v13;
  __int128 v18 = v13;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_10019034C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudStoreRecords]);
  [v2 applyCloudRecordArray:v3];

  if (*(void *)(a1 + 48))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = PKCloudStoreItemTypeToString(*(void *)(a1 + 72));
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      uint64_t v8 = *(void *)(a1 + 48);
      int v13 = 138543618;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Error fetching all items of type %{public}@, error: %@",  (uint8_t *)&v13,  0x16u);
    }
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v12 = *(void **)(v9 + 40);
  id v10 = (id *)(v9 + 40);
  id v11 = v12;
  if (!v12) {
    id v11 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v10, v11);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_100190464(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_100190560(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fetching all items for item type...",  (uint8_t *)&buf,  2u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItemType:1 action:2]);
    if ([v5 count])
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:1]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:5]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 arrayByAddingObjectsFromArray:v7]);

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:9]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 arrayByAddingObjectsFromArray:v9]);

      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:10]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 arrayByAddingObjectsFromArray:v11]);

      if ([v12 count])
      {
        dispatch_group_t v13 = dispatch_group_create();
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v48 = 0x3032000000LL;
        uint64_t v49 = sub_10018664C;
        id v50 = sub_10018665C;
        id v51 = 0LL;
        id v14 = objc_alloc_init(&OBJC_CLASS___PKCloudRecordArray);
        id v15 = PKCloudStoreOperationGroupUserActionExplicit;
        id v16 = PKCloudStoreOperationGroupSuffixPassutil;
        id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"creationDate >= %@ AND creationDate <= %@",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472LL;
        void v38[2] = sub_100190AC8;
        v38[3] = &unk_100648860;
        id v39 = v12;
        id v18 = v17;
        id v40 = v18;
        uint64_t v19 = v13;
        id v41 = v19;
        id v33 = v15;
        id v42 = v33;
        id v20 = v16;
        uint64_t v21 = *(void *)(a1 + 32);
        id v43 = v20;
        uint64_t v44 = v21;
        uint64_t v22 = v14;
        id v45 = v22;
        p___int128 buf = &buf;
        [v5 enumerateKeysAndObjectsUsingBlock:v38];
        uint64_t v23 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100190F08;
        block[3] = &unk_100641998;
        id v24 = *(id *)(a1 + 56);
        __int128 v35 = v22;
        id v36 = v24;
        uint64_t v37 = &buf;
        id v25 = v22;
        dispatch_group_notify(v19, v23, block);

        _Block_object_dispose(&buf, 8);
      }

      else
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no record types associated with the item types",  (uint8_t *)&buf,  2u);
        }

        uint64_t v32 = *(void *)(a1 + 56);
        if (!v32) {
          goto LABEL_20;
        }
        uint64_t v19 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) errorWithCode:-4001 description:@"There is no record types associated with the item types"]);
        (*(void (**)(uint64_t, void, dispatch_group_s *))(v32 + 16))(v32, 0LL, v19);
      }

LABEL_20:
      goto LABEL_21;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no zone associated with the item types",  (uint8_t *)&buf,  2u);
    }

    uint64_t v31 = *(void *)(a1 + 56);
    if (v31)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) errorWithCode:-4001 description:@"There is no zone associated with the item types"]);
      (*(void (**)(uint64_t, void, void *))(v31 + 16))(v31, 0LL, v12);
      goto LABEL_20;
    }
  }

  else
  {
    id v26 = PDCloudStoreContainerStateToString(v2);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer applePayContainerItemsFromDate:toDate:completion:]_block_invoke",  v27));

    uint64_t v28 = PKLogFacilityTypeGetObject(9LL);
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v30 = *(void *)(a1 + 56);
    if (v30)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v5]);
      (*(void (**)(uint64_t, void, void *))(v30 + 16))(v30, 0LL, v12);
      goto LABEL_20;
    }
  }

void sub_100190AA4(_Unwind_Exception *a1)
{
}

void sub_100190AC8(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id obj = a3;
  id v19 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v19)
  {
    uint64_t v18 = *(void *)v31;
    do
    {
      uint64_t v4 = 0LL;
      do
      {
        if (*(void *)v31 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = v4;
        uint64_t v5 = *(void *)(*((void *)&v30 + 1) + 8 * v4);
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        id v6 = *(id *)(a1 + 32);
        id v7 = [v6 countByEnumeratingWithState:&v26 objects:v34 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v27;
          do
          {
            id v10 = 0LL;
            do
            {
              if (*(void *)v27 != v9) {
                objc_enumerationMutation(v6);
              }
              id v11 = -[CKQuery initWithRecordType:predicate:]( objc_alloc(&OBJC_CLASS___CKQuery),  "initWithRecordType:predicate:",  *(void *)(*((void *)&v26 + 1) + 8LL * (void)v10),  *(void *)(a1 + 40));
              dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
              id v12 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  4LL,  0LL,  1LL,  25LL,  *(void *)(a1 + 56),  *(void *)(a1 + 64));
              -[PDCloudStoreRecordsRequest setCkQuery:](v12, "setCkQuery:", v11);
              -[PDCloudStoreRecordsRequest setCloudStoreZone:](v12, "setCloudStoreZone:", v5);
              v21[0] = _NSConcreteStackBlock;
              v21[1] = 3221225472LL;
              v21[2] = sub_100190D38;
              v21[3] = &unk_100648838;
              dispatch_group_t v13 = *(void **)(a1 + 80);
              uint64_t v22 = *(void **)(a1 + 72);
              id v14 = v22;
              id v15 = v13;
              uint64_t v16 = *(void *)(a1 + 88);
              id v23 = v15;
              uint64_t v25 = v16;
              id v24 = *(id *)(a1 + 48);
              [v14 executeRecordsRequest:v12 completion:v21];

              id v10 = (char *)v10 + 1;
            }

            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v26 objects:v34 count:16];
          }

          while (v8);
        }

        uint64_t v4 = v20 + 1;
      }

      while ((id)(v20 + 1) != v19);
      id v19 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
    }

    while (v19);
  }
}

void sub_100190D38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100190E14;
  block[3] = &unk_1006424F8;
  id v14 = v7;
  id v15 = v5;
  id v16 = v6;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v12;
  __int128 v17 = v12;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_100190E14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudStoreRecords]);
  [v2 applyCloudRecordArray:v3];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      uint64_t v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error fetching all items: %@",  (uint8_t *)&v11,  0xCu);
    }
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v10 = *(void **)(v7 + 40);
  id v8 = (id *)(v7 + 40);
  id v9 = v10;
  if (!v10) {
    id v9 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v8, v9);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_100190F08(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_100190FF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing all items for item type %{public}@...",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneName:*(void *)(a1 + 40) inContainerDatabase:v7]);
    if (v43)
    {
      id v42 = v7;
      goto LABEL_11;
    }

    id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:3]);

    id v43 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneName:*(void *)(a1 + 40) inContainerDatabase:v42]);
    if (v43)
    {
LABEL_11:
      dispatch_group_t v13 = *(void **)(a1 + 32);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v43));
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v13 filterCloudStoreZones:v14 action:3 inContainerDatabase:v42]);

      if ([v38 count])
      {
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordTypesForCloudStoreItemType:*(void *)(a1 + 56)]);
        if ([v37 count])
        {
          id v15 = PKCloudStoreOperationGroupUserActionExplicit;
          id v16 = PKCloudStoreOperationGroupSuffixPassutil;
          __int128 v17 = dispatch_group_create();
          *(void *)&__int128 buf = 0LL;
          *((void *)&buf + 1) = &buf;
          uint64_t v66 = 0x3032000000LL;
          id v67 = sub_10018664C;
          id v68 = sub_10018665C;
          id v69 = 0LL;
          v62[0] = 0LL;
          v62[1] = v62;
          v62[2] = 0x3032000000LL;
          v62[3] = sub_10018664C;
          void v62[4] = sub_10018665C;
          __int128 v63 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          id obj = v37;
          id v18 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
          if (v18)
          {
            uint64_t v41 = *(void *)v59;
            do
            {
              for (id i = 0LL; i != v18; id i = (char *)i + 1)
              {
                if (*(void *)v59 != v41) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v20 = *(void *)(*((void *)&v58 + 1) + 8LL * (void)i);
                uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithValue:]( &OBJC_CLASS___NSPredicate,  "predicateWithValue:",  1LL));
                uint64_t v22 = -[CKQuery initWithRecordType:predicate:]( objc_alloc(&OBJC_CLASS___CKQuery),  "initWithRecordType:predicate:",  v20,  v21);
                dispatch_group_enter(v17);
                id v23 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  4LL,  0LL,  1LL,  25LL,  v15,  v16);
                -[PDCloudStoreRecordsRequest setCkQuery:](v23, "setCkQuery:", v22);
                -[PDCloudStoreRecordsRequest setCloudStoreZone:](v23, "setCloudStoreZone:", v43);
                id v24 = *(void **)(a1 + 32);
                v49[0] = _NSConcreteStackBlock;
                v49[1] = 3221225472LL;
                v49[2] = sub_10019180C;
                v49[3] = &unk_1006488D8;
                v49[4] = v24;
                p___int128 buf = &buf;
                uint64_t v56 = *(void *)(a1 + 56);
                id v50 = v17;
                char v57 = *(_BYTE *)(a1 + 64);
                id v51 = v15;
                id v52 = v16;
                id v53 = v42;
                uint64_t v55 = v62;
                [v24 executeRecordsRequest:v23 completion:v49];
              }

              id v18 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
            }

            while (v18);
          }

          uint64_t v25 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100191C58;
          block[3] = &unk_100648798;
          id v46 = *(id *)(a1 + 48);
          id v47 = v62;
          uint64_t v48 = &buf;
          dispatch_group_notify(v17, v25, block);

          _Block_object_dispose(v62, 8);
          _Block_object_dispose(&buf, 8);
        }

        else
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v29 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
            __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no record types associated with item type %@",  (uint8_t *)&buf,  0xCu);
          }

          uint64_t v31 = *(void *)(a1 + 48);
          if (!v31) {
            goto LABEL_31;
          }
          __int128 v32 = *(void **)(a1 + 32);
          uint64_t v33 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
          id v15 = (id)objc_claimAutoreleasedReturnValue(v33);
          id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no record types associated with item type %@",  v15));
          __int128 v17 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([v32 errorWithCode:-4001 description:v16]);
          (*(void (**)(uint64_t, void, dispatch_group_s *))(v31 + 16))(v31, 0LL, v17);
        }
      }

      else
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(void *)(a1 + 40);
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "You do not have permission to remove items from zone %@",  (uint8_t *)&buf,  0xCu);
        }

        uint64_t v27 = *(void *)(a1 + 48);
        if (!v27) {
          goto LABEL_32;
        }
        __int128 v28 = *(void **)(a1 + 32);
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"You do not have permission to remove items from zone %@",  *(void *)(a1 + 40)));
        id v15 = (id)objc_claimAutoreleasedReturnValue([v28 errorWithCode:-4004 description:v37]);
        (*(void (**)(uint64_t, void, id))(v27 + 16))(v27, 0LL, v15);
      }

LABEL_31:
LABEL_32:

LABEL_33:
      goto LABEL_34;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = *(void *)(a1 + 40);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no zone with the name %{public}@",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v35 = *(void *)(a1 + 48);
    if (v35)
    {
      id v36 = *(void **)(a1 + 32);
      id v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone with the name %@",  *(void *)(a1 + 40)));
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v36 errorWithCode:-4001 description:v43]);
      (*(void (**)(uint64_t, void, void *))(v35 + 16))(v35, 0LL, v39);

      goto LABEL_33;
    }
  }

  else
  {
    id v8 = PDCloudStoreContainerStateToString(v2);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer removeAllItems:inZoneName:storeLocally:completion:]_block_invoke",  v9));

    uint64_t v10 = PKLogFacilityTypeGetObject(9LL);
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v42;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v42]);
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v44);
    }
  }

void sub_1001917C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

void sub_10019180C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100191928;
  block[3] = &unk_1006488B0;
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v24 = v7;
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[1] = 3221225472LL;
  id v15 = v5;
  id v16 = v6;
  id v17 = v8;
  char v25 = *(_BYTE *)(a1 + 96);
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v20 = v10;
  uint64_t v21 = v11;
  uint64_t v23 = *(void *)(a1 + 80);
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v9, block);
}

void sub_100191928(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreRecords]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id v6 = *(void **)(v3 + 40);
  uint64_t v4 = (id *)(v3 + 40);
  id v5 = v6;
  if (!v6) {
    id v5 = *(void **)(a1 + 40);
  }
  objc_storeStrong(v4, v5);
  if (*(void *)(a1 + 40))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = PKCloudStoreItemTypeToString(*(void *)(a1 + 104));
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v23 = v10;
      __int16 v24 = 2112;
      uint64_t v25 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error fetching all items of type %{public}@, error: %@",  buf,  0x16u);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v2 allRecordIDs]);
    if ([v12 count])
    {
      id v13 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  6LL,  *(unsigned __int8 *)(a1 + 112),  1LL,  25LL,  *(void *)(a1 + 56),  *(void *)(a1 + 64));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) identifier]);
      id v20 = v14;
      uint64_t v21 = v12;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
      -[PDCloudStoreRecordsRequest setRecordIDsByDatabaseIdentifier:](v13, "setRecordIDsByDatabaseIdentifier:", v15);

      id v16 = *(void **)(a1 + 80);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_100191B38;
      v17[3] = &unk_100648888;
      __int128 v19 = *(_OWORD *)(a1 + 88);
      id v18 = *(id *)(a1 + 48);
      [v16 executeRecordsRequest:v13 completion:v17];
    }

    else
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    }
  }
}

void sub_100191B38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v10 = *(void **)(v7 + 40);
  id v8 = (id *)(v7 + 40);
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v6;
  }
  objc_storeStrong(v8, v11);
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Removal of items failed with error %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 deletedRecordsForAllDatabaseIdentifiers]);
  [v14 addObjectsFromArray:v15];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100191C58(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    id v3 = [*(id *)(*(void *)(a1[5] + 8) + 40) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }

void sub_100191D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v3 = PKCloudStoreOperationGroupUserActionImplicit;
      uint64_t v4 = objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest);
      id v5 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v4,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  8LL,  0LL,  1LL,  *(void *)(a1 + 64),  v3,  PKCloudStoreOperationGroupSuffixRecordFetch);
      -[PDCloudStoreRecordsRequest setRecordName:](v5, "setRecordName:", *(void *)(a1 + 40));
      id v6 = *(void **)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_100192040;
      v21[3] = &unk_10063F208;
      id v22 = *(id *)(a1 + 48);
      [v6 executeRecordsRequest:v5 completion:v21];
      uint64_t v7 = v22;
    }

    else
    {
      if (!*(void *)(a1 + 48)) {
        return;
      }
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
        int v16 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue(v15);
        *(_DWORD *)__int128 buf = 138543362;
        __int16 v24 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "There is no record name defined for item type %{public}@",  buf,  0xCu);
      }

      id v17 = *(void **)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 48);
      uint64_t v19 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
      id v5 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue(v19);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no record name defined for item type %{public}@",  v5));
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 errorWithCode:-4010 description:v7]);
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v20);
    }
  }

  else
  {
    id v8 = PDCloudStoreContainerStateToString(v2);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v5 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer itemOfItemTypeFromAllZones:recordName:qualityOfServic e:completion:]_block_invoke",  v9));

    uint64_t v10 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (!v12) {
      goto LABEL_13;
    }
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v5]);
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v7);
  }

LABEL_13:
}

void sub_100192040(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cloudStoreRecords]);
    (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, 0LL);
  }

void sub_1001922F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    if ([*(id *)(a1 + 40) count])
    {
      id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      id v4 = *(id *)(a1 + 40);
      id v5 = [v4 countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v31;
        do
        {
          for (id i = 0LL; i != v6; id i = (char *)i + 1)
          {
            if (*(void *)v31 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
            uint64_t v10 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v9 recordName]);
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 152),  "cloudStoreZonesByDatabaseIdentifierForItemType:configuration:action:",  objc_msgSend(v9, "itemType"),  v9,  2));
            if ([v11 count])
            {
              v27[0] = _NSConcreteStackBlock;
              v27[1] = 3221225472LL;
              v27[2] = sub_10019270C;
              v27[3] = &unk_10063F230;
              __int128 v28 = v3;
              uint64_t v29 = v10;
              [v11 enumerateKeysAndObjectsUsingBlock:v27];

              uint64_t v12 = (os_log_s *)v28;
            }

            else
            {
              uint64_t Object = PKLogFacilityTypeGetObject(9LL);
              uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138543362;
                id v36 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "There is no zone associated with record name %{public}@",  buf,  0xCu);
              }
            }
          }

          id v6 = [v4 countByEnumeratingWithState:&v30 objects:v34 count:16];
        }

        while (v6);
      }

      id v14 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  5LL,  *(unsigned __int8 *)(a1 + 72),  *(unsigned __int8 *)(a1 + 73),  17LL,  *(void *)(a1 + 48),  *(void *)(a1 + 56));
      -[PDCloudStoreRecordsRequest setRecordIDsByDatabaseIdentifier:](v14, "setRecordIDsByDatabaseIdentifier:", v3);
      uint64_t v15 = *(void **)(a1 + 32);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      void v25[2] = sub_1001928CC;
      v25[3] = &unk_10063F208;
      id v26 = *(id *)(a1 + 64);
      [v15 executeRecordsRequest:v14 completion:v25];
    }

    else
    {
      if (!*(void *)(a1 + 64)) {
        return;
      }
      uint64_t v22 = PKLogFacilityTypeGetObject(9LL);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "There is no query configuration defined",  buf,  2u);
      }

      uint64_t v24 = *(void *)(a1 + 64);
      id v3 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) errorWithCode:-4010 description:@"There is no query configuration defined"]);
      (*(void (**)(uint64_t, void, NSMutableDictionary *))(v24 + 16))(v24, 0LL, v3);
    }
  }

  else
  {
    int v16 = PDCloudStoreContainerStateToString(v2);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    id v3 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer fetchItemsWithQueryConfigurations:returnRecords:storeRecords :groupName:groupSuffix:completion:]_block_invoke",  v17));

    uint64_t v18 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v36 = v3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v20 = *(void *)(a1 + 64);
    if (v20)
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v3]);
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0LL, v21);
    }
  }
}

void sub_10019270C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  id v8 = v7;
  if (v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  }
  uint64_t v10 = v9;

  [*(id *)(a1 + 32) setObject:v10 forKey:v5];
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = v6;
  id v11 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v23;
    do
    {
      for (id i = 0LL; i != v12; id i = (char *)i + 1)
      {
        if (*(void *)v23 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        int v16 = objc_alloc(&OBJC_CLASS___CKRecordID);
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 recordZone]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 zoneID]);
        uint64_t v20 = -[CKRecordID initWithRecordName:zoneID:](v16, "initWithRecordName:zoneID:", v17, v19);

        -[NSMutableSet addObject:](v10, "addObject:", v20);
      }

      id v12 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v12);
  }
}

void sub_1001928CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 cloudStoreRecords]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }

void sub_100192A08(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    if (!*(void *)(a1 + 40))
    {
      if (!*(void *)(a1 + 48)) {
        return;
      }
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        *(_DWORD *)__int128 buf = 138412290;
        id v34 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "There is no record name defined for item type %@",  buf,  0xCu);
      }

      uint64_t v19 = *(void **)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v21 = PKCloudStoreItemTypeToString(*(void *)(a1 + 56));
      id v3 = (id)objc_claimAutoreleasedReturnValue(v21);
      id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no record name defined for item type %@",  v3));
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v19 errorWithCode:-4010 description:v4]);
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0LL, v22);

      goto LABEL_19;
    }

    id v3 = PKCloudStoreOperationGroupUserActionImplicit;
    id v4 = [[PKCloudStoreZoneQueryConfiguration alloc] initWithItemType:*(void *)(a1 + 56) recordName:*(void *)(a1 + 40)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItemType:*(void *)(a1 + 56) configuration:v4 action:2]);
    if ([v5 count])
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_100192E38;
      v30[3] = &unk_10063F230;
      __int128 v31 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v32 = *(id *)(a1 + 40);
      id v6 = v31;
      [v5 enumerateKeysAndObjectsUsingBlock:v30];
      uint64_t v7 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  5LL,  0LL,  1LL,  *(void *)(a1 + 64),  v3,  0LL);
      -[PDCloudStoreRecordsRequest setRecordIDsByDatabaseIdentifier:](v7, "setRecordIDsByDatabaseIdentifier:", v6);
      id v8 = *(void **)(a1 + 32);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_100192FD4;
      v28[3] = &unk_10063F208;
      id v29 = *(id *)(a1 + 48);
      [v8 executeRecordsRequest:v7 completion:v28];

      uint64_t v9 = v31;
    }

    else
    {
      uint64_t v23 = PKLogFacilityTypeGetObject(9LL);
      __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v25 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138543362;
        id v34 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "There is no zone associated with record name %{public}@",  buf,  0xCu);
      }

      uint64_t v26 = *(void *)(a1 + 48);
      if (!v26) {
        goto LABEL_18;
      }
      uint64_t v27 = *(void **)(a1 + 32);
      id v6 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone for item with record name %{public}@",  *(void *)(a1 + 40)));
      uint64_t v9 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v27 errorWithCode:-4001 description:v6]);
      (*(void (**)(uint64_t, void, NSMutableDictionary *))(v26 + 16))(v26, 0LL, v9);
    }

LABEL_18:
    goto LABEL_19;
  }

  uint64_t v10 = PDCloudStoreContainerStateToString(v2);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer itemOfItemType:recordName:qualityOfService:completion:]_block_invoke",  v11));

  uint64_t v12 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v14 = *(void *)(a1 + 48);
  if (!v14) {
    goto LABEL_20;
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v3]);
  (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0LL, v4);
LABEL_19:

LABEL_20:
}

void sub_100192E38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  [*(id *)(a1 + 32) setObject:v7 forKey:v5];
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id obj = v6;
  id v8 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      for (id i = 0LL; i != v9; id i = (char *)i + 1)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        uint64_t v13 = objc_alloc(&OBJC_CLASS___CKRecordID);
        uint64_t v14 = *(void *)(a1 + 40);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 recordZone]);
        int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneID]);
        uint64_t v17 = -[CKRecordID initWithRecordName:zoneID:](v13, "initWithRecordName:zoneID:", v14, v16);

        -[NSMutableSet addObject:](v7, "addObject:", v17);
      }

      id v9 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v9);
  }
}

void sub_100192FD4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([a2 cloudStoreRecords]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
    (*(void (**)(uint64_t, void *, void))(v2 + 16))(v2, v4, 0LL);
  }

void sub_100193164(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176LL);
  if (v2 == 15)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(NSMutableDictionary **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to remove items %@...", buf, 0xCu);
    }

    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if ([*(id *)(a1 + 40) count])
    {
      unint64_t v7 = 0LL;
      do
      {
        id v8 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndex:v7]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItem:v8 action:3]);
        if ([v9 count])
        {
          uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary recordTypesAndNamesForCodingType:]( v8,  "recordTypesAndNamesForCodingType:",  2LL));
          if (-[os_log_s count](v10, "count"))
          {
            v22[0] = _NSConcreteStackBlock;
            v22[1] = 3221225472LL;
            v22[2] = sub_100193570;
            v22[3] = &unk_10063F280;
            uint64_t v23 = v8;
            __int128 v24 = v6;
            __int128 v25 = v10;
            [v9 enumerateKeysAndObjectsUsingBlock:v22];

            id v11 = v23;
          }

          else
          {
            BOOL v12 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
            id v11 = v4;
            if (v12)
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v27 = v8;
              _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There are no record types or names associated with item %@",  buf,  0xCu);
              id v11 = v4;
            }
          }
        }

        else
        {
          uint64_t v10 = v4;
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v27 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "There is no databases associated with item %@",  buf,  0xCu);
            uint64_t v10 = v4;
          }
        }

        ++v7;
      }

      while (v7 < (unint64_t)[*(id *)(a1 + 40) count]);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v27 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Trying to remove items with recordIDs %@...",  buf,  0xCu);
    }

    uint64_t v13 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  6LL,  1LL,  0LL,  *(void *)(a1 + 72),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
    -[PDCloudStoreRecordsRequest setRecordIDsByDatabaseIdentifier:](v13, "setRecordIDsByDatabaseIdentifier:", v6);
    uint64_t v14 = *(void **)(a1 + 32);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1001938D4;
    v20[3] = &unk_10063F208;
    id v21 = *(id *)(a1 + 64);
    [v14 executeRecordsRequest:v13 completion:v20];

    goto LABEL_22;
  }

  uint64_t v15 = PDCloudStoreContainerStateToString(v2);
  int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v6 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot peform %s: when the container is in state: %@",  "-[PDCloudStoreContainer removeItems:groupName:groupNameSuffix:qualityOfService:complet ion:]_block_invoke",  v16));

  uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v19 = *(void *)(a1 + 64);
  if (v19)
  {
    uint64_t v13 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v6]);
    (*(void (**)(uint64_t, PDCloudStoreRecordsRequest *))(v19 + 16))(v19, v13);
LABEL_22:
  }
}

void sub_100193570(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id obj = a3;
  id v30 = [obj countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v30)
  {
    uint64_t v28 = *(void *)v45;
    *(void *)&__int128 v5 = 138412290LL;
    __int128 v25 = v5;
    uint64_t v27 = a1;
    do
    {
      for (id i = 0LL; i != v30; id i = (char *)i + 1)
      {
        if (*(void *)v45 != v28) {
          objc_enumerationMutation(obj);
        }
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v44 + 1) + 8 * (void)i), "recordZone", v25));
        if (v7)
        {
          id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v29]);
          id v9 = v8;
          __int128 v31 = i;
          if (v8) {
            uint64_t v10 = v8;
          }
          else {
            uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          }
          BOOL v12 = v10;

          __int128 v42 = 0u;
          __int128 v43 = 0u;
          __int128 v40 = 0u;
          __int128 v41 = 0u;
          id v32 = *(id *)(a1 + 48);
          id v34 = [v32 countByEnumeratingWithState:&v40 objects:v49 count:16];
          if (v34)
          {
            uint64_t v33 = *(void *)v41;
            do
            {
              uint64_t v14 = 0LL;
              do
              {
                if (*(void *)v41 != v33) {
                  objc_enumerationMutation(v32);
                }
                uint64_t v35 = v14;
                uint64_t v15 = *(void **)(*((void *)&v40 + 1) + 8 * v14);
                __int128 v36 = 0u;
                __int128 v37 = 0u;
                __int128 v38 = 0u;
                __int128 v39 = 0u;
                int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 allValues]);
                id v17 = [v16 countByEnumeratingWithState:&v36 objects:v48 count:16];
                if (v17)
                {
                  id v18 = v17;
                  uint64_t v19 = *(void *)v37;
                  do
                  {
                    for (j = 0LL; j != v18; j = (char *)j + 1)
                    {
                      if (*(void *)v37 != v19) {
                        objc_enumerationMutation(v16);
                      }
                      uint64_t v21 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)j);
                      __int128 v22 = objc_alloc(&OBJC_CLASS___CKRecordID);
                      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
                      __int128 v24 = -[CKRecordID initWithRecordName:zoneID:](v22, "initWithRecordName:zoneID:", v21, v23);

                      -[NSMutableSet addObject:](v12, "addObject:", v24);
                    }

                    id v18 = [v16 countByEnumeratingWithState:&v36 objects:v48 count:16];
                  }

                  while (v18);
                }

                uint64_t v14 = v35 + 1;
              }

              while ((id)(v35 + 1) != v34);
              id v34 = [v32 countByEnumeratingWithState:&v40 objects:v49 count:16];
            }

            while (v34);
          }

          a1 = v27;
          if (-[NSMutableSet count](v12, "count")) {
            [*(id *)(v27 + 40) setObject:v12 forKey:v29];
          }
          id i = v31;
        }

        else
        {
          uint64_t Object = PKLogFacilityTypeGetObject(9LL);
          BOOL v12 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = *(void *)(a1 + 32);
            *(_DWORD *)__int128 buf = v25;
            uint64_t v51 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_DEFAULT,  "There is no zone associated with item %@",  buf,  0xCu);
          }
        }
      }

      id v30 = [obj countByEnumeratingWithState:&v44 objects:v52 count:16];
    }

    while (v30);
  }
}

void sub_1001938D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v9) {
      goto LABEL_7;
    }
    int v14 = 138412290;
    id v15 = v6;
    uint64_t v10 = "Removal of items failed with error %@";
    id v11 = v8;
    uint32_t v12 = 12;
  }

  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    LOWORD(v14) = 0;
    uint64_t v10 = "Records successfully removed.";
    id v11 = v8;
    uint32_t v12 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
LABEL_7:

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v6);
  }
}

void sub_100193F10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v10 = *(void *)(a1 + 32);
    int v16 = 138412546;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    id v19 = v6;
    id v11 = "Removal of record %@ failed with error %@";
    uint32_t v12 = v8;
    uint32_t v13 = 22;
  }

  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    uint64_t v14 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v14;
    id v11 = "Record %@ removed successfully.";
    uint32_t v12 = v8;
    uint32_t v13 = 12;
  }

  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v16, v13);
LABEL_7:

  uint64_t v15 = *(void *)(a1 + 40);
  if (v15) {
    (*(void (**)(uint64_t, id))(v15 + 16))(v15, v6);
  }
}

void sub_1001940E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v2,  "zoneForZoneName:",  *(void *)(*((void *)&v17 + 1) + 8 * (void)i),  (void)v17));
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);

        if (v11) {
          -[NSMutableSet addObject:](v4, "addObject:", v11);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }

    while (v7);
  }

  id v12 = -[NSMutableSet count](v4, "count");
  uint32_t v13 = *(void **)(a1 + 32);
  id v14 = -[NSMutableSet count](v4, "count");
  if (v14)
  {
    uint64_t v21 = v3;
    __int128 v22 = v4;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    if (v12) {
      goto LABEL_12;
    }
LABEL_16:
    int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v3, (void)v17));
    [v13 resetContainerWithAdditionalZoneIDsByDatabaseIdentifiers:v15 includedCachedZoneForDatabaseIdentifiers:v16 completion:*(void *)(a1 + 48)];

    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  uint64_t v15 = 0LL;
  if (!v12) {
    goto LABEL_16;
  }
LABEL_12:
  objc_msgSend( v13,  "resetContainerWithAdditionalZoneIDsByDatabaseIdentifiers:includedCachedZoneForDatabaseIdentifiers:completion:",  v15,  0,  *(void *)(a1 + 48),  (void)v17);
  if (v14) {
LABEL_13:
  }

LABEL_14:
}

id sub_1001943D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) containerResetCompletedWithSuccess:a2 error:a3];
}

void sub_1001944F4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 40) + 112LL);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "coalesceWithRequest:", *(void *)(a1 + 32), (void)v13))
        {
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            id v12 = *(void **)(a1 + 32);
            *(_DWORD *)__int128 buf = 138412546;
            id v18 = v12;
            __int16 v19 = 2112;
            __int128 v20 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Container reset request coalesced %@ onto existing request %@",  buf,  0x16u);
          }

          id v2 = 0LL;
          goto LABEL_15;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  if (v2)
  {
    [*(id *)(*(void *)(a1 + 40) + 112) addObject:v2];
    uint64_t v9 = PKLogFacilityTypeGetObject(6LL);
    id v3 = (id)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v18 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "Container reset request queued %@",  buf,  0xCu);
    }

void sub_100194840(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001948E0;
  block[3] = &unk_100639350;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  dispatch_async(v5, block);
}

id sub_1001948E0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finshed deleted zones and subscriptions for container reset request %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v5 + 120);
  *(void *)(v5 + 120) = 0LL;

  objc_msgSend(*(id *)(a1 + 32), "callCompletionsWithSuccess:error:", *(void *)(a1 + 48) == 0);
  [*(id *)(a1 + 40) _executeNextResetRequestIfPossible];
  [*(id *)(a1 + 40) setNextExpectedState:1];
  return [*(id *)(a1 + 40) initialCloudDatabaseSetupWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixUnrecoverableError completion:&stru_100648998];
}

void sub_1001949DC(id a1, BOOL a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed cloud store setup after container reset request",  v5,  2u);
  }
}

void sub_100194CC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9
    || (id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:*(void *)(a1 + 32)]),
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]),
        unsigned __int8 v12 = [v10 containsObject:v11],
        v11,
        v10,
        (v12 & 1) == 0))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Deleted zone with error: %@", buf, 0xCu);
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Zones deleted by database identifier %@",  buf,  0xCu);
    }

    uint64_t v20 = *(void *)(a1 + 56);
    if (v20) {
      (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0LL, v9);
    }
  }

  else
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(9LL);
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully deleted zones %@", buf, 0xCu);
    }

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100194FAC;
    v24[3] = &unk_10063A468;
    void v24[4] = *(void *)(a1 + 48);
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 152) subscriptionIdentifiersForDatabaseZoneIDs:v8]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Deleting subscriptions: %@", buf, 0xCu);
    }

    uint64_t v16 = PKCloudStoreOperationGroupSuffixPassutil;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100194FC0;
    v21[3] = &unk_100647F48;
    __int128 v17 = *(void **)(a1 + 56);
    id v22 = *(id *)(a1 + 48);
    id v23 = v17;
    [v22 _subscriptionOperationWithSubscriptionsToSaveByDatabaseIdentifier:0 subscriptionIDsToDeleteByDatabase:v15 operationGroup NameSuffix:v16 completion:v21];
  }
}

id sub_100194FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveZoneIDs:a3];
}

void sub_100194FC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Deleted subscription identifier with error: %@",  buf,  0xCu);
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001950FC;
  v13[3] = &unk_10063A468;
  void v13[4] = *(void *)(a1 + 32);
  [v8 enumerateKeysAndObjectsUsingBlock:v13];
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, BOOL, id))(v12 + 16))(v12, v9 == 0LL, v9);
  }
}

id sub_1001950FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveSubscriptionIdentifiers:a3];
}

void sub_1001951B8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating zone with name %@", buf, 0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 databaseForScope:2]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneForZoneName:*(void *)(a1 + 32)]);
    id v9 = *(void **)(a1 + 40);
    if (v8)
    {
      uint64_t v13 = v7;
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v8));
      __int128 v14 = v10;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
      objc_msgSend( v9,  "_queue_createZoneAndSubscriptionsByDatabaseIdentifier:groupSuffix:completion:",  v11,  0,  *(void *)(a1 + 48));
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone defined for zone name %@",  *(void *)(a1 + 32)));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 errorWithCode:-4001 description:v12]);

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) errorWithCode:-4004 description:@"No private database defined"]);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_100195418(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_ensureZoneShareIntegrity");
}

void sub_100195528(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 shareURL]);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareInvitationToken]);

      if (v5)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          id v8 = *(void **)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          id v43 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Attempting to accept invitation %@",  buf,  0xCu);
        }

        id v10 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  objc_opt_class(&OBJC_CLASS___CKDeviceToDeviceShareInvitationToken, v9));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareInvitationToken]);
        id v40 = 0LL;
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_strictlyUnarchivedObjectOfClasses:fromData:error:",  v11,  v12,  &v40));
        id v14 = v40;

        if (v14 || !v13)
        {
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *(void **)(a1 + 32);
            *(_DWORD *)__int128 buf = 138412290;
            id v43 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Error unarchiving token data to CKDeviceToDeviceShareInvitationToken %@",  buf,  0xCu);
          }

          uint64_t v22 = *(void *)(a1 + 64);
          if (v22) {
            (*(void (**)(uint64_t, void, id))(v22 + 16))(v22, 0LL, v14);
          }
        }

        else
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
          if (v15)
          {
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
            __int128 v41 = v16;
            __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v41,  1LL));
          }

          else
          {
            __int128 v17 = 0LL;
          }

          id v23 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) reportContainerChangeIntervalBeginEventWithType:23 stateName:0 objectNames:v17 operationGroupName:*(void *)(a1 + 48) ope rationGroupNameSuffix:*(void *)(a1 + 56)]);
          __int128 v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareURL]);
          -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v13, v25);

          uint64_t v26 = *(void *)(a1 + 48);
          uint64_t v27 = *(void *)(a1 + 56);
          uint64_t v28 = *(void *)(a1 + 72);
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472LL;
          v32[2] = sub_100195928;
          v32[3] = &unk_100648AB0;
          id v29 = *(void **)(a1 + 32);
          id v33 = *(id *)(a1 + 40);
          id v34 = v29;
          id v38 = *(id *)(a1 + 64);
          id v35 = *(id *)(a1 + 48);
          id v30 = *(id *)(a1 + 56);
          uint64_t v39 = *(void *)(a1 + 72);
          id v36 = v30;
          id v37 = v23;
          id v31 = v23;
          [v33 _shareMetadataWithInvitationTokensByShareURL:v24 operationGroupName:v26 operationGroupNameSuffix:v27 qualityOfService:v28 completion:v32];
        }

        goto LABEL_14;
      }
    }
  }

  id v14 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot accept an invalid invitation %@.",  *(void *)(a1 + 32)));
  uint64_t v18 = PKLogFacilityTypeGetObject(9LL);
  __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v43 = v14;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v20 = *(void *)(a1 + 64);
  if (v20)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v14]);
    (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0LL, v13);
LABEL_14:
  }
}

void sub_100195928(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100195A40;
  block[3] = &unk_100648A88;
  id v14 = v5;
  id v15 = v7;
  id v16 = v6;
  id v21 = *(id *)(a1 + 72);
  id v17 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  id v18 = v9;
  uint64_t v19 = v10;
  id v20 = *(id *)(a1 + 64);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_100195A40(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shareURL]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);

  if (v4 && !*(void *)(a1 + 48))
  {
    id v9 = objc_alloc(&OBJC_CLASS___CKAcceptSharesOperation);
    id v34 = v4;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v34, 1LL));
    id v11 = -[CKAcceptSharesOperation initWithShareMetadatas:](v9, "initWithShareMetadatas:", v10);

    id v12 = objc_alloc_init(&OBJC_CLASS___CKOperationConfiguration);
    -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v12, "setDiscretionaryNetworkBehavior:", 0LL);
    -[CKAcceptSharesOperation setConfiguration:](v11, "setConfiguration:", v12);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    -[CKAcceptSharesOperation setGroup:](v11, "setGroup:", v13);
    -[CKAcceptSharesOperation setQualityOfService:](v11, "setQualityOfService:", *(void *)(a1 + 96));
    id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100195D28;
    v31[3] = &unk_100648A10;
    id v32 = *(id *)(a1 + 40);
    id v33 = v14;
    id v15 = v14;
    -[CKAcceptSharesOperation setPerShareCompletionBlock:](v11, "setPerShareCompletionBlock:", v31);
    id v20 = _NSConcreteStackBlock;
    uint64_t v21 = 3221225472LL;
    uint64_t v22 = sub_100195E6C;
    id v23 = &unk_100648A60;
    id v16 = *(void **)(a1 + 80);
    uint64_t v24 = *(void *)(a1 + 72);
    id v25 = v16;
    id v26 = *(id *)(a1 + 40);
    id v29 = *(id *)(a1 + 88);
    id v27 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 96);
    id v28 = v17;
    uint64_t v30 = v18;
    -[CKAcceptSharesOperation setAcceptSharesCompletionBlock:](v11, "setAcceptSharesCompletionBlock:", &v20);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 72) + 152), "container", v20, v21, v22, v23, v24));
    [v19 addOperation:v11];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v36 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error fetching share metadata for invitation %@",  buf,  0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, 0LL, *(void *)(a1 + 48));
    }
  }
}

void sub_100195D28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v15 = 138412546;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error accepting share invitation %@, %@",  (uint8_t *)&v15,  0x16u);
    }
  }

  else
  {
    if (v12)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = 138412290;
      uint64_t v16 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Successfully accepted invitation %@",  (uint8_t *)&v15,  0xCu);
    }

    [*(id *)(a1 + 40) addObject:v8];
  }
}

void sub_100195E6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v3];
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v21 = v6;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Error accepting share invitation %@, %@",  buf,  0x16u);
    }

    uint64_t v7 = *(void *)(a1 + 72);
    if (v7) {
      (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0LL, v3);
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:3]);
    id v9 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100196020;
    v14[3] = &unk_100648A38;
    void v14[4] = v9;
    uint64_t v10 = *(void *)(a1 + 56);
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 64);
    id v11 = *(id *)(a1 + 56);
    uint64_t v13 = *(void **)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 80);
    id v17 = v11;
    uint64_t v19 = v12;
    id v18 = v13;
    [v9 _forceFetchRecordZonesForContainerDatabase:v8 operationGroupNameSuffix:v10 completion:v14];
  }
}

void sub_100196020(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:3]);
  id v3 = *(void **)(*(void *)(a1 + 32) + 152LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 cloudStoreZoneForZoneName:v4 inContainerDatabase:v2]);

  if (!v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      *(_DWORD *)__int128 buf = 138412290;
      id v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Error: The shared zone with name %@ is not cached!",  buf,  0xCu);
    }
  }

  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001961C0;
  v14[3] = &unk_1006424D0;
  uint64_t v13 = *(void *)(a1 + 72);
  id v15 = *(id *)(a1 + 64);
  [v9 fetchRecordsInAcceptedZoneShare:v5 databaseIdentifier:v10 operationGroupName:v11 operationGroupNameSuffix:v12 qualityOfService:v13 completion:v14];
}

uint64_t sub_1001961C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, a2);
  }
  return result;
}

void sub_1001963F0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "_queue_completedRecordFetchFromNewSharedZone:");
  }
}

void sub_100196578(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneForZoneName:*(void *)(a1 + 40)]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneID]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneID:v4 inContainerDatabase:v2]);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v44 = *(void *)(a1 + 40);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v44, 1LL));
  }

  id v27 = (void *)v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) reportContainerChangeIntervalBeginEventWithType:24 stateName:*(void *)(a1 + 48) objectNames:v6 operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64)]);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  void v37[2] = sub_10019694C;
  v37[3] = &unk_100648B00;
  void v37[4] = *(void *)(a1 + 32);
  id v8 = v7;
  id v38 = v8;
  id v39 = *(id *)(a1 + 72);
  id v9 = objc_retainBlock(v37);
  if (!v5)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"A cloud store zone is not defined"));
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v41 = v21;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

void sub_10019694C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  objc_msgSend( *(id *)(a1 + 32),  "reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:error:",  *(void *)(a1 + 40));
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v7 + 16))(v7, a2, a3, v8);
  }
}

void sub_1001969B4(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id v9 = v8;
  if (!v7 || v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void **)(a1 + 32);
      uint64_t v21 = @"NO";
      *(_DWORD *)__int128 buf = 138412802;
      if (a3) {
        uint64_t v21 = @"YES";
      }
      id v39 = v20;
      __int16 v40 = 2112;
      __int128 v41 = v21;
      __int16 v42 = 2112;
      id v43 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Error fetching share for zone: %@, shareRecordMissing: %@, error: %@",  buf,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pk_participantWithRecipientHandle:", *(void *)(a1 + 40)));
    id v11 = [v10 permission];
    if (v10)
    {
      id v12 = v11;
      if ([v10 isCurrentUser])
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot remove the current user from the share %@",  v10));
        uint64_t v14 = PKLogFacilityTypeGetObject(9LL);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
        }

        uint64_t v16 = *(void *)(a1 + 80);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _cannotPerformActionErrorWithFailureReason:v13]);
        (*(void (**)(uint64_t, void, id, void *))(v16 + 16))(v16, 0LL, v12, v17);
      }

      else
      {
        [v7 removeParticipant:v10];
        uint64_t v25 = PKLogFacilityTypeGetObject(9LL);
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = CKStringFromParticipantPermission(v12);
          id v28 = (__CFString *)objc_claimAutoreleasedReturnValue(v27);
          *(_DWORD *)__int128 buf = 138412546;
          id v39 = v10;
          __int16 v40 = 2112;
          __int128 v41 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Removing participant from share %@ with permission %@",  buf,  0x16u);
        }

        id v29 = *(void **)(a1 + 48);
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = *(void *)(a1 + 64);
        uint64_t v32 = *(void *)(a1 + 72);
        uint64_t v33 = *(void *)(a1 + 88);
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472LL;
        v34[2] = sub_100196D3C;
        v34[3] = &unk_100648B28;
        id v35 = v10;
        id v36 = *(id *)(a1 + 80);
        id v37 = v12;
        [v29 _updateShare:v7 cloudStoreZone:v30 operationGroupName:v31 operationGroupNameSuffix:v32 qualityOfService:v33 completion:v34];
      }
    }

    else
    {
      uint64_t v22 = PKLogFacilityTypeGetObject(9LL);
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        id v39 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "There is no person on the share with the handle %@",  buf,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
    }
  }
}

void sub_100196D3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed removing participant %@ from share with error %@",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100196F20(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneForZoneName:*(void *)(a1 + 40)]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneID]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneID:v4 inContainerDatabase:v2]);
  if (v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fetching share for zone %@", buf, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 72);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100197178;
    v17[3] = &unk_100648BA0;
    id v11 = *(void **)(a1 + 32);
    id v18 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 64);
    id v19 = v2;
    [v11 _zoneWideShareForCloudStoreZone:v5 createIfNotExists:0 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v17];

    id v12 = v18;
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"A cloud store zone is not defined"));
    uint64_t v13 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v15 = *(void *)(a1 + 64);
    if (v15)
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v12]);
      (*(void (**)(uint64_t, void, void, void *))(v15 + 16))(v15, 0LL, 0LL, v16);
    }
  }
}

void sub_100197178(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = v8;
  if (!v7 || v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v20 = 138412546;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Error fetching share for zone %@, %@",  (uint8_t *)&v20,  0x16u);
    }

    uint64_t v19 = *(void *)(a1 + 48);
    if (v19) {
      (*(void (**)(uint64_t, void, uint64_t, void *))(v19 + 16))(v19, 0LL, a3, v9);
    }
  }

  else
  {
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___PKCloudRecordArray);
    id v11 = objc_alloc(&OBJC_CLASS___PKCloudRecordObject);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v7));
    id v13 = [v11 initWithRecords:v12];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    -[PKCloudRecordArray addCloudRecord:forContainerDatabaseIdentifier:]( v10,  "addCloudRecord:forContainerDatabaseIdentifier:",  v13,  v14);

    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      (*(void (**)(uint64_t, PKCloudRecordArray *, uint64_t, void))(v15 + 16))(v15, v10, a3, 0LL);
    }
  }
}

void sub_100197454(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v90 zoneForZoneName:*(void *)(a1 + 40)]);
  id v88 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneID]);

  id v89 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)v2 + 152) cloudStoreZoneForZoneID:v88 inContainerDatabase:v90]);
  if (v89)
  {
    if (*(void *)(a1 + 48))
    {
      if (*(void *)(a1 + 80))
      {
        id v4 = (void *)PKCloudStoreOperationGroupSuffixShareRecordConflict;
        id v5 = *(id *)(a1 + 56);
        id v6 = v4;
        id v7 = v6;
        if (v5 == v6)
        {
          unsigned __int8 v8 = 1;
        }

        else
        {
          unsigned __int8 v8 = 0;
          if (v5 && v6) {
            unsigned __int8 v8 = [v5 isEqualToString:v6];
          }
        }

        if (*(void *)(a1 + 40))
        {
          uint64_t v179 = *(void *)(a1 + 40);
          uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v179, 1LL));
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        id v17 = (void *)(a1 + 32);
        uint64_t v18 = (id *)(a1 + 48);
        __int128 v83 = (id *)(a1 + 64);
        __int128 v84 = (id *)(a1 + 56);
        v87 = (void *)v16;
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "reportContainerChangeIntervalBeginEventWithType:stateName:objectNames:operationGroupName:opera tionGroupNameSuffix:",  28,  *(void *)(a1 + 48)));
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v175 = 0x3032000000LL;
        v176 = sub_10018664C;
        v177 = sub_10018665C;
        id v178 = 0LL;
        v172[0] = 0LL;
        v172[1] = v172;
        v172[2] = 0x3032000000LL;
        v172[3] = sub_10018664C;
        v172[4] = sub_10018665C;
        id v173 = 0LL;
        v160[0] = _NSConcreteStackBlock;
        v160[1] = 3221225472LL;
        v160[2] = sub_100198088;
        v160[3] = &unk_100648C18;
        v160[4] = *(void *)(a1 + 32);
        id v86 = v19;
        id v161 = v86;
        id v20 = v89;
        id v162 = v20;
        id v163 = *(id *)(a1 + 48);
        unsigned __int8 v171 = v8;
        id v79 = (id *)(a1 + 40);
        id v21 = *(id *)(a1 + 40);
        uint64_t v22 = *(void *)(a1 + 80);
        __int128 v82 = (uint64_t *)(a1 + 80);
        id v164 = v21;
        uint64_t v169 = v22;
        id v23 = *(id *)(a1 + 64);
        uint64_t v25 = *(void *)(a1 + 88);
        uint64_t v24 = (uint64_t *)(a1 + 88);
        id v165 = v23;
        uint64_t v170 = v25;
        id v167 = (id)*(v24 - 2);
        p___int128 buf = &buf;
        id v166 = *v84;
        id v26 = objc_retainBlock(v160);
        v157[0] = _NSConcreteStackBlock;
        v157[1] = 3221225472LL;
        v157[2] = sub_100198480;
        v157[3] = &unk_100648C40;
        id v158 = *v18;
        v159 = v172;
        id v80 = objc_retainBlock(v157);
        v154[0] = _NSConcreteStackBlock;
        v154[1] = 3221225472LL;
        v154[2] = sub_10019863C;
        v154[3] = &unk_100648C68;
        uint64_t v27 = v26;
        id v156 = v27;
        id v28 = v20;
        id v155 = v28;
        id v29 = objc_retainBlock(v154);
        v149[0] = _NSConcreteStackBlock;
        v149[1] = 3221225472LL;
        v149[2] = sub_1001987A4;
        v149[3] = &unk_100648CB8;
        v149[4] = *v17;
        id v30 = v28;
        id v150 = v30;
        id v151 = *v83;
        id v31 = *v84;
        uint64_t v32 = *v24;
        id v152 = v31;
        uint64_t v153 = v32;
        uint64_t v33 = objc_retainBlock(v149);
        v147[0] = _NSConcreteStackBlock;
        v147[1] = 3221225472LL;
        v147[2] = sub_100198864;
        v147[3] = &unk_100648CE0;
        id v34 = v33;
        id v148 = v34;
        id v35 = objc_retainBlock(v147);
        v144[0] = _NSConcreteStackBlock;
        v144[1] = 3221225472LL;
        v144[2] = sub_1001989C0;
        v144[3] = &unk_100648D08;
        v144[4] = *v17;
        id v36 = v30;
        id v145 = v36;
        id v146 = *v18;
        id v37 = objc_retainBlock(v144);
        v138[0] = _NSConcreteStackBlock;
        v138[1] = 3221225472LL;
        v138[2] = sub_100198BAC;
        v138[3] = &unk_100648D58;
        id v38 = v37;
        uint64_t v39 = *v82;
        id v75 = v38;
        id v141 = v38;
        uint64_t v143 = v39;
        __int16 v40 = v34;
        uint64_t v41 = *v17;
        id v74 = v40;
        id v142 = v40;
        v138[4] = v41;
        id v42 = v36;
        id v139 = v42;
        id v140 = *v18;
        id v43 = objc_retainBlock(v138);
        v132[0] = _NSConcreteStackBlock;
        v132[1] = 3221225472LL;
        v132[2] = sub_100198E88;
        v132[3] = &unk_100648D80;
        v132[4] = *v17;
        id v133 = *v18;
        id v44 = v42;
        id v134 = v44;
        id v135 = *v83;
        id v45 = *v84;
        uint64_t v46 = *v24;
        id v136 = v45;
        uint64_t v137 = v46;
        __int128 v47 = objc_retainBlock(v132);
        v127[0] = _NSConcreteStackBlock;
        v127[1] = 3221225472LL;
        v127[2] = sub_100198EA0;
        v127[3] = &unk_100648E20;
        __int128 v73 = v35;
        id v128 = v73;
        uint64_t v48 = v27;
        id v129 = v48;
        uint64_t v49 = v47;
        id v130 = v49;
        id v50 = v43;
        id v131 = v50;
        uint64_t v51 = objc_retainBlock(v127);
        v124[0] = _NSConcreteStackBlock;
        v124[1] = 3221225472LL;
        v124[2] = sub_100199258;
        v124[3] = &unk_100648E70;
        __int128 v72 = v29;
        id v125 = v72;
        id v52 = v51;
        id v126 = v52;
        id v53 = objc_retainBlock(v124);
        v115[0] = _NSConcreteStackBlock;
        v115[1] = 3221225472LL;
        v115[2] = sub_1001993B8;
        v115[3] = &unk_100648EE8;
        __int128 v71 = v80;
        id v118 = v71;
        id v116 = *v18;
        id v54 = v44;
        id v117 = v54;
        __int128 v81 = v53;
        id v119 = v81;
        uint64_t v77 = v49;
        id v120 = v77;
        uint64_t v55 = v48;
        id v121 = v55;
        id v78 = v52;
        id v122 = v78;
        __int128 v76 = v50;
        id v123 = v76;
        uint64_t v56 = objc_retainBlock(v115);
        v105[0] = _NSConcreteStackBlock;
        v105[1] = 3221225472LL;
        v105[2] = sub_1001999C0;
        v105[3] = &unk_100648F38;
        id v106 = *v18;
        id v57 = v54;
        uint64_t v113 = *v82;
        uint64_t v58 = *v17;
        id v107 = v57;
        uint64_t v108 = v58;
        id v109 = *v83;
        id v59 = *v84;
        uint64_t v60 = *v24;
        id v110 = v59;
        uint64_t v114 = v60;
        __int128 v61 = v55;
        id v111 = v61;
        __int128 v62 = v56;
        id v112 = v62;
        __int128 v63 = objc_retainBlock(v105);
        v100[0] = _NSConcreteStackBlock;
        v100[1] = 3221225472LL;
        v100[2] = sub_100199B48;
        v100[3] = &unk_100648FB0;
        v100[4] = *v17;
        id v101 = *v18;
        id v102 = *v79;
        __int128 v104 = v172;
        __int128 v64 = v63;
        id v103 = v64;
        uint64_t v65 = objc_retainBlock(v100);
        v91[0] = _NSConcreteStackBlock;
        v91[1] = 3221225472LL;
        v91[2] = sub_100199D84;
        v91[3] = &unk_100649000;
        v91[4] = *v17;
        id v92 = *v18;
        id v93 = v57;
        id v94 = *v83;
        id v66 = *v84;
        uint64_t v67 = *v24;
        id v95 = v66;
        uint64_t v99 = v67;
        id v68 = v61;
        id v96 = v68;
        v98 = &buf;
        id v69 = v65;
        id v97 = v69;
        __int128 v70 = objc_retainBlock(v91);
        ((void (*)(void))v70[2])();

        _Block_object_dispose(v172, 8);
        _Block_object_dispose(&buf, 8);

        goto LABEL_25;
      }

      v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot create a share invitiation with unknown permission"));
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v87;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
LABEL_19:
        v85 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v87]);
        (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v85);
      }
    }

    else
    {
      v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot create a share invitiation for a nil recipient handle"));
      uint64_t v12 = PKLogFacilityTypeGetObject(9LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v87;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v11 = *(void *)(a1 + 72);
      if (v11) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"A cloud store zone is not defined"));
    uint64_t v9 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v87;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 72);
    if (v11) {
      goto LABEL_19;
    }
  }

void sub_10019805C(_Unwind_Exception *a1)
{
}

void sub_100198088(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v39 = v5;
    __int16 v40 = 2112;
    id v41 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Completed invitation share creation with invitation: %@, error: %@",  buf,  0x16u);
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  void v25[2] = sub_100198370;
  v25[3] = &unk_100648BF0;
  uint64_t v9 = *(void **)(a1 + 40);
  void v25[4] = *(void *)(a1 + 32);
  id v26 = v9;
  id v10 = v6;
  id v27 = v10;
  id v28 = *(id *)(a1 + 48);
  id v29 = *(id *)(a1 + 56);
  char v36 = *(_BYTE *)(a1 + 120);
  id v11 = *(id *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 104);
  id v30 = v11;
  uint64_t v34 = v12;
  id v13 = *(id *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 112);
  id v31 = v13;
  uint64_t v35 = v14;
  id v33 = *(id *)(a1 + 88);
  id v15 = v5;
  id v32 = v15;
  uint64_t v16 = objc_retainBlock(v25);
  id v17 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
  if (v17)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Best effort to remove the share lock after an invitation creation completion %@",  buf,  0xCu);
    }

    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
    uint64_t v20 = *(void *)(a1 + 72);
    uint64_t v21 = *(void *)(a1 + 80);
    uint64_t v22 = *(void *)(a1 + 112);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100198474;
    v23[3] = &unk_1006424D0;
    uint64_t v24 = v16;
    [v18 removeItems:v19 groupName:v20 groupNameSuffix:v21 qualityOfService:v22 completion:v23];
  }

  else
  {
    [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v10];
    ((void (*)(void *))v16[2])(v16);
  }
}

id sub_100198370(uint64_t a1)
{
  if (*(void *)(a1 + 48)
    && (id v2 = [[PKCloudStoreError alloc] initWithError:*(void *)(a1 + 48)]) != 0)
  {
    id v3 = v2;
    unsigned int v4 = [v2 isConflictDetected];
  }

  else
  {
    unsigned int v4 = 0;
  }

  if (*(void *)(a1 + 48)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (!v4) {
      goto LABEL_14;
    }
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    [v6 deleteRetryCloudStoreShareOperationBackoffForBackoffType:1 cloudStoreZone:*(void *)(a1 + 56) recipientHandle:*(void *)(a1 + 64)];

    if (!v4) {
      goto LABEL_14;
    }
  }

  if (!*(_BYTE *)(a1 + 120)) {
    return [*(id *)(a1 + 32) createShareInvitationForRecipientHandle:*(void *)(a1 + 64) zoneName:*(void *)(a1 + 72) permission:*(void *)(a1 + 104) operationGroupName:*(void *)(a1 + 80) operationGroupNameSuffix:PKCloudStoreOperationGroupSuffixShareRecordConflict qua lityOfService:*(void *)(a1 + 112) completion:*(void *)(a1 + 96)];
  }
LABEL_14:
  id result = *(id *)(a1 + 96);
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void))result + 2))( result,  *(void *)(a1 + 88),  *(void *)(a1 + 48));
  }
  return result;
}

uint64_t sub_100198474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100198480(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "pk_participantWithRecipientHandle:", *(void *)(a1 + 32)));
  if (!v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v22 = 0LL;
      __int16 v23 = 2112;
      id v24 = v3;
      __int16 v25 = 2112;
      uint64_t v26 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Cannot find participant %@ on share %@. Checking aliases %@",  buf,  0x20u);
    }

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v8 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v17;
      while (2)
      {
        for (id i = 0LL; i != v10; id i = (char *)i + 1)
        {
          if (*(void *)v17 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = objc_claimAutoreleasedReturnValue( objc_msgSend( v3,  "pk_participantWithRecipientHandle:",  *(void *)(*((void *)&v16 + 1) + 8 * (void)i),  (void)v16));
          if (v13)
          {
            unsigned int v4 = (void *)v13;
            goto LABEL_14;
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    unsigned int v4 = 0LL;
LABEL_14:
  }

  id v14 = v4;

  return v14;
}

void sub_10019863C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a3 invitationToken]);
  id v14 = 0LL;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v6,  1LL,  &v14));
  id v8 = v14;

  if (v7)
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___PKCloudStoreZoneInvitation);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 URL]);
    -[PKCloudStoreZoneInvitation setShareURL:](v9, "setShareURL:", v10);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[PKCloudStoreZoneInvitation setDateCreated:](v9, "setDateCreated:", v11);

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    -[PKCloudStoreZoneInvitation setZoneName:](v9, "setZoneName:", v12);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerName]);
    -[PKCloudStoreZoneInvitation setContainerIdentifier:](v9, "setContainerIdentifier:", v13);

    -[PKCloudStoreZoneInvitation setShareInvitationToken:](v9, "setShareInvitationToken:", v7);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1001987A4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100198858;
  v12[3] = &unk_100648C90;
  id v13 = v5;
  id v11 = v5;
  [v6 _updateShare:a2 cloudStoreZone:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v12];
}

uint64_t sub_100198858(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100198864(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v18 = v8;
    __int16 v19 = 2112;
    id v20 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Removing participant %@ to share %@",  buf,  0x16u);
  }

  [v7 removeParticipant:v8];
  uint64_t v12 = *(void *)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001989B4;
  v15[3] = &unk_100648C90;
  id v16 = v9;
  id v13 = *(void (**)(uint64_t, id, void *))(v12 + 16);
  id v14 = v9;
  v13(v12, v7, v15);
}

uint64_t sub_1001989B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001989C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  uint64_t v7 = 1LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( [v6 nextPossibleCloudStoreShareOperationForBackoffType:1 cloudStoreZone:*(void *)(a1 + 40) recipientHandle:*(void *)(a1 + 48)]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v9 timeIntervalSinceDate:v8];
    double v11 = v10;

    if (v11 >= 0.0)
    {
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Not adding share pariticipant %@ to zone %@ the next possible fetch date is in the future %@",  v5,  *(void *)(a1 + 40),  v8));
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      if (a3)
      {
        v17[0] = NSLocalizedDescriptionKey;
        v17[1] = NSLocalizedFailureReasonErrorKey;
        v18[0] = v12;
        v18[1] = v12;
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL));
        *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -4015LL,  v15));
      }

      uint64_t v7 = 0LL;
    }
  }

  return v7;
}

void sub_100198BAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v22 = 0LL;
  int v11 = (*(uint64_t (**)(void))(v10 + 16))();
  id v12 = 0LL;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v15)
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v24 = v8;
      __int16 v25 = 2112;
      id v26 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Adding participant %@ to share %@",  buf,  0x16u);
    }

    [v8 setPermission:*(void *)(a1 + 72)];
    [v7 addParticipant:v8];
    uint64_t v16 = *(void *)(a1 + 64);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_100198DD4;
    v18[3] = &unk_100648D30;
    __int128 v17 = *(void **)(a1 + 40);
    void v18[4] = *(void *)(a1 + 32);
    id v19 = v17;
    id v20 = *(id *)(a1 + 48);
    id v21 = v9;
    (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v7, v18);
  }

  else
  {
    if (v15)
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v24 = v8;
      __int16 v25 = 2112;
      id v26 = v7;
      __int16 v27 = 2112;
      id v28 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Cannot add participant %@ to share %@ with error: %@",  buf,  0x20u);
    }

    (*((void (**)(id, id, id, id))v9 + 2))(v9, v7, v8, v12);
  }
}

void sub_100198DD4(void *a1, void *a2, void *a3)
{
  id v6 = (void *)a1[4];
  id v7 = a3;
  id v8 = a2;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 dataSource]);
  uint64_t v10 = v9;
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  if (a3) {
    [v9 increaseRetryCloudStoreShareOperationBackoffLevelForBackoffType:1 cloudStoreZone:v11 recipientHandle:v12];
  }
  else {
    [v9 deleteRetryCloudStoreShareOperationBackoffForBackoffType:1 cloudStoreZone:v11 recipientHandle:v12];
  }

  uint64_t v13 = a1[7];
  id v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_participantWithRecipientHandle:", a1[6]));
  (*(void (**)(uint64_t, id, id, id))(v13 + 16))(v13, v8, v14, v7);
}

id sub_100198E88(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _fetchParticipantWithRecipientHandle:*(void *)(a1 + 40) cloudStoreZone:*(void *)(a1 + 48) operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64) qualityOfService:*(void *)(a1 + 72) completion:a2];
}

void sub_100198EA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "The token data is not defined for the participant. Attempting to remove and re-add them from the share. %@",  buf,  0xCu);
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100199010;
  v15[3] = &unk_100648DF8;
  uint64_t v12 = *(void *)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v19 = v9;
  uint64_t v13 = *(void (**)(uint64_t, id, id, void *))(v12 + 16);
  id v14 = v9;
  v13(v12, v7, v8, v15);
}

void sub_100199010(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001990F4;
    v7[3] = &unk_100648DD0;
    uint64_t v6 = *(void *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    id v8 = v5;
    id v11 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_1001990F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001991BC;
    v7[3] = &unk_100648DA8;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 48);
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v6 + 16))(v6, v5, a2, v7);
  }

void sub_1001991BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 invitationToken]);
  id v10 = (void *)v9;
  if (v8 || !v9) {
    id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }
  else {
    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }
  v11();
}

void sub_100199258(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 invitationToken]);
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Invitation token data is already defined for participant %@",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001993AC;
    v11[3] = &unk_100648E48;
    uint64_t v10 = *(void *)(a1 + 40);
    id v12 = *(id *)(a1 + 32);
    (*(void (**)(uint64_t, id, id, void *))(v10 + 16))(v10, v5, v6, v11);
  }
}

uint64_t sub_1001993AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001993B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412802;
    id v31 = v5;
    __int16 v32 = 2112;
    id v33 = v3;
    __int16 v34 = 2112;
    uint64_t v35 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Found CKShareParticipant %@ on share %@ for handle %@",  buf,  0x20u);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 invitationToken]);
  if (v9)
  {
    if (v5) {
      goto LABEL_5;
    }
LABEL_12:
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1001997AC;
    v19[3] = &unk_100648EC0;
    uint64_t v16 = *(void *)(a1 + 64);
    id v21 = *(id *)(a1 + 72);
    id v22 = *(id *)(a1 + 88);
    id v20 = v3;
    id v23 = *(id *)(a1 + 80);
    id v24 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v19);

    id v17 = v21;
LABEL_14:

    goto LABEL_15;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shareParticipantWithHandle:*(void *)(a1 + 32)]);
  if (!v11)
  {
    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 userIdentity]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 lookupInfo]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v12 shareParticipantWithLookupInfo:v14]);
  }

  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v11 invitationToken]);
  [v5 setInvitationToken:v15];

  if (!v5) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 invitationToken]);

  if (!v10)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    void v25[2] = sub_1001996F0;
    v25[3] = &unk_100648DD0;
    uint64_t v18 = *(void *)(a1 + 64);
    id v27 = *(id *)(a1 + 72);
    id v28 = *(id *)(a1 + 80);
    id v26 = v3;
    id v29 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v25);

    id v17 = v27;
    goto LABEL_14;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v31 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Participant is already associated with share %@",  buf,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_15:
}

void sub_1001996F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1001997A0;
    v6[3] = &unk_100648E48;
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v5 + 16))(v5, v4, a2, v6);
  }

uint64_t sub_1001997A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001997AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1001998BC;
    v8[3] = &unk_100648E98;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 32);
    id v10 = v5;
    id v13 = *(id *)(a1 + 64);
    (*(void (**)(uint64_t, uint64_t, id, void *))(v7 + 16))(v7, v6, v10, v8);
  }
}

void sub_1001998BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    if (!v8)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_1001999B4;
      v14[3] = &unk_100648E48;
      uint64_t v13 = *(void *)(a1 + 56);
      id v15 = *(id *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v13 + 16))(v13, v11, v12, v14);

      goto LABEL_6;
    }

    id v10 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  v10();
LABEL_6:
}

uint64_t sub_1001999B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001999C0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = CKStringFromParticipantPermission(*(void *)(a1 + 88));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v17 = v4;
    __int16 v18 = 2112;
    uint64_t v19 = v5;
    __int16 v20 = 2112;
    id v21 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Creating share invitation for %@ in %@ with permission %@",  buf,  0x20u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 96);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100199B20;
  v13[3] = &unk_100648F10;
  id v14 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 80);
  [v8 _zoneWideShareForCloudStoreZone:v9 createIfNotExists:1 operationGroupName:v10 operationGroupNameSuffix:v11 qualityOfService:v12 completion:v13];
}

uint64_t sub_100199B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2 || a4) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100199B48(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100199BF4;
  v7[3] = &unk_100648F88;
  void v7[4] = v3;
  id v8 = v2;
  __int128 v6 = *(_OWORD *)(a1 + 56);
  id v5 = (id)v6;
  __int128 v9 = v6;
  objc_msgSend(v3, "_queue_aliasesForRecipientHandle:zoneName:completion:", v8, v4, v7);
}

void sub_100199BF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100199CB0;
  block[3] = &unk_100648F60;
  id v10 = v3;
  id v11 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 48);
  id v6 = (id)v8;
  __int128 v12 = v8;
  id v7 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_100199CB0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Fetched aliases %@ for handle %@",  (uint8_t *)&v7,  0x16u);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), *(id *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100199D84(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 96);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100199E4C;
  v10[3] = &unk_100648FD8;
  uint64_t v7 = *(void *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  __int128 v9 = *(_OWORD *)(a1 + 80);
  id v8 = (id)v9;
  __int128 v12 = v9;
  objc_msgSend( v2,  "_queue_lockShareCreationForRecipientHandle:cloudStoreZone:operationGroupName:operationGroupNameSuffix:qualityOfService:completion:",  v3,  v4,  v5,  v7,  v6,  v10);
}

void sub_100199E4C(void *a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (!v6 || a3)
  {
    (*(void (**)(void))(a1[4] + 16LL))();
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a2);
    (*(void (**)(void))(a1[5] + 16LL))();
  }
}

void sub_10019A360(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Error creating share lock: %@, error: %@",  *(void *)(a1 + 32),  v6));
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    if (!v7) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v8]);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      id v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Error creating share lock: %@, error: %@",  buf,  0x16u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v5, v7);
  }
}

void sub_10019A4E8(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = -[PKCloudStoreUploadItemConfiguration initWithItem:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:",  v6);

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", a1[4]));
  -[PKCloudStoreUploadItemConfiguration setCloudStoreZones:](v7, "setCloudStoreZones:", v8);

  -[PKCloudStoreUploadItemConfiguration setDetectConflicts:](v7, "setDetectConflicts:", 1LL);
  -[PKCloudStoreUploadItemConfiguration setReturnRecords:](v7, "setReturnRecords:", 1LL);
  __int128 v9 = (void *)a1[5];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v7));
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t v13 = a1[8];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10019A620;
  v15[3] = &unk_10063DBF0;
  id v16 = v5;
  id v14 = v5;
  [v9 updateCloudStoreWithLocalItemsWithConfigurations:v10 groupName:v11 groupNameSuffix:v12 qualityOfService:v13 completion:v15];
}

void sub_10019A620(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  id v12 = (id)objc_claimAutoreleasedReturnValue([a3 firstObject]);
  if ([v12 itemType] == (id)8) {
    id v9 = v12;
  }
  else {
    id v9 = 0LL;
  }
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);

  if ([v10 itemType] == (id)8) {
    id v11 = v10;
  }
  else {
    id v11 = 0LL;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10019A6FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v17 = a2;
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10019A834;
  v13[3] = &unk_1006490A0;
  uint64_t v11 = *(void *)(a1 + 72);
  id v15 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 56);
  id v16 = v5;
  id v12 = v5;
  [v6 removeItems:v8 groupName:v9 groupNameSuffix:v10 qualityOfService:v11 completion:v13];
}

uint64_t sub_10019A834(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], a1[6]);
}

void sub_10019A848(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 creationDate]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v10 timeIntervalSinceDate:v11];
    double v13 = fabs(v12);

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v32 = (uint64_t)v8;
      __int16 v33 = 2112;
      uint64_t v34 = v16;
      __int16 v35 = 2048;
      double v36 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Detected a conflicting share lock %@ for requested new share lock %@. The conflicting share lock was created %f seconds ago",  buf,  0x20u);
    }

    if (v13 <= 300.0)
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot create a share lock %@ since there is a conflicting lock %@",  *(void *)(a1 + 32),  v8));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v32 = (uint64_t)v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      uint64_t v20 = *(void *)(a1 + 56);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v19]);
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0LL, v21);
    }

    else
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v32 = 5LL;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Conflicting share lock is older then %ld minutes ago. Deleting the record and trying to take over the zone share",  buf,  0xCu);
      }

      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_10019ABD0;
      v28[3] = &unk_1006490F0;
      uint64_t v17 = *(void *)(a1 + 48);
      id v30 = *(id *)(a1 + 56);
      int8x16_t v27 = *(int8x16_t *)(a1 + 32);
      id v18 = (id)v27.i64[0];
      int8x16_t v29 = vextq_s8(v27, v27, 8uLL);
      (*(void (**)(uint64_t, id, void *))(v17 + 16))(v17, v8, v28);
    }
  }

  else if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Error: could not upload share lock %@. Bailing out.",  *(void *)(a1 + 32)));
    uint64_t v23 = PKLogFacilityTypeGetObject(9LL);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v32 = (uint64_t)v22;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v25 = *(void *)(a1 + 56);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v22]);
    (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0LL, v26);
  }
}

void sub_10019ABD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    if (v8)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is still a conflicting share lock even after adding and removing it %@. Bailing out.",  v8));
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      double v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v20 = v11;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
    }

    else
    {
      if (v7)
      {
        uint64_t v16 = PKLogFacilityTypeGetObject(9LL);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v20 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Successfully removed old share lock and added a new share lock %@ uploadedShareLock.",  buf,  0xCu);
        }

        uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
        goto LABEL_3;
      }

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Error: could not upload share lock %@. Bailing out.",  *(void *)(a1 + 40)));
      uint64_t v18 = PKLogFacilityTypeGetObject(9LL);
      double v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v20 = v11;
        goto LABEL_7;
      }
    }

    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v11]);
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);

    goto LABEL_9;
  }

  uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_3:
  v10();
LABEL_9:
}

id sub_10019AEBC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_queue_cloudStoreZoneInvitationDataForInvitation:toRecipient:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_10019B4A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 cloudStoreRecords]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allRecordsWithRecordType:CKRecordTypeShare]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 anyObject]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_share"));
  if (v5)
  {
    id v10 = v5;
    id v11 = [[PKCloudStoreError alloc] initWithError:v10];
    id v12 = v10;
    if ([v11 isPartialError])
    {
      double v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v11 errorForPartialErrorWithObject:v13]);
      id v15 = (void *)v14;
      if (v14) {
        uint64_t v16 = (void *)v14;
      }
      else {
        uint64_t v16 = v10;
      }
      id v12 = v16;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void **)(a1 + 32);
      int v22 = 138412802;
      uint64_t v23 = v19;
      __int16 v24 = 2112;
      id v25 = v10;
      __int16 v26 = 2112;
      id v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Update of share %@ failed with error %@, returnedError %@",  (uint8_t *)&v22,  0x20u);
    }
  }

  else
  {
    uint64_t v20 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 138412290;
      uint64_t v23 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Successfully updated share %@.",  (uint8_t *)&v22,  0xCu);
    }

    id v12 = 0LL;
  }

  [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 48) error:v12];
  uint64_t v21 = *(void *)(a1 + 56);
  if (v21) {
    (*(void (**)(uint64_t, void *, id))(v21 + 16))(v21, v9, v12);
  }
}

void sub_10019B7CC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching share metadata for urls %@", buf, 0xCu);
  }

  id v5 = objc_alloc(&OBJC_CLASS___CKFetchShareMetadataOperation);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  id v7 = -[CKFetchShareMetadataOperation initWithShareURLs:](v5, "initWithShareURLs:", v6);

  id v8 = objc_alloc_init(&OBJC_CLASS___CKOperationConfiguration);
  -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v8, "setDiscretionaryNetworkBehavior:", 0LL);
  -[CKFetchShareMetadataOperation setConfiguration:](v7, "setConfiguration:", v8);
  -[CKFetchShareMetadataOperation setShareInvitationTokensByShareURL:]( v7,  "setShareInvitationTokensByShareURL:",  *(void *)(a1 + 32));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
  -[CKFetchShareMetadataOperation setGroup:](v7, "setGroup:", v9);
  -[CKFetchShareMetadataOperation setQualityOfService:](v7, "setQualityOfService:", *(void *)(a1 + 72));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pk_arrayByApplyingBlock:", &stru_100649158));

  id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) reportContainerChangeIntervalBeginEventWithType:25 stateName:0 objectNames:v11 operationGroupName:*(void *)(a1 + 40) operationGroupNameSuffix:*(void *)(a1 + 48)]);
  double v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  void v25[2] = sub_10019BA9C;
  v25[3] = &unk_100649180;
  id v26 = *(id *)(a1 + 32);
  uint64_t v14 = v13;
  id v27 = v14;
  -[CKFetchShareMetadataOperation setPerShareMetadataBlock:](v7, "setPerShareMetadataBlock:", v25);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_10019BBA4;
  v19[3] = &unk_100648450;
  id v20 = *(id *)(a1 + 32);
  uint64_t v21 = v14;
  id v15 = *(void **)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 56);
  id v23 = v12;
  id v24 = v15;
  id v16 = v12;
  uint64_t v17 = v14;
  -[CKFetchShareMetadataOperation setFetchShareMetadataCompletionBlock:]( v7,  "setFetchShareMetadataCompletionBlock:",  v19);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 152) container]);
  [v18 addOperation:v7];
}

id sub_10019BA94(id a1, NSURL *a2)
{
  return -[NSURL absoluteString](a2, "absoluteString");
}

void sub_10019BA9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v12;
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error fetching share metadata for urls %@, %@",  (uint8_t *)&v13,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 40) setObject:v8 forKey:v7];
  }
}

void sub_10019BBA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error fetching share metadata for urls %@, %@",  (uint8_t *)&v11,  0x16u);
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    int v11 = 138412290;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed fetching share metadata for urls %@",  (uint8_t *)&v11,  0xCu);
  }

  [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 56) error:v3];
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9)
  {
    id v10 = [*(id *)(a1 + 40) copy];
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v10, v3);
  }
}

void sub_10019BE28(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v9 = (CKUserIdentityLookupInfo *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"A cloud store zone is not defined"));
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v34 = v9;
    goto LABEL_11;
  }

  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v34 = (CKUserIdentityLookupInfo *)v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fetching participant with handle %@",  buf,  0xCu);
    }

    unsigned __int8 v5 = [*(id *)(a1 + 48) containsString:@"@"];
    id v6 = objc_alloc(&OBJC_CLASS___CKUserIdentityLookupInfo);
    uint64_t v7 = *(void *)(a1 + 48);
    if ((v5 & 1) != 0) {
      uint64_t v8 = -[CKUserIdentityLookupInfo initWithEmailAddress:](v6, "initWithEmailAddress:", v7);
    }
    else {
      uint64_t v8 = -[CKUserIdentityLookupInfo initWithPhoneNumber:](v6, "initWithPhoneNumber:", v7);
    }
    uint64_t v9 = v8;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 152) container]);
    __int16 v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v16 = objc_alloc(&OBJC_CLASS___CKFetchShareParticipantsOperation);
    uint64_t v32 = v9;
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v32, 1LL));
    uint64_t v18 = -[CKFetchShareParticipantsOperation initWithUserIdentityLookupInfos:]( v16,  "initWithUserIdentityLookupInfos:",  v17);

    uint64_t v19 = objc_alloc_init(&OBJC_CLASS___CKOperationConfiguration);
    -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v19, "setDiscretionaryNetworkBehavior:", 0LL);
    -[CKOperationConfiguration setContainer:](v19, "setContainer:", v14);
    -[CKFetchShareParticipantsOperation setConfiguration:](v18, "setConfiguration:", v19);
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    -[CKFetchShareParticipantsOperation setGroup:](v18, "setGroup:", v20);
    -[CKFetchShareParticipantsOperation setQualityOfService:](v18, "setQualityOfService:", *(void *)(a1 + 80));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10019C1E4;
    v30[3] = &unk_1006491A8;
    uint64_t v21 = v15;
    id v31 = v21;
    -[CKFetchShareParticipantsOperation setShareParticipantFetchedBlock:](v18, "setShareParticipantFetchedBlock:", v30);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    void v26[2] = sub_10019C1F0;
    v26[3] = &unk_100648100;
    int8x16_t v25 = *(int8x16_t *)(a1 + 32);
    id v22 = (id)v25.i64[0];
    int8x16_t v27 = vextq_s8(v25, v25, 8uLL);
    id v23 = *(id *)(a1 + 72);
    id v28 = v21;
    id v29 = v23;
    id v24 = v21;
    -[CKFetchShareParticipantsOperation setFetchShareParticipantsCompletionBlock:]( v18,  "setFetchShareParticipantsCompletionBlock:",  v26);
    [v14 addOperation:v18];

    goto LABEL_16;
  }

  uint64_t v9 = (CKUserIdentityLookupInfo *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot fetch participany for a nil recipient handle"));
  uint64_t v12 = PKLogFacilityTypeGetObject(9LL);
  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v34 = v9;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

id sub_10019C1E4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10019C1F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  unsigned __int8 v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10019C2B4;
  v7[3] = &unk_10063BA88;
  id v8 = v3;
  id v9 = v4;
  id v11 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10019C2B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v11 = 138412546;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error creating share for zone %@, %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      (*(void (**)(uint64_t, void, void))(v7 + 16))(v7, 0LL, *(void *)(a1 + 32));
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v11 = 138412290;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched participants %@",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) firstObject]);
      (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v10, 0LL);
    }
  }

void sub_10019C510(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneName]);
    if (v3)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
      __int16 v40 = v4;
      BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v40, 1LL));
    }

    else
    {
      BOOL v5 = 0LL;
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) reportContainerChangeIntervalBeginEventWithType:26 stateName:0 objectNames:v5 operationGroupName:*(void *)(a1 + 48) operation GroupNameSuffix:*(void *)(a1 + 56)]);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_10019C8C4;
    v35[3] = &unk_1006491F8;
    uint8_t v35[4] = *(void *)(a1 + 40);
    id v36 = v10;
    id v37 = *(id *)(a1 + 64);
    id v9 = v10;
    int v11 = objc_retainBlock(v35);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 152) databaseForScope:2]);
    __int16 v13 = objc_alloc(&OBJC_CLASS___CKRecordID);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZone]);
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
    id v16 = -[CKRecordID initWithRecordName:zoneID:](v13, "initWithRecordName:zoneID:", CKRecordNameZoneWideShare, v15);

    uint64_t v17 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  5LL,  0LL,  1LL,  *(void *)(a1 + 72),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
    id v38 = v18;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v16));
    id v39 = v19;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    -[PDCloudStoreRecordsRequest setRecordIDsByDatabaseIdentifier:](v17, "setRecordIDsByDatabaseIdentifier:", v20);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    void v26[2] = sub_10019C950;
    v26[3] = &unk_100649270;
    uint64_t v21 = *(void **)(a1 + 32);
    id v27 = *(id *)(a1 + 40);
    id v28 = v21;
    id v29 = v16;
    char v34 = *(_BYTE *)(a1 + 80);
    id v30 = *(id *)(a1 + 48);
    id v22 = *(id *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 72);
    id v32 = v11;
    uint64_t v33 = v23;
    id v31 = v22;
    id v24 = v11;
    int8x16_t v25 = v16;
    [v27 executeRecordsRequest:v17 completion:v26];

    goto LABEL_10;
  }

  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"A cloud store zone is not defined"));
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v42 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 64);
  if (v8)
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v5]);
    (*(void (**)(uint64_t, void, void, id))(v8 + 16))(v8, 0LL, 0LL, v9);
LABEL_10:
  }
}

void sub_10019C8C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a2;
  id v7 = a4;
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v7];
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pk_share"));
    (*(void (**)(uint64_t, void *, uint64_t, id))(v8 + 16))(v8, v9, a3, v7);
  }
}

void sub_10019C950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10019CA6C;
  v16[3] = &unk_100649248;
  id v17 = v6;
  id v18 = v7;
  id v9 = *(id *)(a1 + 48);
  char v26 = *(_BYTE *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 32);
  id v19 = v9;
  uint64_t v20 = v10;
  id v21 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  __int16 v13 = *(void **)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  id v22 = v11;
  uint64_t v25 = v12;
  id v23 = v5;
  id v24 = v13;
  id v14 = v5;
  id v15 = v6;
  dispatch_async(v8, v16);
}

void sub_10019CA6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      id v6 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      id v27 = v6;
      __int16 v28 = 2112;
      uint64_t v29 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to get zone wide share for zone %@ with error %@",  buf,  0x16u);
    }

    id v7 = [[PKCloudStoreError alloc] initWithError:*(void *)(a1 + 32)];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 errorForPartialErrorWithObject:*(void *)(a1 + 48)]);
    unsigned int v9 = [v8 isUnknownItemError];
    if (!v9) {
      goto LABEL_11;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      id v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "The zone share for %@ is missing", buf, 0xCu);
    }

    if (*(_BYTE *)(a1 + 104))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "The zone share does not exist, trying to create it now.",  buf,  2u);
      }

      id v11 = objc_alloc(&OBJC_CLASS___CKShare);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordZone]);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
      id v14 = -[CKShare initWithRecordZoneID:](v11, "initWithRecordZoneID:", v13);

      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = *(void **)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v18 = *(void *)(a1 + 72);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_10019CD94;
      v23[3] = &unk_100649220;
      void v23[4] = v16;
      uint64_t v19 = *(void *)(a1 + 96);
      id v24 = *(id *)(a1 + 88);
      char v25 = v9;
      [v16 _updateShare:v14 cloudStoreZone:v15 operationGroupName:v17 operationGroupNameSuffix:v18 qualityOfService:v19 completion:v23];
    }

    else
    {
LABEL_11:
      (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) cloudStoreRecords]);
      *(_DWORD *)__int128 buf = 138412290;
      id v27 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched zone wide share %@.",  buf,  0xCu);
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) cloudStoreRecords]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 allRecordsWithRecordType:CKRecordTypeShare]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v22 anyObject]);

    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }
}

void sub_10019CD94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10019CE58;
  v11[3] = &unk_100641488;
  id v13 = v6;
  id v14 = v7;
  char v15 = *(_BYTE *)(a1 + 48);
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

uint64_t sub_10019CE58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40));
}

void sub_10019D2B8(uint64_t a1)
{
  group = dispatch_group_create();
  __int128 v84 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v74 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v150 = 0u;
  __int128 v151 = 0u;
  __int128 v152 = 0u;
  __int128 v153 = 0u;
  uint64_t v87 = a1;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v150 objects:v159 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v151;
    do
    {
      for (id i = 0LL; i != v3; id i = (char *)i + 1)
      {
        if (*(void *)v151 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v150 + 1) + 8LL * (void)i);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v87 + 32) objectForKey:v6]);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allObjects]);

        id v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v84, "objectForKey:", v6));
        id v10 = v9;
        if (v9) {
          id v11 = v9;
        }
        else {
          id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        }
        id v12 = v11;

        if ([v8 count])
        {
          uint64_t v13 = 0LL;
          unint64_t v14 = 0LL;
          do
          {
            else {
              uint64_t v15 = 400LL;
            }
            id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subarrayWithRange:", v14, v15));
            -[NSMutableArray addObject:](v12, "addObject:", v16);

            v14 += 400LL;
            v13 -= 400LL;
          }

          while (v14 < (unint64_t)[v8 count]);
        }

        -[NSMutableDictionary setObject:forKey:](v84, "setObject:forKey:", v12, v6);
      }

      id v3 = [v2 countByEnumeratingWithState:&v150 objects:v159 count:16];
    }

    while (v3);
  }

  __int128 v148 = 0u;
  __int128 v149 = 0u;
  __int128 v146 = 0u;
  __int128 v147 = 0u;
  id v17 = *(id *)(v87 + 40);
  id v18 = [v17 countByEnumeratingWithState:&v146 objects:v158 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v147;
    do
    {
      for (j = 0LL; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v147 != v19) {
          objc_enumerationMutation(v17);
        }
        uint64_t v21 = *(void *)(*((void *)&v146 + 1) + 8LL * (void)j);
        id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v87 + 40) objectForKey:v21]);
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 allObjects]);

        id v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v74, "objectForKey:", v21));
        char v25 = v24;
        if (v24) {
          char v26 = v24;
        }
        else {
          char v26 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        }
        id v27 = v26;

        if ([v23 count])
        {
          uint64_t v28 = 0LL;
          unint64_t v29 = 0LL;
          do
          {
            else {
              uint64_t v30 = 400LL;
            }
            id v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "subarrayWithRange:", v29, v30));
            -[NSMutableArray addObject:](v27, "addObject:", v31);

            v29 += 400LL;
            v28 -= 400LL;
          }

          while (v29 < (unint64_t)[v23 count]);
        }

        -[NSMutableDictionary setObject:forKey:](v74, "setObject:forKey:", v27, v21);
      }

      id v18 = [v17 countByEnumeratingWithState:&v146 objects:v158 count:16];
    }

    while (v18);
  }

  v144[0] = 0LL;
  v144[1] = v144;
  v144[2] = 0x3032000000LL;
  v144[3] = sub_10018664C;
  v144[4] = sub_10018665C;
  id v145 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v142[0] = 0LL;
  v142[1] = v142;
  v142[2] = 0x3032000000LL;
  v142[3] = sub_10018664C;
  v142[4] = sub_10018665C;
  uint64_t v143 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v140[0] = 0LL;
  v140[1] = v140;
  v140[2] = 0x3032000000LL;
  v140[3] = sub_10018664C;
  v140[4] = sub_10018665C;
  id v141 = 0LL;
  v138[0] = 0LL;
  v138[1] = v138;
  v138[2] = 0x3032000000LL;
  v138[3] = sub_10018664C;
  v138[4] = sub_10018665C;
  id v139 = 0LL;
  v136[0] = 0LL;
  v136[1] = v136;
  v136[2] = 0x3032000000LL;
  v136[3] = sub_10018664C;
  v136[4] = sub_10018665C;
  id v137 = 0LL;
  __int128 v134 = 0u;
  __int128 v135 = 0u;
  __int128 v132 = 0u;
  __int128 v133 = 0u;
  id obj = v84;
  id v32 = (char *)-[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v132,  v157,  16LL);
  if (v32)
  {
    uint64_t v69 = *(void *)v133;
    do
    {
      uint64_t v33 = 0LL;
      do
      {
        if (*(void *)v133 != v69) {
          objc_enumerationMutation(obj);
        }
        uint64_t v80 = *(void *)(*((void *)&v132 + 1) + 8LL * (void)v33);
        char v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](obj, "objectForKey:", v69));
        __int128 v72 = v33;
        __int128 v130 = 0u;
        __int128 v131 = 0u;
        __int128 v128 = 0u;
        __int128 v129 = 0u;
        id v76 = v34;
        id v35 = [v76 countByEnumeratingWithState:&v128 objects:v156 count:16];
        if (v35)
        {
          uint64_t v78 = *(void *)v129;
          do
          {
            uint64_t v36 = 0LL;
            do
            {
              if (*(void *)v129 != v78) {
                objc_enumerationMutation(v76);
              }
              id v37 = *(void **)(*((void *)&v128 + 1) + 8 * v36);
              id v38 = objc_msgSend(v37, "pk_createArrayBySafelyApplyingBlock:", &stru_1006492B8);
              id v39 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v87 + 48) reportContainerChangeIntervalBeginEventWithType:29 stateName:0 objectNames:v38 operationGroupName :*(void *)(v87 + 56) operationGroupNameSuffix:*(void *)(v87 + 64)]);
              __int16 v40 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation),  "initWithRecordsToSave:recordIDsToDelete:",  v37,  0LL);
              -[CKModifyRecordsOperation setMarkAsParticipantNeedsNewInvitationToken:]( v40,  "setMarkAsParticipantNeedsNewInvitationToken:",  [*(id *)(v87 + 72) markAsParticipantNeedsNewInvitationToken]);
              id v41 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  *(void *)(v87 + 56),  *(void *)(v87 + 64)));
              objc_msgSend(v41, "setQuantity:", objc_msgSend(v37, "count"));
              -[CKModifyRecordsOperation setGroup:](v40, "setGroup:", v41);
              -[CKModifyRecordsOperation setQualityOfService:](v40, "setQualityOfService:", *(void *)(v87 + 88));
              if (*(_BYTE *)(v87 + 96)) {
                BOOL v42 = 1;
              }
              else {
                BOOL v42 = *(_BYTE *)(v87 + 97) != 0;
              }
              -[CKModifyRecordsOperation setSavePolicy:](v40, "setSavePolicy:", !v42);
              id v43 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
              -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v43, "setDiscretionaryNetworkBehavior:", 0LL);
              -[CKModifyRecordsOperation setConfiguration:](v40, "setConfiguration:", v43);
              uint64_t v85 = v36;
              dispatch_group_enter(group);
              uint64_t v44 = *(void *)(v87 + 48);
              id v45 = *(dispatch_group_s **)(v44 + 24);
              uint64_t v46 = *(dispatch_queue_s **)(v44 + 160);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_10019DFD0;
              block[3] = &unk_100649358;
              void block[4] = v44;
              id v116 = v40;
              char v127 = *(_BYTE *)(v87 + 96);
              id v122 = v140;
              id v123 = v138;
              uint64_t v117 = v80;
              id v118 = v39;
              v124 = v136;
              id v125 = v144;
              id v126 = v142;
              id v119 = group;
              id v120 = *(id *)(v87 + 56);
              id v121 = *(id *)(v87 + 64);
              id v47 = v39;
              uint64_t v48 = v40;
              dispatch_group_notify(v45, v46, block);

              uint64_t v36 = v85 + 1;
            }

            while (v35 != (id)(v85 + 1));
            id v35 = [v76 countByEnumeratingWithState:&v128 objects:v156 count:16];
          }

          while (v35);
        }

        uint64_t v33 = v72 + 1;
      }

      while (v72 + 1 != v32);
      id v32 = (char *)-[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v132,  v157,  16LL);
    }

    while (v32);
  }

  __int128 v113 = 0u;
  __int128 v114 = 0u;
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  __int128 v73 = v74;
  id v49 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v73,  "countByEnumeratingWithState:objects:count:",  &v111,  v155,  16LL);
  if (v49)
  {
    uint64_t v70 = *(void *)v112;
    do
    {
      uint64_t v50 = 0LL;
      do
      {
        if (*(void *)v112 != v70) {
          objc_enumerationMutation(v73);
        }
        uint64_t v81 = *(void *)(*((void *)&v111 + 1) + 8 * v50);
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v73, "objectForKey:", v70));
        uint64_t v75 = v50;
        __int128 v109 = 0u;
        __int128 v110 = 0u;
        __int128 v107 = 0u;
        __int128 v108 = 0u;
        id v77 = v51;
        id v52 = [v77 countByEnumeratingWithState:&v107 objects:v154 count:16];
        if (v52)
        {
          uint64_t v79 = *(void *)v108;
          do
          {
            uint64_t v53 = 0LL;
            id v82 = v52;
            do
            {
              if (*(void *)v108 != v79) {
                objc_enumerationMutation(v77);
              }
              id v54 = *(void **)(*((void *)&v107 + 1) + 8 * v53);
              id v55 = objc_msgSend(v54, "pk_createArrayBySafelyApplyingBlock:", &stru_100649378);
              uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v87 + 48) reportContainerChangeIntervalBeginEventWithType:30 stateName:0 objectNames:v55 operationGroupName :*(void *)(v87 + 56) operationGroupNameSuffix:*(void *)(v87 + 64)]);
              id v57 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation),  "initWithRecordsToSave:recordIDsToDelete:",  0LL,  v54);
              uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  *(void *)(v87 + 56),  *(void *)(v87 + 64)));
              objc_msgSend(v58, "setQuantity:", objc_msgSend(v54, "count"));
              -[CKModifyRecordsOperation setGroup:](v57, "setGroup:", v58);
              -[CKModifyRecordsOperation setQualityOfService:](v57, "setQualityOfService:", *(void *)(v87 + 88));
              -[CKModifyRecordsOperation setSavePolicy:](v57, "setSavePolicy:", 1LL);
              id v59 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
              -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v59, "setDiscretionaryNetworkBehavior:", 0LL);
              -[CKModifyRecordsOperation setConfiguration:](v57, "setConfiguration:", v59);
              uint64_t v86 = v53;
              dispatch_group_enter(group);
              uint64_t v60 = *(void *)(v87 + 48);
              __int128 v61 = *(dispatch_group_s **)(v60 + 24);
              __int128 v62 = *(dispatch_queue_s **)(v60 + 160);
              v97[0] = _NSConcreteStackBlock;
              v97[1] = 3221225472LL;
              v97[2] = sub_10019E834;
              v97[3] = &unk_1006493F0;
              v97[4] = v60;
              v98 = v57;
              __int128 v104 = v136;
              id v105 = v144;
              id v99 = v56;
              uint64_t v100 = v81;
              id v106 = v142;
              id v101 = group;
              id v102 = *(id *)(v87 + 56);
              id v103 = *(id *)(v87 + 64);
              id v63 = v56;
              __int128 v64 = v57;
              dispatch_group_notify(v61, v62, v97);

              uint64_t v53 = v86 + 1;
            }

            while (v82 != (id)(v86 + 1));
            id v52 = [v77 countByEnumeratingWithState:&v107 objects:v154 count:16];
          }

          while (v52);
        }

        uint64_t v50 = v75 + 1;
      }

      while ((id)(v75 + 1) != v49);
      id v49 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v73,  "countByEnumeratingWithState:objects:count:",  &v111,  v155,  16LL);
    }

    while (v49);
  }

  uint64_t v65 = *(dispatch_queue_s **)(*(void *)(v87 + 48) + 160LL);
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472LL;
  v88[2] = sub_10019ED7C;
  v88[3] = &unk_100649440;
  id v91 = *(id *)(v87 + 80);
  id v92 = v140;
  id v66 = *(void **)(v87 + 56);
  void v88[4] = *(void *)(v87 + 48);
  id v89 = v66;
  id v67 = *(id *)(v87 + 64);
  uint64_t v68 = *(void *)(v87 + 88);
  id v90 = v67;
  id v93 = v144;
  id v94 = v142;
  id v95 = v136;
  uint64_t v96 = v68;
  dispatch_group_notify(group, v65, v88);

  _Block_object_dispose(v136, 8);
  _Block_object_dispose(v138, 8);

  _Block_object_dispose(v140, 8);
  _Block_object_dispose(v142, 8);

  _Block_object_dispose(v144, 8);
}

void sub_10019DEE0(_Unwind_Exception *a1)
{
}

id sub_10019DF94(id a1, CKRecord *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](a2, "recordID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 recordName]);

  return v3;
}

void sub_10019DFD0(uint64_t a1)
{
  id v10 = _NSConcreteStackBlock;
  id v12 = sub_10019E0F8;
  uint64_t v13 = &unk_100649330;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  char v23 = *(_BYTE *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(void **)(a1 + 56);
  uint64_t v14 = v2;
  uint64_t v15 = v4;
  uint64_t v21 = *(void *)(a1 + 104);
  uint64_t v11 = 3221225472LL;
  __int128 v20 = *(_OWORD *)(a1 + 88);
  id v16 = v5;
  __int128 v22 = *(_OWORD *)(a1 + 112);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  [v3 setModifyRecordsCompletionBlock:&v10];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 152),  "databaseForIdentifier:",  *(void *)(a1 + 48),  v10,  v11,  v12,  v13,  v14,  v15));
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 database]);
  objc_msgSend(v8, "_queue_addOperation:forDatabase:", v7, v9);
}

void sub_10019E0F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019E24C;
  block[3] = &unk_100649308;
  char v26 = *(_BYTE *)(a1 + 120);
  id v15 = v9;
  __int128 v23 = *(_OWORD *)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 96);
  int8x16_t v16 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  id v17 = *(id *)(a1 + 48);
  id v18 = v7;
  id v19 = v8;
  __int128 v25 = *(_OWORD *)(a1 + 104);
  id v20 = *(id *)(a1 + 56);
  id v21 = *(id *)(a1 + 64);
  id v22 = *(id *)(a1 + 72);
  id v11 = v8;
  id v12 = v7;
  id v13 = v9;
  dispatch_async(v10, block);
}

void sub_10019E24C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144) && [*(id *)(a1 + 32) code] == (id)2)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    id v5 = [v4 countByEnumeratingWithState:&v60 objects:v64 count:16];
    if (!v5) {
      goto LABEL_23;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v61;
    while (1)
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v61 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v60 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v9]);
        if ([v10 code] == (id)14)
        {
          id v11 = *(void **)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
          if (!v11)
          {
            id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            uint64_t v13 = *(void *)(*(void *)(a1 + 104) + 8LL);
            uint64_t v14 = *(void **)(v13 + 40);
            *(void *)(v13 + 40) = v12;

            id v11 = *(void **)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
          }

          id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:*(void *)(a1 + 40)]);

          if (!v15)
          {
            int8x16_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
            [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setObject:v16 forKeyedSubscript:*(void *)(a1 + 40)];
          }

          uint64_t v17 = *(void *)(a1 + 104);
        }

        else
        {
          if ([v10 code] != (id)11) {
            goto LABEL_21;
          }
          id v18 = *(void **)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
          if (!v18)
          {
            id v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            uint64_t v20 = *(void *)(*(void *)(a1 + 112) + 8LL);
            id v21 = *(void **)(v20 + 40);
            *(void *)(v20 + 40) = v19;

            id v18 = *(void **)(*(void *)(*(void *)(a1 + 112) + 8LL) + 40LL);
          }

          id v22 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:*(void *)(a1 + 40)]);

          if (!v22)
          {
            __int128 v23 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
            [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) setObject:v23 forKeyedSubscript:*(void *)(a1 + 40)];
          }

          uint64_t v17 = *(void *)(a1 + 112);
        }

        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(v17 + 8) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)]);
        [v24 addObject:v9];

LABEL_21:
      }

      id v6 = [v4 countByEnumeratingWithState:&v60 objects:v64 count:16];
      if (!v6)
      {
LABEL_23:

        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)]);
        char v26 = (char *)[v25 count];
        id v27 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)]);
        uint64_t v28 = &v26[(void)[v27 count]];

        if (v28 != [v3 count])
        {
          uint64_t v29 = *(void *)(*(void *)(a1 + 120) + 8LL);
          id v32 = *(void **)(v29 + 40);
          uint64_t v30 = (id *)(v29 + 40);
          id v31 = v32;
          if (!v32) {
            id v31 = *(void **)(a1 + 32);
          }
          objc_storeStrong(v30, v31);
        }

        goto LABEL_31;
      }
    }
  }

  uint64_t v33 = *(void *)(*(void *)(a1 + 120) + 8LL);
  uint64_t v36 = *(void **)(v33 + 40);
  char v34 = (id *)(v33 + 40);
  id v35 = v36;
  if (!v36) {
    id v35 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v34, v35);
LABEL_31:
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_10019E6B0;
  v51[3] = &unk_1006492E0;
  id v37 = *(void **)(a1 + 56);
  void v51[4] = *(void *)(a1 + 48);
  id v52 = v37;
  id v53 = *(id *)(a1 + 32);
  id v38 = *(id *)(a1 + 64);
  uint64_t v58 = *(void *)(a1 + 128);
  uint64_t v39 = *(void *)(a1 + 40);
  id v54 = v38;
  uint64_t v55 = v39;
  id v40 = *(id *)(a1 + 72);
  uint64_t v41 = *(void *)(a1 + 136);
  id v56 = v40;
  uint64_t v59 = v41;
  id v57 = *(id *)(a1 + 80);
  BOOL v42 = objc_retainBlock(v51);
  id v43 = v42;
  uint64_t v44 = *(void *)(a1 + 32);
  if (v44)
  {
    uint64_t v46 = *(void *)(a1 + 40);
    id v45 = *(void **)(a1 + 48);
    uint64_t v48 = *(void *)(a1 + 88);
    uint64_t v47 = *(void *)(a1 + 96);
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472LL;
    v49[2] = sub_10019E820;
    v49[3] = &unk_100639688;
    uint64_t v50 = v42;
    objc_msgSend( v45,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v44,  0,  v46,  v48,  v47,  v49);
  }

  else
  {
    ((void (*)(void *))v42[2])(v42);
  }
}

void sub_10019E6B0(uint64_t a1)
{
  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) objectForKey:*(void *)(a1 + 64)]);
    id v3 = v2;
    if (v2) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    id v11 = v4;

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 56)));
    -[NSMutableSet unionSet:](v11, "unionSet:", v5);

    [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setObject:v11 forKey:*(void *)(a1 + 64)];
  }

  else
  {
    id v11 = 0LL;
  }

  if ([*(id *)(a1 + 72) count])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) objectForKey:*(void *)(a1 + 64)]);
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    uint64_t v9 = v8;

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 72)));
    -[NSMutableSet unionSet:](v9, "unionSet:", v10);

    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setObject:v9 forKey:*(void *)(a1 + 64)];
    id v11 = v9;
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24LL));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_10019E820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10019E82C(id a1, CKRecordID *a2)
{
  return -[CKRecordID recordName](a2, "recordName");
}

void sub_10019E834(uint64_t a1)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10019E94C;
  v11[3] = &unk_1006493C8;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 88);
  void v11[4] = *(void *)(a1 + 32);
  uint64_t v17 = v3;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = *(void **)(a1 + 64);
  id v12 = v4;
  uint64_t v13 = v5;
  __int128 v18 = *(_OWORD *)(a1 + 96);
  id v14 = v6;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  [v2 setModifyRecordsCompletionBlock:v11];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) databaseForIdentifier:*(void *)(a1 + 56)]);
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 database]);
  objc_msgSend(v9, "_queue_addOperation:forDatabase:", v8, v10);
}

void sub_10019E94C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v17[0] = _NSConcreteStackBlock;
  void v17[2] = sub_10019EA80;
  v17[3] = &unk_1006493A0;
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v12 = *(dispatch_queue_s **)(v10 + 160);
  v17[1] = 3221225472LL;
  id v18 = v9;
  uint64_t v19 = v10;
  id v20 = v11;
  id v21 = v7;
  uint64_t v13 = *(void **)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 48);
  id v23 = v8;
  __int128 v28 = *(_OWORD *)(a1 + 88);
  id v24 = v13;
  id v25 = *(id *)(a1 + 64);
  id v26 = *(id *)(a1 + 72);
  id v14 = v8;
  id v15 = v7;
  id v16 = v9;
  dispatch_async(v12, v17);
}

void sub_10019EA80(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8LL);
  uint64_t v5 = *(void **)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10019EC00;
  v21[3] = &unk_1006492E0;
  id v6 = *(void **)(a1 + 48);
  void v21[4] = *(void *)(a1 + 40);
  id v22 = v6;
  id v23 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 56);
  uint64_t v28 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 64);
  id v9 = *(void **)(a1 + 72);
  id v24 = v7;
  uint64_t v25 = v8;
  id v10 = v9;
  uint64_t v11 = *(void *)(a1 + 120);
  id v26 = v10;
  uint64_t v29 = v11;
  id v27 = *(id *)(a1 + 80);
  id v12 = objc_retainBlock(v21);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 32);
  if (v14)
  {
    id v15 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_10019ED70;
    v19[3] = &unk_100639688;
    id v20 = v12;
    objc_msgSend( v15,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v14,  0,  v16,  v18,  v17,  v19);
  }

  else
  {
    ((void (*)(void *))v12[2])(v12);
  }
}

void sub_10019EC00(uint64_t a1)
{
  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) objectForKey:*(void *)(a1 + 64)]);
    uint64_t v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    uint64_t v11 = v4;

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 56)));
    -[NSMutableSet unionSet:](v11, "unionSet:", v5);

    [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setObject:v11 forKey:*(void *)(a1 + 64)];
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  if ([*(id *)(a1 + 72) count])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) objectForKey:*(void *)(a1 + 64)]);
    id v7 = v6;
    if (v6) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    id v9 = v8;

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 72)));
    -[NSMutableSet unionSet:](v9, "unionSet:", v10);

    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setObject:v9 forKey:*(void *)(a1 + 64)];
    uint64_t v11 = v9;
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24LL));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_10019ED70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10019ED7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Scheduling a follow up download of conflicting records to fault any missing properties.",  buf,  2u);
      }

      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      id v6 = *(void **)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 96);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_10019EEC8;
      v10[3] = &unk_100649418;
      uint64_t v9 = *(void *)(a1 + 48);
      id v11 = *(id *)(a1 + 56);
      __int128 v12 = *(_OWORD *)(a1 + 72);
      [v6 fetchRecordsWithRecordIDsByDatabaseIdentifier:v5 operationGroupName:v7 operationGroupNameSuffix:v9 qualityOfService:v8 completion:v10];
    }

    else
    {
      (*(void (**)(uint64_t, void, void, void, void))(v2 + 16))( v2,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  0LL,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
    }
  }

uint64_t sub_10019EEC8(void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL),  a2,  a3);
}

void sub_10019F2C8(uint64_t a1)
{
  uint64_t v53 = 0LL;
  id v54 = &v53;
  uint64_t v55 = 0x2020000000LL;
  uint64_t v56 = *(void *)(a1 + 104);
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___CKQueryOperation);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:",  *(void *)(a1 + 32)));
  -[CKQueryOperation setGroup:](v3, "setGroup:", v4);

  -[CKQueryOperation setQualityOfService:](v3, "setQualityOfService:", *(void *)(a1 + 112));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
  -[CKQueryOperation setZoneID:](v3, "setZoneID:", v5);

  if (v54[3]) {
    NSUInteger v6 = v54[3];
  }
  else {
    NSUInteger v6 = CKQueryOperationMaximumResults;
  }
  v54[3] = v6;
  -[CKQueryOperation setResultsLimit:](v3, "setResultsLimit:");
  uint64_t v7 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
  -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v7, "setDiscretionaryNetworkBehavior:", 0LL);
  -[CKQueryOperation setConfiguration:](v3, "setConfiguration:", v7);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v59 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetching records with cursor: %@", buf, 0xCu);
    }

    -[CKQueryOperation setCursor:](v3, "setCursor:", *(void *)(a1 + 48));
LABEL_12:
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) predicate]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 description]);
    uint64_t v17 = v16;
    if (v16) {
      id v18 = v16;
    }
    else {
      id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) description]);
    }
    uint64_t v19 = v18;

    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneName]);

    if (v21)
    {
      id v57 = v21;
      id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v57, 1LL));
    }

    else
    {
      id v22 = 0LL;
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) reportContainerChangeIntervalBeginEventWithType:31 stateName:v19 objectNames:v22 operationGroupName:*(void *)(a1 + 32) operation GroupNameSuffix:*(void *)(a1 + 72)]);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_10019F7F0;
    v48[3] = &unk_1006484A0;
    v48[4] = *(void *)(a1 + 64);
    id v24 = v2;
    id v49 = v24;
    id v25 = v19;
    id v50 = v25;
    id v51 = *(id *)(a1 + 32);
    id v52 = *(id *)(a1 + 72);
    -[CKQueryOperation setRecordFetchedBlock:](v3, "setRecordFetchedBlock:", v48);
    id v32 = _NSConcreteStackBlock;
    uint64_t v33 = 3221225472LL;
    char v34 = sub_10019FA14;
    id v35 = &unk_100649508;
    uint64_t v36 = *(void *)(a1 + 64);
    id v37 = v24;
    id v38 = *(id *)(a1 + 80);
    id v44 = *(id *)(a1 + 96);
    id v26 = v23;
    id v39 = v26;
    id v40 = *(id *)(a1 + 56);
    id v41 = *(id *)(a1 + 40);
    uint64_t v46 = &v53;
    id v42 = *(id *)(a1 + 32);
    id v27 = *(id *)(a1 + 72);
    uint64_t v28 = *(void *)(a1 + 112);
    id v43 = v27;
    uint64_t v47 = v28;
    id v45 = *(id *)(a1 + 88);
    -[CKQueryOperation setQueryCompletionBlock:](v3, "setQueryCompletionBlock:", &v32);
    uint64_t v29 = *(void **)(a1 + 64);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "database", v32, v33, v34, v35, v36));
    objc_msgSend(v29, "_queue_addOperation:forDatabase:", v3, v30);

    goto LABEL_19;
  }

  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v14)
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v59 = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Fetching records with query: %@", buf, 0xCu);
    }

    -[CKQueryOperation setQuery:](v3, "setQuery:", *(void *)(a1 + 56));
    goto LABEL_12;
  }

  if (v14)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error: cannot fetch records with no query or cursor defined",  buf,  2u);
  }

  uint64_t v31 = *(void *)(a1 + 88);
  if (v31) {
    (*(void (**)(uint64_t, void))(v31 + 16))(v31, 0LL);
  }
LABEL_19:

  _Block_object_dispose(&v53, 8);
}

void sub_10019F7B8(_Unwind_Exception *a1)
{
}

void sub_10019F7F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10019F8CC;
  v7[3] = &unk_100640CE0;
  id v8 = v4;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10019F8CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Fetched recordID from query %@",  v2));

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v9 = v3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  [v6 reportContainerChangeSignpostEventType:31 stateName:v7 objectNames:v8 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 64) operationGroupNameSuffix:*(void *)(a1 + 72)];
}

void sub_10019FA14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10019FB88;
  v17[3] = &unk_1006494E0;
  id v18 = v7;
  id v19 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 32);
  id v28 = v9;
  uint64_t v20 = v10;
  id v21 = *(id *)(a1 + 56);
  id v22 = v5;
  id v23 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 112);
  id v24 = v11;
  uint64_t v30 = v12;
  id v25 = *(id *)(a1 + 80);
  id v13 = *(id *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 120);
  id v26 = v13;
  uint64_t v31 = v14;
  id v29 = *(id *)(a1 + 104);
  id v27 = v6;
  id v15 = v6;
  id v16 = v5;
  dispatch_async(v8, v17);
}

void sub_10019FB88(uint64_t a1)
{
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10019FE58;
  v24[3] = &unk_1006494B8;
  id v25 = *(id *)(a1 + 32);
  id v26 = *(id *)(a1 + 40);
  id v2 = *(id *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void **)(a1 + 56);
  id v34 = v2;
  uint64_t v27 = v3;
  id v28 = v4;
  id v29 = *(id *)(a1 + 64);
  id v30 = *(id *)(a1 + 72);
  id v5 = *(id *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 128);
  id v31 = v5;
  uint64_t v36 = v6;
  id v32 = *(id *)(a1 + 88);
  id v7 = *(id *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 136);
  id v33 = v7;
  uint64_t v37 = v8;
  id v35 = *(id *)(a1 + 120);
  id v9 = objc_retainBlock(v24);
  uint64_t v10 = (void (**)(void, void))v9;
  if (*(void *)(a1 + 104))
  {
    id v11 = [[PKCloudStoreError alloc] initWithError:*(void *)(a1 + 104)];
    if ([v11 isUnknownItemError])
    {
      v10[2](v10, 0LL);
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 104);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v39 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Error fetch items %@", buf, 0xCu);
      }

      id v15 = *(void **)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 104);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) zoneID]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      uint64_t v19 = *(void *)(a1 + 88);
      uint64_t v20 = *(void *)(a1 + 96);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_1001A01E4;
      v21[3] = &unk_100641B28;
      id v23 = v10;
      id v22 = *(id *)(a1 + 104);
      objc_msgSend( v15,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v16,  v17,  v18,  v19,  v20,  v21);
    }
  }

  else
  {
    ((void (*)(void *, void))v9[2])(v9, 0LL);
  }
}

void sub_10019FE58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v5, v6);
  }

  uint64_t v7 = *(void *)(a1 + 104);
  id v8 = -[NSMutableDictionary copy](v4, "copy");
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1001A0018;
  v18[3] = &unk_100649490;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = *(void **)(a1 + 56);
  id v19 = v9;
  uint64_t v20 = v10;
  id v21 = v11;
  id v22 = v3;
  id v23 = *(id *)(a1 + 64);
  id v24 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 120);
  id v25 = v12;
  uint64_t v31 = v13;
  id v26 = *(id *)(a1 + 88);
  id v14 = *(id *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 128);
  id v27 = v14;
  uint64_t v32 = v15;
  id v28 = *(id *)(a1 + 40);
  id v29 = *(id *)(a1 + 104);
  id v30 = *(id *)(a1 + 112);
  uint64_t v16 = *(void (**)(uint64_t, id, void *))(v7 + 16);
  id v17 = v3;
  v16(v7, v8, v18);
}

uint64_t (**sub_1001A0018(uint64_t a1, int a2))(id, void)
{
  id v4 = [*(id *)(a1 + 32) count];
  [*(id *)(a1 + 32) removeAllObjects];
  [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5 && a2)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) zoneID]);
      uint64_t v11 = *(void *)(a1 + 64);
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      id v18 = v10;
      __int16 v19 = 2048;
      id v20 = v4;
      __int16 v21 = 2112;
      uint64_t v22 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Fetching of records not complete for query %@, in zone %@. Fetched %ld in batch.  Continuing fetching records with cursor: %@",  buf,  0x2Au);
    }

    return (uint64_t (**)(id, void))[*(id *)(a1 + 40) _fetchRecordsWithQuery:0 cursor:*(void *)(a1 + 64) batchLimit:*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) operationGroupName:*(void *)(a1 + 88) operationG roupNameSuffix:*(void *)(a1 + 96) qualityOfService:*(void *)(a1 + 136) zone:*(void *)(a1 + 80) containerDatabase:*(void *)(a1 + 104) batchHandler:*(void *)(a1 + 112) completion:*(void *)(a1 + 120)];
  }

  else
  {
    if (v8)
    {
      uint64_t v13 = *(void *)(a1 + 72);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) zoneID]);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v14;
      __int16 v19 = 2048;
      id v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Fetching records complete for query %@. In zone %@. Records fetched: %ld",  buf,  0x20u);
    }

    id result = *(uint64_t (***)(id, void))(a1 + 120);
    if (result) {
      return (uint64_t (**)(id, void))result[2](result, *(void *)(a1 + 56));
    }
  }

  return result;
}

uint64_t sub_1001A01E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001A0378(uint64_t a1)
{
  group = dispatch_group_create();
  v57[0] = 0LL;
  v57[1] = v57;
  v57[2] = 0x3032000000LL;
  v57[3] = sub_10018664C;
  v57[4] = sub_10018665C;
  uint64_t v58 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v55[0] = 0LL;
  v55[1] = v55;
  v55[2] = 0x3032000000LL;
  v55[3] = sub_10018664C;
  v55[4] = sub_10018665C;
  uint64_t v56 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v53[0] = 0LL;
  v53[1] = v53;
  v53[2] = 0x3032000000LL;
  v53[3] = sub_10018664C;
  void v53[4] = sub_10018665C;
  id v54 = 0LL;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  id obj = *(id *)(a1 + 32);
  id v31 = [obj countByEnumeratingWithState:&v49 objects:v61 count:16];
  if (v31)
  {
    uint64_t v29 = *(void *)v50;
    uint64_t v28 = PKCloudStoreOperationGroupResetSync;
    uint64_t v27 = PKCloudStoreOperationGroupInitialSetup;
    do
    {
      for (id i = 0LL; i != v31; id i = (char *)i + 1)
      {
        if (*(void *)v50 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v2 = *(void *)(*((void *)&v49 + 1) + 8LL * (void)i);
        id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v2]);
        id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v2]);
        id v4 = objc_alloc(&OBJC_CLASS___CKModifySubscriptionsOperation);
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v34 allObjects]);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
        uint64_t v7 = -[CKModifySubscriptionsOperation initWithSubscriptionsToSave:subscriptionIDsToDelete:]( v4,  "initWithSubscriptionsToSave:subscriptionIDsToDelete:",  v5,  v6);

        if ([v3 count]) {
          uint64_t v8 = v28;
        }
        else {
          uint64_t v8 = v27;
        }
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  v8,  *(void *)(a1 + 56)));
        -[CKModifySubscriptionsOperation setGroup:](v7, "setGroup:", v32);
        -[CKModifySubscriptionsOperation setQualityOfService:](v7, "setQualityOfService:", 17LL);
        uint64_t v9 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
        -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v9, "setDiscretionaryNetworkBehavior:", 0LL);
        -[CKModifySubscriptionsOperation setConfiguration:](v7, "setConfiguration:", v9);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v34 allObjects]);
        id v11 = objc_msgSend(v10, "pk_createArrayBySafelyApplyingBlock:", &stru_100649570);

        if ([v11 count]) {
          id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) reportContainerChangeIntervalBeginEventWithType:10 stateName:0 objectNames:v11 operationGroupName:0 ope rationGroupNameSuffix:*(void *)(a1 + 56)]);
        }
        else {
          id v12 = 0LL;
        }
        if ([v3 count])
        {
          uint64_t v13 = *(void **)(a1 + 64);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( [v13 reportContainerChangeIntervalBeginEventWithType:11 stateName:0 objectNames:v14 operationGroupName:0 ope rationGroupNameSuffix:*(void *)(a1 + 56)]);
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v60 = v34;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Creating subscriptions %@", buf, 0xCu);
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v60 = v3;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Deleting subscriptions %@", buf, 0xCu);
        }

        dispatch_group_enter(group);
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472LL;
        v40[2] = sub_1001A099C;
        v40[3] = &unk_1006495E8;
        v40[4] = *(void *)(a1 + 64);
        uint64_t v46 = v53;
        id v18 = v12;
        id v41 = v18;
        id v19 = v15;
        id v42 = v19;
        id v43 = group;
        uint64_t v44 = v2;
        uint64_t v47 = v57;
        uint64_t v48 = v55;
        id v45 = *(id *)(a1 + 56);
        -[CKModifySubscriptionsOperation setModifySubscriptionsCompletionBlock:]( v7,  "setModifySubscriptionsCompletionBlock:",  v40);
        uint64_t v20 = a1;
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 152) databaseForIdentifier:v2]);
        uint64_t v22 = *(void **)(a1 + 64);
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 database]);
        objc_msgSend(v22, "_queue_addOperation:forDatabase:", v7, v23);

        a1 = v20;
      }

      id v31 = [obj countByEnumeratingWithState:&v49 objects:v61 count:16];
    }

    while (v31);
  }

  id v24 = *(void **)(a1 + 72);
  id v25 = *(dispatch_queue_s **)(*(void *)(a1 + 64) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A0DB0;
  block[3] = &unk_100642930;
  id v36 = v24;
  uint64_t v37 = v57;
  id v38 = v55;
  uint64_t v39 = v53;
  dispatch_group_notify(group, v25, block);

  _Block_object_dispose(v53, 8);
  _Block_object_dispose(v55, 8);

  _Block_object_dispose(v57, 8);
}

void sub_1001A0928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_1001A0994(id a1, CKSubscription *a2)
{
  return -[CKSubscription subscriptionID](a2, "subscriptionID");
}

void sub_1001A099C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void **)(a1 + 40);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1001A0AD4;
  v18[3] = &unk_1006495C0;
  uint64_t v28 = *(void *)(a1 + 80);
  id v19 = v9;
  id v12 = v10;
  uint64_t v13 = *(void *)(a1 + 32);
  id v20 = v12;
  uint64_t v21 = v13;
  id v22 = *(id *)(a1 + 48);
  id v23 = *(id *)(a1 + 56);
  id v24 = v7;
  id v14 = *(void **)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 64);
  id v26 = v8;
  __int128 v29 = *(_OWORD *)(a1 + 88);
  id v27 = v14;
  id v15 = v8;
  id v16 = v7;
  id v17 = v9;
  dispatch_async(v11, v18);
}

void sub_1001A0AD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8LL);
  uint64_t v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v6 error:*(void *)(a1 + 32)];
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v7 error:*(void *)(a1 + 32)];
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1001A0C48;
  v21[3] = &unk_100649598;
  id v22 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  uint64_t v26 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void **)(a1 + 88);
  id v23 = v8;
  uint64_t v24 = v9;
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 120);
  id v25 = v11;
  uint64_t v27 = v12;
  uint64_t v13 = objc_retainBlock(v21);
  id v14 = v13;
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(a1 + 96);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1001A0DA4;
    v19[3] = &unk_100639688;
    id v20 = v13;
    objc_msgSend( v16,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v15,  0,  v17,  0,  v18,  v19);
  }

  else
  {
    ((void (*)(void *))v13[2])(v13);
  }
}

void sub_1001A0C48(uint64_t a1)
{
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) objectForKey:*(void *)(a1 + 48)]);
    id v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    uint64_t v12 = v4;

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
    -[NSMutableSet unionSet:](v12, "unionSet:", v5);

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v12 forKey:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) objectForKey:*(void *)(a1 + 48)]);
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    uint64_t v10 = v8;

    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 56)));
    -[NSMutableSet unionSet:](v10, "unionSet:", v11);

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v10 forKey:*(void *)(a1 + 48)];
    uint64_t v9 = v10;
  }

  else
  {
    uint64_t v9 = v12;
  }
}

uint64_t sub_1001A0DA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A0DB0(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))( result,  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL),  *(void *)(*(void *)(a1[7] + 8LL) + 40LL));
  }
  return result;
}

void sub_1001A114C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1001A116C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v8 = *(void **)(v5 + 40);
  uint64_t v6 = (id *)(v5 + 40);
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = a3;
  }
  objc_storeStrong(v6, v9);
  id v10 = a3;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) subscriptionIdentifiersForDatabaseZoneIDs:*(void *)(a1 + 40)]);
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1001A1248;
  v16[3] = &unk_100649610;
  __int128 v15 = *(_OWORD *)(a1 + 56);
  id v14 = (id)v15;
  __int128 v17 = v15;
  [v12 _deleteSubscriptions:v11 operationGroupNameSuffix:v13 completion:v16];
}

void sub_1001A1248(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v5 + 40);
  uint64_t v6 = (id *)(v5 + 40);
  uint64_t v7 = v8;
  id v10 = v4;
  if (v8) {
    id v4 = v7;
  }
  objc_storeStrong(v6, v4);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
}

void sub_1001A14C8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v13[0] = _NSConcreteStackBlock;
  void v13[2] = sub_1001A1588;
  v13[3] = &unk_10063BA88;
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v13[1] = 3221225472LL;
  id v14 = v7;
  id v15 = v6;
  id v10 = v8;
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v10;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v9, v13);
}

uint64_t sub_1001A1588(uint64_t a1)
{
  if (*(void *)(a1 + 32) || ![*(id *)(a1 + 40) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Unable to delete record zones due to error: %@",  buf,  0xCu);
    }

    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      id v6 = *(uint64_t (**)(void))(result + 16);
      return v6();
    }
  }

  else
  {
    uint64_t v7 = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully deleted zones %@", buf, 0xCu);
    }

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001A1704;
    v11[3] = &unk_10063A468;
    id v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 48);
    [v10 enumerateKeysAndObjectsUsingBlock:v11];
    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      id v6 = *(uint64_t (**)(void))(result + 16);
      return v6();
    }
  }

  return result;
}

id sub_1001A1704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveZoneIDs:a3];
}

void sub_1001A1888(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v13[0] = _NSConcreteStackBlock;
  void v13[2] = sub_1001A1948;
  v13[3] = &unk_10063BA88;
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v13[1] = 3221225472LL;
  id v14 = v7;
  id v15 = v6;
  id v10 = v8;
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v10;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v9, v13);
}

uint64_t sub_1001A1948(uint64_t a1)
{
  if (*(void *)(a1 + 32) || ![*(id *)(a1 + 40) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to delete zone subscriptions with error %@",  buf,  0xCu);
    }

    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      id v6 = *(uint64_t (**)(void))(result + 16);
      return v6();
    }
  }

  else
  {
    uint64_t v7 = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully deleted zone subscriptions %@",  buf,  0xCu);
    }

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001A1AC4;
    v11[3] = &unk_10063A468;
    id v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 48);
    [v10 enumerateKeysAndObjectsUsingBlock:v11];
    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      id v6 = *(uint64_t (**)(void))(result + 16);
      return v6();
    }
  }

  return result;
}

id sub_1001A1AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveSubscriptionIdentifiers:a3];
}

void sub_1001A1C5C(id *a1)
{
  group = dispatch_group_create();
  uint64_t v72 = 0LL;
  __int128 v73 = &v72;
  uint64_t v74 = 0x3032000000LL;
  uint64_t v75 = sub_10018664C;
  id v76 = sub_10018665C;
  id v77 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v66 = 0LL;
  id v67 = &v66;
  uint64_t v68 = 0x3032000000LL;
  uint64_t v69 = sub_10018664C;
  uint64_t v70 = sub_10018665C;
  __int128 v71 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v64[0] = 0LL;
  v64[1] = v64;
  v64[2] = 0x3032000000LL;
  v64[3] = sub_10018664C;
  v64[4] = sub_10018665C;
  id v65 = 0LL;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  id obj = a1[4];
  id v2 = [obj countByEnumeratingWithState:&v60 objects:v82 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v61;
    uint64_t v36 = PKCloudStoreOperationGroupInitialSetup;
    uint64_t v37 = PKCloudStoreOperationGroupResetSync;
    *(void *)&__int128 v3 = 138412546LL;
    __int128 v35 = v3;
    do
    {
      for (id i = 0LL; i != v2; id i = (char *)i + 1)
      {
        if (*(void *)v61 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v60 + 1) + 8LL * (void)i);
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKey:", v6, v35));
        id v45 = (void *)objc_claimAutoreleasedReturnValue([a1[6] objectForKey:v6]);
        id v43 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[7] + 19) databaseForIdentifier:v6]);
        if ([v43 scope] == (id)3)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(9LL);
          id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = v35;
            uint64_t v79 = v44;
            __int16 v80 = 2112;
            uint64_t v81 = v45;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Attempting to save or delete zones in a shared container. Zones trying to create %@. Zones trying to delete %@.",  buf,  0x16u);
          }

          if ([v44 count])
          {
            uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)v73[5] objectForKey:v6]);
            id v10 = v9;
            if (v9) {
              id v11 = v9;
            }
            else {
              id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
            }
            id v14 = v11;

            -[NSMutableSet unionSet:](v14, "unionSet:", v44);
            [(id)v73[5] setObject:v14 forKey:v6];
          }

          else
          {
            id v14 = 0LL;
          }

          if ([v45 count])
          {
            id v31 = (void *)objc_claimAutoreleasedReturnValue([(id)v67[5] objectForKey:v6]);
            uint64_t v32 = v31;
            if (v31) {
              id v33 = v31;
            }
            else {
              id v33 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
            }
            id v30 = v33;

            -[NSMutableSet unionSet:](v30, "unionSet:", v45);
            [(id)v67[5] setObject:v30 forKey:v6];
          }

          else
          {
            id v30 = v14;
          }
        }

        else
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v44 allObjects]);
          id v42 = (NSMutableSet *)objc_msgSend(v12, "pk_createArrayBySafelyApplyingBlock:", &stru_100649678);

          if (-[NSMutableSet count](v42, "count")) {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [a1[7] reportContainerChangeIntervalBeginEventWithType:7 stateName:0 objectNames:v42 operationGroupName:0 o perationGroupNameSuffix:a1[8]]);
          }
          else {
            uint64_t v13 = 0LL;
          }
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v45 allObjects]);
          id v41 = objc_msgSend(v15, "pk_createArrayBySafelyApplyingBlock:", &stru_1006496B8);

          if ([v41 count]) {
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [a1[7] reportContainerChangeIntervalBeginEventWithType:8 stateName:0 objectNames:v41 operationGroupName:0 o perationGroupNameSuffix:a1[8]]);
          }
          else {
            uint64_t v16 = 0LL;
          }
          id v17 = objc_alloc(&OBJC_CLASS___CKModifyRecordZonesOperation);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v44 allObjects]);
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v45 allObjects]);
          id v20 = -[CKModifyRecordZonesOperation initWithRecordZonesToSave:recordZoneIDsToDelete:]( v17,  "initWithRecordZonesToSave:recordZoneIDsToDelete:",  v18,  v19);

          if ([v45 count]) {
            uint64_t v21 = v37;
          }
          else {
            uint64_t v21 = v36;
          }
          id v40 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  v21,  a1[8]));
          -[CKModifyRecordZonesOperation setGroup:](v20, "setGroup:", v40);
          -[CKModifyRecordZonesOperation setQualityOfService:](v20, "setQualityOfService:", 17LL);
          uint64_t v22 = v4;
          id v23 = v2;
          uint64_t v24 = a1;
          id v25 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
          -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v25, "setDiscretionaryNetworkBehavior:", 0LL);
          -[CKModifyRecordZonesOperation setConfiguration:](v20, "setConfiguration:", v25);
          dispatch_group_enter(group);
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472LL;
          v51[2] = sub_1001A23A0;
          v51[3] = &unk_1006495E8;
          void v51[4] = a1[7];
          id v57 = v64;
          id v26 = v13;
          id v52 = v26;
          id v27 = v16;
          id v53 = v27;
          id v54 = group;
          uint64_t v55 = v6;
          uint64_t v58 = &v72;
          uint64_t v59 = &v66;
          id v56 = a1[8];
          -[CKModifyRecordZonesOperation setModifyRecordZonesCompletionBlock:]( v20,  "setModifyRecordZonesCompletionBlock:",  v51);
          id v28 = a1[7];
          __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v43 database]);
          objc_msgSend(v28, "_queue_addOperation:forDatabase:", v20, v29);

          a1 = v24;
          id v2 = v23;
          uint64_t v4 = v22;

          id v30 = v42;
        }
      }

      id v2 = [obj countByEnumeratingWithState:&v60 objects:v82 count:16];
    }

    while (v2);
  }

  id v34 = (dispatch_queue_s *)*((void *)a1[7] + 20);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A2838;
  block[3] = &unk_100642930;
  id v47 = a1[9];
  uint64_t v48 = &v72;
  __int128 v49 = &v66;
  __int128 v50 = v64;
  dispatch_group_notify(group, v34, block);

  _Block_object_dispose(v64, 8);
  _Block_object_dispose(&v66, 8);

  _Block_object_dispose(&v72, 8);
}

void sub_1001A22E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_1001A235C(id a1, CKRecordZone *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordZone zoneID](a2, "zoneID"));
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneName]);

  return v3;
}

id sub_1001A2398(id a1, CKRecordZoneID *a2)
{
  return -[CKRecordZoneID zoneName](a2, "zoneName");
}

void sub_1001A23A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1001A24D8;
  v18[3] = &unk_1006495C0;
  uint64_t v28 = *(void *)(a1 + 80);
  id v19 = v9;
  id v12 = v10;
  uint64_t v13 = *(void *)(a1 + 32);
  id v20 = v12;
  uint64_t v21 = v13;
  id v22 = *(id *)(a1 + 48);
  id v23 = *(id *)(a1 + 56);
  id v24 = v7;
  id v14 = *(void **)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 64);
  id v26 = v8;
  __int128 v29 = *(_OWORD *)(a1 + 88);
  id v27 = v14;
  id v15 = v8;
  id v16 = v7;
  id v17 = v9;
  dispatch_async(v11, v18);
}

void sub_1001A24D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8LL);
  uint64_t v5 = *(void **)(v2 + 40);
  __int128 v3 = (id *)(v2 + 40);
  uint64_t v4 = v5;
  if (!v5) {
    uint64_t v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v6 error:*(void *)(a1 + 32)];
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v7 error:*(void *)(a1 + 32)];
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_1001A26D0;
  v24[3] = &unk_100649598;
  id v25 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  uint64_t v29 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 80);
  id v10 = *(void **)(a1 + 88);
  id v26 = v8;
  uint64_t v27 = v9;
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 120);
  id v28 = v11;
  uint64_t v30 = v12;
  uint64_t v13 = objc_retainBlock(v24);
  id v14 = v13;
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v32 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Could not create or delete zones with error %@",  buf,  0xCu);
    }

    uint64_t v18 = *(void **)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 96);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1001A282C;
    v22[3] = &unk_100639688;
    id v23 = v14;
    objc_msgSend( v18,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v19,  0,  v20,  0,  v21,  v22);
  }

  else
  {
    ((void (*)(void *))v13[2])(v13);
  }
}

void sub_1001A26D0(uint64_t a1)
{
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) objectForKey:*(void *)(a1 + 48)]);
    __int128 v3 = v2;
    if (v2) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    uint64_t v12 = v4;

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
    -[NSMutableSet unionSet:](v12, "unionSet:", v5);

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v12 forKey:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) objectForKey:*(void *)(a1 + 48)]);
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    }
    id v10 = v8;

    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 56)));
    -[NSMutableSet unionSet:](v10, "unionSet:", v11);

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v10 forKey:*(void *)(a1 + 48)];
    uint64_t v9 = v10;
  }

  else
  {
    uint64_t v9 = v12;
  }
}

uint64_t sub_1001A282C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A2838(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    id v4 = [*(id *)(*(void *)(a1[5] + 8) + 40) copy];
    id v3 = [*(id *)(*(void *)(a1[6] + 8) + 40) copy];
    (*(void (**)(uint64_t, id, id, void))(v1 + 16))( v1,  v4,  v3,  *(void *)(*(void *)(a1[7] + 8LL) + 40LL));
  }

void sub_1001A2C00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001A2C18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1001A2CF4;
  v12[3] = &unk_100649708;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 160);
  v12[1] = 3221225472LL;
  id v13 = v6;
  uint64_t v14 = v7;
  uint64_t v18 = *(void *)(a1 + 56);
  id v15 = v5;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_1001A2CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  uint64_t v7 = *(void **)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001A2DB8;
  v11[3] = &unk_1006496E0;
  uint64_t v15 = *(void *)(a1 + 72);
  id v9 = v6;
  uint64_t v10 = *(void *)(a1 + 40);
  id v12 = v9;
  uint64_t v13 = v10;
  id v14 = *(id *)(a1 + 64);
  objc_msgSend( v7,  "_queue_createZonesByDatabaseIdentifier:shouldFetchData:operationGroupNameSuffix:completion:",  v9,  0,  v8,  v11);
}

void sub_1001A2DB8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v8 = *(void **)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  uint64_t v7 = v8;
  if (v8) {
    id v9 = v7;
  }
  else {
    id v9 = v4;
  }
  objc_storeStrong(v6, v9);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1001A2F30;
  v20[3] = &unk_10063A468;
  uint64_t v10 = *(void **)(a1 + 32);
  void v20[4] = *(void *)(a1 + 40);
  [v10 enumerateKeysAndObjectsUsingBlock:v20];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 152) databaseForScope:3]);
  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 152) zonesThatNeedToBeCreated]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v13]);
    id v15 = [v14 count];

    if (v15)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v19 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "The device is missing a zone share. Ensuring zone integrity now.",  (uint8_t *)&v19,  2u);
      }

      [*(id *)(a1 + 40) ensureZoneShareIntegrity];
    }
  }

  uint64_t v18 = *(void *)(a1 + 48);
  if (v18) {
    (*(void (**)(uint64_t, void))(v18 + 16))( v18,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
  }
}

id sub_1001A2F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didCreateZones:a3];
}

void sub_1001A300C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Fetching all Record Zones in database %@",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v5 = dispatch_group_create();
  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v44 = 0x3032000000LL;
  id v45 = sub_10018664C;
  uint64_t v46 = sub_10018665C;
  id v47 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v39[0] = 0LL;
  v39[1] = v39;
  v39[2] = 0x3032000000LL;
  v39[3] = sub_10018664C;
  v39[4] = sub_10018665C;
  id v40 = 0LL;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = *(id *)(a1 + 32);
  id v6 = [obj countByEnumeratingWithState:&v35 objects:v42 count:16];
  if (v6)
  {
    uint64_t v23 = *(void *)v36;
    uint64_t v22 = PKCloudStoreOperationGroupInitialSetup;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v36 != v23) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(a1 + 40);
        uint64_t v41 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)v7);
        uint64_t v8 = v41;
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v41, 1LL));
        id v11 = (void *)objc_claimAutoreleasedReturnValue( [v9 reportContainerChangeIntervalBeginEventWithType:32 stateName:0 objectNames:v10 operationGroupName:0 opera tionGroupNameSuffix:*(void *)(a1 + 48)]);

        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[CKFetchRecordZonesOperation fetchAllRecordZonesOperation]( &OBJC_CLASS___CKFetchRecordZonesOperation,  "fetchAllRecordZonesOperation"));
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  v22,  *(void *)(a1 + 48)));
        [v12 setGroup:v13];

        [v12 setQualityOfService:17];
        id v14 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
        -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v14, "setDiscretionaryNetworkBehavior:", 0LL);
        [v12 setConfiguration:v14];
        dispatch_group_enter(v5);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        v28[2] = sub_1001A3444;
        v28[3] = &unk_1006497A8;
        void v28[4] = *(void *)(a1 + 40);
        id v33 = v39;
        id v15 = v11;
        id v29 = v15;
        id v16 = v5;
        p___int128 buf = &buf;
        uint64_t v30 = v16;
        uint64_t v31 = v8;
        id v32 = *(id *)(a1 + 48);
        [v12 setFetchRecordZonesCompletionBlock:v28];
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 152) databaseForIdentifier:v8]);
        uint64_t v18 = *(void **)(a1 + 40);
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 database]);
        objc_msgSend(v18, "_queue_addOperation:forDatabase:", v12, v19);

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v6 != v7);
      id v6 = [obj countByEnumeratingWithState:&v35 objects:v42 count:16];
    }

    while (v6);
  }

  uint64_t v20 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A39C4;
  block[3] = &unk_100648798;
  id v25 = *(id *)(a1 + 56);
  id v26 = &buf;
  uint64_t v27 = v39;
  dispatch_group_notify(v5, v20, block);

  _Block_object_dispose(v39, 8);
  _Block_object_dispose(&buf, 8);
}

void sub_1001A3400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40)
{
}

void sub_1001A3444(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001A353C;
  block[3] = &unk_100649780;
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 160);
  block[1] = 3221225472LL;
  id v15 = v6;
  uint64_t v16 = v7;
  id v17 = v8;
  id v18 = *(id *)(a1 + 48);
  id v19 = v5;
  uint64_t v10 = *(void *)(a1 + 56);
  id v11 = *(void **)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 80);
  uint64_t v20 = v10;
  id v21 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v9, block);
}

void sub_1001A353C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  uint64_t v4 = v5;
  if (!v5) {
    uint64_t v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1001A3718;
  v21[3] = &unk_100649758;
  id v6 = *(void **)(a1 + 48);
  void v21[4] = *(void *)(a1 + 40);
  id v22 = v6;
  id v23 = *(id *)(a1 + 32);
  id v24 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 72);
  id v25 = v7;
  uint64_t v26 = v9;
  uint64_t v27 = v8;
  uint64_t v10 = objc_retainBlock(v21);
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Could not fetch record zones with error %@",  buf,  0xCu);
    }

    uint64_t v16 = *(void *)(a1 + 32);
    id v15 = *(void **)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 80);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1001A39B8;
    v19[3] = &unk_100639688;
    id v20 = v11;
    objc_msgSend( v15,  "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:",  v16,  0,  v18,  0,  v17,  v19);
  }

  else
  {
    ((void (*)(void *))v10[2])(v10);
  }
}

void sub_1001A3718(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 64);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sucessfully fetched record zones %@", buf, 0xCu);
  }

  id v5 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  id v6 = objc_alloc(&OBJC_CLASS___NSSet);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) allValues]);
  uint64_t v8 = -[NSSet initWithArray:](v6, "initWithArray:", v7);
  [v5 setObject:v8 forKey:*(void *)(a1 + 72)];

  uint64_t v9 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  CKRecordZoneDefaultName,  CKCurrentUserDefaultName);
  id v10 = [*(id *)(a1 + 64) mutableCopy];
  [v10 removeObjectForKey:v9];
  id v11 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 allValues]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v12));
  [v11 setObject:v13 forKey:*(void *)(a1 + 72)];

  id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v15 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_1001A396C;
  v19[3] = &unk_10063A468;
  uint64_t v16 = v14;
  id v20 = v16;
  [v15 enumerateKeysAndObjectsUsingBlock:v19];
  if (-[NSMutableSet count](v16, "count"))
  {
    uint64_t v17 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v16, "allObjects"));
    [v17 removeObjectsForKeys:v18];
  }
}

void sub_1001A396C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (![a3 count]) {
    [*(id *)(a1 + 32) addObject:v5];
  }
}

uint64_t sub_1001A39B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001A39C4(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_1001A3B28(uint64_t a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  v13[0] = 0LL;
  v13[1] = v13;
  void v13[2] = 0x3032000000LL;
  v13[3] = sub_10018664C;
  void v13[4] = sub_10018665C;
  id v14 = 0LL;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001A3C78;
  v9[3] = &unk_100649820;
  id v3 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  uint64_t v4 = v2;
  id v11 = v4;
  uint64_t v12 = v13;
  [v3 enumerateKeysAndObjectsUsingBlock:v9];
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 160LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001A4164;
  v6[3] = &unk_1006412D0;
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = v13;
  dispatch_group_notify(v4, v5, v6);

  _Block_object_dispose(v13, 8);
}

void sub_1001A3C60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1001A3C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v30 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Fetching all subscriptions in database %@",  buf,  0xCu);
  }

  id v6 = *(void **)(a1 + 32);
  id v28 = v3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [v6 reportContainerChangeIntervalBeginEventWithType:12 stateName:0 objectNames:v7 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 40)]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[CKFetchSubscriptionsOperation fetchAllSubscriptionsOperation]( &OBJC_CLASS___CKFetchSubscriptionsOperation,  "fetchAllSubscriptionsOperation"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CKOperationGroup pk_operationGroupWithName:suffix:]( &OBJC_CLASS___CKOperationGroup,  "pk_operationGroupWithName:suffix:",  PKCloudStoreOperationGroupInitialSetup,  *(void *)(a1 + 40)));
  [v9 setGroup:v10];

  [v9 setQualityOfService:17];
  id v11 = objc_opt_new(&OBJC_CLASS___CKOperationConfiguration);
  -[CKOperationConfiguration setDiscretionaryNetworkBehavior:](v11, "setDiscretionaryNetworkBehavior:", 0LL);
  [v9 setConfiguration:v11];
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 3221225472LL;
  id v21 = sub_1001A3ED4;
  uint64_t v22 = &unk_1006497F8;
  uint64_t v23 = *(void *)(a1 + 32);
  id v24 = v8;
  id v12 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  id v26 = v3;
  uint64_t v27 = v13;
  id v25 = v12;
  id v14 = v3;
  id v15 = v8;
  [v9 setFetchSubscriptionCompletionBlock:&v19];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 152),  "databaseForIdentifier:",  v14,  v19,  v20,  v21,  v22,  v23));
  uint64_t v17 = *(void **)(a1 + 32);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 database]);
  objc_msgSend(v17, "_queue_addOperation:forDatabase:", v9, v18);
}

void sub_1001A3ED4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A3FC4;
  block[3] = &unk_1006497D0;
  void block[4] = v7;
  id v15 = v8;
  id v16 = v6;
  id v17 = *(id *)(a1 + 48);
  id v18 = v5;
  __int128 v13 = *(_OWORD *)(a1 + 56);
  id v10 = (id)v13;
  __int128 v19 = v13;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v9, block);
}

void sub_1001A3FC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  uint64_t v4 = v5;
  if (!v5) {
    uint64_t v4 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v3, v4);
  id v6 = *(void **)(a1 + 64);
  if (v6 && !*(void *)(a1 + 48))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched subscriptions %@",  (uint8_t *)&v14,  0xCu);
    }

    id v12 = *(void **)(*(void *)(a1 + 32) + 152LL);
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) allValues]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
    [v12 containerDatabaseIdentifier:v13 didCreateSubscriptions:v9];
    goto LABEL_10;
  }

  uint64_t v7 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) debugDescription]);
    int v14 = 138412290;
    id v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch subscriptions with error %@",  (uint8_t *)&v14,  0xCu);
LABEL_10:
  }
}

uint64_t sub_1001A4164(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

id sub_1001A43F8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:",  *(void *)(*(void *)(a1 + 32) + 176),  *(void *)(a1 + 40),  *(void *)(a1 + 56) - 1,  *(void *)(a1 + 48));
}

void sub_1001A4884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A48DC;
  block[3] = &unk_100639300;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_1001A48DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136LL));
  [WeakRetained cloudStoreContainerShouldScheduleSetupActivity:*(void *)(a1 + 32)];
}

id sub_1001A4D78(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_cloudStoreInitializationTimerFired");
}

void sub_1001A5E58(uint64_t a1)
{
  uint64_t v2 = *(double **)(a1 + 32);
  if (v2[4] == 0.0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _descriptors]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    id v5[2] = sub_1001A5F04;
    v5[3] = &unk_100649950;
    uint64_t v4 = *(void **)(a1 + 40);
    void v5[4] = *(void *)(a1 + 32);
    id v6 = v4;
    +[CCFullSetDonation fullSetDonationWithItemType:descriptors:completion:]( &OBJC_CLASS___CCFullSetDonation,  "fullSetDonationWithItemType:descriptors:completion:",  46120LL,  v3,  v5);
  }

void sub_1001A5F04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v12[2] = sub_1001A5FC4;
  v12[3] = &unk_10063BA88;
  v12[1] = 3221225472LL;
  id v13 = v6;
  id v14 = v5;
  id v9 = v7;
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_1001A5FC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 || (uint64_t v5 = *(void *)(a1 + 40)) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Donation rejected with error: %@ ", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001A60E4;
    v7[3] = &unk_1006424D0;
    id v6 = *(void **)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    [v6 _performFullSetDonation:v5 withCompletion:v7];
  }

uint64_t sub_1001A60E4(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

void sub_1001A6298(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passUniqueIDs]);
  id v3 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  v21[0] = 0LL;
  v21[1] = v21;
  v21[2] = 0x3032000000LL;
  v21[3] = sub_1001A6504;
  void v21[4] = sub_1001A6514;
  id v22 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v18;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v6);
        id v8 = objc_autoreleasePoolPush();
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_1001A651C;
        v16[3] = &unk_10063B5A8;
        void v16[4] = *(void *)(a1 + 32);
        void v16[5] = v7;
        v16[6] = v21;
        [v3 addOperation:v16];
        objc_autoreleasePoolPop(v8);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
    }

    while (v4);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001A6644;
  v13[3] = &unk_1006499A0;
  uint64_t v10 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v10;
  uint64_t v15 = v21;
  id v11 = [v3 evaluateWithInput:v9 completion:v13];

  _Block_object_dispose(v21, 8);
}

void sub_1001A64D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_1001A6504(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001A6514(uint64_t a1)
{
}

void sub_1001A651C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) passWithUniqueIdentifier:a1[5]]);
  id v9 = (void *)a1[4];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001A65F0;
  v13[3] = &unk_10063B638;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 removeSignalForPass:v8 completion:v13];
}

void sub_1001A65F0(uint64_t a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001A6644(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = (void *)a1[5];
  id v4 = *(dispatch_queue_s **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A66C0;
  block[3] = &unk_100649978;
  void block[4] = v2;
  id v5 = v3;
  uint64_t v6 = a1[6];
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, block);
}

uint64_t sub_1001A66C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001A6824(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _descriptors]);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  unint64_t v5 = (unint64_t)*(double *)(v3 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001A691C;
  v7[3] = &unk_1006499F0;
  uint64_t v6 = *(void *)(a1 + 64);
  void v7[4] = v3;
  uint64_t v11 = v6;
  id v8 = v4;
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  +[CCIncrementalSetDonation incrementalSetDonationWithItemType:descriptors:version:validity:completion:]( &OBJC_CLASS___CCIncrementalSetDonation,  "incrementalSetDonationWithItemType:descriptors:version:validity:completion:",  46120LL,  v2,  v5,  @"passes",  v7);
}

void sub_1001A691C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001A6A10;
  block[3] = &unk_1006499C8;
  uint64_t v9 = *(void *)(a1 + 64);
  id v15 = v6;
  uint64_t v21 = v9;
  block[1] = 3221225472LL;
  id v16 = v7;
  id v20 = *(id *)(a1 + 56);
  id v17 = v5;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  id v18 = v10;
  uint64_t v19 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v8, block);
}

void sub_1001A6A10(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 80);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 134218498;
      uint64_t v26 = v5;
      __int16 v27 = 2112;
      id v28 = v6;
      __int16 v29 = 2112;
      uint64_t v30 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Unable to start set donation action :%ld for pass: %@ error: %@",  buf,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    return;
  }

  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___CCIncrementalSetDonation, a2);
  if ((objc_opt_isKindOfClass(v8, v9) & 1) == 0)
  {
    [*(id *)(a1 + 64) _performFullSetDonation:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 72)];
    return;
  }

  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 80);
  if (v12 == 1)
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    id v23 = 0LL;
    [v11 removeItemWithSourceItemIdentifier:v20 error:&v23];
    id v14 = v23;

    if (v14)
    {
LABEL_9:
      uint64_t v15 = PKLogFacilityTypeGetObject(6LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 80);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
        uint64_t v19 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v26 = v17;
        __int16 v27 = 2112;
        id v28 = v18;
        __int16 v29 = 2112;
        uint64_t v30 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Unable to perform set donation action :%ld for pass: %@ error: %@",  buf,  0x20u);
      }

      [v11 cancel];
      goto LABEL_15;
    }
  }

  else if (!v12)
  {
    uint64_t v13 = *(void *)(a1 + 56);
    id v24 = 0LL;
    [v10 addOrUpdateItem:v13 error:&v24];
    id v14 = v24;
    if (v14) {
      goto LABEL_9;
    }
  }

  id v22 = 0LL;
  [v11 finish:&v22];
  id v14 = v22;
  if (v14) {
LABEL_15:
  }
    objc_msgSend(*(id *)(a1 + 64), "_queue_updateVersion:", (double)(unint64_t)objc_msgSend(v11, "priorVersion"));
  uint64_t v21 = *(void *)(a1 + 72);
  if (v21) {
    (*(void (**)(uint64_t, id))(v21 + 16))(v21, v14);
  }
}

void sub_1001A6D6C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passUniqueIDs]);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)v26;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_autoreleasePoolPush();
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passWithUniqueIdentifier:v8]);
        uint64_t v11 = *(void **)(a1 + 32);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 allSemantics]);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 _createPassInstanceForPassUniqueID:v8 semantics:v12]);

        if (v13)
        {
          id v14 = *(void **)(a1 + 40);
          id v24 = v5;
          [v14 registerItem:v13 error:&v24];
          id v15 = v24;

          if (v15)
          {
            uint64_t Object = PKLogFacilityTypeGetObject(6LL);
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v30 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Donation of item unable to finish with error: %@ ",  buf,  0xCu);
            }

            uint64_t v5 = v15;
          }

          else
          {
            uint64_t v5 = 0LL;
          }
        }

        objc_autoreleasePoolPop(v9);
      }

      id v4 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }

    while (v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v18 = *(void **)(a1 + 40);
  id v23 = v5;
  [v18 finish:&v23];
  id v19 = v23;

  if (v19)
  {
    uint64_t v20 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v30 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Donation was unable to finish with error: %@ ",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) cancel];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001A7AA8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(a1 + 40) + 64LL));
  if (v1 == *(_DWORD *)(a1 + 48))
  {
    id v3 = (unsigned int *)(*(void *)(a1 + 40) + 60LL);
    do
    {
      if (__ldaxr(v3))
      {
        __clrex();
        return;
      }
    }

    while (__stlxr(1u, v3));
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting ubiquity manager", buf, 2u);
    }

    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___ACAccountStore);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[ACAccountStore aa_primaryAppleAccount](v7, "aa_primaryAppleAccount"));
    if (!v8)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No primary apple account", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", 0);
      goto LABEL_50;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 ubiquityIdentityToken]);

    if (!v10)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ubiquity is not responding", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", 0);
      goto LABEL_49;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 URLForUbiquityContainerIdentifier:PKUbiquityContainerIdentifier]);
    uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue([v11 URLByAppendingPathComponent:@"UbiquitousCards" isDirectory:1]);

    if (!v12)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Ubiquity container does not exist or is not available (URL is nil)",  buf,  2u);
      }

      objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", 0);
      goto LABEL_48;
    }

    unsigned int v13 = [v9 isUbiquitousItemAtURL:v12];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = @"is NOT";
      if (v13) {
        id v14 = @"is";
      }
      *(_DWORD *)__int128 buf = 138412546;
      id v24 = v12;
      __int16 v25 = 2112;
      __int128 v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ %@ ubiquitous", buf, 0x16u);
    }

    if (v13)
    {
      [*(id *)(a1 + 40) setUbiquitousURL:v12];
      PDWatchFSEventsAtURL(v12);
    }

    unsigned int v15 = [v8 isEnabledForDataclass:ACAccountDataclassUbiquity];
    unsigned int v16 = [v8 isEnabledForDataclass:ACAccountDataclassShoebox];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = @"OFF";
      if (v15) {
        uint64_t v17 = @"ON";
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ubiquity switch: %@", buf, 0xCu);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = @"OFF";
      if (v16) {
        id v18 = @"ON";
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v18;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Passbook switch: %@", buf, 0xCu);
    }

    if ((v15 & v16) == 1)
    {
      if (v13)
      {
LABEL_28:
        objc_msgSend(*(id *)(a1 + 40), "_queue_startAlreadyUbiquitous");
        uint64_t v19 = 2LL;
LABEL_43:
        id v22 = 0LL;
        unsigned __int8 v20 = [v9 startDownloadingUbiquitousItemAtURL:v12 error:&v22];
        uint64_t v21 = (__CFString *)v22;
        if ((v20 & 1) == 0)
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v24 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "startDownloadingUbiquitousItemAtURL failed: %@",  buf,  0xCu);
          }
        }

        objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", v19);

LABEL_48:
LABEL_49:

LABEL_50:
        return;
      }

      PKSharedCacheRemoveObjectForKey(PKSharedCacheLastEventIdentifierKey);
      if (objc_msgSend(*(id *)(a1 + 40), "_queue_startNotYetUbiquitousWithDestinationURL:", v12))
      {
        [*(id *)(a1 + 40) setUbiquitousURL:v12];
        PDWatchFSEventsAtURL(v12);
        goto LABEL_28;
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v24 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@ did not become ubiquitous, abort",  buf,  0xCu);
      }
    }

    uint64_t v19 = 0LL;
    goto LABEL_43;
  }

void PDWatchFSEventsAtURL(void *a1)
{
  unsigned int v1 = (void *)objc_claimAutoreleasedReturnValue([a1 path]);
  PKSharedCacheSetObjectForKey(v1, PKSharedCacheLastWatchedURLKey);
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v3 = v1;
  xpc_dictionary_set_string(v2, "Path", (const char *)[v3 UTF8String]);
  uint64_t Object = PKLogFacilityTypeGetObject(1LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "registering to wake on fsevents for URL: %@",  (uint8_t *)&v6,  0xCu);
  }

  xpc_set_event("com.apple.fsevents.matching", "Card Repository", v2);
}

id sub_1001A829C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

void sub_1001A82A8(uint64_t a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ubiquitousURL]);
  if (v3
    && (int BoolForKey = PKSharedCacheGetBoolForKey(PKSharedCacheIgnoringUbiquityKey, v2), v3, !BoolForKey))
  {
    if ([*(id *)(a1 + 56) supportsSyncing])
    {
      *(void *)&__int128 v32 = 0LL;
      *((void *)&v32 + 1) = &v32;
      uint64_t v33 = 0x2020000000LL;
      char v34 = 0;
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(a1 + 48);
      id v10 = *(dispatch_queue_s **)(v8 + 16);
      void v25[2] = sub_1001A85EC;
      v25[3] = &unk_100643E78;
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      void v25[4] = v8;
      id v26 = v9;
      __int128 v27 = &v32;
      dispatch_sync(v10, v25);
      int v11 = *(unsigned __int8 *)(*((void *)&v32 + 1) + 24LL);
      uint64_t Object = PKLogFacilityTypeGetObject(1LL);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v14)
        {
          uint64_t v15 = *(void *)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v31 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Aborting because there is a newer pending update for pass: %@",  buf,  0xCu);
        }
      }

      else
      {
        if (v14)
        {
          uint64_t v19 = *(void *)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v31 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "inserting ubiquitous version of pass: %@",  buf,  0xCu);
        }

        unsigned int v13 = -[NSFileCoordinator initWithFilePresenter:]( objc_alloc(&OBJC_CLASS___NSFileCoordinator),  "initWithFilePresenter:",  *(void *)(a1 + 40));
        unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ubiquitousURL]);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_1001A8634;
        v22[3] = &unk_100649A68;
        uint64_t v21 = *(void **)(a1 + 48);
        void v22[4] = *(void *)(a1 + 40);
        id v23 = v21;
        id v24 = *(id *)(a1 + 56);
        -[os_log_s coordinateWritingItemAtURL:options:error:byAccessor:]( v13,  "coordinateWritingItemAtURL:options:error:byAccessor:",  v20,  8LL,  0LL,  v22);
      }

      _Block_object_dispose(&v32, 8);
    }

    else
    {
      uint64_t v16 = PKLogFacilityTypeGetObject(1LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
        LODWORD(v32) = 138412290;
        *(void *)((char *)&v32 + 4) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Invalid attempt to insert non-ubiquitous version of pass: %@",  (uint8_t *)&v32,  0xCu);
      }
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(void **)(a1 + 48);
    id v7 = *(dispatch_queue_s **)(v5 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001A85E0;
    block[3] = &unk_1006392B0;
    void block[4] = v5;
    id v29 = v6;
    dispatch_sync(v7, block);
  }

void sub_1001A85C0(_Unwind_Exception *a1)
{
}

id sub_1001A85E0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_1001A85EC(void *a1)
{
  id result = [*(id *)(a1[4] + 40) countForObject:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = result != 0LL;
  return result;
}

void sub_1001A8634(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ubiquitousURL]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 path]);
  unsigned __int8 v7 = [v4 fileExistsAtPath:v6];

  if ((v7 & 1) != 0)
  {
    id v8 = 0LL;
    goto LABEL_4;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ubiquitousURL]);
  id v17 = 0LL;
  unsigned __int8 v11 = [v9 createDirectoryAtURL:v10 withIntermediateDirectories:0 attributes:0 error:&v17];
  id v8 = v17;

  if ((v11 & 1) != 0)
  {
LABEL_4:
    if ([*(id *)(a1 + 32) passWillBeDeleted:*(void *)(a1 + 40)])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(1LL);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v14 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v19 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Pass %@ no longer exist, don't copy it",  buf,  0xCu);
      }
    }

    else
    {
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _urlForCardWithUniqueID:*(void *)(a1 + 40) relativeToDirectoryURL:v3]);
      sub_1001A884C(*(void **)(a1 + 48), v13);
    }

    goto LABEL_10;
  }

  uint64_t v15 = PKLogFacilityTypeGetObject(1LL);
  unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v8 localizedDescription]);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v19 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to recreate cards directory: %@",  buf,  0xCu);
  }

void sub_1001A884C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(1LL);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v16 = v7;
    __int16 v17 = 2112;
    id v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "copying %@ to %@", buf, 0x16u);
  }

  if (v4)
  {
    id v8 = objc_alloc(&OBJC_CLASS___NSFileWrapper);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 serializedFileWrapper]);
    id v10 = -[NSFileWrapper initWithSerializedRepresentation:](v8, "initWithSerializedRepresentation:", v9);

    id v14 = 0LL;
    unsigned __int8 v11 = -[NSFileWrapper writeToURL:options:originalContentsURL:error:]( v10,  "writeToURL:options:originalContentsURL:error:",  v4,  1LL,  0LL,  &v14);
    id v12 = v14;
    if ((v11 & 1) == 0)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 localizedDescription]);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v16 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to write pass: %@", buf, 0xCu);
      }
    }
  }
}

id sub_1001A8AB4(void *a1)
{
  id result = [*(id *)(a1[4] + 48) countForObject:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = result != 0LL;
  return result;
}

id sub_1001A8B6C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 40)];
}

void sub_1001A8C74(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ubiquitousURL]);
  if (v2
    && (id v4 = (void *)v2,
        int BoolForKey = PKSharedCacheGetBoolForKey(PKSharedCacheIgnoringUbiquityKey, v3),
        v4,
        !BoolForKey))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v25 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "removing ubiquitous version of pass: %@",  buf,  0xCu);
    }

    id v12 = -[NSFileCoordinator initWithFilePresenter:]( objc_alloc(&OBJC_CLASS___NSFileCoordinator),  "initWithFilePresenter:",  *(void *)(a1 + 40));
    unsigned int v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 ubiquitousURL]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 _urlForCardWithUniqueID:v14 relativeToDirectoryURL:v15]);

    -[NSFileCoordinator coordinateWritingItemAtURL:options:error:byAccessor:]( v12,  "coordinateWritingItemAtURL:options:error:byAccessor:",  v16,  1LL,  0LL,  &stru_100649AA8);
    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = *(void **)(a1 + 48);
    uint64_t v19 = *(dispatch_queue_s **)(v17 + 16);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1001A8F8C;
    v20[3] = &unk_1006392B0;
    void v20[4] = v17;
    id v21 = v18;
    dispatch_sync(v19, v20);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    unsigned __int8 v7 = *(void **)(a1 + 48);
    id v8 = *(dispatch_queue_s **)(v6 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001A8E74;
    block[3] = &unk_1006392B0;
    void block[4] = v6;
    id v23 = v7;
    dispatch_sync(v8, block);
  }

id sub_1001A8E74(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

void sub_1001A8E80(id a1, NSURL *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v9 = 0LL;
  unsigned __int8 v4 = [v3 removeItemAtURL:v2 error:&v9];

  id v5 = v9;
  if ((v4 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to delete card: %@", buf, 0xCu);
    }
  }
}

id sub_1001A8F8C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

id sub_1001A8F98(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

void sub_1001A9054(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ubiquitousURL]);
  if (v2)
  {
    unsigned __int8 v4 = (void *)v2;
    char BoolForKey = PKSharedCacheGetBoolForKey(PKSharedCacheIgnoringUbiquityKey, v3);

    if ((BoolForKey & 1) == 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(1LL);
      unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v15 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "updating ubiquitous version of catalog: %@",  buf,  0xCu);
      }

      id v9 = -[NSFileCoordinator initWithFilePresenter:]( objc_alloc(&OBJC_CLASS___NSFileCoordinator),  "initWithFilePresenter:",  *(void *)(a1 + 40));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ubiquitousURL]);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_1001A91C0;
      v12[3] = &unk_100643C98;
      uint64_t v11 = *(void **)(a1 + 48);
      void v12[4] = *(void *)(a1 + 40);
      id v13 = v11;
      -[NSFileCoordinator coordinateWritingItemAtURL:options:error:byAccessor:]( v9,  "coordinateWritingItemAtURL:options:error:byAccessor:",  v10,  8LL,  0LL,  v12);
    }
  }

void sub_1001A91C0(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _urlForCatalogRelativeToDirectoryURL:a2]);
  uint64_t v3 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained localNonUbiquitousCatalogURL]);
  [v3 writeToURL:v6 nonUbiquitousCatalogURL:v5 atomically:1];
}

void sub_1001A94D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(1LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Coordinated read successful at URL %@",  (uint8_t *)&v6,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A9730( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_1001A9750(uint64_t a1)
{
  uint64_t v1 = PKHomeDirectoryPath(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"UbiquitousCards"]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v3));

  return v4;
}

void sub_1001A97B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(1LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    id v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Setting %@ to be ubiquitous with destination %@",  buf,  0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 32);
  id v17 = 0LL;
  unsigned __int8 v14 = [v11 setUbiquitous:1 itemAtURL:v13 destinationURL:v12 error:&v17];
  id v15 = v17;
  if ((v14 & 1) != 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting ubiquitous URL: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 56) setUbiquitousURL:v6];
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      id v19 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error making pre-ubiquitous URL ubiquitous: %@",  buf,  0xCu);
    }
  }
}

void sub_1001A9FC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1001A9FF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001AA008(uint64_t a1)
{
}

void sub_1001AA010(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  NSURLResourceKey v16 = NSURLUbiquitousItemDownloadingStatusKey;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
  id v13 = 0LL;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:v5 options:4 error:&v13]);

  id v7 = v13;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to read card ids: %@", buf, 0xCu);
    }
  }
}

void sub_1001AA3F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_1001AA420(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60LL));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v2 == 0;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    id v4 = +[PKPass createWithFileURL:warnings:error:]( &OBJC_CLASS___PKPass,  "createWithFileURL:warnings:error:",  a2,  0LL,  0LL);
    id v5 = *(void **)(a1 + 40);
    id v8 = v4;
    if (v4)
    {
      [v4 setUniqueID:v5];
      id v6 = PDDefaultQueue();
      id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v6);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001AA524;
      block[3] = &unk_1006392B0;
      void block[4] = *(void *)(a1 + 32);
      id v10 = v8;
      dispatch_sync(v7, block);
    }

    else
    {
      sub_1001AA564(v5, *(void **)(a1 + 48));
    }
  }

void sub_1001AA524(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 ubiquitousCardDidChange:*(void *)(a1 + 40)];
}

void sub_1001AA564(void *a1, void *a2)
{
  uint64_t v3 = qword_100707A18;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&qword_100707A18, &stru_100649B88);
  }
  PKWriteBadPass();
}

void sub_1001AA6EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    while (2)
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)i);
        id v10 = objc_autoreleasePoolPush();
        uint64_t v11 = v10;
        if (!atomic_load((unsigned int *)(*(void *)(a1 + 40) + 60LL)))
        {
          objc_autoreleasePoolPop(v10);

          uint64_t Object = PKLogFacilityTypeGetObject(1LL);
          id v4 = (id)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v17 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "\tTerminating copy of local cards to ubiquity.",  v17,  2u);
          }

          goto LABEL_15;
        }

        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
        unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained existingCardWithUniqueID:v9]);

        if (v14 && [v14 supportsSyncing])
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _urlForCardWithUniqueID:v9 relativeToDirectoryURL:v3]);
          sub_1001A884C(v14, v15);
        }

        objc_autoreleasePoolPop(v11);
      }

      id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

void sub_1001AAC5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1001AAC90(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60LL));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v2 == 0;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    id v4 = +[PKPass createWithFileURL:warnings:error:]( &OBJC_CLASS___PKPass,  "createWithFileURL:warnings:error:",  a2,  0LL,  0LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 manifestHash]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) manifestHash]);
    unsigned int v7 = [v5 isEqualToData:v6];

    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 48);
        int v17 = 138412290;
        uint64_t v18 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@ - card manifests are equivalent",  (uint8_t *)&v17,  0xCu);
      }
    }

    else
    {
      if (v10)
      {
        uint64_t v12 = *(void *)(a1 + 48);
        int v17 = 138412290;
        uint64_t v18 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@ - card manifests differ",  (uint8_t *)&v17,  0xCu);
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 modificationDate]);
      unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) modificationDate]);
      id v15 = [v13 compare:v14];

      if (v15 == (id)-1LL) {
        NSURLResourceKey v16 = *(void **)(a1 + 56);
      }
      else {
        NSURLResourceKey v16 = *(void **)(a1 + 64);
      }
      [v16 addObject:*(void *)(a1 + 48)];
    }
  }

void sub_1001AB140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001AB164(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 72LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained localNonUbiquitousCatalogURL]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[PKCatalog catalogWithContentsOfURL:nonUbiquitousCatalogURL:]( &OBJC_CLASS___PKCatalog,  "catalogWithContentsOfURL:nonUbiquitousCatalogURL:",  v4,  v5));

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1001AB2C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60LL));
  uint64_t Object = PKLogFacilityTypeGetObject(1LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "coordinated read succeeded at: %@", buf, 0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
    unsigned int v10 = [v8 fileExistsAtPath:v9];

    if (v10)
    {
      uint64_t v11 = (os_log_s *)+[PKPass createWithFileURL:warnings:error:]( &OBJC_CLASS___PKPass,  "createWithFileURL:warnings:error:",  *(void *)(a1 + 40),  0LL,  0LL);
      BOOL v12 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v12)
        {
          id v13 = *(void **)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412290;
          id v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "valid card: %@", buf, 0xCu);
        }

        -[os_log_s setUniqueID:](v11, "setUniqueID:", *(void *)(a1 + 48));
        id v14 = PDDefaultQueue();
        id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_1001AB740;
        v35[3] = &unk_100639350;
        uint8_t v35[4] = *(void *)(a1 + 32);
        NSURLResourceKey v16 = &v36;
        id v36 = *(id *)(a1 + 48);
        int v17 = (id *)&v37;
        __int128 v37 = v11;
        uint64_t v18 = v35;
      }

      else
      {
        if (v12)
        {
          __int128 v27 = *(void **)(a1 + 48);
          *(_DWORD *)__int128 buf = 138412290;
          id v39 = v27;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "invalid card: %@", buf, 0xCu);
        }

        id v28 = PDDefaultQueue();
        id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v28);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_1001AB83C;
        v32[3] = &unk_100639350;
        void v32[4] = *(void *)(a1 + 32);
        NSURLResourceKey v16 = &v33;
        id v33 = *(id *)(a1 + 48);
        int v17 = &v34;
        id v34 = v3;
        uint64_t v18 = v32;
      }

      dispatch_sync(v15, v18);

      id v26 = *v16;
LABEL_25:

      goto LABEL_26;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "card package missing, checking for fault at: %@",  buf,  0xCu);
    }

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v31 = 0LL;
    unsigned __int8 v20 = [v19 startDownloadingUbiquitousItemAtURL:v3 error:&v31];
    uint64_t v11 = (os_log_s *)v31;

    BOOL v21 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if ((v20 & 1) == 0)
    {
      if (v21)
      {
        id v23 = *(void **)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412290;
        id v39 = v23;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "card package removed: %@", buf, 0xCu);
      }

      id v24 = PDDefaultQueue();
      uint64_t v25 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001AB940;
      block[3] = &unk_1006392B0;
      void block[4] = *(void *)(a1 + 32);
      id v30 = *(id *)(a1 + 48);
      dispatch_sync(v25, block);

      id v26 = v30;
      goto LABEL_25;
    }

    if (v21)
    {
      id v22 = *(void **)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v22;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "faulting in card package: %@", buf, 0xCu);
    }
  }

  else
  {
    if (v7)
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "coordinated read succeeded and ignored at: %@",  buf,  0xCu);
    }

    uint64_t v11 = v6;
  }

void sub_1001AB740(uint64_t a1)
{
  if ([*(id *)(a1 + 32) passWillBeDeleted:*(void *)(a1 + 40)])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "pass will be deleted so do not add it back: %@",  buf,  0xCu);
    }
  }

  else
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v5 ubiquitousCardDidChange:*(void *)(a1 + 48)];
  }

void sub_1001AB83C(id *a1)
{
  if ([a1[4] passWillBeDeleted:a1[5]])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = a1[5];
      *(_DWORD *)__int128 buf = 138412290;
      id v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "pass will be deleted so do not add it back: %@",  buf,  0xCu);
    }
  }

  else
  {
    sub_1001AA564(a1[5], a1[6]);
    id v5 = (id)objc_claimAutoreleasedReturnValue([a1[4] delegate]);
    [v5 ubiquitousCardWithUniqueIDRemoved:a1[5]];
  }

void sub_1001AB940(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 ubiquitousCardWithUniqueIDRemoved:*(void *)(a1 + 40)];
}

void sub_1001ABA14(uint64_t a1, void *a2)
{
  if (atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60LL)))
  {
    id v4 = (id *)(*(void *)(a1 + 32) + 72LL);
    id v5 = a2;
    id WeakRetained = objc_loadWeakRetained(v4);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained localNonUbiquitousCatalogURL]);
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[PKCatalog catalogWithContentsOfURL:nonUbiquitousCatalogURL:]( &OBJC_CLASS___PKCatalog,  "catalogWithContentsOfURL:nonUbiquitousCatalogURL:",  v5,  v7));

    id v8 = v9;
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "_queue_copyCatalogToLocalStore:", v9);
      id v8 = v9;
    }
  }

void sub_1001ABBF0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 ubiquitousCatalogDidChange:*(void *)(a1 + 40)];
}

void sub_1001ABD70(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _urlForCatalogRelativeToDirectoryURL:a2]);
  id v3 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained localNonUbiquitousCatalogURL]);
  [v3 writeToURL:v6 nonUbiquitousCatalogURL:v5 atomically:1];
}

void sub_1001AC0A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1001AC0CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  NSURLResourceKey v16 = NSURLContentModificationDateKey;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
  id v13 = 0LL;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:v5 options:4 error:&v13]);

  id v7 = v13;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unable list files in ubiquitous directory: %@",  buf,  0xCu);
    }
  }
}

void sub_1001AC690( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1001AC6BC(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v3 + 40);
  id v4 = [v2 replaceItemAtURL:a2 options:0 error:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
}

id sub_1001ACB34(void *a1)
{
  id result = [*(id *)(a1[4] + 32) countForObject:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = result != 0LL;
  if (!*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL)) {
    return [*(id *)(a1[4] + 32) addObject:a1[5]];
  }
  return result;
}

void sub_1001ACB94(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v28 = 0LL;
  [v2 getResourceValue:&v28 forKey:NSURLUbiquitousItemDownloadingStatusKey error:0];
  uint64_t v3 = (__CFString *)v28;
  if ((PKSharedCacheGetBoolForKey(PKSharedCacheIgnoringUbiquityKey, v4) & 1) == 0)
  {
    if (atomic_load((unsigned int *)(*(void *)(a1 + 48) + 60LL)))
    {
      if (!v3
        || (-[__CFString isEqualToString:]( v3,  "isEqualToString:",  NSURLUbiquitousItemDownloadingStatusCurrent) & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 48), "_queue_resolveURLIfNecessary:", *(void *)(a1 + 40));
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) URLByDeletingLastPathComponent]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lastPathComponent]);

        if ([v7 isEqualToString:@"UbiquitousCards"])
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pathExtension]);
          unsigned int v9 = [v8 isEqualToString:PKRawPassExtension];

          unsigned int v10 = *(void **)(a1 + 40);
          if (v9)
          {
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 URLByDeletingPathExtension]);
            BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11 lastPathComponent]);

            goto LABEL_16;
          }

          id v23 = (void *)objc_claimAutoreleasedReturnValue([v10 lastPathComponent]);
          unsigned int v24 = [v23 isEqualToString:@"CatalogOfRecord.plist"];

          if (v24)
          {
            objc_msgSend(*(id *)(a1 + 48), "_queue_handleCatalogUpdate");
            goto LABEL_17;
          }

          uint64_t Object = PKLogFacilityTypeGetObject(1LL);
          BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
          *(_WORD *)__int128 buf = 0;
          int v17 = "Presented subitem not recognized; ignoring";
          uint64_t v18 = v12;
          uint32_t v19 = 2;
        }

        else
        {
          uint64_t v16 = PKLogFacilityTypeGetObject(1LL);
          BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
LABEL_16:

            goto LABEL_17;
          }

          *(_DWORD *)__int128 buf = 138412290;
          id v30 = @"UbiquitousCards";
          int v17 = "Presented subitem not immediately contained by %@ directory; ignoring";
          uint64_t v18 = v12;
          uint32_t v19 = 12;
        }

        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
        goto LABEL_16;
      }
    }
  }

  uint64_t v13 = PKLogFacilityTypeGetObject(1LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = *(const __CFString **)(a1 + 40);
    id v15 = &stru_100662310;
    if (v3) {
      id v15 = v3;
    }
    *(_DWORD *)__int128 buf = 138412546;
    id v30 = v14;
    __int16 v31 = 2112;
    __int128 v32 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "Ignoring subitem change at URL: %@ %@",  buf,  0x16u);
  }

id sub_1001ACEA4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
}

void sub_1001ACFB8(uint64_t a1, uint64_t a2)
{
  if (PKSharedCacheGetBoolForKey(PKSharedCacheIgnoringUbiquityKey, a2))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(1LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Ignoring subitem did appear at URL: %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_queue_resolveURLIfNecessary:", *(void *)(a1 + 32));
  }

uint64_t sub_1001AD1B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001AD21C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t Object = PKLogFacilityTypeGetObject(1LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    uint64_t v6 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "persisting event identifier: %llu",  (uint8_t *)&v5,  0xCu);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v1));
  PKSharedCacheSetObjectForKey(v4, PKSharedCacheLastEventIdentifierKey);
}

id PDLastFSEventsURL()
{
  uint64_t StringForKey = PKSharedCacheGetStringForKey(PKSharedCacheLastWatchedURLKey);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(StringForKey);
  if (v1) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v1));
  }
  else {
    id v2 = 0LL;
  }

  return v2;
}

void sub_1001AD4BC(id a1)
{
  uint64_t v1 = PKHomeDirectoryPath(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"BadUbiquitousPasses"]);
  uint64_t v4 = (void *)qword_100707A10;
  qword_100707A10 = v3;

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v5 createDirectoryAtPath:qword_100707A10 withIntermediateDirectories:1 attributes:0 error:0];
}

id *sub_1001AD598(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)&OBJC_CLASS___PDRemoteInterfacePresenter;
    uint64_t v11 = (id *)objc_msgSendSuper2(&v21, "init");
    a1 = v11;
    if (v11)
    {
      *((_DWORD *)v11 + 2) = 0;
      objc_storeStrong(v11 + 8, a2);
      objc_storeStrong(a1 + 10, a4);
      uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
      id v13 = a1[5];
      a1[5] = (id)v12;

      dispatch_queue_attr_t v14 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
      id v15 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v14);
      dispatch_queue_attr_t v16 = dispatch_queue_attr_make_with_autorelease_frequency(v15, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      int v17 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v16);

      dispatch_queue_t v18 = dispatch_queue_create("com.apple.passd.remoteinterfacepresenter", v17);
      id v19 = a1[2];
      a1[2] = v18;

      PDNFSecureXPCRegisterContactlessPresentationEventObserver(a1);
      sub_10015B950((uint64_t)a1[8], a1);
      [a1[10] registerObserver:a1];
      objc_storeStrong(a1 + 9, a3);
      [a1[9] registerConsumer:a1];
    }
  }

  return a1;
}

uint64_t sub_1001AD804(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a4) {
      return (*(uint64_t (**)(uint64_t, void))(a4 + 16))(a4, 0LL);
    }
  }

  return result;
}

void sub_1001AD840(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (!a1)
  {
LABEL_18:

    return;
  }

  if (v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 passUniqueIdentifier]);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 56);
    BOOL v8 = (!v7
       || (uint64_t v7 = (uint64_t)[(id)v7 isRelatedToState:v5], !(_DWORD)v7)
    objc_storeStrong((id *)(a1 + 56), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    if (v8 && v6)
    {
      unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 48));
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      if ((v9 & 1) != 0)
      {
        if (v12)
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDRemoteInterfacePresenter [express]: pass for express transaction identified - presenting.",  buf,  2u);
        }

        notify_post((const char *)[PKNotifyEventOutstandingExpressTransactionReady cStringUsingEncoding:4]);
      }

      else
      {
        if (v12)
        {
          *(_WORD *)id v13 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDRemoteInterfacePresenter [express]: ERROR: pass for express transaction identified but passd ready!",  v13,  2u);
        }
      }
    }

    goto LABEL_18;
  }

  __break(1u);
}

BOOL sub_1001AD9AC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isIgnorable])
  {
    BOOL v3 = 0LL;
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 passUniqueIdentifier]);
    BOOL v3 = v4 != 0LL;
  }

  return v3;
}

void sub_1001AD9FC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v9 = a2;
  id v6 = a4;
  if (!a1)
  {
LABEL_9:

    return;
  }

  if (v9)
  {
    if (![v9 isProcessing])
    {
      if ([v9 standaloneTransactionType])
      {
        uint64_t v7 = objc_claimAutoreleasedReturnValue([v9 passUniqueIdentifier]);
        if (v7)
        {
          BOOL v8 = (void *)v7;
          if (v6) {
            (*((void (**)(id, void))v6 + 2))(v6, 0LL);
          }

          goto LABEL_9;
        }
      }
    }
  }

  __break(1u);
}

uint64_t sub_1001ADA8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    if (a5) {
      return (*(uint64_t (**)(uint64_t, void))(a5 + 16))(a5, 0LL);
    }
  }

  return result;
}

uint64_t sub_1001ADAA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0LL);
  }
  return result;
}

uint64_t sub_1001ADAC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a3) {
      return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0LL);
    }
  }

  return result;
}

uint64_t sub_1001ADADC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    if (a7) {
      return (*(uint64_t (**)(uint64_t, void, void))(a7 + 16))(a7, 0LL, 0LL);
    }
  }

  return result;
}

uint64_t sub_1001ADAFC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    id result = a10;
    if (a10) {
      return (*(uint64_t (**)(void))(a10 + 16))();
    }
  }

  return result;
}

uint64_t sub_1001ADB18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    if (a6) {
      return (*(uint64_t (**)(uint64_t, void))(a6 + 16))(a6, 0LL);
    }
  }

  return result;
}

uint64_t sub_1001ADB34()
{
  return 0LL;
}

void sub_1001ADB3C(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      BOOL v3 = (os_unfair_lock_s *)(a1 + 8);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 40) addObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

uint64_t sub_1001ADB94(uint64_t result)
{
  if (result) {
    atomic_store(1u, (unsigned __int8 *)(result + 48));
  }
  return result;
}

void sub_1001ADBA8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    objc_storeStrong((id *)(a1 + 24), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

void sub_1001ADC08(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    objc_storeStrong((id *)(a1 + 32), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

void sub_1001ADE94(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 8) peerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 32)]);
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      id v4 = v2;
      (*(void (**)(void))(v3 + 16))();
      id v2 = v4;
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_1001ADF88(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentPendingRequestsForPeerPaymentAccount]);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    id v2 = v4;
  }
}

uint64_t sub_1001AE080(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001AE170(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001AE234(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001AE288(id a1, PDPeerPaymentAccountManagerObserver *a2)
{
  id v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "peerPaymentAccountManagerPendingRequestsChanged") & 1) != 0) {
    -[PDPeerPaymentAccountManagerObserver peerPaymentAccountManagerPendingRequestsChanged]( v2,  "peerPaymentAccountManagerPendingRequestsChanged");
  }
}

void sub_1001AE638(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) peerPaymentRecurringPaymentWithIdentifier:*(void *)(a1 + 40)]);
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
  }

uint64_t sub_1001AE74C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001AE810(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001AE900(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001AEE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Uploaded memo for recurring payment %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

id sub_1001AEED8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 32));
  }
  return [*(id *)(a1 + 40) _handleRecurringPaymentsChanged];
}

uint64_t sub_1001AF220(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1001AF3CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_1001AF3F4(id a1, PDPeerPaymentAccountManagerObserver *a2)
{
  uint64_t v2 = a2;
  if ((objc_opt_respondsToSelector(v2, "peerPaymentAccountManagerRecurringPaymentsChanged") & 1) != 0) {
    -[PDPeerPaymentAccountManagerObserver peerPaymentAccountManagerRecurringPaymentsChanged]( v2,  "peerPaymentAccountManagerRecurringPaymentsChanged");
  }
}

void sub_1001AF6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "NearbyPeerPayment: Finished uploading counterpart image data to CloudKit with identifier %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001AF7A4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ([v5 hasNotificationServiceData])
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 24LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 transactionSourceIdentifier]);
    [v6 processPaymentTransaction:v5 forTransactionSourceIdentifier:v7];
  }

  int v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001AF870;
  v10[3] = &unk_100645D90;
  id v11 = v8;
  char v12 = a2;
  dispatch_async(v9, v10);
}

uint64_t sub_1001AF870(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_1001AF9F8(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1001AFC94(uint64_t a1, uint64_t a2)
{
  id v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___Account),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[Account account](v4, "account"));
  if (v3) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

id sub_1001B170C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___Account,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1001B1C40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001B1C58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B1C68(uint64_t a1)
{
}

uint64_t sub_1001B1C70(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 accountWithIdentifier:v3 inDatabase:*(void *)(a1 + 40)]);

  +[CreditAccountDetails deleteVirtualCardEncryptedDataForAccountPID:inDatabase:]( CreditAccountDetails,  "deleteVirtualCardEncryptedDataForAccountPID:inDatabase:",  [v4 persistentID],  *(void *)(a1 + 40));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 account]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int128 v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 1LL;
}

void sub_1001B22BC(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1001B2300(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setStateReason:](v4, "setStateReason:", [a3 integerValue]);
}

void sub_1001B2344(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setBlockAllAccountAccess:](v4, "setBlockAllAccountAccess:", [a3 BOOLValue]);
}

void sub_1001B2388(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setBlockNotifications:](v4, "setBlockNotifications:", [a3 BOOLValue]);
}

void sub_1001B23CC(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setIsCloudAccount:](v4, "setIsCloudAccount:", [a3 BOOLValue]);
}

void sub_1001B2410(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1001B2454(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setAccessLevel:](v4, "setAccessLevel:", [a3 integerValue]);
}

void sub_1001B2498(id a1, PKAccount *a2, id a3)
{
}

void sub_1001B24A0(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setFeature:](v4, "setFeature:", [a3 integerValue]);
}

void sub_1001B24E4(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setAccountStateDirty:](v4, "setAccountStateDirty:", [a3 BOOLValue]);
}

void sub_1001B2528(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccount setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_1001B2574(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKAccount setAccountBaseURL:](v4, "setAccountBaseURL:", v5);
}

void sub_1001B25C0(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKAccount setCloudStoreZoneNames:](v4, "setCloudStoreZoneNames:", v5);
}

void sub_1001B2618(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKAccount setApplyServiceURL:](v4, "setApplyServiceURL:", v5);
}

void sub_1001B2664(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setSharedAccount:](v4, "setSharedAccount:", [a3 BOOLValue]);
}

void sub_1001B26A8(id a1, PKAccount *a2, id a3)
{
}

void sub_1001B26B0(id a1, PKAccount *a2, id a3)
{
  uint64_t v6 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  if (v4)
  {
    id v5 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v4);
    -[PKAccount setPreviousAccountIdentifiers:](v6, "setPreviousAccountIdentifiers:", v5);
  }
}

void sub_1001B2728(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKAccount setPaymentServicesBaseURL:](v4, "setPaymentServicesBaseURL:", v5);
}

void sub_1001B2774(id a1, PKAccount *a2, id a3)
{
}

void sub_1001B2B70(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___SavingsAccountStatement);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  __int128 v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  uint64_t v6 = *(void **)(a1 + 40);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(-[SavingsAccountStatement savingsAccountStatement](v8, "savingsAccountStatement"));
  [v6 addObject:v7];
}

void sub_1001B328C(id a1, PKSavingsAccountStatement *a2, id a3)
{
}

void sub_1001B3294(id a1, PKSavingsAccountStatement *a2, id a3)
{
}

void sub_1001B329C(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKSavingsAccountStatement setOpeningDate:](v4, "setOpeningDate:", v5);
}

void sub_1001B32E8(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKSavingsAccountStatement setClosingDate:](v4, "setClosingDate:", v5);
}

void sub_1001B3334(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setOpeningBalance:](v4, "setOpeningBalance:", v6);
}

void sub_1001B3384(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setClosingBalance:](v4, "setClosingBalance:", v6);
}

void sub_1001B33D4(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setInterestEarned:](v4, "setInterestEarned:", v6);
}

void sub_1001B3424(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setTotalDeposits:](v4, "setTotalDeposits:", v6);
}

void sub_1001B3474(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setTotalDailyCashDeposits:](v4, "setTotalDailyCashDeposits:", v6);
}

void sub_1001B34C4(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setTotalWithdrawn:](v4, "setTotalWithdrawn:", v6);
}

void sub_1001B3514(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKSavingsAccountStatement setAPY:](v4, "setAPY:", v6);
}

void sub_1001B3564(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountStatement setStatementPeriodDays:](v4, "setStatementPeriodDays:", [a3 integerValue]);
}

void sub_1001B3684(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001B3ACC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)PDOSTransactionCreate("PDPassUpgradeController.add_pass");
  id v8 = PDDefaultQueue();
  __int128 v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001B3BC4;
  v13[3] = &unk_10063B440;
  id v14 = v7;
  id v15 = *(id *)(a1 + 32);
  id v16 = v5;
  id v17 = v6;
  id v10 = v6;
  id v11 = v5;
  id v12 = v7;
  dispatch_async(v9, v13);
}

void sub_1001B3BC4(uint64_t a1)
{
  id v5 = 0LL;
  unsigned int v2 = [*(id *)(a1 + 40) writeCard:*(void *)(a1 + 48) source:1 error:&v5];
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    if (v2) {
      id v4 = 0LL;
    }
    else {
      id v4 = v5;
    }
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_1001B3F30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_1001B3F60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B3F70(uint64_t a1)
{
}

void sub_1001B3F78(void *a1)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  if (v3)
  {
    *(void *)(v2 + 40) = 0LL;

    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      int v10 = 138412290;
      uint64_t v11 = v6;
      id v7 = "Stopping delaying exit for pass upgrade %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, 0xCu);
    }
  }

  else
  {
    uint64_t v8 = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      int v10 = 138412290;
      uint64_t v11 = v9;
      id v7 = "Already stopped delaying exit for pass upgrade %@";
      goto LABEL_6;
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8LL) + 32LL));
}

uint64_t sub_1001B409C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Timing out delaying exit for pass upgrade %@",  (uint8_t *)&v6,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_1001B4158(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001B457C(id a1, PKPayLaterAccountProductDetails *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", a3));
  -[PKPayLaterAccountProductDetails setProductTimeZone:](v4, "setProductTimeZone:", v5);
}

void sub_1001B4764(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void *sub_1001B4DA8(void *a1, uint64_t a2)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue( +[Pass dynamicStateInDatabase:forPassUniqueID:]( &OBJC_CLASS___Pass,  "dynamicStateInDatabase:forPassUniqueID:",  a1[1],  a2));
  }
  return a1;
}

void sub_1001B51C0(id a1, PKAccountEnhancedMerchantBehavior *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKAccountEnhancedMerchantBehavior setMinRefreshPeriod:](v4, "setMinRefreshPeriod:");
}

void sub_1001B52DC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001B5B7C(id a1, PKCreditAccountRates *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountRates setAprForPurchases:](v4, "setAprForPurchases:", v6);
}

void sub_1001B5CAC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001B5FFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001B6014(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B6024(uint64_t a1)
{
}

BOOL sub_1001B602C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateOverride]);
  if (!v2)
  {
    uint64_t v4 = 0LL;
    goto LABEL_5;
  }

  uint64_t v3 = (void *)v2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[TileState insertState:inDatabase:]( &OBJC_CLASS___TileState,  "insertState:inDatabase:",  v2,  *(void *)(a1 + 40)));

  if (v4)
  {
LABEL_5:
    id v6 = [objc_alloc(*(Class *)(a1 + 56)) initWithState:*(void *)(a1 + 32) tileStateOverride:v4 inDatabase:*(void *)(a1 + 40)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    BOOL v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL;
    return v5;
  }

  return 0LL;
}

void sub_1001B6348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_1001B6368(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v12 = a3;
  id v7 = *(id *)(a4 + 8LL * a1[7]);
  if (v7)
  {
    if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
    {
      uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v9 = *(void *)(a1[6] + 8LL);
      int v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }

    id v11 = +[TileDescriptorState _createStateForPID:withProperties:values:propertySetters:indices:inDatabase:]( &OBJC_CLASS___TileDescriptorState,  "_createStateForPID:withProperties:values:propertySetters:indices:inDatabase:",  a2,  v12,  a4,  a1[4],  a1[8],  a1[9],  a1[5]);
    [*(id *)(*(void *)(a1[6] + 8) + 40) setObject:v11 forKeyedSubscript:v7];
  }
}

void sub_1001B6548( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1001B6560(void *a1, void *a2, uint64_t a3)
{
  BOOL v5 = (void *)a1[4];
  id v6 = a2;
  id v7 = +[TileDescriptorState _createStateForPID:withProperties:values:propertySetters:indices:inDatabase:]( TileDescriptorState,  "_createStateForPID:withProperties:values:propertySetters:indices:inDatabase:",  [v5 persistentID],  v6,  a3,  a1[5],  a1[7],  a1[8],  *(void *)(a1[4] + 8));

  uint64_t v8 = *(void *)(a1[6] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1001B68A0(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMutablePassTileDescriptorState setSupported:](v4, "setSupported:", [a3 BOOLValue]);
}

void sub_1001B68E4(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMutablePassTileDescriptorState setEnabled:](v4, "setEnabled:", [a3 unsignedIntegerValue]);
}

void sub_1001B6928(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
}

void sub_1001B6930(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMutablePassTileDescriptorState setInProgress:](v4, "setInProgress:", [a3 BOOLValue]);
}

id _SQLValueForSupportedLocalizations(void *a1)
{
  id v1 = a1;
  if (!v1
    || (uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _SupportedLocalizationsForSQLValue(void *a1)
{
  id v1 = a1;
  v8[0] = objc_opt_class(&OBJC_CLASS___NSArray, v2);
  v8[1] = objc_opt_class(&OBJC_CLASS___NSString, v3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v8, 2LL));
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v5,  v1,  0LL));

  return v6;
}

void sub_1001B7168(uint64_t a1, uint64_t a2)
{
  BOOL v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryItem),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[DiscoveryItem item](v5, "item"));
  [v3 addObject:v4];
}

void sub_1001B7398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryItem),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v4, "valueForProperty:", @"identifier"));
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1001B7540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = *(id *)(a4 + 8);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  else {
    id v6 = v8;
  }
  id v7 = v6;

  if (v7) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_1001B7FA8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id obj = a2;
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v24;
    do
    {
      uint64_t v9 = 0LL;
      uint64_t v20 = v6;
      uint64_t v10 = v19 + 8LL * (void)v6;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v9);
        id v12 = *(void **)(v10 + 8LL * (void)v9);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null", v19));
        if (v12 == v13) {
          id v14 = 0LL;
        }
        else {
          id v14 = *(void **)(v10 + 8LL * (void)v9);
        }
        id v15 = v14;

        if ([v11 isEqualToString:@"relevant_date_range_start_date"])
        {
          id v16 = (void *)v7;
          uint64_t v7 = _DateForSQLValue(v15);
        }

        else if ([v11 isEqualToString:@"relevant_date_range_end_date"])
        {
          id v16 = (void *)v21;
          uint64_t v21 = _DateForSQLValue(v15);
        }

        else
        {
          uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v11]);
          id v16 = (void *)v17;
          if (v17) {
            (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, *(void *)(a1 + 40), v15);
          }
        }

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v5 != v9);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      id v6 = (char *)v9 + (void)v20;
    }

    while (v5);
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v7 = 0LL;
  }

  if (v7 | v21)
  {
    id v18 = [[PKDiscoveryRelevantDateRange alloc] initWithStartDate:v7 endDate:v21];
    [*(id *)(a1 + 40) setRelevantDateRange:v18];
  }
}

void sub_1001B8A38(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_1001B8A40(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setVersion:](v4, "setVersion:", [a3 integerValue]);
}

void sub_1001B8A84(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1001B8AC8(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1001B8B0C(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_1001B8B14(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_1001B8B1C(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKDiscoveryItem setLayoutBundleURL:](v4, "setLayoutBundleURL:", v5);
}

void sub_1001B8B68(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  id v5 = _SupportedLocalizationsForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKDiscoveryItem setSupportedLocalizations:](v4, "setSupportedLocalizations:", v6);
}

void sub_1001B8BB8(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_OSVersionRequirementRangeForSQLValue(a3);
  -[PKDiscoveryItem setOsVersionRange:](v4, "setOsVersionRange:", v5);
}

void sub_1001B8C04(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_HardwareVersionRangeForSQLValue(a3);
  -[PKDiscoveryItem setHardwareVersionRange:](v4, "setHardwareVersionRange:", v5);
}

void sub_1001B8C50(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setViewCount:](v4, "setViewCount:", [a3 integerValue]);
}

void sub_1001B8C94(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setMaxViewCount:](v4, "setMaxViewCount:", [a3 integerValue]);
}

void sub_1001B8CD8(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setMaxViewCountLargeCard:](v4, "setMaxViewCountLargeCard:", [a3 integerValue]);
}

void sub_1001B8D1C(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setShouldBadge:](v4, "setShouldBadge:", [a3 BOOLValue]);
}

void sub_1001B8D60(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setPriority:](v4, "setPriority:", [a3 integerValue]);
}

void sub_1001B8DA4(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setEntitledToForceLargeCard:](v4, "setEntitledToForceLargeCard:", [a3 BOOLValue]);
}

void sub_1001B8DE8(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_1001B8EE4(id a1, DiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[DiscoveryItem setItemOrder:](v4, "setItemOrder:", [a3 integerValue]);
}

id sub_1001B8F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___DiscoveryItem,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1001B9210( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001B9228(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B9238(uint64_t a1)
{
}

BOOL sub_1001B9240(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) invitation]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]);
  id v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v11 = 0LL;
  }

  else
  {
    id v6 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    id v14 = v2;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
    +[SharingMessage insertOrUpdateSharingMessages:storePayloads:transportIdentifier:inDatabase:]( &OBJC_CLASS___SharingMessage,  "insertOrUpdateSharingMessages:storePayloads:transportIdentifier:inDatabase:",  v9,  1LL,  @"Empty",  *(void *)(a1 + 48));

    id v13 = v4;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
    +[PassShare insertOrUpdatePassShares:forPassPID:inDatabase:]( &OBJC_CLASS___PassShare,  "insertOrUpdatePassShares:forPassPID:inDatabase:",  v10,  0LL,  *(void *)(a1 + 48));

    BOOL v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
  }

  return v11;
}

void sub_1001B94BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v17 = a3;
  uint64_t v9 = *(void **)(a1 + 48);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v10 toObject:*(void *)(a1 + 32) withProperties:v17 values:a4];

  id v11 = *(id *)(a4 + 8 * (void)[v17 indexOfObject:@"b"]);
  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SharingMessage sharingMessageForMessageIdentifier:inDatabase:]( &OBJC_CLASS___SharingMessage,  "sharingMessageForMessageIdentifier:inDatabase:",  v11,  *(void *)(a1 + 40)));
    [*(id *)(a1 + 32) setInvitation:v12];
  }

  id v13 = *(void **)(a4 + 8 * (void)[v17 indexOfObject:@"c"]);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = v13;
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PassShare passShareForIdentifier:inDatabase:]( &OBJC_CLASS___PassShare,  "passShareForIdentifier:inDatabase:",  v15,  v14));
    [*(id *)(a1 + 32) setShare:v16];
  }

  *a6 = 1;
}

void sub_1001B9850(id a1, PKPendingStatefulTransferProvisioning *a2, id a3)
{
}

void sub_1001B9858(id a1, PKPendingStatefulTransferProvisioning *a2, id a3)
{
}

void sub_1001B9860(id a1, PKPendingStatefulTransferProvisioning *a2, id a3)
{
}

void sub_1001BA0A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_1001BA110(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 activationOptions]);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 activationCode]);
  id v6 = v5;
  if (v5)
  {
    *a3 = v5;
    id v7 = (id)objc_claimAutoreleasedReturnValue([v4 optionsWithoutValues]);
  }

  else
  {
    uint64_t v8 = -[PKPassShareActivationOption initWithDefaultIdentifierForType:]( objc_alloc(&OBJC_CLASS___PKPassShareActivationOption),  "initWithDefaultIdentifierForType:",  1LL);
    uint64_t v9 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", PKRandomNumberOfLength(12LL));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 stringValue]);

    -[PKPassShareActivationOption setValue:](v8, "setValue:", v11);
    id v12 = v11;
    *a3 = v12;
    id v13 = objc_alloc(&OBJC_CLASS___PKPassShareActivationOptions);
    id v16 = v8;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
    id v7 = [v13 initWithOptions:v14];
  }

  return v7;
}

uint64_t sub_1001BA27C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001BA28C(uint64_t a1)
{
}

void sub_1001BA294(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shareData]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1001BA370;
  v16[3] = &unk_10064A5A8;
  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  id v19 = v7;
  uint64_t v20 = v12;
  id v17 = v11;
  id v18 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_1001BA3F8(v8, v15, v10, v16);
}

void sub_1001BA370(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setEncryptedShareData:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v10 = v5;

  if (a2) {
    BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) == 0LL;
  }
  else {
    BOOL v8 = 0;
  }
  uint64_t v9 = !v8;
  (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  v9);
}

void sub_1001BA3F8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (a1)
  {
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v6 devicePrimaryPaymentApplication]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 dpanIdentifier]);

    if (v9)
    {
      uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKEncryptionErrorDomain,  1LL,  0LL));
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
        int v15 = 138412290;
        id v16 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Unable to find dpanIdentifier for %@",  (uint8_t *)&v15,  0xCu);
      }

      uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 1LL));
    }

    id v14 = (void *)v10;
    v7[2](v7, 0LL, v10);
  }
}

void sub_1001BA560(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001BA630;
  v15[3] = &unk_1006475D0;
  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_1001BA6B4(v8, v9, v10, v15);
}

void sub_1001BA630(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setFidoSignedChallenge:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL);
}

void sub_1001BA6B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (a1)
  {
    id v16 = v9;
    id v11 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v43[0] = 0LL;
    v43[1] = v43;
    v43[2] = 0x3032000000LL;
    v43[3] = sub_1001BA27C;
    v43[4] = sub_1001BA28C;
    id v44 = 0LL;
    v41[0] = 0LL;
    v41[1] = v41;
    v41[2] = 0x3032000000LL;
    v41[3] = sub_1001BA27C;
    v41[4] = sub_1001BA28C;
    id v42 = 0LL;
    v39[0] = 0LL;
    v39[1] = v39;
    v39[2] = 0x3032000000LL;
    v39[3] = sub_1001BA27C;
    v39[4] = sub_1001BA28C;
    id v40 = 0LL;
    v37[0] = 0LL;
    v37[1] = v37;
    void v37[2] = 0x3032000000LL;
    v37[3] = sub_1001BA27C;
    void v37[4] = sub_1001BA28C;
    id v38 = 0LL;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1001BC958;
    v32[3] = &unk_10063C810;
    void v32[4] = a1;
    id v15 = v7;
    id v12 = v7;
    id v33 = v12;
    id v34 = v41;
    __int128 v35 = v39;
    id v36 = v43;
    [v11 addOperation:v32];
    v30[0] = 0LL;
    v30[1] = v30;
    v30[2] = 0x3032000000LL;
    v30[3] = sub_1001BA27C;
    void v30[4] = sub_1001BA28C;
    id v31 = 0LL;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1001BCAE4;
    v29[3] = &unk_10063BBC8;
    void v29[4] = a1;
    v29[5] = v30;
    [v11 addOperation:v29];
    uint64_t v10 = v16;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1001BCBDC;
    v21[3] = &unk_10064A818;
    id v22 = v12;
    __int128 v24 = v30;
    __int128 v25 = v39;
    __int128 v26 = v41;
    id v23 = v8;
    id v27 = v43;
    id v28 = v37;
    [v11 addOperation:v21];
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1001BCE44;
    v17[3] = &unk_1006423E0;
    uint64_t v19 = v37;
    uint64_t v20 = v43;
    id v18 = v16;
    id v14 = [v11 evaluateWithInput:v13 completion:v17];

    _Block_object_dispose(v30, 8);
    _Block_object_dispose(v37, 8);

    _Block_object_dispose(v39, 8);
    _Block_object_dispose(v41, 8);

    _Block_object_dispose(v43, 8);
    id v7 = v15;
  }
}

void sub_1001BA98C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void sub_1001BA9DC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___PDSharingManagementCreateShareResponse, v10);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001BAAAC;
  v15[3] = &unk_10064A5D0;
  __int128 v12 = *(_OWORD *)(a1 + 64);
  __int128 v18 = *(_OWORD *)(a1 + 48);
  __int128 v19 = v12;
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  sub_1001BAC74(v8, v9, v11, v15);
}

void sub_1001BAAAC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a3);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 shareVouchers]);
  uint64_t v8 = *(void *)(a1[7] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 displayInformationOpenGraphUrl]);
  uint64_t v11 = *(void *)(a1[8] + 8LL);
  __int128 v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v13 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  if (v13)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      uint64_t v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Failed to create share with partner, %@",  (uint8_t *)&v20,  0xCu);
    }
  }

  id v16 = *(void **)(*(void *)(a1[9] + 8LL) + 40LL);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 shareIdentifier]);
  if (v17)
  {
    [v16 setIdentifier:v17];
  }

  else
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[9] + 8) + 40) identifier]);
    [v16 setIdentifier:v18];
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL)) {
    BOOL v19 = 1LL;
  }
  else {
    BOOL v19 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL) == 0LL;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v19);
}

void sub_1001BAC74(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = *(void **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001BD060;
    v10[3] = &unk_10064A868;
    id v11 = v7;
    uint64_t v12 = a1;
    id v13 = v8;
    uint64_t v14 = a3;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_1001BAD2C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[4];
  id v12 = 0LL;
  id v5 = sub_1001BADA0(v4, a2, a3, &v12);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  id v7 = v12;
  uint64_t v8 = *(void *)(a1[6] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  uint64_t v10 = *(void *)(a1[8] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
}

id sub_1001BADA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a1) {
    goto LABEL_11;
  }
  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKDecryptionErrorDomain,  1LL,  0LL));
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      int v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Failed to decrypt share voucher: %@",  buf,  0xCu);
    }

    id v10 = v6;
    *a4 = v10;
LABEL_10:

LABEL_11:
    id v10 = 0LL;
    return v10;
  }

  id v18 = 0LL;
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  0LL,  0LL,  &v18));
  id v11 = v18;
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = PKLogFacilityTypeGetObject(33LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v12 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412290;
      int v20 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Failed to read share voucher %@",  buf,  0xCu);
    }

    id v16 = v12;
    *a4 = v16;

    goto LABEL_10;
  }

  return v10;
}

void sub_1001BAF64(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  id v11 = v10;
  if (v8)
  {
    id v12 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      int v28 = 138412290;
      id v29 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Share voucher: %@",  (uint8_t *)&v28,  0xCu);
    }

    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) sharedWebService]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessageDisplayInformationManager displayInformationForAccessPass:webService:]( &OBJC_CLASS___PKSharingMessageDisplayInformationManager,  "displayInformationForAccessPass:webService:",  v14,  v15));

    if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL)) {
      objc_msgSend(v16, "setOpenGraphURL:");
    }
    id v17 = objc_alloc_init(&OBJC_CLASS___PKSharingMesageProprietaryData);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) displayableSharedEntitlements]);
    [v17 setDisplayableSharedEntitlements:v18];

    objc_msgSend(v17, "setAccessType:", objc_msgSend(*(id *)(a1 + 32), "accessType"));
    id v12 = [[PKSharingPushProvisioningInvitation alloc] initWithDisplayInformation:v16 provisioningVouchersByOEM:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) activationOptions:*(void *)(a1 + 56) proprietaryData:v17];
    if (!v12)
    {
      uint64_t v19 = PDBasicError(@"Unable to create share");
      uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);
      uint64_t v21 = *(void *)(*(void *)(a1 + 72) + 8LL);
      id v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    int v28 = 138412802;
    id v29 = v23;
    __int16 v30 = 2112;
    id v31 = v12;
    __int16 v32 = 2112;
    uint64_t v33 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Created share for %@ with result %@ %@",  (uint8_t *)&v28,  0x20u);
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL)) {
    BOOL v25 = 1;
  }
  else {
    BOOL v25 = v12 == 0LL;
  }
  if (v25)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    __int128 v26 = objc_alloc_init(&OBJC_CLASS___PDCreateShareContext);
    -[PDCreateShareContext addInvite:primary:](v26, "addInvite:primary:", v12, 1LL);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v12 provisioningCredentialHash]);
    -[PDCreateShareContext setExpectedProvisioningCredentialHash:](v26, "setExpectedProvisioningCredentialHash:", v27);

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_1001BB6EC(_Unwind_Exception *a1)
{
}

void sub_1001BB718(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) shareData]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001BB7F4;
  v15[3] = &unk_10064A648;
  id v10 = *(void **)(a1 + 48);
  id v16 = *(id *)(a1 + 40);
  id v17 = v6;
  uint64_t v11 = *(void *)(a1 + 56);
  id v18 = v7;
  uint64_t v19 = v11;
  id v12 = v6;
  id v13 = v7;
  sub_1001BA3F8(v8, v14, v10, v15);
}

uint64_t sub_1001BB7F4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) == 0LL;
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = !v4;
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  v5);
}

void sub_1001BB840(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001BB910;
  v15[3] = &unk_1006475D0;
  id v10 = *(void **)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_1001BA6B4(v8, v9, v10, v15);
}

void sub_1001BB910(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setFidoSignedChallenge:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL);
}

void sub_1001BB994(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___PDSharingManagementEmptyResponse, v10);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001BBA64;
  v14[3] = &unk_10064A670;
  __int128 v17 = *(_OWORD *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  sub_1001BAC74(v8, v9, v11, v14);
}

void sub_1001BBA64(void *a1, void *a2, id obj)
{
  id v6 = obj;
  id v7 = a2;
  *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = v7 != 0LL;
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_1001BBAF8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    int v14 = 138412546;
    id v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Updated share for %@ with result %@",  (uint8_t *)&v14,  0x16u);
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  char v13 = *(_BYTE *)(v12 + 24);
  if (v13) {
    char v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) == 0LL;
  }
  *(_BYTE *)(v12 + 24) = v13;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

NSCopying *__cdecl sub_1001BBEA4(id a1, PKPassShare *a2)
{
  return (NSCopying *)-[PKPassShare identifier](a2, "identifier");
}

void sub_1001BBEAC(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  if (!v7 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 statuses]);
    if (v6)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      void v8[2] = sub_1001BBFBC;
      v8[3] = &unk_10064A700;
      id v9 = *(id *)(a1 + 32);
      uint64_t v10 = v5;
      [v6 enumerateKeysAndObjectsUsingBlock:v8];
    }

    else
    {
      -[NSMutableArray addObjectsFromArray:](v5, "addObjectsFromArray:", *(void *)(a1 + 40));
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1001BBFBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  if (v7)
  {
    id v8 = [v6 unsignedIntegerValue];
    if (v8 != (id)405)
    {
      if (v8 == (id)404)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(33LL);
        __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 138412290;
          id v18 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: unable to find share %@ to revoke. Revoking it to clean up local state",  (uint8_t *)&v17,  0xCu);
        }
      }

      else if (v8 != (id)200)
      {
        uint64_t v9 = PKLogFacilityTypeGetObject(33LL);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 138412546;
          id v18 = v6;
          __int16 v19 = 2112;
          id v20 = v5;
          uint64_t v11 = "SharingManagementService: unknown result '%@' returned for share %@";
          uint64_t v12 = v10;
          uint32_t v13 = 22;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v17, v13);
          goto LABEL_10;
        }

        goto LABEL_10;
      }

      [*(id *)(a1 + 40) addObject:v7];
      goto LABEL_15;
    }

    uint64_t v14 = PKLogFacilityTypeGetObject(33LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v5;
      uint64_t v11 = "SharingManagementService: share %@ is not revokable";
      uint64_t v12 = v10;
      uint32_t v13 = 12;
      goto LABEL_9;
    }

void sub_1001BC278(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001BC32C;
  v8[3] = &unk_10064A750;
  id v9 = a4;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v6;
  id v11 = *(id *)(a1 + 48);
  id v7 = v9;
  sub_1001BC44C(v5, v6, 1, v8);
}

void sub_1001BC32C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if (v6 | *(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412802;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      unint64_t v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Failed to prewarmed create share for pass %@. \n certificateError: %@ \n fidoError: %@",  (uint8_t *)&v11,  0x20u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001BC44C(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 fidoProfile]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 devicePrimaryPaymentApplication]);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 dpanIdentifier]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) objectForKeyedSubscript:v11]);
    if (!v12
      || (a3 & 1) != 0
      || ([*(id *)(a1 + 16) setObject:0 forKeyedSubscript:v11],
          double Current = CFAbsoluteTimeGetCurrent(),
          [v12 createdAt],
          Current - v14 >= 300.0))
    {
      __int16 v15 = objc_alloc_init(&OBJC_CLASS___PDSharingManagementRetrieveFIDOChallengeRequest);
      -[PDSharingManagementRetrieveFIDOChallengeRequest setDpanIdentifier:](v15, "setDpanIdentifier:", v11);
      -[PDSharingManagementRetrieveFIDOChallengeRequest setFidoProfile:](v15, "setFidoProfile:", v9);
      unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 passTypeIdentifier]);
      -[PDSharingManagementRequest setRegionIdentifier:](v15, "setRegionIdentifier:", v16);

      uint64_t v18 = objc_opt_class(&OBJC_CLASS___PDSharingManagementRetrieveFIDOChallengeResponse, v17);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_1001BCF74;
      v19[3] = &unk_10064A840;
      id v23 = v8;
      char v24 = a3;
      id v20 = v9;
      uint64_t v21 = a1;
      id v22 = v11;
      sub_1001BAC74(a1, v15, v18, v19);
    }

    else
    {
      (*((void (**)(id, void *, void))v8 + 2))(v8, v12, 0LL);
    }
  }
}

void sub_1001BC62C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 devicePrimaryPaymentApplication]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 dpanIdentifier]);

    id v9 = objc_alloc_init(&OBJC_CLASS___PDSharingManagementRetrievePartnerEncryptionCertificateRequest);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 passTypeIdentifier]);
    -[PDSharingManagementRequest setRegionIdentifier:](v9, "setRegionIdentifier:", v10);

    int v11 = (void *)objc_claimAutoreleasedReturnValue([v6 serialNumber]);
    -[PDSharingManagementRetrievePartnerEncryptionCertificateRequest setPassSerialNumber:]( v9,  "setPassSerialNumber:",  v11);

    uint64_t v13 = objc_opt_class(&OBJC_CLASS___PDSharingManagementRetrievePartnerEncryptionCertificateResponse, v12);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001BC768;
    v15[3] = &unk_10064A7A0;
    id v16 = v8;
    id v17 = v5;
    id v14 = v8;
    sub_1001BC8A0(a1, v9, v13, v15);
  }
}

void sub_1001BC768(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Unable to fetch partner encryption certificate for dpan %@",  (uint8_t *)&v13,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([v5 certificate]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 supportedEncryptionSchemes]);
    (*(void (**)(uint64_t, void *, void *, void))(v10 + 16))(v10, v11, v12, 0LL);
  }
}

void sub_1001BC8A0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001BD2E4;
    v10[3] = &unk_10064A868;
    id v11 = v7;
    uint64_t v12 = a1;
    id v13 = v8;
    uint64_t v14 = a3;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_1001BC958(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001BCA20;
  v12[3] = &unk_10064A7C8;
  __int128 v15 = *(_OWORD *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 64);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  sub_1001BC44C(v8, v9, 0, v12);
}

void sub_1001BCA20(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 challenge]);
  uint64_t v8 = *(void *)(a1[6] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = objc_claimAutoreleasedReturnValue([v6 profile]);
  uint64_t v11 = *(void *)(a1[7] + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  uint64_t v13 = *(void *)(a1[8] + 8LL);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v5;
  id v15 = v5;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[8] + 8LL) + 40LL) != 0LL);
}

void sub_1001BCAE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001BCB94;
  v12[3] = &unk_10064A7F0;
  id v14 = v7;
  uint64_t v15 = v8;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v12];
}

uint64_t sub_1001BCB94(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 targetDevice]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001BCBDC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) devicePrimaryPaymentApplication]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 subcredentials]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 anyObject]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);

  id v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) relyingPartyIdentifier]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accountHash]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) keyHash]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "pk_decodeHexadecimal"));
  uint64_t v16 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  0LL);
  uint64_t v17 = *(void *)(a1 + 40);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1001BCD9C;
  v21[3] = &unk_10063C838;
  __int128 v24 = *(_OWORD *)(a1 + 72);
  id v22 = v6;
  id v23 = v7;
  id v18 = v6;
  id v19 = v7;
  [v11 signWithFidoKeyForRelyingParty:v12 relyingPartyAccountHash:v13 fidoKeyHash:v15 challenge:v16 publicKeyIdentifier:v20 externalizedAuth:v17 completion:v21];
}

void sub_1001BCD9C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a3);
  id v10 = a3;
  uint64_t v6 = *(void *)(a1[7] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  if (v10) {
    BOOL v9 = 1LL;
  }
  else {
    BOOL v9 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL) == 0LL;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v9);
}

void sub_1001BCE44(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = @"No";
    if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL)) {
      id v10 = @"Yes";
    }
    uint64_t v11 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    int v13 = 138412546;
    id v14 = v10;
    __int16 v15 = 2112;
    uint64_t v16 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: attempted to sign fido challenge success: %@, error: %@",  (uint8_t *)&v13,  0x16u);
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL)) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  }
  (*(void (**)(void, uint64_t))(a1[4] + 16LL))(a1[4], v12);
}

void sub_1001BCF74(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v10 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 keyHash]);
    [v6 setKeyHash:v7];

    id v8 = objc_alloc_init(&OBJC_CLASS___PDFidoChallenge);
    -[PDFidoChallenge setProfile:](v8, "setProfile:", *(void *)(a1 + 32));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v10 fidoChallenge]);
    -[PDFidoChallenge setChallenge:](v8, "setChallenge:", v9);

    if (*(_BYTE *)(a1 + 64))
    {
      -[PDFidoChallenge setCreatedAt:](v8, "setCreatedAt:", CFAbsoluteTimeGetCurrent());
      [*(id *)(*(void *)(a1 + 40) + 16) setObject:v8 forKeyedSubscript:*(void *)(a1 + 48)];
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1001BD060(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) regionIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 regionForIdentifier:v5]);
  id v7 = v6;
  if (v6) {
    id v8 = v6;
  }
  else {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v4 primaryRegion]);
  }
  BOOL v9 = v8;

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 partnerServiceURL]);
  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 targetDevice]);
    [*(id *)(a1 + 32) setTargetDevice:v11];
    uint64_t v12 = *(void **)(a1 + 32);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 appleAccountInformation]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 urlRequestWithServiceURL:v10 appleAccountInformation:v13]);

    sub_1001BD200(*(void *)(a1 + 40), v3, *(void *)(a1 + 56), v14, *(void **)(a1 + 48));
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Error: unable to find partner services url for request",  v18,  2u);
    }

    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 1LL));
    (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v11);
  }
}

void sub_1001BD200(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    id v11 = a4;
    id v12 = [v9 nextTaskID];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1001BD534;
    v13[3] = &unk_10064A8B8;
    id v14 = v9;
    uint64_t v16 = a3;
    id v15 = v10;
    [v14 performRequest:v11 taskIdentifier:v12 retries:1 authHandling:0 completionHandler:v13];
  }
}

void sub_1001BD2E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) regionIdentifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 regionForIdentifier:v5]);
  id v7 = v6;
  if (v6) {
    id v8 = v6;
  }
  else {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v4 primaryRegion]);
  }
  id v9 = v8;

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 brokerURL]);
  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 targetDevice]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceID]);

    if (v13)
    {
      [*(id *)(a1 + 32) setTargetDevice:v11];
      id v14 = *(void **)(a1 + 32);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 appleAccountInformation]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [v14 urlRequestWithServiceURL:v10 deviceIdentifier:v13 appleAccountInformation:v15]);

      sub_1001BD200(*(void *)(a1 + 40), v3, *(void *)(a1 + 56), v16, *(void **)(a1 + 48));
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v23 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Error: failed to fetch device id",  v23,  2u);
      }

      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 1LL));
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v16);
    }
  }

  else
  {
    uint64_t v17 = PKLogFacilityTypeGetObject(33LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Error: unable to find broker url for request",  buf,  2u);
    }

    uint64_t v19 = *(void *)(a1 + 48);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 1LL));
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0LL, v11);
  }
}

void sub_1001BD534(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v23 = 0LL;
  __int128 v24 = &v23;
  uint64_t v25 = 0x3032000000LL;
  __int128 v26 = sub_1001BA27C;
  id v27 = sub_1001BA28C;
  id v28 = 0LL;
  id v10 = (void *)a1[4];
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472LL;
  id v18 = sub_1001BD718;
  uint64_t v19 = &unk_10064A890;
  uint64_t v11 = a1[6];
  uint64_t v21 = &v23;
  uint64_t v22 = v11;
  id v12 = v7;
  id v20 = v12;
  id v13 = [v10 _resultForResponse:v8 error:v9 successHandler:&v16];
  if (!v9 && v13 != (id)1)
  {
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    __int16 v30 = @"Received non 2XX http status code";
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL,  v16,  v17,  v18,  v19));
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKSharingErrorDomain,  7LL,  v14));
  }

  if (v9) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = v24[5];
  }
  (*(void (**)(void, uint64_t, id))(a1[5] + 16LL))(a1[5], v15, v9);

  _Block_object_dispose(&v23, 8);
}

void sub_1001BD6F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

BOOL sub_1001BD718(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 48)) initWithData:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) != 0LL;
}

id sub_1001BDAB0(uint64_t a1, uint64_t a2)
{
  return +[PaymentRewardsRedemptionDetails deletePaymentRewardsRedemptionDetailsForPKPaymentRewardsRedemptionPID:inDatabase:]( &OBJC_CLASS___PaymentRewardsRedemptionDetails,  "deletePaymentRewardsRedemptionDetailsForPKPaymentRewardsRedemptionPID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

uint64_t sub_1001BDAC8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) details]);
  id v3 =  +[PaymentRewardsRedemptionDetails insertOrUpdatePaymentRewardsRedemptionDetails:forPaymentRewardsRedemptionPID:inDatabase:]( &OBJC_CLASS___PaymentRewardsRedemptionDetails,  "insertOrUpdatePaymentRewardsRedemptionDetails:forPaymentRewardsRedemptionPID:inDatabase:",  v2,  *(void *)(a1 + 48),  *(void *)(a1 + 40));

  return 1LL;
}

id sub_1001BDE74(id a1, NSString *a2)
{
  return -[NSString lowercaseString](a2, "lowercaseString");
}

id sub_1001BDE7C(id a1, NSString *a2)
{
  return -[NSString uppercaseString](a2, "uppercaseString");
}

void sub_1001BDE84(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentRewardsRedemption),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentRewardsRedemption paymentRewardsRedemption](v5, "paymentRewardsRedemption"));
  [v3 safelyAddObject:v4];
}

void sub_1001BE094(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PaymentRewardsRedemption),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PaymentRewardsRedemption paymentRewardsRedemption](v5, "paymentRewardsRedemption"));
  [v3 safelyAddObject:v4];
}

void sub_1001BE790(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001BEA08(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
}

void sub_1001BEA10(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
}

void sub_1001BEA18(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentRewardsRedemption setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1001BEA5C(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPaymentRewardsRedemption setStatusLink:](v4, "setStatusLink:", v5);
}

void sub_1001BEAA8(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
}

void sub_1001BEAB0(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentRewardsRedemption setUpdatedAt:](v4, "setUpdatedAt:", v5);
}

void sub_1001BEAFC(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentRewardsRedemption setCreatedAt:](v4, "setCreatedAt:", v5);
}

uint64_t sub_1001BF438(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 48)) initWithPeerPaymentAccount:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40) associatedPeerPaymentAccountPID:*(void *)(a1 + 56)];
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionSource insertTransactionSourceWithType:inDatabase:]( &OBJC_CLASS___TransactionSource,  "insertTransactionSourceWithType:inDatabase:",  1LL,  *(void *)(a1 + 40)));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 persistentID]));
    [v2 setValue:v4 forProperty:@"transaction_source_pid"];
  }

  return 1LL;
}

id sub_1001BFD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___PeerPaymentAccount,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1001C0300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PeerPaymentAccount),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[PeerPaymentAccount peerPaymentAccount](v4, "peerPaymentAccount"));
  if (v3) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_1001C14A8(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C14B0(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentAccount setCreatedDate:](v4, "setCreatedDate:", v5);
}

void sub_1001C14FC(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentAccount setIdentifiedDate:](v4, "setIdentifiedDate:", v5);
}

void sub_1001C1548(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setRole:](v4, "setRole:", [a3 integerValue]);
}

void sub_1001C158C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1001C15D0(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setStateReason:](v4, "setStateReason:", [a3 integerValue]);
}

void sub_1001C1614(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setSendRestrictionType:](v4, "setSendRestrictionType:", [a3 integerValue]);
}

void sub_1001C1658(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setReceiveRestrictionType:](v4, "setReceiveRestrictionType:", [a3 integerValue]);
}

void sub_1001C169C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setStage:](v4, "setStage:", [a3 integerValue]);
}

void sub_1001C16E0(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C16E8(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C16F0(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccount setMaximumBalance:](v4, "setMaximumBalance:", v6);
}

void sub_1001C1740(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setIdentityVerificationRequired:]( v4,  "setIdentityVerificationRequired:",  [a3 BOOLValue]);
}

void sub_1001C1784(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPeerPaymentAccount setAmountRemainingUntilIdentityVerification:]( v4,  "setAmountRemainingUntilIdentityVerification:",  v6);
}

void sub_1001C17D4(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setTermsAcceptanceRequired:](v4, "setTermsAcceptanceRequired:", [a3 BOOLValue]);
}

void sub_1001C1818(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setAccountStateDirty:](v4, "setAccountStateDirty:", [a3 BOOLValue]);
}

void sub_1001C185C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPeerPaymentAccount setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_1001C18A8(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccount setProactiveFetchPeriod:](v4, "setProactiveFetchPeriod:");
}

void sub_1001C18E8(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccount setAccountFetchAfterTransactionWaitPeriod:](v4, "setAccountFetchAfterTransactionWaitPeriod:");
}

void sub_1001C1928(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccount setAccountFetchAfterTransactionWaitTolerance:]( v4,  "setAccountFetchAfterTransactionWaitTolerance:");
}

void sub_1001C1968(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C1970(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPeerPaymentAccount setTermsURL:](v4, "setTermsURL:", v5);
}

void sub_1001C19BC(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPeerPaymentAccount setAssociatedPassURL:](v4, "setAssociatedPassURL:", v5);
}

void sub_1001C1A08(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C1A10(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C1A18(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setPendingPaymentCount:](v4, "setPendingPaymentCount:", [a3 integerValue]);
}

void sub_1001C1A5C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setIdentityVerificationForDisbursementsRequired:]( v4,  "setIdentityVerificationForDisbursementsRequired:",  [a3 BOOLValue]);
}

void sub_1001C1AA0(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setHasDisplayedAssociatedAccountActiveNotification:]( v4,  "setHasDisplayedAssociatedAccountActiveNotification:",  [a3 BOOLValue]);
}

void sub_1001C1AE4(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  -[PKPeerPaymentAccount setCloudStoreZoneNames:](v4, "setCloudStoreZoneNames:", v5);
}

void sub_1001C1B64(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1001C1B6C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setDeviceScoreEncryptedPayloadVersion:]( v4,  "setDeviceScoreEncryptedPayloadVersion:",  [a3 integerValue]);
}

void sub_1001C1BB0(id a1, PKPeerPaymentAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccount setHasRecurringPayments:](v4, "setHasRecurringPayments:", [a3 BOOLValue]);
}

void sub_1001C2024(id a1, PKAppleBalanceAccountSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAppleBalanceAccountSummary setCurrentBalance:](v4, "setCurrentBalance:", v6);
}

void sub_1001C2150(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001C24E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001C24F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001C2508(uint64_t a1)
{
}

BOOL sub_1001C2510(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) secondaryAccessory]);
  if (!v2)
  {
    id v3 = 0LL;
    goto LABEL_5;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileAccessory insertAccessory:inDatabase:]( &OBJC_CLASS___TileAccessory,  "insertAccessory:inDatabase:",  v2,  *(void *)(a1 + 40)));
  if (v3)
  {
LABEL_5:
    id v5 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 48) forSecondaryAccessory:v3 inDatabase:*(void *)(a1 + 40)];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
    goto LABEL_6;
  }

  BOOL v4 = 0LL;
LABEL_6:

  return v4;
}

void sub_1001C2728(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _BYTE *a6)
{
  id v21 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if ((id)*a4 == v21) {
    id v9 = 0LL;
  }
  else {
    id v9 = (void *)_DateForSQLValue(*a4);
  }
  id v10 = (id)a4[1];
  if (v10 == v21) {
    id v10 = 0LL;
  }
  id v11 = v10;
  id v12 = (id)a4[2];
  if (v12 == v21) {
    id v12 = 0LL;
  }
  id v13 = v12;
  if (v9)
  {
    if (v11)
    {
      [v11 doubleValue];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSTimeZone timeZoneForSecondsFromGMT:]( &OBJC_CLASS___NSTimeZone,  "timeZoneForSecondsFromGMT:",  (uint64_t)v14));
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    uint64_t v16 = *(void **)(a1 + 32);
    id v17 = [[PKDateContainer alloc] initWithDate:v9 timeZone:v15];
    [v16 setAvailableFrom:v17];
  }

  if (v13)
  {
    id v18 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileAccessory alloc],  "initWithPersistentID:inDatabase:",  [v13 longLongValue],  *(void *)(a1 + 40));
    uint64_t v19 = *(void **)(a1 + 32);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(-[TileAccessory passTileAccessory](v18, "passTileAccessory"));
    [v19 setSecondaryAccessory:v20];
  }

  *a6 = 1;
}

uint64_t sub_1001C2E34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C2F2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3020(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3130(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C330C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3488(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3590(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C365C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C3838(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C45AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C471C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001C4828(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_1001C493C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_1001C4A60(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_1001C4B88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001C4D64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 count];
  id v8 = -[NSMutableSet initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithCapacity:", v7);
  id v9 = -[NSMutableSet initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithCapacity:", v7);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (id i = 0LL; i != v12; id i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier", (void)v19));
        if ((-[NSMutableSet containsObject:](v8, "containsObject:", v16) & 1) == 0)
        {
          -[NSMutableSet addObject:](v8, "addObject:", v16);
          -[NSMutableSet addObject:](v9, "addObject:", v15);
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v12);
  }

  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    id v18 = -[NSMutableSet copy](v9, "copy");
    (*(void (**)(uint64_t, id, id))(v17 + 16))(v17, v18, v6);
  }
}

uint64_t sub_1001C560C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

uint64_t sub_1001C57E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

uint64_t sub_1001C5924(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001C5F14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 count];
  if (a3 || !v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      id v11 = "-[PDAccountService virtualCardsInKeychainWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Failed to retrieve virtual cards stored in keychain for method: %s",  (uint8_t *)&v10,  0xCu);
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
}

uint64_t sub_1001C6E1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001C8700(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

uint64_t sub_1001CA320(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[Pass predicateForUniqueID:](&OBJC_CLASS___Pass, "predicateForUniqueID:", v3));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:orderingProperties:orderingDirections:limit:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:orderingProperties:orderingDirections:limit:",  v4,  v5,  0LL,  0LL,  1LL));

    uint64_t v10 = 0LL;
    id v11 = &v10;
    uint64_t v12 = 0x2020000000LL;
    uint64_t v13 = 0LL;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001CAA68;
    v9[3] = &unk_10064AEF8;
    void v9[4] = &v10;
    [v6 enumeratePersistentIDsUsingBlock:v9];
    uint64_t v7 = v11[3];
    _Block_object_dispose(&v10, 8);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_1001CA428( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001CAA68(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

void sub_1001CB154(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001CB310(id a1, PKCreditAccountMergeSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditAccountMergeSummary setMergeDate:](v4, "setMergeDate:", v5);
}

void sub_1001CB35C(id a1, PKCreditAccountMergeSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountMergeSummary setTotalBalance:](v4, "setTotalBalance:", v6);
}

uint64_t sub_1001CC140()
{
  if (qword_100707A28 != -1) {
    dispatch_once(&qword_100707A28, &stru_10064AF78);
  }
  off_100705B78 = (uint64_t (*)())dlsym((void *)qword_100707A20, "BYSetupAssistantNeedsToRun");
  return off_100705B78();
}

void sub_1001CC194(id a1)
{
  qword_100707A20 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

Class sub_1001CC1BC()
{
  if (qword_100707A28 != -1) {
    dispatch_once(&qword_100707A28, &stru_10064AF78);
  }
  Class result = objc_getClass("BYSetupUserDisposition");
  qword_100707A30 = (uint64_t)result;
  off_100705B80 = (uint64_t (*)())sub_1001CC218;
  return result;
}

id sub_1001CC218()
{
  return (id)qword_100707A30;
}

uint64_t sub_1001CC224()
{
  if (qword_100707A28 != -1) {
    dispatch_once(&qword_100707A28, &stru_10064AF78);
  }
  uint64_t result = *(void *)dlsym((void *)qword_100707A20, "BYSetupAssistantFinishedDarwinNotification");
  qword_100707A38 = result;
  off_100705B88 = sub_1001CC28C;
  return result;
}

uint64_t sub_1001CC28C()
{
  return qword_100707A38;
}

void sub_1001CCA14(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001CCABC;
  v7[3] = &unk_100639350;
  id v8 = a2;
  id v9 = a3;
  id v10 = *(id *)(a1 + 32);
  id v5 = v9;
  id v6 = v8;
  [v10 onWorkQueue:v7];
}

void sub_1001CCABC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountStatus];
  if (*(void *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "setOperationError:");
    id v3 = *(void **)(a1 + 48);
    uint64_t v4 = 3LL;
  }

  else
  {
    id v5 = v2;
    id v3 = *(void **)(a1 + 48);
    if (*(void *)(a1 + 32)) {
      BOOL v6 = v5 == (id)1;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([v3 errorWithCode:-4008 description:@"User has an invalid account state"]);
      [*(id *)(a1 + 48) setOperationError:v7];
      [*(id *)(a1 + 48) advanceToNextState:3];

      return;
    }

    uint64_t v4 = 5LL;
  }

  [v3 advanceToNextState:v4];
}

void sub_1001CDA1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PDWebService);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

id sub_1001CDBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___WebService,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1001CDEF4(id a1, PDWebService *a2, id a3)
{
}

void sub_1001CDEFC(id a1, PDWebService *a2, id a3)
{
}

void sub_1001CDF04(id a1, PDWebService *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", a3));
  -[PDWebService setServiceURL:](v4, "setServiceURL:", v5);
}

void sub_1001CDF68(id a1, PDWebService *a2, id a3)
{
}

void sub_1001CDF70(id a1, PDWebService *a2, id a3)
{
}

id sub_1001CE200(uint64_t a1)
{
  return [*(id *)(a1 + 32) applyPushNotificationToken:*(void *)(a1 + 40)];
}

void sub_1001CE3D0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pushNotificationTopics]);
  [*(id *)(a1 + 32) applyPushNotificationToken:*(void *)(a1 + 40)];
  if ([v2 containsObject:*(void *)(a1 + 48)]) {
    [*(id *)(a1 + 32) handlePushNotificationForTopic:*(void *)(a1 + 48) userInfo:*(void *)(a1 + 56)];
  }
}

id sub_1001CE58C(uint64_t a1)
{
  return [*(id *)(a1 + 32) applyPushNotificationToken:*(void *)(a1 + 40)];
}

void sub_1001CEBF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1001CEC04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleToken:0 forTokenInfo:*(void *)(a1 + 32) fromTimeout:1];
}

void sub_1001CF240(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = objc_alloc_init(&OBJC_CLASS___PKPassProvisioningMetadata);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v6 withProperties:v5 values:a3];

  [*(id *)(a1 + 40) addObject:v6];
}

void sub_1001CF4BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1001CF68C(id a1, PKPassProvisioningMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassProvisioningMetadata setSourceDeviceType:]( v4,  "setSourceDeviceType:",  PKPassProvisioningMetadataSourceDeviceTypeFromString(a3));
}

void sub_1001CF6D0(id a1, PKPassProvisioningMetadata *a2, id a3)
{
}

void sub_1001CF8E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v9 = -[PKPendingProvisioningReceipt initForDatabase]( objc_alloc(&OBJC_CLASS___PKPendingProvisioningReceipt),  "initForDatabase");
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v5 values:a3];
  id v6 = [v5 indexOfObject:@"f"];

  id v7 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [PendingProvisioning alloc],  "initWithPersistentID:inDatabase:",  [*(id *)(a3 + 8 * (void)v6) longLongValue],  *(void *)(a1 + 40));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[PendingProvisioning pendingProvisioning](v7, "pendingProvisioning"));
  [v9 setPendingProvisioning:v8];

  [*(id *)(a1 + 48) addObject:v9];
}

void sub_1001CFB8C(uint64_t a1, uint64_t a2)
{
  id v2 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PendingProvisioningReceipt),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  -[PendingProvisioningReceipt deleteFromDatabase](v2, "deleteFromDatabase");
}

void sub_1001CFCC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v6 = a2;
  objc_msgSend((id)objc_opt_class(v5, v7), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v6, a3);
  id v8 = [v6 indexOfObject:@"f"];

  id v11 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [PendingProvisioning alloc],  "initWithPersistentID:inDatabase:",  [*(id *)(a3 + 8 * (void)v8) longLongValue],  *(void *)(a1[4] + 8));
  id v9 = (void *)a1[6];
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[PendingProvisioning pendingProvisioning](v11, "pendingProvisioning"));
  [v9 setPendingProvisioning:v10];
}

void sub_1001D0114(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
}

void sub_1001D011C(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPendingProvisioningReceipt setType:](v4, "setType:", PKPendingProvisioningReceiptTypeFromString(a3));
}

void sub_1001D0160(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPendingProvisioningReceipt setCreatedAt:](v4, "setCreatedAt:");
}

void sub_1001D01A0(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
}

void sub_1001D01A8(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    uint64_t v5 = a2;
    id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___NSError, v6),  v4,  0LL);
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

    -[PKPendingProvisioningReceipt setError:](v5, "setError:", v8);
  }

void sub_1001D0438(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  if (*a4)
  {
    id v5 = *a4;
    id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pk_stringIfNotEmpty"));
    objc_msgSend(*(id *)(a1 + 32), "pk_safelyAddObject:", v6);
  }

void sub_1001D1374(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001D1410;
  v4[3] = &unk_1006392B0;
  id v5 = v2;
  id v6 = *(id *)(a1 + 40);
  [v5 insertOrReplaceAccount:v3 extended:1 deleteSensitiveData:0 completion:v4];
}

void sub_1001D1410(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[3];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _mockAccountUsers]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
  id v6 = [v3 insertOrUpdateAccountUsers:v4 forAccountWithIdentifier:v5];

  id v7 = *(void **)(a1 + 32);
  id v8 = (void *)v7[3];
  id v11 = (id)objc_claimAutoreleasedReturnValue([v7 _mockPhysicalCards]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
  id v10 = [v8 replacePhysicalCards:v11 forAccountWithIdentifier:v9];
}

void sub_1001D15B8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) sharedWebServiceContext]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 regions]);

  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v6)
  {
    id v7 = v6;
    LOBYTE(v_Block_object_dispose(va, 8) = 0;
    uint64_t v9 = *(void *)v40;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v40 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v39 + 1) + 8LL * (void)i);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v11, (void)v39));
        uint64_t v13 = v12;
        if ((v8 & 1) != 0) {
          unsigned int v8 = 1;
        }
        else {
          unsigned int v8 = [v12 hasAccounts];
        }
        double v14 = (void *)objc_claimAutoreleasedReturnValue([v13 accountServiceURL]);
        if (v14) {
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v14, v11);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v39 objects:v47 count:16];
    }

    while (v7);

    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = (_BYTE *)(v15 + 80);
    if (((v8 ^ (*(_BYTE *)(v15 + 80) == 0)) & 1) != 0)
    {
      int v17 = 0;
      if (!*(_BYTE *)(v15 + 80)) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
  }

  else
  {

    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v16 = (_BYTE *)(v18 + 80);
    if (!v19)
    {
      if ((PKEqualObjects(v4, *(void *)(*(void *)(a1 + 32) + 72LL)) & 1) != 0) {
        goto LABEL_50;
      }
      LOBYTE(v17) = 0;
      goto LABEL_33;
    }

    LOBYTE(v_Block_object_dispose(va, 8) = 0;
  }

  *uint64_t v16 = v8;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 80LL)) {
      __int128 v22 = @"YES";
    }
    else {
      __int128 v22 = @"NO";
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v44 = (const char *)v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "hasAccounts changed to %@", buf, 0xCu);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  int v17 = 1;
  if (*(_BYTE *)(v15 + 80))
  {
LABEL_24:
    if (!objc_msgSend(*(id *)(v15 + 64), "count", (void)v39))
    {
      uint64_t v23 = PKLogFacilityTypeGetObject(14LL);
      __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "hasAccounts YES but no accounts on disk",  buf,  2u);
      }

      int v17 = 1;
    }
  }

void sub_1001D1A4C(id a1, NSArray *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Account updated following context and account URL change",  v5,  2u);
  }
}

void sub_1001D1C20(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
        ++v6;
      }

      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void *sub_1001D1D6C(void *result)
{
  uint64_t v1 = result[4];
  if (*(_BYTE *)(v1 + 56))
  {
    id v2 = result;
    *(_BYTE *)(v1 + 56) = 0;
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Attempting to restore accounts after database restoration",  v5,  2u);
    }

    return [(id)v2[4] updateAccountsWithCompletion:&stru_10064B1E8];
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1001D1DFC(id a1, NSArray *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Accounts updated following database restoration",  v5,  2u);
  }
}

void sub_1001D2868(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D28F4;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_1001D28F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D29C4(uint64_t a1)
{
  id v2 =  objc_msgSend( *(id *)(a1 + 32),  "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57));
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D2A5C;
    block[3] = &unk_10063A830;
    id v6 = v3;
    dispatch_async(v4, block);
  }

uint64_t sub_1001D2A5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D2EBC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _queueIndexOfAccountWithIdentifier:*(void *)(a1 + 40)];
  if (v2 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v3 = 0LL;
  }

  else
  {
    id v4 = v2;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) objectAtIndex:v2]);
    [*(id *)(*(void *)(a1 + 32) + 64) removeObjectAtIndex:v4];
    [*(id *)(*(void *)(a1 + 32) + 24) deleteAccountWithIdentifier:*(void *)(a1 + 40)];
    if (v3)
    {
      [*(id *)(a1 + 32) postAccountChangedNotification];
      id v5 = *(void **)(a1 + 32);
      uint64_t v11 = v3;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
      [v5 _processDeletedAccounts:v6];
    }
  }

  __int128 v7 = *(void **)(a1 + 48);
  if (v7)
  {
    __int128 v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D3008;
    block[3] = &unk_10063A830;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_1001D3008(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D30E0(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1001D3180;
    v4[3] = &unk_100639AC8;
    void v4[4] = *(void *)(a1 + 32);
    id v5 = *(id *)(a1 + 48);
    [v2 accountWithIdentifier:v3 completion:v4];
  }

void sub_1001D3180(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001D3210;
  v7[3] = &unk_1006396B0;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1001D3210(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001D32EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1001D3384;
    v6[3] = &unk_1006396B0;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_1001D3384(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001D3420(id a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished refreshing BAA certs and keys", v3, 2u);
  }
}

void sub_1001D3488(id a1, PKApplePayTrustSession *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    -[PKApplePayTrustSession deleteKeyWithIdentifier:]( v2,  "deleteKeyWithIdentifier:",  PKApplePayTrustKeyDefaultIdentifier);
    -[PKApplePayTrustSession invalidateSession](v3, "invalidateSession");
    uint64_t Object = PKLogFacilityTypeGetObject(15LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = 0;
      id v6 = "Apple Pay Trust key deleted.";
      id v7 = (uint8_t *)&v9;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
    }
  }

  else
  {
    uint64_t v8 = PKLogFacilityTypeGetObject(15LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      id v6 = "Failed to start Apple Pay Trust session for key deletion on iCloud log out.";
      id v7 = buf;
      goto LABEL_6;
    }
  }
}

void sub_1001D35D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D3654;
    block[3] = &unk_10063A830;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_1001D3654(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D3720(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1)
  {
    id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1001D37B0;
    v4[3] = &unk_1006396B0;
    id v6 = v1;
    id v5 = *(id *)(a1 + 40);
    dispatch_async(v3, v4);
  }

uint64_t sub_1001D37B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001D3BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v3, "accountManager:didAddAccount:") & 1) != 0) {
          objc_msgSend(v3, "accountManager:didAddAccount:", *(void *)(a1 + 40), v9, (void)v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

void sub_1001D3D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated user info for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D3DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated scheduled payments for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D3E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated physical cards for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D3F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated shared account cloud store for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D4008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated shared account users for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D40C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated promotions for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D4188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated enhanced merchants for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D4DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if (objc_msgSend(v9, "count", (void)v12) == (id)2)
        {
          __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:1]);
          if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdateAccount:oldAccount:") & 1) != 0) {
            [v3 accountManager:*(void *)(a1 + 40) didUpdateAccount:v11 oldAccount:v10];
          }
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }
}

uint64_t sub_1001D4F4C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_1001D4FE0(id a1, PKVirtualCard *a2, PKAccount *a3, NSError *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Completed attempt to proactively fetch virtual card",  v6,  2u);
  }
}

id sub_1001D5048(uint64_t a1)
{
  return +[PKHomeScreenWidgetController reloadWidget:budgeted:reason:]( &OBJC_CLASS___PKHomeScreenWidgetController,  "reloadWidget:budgeted:reason:",  PKHomeScreenWidgetKindAppleCard,  0LL,  *(void *)(a1 + 32));
}

void sub_1001D506C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = a3;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);

    int v10 = 138412546;
    uint64_t v11 = v9;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated payment plans for account %@ since recoveryPaymentPlansSupported is now YES or account state changed. Error: %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_1001D514C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector(v5, "accountManager:creditRecoveryPaymentPlansChangedForAccountIdentifier:") & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
    [v5 accountManager:v3 creditRecoveryPaymentPlansChangedForAccountIdentifier:v4];
  }
}

void sub_1001D51B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated shared account cloud store following an account becoming shared for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D5270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated shared account users following an account becoming shared for account %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001D5500(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveAccount:") & 1) != 0) {
          objc_msgSend(v3, "accountManager:didRemoveAccount:", *(void *)(a1 + 40), v9, (void)v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

void sub_1001D5720(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001D5800;
  v9[3] = &unk_10064B3F0;
  id v10 = v3;
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  id v15 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_1001D5800(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creditDetails]);
  id v3 = (NSString *)objc_claimAutoreleasedReturnValue([v2 currencyCode]);

  if (*(void *)(a1 + 32)) {
    BOOL v4 = v3 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    id v75 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
    id v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = PKCurrentUserAltDSID(v75);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [v5 _promoRewardsMerchantNamesFromDate:v6 toDate:v7 accountIdentifier:v8 altDSID:v10 rewardPercentage:&v75]);

    if ([v11 count] && (unint64_t)objc_msgSend(v11, "count") <= 3)
    {
      id v12 = v75;
      uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
      if (v12 == (id)v13)
      {
      }

      else
      {
        id v14 = (void *)v13;
        id v15 = v75;
        id v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));

        if (v15 != v16)
        {
          int v17 = 0;
          id v18 = 0LL;
          id v19 = 0LL;
          uint64_t v68 = 0LL;
          uint64_t v69 = 0LL;
          goto LABEL_14;
        }
      }
    }

    __int128 v20 = *(void **)(a1 + 40);
    uint64_t v21 = PKStartOfMonth(*(void *)(a1 + 48));
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    uint64_t v23 = PKEndOfMonth(*(void *)(a1 + 56));
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v26 = PKCurrentUserAltDSID(v24);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    id v74 = 0LL;
    id v28 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue( [v20 _rewardsAmountFromDate:v22 toDate:v24 accountIdentifier:v25 altDSID:v27 rewardTypes:&v74]);
    id v18 = v74;

    uint64_t v29 = PKCurrencyAmountCreate(v28, v3, 0LL);
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(v29);
    uint64_t v30 = *(void **)(a1 + 40);
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void *)(a1 + 56);
    uint64_t v33 = *(void *)(a1 + 64);
    uint64_t v34 = PKCurrentUserAltDSID(v69);
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    id v73 = 0LL;
    unsigned int v36 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue( [v30 _rewardsAmountFromDate:v31 toDate:v32 accountIdentifier:v33 altDSID:v35 rewardTypes:&v73]);
    id v19 = v73;

    uint64_t v37 = PKCurrencyAmountCreate(v36, v3, 0LL);
    uint64_t v68 = objc_claimAutoreleasedReturnValue(v37);

    int v17 = 1;
LABEL_14:
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v19 anyObject]);
    __int128 v39 = (char *)[v38 integerValue];

    if ((unint64_t)(v39 - 2) >= 2)
    {
      if (v39 == (char *)1)
      {
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) peerPaymentAccount]);
        __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 associatedPassUniqueID]);

        if (v42) {
          id v43 = v42;
        }
        else {
          id v43 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedPassUniqueID]);
        }
        __int128 v40 = v43;

        if (v17) {
          goto LABEL_25;
        }
      }

      else
      {
        __int128 v40 = 0LL;
        if (v17)
        {
LABEL_25:
          else {
            unsigned int v50 = [v18 containsObject:&off_1006901D0] ^ 1;
          }
          else {
            unsigned int v51 = [v19 containsObject:&off_1006901D0] ^ 1;
          }
          id v67 = v11;
          if (v50) {
            BOOL v52 = [v18 count] == (id)1;
          }
          else {
            BOOL v52 = 0;
          }
          id v53 = v18;
          if (v51)
          {
            id v54 = [v19 count];
            BOOL v55 = v54 == (id)1;
            if (v54 == (id)1 && v52)
            {
              id v57 = (void *)v68;
              id v18 = v53;
              id v47 = -[PDPassPaymentDailyDailyCashWithAmountUserNotification initWithDailyAmount:monthlyAmount:date:forPassUniqueIdentifier:dailyRewardTypes:monthlyRewardTypes:]( objc_alloc(&OBJC_CLASS___PDPassPaymentDailyDailyCashWithAmountUserNotification),  "initWithDailyAmount:monthlyAmount:date:forPassUniqueIdentifier:dailyRewardTypes:monthlyRewardTypes:",  v68,  v69,  *(void *)(a1 + 48),  v40,  v19,  v53);
              if (-[PDPassPaymentDailyDailyCashWithAmountUserNotification hasValidContent](v47, "hasValidContent"))
              {
                uint64_t v11 = v67;
LABEL_58:
                __int128 v63 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472LL;
                block[2] = sub_1001D5E10;
                block[3] = &unk_1006396B0;
                id v64 = *(id *)(a1 + 72);
                __int128 v71 = v47;
                id v72 = v64;
                id v65 = v47;
                dispatch_async(v63, block);

                goto LABEL_59;
              }

              uint64_t Object = PKLogFacilityTypeGetObject(14LL);
              __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              uint64_t v11 = v67;
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Daily Cash amount notification suppressed due to malformed content",  buf,  2u);
              }

              id v47 = 0LL;
LABEL_57:

              goto LABEL_58;
            }
          }

          else
          {
            BOOL v55 = 0;
          }

          uint64_t v58 = PKLogFacilityTypeGetObject(14LL);
          __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v59 = @"NO";
            if (v55) {
              __int128 v60 = @"YES";
            }
            else {
              __int128 v60 = @"NO";
            }
            if (v52) {
              __int128 v61 = @"YES";
            }
            else {
              __int128 v61 = @"NO";
            }
            *(_DWORD *)__int128 buf = 138413058;
            id v77 = v60;
            if (v51) {
              __int128 v62 = @"YES";
            }
            else {
              __int128 v62 = @"NO";
            }
            __int16 v78 = 2112;
            uint64_t v79 = v61;
            __int16 v80 = 2112;
            uint64_t v81 = v62;
            if (v50) {
              uint64_t v59 = @"YES";
            }
            __int16 v82 = 2112;
            __int128 v83 = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Daily cash notification suppressed due to a period of mixed destinations or statement credit; dailyPeriodC"
              "ontainsSingleDestination: %@; monthlyPeriodContainsSingleDestination: %@; dailyEventPeriodRedeemsToAccount"
              ": %@; monthlyEventPeriodRedeemsToAccount: %@",
              buf,
              0x2Au);
          }

          id v47 = 0LL;
          id v18 = v53;
          uint64_t v11 = v67;
LABEL_56:
          id v57 = (void *)v68;
          goto LABEL_57;
        }
      }
    }

    else
    {
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedPassUniqueID]);
      if (v17) {
        goto LABEL_25;
      }
    }

    id v44 = objc_alloc(&OBJC_CLASS___PDPassPaymentDailyDailyCashWithPercentageUserNotification);
    id v45 = v75;
    id v46 = objc_msgSend(v11, "pk_arrayCopy");
    id v47 = -[PDPassPaymentDailyDailyCashWithPercentageUserNotification initWithPercentage:merchantNames:monthlyAmount:date:forPassUniqueIdentifier:]( v44,  "initWithPercentage:merchantNames:monthlyAmount:date:forPassUniqueIdentifier:",  v45,  v46,  v69,  *(void *)(a1 + 48),  v40);

    uint64_t v48 = PKLogFacilityTypeGetObject(14LL);
    __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Daily Cash percent notification generated",  buf,  2u);
    }

    goto LABEL_56;
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
LABEL_59:
}

uint64_t sub_1001D5E10(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001D65D4(uint64_t a1)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        if (([v8 accountStateDirty] & 1) == 0)
        {
          char v5 = 1;
          [v8 setAccountStateDirty:1];
          id v9 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccount:v8];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v4);
  }

  else
  {
    char v5 = 0;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) accounts]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);
  uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v11));
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  if ((v5 & 1) != 0) {
    [*(id *)(a1 + 32) postAccountChangedNotification];
  }
  id v15 = *(void **)(a1 + 40);
  if (v15)
  {
    id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D67BC;
    block[3] = &unk_10063A830;
    id v18 = v15;
    dispatch_async(v16, block);
  }

uint64_t sub_1001D67BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D6870(uint64_t a1)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v21;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if (([v8 accountStateDirty] & 1) == 0)
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "errorForFeature:", objc_msgSend(v8, "feature")));
          if (v9)
          {
            char v5 = 1;
            [v8 setAccountStateDirty:1];
            id v10 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccount:v8];
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v4);
  }

  else
  {
    char v5 = 0;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) accounts]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 allObjects]);
  uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v12));
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 64);
  *(void *)(v14 + 64) = v13;

  if ((v5 & 1) != 0) {
    [*(id *)(a1 + 32) postAccountChangedNotification];
  }
  id v16 = *(void **)(a1 + 48);
  if (v16)
  {
    int v17 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D6A84;
    block[3] = &unk_10063A830;
    id v19 = v16;
    dispatch_async(v17, block);
  }

uint64_t sub_1001D6A84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D6B38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _queueIndexOfAccountWithIdentifier:*(void *)(a1 + 40)];
  if (v2 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v3 = v2;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) objectAtIndex:v2]);
    if ([v4 accountStateDirty])
    {
    }

    else
    {
      [v4 setAccountStateDirty:1];
      char v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccount:v4]);
      [*(id *)(*(void *)(a1 + 32) + 64) replaceObjectAtIndex:v3 withObject:v5];

      [*(id *)(a1 + 32) postAccountChangedNotification];
    }
  }

  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001D6C48;
    block[3] = &unk_10063A830;
    id v9 = v6;
    dispatch_async(v7, block);
  }

uint64_t sub_1001D6C48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D906C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) fetchAllVirtualCardsForAccountIdentifier:*(void *)(a1 + 40) completion:0];
    [*(id *)(a1 + 32) userInfoForAccountIdentifier:*(void *)(a1 + 40) forceFetch:0 completion:0];
    [*(id *)(a1 + 32) updateFinancingPlansForAccountWithIdentifier:*(void *)(a1 + 40) pageOffset:0 limit:0 ignoreLastUpdatedDate:1 forceFetch:0 completion:0];
    id v4 = *(void **)(a1 + 32);
    char v5 = (void *)v4[20];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 _setupNotificationIdentifierForAccountIdentifier:*(void *)(a1 + 40)]);
    [v5 removeUserNotificationWithIdentifier:v6];

    if ([v3 isSharedAccount])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Fetching users and shared account cloud store zones after pass provisioning",  v9,  2u);
      }

      [*(id *)(a1 + 32) updateAccountUsersForAccountWithIdentifier:*(void *)(a1 + 40) completion:0];
      [*(id *)(a1 + 32) updateSharedAccountCloudStoreWithAccountIdentifier:*(void *)(a1 + 40) completion:0];
    }
  }
}

void sub_1001D928C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Pass removed: removing locally stored virtual cards on the associated account with identifier: %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_1001D9334(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Pass removed: removing financing plans on the associated account with identifier: %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_1001D93DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 feature] == (id)2)
  {
    PKSharedCacheSetBoolForKey(0LL, PKSharedCacheHideFixPeerPaymentKey);
    PKSharedCacheSetObjectForKey(&off_1006901D0, PKSharedCacheFirstTimeDailyCashKey);
    PKSharedCacheSetBoolForKey(0LL, PKSharedCacheDailyCashIdentityVerificationTriggeredKey);
    PKSharedCacheSetBoolForKey(0LL, PKSharedCachePaymentFailedKey);
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSourceIdentifier]);
    if ([v5 length]) {
      -[NSMutableSet addObject:](v4, "addObject:", v5);
    }
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001D950C;
    v9[3] = &unk_100640DF8;
    id v10 = v4;
    uint64_t v11 = v7;
    uint64_t v8 = v4;
    [v7 accountUsersForAccountWithIdentifier:v6 completion:v9];
  }
}

void sub_1001D950C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v26;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)v7);
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionSourceIdentifiers]);
        id v10 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v22;
          do
          {
            uint64_t v13 = 0LL;
            do
            {
              if (*(void *)v22 != v12) {
                objc_enumerationMutation(v9);
              }
              [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v21 + 1) + 8 * (void)v13)];
              uint64_t v13 = (char *)v13 + 1;
            }

            while (v11 != v13);
            id v11 = [v9 countByEnumeratingWithState:&v21 objects:v29 count:16];
          }

          while (v11);
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }

    while (v5);
  }

  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v14 = *(void **)(a1 + 32);
    id v15 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 136LL);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1001D96F0;
    v18[3] = &unk_1006392B0;
    id v16 = v14;
    uint64_t v17 = *(void *)(a1 + 40);
    id v19 = v16;
    uint64_t v20 = v17;
    dispatch_async(v15, v18);
  }
}

void sub_1001D96F0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Pass removed: deleting transactions for source ids %@",  (uint8_t *)&v8,  0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 24LL);
  id v7 = [v5 copy];
  [v6 deleteAllTransactionsFromTransactionSourceIdentifiers:v7];
}

void sub_1001D9844(uint64_t a1)
{
  uint64_t v1 = a1;
  if ([*(id *)(*(void *)(a1 + 32) + 72) count])
  {
    uint64_t v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v33 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id v2 = *(id *)(*(void *)(v1 + 32) + 64LL);
    id v3 = [v2 countByEnumeratingWithState:&v39 objects:v47 count:16];
    if (!v3) {
      goto LABEL_29;
    }
    id v4 = v3;
    uint64_t v5 = *(void *)v40;
    while (1)
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v40 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        int v8 = (char *)objc_msgSend(v7, "state", v33);
        uint64_t v9 = PKAccountStateToString([v7 state]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        if (([v7 provisioningAllowed] & 1) == 0)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(14LL);
          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);
            *(_DWORD *)__int128 buf = 138412546;
            id v44 = v22;
            __int16 v45 = 2112;
            id v46 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Account: %@ with state: %@ does not allow provisioning and will not be offered",  buf,  0x16u);
          }

          goto LABEL_26;
        }

        if ((unint64_t)(v8 - 1) < 4)
        {
          uint64_t v11 = v1;
          uint64_t v12 = *(void **)(*(void *)(v1 + 32) + 24LL);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 associatedPassUniqueID]);
          unsigned int v14 = [v12 passExistsWithUniqueID:v13];

          uint64_t v15 = PKLogFacilityTypeGetObject(14LL);
          id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          if (v14)
          {
            if (v17)
            {
              id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);
              *(_DWORD *)__int128 buf = 138412546;
              id v44 = v18;
              __int16 v45 = 2112;
              id v46 = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Account: %@ with state: %@ is on device",  buf,  0x16u);
            }

            id v19 = (os_log_s *)[v7 copy];
            uint64_t v20 = v33;
          }

          else
          {
            if (v17)
            {
              __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);
              *(_DWORD *)__int128 buf = 138412546;
              id v44 = v26;
              __int16 v45 = 2112;
              id v46 = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Account: %@ with state: %@ is valid for provisioning",  buf,  0x16u);
            }

            id v19 = (os_log_s *)[v7 copy];
            uint64_t v20 = v34;
          }

          -[NSMutableArray addObject:](v20, "addObject:", v19);
          uint64_t v1 = v11;
LABEL_26:

          goto LABEL_27;
        }

        if (v8) {
          BOOL v23 = v8 == (char *)5;
        }
        else {
          BOOL v23 = 1;
        }
        if (v23)
        {
          uint64_t v24 = PKLogFacilityTypeGetObject(14LL);
          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);
            *(_DWORD *)__int128 buf = 138412546;
            id v44 = v25;
            __int16 v45 = 2112;
            id v46 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Account: %@ with state: %@ is not valid for provisioning",  buf,  0x16u);
          }

          goto LABEL_26;
        }

uint64_t sub_1001D9CC0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001D9D60(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 associatedPassUniqueID]);
        LODWORD(v9) = [v9 passExistsWithUniqueID:v10];

        if ((_DWORD)v9)
        {
          id v11 = [v8 copy];
          -[NSMutableArray addObject:](v2, "addObject:", v11);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }

  uint64_t v12 = *(void **)(a1 + 40);
  uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001D9F1C;
  v15[3] = &unk_1006396B0;
  id v16 = v2;
  id v17 = v12;
  unsigned int v14 = v2;
  dispatch_async(v13, v15);
}

uint64_t sub_1001D9F1C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001D9FB8(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v7) copy];
        -[NSMutableArray addObject:](v2, "addObject:", v8);

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v5);
  }

  uint64_t v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001DA138;
  v12[3] = &unk_1006396B0;
  uint64_t v13 = v2;
  id v14 = v9;
  id v11 = v2;
  dispatch_async(v10, v12);
}

uint64_t sub_1001DA138(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001DA1F4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_accountWithIdentifier:", *(void *)(a1 + 40)));
  id v3 = *(void **)(a1 + 40);
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DA2B0;
  block[3] = &unk_100639AF0;
  id v7 = v2;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v2;
  dispatch_async(v4, block);
}

uint64_t sub_1001DA2B0(void *a1)
{
  if (!a1[4])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "No account with identifier: %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1001DA57C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if (objc_msgSend(v10, "feature", (void)v13) == *(id *)(a1 + 40)) {
          -[NSMutableSet addObject:](v4, "addObject:", v10);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = -[NSMutableSet copy](v4, "copy");
  (*(void (**)(uint64_t, id))(v11 + 16))(v11, v12);
}

void sub_1001DA778(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountWithVirtualCardIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DA834;
  block[3] = &unk_100639AF0;
  id v7 = v2;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v2;
  dispatch_async(v4, block);
}

uint64_t sub_1001DA834(void *a1)
{
  if (!a1[4])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "No account with virtual card identifier: %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1001DA9A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) associatedAccountIdentifierForPassWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) accountWithIdentifier:v2]);
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1001DAA88;
  v8[3] = &unk_10063B440;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v8[1] = 3221225472LL;
  id v9 = v3;
  id v10 = v2;
  id v11 = v4;
  id v12 = *(id *)(a1 + 48);
  id v6 = v2;
  id v7 = v3;
  dispatch_async(v5, v8);
}

uint64_t sub_1001DAA88(void *a1)
{
  if (!a1[4])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      uint64_t v5 = a1[6];
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@ for pass with uniqueID: %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

void sub_1001DAE34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

void sub_1001DAE64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1001DAEF8;
    v6[3] = &unk_10064B238;
    id v8 = v4;
    id v7 = v3;
    [v5 accountsWithCompletion:v6];
  }
}

uint64_t sub_1001DAEF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  *(void *)(a1 + 32));
}

void sub_1001DAF08(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v17 + 1) + 8 * (void)v7) creditDetails]);
        __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v8 setLastUpdatedDate:v9];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v5);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v12 = *(dispatch_queue_s **)(v10 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DB094;
  block[3] = &unk_100639AF0;
  void block[4] = v10;
  id v15 = v3;
  id v16 = v11;
  id v13 = v3;
  dispatch_async(v12, block);
}

uint64_t sub_1001DB094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_1001DB0CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001DB0DC(uint64_t a1)
{
}

void sub_1001DB0E4(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_1001DB188;
  v7[3] = &unk_10064B558;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 32);
  v7[1] = 3221225472LL;
  void v7[4] = v2;
  __int128 v10 = *(_OWORD *)(a1 + 56);
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 72);
  id v8 = v5;
  uint64_t v11 = v6;
  char v12 = *(_BYTE *)(a1 + 80);
  id v9 = *(id *)(a1 + 48);
  [v4 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_1001DB188(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 context]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 regions]);

  id v5 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v35;
    do
    {
      __int128 v10 = 0LL;
      do
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:*(void *)(*((void *)&v34 + 1) + 8 * (void)v10)]);
        char v12 = (void *)objc_claimAutoreleasedReturnValue([v11 accountServiceURL]);

        if (v12)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472LL;
          v29[2] = sub_1001DB418;
          v29[3] = &unk_10064B4B8;
          void v29[4] = *(void *)(a1 + 32);
          id v13 = v11;
          uint64_t v14 = *(void *)(a1 + 64);
          id v30 = v13;
          uint64_t v32 = v14;
          id v15 = *(id *)(a1 + 40);
          uint64_t v16 = *(void *)(a1 + 72);
          id v31 = v15;
          uint64_t v33 = v16;
          [v5 addOperation:v29];
        }

        __int128 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v8);
  }

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1001DB8BC;
  v23[3] = &unk_10064B530;
  char v28 = *(_BYTE *)(a1 + 80);
  void v23[4] = *(void *)(a1 + 32);
  __int128 v22 = *(_OWORD *)(a1 + 48);
  id v18 = (id)v22;
  __int128 v25 = v22;
  uint64_t v26 = *(void *)(a1 + 72);
  id v19 = *(id *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 64);
  id v24 = v19;
  uint64_t v27 = v20;
  id v21 = [v5 evaluateWithInput:v17 completion:v23];
}

void sub_1001DB418(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[5];
  uint64_t v9 = *(void **)(a1[4] + 32LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1001DB4F8;
  v17[3] = &unk_10064B490;
  id v10 = v8;
  char v12 = (void *)a1[6];
  uint64_t v11 = a1[7];
  id v18 = v10;
  uint64_t v23 = v11;
  id v13 = v12;
  uint64_t v14 = a1[4];
  id v19 = v13;
  uint64_t v20 = v14;
  id v21 = v6;
  id v22 = v7;
  uint64_t v24 = a1[8];
  id v15 = v6;
  id v16 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v17];
}

void sub_1001DB4F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountsRequest);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountServiceURL]);
  [v4 setAccountServicesURL:v5];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001DB5F4;
  v10[3] = &unk_10064B468;
  uint64_t v15 = *(void *)(a1 + 72);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v6;
  uint64_t v12 = v7;
  id v14 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 80);
  id v13 = v8;
  uint64_t v16 = v9;
  [v3 accountsWithRequest:v4 completion:v10];
}

void sub_1001DB5F4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 featureFailures]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = *(void **)(a1 + 32);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 accounts]);

  [v11 addObjectsFromArray:v12];
  id v13 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  if (v13)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 description]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v32 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Could not update some accounts with feature failures %@",  buf,  0xCu);
    }

    __int128 v17 = *(void **)(a1 + 40);
    id v18 = *(void **)(a1 + 56);
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1001DB894;
    v28[3] = &unk_1006396B0;
    id v30 = v18;
    id v29 = *(id *)(a1 + 48);
    [v17 _accountsAreInDirtyWithFeatureFailures:v19 completion:v28];

    uint64_t v20 = v30;
  }

  else
  {
    if (!v6)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      goto LABEL_10;
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a3);
    uint64_t v21 = PKLogFacilityTypeGetObject(14LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v32 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Could not update accounts with error %@",  buf,  0xCu);
    }

    uint64_t v24 = *(void **)(a1 + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    void v25[2] = sub_1001DB8A8;
    v25[3] = &unk_1006396B0;
    id v27 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 48);
    [v24 accountsAreInDirtyStateWithCompletion:v25];

    uint64_t v20 = v27;
  }

LABEL_10:
}

uint64_t sub_1001DB894(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_1001DB8A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  1LL);
}

void sub_1001DB8BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(_BYTE *)(a1 + 80) && !*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Error: Accounts on disk but missing URL or push topic - forcing a re-register. FILE A RADAR !",  buf,  2u);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) deviceRegistrationServiceCoordinator]);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    void v26[2] = sub_1001DBA7C;
    v26[3] = &unk_10064B4E0;
    id v19 = *(id *)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 64);
    id v27 = v19;
    uint64_t v28 = v20;
    [v18 performDeviceRegistrationForReason:@"Missing Account URL/Topic" brokerURL:0 action:1 forceApplePayRegister:1 forcePeerPaymentRegister:1 completion:v26];

    uint64_t v15 = v27;
    goto LABEL_9;
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = *(dispatch_queue_s **)(v8 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001DBA94;
    block[3] = &unk_10064B508;
    void block[4] = v8;
    id v11 = v9;
    uint64_t v12 = *(void *)(a1 + 72);
    id v22 = v11;
    uint64_t v24 = v12;
    id v13 = *(id *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 64);
    id v23 = v13;
    uint64_t v25 = v14;
    dispatch_async(v10, block);

    uint64_t v15 = v22;
LABEL_9:

    goto LABEL_10;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_10:
}

uint64_t sub_1001DBA7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

uint64_t sub_1001DBA94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001DBBEC(uint64_t a1)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v25;
    while (2)
    {
      for (id i = 0LL; i != v3; id i = (char *)i + 1)
      {
        if (*(void *)v25 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountIdentifier", (void)v24));
        uint64_t v8 = *(void **)(a1 + 40);
        id v9 = v7;
        id v10 = v8;
        if (v9 == v10)
        {

LABEL_18:
          id v3 = [v6 copy];
          goto LABEL_19;
        }

        id v11 = v10;
        if (v9) {
          BOOL v12 = v10 == 0LL;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
        }

        else
        {
          unsigned int v13 = [v9 isEqualToString:v10];

          if (v13) {
            goto LABEL_18;
          }
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v24 objects:v32 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

void sub_1001DC2B4(uint64_t a1)
{
  uint64_t v2 = PKUIOnlyDemoModeEnabled(a1);
  if ((v2 & 1) != 0 || PKStoreDemoModeEnabled(v2, v3))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)]);
      (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v7, 0LL);
    }
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1001DC3B8;
    v8[3] = &unk_10064B620;
    void v8[4] = v6;
    id v9 = v5;
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    [v6 accountWithIdentifier:v9 completion:v8];
  }

void sub_1001DC3B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([v3 feature]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) nextPossibleFetchDateForAccountType:v5 endpointType:3 accountIdentifier:*(void *)(a1 + 40)]);
    if (([*(id *)(a1 + 48) fromPush] & 1) == 0)
    {
      if (v6)
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v7 timeIntervalSinceDate:v6];
        double v9 = v8;

        if (v9 < 0.0)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(14LL);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v43 = v12;
            __int16 v44 = 2112;
            __int16 v45 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Not fetching account users %@ because the next possible fetch date is in the future %@",  buf,  0x16u);
          }

          id v13 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)]);
          uint64_t v14 = *(void **)(a1 + 56);
          if (!v14) {
            goto LABEL_18;
          }
          uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472LL;
          v39[2] = sub_1001DC74C;
          v39[3] = &unk_1006396B0;
          uint64_t v16 = &v41;
          id v41 = v14;
          BOOL v17 = &v40;
          id v13 = v13;
          id v40 = v13;
          uint64_t v18 = v39;
          goto LABEL_17;
        }
      }
    }

    if (([*(id *)(a1 + 48) fromPush] & 1) == 0)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)]);
      if (([*(id *)(a1 + 32) _shouldProactivelyFetchAccountUsersForAccount:v4 users:v13] & 1) == 0)
      {
        __int128 v27 = *(void **)(a1 + 56);
        if (!v27)
        {
LABEL_18:

          goto LABEL_19;
        }

        uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001DC760;
        block[3] = &unk_1006396B0;
        uint64_t v16 = &v38;
        id v38 = v27;
        BOOL v17 = &v37;
        id v13 = v13;
        id v37 = v13;
        uint64_t v18 = block;
LABEL_17:
        dispatch_async(v15, v18);

        goto LABEL_18;
      }
    }

    id v19 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountUsersRequest);
    [v19 setAccountIdentifier:*(void *)(a1 + 40)];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v4 accountBaseURL]);
    [v19 setBaseURL:v20];

    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void **)(a1 + 40);
    id v23 = *(void **)(v21 + 32);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1001DC774;
    v30[3] = &unk_10064B5F8;
    id v31 = v19;
    uint64_t v32 = v21;
    id v33 = v22;
    uint64_t v35 = v5;
    id v34 = *(id *)(a1 + 56);
    id v24 = v19;
    [v23 performHandlerOnSharedWebServiceQueue:v30];

LABEL_19:
    goto LABEL_20;
  }

  __int128 v25 = *(void **)(a1 + 56);
  if (v25)
  {
    __int128 v26 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1001DCD10;
    v28[3] = &unk_10063A830;
    id v29 = v25;
    dispatch_async(v26, v28);
    id v6 = v29;
    goto LABEL_19;
  }

uint64_t sub_1001DC74C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_1001DC760(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001DC774(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001DC814;
  v8[3] = &unk_10064B5D0;
  uint64_t v4 = *(void *)(a1 + 32);
  void v8[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v9 = v5;
  uint64_t v11 = v6;
  id v10 = v7;
  [a2 accountUsersWithRequest:v4 completion:v8];
}

void sub_1001DC814(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_1001DC8E8;
  v15[3] = &unk_10063E850;
  uint64_t v7 = a1[4];
  double v8 = (void *)a1[5];
  id v9 = *(dispatch_queue_s **)(v7 + 136);
  v15[1] = 3221225472LL;
  id v16 = v6;
  uint64_t v17 = v7;
  id v10 = v8;
  uint64_t v12 = (void *)a1[6];
  uint64_t v11 = a1[7];
  id v18 = v10;
  uint64_t v21 = v11;
  id v19 = v5;
  id v20 = v12;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v9, v15);
}

void sub_1001DC8E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(*(void *)(a1 + 40) + 24LL);
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountUsersForAccountWithIdentifier:*(void *)(a1 + 48)]);
    if (v4)
    {
      id v5 = v4;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      id v6 = [v4 countByEnumeratingWithState:&v42 objects:v47 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v43;
        do
        {
          id v9 = 0LL;
          do
          {
            if (*(void *)v43 != v8) {
              objc_enumerationMutation(v5);
            }
            [*(id *)(*((void *)&v42 + 1) + 8 * (void)v9) setDirty:1];
            id v9 = (char *)v9 + 1;
          }

          while (v7 != v9);
          id v7 = [v5 countByEnumeratingWithState:&v42 objects:v47 count:16];
        }

        while (v7);
      }

      id v10 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountUsers:v5 forAccountWithIdentifier:*(void *)(a1 + 48)]);
    }

    else
    {
      id v10 = 0LL;
    }

    [*(id *)(*(void *)(a1 + 40) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 72) endpointType:3 accountIdentifier:*(void *)(a1 + 48)];
    __int128 v25 = *(void **)(a1 + 64);
    if (v25)
    {
      __int128 v26 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001DCC98;
      block[3] = &unk_10063C6A8;
      id v23 = &v41;
      id v41 = v25;
      id v24 = &v39;
      id v10 = v10;
      id v39 = v10;
      id v40 = *(id *)(a1 + 32);
      dispatch_async(v26, block);

      goto LABEL_25;
    }
  }

  else
  {
    [v3 deleteRetryBackoffForAccountType:*(void *)(a1 + 72) endpointType:3 accountIdentifier:*(void *)(a1 + 48)];
    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) users]);
    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      id v12 = v10;
      id v13 = [v12 countByEnumeratingWithState:&v34 objects:v46 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v35;
        do
        {
          id v16 = 0LL;
          do
          {
            if (*(void *)v35 != v15) {
              objc_enumerationMutation(v12);
            }
            [*(id *)(*((void *)&v34 + 1) + 8 * (void)v16) setLastUpdated:v11];
            id v16 = (char *)v16 + 1;
          }

          while (v14 != v16);
          id v14 = [v12 countByEnumeratingWithState:&v34 objects:v46 count:16];
        }

        while (v14);
      }

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 48)]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountUsers:v12 forAccountWithIdentifier:*(void *)(a1 + 48)]);

      id v19 = *(void **)(a1 + 40);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_1001DCCAC;
      v30[3] = &unk_10064B5A8;
      void v30[4] = v19;
      id v10 = v18;
      id v31 = v10;
      id v32 = v17;
      id v33 = *(id *)(a1 + 48);
      id v20 = v17;
      [v19 _accessObserversWithHandler:v30];
    }

    uint64_t v21 = *(void **)(a1 + 64);
    if (v21)
    {
      uint64_t v22 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_1001DCCFC;
      v27[3] = &unk_1006396B0;
      id v23 = &v29;
      id v29 = v21;
      id v24 = &v28;
      id v10 = v10;
      id v28 = v10;
      dispatch_async(v22, v27);
LABEL_25:
    }
  }
}

uint64_t sub_1001DCC98(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001DCCAC(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:accountUsersChanged:oldUsers:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] accountUsersChanged:a1[5] oldUsers:a1[6] accountIdentifier:a1[7]];
  }
}

uint64_t sub_1001DCCFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001DCD10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001DCEEC(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed updating shared account cloud store proactively account %@",  buf,  0xCu);
  }

  id v5 = (void *)a1[6];
  id v6 = *(dispatch_queue_s **)(a1[5] + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DCFE4;
  block[3] = &unk_10063A830;
  id v8 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_1001DCFE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001DCFF8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001DD0B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001DD170;
  v9[3] = &unk_10063CD10;
  id v10 = v3;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_1001DD170(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  if ((unint64_t)v2 > 4 || v2 == (id)1)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001DD2F4;
    v14[3] = &unk_10063C748;
    int8x16_t v10 = *(int8x16_t *)(a1 + 32);
    id v5 = (id)v10.i64[0];
    int8x16_t v15 = vextq_s8(v10, v10, 8uLL);
    id v16 = *(id *)(a1 + 56);
    uint64_t v6 = objc_retainBlock(v14);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 48)]);
    if ([*(id *)(a1 + 40) _shouldProactivelyFetchAccountUsersForAccount:*(void *)(a1 + 32) users:v7])
    {
      id v9 = *(void **)(a1 + 40);
      id v8 = *(void **)(a1 + 48);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1001DD43C;
      v11[3] = &unk_10064B670;
      void v11[4] = v9;
      id v12 = v8;
      id v13 = v6;
      [v9 updateAccountUsersForAccountWithIdentifier:v12 completion:v11];
    }

    else
    {
      ((void (*)(void *, void *))v6[2])(v6, v7);
    }
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_1001DD2F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001DD394;
  v8[3] = &unk_10063C450;
  void v8[4] = v4;
  id v6 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  objc_msgSend(v4, "_queue_updateSharedAccountCloudStoreIfNeccessaryForAccount:completion:", v5, v8);
}

void sub_1001DD394(uint64_t a1)
{
  id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001DD420;
  v3[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_1001DD420(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001DD43C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DD4E8;
  block[3] = &unk_10063C450;
  id v9 = v4;
  id v6 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_1001DD4E8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed updating account users proactively account %@",  (uint8_t *)&v6,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001DD62C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "feature", (void)v13) == *(id *)(a1 + 48))
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accountIdentifier]);
          id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:v9]);
          if ([v10 count]) {
            -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v10, v9);
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = -[NSMutableDictionary copy](v2, "copy");
  (*(void (**)(uint64_t, id))(v11 + 16))(v11, v12);
}

void sub_1001DD84C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v16;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        if (objc_msgSend(v10, "feature", (void)v15) == *(id *)(a1 + 48))
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountIdentifier]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:v11]);
          if ([v12 count]) {
            -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v12, v11);
          }
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v7);
  }

  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = -[NSMutableDictionary copy](v4, "copy");
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v14);
}

void sub_1001DDAA8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceDeleteAccountUserRequest);
  [v4 setAccountIdentifier:a1[4]];
  [v4 setAccountUserAltDSID:a1[5]];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  id v6 = (void *)a1[7];
  id v7 = *(void **)(a1[6] + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001DDB90;
  v9[3] = &unk_10064B710;
  id v10 = v4;
  id v11 = v6;
  id v8 = v4;
  [v7 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_1001DDB90(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001DDC04;
  v4[3] = &unk_10064B6E8;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 deleteAccountUserWithRequest:v3 completion:v4];
}

uint64_t sub_1001DDC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1001DDD10(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = a2;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 accountUserWithAltDSID:v3 accountIdentifier:v5]);
    id v8 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceUpdateAccountUserPreferencesRequest);
    [v8 setAccountIdentifier:*(void *)(a1 + 48)];
    [v8 setAccountUserAltDSID:*(void *)(a1 + 40)];
    [v8 setAccountUserPreferences:*(void *)(a1 + 56)];
    objc_msgSend(v8, "setAccountUserAccessLevel:", objc_msgSend(v7, "accessLevel"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 accountBaseURL]);

    [v8 setBaseURL:v9];
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1001DDE60;
    v13[3] = &unk_100646D90;
    id v14 = v8;
    uint64_t v15 = v10;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 64);
    id v12 = v8;
    [v11 performHandlerOnSharedWebServiceQueue:v13];
  }

void sub_1001DDE60(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001DDEFC;
  v5[3] = &unk_10064B760;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 updateAccountUserPreferencesWithRequest:v4 completion:v5];
}

void sub_1001DDEFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 accountUser]);
  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001DDFD8;
    v9[3] = &unk_10064B738;
    id v11 = *(id *)(a1 + 48);
    id v10 = v5;
    [v7 insertOrUpdateLocalAccountUser:v6 forAccountWithIdentifier:v8 completion:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1001DDFD8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  *(void *)(a1 + 32));
}

void sub_1001DE0DC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUserWithAltDSID:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)]);
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 setNotificationSettings:*(void *)(a1 + 56)];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001DE1FC;
    v11[3] = &unk_10064B7B0;
    id v6 = &v12;
    id v12 = *(id *)(a1 + 64);
    [v4 insertOrUpdateLocalAccountUser:v3 forAccountWithIdentifier:v5 completion:v11];
LABEL_5:

    goto LABEL_6;
  }

  id v7 = *(void **)(a1 + 64);
  if (v7)
  {
    uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001DE214;
    v9[3] = &unk_10063A830;
    id v6 = &v10;
    id v10 = v7;
    dispatch_async(v8, v9);
    goto LABEL_5;
  }

uint64_t sub_1001DE1FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

uint64_t sub_1001DE214(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001DE300(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountUser:*(void *)(a1 + 48) forAccountWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v5 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001DE458;
  v13[3] = &unk_10064B5A8;
  void v13[4] = v5;
  id v6 = v4;
  id v14 = v6;
  id v7 = v2;
  id v15 = v7;
  id v16 = *(id *)(a1 + 40);
  [v5 _accessObserversWithHandler:v13];
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8)
  {
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001DE4A8;
    v10[3] = &unk_1006396B0;
    id v12 = v8;
    id v11 = v3;
    dispatch_async(v9, v10);
  }
}

void sub_1001DE458(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:accountUsersChanged:oldUsers:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] accountUsersChanged:a1[5] oldUsers:a1[6] accountIdentifier:a1[7]];
  }
}

uint64_t sub_1001DE4A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001DE704(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[6];
  if (v4)
  {
    id v6 = (void *)a1[4];
    uint64_t v5 = a1[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001DE7A4;
    v7[3] = &unk_10064B7D8;
    id v9 = v4;
    id v8 = v3;
    [v6 accountWithIdentifier:v5 completion:v7];
  }
}

uint64_t sub_1001DE7A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  *(void *)(a1 + 32));
}

void sub_1001DE7B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);
  [v4 setBaseURL:v5];

  [v4 setExtended:*(unsigned __int8 *)(a1 + 56)];
  id v6 = *(void **)(*(void *)(a1 + 40) + 32LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001DE8D8;
  v12[3] = &unk_10064B850;
  id v13 = v4;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v11.i64[0];
  int8x16_t v14 = vextq_s8(v11, v11, 8uLL);
  id v8 = *(id *)(a1 + 48);
  char v17 = *(_BYTE *)(a1 + 56);
  id v15 = v3;
  id v16 = v8;
  id v9 = v3;
  id v10 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v12];
}

void sub_1001DE8D8(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001DE990;
  v5[3] = &unk_10064B828;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 64);
  char v9 = *(_BYTE *)(a1 + 72);
  id v7 = *(id *)(a1 + 56);
  [a2 accountWithRequest:v4 completion:v5];
}

void sub_1001DE990(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      char v9 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v30 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Could not update account with error %@",  buf,  0xCu);
    }

    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    void v26[2] = sub_1001DEC78;
    v26[3] = &unk_1006396B0;
    id v28 = *(id *)(a1 + 56);
    id v27 = v6;
    [v10 accountIsInDirtyStateWithIdentifier:v11 completion:v26];

    id v12 = v28;
    goto LABEL_21;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 account]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v12 setLastUpdated:v13];

  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 accountIdentifier]);
  id v15 = *(void **)(a1 + 40);
  id v16 = v14;
  id v17 = v15;
  if (v16 == v17)
  {
  }

  else
  {
    __int128 v18 = v17;
    if (!v16 || !v17)
    {

LABEL_18:
      uint64_t v22 = PKLogFacilityTypeGetObject(14LL);
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Received account identifier does not match requested account identifier",  buf,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      goto LABEL_21;
    }

    unsigned int v19 = [v16 isEqualToString:v17];

    if (!v19) {
      goto LABEL_18;
    }
  }

  id v20 = *(void **)(a1 + 32);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 64);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_1001DEC88;
  v24[3] = &unk_10063A830;
  id v25 = *(id *)(a1 + 56);
  [v20 insertOrReplaceAccount:v12 extended:v21 deleteSensitiveData:0 completion:v24];
  if (*(_BYTE *)(a1 + 64)) {
    [*(id *)(a1 + 32) _processPhysicalCardsFromExtendedAccountResponse:v5 accountIdentifier:*(void *)(a1 + 40)];
  }

LABEL_21:
}

uint64_t sub_1001DEC78(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001DEC88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001DEC98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 creditDetails]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v4 setLastUpdatedDate:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v3 setLastUpdated:v6];

  uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001DED88;
  v9[3] = &unk_10063A830;
  id v8 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  [v8 insertOrReplaceAccount:v3 extended:v7 deleteSensitiveData:0 completion:v9];
}

uint64_t sub_1001DED88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001DEE50(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) physicalCardsForAccountWithIdentifier:a1[5]]);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v21;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if (![v8 expirationYear] || !objc_msgSend(v8, "expirationMonth"))
        {
          char v9 = (void *)a1[6];
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472LL;
          void v19[2] = sub_1001DF044;
          v19[3] = &unk_10064B8C8;
          void v19[4] = v8;
          id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_firstObjectPassingTest:", v19));
          id v11 =  [*(id *)(a1[4] + 24) insertOrUpdatePhysicalCard:v10 forAccountWithIdentifier:a1[5]];

          char v5 = 1;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v4);
    if ((v5 & 1) != 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) physicalCardsForAccountWithIdentifier:a1[5]]);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_1001DF0D8;
      v15[3] = &unk_10064B8F0;
      id v13 = (void *)a1[5];
      id v16 = (id)a1[4];
      id v17 = v12;
      id v18 = v13;
      id v14 = v12;
      [v16 _accessObserversWithHandler:v15];
    }
  }
}

uint64_t sub_1001DF044(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_1001DF0D8(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:physicalCardsChanged:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_1001DF254(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKUIOnlyDemoModeEnabled(v3);
  if ((v4 & 1) == 0 && (PKStoreDemoModeEnabled(v4, v5) & 1) == 0)
  {
    if (![v3 isCloudAccount])
    {
      id v14 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountDeleteRequest);
      [v14 setAccountIdentifier:*(void *)(a1 + 40)];
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);
      [v14 setBaseURL:v15];

      uint64_t v16 = *(void *)(a1 + 32);
      id v17 = *(void **)(a1 + 40);
      id v18 = *(void **)(v16 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      v22[2] = sub_1001DF470;
      v22[3] = &unk_100646D90;
      id v23 = v14;
      uint64_t v24 = v16;
      id v25 = v17;
      id v26 = *(id *)(a1 + 48);
      id v19 = v14;
      [v18 performHandlerOnSharedWebServiceQueue:v22];

      goto LABEL_14;
    }

    char v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    id v13 = *(void **)(a1 + 48);
    if (v13)
    {
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_1001DF460;
      v27[3] = &unk_10063A830;
      id v28 = v13;
      [v9 deleteLocalAccountWithIdentifier:v10 completion:v27];
      id v12 = v28;
      goto LABEL_11;
    }

uint64_t sub_1001DF460(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001DF470(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001DF50C;
  v5[3] = &unk_10064B918;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 deleteAccountWithRequest:v4 completion:v5];
}

void sub_1001DF50C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, id))(v7 + 16))(v7, v6);
    }
  }

  else
  {
    unsigned int v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(a1 + 48);
    if (v10)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1001DF5E4;
      v11[3] = &unk_10063A830;
      id v12 = v10;
      [v8 deleteLocalAccountWithIdentifier:v9 completion:v11];
    }

    else
    {
      [*(id *)(a1 + 32) deleteLocalAccountWithIdentifier:*(void *)(a1 + 40) completion:0];
    }
  }
}

uint64_t sub_1001DF5E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001DF5F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001DF690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) defaultAccountForFeature:*(void *)(a1 + 48) forAccounts:a2]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

uint64_t sub_1001DF8A4(void *a1)
{
  id v1 = a1;
  id v2 = [v1 accessLevel];
  if (v2 == (id)2)
  {
    unint64_t v3 = (unint64_t)[v1 state] - 1;
    if (v3 < 5)
    {
      uint64_t v4 = &unk_1004D6CF0;
      goto LABEL_7;
    }

void sub_1001DFA88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountActionRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 40)];
  [v4 setAction:*(void *)(a1 + 48)];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  id v6 = *(void **)(*(void *)(a1 + 56) + 32LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001DFB94;
  v11[3] = &unk_100646D90;
  id v12 = v4;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void **)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  id v10 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v11];
}

void sub_1001DFB94(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001DFC28;
  v8[3] = &unk_10064B990;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [a2 accountActionWithRequest:v4 completion:v8];
}

void sub_1001DFC28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 account]);
  id v7 = v6;
  if (!v5 && v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 accountIdentifier]);
    id v9 = *(void **)(a1 + 32);
    id v10 = v8;
    id v11 = v9;
    if (v10 == v11)
    {
    }

    else
    {
      id v12 = v11;
      if (!v10 || !v11)
      {

        goto LABEL_13;
      }

      unsigned int v13 = [v10 isEqualToString:v11];

      if (!v13)
      {
LABEL_13:
        uint64_t Object = PKLogFacilityTypeGetObject(14LL);
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 v20 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Received account identifier does not match requested account identifier",  v20,  2u);
        }

        uint64_t v19 = *(void *)(a1 + 48);
        if (v19)
        {
          id v15 = *(void (**)(void))(v19 + 16);
          goto LABEL_17;
        }

        goto LABEL_18;
      }
    }

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1001DFDE0;
    v21[3] = &unk_10063C6A8;
    uint64_t v16 = *(void **)(a1 + 40);
    id v24 = *(id *)(a1 + 48);
    id v22 = v7;
    id v23 = 0LL;
    [v16 insertOrReplaceAccount:v22 extended:0 deleteSensitiveData:0 completion:v21];

    goto LABEL_18;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    id v15 = *(void (**)(void))(v14 + 16);
LABEL_17:
    v15();
  }

void sub_1001DFDE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(a1 + 40));
  }

void sub_1001DFF40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceTermsRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  [v4 setTermsAccepted:*(unsigned __int8 *)(a1 + 64)];
  [v4 setTermsIdentifier:*(void *)(a1 + 40)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  uint64_t v6 = *(void **)(a1 + 56);
  id v7 = *(void **)(*(void *)(a1 + 48) + 32LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001E0038;
  v10[3] = &unk_100642728;
  id v11 = v4;
  id v8 = v6;
  uint64_t v12 = *(void *)(a1 + 48);
  id v13 = v8;
  id v9 = v4;
  [v7 performHandlerOnSharedWebServiceQueue:v10];
}

void sub_1001E0038(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E00C0;
  v6[3] = &unk_10064B9B8;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 accountTermsWithRequest:v4 completion:v6];
}

void sub_1001E00C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001E0158;
    v7[3] = &unk_1006396B0;
    id v9 = v5;
    id v8 = v4;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_1001E0158(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001E021C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    switch((unint64_t)[v3 type])
    {
      case 0uLL:
      case 2uLL:
      case 3uLL:
        uint64_t v5 = *(void *)(a1 + 48);
        if (v5) {
          (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, 0LL, 0LL);
        }
        break;
      case 1uLL:
        id v11 = *(void **)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(unsigned __int8 *)(a1 + 56);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        v14[2] = sub_1001E0420;
        v14[3] = &unk_10064BA30;
        id v15 = *(id *)(a1 + 48);
        [v11 _creditUserInfoForAccountIdentifier:v12 forceFetch:v13 completion:v14];
        id v10 = v15;
        goto LABEL_9;
      case 4uLL:
        id v8 = *(void **)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_1001E03A0;
        v16[3] = &unk_10064BA08;
        id v17 = *(id *)(a1 + 48);
        [v8 _savingsUserInfoForAccountIdentifier:v9 completion:v16];
        id v10 = v17;
LABEL_9:

        break;
      default:
        break;
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
    }
  }
}

void sub_1001E03A0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init(&OBJC_CLASS___PKAccountUserInfo);
  [v6 setSavingsUserInfo:v5];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v6, v8);
  }
}

void sub_1001E0420(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init(&OBJC_CLASS___PKAccountUserInfo);
  [v6 setCreditPrimaryUser:v5];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v6, v8);
  }
}

void sub_1001E06D8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v7 || !v5) {
    PKSharedCacheSetBoolForKey(0LL, *(void *)(a1 + 40));
  }
  else {
    id v7 = *(id *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_1001E0830(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001E0940;
    v10[3] = &unk_10064BAD0;
    id v11 = v4;
    id v12 = v3;
    id v6 = *(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    id v13 = v6;
    uint64_t v14 = v7;
    id v15 = *(id *)(a1 + 56);
    [v5 performHandlerOnSharedWebServiceQueue:v10];
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
  }
}

void sub_1001E0940(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountUpdateUserInfoRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountBaseURL]);
  [v4 setBaseURL:v5];

  objc_msgSend(v4, "setFeatureIdentifier:", objc_msgSend(*(id *)(a1 + 40), "feature"));
  [v4 setContact:*(void *)(a1 + 48)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E0A58;
  v6[3] = &unk_10064BAA8;
  void v6[4] = *(void *)(a1 + 56);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 64);
  [v3 accountUpdateUserInfoWithRequest:v4 completion:v6];
}

void sub_1001E0A58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412290;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Error updating user info %@",  (uint8_t *)&v21,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) primaryAccountIdentifierForAssociatedAccountIdentifier:*(void *)(a1 + 40)]);
    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 defaultBillingAddressForPrimaryAccountIdentifier:*(void *)(a1 + 40)]);

      if (v10) {
        [v9 deleteDefaultBillingAddressForPrimaryAccountIdentifier:*(void *)(a1 + 40)];
      }
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 defaultBillingAddressForPrimaryAccountIdentifier:v8]);
      id v12 = *(id *)(a1 + 48);
      if (v11)
      {
        id v13 = [*(id *)(a1 + 48) mutableCopy];
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 givenName]);
        [v13 setGivenName:v14];

        id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 familyName]);
        [v13 setFamilyName:v15];

        id v16 = [v13 copy];
        id v12 = v16;
      }

      [v9 setDefaultBillingAddress:v12 forPrimaryAccountIdentifier:v8];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }

    else
    {
      uint64_t v19 = PKLogFacilityTypeGetObject(14LL);
      __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v21) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Cannot set userInfo for nil primaryAccountIdentifier",  (uint8_t *)&v21,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }
  }
}

void sub_1001E0F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001E1018;
    v10[3] = &unk_100646D90;
    id v11 = v4;
    id v6 = v3;
    uint64_t v7 = *(void *)(a1 + 32);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = *(id *)(a1 + 48);
    [v5 performHandlerOnSharedWebServiceQueue:v10];
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
  }
}

void sub_1001E1018(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountUserInfoRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountBaseURL]);
  [v4 setBaseURL:v5];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E10FC;
  v6[3] = &unk_10064BAF8;
  void v6[4] = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 56);
  [v3 accountUserInfoWithRequest:v4 completion:v6];
}

void sub_1001E10FC(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 primaryUser]);
  id v7 = (void *)v6;
  if (!v5 && a2 && v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) primaryAccountIdentifierForAssociatedAccountIdentifier:a1[5]]);
    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
      [v9 setDefaultBillingAddress:v7 forPrimaryAccountIdentifier:v8];
      (*(void (**)(void))(a1[6] + 16LL))();
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v14) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Cannot set userInfo for nil primaryAccountIdentifier",  (uint8_t *)&v14,  2u);
      }

      (*(void (**)(void))(a1[6] + 16LL))();
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(14LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error updating user info %@",  (uint8_t *)&v14,  0xCu);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

void sub_1001E13C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001E1478;
  v7[3] = &unk_100646D90;
  id v8 = v4;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  [v5 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_1001E1478(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceAccountUserInfoRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountBaseURL]);
  [v4 setBaseURL:v5];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001E1544;
  v7[3] = &unk_10064BB20;
  id v6 = *(void **)(a1 + 56);
  void v7[4] = *(void *)(a1 + 48);
  id v8 = v6;
  [v3 savingsAccountUserInfoWithRequest:v4 completion:v7];
}

void sub_1001E1544(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E1600;
  block[3] = &unk_10063C6A8;
  id v13 = v6;
  id v14 = v7;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1001E1600(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(a1 + 40));
  }

void sub_1001E185C(void *a1, void *a2)
{
  id v3 = a2;
  if ((unint64_t)[v3 feature] > 4)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceDeleteBeneficiaryRequest);
    [v6 setAccountIdentifier:a1[4]];
    [v6 setBeneficiaryIdentifier:a1[5]];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);
    [v6 setBaseURL:v7];

    id v8 = (void *)a1[7];
    id v9 = *(void **)(a1[6] + 32LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001E1990;
    v10[3] = &unk_10064B710;
    id v11 = v6;
    id v12 = v8;
    id v5 = v6;
    [v9 performHandlerOnSharedWebServiceQueue:v10];

    goto LABEL_5;
  }

  uint64_t v4 = a1[7];
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  10LL,  0LL));
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
LABEL_5:
  }
}

void sub_1001E1990(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001E1A04;
  v4[3] = &unk_10064BB48;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 accountDeleteBeneficiaryWithRequest:v3 completion:v4];
}

uint64_t sub_1001E1A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1001E1AC4(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v59 objects:v66 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v49 = *(void *)v60;
    uint64_t v44 = a1;
    __int128 v45 = v2;
    id v43 = v3;
    do
    {
      id v6 = 0LL;
      id v47 = v5;
      do
      {
        if (*(void *)v60 != v49) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)v6);
        id v8 = objc_autoreleasePoolPush();
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);

        if (v9)
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v2, "objectForKey:", v10));
          unsigned int v50 = v11;
          if (v11)
          {
            unsigned __int8 v12 = [v11 BOOLValue];
            [*(id *)(a1 + 40) _queueIndexOfAccountWithIdentifier:v10];
            if ((v12 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_16:
            uint64_t Object = PKLogFacilityTypeGetObject(35LL);
            __int128 v20 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
            os_signpost_id_t v21 = os_signpost_id_make_with_pointer(v20, *(const void **)(a1 + 40));
            if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              os_signpost_id_t v22 = v21;
              if (os_signpost_enabled(v20))
              {
                *(_WORD *)__int128 buf = 0;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_INTERVAL_BEGIN,  v22,  "cloudstore:insertAccountEvent",  "",  buf,  2u);
              }
            }

            unsigned __int8 v23 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEvent:v7];
            id v24 = v20;
            os_signpost_id_t v25 = os_signpost_id_make_with_pointer(v24, *(const void **)(a1 + 40));
            if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              os_signpost_id_t v26 = v25;
              if (os_signpost_enabled(v24))
              {
                *(_WORD *)__int128 buf = 0;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  OS_SIGNPOST_INTERVAL_END,  v26,  "cloudstore:insertAccountEvent",  "",  buf,  2u);
              }
            }

            switch((unint64_t)[v7 type])
            {
              case 1uLL:
                [*(id *)(a1 + 40) _processRewardsRedemptionEvent:v7];
                break;
              case 2uLL:
                [*(id *)(a1 + 40) _processRewardsAddedEvent:v7];
                break;
              case 3uLL:
                [*(id *)(a1 + 40) _publishStatementsChangedForAccountIdentifier:v10];
                break;
              case 7uLL:
                [*(id *)(a1 + 40) _processPaymentFailed:v7];
                break;
              case 0xBuLL:
              case 0xCuLL:
                [*(id *)(a1 + 40) _notifyPhysicalCardsChangedWithAccountEvent:v7];
                break;
              case 0xDuLL:
                [*(id *)(a1 + 40) _processVirtualCardStatusUpdateEvent:v7];
                break;
              case 0xFuLL:
                [*(id *)(a1 + 40) _processUserInfoUpdateEvent:v7];
                break;
              default:
                break;
            }

            __int128 v37 = *(void **)(a1 + 40);
            v53[0] = _NSConcreteStackBlock;
            v53[1] = 3221225472LL;
            v53[2] = sub_1001E214C;
            v53[3] = &unk_10064BB98;
            char v54 = v23 ^ 1;
            void v53[4] = v37;
            void v53[5] = v7;
            [v37 _accessObserversWithHandler:v53];
            id v5 = v47;
          }

          else
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) passUniqueIdentifierWithAssociatedAccountIdentifier:v10]);

            if (v17)
            {
              id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
              -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v18, v10);

              [*(id *)(a1 + 40) _queueIndexOfAccountWithIdentifier:v10];
              goto LABEL_16;
            }

            id v46 = v8;
            __int128 v57 = 0u;
            __int128 v58 = 0u;
            __int128 v55 = 0u;
            __int128 v56 = 0u;
            id obj = *(id *)(*(void *)(a1 + 40) + 64LL);
            id v27 = [obj countByEnumeratingWithState:&v55 objects:v65 count:16];
            if (v27)
            {
              id v28 = v27;
              uint64_t v29 = *(void *)v56;
LABEL_26:
              uint64_t v30 = 0LL;
              while (1)
              {
                if (*(void *)v56 != v29) {
                  objc_enumerationMutation(obj);
                }
                id v31 = *(void **)(*((void *)&v55 + 1) + 8 * v30);
                id v32 = (id)objc_claimAutoreleasedReturnValue([v31 accountIdentifier]);
                id v33 = v10;
                __int128 v34 = v33;
                if (v32 == v33) {
                  break;
                }
                if (v10 && v32)
                {
                  unsigned int v35 = [v32 isEqualToString:v33];

                  if (v35) {
                    goto LABEL_49;
                  }
                }

                else
                {
                }

                if (v28 == (id)++v30)
                {
                  id v28 = [obj countByEnumeratingWithState:&v55 objects:v65 count:16];
                  if (v28) {
                    goto LABEL_26;
                  }
                  goto LABEL_37;
                }
              }

LABEL_49:
              a1 = v44;
              id v38 = [*(id *)(v44 + 40) _accountSupportsTransactionsWithoutPass:v31];

              id v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v38));
              id v2 = v45;
              -[NSMutableDictionary setObject:forKey:](v45, "setObject:forKey:", v39, v34);

              [*(id *)(v44 + 40) _queueIndexOfAccountWithIdentifier:v34];
              id v3 = v43;
              id v8 = v46;
              id v5 = v47;
              goto LABEL_16;
            }

void sub_1001E214C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v6 = v3;
  if (!*(_BYTE *)(a1 + 48))
  {
    if ((objc_opt_respondsToSelector(v3, "accountManager:didAddAccountEvent:") & 1) != 0)
    {
      [v6 accountManager:*(void *)(a1 + 32) didAddAccountEvent:*(void *)(a1 + 40)];
      goto LABEL_6;
    }

    id v4 = v6;
    if (!*(_BYTE *)(a1 + 48)) {
      goto LABEL_7;
    }
  }

  char v5 = objc_opt_respondsToSelector(v4, "accountManager:didUpdateAccountEvent:");
  id v4 = v6;
  if ((v5 & 1) != 0)
  {
    [v6 accountManager:*(void *)(a1 + 32) didUpdateAccountEvent:*(void *)(a1 + 40)];
LABEL_6:
    id v4 = v6;
  }

LABEL_7:
}
}
}

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 recipientNickname]);

  return v13;
}
}
}

  return v5;
}

  return v12;
}
}
}

  unsigned __int8 v12 = sub_1004333B8(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

uint64_t sub_1001E21E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001E22A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E2348;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001E2348(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001E2488(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40) altDSID:0 types:*(void *)(a1 + 48) startDate:*(void *)(a1 + 56) endDate:*(void *)(a1 + 64) orderedByDate:*(void *)(a1 + 80) limit:*(void *)(a1 + 88)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E2544;
  block[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 72);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, block);
}

uint64_t sub_1001E2544(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001E2600(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) accountEventWithIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E26A8;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001E26A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001E2760(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        for (id i = 0LL; i != v5; id i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
          id v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
          [v9 deleteAccountEventWithIdentifier:v10];

          uint64_t v11 = *(void *)(a1 + 32);
          unsigned __int8 v12 = *(dispatch_queue_s **)(v11 + 144);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_1001E2940;
          block[3] = &unk_1006392B0;
          void block[4] = v11;
          void block[5] = v8;
          dispatch_async(v12, block);
        }

        id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v5);
    }

    uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001E29E4;
    v15[3] = &unk_10063A830;
    id v16 = *(id *)(a1 + 48);
    dispatch_async(v13, v15);
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(void))(v14 + 16))();
    }
  }
}

id sub_1001E2940(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1001E2998;
  v2[3] = &unk_10064B2C0;
  return [*(id *)(a1 + 32) _accessObserversWithHandler:v2];
}

void sub_1001E2998(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveAccountEvent:") & 1) != 0) {
    [v3 accountManager:*(void *)(a1 + 32) didRemoveAccountEvent:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1001E29E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001E2AA0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) accountEventWithIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    [*(id *)(*(void *)(a1 + 32) + 24) deleteAccountEventWithIdentifier:*(void *)(a1 + 40)];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(dispatch_queue_s **)(v3 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E2B70;
    block[3] = &unk_100639AF0;
    void block[4] = v3;
    id v7 = v2;
    id v8 = *(id *)(a1 + 48);
    dispatch_async(v4, block);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }
}

void sub_1001E2B70(void *a1)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001E2BF4;
  v8[3] = &unk_10064B2C0;
  id v2 = (void *)a1[5];
  id v9 = (id)a1[4];
  id v10 = v2;
  [v9 _accessObserversWithHandler:v8];
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v7, v3, v4, v5, v6);
  }
}

void sub_1001E2BF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveAccountEvent:") & 1) != 0) {
    [v3 accountManager:*(void *)(a1 + 32) didRemoveAccountEvent:*(void *)(a1 + 40)];
  }
}

void sub_1001E2D08(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40) excludingTypes:*(void *)(a1 + 48)]);
  id v3 = v2;
  if (v2)
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        for (id i = 0LL; i != v5; id i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
          id v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
          [v9 deleteAccountEventWithIdentifier:v10];

          uint64_t v11 = *(void *)(a1 + 32);
          unsigned __int8 v12 = *(dispatch_queue_s **)(v11 + 144);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_1001E2EEC;
          block[3] = &unk_1006392B0;
          void block[4] = v11;
          void block[5] = v8;
          dispatch_async(v12, block);
        }

        id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v5);
    }

    uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001E2F90;
    v15[3] = &unk_10063A830;
    id v16 = *(id *)(a1 + 56);
    dispatch_async(v13, v15);
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14) {
      (*(void (**)(void))(v14 + 16))();
    }
  }
}

id sub_1001E2EEC(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1001E2F44;
  v2[3] = &unk_10064B2C0;
  return [*(id *)(a1 + 32) _accessObserversWithHandler:v2];
}

void sub_1001E2F44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveAccountEvent:") & 1) != 0) {
    [v3 accountManager:*(void *)(a1 + 32) didRemoveAccountEvent:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1001E2F90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001E3080(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) lastRedemptionEventToDestination:*(void *)(a1 + 64) forAccountIdentifier:*(void *)(a1 + 40) altDSID:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E3130;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001E3130(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001E4204(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        int v11 = PKEqualObjects(v9, v10);

        if (v11)
        {
          unsigned __int8 v12 = *(void **)(a1 + 32);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 keychainCardCredentials]);
          [v12 setKeychainCardCredentials:v13];

          uint64_t v14 = *(void **)(a1 + 32);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 displayName]);
          [v14 setDisplayName:v15];

          [*(id *)(a1 + 32) writeKeychainVirtualCardToKeychain];
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v5);
  }
}

void sub_1001E443C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:physicalCardsChanged:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

LABEL_103:
      }

      __int128 v34 = [v75 countByEnumeratingWithState:&v76 objects:v88 count:16];
      if (!v34) {
        goto LABEL_105;
      }
    }
  }

void sub_1001E4FCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (!v6) {
      goto LABEL_22;
    }
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 40);
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v44 = v30;
      __int16 v45 = 2112;
      id v46 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error downloading credit statements for %@: %@",  buf,  0x16u);
    }
  }

  else
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v39 objects:v48 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v40;
      do
      {
        for (id i = 0LL; i != v11; id i = (char *)i + 1)
        {
          if (*(void *)v40 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
          -[os_log_s setObject:forKey:](v8, "setObject:forKey:", v14, v15);
        }

        id v11 = [v9 countByEnumeratingWithState:&v39 objects:v48 count:16];
      }

      while (v11);
    }

    uint64_t v16 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) creditAccountStatementsForAccountIdentifier:*(void *)(a1 + 40)]);
    __int128 v17 = objc_alloc(&OBJC_CLASS___NSMutableSet);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s allKeys](v8, "allKeys"));
    __int128 v19 = -[NSMutableSet initWithArray:](v17, "initWithArray:", v18);

    __int128 v34 = (void *)v16;
    -[NSMutableSet minusSet:](v19, "minusSet:", v16);
    __int128 v20 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v9 count]);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v21 = v19;
    id v22 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v21,  "countByEnumeratingWithState:objects:count:",  &v35,  v47,  16LL);
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v36;
      do
      {
        for (j = 0LL; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v36 != v24) {
            objc_enumerationMutation(v21);
          }
          os_signpost_id_t v26 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectForKey:]( v8,  "objectForKey:",  *(void *)(*((void *)&v35 + 1) + 8LL * (void)j)));
          -[NSMutableArray addObject:](v20, "addObject:", v26);
        }

        id v23 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v21,  "countByEnumeratingWithState:objects:count:",  &v35,  v47,  16LL);
      }

      while (v23);
    }

    [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateCreditStatements:v20 forAccountIdentifier:*(void *)(a1 + 40)];
    id v27 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _cacheKeyForCreditStatementsWithAccountIdentifier:*(void *)(a1 + 40)]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    PKSharedCacheSetObjectForKey(v28, v27);

    [*(id *)(a1 + 32) _publishStatementsChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }

LABEL_22:
  uint64_t v32 = *(void *)(a1 + 48);
  if (v32)
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) creditAccountStatementsForAccountIdentifier:*(void *)(a1 + 40)]);
    (*(void (**)(uint64_t, void *, void *))(v32 + 16))(v32, v33, v7);
  }
}

void sub_1001E53D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v20 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 allAccountIdentifiers]);
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v7 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (id i = 0LL; i != v10; id i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472LL;
          v24[2] = sub_1001E5640;
          v24[3] = &unk_10063EC90;
          void v24[4] = *(void *)(a1 + 32);
          void v24[5] = v13;
          os_signpost_id_t v25 = v6;
          [v7 addOperation:v24];
        }

        id v10 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }

      while (v10);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1001E575C;
    v21[3] = &unk_10063F000;
    id v15 = *(id *)(a1 + 40);
    id v22 = v6;
    id v23 = v15;
    uint64_t v16 = v6;
    id v17 = [v7 evaluateWithInput:v14 completion:v21];

    id v4 = v20;
  }

  else
  {
    uint64_t v18 = *(void *)(a1 + 40);
    if (v18)
    {
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v19);
    }
  }
}

void sub_1001E5640(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001E5708;
  v13[3] = &unk_10064BC10;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [v8 _creditStatementsForAccountIdentifier:v9 completion:v13];
}

void sub_1001E5708(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count]) {
    [*(id *)(a1 + 32) unionSet:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001E575C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
  }

void sub_1001E5868(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001E596C;
    v10[3] = &unk_10063B440;
    id v11 = v3;
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = *(id *)(a1 + 48);
    dispatch_async(v5, v10);
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
    }
  }
}

void sub_1001E596C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allAccountIdentifiers]);
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) creditStatementWithIdentifier:*(void *)(*((void *)&v16 + 1) + 8 * (void)v8) accountIdentifiers:v2]);
        -[NSMutableSet pk_safelyAddObject:](v3, "pk_safelyAddObject:", v9);

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v6);
  }

  id v10 = *(void **)(a1 + 56);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1001E5B14;
  v13[3] = &unk_1006396B0;
  id v14 = v3;
  id v15 = v10;
  id v12 = v3;
  dispatch_async(v11, v13);
}

void sub_1001E5B14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
  }

void sub_1001E5C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:statementsChangedForAccountIdentifier:") & 1) != 0) {
    [v3 accountManager:*(void *)(a1 + 32) statementsChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
}

void sub_1001E6004(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceStatementsRequest);
  [v4 setAccountIdentifier:a1[4]];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  id v6 = (void *)a1[6];
  uint64_t v7 = *(void **)(a1[5] + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001E60E0;
  v9[3] = &unk_10064B710;
  id v10 = v4;
  id v11 = v6;
  id v8 = v4;
  [v7 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_1001E60E0(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001E6154;
  v4[3] = &unk_10064BC60;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 accountStatementsWithRequest:v3 completion:v4];
}

void sub_1001E6154(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E621C;
  block[3] = &unk_10063C6A8;
  id v9 = *(id *)(a1 + 32);
  id v14 = v6;
  id v15 = v9;
  id v13 = v5;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_1001E621C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statements]);
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 40));
}

void sub_1001E6314(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001E63AC;
  v4[3] = &unk_10064B940;
  void v4[4] = v3;
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v3 accountWithIdentifier:v5 completion:v4];
}

void sub_1001E63AC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastSavingsStatementForAccountIdentifier:v3]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 openingDate]);
  id v8 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceDocumentRequest);
  [v8 setAccountIdentifier:*(void *)(a1 + 40)];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 accountBaseURL]);

  [v8 setBaseURL:v9];
  [v8 setType:1];
  if (v7)
  {
    [v8 setBeginDate:v7];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 setEndDate:v10];
  }

  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v13 = *(void **)(v11 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1001E6520;
  v16[3] = &unk_10064BAD0;
  id v17 = v8;
  uint64_t v18 = v11;
  id v19 = v12;
  id v20 = v6;
  id v21 = *(id *)(a1 + 48);
  id v14 = v6;
  id v15 = v8;
  [v13 performHandlerOnSharedWebServiceQueue:v16];
}

void sub_1001E6520(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001E65D0;
  v5[3] = &unk_10064BC88;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  [a2 savingsAccountStatementsWithRequest:v4 completion:v5];
}

void sub_1001E65D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v13[0] = _NSConcreteStackBlock;
  void v13[2] = sub_1001E66B4;
  v13[3] = &unk_100645E50;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 136);
  v13[1] = 3221225472LL;
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v18 = v6;
  id v19 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, v13);
}

void sub_1001E66B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statements]);
  if ([v2 count])
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteSavingsAccountStatementsWithoutPDFForAccount:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateSavingsAccountStatements:v2 forAccountIdentifier:*(void *)(a1 + 48)];
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) savingsAccountStatementsForAccountIdentifier:*(void *)(a1 + 48)]);

  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  LODWORD(v4) = PKEqualObjects(v4, v5);

  if ((_DWORD)v4) {
    [*(id *)(a1 + 40) _publishStatementsChangedForAccountIdentifier:*(void *)(a1 + 48)];
  }
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E67E0;
  block[3] = &unk_10063C6A8;
  id v11 = *(id *)(a1 + 72);
  id v9 = v3;
  id v10 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1001E67E0(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1001E68A4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) savingsAccountStatementsForAccountIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E694C;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001E694C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001E6A10(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001E6AA8;
  v4[3] = &unk_10064B940;
  void v4[4] = v3;
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v3 accountWithIdentifier:v5 completion:v4];
}

void sub_1001E6AA8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastAccountTaxFormForAccountIdentifier:v3]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 openingDate]);

  id v8 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceDocumentRequest);
  [v8 setAccountIdentifier:*(void *)(a1 + 40)];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 accountBaseURL]);

  [v8 setBaseURL:v9];
  [v8 setType:2];
  if (v7)
  {
    [v8 setBeginDate:v7];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 setEndDate:v10];
  }

  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v13 = *(void **)(v11 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001E6C0C;
  v15[3] = &unk_100646D90;
  id v16 = v8;
  uint64_t v17 = v11;
  id v18 = v12;
  id v19 = *(id *)(a1 + 48);
  id v14 = v8;
  [v13 performHandlerOnSharedWebServiceQueue:v15];
}

void sub_1001E6C0C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001E6CA8;
  v5[3] = &unk_10064BCD8;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 accountTaxFormsWithRequest:v4 completion:v5];
}

void sub_1001E6CA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001E6D78;
  block[3] = &unk_10064BCB0;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 136);
  block[1] = 3221225472LL;
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = v8;
  id v10 = *(id *)(a1 + 48);
  id v17 = v6;
  id v18 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_1001E6D78(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taxForms]);
  if ([v2 count])
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteAccountTaxFormsWithoutPDFForAccount:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountTaxForms:v2 forAccountIdentifier:*(void *)(a1 + 48)];
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountTaxFormsForAccountIdentifier:*(void *)(a1 + 48)]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);

  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E6E80;
  block[3] = &unk_10063C6A8;
  id v10 = *(id *)(a1 + 64);
  id v8 = v4;
  id v9 = *(id *)(a1 + 56);
  id v6 = v4;
  dispatch_async(v5, block);
}

uint64_t sub_1001E6E80(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1001E6F44(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountTaxFormsForAccountIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001E6FFC;
  v7[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1001E6FFC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001E7160(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 24LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedPassUniqueID]);
    LOBYTE(v5) = [v5 passExistsWithUniqueID:v6];

    if ((v5 & 1) != 0)
    {
      uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 32LL);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      void v18[2] = sub_1001E7354;
      v18[3] = &unk_10064BD78;
      id v22 = *(id *)(a1 + 48);
      id v19 = *(id *)(a1 + 40);
      id v8 = v4;
      uint64_t v23 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 32);
      id v20 = v8;
      uint64_t v21 = v9;
      [v7 paymentHardwareStatusWithType:1 completion:v18];

      id v10 = v22;
LABEL_13:

      goto LABEL_14;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Error calling create virtual card, no pass locally provisioned",  buf,  2u);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      uint64_t v14 = PKAccountErrorDomain;
      uint64_t v15 = 7LL;
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v11 = PKLogFacilityTypeGetObject(14LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Error calling create virtual card, no account",  buf,  2u);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      uint64_t v14 = PKAccountErrorDomain;
      uint64_t v15 = 3LL;
LABEL_12:
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v14,  v15,  0LL));
      (*(void (**)(uint64_t, void, void, void *))(v13 + 16))(v13, 0LL, 0LL, v10);
      goto LABEL_13;
    }
  }

void sub_1001E7354(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 canDecryptBAAEncryptedData])
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v27 = 0x3032000000LL;
    __int128 v28 = sub_1001DB0CC;
    __int128 v29 = sub_1001DB0DC;
    id v30 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceCreateVirtualCardRequest);
    [*(id *)(*((void *)&buf + 1) + 40) setAccountIdentifier:*(void *)(a1 + 32)];
    uint64_t v4 = *(void **)(*((void *)&buf + 1) + 40LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountBaseURL]);
    [v4 setBaseURL:v5];

    [*(id *)(*((void *)&buf + 1) + 40) setType:*(void *)(a1 + 64)];
    uint64_t v20 = 0LL;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x3032000000LL;
    uint64_t v23 = sub_1001DB0CC;
    uint64_t v24 = sub_1001DB0DC;
    id v25 = objc_alloc_init(&OBJC_CLASS___PKVirtualCardEncryptionFields);
    id v6 = (void *)v21[5];
    v15[0] = _NSConcreteStackBlock;
    v15[2] = sub_1001E7618;
    v15[3] = &unk_10064BD50;
    id v8 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(v7 + 144);
    v15[1] = 3221225472LL;
    p___int128 buf = &buf;
    id v19 = &v20;
    void v15[4] = v7;
    id v16 = v8;
    id v17 = *(id *)(a1 + 56);
    [v6 prepareCertificateWithQueue:v9 completion:v15];

    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&buf, 8);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error calling create virtual card, hardware doesn't support BAA certificate generation with status: %@",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  4LL,  0LL));
      (*(void (**)(uint64_t, void, void, void *))(v13 + 16))(v13, 0LL, 0LL, v14);
    }
  }
}

void sub_1001E75E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001E7618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001E76C4;
  v5[3] = &unk_10064BD28;
  uint64_t v8 = *(void *)(a1 + 56);
  void v5[4] = v2;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  [v4 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_1001E76C4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_1001E7768;
  v7[3] = &unk_10064BD00;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v4 + 40);
  v7[1] = 3221225472LL;
  id v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [a2 createVirtualCardWithRequest:v6 completion:v7];
}

void sub_1001E7768(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 virtualCard]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);

  if (v5 || !v7)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, void, void, id))(v12 + 16))(v12, 0LL, 0LL, v5);
    }
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v10 = *(dispatch_queue_s **)(v8 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E7870;
    block[3] = &unk_10064BCB0;
    void block[4] = v8;
    id v14 = v9;
    id v15 = v6;
    id v11 = *(id *)(a1 + 48);
    id v16 = 0LL;
    id v17 = v11;
    dispatch_async(v10, block);
  }
}

void sub_1001E7870(id *a1)
{
  id v2 = a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] accountIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_accountWithIdentifier:", v3));

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 creditDetails]);
    [v5 addOrUpdateVirtualCard:a1[6]];

    id v6 = objc_msgSend(a1[4], "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0);
    id v7 = (dispatch_queue_s *)*((void *)a1[4] + 18);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1001E7994;
    v8[3] = &unk_10063CD60;
    id v12 = a1[8];
    id v9 = a1[6];
    id v10 = a1[5];
    id v11 = a1[7];
    dispatch_async(v7, v8);
  }
}

void sub_1001E7994(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, uint64_t, id, void))(v2 + 16))(v2, v3, v4, *(void *)(a1 + 48));
}

void sub_1001E7C30(uint64_t a1, void *a2)
{
  id v3 = a2;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1001E7F70;
  v33[3] = &unk_10064BDC8;
  id v34 = *(id *)(a1 + 56);
  id v4 = objc_retainBlock(v33);
  if (!v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Error calling virtual card action, no account",  buf,  2u);
    }

    uint64_t v15 = PKAccountErrorDomain;
    uint64_t v16 = 3LL;
    goto LABEL_14;
  }

  id v5 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedPassUniqueID]);
  LOBYTE(v5) = [v5 passExistsWithUniqueID:v6];

  if ((v5 & 1) == 0)
  {
    uint64_t v17 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Error calling virtual card action, no pass locally provisioned",  buf,  2u);
    }

    uint64_t v15 = PKAccountErrorDomain;
    uint64_t v16 = 7LL;
LABEL_14:
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v15,  v16,  0LL));
    ((void (*)(void *, void, void, void *))v4[2])(v4, 0LL, 0LL, v19);
    goto LABEL_17;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 creditDetails]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 virtualCards]);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_1001E7F84;
  v30[3] = &unk_10064B388;
  id v31 = *(id *)(a1 + 40);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_anyObjectPassingTest:", v30));

  if ([v9 hasSensitiveCredentials] && *(void *)(a1 + 64) == 1)
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(14LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Virtual card already has encrypted data, suppress fetch",  buf,  2u);
    }

    id v12 = [v3 copy];
    ((void (*)(void *, void *, id, void))v4[2])(v4, v9, v12, 0LL);
  }

  else
  {
    uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_1001E8004;
    v23[3] = &unk_10064BE90;
    __int128 v28 = v4;
    id v24 = *(id *)(a1 + 48);
    id v25 = v3;
    id v21 = *(id *)(a1 + 40);
    uint64_t v29 = *(void *)(a1 + 64);
    uint64_t v22 = *(void *)(a1 + 32);
    id v26 = v21;
    uint64_t v27 = v22;
    [v20 paymentHardwareStatusWithType:1 completion:v23];

    id v12 = v28;
  }

  id v19 = v31;
LABEL_17:
}

uint64_t sub_1001E7F70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001E7F84(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_1001E8004(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 canDecryptBAAEncryptedData])
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceVirtualCardManageRequest);
    [v4 setAccountIdentifier:*(void *)(a1 + 32)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountBaseURL]);
    [v4 setBaseURL:v5];

    [v4 setVirtualCardIdentifier:*(void *)(a1 + 48)];
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(v7 + 144);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1001E8210;
    v17[3] = &unk_10064BE68;
    void v17[4] = v7;
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 72);
    id v18 = v9;
    uint64_t v22 = v10;
    id v19 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 64);
    id v20 = v4;
    id v21 = v11;
    id v12 = v4;
    [v12 setAction:v6 withQueue:v8 completion:v17];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Error calling virtual card action, hardware doesn't support BAA certificate generation with status: %@",  buf,  0xCu);
    }

    uint64_t v16 = *(void *)(a1 + 64);
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  4LL,  0LL));
    (*(void (**)(uint64_t, void, void, id))(v16 + 16))(v16, 0LL, 0LL, v12);
  }
}

void sub_1001E8210(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001E82E0;
    v11[3] = &unk_10064BE40;
    id v6 = v3;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 40);
    id v12 = v6;
    uint64_t v13 = v7;
    id v9 = v8;
    uint64_t v10 = *(void *)(a1 + 72);
    id v14 = v9;
    uint64_t v17 = v10;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 64);
    [v5 performHandlerOnSharedWebServiceQueue:v11];
  }
}

void sub_1001E82E0(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001E8398;
  v7[3] = &unk_10064BE18;
  uint64_t v4 = *(void *)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  id v8 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  [a2 virtualCardActionWithRequest:v4 completion:v7];
}

void sub_1001E8398(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 virtualCard]);
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
    *(_DWORD *)__int128 buf = 138412290;
    id v25 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Manage virtual card response with: %@",  buf,  0xCu);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  if (v5 || !v10)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = *(dispatch_queue_s **)(v11 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E8558;
    block[3] = &unk_10064BDF0;
    void block[4] = v11;
    id v18 = v12;
    id v14 = v6;
    uint64_t v15 = *(void *)(a1 + 64);
    id v19 = v14;
    uint64_t v23 = v15;
    id v20 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    id v21 = 0LL;
    id v22 = v16;
    dispatch_async(v13, block);
  }
}

void sub_1001E8558(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_accountWithIdentifier:", v3));

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 creditDetails]);
    [v5 addOrUpdateVirtualCard:*(void *)(a1 + 48)];

    if ((*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 creditDetails]);
      [v6 removeVirtualCard:*(void *)(a1 + 56)];
    }

    id v7 = objc_msgSend(*(id *)(a1 + 32), "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0);
    id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001E86A8;
    v9[3] = &unk_10063CD60;
    id v13 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 64);
    dispatch_async(v8, v9);
  }
}

void sub_1001E86A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, uint64_t, id, void))(v2 + 16))(v2, v3, v4, *(void *)(a1 + 48));
}

void sub_1001E87AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001E88B4;
    v10[3] = &unk_100646D90;
    id v11 = v3;
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = *(id *)(a1 + 48);
    [v5 performHandlerOnSharedWebServiceQueue:v10];
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
      (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0LL, 0LL, v9);
    }
  }
}

void sub_1001E88B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceVirtualCardListRequest);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountBaseURL]);
  [v4 setBaseURL:v5];

  [v4 setAccountIdentifier:*(void *)(a1 + 40)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001E899C;
  v6[3] = &unk_10064BEE0;
  void v6[4] = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 56);
  [v3 virtualCardListWithRequest:v4 completion:v6];
}

void sub_1001E899C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc(&OBJC_CLASS___NSSet);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 virtualCards]);

  id v9 = -[NSSet initWithArray:](v7, "initWithArray:", v8);
  if (v5 || !v9)
  {
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(uint64_t, void, void, id))(v14 + 16))(v14, 0LL, 0LL, v5);
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(a1 + 40);
    id v12 = *(dispatch_queue_s **)(v10 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E8AD0;
    block[3] = &unk_10064BCB0;
    void block[4] = v10;
    id v16 = v11;
    uint64_t v17 = v9;
    id v13 = *(id *)(a1 + 48);
    id v18 = 0LL;
    id v19 = v13;
    dispatch_async(v12, block);
  }
}

void sub_1001E8AD0(id *a1)
{
  id v2 = a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] accountIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_accountWithIdentifier:", v3));

  if (v4)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v5 = a1[6];
    id v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v21;
      do
      {
        for (id i = 0LL; i != v7; id i = (char *)i + 1)
        {
          if (*(void *)v21 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);

          if (v11)
          {
            id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 creditDetails]);
            [v12 addOrUpdateVirtualCard:v10];
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v7);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0));
    uint64_t v14 = (dispatch_queue_s *)*((void *)a1[4] + 18);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E8CC8;
    block[3] = &unk_10063C6A8;
    id v19 = a1[8];
    id v17 = v13;
    id v18 = a1[7];
    id v15 = v13;
    dispatch_async(v14, block);
  }

void sub_1001E8CC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creditDetails]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 virtualCards]);
    id v4 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, void *, id, void))(v1 + 16))(v1, v3, v4, *(void *)(a1 + 40));
  }

void sub_1001E903C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001E912C;
  block[3] = &unk_10064BF08;
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[1] = 3221225472LL;
  id v18 = v6;
  id v19 = v7;
  id v10 = v8;
  id v12 = *(void **)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  id v20 = v10;
  uint64_t v24 = v11;
  id v13 = v12;
  uint64_t v14 = *(void *)(a1 + 32);
  id v23 = v13;
  uint64_t v21 = v14;
  id v22 = *(id *)(a1 + 48);
  id v15 = v7;
  id v16 = v6;
  dispatch_async(v9, block);
}

void sub_1001E912C(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___PDVirtualCardDecryptionRequest);
    -[PDVirtualCardDecryptionRequest setVirtualCard:](v6, "setVirtualCard:", *(void *)(a1 + 32));
    -[PDVirtualCardDecryptionRequest setAuthorization:](v6, "setAuthorization:", *(void *)(a1 + 48));
    -[PDVirtualCardDecryptionRequest setAction:](v6, "setAction:", *(void *)(a1 + 80));
    -[PDVirtualCardDecryptionRequest setCompletion:](v6, "setCompletion:", *(void *)(a1 + 72));
    [*(id *)(a1 + 56) _queueDecryptionRequest:v6];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Fetching virtual card failed, fallback to Keychain",  buf,  2u);
    }

    id v4 = *(void **)(a1 + 64);
    id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 56) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E9268;
    block[3] = &unk_10063AC90;
    id v8 = v4;
    id v9 = *(id *)(a1 + 72);
    dispatch_async(v5, block);
  }

void sub_1001E9268(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainCardCredentials]);
  if (v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainVirtualCard]);
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 keychainCardCredentials]);
    (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v4, 0LL);
  }
}

void sub_1001E9300(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___PDVirtualCardDecryptionRequest);
  -[PDVirtualCardDecryptionRequest setVirtualCard:](v2, "setVirtualCard:", *(void *)(a1 + 32));
  -[PDVirtualCardDecryptionRequest setAuthorization:](v2, "setAuthorization:", *(void *)(a1 + 40));
  -[PDVirtualCardDecryptionRequest setAction:](v2, "setAction:", *(void *)(a1 + 64));
  -[PDVirtualCardDecryptionRequest setCompletion:](v2, "setCompletion:", *(void *)(a1 + 56));
  [*(id *)(a1 + 48) _queueDecryptionRequest:v2];
}

void sub_1001E95C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1001E9604(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001E96D0;
  v9[3] = &unk_10064BF98;
  objc_copyWeak(v13, (id *)(a1 + 64));
  v13[1] = (id)cf;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v8;
  dispatch_async(v5, v9);

  objc_destroyWeak(v13);
}

void sub_1001E96D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v3 = *(void *)(a1 + 72);
  if (WeakRetained)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      id v44 = 0LL;
      uint64_t v5 = PKDecryptDeviceDataWithError(v4, v3, &v44);
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      id v7 = v44;
      if (v6)
      {
        id v40 = 0LL;
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v6,  0LL,  &v40));
        id v9 = v40;
        *((_BYTE *)WeakRetained + 104) = 0;
        if ([*((id *)WeakRetained + 14) count]) {
          [*((id *)WeakRetained + 14) removeObjectAtIndex:0];
        }
        if (v9)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(14LL);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v48 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error: cannot serialize decrypted card data because it's not in JSON format: %@",  buf,  0xCu);
          }

          id v13 = (dispatch_queue_s *)*((void *)WeakRetained + 18);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_1001E9EEC;
          block[3] = &unk_1006396B0;
          id v39 = *(id *)(a1 + 48);
          id v38 = v9;
          dispatch_async(v13, block);

          uint64_t v14 = v39;
        }

        else
        {
          id v33 = v7;
          uint64_t v32 = v8;
          id v21 = [[PKVirtualCardCredentials alloc] initWithDictionary:v8];
          id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) accountWithVirtualCardIdentifier:v14]);
          unsigned int v23 = [v22 supportsDynamicSecurityCodes];
          if ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) hasDynamicSecurityCode]) {
            BOOL v24 = v23 == 0;
          }
          else {
            BOOL v24 = 1;
          }
          if (!v24)
          {
            id v31 = *(void **)(a1 + 32);
            id v25 = [*(id *)(a1 + 40) action];
            id v26 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) securityCodeIdentifier]);
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v22 accountIdentifier]);
            [v31 noteSecurityCodeActivityWithAction:v25 forSecurityCodeIdentifier:v26 forVirtualCardIdentifier:v14 forAccountIdentifier:v27 completion:&stru_10064BF70];
          }

          __int128 v28 = (dispatch_queue_s *)*((void *)WeakRetained + 18);
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472LL;
          v34[2] = sub_1001E9FA4;
          v34[3] = &unk_1006396B0;
          id v29 = *(id *)(a1 + 48);
          id v35 = v21;
          id v36 = v29;
          id v30 = v21;
          dispatch_async(v28, v34);

          id v8 = v32;
          id v7 = v33;
        }

        [WeakRetained _executeDecryptionRequests];
      }

      else
      {
        uint64_t v18 = PKLogFacilityTypeGetObject(14LL);
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Fatal error decrypting virtual card",  buf,  2u);
        }

        uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 144LL);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_1001E9BE8;
        v41[3] = &unk_10063AC90;
        id v42 = WeakRetained;
        id v43 = *(id *)(a1 + 48);
        PKForceRefreshBAACertificateAndKey(v20, v41);

        id v9 = v42;
      }

      CFRelease(*(CFTypeRef *)(a1 + 72));
    }

    else
    {
      uint64_t v15 = PKLogFacilityTypeGetObject(14LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Fatal error: no reference key from Device Identity",  buf,  2u);
      }

      *((_BYTE *)WeakRetained + 104) = 0;
      if ([*((id *)WeakRetained + 14) count]) {
        [*((id *)WeakRetained + 14) removeObjectAtIndex:0];
      }
      id v17 = (dispatch_queue_s *)*((void *)WeakRetained + 18);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_1001E9B84;
      v45[3] = &unk_10063A830;
      id v46 = *(id *)(a1 + 48);
      dispatch_async(v17, v45);
      [WeakRetained _executeDecryptionRequests];
    }
  }

  else if (v3)
  {
    CFRelease(*(CFTypeRef *)(a1 + 72));
  }
}

void sub_1001E9B84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc(&OBJC_CLASS___NSError);
  uint64_t v3 = -[NSError initWithDomain:code:userInfo:](v2, "initWithDomain:code:userInfo:", PKAccountErrorDomain, 6LL, 0LL);
  (*(void (**)(uint64_t, void, NSError *))(v1 + 16))(v1, 0LL, v3);
}

void sub_1001E9BE8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001E9C70;
  v3[3] = &unk_10063F520;
  id v4 = v2;
  id v5 = *(id *)(a1 + 40);
  [v4 accountsWithCompletion:v3];
}

void sub_1001E9C70(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(a1 + 32);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)v7) accountIdentifier]);
        [v8 deleteVirtualCardEncryptedDataForAccountIdentifier:v9 completion:0];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v5);
  }

  id v10 = *(void **)(a1 + 32);
  id v11 = (dispatch_queue_s *)v10[17];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001E9DE4;
  v12[3] = &unk_10063AC90;
  id v13 = v10;
  id v14 = *(id *)(a1 + 40);
  dispatch_async(v11, v12);
}

void sub_1001E9DE4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 104LL) = 0;
  if ([*(id *)(*(void *)(a1 + 32) + 112) count]) {
    [*(id *)(*(void *)(a1 + 32) + 112) removeObjectAtIndex:0];
  }
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E9E88;
  block[3] = &unk_10063A830;
  id v5 = v2;
  dispatch_async(v3, block);
  [*(id *)(a1 + 32) _executeDecryptionRequests];
}

void sub_1001E9E88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc(&OBJC_CLASS___NSError);
  id v3 = -[NSError initWithDomain:code:userInfo:](v2, "initWithDomain:code:userInfo:", PKAccountErrorDomain, 5LL, 0LL);
  (*(void (**)(uint64_t, void, NSError *))(v1 + 16))(v1, 0LL, v3);
}

uint64_t sub_1001E9EEC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_1001E9F00(id a1, PKVirtualCard *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Called noteSecurityCodeActivityWithAction after decryption with error: %@",  (uint8_t *)&v6,  0xCu);
  }
}

uint64_t sub_1001E9FA4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001EA110(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001EA26C;
    v11[3] = &unk_10064C060;
    id v16 = *(id *)(a1 + 56);
    id v12 = v3;
    id v13 = *(id *)(a1 + 40);
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    id v14 = v5;
    uint64_t v15 = v6;
    [v4 paymentHardwareStatusWithType:1 completion:v11];

    id v7 = v16;
LABEL_7:

    goto LABEL_8;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Error calling legacy virtual card, no account",  buf,  2u);
  }

  uint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
    goto LABEL_7;
  }

void sub_1001EA26C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 canDecryptBAAEncryptedData])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creditDetails]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 virtualCardWithIdentifier:*(void *)(a1 + 40)]);

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 keychainVirtualCard]);
    if (v6)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Virtual card is already in Keychain, no need to fetch",  (uint8_t *)&buf,  2u);
      }

      uint64_t v9 = *(void *)(a1 + 64);
      if (v9) {
        (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0LL);
      }
    }

    else
    {
      id v14 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceVirtualCardLegacyCredentialsRequest);
      [v14 setAccountIdentifier:*(void *)(a1 + 48)];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountBaseURL]);
      [v14 setBaseURL:v15];

      [v14 setVirtualCardIdentifier:*(void *)(a1 + 40)];
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v28 = 0x3032000000LL;
      id v29 = sub_1001DB0CC;
      id v30 = sub_1001DB0DC;
      id v31 = objc_alloc_init(&OBJC_CLASS___PKVirtualCardEncryptionFields);
      id v16 = *(void **)(*((void *)&buf + 1) + 40LL);
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 144LL);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_1001EA584;
      v21[3] = &unk_10064C038;
      id v18 = v14;
      p___int128 buf = &buf;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void **)(a1 + 64);
      id v22 = v18;
      uint64_t v23 = v19;
      id v25 = v20;
      id v24 = *(id *)(a1 + 32);
      [v16 prepareOneTimeCertificateWithQueue:v17 completion:v21];

      _Block_object_dispose(&buf, 8);
    }

    goto LABEL_12;
  }

  uint64_t v10 = PKLogFacilityTypeGetObject(14LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error calling legacy virtual card, hardware doesn't support BAA certificate generation with status: %@",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  4LL,  0LL));
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v5);
LABEL_12:
  }
}

void sub_1001EA564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001EA584(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 && !v5)
  {
    CFRetain(a2);
    [*(id *)(a1 + 32) setEncryptionFields:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    id v7 = *(void **)(a1 + 32);
    id v8 = *(void **)(*(void *)(a1 + 40) + 32LL);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1001EA6E0;
    v19[3] = &unk_10064C010;
    uint64_t v9 = (id *)v20;
    v20[0] = v7;
    v22[1] = a2;
    uint64_t v10 = (id *)v22;
    id v11 = *(id *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void **)(a1 + 48);
    v22[0] = v11;
    v20[1] = v12;
    id v21 = v13;
    [v8 performHandlerOnSharedWebServiceQueue:v19];

LABEL_6:
    goto LABEL_7;
  }

  id v14 = *(void **)(a1 + 56);
  if (v14)
  {
    uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001EAB94;
    block[3] = &unk_1006396B0;
    uint64_t v9 = &v18;
    id v18 = v14;
    uint64_t v10 = &v17;
    id v17 = v6;
    dispatch_async(v15, block);
    goto LABEL_6;
  }

void sub_1001EA6E0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001EA788;
  v8[3] = &unk_10064BFE8;
  __int128 v7 = *(_OWORD *)(a1 + 56);
  id v5 = (id)v7;
  __int128 v10 = v7;
  uint64_t v6 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v6;
  [a2 virtualCardLegacyCredentialsWithRequest:v4 completion:v8];
}

void sub_1001EA788(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 virtualCard]);
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
    *(_DWORD *)__int128 buf = 138412290;
    id v42 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Legacy credentials virtual card response with: %@",  buf,  0xCu);
  }

  if (!v5 && v6)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    id v40 = 0LL;
    uint64_t v11 = PKDecryptDeviceDataWithError(v6, v10, &v40);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = v40;
    if (v13)
    {
      id v14 = *(void **)(a1 + 48);
      if (!v14)
      {
LABEL_20:

        goto LABEL_21;
      }

      uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001EAB54;
      block[3] = &unk_1006396B0;
      id v39 = v14;
      id v38 = v13;
      dispatch_async(v15, block);

      id v16 = v39;
LABEL_19:

      goto LABEL_20;
    }

    id v36 = 0LL;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v12,  0LL,  &v36));
    id v16 = v36;
    if (v16)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 description]);
        *(_DWORD *)__int128 buf = 138412290;
        id v42 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error: cannot serialize decrypted card data because it's not in JSON format: %@",  buf,  0xCu);
      }

      id v21 = *(void **)(a1 + 48);
      if (!v21) {
        goto LABEL_18;
      }
      id v22 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_1001EAB64;
      v33[3] = &unk_1006396B0;
      id v35 = v21;
      id v34 = v16;
      dispatch_async(v22, v33);

      id v23 = v35;
    }

    else
    {
      id v23 = [[PKVirtualCardCredentials alloc] initWithDictionary:v19];
      uint64_t v24 = PKLocalizedFeatureString(@"ACCOUNT_SERVICE_DISPLAY_NAME", [*(id *)(a1 + 40) feature]);
      id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      [v6 setDisplayName:v25];

      [v6 setKeychainCardCredentials:v23];
      [v6 writeKeychainVirtualCardToKeychain];
      id v26 = *(void **)(a1 + 48);
      if (v26)
      {
        uint64_t v27 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472LL;
        v31[2] = sub_1001EAB74;
        v31[3] = &unk_10063A830;
        id v32 = v26;
        dispatch_async(v27, v31);
      }
    }

LABEL_18:
    goto LABEL_19;
  }

  id v17 = *(void **)(a1 + 48);
  if (v17)
  {
    id v18 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1001EAB84;
    v28[3] = &unk_1006396B0;
    id v30 = v17;
    id v29 = v5;
    dispatch_async(v18, v28);

    id v13 = v30;
LABEL_21:
  }

  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t sub_1001EAB54(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001EAB64(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001EAB74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001EAB84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001EAB94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001EAC28(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  id v4 = a2;
  id v5 = objc_alloc(&OBJC_CLASS___PDAccountPromptForVirtualCardDetailNotification);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 accountIdentifier]);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 associatedPassUniqueID]);

  uint64_t v10 = -[PDAccountPromptForVirtualCardDetailNotification initWithAccountIdentifier:virtualCardIdentifier:forPassUniqueIdentifier:]( v5,  "initWithAccountIdentifier:virtualCardIdentifier:forPassUniqueIdentifier:",  v6,  v7,  v8);
  id v9 = *(void **)(*(void *)(a1 + 40) + 160LL);
  if (v3) {
    [v9 insertUserNotification:v10];
  }
  else {
    [v9 removeUserNotification:v10];
  }
}

void sub_1001EAD78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 creditDetails]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 virtualCards]);

  if (v5)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (id i = 0LL; i != v8; id i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          [v11 setEncryptedData:0];
          [v11 setEphemeralPublicKey:0];
        }

        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v8);
    }

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001EAF20;
    v14[3] = &unk_10063A830;
    uint64_t v12 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    [v12 insertOrReplaceAccount:v3 extended:1 deleteSensitiveData:1 completion:v14];
  }

  else
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(void))(v13 + 16))();
    }
  }
}

uint64_t sub_1001EAF20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001EAFD8(uint64_t a1, void *a2)
{
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v34;
    uint64_t v23 = *(void *)v34;
    while (2)
    {
      id v6 = 0LL;
      id v24 = v4;
      do
      {
        if (*(void *)v34 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)v6);
        if ([v7 type] == (id)1)
        {
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 creditDetails]);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 virtualCards]);

          id v10 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
          if (v10)
          {
            id v11 = v10;
            uint64_t v12 = *(void *)v30;
LABEL_9:
            uint64_t v13 = 0LL;
            while (1)
            {
              if (*(void *)v30 != v12) {
                objc_enumerationMutation(v9);
              }
              id v14 = *(void **)(*((void *)&v29 + 1) + 8 * v13);
              uint64_t v15 = *(void *)(a1 + 32);
              __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
              LOBYTE(v15) = PKEqualObjects(v15, v16);

              if ((v15 & 1) != 0) {
                break;
              }
              if (v11 == (id)++v13)
              {
                id v11 = [v9 countByEnumeratingWithState:&v29 objects:v39 count:16];
                if (v11) {
                  goto LABEL_9;
                }
                goto LABEL_15;
              }
            }

            __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            [v14 setLastAutoFilledBySafari:v17];

            id v18 = v7;
            uint64_t v5 = v23;
            id v4 = v24;
            if (!v18) {
              goto LABEL_17;
            }

            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472LL;
            v27[2] = sub_1001EB334;
            v27[3] = &unk_10063A830;
            id v22 = *(void **)(a1 + 40);
            id v28 = *(id *)(a1 + 48);
            [v22 insertOrReplaceAccount:v18 extended:1 deleteSensitiveData:0 completion:v27];

            goto LABEL_24;
          }

uint64_t sub_1001EB334(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Virtual card used in Safari, last used date updated locally",  v5,  2u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001EB45C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 creditDetails]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 virtualCards]);

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      for (id i = 0LL; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
        if ([v11 supportsLocalStorage])
        {
          uint64_t v13 = *(void **)(a1 + 32);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472LL;
          void v17[2] = sub_1001EB640;
          v17[3] = &unk_10064C0D0;
          void v17[4] = *(void *)(a1 + 32);
          id v15 = v12;
          id v18 = v15;
          id v19 = *(id *)(a1 + 40);
          [v13 performVirtualCardAction:1 forVirtualCardIdentifier:v15 forAccountIdentifier:v14 completion:v17];
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v8);
  }

  uint64_t v16 = *(void *)(a1 + 48);
  if (v16) {
    (*(void (**)(void))(v16 + 16))();
  }
}

void sub_1001EB640(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Proactively fetched virtual card encrypted data with error: %@",  (uint8_t *)&v8,  0xCu);
  }

  [*(id *)(a1 + 32) fetchKeychainCredentialForVirtualCardIdentifier:*(void *)(a1 + 40) forAccountIdentifier:*(void *)(a1 + 48) completion:&stru_10064C0A8];
}

void sub_1001EB70C(id a1, NSError *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Proactively fetched virtual card keychain data with error: %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_1001EB8A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  int v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001EB984;
  v11[3] = &unk_10064C148;
  id v12 = v4;
  id v13 = v3;
  id v14 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  int v8 = *(void **)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  id v15 = v6;
  uint64_t v18 = v7;
  id v9 = v8;
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v9;
  id v10 = v3;
  [v5 performHandlerOnSharedWebServiceQueue:v11];
}

void sub_1001EB984(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceVirtualCardSecurityCodeActivityRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountBaseURL]);
  [v4 setBaseURL:v5];

  [v4 setVirtualCardIdentifier:*(void *)(a1 + 48)];
  [v4 setSecurityCodeIdentifier:*(void *)(a1 + 56)];
  [v4 setAction:*(void *)(a1 + 80)];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v4 setTimestamp:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001EBAC4;
  v9[3] = &unk_10064C120;
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 64);
  id v12 = v7;
  void v9[4] = v8;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  [v3 virtualCardSecurityCodeActivity:v4 completion:v9];
}

void sub_1001EBAC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_1001EBC30;
  v19[3] = &unk_10064C0F8;
  id v6 = *(id *)(a1 + 56);
  void v19[4] = *(void *)(a1 + 32);
  id v20 = v6;
  id v7 = a2;
  uint64_t v8 = objc_retainBlock(v19);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 virtualCard]);

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  if (v5 || !v10)
  {
    ((void (*)(void *, void, id))v8[2])(v8, 0LL, v5);
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    id v13 = *(dispatch_queue_s **)(v11 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001EBD04;
    block[3] = &unk_10063CD88;
    void block[4] = v11;
    id v15 = v12;
    id v16 = v9;
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = v8;
    dispatch_async(v13, block);
  }
}

void sub_1001EBC30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001EBCF0;
    block[3] = &unk_10063C6A8;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_1001EBCF0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001EBD04(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_queue_accountWithIdentifier:", v3));

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 creditDetails]);
    [v5 addOrUpdateVirtualCard:*(void *)(a1 + 48)];

    id v6 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:",  v4,  1,  0));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 creditDetails]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 virtualCardWithIdentifier:*(void *)(a1 + 56)]);

    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1001EBE28;
    v12[3] = &unk_1006396B0;
    id v10 = *(id *)(a1 + 64);
    id v13 = v8;
    id v14 = v10;
    id v11 = v8;
    dispatch_async(v9, v12);
  }

uint64_t sub_1001EBE28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001EBF00(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_queue_accountWithIdentifier:", *(void *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "_queue_updatePhysicalCardsIfNecessaryForAccount:", v2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 40)]);
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001EBFCC;
  v7[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1001EBFCC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001EC09C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = a3;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);

    int v10 = 138412546;
    id v11 = v9;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed updating physical cards proactively for account %@. Error: %@",  (uint8_t *)&v10,  0x16u);
  }
}

void sub_1001EC3B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001EC41C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001EC4E8;
  block[3] = &unk_10063F190;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001EC4E8(id *a1)
{
  if (a1[4])
  {
    uint64_t v2 = PKUIOnlyDemoModeEnabled(a1);
    if ((v2 & 1) != 0 || PKStoreDemoModeEnabled(v2, v3))
    {
      id v4 = (void (**)(id, void *, void))a1[8];
      if (v4)
      {
        id v5 = (void *)*((void *)a1[6] + 3);
        id v26 = (id)objc_claimAutoreleasedReturnValue([a1[4] accountIdentifier]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 physicalCardsForAccountWithIdentifier:v26]);
        v4[2](v4, v6, 0LL);
      }
    }

    else
    {
      id v12 = [a1[4] type];
      if ((unint64_t)v12 > 4 || v12 == (id)1)
      {
        if (([a1[7] force] & 1) != 0
          || ([a1[6] _shouldProactivelyFetchEndpoint:10 metadataType:7 fetchPeriodEndpoint:9 account:a1[4]] & 1) != 0)
        {
          *(void *)&__int128 buf = 0LL;
          *((void *)&buf + 1) = &buf;
          uint64_t v40 = 0x3032000000LL;
          __int128 v41 = sub_1001DB0CC;
          id v42 = sub_1001DB0DC;
          id v15 = (void *)objc_claimAutoreleasedReturnValue( [*((id *)a1[6] + 3) accountEndpointMetadataForAccountIdentifier:a1[5] endpoint:7]);
          id v16 = v15;
          if (v15) {
            id v17 = v15;
          }
          else {
            id v17 = -[PDAccountWebServiceEndpointMetadata initWithAccountIdentifier:endpoint:]( objc_alloc(&OBJC_CLASS___PDAccountWebServiceEndpointMetadata),  "initWithAccountIdentifier:endpoint:",  a1[5],  7LL);
          }
          id v43 = v17;

          id v18 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServicePhysicalCardsRequest);
          id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountBaseURL]);
          [v18 setBaseURL:v19];

          [v18 setAccountIdentifier:a1[5]];
          id v20 = (void *)*((void *)a1[6] + 4);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472LL;
          v27[2] = sub_1001EC98C;
          v27[3] = &unk_10064C1E8;
          id v21 = v18;
          id v22 = a1[6];
          id v28 = v21;
          id v29 = v22;
          id v30 = a1[4];
          p___int128 buf = &buf;
          id v31 = a1[5];
          id v32 = a1[8];
          [v20 performHandlerOnSharedWebServiceQueue:v27];

          _Block_object_dispose(&buf, 8);
        }

        else
        {
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[6] + 3) physicalCardsForAccountWithIdentifier:a1[5]]);
          id v24 = a1[8];
          if (v24)
          {
            id v25 = (dispatch_queue_s *)*((void *)a1[6] + 18);
            v34[0] = _NSConcreteStackBlock;
            v34[1] = 3221225472LL;
            v34[2] = sub_1001EC978;
            v34[3] = &unk_1006396B0;
            id v36 = v24;
            id v35 = v23;
            dispatch_async(v25, v34);
          }
        }
      }

      else
      {
        id v14 = a1[8];
        if (v14) {
          (*((void (**)(id, void, void))v14 + 2))(v14, 0LL, 0LL);
        }
      }
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = a1[5];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@",  (uint8_t *)&buf,  0xCu);
    }

    id v10 = a1[8];
    if (v10)
    {
      id v11 = (dispatch_queue_s *)*((void *)a1[6] + 18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001EC914;
      block[3] = &unk_10063A830;
      id v38 = v10;
      dispatch_async(v11, block);
    }
  }

void sub_1001EC8F4(_Unwind_Exception *a1)
{
}

void sub_1001EC914(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_1001EC978(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001EC98C(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001ECA44;
  v7[3] = &unk_10064C1C0;
  uint64_t v4 = *(void *)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  id v8 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  [a2 physicalCardsWithRequest:v4 completion:v7];
}

void sub_1001ECA44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001ECB34;
  block[3] = &unk_10064C198;
  id v14 = v7;
  id v15 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v18 = v5;
  id v19 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, block);
}

void sub_1001ECB34(uint64_t a1)
{
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([*(id *)(a1 + 32) feature]);
  uint64_t v3 = *(void **)(a1 + 40);
  if (!v3)
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:10 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    id v14 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v14 setLastUpdated:v15];

    uint64_t v16 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)]);
    uint64_t v17 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    id v19 = *(void **)(*(void *)(a1 + 48) + 24LL);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) physicalCards]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 replacePhysicalCards:v20 forAccountWithIdentifier:*(void *)(a1 + 56)]);

    id v22 = *(void **)(a1 + 48);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_1001ECEFC;
    v33[3] = &unk_10064B8F0;
    void v33[4] = v22;
    id v10 = v21;
    id v34 = v10;
    id v35 = *(id *)(a1 + 56);
    [v22 _accessObserversWithHandler:v33];
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) expirationMessaging]);
    id v24 = [v23 count];

    if (v24)
    {
      id v25 = *(void **)(a1 + 48);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) expirationMessaging]);
      [v25 processPhysicalCardExpirationMessaging:v26 physicalCards:v10 account:*(void *)(a1 + 32)];
    }

    uint64_t v27 = *(void **)(a1 + 72);
    if (v27)
    {
      id v28 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_1001ECF4C;
      v29[3] = &unk_10063C6A8;
      id v32 = v27;
      id v30 = v10;
      id v31 = *(id *)(a1 + 40);
      dispatch_async(v28, v29);
    }

    id v13 = v34;
    goto LABEL_11;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    *(_DWORD *)__int128 buf = 138412290;
    __int128 v41 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Could not fetch physical cards with error %@",  buf,  0xCu);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
  uint64_t v7 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v10 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 56)]);
  [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:10 accountIdentifier:*(void *)(a1 + 56)];
  id v11 = *(void **)(a1 + 72);
  if (v11)
  {
    id v12 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001ECEE8;
    block[3] = &unk_10063C6A8;
    id v39 = v11;
    id v10 = v10;
    id v37 = v10;
    id v38 = *(id *)(a1 + 40);
    dispatch_async(v12, block);

    id v13 = v39;
LABEL_11:
  }
}

uint64_t sub_1001ECEE8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001ECEFC(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:physicalCardsChanged:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1001ECF4C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001ED07C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  [v4 setOrder:*(void *)(a1 + 40)];
  [v4 setDeviceMetadata:*(void *)(a1 + 48)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 56)];
  id v6 = *(void **)(a1 + 72);
  uint64_t v7 = *(void **)(*(void *)(a1 + 64) + 32LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001ED198;
  v11[3] = &unk_10064C288;
  id v12 = v4;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 64);
  id v15 = v8;
  uint64_t v13 = v9;
  id v14 = *(id *)(a1 + 32);
  id v10 = v4;
  [v7 performHandlerOnSharedWebServiceQueue:v11];
}

void sub_1001ED198(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001ED248;
  v8[3] = &unk_10064C260;
  id v9 = v4;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  id v12 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [a2 requestPhysicalCardWithRequest:v9 completion:v8];
}

void sub_1001ED248(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (!v7 || v9)
  {
    if (!v8 || v9)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      if (v21) {
        (*(void (**)(uint64_t, void, void, void, void, void *))(v21 + 16))( v21,  0LL,  0LL,  0LL,  0LL,  v10);
      }
    }

    else
    {
      id v19 = *(void **)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_1001ED3E4;
      v22[3] = &unk_10064C238;
      id v23 = *(id *)(a1 + 56);
      [v19 _handlePhysicalCardRequestResponse:v8 forAccountIdentifier:v20 completion:v22];
    }
  }

  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 referenceIdentifier]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 manifestHashWithReferenceIdentifier:v12]);

    id v14 = objc_alloc(&OBJC_CLASS___PKApplePayTrustSignatureRequest);
    uint64_t v15 = PKApplePayTrustKeyDefaultIdentifier;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 nonce]);
    id v17 = [v14 initWithKeyIdentifier:v15 manifestHash:v13 nonce:v16];

    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      (*(void (**)(uint64_t, id, void, void, void, void))(v18 + 16))( v18,  v17,  *(void *)(a1 + 32),  0LL,  0LL,  0LL);
    }
  }
}

uint64_t sub_1001ED3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void))(result + 16))( result,  0LL,  0LL,  a2,  a3,  0LL);
  }
  return result;
}

void sub_1001ED508(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001ED5A4;
  v5[3] = &unk_10064C2D8;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 applePayTrustSignatureRequestWithRequest:v4 completion:v5];
}

void sub_1001ED5A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, void *))(v10 + 16))(v10, 0LL, 0LL, v7);
    }
  }

  else
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001ED684;
    v11[3] = &unk_10064C238;
    id v12 = *(id *)(a1 + 48);
    [v8 _handlePhysicalCardRequestResponse:v5 forAccountIdentifier:v9 completion:v11];
  }
}

uint64_t sub_1001ED684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 16))(result, a2, a3, 0LL);
  }
  return result;
}

void sub_1001ED764(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) physicalCard]);
    if (v4)
    {
      id v5 = (void *)v4;
      id v6 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdatePhysicalCard:v4 forAccountWithIdentifier:*(void *)(a1 + 48)]);

      id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 48)]);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_1001ED934;
      v21[3] = &unk_10064B8F0;
      id v8 = *(void **)(a1 + 48);
      id v22 = *(id *)(a1 + 40);
      id v23 = v7;
      id v24 = v8;
      id v9 = v7;
      [v22 _accessObserversWithHandler:v21];
    }

    else
    {
      id v6 = 0LL;
    }

    id v12 = *(void **)(a1 + 56);
    if (v12)
    {
      uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001ED984;
      block[3] = &unk_10063C6A8;
      id v20 = v12;
      id v6 = v6;
      id v18 = v6;
      id v19 = v3;
      dispatch_async(v13, block);
    }

    goto LABEL_9;
  }

  uint64_t v10 = *(void **)(a1 + 56);
  if (v10)
  {
    id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001ED998;
    v14[3] = &unk_1006396B0;
    id v15 = 0LL;
    id v16 = v10;
    dispatch_async(v11, v14);

    id v6 = v16;
LABEL_9:
  }
}

void sub_1001ED934(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:physicalCardsChanged:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1001ED984(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001ED998(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_1001EDA74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) updatedPhysicalCards]);
    if (v4)
    {
      id v5 = (void *)v4;
      id v6 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdatePhysicalCards:v4 forAccountWithIdentifier:*(void *)(a1 + 48)]);

      id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 48)]);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_1001EDC44;
      v21[3] = &unk_10064B8F0;
      id v8 = *(void **)(a1 + 48);
      id v22 = *(id *)(a1 + 40);
      id v23 = v7;
      id v24 = v8;
      id v9 = v7;
      [v22 _accessObserversWithHandler:v21];
    }

    else
    {
      id v6 = 0LL;
    }

    id v12 = *(void **)(a1 + 56);
    if (v12)
    {
      uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001EDC94;
      block[3] = &unk_10063C6A8;
      id v20 = v12;
      id v6 = v6;
      id v18 = v6;
      id v19 = v3;
      dispatch_async(v13, block);
    }

    goto LABEL_9;
  }

  uint64_t v10 = *(void **)(a1 + 56);
  if (v10)
  {
    id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001EDCA8;
    v14[3] = &unk_1006396B0;
    id v15 = 0LL;
    id v16 = v10;
    dispatch_async(v11, v14);

    id v6 = v16;
LABEL_9:
  }
}

void sub_1001EDC44(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:physicalCardsChanged:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1001EDC94(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001EDCA8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_1001EDDFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServicePhysicalCardActionRequest);
  [v4 setAction:*(void *)(a1 + 32)];
  [v4 setPhysicalCardIdentifier:*(void *)(a1 + 40)];
  [v4 setAccountIdentifier:*(void *)(a1 + 48)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  [v4 setDeviceMetadata:*(void *)(a1 + 56)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 64)];
  id v6 = *(void **)(a1 + 80);
  id v7 = *(void **)(*(void *)(a1 + 72) + 32LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001EDF24;
  v11[3] = &unk_10064C288;
  id v12 = v4;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 72);
  id v15 = v8;
  uint64_t v13 = v9;
  id v14 = *(id *)(a1 + 48);
  id v10 = v4;
  [v7 performHandlerOnSharedWebServiceQueue:v11];
}

void sub_1001EDF24(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001EDFD4;
  v8[3] = &unk_10064C328;
  id v9 = v4;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  id v12 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [a2 physicalCardActionWithRequest:v9 completion:v8];
}

void sub_1001EDFD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (!v7 || v9)
  {
    if (!v8 || v9)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      if (v21) {
        (*(void (**)(uint64_t, void, void, void, void, void *))(v21 + 16))( v21,  0LL,  0LL,  0LL,  0LL,  v10);
      }
    }

    else
    {
      id v19 = *(void **)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_1001EE170;
      v22[3] = &unk_10064C300;
      id v23 = *(id *)(a1 + 56);
      [v19 _handlePhysicalCardActionResponse:v8 forAccountIdentifier:v20 completion:v22];
    }
  }

  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 referenceIdentifier]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 manifestHashWithReferenceIdentifier:v12]);

    id v14 = objc_alloc(&OBJC_CLASS___PKApplePayTrustSignatureRequest);
    uint64_t v15 = PKApplePayTrustKeyDefaultIdentifier;
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v7 nonce]);
    id v17 = [v14 initWithKeyIdentifier:v15 manifestHash:v13 nonce:v16];

    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      (*(void (**)(uint64_t, id, void, void, void, void))(v18 + 16))( v18,  v17,  *(void *)(a1 + 32),  0LL,  0LL,  0LL);
    }
  }
}

uint64_t sub_1001EE170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void))(result + 16))( result,  0LL,  0LL,  a2,  a3,  0LL);
  }
  return result;
}

void sub_1001EE294(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001EE330;
  v5[3] = &unk_10064C378;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 applePayTrustSignatureRequestWithRequest:v4 completion:v5];
}

void sub_1001EE330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, void *))(v10 + 16))(v10, 0LL, 0LL, v7);
    }
  }

  else
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001EE410;
    v11[3] = &unk_10064C300;
    id v12 = *(id *)(a1 + 48);
    [v8 _handlePhysicalCardActionResponse:v5 forAccountIdentifier:v9 completion:v11];
  }
}

uint64_t sub_1001EE410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 16))(result, a2, a3, 0LL);
  }
  return result;
}

void sub_1001EE4D4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1001EE58C;
    v6[3] = &unk_10063C9A0;
    uint64_t v5 = *(void *)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    [v3 activatePhysicalCardWithIdentifier:v4 activationCode:v5 completion:v6];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

uint64_t sub_1001EE58C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), a2 == 0);
}

void sub_1001EE630(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:v5]);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      id v10 = 0LL;
      uint64_t v11 = *(void *)v17;
      while (2)
      {
        for (id i = 0LL; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v17 != v11) {
            objc_enumerationMutation(v7);
          }
          uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          id v14 = objc_msgSend(v13, "state", (void)v16);
          if (v14 == (id)1)
          {
            id v15 = v13;

            id v10 = v15;
            goto LABEL_17;
          }

          if (!v10 && v14 != (id)5) {
            id v10 = v13;
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    else
    {
      id v10 = 0LL;
    }

void sub_1001EE920(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
LABEL_29:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_30;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents componentsWithString:]( &OBJC_CLASS___NSURLComponents,  "componentsWithString:",  *(void *)(a1 + 32)));
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 queryItems]);
  id v6 = [v5 countByEnumeratingWithState:&v34 objects:v43 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v35;
    id v29 = v4;
    while (2)
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v35 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
        uint64_t v11 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v10 name]);
        if (v11 != @"uid")
        {
          id v12 = v11;
          if (!v11) {
            continue;
          }
          unsigned int v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", @"uid");

          if (!v13) {
            continue;
          }
        }

        id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 value]);
        uint64_t v4 = v29;
        goto LABEL_16;
      }

      id v7 = [v5 countByEnumeratingWithState:&v34 objects:v43 count:16];
      id v14 = 0LL;
      uint64_t v4 = v29;
      if (v7) {
        continue;
      }
      break;
    }
  }

  else
  {
    id v14 = 0LL;
  }

uint64_t sub_1001EEFE4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_1001EF064(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  id v16 = a6;
  id v8 = [a4 count];
  if (v16) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0LL;
  }
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]);
    if ([v10 isEqualToString:NSURLErrorDomain])
    {
      if ([v16 code] == (id)-1009)
      {

        goto LABEL_15;
      }

      id v15 = [v16 code];

      if (v15 == (id)-1001LL) {
        goto LABEL_15;
      }
    }

    else
    {
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]);
    unsigned int v12 = [v11 isEqualToString:PKWebServiceErrorDomain];

    if (v12
      || (unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]),
          unsigned int v14 = [v13 isEqualToString:PKPaymentWebServiceErrorDomain],
          v13,
          v14))
    {
      [v16 code];
    }
  }

void sub_1001EF29C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) billPaymentSelectedSuggestedAmountDataEventsForAccountIdentifier:*(void *)(a1 + 40) withStatementIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001EF348;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

void sub_1001EF348(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_1001EF484(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) billPaymentSelectedSuggestedAmountDataEventsForAccountIdentifier:*(void *)(a1 + 40) withStartDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001EF530;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 64);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

void sub_1001EF530(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

id sub_1001EF6D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) updateScheduledPaymentsWithAccount:a2 completion:0];
}

void sub_1001EF798(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 type];
    if ((unint64_t)v5 > 4 || v5 == (id)1)
    {
      if ([v4 accessLevel] != (id)2)
      {
        id v10 = *(void **)(a1 + 32);
        uint64_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 136LL);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        v14[2] = sub_1001EF918;
        v14[3] = &unk_10063B440;
        id v12 = v10;
        uint64_t v13 = *(void *)(a1 + 40);
        id v15 = v12;
        uint64_t v16 = v13;
        id v17 = v4;
        id v18 = *(id *)(a1 + 48);
        dispatch_async(v11, v14);

        goto LABEL_6;
      }

      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v20 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Not updating scheduled payments for account identifier %@ since this is a participant account.",  buf,  0xCu);
      }
    }
  }

  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0LL, 0LL);
  }
LABEL_6:
}

void sub_1001EF918(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updating scheduled payments for account identifier %@",  buf,  0xCu);
  }

  id v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001EFA48;
  v9[3] = &unk_10064C288;
  id v10 = v5;
  id v12 = *(id *)(a1 + 56);
  int8x16_t v8 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v8.i64[0];
  int8x16_t v11 = vextq_s8(v8, v8, 8uLL);
  [v6 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_1001EFA48(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServicePaymentsRequest);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountIdentifier]);
  [v4 setAccountIdentifier:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountBaseURL]);
  [v4 setBaseURL:v6];

  id v7 = a1[4];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001EFB68;
  v10[3] = &unk_10064C418;
  id v13 = a1[7];
  int8x16_t v9 = *((int8x16_t *)a1 + 2);
  id v8 = (id)v9.i64[0];
  int8x16_t v11 = vextq_s8(v9, v9, 8uLL);
  id v12 = a1[6];
  [v3 paymentsWithRequest:v4 account:v7 completion:v10];
}

void sub_1001EFB68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int8x16_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138412290;
      id v23 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Could not update scheduled payments with error %@",  buf,  0xCu);
    }

    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v6);
    }
  }

  else
  {
    int8x16_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001EFD04;
    v15[3] = &unk_10064C3F0;
    id v12 = v5;
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    id v16 = v12;
    uint64_t v17 = v13;
    id v18 = v14;
    id v21 = *(id *)(a1 + 56);
    id v19 = 0LL;
    id v20 = *(id *)(a1 + 48);
    dispatch_async(v11, v15);
  }
}

void sub_1001EFD04(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payments]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) setScheduledPayments:v2 forAccount:*(void *)(a1 + 48)]);

  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v3, *(void *)(a1 + 56));
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _cacheKeyForScheduledPaymentsWithAccountIdentifier:*(void *)(a1 + 64)]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  PKSharedCacheSetObjectForKey(v6, v5);

  id v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001EFE28;
  v9[3] = &unk_10064B5A8;
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v12 = *(id *)(a1 + 48);
  id v8 = v3;
  [v7 _accessObserversWithHandler:v9];
}

void sub_1001EFE28(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ((objc_opt_respondsToSelector(v6, "accountManager:scheduledPaymentsChangedForAccountIdentifier:") & 1) != 0) {
    [v6 accountManager:*(void *)(a1 + 32) scheduledPaymentsChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
  if ((objc_opt_respondsToSelector(v6, "accountManager:didSetScheduledPayments:forAccountIdentifier:") & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) accountIdentifier]);
    [v6 accountManager:v3 didSetScheduledPayments:v4 forAccountIdentifier:v5];
  }
}

void sub_1001F0070(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 24LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedPassUniqueID]);
    LOBYTE(v5) = [v5 passExistsWithUniqueID:v6];

    if ((v5 & 1) == 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v27 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Scheduling setup reminder for account id %@",  buf,  0xCu);
      }

      id v10 = [v4 feature];
      id v11 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
      uint64_t v12 = PKLocalizedFeatureString(@"ACCOUNT_NOTIFICATION_ADD_CARD_TITLE", v10);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      uint64_t v14 = PKLocalizedFeatureString(@"ACCOUNT_NOTIFICATION_ADD_CARD_MESSAGE", v10);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      id v16 = -[PDGenericUserNotification initWithTitle:message:](v11, "initWithTitle:message:", v13, v15);

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _setupNotificationIdentifierForAccountIdentifier:*(void *)(a1 + 40)]);
      -[PDUserNotification setNotificationIdentifier:](v16, "setNotificationIdentifier:", v17);

      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 dateByAddingTimeInterval:86400.0]);
      -[PDUserNotification setDate:](v16, "setDate:", v19);

      uint64_t v20 = PKURLActionSetup;
      uint64_t v21 = PKURLActionFeature;
      uint64_t v22 = PKFeatureIdentifierToString(v10);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@/%@",  v20,  v21,  v23));
      -[PDUserNotification setCustomActionRoute:](v16, "setCustomActionRoute:", v24);

      -[PDUserNotification setReissueBannerOnUpdate:](v16, "setReissueBannerOnUpdate:", 0LL);
      [*(id *)(*(void *)(a1 + 32) + 160) insertUserNotification:v16];
    }
  }

  uint64_t v25 = *(void *)(a1 + 48);
  if (v25) {
    (*(void (**)(void))(v25 + 16))();
  }
}

uint64_t sub_1001F03F8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001F04CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F0588;
  block[3] = &unk_10063DA48;
  id v10 = v3;
  id v6 = v4;
  char v14 = *(_BYTE *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001F0588(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 creditDetails]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 installmentPlans]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"identifier IN %@",  *(void *)(a1 + 40)));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 filteredSetUsingPredicate:v5]);

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * (void)v11) setUserViewedIntroduction:*(unsigned __int8 *)(a1 + 64)];
        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v9);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001F0740;
  v14[3] = &unk_1006396B0;
  uint64_t v12 = *(void **)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  void v14[4] = *(void *)(a1 + 48);
  id v15 = v13;
  [v12 updateAccount:v2 completion:v14];
}

void sub_1001F0740(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F07B8;
    block[3] = &unk_10063A830;
    id v4 = v1;
    dispatch_async(v2, block);
  }

uint64_t sub_1001F07B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F090C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001F0A14;
  v8[3] = &unk_10064C440;
  id v9 = v3;
  id v16 = *(id *)(a1 + 80);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 32);
  id v14 = v5;
  uint64_t v15 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1001F0A14(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = -[PDAccountManagerExportTransactionRequest initWithAccountIdentifier:statementIdentifier:type:trigger:statementStartDate:statementEndDate:fileFormat:productTimeZone:]( objc_alloc(&OBJC_CLASS___PDAccountManagerExportTransactionRequest),  "initWithAccountIdentifier:statementIdentifier:type:trigger:statementStartDate:statementEndDate:fileFormat:productTimeZone:",  *(void *)(a1 + 40),  0LL,  0LL,  0LL,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72));
    -[PDAccountManagerExportTransactionRequest addCompletion:](v6, "addCompletion:", *(void *)(a1 + 88));
    [*(id *)(a1 + 80) _addAccountManagerFetchRequest:v6];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Error exporting transaction data, no account",  buf,  2u);
    }

    uint64_t v4 = *(void *)(a1 + 88);
    if (v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v5);
    }
  }

void sub_1001F0C04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001F0CD8;
  v11[3] = &unk_100647EF8;
  id v12 = v3;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v16 = v5;
  uint64_t v13 = v6;
  id v14 = v7;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 64);
  id v15 = v8;
  uint64_t v17 = v9;
  id v10 = v3;
  dispatch_async(v4, v11);
}

void sub_1001F0CD8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    switch((unint64_t)[v2 type])
    {
      case 0uLL:
      case 2uLL:
      case 3uLL:
        id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001F0F44;
        block[3] = &unk_10063A830;
        id v20 = *(id *)(a1 + 64);
        dispatch_async(v3, block);
        uint64_t v4 = v20;
        break;
      case 1uLL:
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) creditStatementWithIdentifier:*(void *)(a1 + 48) accountIdentifier:*(void *)(a1 + 56)]);
        goto LABEL_10;
      case 4uLL:
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) savingsStatementWithIdentifier:*(void *)(a1 + 48) accountIdentifier:*(void *)(a1 + 56)]);
LABEL_10:
        id v10 = v9;
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v9 openingDate]);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v10 closingDate]);

        goto LABEL_11;
      default:
        id v8 = 0LL;
        uint64_t v4 = 0LL;
LABEL_11:
        id v11 = objc_alloc(&OBJC_CLASS___PDAccountManagerExportTransactionRequest);
        uint64_t v13 = *(void *)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v14 = *(void *)(a1 + 72);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) productTimeZone]);
        id v16 = -[PDAccountManagerExportTransactionRequest initWithAccountIdentifier:statementIdentifier:type:trigger:statementStartDate:statementEndDate:fileFormat:productTimeZone:]( v11,  "initWithAccountIdentifier:statementIdentifier:type:trigger:statementStartDate:statementEndDate:fileForma t:productTimeZone:",  v12,  v13,  1LL,  v14,  v4,  v8,  @"json",  v15);

        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        void v17[2] = sub_1001F0FBC;
        v17[3] = &unk_10064C490;
        void v17[4] = *(void *)(a1 + 40);
        id v18 = *(id *)(a1 + 64);
        -[PDAccountManagerExportTransactionRequest addCompletion:](v16, "addCompletion:", v17);
        [*(id *)(a1 + 40) _addAccountManagerFetchRequest:v16];

        break;
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error calling account statement metadata, no account",  buf,  2u);
    }

    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v4);
  }
}

void sub_1001F0F44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  10LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1001F0FBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 statementMetadata]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountStatementMetadata:v6]);

  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received statement metadata %@",  (uint8_t *)&v11,  0xCu);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v7, v5);
  }
}

void sub_1001F1184(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F1224;
  v6[3] = &unk_10063B440;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 56);
  dispatch_async(v3, v6);
}

void sub_1001F1224(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Deleting statement metadata for statement identifier %@ and account identifier %@",  buf,  0x16u);
  }

  [*(id *)(a1[6] + 24) deleteAccountStatementMetadataForStatementIdentifier:a1[4] accountIdentifier:a1[5]];
  uint64_t v6 = (void *)a1[7];
  id v7 = *(dispatch_queue_s **)(a1[6] + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F1338;
  block[3] = &unk_10063A830;
  id v9 = v6;
  dispatch_async(v7, block);
}

uint64_t sub_1001F1338(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001F13C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F145C;
  block[3] = &unk_100639AF0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1001F145C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)v7) accountIdentifier]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountStatementMetadataForAccountIdentifier:v8]);
        if ([v9 count]) {
          -[NSMutableDictionary safelySetObject:forKey:](v2, "safelySetObject:forKey:", v9, v8);
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v5);
  }

  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_1001F160C;
  v13[3] = &unk_1006396B0;
  uint64_t v14 = v2;
  id v15 = v10;
  __int16 v12 = v2;
  dispatch_async(v11, v13);
}

void sub_1001F160C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if ([*(id *)(a1 + 32) count])
    {
      id v3 = [*(id *)(a1 + 32) copy];
      (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, 0LL);
    }

    else
    {
      (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, 0LL, 0LL);
    }
  }

void sub_1001F1764(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v4 = *(dispatch_queue_s **)(v3 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F18D4;
    block[3] = &unk_10063B440;
    void block[4] = v3;
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    dispatch_async(v4, block);

    id v5 = v8;
  }

  else
  {
    uint64_t v6 = *(dispatch_queue_s **)(v3 + 144);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001F185C;
    v11[3] = &unk_10063A830;
    id v12 = *(id *)(a1 + 56);
    dispatch_async(v6, v11);
    id v5 = v12;
  }
}

void sub_1001F185C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1001F18D4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountStatementMetadataForStatementIdentifier:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)]);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F1980;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001F1980(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0LL);
  }
  return result;
}

void sub_1001F1AC0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001F1B6C;
  v4[3] = &unk_1006436F8;
  void v4[4] = v2;
  id v7 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [v2 accountWithIdentifier:v3 completion:v4];
}

void sub_1001F1B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statementIdentifier]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statementStartDate]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statementEndDate]);
    id v7 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceExportTransactionDataRequest);
    objc_msgSend(v7, "setType:", objc_msgSend(*(id *)(a1 + 40), "type"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    [v7 setAccountIdentifier:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);
    [v7 setBaseURL:v9];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fileFormat]);
    [v7 setFileFormat:v10];

    [v7 setBeginDate:v5];
    [v7 setEndDate:v6];
    [v7 setStatementIdentifier:v4];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 productTimeZone]);
    [v7 setProductTimeZone:v11];

    objc_msgSend(v7, "setTrigger:", objc_msgSend(*(id *)(a1 + 40), "trigger"));
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v26 = v14;
      __int16 v27 = 2112;
      id v28 = v4;
      __int16 v29 = 2112;
      __int128 v30 = v5;
      __int16 v31 = 2112;
      __int128 v32 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Requesting account statement metadata for account %@, statement %@, startDate %@, endDate %@",  buf,  0x2Au);
    }

    uint64_t v15 = *(void *)(a1 + 32);
    __int128 v16 = *(void **)(v15 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1001F1EA8;
    v19[3] = &unk_100642480;
    id v20 = v7;
    uint64_t v21 = v15;
    id v22 = *(id *)(a1 + 56);
    id v17 = v7;
    [v16 performHandlerOnSharedWebServiceQueue:v19];
  }

  else
  {
    __int128 v18 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F1E30;
    block[3] = &unk_10063A830;
    id v24 = *(id *)(a1 + 56);
    dispatch_async(v18, block);
    id v4 = v24;
  }
}

void sub_1001F1E30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1001F1EA8(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001F1F24;
  v4[3] = &unk_10064C4E0;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [a2 exportTransactionDataWithRequest:v3 completion:v4];
}

void sub_1001F1F24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Error getting account statement metadata %@",  buf,  0xCu);
    }
  }

  id v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F2064;
  block[3] = &unk_10063C6A8;
  id v15 = v6;
  id v16 = v9;
  id v14 = v5;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v10, block);
}

void sub_1001F2064(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exportedTransactionInfo]);
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(a1 + 40));
  }

void sub_1001F248C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Account idenifier for zoneName %@, %@",  (uint8_t *)&v8,  0x16u);
  }

  id v7 = -[PDAccountManagerCreatedZoneRequest initWithZoneAccountIdentifier:containerName:zoneName:]( objc_alloc(&OBJC_CLASS___PDAccountManagerCreatedZoneRequest),  "initWithZoneAccountIdentifier:containerName:zoneName:",  v3,  *(void *)(a1 + 40),  *(void *)(a1 + 32));
  [*(id *)(a1 + 48) _addAccountManagerFetchRequest:v7];
}

void sub_1001F2580(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001F2644;
  v5[3] = &unk_10064C530;
  objc_copyWeak(&v6, &location);
  void v5[4] = *(void *)(a1 + 32);
  [v4 defaultAccountForFeature:a2 completion:v5];
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_1001F2628(_Unwind_Exception *a1)
{
}

void sub_1001F2644(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 208LL));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5[25] objectForKey:v6]);
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v13;
        do
        {
          id v11 = 0LL;
          do
          {
            if (*(void *)v13 != v10) {
              objc_enumerationMutation(v7);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v12 + 1) + 8LL * (void)v11) + 16LL))();
            id v11 = (char *)v11 + 1;
          }

          while (v9 != v11);
          id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }

        while (v9);
      }

      [v5[25] removeObjectForKey:v6];
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 208LL));
  }
}

void sub_1001F27B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v10 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling zone repopulation for cloud account with zoneName %@",  buf,  0xCu);
    }

    id v5 = *(void **)(a1 + 32);
    id v6 = *(void **)(*(void *)(a1 + 40) + 32LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001F28B4;
    v7[3] = &unk_10064C5A0;
    id v8 = v5;
    [v6 performHandlerOnSharedWebServiceQueue:v7];
  }

void sub_1001F28B4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
  objc_msgSend(v2, "repopulateZonesWithCloudStoreZoneNames:completion:", v3, &stru_10064C578, v4);
}

void sub_1001F294C(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"failed";
    if (v4) {
      id v7 = @"succeeded";
    }
    int v8 = 138412546;
    id v9 = v7;
    __int16 v10 = 2112;
    id v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Zone repopulation %@ with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001F2A20(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001F2AB4;
  v5[3] = &unk_100639AC8;
  BOOL v4 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 defaultAccountForFeature:a2 completion:v5];
}

void sub_1001F2AB4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 accountIdentifier]);
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    __int16 v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Fallback card account identifier for zoneName: %@, accountID: %@",  (uint8_t *)&v7,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001F2D58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001F2DBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceCreatedZoneRequest);
    [v4 setAccountIdentifier:*(void *)(a1 + 48)];
    [v4 setZoneName:*(void *)(a1 + 56)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerName]);
    [v4 setContainerName:v5];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);
    [v4 setBaseURL:v6];

    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001F3028;
    v14[3] = &unk_100646D90;
    id v15 = v4;
    uint64_t v16 = v7;
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    id v9 = v4;
    [v8 performHandlerOnSharedWebServiceQueue:v14];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
      *(_DWORD *)__int128 buf = 138412290;
      id v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error: There is no account for created zoneName %@",  buf,  0xCu);
    }

    __int128 v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F2FC4;
    block[3] = &unk_10063A830;
    id v20 = *(id *)(a1 + 64);
    dispatch_async(v13, block);
    id v9 = v20;
  }
}

void sub_1001F2FC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001F3028(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001F30C4;
  v5[3] = &unk_10064B918;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [a2 createdZoneWithRequest:v4 completion:v5];
}

void sub_1001F30C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001F3178;
  v9[3] = &unk_10063BA88;
  id v10 = v4;
  id v11 = v5;
  id v7 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v7;
  id v8 = v4;
  dispatch_async(v6, v9);
}

void sub_1001F3178(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v13 = v5;
      __int16 v14 = 2112;
      uint64_t v15 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Could not inform server of created zone %@, %@",  buf,  0x16u);
    }
  }

  id v6 = *(void **)(a1 + 56);
  if (v6)
  {
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F32B4;
    block[3] = &unk_100641500;
    id v10 = v6;
    BOOL v11 = v2 == 0;
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v7, block);
  }

uint64_t sub_1001F32B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_1001F32C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "There is no account idenifier associated with zoneName, falling back to default card account %@",  buf,  0xCu);
    }

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1001F3400;
    v8[3] = &unk_100639AC8;
    id v7 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    [v7 defaultAccountForFeature:2 completion:v8];
  }
}

void sub_1001F3400(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    BOOL v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Fallback card account identifier for zoneName: %@, accountID: %@",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1001F35F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F3600(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001F36B8;
  v9[3] = &unk_10063CD10;
  id v10 = v3;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_1001F36B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  if ((unint64_t)v2 > 4 || v2 == (id)1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001F3788;
    v7[3] = &unk_100639AF0;
    void v7[4] = v5;
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    objc_msgSend(v5, "_queue_updateSharedAccountCloudStoreIfNeccessaryForAccount:completion:", v6, v7);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

void sub_1001F3788(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F3814;
  block[3] = &unk_100639AF0;
  void block[4] = v2;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_1001F3814(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) sharedAccountCloudStoreForAccountIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F38BC;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001F38BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001F3B14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001F3B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F3C44;
  block[3] = &unk_10063F190;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001F3C44(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (([*(id *)(a1 + 56) fromPush] & 1) == 0)
    {
      id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) sharedAccountCloudStoreForAccountIdentifier:*(void *)(a1 + 40)]);
      id v3 = *(void **)(a1 + 48);
      id v4 = [v2 isDirty];
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 lastUpdated]);
      LODWORD(v3) = [v3 _shouldProactivelyFetchEndpoint:4 dirty:v4 lastUpdated:v5 fetchPeriodEndpoint:4 account:*(void *)(a1 + 32)];

      if (!(_DWORD)v3)
      {
        __int128 v19 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_1001F3F80;
        v27[3] = &unk_1006396B0;
        id v20 = *(id *)(a1 + 64);
        id v28 = v2;
        id v29 = v20;
        id v12 = v2;
        dispatch_async(v19, v27);

        id v13 = v29;
        goto LABEL_11;
      }
    }

    uint64_t v6 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([*(id *)(a1 + 32) feature]);
    id v7 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceSharedAccountCloudStoreRequest);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
    [v7 setAccountIdentifier:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountBaseURL]);
    [v7 setBaseURL:v9];

    id v10 = *(void **)(*(void *)(a1 + 48) + 32LL);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_1001F3F94;
    v22[3] = &unk_10064B5F8;
    id v23 = v7;
    int8x16_t v21 = *(int8x16_t *)(a1 + 40);
    id v11 = (id)v21.i64[0];
    int8x16_t v24 = vextq_s8(v21, v21, 8uLL);
    uint64_t v26 = v6;
    id v25 = *(id *)(a1 + 64);
    id v12 = v7;
    [v10 performHandlerOnSharedWebServiceQueue:v22];

    id v13 = v23;
LABEL_11:

    goto LABEL_12;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v33 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@",  buf,  0xCu);
  }

  id v17 = *(void **)(a1 + 64);
  if (v17)
  {
    id v18 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F3F1C;
    block[3] = &unk_10063A830;
    id v31 = v17;
    dispatch_async(v18, block);
    id v12 = v31;
LABEL_12:
  }

void sub_1001F3F1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_1001F3F80(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001F3F94(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001F4034;
  v8[3] = &unk_10064C5F0;
  uint64_t v4 = *(void *)(a1 + 32);
  void v8[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v9 = v5;
  uint64_t v11 = v6;
  id v10 = v7;
  [a2 sharedAccountCloudStoreWithRequest:v4 completion:v8];
}

void sub_1001F4034(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)a1[5];
  id v8 = *(dispatch_queue_s **)(a1[4] + 136LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001F4110;
  v14[3] = &unk_10063DA98;
  id v15 = v6;
  id v9 = v7;
  uint64_t v10 = a1[4];
  id v16 = v9;
  uint64_t v17 = v10;
  uint64_t v11 = (void *)a1[6];
  uint64_t v20 = a1[7];
  id v18 = v5;
  id v19 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v8, v14);
}

void sub_1001F4110(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 description]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v23 = v5;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Could not update shared account cloud store for account %@ payments with error %@",  buf,  0x16u);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) sharedAccountCloudStoreForAccountIdentifier:*(void *)(a1 + 40)]);
    if (v7)
    {
      id v8 = v7;
      [v7 setDirty:1];
      id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateSharedAccountCloudStore:v8 accountIdentifier:*(void *)(a1 + 40)]);
    }

    else
    {
      id v9 = 0LL;
    }

    [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 72) endpointType:4 accountIdentifier:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) sharedAccountCloudStore]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v10 setLastUpdated:v11];

    id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateSharedAccountCloudStore:v10 accountIdentifier:*(void *)(a1 + 40)]);
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:*(void *)(a1 + 72) endpointType:4 accountIdentifier:*(void *)(a1 + 40)];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_1001F4374;
    v19[3] = &unk_10064B2C0;
    id v12 = *(void **)(a1 + 40);
    id v20 = *(id *)(a1 + 48);
    id v21 = v12;
    [v20 _accessObserversWithHandler:v19];
  }

  id v13 = *(void **)(a1 + 64);
  if (v13)
  {
    id v14 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F43C0;
    block[3] = &unk_10063C6A8;
    id v18 = v13;
    id v16 = v9;
    id v17 = *(id *)(a1 + 32);
    dispatch_async(v14, block);
  }
}

void sub_1001F4374(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:sharedAccountCloudStoreChangedForAccountIdentifier:") & 1) != 0) {
    [v3 accountManager:*(void *)(a1 + 32) sharedAccountCloudStoreChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1001F43C0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001F44D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F44E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1001F4594;
  v8[3] = &unk_10063B440;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1001F4594(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) paymentFundingSourcesForAccountIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F464C;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001F464C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001F4784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F4794(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001F4858;
  block[3] = &unk_10063CD88;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1001F4858(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) paymentFundingSourceForIdentifier:*(void *)(a1 + 48) accountIdentifier:*(void *)(a1 + 56)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F4910;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 64);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001F4910(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001F4B5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001F4BC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F4C8C;
  block[3] = &unk_10063F190;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001F4C8C(id *a1)
{
  if (a1[4])
  {
    if (([a1[7] force] & 1) != 0
      || ([a1[6] _shouldProactivelyFetchEndpoint:6 metadataType:2 fetchPeriodEndpoint:6 account:a1[4]] & 1) != 0)
    {
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v32 = 0x3032000000LL;
      uint64_t v33 = sub_1001DB0CC;
      __int128 v34 = sub_1001DB0DC;
      id v2 = (void *)objc_claimAutoreleasedReturnValue( [*((id *)a1[6] + 3) accountEndpointMetadataForAccountIdentifier:a1[5] endpoint:2]);
      id v3 = v2;
      if (v2) {
        id v4 = v2;
      }
      else {
        id v4 = -[PDAccountWebServiceEndpointMetadata initWithAccountIdentifier:endpoint:]( objc_alloc(&OBJC_CLASS___PDAccountWebServiceEndpointMetadata),  "initWithAccountIdentifier:endpoint:",  a1[5],  2LL);
      }
      __int128 v35 = v4;

      id v10 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceFundingSourcesRequest);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountIdentifier]);
      [v10 setAccountIdentifier:v11];

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] accountBaseURL]);
      [v10 setBaseURL:v12];

      id v13 = (void *)*((void *)a1[6] + 4);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_1001F505C;
      v19[3] = &unk_10064C1E8;
      id v14 = v10;
      id v15 = a1[6];
      id v20 = v14;
      id v21 = v15;
      id v22 = a1[4];
      p___int128 buf = &buf;
      id v23 = a1[5];
      id v24 = a1[8];
      [v13 performHandlerOnSharedWebServiceQueue:v19];

      _Block_object_dispose(&buf, 8);
    }

    else
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[6] + 3) paymentFundingSourcesForAccountIdentifier:a1[5]]);
      id v17 = a1[8];
      if (v17)
      {
        id v18 = (dispatch_queue_s *)*((void *)a1[6] + 18);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        void v26[2] = sub_1001F5048;
        v26[3] = &unk_1006396B0;
        id v28 = v17;
        id v27 = v16;
        dispatch_async(v18, v26);
      }
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = a1[5];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@",  (uint8_t *)&buf,  0xCu);
    }

    id v8 = a1[8];
    if (v8)
    {
      id v9 = (dispatch_queue_s *)*((void *)a1[6] + 18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001F4FE4;
      block[3] = &unk_10063A830;
      id v30 = v8;
      dispatch_async(v9, block);
    }
  }

void sub_1001F4FC4(_Unwind_Exception *a1)
{
}

void sub_1001F4FE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_1001F5048(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001F505C(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001F5114;
  v7[3] = &unk_10064C618;
  uint64_t v4 = *(void *)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  id v8 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  [a2 fundingSourcesWithRequest:v4 completion:v7];
}

void sub_1001F5114(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F5204;
  block[3] = &unk_10064C198;
  id v14 = v7;
  id v15 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v18 = v5;
  id v19 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, block);
}

void sub_1001F5204(uint64_t a1)
{
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([*(id *)(a1 + 32) feature]);
  if (*(void *)(a1 + 40))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
    uint64_t v3 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) paymentFundingSourcesForAccountIdentifier:*(void *)(a1 + 56)]);
    [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:6 accountIdentifier:*(void *)(a1 + 56)];
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F54B8;
    block[3] = &unk_10063C6A8;
    id v30 = *(id *)(a1 + 72);
    id v8 = v6;
    id v28 = v8;
    id v29 = *(id *)(a1 + 40);
    dispatch_async(v7, block);

    uint64_t v9 = v30;
  }

  else
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:6 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    id v10 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v10 setLastUpdated:v11];

    uint64_t v12 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    id v15 = *(void **)(*(void *)(a1 + 48) + 24LL);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) fundingSources]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( [v15 insertOrUpdatePaymentFundingSources:v16 accountIdentifier:*(void *)(a1 + 56)]);

    id v18 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1001F54CC;
    v24[3] = &unk_1006396B0;
    id v26 = *(id *)(a1 + 72);
    id v19 = v17;
    id v25 = v19;
    dispatch_async(v18, v24);

    uint64_t v20 = *(void **)(a1 + 48);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1001F54E0;
    v21[3] = &unk_10064B8F0;
    void v21[4] = v20;
    id v8 = v19;
    id v22 = v8;
    id v23 = *(id *)(a1 + 56);
    [v20 _accessObserversWithHandler:v21];

    uint64_t v9 = v22;
  }
}

uint64_t sub_1001F54B8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001F54CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001F54E0(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdatePaymentFundingSources:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdatePaymentFundingSources:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_1001F55EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = a3;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 accountIdentifier]);

    int v10 = 138412546;
    id v11 = v9;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed updating funding sources proactively for account %@. Error %@",  (uint8_t *)&v10,  0x16u);
  }
}

id sub_1001F5748(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountPendingFamilyMembers:*(void *)(a1 + 40)];
}

void sub_1001F5800(void *a1)
{
  uint64_t v1 = a1[6];
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) accountPendingFamilyMembersForAccountIdentifier:a1[5]]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
  (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_1001F5F64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1001F5FB0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v25 = v10;
    __int16 v26 = 2112;
    uint64_t v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Requesting balances from %@ to %@", buf, 0x16u);
  }

  __int16 v12 = -[PDAccountManagerBalancesRequest initWithAccountIdentifier:startDate:endDate:type:]( objc_alloc(&OBJC_CLASS___PDAccountManagerBalancesRequest),  "initWithAccountIdentifier:startDate:endDate:type:",  *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 72));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1001F6144;
  v18[3] = &unk_10064C640;
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = v13;
  int8x16_t v17 = *(int8x16_t *)(a1 + 48);
  id v21 = v7;
  id v19 = v6;
  id v14 = (id)v17.i64[0];
  int8x16_t v20 = vextq_s8(v17, v17, 8uLL);
  id v15 = v6;
  id v16 = v7;
  -[PDAccountManagerBalancesRequest addCompletion:](v12, "addCompletion:", v18);
  [*(id *)(a1 + 56) _addAccountManagerFetchRequest:v12];
}

void sub_1001F6144(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Could not update balances with error %@, aborting",  buf,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), a3);
    (*(void (**)(void))(a1[7] + 16LL))();
  }

  else
  {
    if (v9)
    {
      id v10 = [v5 count];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 date]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 lastObject]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 date]);
      *(_DWORD *)__int128 buf = 134218498;
      id v26 = v10;
      __int16 v27 = 2112;
      id v28 = v12;
      __int16 v29 = 2112;
      id v30 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received %lu balances from %@ to %@",  buf,  0x20u);
    }

    id v15 = *(void **)(a1[5] + 24LL);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_1001F6378;
    v20[3] = &unk_10063FDF8;
    id v16 = v5;
    uint64_t v24 = a1[9];
    uint64_t v17 = a1[5];
    id v18 = (void *)a1[6];
    id v21 = v16;
    uint64_t v22 = v17;
    id v23 = v18;
    [v15 performTransactionWithBlock:v20];
    (*(void (**)(void, void, void, uint64_t))(a1[7] + 16LL))(a1[7], a1[4], 0LL, v19);
  }
}

uint64_t sub_1001F6378(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v18;
    *(void *)&__int128 v4 = 138412290LL;
    __int128 v16 = v4;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "date", v16, (void)v17));
        [v9 timeIntervalSinceNow];
        double v11 = v10;

        if (v11 <= 600.0)
        {
          [v8 setType:*(void *)(a1 + 56)];
          [*(id *)(*(void *)(a1 + 40) + 24) insertAccountBalance:v8 forAccountIdentifier:*(void *)(a1 + 48)];
        }

        else
        {
          uint64_t Object = PKLogFacilityTypeGetObject(14LL);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 date]);
            *(_DWORD *)__int128 buf = v16;
            uint64_t v22 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Ignoring balance from %@", buf, 0xCu);
          }
        }
      }

      id v5 = [v2 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }

    while (v5);
  }

  return 1LL;
}

id sub_1001F6540(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v5 = [a4 isCanceled];
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v7 = *(void **)(v6 + 40);
  if (v5)
  {
    [*(id *)(v6 + 40) setIsDirty:1];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 setLastUpdated:v8];

    [*(id *)(a1 + 32) accountBalancesForAccountIdentifier:*(void *)(a1 + 40) startDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56) type:*(void *)(a1 + 88) completion:*(void *)(a1 + 64)];
  }

  return  [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
}

void sub_1001F6890(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001F693C;
  v7[3] = &unk_10064BB70;
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v10 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v7];
}

void sub_1001F693C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if ([v3 feature] == (id)3)
    {
      uint64_t v52 = 0LL;
      id v53 = &v52;
      uint64_t v54 = 0x3032000000LL;
      __int128 v55 = sub_1001DB0CC;
      __int128 v56 = sub_1001DB0DC;
      uint64_t v57 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEndpointMetadataForAccountIdentifier:*(void *)(a1 + 40) endpoint:1]);
      uint64_t v5 = *(void **)(a1 + 32);
      id v6 = [(id)v53[5] isDirty];
      unsigned __int8 v7 = [*(id *)(a1 + 48) ignoreLastUpdatedDate];
      if ((v7 & 1) != 0) {
        id v8 = 0LL;
      }
      else {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([(id)v53[5] localLastUpdated]);
      }
      unsigned __int8 v14 = [v5 _shouldProactivelyFetchEndpoint:5 dirty:v6 lastUpdated:v8 fetchPeriodEndpoint:5 account:v4];
      if ((v7 & 1) == 0) {

      }
      if ((v14 & 1) != 0)
      {
LABEL_14:
        id v15 = v53;
        __int128 v16 = (void *)v53[5];
        if (v16)
        {
          id v17 = v16;
          __int128 v18 = (void *)v15[5];
          void v15[5] = (uint64_t)v17;
        }

        else
        {
          __int128 v19 = -[PDAccountWebServiceEndpointMetadata initWithAccountIdentifier:endpoint:]( objc_alloc(&OBJC_CLASS___PDAccountWebServiceEndpointMetadata),  "initWithAccountIdentifier:endpoint:",  *(void *)(a1 + 40),  1LL);
          __int128 v18 = (void *)v53[5];
          void v53[5] = (uint64_t)v19;
        }

        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) lastPaginatedResponse]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 lastUpdated]);

        if (!v21) {
          id v21 = (void *)objc_claimAutoreleasedReturnValue([(id)v53[5] lastUpdated]);
        }
        else {
          uint64_t v22 = v21;
        }
        id v23 = v22;

        if (v23)
        {
          uint64_t v24 = 2LL;
        }

        else if ([*(id *)(a1 + 48) fromPush])
        {
          uint64_t v24 = 2LL;
        }

        else
        {
          uint64_t v24 = 1LL;
        }

        id v25 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceFinancingPlansPaginatedRequest);
        id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) lastPaginatedResponse]);
        [v25 setLastPageResponse:v26];

        [v25 setAccountIdentifier:*(void *)(a1 + 40)];
        __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v4 accountBaseURL]);
        [v25 setBaseURL:v27];

        [v25 setLastUpdated:v23];
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v4 payLaterDetails]);
        uint64_t v29 = (uint64_t)[v28 financingPlanFetchLimit];

        if (v29 >= 1)
        {
          id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v29));
          [v25 setLimit:v30];
        }

        id v31 = *(void **)(*(void *)(a1 + 32) + 32LL);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472LL;
        v39[2] = sub_1001F6E10;
        v39[3] = &unk_10064C708;
        id v32 = v25;
        uint64_t v33 = *(void *)(a1 + 32);
        id v40 = v32;
        uint64_t v41 = v33;
        id v42 = v4;
        id v46 = &v52;
        id v43 = *(id *)(a1 + 40);
        id v45 = *(id *)(a1 + 56);
        id v44 = *(id *)(a1 + 48);
        uint64_t v47 = v29;
        uint64_t v48 = v24;
        [v31 performHandlerOnSharedWebServiceQueue:v39];
      }

      else
      {
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) financingPlansWithAccountIdentifier:*(void *)(a1 + 40)]);
        __int128 v35 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472LL;
        v49[2] = sub_1001F6DF0;
        v49[3] = &unk_1006396B0;
        id v36 = *(id *)(a1 + 56);
        id v50 = v34;
        id v51 = v36;
        id v23 = v34;
        dispatch_async(v35, v49);

        id v32 = v51;
      }

      _Block_object_dispose(&v52, 8);
      double v11 = (void *)v57;
      goto LABEL_32;
    }

    __int16 v12 = *(void **)(a1 + 56);
    if (v12)
    {
      uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472LL;
      v58[2] = sub_1001F6DDC;
      v58[3] = &unk_10063A830;
      id v59 = v12;
      dispatch_async(v13, v58);
      double v11 = v59;
      goto LABEL_32;
    }
  }

  else
  {
    id v9 = *(void **)(a1 + 56);
    if (v9)
    {
      id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001F73C4;
      block[3] = &unk_10063A830;
      id v38 = v9;
      dispatch_async(v10, block);
      double v11 = v38;
LABEL_32:
    }
  }
}

void sub_1001F6DB0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001F6DDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001F6DF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0LL);
  }
  return result;
}

void sub_1001F6E10(uint64_t a1, void *a2)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1001F6F00;
  v11[3] = &unk_10064C6E0;
  uint64_t v4 = *(void *)(a1 + 32);
  void v11[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 80);
  id v12 = v5;
  uint64_t v17 = v6;
  id v13 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 72);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 88);
  id v14 = v7;
  uint64_t v18 = v8;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 96);
  id v15 = v9;
  uint64_t v19 = v10;
  [a2 accountFinancingPlansWithRequest:v4 completion:v11];
}

void sub_1001F6F00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F702C;
  block[3] = &unk_10064C6B8;
  id v17 = v7;
  id v18 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v19 = v9;
  id v20 = *(id *)(a1 + 48);
  id v24 = *(id *)(a1 + 72);
  id v21 = v5;
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 88);
  id v22 = v10;
  uint64_t v26 = v11;
  id v12 = *(id *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 96);
  id v23 = v12;
  uint64_t v27 = v13;
  id v14 = v5;
  id v15 = v6;
  dispatch_async(v8, block);
}

void sub_1001F702C(uint64_t a1)
{
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([*(id *)(a1 + 32) feature]);
  if (*(void *)(a1 + 40))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setIsDirty:1];
    uint64_t v3 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) financingPlansWithAccountIdentifier:*(void *)(a1 + 56)]);
    [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:5 accountIdentifier:*(void *)(a1 + 56)];
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F7388;
    block[3] = &unk_10063C6A8;
    id v32 = (PDAccountManagerFinancingPlansRequest *)*(id *)(a1 + 88);
    id v30 = v6;
    id v31 = *(id *)(a1 + 40);
    id v8 = v6;
    dispatch_async(v7, block);

    uint64_t v9 = v32;
  }

  else
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:5 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setIsDirty:0];
    id v10 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) lastUpdated]);
    if (v11)
    {
      [v10 setLastUpdated:v11];
    }

    else
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v10 setLastUpdated:v12];
    }

    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 setLocalLastUpdated:v14];

    uint64_t v15 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)]);
    uint64_t v16 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) account]);
    if (v8) {
      [*(id *)(a1 + 48) insertOrReplaceAccount:v8 extended:0 deleteSensitiveData:0 completion:0];
    }
    uint64_t v9 = -[PDAccountManagerFinancingPlansRequest initWithAccountIdentifier:fromPush:]( [PDAccountManagerFinancingPlansRequest alloc],  "initWithAccountIdentifier:fromPush:",  *(void *)(a1 + 56),  [*(id *)(a1 + 72) fromPush]);
    -[PDAccountManagerFinancingPlansRequest setLastPaginatedResponse:]( v9,  "setLastPaginatedResponse:",  *(void *)(a1 + 64));
    if (*(uint64_t *)(a1 + 104) >= 1)
    {
      id v18 = *(void **)(a1 + 80);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
      [v18 setLimit:v19];
    }

    objc_msgSend( *(id *)(a1 + 48),  "_queue_fetchNextPaginatedRequestIfNecessaryFromPreviousResponse:newRequest:",  *(void *)(a1 + 64),  v9);
    id v20 = *(void **)(a1 + 48);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) financingPlans]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v20,  "_queue_processFinancingPlans:accountIdentifier:updateReasons:",  v21,  *(void *)(a1 + 56),  *(void *)(a1 + 112)));

    id v23 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    void v26[2] = sub_1001F73A4;
    v26[3] = &unk_1006396B0;
    id v24 = *(id *)(a1 + 88);
    id v27 = v22;
    id v28 = v24;
    id v25 = v22;
    dispatch_async(v23, v26);
  }
}

uint64_t sub_1001F7388(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

uint64_t sub_1001F73A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0LL);
  }
  return result;
}

void sub_1001F73C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001F78F4(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_1001F7944(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didAddFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didAddFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_1001F7994(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdateFinancingPlan:oldFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdateFinancingPlan:a1[5] oldFinancingPlan:a1[6] accountIdentifier:a1[7]];
  }
}

void sub_1001F7E50(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (v5)
  {
    if (a3) {
      id v7 = @"old";
    }
    else {
      id v7 = @"new";
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 planIdentifier]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"financingPlanUpdate-%@-date-%@-identifier-%@.json",  v7,  v8,  v9));

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) URLByAppendingPathComponent:v10]);
    id v12 = *(void **)(a1 + 48);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 path]);
    LODWORD(v12) = [v12 fileExistsAtPath:v13];

    if ((_DWORD)v12) {
      [*(id *)(a1 + 48) removeItemAtURL:v11 error:0];
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionaryRepresentation]);
    id v27 = 0LL;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v14,  1LL,  &v27));
    id v16 = v27;

    if (!v15 || v16)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v29 = v10;
        __int16 v30 = 2112;
        id v31 = v16;
        id v23 = "Error writing plan update file %@, %@";
        id v25 = v21;
        uint32_t v26 = 22;
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v23, buf, v26);
      }
    }

    else
    {
      id v17 = *(void **)(a1 + 48);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 path]);
      unsigned __int8 v19 = [v17 createFileAtPath:v18 contents:v15 attributes:0];

      uint64_t v20 = PKLogFacilityTypeGetObject(14LL);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      if ((v19 & 1) != 0)
      {
        if (v22)
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v29 = v11;
          id v23 = "Saved Financing Plan update JSON at URL %@";
LABEL_16:
          id v25 = v21;
          uint32_t v26 = 12;
          goto LABEL_17;
        }
      }

      else if (v22)
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v29 = v11;
        id v23 = "Error creating file %@";
        goto LABEL_16;
      }
    }
  }
}

int64_t sub_1001F80DC(id a1, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", NSFileCreationDate));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", NSFileCreationDate));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1001F81DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F8270;
  block[3] = &unk_100639AF0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1001F8270(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ([v8 type] == (id)2)
        {
          objc_msgSend(*(id *)(a1 + 40), "_queue_updateFinancingPlansIfNeccessaryForAccount:", v8);
          id v9 = *(void **)(*(void *)(a1 + 40) + 24LL);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 accountIdentifier]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 financingPlansWithAccountIdentifier:v10]);

          -[NSMutableArray addObjectsFromArray:](v2, "addObjectsFromArray:", v11);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }

  id v12 = *(void **)(a1 + 48);
  uint64_t v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1001F8438;
  v15[3] = &unk_1006396B0;
  id v16 = v2;
  id v17 = v12;
  id v14 = v2;
  dispatch_async(v13, v15);
}

void sub_1001F8438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ([*(id *)(a1 + 32) count])
  {
    id v3 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0LL);
  }

void sub_1001F86F8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1001F87C4;
  v14[3] = &unk_10064C798;
  uint64_t v10 = a1[6];
  id v11 = (void *)a1[7];
  void v14[4] = v8;
  void v14[5] = v10;
  id v16 = v6;
  id v17 = v7;
  id v15 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 accountWithIdentifier:v9 completion:v14];
}

void sub_1001F87C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1001F8890;
  v8[3] = &unk_100645E50;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1001F8890(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 48);
    int v8 = 138412290;
    id v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Getting financing plans with query %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) financingPlansWithQuery:*(void *)(a1 + 48)]);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Financing plans query response %@",  (uint8_t *)&v8,  0xCu);
  }

  id v6 = *(void **)(a1 + 56);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queryIdentifier]);
  [v6 safelySetObject:v5 forKey:v7];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_1001F89E0(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001F8A6C;
  v3[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_1001F8A6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001F8B5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1001F8C0C;
  v8[3] = &unk_10063B440;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1001F8C0C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) financingPlansWithAccountIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F8CC4;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001F8CC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001F8D80(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) financingPlanWithIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001F8E28;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001F8E28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001F8F10(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001F8FD4;
  block[3] = &unk_10063CD88;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1001F8FD4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v15 = 0LL;
  id v16 = 0LL;
  [v2 financingPlanInstallmentsDueDateRangeForAccountIdentifier:v3 financingPlanStates:v4 startDate:&v16 endDate:&v15];
  id v5 = v16;
  id v6 = v15;
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F90C0;
  block[3] = &unk_10063C6A8;
  id v8 = *(id *)(a1 + 64);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1001F90C0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001F9150(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001F91CC;
  v5[3] = &unk_1006396B0;
  id v4 = v2;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 reprocessPayLaterFinancingPlansForMerchantCleanupWithWindow:v5 completion:0.0];
}

void sub_1001F91CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F9244;
    block[3] = &unk_10063A830;
    id v4 = v1;
    dispatch_async(v2, block);
  }

uint64_t sub_1001F9244(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F92D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F9364;
  block[3] = &unk_100639AF0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1001F9364(uint64_t a1)
{
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v34;
    uint64_t v20 = *(void *)v34;
    do
    {
      id v5 = 0LL;
      id v21 = v3;
      do
      {
        if (*(void *)v34 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)v5);
        if ([v6 type] == (id)2)
        {
          id v24 = v5;
          id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountIdentifier]);
          id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) financingPlansWithAccountIdentifier:v7]);
          [*(id *)(*(void *)(a1 + 40) + 24) deleteFinancingPlansForAccountIdentifier:v7];
          id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountEndpointMetadataForAccountIdentifier:v7 endpoint:1]);
          [v9 setLastUpdated:0];
          id v23 = v9;
          id v10 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:v9];
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          id v11 = v8;
          id v12 = [v11 countByEnumeratingWithState:&v29 objects:v37 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v30;
            do
            {
              for (id i = 0LL; i != v13; id i = (char *)i + 1)
              {
                if (*(void *)v30 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
                id v17 = *(void **)(a1 + 40);
                v27[0] = _NSConcreteStackBlock;
                v27[1] = 3221225472LL;
                v27[2] = sub_1001F9630;
                v27[3] = &unk_10064B8F0;
                void v27[4] = v17;
                void v27[5] = v16;
                id v28 = v7;
                [v17 _accessObserversWithHandler:v27];
              }

              id v13 = [v11 countByEnumeratingWithState:&v29 objects:v37 count:16];
            }

            while (v13);
          }

          uint64_t v4 = v20;
          id v3 = v21;
          id v5 = v24;
        }

        id v5 = (char *)v5 + 1;
      }

      while (v5 != v3);
      id v3 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    }

    while (v3);
  }

  __int128 v18 = *(void **)(a1 + 48);
  __int128 v19 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F9680;
  block[3] = &unk_10063A830;
  id v26 = v18;
  dispatch_async(v19, block);
}

void sub_1001F9630(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1001F9680(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F98B0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001F995C;
  v7[3] = &unk_10064BB70;
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v7];
}

void sub_1001F995C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if ([v3 feature] == (id)3)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServicePayLaterFinancingPlanCancellationRequest);
      [v5 setAccountIdentifier:*(void *)(a1 + 40)];
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) planIdentifier]);
      [v5 setPlanIdentifier:v6];

      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cancellationReasonIdentifier]);
      [v5 setCancellationReasonIdentifier:v7];

      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cancellationReasonDescription]);
      [v5 setCancellationReasonDescription:v8];

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 accountBaseURL]);
      [v5 setBaseURL:v9];

      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = *(void **)(v10 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_1001F9B80;
      v19[3] = &unk_10064C7E8;
      id v20 = v5;
      uint64_t v21 = v10;
      id v23 = *(id *)(a1 + 56);
      id v22 = *(id *)(a1 + 40);
      id v12 = v5;
      [v11 performHandlerOnSharedWebServiceQueue:v19];

LABEL_8:
      goto LABEL_9;
    }

    id v15 = *(void **)(a1 + 56);
    if (v15)
    {
      uint64_t v16 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001F9B70;
      block[3] = &unk_10063A830;
      id v25 = v15;
      dispatch_async(v16, block);
      id v12 = v25;
      goto LABEL_8;
    }
  }

  else
  {
    id v13 = *(void **)(a1 + 56);
    if (v13)
    {
      uint64_t v14 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1001F9ED8;
      v17[3] = &unk_10063A830;
      id v18 = v13;
      dispatch_async(v14, v17);
      id v12 = v18;
      goto LABEL_8;
    }
  }

uint64_t sub_1001F9B70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001F9B80(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001F9C1C;
  v5[3] = &unk_10064C7C0;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  [a2 accountPayLaterFinancingPlanCancellationWithRequest:v4 completion:v5];
}

void sub_1001F9C1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(dispatch_queue_s **)(v7 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F9CF4;
  block[3] = &unk_10063F190;
  id v12 = v6;
  uint64_t v13 = v7;
  id v16 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = *(id *)(a1 + 40);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1001F9CF4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F9EA4;
    block[3] = &unk_1006396B0;
    id v14 = *(id *)(a1 + 64);
    id v13 = *(id *)(a1 + 32);
    dispatch_async(v2, block);

    id v3 = v14;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) account]);
    if (v3) {
      [*(id *)(a1 + 40) insertOrReplaceAccount:v3 extended:0 deleteSensitiveData:0 completion:0];
    }
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) financingPlan]);
    id v5 = (void *)v4;
    if (v4)
    {
      id v6 = *(void **)(a1 + 40);
      uint64_t v15 = v4;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
      id v8 =  objc_msgSend( v6,  "_queue_processFinancingPlans:accountIdentifier:updateReasons:",  v7,  *(void *)(a1 + 56),  2);
    }

    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001F9EC0;
    v10[3] = &unk_10063A830;
    id v11 = *(id *)(a1 + 64);
    dispatch_async(v9, v10);
  }
}

uint64_t sub_1001F9EA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1001F9EC0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001F9ED8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001F9FC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FA060;
  block[3] = &unk_10063C450;
  id v9 = v3;
  id v6 = v4;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v6;
  id v7 = v3;
  dispatch_async(v5, block);
}

void sub_1001FA060(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] != (id)2)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2) {
      (*(void (**)(void))(v2 + 16))();
    }
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) financingPlansWithAccountIdentifier:v3]);
  [*(id *)(*(void *)(a1 + 40) + 24) deleteFinancingPlansForAccountIdentifier:v3];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountEndpointMetadataForAccountIdentifier:v3 endpoint:1]);
  [v5 setLastUpdated:0];
  [v5 setLocalLastUpdated:0];
  id v16 = v5;
  id v6 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:v5];
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)v11);
        id v13 = *(void **)(a1 + 40);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        void v19[2] = sub_1001FA2A8;
        v19[3] = &unk_10064B8F0;
        void v19[4] = v13;
        void v19[5] = v12;
        id v20 = v3;
        [v13 _accessObserversWithHandler:v19];

        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v9);
  }

  id v14 = *(void **)(a1 + 48);
  uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FA2F8;
  block[3] = &unk_10063A830;
  id v18 = v14;
  dispatch_async(v15, block);
}

void sub_1001FA2A8(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1001FA2F8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001FA3D4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) financingPlanWithIdentifier:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 32) + 24) deleteFinancingPlanWithIdentifier:*(void *)(a1 + 40) forAccountIdentifier:*(void *)(a1 + 48)];
  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001FA4E0;
    v7[3] = &unk_10064B8F0;
    void v7[4] = v3;
    id v8 = v2;
    id v9 = *(id *)(a1 + 48);
    [v3 _accessObserversWithHandler:v7];
  }

  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001FA530;
  v5[3] = &unk_10063A830;
  id v6 = *(id *)(a1 + 56);
  dispatch_async(v4, v5);
}

void sub_1001FA4E0(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didRemoveFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1001FA530(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001FA5C0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) recomputePayLaterCardMagnitudesForAccountIdentifier:*(void *)(a1 + 40)]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_1001FA664;
  v5[3] = &unk_10064B8F0;
  id v3 = *(void **)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  id v7 = v2;
  id v8 = v3;
  id v4 = v2;
  [v6 _accessObserversWithHandler:v5];
}

void sub_1001FA664(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdatePayLaterCardMagnitudes:forAccountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdatePayLaterCardMagnitudes:a1[5] forAccountIdentifier:a1[6]];
  }
}

void sub_1001FA75C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) payLaterCardMagnitudesForAccountIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001FA804;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001FA804(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001FA944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed updating financing plans proactively for account %@. Error %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1001FAAF0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_queue_processFinancingPlans:accountIdentifier:updateReasons:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  2));
  id v3 = *(void **)(a1 + 56);
  if (v3)
  {
    id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    id v5[2] = sub_1001FAB98;
    v5[3] = &unk_1006396B0;
    id v7 = v3;
    id v6 = v2;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_1001FAB98(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001FAC54(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) planIdentifier]);
  if (v2 && *(void *)(a1 + 40))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) financingPlanWithIdentifier:v2]);
    [*(id *)(*(void *)(a1 + 48) + 24) updateProcessedPayLaterMerchant:*(void *)(a1 + 40) forFinancingPlanIdentifier:v2];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) financingPlanWithIdentifier:v2]);
    [v4 addUpdateReasons:4];
    objc_msgSend(v4, "addUpdateReasons:", objc_msgSend(*(id *)(a1 + 32), "updateReasons"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountIdentifier]);
    id v6 = *(void **)(a1 + 48);
    __int16 v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472LL;
    uint64_t v12 = sub_1001FAD9C;
    id v13 = &unk_10064B5A8;
    id v14 = v6;
    id v15 = v4;
    id v16 = v3;
    id v17 = v5;
    id v7 = v5;
    id v8 = v3;
    id v9 = v4;
    [v6 _accessObserversWithHandler:&v10];
    objc_msgSend(*(id *)(a1 + 48), "recomputePayLaterCardMagntiudesForAccountIdentifier:", v7, v10, v11, v12, v13, v14);
  }
}

void sub_1001FAD9C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdateFinancingPlan:oldFinancingPlan:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdateFinancingPlan:a1[5] oldFinancingPlan:a1[6] accountIdentifier:a1[7]];
  }
}

void sub_1001FAEE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001FAF00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Deleting stored Apple Balance promotion do to device environment change",  v11,  2u);
    }

    id v8 = (void *)v5[3];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
    id v10 = [v8 deleteAppleBalancePromotionForAccountWithIdentifier:v9];
  }
}

void sub_1001FB0E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) rewardsTierSummaryForTransactionSourceIdentifiers:*(void *)(a1 + 40) currencyCode:*(void *)(a1 + 48) startDate:*(void *)(a1 + 56) endDate:*(void *)(a1 + 64)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001FB190;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 72);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001FB190(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001FB2BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FB378;
  block[3] = &unk_100649A18;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v13 = v6;
  uint64_t v14 = v7;
  uint64_t v12 = *(void *)(a1 + 32);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001FB378(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = [*(id *)(a1 + 40) reportType];
    if (v2 == (id)1)
    {
      if ([*(id *)(a1 + 32) supportsTransactionSyncReporting])
      {
LABEL_5:
        id v3 = objc_alloc(&OBJC_CLASS___PDAccountManagerAccountReportRequest);
        id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
        id v17 = -[PDAccountManagerAccountReportRequest initWithAccountIdentifier:report:trigger:]( v3,  "initWithAccountIdentifier:report:trigger:",  v4,  *(void *)(a1 + 40),  *(void *)(a1 + 64));

        -[PDAccountManagerAccountReportRequest addCompletion:](v17, "addCompletion:", *(void *)(a1 + 56));
        [*(id *)(a1 + 48) _addAccountManagerFetchRequest:v17];

        return;
      }
    }

    else if (v2 == (id)2 && ([*(id *)(a1 + 32) supportsStatementMetadata] & 1) != 0)
    {
      goto LABEL_5;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      uint64_t v14 = PKAccountReportTypeToString([*(id *)(a1 + 40) reportType]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v19 = v13;
      __int16 v20 = 2112;
      __int128 v21 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Cannot send report since account %@ doesnt support reporting of type %@",  buf,  0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      uint64_t v9 = PKAccountErrorDomain;
      uint64_t v10 = 10LL;
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(14LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Cannot send report for a nil account. Report: %@",  buf,  0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      uint64_t v9 = PKAccountErrorDomain;
      uint64_t v10 = 3LL;
LABEL_15:
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v9,  v10,  0LL));
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v16);
    }
  }

void sub_1001FB6F4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001FB7A0;
  v4[3] = &unk_1006436F8;
  void v4[4] = v2;
  id v7 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v4];
}

void sub_1001FB7A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceReportRequest);
    [v4 setAccountIdentifier:*(void *)(a1 + 40)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) report]);
    [v4 setReport:v5];

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);
    [v4 setBaseURL:v6];

    objc_msgSend(v4, "setTrigger:", objc_msgSend(*(id *)(a1 + 48), "trigger"));
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) report]);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sending account report to server %@",  buf,  0xCu);
    }

    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1001FBA18;
    v14[3] = &unk_100642480;
    id v15 = v4;
    uint64_t v16 = v10;
    id v17 = *(id *)(a1 + 56);
    id v12 = v4;
    [v11 performHandlerOnSharedWebServiceQueue:v14];
  }

  else
  {
    id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001FB9A4;
    block[3] = &unk_10063A830;
    id v19 = *(id *)(a1 + 56);
    dispatch_async(v13, block);
    id v12 = v19;
  }
}

void sub_1001FB9A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1001FBA18(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001FBA94;
  v4[3] = &unk_10064C860;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [a2 accountSendReportWithRequest:v3 completion:v4];
}

void sub_1001FBA94(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1001FBB28;
  v8[3] = &unk_10063AC90;
  id v9 = v4;
  id v10 = v5;
  id v7 = v4;
  dispatch_async(v6, v8);
}

uint64_t sub_1001FBB28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error sending account report to server %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1001FBDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FBDB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FBEC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FBED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1001FBF88;
  v8[3] = &unk_10063B440;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  int v6 = *(dispatch_queue_s **)(v4 + 136);
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1001FBF88(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountPromotionsForAccountIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001FC040;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001FC040(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001FC118(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FC1A0;
  block[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

uint64_t sub_1001FC1A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001FC2D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1001FC334(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FC448(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1001FC4A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FC5E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001FC648(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FC714;
  block[3] = &unk_10063F190;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001FC714(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 feature] == (id)2
      && ([*(id *)(a1 + 32) showCardPromotions] & 1) != 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Updating promotions for account identifier %@",  buf,  0xCu);
      }

      uint64_t v6 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([*(id *)(a1 + 32) feature]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) nextPossibleFetchDateForAccountType:v6 endpointType:7 accountIdentifier:*(void *)(a1 + 40)]);
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountPromotionsForAccountIdentifier:*(void *)(a1 + 40)]);
      unsigned __int8 v8 = [*(id *)(a1 + 56) ignoreErrorBackoff];
      if (v7) {
        char v9 = v8;
      }
      else {
        char v9 = 1;
      }
      if ((v9 & 1) == 0)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v10 timeIntervalSinceDate:v7];
        BOOL v12 = v11 < 0.0;

        if (v12)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not fetching promotions %@ because the next possible fetch date is in the future %@",  buf,  0x16u);
          }

          id v14 = *(void **)(a1 + 64);
          if (v14)
          {
            id v15 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_1001FCE80;
            block[3] = &unk_1006396B0;
            id v61 = v14;
            id v60 = v48;
            dispatch_async(v15, block);
          }

          goto LABEL_40;
        }
      }

      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      __int128 v71 = sub_1001DB0CC;
      id v72 = sub_1001DB0DC;
      id v26 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountEndpointMetadataForAccountIdentifier:*(void *)(a1 + 40) endpoint:3]);
      id v27 = v26;
      if (v26) {
        id v28 = v26;
      }
      else {
        id v28 = -[PDAccountWebServiceEndpointMetadata initWithAccountIdentifier:endpoint:]( objc_alloc(&OBJC_CLASS___PDAccountWebServiceEndpointMetadata),  "initWithAccountIdentifier:endpoint:",  *(void *)(a1 + 40),  3LL);
      }
      id v73 = v28;

      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountPromotionBehaviorForAccountIdentifier:*(void *)(a1 + 40)]);
      __int128 v30 = v29;
      if (v29)
      {
        [v29 minRefreshPeriod];
        double v32 = v31;
      }

      else
      {
        double v32 = PKAccountPromotionBehaviorDefaultMinRefreshPeriod;
      }

      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)&buf[8] + 40) lastUpdated]);
      __int128 v34 = v33;
      if (v33)
      {
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v33 dateByAddingTimeInterval:v32]);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        BOOL v37 = [v36 compare:v35] != (id)-1;
      }

      else
      {
        __int128 v35 = 0LL;
        BOOL v37 = 1;
      }

      if (([*(id *)(a1 + 56) observeCooldownPeriod] ^ 1 | v37))
      {
        id v38 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServicePromotionsRequest);
        id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
        [v38 setAccountIdentifier:v39];

        id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountBaseURL]);
        [v38 setBaseURL:v40];

        uint64_t v41 = *(void **)(*(void *)(a1 + 48) + 32LL);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472LL;
        v49[2] = sub_1001FCEA8;
        v49[3] = &unk_10064C918;
        id v42 = v38;
        id v50 = v42;
        uint64_t v54 = buf;
        uint64_t v55 = v6;
        int8x16_t v47 = *(int8x16_t *)(a1 + 40);
        id v43 = (id)v47.i64[0];
        int8x16_t v51 = vextq_s8(v47, v47, 8uLL);
        id v53 = *(id *)(a1 + 64);
        id v52 = v48;
        [v41 performHandlerOnSharedWebServiceQueue:v49];
      }

      else
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = *(void *)(a1 + 40);
          *(_DWORD *)uint64_t v66 = 138412546;
          uint64_t v67 = v44;
          __int16 v68 = 2112;
          uint64_t v69 = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not fetching promotions for %@ because it is still in cooldown period after last successful promotions fetch. Ends %@",  v66,  0x16u);
        }

        id v45 = *(void **)(a1 + 64);
        if (!v45) {
          goto LABEL_39;
        }
        id v46 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
        v56[0] = _NSConcreteStackBlock;
        v56[1] = 3221225472LL;
        v56[2] = sub_1001FCE94;
        v56[3] = &unk_1006396B0;
        id v58 = v45;
        id v57 = v48;
        dispatch_async(v46, v56);

        id v42 = v58;
      }

LABEL_39:
      _Block_object_dispose(buf, 8);

LABEL_40:
      goto LABEL_41;
    }

    uint64_t v16 = PKLogFacilityTypeGetObject(14LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Not fetching promotions for account %@ because it is not a supported feature on this account",  buf,  0xCu);
    }

    id v19 = *(void **)(a1 + 64);
    if (v19)
    {
      __int16 v20 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
      v62[0] = _NSConcreteStackBlock;
      v62[1] = 3221225472LL;
      v62[2] = sub_1001FCE6C;
      v62[3] = &unk_10063A830;
      id v63 = v19;
      dispatch_async(v20, v62);
      uint64_t v7 = v63;
LABEL_41:
    }
  }

  else
  {
    uint64_t v21 = PKLogFacilityTypeGetObject(14LL);
    __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@",  buf,  0xCu);
    }

    __int128 v24 = *(void **)(a1 + 64);
    if (v24)
    {
      id v25 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
      v64[0] = _NSConcreteStackBlock;
      v64[1] = 3221225472LL;
      v64[2] = sub_1001FCE08;
      v64[3] = &unk_10063A830;
      id v65 = v24;
      dispatch_async(v25, v64);
      uint64_t v7 = v65;
      goto LABEL_41;
    }
  }

void sub_1001FCDD8(_Unwind_Exception *a1)
{
}

void sub_1001FCE08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_1001FCE6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FCE80(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_1001FCE94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001FCEA8(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_1001FCF60;
  v7[3] = &unk_10064C8F0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  void v7[4] = *(void *)(a1 + 40);
  uint64_t v11 = v5;
  uint64_t v12 = v6;
  v7[1] = 3221225472LL;
  id v8 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 56);
  [a2 promotionsWithRequest:v4 completion:v7];
}

void sub_1001FCF60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_1001FD04C;
  v13[3] = &unk_10064C8C8;
  id v14 = v6;
  uint64_t v15 = v7;
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = v10;
  id v16 = v8;
  id v19 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 48);
  id v18 = v5;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v9, v13);
}

void sub_1001FD04C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
    uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    [*(id *)(*(void *)(a1 + 40) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 88) endpointType:7 accountIdentifier:*(void *)(a1 + 48)];
    id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001FD4A8;
    block[3] = &unk_10063C6A8;
    id v46 = *(id *)(a1 + 72);
    id v44 = *(id *)(a1 + 56);
    id v45 = *(id *)(a1 + 32);
    dispatch_async(v5, block);

    id v6 = v46;
  }

  else
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteRetryBackoffForAccountType:*(void *)(a1 + 88) endpointType:7 accountIdentifier:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 setLastUpdated:v8];

    uint64_t v9 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v12 = objc_alloc(&OBJC_CLASS___PKAccountPromotionBehavior);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) minRefreshPeriod]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) maxImpressionCount]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) timeVisibleAfterCompleted]);
    id v16 = -[PKAccountPromotionBehavior initWithMinRefreshPeriod:maxImpressionCount:timeVisibleAfterCompleted:]( v12,  "initWithMinRefreshPeriod:maxImpressionCount:timeVisibleAfterCompleted:",  v13,  v14,  v15);

    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountPromotionBehavior:v16 accountIdentifier:*(void *)(a1 + 48)];
    id v17 = *(void **)(*(void *)(a1 + 40) + 24LL);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) orderings]);
    [v17 insertOrUpdateAccountEntityOrderings:v18 accountIdentifier:*(void *)(a1 + 48) entityType:2];

    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) promotions]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "pk_indexDictionaryByApplyingBlock:", &stru_10064C8A0));
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id v21 = v19;
    id v22 = [v21 countByEnumeratingWithState:&v39 objects:v47 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v40;
      do
      {
        for (id i = 0LL; i != v23; id i = (char *)i + 1)
        {
          if (*(void *)v40 != v24) {
            objc_enumerationMutation(v21);
          }
          id v26 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 programIdentifier]);
          id v28 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v27]);

          if (v28) {
            objc_msgSend(v26, "setImpressionCount:", objc_msgSend(v28, "impressionCount"));
          }
        }

        id v23 = [v21 countByEnumeratingWithState:&v39 objects:v47 count:16];
      }

      while (v23);
    }

    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountPromotions:v21 accountIdentifier:*(void *)(a1 + 48)];
    __int128 v29 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_1001FD4C4;
    v36[3] = &unk_1006396B0;
    id v38 = *(id *)(a1 + 72);
    id v30 = v21;
    id v37 = v30;
    dispatch_async(v29, v36);

    double v31 = *(void **)(a1 + 40);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1001FD4D8;
    v32[3] = &unk_10064B5A8;
    void v32[4] = v31;
    id v33 = v30;
    id v34 = *(id *)(a1 + 56);
    id v35 = *(id *)(a1 + 48);
    id v6 = v30;
    [v31 _accessObserversWithHandler:v32];
  }
}

uint64_t sub_1001FD4A8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

NSCopying *__cdecl sub_1001FD4BC(id a1, PKAccountPromotion *a2)
{
  return (NSCopying *)-[PKAccountPromotion programIdentifier](a2, "programIdentifier");
}

uint64_t sub_1001FD4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1001FD4D8(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdatePromotions:oldPromotions:accountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdatePromotions:a1[5] oldPromotions:a1[6] accountIdentifier:a1[7]];
  }
}

void sub_1001FD7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed updating promotions for account %@. Error %@",  (uint8_t *)&v8,  0x16u);
  }
}

uint64_t sub_1001FD964(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FD974(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FDA00;
  block[3] = &unk_100639AF0;
  void block[4] = v2;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_1001FDA00(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountPromotionBehaviorForAccountIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001FDAA8;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001FDAA8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001FDB4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001FDC00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001FDDA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FDDB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FDEC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FDED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  void v8[2] = sub_1001FDF84;
  v8[3] = &unk_10063B440;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 136);
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1001FDF84(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001FE03C;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001FE03C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001FE114(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FE19C;
  block[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

uint64_t sub_1001FE19C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001FE2E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id, void))(v1 + 16))(v1, 0LL, v2, 0LL);
}

void sub_1001FE348(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FE414;
  block[3] = &unk_10063F190;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001FE414(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 feature] == (id)2
      && ([*(id *)(a1 + 32) showEnhancedMerchants] & 1) != 0)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Updating enhanced merchants for account identifier %@",  (uint8_t *)&buf,  0xCu);
      }

      uint64_t v6 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier([*(id *)(a1 + 32) feature]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) nextPossibleFetchDateForAccountType:v6 endpointType:8 accountIdentifier:*(void *)(a1 + 40)]);
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v77 = 0x3032000000LL;
      __int16 v78 = sub_1001DB0CC;
      uint64_t v79 = sub_1001DB0DC;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountEndpointMetadataForAccountIdentifier:*(void *)(a1 + 40) endpoint:4]);
      id v9 = v8;
      if (v8) {
        id v10 = v8;
      }
      else {
        id v10 = -[PDAccountWebServiceEndpointMetadata initWithAccountIdentifier:endpoint:]( objc_alloc(&OBJC_CLASS___PDAccountWebServiceEndpointMetadata),  "initWithAccountIdentifier:endpoint:",  *(void *)(a1 + 40),  4LL);
      }
      __int16 v80 = v10;

      uint64_t v62 = 0LL;
      id v63 = &v62;
      uint64_t v64 = 0x3032000000LL;
      id v65 = sub_1001DB0CC;
      uint64_t v66 = sub_1001DB0DC;
      id v67 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&buf + 1) + 40) lastUpdated]);
      unsigned __int8 v21 = [*(id *)(a1 + 56) ignoreErrorBackoff];
      if (v7) {
        char v22 = v21;
      }
      else {
        char v22 = 1;
      }
      if ((v22 & 1) == 0)
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v23 timeIntervalSinceDate:v7];
        BOOL v25 = v24 < 0.0;

        if (v25)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = *(void *)(a1 + 40);
            *(_DWORD *)id v72 = 138412546;
            uint64_t v73 = v26;
            __int16 v74 = 2112;
            id v75 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not fetching enhanced merchants %@ because the next possible fetch date is in the future %@",  v72,  0x16u);
          }

          id v27 = (PKAccountEnhancedMerchantBehavior *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 40)]);
          id v28 = *(void **)(a1 + 64);
          if (!v28) {
            goto LABEL_40;
          }
          __int128 v29 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
          v58[0] = _NSConcreteStackBlock;
          v58[1] = 3221225472LL;
          v58[2] = sub_1001FEBD4;
          v58[3] = &unk_100641998;
          id v60 = v28;
          id v27 = v27;
          id v59 = v27;
          id v61 = &v62;
          dispatch_async(v29, v58);

          id v30 = v60;
LABEL_39:

LABEL_40:
          _Block_object_dispose(&v62, 8);

          _Block_object_dispose(&buf, 8);
          goto LABEL_41;
        }
      }

      double v31 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountEnhancedMerchantBehaviorForAccountIdentifier:*(void *)(a1 + 40)]);
      double v32 = v31;
      if (v31) {
        id v33 = v31;
      }
      else {
        id v33 = objc_alloc_init(&OBJC_CLASS___PKAccountEnhancedMerchantBehavior);
      }
      id v27 = v33;

      -[PKAccountEnhancedMerchantBehavior cooldownPeriodForLevel:]( v27,  "cooldownPeriodForLevel:",  [*(id *)(a1 + 56) cooldownLevel]);
      id v34 = (void *)v63[5];
      if (v34)
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "dateByAddingTimeInterval:"));
        id v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        BOOL v36 = [v35 compare:v30] == (id)-1;

        if (v36)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v37 = *(void *)(a1 + 40);
            *(_DWORD *)id v72 = 138412546;
            uint64_t v73 = v37;
            __int16 v74 = 2112;
            id v75 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not fetching enhanced merchants for %@ because it is still in cooldown period after last successful enhanc ed merchants fetch. Ends %@",  v72,  0x16u);
          }

          id v38 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 40)]);
          __int128 v39 = *(void **)(a1 + 64);
          if (!v39) {
            goto LABEL_38;
          }
          __int128 v40 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
          v55[0] = _NSConcreteStackBlock;
          v55[1] = 3221225472LL;
          v55[2] = sub_1001FEBF4;
          v55[3] = &unk_100641998;
          v57[0] = v39;
          id v38 = v38;
          id v56 = v38;
          v57[1] = &v62;
          dispatch_async(v40, v55);

          __int128 v41 = (id *)v57;
LABEL_37:

LABEL_38:
          goto LABEL_39;
        }
      }

      else
      {
        id v30 = 0LL;
      }

      id v42 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceEnhancedMerchantsRequest);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      [v42 setAccountIdentifier:v43];

      id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountBaseURL]);
      [v42 setBaseURL:v44];

      id v45 = *(void **)(*(void *)(a1 + 48) + 32LL);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472LL;
      v48[2] = sub_1001FEC14;
      v48[3] = &unk_10064CA08;
      id v38 = v42;
      id v49 = v38;
      p___int128 buf = &buf;
      int8x16_t v47 = *(int8x16_t *)(a1 + 40);
      id v46 = (id)v47.i64[0];
      int8x16_t v50 = vextq_s8(v47, v47, 8uLL);
      uint64_t v54 = v6;
      id v51 = *(id *)(a1 + 64);
      id v53 = &v62;
      [v45 performHandlerOnSharedWebServiceQueue:v48];

      __int128 v41 = &v49;
      goto LABEL_37;
    }

    uint64_t v11 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Not fetching enhanced merchants for account %@ because it is not a supported feature on this account",  (uint8_t *)&buf,  0xCu);
    }

    id v14 = *(void **)(a1 + 64);
    if (v14)
    {
      uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001FEBBC;
      block[3] = &unk_10063A830;
      id v69 = v14;
      dispatch_async(v15, block);
      uint64_t v7 = v69;
LABEL_41:
    }
  }

  else
  {
    uint64_t v16 = PKLogFacilityTypeGetObject(14LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@",  (uint8_t *)&buf,  0xCu);
    }

    id v19 = *(void **)(a1 + 64);
    if (v19)
    {
      uint64_t v20 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472LL;
      v70[2] = sub_1001FEB54;
      v70[3] = &unk_10063A830;
      id v71 = v19;
      dispatch_async(v20, v70);
      uint64_t v7 = v71;
      goto LABEL_41;
    }
  }

void sub_1001FEB04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_1001FEB54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id, void))(v1 + 16))(v1, 0LL, v2, 0LL);
}

uint64_t sub_1001FEBBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FEBD4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16LL))( a1[5],  a1[4],  0LL,  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

uint64_t sub_1001FEBF4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16LL))( a1[5],  a1[4],  0LL,  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_1001FEC14(uint64_t a1, void *a2)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001FECC8;
  v10[3] = &unk_10064C9E0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  void v10[4] = *(void *)(a1 + 40);
  uint64_t v13 = v5;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 80);
  id v11 = v6;
  uint64_t v15 = v7;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 72);
  id v12 = v8;
  uint64_t v14 = v9;
  [a2 enhancedMerchantsWithRequest:v4 completion:v10];
}

void sub_1001FECC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_1001FEDB0;
  v15[3] = &unk_10064C9B8;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 136);
  v15[1] = 3221225472LL;
  id v16 = v6;
  uint64_t v17 = v7;
  id v10 = v8;
  uint64_t v11 = *(void *)(a1 + 72);
  id v18 = v10;
  uint64_t v23 = v11;
  id v12 = *(id *)(a1 + 48);
  uint64_t v22 = *(void *)(a1 + 64);
  id v19 = v5;
  id v20 = v12;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v9, v15);
}

void sub_1001FEDB0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setIsDirty:1];
    uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 48)]);
    [*(id *)(*(void *)(a1 + 40) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 88) endpointType:8 accountIdentifier:*(void *)(a1 + 48)];
    id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001FF0E0;
    block[3] = &unk_10064C968;
    id v40 = *(id *)(a1 + 64);
    id v7 = v5;
    id v38 = v7;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 80);
    id v39 = v8;
    uint64_t v41 = v9;
    dispatch_async(v6, block);

    id v10 = v40;
  }

  else
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteRetryBackoffForAccountType:*(void *)(a1 + 88) endpointType:8 accountIdentifier:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setIsDirty:0];
    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v12 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setLastUpdated:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v14 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = objc_alloc(&OBJC_CLASS___PKAccountEnhancedMerchantBehavior);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) minRefreshPeriod]);
    id v19 = -[PKAccountEnhancedMerchantBehavior initWithMinRefreshPeriod:](v17, "initWithMinRefreshPeriod:", v18);

    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEnhancedMerchantBehavior:v19 accountIdentifier:*(void *)(a1 + 48)];
    id v20 = *(void **)(*(void *)(a1 + 40) + 24LL);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) orderings]);
    [v20 insertOrUpdateAccountEntityOrderings:v21 accountIdentifier:*(void *)(a1 + 48) entityType:1];

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) merchants]);
    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEnhancedMerchants:v22 accountIdentifier:*(void *)(a1 + 48)];
    uint64_t v23 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_1001FF0FC;
    v33[3] = &unk_100641998;
    id v35 = *(id *)(a1 + 64);
    id v24 = v22;
    uint64_t v25 = *(void *)(a1 + 80);
    id v34 = v24;
    uint64_t v36 = v25;
    dispatch_async(v23, v33);

    uint64_t v26 = *(void **)(a1 + 40);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1001FF11C;
    v29[3] = &unk_10064C990;
    void v29[4] = v26;
    id v7 = v24;
    id v30 = v7;
    id v27 = *(id *)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 80);
    id v31 = v27;
    uint64_t v32 = v28;
    [v26 _accessObserversWithHandler:v29];

    id v10 = v30;
  }
}

uint64_t sub_1001FF0E0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16LL))( a1[6],  a1[4],  a1[5],  *(void *)(*(void *)(a1[7] + 8LL) + 40LL));
}

uint64_t sub_1001FF0FC(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16LL))( a1[5],  a1[4],  0LL,  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_1001FF11C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdateEnhancedMerchants:accountIdentifier:lastUpdate:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdateEnhancedMerchants:a1[5] accountIdentifier:a1[6] lastUpdate:*(void *)(*(void *)(a1[7] + 8) + 40)];
  }
}

void sub_1001FF244(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 136LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FF30C;
  block[3] = &unk_10064BCB0;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v14 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1001FF30C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceBalanceHistoryRequest);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
    [v2 setAccountIdentifier:v3];

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountBaseURL]);
    [v2 setBaseURL:v4];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) startDate]);
    [v2 setBeginDate:v5];

    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) endDate]);
    [v2 setEndDate:v6];

    objc_msgSend(v2, "setType:", objc_msgSend(*(id *)(a1 + 56), "type"));
    uint64_t v7 = *(void **)(*(void *)(a1 + 48) + 32LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_1001FF58C;
    v13[3] = &unk_10064B710;
    id v14 = v2;
    id v15 = *(id *)(a1 + 64);
    id v8 = v2;
    [v7 performHandlerOnSharedWebServiceQueue:v13];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "No account with accountIdentifier: %@",  buf,  0xCu);
    }

    uint64_t v12 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 144LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001FF528;
    block[3] = &unk_10063A830;
    id v17 = *(id *)(a1 + 64);
    dispatch_async(v12, block);
    id v8 = v17;
  }
}

void sub_1001FF528(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAccountErrorDomain,  3LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_1001FF58C(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001FF600;
  v4[3] = &unk_10064CA30;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 accountBalanceHistoryWithRequest:v3 completion:v4];
}

void sub_1001FF600(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 balances]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_1001FF8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed updating enhanced merchants for account %@. Error %@",  (uint8_t *)&v8,  0x16u);
  }
}

uint64_t sub_1001FFAA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FFAB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001FFB3C;
  block[3] = &unk_100639AF0;
  void block[4] = v2;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_1001FFB3C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEnhancedMerchantBehaviorForAccountIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001FFBE4;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1001FFBE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001FFCB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FFCC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FFD88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FFD9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FFE30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FFEC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001FFFE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FFFF8(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (void *)a1[5];
  id v4 = *(dispatch_queue_s **)(v2 + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100200088;
  v8[3] = &unk_10063C928;
  void v8[4] = v2;
  id v5 = v3;
  id v7 = (void *)a1[6];
  uint64_t v6 = a1[7];
  id v9 = v5;
  uint64_t v11 = v6;
  id v10 = v7;
  dispatch_async(v4, v8);
}

void sub_100200088(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) accountEntityOrderingsForAccountIdentifier:*(void *)(a1 + 40) entityType:*(void *)(a1 + 56)]);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100200134;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100200134(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_100200968(uint64_t a1)
{
  return [*(id *)(a1 + 32) _executeNextAccountManagerFetchIfPossibleForRequestIdentifier:*(void *)(a1 + 40)];
}

void sub_10020101C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10020108C;
  block[3] = &unk_10063A830;
  id v4 = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10020108C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002010A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002010D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002011A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002011DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002012B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002012E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201348(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100201378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002013AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1002019C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:");
}

void sub_100201B9C(uint64_t a1)
{
  uint64_t v2 = -[PDAccountManagerAccountsPushPayload initWithDictionary:]( objc_alloc(&OBJC_CLASS___PDAccountManagerAccountsPushPayload),  "initWithDictionary:",  *(void *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "_queue_updateAccountsWithPayload:", v2);
}

void sub_100201BE8(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 152LL));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100201C9C;
  v4[3] = &unk_10063F730;
  uint64_t v2 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
}

void sub_100201C9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _queueIndexOfAccountWithIdentifier:v3];
  if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) objectAtIndex:v4]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 additionalPushTopics]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 payments]);
    id v8 = *(void **)(a1 + 40);
    id v9 = v7;
    id v10 = v8;
    if (v9 == v10)
    {

LABEL_11:
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v127 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Updating payments %@ following push",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) updateScheduledPaymentsWithAccount:v5 completion:0];
      goto LABEL_84;
    }

    uint64_t v11 = v10;
    if (v9) {
      BOOL v12 = v10 == 0LL;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
    }

    else
    {
      unsigned int v13 = [v9 isEqualToString:v10];

      if (v13) {
        goto LABEL_11;
      }
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v6 account]);
    id v17 = *(void **)(a1 + 40);
    id v18 = v16;
    id v19 = v17;
    if (v18 == v19)
    {
    }

    else
    {
      id v20 = v19;
      if (!v18 || !v19)
      {

        goto LABEL_24;
      }

      unsigned int v21 = [v18 isEqualToString:v19];

      if (!v21)
      {
LABEL_24:
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v6 extendedAccount]);
        id v27 = *(void **)(a1 + 40);
        id v28 = v26;
        id v29 = v27;
        if (v28 == v29)
        {
        }

        else
        {
          id v30 = v29;
          if (!v28 || !v29)
          {

            goto LABEL_34;
          }

          unsigned int v31 = [v28 isEqualToString:v29];

          if (!v31)
          {
LABEL_34:
            id v35 = (void *)objc_claimAutoreleasedReturnValue([v6 users]);
            uint64_t v36 = *(void **)(a1 + 40);
            id v37 = v35;
            id v38 = v36;
            if (v37 == v38)
            {
            }

            else
            {
              id v39 = v38;
              if (!v37 || !v38)
              {

                goto LABEL_44;
              }

              unsigned int v40 = [v37 isEqualToString:v38];

              if (!v40)
              {
LABEL_44:
                id v44 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedAccountCloudStore]);
                id v45 = *(void **)(a1 + 40);
                id v46 = v44;
                id v47 = v45;
                if (v46 == v47)
                {
                }

                else
                {
                  uint64_t v48 = v47;
                  if (!v46 || !v47)
                  {

                    goto LABEL_54;
                  }

                  unsigned int v49 = [v46 isEqualToString:v47];

                  if (!v49)
                  {
LABEL_54:
                    id v53 = (void *)objc_claimAutoreleasedReturnValue([v6 financingPlans]);
                    uint64_t v54 = *(void **)(a1 + 40);
                    id v55 = v53;
                    id v56 = v54;
                    if (v55 == v56)
                    {
                    }

                    else
                    {
                      id v57 = v56;
                      if (!v55 || !v56)
                      {

                        goto LABEL_64;
                      }

                      unsigned int v58 = [v55 isEqualToString:v56];

                      if (!v58)
                      {
LABEL_64:
                        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v6 physicalCards]);
                        id v63 = *(void **)(a1 + 40);
                        id v64 = v62;
                        id v65 = v63;
                        if (v64 == v65)
                        {
                        }

                        else
                        {
                          uint64_t v66 = v65;
                          if (!v64 || !v65)
                          {

                            goto LABEL_74;
                          }

                          unsigned int v67 = [v64 isEqualToString:v65];

                          if (!v67)
                          {
LABEL_74:
                            id v71 = (void *)objc_claimAutoreleasedReturnValue([v6 virtualCards]);
                            id v72 = *(void **)(a1 + 40);
                            id v73 = v71;
                            id v74 = v72;
                            if (v73 == v74)
                            {
                            }

                            else
                            {
                              id v75 = v74;
                              if (!v73 || !v74)
                              {

                                goto LABEL_87;
                              }

                              unsigned int v76 = [v73 isEqualToString:v74];

                              if (!v76)
                              {
LABEL_87:
                                __int16 v80 = (void *)objc_claimAutoreleasedReturnValue([v6 servicingToken]);
                                uint64_t v81 = *(void **)(a1 + 40);
                                id v82 = v80;
                                id v83 = v81;
                                if (v82 == v83)
                                {
                                }

                                else
                                {
                                  __int128 v84 = v83;
                                  if (!v82 || !v83)
                                  {

                                    goto LABEL_99;
                                  }

                                  unsigned int v85 = [v82 isEqualToString:v83];

                                  if (!v85)
                                  {
LABEL_99:
                                    id v91 = (void *)objc_claimAutoreleasedReturnValue([v6 fundingSources]);
                                    id v92 = *(void **)(a1 + 40);
                                    id v93 = v91;
                                    id v94 = v92;
                                    if (v93 == v94)
                                    {
                                    }

                                    else
                                    {
                                      id v95 = v94;
                                      if (!v93 || !v94)
                                      {

LABEL_112:
                                        uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v6 creditRecoveryPaymentPlans]);
                                        id v101 = *(void **)(a1 + 40);
                                        id v89 = v100;
                                        id v102 = v101;
                                        if (v89 == v102)
                                        {

LABEL_118:
                                          uint64_t v105 = PKLogFacilityTypeGetObject(14LL);
                                          id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
                                          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
                                          {
                                            *(_DWORD *)__int128 buf = 138412290;
                                            id v127 = v3;
                                            _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Updating payment plans of account %@ following push",  buf,  0xCu);
                                          }

                                          __int128 v107 = *(void **)(a1 + 32);
                                          v108[0] = _NSConcreteStackBlock;
                                          v108[1] = 3221225472LL;
                                          v108[2] = sub_100202E54;
                                          v108[3] = &unk_10064B310;
                                          id v109 = v3;
                                          [v107 _updateCreditRecoveryPaymentPlansForAccountIdentifier:v109 force:1 completion:v108];
                                          uint64_t v25 = v109;
LABEL_83:

LABEL_84:
                                          goto LABEL_85;
                                        }

                                        id v103 = v102;
                                        if (v89 && v102)
                                        {
                                          unsigned int v104 = [v89 isEqualToString:v102];

                                          if (!v104) {
                                            goto LABEL_84;
                                          }
                                          goto LABEL_118;
                                        }

                                        goto LABEL_122;
                                      }

                                      unsigned int v96 = [v93 isEqualToString:v94];

                                      if (!v96) {
                                        goto LABEL_112;
                                      }
                                    }

                                    uint64_t v97 = PKLogFacilityTypeGetObject(14LL);
                                    v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
                                    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_DWORD *)__int128 buf = 138412290;
                                      id v127 = v3;
                                      _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "Updating funding sources of account %@ following push",  buf,  0xCu);
                                    }

                                    id v99 = *(void **)(a1 + 32);
                                    v110[0] = _NSConcreteStackBlock;
                                    v110[1] = 3221225472LL;
                                    v110[2] = sub_100202D94;
                                    v110[3] = &unk_10064B310;
                                    id v111 = v3;
                                    [v99 updatePaymentFundingSourcesForAccountIdentifier:v111 force:1 completion:v110];
                                    uint64_t v25 = v111;
                                    goto LABEL_83;
                                  }
                                }

                                uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) PKStringForKey:@"accountIdentifier"]);
                                id v87 = v3;
                                id v88 = v86;
                                id v89 = v88;
                                if (v88 == v87)
                                {
                                }

                                else
                                {
                                  if (!v87 || !v88)
                                  {

                                    goto LABEL_122;
                                  }

                                  unsigned int v90 = [v87 isEqualToString:v88];

                                  if (!v90) {
                                    goto LABEL_122;
                                  }
                                }

                                [*(id *)(a1 + 32) _insertOrUpdateAccountServicingTokenNotificationWithAccount:v5 notificationUserInfo:*(void *)(a1 + 48)];
LABEL_122:

                                goto LABEL_84;
                              }
                            }

                            uint64_t v77 = PKLogFacilityTypeGetObject(14LL);
                            __int16 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
                            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)__int128 buf = 138412290;
                              id v127 = v3;
                              _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Updating virtual cards for account %@ following push",  buf,  0xCu);
                            }

                            uint64_t v79 = *(void **)(a1 + 32);
                            v112[0] = _NSConcreteStackBlock;
                            v112[1] = 3221225472LL;
                            v112[2] = sub_100202CEC;
                            v112[3] = &unk_10064CB70;
                            id v113 = v3;
                            [v79 updateVirtualCardsWithAccountIdentifier:v113 completion:v112];
                            uint64_t v25 = v113;
                            goto LABEL_83;
                          }
                        }

                        uint64_t v68 = PKLogFacilityTypeGetObject(14LL);
                        id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
                        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)__int128 buf = 138412290;
                          id v127 = v3;
                          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "Updating physical cards for account %@ following push",  buf,  0xCu);
                        }

                        uint64_t v70 = *(void **)(a1 + 32);
                        v114[0] = _NSConcreteStackBlock;
                        v114[1] = 3221225472LL;
                        v114[2] = sub_100202C44;
                        v114[3] = &unk_10064B338;
                        id v115 = v3;
                        [v70 updatePhysicalCardsForAccountWithIdentifier:v115 force:1 completion:v114];
                        uint64_t v25 = v115;
                        goto LABEL_83;
                      }
                    }

                    uint64_t v59 = PKLogFacilityTypeGetObject(14LL);
                    id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__int128 buf = 138412290;
                      id v127 = v3;
                      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Updating financing plans of account %@ following push",  buf,  0xCu);
                    }

                    id v61 = *(void **)(a1 + 32);
                    v116[0] = _NSConcreteStackBlock;
                    v116[1] = 3221225472LL;
                    v116[2] = sub_100202B84;
                    v116[3] = &unk_10064B310;
                    id v117 = v3;
                    [v61 _updateFinancingPlansForAccountWithIdentifier:v117 pageOffset:0 limit:0 ignoreLastUpdatedDate:0 fromPush:1 completion:v116];
                    uint64_t v25 = v117;
                    goto LABEL_83;
                  }
                }

                uint64_t v50 = PKLogFacilityTypeGetObject(14LL);
                id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  id v127 = v3;
                  _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Updating shared account cloud store for account %@ following push",  buf,  0xCu);
                }

                id v52 = *(void **)(a1 + 32);
                v118[0] = _NSConcreteStackBlock;
                v118[1] = 3221225472LL;
                v118[2] = sub_100202ADC;
                v118[3] = &unk_10064B360;
                id v119 = v3;
                [v52 _updateSharedAccountCloudStoreWithAccountIdentifier:v119 fromPush:1 completion:v118];
                uint64_t v25 = v119;
                goto LABEL_83;
              }
            }

            uint64_t v41 = PKLogFacilityTypeGetObject(14LL);
            id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v127 = v3;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Updating account users of account %@ following push",  buf,  0xCu);
            }

            id v43 = *(void **)(a1 + 32);
            v120[0] = _NSConcreteStackBlock;
            v120[1] = 3221225472LL;
            v120[2] = sub_100202A34;
            v120[3] = &unk_10064B338;
            id v121 = v3;
            [v43 _updateAccountUsersForAccountWithIdentifier:v121 fromPush:1 completion:v120];
            uint64_t v25 = v121;
            goto LABEL_83;
          }
        }

        uint64_t v32 = PKLogFacilityTypeGetObject(14LL);
        id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v127 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Updating extended version of account %@ following push",  buf,  0xCu);
        }

        id v34 = *(void **)(a1 + 32);
        v122[0] = _NSConcreteStackBlock;
        v122[1] = 3221225472LL;
        v122[2] = sub_10020298C;
        v122[3] = &unk_10064CB48;
        id v123 = v3;
        [v34 updateAccountWithIdentifier:v123 extended:1 completion:v122];
        uint64_t v25 = v123;
        goto LABEL_83;
      }
    }

    uint64_t v22 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v127 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Updating account %@ following push",  buf,  0xCu);
    }

    id v24 = *(void **)(a1 + 32);
    v124[0] = _NSConcreteStackBlock;
    v124[1] = 3221225472LL;
    v124[2] = sub_1002028E4;
    v124[3] = &unk_10064CB48;
    id v125 = v3;
    [v24 updateAccountWithIdentifier:v125 extended:0 completion:v124];
    uint64_t v25 = v125;
    goto LABEL_83;
  }

LABEL_85:
}

void sub_1002028E4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10020298C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Extended version of account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100202A34(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Account users of account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100202ADC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Shared account cloud store for account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100202B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Financing Plans of account %@ updated following push with error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100202C44(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Physical cards for account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100202CEC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Virtual cards for account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100202D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Funding sources of account %@ updated following push with error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100202E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Payment plans of account %@ updated following push with error %@",  (uint8_t *)&v8,  0x16u);
  }
}

id sub_100203564(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateAccountsWithCompletion:&stru_10064CB90];
}

void sub_100203574(id a1, NSArray *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Accounts updated following push notification",  v5,  2u);
  }
}

void sub_1002035DC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Account %@ updated following push",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100203684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Financing plans of account %@ updated following push with error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100203744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Funding sources of account %@ updated following push with error: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100203804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 138412802;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Reset zones %@ for account %@ following push with error %@",  (uint8_t *)&v9,  0x20u);
  }
}

void sub_1002038CC(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Reset balances for account %@ updated following push with error: %@",  (uint8_t *)&v7,  0x16u);
  }
}

void sub_10020398C(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Invalidated top up token with identifier %@ for account with identifier %@ with error %@",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_100203CB8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100203D88;
  v14[3] = &unk_10064CBB8;
  int v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void **)(a1 + 56);
  id v15 = v9;
  uint64_t v16 = v10;
  id v18 = v6;
  id v19 = v7;
  id v17 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 pendingFamilyMembersWithCachePolicy:0 completion:v14];
}

void sub_100203D88(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        uint64_t v10 = *(void **)(a1 + 40);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "inviteEmail", (void)v13));
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 _familyMemberAssociatedWithInviteEmail:v11 familyMembers:v3]);

        if (!v12) {
          [*(id *)(a1 + 48) addObject:v9];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v6);
  }

  [*(id *)(a1 + 48) count];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100203EEC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100203FD0;
  v14[3] = &unk_10064CBE0;
  int v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void **)(a1 + 56);
  id v15 = v9;
  uint64_t v16 = v10;
  id v20 = v7;
  id v17 = v11;
  id v18 = v6;
  id v19 = *(id *)(a1 + 64);
  id v12 = v6;
  id v13 = v7;
  [v8 familyMembersWithCachePolicy:0 completion:v14];
}

void sub_100203FD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
        uint64_t v10 = *(void **)(a1 + 40);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 inviteEmail]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 _familyMemberAssociatedWithInviteEmail:v11 familyMembers:v3]);

        if (v12)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 altDSID]);
          [v9 setAltDSID:v13];

          [*(id *)(a1 + 48) addObject:v9];
        }

        else
        {
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSID]);
          if (v14)
          {
            id v15 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountPendingFamilyMemberReminderNotification notificationIdentifierForAltDSID:]( &OBJC_CLASS___PDAccountPendingFamilyMemberReminderNotification,  "notificationIdentifierForAltDSID:",  v14));
            [*(id *)(*(void *)(a1 + 40) + 160) removeUserNotificationWithIdentifier:v15];
          }

          [*(id *)(*(void *)(a1 + 40) + 24) deleteAccountPendingFamilyMember:v9];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }

    while (v6);
  }

  if ([*(id *)(a1 + 48) count])
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v16 = v3;
    id v17 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v25;
      do
      {
        for (j = 0LL; j != v18; j = (char *)j + 1)
        {
          if (*(void *)v25 != v19) {
            objc_enumerationMutation(v16);
          }
          unsigned int v21 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)j);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "altDSID", (void)v24));
          if (v22) {
            [*(id *)(a1 + 64) setObject:v21 forKey:v22];
          }
        }

        id v18 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }

      while (v18);
    }

    uint64_t v23 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
  }

  else
  {
    uint64_t v23 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
  }

  v23();
}

void sub_100204270(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (([a4 isCanceled] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v32 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Account pending family members that have become family members %@",  buf,  0xCu);
    }

    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id obj = *(id *)(a1 + 32);
    id v8 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v27;
      uint64_t v11 = PKSharedCacheDismissedAccountPendingFamilymMembersPrompt;
      do
      {
        for (id i = 0LL; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v27 != v10) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
          if (([v13 displayedNotification] & 1) == 0)
          {
            [v13 setDisplayedNotification:1];
            __int128 v14 = *(void **)(*(void *)(a1 + 40) + 24LL);
            id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 accountIdentifier]);
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 passUniqueIdentifierWithAssociatedAccountIdentifier:v15]);

            id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 altDSID]);
            id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v17]);
            uint64_t v19 = objc_alloc(&OBJC_CLASS___PDAccountPendingFamilyMemberReminderNotification);
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v13 accountIdentifier]);
            unsigned int v21 = -[PDAccountPendingFamilyMemberReminderNotification initWithFamilyMember:accountIdentifier:passUniqueIdentifier:]( v19,  "initWithFamilyMember:accountIdentifier:passUniqueIdentifier:",  v18,  v20,  v16);

            [*(id *)(*(void *)(a1 + 40) + 160) insertUserNotification:v21];
            PKSharedCacheSetBoolForKey(0LL, v11);
          }
        }

        id v9 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
      }

      while (v9);
    }

    uint64_t v22 = *(void **)(a1 + 32);
    uint64_t v23 = *(void **)(*(void *)(a1 + 40) + 24LL);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v22 allObjects]);
    [v23 insertOrUpdateAccountPendingFamilyMembers:v24];
  }

void sub_100204CD0(_Unwind_Exception *a1)
{
}

void sub_100204DA0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100204E98;
    v9[3] = &unk_10064CC08;
    void v9[4] = *(void *)(a1 + 32);
    __int128 v12 = *(_OWORD *)(a1 + 40);
    id v11 = v7;
    id v10 = v6;
    [WeakRetained accountsForFeature:4 completion:v9];
  }

  else
  {
    objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

void sub_100204E98(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 count])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 anyObject]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 appleBalanceDetails]);
    id v7 = *(void **)(a1[4] + 24LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 associatedPassTypeIdentifier]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 associatedPassSerialNumber]);
    unsigned int v10 = [v7 passExistsWithPassTypeID:v8 serialNumber:v9];

    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v13)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning: we have a provisioned pass, ending background provisioning",  buf,  2u);
      }

      objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), *(id *)(*(void *)(a1[8] + 8LL) + 40LL));
      __int128 v14 = *(void (**)(void))(a1[6] + 16LL);
    }

    else
    {
      if (v13)
      {
        *(_WORD *)id v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning: account exists but we have no pass, continuing to check product state",  v18,  2u);
      }

      __int128 v14 = *(void (**)(void))(a1[6] + 16LL);
    }

    v14();
  }

  else
  {
    uint64_t v15 = PKLogFacilityTypeGetObject(14LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning: no Apple Balance account exists, continuing background provisioning",  v17,  2u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

void sub_100205064(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v10 = (void *)*((void *)WeakRetained + 4);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100205164;
    v11[3] = &unk_10064CC58;
    __int128 v14 = *(_OWORD *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    id v13 = v7;
    id v12 = v6;
    [v10 performHandlerOnSharedWebServiceQueue:v11];
  }

  else
  {
    objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

uint64_t sub_100205164(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = -[PKPaymentProvisioningController initWithWebService:localPaymentService:]( objc_alloc(&OBJC_CLASS___PKPaymentProvisioningController),  "initWithWebService:localPaymentService:",  v3,  0LL);

  uint64_t v5 = *(void *)(a1[6] + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning: provisioning controller failed to initialize",  v10,  2u);
    }

    objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), *(id *)(*(void *)(a1[8] + 8LL) + 40LL));
  }

  return (*(uint64_t (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[7] + 8LL) + 40LL) != 0LL);
}

void sub_100205260(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a1 + 48);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v14[1] = 3221225472LL;
  v14[0] = _NSConcreteStackBlock;
  id v11 = *(void **)(v10 + 40);
  v14[2] = sub_100205318;
  v14[3] = &unk_10064CCA8;
  __int128 v17 = v8;
  __int128 v18 = v9;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  [v11 preflightWithCompletion:v14];
}

void sub_100205318(void *a1, int a2, void *a3)
{
  id v6 = a3;
  id v7 = v6;
  if (a2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Provisioning controller preflight succeeded",  (uint8_t *)&v22,  2u);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) paymentSetupProductModel]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 productsForFeatureIdentifier:4]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);

    if (v12
      && (id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 configuration]),
          id v14 = [v13 state],
          v13,
          v14 == (id)1))
    {
      id v15 = [[PKAppleBalanceCredential alloc] initWithProduct:v12 eligibilitySource:7];
      uint64_t v16 = *(void *)(a1[7] + 8LL);
      __int128 v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      [*(id *)(*(void *)(a1[7] + 8) + 40) setIsFromBackgroundProvisioning:1];
    }

    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 138412290;
        uint64_t v23 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning: product for Apple Balance invalid: %@",  (uint8_t *)&v22,  0xCu);
      }

      objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), *(id *)(*(void *)(a1[9] + 8LL) + 40LL));
    }
  }

  else
  {
    if (v6)
    {
      uint64_t v18 = PKLogFacilityTypeGetObject(14LL);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 138412290;
        uint64_t v23 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Provisioning controller preflight failed with error %@",  (uint8_t *)&v22,  0xCu);
      }

      id v20 = (id *)(*(void *)(a1[8] + 8LL) + 40LL);
      unsigned int v21 = a3;
    }

    else
    {
      unsigned int v21 = *(void **)(*(void *)(a1[9] + 8LL) + 40LL);
      id v20 = (id *)(*(void *)(a1[8] + 8LL) + 40LL);
    }

    objc_storeStrong(v20, v21);
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[8] + 8LL) + 40LL) != 0LL);
}

void sub_10020558C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  __int128 v8 = *(void **)(*(void *)(a1[4] + 8LL) + 40LL);
  uint64_t v9 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_100205658;
  v13[3] = &unk_10063B638;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 resolveLocalEligibilityRequirementsForAppleBalanceCredential:v9 withCompletion:v13];
}

void sub_100205658(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning local eligibility requirements executed with error: %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v3;
  id v8 = v3;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_10020574C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [[PKPaymentEligibilityRequest alloc] initWithPaymentCredential:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(v9 + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_100205838;
  v15[3] = &unk_10064CD20;
  id v12 = *(void **)(v11 + 40);
  v15[1] = 3221225472LL;
  __int128 v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v10;
  uint64_t v20 = v9;
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  [v12 requestEligibility:v8 withCompletionHandler:v15];
}

void sub_100205838(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning eligibility request completed with error: %@",  (uint8_t *)&v11,  0xCu);
  }

  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a3);
  if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    if ([v5 eligibilityStatus] == (id)1)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[8] + 8) + 40) state]);
      [v9 setEligibilityResponse:v5];

      [*(id *)(*(void *)(a1[9] + 8) + 40) setState:4 forCredential:*(void *)(*(void *)(a1[8] + 8) + 40)];
    }

    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [v5 eligibilityStatus];
        int v11 = 134217984;
        id v12 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning failed: ineligible with status %li",  (uint8_t *)&v11,  0xCu);
      }

      objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), *(id *)(*(void *)(a1[7] + 8LL) + 40LL));
    }
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_100205A08(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100205AF4;
    v9[3] = &unk_10064CD48;
    __int128 v12 = *(_OWORD *)(a1 + 32);
    id v11 = v7;
    id v10 = v6;
    [WeakRetained validateAppleBalanceSecurityRequirementsWithCompletion:v9];
  }

  else
  {
    objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

void sub_100205AF4(void *a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"not met";
    if (a2) {
      id v8 = @"met";
    }
    int v13 = 138412546;
    id v14 = v8;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Apple Balance security requirements for background provisioning %@, error %@",  (uint8_t *)&v13,  0x16u);
  }

  uint64_t v9 = v5;
  if (v5) {
    goto LABEL_8;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v9 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL);
LABEL_8:
    uint64_t v10 = *(void *)(a1[6] + 8LL);
    id v11 = v9;
    __int128 v12 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v11;
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_100205C24(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc(&OBJC_CLASS___PKPaymentProvisioningRequest);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) state]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 eligibilityResponse]);
  id v11 = [v8 initWithEligibilityResponse:v10];

  __int128 v12 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100205D40;
  v15[3] = &unk_10064CD98;
  __int128 v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 64);
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  [v12 requestProvisioning:v11 withCompletion:v15];
}

void sub_100205D40(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412546;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning provision request completed with pass: %@, error: %@",  (uint8_t *)&v18,  0x16u);
  }

  if (!v7 || v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138412546;
      id v19 = v7;
      __int16 v20 = 2112;
      id v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning: provisioning request failed with pass %@ error %@",  (uint8_t *)&v18,  0x16u);
    }

    __int16 v15 = v9;
    if (!v9) {
      __int16 v15 = *(void **)(*(void *)(a1[8] + 8LL) + 40LL);
    }
    uint64_t v16 = *(void *)(a1[7] + 8LL);
    id v17 = v15;
    id v14 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v17;
  }

  else
  {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v7 uniqueID]);
    uint64_t v13 = *(void *)(a1[6] + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[7] + 8LL) + 40LL) != 0LL);
}

void sub_100205EF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100205FB0;
  v11[3] = &unk_10064CDE8;
  id v12 = v6;
  id v13 = v7;
  uint64_t v14 = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v7;
  [WeakRetained updateAccountsWithCompletion:v11];
}

void sub_100205FB0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updating accounts for Apple Balance background provisioning completed with error: %@",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_100206088(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_1002061A8;
  v13[3] = &unk_10064CE38;
  uint64_t v16 = *(void *)(a1 + 32);
  objc_copyWeak(&v18, (id *)(a1 + 56));
  __int128 v17 = *(_OWORD *)(a1 + 40);
  id v11 = v9;
  id v15 = v11;
  id v12 = v8;
  id v14 = v12;
  [WeakRetained defaultAccountForFeature:4 completion:v13];

  objc_destroyWeak(&v18);
}

void sub_100206194(_Unwind_Exception *a1)
{
}

void sub_1002061A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
    if (WeakRetained)
    {
      id v5 = -[PDAccountBackgroundProvisionCompleteUserNotification initWithFeatureIdentifier:passUniqueIdentifier:supportsInStorePayment:]( [PDAccountBackgroundProvisionCompleteUserNotification alloc],  "initWithFeatureIdentifier:passUniqueIdentifier:supportsInStorePayment:",  4,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  [v3 supportsInStorePayment]);
      uint64_t Object = PKLogFacilityTypeGetObject(14LL);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 138412290;
        id v9 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning inserting user notification %@",  (uint8_t *)&v8,  0xCu);
      }

      [WeakRetained[20] insertUserNotification:v5];
    }
  }

  else
  {
    objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  }

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL);
}

void sub_100206318(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = (id *)(a1 + 40);
  id v7 = a4;
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _triggerProvisionPassToWatchWithCompletion:&stru_10064CE58];

  v7[2](v7, v9, *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) != 0LL);
}

void sub_1002063A8(id a1, BOOL a2)
{
  BOOL v2 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"not triggered";
    if (v2) {
      id v5 = @"triggered";
    }
    int v6 = 138412290;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning to watch %@",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_100206464(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 48);
    LOBYTE(v3[47]._os_unfair_lock_opaque) = 0;
    os_unfair_lock_unlock(v3 + 48);
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Apple Balance background provisioning completed with error: %@",  (uint8_t *)&v7,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1002067AC(_Unwind_Exception *a1)
{
}

void sub_100206808(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v8 = *(_BYTE *)(v7 + 24);
  if (v8)
  {
    char v8 = PKPasscodeEnabled() != 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  }

  *(_BYTE *)(v7 + 24) = v8;
  v6[2](v6, v9, *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0);
}

void sub_100206894(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (void *)*((void *)WeakRetained + 5);
    uint64_t v11 = PKCurrentCloudStoreApplePayContainerName();
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100206990;
    v15[3] = &unk_10064CED0;
    __int128 v18 = *(_OWORD *)(a1 + 32);
    id v17 = v7;
    id v13 = v6;
    uint64_t v14 = *(void *)(a1 + 48);
    id v16 = v13;
    uint64_t v19 = v14;
    [v10 cloudStoreStatusForContainer:v12 completion:v15];
  }

  else
  {
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

void sub_100206990(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  char v8 = a4;
  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138412290;
      uint64_t v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to get cloud store status for Apple Pay Container with error %@",  (uint8_t *)&v18,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), a4);
    uint64_t v11 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = a3 ^ 1;
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    if (*(_BYTE *)(v12 + 24))
    {
      unsigned __int8 v13 = [v7 supportsDeviceToDeviceEncryption];
      uint64_t v12 = *(void *)(a1[7] + 8LL);
    }

    else
    {
      unsigned __int8 v13 = 0;
    }

    *(_BYTE *)(v12 + 24) = v13;
    uint64_t v14 = PKLogFacilityTypeGetObject(14LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = @"NO";
      if (a3) {
        id v17 = @"YES";
      }
      else {
        id v17 = @"NO";
      }
      if (*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL)) {
        id v16 = @"YES";
      }
      int v18 = 138412546;
      uint64_t v19 = v17;
      __int16 v20 = 2112;
      id v21 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Cloud store status for Apple Pay Container: cloudStoreIsSetup %@, supportsDeviceToDeviceEncryption %@",  (uint8_t *)&v18,  0x16u);
    }

    uint64_t v11 = *(void (**)(void))(a1[5] + 16LL);
  }

  v11();
}

void sub_100206B74(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
      && *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      id v10 = (void *)*((void *)WeakRetained + 5);
      uint64_t v11 = PKCurrentCloudStoreApplePayContainerName();
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_100206CA8;
      v15[3] = &unk_10064CEF8;
      uint64_t v18 = *(void *)(a1 + 32);
      id v17 = v7;
      id v13 = v6;
      uint64_t v14 = *(void *)(a1 + 48);
      id v16 = v13;
      uint64_t v19 = v14;
      [v10 setupCloudDatabaseForContainerName:v12 completion:v15];
    }

    else
    {
      (*((void (**)(id, id, BOOL))v7 + 2))( v7,  v6,  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0);
    }
  }

  else
  {
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

void sub_100206CA8(void *a1, int a2, void *a3)
{
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      int v14 = 138412290;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to setup Apple Pay Cloud Store Container with error %@",  (uint8_t *)&v14,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), a3);
    id v10 = *(void (**)(void))(a1[5] + 16LL);
  }

  else
  {
    if (v9)
    {
      uint64_t v11 = @"failed";
      if (a2) {
        uint64_t v11 = @"succeeded";
      }
      int v14 = 138412290;
      id v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Apple Pay Cloud Container setup %@",  (uint8_t *)&v14,  0xCu);
    }

    uint64_t v12 = *(void *)(a1[6] + 8LL);
    if (*(_BYTE *)(v12 + 24)) {
      char v13 = a2;
    }
    else {
      char v13 = 0;
    }
    *(_BYTE *)(v12 + 24) = v13;
    id v10 = *(void (**)(void))(a1[5] + 16LL);
  }

  v10();
}

uint64_t sub_100206E24(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_100206F90(_Unwind_Exception *a1)
{
}

void sub_100206FAC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Inserted account for zone creation: %@",  (uint8_t *)&v9,  0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained && *(void *)(a1 + 48))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 208LL));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
    id v7 = (NSMutableOrderedSet *)objc_claimAutoreleasedReturnValue([WeakRetained[25] objectForKey:v6]);
    if (!v7) {
      id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableOrderedSet);
    }
    id v8 = objc_retainBlock(*(id *)(a1 + 48));
    -[NSMutableOrderedSet addObject:](v7, "addObject:", v8);

    [WeakRetained[25] setObject:v7 forKey:v6];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 208LL));
  }
}

void sub_1002074C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Fetched Apple Balance promotion with result %@, error %@",  buf,  0x16u);
  }

  char v13 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  if (v8)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10020761C;
    v14[3] = &unk_10063A790;
    id v15 = v8;
    [v13 insertOrUpdateAppleBalancePromotion:v15 accountIdentifier:v12 completion:v14];
  }

  else
  {
    [v13 deleteAppleBalancePromotionForAccountWithIdentifier:v12 completion:&stru_10064CF68];
  }
}

void sub_10020761C(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Inserted Apple Balance promotion %@ with error %@",  (uint8_t *)&v7,  0x16u);
  }
}

void sub_1002076DC(id a1, NSError *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    uint64_t v6 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Deleted stored Apple Balance promotion with error %@",  (uint8_t *)&v5,  0xCu);
  }
}

uint64_t sub_100207880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100207890(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100207940;
  v8[3] = &unk_10063B440;
  void v8[4] = v4;
  id v9 = v5;
  id v10 = v3;
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_100207940(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) appleBalancePromotionForAccountIdentifier:*(void *)(a1 + 40)]);
  objc_msgSend( *(id *)(a1 + 32),  "_queue_updateAppleBalancePromotionsIfNeccessaryForAccount:currentPromotion:",  *(void *)(a1 + 48),  v2);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002079F8;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1002079F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_100207B2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_100207B44(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAppleBalancePromotion:*(void *)(a1 + 40) forAccountWithIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100207C3C;
  v8[3] = &unk_10064B8F0;
  void v8[4] = v3;
  id v9 = v2;
  id v10 = *(id *)(a1 + 48);
  id v4 = v2;
  [v3 _accessObserversWithHandler:v8];
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100207C8C;
  v6[3] = &unk_10063A830;
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v5, v6);
}

void sub_100207C3C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdateAppleBalancePromotion:forAccountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdateAppleBalancePromotion:a1[5] forAccountIdentifier:a1[6]];
  }
}

uint64_t sub_100207C8C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_100207D9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_100207DB4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) deleteAppleBalancePromotionForAccountWithIdentifier:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (v2)
  {
    id v4 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_100207EB0;
    v8[3] = &unk_10064B8F0;
    void v8[4] = v4;
    id v9 = v2;
    id v10 = *(id *)(a1 + 40);
    [v4 _accessObserversWithHandler:v8];
  }

  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100207F00;
  v6[3] = &unk_10063A830;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v5, v6);
}

void sub_100207EB0(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "accountManager:didRemoveAppleBalancePromotionWithUniqueIdentifier:forAccountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didRemoveAppleBalancePromotionWithUniqueIdentifier:a1[5] forAccountIdentifier:a1[6]];
  }
}

uint64_t sub_100207F00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_100208014(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100208024(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) inStoreTopUpTokenForAccountIdentifier:*(void *)(a1 + 40)]);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002080CC;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1002080CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_100208204(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100208214(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateInStoreTopUpToken:*(void *)(a1 + 40) forAccountWithIdentifier:*(void *)(a1 + 48)]);
  id v3 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10020830C;
  v8[3] = &unk_10064B8F0;
  void v8[4] = v3;
  id v9 = v2;
  id v10 = *(id *)(a1 + 48);
  id v4 = v2;
  [v3 _accessObserversWithHandler:v8];
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10020835C;
  v6[3] = &unk_10063A830;
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v5, v6);
}

void sub_10020830C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "accountManager:didUpdateInStoreTopUpToken:forAccountIdentifier:") & 1) != 0) {
    [v3 accountManager:a1[4] didUpdateInStoreTopUpToken:a1[5] forAccountIdentifier:a1[6]];
  }
}

uint64_t sub_10020835C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100208468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100208478(uint64_t a1)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002084FC;
  block[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_1002084FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002086A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1002086C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 tokenIdentifier]);
  id v6 = v4;
  id v7 = v5;
  if (v6 == v7)
  {

LABEL_10:
    [v3 setState:1];
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100208880;
    v16[3] = &unk_1006424D0;
    uint64_t v12 = *(void *)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    [WeakRetained insertOrUpdateInStoreTopUpToken:v3 accountIdentifier:v12 completion:v16];

    goto LABEL_14;
  }

  id v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
  }

  else
  {
    unsigned int v10 = [v6 isEqualToString:v7];

    if (v10) {
      goto LABEL_10;
    }
  }

  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v19 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Error: no token with identifier %@ is stored on device",  buf,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_14:
}

uint64_t sub_100208880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100208AD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100208AF4(id *a1)
{
  uint64_t v2 = a1 + 6;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = (void *)*((void *)WeakRetained + 4);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100208BCC;
    v6[3] = &unk_10064D008;
    id v7 = a1[4];
    id v8 = a1[5];
    objc_copyWeak(&v9, v2);
    [v5 performHandlerOnSharedWebServiceQueue:v6];
    objc_destroyWeak(&v9);
  }
}

void sub_100208BB8(_Unwind_Exception *a1)
{
}

void sub_100208BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_100208C84;
  v5[3] = &unk_10064CFE0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_copyWeak(&v7, (id *)(a1 + 48));
  [v3 resolveStorefrontCountryMismatchWithRequest:v4 completion:v5];
  objc_destroyWeak(&v7);
}

void sub_100208C70(_Unwind_Exception *a1)
{
}

void sub_100208C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100208E54;
    v16[3] = &unk_100648088;
    id v17 = 0LL;
    id v18 = *(id *)(a1 + 32);
    [WeakRetained attemptAppleBalanceSetupWithCompletion:v16];

    goto LABEL_13;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  unsigned int v9 = [v8 isEqualToString:PKPaymentWebServiceErrorDomain];

  if (v9)
  {
    if ([v7 code] != (id)60103) {
      goto LABEL_11;
    }
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v20 = v7;
      uint64_t v12 = "Storefront Country Mismatch: no account exists in new region, error: %@";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0xCu);
    }
  }

  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(14LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v20 = v7;
      uint64_t v12 = "Storefront Country Mismatch: request failed with error: %@";
      goto LABEL_9;
    }
  }

LABEL_11:
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15) {
    (*(void (**)(void))(v15 + 16))();
  }
LABEL_13:
}

void sub_100208E54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Storefront Country Mismatch: reprovision of new card finished with error: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
}

void sub_100208FC8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAccountWebServiceDailyCashEligibilityRequest);
  [v4 setAccountIdentifier:a1[4]];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  [v4 setBaseURL:v5];
  uint64_t v6 = (void *)a1[6];
  uint64_t v7 = *(void **)(a1[5] + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002090A4;
  v9[3] = &unk_10064B710;
  id v10 = v4;
  id v11 = v6;
  id v8 = v4;
  [v7 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_1002090A4(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100209118;
  v4[3] = &unk_10064D058;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 dailyCashEligibilityWithRequest:v3 completion:v4];
}

void sub_100209118(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 summary]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

id PDDefaultQueue()
{
  if (qword_100707A48 != -1) {
    dispatch_once(&qword_100707A48, &stru_10064D078);
  }
  return (id)qword_100707A40;
}

void sub_1002092E4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.passd.main", v4);
  uint64_t v3 = (void *)qword_100707A40;
  qword_100707A40 = (uint64_t)v2;
}

id PDUtilityQueue()
{
  if (qword_100707A58 != -1) {
    dispatch_once(&qword_100707A58, &stru_10064D098);
  }
  return (id)qword_100707A50;
}

void sub_100209374(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_UTILITY, 0);
  attr = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);

  dispatch_queue_t v4 = dispatch_queue_create("com.apple.passd.utility", attr);
  id v5 = (void *)qword_100707A50;
  qword_100707A50 = (uint64_t)v4;
}

id PDHeavyQueue()
{
  if (qword_100707A68 != -1) {
    dispatch_once(&qword_100707A68, &stru_10064D0B8);
  }
  return (id)qword_100707A60;
}

void sub_100209424(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.passd.heavy", v4);
  dispatch_queue_attr_t v3 = (void *)qword_100707A60;
  qword_100707A60 = (uint64_t)v2;
}

id PDHeavyUtilityQueue()
{
  if (qword_100707A78 != -1) {
    dispatch_once(&qword_100707A78, &stru_10064D0D8);
  }
  return (id)qword_100707A70;
}

void sub_1002094B4(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_UTILITY, 0);
  attr = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);

  id v4 = PDHeavyQueue();
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_t v6 = dispatch_queue_create_with_target_V2("com.apple.passd.heavy.utility", attr, v5);
  uint64_t v7 = (void *)qword_100707A70;
  qword_100707A70 = (uint64_t)v6;
}

id sub_10020A198(id a1, PKPassCredentialShare *a2)
{
  return -[PKPassCredentialShare identifier](a2, "identifier");
}

NSString *__cdecl sub_10020A1A0(id a1, PKPassSharedEntitlement *a2)
{
  return (NSString *)-[PKPassSharedEntitlement entitlementIdentifier](a2, "entitlementIdentifier");
}

NSString *__cdecl sub_10020A1A8(id a1, PKPassSharedEntitlement *a2)
{
  return (NSString *)-[PKPassSharedEntitlement entitlementIdentifier](a2, "entitlementIdentifier");
}

void sub_10020A728(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v2 addObject:v3];
}

id sub_10020ABB0(uint64_t a1, uint64_t a2)
{
  return +[PassShareActivationOption deletePassShareActivationOptionForPassSharePID:inDatabase:]( &OBJC_CLASS___PassShareActivationOption,  "deletePassShareActivationOptionForPassSharePID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

void sub_10020AD30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___PKPassShare);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v12 withProperties:v7 values:a4];

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PassSharedEntitlement passSharedEntitlementsForPassSharePID:inDatabase:]( &OBJC_CLASS___PassSharedEntitlement,  "passSharedEntitlementsForPassSharePID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPassShare setSharedEntitlements:](v12, "setSharedEntitlements:", v8);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[PassCredentialShare passCredentialSharesForSharePID:inDatabase:]( &OBJC_CLASS___PassCredentialShare,  "passCredentialSharesForSharePID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPassShare setCredentialShares:](v12, "setCredentialShares:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[PassShareActivationOption passShareActivationOptionForPassSharePID:inDatabase:]( &OBJC_CLASS___PassShareActivationOption,  "passShareActivationOptionForPassSharePID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  id v11 = [[PKPassShareActivationOptions alloc] initWithOptions:v10];
  -[PKPassShare setActivationOptions:](v12, "setActivationOptions:", v11);

  [*(id *)(a1 + 48) safelyAddObject:v12];
}

void sub_10020AFF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10020B870(id a1, PKPassShare *a2, id a3)
{
}

void sub_10020B878(id a1, PKPassShare *a2, id a3)
{
}

void sub_10020B880(id a1, PKPassShare *a2, id a3)
{
}

void sub_10020B888(id a1, PKPassShare *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKDateForString(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassShare setCreationDate:](v4, "setCreationDate:", v6);
}

void sub_10020B8D8(id a1, PKPassShare *a2, id a3)
{
  id v4 = a2;
  -[PKPassShare setManageability:](v4, "setManageability:", PKPassShareManageabilityFromString(a3));
}

void sub_10020B91C(id a1, PKPassShare *a2, id a3)
{
}

void sub_10020B924(id a1, PKPassShare *a2, id a3)
{
  id v4 = a2;
  -[PKPassShare setStatus:](v4, "setStatus:", PKShareStatusFromString(a3));
}

void sub_10020B968(id a1, PKPassShare *a2, id a3)
{
}

void sub_10020B970(id a1, PKPassShare *a2, id a3)
{
}

void sub_10020BD48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10020C008(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10020C010(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10020C018(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKInstallmentPlanMerchant setCategoryCode:](v4, "setCategoryCode:", [a3 unsignedIntegerValue]);
}

void sub_10020C05C(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10020C064(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10020C06C(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10020C074(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10020C4BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10020C6AC(id a1, PKSavingsAccountStepUpDetails *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountStepUpDetails setThresholdExceeded:](v4, "setThresholdExceeded:", [a3 BOOLValue]);
}

void sub_10020C6F0(id a1, PKSavingsAccountStepUpDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKSavingsAccountStepUpDetails setNeededBy:](v4, "setNeededBy:", v5);
}

void sub_10020CADC(id a1, PKPaymentOfferCatalog *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentOfferCatalog setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_10020CCD4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

CFStringRef PDUserNotificationCategoryForType(uint64_t a1)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 1LL:
      uint64_t result = @"PDUserNotificationTypeWallet";
      break;
    case 2LL:
      uint64_t result = @"PDUserNotificationTypeWalletValueAddedServiceTransaction";
      break;
    case 3LL:
      uint64_t result = @"PDUserNotificationTypePassUpdate";
      break;
    case 4LL:
    case 16LL:
LABEL_5:
      uint64_t result = @"PKPaymentTransactionNotificationCategory";
      break;
    case 5LL:
      uint64_t result = @"PKTransitPaymentTransactionNotificationCategory";
      break;
    case 6LL:
      uint64_t result = @"PDUserNotificationTypePassTransitRelevancy";
      break;
    case 7LL:
      uint64_t result = @"PDUserNotificationTypePassLowBalanceReminder";
      break;
    case 8LL:
    case 9LL:
    case 10LL:
    case 11LL:
    case 13LL:
    case 14LL:
    case 15LL:
    case 18LL:
    case 20LL:
    case 21LL:
    case 23LL:
    case 24LL:
    case 25LL:
    case 26LL:
    case 27LL:
    case 29LL:
    case 30LL:
    case 31LL:
    case 33LL:
    case 34LL:
    case 35LL:
    case 36LL:
    case 37LL:
    case 38LL:
    case 39LL:
    case 40LL:
    case 41LL:
    case 45LL:
    case 46LL:
    case 47LL:
    case 48LL:
    case 49LL:
    case 50LL:
      return result;
    case 12LL:
      uint64_t result = @"PDUserNotificationTypePeerPaymentTransactionAcceptanceReminder";
      break;
    case 17LL:
      uint64_t result = @"PDUserNotificationTypePassAccountEvent";
      break;
    case 19LL:
      uint64_t result = @"PDUserNotificationTypePeerPaymentNeedsVerification";
      break;
    case 22LL:
      uint64_t result = @"PDUserNotificationTypeAccountPaymentDue";
      break;
    case 28LL:
      uint64_t result = @"PDUserNotificationTypePassExpressModeEnabled";
      break;
    case 32LL:
      uint64_t result = @"PDUserNotificationTypePassExpressModeEnabledPromoted";
      break;
    case 42LL:
    case 43LL:
      uint64_t result = @"PDUserNotificationTypeDailyDailyCashWithAmountPrecentage";
      break;
    case 44LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlan";
      break;
    case 51LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlanPayment";
      break;
    case 52LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlanPaidOff";
      break;
    case 53LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlanPaymentReminder";
      break;
    case 54LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlanPastDue";
      break;
    case 55LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlanScheduleUpdate";
      break;
    case 56LL:
      uint64_t result = @"PDUserNotificationTypeAccountFinancingPlanDisputeUpdate";
      break;
    default:
      switch(a1)
      {
        case '?':
          uint64_t result = @"PDUserNotificationTypePeerPaymentPendingRequestReceivedReminder";
          break;
        case 'C':
          uint64_t result = @"PDUserNotificationTypePassExpressUpgradesAvailable";
          break;
        case 'D':
          uint64_t result = @"PDUserNotificationTypeNFCPayloadStateUpdate";
          break;
        case 'G':
          goto LABEL_5;
        case 'L':
          uint64_t result = @"PDUserNotificationTypeAccountPhysicalCardExpiringSoon";
          break;
        case 'M':
          uint64_t result = @"PDUserNotificationTypeAccountPhysicalCardExpired";
          break;
        case 'O':
          uint64_t result = @"PDUserNotificationTypeProvisioningContinuityPrompt";
          break;
        default:
          return result;
      }

      break;
  }

  return result;
}

__CFString *PDUserNotificationCategoryForNotification(void *a1)
{
  id v1 = a1;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___PDAccountPaymentDueUserNotification, v2);
  if ((objc_opt_isKindOfClass(v1, v3) & 1) != 0
    && ([v1 preventAutomaticDismissal] & 1) != 0)
  {
    uint64_t v5 = @"PDUserNotificationTypeAccountPaymentDue";
  }

  else
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___PDAccountPaymentPastDueUserNotification, v4);
    if ((objc_opt_isKindOfClass(v1, v6) & 1) != 0
      && ([v1 preventAutomaticDismissal] & 1) != 0)
    {
      uint64_t v5 = @"PDUserNotificationTypeAccountPaymentPastDue";
    }

    else
    {
      id v7 = PDUserNotificationCategoryForType((uint64_t)[v1 notificationType]);
      uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue(v7);
    }
  }

  return v5;
}

uint64_t PDIsWalletUserNotificationType(uint64_t a1)
{
  return ((unint64_t)(a1 - 1) < 0x40) & (0xA000000000000003LL >> (a1 - 1));
}

void sub_10020DBEC(_Unwind_Exception *a1)
{
}

uint64_t sub_10020DC18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10020DC28(uint64_t a1)
{
}

void sub_10020DC30(uint64_t a1, void *a2, void *a3)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) && *(_BYTE *)(a1 + 48)) {
    uint64_t v5 = @"?";
  }
  else {
    uint64_t v5 = @"&";
  }
  uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v7 = a3;
  id v8 = a2;
  [v6 addObject:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:@"="];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLQueryAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLQueryAllowedCharacterSet"));
  id v10 = (id)objc_claimAutoreleasedReturnValue([v7 stringByAddingPercentEncodingWithAllowedCharacters:v9]);

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
}

void sub_10020F664( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_10020F69C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v36 = a2;
  id v31 = a3;
  id v9 = a4;
  id v32 = a5;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  uint64_t v37 = a1;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passDiffs]);
  id v10 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v34 = *(void *)v41;
    id v35 = v9;
    do
    {
      for (id i = 0LL; i != v11; id i = (char *)i + 1)
      {
        if (*(void *)v41 != v34) {
          objc_enumerationMutation(obj);
        }
        char v13 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 passUniqueID]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v37 + 40) passUniqueIdentifier]);
        id v16 = v14;
        id v17 = v15;
        id v18 = v17;
        if (v16 == v17)
        {
          unsigned int v20 = 1;
        }

        else
        {
          if (v16) {
            BOOL v19 = v17 == 0LL;
          }
          else {
            BOOL v19 = 1;
          }
          if (v19) {
            unsigned int v20 = 0;
          }
          else {
            unsigned int v20 = [v16 isEqualToString:v17];
          }
        }

        id v21 = (id)objc_claimAutoreleasedReturnValue([v13 anyKey]);
        id v22 = v36;
        if (v21 == v22)
        {
          unsigned int v23 = 1;
        }

        else
        {
          unsigned int v23 = 0;
          if (v36 && v21) {
            unsigned int v23 = [v21 isEqualToString:v22];
          }
        }

        if ((v20 & v23) == 1)
        {
          [*(id *)(v37 + 48) removeObject:v13];
          *(void *)(*(void *)(*(void *)(v37 + 72) + 8LL) + 24LL) = 1LL;
        }

        id v9 = v35;
      }

      id v11 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
    }

    while (v11);
  }

  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v37 + 32) primaryPassDiff]);
  id v38 = 0LL;
  id v39 = 0LL;
  unsigned int v25 = [v24 getHunkForKey:v36 oldValue:0 newValue:&v39 message:&v38];
  id v26 = v39;
  id v27 = v38;
  if (!v25
    || ![v9 isEqual:v26]
    || ([v32 isEqualToString:v27] & 1) == 0)
  {
    __int128 v28 = objc_alloc_init(&OBJC_CLASS___PKDiff);
    *(void *)(*(void *)(*(void *)(v37 + 72) + 8LL) + 24LL) = 1LL;
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v37 + 40) passUniqueIdentifier]);
    -[PKDiff setPassUniqueID:](v28, "setPassUniqueID:", v29);

    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v37 + 56) passManifestHash]);
    -[PKDiff setPassManifestHash:](v28, "setPassManifestHash:", v30);

    -[PKDiff addHunkWithKey:oldValue:newValue:message:]( v28,  "addHunkWithKey:oldValue:newValue:message:",  v36,  v31,  v9,  v32);
    [*(id *)(v37 + 48) addObject:v28];
    [*(id *)(v37 + 64) addObject:v36];
  }
}

LABEL_82:
  return v8;
}
}

void sub_10021869C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v2 = (void *)qword_100707A80;
  qword_100707A80 = (uint64_t)v1;

  [(id)qword_100707A80 setLocalizedDateFormatFromTemplate:@"MMM d"];
}

void sub_10021946C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v2 = (void *)qword_100707A90;
  qword_100707A90 = (uint64_t)v1;

  [(id)qword_100707A90 setLocalizedDateFormatFromTemplate:@"j:mm a"];
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v4 = (void *)qword_100707A98;
  qword_100707A98 = (uint64_t)v3;

  [(id)qword_100707A98 setLocalizedDateFormatFromTemplate:@"MMM d"];
}

void sub_1002265B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AccountTransfer);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[AccountTransfer transfer](v8, "transfer"));
  [v6 addObject:v7];
}

void sub_100226E74(void *a1, uint64_t a2, uint64_t a3)
{
  id v19 = *(id *)(a3 + 8LL * a1[6]);
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a3 + 8LL * a1[7]));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v8 = [v6 isEqualToNumber:v7];

    if ((v8 & 1) == 0)
    {
      if (v19)
      {
        id v9 = (void *)a1[5];
        uint64_t v10 = PKCurrencyAmountMake(v6, v19);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        [v9 setCurrencyAmount:v11];
      }
    }
  }

  uint64_t v12 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a3 + 8LL * a1[8]));
  char v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v15 = [v13 isEqualToNumber:v14];

    if ((v15 & 1) == 0)
    {
      if (v19)
      {
        id v16 = (void *)a1[5];
        uint64_t v17 = PKCurrencyAmountMake(v13, v19);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        [v16 setHoldAmount:v18];
      }
    }
  }
}

id sub_100226FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountTransfer,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1002274EC(id a1, PKAccountTransfer *a2, id a3)
{
}

void sub_1002274F4(id a1, PKAccountTransfer *a2, id a3)
{
}

void sub_1002274FC(id a1, PKAccountTransfer *a2, id a3)
{
}

void sub_100227504(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountTransfer setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100227548(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountTransfer setTransferDate:](v4, "setTransferDate:", v5);
}

void sub_100227594(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountTransfer setTransferStatusDate:](v4, "setTransferStatusDate:", v5);
}

void sub_1002275E0(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountTransfer setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100227624(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountTransfer setStatusCode:](v4, "setStatusCode:", [a3 integerValue]);
}

void sub_100227668(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountTransfer setCancellable:](v4, "setCancellable:", [a3 BOOLValue]);
}

void sub_1002276AC(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountTransfer setCancellationExpiryDate:](v4, "setCancellationExpiryDate:", v5);
}

void sub_1002276F8(id a1, PKAccountTransfer *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountTransfer setExpectedCompletionDate:](v4, "setExpectedCompletionDate:", v5);
}

void sub_100227744(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer externalAccount](a2, "externalAccount"));
  [v5 setIdentifier:v4];
}

void sub_100227790(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer externalAccount](a2, "externalAccount"));
  id v5 = [v4 integerValue];

  [v6 setType:v5];
}

void sub_1002277EC(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer externalAccount](a2, "externalAccount"));
  [v5 setAccountSuffix:v4];
}

void sub_100227838(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer scheduleDetails](a2, "scheduleDetails"));
  id v5 = [v4 integerValue];

  [v6 setFrequency:v5];
}

void sub_100227894(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer scheduleDetails](a2, "scheduleDetails"));
  LODWORD(a2) = [v4 intValue];

  [v5 setScheduledDay:(int)a2];
}

void sub_1002278F0(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer scheduleDetails](a2, "scheduleDetails"));
  id v5 = (void *)_DateForSQLValue(v4);

  [v6 setScheduledDate:v5];
}

void sub_100227950(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer scheduleDetails](a2, "scheduleDetails"));
  [v5 setTransferTermsIdentifier:v4];
}

void sub_100227A10(id a1, PKAccountTransfer *a2, id a3)
{
  id v8 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountTransfer externalAccount](a2, "externalAccount"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 fundingDetails]);

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___PKAccountPaymentFundingDetailsBankAccount, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
    [v5 setName:v8];
  }
}

void sub_100227F90(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1002280D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentPreferencesNotification);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1002281F4(id a1, PKPeerPaymentPreferencesNotification *a2, id a3)
{
}

void sub_1002281FC(id a1, PKPeerPaymentPreferencesNotification *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesNotification setNotificationType:]( v4,  "setNotificationType:",  [a3 integerValue]);
}

void sub_100228240(id a1, PKPeerPaymentPreferencesNotification *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesNotification setValue:](v4, "setValue:", [a3 BOOLValue]);
}

void sub_100228ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v2 addObject:v3];
}

void sub_100228D38(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100228E5C(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _predicateForPersistentID:v7]);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v4 anyInDatabase:v5 predicate:v8]);

  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 fundingSource]);
  [v9 safelyAddObject:v10];
}

void sub_1002290D0(id a1, PKAccountPaymentFundingSource *a2, id a3)
{
}

void sub_1002290D8(id a1, PKAccountPaymentFundingSource *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPaymentFundingSource setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10022911C(id a1, PKAccountPaymentFundingSource *a2, id a3)
{
}

void sub_100229D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

uint64_t sub_100229D40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100229D50(uint64_t a1)
{
}

void sub_100229D58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  id v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  v14[1] = 3221225472LL;
  v14[2] = sub_100229E24;
  v14[3] = &unk_10064D950;
  __int128 v17 = v10;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  sub_100229EB4(v8, v11, v9, v14);
}

void sub_100229E24(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8LL);
  __int128 v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100229EB4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v19 = a2;
  id v20 = a3;
  id v18 = a4;
  if (a1)
  {
    id v21 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v37[0] = 0LL;
    v37[1] = v37;
    void v37[2] = 0x3032000000LL;
    v37[3] = sub_100229D40;
    void v37[4] = sub_100229D50;
    id v38 = 0LL;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v9 = v19;
    id v10 = [v9 countByEnumeratingWithState:&v33 objects:v39 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v34;
      do
      {
        id v12 = 0LL;
        do
        {
          if (*(void *)v34 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)v12);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472LL;
          v27[2] = sub_10022B044;
          v27[3] = &unk_10064DAC0;
          void v27[4] = v13;
          __int128 v28 = v8;
          uint64_t v29 = a1;
          id v30 = v20;
          id v32 = v37;
          id v31 = v7;
          objc_msgSend(v21, "addOperation:", v27, v18);

          id v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v9 countByEnumeratingWithState:&v33 objects:v39 count:16];
      }

      while (v10);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_10022B460;
    v22[3] = &unk_10064DAE8;
    id v25 = v18;
    id v15 = v8;
    unsigned int v23 = v15;
    id v16 = v7;
    __int128 v24 = v16;
    id v26 = v37;
    id v17 = [v21 evaluateWithInput:v14 completion:v22];

    _Block_object_dispose(v37, 8);
  }
}

void sub_10022A184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_10022A1B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    unsigned int v11 = *(unsigned __int8 *)(a1 + 65);
    v14[0] = _NSConcreteStackBlock;
    __int128 v12 = *(_OWORD *)(a1 + 48);
    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    v14[1] = 3221225472LL;
    v14[2] = sub_10022A2A0;
    v14[3] = &unk_10064D978;
    __int128 v17 = v12;
    id v16 = v7;
    id v15 = v6;
    sub_10022A330(v9, v13, v10, v11, v14);
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10022A2A0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10022A330(uint64_t a1, void *a2, void *a3, unsigned int a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = v10;
  uint64_t v33 = a1;
  if (a1)
  {
    __int128 v35 = (void (**)(void, void, void))v10;
    __int128 v36 = v9;
    id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    id v37 = v8;
    id v14 = v8;
    id v41 = [v14 countByEnumeratingWithState:&v49 objects:v56 count:16];
    if (v41)
    {
      uint64_t v39 = *(void *)v50;
      __int128 v40 = v12;
      id obj = v14;
      do
      {
        for (id i = 0LL; i != v41; id i = (char *)i + 1)
        {
          if (*(void *)v50 != v39) {
            objc_enumerationMutation(obj);
          }
          id v16 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)i);
          __int128 v17 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 groupIdentifier]);
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          __int128 v48 = 0u;
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 credentialShares]);
          id v20 = [v19 countByEnumeratingWithState:&v45 objects:v55 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v46;
            do
            {
              for (j = 0LL; j != v21; j = (char *)j + 1)
              {
                if (*(void *)v46 != v22) {
                  objc_enumerationMutation(v19);
                }
                __int128 v24 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)j);
                if (PKShareStatusIsPending([v24 status]) || !v18)
                {
                  -[NSMutableSet addObject:](v17, "addObject:", v24);
                }

                else
                {
                  id v25 = [v24 copy];
                  [v25 setStatus:6];
                  -[NSMutableSet addObject:](v17, "addObject:", v25);
                  -[NSMutableSet addObject:](v13, "addObject:", v18);
                }
              }

              id v21 = [v19 countByEnumeratingWithState:&v45 objects:v55 count:16];
            }

            while (v21);
          }

          id v26 = [v16 copy];
          id v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v17, "allObjects"));
          [v26 setCredentialShares:v27];

          id v12 = v40;
          -[NSMutableArray addObject:](v40, "addObject:", v26);
        }

        id v14 = obj;
        id v41 = [obj countByEnumeratingWithState:&v49 objects:v56 count:16];
      }

      while (v41);
    }

    id v28 = -[NSMutableSet count](v13, "count");
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v28)
    {
      id v11 = v35;
      if (v31)
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v54 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Revoking share groups: %@",  buf,  0xCu);
      }

      id v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v13, "allObjects"));
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_10022B4D0;
      v42[3] = &unk_10064DB10;
      id v44 = v35;
      __int128 v43 = v12;
      id v9 = v36;
      sub_10022B4F8(v33, v32, a4, v36, v42);

      id v8 = v37;
    }

    else
    {
      id v11 = v35;
      if (v31)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] No group identifiers found to revoke",  buf,  2u);
      }

      ((void (**)(void, id, void))v35)[2](v35, v14, 0LL);
      id v9 = v36;
      id v8 = v37;
    }
  }
}

void sub_10022A724(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  BOOL v10 = *(_BYTE *)(a1 + 64) == 0;
  v15[0] = _NSConcreteStackBlock;
  __int128 v11 = *(_OWORD *)(a1 + 48);
  id v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  v15[1] = 3221225472LL;
  v15[2] = sub_10022A800;
  v15[3] = &unk_10064D978;
  __int128 v18 = v11;
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  sub_10022A88C(v8, v12, v9, v10, v15);
}

void sub_10022A800(void *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a2);
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  uint64_t v8 = v6;
  if (!v6) {
    uint64_t v8 = *(void **)(v7 + 40);
  }
  objc_storeStrong((id *)(v7 + 40), v8);
  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10022A88C(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v25 = a2;
  id v8 = a3;
  id v24 = a5;
  if (a1)
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    uint64_t v29 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v52[0] = 0LL;
    v52[1] = v52;
    v52[2] = 0x3032000000LL;
    v52[3] = sub_100229D40;
    v52[4] = sub_100229D50;
    id v53 = 0LL;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id obj = v25;
    id v10 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
    if (v10)
    {
      uint64_t v28 = *(void *)v49;
      do
      {
        uint64_t v11 = 0LL;
        id v30 = v10;
        do
        {
          if (*(void *)v49 != v28) {
            objc_enumerationMutation(obj);
          }
          id v32 = *(void **)(*((void *)&v48 + 1) + 8 * v11);
          id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "groupIdentifier", v24));
          uint64_t v31 = v11;

          id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          __int128 v44 = 0u;
          __int128 v45 = 0u;
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v32 credentialShares]);
          id v15 = [v14 countByEnumeratingWithState:&v44 objects:v54 count:16];
          if (v15)
          {
            uint64_t v16 = *(void *)v45;
            if (v12) {
              int v17 = a4;
            }
            else {
              int v17 = 1;
            }
            do
            {
              for (id i = 0LL; i != v15; id i = (char *)i + 1)
              {
                if (*(void *)v45 != v16) {
                  objc_enumerationMutation(v14);
                }
                id v19 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
                if (v17 & ~PKShareStatusIsPending([v19 status]))
                {
                  v40[0] = _NSConcreteStackBlock;
                  v40[1] = 3221225472LL;
                  v40[2] = sub_10022B5E4;
                  v40[3] = &unk_1006423B8;
                  v40[4] = v19;
                  void v40[5] = a1;
                  id v41 = v8;
                  __int128 v43 = v52;
                  __int128 v42 = v13;
                  [v9 addOperation:v40];
                }

                else
                {
                  -[NSMutableSet addObject:](v13, "addObject:", v19);
                }
              }

              id v15 = [v14 countByEnumeratingWithState:&v44 objects:v54 count:16];
            }

            while (v15);
          }

          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472LL;
          void v37[2] = sub_10022B8D0;
          v37[3] = &unk_10063EC90;
          void v37[4] = v32;
          id v20 = v13;
          id v38 = v20;
          uint64_t v39 = v29;
          [v9 addOperation:v37];

          uint64_t v11 = v31 + 1;
        }

        while ((id)(v31 + 1) != v30);
        id v10 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
      }

      while (v10);
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_10022B96C;
    v33[3] = &unk_10063EDD0;
    id v35 = v24;
    uint64_t v22 = v29;
    __int128 v34 = v22;
    __int128 v36 = v52;
    id v23 = [v9 evaluateWithInput:v21 completion:v33];

    _Block_object_dispose(v52, 8);
  }
}

void sub_10022AC88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

void sub_10022ACC8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  id v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_10022ADA4;
    v13[3] = &unk_10064D9F0;
    id v16 = v7;
    id v11 = v6;
    uint64_t v12 = *(void *)(a1 + 32);
    id v14 = v11;
    uint64_t v15 = v12;
    sub_10022AE8C(v10, v9, v13);
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10022ADA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  if (v3)
  {
    id v4 = (void *)PDOSTransactionCreate("PDCarKeySharingManagementService");
    id v5 = PDDefaultQueue();
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10022AE78;
    block[3] = &unk_100639350;
    uint64_t v7 = *(void *)(a1 + 40);
    id v10 = v4;
    uint64_t v11 = v7;
    id v12 = v3;
    id v8 = v4;
    dispatch_async(v6, block);
  }
}

id sub_10022AE78(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 16) writeCard:*(void *)(a1 + 48) source:4 error:0];
}

void sub_10022AE8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(void **)(a1 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10022C210;
    v8[3] = &unk_100642728;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    [v7 performHandlerOnSharedWebServiceQueue:v8];
  }
}

void sub_10022AF34(void *a1)
{
  if (objc_msgSend( *(id *)(*(void *)(a1[5] + 8) + 40),  "pk_containsObjectPassingTest:",  &stru_10064DA30))
  {
    uint64_t v2 = PDBasicError(@"Unable to revoke all shares");
    id v6 = (id)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    id v6 = 0LL;
  }

  uint64_t v3 = a1[4];
  id v4 = [*(id *)(*(void *)(a1[5] + 8) + 40) copy];
  id v5 = [*(id *)(*(void *)(a1[6] + 8) + 40) copy];
  (*(void (**)(uint64_t, id, id, id))(v3 + 16))(v3, v4, v5, v6);
}

BOOL sub_10022AFE4(id a1, PKPassShare *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassShare credentialShares](a2, "credentialShares"));
  unsigned __int8 v3 = objc_msgSend(v2, "pk_containsObjectPassingTest:", &stru_10064DA70);

  return v3;
}

BOOL sub_10022B024(id a1, PKPassCredentialShare *a2)
{
  return PKShareStatusIsTerminal(-[PKPassCredentialShare status](a2, "status")) ^ 1;
}

void sub_10022B044(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialShares]);
  id v11 = [v10 countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v32;
    do
    {
      for (id i = 0LL; i != v12; id i = (char *)i + 1)
      {
        if (*(void *)v32 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
        else {
          id v16 = v8;
        }
        -[NSMutableSet addObject:](v16, "addObject:", v15);
      }

      id v12 = [v10 countByEnumeratingWithState:&v31 objects:v39 count:16];
    }

    while (v12);
  }

  if (-[NSMutableSet count](v9, "count"))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v36 = v19;
      __int16 v37 = 2112;
      id v38 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Share Identifier: '%@' rescinding pending invitations %@",  buf,  0x16u);
    }

    uint64_t v20 = *(void *)(a1 + 56);
    id v21 = *(void **)(*(void *)(a1 + 48) + 24LL);
    v24[0] = _NSConcreteStackBlock;
    v24[2] = sub_10022B2F4;
    v24[3] = &unk_10064DA98;
    uint64_t v22 = *(void *)(a1 + 72);
    id v23 = *(void **)(a1 + 40);
    void v24[4] = *(void *)(a1 + 32);
    uint64_t v30 = v22;
    v24[1] = 3221225472LL;
    id v25 = v23;
    id v26 = v8;
    id v27 = *(id *)(a1 + 64);
    id v29 = v7;
    id v28 = v6;
    [v21 rescindInvitations:v9 onCredential:v20 withCompletion:v24];
  }

  else
  {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_10022B2F4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      int v11 = 138412546;
      id v12 = v7;
      __int16 v13 = 2112;
      id v14 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Share Identifier: '%@' failed to revoke pending invitations with error %@",  (uint8_t *)&v11,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL), a2);
    id v8 = *(void **)(a1 + 40);
  }

  else
  {
    if ([*(id *)(a1 + 48) count])
    {
      id v9 = [*(id *)(a1 + 32) copy];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allObjects]);
      [v9 setCredentialShares:v10];

      [*(id *)(a1 + 40) addObject:v9];
      goto LABEL_8;
    }

    id v8 = *(void **)(a1 + 56);
  }

  [v8 addObject:*(void *)(a1 + 32)];
LABEL_8:
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10022B460(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 32) copy];
  id v3 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id, id, void))(v2 + 16))( v2,  v4,  v3,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
}

uint64_t sub_10022B4D0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(v3, 0LL, 0LL);
  }
}

void sub_10022B4F8(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    id v12 = *(void **)(a1 + 24);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_10022BE88;
    v13[3] = &unk_10064DB60;
    id v14 = v10;
    id v17 = v11;
    id v15 = v9;
    uint64_t v16 = a1;
    [v12 revokeSharesWithGroupIdentifiers:v15 shouldCascade:a3 credential:v14 completion:v13];
  }
}

void sub_10022B5E4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v24 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] revoking active credential share %@",  buf,  0xCu);
  }

  id v12 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_10022B740;
  v18[3] = &unk_10064DB38;
  uint64_t v13 = *(void *)(a1 + 64);
  void v18[4] = v12;
  uint64_t v22 = v13;
  id v14 = *(void **)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v20 = v6;
  id v21 = v7;
  id v19 = v15;
  id v16 = v6;
  id v17 = v7;
  sub_10022B7D0(v11, v12, v14, v18);
}

void sub_10022B740(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  id v6 = [*(id *)(a1 + 32) copy];
  if (a2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3);
    [v6 setStatus:6];
  }

  [*(id *)(a1 + 40) addObject:v6];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10022B7D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v7));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10022BAE8;
    v12[3] = &unk_10064DB60;
    id v13 = v8;
    id v16 = v9;
    id v14 = v7;
    uint64_t v15 = a1;
    [v10 revokeSharedCredentials:v11 onCredential:v13 withCompletion:v12];
  }
}

void sub_10022B8D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v10 = [v6 copy];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  [v10 setCredentialShares:v9];

  [*(id *)(a1 + 48) addObject:v10];
  v7[2](v7, v8, 0LL);
}

uint64_t sub_10022B96C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_10022BAE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v9)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      *(_DWORD *)__int128 buf = 138412546;
      id v21 = v15;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Failed to create revocation attestation for credential share on credential %@: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    if (v9)
    {
      id v10 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      id v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Successfully created revocation attestation for credential: %@",  buf,  0xCu);
    }

    id v11 = [[PKPaymentRevokeSharedCredentialRequest alloc] initWithCredential:*(void *)(a1 + 32) revocationAttestation:v5];
    id v12 = *(void **)(a1 + 56);
    id v13 = *(void **)(*(void *)(a1 + 48) + 8LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10022BCD0;
    v16[3] = &unk_100642728;
    id v17 = v11;
    id v19 = v12;
    id v18 = *(id *)(a1 + 40);
    id v14 = v11;
    [v13 performHandlerOnSharedWebServiceQueue:v16];
  }
}

void sub_10022BCD0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_10022BD68;
  v5[3] = &unk_100641CA8;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [a2 revokeSharedCredentialWithRequest:v4 withCompletion:v5];
}

void sub_10022BD68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      int v12 = 138412546;
      id v13 = v11;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Failed to revoke shared credential (%@): %@",  (uint8_t *)&v12,  0x16u);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v8();
}

void sub_10022BE88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v9)
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      *(_DWORD *)__int128 buf = 138412546;
      id v21 = v15;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Failed to create revocation attestation for credential share on credential %@. Error: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    if (v9)
    {
      id v10 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      id v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Successfully created revocation attestation for group identifiers: %@",  buf,  0xCu);
    }

    id v11 = [[PKPaymentRevokeSharedCredentialRequest alloc] initWithCredential:*(void *)(a1 + 32) revocationAttestation:v5];
    int v12 = *(void **)(a1 + 56);
    id v13 = *(void **)(*(void *)(a1 + 48) + 8LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10022C070;
    v16[3] = &unk_100642728;
    id v17 = v11;
    id v19 = v12;
    id v18 = *(id *)(a1 + 40);
    id v14 = v11;
    [v13 performHandlerOnSharedWebServiceQueue:v16];
  }
}

void sub_10022C070(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_10022C108;
  v5[3] = &unk_100641CA8;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [a2 revokeSharedCredentialWithRequest:v4 withCompletion:v5];
}

void sub_10022C108(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: [Revoke] Failed to revoke credentials for group identifiers (%@). Error: %@",  (uint8_t *)&v12,  0x16u);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v8();
}

void sub_10022C210(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10022C298;
  v6[3] = &unk_10064DBB0;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 passAtURL:v4 completion:v6];
}

void sub_10022C298(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2 == 1 && v5)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___PKDownloadRemoteAssetConfiguration);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PKSecureElement secureElementIdentifiers]( &OBJC_CLASS___PKSecureElement,  "secureElementIdentifiers"));
    [v7 setSeids:v8];

    [v7 setCloudStoreCoordinatorDelegate:*(void *)(*(void *)(a1 + 32) + 32)];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_10022C3FC;
    v13[3] = &unk_10064DB88;
    id v15 = *(id *)(a1 + 40);
    id v14 = v6;
    [v14 downloadRemoteAssetsWithConfiguration:v7 completion:v13];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: failed to download pass after share revocation",  buf,  2u);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = PDBasicError(@"Failed to download pass after share revocation");
    id v7 = (id)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v7);
  }
}

void sub_10022C3FC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    if (v5)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138412290;
        id v10 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: failed to download pass assets after share revocation with error: %@",  (uint8_t *)&v9,  0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id PDWebServiceError( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a3;
  id v12 = a2;
  uint64_t v13 = -[NSString initWithFormat:arguments:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:arguments:", v11, &a9);

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 passTypeIdentifier]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v12 serviceURL]);

  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Web service error for %@ (%@): %@",  v14,  v15,  v13));
  NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
  id v21 = v16;
  id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDWebServiceErrorDomain",  a1,  v17));

  return v18;
}

NSString *__cdecl sub_10022D19C(id a1, PKCreditAccountUserActivity *a2)
{
  return (NSString *)-[PKCreditAccountUserActivity accountUserAltDSID](a2, "accountUserAltDSID");
}

void sub_10022D51C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10022D724(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKCreditAccountUserActivity);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_10022DA60(id a1, PKCreditAccountUserActivity *a2, id a3)
{
}

void sub_10022DA68(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountUserActivity setPurchases:](v4, "setPurchases:", v6);
}

void sub_10022DAB8(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountUserActivity setPendingPurchases:](v4, "setPendingPurchases:", v6);
}

void sub_10022DB08(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountUserActivity setRewardsBalance:](v4, "setRewardsBalance:", v6);
}

void sub_10022DB58(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountUserActivity setRewardsEarned:](v4, "setRewardsEarned:", v6);
}

void sub_10022DBA8(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountUserActivity setRewardsRedeemed:](v4, "setRewardsRedeemed:", v6);
}

void sub_10022DBF8(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditAccountUserActivity setAdjustedPurchases:](v4, "setAdjustedPurchases:", v6);
}

void sub_10022DDF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10022DE10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10022DE20(uint64_t a1)
{
}

uint64_t sub_10022DE28(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithMetadata:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (v2
    && ([*(id *)(a1 + 32) type] != (id)1
     || (uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadataTypeVehicleFunction]),
         uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[TileStateMetadataRKE insertMetadata:forBaseMetadata:inDatabase:]( &OBJC_CLASS___TileStateMetadataRKE,  "insertMetadata:forBaseMetadata:inDatabase:",  v3,  v2,  *(void *)(a1 + 40))),  v3,  v4,  v4)))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v2);
    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

uint64_t sub_10022E0B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10022E188(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v3 = 1LL;
  }
  else {
    uint64_t v3 = 2LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void sub_10022E26C(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v2 = *(void **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10022E324;
    v6[3] = &unk_10064DD20;
    uint64_t v4 = *(void *)(a1 + 48);
    id v7 = *(id *)(a1 + 56);
    id v5 = v3;
    [v2 _longTermPrivacyKeyForRequirement:v5 context:v4 reuseExisting:1 completion:v6];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

uint64_t sub_10022E324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10022E44C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5 && !v6)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    [v8 setPublicKey:v5];
    id v9 = objc_alloc(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterial);
    id v14 = v8;
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
    id v11 = [v9 initWithKeyMaterialContents:v10];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
LABEL_7:

    goto LABEL_8;
  }

  uint64_t v12 = *(void *)(a1 + 32);
  if (!v6)
  {
    uint64_t v13 = PDBasicError(@"Unable to generate synced KML key");
    id v8 = (id)objc_claimAutoreleasedReturnValue(v13);
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0LL, v8);
    goto LABEL_7;
  }

  (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0LL, v6);
LABEL_8:
}

uint64_t sub_10022E8D8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

uint64_t sub_10022E9B8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
    if (v5 && v6) {
      uint64_t v8 = [v5 isEqualToString:v6] ^ 1;
    }
  }

  return v8;
}

id *sub_10022EFE0(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_10022F4DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_10022F4FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10022F50C(uint64_t a1)
{
}

void sub_10022F514(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

  if (v4 == v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0LL;
  }

void sub_10022F968(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10022FCD0(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKInstallmentPlanSummary setStartDate:](v4, "setStartDate:", v5);
}

void sub_10022FD1C(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKInstallmentPlanSummary setOriginalEndDate:](v4, "setOriginalEndDate:", v5);
}

void sub_10022FD68(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKInstallmentPlanSummary setCurrentEndDate:](v4, "setCurrentEndDate:", v5);
}

void sub_10022FDB4(id a1, PKInstallmentPlanSummary *a2, id a3)
{
}

void sub_10022FDBC(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKInstallmentPlanSummary setMinimumDue:](v4, "setMinimumDue:", v6);
}

void sub_10022FE0C(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKInstallmentPlanSummary setMinimumDueDate:](v4, "setMinimumDueDate:", v5);
}

void sub_10022FE58(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKInstallmentPlanSummary setInterestCharged:](v4, "setInterestCharged:", v6);
}

void sub_10022FEA8(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKInstallmentPlanSummary setPaymentsToDateAmount:](v4, "setPaymentsToDateAmount:", v6);
}

void sub_100230238(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_100230290(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_100230390(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notification]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) actionIdentifier]);
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 138412290;
    id v23 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter didReceiveNotificationResponse for notification %@",  (uint8_t *)&v22,  0xCu);
  }

  uint64_t v6 = PKUserNotificationActionFromUNNotificationActionIdentifier(v3);
  if (+[AMSUserNotification shouldHandleNotificationResponse:]( &OBJC_CLASS___AMSUserNotification,  "shouldHandleNotificationResponse:",  *(void *)(a1 + 32)))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMediaTask bagSubProfile](&OBJC_CLASS___AMSMediaTask, "bagSubProfile"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMediaTask bagSubProfileVersion](&OBJC_CLASS___AMSMediaTask, "bagSubProfileVersion"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[AMSBag bagForProfile:profileVersion:]( &OBJC_CLASS___AMSBag,  "bagForProfile:profileVersion:",  v7,  v8));

    id v10 =  +[AMSUserNotification handleNotificationResponse:bag:]( &OBJC_CLASS___AMSUserNotification,  "handleNotificationResponse:bag:",  *(void *)(a1 + 32),  v9);
  }

  else
  {
    if ([v3 isEqualToString:UNNotificationDismissActionIdentifier])
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v2 request]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);

      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 40) objectForKeyedSubscript:v12]);
      if ([v13 notificationType] == (id)27)
      {
        id v14 = v13;
        id v15 = (void *)objc_claimAutoreleasedReturnValue(+[PKDiscoveryService sharedInstance](&OBJC_CLASS___PKDiscoveryService, "sharedInstance"));
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 discoveryNotification]);

        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 discoveryCardIdentifier]);
        [v15 discoveryItemWithIdentifier:v17 launchedWithReferralSource:0];
      }

      if ([v13 isActive])
      {
        [v13 setActive:0];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
        [WeakRetained userNotificationCenter:*(void *)(a1 + 40) insertedOrUpdatedUserNotification:v13];
      }
    }

    id v19 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v2 request]);
    NSErrorUserInfoKey v20 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
    objc_msgSend(v19, "_queue_userNotificationActionPerformed:applicationMessageContentIdentifier:", v6, v20);
  }

  uint64_t v21 = *(void *)(a1 + 48);
  if (v21) {
    (*(void (**)(void))(v21 + 16))();
  }
}

void sub_1002308E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 80);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100230968;
  v7[3] = &unk_1006392B0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100230968(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 32) authorizationStatus];
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v5 = (uint64_t)*(&off_10064E1A8 + (void)v2);
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter: Notification Authorization status: %@",  buf,  0xCu);
  }

  if ((unint64_t)(v2 - 1) >= 4)
  {
    if (!v2)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = *(void **)(v6 + 8);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      void v8[2] = sub_100230AA8;
      v8[3] = &unk_10063AFC0;
      void v8[4] = v6;
      [v7 requestAuthorizationWithOptions:71 completionHandler:v8];
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 40) + 64LL) = 1;
    [*(id *)(a1 + 40) _processConnectionOperations];
  }

void sub_100230AA8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(dispatch_queue_s **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100230B30;
  block[3] = &unk_10063B300;
  char v12 = a2;
  id v10 = v5;
  uint64_t v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

id sub_100230B30(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(_BYTE *)(a1 + 48)) {
      id v5 = @"YES";
    }
    else {
      id v5 = @"NO";
    }
    int v7 = 138412546;
    id v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Provisional Notification Authorization status granted: %@ error: %@",  (uint8_t *)&v7,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1 + 40) + 64LL) = 1;
  return [*(id *)(a1 + 40) _processConnectionOperations];
}

void sub_100230C14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 80);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100230C94;
  v7[3] = &unk_1006392B0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100230C94(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 32) authorizationStatus];
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v5 = (uint64_t)*(&off_10064E1A8 + (void)v2);
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter: Service Notification Authorization status: %@",  buf,  0xCu);
  }

  if ((unint64_t)(v2 - 1) >= 4)
  {
    if (!v2)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = *(void **)(v6 + 16);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      void v8[2] = sub_100230DD4;
      v8[3] = &unk_10063AFC0;
      void v8[4] = v6;
      [v7 requestAuthorizationWithOptions:6 completionHandler:v8];
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 40) + 65LL) = 1;
    [*(id *)(a1 + 40) _processServiceConnectionOperations];
  }

void sub_100230DD4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(dispatch_queue_s **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100230E5C;
  block[3] = &unk_10063B300;
  char v12 = a2;
  id v10 = v5;
  uint64_t v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

id sub_100230E5C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(_BYTE *)(a1 + 48)) {
      id v5 = @"YES";
    }
    else {
      id v5 = @"NO";
    }
    int v7 = 138412546;
    id v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Service Notification Authorization status granted: %@ error: %@",  (uint8_t *)&v7,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1 + 40) + 65LL) = 1;
  return [*(id *)(a1 + 40) _processServiceConnectionOperations];
}

void sub_1002310B4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationIdentifier]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:"));

  if (v2) {
    [*(id *)(*(void *)(a1 + 40) + 40) setObject:*(void *)(a1 + 32) forKeyedSubscript:v3];
  }
}

void sub_1002311F0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 40);
  int v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 80LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100231294;
  block[3] = &unk_100644C20;
  char v12 = a2;
  id v10 = v5;
  id v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100231294(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(_BYTE *)(a1 + 48)) {
      id v5 = @"YES";
    }
    else {
      id v5 = @"NO";
    }
    int v7 = 138412546;
    id v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter: requestAuthorizationWithOptions success: %@ error: %@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
  }
  return result;
}

id sub_100231408(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_userNotificationActionPerformed:applicationMessageContentIdentifier:",  *(void *)(a1 + 48),  *(void *)(a1 + 40));
}

void sub_1002315F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v3 authorizationStatus];
    else {
      uint64_t v7 = (uint64_t)*(&off_10064E1A8 + (void)v6);
    }
    int v12 = 138412290;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter: Notification Authorization status: %@",  (uint8_t *)&v12,  0xCu);
  }

  switch((unint64_t)[v3 authorizationStatus])
  {
    case 0uLL:
    case 3uLL:
    case 4uLL:
      if (![*(id *)(*(void *)(a1 + 32) + 96) countPassesOfType:-1])
      {
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_14;
        }
        LOWORD(v12) = 0;
        id v8 = "Notification Authorization not required as user has no passes";
        goto LABEL_13;
      }

      [*(id *)(a1 + 32) requestNotificationAuthorizationWithCompletion:*(void *)(a1 + 40)];
      break;
    case 1uLL:
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12) = 0;
        id v8 = "Notification Authorization already denied";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, 2u);
      }

BOOL sub_100231908(id a1, PDUserNotification *a2)
{
  return !-[PDUserNotification isServiceNotification](a2, "isServiceNotification");
}

BOOL sub_100231A44(id a1, PDUserNotification *a2)
{
  return -[PDUserNotification isServiceNotification](a2, "isServiceNotification");
}

void sub_100231AD4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isActive == YES AND isSuppressed == YES AND suppressionBehavior == %ul",  1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) allValues]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 filteredArrayUsingPredicate:v2]);

  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      int v22 = v4;
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updating Suppressed User Notifications: %@ in Notification Center: %@",  buf,  0x16u);
    }

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v8 = v4;
    id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v17;
      do
      {
        for (id i = 0LL; i != v10; id i = (char *)i + 1)
        {
          if (*(void *)v17 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 notificationIdentifier]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) objectForKeyedSubscript:v14]);
          [*(id *)(a1 + 32) _updateUserNotification:v13 withExistingNotification:v15 shouldSuppress:0];
        }

        id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v10);
    }
  }
}

void sub_100231F04(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationIdentifier]);
  id v3 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 40) objectForKeyedSubscript:v2]);
  uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) objectForKeyedSubscript:v2]);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
  unsigned int v34 = [WeakRetained userNotificationCenterShouldSuppressUserNotifications:*(void *)(a1 + 40)];

  id v35 = v3;
  if (-[__CFString isActive](v3, "isActive"))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v44 = v3;
      __int16 v45 = 2112;
      __int128 v46 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Update an existing user notification: %@ with a new user notification: %@",  buf,  0x16u);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    int v12 = v3;
LABEL_10:
    [v10 _updateUserNotification:v11 withExistingNotification:v12 shouldSuppress:v34];
    goto LABEL_38;
  }

  if (v4 && -[__CFString isActive](v4, "isActive"))
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(0LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v44 = v4;
      __int16 v45 = 2112;
      __int128 v46 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "There is already an inflight notification %@ for a new notification %@",  buf,  0x16u);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    int v12 = v4;
    goto LABEL_10;
  }

  if (!objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v6), "supportsCoalescing"))
  {
LABEL_37:
    [*(id *)(a1 + 40) _addUserNotification:*(void *)(a1 + 32) shouldSuppress:v34];
    goto LABEL_38;
  }

  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _activeUserNotificationsSortedByDateAscending:1]);
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v17 = [v16 countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (!v17)
  {

    goto LABEL_37;
  }

  id v19 = v17;
  __int128 v32 = v4;
  __int128 v33 = v2;
  uint64_t v20 = *(void *)v38;
  unsigned __int8 v36 = 1;
  do
  {
    for (id i = 0LL; i != v19; id i = (char *)i + 1)
    {
      if (*(void *)v38 != v20) {
        objc_enumerationMutation(v16);
      }
      int v22 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)i);
      if (objc_msgSend((id)objc_opt_class(v22, v18), "supportsCoalescing"))
      {
        uint64_t v23 = PKLogFacilityTypeGetObject(0LL);
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = *(const __CFString **)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412546;
          __int128 v44 = v25;
          __int16 v45 = 2112;
          __int128 v46 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Attempting to coalesce User Notification: %@ with existing Notification Center: %@",  buf,  0x16u);
        }

        id v26 = (char *)[*(id *)(a1 + 32) coalesceWithExistingUserNotification:v22];
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = @"unknown";
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v44 = v27;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Coalescing result: %@", buf, 0xCu);
        }

        if ((unint64_t)(v26 - 1) <= 1)
        {
          unsigned int v28 = [v22 isValid];
          id v29 = *(void **)(a1 + 40);
          if (v28)
          {
            [*(id *)(a1 + 40) _updateUserNotification:v22 withExistingNotification:v35 shouldSuppress:v34];
          }

          else
          {
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v22 notificationIdentifier]);
            id v41 = v30;
            __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v41,  1LL));
            [v29 _removeUserNotificationsWithIdentifiers:v31];
          }

          if (v26 == (char *)2)
          {
            unsigned __int8 v36 = 0;
          }

          else if (v26 == (char *)1)
          {
            unsigned __int8 v36 = [*(id *)(a1 + 32) isValid];
          }
        }
      }
    }

    id v19 = [v16 countByEnumeratingWithState:&v37 objects:v42 count:16];
  }

  while (v19);

  uint64_t v4 = v32;
  uint64_t v2 = v33;
  if ((v36 & 1) != 0) {
    goto LABEL_37;
  }
LABEL_38:
}

NSString *__cdecl sub_100232480(id a1, PKExpressPassConfiguration *a2)
{
  return (NSString *)-[PKExpressPassConfiguration passUniqueIdentifier](a2, "passUniqueIdentifier");
}

NSString *__cdecl sub_100232488(id a1, PDUserNotification *a2)
{
  return -[PDUserNotification notificationIdentifier](a2, "notificationIdentifier");
}

NSString *__cdecl sub_100232720(id a1, PDUserNotification *a2)
{
  return -[PDUserNotification notificationIdentifier](a2, "notificationIdentifier");
}

NSString *__cdecl sub_100232890(id a1, PDUserNotification *a2)
{
  return -[PDUserNotification notificationIdentifier](a2, "notificationIdentifier");
}

NSString *__cdecl sub_1002329D4(id a1, PDUserNotification *a2)
{
  return -[PDUserNotification notificationIdentifier](a2, "notificationIdentifier");
}

void sub_100232B30(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) allValues]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100232BC4;
  v4[3] = &unk_10064E090;
  void v4[4] = a1[6];
  id v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pk_objectsPassingTest:", v4));

  (*(void (**)(void))(a1[5] + 16LL))();
}

BOOL sub_100232BC4(uint64_t a1, void *a2)
{
  return [a2 notificationType] == *(id *)(a1 + 32);
}

void sub_100232CA0(void *a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"passUniqueIdentifier == %@ AND notificationType == %ul",  a1[4],  a1[7]));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 40) allValues]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 filteredArrayUsingPredicate:v4]);

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100232DDC(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]]);
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100232EC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3
    && [v3 authorizationStatus] == (id)2
    && ![v4 alertStyle]
    && [v4 notificationCenterSetting] != (id)2)
  {
    [v4 lockScreenSetting];
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100233C7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100233CA8(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained[10];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100233D6C;
    v7[3] = &unk_10063B060;
    void v7[4] = WeakRetained;
    id v8 = a1[4];
    id v9 = v3;
    id v10 = a1[5];
    dispatch_async(v6, v7);
  }
}

void sub_100233D6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter: failed to add notification request with error: %@",  buf,  0xCu);
    }
  }

  else
  {
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 40)];
    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _activeUserNotificationsSortedByDateAscending:0]);
    if ((unint64_t)[v8 count] >= 0xB)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "subarrayWithRange:", 10, (char *)objc_msgSend(v8, "count") - 10));
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pk_arrayByApplyingBlock:", &stru_10064E0D8));

      [*(id *)(a1 + 32) _removeUserNotificationsWithIdentifiers:v6];
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    [WeakRetained userNotificationCenter:*(void *)(a1 + 32) insertedOrUpdatedUserNotification:*(void *)(a1 + 56)];
  }

NSString *__cdecl sub_100233EF4(id a1, PDUserNotification *a2)
{
  return -[PDUserNotification notificationIdentifier](a2, "notificationIdentifier");
}

void sub_10023415C(_Unwind_Exception *a1)
{
}

void sub_100234190(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138412290;
        id v10 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationCenter: failed to update notification request with error: %@",  (uint8_t *)&v9,  0xCu);
      }
    }

    else
    {
      [WeakRetained[5] setObject:*(void *)(a1 + 40) forKeyedSubscript:*(void *)(a1 + 32)];
      id v8 = objc_loadWeakRetained(v5 + 9);
      [v8 userNotificationCenter:v5 insertedOrUpdatedUserNotification:*(void *)(a1 + 40)];
    }
  }
}

void sub_10023428C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (!a2 && WeakRetained)
  {
    uint64_t v6 = WeakRetained;
    [WeakRetained[5] setObject:*(void *)(a1 + 40) forKeyedSubscript:*(void *)(a1 + 32)];
    id v5 = objc_loadWeakRetained(v6 + 9);
    [v5 userNotificationCenter:v6 insertedOrUpdatedUserNotification:*(void *)(a1 + 40)];

    id WeakRetained = v6;
  }
}

void sub_100234644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

uint64_t sub_100234680(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100234690(uint64_t a1)
{
}

void sub_100234698(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  if (v3 >= (unint64_t)[*(id *)(a1 + 32) count])
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(dispatch_queue_s **)(v4 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100234764;
    block[3] = &unk_100646CD0;
    void block[4] = v4;
    __int128 v7 = *(_OWORD *)(a1 + 48);
    id v6 = (id)v7;
    __int128 v9 = v7;
    dispatch_async(v5, block);
  }

void sub_100234764(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1[6] + 8) + 40), "pk_arrayByApplyingBlock:", &stru_10064E140));
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v2));

  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 40), "allKeys", 0));
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)i);
        if (([v3 containsObject:v9] & 1) == 0)
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) objectForKeyedSubscript:v9]);
          [v10 setActive:0];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }

  uint64_t v11 = a1[5];
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

NSString *__cdecl sub_1002348E4(id a1, UNNotification *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[UNNotification request](a2, "request"));
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);

  return (NSString *)v3;
}

uint64_t sub_100234920(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1002349FC(uint64_t a1, void *a2, void *a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 date]);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 date]);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 date]);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 date]);
  }

  id v10 = [v8 compare:v9];

  return v10;
}

id sub_100235100(uint64_t a1, uint64_t a2)
{
  return +[PassShareTimeConfiguration deletePassShareTimeConfigurationsForPassSharedEntitlementPID:inDatabase:]( &OBJC_CLASS___PassShareTimeConfiguration,  "deletePassShareTimeConfigurationsForPassSharedEntitlementPID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

void sub_100235240(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init(&OBJC_CLASS___PKPassSharedEntitlement);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[PassShareTimeConfiguration passShareTimeConfigurationsForPassSharedEntitlementPID:inDatabase:]( &OBJC_CLASS___PassShareTimeConfiguration,  "passShareTimeConfigurationsForPassSharedEntitlementPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);

  -[PKPassSharedEntitlement setTimeConfiguration:](v10, "setTimeConfiguration:", v9);
  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_100235444(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10023573C(id a1, PKPassSharedEntitlement *a2, id a3)
{
}

void sub_100235744(id a1, PKPassSharedEntitlement *a2, id a3)
{
  int v4 = a2;
  -[PKPassSharedEntitlement setRecipientShareability:]( v4,  "setRecipientShareability:",  PKSharingCapabilityShareabilityFromString(a3));
}

void sub_100235788(id a1, PKPassSharedEntitlement *a2, id a3)
{
  int v4 = a2;
  -[PKPassSharedEntitlement setRecipientVisibility:]( v4,  "setRecipientVisibility:",  PKSharingCapabilityVisibilityFromString(a3));
}

void sub_1002357CC(id a1, PKPassSharedEntitlement *a2, id a3)
{
  int v4 = a2;
  -[PKPassSharedEntitlement setRecipientManageability:]( v4,  "setRecipientManageability:",  PKSharingCapabilityManageabilityFromString(a3));
}

void sub_100235810(id a1, PKPassSharedEntitlement *a2, id a3)
{
}

void sub_100235818(id a1, PKPassSharedEntitlement *a2, id a3)
{
  int v4 = a2;
  -[PKPassSharedEntitlement setCreationVersion:](v4, "setCreationVersion:", [a3 integerValue]);
}

void sub_100235CAC(uint64_t a1, uint64_t a2)
{
  int v4 = objc_alloc(&OBJC_CLASS___AccountTaxForm);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[AccountTaxForm taxForm](v8, "taxForm"));
  [v6 addObject:v7];
}

void sub_1002361A8(id a1, PKAccountTaxForm *a2, id a3)
{
}

void sub_1002361B0(id a1, PKAccountTaxForm *a2, id a3)
{
  int v4 = a2;
  -[PKAccountTaxForm setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002361F4(id a1, PKAccountTaxForm *a2, id a3)
{
  int v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountTaxForm setOpeningDate:](v4, "setOpeningDate:", v5);
}

void sub_100236240(id a1, PKAccountTaxForm *a2, id a3)
{
  int v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountTaxForm setClosingDate:](v4, "setClosingDate:", v5);
}

id sub_100236368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___AccountTaxForm,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void PDSetDoubleClickAllowed()
{
}

void sub_10023648C()
{
  if ((byte_100707AAC & 1) == 0)
  {
    byte_100707AAC = 1;
    uint64_t v1 = PDPreferencesDomain_ClassD;
    _CFPreferencesSetBackupDisabled( PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
    uint64_t v0 = _CFPreferencesSetFileProtectionClass(v1, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
  }

  CFPropertyListRef v2 = CFPreferencesCopyValue( @"contactless-interface-available",  PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (!v2) {
    goto LABEL_11;
  }
  unint64_t v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 != CFBooleanGetTypeID())
  {
    CFRelease(v3);
LABEL_11:
    uint64_t v6 = &kCFBooleanFalse;
    goto LABEL_12;
  }

  int Value = CFBooleanGetValue((CFBooleanRef)v3);
  CFRelease(v3);
  uint64_t v6 = &kCFBooleanTrue;
  if (!Value) {
    uint64_t v6 = &kCFBooleanFalse;
  }
LABEL_12:
  CFBooleanRef v7 = *v6;
  id v8 = (const __CFString *)PDPreferenceKey_PreArmAvailable;
  if ((byte_100707AAC & 1) == 0)
  {
    byte_100707AAC = 1;
    uint64_t v9 = PDPreferencesDomain_ClassD;
    _CFPreferencesSetBackupDisabled( PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
    _CFPreferencesSetFileProtectionClass(v9, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
  }

  if (v8)
  {
    CFPreferencesSetValue(v8, v7, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    os_unfair_lock_unlock(&stru_100707AA8);
  }

  else
  {
    __break(1u);
  }

void PDPassStateSet(int a1)
{
  if (byte_100707AAC == 1)
  {
    CFPropertyListRef v2 = (const __CFString *)PDPreferenceKey_SecureElementPassesAvailable;
    BOOL v3 = (a1 & 1) == 0LL;
    CFBooleanRef v4 = kCFBooleanTrue;
    CFBooleanRef v5 = kCFBooleanFalse;
    if ((a1 & 1) != 0) {
      CFBooleanRef v6 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v6 = kCFBooleanFalse;
    }
  }

  else
  {
    byte_100707AAC = 1;
    uint64_t v7 = PDPreferencesDomain_ClassD;
    _CFPreferencesSetBackupDisabled( PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
    _CFPreferencesSetFileProtectionClass(v7, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
    CFPropertyListRef v2 = (const __CFString *)PDPreferenceKey_SecureElementPassesAvailable;
    BOOL v3 = (a1 & 1) == 0LL;
    CFBooleanRef v4 = kCFBooleanTrue;
    CFBooleanRef v5 = kCFBooleanFalse;
    if ((a1 & 1) != 0) {
      CFBooleanRef v6 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v6 = kCFBooleanFalse;
    }
    if ((byte_100707AAC & 1) == 0)
    {
      byte_100707AAC = 1;
      _CFPreferencesSetBackupDisabled(v7, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 1LL);
      _CFPreferencesSetFileProtectionClass(v7, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
    }
  }

  if (v2)
  {
    id v8 = (const __CFString *)PDPreferencesDomain_ClassD;
    CFPreferencesSetValue(v2, v6, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    if ((byte_100707AAC & 1) == 0)
    {
      byte_100707AAC = 1;
      _CFPreferencesSetBackupDisabled(v8, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 1LL);
      _CFPreferencesSetFileProtectionClass(v8, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
    }

    char v9 = (a1 & 0x100) == 0 || v3;
    int v10 = v9 & ((*(void *)&a1 & 0x10000LL) == 0);
    if (v10) {
      CFBooleanRef v11 = v5;
    }
    else {
      CFBooleanRef v11 = v4;
    }
    uint64_t v12 = v10 ^ 1u;
    CFPreferencesSetValue( @"contactless-interface-available",  v11,  v8,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
    os_unfair_lock_unlock(&stru_100707AA8);
    sub_10023648C();
    sub_100236860();
    PDSetContactlessPassesAvailable(v12);
  }

  else
  {
    __break(1u);
  }

void sub_100236860()
{
  if ((byte_100707AAC & 1) == 0)
  {
    byte_100707AAC = 1;
    uint64_t v1 = PDPreferencesDomain_ClassD;
    _CFPreferencesSetBackupDisabled( PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
    uint64_t v0 = _CFPreferencesSetFileProtectionClass(v1, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
  }

  CFPropertyListRef v2 = (const __CFString *)PDPreferencesDomain_ClassD;
  BOOL v3 = (const __CFBoolean *)CFPreferencesCopyValue( @"contactless-interface-available",  PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (v3)
  {
    CFBooleanRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(v4);
      CFRelease(v4);
      if (Value)
      {
        BOOL v7 = 1;
        goto LABEL_15;
      }
    }

    else
    {
      CFRelease(v4);
    }
  }

  id v8 = (const __CFBoolean *)CFPreferencesCopyValue( @"car-pairing-available",  v2,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (v8)
  {
    char v9 = v8;
    CFTypeID v10 = CFGetTypeID(v8);
    BOOL v7 = v10 == CFBooleanGetTypeID() && CFBooleanGetValue(v9) != 0;
    CFRelease(v9);
  }

  else
  {
LABEL_12:
    BOOL v7 = 0;
  }

void PDCarPairingStateSet(char a1)
{
  if (byte_100707AAC == 1)
  {
    CFPropertyListRef v2 = &kCFBooleanTrue;
    if ((a1 & 1) == 0) {
      CFPropertyListRef v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v3 = *v2;
    CFBooleanRef v4 = (const __CFString *)PDPreferencesDomain_ClassD;
    CFTypeID v5 = kCFPreferencesCurrentUser;
    CFBooleanRef v6 = kCFPreferencesAnyHost;
  }

  else
  {
    byte_100707AAC = 1;
    CFBooleanRef v4 = (const __CFString *)PDPreferencesDomain_ClassD;
    CFTypeID v5 = kCFPreferencesCurrentUser;
    CFBooleanRef v6 = kCFPreferencesAnyHost;
    _CFPreferencesSetBackupDisabled( PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
    _CFPreferencesSetFileProtectionClass(v4, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
    BOOL v7 = &kCFBooleanTrue;
    if ((a1 & 1) == 0) {
      BOOL v7 = &kCFBooleanFalse;
    }
    CFBooleanRef v3 = *v7;
    if ((byte_100707AAC & 1) == 0)
    {
      byte_100707AAC = 1;
      _CFPreferencesSetBackupDisabled(v4, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 1LL);
      _CFPreferencesSetFileProtectionClass(v4, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
    }
  }

  CFPreferencesSetValue(@"car-pairing-available", v3, v4, v5, v6);
  os_unfair_lock_unlock(&stru_100707AA8);
  sub_100236860();
}

BOOL PDContactlessInterfaceAvailable()
{
  uint64_t v0 = (const __CFBoolean *)CFPreferencesCopyValue( @"contactless-interface-available",  PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
    CFRelease(v1);
  }

  else
  {
    BOOL v3 = 0LL;
  }

  os_unfair_lock_unlock(&stru_100707AA8);
  return v3;
}

uint64_t PDFieldDetectAvailable()
{
  uint64_t result = PDPreferenceKey_FieldDetectAvailable;
  if (PDPreferenceKey_FieldDetectAvailable)
  {
    uint64_t v1 = (const __CFBoolean *)CFPreferencesCopyValue( PDPreferenceKey_FieldDetectAvailable,  PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
    if (v1)
    {
      CFTypeID v2 = v1;
      CFTypeID v3 = CFGetTypeID(v1);
      BOOL v4 = v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2) != 0;
      CFRelease(v2);
    }

    else
    {
      BOOL v4 = 0LL;
    }

    os_unfair_lock_unlock(&stru_100707AA8);
    return v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1002374E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc(&OBJC_CLASS___AccountStatementMetadataItem);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v20 = -[SQLiteEntity initWithPersistentID:inDatabase:](v8, "initWithPersistentID:inDatabase:", a2, v9);

  CFTypeID v10 = objc_alloc_init(&OBJC_CLASS___PKAccountStatementMetadataItem);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v10 withProperties:v7 values:a4];

  id v11 = -[AccountStatementMetadataItem type](v20, "type");
  if (v11 == (id)2)
  {
    CFBooleanRef v13 = (void *)objc_claimAutoreleasedReturnValue(-[AccountStatementMetadataItem identifier](v20, "identifier"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent accountEventWithIdentifier:inDatabase:]( &OBJC_CLASS___AccountEvent,  "accountEventWithIdentifier:inDatabase:",  v13,  v18));

    if (v19) {
      uint64_t v17 = 1LL;
    }
    else {
      uint64_t v17 = 2LL;
    }
  }

  else
  {
    if (v11 != (id)1)
    {
      uint64_t v17 = 0LL;
      goto LABEL_12;
    }

    uint64_t v12 = PKPaymentTransactionAccountTypeFromAccountType(-[AccountStatementMetadataItem accountType](v20, "accountType"));
    CFBooleanRef v13 = (void *)objc_claimAutoreleasedReturnValue(-[AccountStatementMetadataItem accountIdentifier](v20, "accountIdentifier"));
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(-[AccountStatementMetadataItem identifier](v20, "identifier"));
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withServiceIdentifier:accountIdentifier:accountType:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withServiceIdentifier:accountIdentifier:accountType:",  v15,  v14,  v13,  v12));

    if (v16) {
      uint64_t v17 = 1LL;
    }
    else {
      uint64_t v17 = 2LL;
    }
  }

LABEL_12:
  -[PKAccountStatementMetadataItem setStatus:](v10, "setStatus:", v17);
  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_1002377F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100237818(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, _BYTE *a5)
{
  id result = [*a3 BOOLValue];
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a5 = 1;
  }

  return result;
}

uint64_t sub_100237930(uint64_t a1)
{
  CFTypeID v2 = *(void **)(a1 + 32);
  CFTypeID v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  BOOL v4 = (void *)_SQLValueForDate(v3);
  [v2 setValue:v4 forProperty:@"last_processed_date"];

  CFTypeID v5 = *(void **)(a1 + 32);
  CFBooleanRef v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  [v5 setValue:v6 forProperty:@"has_been_processed"];

  id v7 = *(void **)(a1 + 32);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  [v7 setValue:v8 forProperty:@"error"];

  char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:@"processed_attempt_count"]);
  CFTypeID v10 = v9;
  if (v9) {
    id v11 = v9;
  }
  else {
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
  }
  uint64_t v12 = v11;

  CFBooleanRef v13 = *(void **)(a1 + 32);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)[v12 integerValue] + 1));
  [v13 setValue:v14 forProperty:@"processed_attempt_count"];

  return 1LL;
}

uint64_t sub_100237B08(uint64_t a1)
{
  CFTypeID v2 = *(void **)(a1 + 32);
  CFTypeID v3 = (void *)_SQLValueForDate(*(void *)(a1 + 40));
  [v2 setValue:v3 forProperty:@"last_report_date"];

  BOOL v4 = *(void **)(a1 + 32);
  CFTypeID v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)[v4 reportCount] + 1));
  [v4 setValue:v5 forProperty:@"report_count"];

  return 1LL;
}

void sub_100237C58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _predicateForPID:a2]);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___AccountStatementMetadataItem,  "anyInDatabase:predicate:",  v3,  v4));

  [v5 markMetadataItemAsProcessed:*(unsigned __int8 *)(a1 + 56) error:*(void *)(a1 + 48)];
}

void sub_100237DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _predicateForPID:a2]);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___AccountStatementMetadataItem,  "anyInDatabase:predicate:",  v3,  v4));

  [v5 updateReportDate:*(void *)(a1 + 40)];
}

void sub_10023841C(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
}

void sub_100238424(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
}

void sub_10023842C(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100238470(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setAccountEventType:](v4, "setAccountEventType:", [a3 integerValue]);
}

void sub_1002384B4(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
}

void sub_1002384BC(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setHasBeenProcessed:](v4, "setHasBeenProcessed:", [a3 BOOLValue]);
}

void sub_100238500(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setProcessedAttemptCount:]( v4,  "setProcessedAttemptCount:",  [a3 integerValue]);
}

void sub_100238544(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountStatementMetadataItem setLastProcessedDate:](v4, "setLastProcessedDate:", v5);
}

void sub_100238590(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountStatementMetadataItem setLastReportDate:](v4, "setLastReportDate:", v5);
}

void sub_1002385DC(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setReportCount:](v4, "setReportCount:", [a3 integerValue]);
}

void sub_100238620(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setError:](v4, "setError:", [a3 integerValue]);
}

NSString *__cdecl sub_100239248(id a1, PKPass *a2)
{
  return (NSString *)-[PKPass uniqueID](a2, "uniqueID");
}

NSCopying *__cdecl sub_100239250(id a1, PKPass *a2)
{
  return (NSCopying *)-[PKPass uniqueID](a2, "uniqueID");
}

void sub_100239450(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___PDCardCloudManagerSaveRequest);
  -[PDCardCloudManagerSaveRequest setOriginator:]( v3,  "setOriginator:",  @"-[PDCardCloudManager saveLocalDataInContainer:] (full-sync-upload)");
  id v19 = v3;
  -[PDCardCloudManagerSaveRequest delayExecutionOfRemotePortion](v3, "delayExecutionOfRemotePortion");
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v21 = *(void *)v24;
    do
    {
      for (id i = 0LL; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        id v8 = (PDCardCloudManagerSaveRequest *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
        unsigned int v9 = [v7 wasAchivedInCloudStoreWithIdentifier:*(void *)(*(void *)(a1 + 32) + 8)];
        unsigned int v10 = [v7 isRevoked];
        int v11 = v9 | v10;
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(%d, %d)",  v9,  v10));
        CFBooleanRef v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(%d, %d)",  0LL,  v11 ^ 1u));
        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138543874;
          unsigned int v28 = v8;
          __int16 v29 = 2114;
          uint64_t v30 = v12;
          __int16 v31 = 2114;
          __int128 v32 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[PDCardCloudManager] local pass:%{public}@ comparison:%{public}@ action:%{public}@ (full-sync-upload)",  buf,  0x20u);
        }

        if ((v11 & 1) == 0) {
          -[PDCardCloudManagerSaveRequest addRemotePass:](v19, "addRemotePass:", v7);
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
    }

    while (v5);
  }

  uint64_t v16 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    unsigned int v28 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[PDCardCloudManager] will apply result of diff: %{public}@ (full-sync-upload)",  buf,  0xCu);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  [v18 executeSaveRequest:v19 completion:0];
}

void sub_1002397D0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (objc_msgSend(v6, "pk_isPass")
    && ([*(id *)(a1 + 32) handleUpdatedPass:v6 inDatabase:v5 updateSaveRequest:0 shouldSave:0 remoteChanges:*(void *)(a1 + 40)] & 1) == 0)
  {
    [*(id *)(a1 + 32) handleInvalidPass:v6 inDatabase:v5 remoteChanges:*(void *)(a1 + 40)];
  }
}

void sub_100239CB0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (objc_msgSend(v6, "pk_isPass")) {
    [*(id *)(a1 + 32) handleUpdatedPass:v6 inDatabase:v5 updateSaveRequest:*(void *)(a1 + 40) shouldSave:*(unsigned __int8 *)(a1 + 56) remoteChanges:*(void *)(a1 + 48)];
  }
}

void sub_10023A3C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPass])
  {
    [*(id *)(a1 + 32) handleRemovedPass:v3 updateSaveRequest:*(void *)(a1 + 40) shouldSave:*(unsigned __int8 *)(a1 + 48)];
  }

  else if ([v3 isPassCatalog])
  {
    [*(id *)(a1 + 32) handleRemovedPassCatalog:v3];
  }
}

void sub_10023A718(uint64_t a1)
{
  if ([*(id *)(a1 + 32) changeEventsAreBeingProcessed])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[PDCardCloudManager] changes are being processed - callback registered",  v4,  2u);
    }
  }

  else
  {
    [*(id *)(a1 + 32) fetchChangeEvents];
    [*(id *)(a1 + 32) processNextEventBatch];
  }

BOOL sub_10023A944(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  else {
    unsigned __int8 v5 = -[PKChangeHistoryEvent representsPassUpdate](v4, "representsPassUpdate");
  }

  return v5;
}

BOOL sub_10023AB90(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 timestamp]);
  [v2 timeIntervalSinceDate:v3];
  BOOL v5 = v4 > 86400.0;

  return v5;
}

id sub_10023AD68(uint64_t a1, uint64_t a2)
{
  if (!objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 32), a2),  "shouldProcessChangeEventBatchLaterDueToError:",  *(void *)(*(void *)(a1 + 32) + 16))) {
    return [*(id *)(a1 + 32) processNextEventBatch];
  }
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16LL);
    int v7 = 138543362;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDCardCloudManager] looks like processing of pending changes needs to be aborted due to error :%{public}@",  (uint8_t *)&v7,  0xCu);
  }

  return [*(id *)(a1 + 32) abortChangeProcessing];
}

void sub_10023B2F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10023B310(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10023B320(uint64_t a1)
{
}

void sub_10023B328(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_10023B3E4;
  v13[3] = &unk_100643518;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 processPassAddEventsFromEvents:v9 completion:v13];
}

void sub_10023B3E4(void *a1, void *a2)
{
  id v7 = a2;
  unsigned __int8 v4 = objc_msgSend((id)objc_opt_class(a1[4], v3), "shouldProcessChangeEventBatchLaterDueToError:", v7);
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id v6 = v7;
  if ((v4 & 1) == 0) {
    id v6 = *(void **)(v5 + 40);
  }
  objc_storeStrong((id *)(v5 + 40), v6);
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10023B454(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_10023B510;
  v13[3] = &unk_100643518;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 processPassUpdateEventsFromEvents:v9 completion:v13];
}

void sub_10023B510(void *a1, void *a2)
{
  id v7 = a2;
  unsigned __int8 v4 = objc_msgSend((id)objc_opt_class(a1[4], v3), "shouldProcessChangeEventBatchLaterDueToError:", v7);
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id v6 = v7;
  if ((v4 & 1) == 0) {
    id v6 = *(void **)(v5 + 40);
  }
  objc_storeStrong((id *)(v5 + 40), v6);
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10023B580(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_10023B63C;
  v13[3] = &unk_100643518;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 processPassRemoveEventsFromEvents:v9 completion:v13];
}

void sub_10023B63C(void *a1, void *a2)
{
  id v7 = a2;
  unsigned __int8 v4 = objc_msgSend((id)objc_opt_class(a1[4], v3), "shouldProcessChangeEventBatchLaterDueToError:", v7);
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id v6 = v7;
  if ((v4 & 1) == 0) {
    id v6 = *(void **)(v5 + 40);
  }
  objc_storeStrong((id *)(v5 + 40), v6);
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10023B6AC(uint64_t a1)
{
  id v2 = PDDefaultQueue();
  uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10023B748;
  block[3] = &unk_10064E910;
  void block[4] = *(void *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 56);
  __int128 v5 = *(_OWORD *)(a1 + 40);
  id v4 = (id)v5;
  __int128 v7 = v5;
  dispatch_async(v3, block);
}

uint64_t sub_10023B748(uint64_t a1, uint64_t a2)
{
  if (objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 32), a2),  "shouldProcessChangeEventBatchLaterDueToError:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)))
  {
    uint64_t v3 = (id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    uint64_t v4 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (id *)(v4 + 16);
  }

  objc_storeStrong((id *)(v4 + 16), *v3);
  objc_msgSend(*(id *)(a1 + 32), "markBatchOfChangesAsProcessed:", *(void *)(a1 + 56), *(void *)(a1 + 64));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

BOOL sub_10023B9CC(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return -[PKChangeHistoryEvent representsPassAddition](a2, "representsPassAddition", a3, a4);
}

void sub_10023B9D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  objc_msgSend( *(id *)(a1 + 32),  "handlePassUploadResult:conflictingServerPasses:revokedLocalPasses:andEraseChangeEvents:orReportError:",  a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
  }
}

BOOL sub_10023BC98(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return -[PKChangeHistoryEvent representsPassUpdate](a2, "representsPassUpdate", a3, a4);
}

uint64_t sub_10023BCA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 retryDateForEvent:v3]);

  if (v5
    && (id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
        id v7 = [v6 compare:v5],
        v6,
        v7 != (id)1))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 recordUniqueID]);
      int v13 = 138543618;
      id v14 = v11;
      __int16 v15 = 2114;
      uint64_t v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[PDCardCloudManager] not processing update %{public}@ since its retry date is in the future %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

void sub_10023BDE0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  objc_msgSend( *(id *)(a1 + 32),  "handlePassUpdateResult:conflictingServerPasses:revokedLocalPasses:andEraseChangeEvents:orReportError:",  a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
  }
}

BOOL sub_10023C020(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return -[PKChangeHistoryEvent representsPassRemoval](a2, "representsPassRemoval", a3, a4);
}

void sub_10023C028(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  objc_msgSend( *(id *)(a1 + 32),  "handlePassRemovalResult:andEraseChangeEvents:orReportError:",  a2,  *(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }
}

BOOL sub_10023C214(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return -[PKChangeHistoryEvent representsCatalogUpdate](a2, "representsCatalogUpdate", a3, a4);
}

void sub_10023C21C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  objc_msgSend( *(id *)(a1 + 32),  "handleCatalogUpdateResult:andEraseChangeEvents:orReportError:",  a2,  *(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }
}

id sub_10023C594(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 recordUniqueID]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

NSString *__cdecl sub_10023C5E8(id a1, PKChangeHistoryEvent *a2)
{
  return (NSString *)-[PKChangeHistoryEvent recordUniqueID](a2, "recordUniqueID");
}

NSString *__cdecl sub_10023C600(id a1, PKChangeHistoryEvent *a2)
{
  return (NSString *)-[PKChangeHistoryEvent identifier](a2, "identifier");
}

NSString *__cdecl sub_10023C618(id a1, PKPass *a2)
{
  return (NSString *)-[PKPass uniqueID](a2, "uniqueID");
}

void sub_10023D130(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v16;
    do
    {
      for (id i = 0LL; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)i);
        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v20 = v11;
          __int16 v21 = 2114;
          id v22 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[PDCardCloudManager] increasing retry count for conflicting event recordUniqueID: %{public}@, recordType %{public}@",  buf,  0x16u);
        }

        id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
        objc_msgSend( v14,  "increaseRetryCountForRecordUniqueIdenifier:recordType:",  v11,  objc_msgSend(v5, "integerValue"));
      }

      id v8 = [v6 countByEnumeratingWithState:&v15 objects:v23 count:16];
    }

    while (v8);
  }
}

void sub_10023E73C(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterAccountDetails setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_10023E788(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterAccountDetails setCreatedDate:](v4, "setCreatedDate:", v5);
}

void sub_10023E7D4(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterAccountDetails setNextDueDate:](v4, "setNextDueDate:", v5);
}

void sub_10023E820(id a1, PKPayLaterAccountDetails *a2, id a3)
{
}

void sub_10023E828(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPayLaterAccountDetails setAssociatedPassURL:](v4, "setAssociatedPassURL:", v5);
}

void sub_10023E874(id a1, PKPayLaterAccountDetails *a2, id a3)
{
}

void sub_10023E87C(id a1, PKPayLaterAccountDetails *a2, id a3)
{
}

void sub_10023E884(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setCardNetwork:](v4, "setCardNetwork:", [a3 integerValue]);
}

void sub_10023E8C8(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKPayLaterAccountDetails setAvailableLanguages:](v4, "setAvailableLanguages:", v5);
}

void sub_10023E920(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setRequiresGenericMessaging:]( v4,  "setRequiresGenericMessaging:",  [a3 BOOLValue]);
}

void sub_10023E964(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setPaymentType:](v4, "setPaymentType:", [a3 integerValue]);
}

void sub_10023E9A8(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setFinancingPlanFetchLimit:]( v4,  "setFinancingPlanFetchLimit:",  [a3 integerValue]);
}

void sub_10023EC00(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10023F84C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10023F970(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _predicateForPersistentID:v7]);
  id v11 = (id)objc_claimAutoreleasedReturnValue([v4 anyInDatabase:v5 predicate:v8]);

  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 _verificationAction]);
  [v9 safelyAddObject:v10];
}

id sub_10023FB48(id a1, NSNumber *a2)
{
  return -[NSNumber stringValue](a2, "stringValue");
}

id sub_10023FB9C(id a1, NSString *a2)
{
  return +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NSString integerValue](a2, "integerValue"));
}

void sub_10023FCA0(id a1, PKAccountFundingSourceVerificationAction *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFundingSourceVerificationAction setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10023FCE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 _verificationOptionsFromString:a3]);
  [v5 setVerificationOptions:v6];
}

uint64_t sub_10024081C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100240B50(id *a1)
{
  id v2 = a1[4];
  uint64_t v3 = *((void *)v2 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 14);
  if (v3)
  {
    [*((id *)a1[4] + 6) addObject:a1[6]];
    os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 14);
  }

  else
  {
    objc_storeStrong((id *)a1[4] + 4, a1[5]);
    os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 14);
    objc_storeStrong((id *)a1[4] + 8, a1[6]);
    objc_msgSend(a1[4], "_queue_performCurrentQuery");
  }

void sub_100240BFC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 remoteObjectProxy]);
  [v5 searchDidCompleteWithError:v4 forIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_100240E74(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    if (v4) {
      BOOL v7 = v5 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

void sub_100241044(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 336),  "updateRegionWithIdentifier:localizedName:boundingRegion:mapsIdentifier:providerIdentifier:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 96),  *(unsigned int *)(a1 + 104),  *(double *)(a1 + 64),  *(double *)(a1 + 72),  *(double *)(a1 + 80),  *(double *)(a1 + 88)));
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    id v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    id v2 = v4;
  }
}

uint64_t sub_1002410B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

int64_t sub_100242A84(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

void sub_1002430B0(void *a1)
{
  id v2 = [[PKAccountUserCollection alloc] initWithAccountUsers:a1[4]];
  [*(id *)(a1[5] + 208) setObject:v2 forKey:a1[6]];
}

void sub_1002431C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 88);
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
}

void sub_1002432D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteObjectProxy]);
  [v2 invalidateSearchResults];

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 84LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 8PKAnalyticsSendEvent(PKAggDKeyCloudStoreKeychainSyncNotificationDidFire, 0LL) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 84LL));
}

id *sub_100243F00(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)&OBJC_CLASS___PDPassDaemonData;
    a1 = (id *)objc_msgSendSuper2(&v13, "init");
    if (a1)
    {
      id v10 = [v7 copy];
      id v11 = a1[1];
      a1[1] = v10;

      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

id *sub_100243FB8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    id v5 = objc_autoreleasePoolPush();
    uint64_t v6 = PKObjectDictionaryWithError(v4, 0LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = PKPrivateObjectDictionaryWithError(v4, 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[PKPassTileDescriptor createWithPassDictionary:privateDictionary:]( &OBJC_CLASS___PKPassTileDescriptor,  "createWithPassDictionary:privateDictionary:",  v7,  v9));
    id v11 = -[PKSecureElementPassFieldCollection initWithPassDictionary:]( objc_alloc(&OBJC_CLASS___PKSecureElementPassFieldCollection),  "initWithPassDictionary:",  v7);
    id v12 = -[PDPassShareBundle initWithPassURL:passDictionary:]( objc_alloc(&OBJC_CLASS___PDPassShareBundle),  "initWithPassURL:passDictionary:",  v4,  v7);
    a1 = sub_100243F00(a1, v10, v11, v12);

    objc_autoreleasePoolPop(v5);
    objc_super v13 = a1;
  }

  else
  {
    objc_super v13 = 0LL;
  }

  return v13;
}

void sub_1002443D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1002443EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained handleEventWithAction:a2 token:a3 descriptor:v7];
}

void sub_10024444C(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100441E78(a1, a2, v5);
  }
}

void sub_1002448F8(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = *(unsigned __int8 *)(v2 + 8);
  uint64_t Object = PKLogFacilityTypeGetObject(4LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(v2 + 24);
      uint64_t v8 = (void *)a1[5];
      unsigned int v9 = [*(id *)(v2 + 56) count];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v34 = v7;
      __int16 v35 = 2114;
      unsigned __int8 v36 = v8;
      __int16 v37 = 1024;
      LODWORD(v3_Block_object_dispose((const void *)(v1 - 144), 8) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "XPC event publisher for stream %{public}@ sending xpc event %{public}@ to %u clients",  buf,  0x1Cu);
    }

    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v10 = *(id *)(a1[4] + 56LL);
    id v11 = [v10 countByEnumeratingWithState:&v29 objects:v39 count:16];
    if (v11)
    {
      id v13 = v11;
      uint64_t v14 = *(void *)v30;
      *(void *)&__int128 v12 = 138543874LL;
      __int128 v28 = v12;
      do
      {
        for (id i = 0LL; i != v13; id i = (char *)i + 1)
        {
          if (*(void *)v30 != v14) {
            objc_enumerationMutation(v10);
          }
          __int128 v16 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          uint64_t v17 = xpc_event_publisher_fire( *(void *)(a1[4] + 16),  objc_msgSend(v16, "unsignedLongLongValue", v28, (void)v29),  a1[5]);
          if ((_DWORD)v17)
          {
            uint64_t v18 = v17;
            uint64_t v19 = PKLogFacilityTypeGetObject(0LL);
            uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              uint64_t v21 = *(void *)(a1[4] + 24LL);
              uint64_t v22 = xpc_strerror(v18);
              *(_DWORD *)__int128 buf = v28;
              uint64_t v34 = v21;
              __int16 v35 = 2112;
              unsigned __int8 v36 = v16;
              __int16 v37 = 2080;
              uint64_t v38 = v22;
              _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to send event to XPC event stream %{public}@ for token %@: %s",  buf,  0x20u);
            }
          }
        }

        id v13 = [v10 countByEnumeratingWithState:&v29 objects:v39 count:16];
      }

      while (v13);
    }

    uint64_t v23 = a1[6];
    if (v23) {
      (*(void (**)(void))(v23 + 16))();
    }
  }

  else
  {
    if (v6)
    {
      uint64_t v24 = a1[5];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v34 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Have not received initial barrier; not sending %@",
        buf,
        0xCu);
    }

    [*(id *)(a1[4] + 40) addObject:a1[5]];
    __int128 v25 = (void *)a1[6];
    if (v25)
    {
      __int128 v26 = *(void **)(a1[4] + 48LL);
      id v27 = objc_retainBlock(v25);
      [v26 addObject:v27];
    }
  }

void sub_10024509C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v7),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v6,  a3);

  uint64_t v8 = *(void **)(a1 + 48);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentBalance]);
  [v8 setCurrentBalance:v9];

  id v10 = *(void **)(a1 + 48);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _totalAmount]);
  [v10 setTotalAmount:v11];

  __int128 v12 = *(void **)(a1 + 48);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _installmentAmount]);
  [v12 setInstallmentAmount:v13];

  uint64_t v14 = *(void **)(a1 + 48);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _totalPrincipal]);
  [v14 setTotalPrincipal:v15];

  __int128 v16 = *(void **)(a1 + 48);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _paymentAmountToDate]);
  [v16 setPaymentAmountToDate:v17];

  uint64_t v18 = *(void **)(a1 + 48);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _totalInterest]);
  [v18 setTotalInterest:v19];

  uint64_t v20 = *(void **)(a1 + 48);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interestPaidToDate]);
  [v20 setInterestPaidToDate:v21];

  uint64_t v22 = *(void **)(a1 + 48);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _principalPaidToDate]);
  [v22 setPrincipalPaidToDate:v23];

  uint64_t v24 = *(void **)(a1 + 48);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _payoffAmount]);
  [v24 setPayoffAmount:v25];

  __int128 v26 = *(void **)(a1 + 48);
  id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pastDueAmount]);
  [v26 setPastDueAmount:v27];

  __int128 v28 = *(void **)(a1 + 48);
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _initialAmount]);
  [v28 setInitialAmount:v29];

  __int128 v30 = *(void **)(a1 + 48);
  id v31 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _totalAdjustments]);
  [v30 setTotalAdjustments:v31];
}

void sub_100246354(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPayLaterFinancingPlanSummary setApr:](v4, "setApr:", v6);
}

void sub_1002463A8(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setHasAPR:](v4, "setHasAPR:", [a3 BOOLValue]);
}

void sub_1002463EC(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setDaysPastDue:](v4, "setDaysPastDue:", [a3 integerValue]);
}

void sub_100246430(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setInstallmentCount:]( v4,  "setInstallmentCount:",  [a3 unsignedIntegerValue]);
}

void sub_100246474(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanSummary setTransactionDate:](v4, "setTransactionDate:", v5);
}

void sub_1002464C0(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanSummary setStartInstallmentDate:](v4, "setStartInstallmentDate:", v5);
}

void sub_10024650C(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanSummary setNextInstallmentDueDate:](v4, "setNextInstallmentDueDate:", v5);
}

void sub_100246558(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanSummary setEndInstallmentDate:](v4, "setEndInstallmentDate:", v5);
}

void sub_1002465A4(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlanSummary setCancellationDate:](v4, "setCancellationDate:", v5);
}

void sub_1002465F0(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
}

void sub_1002465F8(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setCancellationReason:]( v4,  "setCancellationReason:",  [a3 integerValue]);
}

void sub_100246850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100246868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100246878(uint64_t a1)
{
}

BOOL sub_100246880(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_1002469D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  unsigned int v9 = *(void **)(a1 + 40);
  id v10 = a3;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_100246C28(id a1, PKPendingPrecursorPassCredential *a2, id a3)
{
}

void sub_100246C30(id a1, PKPendingPrecursorPassCredential *a2, id a3)
{
}

void sub_100246E28(uint64_t a1)
{
  id v2 = -[PDUserNotificationIconStore initWithDatabaseManager:]( objc_alloc(&OBJC_CLASS___PDUserNotificationIconStore),  "initWithDatabaseManager:",  *(void *)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), *(id *)(a1 + 56));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 64));
  objc_storeWeak((id *)(*(void *)(a1 + 32) + 80LL), *(id *)(a1 + 72));
  dispatch_semaphore_t v5 = dispatch_semaphore_create(1LL);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 88);
  *(void *)(v6 + 8_Block_object_dispose(va, 8) = v5;
}

id sub_100246EC8(uint64_t a1, void *a2)
{
  return [a2 updateDeviceAssessmentEducationVisibility];
}

void sub_100247298(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assertionsOfType:4]);
  id v3 = [v2 count];

  if (!v3) {
    [*(id *)(*(void *)(a1 + 40) + 32) promoteSuppressedUserNotificationsIfPossible];
  }
}

void sub_100247418()
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationManager does not support notifications for this platform",  v2,  2u);
  }
}

id sub_1002474FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  if (v2) {
    return [v2 requestNotificationAuthorizationIfNecessaryWithCompletion:v1];
  }
  else {
    return (id)(*(uint64_t (**)(uint64_t, void, void))(v1 + 16))(v1, 0LL, 0LL);
  }
}

id sub_10024759C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  if (v2) {
    return [v2 requestNotificationAuthorizationWithCompletion:v1];
  }
  else {
    return (id)(*(uint64_t (**)(uint64_t, void, void))(v1 + 16))(v1, 0LL, 0LL);
  }
}

id sub_10024764C(void *a1)
{
  return [*(id *)(a1[4] + 32) userNotificationActionPerformed:a1[6] applicationMessageContentIdentifier:a1[5]];
}

void sub_1002476EC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _notificationRequirementsAreSatisfied:*(void *)(a1 + 40)])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) date]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v4 = [v2 compare:v3];

    if (v4 == (id)1)
    {
      dispatch_semaphore_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v2));
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v15 = 138412290;
        uint64_t v16 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Scheduling Activity to insert User Notification: %@",  (uint8_t *)&v15,  0xCu);
      }

      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notificationIdentifier]);
      PDScheduledActivityRegisterUserNotification( @"PDWalletUserNotificationManager",  v9,  v5,  *(void *)(a1 + 40));
    }

    else
    {
      uint64_t v10 = PKLogFacilityTypeGetObject(0LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 32LL);
        int v15 = 138412546;
        uint64_t v16 = v12;
        __int16 v17 = 2112;
        uint64_t v18 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Inserting User Notification: %@ into Wallet User Notification Center: %@",  (uint8_t *)&v15,  0x16u);
      }

      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notificationIdentifier]);
      PDScheduledActivityRemove(@"PDWalletUserNotificationManager", v14);

      [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:*(void *)(a1 + 40)];
    }
  }

id sub_100247968(uint64_t a1)
{
  return [*(id *)(a1 + 32) _archiveUserNotifications];
}

id sub_100247A30(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) notificationIdentifier]);
  PDScheduledActivityRemove(@"PDWalletUserNotificationManager", v2);

  return [*(id *)(a1 + 32) _archiveUserNotifications];
}

id sub_100247AD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeScheduledActivitiesOfType:*(void *)(a1 + 40)];
}

id sub_100247B94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeScheduledActivitiesForPassUniqueIdentifier:*(void *)(a1 + 40) ofType:*(void *)(a1 + 48)];
}

id sub_100247C54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeScheduledActivitiesForPassUniqueIdentifier:*(void *)(a1 + 40)];
}

id sub_100247CD8(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v2 = PDScheduledActivitiesForClient(@"PDWalletUserNotificationManager");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        PDScheduledActivityRemove( @"PDWalletUserNotificationManager",  *(void *)(*((void *)&v9 + 1) + 8LL * (void)v7));
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }

  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "removeAllUserNotifications", (void)v9);
}

uint64_t sub_100247EA8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 passUniqueIdentifier]);
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

id sub_1002482A4(void *a1)
{
  if (*(void *)(a1[4] + 32LL)) {
    return [*(id *)(a1[4] + 32) userNotificationsOfType:a1[6] completion:a1[5]];
  }
  else {
    return (id)(*(uint64_t (**)(void))(a1[5] + 16LL))();
  }
}

id sub_10024838C(void *a1)
{
  if (*(void *)(a1[4] + 32LL)) {
    return [*(id *)(a1[4] + 32) userNotificationsForPassUniqueIdentifier:a1[5] ofType:a1[7] completion:a1[6]];
  }
  else {
    return (id)(*(uint64_t (**)(void))(a1[6] + 16LL))();
  }
}

void sub_100248468(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  if (v2)
  {
    id v3 = *(void **)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100248528;
    v4[3] = &unk_10064F020;
    id v5 = v3;
    id v6 = *(id *)(a1 + 48);
    [v2 userNotificationWithIdentifier:v5 completion:v4];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_100248528(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t Context = PDScheduledActivityGetContext(@"PDWalletUserNotificationManager", *(void *)(a1 + 32));
    id v3 = (id)objc_claimAutoreleasedReturnValue(Context);
  }

  id v5 = v3;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100248ABC(uint64_t a1, void *a2)
{
  return _[a2 shouldDisplayDeviceAssessmentEducationAccordingToService:*(void *)(*(void *)(a1 + 32) + 48)];
}

uint64_t sub_100249038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 8))
  {
    if (!*(void *)(v1 + 32)) {
      goto LABEL_7;
    }
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Archiving User Notifications", v8, 2u);
    }

    id v5 = -[NSKeyedArchiver initRequiringSecureCoding:]( objc_alloc(&OBJC_CLASS___NSKeyedArchiver),  "initRequiringSecureCoding:",  1LL);
    -[NSKeyedArchiver encodeObject:forKey:]( v5,  "encodeObject:forKey:",  *(void *)(*(void *)(a1 + 40) + 32LL),  @"walletUserNotificationCenter");
    -[NSKeyedArchiver finishEncoding](v5, "finishEncoding");
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSKeyedArchiver encodedData](v5, "encodedData"));

    if (v6)
    {
      [v6 writeToURL:*(void *)(*(void *)(a1 + 40) + 8) atomically:1];
      PKExcludeFileURLFromBackup(*(void *)(*(void *)(a1 + 40) + 8LL));
    }

    else
    {
LABEL_7:
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      [v6 removeItemAtURL:*(void *)(*(void *)(a1 + 40) + 8) error:0];
    }

    uint64_t v1 = *(void *)(a1 + 40);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 88));
}

void sub_100249558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100249570(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100249580(uint64_t a1)
{
}

void sub_100249588(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passesOfType:1]);
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v85 objects:v91 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v86;
    do
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v86 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v85 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 devicePrimaryPaymentApplication]);
        __int128 v9 = (char *)[v8 state];

        if ((unint64_t)(v9 - 3) <= 1)
        {
          __int128 v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
          __int128 v11 = objc_alloc(&OBJC_CLASS___PKBadgeCountItem);
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryIdentifier]);
          uint64_t v13 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( v11,  "initWithTitle:subtitle:count:",  @"Pass requiring verification",  v12,  1LL);
          [v10 addObject:v13];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v85 objects:v91 count:16];
    }

    while (v4);
  }

  uint64_t v14 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v14 + 104))
  {
    int v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    uint64_t v16 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( objc_alloc(&OBJC_CLASS___PKBadgeCountItem),  "initWithTitle:subtitle:count:",  @"Device assessment education visible",  0LL,  1LL);
    [v15 addObject:v16];

    uint64_t v14 = *(void *)(a1 + 32);
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v14 + 16) peerPaymentAccount]);
  id v74 = v17;
  id v75 = v2;
  if ((uint64_t)[v17 pendingPaymentCount] >= 1 && objc_msgSend(v17, "stage") == (id)1)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 associatedPassUniqueID]);
    __int128 v81 = 0u;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    __int128 v84 = 0u;
    id v19 = v2;
    id v20 = [v19 countByEnumeratingWithState:&v81 objects:v90 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v82;
LABEL_16:
      uint64_t v23 = 0LL;
      while (1)
      {
        if (*(void *)v82 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = *(void **)(*((void *)&v81 + 1) + 8 * v23);
        id v25 = (id)objc_claimAutoreleasedReturnValue([v24 uniqueID]);
        id v26 = v18;
        id v27 = v26;
        if (v25 == v26) {
          break;
        }
        if (v18 && v25)
        {
          unsigned __int8 v28 = [v25 isEqualToString:v26];

          if ((v28 & 1) != 0) {
            goto LABEL_29;
          }
        }

        else
        {
        }

        if (v21 == (id)++v23)
        {
          id v21 = [v19 countByEnumeratingWithState:&v81 objects:v90 count:16];
          if (v21) {
            goto LABEL_16;
          }
          goto LABEL_31;
        }
      }

LABEL_29:
      id v29 = v24;

      if (!v29) {
        goto LABEL_32;
      }
      __int128 v30 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      id v31 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( objc_alloc(&OBJC_CLASS___PKBadgeCountItem),  "initWithTitle:subtitle:count:",  @"Anonymous peer payment pass (pending payment)",  v27,  1LL);
      [v30 addObject:v31];

      id v19 = v29;
    }

int64_t sub_100249D24(id a1, PKBadgeCountItem *a2, PKBadgeCountItem *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKBadgeCountItem title](v4, "title"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[PKBadgeCountItem title](v5, "title"));
  int64_t v8 = (int64_t)[v6 compare:v7];

  if (!v8)
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue(-[PKBadgeCountItem subtitle](v4, "subtitle"));
    __int128 v10 = (void *)v9;
    if (v9) {
      __int128 v11 = (__CFString *)v9;
    }
    else {
      __int128 v11 = &stru_100662310;
    }
    uint64_t v12 = objc_claimAutoreleasedReturnValue(-[PKBadgeCountItem subtitle](v5, "subtitle"));
    uint64_t v13 = (void *)v12;
    if (v12) {
      uint64_t v14 = (const __CFString *)v12;
    }
    else {
      uint64_t v14 = &stru_100662310;
    }
    int64_t v8 = (int64_t)-[__CFString compare:](v11, "compare:", v14);

    if (!v8)
    {
      id v15 = -[PKBadgeCountItem count](v4, "count");
      else {
        int64_t v8 = 1LL;
      }
    }
  }

  return v8;
}

void sub_10024A04C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10024A06C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) financingPlanDisputeIdentifiersWithDisputeState:a2]);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = v6;
  id v7 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      for (id i = 0LL; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)i);
        uint64_t v20 = v11;
        uint64_t v12 = PKStringWithValidatedFormat(v5, @"%@");
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        if ((PKSharedCacheGetBoolForKey(v13, v14) & 1) == 0)
        {
          uint64_t v15 = PKPayLaterFinancingPlanDisputeStateToString(v22);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Pay Later Account financing plan dispute (%@)",  v16));
          uint64_t v18 = *(void **)(*(void *)(*(void *)(v21 + 40) + 8LL) + 40LL);
          id v19 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( objc_alloc(&OBJC_CLASS___PKBadgeCountItem),  "initWithTitle:subtitle:count:",  v17,  v11,  1LL);
          [v18 addObject:v19];
        }
      }

      id v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16, v20);
    }

    while (v8);
  }
}

void sub_10024AAD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKAccountEnhancedMerchant);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 56) populateAssociatedProgramIdentifiersForEnhancedMerchant:v8 enhancedMerchantPID:a2 inDatabase:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) addObject:v8];
}

void sub_10024B4EC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B4F4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B4FC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B504(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountEnhancedMerchant logoImage](a2, "logoImage"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v4));

  [v6 addURL:v5 forScaleFactor:2];
}

void sub_10024B574(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountEnhancedMerchant logoImage](a2, "logoImage"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v4));

  [v6 addURL:v5 forScaleFactor:3];
}

void sub_10024B5E4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B5EC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B5F4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B5FC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", a3));
  -[PKAccountEnhancedMerchant setWebsite:](v4, "setWebsite:", v5);
}

void sub_10024B660(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", a3));
  -[PKAccountEnhancedMerchant setLoyaltyPassURL:](v4, "setLoyaltyPassURL:", v5);
}

void sub_10024B6C4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B6CC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B6D4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountEnhancedMerchant iconImage](a2, "iconImage"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v4));

  [v6 addURL:v5 forScaleFactor:2];
}

void sub_10024B744(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountEnhancedMerchant iconImage](a2, "iconImage"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v4));

  [v6 addURL:v5 forScaleFactor:3];
}

void sub_10024B7B4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B7BC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B7C4(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEnhancedMerchant setSuppressPaymentSheetRewardsHint:]( v4,  "setSuppressPaymentSheetRewardsHint:",  [a3 BOOLValue]);
}

void sub_10024B808(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B810(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountEnhancedMerchant setPaymentSheetOverrideStart:](v4, "setPaymentSheetOverrideStart:", v5);
}

void sub_10024B85C(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountEnhancedMerchant setPaymentSheetOverrideEnd:](v4, "setPaymentSheetOverrideEnd:", v5);
}

void sub_10024B8A8(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_10024B9D4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

uint64_t SecureElementPassFieldSourceFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:PKSecureElementPassFieldsBalanceFieldsKey])
  {
    uint64_t v2 = 0LL;
  }

  else if ([v1 isEqualToString:PKSecureElementPassFieldsCommutePlansKey])
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v2;
}

id NSStringFromSecureElementPassFieldSource(uint64_t a1)
{
  if (a1)
  {
    if (a1 != 1) {
      return 0LL;
    }
    id v1 = (id *)&PKSecureElementPassFieldsCommutePlansKey;
  }

  else
  {
    id v1 = (id *)&PKSecureElementPassFieldsBalanceFieldsKey;
  }

  return *v1;
}

void sub_10024C35C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10024C37C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10024C38C(uint64_t a1)
{
}

BOOL sub_10024C394(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initWithPropertyValues:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)) {
    return 0LL;
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) foreignReferenceIdentifiers]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[SecureElementPassFieldForeignReferenceIdentifier insertForeignReferenceIdentifiers:forSecureElementPassField:inDatabase:]( &OBJC_CLASS___SecureElementPassFieldForeignReferenceIdentifier,  "insertForeignReferenceIdentifiers:forSecureElementPassField:inDatabase:",  v5,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  *(void *)(a1 + 48)));
  BOOL v7 = v6 != 0LL;

  return v7;
}

void sub_10024C794(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) safelyAddObject:v3];
}

id sub_10024CBE4(uint64_t a1, uint64_t a2)
{
  return +[SecureElementPassFieldForeignReferenceIdentifier deleteForeignReferenceIdentifiersInDatabase:forFieldPID:]( &OBJC_CLASS___SecureElementPassFieldForeignReferenceIdentifier,  "deleteForeignReferenceIdentifiersInDatabase:forFieldPID:",  *(void *)(a1 + 32),  a2);
}

void sub_10024D34C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) allObjects]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32LL));
  [*(id *)(a1 + 32) _updateConsumers:v2 requiresRegistration:0];
  [*(id *)(a1 + 32) _scheduleEventStreamRegistrationUpdateWhileInternalQueue:1];
}

void sub_10024D414(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
    PDXPCEventStreamRegisterObserver( *(void **)(a1 + 32),  @"com.apple.notifyd.matching",  *(void **)(*(void *)(a1 + 32) + 24LL));
    PDXPCEventStreamRegisterObserver( *(void **)(a1 + 32),  @"com.apple.distnoted.matching",  *(void **)(*(void *)(a1 + 32) + 24LL));
    dispatch_group_notify( *(dispatch_group_t *)(*(void *)(a1 + 32) + 16LL),  *(dispatch_queue_t *)(*(void *)(a1 + 32) + 24LL),  &stru_10064F3C0);
  }

id sub_10024D518(id result)
{
  uint64_t v1 = (unsigned __int8 *)(*((void *)result + 4) + 56LL);
  while (1)
  {
    int v2 = __ldaxr(v1);
    if (v2 != 1) {
      break;
    }
    if (!__stlxr(0, v1)) {
      return _objc_msgSend(*((id *)result + 4), "_queue_updateEventStreamRegistration");
    }
  }

  __clrex();
  return result;
}

void sub_10024E610(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterInstallment),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterInstallment planIdentifier](v5, "planIdentifier"));
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_10024EB04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10024EB34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10024EB44(uint64_t a1)
{
}

void sub_10024EB4C(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v9 = a3;
  id v6 = *a4;
  BOOL v7 = v6;
  if (v6) {
    id v8 = (void *)_DateForSQLValue(v6);
  }
  else {
    id v8 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v8);
  if (v7) {
}
  }

void sub_10024EBCC(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v9 = a3;
  id v6 = *a4;
  BOOL v7 = v6;
  if (v6) {
    id v8 = (void *)_DateForSQLValue(v6);
  }
  else {
    id v8 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v8);
  if (v7) {
}
  }

void sub_10024EDE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10024EDF8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  if ((_DWORD)result)
  {
    do
    {
      uint64_t v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      BOOL v7 = (NSData *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

      if (v5 != v7)
      {
        uint64_t v8 = PKCurrencyStorageNumberToCurrencyDecimal(v5);
        uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
        __int128 v10 = (void *)v9;
        if (v6 && v9)
        {
          uint64_t v11 = PKCurrencyAmountMake(v9, v6);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t v14 = *(void **)(v13 + 40);
          if (v14)
          {
            uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 currencyAmountByAddingCurrencyAmount:v12]);
            uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8LL);
            __int16 v17 = *(void **)(v16 + 40);
            *(void *)(v16 + 40) = v15;
          }

          else
          {
            id v18 = v12;
            __int16 v17 = *(void **)(v13 + 40);
            *(void *)(v13 + 40) = v18;
          }
        }
      }

      uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

void sub_10024F3A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v20 = objc_alloc_init(&OBJC_CLASS___PKPayLaterInstallment);
  uint64_t v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterInstallment),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v20 withProperties:v7 values:a4];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterInstallment _totalAmount](v8, "_totalAmount"));
  -[PKPayLaterInstallment setTotalAmount:](v20, "setTotalAmount:", v9);

  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterInstallment _currentBalance](v8, "_currentBalance"));
  -[PKPayLaterInstallment setCurrentBalance:](v20, "setCurrentBalance:", v10);

  id v11 = -[SQLiteEntity persistentID](v8, "persistentID");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterAppliedPayment payLaterAppliedPaymentsForInstallmentPID:inDatabase:]( &OBJC_CLASS___PayLaterAppliedPayment,  "payLaterAppliedPaymentsForInstallmentPID:inDatabase:",  v11,  v12));

  -[PKPayLaterInstallment setAppliedPayments:](v20, "setAppliedPayments:", v13);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "pk_arrayBySafelyApplyingBlock:", &stru_10064F400));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v14));

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v8, "valueForProperty:", @"a"));
  id v17 = [v16 longLongValue];

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) database]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterPayment payLaterPaymentsForScheduleSummaryPID:paymentIdentifiers:inDatabase:]( &OBJC_CLASS___PayLaterPayment,  "payLaterPaymentsForScheduleSummaryPID:paymentIdentifiers:inDatabase:",  v17,  v15,  v18));

  -[PKPayLaterInstallment setPayments:](v20, "setPayments:", v19);
  [*(id *)(a1 + 56) safelyAddObject:v20];
}

id sub_10024F588(id a1, PKPayLaterAppliedPayment *a2)
{
  return -[PKPayLaterAppliedPayment paymentIdentifier](a2, "paymentIdentifier");
}

void sub_10024FA6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10024FA84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472LL;
  id v11 = sub_10024FB38;
  uint64_t v12 = &unk_10063D460;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  id v13 = v4;
  uint64_t v14 = v5;
  sub_1002CCDBC(v2, v3, &v9);
  id v6 = *(void **)(a1 + 56);
  id v7 = (void *)_SQLValueForDate(*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  objc_msgSend(v6, "setValue:forProperty:", v7, @"j", v9, v10, v11, v12);

  return 1LL;
}

void sub_10024FB38(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v4 = _DateForSQLValue(v7);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

void sub_10025046C(id a1, PKPayLaterInstallment *a2, id a3)
{
}

void sub_100250474(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterInstallment setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002504B8(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterInstallment setDueDate:](v4, "setDueDate:", v5);
}

void sub_100250504(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterInstallment setInterval:](v4, "setInterval:", [a3 integerValue]);
}

void sub_100250548(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterInstallment setPayoffDate:](v4, "setPayoffDate:", v5);
}

void sub_100250594(id a1, PKPayLaterInstallment *a2, id a3)
{
}

id _SQLValueForStringArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1
    || (id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsJoinedByString:@","])) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v3;
}

id _StringArrayForSQLValue(void *a1)
{
  if (a1) {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@","]);
  }
  else {
    id v1 = 0LL;
  }
  if ([v1 count]) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  id v3 = v2;

  return v3;
}

void sub_1002507A8(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountServicingEvent),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[AccountServicingEvent servicingEvent](v5, "servicingEvent"));
  [v3 addObject:v4];
}

void sub_100250E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) amount]);
  [v4 setAmount:v5];

  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statusDetails]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) partiallyApprovedAmount]);
  [v7 setPartiallyApprovedAmount:v6];
}

void sub_100251264(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_10025126C(id a1, PKAccountServicingEvent *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountServicingEvent setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002512B0(id a1, PKAccountServicingEvent *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountServicingEvent setActivityType:](v4, "setActivityType:", [a3 integerValue]);
}

void sub_1002512F4(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_1002512FC(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_100251304(id a1, PKAccountServicingEvent *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountServicingEvent setOpenDate:](v4, "setOpenDate:", v5);
}

void sub_100251350(id a1, PKAccountServicingEvent *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountServicingEvent setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_10025139C(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_1002513A4(id a1, PKAccountServicingEvent *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = _StringArrayForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountServicingEvent setLinkedCaseIdentifiers:](v4, "setLinkedCaseIdentifiers:", v6);
}

void sub_1002513F4(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountServicingEvent statusDetails](a2, "statusDetails"));
  id v5 = _StringArrayForSQLValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  [v7 setStatusReasons:v6];
}

void sub_100251458(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountServicingEvent statusDetails](a2, "statusDetails"));
  id v5 = (void *)_DateForSQLValue(v4);

  [v6 setCustomerResponseByDate:v5];
}

void sub_1002514B8(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountServicingEvent statusDetails](a2, "statusDetails"));
  id v5 = (void *)_DateForSQLValue(v4);

  [v6 setMerchantResponseByDate:v5];
}

void sub_100251518(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountServicingEvent statusDetails](a2, "statusDetails"));
  id v5 = _StringArrayForSQLValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  [v7 setEvidenceDocumentTypes:v6];
}

void sub_10025157C(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountServicingEvent statusDetails](a2, "statusDetails"));
  [v5 setResolutionReason:v4];
}

void sub_1002515C8(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKAccountServicingEvent statusDetails](a2, "statusDetails"));
  id v5 = (void *)_DateForSQLValue(v4);

  [v6 setResolutionDate:v5];
}

void sub_100251A38(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_10025277C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setShinkansenTicketActive:]( v4,  "setShinkansenTicketActive:",  [a3 BOOLValue]);
}

void sub_1002527C0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setBalanceAllowedForCommute:]( v4,  "setBalanceAllowedForCommute:",  [a3 BOOLValue]);
}

void sub_100252804(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setLowBalanceNotificationEnabled:]( v4,  "setLowBalanceNotificationEnabled:",  [a3 BOOLValue]);
}

void sub_100252848(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setGreenCarTicketUsed:](v4, "setGreenCarTicketUsed:", [a3 BOOLValue]);
}

void sub_10025288C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252894(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v7 = a2;
  if (a3)
  {
    uint64_t v4 = PKDecimalAmountFromAmount(a3, @"JPY");
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    -[PKFelicaTransitAppletState setBalance:](v7, "setBalance:", v5);

    id v6 = (void *)v5;
  }

  else
  {
    -[PKFelicaTransitAppletState setBalance:](v7, "setBalance:", 0LL);
    id v6 = v7;
  }
}

void sub_100252908(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setBlacklisted:](v4, "setBlacklisted:", [a3 BOOLValue]);
}

void sub_10025294C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252954(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_10025295C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252964(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_10025296C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252974(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_10025297C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252984(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_10025298C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252994(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_10025299C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529A4(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529AC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529B4(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529BC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529C4(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529CC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529D4(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529DC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529E4(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529EC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529F4(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002529FC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252A04(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252A0C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252A14(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252A1C(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_100252A24(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setHasGreenCarTicket:](v4, "setHasGreenCarTicket:", [a3 BOOLValue]);
}

void sub_100252A68(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setHasShinkansenTicket:](v4, "setHasShinkansenTicket:", [a3 BOOLValue]);
}

void sub_100252AAC(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setNeedsStationProcessing:]( v4,  "setNeedsStationProcessing:",  [a3 BOOLValue]);
}

void sub_100252AF0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  v11[0] = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  v11[1] = objc_opt_class(&OBJC_CLASS___NSString, v7);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v4,  0LL));

  -[PKFelicaTransitAppletState setEnrouteTransitTypes:](v5, "setEnrouteTransitTypes:", v10);
}

id sub_100252CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___FelicaTransitAppletState,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_100253134(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v3 = (void *)v2;
  if (*(void *)(a1 + 40))
  {
    if (v2)
    {
LABEL_3:
      id v4 = [*(id *)(a1 + 32) remoteProcessIdentifier];
      id v5 = objc_alloc_init(&OBJC_CLASS___PKInAppPaymentPresentationHostContext);
      [v5 setIdentifier:*(void *)(a1 + 48)];
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) developerTeamID]);
      [v5 setTeamID:v6];

      uint64_t v7 = PKBundleIdentifierForPID(v4);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      [v5 setBundleIdentifier:v8];

      uint64_t v9 = PDLocalizedAppNameForPID(v4);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      [v5 setApplicationName:v10];

      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteProcessApplicationIdentifier]);
      [v5 setApplicationIdentifier:v11];

      [v5 setSceneIdentifier:*(void *)(a1 + 56)];
      [v5 setSceneBundleIdentifier:*(void *)(a1 + 64)];
      [v5 setOmitPresentationTarget:*(unsigned __int8 *)(a1 + 105)];
      [v5 setAnalyticsSubject:*(void *)(a1 + 72)];
      [v5 setAnalyticsArchivedSessionToken:*(void *)(a1 + 80)];
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16LL);
      uint64_t v14 = *(unsigned __int8 *)(a1 + 104);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      void v18[2] = sub_100253320;
      v18[3] = &unk_100639688;
      uint64_t v15 = *(void *)(a1 + 88);
      id v19 = *(id *)(a1 + 96);
      sub_1001ADADC(v13, v12, v14, (uint64_t)v3, (uint64_t)v5, v15, (uint64_t)v18);

      goto LABEL_11;
    }
  }

  else
  {
    if (*(_BYTE *)(a1 + 104)) {
      BOOL v16 = v2 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      goto LABEL_3;
    }
  }

  uint64_t v17 = *(void *)(a1 + 96);
  if (v17) {
    (*(void (**)(uint64_t, void, void))(v17 + 16))(v17, 0LL, 0LL);
  }
LABEL_11:
}

uint64_t sub_100253320(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002534DC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [v3 remoteProcessIdentifier];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100253594;
  v7[3] = &unk_10063B3A0;
  id v8 = *(id *)(a1 + 56);
  [v2 inAppPaymentService:v3 registerPaymentListenerEndpoint:v4 forHostIdentifier:v5 processIdentifier:v6 completion:v7];
}

uint64_t sub_100253594(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10025370C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100253BCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_100253C18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100253C28(uint64_t a1)
{
}

void sub_100253C30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9 || [v8 statusCode] != (id)200)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v12 = v9;
    id v10 = *(id *)(v11 + 40);
    *(void *)(v11 + 40) = v12;
  }

  else
  {
    id v10 = [[PKPaymentCheckMerchantResponse alloc] initWithData:v7];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v10 isRegistered];
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v16 = 138412546;
    id v17 = v9;
    __int16 v18 = 1024;
    int v19 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "merchantStatusCheck complete with error: %@; result: %d",
      (uint8_t *)&v16,
      0x12u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100253D88(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_100253F38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if ((_DWORD)a2)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138412290;
        id v10 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "paymentServicesMerchantURL vending URL: %@",  (uint8_t *)&v9,  0xCu);
      }

      uint64_t v6 = *(void *)(a1 + 32);
    }

    (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v5);
  }
}

id sub_1002544FC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueID]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1002547BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100254858;
  v7[3] = &unk_10064FCB0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  [v6 cardInfoForMerchantIdentifier:v5 completion:v7];
}

void sub_100254858(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue([v5 primaryBrokerURL]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _paymentServicesMerchantURLForAPIType:4]);
  id v9 = [[PKAMPCardRegistrationResponse alloc] initWithCardData:v7 brokerURL:v10 paymentServicesURL:v8 error:v6];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100254C64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100254C78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5 && v6)
  {
    id v8 = *(void **)(*(void *)(a1 + 32) + 24LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100254D98;
    v9[3] = &unk_10064FD28;
    id v10 = v6;
    id v11 = v5;
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 64);
    [v8 performHandlerOnSharedWebServiceQueue:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_100254D98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKWrappedPayment);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) certificates]);
  [v4 setCertificates:v5];

  [v4 setEnrollmentSignature:*(void *)(a1 + 40)];
  id v6 = objc_alloc_init(&OBJC_CLASS___PKPaymentCompleteSessionRequest);
  [v6 setMerchantSession:*(void *)(a1 + 48)];
  [v6 setWrappedPayment:v4];
  [v6 setPass:*(void *)(a1 + 56)];
  [v6 setPaymentApplication:*(void *)(a1 + 64)];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) ampEnrollmentPinning]);
  [v6 setApplicationData:v7];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_100254ED0;
  v8[3] = &unk_10064FD00;
  id v9 = *(id *)(a1 + 72);
  [v3 completeSessionWithRequest:v6 serviceURL:0 completion:v8];
}

void sub_100254ED0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = 0LL;
  if (!a2 && a3)
  {
    id v5 = a3;
    id v6 = -[PKPayment initWithToken:](objc_alloc(&OBJC_CLASS___PKPayment), "initWithToken:", v5);

    id v4 = v6;
  }

  id v7 = v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100255108()
{
  if (qword_100707AB0 != -1) {
    dispatch_once(&qword_100707AB0, &stru_10064FD90);
  }
  return (id)qword_100707AB8;
}

void sub_10025514C(id a1)
{
  id v1 = sub_100255178(objc_alloc(&OBJC_CLASS___PDNFSecureXPCEventStreamManager));
  uint64_t v2 = (void *)qword_100707AB8;
  qword_100707AB8 = (uint64_t)v1;
}

id sub_100255178(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  v25.receiver = a1;
  v25.super_class = (Class)&OBJC_CLASS___PDNFSecureXPCEventStreamManager;
  id v1 = objc_msgSendSuper2(&v25, "init");
  if (v1)
  {
    dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
    dispatch_queue_t v4 = dispatch_queue_create("com.apple.passd.nf-events", v3);
    id v5 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = v4;

    xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.passd.nf-events", *((dispatch_queue_t *)v1 + 1), 1uLL);
    id v7 = (void *)*((void *)v1 + 2);
    *((void *)v1 + 2) = mach_service;

    id v8 = (_xpc_connection_s *)*((void *)v1 + 2);
    if (v8)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_100255358;
      handler[3] = &unk_10063C0A8;
      __int128 v24 = (os_log_s *)v1;
      xpc_connection_set_event_handler(v8, handler);
      id v9 = v24;
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDNFSecureXPCEventStreamManager: could not create listener connection.",  v22,  2u);
      }
    }

    *((_DWORD *)v1 + _Block_object_dispose((const void *)(v17 - 160), 8) = 0;
    uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
    id v12 = (void *)*((void *)v1 + 5);
    *((void *)v1 + 5) = v11;

    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
    id v14 = (void *)*((void *)v1 + 6);
    *((void *)v1 + 6) = v13;

    uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
    int v16 = (void *)*((void *)v1 + 7);
    *((void *)v1 + 7) = v15;

    uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
    __int16 v18 = (void *)*((void *)v1 + 8);
    *((void *)v1 + _Block_object_dispose((const void *)(v17 - 160), 8) = v17;

    uint64_t v19 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
    uint64_t v20 = (void *)*((void *)v1 + 9);
    *((void *)v1 + 9) = v19;
  }

  return v1;
}

void sub_100255358(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_1002554A4(*(void *)(a1 + 32), v3);
  }

  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDNFSecureXPCEventStreamManager: listener connection invalidated - no further peers will be accepted.",  (uint8_t *)&v10,  2u);
    }
  }

  else
  {
    id v5 = xpc_copy_description(v3);
    uint64_t v6 = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136446210;
      uint64_t v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDNFSecureXPCEventStreamManager: received error or other non-connection type in handler for listener: %{public}s.",  (uint8_t *)&v10,  0xCu);
    }

    free(v5);
  }
}

void sub_1002554A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDNFSecureXPCEventStreamManager: connecting peer %p.",  (uint8_t *)&v6,  0xCu);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDNFSecureXPCEventStreamManager: refusing connection for peer %p.",  (uint8_t *)&v6,  0xCu);
    }

    xpc_connection_cancel(v3);
  }
}

void sub_1002555AC(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 40) addObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_100255604(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 56) addObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_10025565C(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 56) removeObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_1002556B4(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 64) addObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_10025570C(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 64) removeObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_100255764(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 72) addObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_1002557BC(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = (os_unfair_lock_s *)(a1 + 32);
      id v4 = a2;
      os_unfair_lock_lock(v3);
      [*(id *)(a1 + 72) removeObject:v4];

      os_unfair_lock_unlock(v3);
    }
  }

void sub_100255814(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = nullsub_42;
    block[3] = &unk_1006392B0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

id PDNFSecureXPCEventListenerCreate()
{
  return sub_100255108();
}

void PDNFSecureXPCEventListenerActivate()
{
  id v0 = sub_100255108();
  uint64_t v1 = objc_claimAutoreleasedReturnValue(v0);
  dispatch_queue_attr_t v2 = (void *)v1;
  if (v1)
  {
    id v3 = *(_xpc_connection_s **)(v1 + 16);
    if (v3)
    {
      id v4 = v2;
      xpc_connection_activate(v3);
      dispatch_queue_attr_t v2 = v4;
    }
  }
}

void PDNFSecureXPCRegisterContactlessPresentationEventObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_1002555AC((uint64_t)v3, v1);
}

void PDNFSecureXPCRegisterFieldDetectEventObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_100255604((uint64_t)v3, v1);
}

void PDNFSecureXPCUnregisterFieldDetectObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10025565C((uint64_t)v3, v1);
}

void PDNFSecureXPCRegisterSecureElementEventObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_1002556B4((uint64_t)v3, v1);
}

void PDNFSecureXPCUnregisterSecureElementEventObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10025570C((uint64_t)v3, v1);
}

void PDNFSecureXPCRegisterAccessKeyEventObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_100255764((uint64_t)v3, v1);
}

void PDNFSecureXPCUnregisterCarKeyEventObserver(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_1002557BC((uint64_t)v3, v1);
}

void PDNFSecureXPCSimulateSecureEvent(void *a1)
{
  id v1 = a1;
  id v2 = sub_100255108();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_100255814((uint64_t)v3, v1);
}

void sub_1002561B0(uint64_t a1)
{
  if (![*(id *)(a1 + 32) updateReasonIsInitialDownload])
  {
    id v5 = [*(id *)(*(void *)(a1 + 40) + 16) transactionSourceTypeForTransactionSourceIdentifier:*(void *)(a1 + 48)];
    int v6 = objc_alloc_init(&OBJC_CLASS___PDTransactionNotificationControllerConfiguration);
    -[PDTransactionNotificationControllerConfiguration setTransactionSourceIdentifier:]( v6,  "setTransactionSourceIdentifier:",  *(void *)(a1 + 48));
    -[PDTransactionNotificationControllerConfiguration setTransactionSourceType:](v6, "setTransactionSourceType:", v5);
    if (v5 == (id)2)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) accountUserWithTransactionSourceIdentifier:*(void *)(a1 + 48)]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 accountIdentifier]);
      -[PDTransactionNotificationControllerConfiguration setAccountUser:](v6, "setAccountUser:", v8);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) passUniqueIdentifierWithAssociatedAccountIdentifier:v12]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) passWithUniqueIdentifier:v13]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 paymentPass]);
      -[PDTransactionNotificationControllerConfiguration setPaymentPass:](v6, "setPaymentPass:", v15);

      int v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) defaultPaymentApplicationForPassUniqueIdentifier:v13]);
      -[PDTransactionNotificationControllerConfiguration setPaymentApplication:](v6, "setPaymentApplication:", v16);
    }

    else if (v5 == (id)1)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) peerPaymentAccountForTransactionSourceIdentifier:*(void *)(a1 + 48)]);
      -[PDTransactionNotificationControllerConfiguration setAssociatedPeerPaymentAccount:]( v6,  "setAssociatedPeerPaymentAccount:",  v17);

      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) peerPaymentAccount]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v18 associatedPassUniqueID]);

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) passWithUniqueIdentifier:v8]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 paymentPass]);
      -[PDTransactionNotificationControllerConfiguration setPaymentPass:](v6, "setPaymentPass:", v20);

      id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) defaultPaymentApplicationForPassUniqueIdentifier:v8]);
      -[PDTransactionNotificationControllerConfiguration setPaymentApplication:](v6, "setPaymentApplication:", v12);
    }

    else
    {
      if (v5)
      {
LABEL_13:
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_1002565B8;
        v30[3] = &unk_10064FE30;
        void v30[4] = *(void *)(a1 + 40);
        uint64_t v21 = v6;
        id v31 = v21;
        uint64_t v22 = objc_retainBlock(v30);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        void v26[2] = sub_1002567E8;
        v26[3] = &unk_10063B060;
        int8x16_t v25 = *(int8x16_t *)(a1 + 32);
        id v23 = (id)v25.i64[0];
        int8x16_t v27 = vextq_s8(v25, v25, 8uLL);
        unsigned __int8 v28 = v21;
        id v29 = *(id *)(a1 + 56);
        __int128 v24 = (void (*)(void *, void *))v22[2];
        id v3 = v21;
        v24(v22, v26);

        goto LABEL_14;
      }

      id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) paymentApplicationForTransactionSourceIdentifier:*(void *)(a1 + 48)]);
      -[PDTransactionNotificationControllerConfiguration setPaymentApplication:](v6, "setPaymentApplication:", v7);

      id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) passUniqueIdentifierForTransactionSourceIdentifier:*(void *)(a1 + 48)]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) passWithUniqueIdentifier:v8]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 paymentPass]);
      -[PDTransactionNotificationControllerConfiguration setPaymentPass:](v6, "setPaymentPass:", v10);

      if (!v8)
      {
LABEL_12:

        goto LABEL_13;
      }

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) paymentOfferCatalog]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 criteriaWithType:1 passUniqueID:v8]);

      -[PDTransactionNotificationControllerConfiguration setInstallmentCriteria:](v6, "setInstallmentCriteria:", v12);
    }

    goto LABEL_12;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(23LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceIdentifier]);
    *(_DWORD *)__int128 buf = 138412290;
    id v33 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Transaction %@ was part of initial fetch, skip.",  buf,  0xCu);
  }

void sub_1002565B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10025665C;
  v9[3] = &unk_10064FE08;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v3;
  id v8 = v3;
  [v5 accountWithPreventingServerFetch:0 completion:v9];
}

void sub_10025665C(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(*(void *)(a1 + 40) + 32LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002566F0;
  v8[3] = &unk_10064FDE0;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [v4 preferencesWithCompletion:v8];
}

void sub_1002566F0(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  id v5[2] = sub_100256790;
  v5[3] = &unk_10064FDB8;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  [v4 _fetchFamilyMemberIfNeccessaryForConfiguration:v6 completion:v5];
}

uint64_t sub_100256790(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setFamilyMember:a2];
  [*(id *)(a1 + 32) setCurrentUser:v6];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002567E8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100256888;
  v6[3] = &unk_10063B060;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 56);
  dispatch_async(v3, v6);
}

id sub_100256888(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Computing notifications for transaction %@ with config %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 48) _updateFraudNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) config:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updatePeerPaymentNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) existingTransaction:*(void *)(a1 + 56) config:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updateTransactionNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) existingTransaction:*(void *)(a1 + 56) config:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updatePromotionRewardNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) existingTransaction:*(void *)(a1 + 56) config:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 48) _shouldDeleteNotificationForTransaction:*(void *)(a1 + 32)])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PDPassPaymentTransactionUserNotification notificationIdentifierForPaymentTransaction:]( &OBJC_CLASS___PDPassPaymentTransactionUserNotification,  "notificationIdentifierForPaymentTransaction:",  *(void *)(a1 + 32)));
    [*(id *)(*(void *)(a1 + 48) + 8) removeUserNotificationWithIdentifier:v6];
  }

  return [*(id *)(*(void *)(a1 + 48) + 8) updateWalletBadgeCount];
}

void sub_100256A30(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[PDPassPaymentTransactionUserNotification notificationIdentifierForPaymentTransaction:]( &OBJC_CLASS___PDPassPaymentTransactionUserNotification,  "notificationIdentifierForPaymentTransaction:",  *(void *)(a1 + 32)));
  [*(id *)(*(void *)(a1 + 40) + 8) removeUserNotificationWithIdentifier:v2];
  [*(id *)(*(void *)(a1 + 40) + 8) updateWalletBadgeCount];
}

id sub_100256B34(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enrouteTransitTypes]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 lastObject]);
  id v4 = [v3 integerValue];

  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = *(void **)(v6 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100256BD0;
  v9[3] = &unk_10063A508;
  void v9[4] = v6;
  void v9[5] = v4;
  return [v7 userNotificationsForPassUniqueIdentifier:v5 ofType:6 completion:v9];
}

void sub_100256BD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (id i = 0LL; i != v6; id i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 paymentTransaction]);
          id v11 = [v10 transitType];
          id v12 = *(id *)(a1 + 40);

          if (v11 == v12)
          {
            [v9 invalidateTransitBalance];
            [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v9];
          }

          else
          {
            [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v9];
          }
        }

        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v6);
    }
  }
}

void sub_100256E4C(uint64_t a1, void *a2)
{
  id v2 = a2;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    id v5 = 0LL;
    id v6 = 0LL;
    uint64_t v7 = *(void *)v19;
    while (1)
    {
      for (id i = 0LL; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v2);
        }
        uint64_t v9 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ([v9 isMe])
        {
          id v10 = v5;
          id v5 = v9;
          goto LABEL_18;
        }

        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSID]);
        id v12 = *(void **)(a1 + 32);
        id v10 = v11;
        id v13 = v12;
        if (v10 == v13)
        {

LABEL_17:
          id v10 = v6;
          id v6 = v9;
LABEL_18:

          continue;
        }

        __int128 v14 = v13;
        if (v10) {
          BOOL v15 = v13 == 0LL;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {

          goto LABEL_18;
        }

        unsigned int v16 = [v10 isEqualToString:v13];

        if (v16) {
          goto LABEL_17;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (!v4) {
        goto LABEL_23;
      }
    }
  }

  id v5 = 0LL;
  id v6 = 0LL;
LABEL_23:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_75:
}

  id v106 = (void *)objc_claimAutoreleasedReturnValue([v102 subtotalAmount]);
  if (v106)
  {

LABEL_77:
    __int128 v107 = (void *)objc_claimAutoreleasedReturnValue([v274 subtotalAmount]);
    __int128 v108 = PKCurrencyDecimalToStorageNumber(v107);
    id v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
    [v4 setObjectOrNull:v109 forKey:@"subtotal_amount"];

    __int128 v110 = v274;
    goto LABEL_81;
  }

  __int128 v112 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](self, "valueForProperty:", @"subtotal_amount"));

  __int128 v110 = v274;
  if (!v112) {
    goto LABEL_77;
  }
LABEL_81:
  id v113 = (void *)objc_claimAutoreleasedReturnValue([v110 amountAddedToAuth]);
  if (v113)
  {

LABEL_83:
    __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([v274 amountAddedToAuth]);
    id v115 = PKCurrencyDecimalToStorageNumber(v114);
    id v116 = (void *)objc_claimAutoreleasedReturnValue(v115);
    [v4 setObjectOrNull:v116 forKey:@"amount_added_to_auth"];

    id v117 = v274;
    goto LABEL_85;
  }

  id v118 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](self, "valueForProperty:", @"amount_added_to_auth"));

  id v117 = v274;
  if (!v118) {
    goto LABEL_83;
  }
LABEL_85:
  id v119 = (void *)objc_claimAutoreleasedReturnValue([v117 currencyCode]);
  id v120 = v119;
  if (v119) {
    id v121 = v96;
  }
  else {
    id v121 = 1;
  }
  if ((v121 & 1) != 0)
  {

    id v122 = v274;
    if (!v120) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }

  id v126 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](self, "valueForProperty:", @"currency_code"));

  id v122 = v274;
  if (!v126)
  {
LABEL_90:
    id v123 = (void *)objc_claimAutoreleasedReturnValue([v274 currencyCode]);
    [v4 safelySetObject:v123 forKey:@"currency_code"];

    id v122 = v274;
  }

void sub_1002578E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002579B0;
  v8[3] = &unk_100641570;
  void v8[4] = v4;
  id v9 = v5;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = *(id *)(a1 + 56);
  char v13 = *(_BYTE *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1002579B0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldCreateMerchantTransactionNotificationForTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)];
  unsigned int v3 = [*(id *)(a1 + 32) _shouldDeleteNotificationForTransaction:*(void *)(a1 + 40)];
  uint64_t v4 = *(void **)(a1 + 56);
  if (v2 && (v3 & 1) == 0)
  {
    if (!v4 || ![v4 isActive])
    {
      if (!*(_BYTE *)(a1 + 72)) {
        return;
      }
      uint64_t Object = PKLogFacilityTypeGetObject(23LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Creating new notification for transaction or update.",  v18,  2u);
      }

      [*(id *)(a1 + 64) setSuppressionBehavior:1];
      id v12 = *(void **)(a1 + 64);
      char v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) barcodeIdentifier]);
      [v12 setReissueBannerOnUpdate:v13 != 0];

      goto LABEL_24;
    }

    uint64_t v5 = PKLogFacilityTypeGetObject(23LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (!os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
    {
LABEL_23:

      [*(id *)(a1 + 64) setSuppressionBehavior:2];
      [*(id *)(a1 + 64) setReissueBannerOnUpdate:0];
LABEL_24:
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "insertUserNotification:", *(void *)(a1 + 64), *(void *)v18);
      return;
    }

    *(_WORD *)__int128 v18 = 0;
    id v7 = "Found an existing active user notification for transaction. Updating contents but not re-rolling banner.";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, v7, v18, 2u);
    goto LABEL_23;
  }

  if (v4)
  {
    if (!v3)
    {
      uint64_t v17 = PKLogFacilityTypeGetObject(6LL);
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(_WORD *)__int128 v18 = 0;
      id v7 = "Found an existing, active user notification. Updating contents but not re-rolling banner.";
      goto LABEL_22;
    }

    uint64_t v8 = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found an existing user notification which should be removed",  v18,  2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:*(void *)(a1 + 64)];
  }

  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(23LL);
    BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 v18 = 138412290;
      *(void *)&void v18[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Not creating notification for transaction update: %@",  v18,  0xCu);
    }
  }

void sub_100257D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) unansweredQuestions]);
  id v5 = [v4 count];

  if (a2 || !v5)
  {
    if (a2 && !v5) {
      [*(id *)(*(void *)(a1 + 40) + 8) removeUserNotification:*(void *)(a1 + 48)];
    }
  }

  else if (([*(id *)(a1 + 32) originatedByDevice] & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);

    if (v6)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(23LL);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v18 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Adding fraud user notification for transaction with a question %@",  buf,  0xCu);
      }

      id v10 = *(void **)(*(void *)(a1 + 40) + 24LL);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100257EFC;
      v14[3] = &unk_100639868;
      id v12 = *(id *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 40);
      id v15 = v12;
      uint64_t v16 = v13;
      [v10 accountWithIdentifier:v11 completion:v14];
    }
  }

id sub_100257EFC(uint64_t a1, void *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setAccountSuspended:", objc_msgSend(a2, "state") != (id)1);
  return [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 32)];
}

void sub_100258450(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10025851C;
  v8[3] = &unk_10064FEA8;
  void v8[4] = v4;
  id v9 = v5;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = *(id *)(a1 + 56);
  __int16 v13 = *(_WORD *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_10025851C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldCreatePromotionRewardNotificationForTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)];
  unsigned int v3 = [*(id *)(a1 + 32) _shouldDeleteNotificationForTransaction:*(void *)(a1 + 40)];
  uint64_t v4 = *(void **)(a1 + 56);
  if (!v2 || (v3 & 1) != 0)
  {
    if (v4)
    {
      if (!v3)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
        *(_WORD *)uint64_t v18 = 0;
        id v7 = "Found an existing, active user notification. Updating contents but not re-rolling banner.";
        goto LABEL_23;
      }

      uint64_t v8 = PKLogFacilityTypeGetObject(6LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found an existing user notification which should be removed",  v18,  2u);
      }

      [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:*(void *)(a1 + 64)];
    }

    else
    {
      uint64_t v14 = PKLogFacilityTypeGetObject(23LL);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t v18 = 138412290;
        *(void *)&void v18[4] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Not creating promotional reward notification for transaction update: %@",  v18,  0xCu);
      }
    }
  }

  else
  {
    if (v4 && [v4 isActive])
    {
      uint64_t v5 = PKLogFacilityTypeGetObject(23LL);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:

        id v12 = *(void **)(a1 + 64);
        uint64_t v13 = 2LL;
LABEL_25:
        objc_msgSend(v12, "setSuppressionBehavior:", v13, *(void *)v18);
        [*(id *)(a1 + 64) setReissueBannerOnUpdate:0];
        [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 64)];
        return;
      }

      *(_WORD *)uint64_t v18 = 0;
      id v7 = "Found an existing active user notification for promotional reward. Updating contents but not re-rolling banner.";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v18, 2u);
      goto LABEL_24;
    }

    if (*(_BYTE *)(a1 + 72) || *(_BYTE *)(a1 + 73))
    {
      uint64_t v10 = PKLogFacilityTypeGetObject(23LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Creating new notification for promotional reward or update.",  v18,  2u);
      }

      id v12 = *(void **)(a1 + 64);
      uint64_t v13 = 1LL;
      goto LABEL_25;
    }
  }

void sub_100258C18(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldDisplayNotificationForManuallyAcceptedPeerPaymentTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)]
    && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"person to person message accpeted"])
  {
    unsigned int v2 = &off_100634D70;
    if (*(_BYTE *)(a1 + 72)) {
      unsigned int v2 = off_100634D68;
    }
    unsigned int v3 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)[objc_alloc(*v2) initWithPaymentTransaction:*(void *)(a1 + 40) forPassUnique Identifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
    -[PDUserNotification setReissueBannerOnUpdate:](v3, "setReissueBannerOnUpdate:", 0LL);
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v3, "notificationIdentifier"));
    v70[0] = _NSConcreteStackBlock;
    v70[2] = sub_100259314;
    v70[3] = &unk_10064FEF8;
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    id v71 = v3;
    uint64_t v72 = v6;
    v70[1] = 3221225472LL;
    char v74 = *(_BYTE *)(a1 + 73);
    id v73 = v7;
    uint64_t v8 = v3;
    [v4 userNotificationWithIdentifier:v5 completion:v70];

    id v9 = v71;
    goto LABEL_11;
  }

  if (![*(id *)(a1 + 32) _shouldDisplayNotificationForReceivedPeerPaymentTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)]
    || ![*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"person to person message received"])
  {
    if (!*(_BYTE *)(a1 + 74)) {
      return;
    }
    if (*(_BYTE *)(a1 + 75)
      && [*(id *)(a1 + 40) transactionType] == (id)3
      && [*(id *)(a1 + 40) peerPaymentStatus] == (id)7
      && [*(id *)(a1 + 40) peerPaymentType] == (id)1
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"expired peer payment send notification"])
    {
      id v15 = -[PDPeerPaymentTransactionUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentTransactionExpiredUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64));
      -[PDUserNotification setReissueBannerOnUpdate:](v15, "setReissueBannerOnUpdate:", 0LL);
      uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 8LL);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v15, "notificationIdentifier"));
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472LL;
      v60[2] = sub_100259584;
      v60[3] = &unk_10064FEF8;
      char v64 = *(_BYTE *)(a1 + 73);
      uint64_t v18 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 32);
      id v61 = v18;
      uint64_t v62 = v19;
      id v63 = v15;
      uint64_t v8 = v15;
      [v16 userNotificationWithIdentifier:v17 completion:v60];

      id v9 = v61;
      goto LABEL_11;
    }

    if (!*(_BYTE *)(a1 + 74)) {
      return;
    }
    if ([*(id *)(a1 + 40) transactionType] == (id)3
      && [*(id *)(a1 + 40) peerPaymentStatus] == (id)6
      && [*(id *)(a1 + 40) peerPaymentType] == (id)1
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"rejected peer payment send notification"])
    {
      __int128 v20 = -[PDPeerPaymentTransactionUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentTransactionRejectedSendUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64));
      -[PDUserNotification setReissueBannerOnUpdate:](v20, "setReissueBannerOnUpdate:", 0LL);
      __int128 v21 = *(void **)(*(void *)(a1 + 32) + 8LL);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v20, "notificationIdentifier"));
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472LL;
      v55[2] = sub_100259658;
      v55[3] = &unk_10064FEF8;
      char v59 = *(_BYTE *)(a1 + 73);
      id v23 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v24 = *(void *)(a1 + 32);
      id v56 = v23;
      uint64_t v57 = v24;
      unsigned int v58 = v20;
      uint64_t v8 = v20;
      [v21 userNotificationWithIdentifier:v22 completion:v55];

      id v9 = v56;
      goto LABEL_11;
    }

    if (!*(_BYTE *)(a1 + 74)) {
      return;
    }
    if (*(_BYTE *)(a1 + 72)
      && [*(id *)(a1 + 40) transactionType] == (id)3
      && [*(id *)(a1 + 40) peerPaymentStatus] == (id)6
      && [*(id *)(a1 + 40) peerPaymentType] == (id)2
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"rejected peer payment receive notification"])
    {
      int8x16_t v25 = -[PDPeerPaymentTransactionUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentTransactionRejectedReceiveUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64));
      -[PDUserNotification setReissueBannerOnUpdate:](v25, "setReissueBannerOnUpdate:", 0LL);
      __int128 v26 = *(void **)(*(void *)(a1 + 32) + 8LL);
      int8x16_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v25, "notificationIdentifier"));
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_10025972C;
      v50[3] = &unk_10064FEF8;
      char v54 = *(_BYTE *)(a1 + 73);
      unsigned __int8 v28 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v29 = *(void *)(a1 + 32);
      __int128 v51 = v28;
      uint64_t v52 = v29;
      id v53 = v25;
      uint64_t v8 = v25;
      [v26 userNotificationWithIdentifier:v27 completion:v50];

      id v9 = v51;
      goto LABEL_11;
    }

    if (!*(_BYTE *)(a1 + 74) || !*(_BYTE *)(a1 + 75)) {
      return;
    }
    if ([*(id *)(a1 + 40) transactionSource] == (id)1
      && [*(id *)(a1 + 40) transactionStatus] == (id)2
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"peer payment contactless transaction declined notification"])
    {
      __int128 v30 = -[PDPeerPaymentTransactionUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentTransactionDeclinedUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64));
      -[PDUserNotification setReissueBannerOnUpdate:](v30, "setReissueBannerOnUpdate:", 0LL);
      id v31 = *(void **)(*(void *)(a1 + 32) + 8LL);
      id v32 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v30, "notificationIdentifier"));
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_100259800;
      v45[3] = &unk_10064FEF8;
      char v49 = *(_BYTE *)(a1 + 73);
      id v33 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v34 = *(void *)(a1 + 32);
      __int128 v46 = v33;
      uint64_t v47 = v34;
      __int128 v48 = v30;
      uint64_t v8 = v30;
      [v31 userNotificationWithIdentifier:v32 completion:v45];

      id v9 = v46;
      goto LABEL_11;
    }

    if (!*(_BYTE *)(a1 + 74) || !*(_BYTE *)(a1 + 75)) {
      return;
    }
    __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recurringPeerPayment]);
    if (!v43)
    {
LABEL_47:

      return;
    }

    id v44 = v43;
    [*(id *)(a1 + 40) peerPaymentStatus];
LABEL_46:
    __int128 v43 = v44;
    goto LABEL_47;
  }

  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v10 = -[PDPeerPaymentTransactionUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:familyMember:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64));
    if (!v10) {
      return;
    }
    goto LABEL_10;
  }

  id v44 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerPaymentAccount]);
  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerPaymentAccount]);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 lastUpdated]);
  [v36 timeIntervalSinceNow];
  double v38 = v37;

  if (v38 > -60.0)
  {
    __int128 v39 = objc_alloc(&OBJC_CLASS___PDPeerPaymentTransactionReceivedUserNotification);
    uint64_t v40 = *(void *)(a1 + 56);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerPaymentAccount]);
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 currentBalance]);
    uint64_t v10 = -[PDPeerPaymentTransactionReceivedUserNotification initWithPassUniqueIdentifier:accountBalance:]( v39,  "initWithPassUniqueIdentifier:accountBalance:",  v40,  v42);

    if (v10)
    {
LABEL_10:
      -[PDUserNotification setReissueBannerOnUpdate:](v10, "setReissueBannerOnUpdate:", 0LL);
      id v11 = *(void **)(*(void *)(a1 + 32) + 8LL);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[PDUserNotification notificationIdentifier](v10, "notificationIdentifier"));
      v65[0] = _NSConcreteStackBlock;
      v65[2] = sub_10025944C;
      v65[3] = &unk_10064FEF8;
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void **)(a1 + 40);
      uint64_t v66 = v10;
      uint64_t v67 = v13;
      v65[1] = 3221225472LL;
      char v69 = *(_BYTE *)(a1 + 73);
      id v68 = v14;
      uint64_t v8 = v10;
      [v11 userNotificationWithIdentifier:v12 completion:v65];

      id v9 = v66;
LABEL_11:
    }
  }

void sub_100259314(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 isActive])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Found an existing active user notification for accepted transaction. Updating contents but not re-rolling banner.",  (uint8_t *)&v10,  2u);
    }

    [*(id *)(a1 + 32) setSuppressionBehavior:2];
LABEL_10:
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 32)];
    goto LABEL_11;
  }

  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v7 = PKLogFacilityTypeGetObject(23LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Adding user notification for accepted transaction %@",  (uint8_t *)&v10,  0xCu);
    }

    goto LABEL_10;
  }