LABEL_14:
    LOBYTE(v13) = 0;
LABEL_15:

    goto LABEL_16;
  }

  LOBYTE(v13) = 0;
LABEL_16:

  return v13;
}

  return v12;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v14;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

__CFString *NSLocalizedStringFromLACBiometryType(uint64_t a1)
{
  switch(a1)
  {
    case 4LL:
      +[LACLocalization opticID](&OBJC_CLASS___LACLocalization, "opticID");
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 2LL:
      +[LACLocalization faceID](&OBJC_CLASS___LACLocalization, "faceID");
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 1LL:
      +[LACLocalization touchID](&OBJC_CLASS___LACLocalization, "touchID");
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v1 = &stru_18A36E1E8;
      break;
  }

  return v1;
}

id getBKSAlternateSystemAppClass()
{
  uint64_t v4 = 0LL;
  v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  v0 = (void *)getBKSAlternateSystemAppClass_softClass;
  uint64_t v7 = getBKSAlternateSystemAppClass_softClass;
  if (!getBKSAlternateSystemAppClass_softClass)
  {
    v3[0] = MEMORY[0x1895F87A8];
    v3[1] = 3221225472LL;
    v3[2] = __getBKSAlternateSystemAppClass_block_invoke;
    v3[3] = &unk_18A3686E0;
    v3[4] = &v4;
    __getBKSAlternateSystemAppClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18921E420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class __getBKSAlternateSystemAppClass_block_invoke(uint64_t a1)
{
  if (!BackBoardServicesLibraryCore_frameworkLibrary) {
    BackBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  Class result = objc_getClass("BKSAlternateSystemApp");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  getBKSAlternateSystemAppClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

LABEL_9:
  return v13;
}

    v4[2](v4, 0LL);
    goto LABEL_10;
  }

  if ((-[LACDTODeviceSetupInfoProvider hasCompletedSetup](self->_device, "hasCompletedSetup") & 1) == 0)
  {
    LACLogDTOLocation();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(location[0]) = 0;
      uint64_t v7 = "Prewarm skipped because device has not finished setup";
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  objc_initWeak(location, self);
  featureStateProvider = self->_featureStateProvider;
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  v8[2] = __65__LACDTOLocationPrewarmStrategy_checkNeedsPrewarmWithCompletion___block_invoke;
  v8[3] = &unk_18A368748;
  objc_copyWeak(&v10, location);
  v9 = v4;
  -[LACDTOFeatureStateProviding fetchStateWithCompletion:](featureStateProvider, "fetchStateWithCompletion:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(location);
LABEL_10:
}

    goto LABEL_10;
  }

  if (v4 == 3 && !v3)
  {
    uint64_t v6 = AMFIProfileCommitProfile();
    LACLogPreboard();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 67109120;
      v15 = v6;
      v8 = "Committing UPP profile value: nil with result: %u";
      v9 = v7;
      v10 = 8;
LABEL_8:
      _os_log_impl(&dword_189219000, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, v10);
      goto LABEL_9;
    }

    goto LABEL_9;
  }

  LOBYTE(v15) = 0;
LABEL_10:

LABEL_13:
  return v15;
}
    v17 = +[LACStorageError errorWithCode:debugDescription:]( &OBJC_CLASS___LACStorageError,  "errorWithCode:debugDescription:",  0LL,  @"Storage policy not satisfied.");
    v11[2](v11, 0LL, v17);
LABEL_10:

    goto LABEL_11;
  }

  v11[2](v11, v21[5], 0LL);
LABEL_11:
  _Block_object_dispose(&v20, 8);
}

  aks_prederived_free(0LL);
  return v17;
}

  memset_s(__s, v7, 0, v7);
  return v4;
}

LABEL_15:
        goto LABEL_16;
      }
      v10 = -[LACEvaluationResult request](self, "request");
      v17 = [v7 request];
      v12 = (void *)v17;
      v13 = -[LACEvaluationResult request](self, "request");
      v14 = [v7 request];
    }
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

LABEL_13:
    v18 = (void *)v14;
    v19 = [v13 isEqual:v14];

    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_16:
    v15 = 1;
    goto LABEL_17;
  }

  v15 = 0;
LABEL_18:

  return v15;
}

  return v15;
}

    v9 = 0LL;
    goto LABEL_14;
  }

  if (a3 != 17 && a3 != 1) {
    goto LABEL_13;
  }
  if (a4 != 2) {
    goto LABEL_13;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_13;
  }
  v8 = &LACPolicyDoublePressBypass;
LABEL_10:
  else {
    v9 = 0LL;
  }
LABEL_14:

  return v9;
}

    Class result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    Class result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

      if (v13 == v7) {
        goto LABEL_18;
      }
      v9 = ++v8 - 4;
      if ((a2 & 0xC000000000000001LL) != 0) {
        goto LABEL_4;
      }
    }

    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }

  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }

  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }

  return v4;
}
}

void sub_18921F650( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

LABEL_11:
}

    v13 = 0;
LABEL_12:

    goto LABEL_13;
  }

  v13 = 0;
LABEL_13:

  return v13;
}

  return v14;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1LL);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  return v15;
}

  return v12;
}

void sub_18921F7D0(_Unwind_Exception *a1)
{
}

void sub_18921FFDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1892204BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1892206D8(_Unwind_Exception *a1)
{
}

LABEL_7:
    goto LABEL_8;
  }

  if (v4)
  {
    LACLogDTOStorage();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      __60__LACDTOKVStoreMigrationController_performMigrationIfNeeded__block_invoke_cold_1((uint64_t)v5, v6);
    }
    goto LABEL_7;
  }
}

  v15 = 0;
LABEL_8:

LABEL_10:
  return v15;
}

  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

LABEL_8:
}

  v8 = 0;
LABEL_9:

  return v8;
}
}

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
}

  if (a5)
  {
    if (v14) {
      v11 = v16;
    }
    else {
      v11 = 0LL;
    }
    Class result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(a5 + 16))(a5, v10, v11);
  }

  if ((_DWORD)v10) {
    v12 = 70;
  }
  else {
    v12 = 10;
  }
  if (v12 >= gACMLoggingLevel) {
    return printf( "%s: %s: returning, err = %ld.\n",  "ACM",  "LibCall_ACMGlobalContextCredentialGetProperty_Block",  (int)v10);
  }
  return result;
}

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

void sub_189221100( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_189222FFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_189223368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1892252E0(_Unwind_Exception *a1)
{
}

void sub_1892254A4(_Unwind_Exception *a1)
{
}

void sub_189225970(_Unwind_Exception *a1)
{
}

void OUTLINED_FUNCTION_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_189226220( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1892264E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_189226D40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_189227B5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

LABEL_10:
  v12 = AMFICompleteSecurityBootMode();
  LACLogPreboard();
  v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 67109376;
    v15 = v5;
    v16 = 1024;
    v17 = v12;
    _os_log_impl( &dword_189219000,  v13,  OS_LOG_TYPE_DEFAULT,  "Completing boot mode: %u with result: %u",  (uint8_t *)&v14,  0xEu);
  }
}
}

    v12 = 0;
LABEL_16:

    goto LABEL_17;
  }

  v12 = 0;
LABEL_17:

  return v12;
}

  v16(v6, v2);
}

  return v13;
}

  return v11;
}

  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v7;
}

    v13 = v12 | !v11;
  }

  return v13 & 1;
}

void sub_189228890(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void __destructor_8_s0_s8_s16(id *a1)
{
}

void sub_189228BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef NSStringFromLADTOEventRawValue(uint64_t a1)
{
  else {
    return off_18A368D68[a1 - 1];
  }
}

void sub_189229348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_189229778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_189229B18(_Unwind_Exception *a1)
{
}

void sub_189229DEC(_Unwind_Exception *a1)
{
}

CFStringRef NSStringFromLACDTOKVStoreKey(uint64_t a1)
{
  else {
    return off_18A368EE0[a1 - 1];
  }
}

void OUTLINED_FUNCTION_0_0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_18922A5E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_18922AA4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_18922AF80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_18922B1A8(_Unwind_Exception *a1)
{
}

void sub_18922B344(_Unwind_Exception *a1)
{
}

void sub_18922C330(_Unwind_Exception *a1)
{
}

void sub_18922C4CC(_Unwind_Exception *a1)
{
}

void sub_18922C7F4(_Unwind_Exception *a1)
{
}

void sub_18922C900(_Unwind_Exception *a1)
{
}

void sub_18922CAAC(_Unwind_Exception *a1)
{
}

CFStringRef NSStringFromLACDTORatchetStateRawValue(uint64_t a1)
{
  else {
    return off_18A369110[a1 - 1];
  }
}

void sub_18922D750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

CFStringRef NSStringFromLACCompanionType(uint64_t a1)
{
  id v1 = &stru_18A36E1E8;
  if (a1 == 1) {
    id v1 = @"Watch";
  }
  if (a1 == 2) {
    return @"Mac";
  }
  else {
    return v1;
  }
}

CFStringRef NSStringFromLACKeyBagState(uint64_t a1)
{
  else {
    return off_18A369158[a1 - 1];
  }
}

void sub_18922F558(_Unwind_Exception *a1)
{
}

void sub_18922FBA8(_Unwind_Exception *a1)
{
}

void sub_18922FCD0(_Unwind_Exception *a1)
{
}

uint64_t LACDTOLostModeFetchStrategyFromRequest(void *a1)
{
  id v1 = a1;
  if (LACPolicyIsLocationBasedPolicy([v1 policy])
    && [v1 isDTOEnabled]
    && ([v1 biometryWatchdogPack],
        uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(),
        int v3 = [v2 isBarking],
        v2,
        v3))
  {
    [v1 options];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189607968] numberWithInteger:1061];
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v4 objectForKey:v5];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    int v7 = [v6 BOOLValue];

    [v1 biometryWatchdogPack];
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = v8;
    if (v7) {
      [v8 biometryWatchdogGlobal];
    }
    else {
      [v8 biometryWatchdogDTO];
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    int v13 = [v12 isBarking];

    uint64_t v10 = v13 ^ 1u;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  return v10;
}

CFStringRef NSStringFromLACDTOLostModeFetchStrategy(uint64_t a1)
{
  if (a1) {
    return @"Skip";
  }
  else {
    return @"BestEffort";
  }
}

void OUTLINED_FUNCTION_0_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_18923074C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

LABEL_18:
  return v12;
}

  return v12;
}

  v34 = objc_msgSend(v16, sel_error);
  if (!v34)
  {
LABEL_22:
    a3(v16);
    goto LABEL_23;
  }

  v35 = v34;
  v36 = a3;
  v37 = (void *)objc_opt_self();
  v38 = (void *)_convertErrorToNSError(_:)();
  LODWORD(v37) = objc_msgSend(v37, sel_error_hasCode_subcode_, v38, -1, 33);

  if (!(_DWORD)v37)
  {

    a3 = v36;
    goto LABEL_22;
  }

  v39 = *(void **)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_uiPresenter);
  v40 = (void *)swift_allocObject();
  v40[2] = v36;
  v40[3] = a4;
  v40[4] = v16;
  aBlock[4] = partial apply for closure #1 in LACOnenessControllerModel.postProcessRequest(_:result:completion:);
  aBlock[5] = v40;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_3;
  v41 = _Block_copy(aBlock);
  swift_retain();
  v42 = v16;
  swift_release();
  objc_msgSend(v39, sel_presentUIForIdentifier_request_completion_, 3, a1, v41);
  _Block_release(v41);

  v16 = v35;
LABEL_23:
}

  uint64_t v6 = v15;
LABEL_19:
  uint64_t v10 = (v14 - 1) & v14;
  for (i = __clz(__rbit64(v14)) + (v6 << 6); ; i = v11 | (v6 << 6))
  {
    v19 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    swift_retain();
    v16 = v5(&v19);
    if (v3) {
      break;
    }
    if ((v16 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      Class result = specialized ContiguousArray._endMutation()();
      if (!v10) {
        goto LABEL_7;
      }
    }

    else
    {
      Class result = swift_release();
      if (!v10) {
        goto LABEL_7;
      }
    }

  swift_bridgeObjectRelease();
  return a1 & 1;
}

void sub_189231FEC(_Unwind_Exception *a1)
{
}

void sub_189232160(_Unwind_Exception *a1)
{
}

void sub_1892323A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

double LACDTOLostModeStateMaxAgeSeconds(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 doubleValue];
  double v3 = v2;

  return v3;
}

void sub_1892332D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_18923360C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1892339D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_189233F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

CFStringRef NSStringFromLACPasscodeType(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_18A369578[a1];
  }
}

uint64_t LACPasscodeTypeLength(uint64_t a1)
{
  uint64_t v1 = 6LL;
  if (a1 != 1) {
    uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (a1) {
    return v1;
  }
  else {
    return 4LL;
  }
}

CFStringRef NSStringFromLACPolicy(uint64_t a1)
{
  uint64_t v1 = a1 - 1003;
  Class result = @"LACPolicyAccessoryAuthorization";
  switch(v1)
  {
    case 0LL:
      Class result = @"LACPolicyHumanPresence";
      break;
    case 1LL:
      Class result = @"LACPolicyStockholm";
      break;
    case 2LL:
      Class result = @"LACPolicyOslo";
      break;
    case 3LL:
      Class result = @"LACPolicyOsloWithPIN";
      break;
    case 4LL:
      Class result = @"LACPolicyTouchIDEnrollment";
      break;
    case 5LL:
      Class result = @"LACPolicyBiometricUserIdentification";
      break;
    case 6LL:
      Class result = @"LACPolicyTokenAuthentication";
      break;
    case 7LL:
      Class result = @"LACPolicySoftwareUpdate";
      break;
    case 8LL:
      Class result = @"LACPolicyUserAuthenticationWithPasscodeRecovery";
      break;
    case 9LL:
      Class result = @"LACPolicyContinuityUnlock";
      break;
    case 10LL:
      Class result = @"LACPolicyTrustComputer";
      break;
    case 11LL:
      Class result = @"LACPolicyBoot";
      break;
    case 12LL:
      Class result = @"LACPolicyDoublePressBypass";
      break;
    case 13LL:
      Class result = @"LACPolicyPrague";
      break;
    case 14LL:
      Class result = @"LACPolicyPragueWithPIN";
      break;
    case 15LL:
      Class result = @"LACPolicyMarzipan";
      break;
    case 16LL:
      Class result = @"LACPolicyMarzipanWithPIN";
      break;
    case 17LL:
      Class result = @"LACPolicyPraguePrerequisite";
      break;
    case 18LL:
      return result;
    case 19LL:
      Class result = @"LACPolicyIDV";
      break;
    case 20LL:
      Class result = @"LACPolicyDeviceOwner";
      break;
    case 21LL:
      Class result = @"LACPolicyDeveloperModeControl";
      break;
    case 22LL:
      Class result = @"LACPolicyLocationBasedDeviceOwnerAuthentication";
      break;
    case 23LL:
      Class result = @"LACPolicyLocationBasedDeviceOwnerAuthenticationWithBiometricRatchet";
      break;
    case 24LL:
      Class result = @"LACPolicyDeviceAdminAuthentication";
      break;
    case 25LL:
      Class result = @"LACPolicyLocationBasedTrustComputer";
      break;
    default:
      switch((unint64_t)@"LACPolicyAccessoryAuthorization")
      {
        case 1uLL:
          Class result = @"LACPolicyDeviceOwnerAuthenticationWithBiometrics";
          break;
        case 2uLL:
          Class result = @"LACPolicyDeviceOwnerAuthentication";
          break;
        case 3uLL:
          Class result = @"LACPolicyDeviceOwnerAuthenticationWithCompanion";
          break;
        case 4uLL:
          Class result = @"LACPolicyDeviceOwnerAuthenticationWithBiometricsOrCompanion";
          break;
        case 5uLL:
          Class result = @"LACPolicyDeviceOwnerAuthenticationWithWristDetection";
          break;
        default:
          Class result = @"<UNKNOWN>";
          break;
      }

      break;
  }

  return result;
}

uint64_t LACPolicyIsLocationBasedPolicy(uint64_t a1)
{
  return ((unint64_t)(a1 - 1025) < 4) & (0xBu >> ((a1 - 1) & 0xF));
}

CFStringRef NSStringFromLACEnvironmentMechanismApprovalState(uint64_t a1)
{
  else {
    return off_18A3695E0[a1 + 1];
  }
}

void OUTLINED_FUNCTION_0_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_189235DA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_18923636C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

LABEL_21:
  }

  else
  {
    v11 = 1;
  }

  return v11;
}

    uint64_t v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(void *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(void *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }

    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }

    Class result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    v28 = -1LL << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          v30 = 0LL;
        }
        v31 |= v33;
        v34 = *(void *)(v12 + 8 * v30);
      }

      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    v16 = *(void *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    Class result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }

  swift_release();
  v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v22 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_41:
  Class result = swift_release();
  *double v3 = v7;
  return result;
}

    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(void *)(v8 + 72);
    v29 = *(void *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }

    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
    Class result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1LL << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        v36 = v33 == v35;
        if (v33 == v35) {
          v33 = 0LL;
        }
        v34 |= v36;
        v37 = *(void *)(v18 + 8 * v33);
      }

      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    Class result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))( *(void *)(v13 + 48) + v28 * v21,  v10,  v7);
    *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
    ++*(void *)(v13 + 16);
  }

  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  v38 = 1LL << *(_BYTE *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v25 = -1LL << v38;
  }
  *(void *)(v11 + 16) = 0LL;
LABEL_41:
  Class result = swift_release();
  void *v5 = v13;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      Class result = Hasher._finalize()();
      v25 = -1LL << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          v30 = v27 == v29;
          if (v27 == v29) {
            v27 = 0LL;
          }
          v28 |= v30;
          v31 = *(void *)(v11 + 8 * v27);
        }

        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      id *v15 = v23;
      v15[1] = v22;
      Class result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }

  Class result = swift_release();
  *double v3 = v7;
  return result;
}

    int v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v13 + 16) + 1LL,  1,  (void *)v13);
    void *v12 = v13;
    goto LABEL_9;
  }

  v23 = LACLogDefault();
  Logger.init(_:)();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v24 = (os_log_s *)Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  v39 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v40 = a1;
    v27 = v26;
    v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)v27 = 67240450;
    v38 = a3;
    LODWORD(v43) = objc_msgSend(v40, sel_identifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v27 + _Block_object_dispose(va, 8) = 2080;
    v36[1] = (os_log_t)(v27 + 10);
    v28 = objc_msgSend(v14, sel_description);
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36[0] = v24;
    v30 = v29;
    v32 = v31;

    a3 = v38;
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    v33 = v36[0];
    _os_log_impl( &dword_189219000,  v36[0],  (os_log_type_t)v39,  "Skipping processing of request rid: %{public}u by %s",  (uint8_t *)v27,  0x12u);
    v34 = v37;
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v34, -1LL, -1LL);
    v35 = v27;
    a1 = v40;
    MEMORY[0x1895E56D4](v35, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
  }

  (*((void (**)(unint64_t *, uint64_t))v10 + 1))(v12, v9);
  LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, a2 + 1, a3, v41);
  swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_0_3( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

CFStringRef NSStringFromLACDTOLocationPrewarmResult(uint64_t a1)
{
  if (a1) {
    return @"Skipped";
  }
  else {
    return @"Completed";
  }
}

void OUTLINED_FUNCTION_0_4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

__CFString *NSStringFromLACLightweightUIMode(unint64_t a1)
{
  if (a1 < 3) {
    return off_18A3697B8[a1];
  }
  objc_msgSend(NSString, "stringWithFormat:", @"unknown mode: %d", a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t LACLightweightUIModeFromOptions(void *a1)
{
  id v1 = a1;
  [MEMORY[0x189607968] numberWithInteger:1087];
  double v2 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 objectForKeyedSubscript:v2];
  double v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    uint64_t v4 = [v3 integerValue];
  }

  else
  {
    [v1 objectForKeyedSubscript:&unk_18A39F318];
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = [v5 BOOLValue];
  }

  return v4;
}

LABEL_32:
    v12 = 0;
LABEL_33:

    goto LABEL_34;
  }

  v12 = 0;
LABEL_34:

  return v12;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                      acm_mem_free_info( "<data>",  v19,  v18,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  763,  "DeserializeProcessAcl");
                      acm_mem_free_data(v19, v18);
                      if (v32)
                      {
                        acm_mem_free_info( "<data>",  v32,  v37,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  766,  "DeserializeProcessAcl");
                        acm_mem_free_data(v32, v37);
                      }

                      goto LABEL_34;
                    }

                    uint64_t v10 = 4294967292LL;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_189239D78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_189239E50(_Unwind_Exception *a1)
{
}

void sub_18923A060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_18923A5A0(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void LACDarwinNotificationCenterCallBack(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0) {
    [v4 _notifyObserversAboutNotification:a3];
  }
}

void sub_18923A7BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_22:
      int v13 = 0LL;
      goto LABEL_23;
    }

    objc_msgSend( MEMORY[0x189607968], "numberWithChar:", *(char *)objc_msgSend(v9, "bytes"));
    v14 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
    int v13 = v14;
    goto LABEL_23;
  }

  if (a4 == 14)
  {
    -[LACStorageObjectEncoder _lastBioAuthDataToNumber:](self, "_lastBioAuthDataToNumber:", v9);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }

  if (a4 != 12)
  {
    if ([v9 length] == 1)
    {
      objc_msgSend( MEMORY[0x189607968], "numberWithBool:", *(unsigned __int8 *)objc_msgSend(v9, "bytes"));
      v14 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }

    if (a5)
    {
      v15 = @"Expected BOOL in NSNumber";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  -[LACStorageObjectEncoder _lastBioAuthDataToNumber:](self, "_lastBioAuthDataToNumber:", v9);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    v12 = (unint64_t)[v10 integerValue] < 0x5265C01;
    [MEMORY[0x189607968] numberWithBool:v12];
    int v13 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    int v13 = (void *)MEMORY[0x189604A80];
  }

LABEL_23:
  return v13;
}

      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      *v11 = v9;
      goto LABEL_9;
    }
  }

  else
  {
    v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    _Block_copy(a4);
    _Block_copy(a4);
    if (v14 > a2) {
      goto LABEL_3;
    }
  }

  v37 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
  ((void (**)(void, id))a4)[2](a4, v37);
  swift_release();

  _Block_release(a4);
}

      v8 = 0xFFFFFFFFLL;
      goto LABEL_35;
    }

    v22 = 32;
    if (*a7 < 0x20) {
      goto LABEL_38;
    }
    memset(__s, 0, sizeof(__s));
    if ((a3 & 4) != 0)
    {
      if (a5 != 64) {
        goto LABEL_38;
      }
      generate_unwrap_shared_key_curve25519((__int128 *)a4, a1 + 4, (__int128 *)(a1 + 36));
      ccaes_cbc_decrypt_mode();
      firebloom_cbc_one_shot_f();
    }

    else
    {
      if (a5 != 72) {
        goto LABEL_38;
      }
      generate_unwrap_shared_key_curve25519((__int128 *)a4, a1 + 4, (__int128 *)(a1 + 36));
      if (a3 < 0) {
        goto LABEL_22;
      }
      v21 = 32;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        v18 = a4 + 4;
        v19 = v24;
      }

      else
      {
        v18 = a4 + 4;
        v19 = __s;
      }

      if (rfc3394_unwrap_legacy((uint64_t)v19, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, v18, 0x28u, a6, &v21))
      {
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_40:
        v8 = 4294967277LL;
        goto LABEL_35;
      }
    }

    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    v8 = 0LL;
    *a7 = 32;
  }

id LACLogACM()
{
  if (LACLogACM_onceToken != -1) {
    dispatch_once(&LACLogACM_onceToken, &__block_literal_global_12);
  }
  return (id)LACLogACM___logObj;
}

void __LACLogACM_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "ACM");
  uint64_t v1 = (void *)LACLogACM___logObj;
  LACLogACM___logObj = (uint64_t)v0;
}

id LACLogAlertUI()
{
  if (LACLogAlertUI_onceToken != -1) {
    dispatch_once(&LACLogAlertUI_onceToken, &__block_literal_global_3_0);
  }
  return (id)LACLogAlertUI___logObj;
}

void __LACLogAlertUI_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "AlertUI");
  uint64_t v1 = (void *)LACLogAlertUI___logObj;
  LACLogAlertUI___logObj = (uint64_t)v0;
}

id LACLogBiometry()
{
  if (LACLogBiometry_onceToken != -1) {
    dispatch_once(&LACLogBiometry_onceToken, &__block_literal_global_5_0);
  }
  return (id)LACLogBiometry___logObj;
}

void __LACLogBiometry_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Biometry");
  uint64_t v1 = (void *)LACLogBiometry___logObj;
  LACLogBiometry___logObj = (uint64_t)v0;
}

id LACLogContext()
{
  if (LACLogContext_onceToken != -1) {
    dispatch_once(&LACLogContext_onceToken, &__block_literal_global_7_1);
  }
  return (id)LACLogContext___logObj;
}

void __LACLogContext_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Context");
  uint64_t v1 = (void *)LACLogContext___logObj;
  LACLogContext___logObj = (uint64_t)v0;
}

id LACLogDefault()
{
  if (LACLogDefault_onceToken != -1) {
    dispatch_once(&LACLogDefault_onceToken, &__block_literal_global_9_1);
  }
  return (id)LACLogDefault___logObj;
}

void __LACLogDefault_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Default");
  uint64_t v1 = (void *)LACLogDefault___logObj;
  LACLogDefault___logObj = (uint64_t)v0;
}

id LACLogEnvironment()
{
  if (LACLogEnvironment_onceToken != -1) {
    dispatch_once(&LACLogEnvironment_onceToken, &__block_literal_global_11_0);
  }
  return (id)LACLogEnvironment___logObj;
}

void __LACLogEnvironment_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Environment");
  uint64_t v1 = (void *)LACLogEnvironment___logObj;
  LACLogEnvironment___logObj = (uint64_t)v0;
}

id LACLogFaceIDUI()
{
  if (LACLogFaceIDUI_onceToken != -1) {
    dispatch_once(&LACLogFaceIDUI_onceToken, &__block_literal_global_13);
  }
  return (id)LACLogFaceIDUI___logObj;
}

void __LACLogFaceIDUI_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "FaceIDUI");
  uint64_t v1 = (void *)LACLogFaceIDUI___logObj;
  LACLogFaceIDUI___logObj = (uint64_t)v0;
}

id LACLogGestalt()
{
  if (LACLogGestalt_onceToken != -1) {
    dispatch_once(&LACLogGestalt_onceToken, &__block_literal_global_15_0);
  }
  return (id)LACLogGestalt___logObj;
}

void __LACLogGestalt_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Gestalt");
  uint64_t v1 = (void *)LACLogGestalt___logObj;
  LACLogGestalt___logObj = (uint64_t)v0;
}

id LACLogKeybag()
{
  if (LACLogKeybag_onceToken != -1) {
    dispatch_once(&LACLogKeybag_onceToken, &__block_literal_global_17);
  }
  return (id)LACLogKeybag___logObj;
}

void __LACLogKeybag_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Keybag");
  uint64_t v1 = (void *)LACLogKeybag___logObj;
  LACLogKeybag___logObj = (uint64_t)v0;
}

id LACLogNotifications()
{
  if (LACLogNotifications_onceToken != -1) {
    dispatch_once(&LACLogNotifications_onceToken, &__block_literal_global_19);
  }
  return (id)LACLogNotifications___logObj;
}

void __LACLogNotifications_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Notifications");
  uint64_t v1 = (void *)LACLogNotifications___logObj;
  LACLogNotifications___logObj = (uint64_t)v0;
}

id LACLogPasscodeService()
{
  if (LACLogPasscodeService_onceToken != -1) {
    dispatch_once(&LACLogPasscodeService_onceToken, &__block_literal_global_21_0);
  }
  return (id)LACLogPasscodeService___logObj;
}

void __LACLogPasscodeService_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "PasscodeService");
  uint64_t v1 = (void *)LACLogPasscodeService___logObj;
  LACLogPasscodeService___logObj = (uint64_t)v0;
}

id LACLogPasscodeUI()
{
  if (LACLogPasscodeUI_onceToken != -1) {
    dispatch_once(&LACLogPasscodeUI_onceToken, &__block_literal_global_23);
  }
  return (id)LACLogPasscodeUI___logObj;
}

void __LACLogPasscodeUI_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "PasscodeUI");
  uint64_t v1 = (void *)LACLogPasscodeUI___logObj;
  LACLogPasscodeUI___logObj = (uint64_t)v0;
}

id LACLogProcessor()
{
  if (LACLogProcessor_onceToken != -1) {
    dispatch_once(&LACLogProcessor_onceToken, &__block_literal_global_25);
  }
  return (id)LACLogProcessor___logObj;
}

void __LACLogProcessor_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Processor");
  uint64_t v1 = (void *)LACLogProcessor___logObj;
  LACLogProcessor___logObj = (uint64_t)v0;
}

id LACLogSessions()
{
  if (LACLogSessions_onceToken != -1) {
    dispatch_once(&LACLogSessions_onceToken, &__block_literal_global_27);
  }
  return (id)LACLogSessions___logObj;
}

void __LACLogSessions_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Sessions");
  uint64_t v1 = (void *)LACLogSessions___logObj;
  LACLogSessions___logObj = (uint64_t)v0;
}

id LACLogSharedMode()
{
  if (LACLogSharedMode_onceToken != -1) {
    dispatch_once(&LACLogSharedMode_onceToken, &__block_literal_global_29);
  }
  return (id)LACLogSharedMode___logObj;
}

void __LACLogSharedMode_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "SharedMode");
  uint64_t v1 = (void *)LACLogSharedMode___logObj;
  LACLogSharedMode___logObj = (uint64_t)v0;
}

id LACLogStorage()
{
  if (LACLogStorage_onceToken != -1) {
    dispatch_once(&LACLogStorage_onceToken, &__block_literal_global_31);
  }
  return (id)LACLogStorage___logObj;
}

void __LACLogStorage_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Storage");
  uint64_t v1 = (void *)LACLogStorage___logObj;
  LACLogStorage___logObj = (uint64_t)v0;
}

id LACLogTask()
{
  if (LACLogTask_onceToken != -1) {
    dispatch_once(&LACLogTask_onceToken, &__block_literal_global_33);
  }
  return (id)LACLogTask___logObj;
}

void __LACLogTask_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Task");
  uint64_t v1 = (void *)LACLogTask___logObj;
  LACLogTask___logObj = (uint64_t)v0;
}

id LACLogTests()
{
  if (LACLogTests_onceToken != -1) {
    dispatch_once(&LACLogTests_onceToken, &__block_literal_global_35);
  }
  return (id)LACLogTests___logObj;
}

void __LACLogTests_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Tests");
  uint64_t v1 = (void *)LACLogTests___logObj;
  LACLogTests___logObj = (uint64_t)v0;
}

id LACLogTouchIDUI()
{
  if (LACLogTouchIDUI_onceToken != -1) {
    dispatch_once(&LACLogTouchIDUI_onceToken, &__block_literal_global_37);
  }
  return (id)LACLogTouchIDUI___logObj;
}

void __LACLogTouchIDUI_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "TouchIDUI");
  uint64_t v1 = (void *)LACLogTouchIDUI___logObj;
  LACLogTouchIDUI___logObj = (uint64_t)v0;
}

id LACLogUI()
{
  if (LACLogUI_onceToken != -1) {
    dispatch_once(&LACLogUI_onceToken, &__block_literal_global_39);
  }
  return (id)LACLogUI___logObj;
}

void __LACLogUI_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "UI");
  uint64_t v1 = (void *)LACLogUI___logObj;
  LACLogUI___logObj = (uint64_t)v0;
}

id LACLogWatch()
{
  if (LACLogWatch_onceToken != -1) {
    dispatch_once(&LACLogWatch_onceToken, &__block_literal_global_41);
  }
  return (id)LACLogWatch___logObj;
}

void __LACLogWatch_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Watch");
  uint64_t v1 = (void *)LACLogWatch___logObj;
  LACLogWatch___logObj = (uint64_t)v0;
}

id LACLogDTO()
{
  if (LACLogDTO_onceToken != -1) {
    dispatch_once(&LACLogDTO_onceToken, &__block_literal_global_43);
  }
  return (id)LACLogDTO___logObj;
}

void __LACLogDTO_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO");
  uint64_t v1 = (void *)LACLogDTO___logObj;
  LACLogDTO___logObj = (uint64_t)v0;
}

id LACLogDTOClient()
{
  if (LACLogDTOClient_onceToken != -1) {
    dispatch_once(&LACLogDTOClient_onceToken, &__block_literal_global_45);
  }
  return (id)LACLogDTOClient___logObj;
}

void __LACLogDTOClient_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Client");
  uint64_t v1 = (void *)LACLogDTOClient___logObj;
  LACLogDTOClient___logObj = (uint64_t)v0;
}

id LACLogDTOEnvironment()
{
  if (LACLogDTOEnvironment_onceToken != -1) {
    dispatch_once(&LACLogDTOEnvironment_onceToken, &__block_literal_global_47);
  }
  return (id)LACLogDTOEnvironment___logObj;
}

void __LACLogDTOEnvironment_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Environment");
  uint64_t v1 = (void *)LACLogDTOEnvironment___logObj;
  LACLogDTOEnvironment___logObj = (uint64_t)v0;
}

id LACLogDTOEvaluation()
{
  if (LACLogDTOEvaluation_onceToken != -1) {
    dispatch_once(&LACLogDTOEvaluation_onceToken, &__block_literal_global_49);
  }
  return (id)LACLogDTOEvaluation___logObj;
}

void __LACLogDTOEvaluation_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Evaluation");
  uint64_t v1 = (void *)LACLogDTOEvaluation___logObj;
  LACLogDTOEvaluation___logObj = (uint64_t)v0;
}

id LACLogDTOEvent()
{
  if (LACLogDTOEvent_onceToken != -1) {
    dispatch_once(&LACLogDTOEvent_onceToken, &__block_literal_global_51);
  }
  return (id)LACLogDTOEvent___logObj;
}

void __LACLogDTOEvent_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Event");
  uint64_t v1 = (void *)LACLogDTOEvent___logObj;
  LACLogDTOEvent___logObj = (uint64_t)v0;
}

id LACLogDTOFeature()
{
  if (LACLogDTOFeature_onceToken != -1) {
    dispatch_once(&LACLogDTOFeature_onceToken, &__block_literal_global_53);
  }
  return (id)LACLogDTOFeature___logObj;
}

void __LACLogDTOFeature_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Feature");
  uint64_t v1 = (void *)LACLogDTOFeature___logObj;
  LACLogDTOFeature___logObj = (uint64_t)v0;
}

id LACLogDTOLocation()
{
  if (LACLogDTOLocation_onceToken != -1) {
    dispatch_once(&LACLogDTOLocation_onceToken, &__block_literal_global_55);
  }
  return (id)LACLogDTOLocation___logObj;
}

void __LACLogDTOLocation_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Location");
  uint64_t v1 = (void *)LACLogDTOLocation___logObj;
  LACLogDTOLocation___logObj = (uint64_t)v0;
}

id LACLogDTOLostMode()
{
  if (LACLogDTOLostMode_onceToken != -1) {
    dispatch_once(&LACLogDTOLostMode_onceToken, &__block_literal_global_57);
  }
  return (id)LACLogDTOLostMode___logObj;
}

void __LACLogDTOLostMode_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_LostMode");
  uint64_t v1 = (void *)LACLogDTOLostMode___logObj;
  LACLogDTOLostMode___logObj = (uint64_t)v0;
}

id LACLogDTONotifications()
{
  if (LACLogDTONotifications_onceToken != -1) {
    dispatch_once(&LACLogDTONotifications_onceToken, &__block_literal_global_59);
  }
  return (id)LACLogDTONotifications___logObj;
}

void __LACLogDTONotifications_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Notifications");
  uint64_t v1 = (void *)LACLogDTONotifications___logObj;
  LACLogDTONotifications___logObj = (uint64_t)v0;
}

id LACLogDTOProcessor()
{
  if (LACLogDTOProcessor_onceToken != -1) {
    dispatch_once(&LACLogDTOProcessor_onceToken, &__block_literal_global_61);
  }
  return (id)LACLogDTOProcessor___logObj;
}

void __LACLogDTOProcessor_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Processor");
  uint64_t v1 = (void *)LACLogDTOProcessor___logObj;
  LACLogDTOProcessor___logObj = (uint64_t)v0;
}

id LACLogDTOSensor()
{
  if (LACLogDTOSensor_onceToken != -1) {
    dispatch_once(&LACLogDTOSensor_onceToken, &__block_literal_global_63);
  }
  return (id)LACLogDTOSensor___logObj;
}

void __LACLogDTOSensor_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Sensor");
  uint64_t v1 = (void *)LACLogDTOSensor___logObj;
  LACLogDTOSensor___logObj = (uint64_t)v0;
}

id LACLogDTOState()
{
  if (LACLogDTOState_onceToken != -1) {
    dispatch_once(&LACLogDTOState_onceToken, &__block_literal_global_65);
  }
  return (id)LACLogDTOState___logObj;
}

void __LACLogDTOState_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_State");
  uint64_t v1 = (void *)LACLogDTOState___logObj;
  LACLogDTOState___logObj = (uint64_t)v0;
}

id LACLogDTOStorage()
{
  if (LACLogDTOStorage_onceToken != -1) {
    dispatch_once(&LACLogDTOStorage_onceToken, &__block_literal_global_67);
  }
  return (id)LACLogDTOStorage___logObj;
}

void __LACLogDTOStorage_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Storage");
  uint64_t v1 = (void *)LACLogDTOStorage___logObj;
  LACLogDTOStorage___logObj = (uint64_t)v0;
}

id LACLogDTOTimers()
{
  if (LACLogDTOTimers_onceToken != -1) {
    dispatch_once(&LACLogDTOTimers_onceToken, &__block_literal_global_69);
  }
  return (id)LACLogDTOTimers___logObj;
}

void __LACLogDTOTimers_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_Timers");
  uint64_t v1 = (void *)LACLogDTOTimers___logObj;
  LACLogDTOTimers___logObj = (uint64_t)v0;
}

id LACLogDTOUI()
{
  if (LACLogDTOUI_onceToken != -1) {
    dispatch_once(&LACLogDTOUI_onceToken, &__block_literal_global_71);
  }
  return (id)LACLogDTOUI___logObj;
}

void __LACLogDTOUI_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "DTO_UI");
  uint64_t v1 = (void *)LACLogDTOUI___logObj;
  LACLogDTOUI___logObj = (uint64_t)v0;
}

id LACLogABM()
{
  if (LACLogABM_onceToken != -1) {
    dispatch_once(&LACLogABM_onceToken, &__block_literal_global_73);
  }
  return (id)LACLogABM___logObj;
}

void __LACLogABM_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "ABM");
  uint64_t v1 = (void *)LACLogABM___logObj;
  LACLogABM___logObj = (uint64_t)v0;
}

id LACLogPreboard()
{
  if (LACLogPreboard_onceToken != -1) {
    dispatch_once(&LACLogPreboard_onceToken, &__block_literal_global_75);
  }
  return (id)LACLogPreboard___logObj;
}

void __LACLogPreboard_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.LocalAuthentication", "Preboard");
  uint64_t v1 = (void *)LACLogPreboard___logObj;
  LACLogPreboard___logObj = (uint64_t)v0;
}

id NSStringFromLACSharedModePolicyTraits(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x189603FA8]);
  double v3 = v2;
  if ((a1 & 1) != 0)
  {
    [v2 addObject:@"faceIDAuthenticationDisabled"];
    if ((a1 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    id v4 = @"opticIDAuthenticationDisabled";
    goto LABEL_7;
  }

  if ((a1 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (a1) {
    goto LABEL_8;
  }
  id v4 = @"default";
LABEL_7:
  [v3 addObject:v4];
LABEL_8:
  if (![v3 count]) {
    [v3 addObject:@"invalid"];
  }
  [v3 componentsJoinedByString:@","];
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_18923CA10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_18923CBFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_18923CDB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_18923CF74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_18923D130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_18923D2EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_18923DE80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_18923E560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_18923E81C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_18923EBC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_18923EF08(_Unwind_Exception *a1)
{
}

uint64_t NSStringFromLACAuthenticationPriority(uint64_t a1)
{
  else {
    uint64_t v1 = off_18A369F48[a1 - 1];
  }
  return [NSString stringWithFormat:@"%@(%d)", v1, a1];
}

double LACDTBiometryWatchdogGlobalFallbackTime(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 doubleValue];
  double v3 = v2 / 1000.0;

  return v3;
}

void sub_189241C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_189241FF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1892421A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

CFStringRef NSStringFromLACDTOSensorRepairFlag(uint64_t a1)
{
  else {
    return off_18A36A008[a1 - 1];
  }
}

void sub_18924360C(_Unwind_Exception *a1)
{
}

void sub_1892437D8(_Unwind_Exception *a1)
{
}

BOOL LACDarwinNotificationsEqual(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0LL) == kCFCompareEqualTo;
}

void sub_189243EB8(_Unwind_Exception *a1)
{
}

void sub_189244020( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

LABEL_6:
  objc_destroyWeak(&location);
}

    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }

  swift_release();
  swift_release();
  return swift_release();
}

        void *v8 = a1;
        *(void *)(v8 + 1) = 0x100000001LL;
        v8[3] = v9;
        if ((a1 & 0xFFFFFFFE) == 4)
        {
          v8[4] = a2;
        }

        else if (a1 == 1000)
        {
          v8[13] = a2;
        }

        else if (a1 == 7)
        {
          v8[5] = a2;
        }

        uint64_t v6 = 0LL;
        *a3 = v8;
        int v7 = 10;
        break;
      default:
        switch(a1)
        {
          case 1000:
            v8 = acm_mem_alloc(0x88uLL);
            acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataKofNWithAttributes",  v8,  136LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  414,  "Util_AllocRequirement");
            uint64_t v9 = 120;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          case 1001:
            v8 = acm_mem_alloc(0xB8uLL);
            acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes",  v8,  184LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  419,  "Util_AllocRequirement");
            uint64_t v9 = 168;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          case 1002:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
            v12 = v8;
            int v13 = 424;
            goto LABEL_49;
          case 1003:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
            v12 = v8;
            int v13 = 429;
            goto LABEL_49;
          case 1004:
            v8 = acm_mem_alloc(0x20uLL);
            acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes",  v8,  32LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  434,  "Util_AllocRequirement");
            uint64_t v9 = 16;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          default:
            goto LABEL_17;
        }
    }
  }

  else
  {
LABEL_53:
    uint64_t v6 = 4294967293LL;
LABEL_54:
    int v7 = 70;
  }

  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

void sub_1892441E0(_Unwind_Exception *a1)
{
}

void sub_189244368(_Unwind_Exception *a1)
{
}

void sub_189244D94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_189245ED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_1892461E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_1892464D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1892468C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_189246AC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_189246F20(_Unwind_Exception *a1)
{
}

void sub_1892471D0(_Unwind_Exception *a1)
{
}

void sub_1892472F0(_Unwind_Exception *a1)
{
}

void sub_189247BE4(_Unwind_Exception *a1)
{
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_189248148(_Unwind_Exception *a1)
{
}

void sub_1892483DC(_Unwind_Exception *a1)
{
}

void sub_189248628(_Unwind_Exception *a1)
{
}

void sub_189248B18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_189248C50(_Unwind_Exception *a1)
{
}

void sub_189248F58(_Unwind_Exception *a1)
{
}

LABEL_5:
    LOBYTE(v13) = 0;
LABEL_9:

    goto LABEL_10;
  }

  LOBYTE(v13) = 0;
LABEL_10:

  return v13;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

  v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v10, 1LL, 1LL, v15);
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0LL;
  *(void *)(v17 + 24) = 0LL;
  *(void *)(v17 + 32) = v16;
  *(_OWORD *)(v17 + 40) = xmmword_1892B5300;
  *(void *)(v17 + 56) = v11;
  *(void *)(v17 + 64) = v14;
  v18 = self;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?((uint64_t)v11);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v10,  (uint64_t)&closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)partial apply,  v17);
  swift_release();
  _sxRi_zRi0_zlyytIsegHr_SgWOe((uint64_t)v13);
  _sxRi_zRi0_zlyytIsegHr_SgWOe((uint64_t)v11);
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

  v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1LL << v3) - 1;
  }

  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1LL << result) - 1;
  }

  *v18 = v20 & v19;
  v21 = *(void *)(a2 + 16);
  v22 = __OFSUB__(v21, 1LL);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1LL << v3) - 1;
  }

  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1LL << result) - 1;
  }

  id *v17 = v19 & v18;
  v20 = *(void *)(a2 + 16);
  v21 = __OFSUB__(v20, 1LL);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void sub_18924A9FC(_Unwind_Exception *a1)
{
}

void sub_18924AC4C(_Unwind_Exception *a1)
{
}

void sub_18924BAA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_18924BD00(_Unwind_Exception *a1)
{
}

void sub_18924C21C(_Unwind_Exception *a1)
{
}

void sub_18924C5D4(_Unwind_Exception *a1)
{
}

void sub_18924CA50(_Unwind_Exception *a1)
{
}

void sub_18924CE64(_Unwind_Exception *a1)
{
}

void sub_18924D0CC(_Unwind_Exception *a1)
{
}

void sub_18924D2A4(_Unwind_Exception *a1)
{
}

void sub_18924D4C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_18924D648(_Unwind_Exception *a1)
{
}

void sub_18924D848( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_18924D99C(_Unwind_Exception *a1)
{
}

void sub_18924DBBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_18924DD80(_Unwind_Exception *a1)
{
}

void sub_18924DF10(_Unwind_Exception *a1)
{
}

void sub_18924E6CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void OUTLINED_FUNCTION_0_7( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1892503D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

LABEL_17:
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7) {
    v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7) {
    v8 = -1;
  }
  return (v8 + 1);
}

  return v6;
}

void sub_1892516B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1892518C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_189251CCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

CFStringRef NSStringFromLACUserInterfaceRequestIdentifier(uint64_t a1)
{
  else {
    return off_18A36AAD0[a1 - 1];
  }
}

uint64_t key path getter for LACOnenessSessionProviderAKS.isSessionActive : LACOnenessSessionProviderAKS@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112LL))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LACOnenessSessionProviderAKS.isSessionActive : LACOnenessSessionProviderAKS( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 120LL);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }

  else
  {
    uint64_t v1 = closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter(v0);
    *(void *)(v0 + 16) = v1;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v1;
}

uint64_t closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1895F8858](v2);
  v28 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  int v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>);
  uint64_t v30 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  v25 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, OS_dispatch_queue>);
  uint64_t v31 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  v26 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v32 = *(id *)(a1 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>,  &demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>,  MEMORY[0x1896022F0]);
  lazy protocol witness table accessor for type Bool? and conformance <A> A?();
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>> and conformance Publishers.RemoveDuplicates<A>,  &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>,  MEMORY[0x1896021F8]);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool> and conformance Publishers.CompactMap<A, B>,  &demangling cache variable for type metadata for Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>,  MEMORY[0x1896021D8]);
  v14 = (void *)Publisher.share()();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v32 = v14;
  swift_allocObject();
  swift_weakInit();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>> and conformance Publishers.Share<A>,  &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>,  MEMORY[0x189602208]);
  v15 = v25;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  id v32 = *(id *)(a1 + 24);
  id v16 = v32;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v18 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v28, 1LL, 1LL, v17);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>> and conformance Publishers.HandleEvents<A>,  &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>,  MEMORY[0x1896021E8]);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue,  (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue,  MEMORY[0x18961B890]);
  id v19 = v16;
  v21 = v26;
  uint64_t v20 = v27;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v18);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v20);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>,  &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<Publishers.RemoveDuplicates<CurrentValueSubject<Bool?, Never>>, Bool>>>, OS_dispatch_queue>,  MEMORY[0x189602218]);
  uint64_t v22 = v29;
  uint64_t v23 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  return v23;
}

_BYTE *closure #1 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter@<X0>( _BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t closure #2 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    LACOnenessSessionProviderAKS.start()();
    return swift_release();
  }

  return result;
}

uint64_t LACOnenessSessionProviderAKS.start()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v1);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  int v7 = (char *)aBlock - v6;
  if (!*(void *)(v0 + 32))
  {
    LACOnenessSessionProviderAKS.fetchCurrentState()();
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in LACOnenessSessionProviderAKS.start();
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned AKSEventType, @guaranteed CFDictionaryRef?) -> ();
    aBlock[3] = &block_descriptor;
    uint64_t v13 = _Block_copy(aBlock);
    swift_release();
    uint64_t v14 = AKSEventsRegister();
    _Block_release(v13);
    *(void *)(v0 + 32) = v14;
    id v15 = LACLogABM();
    Logger.init(_:)();
    uint64_t v9 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v9, v16))
    {
      uint64_t v5 = v7;
      goto LABEL_8;
    }

    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_189219000, v9, v16, "Companion session listener subscribed", v11, 2u);
    uint64_t v5 = v7;
    goto LABEL_6;
  }

  id v8 = LACLogABM();
  Logger.init(_:)();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_189219000, v9, v10, "Companion session subscriber already exists", v11, 2u);
LABEL_6:
    MEMORY[0x1895E56D4](v11, -1LL, -1LL);
  }

uint64_t closure #3 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    LACOnenessSessionProviderAKS.stop()();
    return swift_release();
  }

  return result;
}

uint64_t LACOnenessSessionProviderAKS.stop()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v1);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  int v7 = (char *)&v15 - v6;
  if (!*(void *)(v0 + 32))
  {
    id v12 = LACLogABM();
    Logger.init(_:)();
    uint64_t v9 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v9, v13))
    {
      int v7 = v5;
      goto LABEL_8;
    }

    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_189219000, v9, v13, "Companion session subscriber does not exist", v11, 2u);
    int v7 = v5;
    goto LABEL_6;
  }

  AKSEventsUnregister();
  id v8 = LACLogABM();
  Logger.init(_:)();
  uint64_t v9 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_189219000, v9, v10, "Companion session listener unsubscribed", v11, 2u);
LABEL_6:
    MEMORY[0x1895E56D4](v11, -1LL, -1LL);
  }

uint64_t LACOnenessSessionProviderAKS.isSessionActive.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*LACOnenessSessionProviderAKS.isSessionActive.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = LACOnenessSessionProviderAKS.isSessionActive.getter();
  return LACOnenessSessionProviderAKS.isSessionActive.modify;
}

uint64_t LACOnenessSessionProviderAKS.isSessionActive.modify(void *a1)
{
  *(void *)(a1[1] + 16LL) = *a1;
  return swift_release();
}

void *LACOnenessSessionProviderAKS.__allocating_init(replyQueue:)(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = 0LL;
  v2[4] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  swift_allocObject();
  v2[5] = CurrentValueSubject.init(_:)();
  v2[3] = a1;
  return v2;
}

void *LACOnenessSessionProviderAKS.init(replyQueue:)(uint64_t a1)
{
  v1[2] = 0LL;
  v1[4] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  swift_allocObject();
  v1[5] = CurrentValueSubject.init(_:)();
  v1[3] = a1;
  return v1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895E5620]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t LACOnenessSessionProviderAKS.deinit()
{
  swift_release();
  return v0;
}

uint64_t LACOnenessSessionProviderAKS.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LACOnenessSessionProviding.isSessionActive.getter in conformance LACOnenessSessionProviderAKS()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t LACOnenessSessionProviderAKS.fetchCurrentState()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)v18 - v5;
  id v7 = LACLogABM();
  Logger.init(_:)();
  id v8 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl(&dword_189219000, v8, v9, "Fetching companion assertion", v10, 2u);
    MEMORY[0x1895E56D4](v10, -1LL, -1LL);
  }

  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v6, v0);
  unsigned int v12 = objc_msgSend((id)objc_opt_self(), sel_isOnenessAssertionActive);
  id v13 = LACLogABM();
  Logger.init(_:)();
  uint64_t v14 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v16 = 67109120;
    v18[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_189219000, v14, v15, "Companion assertion is active: %{BOOL}d", v16, 8u);
    MEMORY[0x1895E56D4](v16, -1LL, -1LL);
  }

  v11(v4, v0);
  char v19 = v12;
  swift_retain();
  CurrentValueSubject.send(_:)();
  return swift_release();
}

uint64_t closure #1 in LACOnenessSessionProviderAKS.start()()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    LACOnenessSessionProviderAKS.fetchCurrentState()();
    return swift_release();
  }

  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned AKSEventType, @guaranteed CFDictionaryRef?) -> ()( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t default argument 3 of LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)()
{
  return 0LL;
}

uint64_t type metadata accessor for LACOnenessSessionProviderAKS()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessSessionProviderAKS()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.isSessionActive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.isSessionActive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderAKS.__allocating_init(replyQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

void type metadata accessor for LACStorageKey(uint64_t a1)
{
}

void type metadata accessor for LACStorageDomain(uint64_t a1)
{
}

void type metadata accessor for LACPreboardUseCase(uint64_t a1)
{
}

void type metadata accessor for LACAuthUIPresentationStyle(uint64_t a1)
{
}

void type metadata accessor for LACRatchetUIState(uint64_t a1)
{
}

void type metadata accessor for LACPolicy(uint64_t a1)
{
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LACStorageKey()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LACStorageKey@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LACPreboardUseCase( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  char v7 = 1;
  uint64_t result = MEMORY[0x1895E4624](a1, &v6);
  uint64_t v4 = v6;
  char v5 = v7;
  if (v7) {
    uint64_t v4 = 0LL;
  }
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LACPreboardUseCase( uint64_t a1, uint64_t a2)
{
  char v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACPreboardUseCase()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance LACStorageKey@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LACStorageKey(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACStorageKey()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACPolicy()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in LACPolicy()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy,  (uint64_t)&protocol conformance descriptor for LACPolicy);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACPolicy()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy,  (uint64_t)&protocol conformance descriptor for LACPolicy);
}

uint64_t lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = MEMORY[0x1895E5638](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACPolicyOption()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LACStorageDomain()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LACStorageKey()
{
  return Int.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance LACStorageKey()
{
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LACStorageKey()
{
  return static Hasher._hash(seed:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LACStorageKey( void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t base witness table accessor for Equatable in LACPolicy()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPolicy and conformance LACPolicy,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicy,  (uint64_t)&protocol conformance descriptor for LACPolicy);
}

uint64_t base witness table accessor for RawRepresentable in LACPreboardUseCase()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase,  (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase,  (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACPreboardUseCase()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase,  (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase,  (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
}

uint64_t base witness table accessor for Equatable in LACPreboardUseCase()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPreboardUseCase and conformance LACPreboardUseCase,  (uint64_t (*)(uint64_t))type metadata accessor for LACPreboardUseCase,  (uint64_t)&protocol conformance descriptor for LACPreboardUseCase);
}

uint64_t base witness table accessor for RawRepresentable in LACStorageDomain()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain,  (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain,  (uint64_t)&protocol conformance descriptor for LACStorageDomain);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACStorageDomain()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain,  (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain,  (uint64_t)&protocol conformance descriptor for LACStorageDomain);
}

uint64_t base witness table accessor for Equatable in LACStorageDomain()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACStorageDomain and conformance LACStorageDomain,  (uint64_t (*)(uint64_t))type metadata accessor for LACStorageDomain,  (uint64_t)&protocol conformance descriptor for LACStorageDomain);
}

uint64_t base witness table accessor for RawRepresentable in LACStorageKey()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey,  (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey,  (uint64_t)&protocol conformance descriptor for LACStorageKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACStorageKey()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey,  (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey,  (uint64_t)&protocol conformance descriptor for LACStorageKey);
}

uint64_t base witness table accessor for Equatable in LACStorageKey()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACStorageKey and conformance LACStorageKey,  (uint64_t (*)(uint64_t))type metadata accessor for LACStorageKey,  (uint64_t)&protocol conformance descriptor for LACStorageKey);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x1895E562C](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Bool? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Bool? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Bool? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Bool?);
    uint64_t v2 = MEMORY[0x1896184E0];
    unint64_t result = MEMORY[0x1895E5638](MEMORY[0x18961AFA0], v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Bool? and conformance <A> A?);
  }

  return result;
}

uint64_t sub_189254A2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  return closure #2 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter();
}

uint64_t partial apply for closure #3 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter()
{
  return closure #3 in closure #1 in LACOnenessSessionProviderAKS.isSessionActive.getter();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }

  return result;
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x1895E5638](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for closure #1 in LACOnenessSessionProviderAKS.start()()
{
  return closure #1 in LACOnenessSessionProviderAKS.start()();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void type metadata accessor for LACPolicyOption(uint64_t a1)
{
}

void type metadata accessor for LACStorageKey(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t base witness table accessor for RawRepresentable in LACPolicyOption()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption,  (uint64_t)&protocol conformance descriptor for LACPolicyOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LACPolicyOption()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption,  (uint64_t)&protocol conformance descriptor for LACPolicyOption);
}

uint64_t base witness table accessor for Equatable in LACPolicyOption()
{
  return lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption,  (uint64_t)&protocol conformance descriptor for LACPolicyOption);
}

void LACOnenessSessionProviderDummy.isSessionActiveSubject.setter()
{
}

uint64_t static LACLog.abm.getter()
{
  id v0 = LACLogABM();
  return Logger.init(_:)();
}

uint64_t static LACLog.default.getter()
{
  id v0 = LACLogDefault();
  return Logger.init(_:)();
}

uint64_t static LACLog.ui.getter()
{
  id v0 = LACLogUI();
  return Logger.init(_:)();
}

uint64_t static LACLog.processor.getter()
{
  id v0 = LACLogProcessor();
  return Logger.init(_:)();
}

uint64_t static LACLog.dtoUI.getter()
{
  id v0 = LACLogDTOUI();
  return Logger.init(_:)();
}

uint64_t static LACLog.dtoEvaluation.getter()
{
  id v0 = LACLogDTOEvaluation();
  return Logger.init(_:)();
}

uint64_t static LACLog.dtoEnvironment.getter()
{
  id v0 = LACLogDTOEnvironment();
  return Logger.init(_:)();
}

uint64_t static LACLog.preboard.getter()
{
  id v0 = LACLogPreboard();
  return Logger.init(_:)();
}

ValueMetadata *type metadata accessor for LACLog()
{
  return &type metadata for LACLog;
}

uint64_t LACPreboardUseCaseProviderAMFI.completeCurrentUseCase(success:)(char a1)
{
  *(_BYTE *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t LACPreboardUseCaseProviderAMFI.completeCurrentUseCase(success:)()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardUseCaseProviderAMFI.deinit()
{
  return v0;
}

uint64_t LACPreboardUseCaseProviderAMFI.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LACPreboardUseCaseProviderAMFI.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LACPreboardUseCaseProviderAMFI.init()()
{
  return v0;
}

uint64_t protocol witness for LACPreboardUseCaseProviding.completeCurrentUseCase(success:) in conformance LACPreboardUseCaseProviderAMFI( char a1)
{
  *(_BYTE *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t specialized LACPreboardUseCaseProviderAMFI.preboardUseCase.getter()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  char v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = objc_msgSend((id)objc_opt_self(), sel_txmSecurityBootMode);
  id v5 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v6 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v8 = 134217984;
    v10[1] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_189219000, v6, v7, "TXM boot mode %ld", v8, 0xCu);
    MEMORY[0x1895E56D4](v8, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4) {
    return -1LL;
  }
  else {
    return (uint64_t)objc_msgSend((id)objc_opt_self(), sel_useCase);
  }
}

uint64_t type metadata accessor for LACPreboardUseCaseProviderAMFI()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardUseCaseProviderAMFI()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardUseCaseProviderAMFI.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

id LACUserDefaultsPersistentStore.__allocating_init(suiteName:)(uint64_t a1, uint64_t a2)
{
  return LACUserDefaultsPersistentStore.init(suiteName:)(a1, a2);
}

id LACUserDefaultsPersistentStore.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id v8 = (void *)objc_opt_self();
    swift_retain();
    goto LABEL_5;
  }

  id v5 = objc_allocWithZone(MEMORY[0x189604038]);
  swift_retain();
  uint64_t v6 = (void *)MEMORY[0x1895E445C](a1, a2);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (!v7)
  {
    id v8 = (void *)objc_opt_self();
LABEL_5:
    id v7 = objc_msgSend(v8, sel_standardUserDefaults);
  }

  v2[14] = v7;
  swift_release();
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for LACUserDefaultsPersistentStore();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for LACUserDefaultsPersistentStore()
{
  return objc_opt_self();
}

uint64_t LACUserDefaultsPersistentStore.data(forKey:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t LACUserDefaultsPersistentStore.data(forKey:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 32) + 112LL);
  uint64_t v2 = (void *)MEMORY[0x1895E445C](*(void *)(v0 + 16), *(void *)(v0 + 24));
  id v3 = objc_msgSend(v1, sel_dataForKey_, v2);

  if (v3)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }

  else
  {
    uint64_t v4 = 0LL;
    unint64_t v6 = 0xF000000000000000LL;
  }

  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v4, v6);
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v3[5] = v4;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 16) + 112LL);
  uint64_t v2 = (void *)MEMORY[0x1895E445C](*(void *)(v0 + 32), *(void *)(v0 + 40));
  id v3 = objc_msgSend(v1, sel_dataForKey_, v2);

  if (v3)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    swift_release();
    swift_bridgeObjectRelease();
    v7.super.isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v4, v6);
  }

  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v7.super.isa = 0LL;
  }

  id v8 = *(void (***)(void, void, void))(v0 + 24);
  ((void (**)(void, Class, void))v8)[2](v8, v7.super.isa, 0LL);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACUserDefaultsPersistentStore.setData(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t LACUserDefaultsPersistentStore.setData(_:forKey:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = *(void **)(*(void *)(v0 + 48) + 112LL);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v5 = (void *)MEMORY[0x1895E445C](v2, v1);
  objc_msgSend(v3, sel_setObject_forKey_, isa, v5);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)( void *a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v4[4] = v9;
  v4[5] = v11;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v4[6] = v12;
  v4[7] = v14;
  return swift_task_switch();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  unint64_t v3 = *(void *)(v0 + 40);
  unint64_t v5 = *(void (***)(void, void))(v0 + 24);
  unint64_t v6 = *(void **)(*(void *)(v0 + 16) + 112LL);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = (void *)MEMORY[0x1895E445C](v1, v2);
  objc_msgSend(v6, sel_setObject_forKey_, isa, v8);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v4, v3);
  v5[2](v5, 0LL);
  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACUserDefaultsPersistentStore.removeObject(forKey:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 32) + 112LL);
  uint64_t v2 = (void *)MEMORY[0x1895E445C](*(void *)(v0 + 16), *(void *)(v0 + 24));
  objc_msgSend(v1, sel_removeObjectForKey_, v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)( int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v3[5] = v4;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t v1 = *(void (***)(void, void))(v0 + 24);
  uint64_t v2 = *(void **)(*(void *)(v0 + 16) + 112LL);
  unint64_t v3 = (void *)MEMORY[0x1895E445C](*(void *)(v0 + 32), *(void *)(v0 + 40));
  objc_msgSend(v2, sel_removeObjectForKey_, v3);

  swift_release();
  swift_bridgeObjectRelease();
  v1[2](v1, 0LL);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void LACUserDefaultsPersistentStore.__allocating_init()()
{
}

void LACUserDefaultsPersistentStore.init()()
{
}

uint64_t LACUserDefaultsPersistentStore.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t LACUserDefaultsPersistentStore.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t LACUserDefaultsPersistentStore.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance LACUserDefaultsPersistentStore()
{
  return v0;
}

uint64_t method lookup function for LACUserDefaultsPersistentStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.__allocating_init(suiteName:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.data(forKey:)(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(int **)((*MEMORY[0x18961B398] & *v2) + 0x68LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.data(forKey:);
  return v9(a1, a2);
}

{
  uint64_t *v2;
  uint64_t v6;
  unint64_t v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)((*MEMORY[0x18961B398] & *v4) + 0x70LL);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v13(a1, a2, a3, a4);
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:)(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(int **)((*MEMORY[0x18961B398] & *v2) + 0x78LL);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v9(a1, a2);
}

uint64_t dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return ((uint64_t (*)(int, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)
                                                       + async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.removeObject(forKey:)))( v2,  v3,  v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))( v2,  v3,  v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))( a1,  v4,  v5,  v6);
}

uint64_t sub_189255F8C()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)
                                                                  + async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.setData(_:forKey:)))( v2,  v3,  v5,  v4);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t objectdestroyTm()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(int, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)
                                                       + async function pointer to @objc closure #1 in LACUserDefaultsPersistentStore.data(forKey:)))( v2,  v3,  v4);
}

uint64_t objectdestroy_7Tm()
{
  return swift_deallocObject();
}

uint64_t SerialTask.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  SerialTask.start()();
  return v0;
}

uint64_t SerialTask.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  SerialTask.start()();
  return v0;
}

uint64_t SerialTask.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1LL, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  outlined destroy of AsyncStream<()>.Continuation?( v6,  &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  return v1;
}

uint64_t SerialTask.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1LL, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  outlined destroy of AsyncStream<()>.Continuation?( v6,  &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  return swift_deallocClassInstance();
}

uint64_t SerialTask.add(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult?);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v2 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  swift_beginAccess();
  outlined init with copy of AsyncStream<()>.Continuation?(v15, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1LL, v5))
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v11,  &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v14, 1LL, 1LL, v16);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v11,  &demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a1;
    *(void *)(v17 + 24) = a2;
    v20[1] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> ();
    v20[2] = v17;
    swift_retain();
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v14, 0LL, 1LL, v18);
  }

  return outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v14,  &demangling cache variable for type metadata for AsyncStream<()>.Continuation.YieldResult?);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> ()(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v5();
}

uint64_t SerialTask.start()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v0);
  char v19 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v18 - v11;
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961BD50], v2);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  uint64_t v13 = type metadata accessor for TaskPriority();
  uint64_t v14 = (uint64_t)v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v19, 1LL, 1LL, v13);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0LL;
  *(void *)(v16 + 24) = 0LL;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, v10, v6);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v14,  (uint64_t)&async function pointer to partial apply for closure #2 in SerialTask.start(),  v16);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t outlined init with copy of AsyncStream<()>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AsyncStream<()>.Continuation?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_189256918()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> ()(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> ()
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @async () -> ()))( a1,  v4);
}

uint64_t ObjC metadata update function for SerialTask()
{
  return type metadata accessor for SerialTask();
}

uint64_t type metadata accessor for SerialTask()
{
  uint64_t result = type metadata singleton initialization cache for SerialTask;
  if (!type metadata singleton initialization cache for SerialTask) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SerialTask()
{
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SerialTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SerialTask.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SerialTask.add(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

void type metadata accessor for AsyncStream<()>.Continuation?()
{
  if (!lazy cache variable for type metadata for AsyncStream<()>.Continuation?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<()>.Continuation?);
    }
  }

uint64_t sub_189256AD4()
{
  return swift_deallocObject();
}

uint64_t closure #1 in SerialTask.start()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v4, a1, v7);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0LL, 1LL, v7);
    uint64_t v9 = v6 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
    swift_beginAccess();
    outlined assign with take of AsyncStream<()>.Continuation?((uint64_t)v4, v9);
    swift_endAccess();
    return swift_release();
  }

  return result;
}

uint64_t partial apply for closure #1 in SerialTask.start()(uint64_t a1)
{
  return closure #1 in SerialTask.start()(a1);
}

uint64_t closure #2 in SerialTask.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<()>.Iterator);
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in SerialTask.start()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  void *v1 = v0;
  v1[1] = closure #2 in SerialTask.start();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int *v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v1 = *(int **)(v0 + 16);
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    *(void *)(v0 + 80) = *(void *)(v0 + 24);
    uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #2 in SerialTask.start();
    return v4();
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 72);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  _sxRi_zRi0_zlyytIsegHr_SgWOe(v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v4;
  *uint64_t v4 = v3;
  v4[1] = closure #2 in SerialTask.start();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_189256E88()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SerialTask.start()(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>)
                                      - 8)
                          + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((v4 + 32) & ~v4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return closure #2 in SerialTask.start()(a1, v5, v6, v7);
}

uint64_t _sxRi_zRi0_zlyytIsegHr_SgWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t outlined assign with take of AsyncStream<()>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

BOOL LACOnenessSessionMonitorModel.isMonitoring.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription) != 0LL;
}

id LACOnenessSessionMonitorModel.isOnenessActive.getter()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
  if (!v5) {
    return (id)*(unsigned __int8 *)(v0
  }
                                  + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive);
  uint64_t v6 = v5;
  id v7 = LACLogABM();
  Logger.init(_:)();
  id v8 = v6;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v20 = v1;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v19 = v2;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    id v21 = v8;
    id v13 = v8;
    uint64_t v1 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v14 = v18;
    void *v18 = v6;

    _os_log_impl(&dword_189219000, v9, v10, "Using debug value for companion assertion: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v14, -1LL, -1LL);
    unint64_t v15 = v12;
    uint64_t v2 = v19;
    MEMORY[0x1895E56D4](v15, -1LL, -1LL);
  }

  else
  {

    uint64_t v9 = (os_log_s *)v8;
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v16 = objc_msgSend(v8, sel_BOOLValue);

  return v16;
}

uint64_t LACOnenessSessionMonitorModel.handleSessionUpdate()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  id v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[1] = *(void *)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue];
  id v8 = *(void **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v0;
  aBlock[4] = partial apply for closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_18;
  os_log_type_t v10 = _Block_copy(aBlock);
  id v11 = v8;
  uint64_t v12 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags],  MEMORY[0x189618470]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1895E46B4](0LL, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

id LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  id v8 = specialized LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)(v7, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

id LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v10 + 16))(v9);
  id v11 = specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)((uint64_t)v9, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

Swift::Void __swiftcall LACOnenessSessionMonitorModel.start()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  uint64_t v9 = (char *)v27 - v8;
  MEMORY[0x1895F8858](v7);
  id v11 = (char *)v27 - v10;
  id v12 = LACLogABM();
  Logger.init(_:)();
  uint64_t v13 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_189219000, v13, v14, "Starting listener for AKS events", v15, 2u);
    MEMORY[0x1895E56D4](v15, -1LL, -1LL);
  }

  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v11, v2);
  uint64_t v17 = OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription;
  if (!*(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription))
  {
    uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider + 24);
    uint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider),  v22);
    v27[1] = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>,  &demangling cache variable for type metadata for AnyPublisher<Bool, Never>,  MEMORY[0x189602270]);
    uint64_t v24 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)(v1 + v17) = v24;
    swift_release();
    id v25 = LACLogABM();
    Logger.init(_:)();
    uint64_t v19 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v19, v26))
    {
      uint64_t v6 = v9;
      goto LABEL_10;
    }

    id v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_189219000, v19, v26, "Did start listener for AKS events", v21, 2u);
    uint64_t v6 = v9;
    goto LABEL_8;
  }

  id v18 = LACLogABM();
  Logger.init(_:)();
  uint64_t v19 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_189219000, v19, v20, "AKS events listener already registered", v21, 2u);
LABEL_8:
    MEMORY[0x1895E56D4](v21, -1LL, -1LL);
  }

void closure #1 in LACOnenessSessionMonitorModel.start()(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1895E5764](v3);
  if (v4)
  {
    uint64_t v5 = (_BYTE *)v4;
    int v6 = LACOnenessSessionMonitorModel.isOnenessActive.getter() & 1;
    v5[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive] = v2;
  }

Swift::Void __swiftcall LACOnenessSessionMonitorModel.stop()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v1);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v7 = (char *)&v16 - v6;
  if (*(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription))
  {
    *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription) = 0LL;
    AnyCancellable.cancel()();
    id v8 = LACLogABM();
    Logger.init(_:)();
    uint64_t v9 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl(&dword_189219000, v9, v10, "Did stop listener for AKS events", v11, 2u);
      MEMORY[0x1895E56D4](v11, -1LL, -1LL);
    }

    swift_release();
  }

  else
  {
    id v12 = LACLogABM();
    Logger.init(_:)();
    uint64_t v13 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_189219000, v13, v14, "Cannot stop monitoring, no AKS listener registered", v15, 2u);
      MEMORY[0x1895E56D4](v15, -1LL, -1LL);
    }

    uint64_t v7 = v5;
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
}

uint64_t LACOnenessSessionMonitorModel.add(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitorModel.add(_:)( a1,  (uint64_t)&unk_18A36B038,  (uint64_t)partial apply for closure #1 in LACOnenessSessionMonitorModel.add(_:),  (uint64_t)&block_descriptor_0);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t LACOnenessSessionMonitorModel.remove(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitorModel.add(_:)( a1,  (uint64_t)&unk_18A36B088,  (uint64_t)partial apply for closure #1 in LACOnenessSessionMonitorModel.remove(_:),  (uint64_t)&block_descriptor_11);
}

uint64_t LACOnenessSessionMonitorModel.add(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  os_log_type_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a4;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags],  MEMORY[0x189618470]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1895E46B4](0LL, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

void closure #1 in LACOnenessSessionMonitorModel.add(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1895E5764](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    id v8 = *(id *)(v6 + OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers);

    objc_msgSend(v8, *a3, a2);
  }

void @objc LACOnenessSessionMonitorModel.add(_:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();
}

id LACOnenessSessionMonitorModel.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessSessionMonitorModel.init()()
{
}

id LACOnenessSessionMonitorModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate()(void *a1, void *a2)
{
  id v37 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = objc_msgSend(a1, sel_allObjects);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACOnenessSessionMonitorObserver);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v10)
    {
LABEL_3:
      unint64_t v36 = v8 & 0xC000000000000001LL;
      uint64_t v11 = 4LL;
      *(void *)&__int128 v9 = 67109378LL;
      __int128 v30 = v9;
      v29[1] = MEMORY[0x18961AFC0] + 8LL;
      uint64_t v31 = v4;
      uint64_t v32 = v3;
      uint64_t v34 = v10;
      unint64_t v35 = v8;
      do
      {
        uint64_t v12 = v11 - 4;
        if (v36)
        {
          uint64_t v13 = (void *)MEMORY[0x1895E478C](v11 - 4, v8);
          uint64_t v14 = v11 - 3;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_14;
          }
        }

        else
        {
          uint64_t v13 = *(void **)(v8 + 8 * v11);
          swift_unknownObjectRetain();
          uint64_t v14 = v11 - 3;
          if (__OFADD__(v12, 1LL))
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }

        id v15 = LACLogABM();
        Logger.init(_:)();
        id v16 = v37;
        swift_unknownObjectRetain_n();
        id v17 = v16;
        uint64_t v18 = v6;
        uint64_t v19 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = swift_slowAlloc();
          uint64_t v22 = swift_slowAlloc();
          uint64_t v39 = v22;
          *(_DWORD *)uint64_t v21 = v30;
          unsigned __int8 v23 = LACOnenessSessionMonitorModel.isOnenessActive.getter();

          *(_DWORD *)(v21 + 4) = v23 & 1;
          *(_WORD *)(v21 + _Block_object_dispose(va, 8) = 2080;
          v38 = v13;
          swift_unknownObjectRetain();
          uint64_t v24 = String.init<A>(describing:)();
          *(void *)(v21 + 10) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v39);
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl( &dword_189219000,  v19,  v20,  "Companion session updated isActive: %{BOOL}d. Informing observer %s",  (uint8_t *)v21,  0x12u);
          swift_arrayDestroy();
          uint64_t v26 = v22;
          uint64_t v3 = v32;
          MEMORY[0x1895E56D4](v26, -1LL, -1LL);
          uint64_t v27 = v21;
          uint64_t v4 = v31;
          MEMORY[0x1895E56D4](v27, -1LL, -1LL);
        }

        else
        {

          swift_unknownObjectRelease_n();
        }

        (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
        uint64_t v6 = v18;
        objc_msgSend(v13, sel_onenessSessionMonitorDidUpdate_, v17);
        swift_unknownObjectRelease();
        ++v11;
        unint64_t v8 = v35;
      }

      while (v14 != v34);
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  objc_super v2 = *a2;
  *objc_super v2 = result;
  *a2 = v2 + 1;
  return result;
}

id specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)( uint64_t a1, void *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  ObjectType = (objc_class *)swift_getObjectType();
  v19[3] = a4;
  v19[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(boxed_opaque_existential_1, a1, a4);
  a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive] = 0;
  *(void *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription] = 0LL;
  uint64_t v12 = (void *)objc_opt_self();
  uint64_t v13 = a3;
  id v14 = objc_msgSend(v12, sel_weakObjectsHashTable);
  *(void *)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers] = v14;
  outlined init with copy of LACOnenessSessionProviding( (uint64_t)v19,  (uint64_t)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider]);
  *(void *)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue] = a2;
  id v15 = a2;

  v18.receiver = v13;
  v18.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return v16;
}

id specialized LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = objc_allocWithZone(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_18925851C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessSessionMonitorModel.start()(char *a1)
{
}

void partial apply for closure #1 in LACOnenessSessionMonitorModel.add(_:)()
{
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = MEMORY[0x1895E5638](MEMORY[0x18961B6B8], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }

  return result;
}

uint64_t objectdestroy_3Tm()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessSessionMonitorModel.remove(_:)()
{
}

uint64_t type metadata accessor for LACOnenessSessionMonitorModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessSessionMonitorModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessSessionMonitorModel.__allocating_init(sessionProvider:replyQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_189258650()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate()()
{
  return closure #1 in LACOnenessSessionMonitorModel.handleSessionUpdate()(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t outlined init with copy of LACOnenessSessionProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t LACPersistentStore.object<A>(forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a3;
  v7[20] = a5;
  v7[17] = a1;
  v7[18] = a2;
  return swift_task_switch();
}

uint64_t LACPersistentStore.object<A>(forKey:)()
{
  uint64_t v1 = (void *)v0[22];
  uint64_t v2 = MEMORY[0x1895E445C](v0[18], v0[19]);
  v0[23] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = LACPersistentStore.object<A>(forKey:);
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1895F87A8];
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  v4[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> () with result type Data?;
  v4[3] = &block_descriptor_1;
  v4[4] = v3;
  objc_msgSend(v1, sel_dataForKey_completion_, v2, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 192LL) = *(void *)(*(void *)v0 + 48LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);

  if (v1 >> 60 == 15)
  {
    uint64_t v3 = 1LL;
  }

  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v2, v1);
    swift_release();
    uint64_t v3 = 0LL;
  }

  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v0 + 160) - 8LL) + 56LL))( *(void *)(v0 + 136),  v3,  1LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 184);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> () with result type Data?( uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    void *v5 = a3;
    id v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }

  else
  {
    if (a2)
    {
      id v8 = a2;
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }

    else
    {
      uint64_t v9 = 0LL;
      unint64_t v11 = 0xF000000000000000LL;
    }

    v12[0] = v9;
    v12[1] = v11;
    outlined init with take of Data?((uint64_t)v12, *(void *)(*(void *)(v3 + 64) + 40LL));
    return swift_continuation_throwingResume();
  }

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t LACPersistentStore.set<A>(object:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[19] = a6;
  v7[20] = v6;
  v7[17] = a3;
  v7[18] = a5;
  v7[15] = a1;
  v7[16] = a2;
  return swift_task_switch();
}

uint64_t LACPersistentStore.set<A>(object:for:)()
{
  v0[21] = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[22] = v1;
  uint64_t v2 = (void *)v0[20];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[23] = isa;
  uint64_t v6 = MEMORY[0x1895E445C](v4, v3);
  v0[24] = v6;
  v0[2] = v0;
  v0[3] = LACPersistentStore.set<A>(object:for:);
  uint64_t v7 = swift_continuation_init();
  v0[10] = MEMORY[0x1895F87A8];
  id v8 = v0 + 10;
  v8[1] = 0x40000000LL;
  v8[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v8[3] = &block_descriptor_2;
  v8[4] = v7;
  objc_msgSend(v2, sel_setData_forKey_completion_, isa, v6, v8);
  return swift_continuation_await();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 200LL) = *(void *)(*(void *)v0 + 48LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 192);
  outlined consume of Data._Representation(*(void *)(v0 + 168), *(void *)(v0 + 176));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void **)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  swift_willThrow();
  outlined consume of Data._Representation(v4, v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()( uint64_t a1, void *a2)
{
  if (!a2) {
    return swift_continuation_throwingResume();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *uint64_t v3 = a2;
  id v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isInvalidated.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated);
  swift_beginAccess();
  return *v1;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isInvalidated.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.isInvalidated.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.getter()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(uint64_t a1, uint64_t a2)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.setter( a1,  a2,  &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.callbackReason.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.getter@<X0>(uint64_t a1@<X8>)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.getter( &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL,  &demangling cache variable for type metadata for URL?,  a1);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(uint64_t a1)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.setter( a1,  &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL,  &demangling cache variable for type metadata for URL?);
}

uint64_t key path setter for LACDTOMutablePendingPolicyEvaluation.callbackURL : LACDTOMutablePendingPolicyEvaluation( uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x18961B398] & **a2) + 0xC0LL))(v6);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.callbackURL.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.modify;
}

id @objc LACDTOMutablePendingPolicyEvaluation.callbackURL.getter( uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1 + *a4;
  swift_beginAccess();
  outlined init with copy of URL?(v14, (uint64_t)v13, a3);
  uint64_t v15 = a5(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  id v17 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1LL, v15) != 1)
  {
    id v17 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }

  return v17;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.getter@<X0>(uint64_t a1@<X8>)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.getter( &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt,  &demangling cache variable for type metadata for Date?,  a1);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.getter@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of URL?(v6, a3, a2);
}

void @objc LACDTOMutablePendingPolicyEvaluation.callbackURL.setter( void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t), uint64_t (*a6)(void), void *a7)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3)
  {
    a5(a3);
    uint64_t v16 = a6(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v17 = a6(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v15, 1LL, 1LL, v17);
  }

  uint64_t v18 = (uint64_t)a1 + *a7;
  swift_beginAccess();
  id v19 = a1;
  outlined assign with take of URL?((uint64_t)v15, v18, a4);
  swift_endAccess();
}

uint64_t LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.setter(uint64_t a1)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.setter( a1,  &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt,  &demangling cache variable for type metadata for Date?);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackURL.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of URL?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t key path setter for LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt : LACDTOMutablePendingPolicyEvaluation( uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x18961B398] & **a2) + 0xD8LL))(v6);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.coolOffStarted.getter@<X0>(uint64_t a1@<X8>)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.getter( &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted,  &demangling cache variable for type metadata for Date?,  a1);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.coolOffStarted.setter(uint64_t a1)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.setter( a1,  &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted,  &demangling cache variable for type metadata for Date?);
}

uint64_t key path setter for LACDTOMutablePendingPolicyEvaluation.coolOffStarted : LACDTOMutablePendingPolicyEvaluation( uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of URL?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x18961B398] & **a2) + 0xF0LL))(v6);
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.coolOffStarted.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

id @objc LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = *v3;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)MEMORY[0x1895E445C](v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.ratchetUUID.getter()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(&OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.getter(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t @objc LACDTOMutablePendingPolicyEvaluation.callbackReason.setter( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *uint64_t v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t LACDTOMutablePendingPolicyEvaluation.ratchetUUID.setter(uint64_t a1, uint64_t a2)
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.setter( a1,  a2,  &OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.callbackReason.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*LACDTOMutablePendingPolicyEvaluation.ratchetUUID.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.hasNotifiedUserAboutCompletion.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v11 = (char *)&v15 - v10;
  (*(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v0) + 0xD0LL))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v3,  &demangling cache variable for type metadata for Date?);
    char v12 = 0;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v3, v4);
    static Date.now.getter();
    char v12 = static Date.< infix(_:_:)();
    uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
    v13(v8, v4);
    v13(v11, v4);
  }

  return v12 & 1;
}

id LACDTOMutablePendingPolicyEvaluation.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated] = 0;
  uint64_t v6 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason];
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  uint64_t v7 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL];
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  v11(v9, 1LL, 1LL, v10);
  v11( &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted],  1LL,  1LL,  v10);
  char v12 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID];
  void *v12 = 0LL;
  v12[1] = 0LL;
  uint64_t v13 = &v5[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
  *uint64_t v13 = a1;
  v13[1] = a2;
  v15.receiver = v5;
  v15.super_class = v2;
  return objc_msgSendSuper2(&v15, sel_init);
}

id LACDTOMutablePendingPolicyEvaluation.init(identifier:)(uint64_t a1, uint64_t a2)
{
  v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated] = 0;
  uint64_t v5 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason];
  void *v5 = 0LL;
  v5[1] = 0LL;
  uint64_t v6 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL];
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  v10(&v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted], 1LL, 1LL, v9);
  uint64_t v11 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID];
  void *v11 = 0LL;
  v11[1] = 0LL;
  char v12 = &v2[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
  void *v12 = a1;
  v12[1] = a2;
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t type metadata accessor for LACDTOMutablePendingPolicyEvaluation()
{
  uint64_t result = type metadata singleton initialization cache for LACDTOMutablePendingPolicyEvaluation;
  if (!type metadata singleton initialization cache for LACDTOMutablePendingPolicyEvaluation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isNotificationScheduled(for:)(char *a1)
{
  v58 = a1;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (lower: Date, upper: Date));
  uint64_t v2 = MEMORY[0x1895F8858](v56);
  v55 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v48 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  v59 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  v54 = (char *)&v48 - v10;
  MEMORY[0x1895F8858](v9);
  char v12 = (char *)&v48 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1895F8858](v13);
  objc_super v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  v57 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  unint64_t v25 = (char *)&v48 - v24;
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  v28 = (char *)&v48 - v27;
  (*(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v1) + 0xD0LL))(v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v15,  &demangling cache variable for type metadata for Date?);
    char v29 = 0;
    return v29 & 1;
  }

  v52 = v12;
  uint64_t v53 = v6;
  __int128 v30 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v30(v28, v15, v16);
  Date.addingTimeInterval(_:)();
  Date.addingTimeInterval(_:)();
  uint64_t v31 = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))MEMORY[0x189606E60],  MEMORY[0x189606E88]);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v49 = v28;
    v50 = v25;
    uint64_t v33 = v56;
    uint64_t v34 = &v5[*(int *)(v56 + 48)];
    unint64_t v35 = v30;
    unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v36(v5, v25, v16);
    v51 = v22;
    v36(v34, v22, v16);
    id v37 = v55;
    v38 = &v55[*(int *)(v33 + 48)];
    v36(v55, v5, v16);
    v36(v38, v34, v16);
    uint64_t v48 = v31;
    uint64_t v39 = (uint64_t)v54;
    v35(v54, v37, v16);
    v40 = v38;
    v41 = *(void (**)(char *, uint64_t))(v17 + 8);
    v41(v40, v16);
    v42 = &v37[*(int *)(v33 + 48)];
    v35(v37, v5, v16);
    v35(v42, v34, v16);
    v35((char *)(v39 + *(int *)(v53 + 36)), v42, v16);
    v41(v37, v16);
    uint64_t v43 = (uint64_t)v52;
    outlined init with take of ClosedRange<Date>(v39, (uint64_t)v52);
    v44 = v58;
    LOBYTE(v42) = dispatch thunk of static Comparable.>= infix(_:_:)();
    v45 = v57;
    v46 = v44;
    uint64_t v47 = (uint64_t)v59;
    v36(v57, v46, v16);
    outlined init with copy of URL?(v43, v47, &demangling cache variable for type metadata for ClosedRange<Date>);
    else {
      char v29 = 0;
    }
    outlined destroy of AsyncStream<()>.Continuation?( v47,  &demangling cache variable for type metadata for ClosedRange<Date>);
    v41(v45, v16);
    outlined destroy of AsyncStream<()>.Continuation?( v43,  &demangling cache variable for type metadata for ClosedRange<Date>);
    v41(v51, v16);
    v41(v50, v16);
    v41(v49, v16);
    return v29 & 1;
  }

  __break(1u);
  return result;
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id LACDTOMutablePendingPolicyEvaluation.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACDTOMutablePendingPolicyEvaluation.init()()
{
}

uint64_t LACDTOMutablePendingPolicyEvaluation.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_18925A40C + 4 * byte_1892B4C10[a1]))( 0xD000000000000017LL,  0x80000001892BAB30LL);
}

uint64_t sub_18925A40C()
{
  return 0x696669746E656469LL;
}

uint64_t sub_18925A428()
{
  return 0x696C61766E497369LL;
}

uint64_t sub_18925A44C()
{
  return 0x6B6361626C6C6163LL;
}

uint64_t sub_18925A480()
{
  return 0x5366664F6C6F6F63LL;
}

uint64_t sub_18925A4A4()
{
  return 0x5574656863746172LL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return LACDTOMutablePendingPolicyEvaluation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized LACDTOMutablePendingPolicyEvaluation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return 0LL;
}

void protocol witness for CodingKey.init(intValue:) in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

id LACDTOMutablePendingPolicyEvaluation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACDTOMutablePendingPolicyEvaluation.encode(to:)(void *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LACDTOMutablePendingPolicyEvaluation.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  objc_super v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v40 = 0;
  uint64_t v16 = v33;
  uint64_t v17 = KeyedEncodingContainer.encode(_:forKey:)();
  if (v16) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  (*(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v2) + 0x88LL))(v17);
  char v39 = 1;
  uint64_t v19 = KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v20 = (void *)MEMORY[0x18961B398];
  uint64_t v21 = *(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v2) + 0xA0LL);
  uint64_t v31 = v2;
  v21(v19);
  char v38 = 2;
  uint64_t v33 = v12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v30 = v13;
  uint64_t v22 = swift_bridgeObjectRelease();
  uint64_t v23 = v31;
  (*(void (**)(uint64_t))((*v20 & *v31) + 0xB8LL))(v22);
  char v37 = 3;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type URL and conformance URL,  (uint64_t (*)(uint64_t))MEMORY[0x189606A90],  MEMORY[0x189606AB0]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v24 = outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v11,  &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t))((*v20 & *v23) + 0xD0LL))(v24);
  char v36 = 4;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))MEMORY[0x189606E60],  MEMORY[0x189606E78]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v25 = outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v8,  &demangling cache variable for type metadata for Date?);
  uint64_t v26 = (uint64_t)v32;
  uint64_t v27 = (void *)MEMORY[0x18961B398];
  (*(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v31) + 0xE8LL))(v25);
  char v35 = 5;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v28 = outlined destroy of AsyncStream<()>.Continuation?(v26, &demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t))((*v27 & *v31) + 0x100LL))(v28);
  char v34 = 6;
  uint64_t v29 = v33;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v29);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    unint64_t result = MEMORY[0x1895E5638]( &protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys,  &unk_18A36B230);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    unint64_t result = MEMORY[0x1895E5638]( &protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys,  &unk_18A36B230);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    unint64_t result = MEMORY[0x1895E5638]( &protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys,  &unk_18A36B230);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys;
  if (!lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys)
  {
    unint64_t result = MEMORY[0x1895E5638]( &protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation.CodingKeys,  &unk_18A36B230);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys);
  }

  return result;
}

id LACDTOMutablePendingPolicyEvaluation.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return LACDTOMutablePendingPolicyEvaluation.init(from:)(a1);
}

id LACDTOMutablePendingPolicyEvaluation.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  v50 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  v51 = (char *)&v49 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1895F8858](v7);
  v54 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LACDTOMutablePendingPolicyEvaluation.CodingKeys>);
  uint64_t v52 = *(void *)(v55 - 8);
  MEMORY[0x1895F8858](v55);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated];
  v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_isInvalidated] = 0;
  uint64_t v11 = (uint64_t *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackReason];
  uint64_t *v11 = 0LL;
  v11[1] = 0LL;
  v60 = v11;
  uint64_t v12 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_callbackURL];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
  uint64_t v59 = (uint64_t)v12;
  v14(v12, 1LL, 1LL, v13);
  uint64_t v15 = (uint64_t)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_notificationScheduledAt];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void (**)(void))(*(void *)(v16 - 8) + 56LL);
  uint64_t v67 = v15;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v17)(v15, 1LL, 1LL, v16);
  v62 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_coolOffStarted];
  v17();
  uint64_t v18 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_ratchetUUID];
  void *v18 = 0LL;
  v18[1] = 0LL;
  v57 = v18;
  v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type LACDTOMutablePendingPolicyEvaluation.CodingKeys and conformance LACDTOMutablePendingPolicyEvaluation.CodingKeys();
  uint64_t v19 = v1;
  uint64_t v56 = v10;
  uint64_t v20 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    uint64_t v25 = v59;
    id v48 = v57;
    swift_bridgeObjectRelease();
    outlined destroy of AsyncStream<()>.Continuation?(v25, &demangling cache variable for type metadata for URL?);
    outlined destroy of AsyncStream<()>.Continuation?(v67, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v62,  &demangling cache variable for type metadata for Date?);

    swift_bridgeObjectRelease();
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    swift_deallocPartialClassInstance();
  }

  else
  {
    uint64_t v21 = v53;
    uint64_t v22 = (uint64_t)v54;
    uint64_t v61 = v13;
    uint64_t v49 = v16;
    char v66 = 0;
    uint64_t v23 = v55;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = v19;
    uint64_t v28 = (uint64_t *)&v19[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
    uint64_t *v28 = v24;
    v28[1] = v29;
    char v66 = 1;
    char v30 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_beginAccess();
    _BYTE *v21 = v30 & 1;
    char v65 = 2;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v32 = v60;
    uint64_t v33 = v31;
    uint64_t v35 = v34;
    swift_beginAccess();
    *uint64_t v32 = v33;
    v32[1] = v35;
    swift_bridgeObjectRelease();
    char v64 = 3;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type URL and conformance URL,  (uint64_t (*)(uint64_t))MEMORY[0x189606A90],  MEMORY[0x189606AC8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v36 = v59;
    swift_beginAccess();
    outlined assign with take of URL?(v22, v36, &demangling cache variable for type metadata for URL?);
    swift_endAccess();
    char v64 = 4;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))MEMORY[0x189606E60],  MEMORY[0x189606E98]);
    uint64_t v37 = (uint64_t)v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v38 = v67;
    swift_beginAccess();
    outlined assign with take of URL?(v37, v38, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    char v64 = 5;
    uint64_t v39 = (uint64_t)v50;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v40 = (uint64_t)v62;
    swift_beginAccess();
    outlined assign with take of URL?(v39, v40, &demangling cache variable for type metadata for Date?);
    swift_endAccess();
    char v64 = 6;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v42 = v52;
    uint64_t v43 = v41;
    uint64_t v45 = v44;
    v46 = v57;
    swift_beginAccess();
    uint64_t *v46 = v43;
    v46[1] = v45;

    swift_bridgeObjectRelease();
    uint64_t v47 = (objc_class *)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    v63.receiver = v27;
    v63.super_class = v47;
    id v48 = objc_msgSendSuper2(&v63, sel_init);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v56, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }

  return v48;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LACDTOMutablePendingPolicyEvaluation@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 312))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LACDTOMutablePendingPolicyEvaluation()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **v0) + 0x130LL))();
}

uint64_t LACDTOMutablePendingPolicyEvaluation.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v2 = MEMORY[0x1895F8858](v75);
  v73 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  v76 = (char *)&v73 - v5;
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v73 - v6;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1895F8858](v74);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1892B4E50;
  uint64_t v11 = (objc_class *)type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
  v80.receiver = v0;
  v80.super_class = v11;
  id v12 = objc_msgSendSuper2(&v80, sel_description);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(v10 + 32) = v13;
  *(void *)(v10 + 40) = v15;
  strcpy((char *)v79, "identifier: ");
  BYTE5(v79[1]) = 0;
  HIWORD(v79[1]) = -5120;
  uint64_t v16 = *(void *)((char *)v1
                  + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier);
  uint64_t v17 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier
                 + 8);
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v79[1];
  *(void *)(v10 + 4_Block_object_dispose(va, 8) = v79[0];
  *(void *)(v10 + 56) = v19;
  v79[0] = 0LL;
  v79[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  uint64_t v20 = swift_bridgeObjectRelease();
  v79[0] = 0x696C61766E497369LL;
  v79[1] = 0xEF203A6465746164LL;
  uint64_t v21 = (void *)MEMORY[0x18961B398];
  char v22 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x18961B398] & *v1) + 0x88LL))(v20);
  BOOL v23 = (v22 & 1) == 0;
  if ((v22 & 1) != 0) {
    uint64_t v24 = 1702195828LL;
  }
  else {
    uint64_t v24 = 0x65736C6166LL;
  }
  if (v23) {
    unint64_t v25 = 0xE500000000000000LL;
  }
  else {
    unint64_t v25 = 0xE400000000000000LL;
  }
  unint64_t v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  uint64_t v27 = swift_bridgeObjectRelease();
  uint64_t v28 = v79[1];
  *(void *)(v10 + 64) = v79[0];
  *(void *)(v10 + 72) = v28;
  v79[0] = 0x203A64697575LL;
  v79[1] = 0xE600000000000000LL;
  uint64_t v77 = (*(uint64_t (**)(uint64_t))((*v21 & *v1) + 0x100LL))(v27);
  uint64_t v78 = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  uint64_t v30 = Optional.debugDescription.getter();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = v79[1];
  *(void *)(v10 + 80) = v79[0];
  *(void *)(v10 + 8_Block_object_dispose(va, 8) = v34;
  v79[0] = 0LL;
  v79[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
  uint64_t v35 = swift_bridgeObjectRelease();
  v79[0] = 0xD000000000000010LL;
  v79[1] = 0x80000001892BAA40LL;
  uint64_t v77 = (*(uint64_t (**)(uint64_t))((*v21 & *v1) + 0xA0LL))(v35);
  uint64_t v78 = v36;
  uint64_t v37 = Optional.debugDescription.getter();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  uint64_t v41 = swift_bridgeObjectRelease();
  uint64_t v42 = v79[1];
  *(void *)(v10 + 96) = v79[0];
  *(void *)(v10 + 104) = v42;
  strcpy((char *)v79, "callbackURL: ");
  HIWORD(v79[1]) = -4864;
  (*(void (**)(uint64_t))((*v21 & *v1) + 0xB8LL))(v41);
  uint64_t v43 = Optional.debugDescription.getter();
  uint64_t v45 = v44;
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = v79[1];
  *(void *)(v10 + 112) = v79[0];
  *(void *)(v10 + 120) = v47;
  v79[0] = 0LL;
  v79[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  uint64_t v48 = swift_bridgeObjectRelease();
  v79[0] = 0xD000000000000019LL;
  v79[1] = 0x80000001892BAA60LL;
  (*(void (**)(uint64_t))((*v21 & *v1) + 0xD0LL))(v48);
  uint64_t v49 = Optional.debugDescription.getter();
  v51 = v50;
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
  v52._countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = v79[1];
  *(void *)(v10 + 12_Block_object_dispose(va, 8) = v79[0];
  *(void *)(v10 + 136) = v53;
  v79[0] = 0LL;
  v79[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(18LL);
  uint64_t v54 = swift_bridgeObjectRelease();
  v79[0] = 0xD000000000000010LL;
  v79[1] = 0x80000001892BAA80LL;
  uint64_t v55 = *(void (**)(uint64_t))((*v21 & *v1) + 0xE8LL);
  uint64_t v56 = (uint64_t)v76;
  v55(v54);
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  int v60 = v59(v56, 1LL, v57);
  uint64_t v61 = outlined destroy of AsyncStream<()>.Continuation?(v56, &demangling cache variable for type metadata for Date?);
  if (v60 == 1)
  {
    v62 = (void *)0xE300000000000000LL;
    uint64_t v63 = 7104878LL;
LABEL_11:
    v70._countAndFlagsBits = v63;
    v70._object = v62;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = v79[1];
    *(void *)(v10 + 144) = v79[0];
    *(void *)(v10 + 152) = v71;
    v79[0] = v10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v72 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v72;
  }

  char v64 = v73;
  v55(v61);
  uint64_t result = v59((uint64_t)v64, 1LL, v57);
  if ((_DWORD)result != 1)
  {
    char v66 = (void *)objc_opt_self();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
    id v68 = objc_msgSend(v66, sel_localizedStringFromDate_dateStyle_timeStyle_, isa, 0, 3);

    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v69;

    goto LABEL_11;
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    unint64_t result = MEMORY[0x1895E5638](MEMORY[0x189618458], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }

  return result;
}

uint64_t LACDTOMutablePendingPolicyEvaluation.isEqual(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  v115 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, Date?));
  uint64_t v6 = MEMORY[0x1895F8858](v124);
  uint64_t v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v121 = (uint64_t)&v108 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v113 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v118 = (uint64_t)&v108 - v14;
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  v116 = (char *)&v108 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v117 = (uint64_t)&v108 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  v120 = (char *)&v108 - v20;
  MEMORY[0x1895F8858](v19);
  uint64_t v122 = (uint64_t)&v108 - v21;
  uint64_t v125 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v125 - 8);
  MEMORY[0x1895F8858](v125);
  v119 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x1895F8858](v24);
  unint64_t v26 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v28 = MEMORY[0x1895F8858](v27);
  uint64_t v123 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v108 - v31;
  MEMORY[0x1895F8858](v30);
  uint64_t v34 = (char *)&v108 - v33;
  outlined init with copy of URL?(a1, (uint64_t)v127, &demangling cache variable for type metadata for Any?);
  if (!v128)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v127,  &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACDTOPendingPolicyEvaluation);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0LL;
  }
  uint64_t v110 = v4;
  v109 = v8;
  uint64_t v111 = v3;
  v112 = v1;
  uint64_t v36 = *(void *)((char *)v1
                  + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier);
  uint64_t v35 = *(void *)((char *)v1
                  + OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier
                  + 8);
  id v114 = v126;
  id v37 = objc_msgSend(v126, sel_identifier);
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  if (v36 == v38 && v35 == v40)
  {
    uint64_t v41 = swift_bridgeObjectRelease();
  }

  else
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v41 = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
      goto LABEL_50;
    }
  }

  uint64_t v43 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x18961B398] & *v112) + 0xA0LL))(v41);
  uint64_t v45 = v44;
  id v46 = objc_msgSend(v114, sel_callbackReason);
  if (!v46)
  {
    uint64_t v51 = v111;
    if (!v45) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }

  uint64_t v47 = v46;
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v49;

  if (!v45)
  {
    uint64_t v51 = v111;
    if (v50)
    {
LABEL_18:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return 0LL;
    }

    goto LABEL_20;
  }

  uint64_t v51 = v111;
  if (!v50)
  {
LABEL_15:
    swift_unknownObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (v43 == v48 && v45 == v50)
  {
    swift_bridgeObjectRelease();
    id v46 = (id)swift_bridgeObjectRelease();
  }

  else
  {
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    id v46 = (id)swift_bridgeObjectRelease();
    if ((v52 & 1) == 0) {
      goto LABEL_50;
    }
  }

LABEL_20:
  uint64_t v53 = v112;
  (*(void (**)(id))((*MEMORY[0x18961B398] & *v112) + 0xB8LL))(v46);
  id v54 = objc_msgSend(v114, sel_callbackURL);
  if (v54)
  {
    uint64_t v55 = v54;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = 0LL;
  }

  else
  {
    uint64_t v56 = 1LL;
  }

  uint64_t v57 = v125;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v32, v56, 1LL, v125);
  uint64_t v58 = (uint64_t)&v26[*(int *)(v24 + 48)];
  outlined init with copy of URL?((uint64_t)v34, (uint64_t)v26, &demangling cache variable for type metadata for URL?);
  uint64_t v59 = v57;
  outlined init with copy of URL?((uint64_t)v32, v58, &demangling cache variable for type metadata for URL?);
  int v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v60((uint64_t)v26, 1LL, v59) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v32,  &demangling cache variable for type metadata for URL?);
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v34,  &demangling cache variable for type metadata for URL?);
    if (v60(v58, 1LL, v59) == 1)
    {
      uint64_t v61 = outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v26,  &demangling cache variable for type metadata for URL?);
      goto LABEL_30;
    }

            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }

          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }

  return v3;
}

LABEL_28:
    uint64_t v63 = (uint64_t *)&demangling cache variable for type metadata for (URL?, URL?);
    uint64_t v64 = (uint64_t)v26;
LABEL_49:
    outlined destroy of AsyncStream<()>.Continuation?(v64, v63);
    goto LABEL_50;
  }

  uint64_t v62 = v123;
  outlined init with copy of URL?((uint64_t)v26, v123, &demangling cache variable for type metadata for URL?);
  if (v60(v58, 1LL, v59) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v32,  &demangling cache variable for type metadata for URL?);
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v34,  &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v62, v59);
    goto LABEL_28;
  }

  char v65 = v53;
  uint64_t v66 = v62;
  uint64_t v67 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v119, v58, v59);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL,  (uint64_t (*)(uint64_t))MEMORY[0x189606A90],  MEMORY[0x189606AC0]);
  char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  v69 = *(void (**)(char *, uint64_t))(v22 + 8);
  v69(v67, v59);
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v32, &demangling cache variable for type metadata for URL?);
  outlined destroy of AsyncStream<()>.Continuation?((uint64_t)v34, &demangling cache variable for type metadata for URL?);
  uint64_t v70 = v66;
  uint64_t v53 = v65;
  uint64_t v51 = v111;
  v69((char *)v70, v59);
  uint64_t v61 = outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v26,  &demangling cache variable for type metadata for URL?);
  if ((v68 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_30:
  uint64_t v71 = v122;
  (*(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v53) + 0xD0LL))(v61);
  id v72 = objc_msgSend(v114, sel_notificationScheduledAt);
  if (v72)
  {
    v73 = v72;
    uint64_t v74 = (uint64_t)v120;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v75 = v110;
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
    v76(v74, 0LL, 1LL, v51);
  }

  else
  {
    uint64_t v75 = v110;
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
    uint64_t v74 = (uint64_t)v120;
    v76((uint64_t)v120, 1LL, 1LL, v51);
  }

  uint64_t v77 = v121;
  uint64_t v78 = v121 + *(int *)(v124 + 48);
  outlined init with copy of URL?(v71, v121, &demangling cache variable for type metadata for Date?);
  outlined init with copy of URL?(v74, v78, &demangling cache variable for type metadata for Date?);
  v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v79(v77, 1LL, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v74, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v71, &demangling cache variable for type metadata for Date?);
    if (v79(v78, 1LL, v51) == 1)
    {
      uint64_t v80 = outlined destroy of AsyncStream<()>.Continuation?( v77,  &demangling cache variable for type metadata for Date?);
      goto LABEL_40;
    }

    goto LABEL_38;
  }

  uint64_t v81 = v117;
  outlined init with copy of URL?(v77, v117, &demangling cache variable for type metadata for Date?);
  if (v79(v78, 1LL, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v74, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v71, &demangling cache variable for type metadata for Date?);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v81, v51);
LABEL_38:
    uint64_t v63 = &demangling cache variable for type metadata for (Date?, Date?);
    uint64_t v64 = v77;
    goto LABEL_49;
  }

  uint64_t v82 = v110;
  v83 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v115, v78, v51);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))MEMORY[0x189606E60],  MEMORY[0x189606E90]);
  LODWORD(v125) = dispatch thunk of static Equatable.== infix(_:_:)();
  v84 = *(void (**)(char *, uint64_t))(v82 + 8);
  v84(v83, v51);
  outlined destroy of AsyncStream<()>.Continuation?(v74, &demangling cache variable for type metadata for Date?);
  outlined destroy of AsyncStream<()>.Continuation?(v122, &demangling cache variable for type metadata for Date?);
  v84((char *)v81, v51);
  uint64_t v80 = outlined destroy of AsyncStream<()>.Continuation?(v77, &demangling cache variable for type metadata for Date?);
  if ((v125 & 1) == 0)
  {
LABEL_50:
    swift_unknownObjectRelease();
    return 0LL;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  return v7;
}

    uint64_t v12 = 0LL;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    uint64_t v14 = 0;
    uint64_t v13 = 10;
  }

LABEL_40:
  uint64_t v85 = (uint64_t)v116;
  (*(void (**)(uint64_t))((*MEMORY[0x18961B398] & *v53) + 0xE8LL))(v80);
  id v86 = objc_msgSend(v114, sel_coolOffStarted);
  if (v86)
  {
    v87 = v86;
    uint64_t v88 = v118;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v89 = 0LL;
  }

  else
  {
    uint64_t v89 = 1LL;
    uint64_t v88 = v118;
  }

  v76(v88, v89, 1LL, v51);
  uint64_t v90 = (uint64_t)v109;
  uint64_t v91 = (uint64_t)&v109[*(int *)(v124 + 48)];
  outlined init with copy of URL?(v85, (uint64_t)v109, &demangling cache variable for type metadata for Date?);
  outlined init with copy of URL?(v88, v91, &demangling cache variable for type metadata for Date?);
  if (v79(v90, 1LL, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v88, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v85, &demangling cache variable for type metadata for Date?);
    if (v79(v91, 1LL, v51) == 1)
    {
      uint64_t v92 = outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v109,  &demangling cache variable for type metadata for Date?);
      goto LABEL_54;
    }

    goto LABEL_48;
  }

  uint64_t v93 = v113;
  outlined init with copy of URL?(v90, v113, &demangling cache variable for type metadata for Date?);
  if (v79(v91, 1LL, v51) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?(v118, &demangling cache variable for type metadata for Date?);
    outlined destroy of AsyncStream<()>.Continuation?(v85, &demangling cache variable for type metadata for Date?);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v93, v51);
LABEL_48:
    uint64_t v63 = &demangling cache variable for type metadata for (Date?, Date?);
    uint64_t v64 = (uint64_t)v109;
    goto LABEL_49;
  }

  uint64_t v95 = v110;
  v96 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v115, v91, v51);
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))MEMORY[0x189606E60],  MEMORY[0x189606E90]);
  char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
  v98 = *(void (**)(char *, uint64_t))(v95 + 8);
  v98(v96, v51);
  outlined destroy of AsyncStream<()>.Continuation?(v118, &demangling cache variable for type metadata for Date?);
  outlined destroy of AsyncStream<()>.Continuation?(v85, &demangling cache variable for type metadata for Date?);
  v98((char *)v93, v51);
  uint64_t v92 = outlined destroy of AsyncStream<()>.Continuation?(v90, &demangling cache variable for type metadata for Date?);
  if ((v97 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_54:
  uint64_t v99 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x18961B398] & *v53) + 0x100LL))(v92);
  uint64_t v101 = v100;
  id v102 = objc_msgSend(v114, sel_ratchetUUID);
  if (!v102)
  {
    if (!v101) {
      goto LABEL_62;
    }
    goto LABEL_18;
  }

  v103 = v102;
  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v105;

  if (!v101)
  {
    swift_unknownObjectRelease();
    if (!v106) {
      return 1LL;
    }
    goto LABEL_16;
  }

  if (!v106) {
    goto LABEL_18;
  }
  if (v99 == v104 && v101 == v106)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_62:
    swift_unknownObjectRelease();
    return 1LL;
  }

  char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = 0LL;
  if ((v107 & 1) != 0) {
    return 1LL;
  }
  return result;
}

                __break(1u);
LABEL_41:
                swift_unknownObjectRelease();
              }
            }

            uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v3, v5, v6);
            goto LABEL_26;
          }

  if ((a3 & 8) != 0) {
LABEL_41:
  }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_42:
  memset_s(&v32, 0x40uLL, 0, 0x40uLL);
  return v8;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_18925C67C@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a1) + 0x88LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_18925C6C0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a2) + 0x90LL))(*a1);
}

uint64_t sub_18925C6FC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a1) + 0xA0LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_18925C73C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x18961B398] & **a2) + 0xA8LL);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_18925C790(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a1) + 0xB8LL))();
}

uint64_t sub_18925C7CC(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a1) + 0xD0LL))();
}

uint64_t sub_18925C808(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a1) + 0xE8LL))();
}

uint64_t sub_18925C844@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & **a1) + 0x100LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_18925C884(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x18961B398] & **a2) + 0x108LL);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for LACDTOMutablePendingPolicyEvaluation()
{
  return type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
}

void type metadata completion function for LACDTOMutablePendingPolicyEvaluation()
{
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?( 319LL,  &lazy cache variable for type metadata for Date?,  (void (*)(uint64_t))MEMORY[0x189606E60]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }

uint64_t method lookup function for LACDTOMutablePendingPolicyEvaluation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isInvalidated.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x88LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isInvalidated.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x90LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isInvalidated.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x98LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackReason.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xA0LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackReason.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xA8LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackReason.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xB0LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackURL.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xB8LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackURL.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xC0LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.callbackURL.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xC8LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xD0LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xD8LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.notificationScheduledAt.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xE0LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.coolOffStarted.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xE8LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.coolOffStarted.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xF0LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.coolOffStarted.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xF8LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.ratchetUUID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x100LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.ratchetUUID.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x108LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.ratchetUUID.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x110LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.hasNotifiedUserAboutCompletion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x118LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.__allocating_init(identifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.isNotificationScheduled(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x128LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x130LL))();
}

uint64_t dispatch thunk of LACDTOMutablePendingPolicyEvaluation.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

void type metadata accessor for URL?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255LL);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LACDTOMutablePendingPolicyEvaluation.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for LACDTOMutablePendingPolicyEvaluation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_18925CD68 + 4 * byte_1892B4C1C[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_18925CD9C + 4 * byte_1892B4C17[v4]))();
}

uint64_t sub_18925CD9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18925CDA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18925CDACLL);
  }
  return result;
}

uint64_t sub_18925CDB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18925CDC0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_18925CDC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18925CDCC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for LACDTOMutablePendingPolicyEvaluation.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LACDTOMutablePendingPolicyEvaluation.CodingKeys(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for LACDTOMutablePendingPolicyEvaluation.CodingKeys()
{
  return &unk_18A36B230;
}

uint64_t specialized LACDTOMutablePendingPolicyEvaluation.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x696C61766E497369LL && a2 == 0xED00006465746164LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6B6361626C6C6163LL && a2 == 0xEE006E6F73616552LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6B6361626C6C6163LL && a2 == 0xEB000000004C5255LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000017LL && a2 == 0x80000001892BAB30LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x5366664F6C6F6F63LL && a2 == 0xEE00646574726174LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0x5574656863746172LL && a2 == 0xEB00000000444955LL)
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t dispatch thunk of LACOnenessSessionProviding.isSessionActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LACPreboardUPPManaging.teamName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LACPreboardUPPManaging.installUPP(request:storage:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(void *)(a4 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v11(a1, a2, a3, a4);
}

id LACPreboardUPPManager.uppProfile.getter()
{
  __int16 v1 = *(void **)(v0 + 16);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    id v2 = closure #1 in LACPreboardUPPManager.uppProfile.getter();
    BOOL v3 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v2;
    id v4 = v2;
    outlined consume of LACPreboardUPPProfile??(v3);
  }

  outlined copy of LACPreboardUPPProfile??(v1);
  return v2;
}

id closure #1 in LACPreboardUPPManager.uppProfile.getter()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  BOOL v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = objc_msgSend((id)objc_opt_self(), sel_getUPPProfile);
  if (!result)
  {
    id v5 = LACLogPreboard();
    Logger.init(_:)();
    char v6 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_189219000, v6, v7, "Unable to fetch UPP profile", v8, 2u);
      MEMORY[0x1895E56D4](v8, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0LL;
  }

  return result;
}

void *LACPreboardUPPManager.teamName.getter()
{
  id v0 = LACPreboardUPPManager.uppProfile.getter();
  uint64_t v1 = v0;
  if (v0)
  {
    id v2 = objc_msgSend(v0, sel_teamName);

    uint64_t v1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return v1;
}

uint64_t LACPreboardUPPManager.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 1LL;
  return result;
}

uint64_t LACPreboardUPPManager.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 1LL;
  return result;
}

uint64_t LACPreboardUPPManager.installUPP(request:storage:)(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[29] = v4;
  v3[30] = *(void *)(v4 - 8);
  v3[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LACPreboardUPPManager.installUPP(request:storage:)()
{
  id v1 = LACPreboardUPPManager.uppProfile.getter();
  *(void *)(v0 + 256) = v1;
  if (!v1)
  {
    uint64_t v16 = (void *)objc_opt_self();
    uint64_t v17 = (void *)MEMORY[0x1895E445C](0x20676E697373694DLL, 0xEF656C69666F7270LL);
    objc_msgSend(v16, sel_errorWithCode_debugDescription_, -1000, v17);

    swift_willThrow();
LABEL_16:
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }

  uint64_t v2 = v1;
  BOOL v3 = *(void **)(v0 + 208);
  swift_getObjectType();
  if (objc_msgSend( (id)swift_getObjCClassFromMetadata(),  sel_isKeyAvailable_operation_,  objc_msgSend(v3, "key"),  4))
  {
    id v4 = objc_msgSend(v2, sel_teamID);
    if (!v4)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v4 = (id)MEMORY[0x1895E445C](v5);
      swift_bridgeObjectRelease();
    }

    id v6 = objc_msgSend((id)objc_opt_self(), sel_createUPPControlForTeamID_, v4);

    if (v6)
    {
      uint64_t v8 = *(void *)(v0 + 208);
      os_log_type_t v7 = *(void **)(v0 + 216);
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      *(void *)(v0 + 264) = v9;
      *(void *)(v0 + 272) = v11;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 280) = isa;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = LACPreboardUPPManager.installUPP(request:storage:);
      uint64_t v13 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1895F87A8];
      uint64_t v14 = (void *)(v0 + 80);
      v14[1] = 0x40000000LL;
      void v14[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned NSError?) -> () with result type Any;
      v14[3] = &block_descriptor_2;
      v14[4] = v13;
      objc_msgSend(v7, sel_setObject_forRequest_connection_completionHandler_, isa, v8, 0, v14);
      return swift_continuation_await();
    }

    uint64_t v34 = (void *)objc_opt_self();
    uint64_t v35 = (void *)MEMORY[0x1895E445C](0xD00000000000001DLL, 0x80000001892BAC20LL);
    objc_msgSend(v34, sel_errorWithCode_debugDescription_, -1000, v35);

    swift_willThrow();
    goto LABEL_16;
  }

  id v18 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v19 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_189219000, v19, v20, "UPP data exchange is not supported", v21, 2u);
    MEMORY[0x1895E56D4](v21, -1LL, -1LL);
  }

  uint64_t v23 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v24 = *(void *)(v0 + 232);

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  id v25 = objc_msgSend(*(id *)(v0 + 256), sel_uuid);
  if (!v25)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v25 = (id)MEMORY[0x1895E445C](v26);
    swift_bridgeObjectRelease();
  }

  uint64_t v27 = (void *)objc_opt_self();
  *(void *)(v0 + 200) = 0LL;
  unsigned int v28 = objc_msgSend(v27, sel_installProfileWithUUID_signature_error_, v25, 0, v0 + 200);

  uint64_t v29 = *(void **)(v0 + 200);
  uint64_t v30 = *(void **)(v0 + 256);
  if (!v28)
  {
    id v33 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data?(0LL, 0xF000000000000000LL);

    goto LABEL_16;
  }

  id v31 = v29;
  outlined consume of Data?(0LL, 0xF000000000000000LL);

  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 288LL) = *(void *)(*(void *)v0 + 48LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  Class isa;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  id v16;
  uint64_t (*v17)(void);
  id v18;
  outlined init with take of Any((_OWORD *)(v0 + 120), (_OWORD *)(v0 + 152));
  id v1 = swift_dynamicCast();
  uint64_t v2 = *(void *)(v0 + 272);
  BOOL v3 = *(void **)(v0 + 280);
  id v4 = *(void *)(v0 + 264);
  if (!v1)
  {
    uint64_t v10 = *(void **)(v0 + 256);

    uint64_t v11 = (void *)objc_opt_self();
    uint64_t v12 = (void *)MEMORY[0x1895E445C](0xD000000000000024LL, 0x80000001892BAC60LL);
    objc_msgSend(v11, sel_errorWithCode_debugDescription_, -1000, v12);

    swift_willThrow();
    outlined consume of Data._Representation(v4, v2);
LABEL_11:

    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }

  outlined consume of Data._Representation(*(void *)(v0 + 264), *(void *)(v0 + 272));
  uint64_t v5 = *(void *)(v0 + 184);
  id v6 = *(void *)(v0 + 192);

  os_log_type_t v7 = objc_msgSend(*(id *)(v0 + 256), sel_uuid);
  if (!v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v7 = (id)MEMORY[0x1895E445C](v8);
    swift_bridgeObjectRelease();
  }

  if (v6 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    outlined copy of Data._Representation(v5, v6);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v5, v6);
  }

  uint64_t v13 = (void *)objc_opt_self();
  *(void *)(v0 + 200) = 0LL;
  uint64_t v14 = objc_msgSend(v13, sel_installProfileWithUUID_signature_error_, v7, isa, v0 + 200);

  uint64_t v15 = *(void **)(v0 + 200);
  uint64_t v10 = *(void **)(v0 + 256);
  if (!v14)
  {
    id v18 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data?(v5, v6);
    goto LABEL_11;
  }

  uint64_t v16 = v15;
  outlined consume of Data?(v5, v6);

  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  id v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 264);
  BOOL v3 = *(void *)(v0 + 272);
  id v4 = *(void **)(v0 + 256);
  swift_willThrow();
  outlined consume of Data._Representation(v2, v3);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned NSError?) -> () with result type Any( uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    void *v5 = a3;
    id v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }

  else if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&__int128 v9 = a2;
    uint64_t v8 = *(_OWORD **)(*(void *)(v3 + 64) + 40LL);
    swift_unknownObjectRetain();
    outlined init with take of Any(&v9, v8);
    return swift_continuation_throwingResume();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t LACPreboardUPPManager.deinit()
{
  return v0;
}

uint64_t LACPreboardUPPManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void *protocol witness for LACPreboardUPPManaging.teamName.getter in conformance LACPreboardUPPManager()
{
  id v0 = LACPreboardUPPManager.uppProfile.getter();
  id v1 = v0;
  if (v0)
  {
    id v2 = objc_msgSend(v0, sel_teamName);

    id v1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return v1;
}

uint64_t protocol witness for LACPreboardUPPManaging.installUPP(request:storage:) in conformance LACPreboardUPPManager( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return LACPreboardUPPManager.installUPP(request:storage:)(a1, a2);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void outlined consume of LACPreboardUPPProfile??(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t type metadata accessor for LACPreboardUPPManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardUPPManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardUPPManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

id outlined copy of LACPreboardUPPProfile??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

id LACDTOEnvironmentProvider.__allocating_init(locationProvider:featureController:ratchetStateProvider:lostModeController:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_locationProvider] = a1;
  *(void *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_featureController] = a2;
  *(void *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider] = a3;
  *(void *)&v9[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_lostModeController] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

id LACDTOEnvironmentProvider.init(locationProvider:featureController:ratchetStateProvider:lostModeController:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_locationProvider] = a1;
  *(void *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_featureController] = a2;
  *(void *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider] = a3;
  *(void *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_lostModeController] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for LACDTOEnvironmentProvider();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for LACDTOEnvironmentProvider()
{
  return objc_opt_self();
}

uint64_t LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = LACLogDTOEnvironment();
  Logger.init(_:)();
  uint64_t v15 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = v5;
    uint64_t v18 = a4;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v21 = a1;
    uint64_t v22 = v17;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_189219000, v15, v16, "Environment query will start", v17, 2u);
    uint64_t v23 = v22;
    a1 = v21;
    a3 = v20;
    a2 = v19;
    a4 = v18;
    uint64_t v5 = v32;
    MEMORY[0x1895E56D4](v23, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v24 = objc_msgSend((id)objc_opt_self(), sel_environmentUpdateWillStart);
  objc_msgSend(v24, sel_send);

  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  uint64_t v26 = *(void **)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_featureController);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unsigned int v28 = (void *)swift_allocObject();
  v28[2] = v27;
  v28[3] = partial apply for closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:);
  v28[4] = v25;
  v28[5] = a1;
  v28[6] = a2;
  aBlock[4] = partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOFeatureState) -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v26, sel_fetchStateWithCompletion_, v29);
  _Block_release(v29);
  return swift_release();
}

uint64_t closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)( uint64_t a1, void *a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = objc_msgSend((id)objc_opt_self(), sel_environmentUpdateDidFinish);
  objc_msgSend(v11, sel_send);

  id v12 = LACLogDTOEnvironment();
  Logger.init(_:)();
  if (a2) {
    os_log_type_t v13 = static os_log_type_t.error.getter();
  }
  else {
    os_log_type_t v13 = static os_log_type_t.default.getter();
  }
  os_log_type_t v14 = v13;
  swift_unknownObjectRetain();
  id v15 = a2;
  swift_unknownObjectRetain();
  id v16 = a2;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v18 = v14;
  if (os_log_type_enabled(v17, v14))
  {
    uint64_t v19 = swift_slowAlloc();
    v27[0] = v8;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v30 = a1;
    uint64_t v31 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    unsigned int v28 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACDTOEnvironment?);
    v27[1] = a4;
    uint64_t v22 = Optional.debugDescription.getter();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v30 = (uint64_t)a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v24 = Optional.debugDescription.getter();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v31);
    a3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_189219000, v17, v18, "Environment query did finish env=%s, err=%s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v21, -1LL, -1LL);
    MEMORY[0x1895E56D4](v20, -1LL, -1LL);

    (*(void (**)(char *, void))(v29 + 8))(v10, v27[0]);
  }

  else
  {
    swift_unknownObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  }

  return a3(a1, a2);
}

uint64_t sub_18925E6F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)( uint64_t a1, void *a2)
{
  return closure #1 in LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)( a1,  a2,  *(uint64_t (**)(void, void))(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t sub_18925E71C()
{
  return swift_deallocObject();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned LACDTOEnvironment?, @unowned NSError?) -> ()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

id LACDTOEnvironmentProvider.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACDTOEnvironmentProvider.init()()
{
}

id LACDTOEnvironmentProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACDTOEnvironmentProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( void *a1, uint64_t a2, void (*a3)(id, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a2 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1895E5764](v11);
  if (v12)
  {
    os_log_type_t v13 = (char *)v12;
    if (objc_msgSend(a1, sel_isEnabled))
    {
      os_log_type_t v14 = *(void **)&v13[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider];
      uint64_t v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v16 = (void *)swift_allocObject();
      v16[2] = v15;
      v16[3] = a3;
      v16[4] = a4;
      v16[5] = a5;
      v16[6] = a6;
      v16[7] = a1;
      aBlock[4] = partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 1107296256LL;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTORatchetStateComposite?, @guaranteed Error?) -> ();
      aBlock[3] = &block_descriptor_17;
      uint64_t v17 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v14, sel_ratchetStateCompositeWithCompletion_, v17);
      _Block_release(v17);

      swift_unknownObjectRelease();
    }

    else
    {
      id v18 = objc_msgSend((id)objc_opt_self(), sel_nullInstance);
      objc_msgSend(v18, sel_setFeatureState_, a1);
      id v19 = v18;
      a3(v18, 0LL);
    }
  }

uint64_t sub_18925EB18()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( uint64_t a1)
{
  return partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

void closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v15 = a3 + 16;
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x1895E5764](v15);
  if (v16)
  {
    uint64_t v17 = (char *)v16;
    if (a2)
    {
      a4(0LL, a2);
    }

    else
    {
      if (!a1)
      {
        __break(1u);
        return;
      }

      type metadata accessor for LACDTOMutableLostModeFetchRequest( 0LL,  &lazy cache variable for type metadata for LACDTOMutableLostModeFetchRequest);
      id v18 = a1;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      id v19 = LACDTOMutableLostModeFetchRequest.init(policy:options:featureState:ratchetState:)(a6, a7, a8, v18);
      uint64_t v20 = *(void **)&v17[OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_lostModeController];
      uint64_t v21 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v22 = (void *)swift_allocObject();
      v22[2] = v21;
      v22[3] = a4;
      v22[4] = a5;
      v22[5] = a8;
      aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
      aBlock[5] = v22;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 1107296256LL;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
      aBlock[3] = &block_descriptor_24;
      unint64_t v23 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v24 = (char *)v19;
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_fetchLostMode_completion_, v24, v23);
      _Block_release(v23);

      swift_unknownObjectRelease();
      uint64_t v17 = v24;
    }
  }

id LACDTOMutableLostModeFetchRequest.init(policy:options:featureState:ratchetState:)( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v7, sel_setPolicy_, a1);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setOptions_, isa);

  objc_msgSend(v7, sel_setIsDTOEnabled_, objc_msgSend(a3, sel_isEnabled));
  id v9 = objc_msgSend(a4, sel_ratchetState);
  objc_msgSend(v7, sel_setRatchetState_, v9);

  id v10 = objc_msgSend(a4, sel_watchdogs);
  objc_msgSend(v7, sel_setBiometryWatchdogPack_, v10);

  swift_unknownObjectRelease();
  return v7;
}

uint64_t closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1895E5764](v9);
  if (result)
  {
    uint64_t v11 = (void *)result;
    uint64_t v12 = *(void **)(result + OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_locationProvider);
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    os_log_type_t v14 = (void *)swift_allocObject();
    void v14[2] = v13;
    v14[3] = a3;
    v14[4] = a4;
    v14[5] = a5;
    v14[6] = a1;
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
    aBlock[3] = &block_descriptor_31;
    uint64_t v15 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    id v16 = a1;
    swift_release();
    objc_msgSend(v12, sel_checkIsInFamiliarLocationWithCompletion_, v15);
    _Block_release(v15);

    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1895E5764](v11);
  if (result)
  {
    uint64_t v13 = (void *)result;
    os_log_type_t v14 = *(void **)(result + OBJC_IVAR____TtC23LocalAuthenticationCore25LACDTOEnvironmentProvider_ratchetStateProvider);
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v16 = (void *)swift_allocObject();
    v16[2] = v15;
    v16[3] = a3;
    v16[4] = a4;
    v16[5] = a5;
    v16[6] = a1;
    v16[7] = a6;
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTORatchetStateComposite?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_38;
    uint64_t v17 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    id v18 = a1;
    id v19 = a6;
    swift_release();
    objc_msgSend(v14, sel_ratchetStateCompositeWithCompletion_, v17);
    _Block_release(v17);

    return swift_unknownObjectRelease();
  }

  return result;
}

void closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v13 = a3 + 16;
  swift_beginAccess();
  os_log_type_t v14 = (void *)MEMORY[0x1895E5764](v13);

  if (v14)
  {
    if (a2)
    {
      a4(0LL, a2);
    }

    else if (a1)
    {
      type metadata accessor for LACDTOMutableLostModeFetchRequest( 0LL,  &lazy cache variable for type metadata for LACDTOMutableEnvironment);
      id v15 = a1;
      id v16 = a8;
      id v17 = a7;
      uint64_t v18 = swift_unknownObjectRetain();
      id v19 = LACDTOMutableEnvironment.init(featureState:locationState:lostModeState:stateComposite:)(v18, v17, v16, v15);
      a4(v19, 0LL);
    }

    else
    {
      __break(1u);
    }
  }

id LACDTOMutableEnvironment.init(featureState:locationState:lostModeState:stateComposite:)( uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v8, sel_setConfirmed_, 1);
  id v9 = objc_msgSend(a4, sel_watchdogs);
  objc_msgSend(v8, sel_setBiometryWatchdogPack_, v9);

  objc_msgSend(v8, sel_setFeatureState_, a1);
  objc_msgSend(v8, sel_setLocationState_, a2);
  objc_msgSend(v8, sel_setLostModeState_, a3);
  id v10 = objc_msgSend(a4, sel_ratchetState);
  objc_msgSend(v8, sel_setRatchetState_, v10);

  id v11 = objc_msgSend(a4, sel_gracePeriodState);
  objc_msgSend(v8, sel_setGracePeriodState_, v11);

  swift_unknownObjectRelease();
  return v8;
}

void thunk for @escaping @callee_guaranteed (@guaranteed LACDTORatchetStateComposite?, @guaranteed Error?) -> ()( uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed LACDTOFeatureState) -> ()(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t method lookup function for LACDTOEnvironmentProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACDTOEnvironmentProvider.__allocating_init(locationProvider:featureController:ratchetStateProvider:lostModeController:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of LACDTOEnvironmentProvider.fetchEnvironment(policy:options:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x78LL))();
}

uint64_t sub_18925F4F8()
{
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned LACDTOEnvironment?, @unowned NSError?) -> ()( uint64_t a1, uint64_t a2)
{
}

uint64_t sub_18925F524()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

uint64_t sub_18925F56C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( void *a1)
{
  return closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( a1,  v1[2],  v1[3],  v1[4],  v1[5]);
}

uint64_t sub_18925F5AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( uint64_t a1)
{
  return partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

uint64_t partial apply for closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_18925F608()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in closure #1 in closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:));
}

uint64_t partial apply for closure #1 in closure #1 in LACDTOEnvironmentProvider.performFetchEnvironment(policy:options:completion:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

uint64_t type metadata accessor for LACDTOMutableLostModeFetchRequest(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }

  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Int : Any]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  id v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v10 = (uint64_t *)(v2[6] + 16 * result);
    *id v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  id v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?( v6,  (uint64_t)v15,  &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v9 = v3[6] + 40 * result;
    id v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)char v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1LL);
    os_log_type_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  (uint64_t *)&demangling cache variable for type metadata for (UUID, LACOnenessAuthenticatorPendingRequest),  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)( a1,  &demangling cache variable for type metadata for (UUID, LACOnenessControllerPendingRequest),  &demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  id v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    id v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    void *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1LL);
    os_log_type_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, LACDTOMutablePendingPolicyEvaluation>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  id v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    void *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    BOOL v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1LL);
    os_log_type_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  id v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Any>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 40LL)
    {
      outlined init with copy of URL?(i, (uint64_t)&v11, &demangling cache variable for type metadata for (Int, Any));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = (unint64_t)outlined init with take of Any(&v12, (_OWORD *)(v3[7] + 32 * result));
      id v8 = v3[2];
      char v9 = __OFADD__(v8, 1LL);
      id v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFF0];
  }

  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  char v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }

  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of URL?(v16, (uint64_t)v9, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v19 & 1) != 0) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v20,  v9,  v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t LACOnenessAuthenticationProviderDummy.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessAuthenticationProviderDummy.delegate.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*LACOnenessAuthenticationProviderDummy.delegate.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.modify;
}

BOOL LACOnenessAuthenticationProviderDummy.isAvailable.getter()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
  id v1 = v0;
  if (v0) {

  }
  return v1 != 0LL;
}

uint64_t LACOnenessAuthenticationProviderDummy.domainState(for:completion:)( uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (objc_msgSend((id)objc_opt_self(), sel_isCompanionDeviceMocked))
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    static String.Encoding.utf8.getter();
    uint64_t v13 = String.data(using:allowLossyConversion:)();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15 >> 60 == 15)
    {
      Class isa = 0LL;
    }

    else
    {
      outlined copy of Data._Representation(v13, v15);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data?(v13, v15);
    }

    id v18 = objc_msgSend((id)objc_opt_self(), sel_createHashForDomainState_, isa);

    if (v18)
    {
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Int : Any])>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1892B4FE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Any)>);
      uint64_t v24 = swift_initStackObject();
      __int128 v31 = xmmword_1892B4FF0;
      id v33 = a2;
      uint64_t v32 = a3;
      *(void *)(v24 + 32) = 2LL;
      *(_OWORD *)(v24 + 16) = xmmword_1892B4FF0;
      *(void *)(v24 + 64) = MEMORY[0x1896184C8];
      *(_BYTE *)(v24 + 40) = 1;
      unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(v24);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Any));
      swift_arrayDestroy();
      *(void *)(inited + 4_Block_object_dispose(va, 8) = v25;
      *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 64) = v26;
      uint64_t v27 = swift_initStackObject();
      *(void *)(v27 + 32) = 2LL;
      *(_OWORD *)(v27 + 16) = v31;
      *(void *)(v27 + 64) = MEMORY[0x189606D70];
      *(void *)(v27 + 40) = v19;
      *(void *)(v27 + 4_Block_object_dispose(va, 8) = v21;
      unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(v27);
      swift_setDeallocating();
      outlined copy of Data._Representation(v19, v21);
      swift_arrayDestroy();
      *(void *)(inited + 72) = v28;
      unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      uint64_t v30 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v29);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, void))v33)(v30, 0LL);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v19, v21);
    }

    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
      a2();
      swift_bridgeObjectRelease();
    }

    return outlined consume of Data?(v13, v15);
  }

  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
    a2();
    return swift_bridgeObjectRelease();
  }

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v2 = MEMORY[0x18961AFF0];
  }

  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }

    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : Any]);
    swift_dynamicCast();
    __int128 v32 = v28;
    __int128 v33 = v29;
    uint64_t v34 = v30;
    outlined init with take of Any(&v31, v35);
    __int128 v28 = v32;
    __int128 v29 = v33;
    uint64_t v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v19 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0LL;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v21);
      }

      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }

    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }

  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : [Int : Any]].Iterator._Variant();
    return v2;
  }

  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      unint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

LABEL_39:
  __break(1u);
  return result;
}

id LACOnenessAuthenticationProviderDummy.__allocating_init(replyQueue:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id LACOnenessAuthenticationProviderDummy.init(replyQueue:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate] = 0LL;
  *(void *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(a1, v6, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(a1, 0LL, 1LL, v3);
  $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)(v1, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  MEMORY[0x1895F8858](v7);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1895F8858](v10);
  id v13 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

  if (!v13)
  {
    v18[1] = *(void *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue);
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v10);
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))( v16 + v15,  (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
    aBlock[4] = partial apply for closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_4;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = MEMORY[0x18961AFE8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1895E46B4](0LL, v9, v6, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
    swift_release();
    swift_release();
  }

void LACOnenessAuthenticationProviderDummy.cancelAuthentication(with:)()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

  if (v2)
  {
    uint64_t v3 = (void **)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate);
    swift_beginAccess();
    uint64_t v4 = *v3;
    if (v4)
    {
      swift_unknownObjectRetain();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v6 = (void *)objc_opt_self();
      uint64_t v7 = (void *)MEMORY[0x1895E445C](0xD00000000000001CLL, 0x80000001892BAED0LL);
      id v8 = objc_msgSend(v6, sel_errorWithCode_debugDescription_, -4, v7);

      unint64_t v9 = (void *)_convertErrorToNSError(_:)();
      objc_msgSend(v4, sel_authenticationProvider_didFailAuthenticationWithID_error_, v1, isa, v9);

      swift_unknownObjectRelease();
    }
  }

id LACOnenessAuthenticationProviderDummy.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessAuthenticationProviderDummy.init()()
{
}

id LACOnenessAuthenticationProviderDummy.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)( uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  objc_super v2 = (void *)MEMORY[0x1895E5764](v1);

  if (v2)
  {
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x1895E5764](v1);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      uint64_t v5 = (void **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate);
      swift_beginAccess();
      uint64_t v6 = *v5;
      if (v6)
      {
        swift_unknownObjectRetain();

        swift_beginAccess();
        uint64_t v7 = MEMORY[0x1895E5764](v1);
        if (v7)
        {
          id v8 = (void *)v7;
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v10 = (void *)objc_opt_self();
          uint64_t v11 = (void *)MEMORY[0x1895E445C](0xD000000000000026LL, 0x80000001892BB010LL);
          id v12 = objc_msgSend(v10, sel_errorWithCode_debugDescription_, -1, v11);

          id v13 = (void *)_convertErrorToNSError(_:)();
          objc_msgSend(v6, sel_authenticationProvider_didFailAuthenticationWithID_error_, v8, isa, v13);

          swift_unknownObjectRelease();
        }

        else
        {
          __break(1u);
        }
      }

      else
      {
      }
    }
  }

uint64_t type metadata accessor for LACOnenessAuthenticationProviderDummy()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessAuthenticationProviderDummy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessAuthenticationProviderDummy.__allocating_init(replyQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void specialized LACOnenessAuthenticationProviderDummy.domainState(for:completion:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (objc_msgSend((id)objc_opt_self(), sel_isCompanionDeviceMocked))
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter();
    uint64_t v10 = (objc_class *)String.data(using:allowLossyConversion:)();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v12 >> 60 == 15)
    {
      Class isa = 0LL;
    }

    else
    {
      outlined copy of Data._Representation((uint64_t)v10, v12);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data?((uint64_t)v10, v12);
    }

    id v14 = objc_msgSend((id)objc_opt_self(), sel_createHashForDomainState_, isa);

    if (v14)
    {
      uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Int : Any])>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1892B4FE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, Any)>);
      uint64_t v20 = swift_initStackObject();
      __int128 v29 = xmmword_1892B4FF0;
      Class v30 = v10;
      *(void *)(v20 + 32) = 2LL;
      *(_OWORD *)(v20 + 16) = xmmword_1892B4FF0;
      *(void *)(v20 + 64) = MEMORY[0x1896184C8];
      *(_BYTE *)(v20 + 40) = 1;
      unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(v20);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Any));
      swift_arrayDestroy();
      *(void *)(inited + 4_Block_object_dispose(va, 8) = v21;
      *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 64) = v22;
      uint64_t v23 = swift_initStackObject();
      *(void *)(v23 + 32) = 2LL;
      *(_OWORD *)(v23 + 16) = v29;
      *(void *)(v23 + 64) = MEMORY[0x189606D70];
      *(void *)(v23 + 40) = v15;
      *(void *)(v23 + 4_Block_object_dispose(va, 8) = v17;
      unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(v23);
      swift_setDeallocating();
      outlined copy of Data._Representation(v15, v17);
      swift_arrayDestroy();
      *(void *)(inited + 72) = v24;
      unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v25);
      swift_bridgeObjectRelease();
      Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, void))(a1 + 16))(a1, v26, 0LL);
      swift_bridgeObjectRelease();

      outlined consume of Data._Representation(v15, v17);
      Class v27 = v30;
    }

    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
      Class v28 = Dictionary._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, void))(a1 + 16))(a1, v28, 0LL);
      swift_bridgeObjectRelease();

      Class v27 = v10;
    }

    outlined consume of Data?((uint64_t)v27, v12);
  }

  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
    Class v30 = Dictionary._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(a1 + 16))(a1, v30, 0LL);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1892616F4()
{
  return swift_deallocObject();
}

uint64_t sub_189261718()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in $defer #1 () in LACOnenessAuthenticationProviderDummy.authenticateClient(_:withAcmContext:)()
{
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = MEMORY[0x1895E5638](MEMORY[0x189618470], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }

  return result;
}

char *LACOnenessAuthenticatorModel.mockedAuthProvider.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider;
  if (*(void *)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider])
  {
    uint64_t v2 = *(char **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider];
  }

  else
  {
    unint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue];
    uint64_t v4 = (objc_class *)type metadata accessor for LACOnenessAuthenticationProviderDummy();
    uint64_t v5 = (char *)objc_allocWithZone(v4);
    *(void *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate] = 0LL;
    *(void *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_replyQueue] = v3;
    v11.receiver = v5;
    v11.super_class = v4;
    id v6 = v3;
    uint64_t v7 = (char *)objc_msgSendSuper2(&v11, sel_init);
    uint64_t v8 = &v7[OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticationProviderDummy_delegate];
    swift_beginAccess();
    *(void *)uint64_t v8 = v0;
    swift_unknownObjectRelease();
    *(void *)&v0[v1] = v7;
    unint64_t v9 = v0;
    uint64_t v2 = v7;
    swift_unknownObjectRelease();
  }

  swift_unknownObjectRetain();
  return v2;
}

char *LACOnenessAuthenticatorModel.__allocating_init(authenticationProvider:clientInfoProvider:replyQueue:)( uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return LACOnenessAuthenticatorModel.init(authenticationProvider:clientInfoProvider:replyQueue:)(a1, a2, a3);
}

char *LACOnenessAuthenticatorModel.init(authenticationProvider:clientInfoProvider:replyQueue:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel____lazy_storage___mockedAuthProvider] = 0LL;
  uint64_t v9 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions;
  uint64_t v10 = v4;
  *(void *)&v4[v9] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  *(void *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider] = a1;
  *(void *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_clientInfoProvider] = a2;
  *(void *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v11 = a3;

  v18.receiver = v10;
  v18.super_class = ObjectType;
  unint64_t v12 = (char *)objc_msgSendSuper2(&v18, sel_init);
  id v13 = *(void **)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider];
  id v14 = v12;
  objc_msgSend(v13, sel_setDelegate_, v14);
  id v15 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  unint64_t v16 = v14;
  objc_msgSend(v15, sel_addObserver_notification_, v16, @"com.apple.LocalAuthentication.GlobalDomainDidChange");

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v16;
}

id LACOnenessAuthenticatorModel.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v2, sel_removeObserver_, v0);

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t LACOnenessAuthenticatorModel.isAvailable.getter()
{
  uint64_t v1 = (void *)objc_opt_self();
  id v2 = objc_msgSend(v1, sel_isCompanionSessionActive);

  if (v2) {
    return 1LL;
  }
  id v4 = objc_msgSend(v1, sel_isCompanionSessionActive);

  if (v4)
  {
    uint64_t v5 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
  }

  else
  {
    uint64_t v5 = *(char **)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
    swift_unknownObjectRetain();
  }

  id v3 = objc_msgSend(v5, sel_isAvailable);
  swift_unknownObjectRelease();
  return (uint64_t)v3;
}

uint64_t LACOnenessAuthenticatorModel.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

  if (v7)
  {
    uint64_t v8 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
  }

  else
  {
    uint64_t v8 = *(char **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
    swift_unknownObjectRetain();
  }

  v11[4] = a2;
  v11[5] = a3;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v11[3] = &block_descriptor_5;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_domainStateForRequest_completion_, a1, v9);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void LACOnenessAuthenticatorModel.authenticateRequest(_:completion:)( void *a1, void (*a2)(void, id), uint64_t a3)
{
  uint64_t v105 = a2;
  uint64_t v106 = a3;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  id v11 = (char *)&v92 - v10;
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v99 = (char *)&v92 - v13;
  MEMORY[0x1895F8858](v12);
  v98 = (char *)&v92 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v15);
  unint64_t v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v101 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v101 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v101);
  v96 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v92 - v22;
  uint64_t v24 = MEMORY[0x1895F8858](v21);
  Class v26 = (char *)&v92 - v25;
  MEMORY[0x1895F8858](v24);
  char v97 = (char *)&v92 - v27;
  id v28 = objc_msgSend(a1, sel_externalizedContext);
  if (v28)
  {
    __int128 v29 = v28;
    uint64_t v103 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v100 = v30;

    id v102 = objc_msgSend(a1, sel_client);
    if (v102)
    {
      __int128 v31 = v23;
      swift_getObjectType();
      Class isa = (Class)objc_msgSend(a1, sel_options);
      uint64_t v93 = v5;
      uint64_t v94 = v4;
      uint64_t v95 = a1;
      if (isa)
      {
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }

      unint64_t v33 = v100;
      id v34 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_infoForXPCClient_evaluationOptions_, v102, isa);

      id v35 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
      if (v35)
      {
        uint64_t v36 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
      }

      else
      {
        uint64_t v36 = *(char **)(v104 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
        swift_unknownObjectRetain();
      }

      Class v55 = Data._bridgeToObjectiveC()().super.isa;
      id v56 = objc_msgSend(v36, sel_authenticateClient_withAcmContext_, v34, v55);

      swift_unknownObjectRelease();
      id v92 = v34;
      if (v56)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
        uint64_t v58 = v101;
        v57(v17, v26, v101);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0LL, 1LL, v58);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1LL, v58) != 1)
        {
          uint64_t v59 = v97;
          v57(v97, v17, v58);
          int v60 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
          v60(v26, v59, v58);
          v60(v31, v59, v58);
          type metadata accessor for LACOnenessAuthenticatorPendingRequest();
          uint64_t v61 = swift_allocObject();
          v57( (char *)(v61 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier),  v31,  v58);
          uint64_t v62 = v95;
          *(void *)(v61 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = v95;
          uint64_t v63 = (void *)(v61
                         + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
          uint64_t v64 = v106;
          *uint64_t v63 = v105;
          v63[1] = v64;
          char v65 = (uint64_t *)(v104
                          + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
          swift_beginAccess();
          swift_unknownObjectRetain();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = *v65;
          *char v65 = 0x8000000000000000LL;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v61,  (uint64_t)v26,  isUniquelyReferenced_nonNull_native,  (void (*)(uint64_t))specialized _NativeDictionary.copy(),  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
          *char v65 = v107;
          swift_bridgeObjectRelease();
          uint64_t v67 = *(void (**)(char *, uint64_t))(v18 + 8);
          v67(v26, v58);
          swift_endAccess();
          id v68 = LACLogABM();
          v69 = v98;
          Logger.init(_:)();
          uint64_t v70 = v96;
          v60(v96, v59, v58);
          swift_unknownObjectRetain_n();
          uint64_t v71 = (os_log_s *)Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v71, v72))
          {
            v73 = v70;
            uint64_t v74 = swift_slowAlloc();
            uint64_t v75 = swift_slowAlloc();
            v108[0] = v75;
            *(_DWORD *)uint64_t v74 = 136446466;
            lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
            uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v67(v73, v58);
            *(_WORD *)(v74 + 12) = 1026;
            unsigned int v78 = objc_msgSend(v62, sel_identifier);
            swift_unknownObjectRelease();
            LODWORD(v107) = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_unknownObjectRelease();
            _os_log_impl( &dword_189219000,  v71,  v72,  "Did start companion session with id: %{public}s for request %{public}u",  (uint8_t *)v74,  0x12u);
            swift_arrayDestroy();
            MEMORY[0x1895E56D4](v75, -1LL, -1LL);
            MEMORY[0x1895E56D4](v74, -1LL, -1LL);
            outlined consume of Data._Representation(v103, v100);

            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v93 + 8))(v98, v94);
            v79 = v97;
          }

          else
          {
            swift_unknownObjectRelease();
            outlined consume of Data._Representation(v103, v33);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
            v67(v70, v58);
            (*(void (**)(char *, uint64_t))(v93 + 8))(v69, v94);
            v79 = v59;
          }

          v67(v79, v58);
          return;
        }
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1LL, 1LL, v101);
      }

      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v17,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
      id v80 = LACLogABM();
      uint64_t v81 = v99;
      Logger.init(_:)();
      uint64_t v82 = v95;
      swift_unknownObjectRetain();
      v83 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v85 = 67240192;
        LODWORD(v108[0]) = objc_msgSend(v82, sel_identifier);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        _os_log_impl( &dword_189219000,  v83,  v84,  "Unable to start companion authentication for request: %{public}u",  v85,  8u);
        MEMORY[0x1895E56D4](v85, -1LL, -1LL);
      }

      else
      {

        swift_unknownObjectRelease();
      }

      id v86 = v105;
      id v87 = v92;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v81, v94);
      uint64_t v88 = (void *)objc_opt_self();
      uint64_t v89 = (void *)MEMORY[0x1895E445C](0xD000000000000026LL, 0x80000001892BB010LL);
      id v90 = objc_msgSend(v88, sel_errorWithCode_debugDescription_, -1000, v89);

      id v91 = v90;
      v86(0LL, v90);
      swift_unknownObjectRelease();

      outlined consume of Data._Representation(v103, v33);
    }

    else
    {
      id v43 = LACLogABM();
      Logger.init(_:)();
      uint64_t v44 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        id v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v46 = 0;
        _os_log_impl(&dword_189219000, v44, v45, "Missing client info", v46, 2u);
        MEMORY[0x1895E56D4](v46, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      uint64_t v47 = (void *)objc_opt_self();
      uint64_t v48 = (void *)MEMORY[0x1895E445C](0xD000000000000013LL, 0x80000001892BB090LL);
      id v49 = objc_msgSend(v47, sel_errorWithCode_debugDescription_, -1000, v48);

      id v50 = v49;
      v105(0LL, v49);

      outlined consume of Data._Representation(v103, v100);
    }
  }

  else
  {
    id v37 = LACLogABM();
    Logger.init(_:)();
    swift_unknownObjectRetain();
    uint64_t v38 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = a1;
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 67240192;
      LODWORD(v108[0]) = objc_msgSend(v40, sel_identifier);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl(&dword_189219000, v38, v39, "ACMContext for request: %{public}u is nil", v41, 8u);
      MEMORY[0x1895E56D4](v41, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
    }

    char v42 = v105;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v51 = (void *)objc_opt_self();
    char v52 = (void *)MEMORY[0x1895E445C](0xD000000000000013LL, 0x80000001892BB070LL);
    id v53 = objc_msgSend(v51, sel_errorWithCode_debugDescription_, -1000, v52);

    id v54 = v53;
    v42(0LL, v53);
  }

uint64_t LACOnenessAuthenticatorPendingRequest.__allocating_init(identifier:request:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v9, a1, v10);
  *(void *)(v8 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = a2;
  id v11 = (void *)(v8 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  void *v11 = a3;
  v11[1] = a4;
  return v8;
}

uint64_t LACOnenessAuthenticatorModel.cancelAuthentication(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v75 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  os_log_type_t v72 = (char *)v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  unint64_t v77 = (char *)v64 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  v73 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v76 = (uint64_t)v64 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)v64 - v20;
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  uint64_t v24 = (char *)v64 - v23;
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v27 = (char *)v64 - v26;
  uint64_t v74 = v1;
  uint64_t v28 = v25;
  swift_beginAccess();
  swift_unknownObjectRetain();
  uint64_t v29 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v29, a1, (uint64_t)v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v28) == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v12,  &demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
    id v30 = LACLogABM();
    Logger.init(_:)();
    __int128 v31 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      _os_log_impl(&dword_189219000, v31, v32, "No authentication to cancel", v33, 2u);
      MEMORY[0x1895E56D4](v33, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v8, v79);
  }

  else
  {
    uint64_t v35 = *(int *)(v28 + 48);
    uint64_t v36 = v75;
    id v68 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
    v68(v27, v12, v3);
    uint64_t v37 = *(void *)&v12[v35];
    *(void *)&v27[v35] = v37;
    swift_retain();
    id v38 = LACLogABM();
    Logger.init(_:)();
    uint64_t v71 = v28;
    uint64_t v39 = *(int *)(v28 + 48);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
    v69 = v27;
    uint64_t v41 = v27;
    char v42 = v40;
    v40(v24, (uint64_t)v41, v3);
    *(void *)&v24[v39] = v37;
    outlined init with copy of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)((uint64_t)v24, (uint64_t)v21);
    outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)( (uint64_t)v24,  v76,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    swift_retain();
    id v43 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    int v45 = v44;
    BOOL v46 = os_log_type_enabled(v43, v44);
    uint64_t v47 = v3;
    uint64_t v70 = v42;
    if (v46)
    {
      uint64_t v48 = swift_slowAlloc();
      int v66 = v45;
      id v49 = (uint8_t *)v48;
      uint64_t v67 = swift_slowAlloc();
      uint64_t v81 = v67;
      char v65 = v49;
      *(_DWORD *)id v49 = 136446210;
      v64[1] = v49 + 4;
      id v50 = v73;
      v42(v73, (uint64_t)v21, v47);
      uint64_t v51 = v72;
      v68(v72, v50, v47);
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v54 = v53;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v51, v47);
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AsyncStream<()>.Continuation?( v76,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v21,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      Class v55 = v65;
      _os_log_impl( &dword_189219000,  v43,  (os_log_type_t)v66,  "Will cancel companion authentication for session: %{public}s",  v65,  0xCu);
      uint64_t v56 = v67;
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v56, -1LL, -1LL);
      MEMORY[0x1895E56D4](v55, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
      uint64_t v57 = v36;
    }

    else
    {
      outlined destroy of AsyncStream<()>.Continuation?( v76,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v21,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));

      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
      uint64_t v57 = v36;
      id v50 = v73;
    }

    uint64_t v58 = v74;
    uint64_t v59 = (uint64_t)v69;
    id v60 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);

    if (v60)
    {
      uint64_t v61 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
    }

    else
    {
      uint64_t v61 = *(char **)(v58 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
      swift_unknownObjectRetain();
    }

    uint64_t v62 = *(int *)(v71 + 48);
    v70(v50, v59, v47);
    swift_release();
    *(void *)&v50[v62] = v37;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v50, v47);
    objc_msgSend(v61, sel_cancelAuthenticationWithID_, isa);
    swift_unknownObjectRelease();

    return outlined destroy of AsyncStream<()>.Continuation?( v59,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  }

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  id v43 = a2;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  uint64_t v36 = *(void *)(v45 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v45);
  char v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v40 = (char *)&v35 - v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v41 = (char *)&v35 - v8;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v38 = a1 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v39 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v44 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0LL;
  uint64_t v15 = (uint64_t)v40;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  int64_t v46 = v14;
  for (unint64_t i = v16 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    uint64_t v22 = v44;
    uint64_t v23 = *(void *)(v44 + 48);
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v25 + 16);
    uint64_t v27 = (uint64_t)v41;
    v26(v41, v23 + *(void *)(v25 + 72) * i, v24);
    uint64_t v28 = *(void *)(*(void *)(v22 + 56) + 8 * i);
    uint64_t v29 = v45;
    *(void *)(v27 + *(int *)(v45 + 48)) = v28;
    outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)( v27,  v15,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    uint64_t v30 = *(int *)(v29 + 48);
    __int128 v31 = v42;
    v26(v42, v15, v24);
    uint64_t v32 = *(void *)(v15 + v30);
    *(void *)&v31[v30] = v32;
    unint64_t v33 = *(void **)(v32 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request);
    swift_retain();
    LODWORD(v2_Block_object_dispose(va, 8) = objc_msgSend(v33, sel_identifier);
    LODWORD(v30) = objc_msgSend(v43, sel_identifier);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
    if ((_DWORD)v28 == (_DWORD)v30)
    {
      swift_release();
      uint64_t v34 = v37;
      outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)( v15,  v37,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v34, 0LL, 1LL, v45);
      return swift_unknownObjectRelease();
    }

    uint64_t result = outlined destroy of AsyncStream<()>.Continuation?( v15,  (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    int64_t v14 = v46;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v18 >= v39) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v38 + 8 * v18);
    int64_t v20 = v14 + 1;
    if (v19) {
      goto LABEL_20;
    }
    int64_t v20 = v14 + 2;
    if (v14 + 2 >= v39) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v38 + 8 * v20);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v20 = v14 + 3;
    if (v14 + 3 >= v39) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v38 + 8 * v20);
    if (v19) {
      goto LABEL_20;
    }
    int64_t v20 = v14 + 4;
    if (v14 + 4 >= v39) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v38 + 8 * v20);
    if (v19) {
      goto LABEL_20;
    }
    uint64_t v21 = v14 + 5;
    if (v14 + 5 >= v39)
    {
LABEL_25:
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, 1LL, 1LL, v45);
      return swift_unknownObjectRelease();
    }

    unint64_t v19 = *(void *)(v38 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        int64_t v20 = v21 + 1;
        if (__OFADD__(v21, 1LL)) {
          goto LABEL_28;
        }
        if (v20 >= v39) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v38 + 8 * v20);
        ++v21;
        if (v19) {
          goto LABEL_20;
        }
      }
    }

    int64_t v20 = v14 + 5;
LABEL_20:
    unint64_t v12 = (v19 - 1) & v19;
    int64_t v46 = v20;
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

id LACOnenessAuthenticatorModel.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessAuthenticatorModel.init()()
{
}

char *LACOnenessAuthenticatorModel.notificationCenter(_:didReceive:)(uint64_t a1, const __CFString *a2)
{
  uint64_t result = (char *)LACDarwinNotificationsEqual(a2, @"com.apple.LocalAuthentication.GlobalDomainDidChange");
  if ((_DWORD)result) {
    return LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()();
  }
  return result;
}

char *LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()()
{
  uint64_t v94 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1895F8858](v94);
  id v92 = (char *)&v79 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for DispatchQoS();
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x1895F8858](v91);
  uint64_t v89 = (char *)&v79 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  id v87 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v88 = v5;
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v79 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v95 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  unint64_t v12 = (char *)&v79 - v11;
  uint64_t v100 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v100 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v100);
  uint64_t v106 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v79 - v16;
  id v86 = (id)objc_opt_self();
  uint64_t result = (char *)objc_msgSend(v86, sel_companionAuthentication);
  if (result)
  {
    unint64_t v19 = result;
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v104 = v21;
    uint64_t v105 = v20;

    id v22 = LACLogABM();
    Logger.init(_:)();
    uint64_t v23 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = v7;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_189219000, v23, v24, "Will simulate companion authentication success", v26, 2u);
      uint64_t v27 = v26;
      uint64_t v7 = v25;
      MEMORY[0x1895E56D4](v27, -1LL, -1LL);
    }

    char v97 = *(void (**)(char *, uint64_t))(v13 + 8);
    v97(v17, v100);
    uint64_t v28 = (uint64_t *)(v96 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
    swift_beginAccess();
    uint64_t v29 = *v28;
    uint64_t v30 = *(void *)(*v28 + 64);
    uint64_t v85 = *v28 + 64;
    uint64_t v31 = 1LL << *(_BYTE *)(v29 + 32);
    uint64_t v32 = -1LL;
    if (v31 < 64) {
      uint64_t v32 = ~(-1LL << v31);
    }
    unint64_t v33 = v32 & v30;
    uint64_t v83 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue;
    uint64_t v82 = OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider;
    unint64_t v34 = (unint64_t)(v31 + 63) >> 6;
    unint64_t v79 = v34 - 1;
    uint64_t result = (char *)swift_bridgeObjectRetain();
    unint64_t v35 = 0LL;
    int64_t v101 = v34;
    unint64_t v80 = v34 - 5;
    uint64_t v107 = result;
    uint64_t v81 = result + 104;
    uint64_t v103 = MEMORY[0x18961AFC0] + 8LL;
    uint64_t v36 = (uint64_t)v95;
    os_log_type_t v84 = v7;
    id v102 = v12;
    if (v33) {
      goto LABEL_27;
    }
LABEL_9:
    int64_t v37 = v35 + 1;
    if (__OFADD__(v35, 1LL))
    {
      __break(1u);
      return result;
    }

    if (v37 >= v101)
    {
      unint64_t v41 = v35;
    }

    else
    {
      unint64_t v38 = *(void *)(v85 + 8 * v37);
      if (v38)
      {
LABEL_12:
        uint64_t v39 = (v38 - 1) & v38;
        unint64_t v40 = __clz(__rbit64(v38)) + (v37 << 6);
        unint64_t v35 = v37;
        goto LABEL_28;
      }

      unint64_t v41 = v35 + 1;
      if ((uint64_t)(v35 + 2) < v101)
      {
        unint64_t v38 = *(void *)(v85 + 8 * (v35 + 2));
        if (v38)
        {
          int64_t v37 = v35 + 2;
          goto LABEL_12;
        }

        unint64_t v41 = v35 + 2;
        if ((uint64_t)(v35 + 3) < v101)
        {
          unint64_t v38 = *(void *)(v85 + 8 * (v35 + 3));
          if (v38)
          {
            int64_t v37 = v35 + 3;
            goto LABEL_12;
          }

          int64_t v37 = v35 + 4;
          unint64_t v41 = v35 + 3;
          if ((uint64_t)(v35 + 4) < v101)
          {
            unint64_t v38 = *(void *)(v85 + 8 * v37);
            if (v38) {
              goto LABEL_12;
            }
            while (v80 != v35)
            {
              unint64_t v38 = *(void *)&v81[8 * v35++];
              if (v38)
              {
                int64_t v37 = v35 + 4;
                goto LABEL_12;
              }
            }

            unint64_t v41 = v79;
          }
        }
      }
    }

    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v36, 1LL, 1LL, v42);
    uint64_t v39 = 0LL;
    unint64_t v35 = v41;
    while (1)
    {
      outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)( v36,  (uint64_t)v12,  &demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest)?);
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48LL))(v12, 1LL, v47) == 1)
      {
        swift_release();
        return (char *)outlined consume of Data._Representation(v105, v104);
      }

      unint64_t v110 = v39;
      unint64_t v111 = v35;
      uint64_t v48 = *(void *)&v12[*(int *)(v47 + 48)];
      id v49 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v49(v7, v12, v2);
      id v50 =  objc_msgSend( *(id *)(v48 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request),  sel_externalizedContext);
      if (!v50) {
        break;
      }
      uint64_t v51 = v50;
      uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v56 = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v108 = v52;
      unint64_t v109 = v54;
      Class v57 = Data._bridgeToObjectiveC()().super.isa;
      LODWORD(v52) = MKBVerifyPasswordWithContext();

      if (!(_DWORD)v52)
      {
        uint64_t v63 = v96;
        uint64_t v64 = *(void *)(v96 + v83);
        uint64_t v65 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v66 = objc_msgSend(v86, sel_isCompanionSessionActive);

        uint64_t v99 = v64;
        if (v66)
        {
          uint64_t v67 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
        }

        else
        {
          uint64_t v67 = *(char **)(v63 + v82);
          swift_unknownObjectRetain();
        }

        id v68 = v87;
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v87, v7, v2);
        unint64_t v69 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        uint64_t v70 = swift_allocObject();
        *(void *)(v70 + 16) = v65;
        *(void *)(v70 + 24) = v67;
        v49((char *)(v70 + v69), v68, v2);
        aBlock[4] = partial apply for closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess();
        aBlock[5] = v70;
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 1107296256LL;
        aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        aBlock[3] = &block_descriptor_29;
        uint64_t v71 = _Block_copy(aBlock);
        swift_retain();
        swift_unknownObjectRetain();
        os_log_type_t v72 = v89;
        static DispatchQoS.unspecified.getter();
        uint64_t v112 = MEMORY[0x18961AFE8];
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        v73 = v92;
        uint64_t v98 = v65;
        uint64_t v74 = v3;
        uint64_t v75 = v2;
        uint64_t v76 = v94;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1895E46B4](0LL, v72, v73, v71);
        outlined consume of Data._Representation(v108, v109);
        _Block_release(v71);
        swift_unknownObjectRelease();
        swift_release();
        uint64_t v77 = v76;
        uint64_t v2 = v75;
        uint64_t v3 = v74;
        (*(void (**)(char *, uint64_t))(v93 + 8))(v73, v77);
        uint64_t v78 = v72;
        uint64_t v7 = v84;
        (*(void (**)(char *, uint64_t))(v90 + 8))(v78, v91);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v2);
        swift_release();
        uint64_t result = (char *)swift_release();
        uint64_t v36 = (uint64_t)v95;
        unint64_t v12 = v102;
LABEL_39:
        unint64_t v33 = v110;
        unint64_t v35 = v111;
        if (!v110) {
          goto LABEL_9;
        }
        goto LABEL_27;
      }

      id v58 = LACLogABM();
      Logger.init(_:)();
      uint64_t v59 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.info.getter();
      BOOL v61 = os_log_type_enabled(v59, v60);
      unint64_t v33 = v110;
      if (v61)
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v62 = 0;
        _os_log_impl(&dword_189219000, v59, v60, "Passcode verification failed", v62, 2u);
        MEMORY[0x1895E56D4](v62, -1LL, -1LL);
      }

      outlined consume of Data._Representation(v108, v109);

      swift_release();
      v97(v106, v100);
      uint64_t result = (char *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      unint64_t v12 = v102;
      unint64_t v35 = v111;
      if (!v33) {
        goto LABEL_9;
      }
LABEL_27:
      unint64_t v43 = __clz(__rbit64(v33));
      uint64_t v39 = (v33 - 1) & v33;
      unint64_t v40 = v43 | (v35 << 6);
LABEL_28:
      uint64_t v44 = v107;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16))( v36,  *((void *)v107 + 6) + *(void *)(v3 + 72) * v40,  v2);
      uint64_t v45 = *((void *)v44 + 7);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
      *(void *)(v36 + *(int *)(v46 + 48)) = *(void *)(v45 + 8 * v40);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v36, 0LL, 1LL, v46);
      swift_retain();
    }

    swift_release();
    uint64_t result = (char *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    goto LABEL_39;
  }

  return result;
}

uint64_t LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)( uint64_t a1, uint64_t a2)
{
  return specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)(a2);
}

uint64_t LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)( uint64_t a1, uint64_t a2)
{
  return specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(a2);
}

uint64_t closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (uint8_t *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v55 - v16;
  MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = a1 + 16;
  swift_beginAccess();
  uint64_t v21 = MEMORY[0x1895E5764](a1 + 16);
  if (!v21)
  {
LABEL_9:
    id v46 = LACLogABM();
    Logger.init(_:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a2, v10);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      id v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      v63[0] = v50;
      *(_DWORD *)id v49 = 136446210;
      id v58 = v49 + 4;
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
      _os_log_impl( &dword_189219000,  v47,  v48,  "Companion authentication finished for session: %{public}s but there is no pending authentication for it",  v49,  0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v50, -1LL, -1LL);
      MEMORY[0x1895E56D4](v49, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v9, v60);
  }

  id v22 = (char *)v21;
  Class v57 = v14;
  id v58 = v7;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v24 = v10;
  v23(v19, a2, v10);
  uint64_t v25 = &v22[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions];
  swift_beginAccess();
  uint64_t v26 = *(void *)v25;
  if (!*(void *)(v26 + 16) || (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v28 & 1) == 0))
  {
    swift_endAccess();
    uint64_t v10 = v24;

    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v24);
    goto LABEL_9;
  }

  uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
  swift_endAccess();
  swift_retain();

  uint64_t v30 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v31 = v24;
  v30(v19, v24);
  swift_beginAccess();
  uint64_t v32 = MEMORY[0x1895E5764](v20);
  if (v32)
  {
    unint64_t v33 = (void *)v32;
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2);
    swift_endAccess();

    uint64_t v31 = v24;
    swift_release();
  }

  id v34 = LACLogABM();
  unint64_t v35 = v58;
  Logger.init(_:)();
  uint64_t v36 = v57;
  v23(v57, a2, v31);
  int64_t v37 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = v60;
  if (v39)
  {
    uint64_t v41 = swift_slowAlloc();
    Class v55 = v30;
    uint64_t v42 = (uint8_t *)v41;
    uint64_t v43 = swift_slowAlloc();
    v62[0] = v43;
    *(_DWORD *)uint64_t v42 = 136446210;
    uint64_t v56 = v29;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v62);
    uint64_t v29 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v55(v36, v31);
    _os_log_impl( &dword_189219000,  v37,  v38,  "Companion authentication successfully finished for session: %{public}s",  v42,  0xCu);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v43, -1LL, -1LL);
    MEMORY[0x1895E56D4](v42, -1LL, -1LL);

    (*(void (**)(uint8_t *, uint64_t))(v59 + 8))(v35, v60);
  }

  else
  {
    v30(v36, v31);

    (*(void (**)(uint8_t *, uint64_t))(v59 + 8))(v35, v40);
  }

  unint64_t v54 = *(void (**)(void))(v29
                         + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  swift_retain();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  v54();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t @objc LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  swift_unknownObjectRetain();
  id v11 = a1;
  a5(v10);
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)(a2, a3);
}

uint64_t closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)( uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = v6;
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  id v68 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v63 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  id v66 = (void (**)(char *, uint64_t))((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v63 - v16;
  MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)&v63 - v18;
  uint64_t v20 = a1 + 16;
  swift_beginAccess();
  uint64_t v21 = MEMORY[0x1895E5764](a1 + 16);
  if (!v21) {
    goto LABEL_9;
  }
  id v22 = (char *)v21;
  id v67 = a3;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v23(v19, a2, v11);
  uint64_t v24 = &v22[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions];
  swift_beginAccess();
  uint64_t v25 = *(void *)v24;
  if (!*(void *)(v25 + 16) || (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v27 & 1) == 0))
  {
    swift_endAccess();
    a3 = v67;

    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_9:
    id v47 = LACLogABM();
    os_log_type_t v48 = v10;
    Logger.init(_:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a2, v11);
    id v49 = a3;
    id v50 = a3;
    uint64_t v51 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc();
      id v66 = (void *)swift_slowAlloc();
      id v67 = (id)swift_slowAlloc();
      v73[0] = v67;
      *(_DWORD *)uint64_t v53 = 136446466;
      id v68 = v48;
      unint64_t v54 = a3;
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      *(_WORD *)(v53 + 12) = 2112;
      id v57 = a3;
      uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
      v72[0] = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v59 = v66;
      *id v66 = v58;

      _os_log_impl( &dword_189219000,  v51,  v52,  "Companion authentication failed for session: %{public}s with error: %@ but there is no pending authentication for it",  (uint8_t *)v53,  0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v59, -1LL, -1LL);
      id v60 = v67;
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v60, -1LL, -1LL);
      MEMORY[0x1895E56D4](v53, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v68, v70);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);

      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v10, v70);
    }
  }

  uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
  swift_endAccess();
  swift_retain();

  uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v19, v11);
  swift_beginAccess();
  uint64_t v30 = MEMORY[0x1895E5764](v20);
  if (v30)
  {
    uint64_t v31 = (void *)v30;
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2);
    swift_endAccess();

    swift_release();
  }

  id v32 = LACLogABM();
  unint64_t v33 = v68;
  Logger.init(_:)();
  id v34 = (char *)v66;
  v23((char *)v66, a2, v11);
  id v35 = v67;
  id v36 = v67;
  id v37 = v35;
  os_log_type_t v38 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    v72[0] = v65;
    *(_DWORD *)uint64_t v40 = 136446466;
    uint64_t v63 = v29;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v63(v34, v11);
    *(_WORD *)(v40 + 12) = 2112;
    id v43 = v35;
    uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v71 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v45 = v64;
    *uint64_t v64 = v44;

    _os_log_impl( &dword_189219000,  v38,  v39,  "Companion authentication failed for session: %{public}s with error: %@",  (uint8_t *)v40,  0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v45, -1LL, -1LL);
    uint64_t v46 = v65;
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v46, -1LL, -1LL);
    MEMORY[0x1895E56D4](v40, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
  }

  else
  {
    v29(v34, v11);

    (*(void (**)(char *, uint64_t))(v69 + 8))(v33, v70);
  }

  uint64_t v62 = *(void (**)(void, id))(v28
                                          + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  swift_retain();
  v62(0LL, v35);
  swift_release();
  return swift_release();
}

uint64_t LACOnenessAuthenticatorPendingRequest.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t LACOnenessAuthenticatorPendingRequest.request.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessAuthenticatorPendingRequest.completion.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  swift_retain();
  return v1;
}

uint64_t LACOnenessAuthenticatorPendingRequest.init(identifier:request:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v9, a1, v10);
  *(void *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = a2;
  uint64_t v11 = (void *)(v4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
  void *v11 = a3;
  v11[1] = a4;
  return v4;
}

uint64_t LACOnenessAuthenticatorPendingRequest.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t LACOnenessAuthenticatorPendingRequest.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

void closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1895E5764](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)(a3);
  }

uint64_t closure #1 in osLogInternal(_:log:type:)( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v4 = a2 - (void)__src;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!__dst)
  {
    if (v4 <= 0) {
      return __src;
    }
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }

  if (__src) {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = MEMORY[0x1896191F8];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain();
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v3 > 1,  v4 + 1,  1,  (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0LL);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x18961AFE8];
      }
    }

    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    id v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v33 = v32;
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        char v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }

      while (v28 == -1);
      uint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }

    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  unint64_t v3 = v35;
  id v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  id v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v22 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

  __break(1u);
  return result;
}

  if (v33) {
    Util_SafeDeallocParameters(v33, v32);
  }
  return v12;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt32)@<X0>( uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for LACOnenessAuthenticatorPendingRequest()
{
  uint64_t result = type metadata singleton initialization cache for LACOnenessAuthenticatorPendingRequest;
  if (!type metadata singleton initialization cache for LACOnenessAuthenticatorPendingRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }

    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v21 >= v11) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }

        int64_t v14 = v24;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    BOOL v33 = (unint64_t)(v8 + 63) >> 6;
    int64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        uint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        __int128 v17 = v16 | (v13 << 6);
      }

      else
      {
        __int128 v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          uint64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              unint64_t v3 = v2;
              if ((a2 & 1) != 0)
              {
                unint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v34 = -1LL << v32;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            uint64_t v13 = v20;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, LACDTOMutablePendingPolicyEvaluation>);
  __int128 v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  id v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v21 >= v36) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }

        uint64_t v13 = v24;
      }
    }

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v44 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0LL;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }

        int64_t v20 = v27;
      }
    }

uint64_t outlined init with copy of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: LACOnenessAuthenticatorPendingRequest));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return outlined init with take of Any(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a1,  a2,  a3,  (void (*)(uint64_t))specialized _NativeDictionary.copy(),  &demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  int64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v14 = (void *)*v5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }

    goto LABEL_11;
  }

  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4(v19);
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1, v27);
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }

  unint64_t v16 = v25;
  unint64_t v22 = *v7;
  if ((v20 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, v28, v22);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)( _OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      BOOL v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      BOOL v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  __int128 v6 = (void *)(a5[6] + 16 * a1);
  *__int128 v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void specialized LACOnenessAuthenticatorModel.authenticateRequest(_:completion:)( void *a1, uint64_t a2, void (**a3)(const void *, void, void *))
{
  uint64_t v112 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v108 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v108);
  id v102 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  int64_t v101 = (char *)&v98 - v12;
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v106 = (char *)&v98 - v14;
  MEMORY[0x1895F8858](v13);
  uint64_t v105 = (char *)&v98 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  unint64_t v20 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  unint64_t v104 = (char *)&v98 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v98 - v24;
  MEMORY[0x1895F8858](v23);
  int64_t v27 = (char *)&v98 - v26;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a3;
  unint64_t v111 = a3;
  _Block_copy(a3);
  id v29 = objc_msgSend(a1, sel_externalizedContext);
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v107 = v31;

    id v109 = objc_msgSend(a1, sel_client);
    if (v109)
    {
      swift_getObjectType();
      Class isa = (Class)objc_msgSend(a1, sel_options);
      uint64_t v99 = v16;
      uint64_t v100 = v28;
      uint64_t v98 = v17;
      if (isa)
      {
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }

      unint64_t v33 = v107;
      id v103 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_infoForXPCClient_evaluationOptions_, v109, isa);

      id v34 = objc_msgSend((id)objc_opt_self(), sel_isCompanionSessionActive);
      if (v34)
      {
        unint64_t v35 = LACOnenessAuthenticatorModel.mockedAuthProvider.getter();
      }

      else
      {
        unint64_t v35 = *(char **)(v112 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_authProvider);
        swift_unknownObjectRetain();
      }

      uint64_t v59 = (void (*)(uint64_t, uint64_t))v100;
      Class v60 = Data._bridgeToObjectiveC()().super.isa;
      id v61 = objc_msgSend(v35, sel_authenticateClient_withAcmContext_, v103, v60);

      swift_unknownObjectRelease();
      if (v61)
      {
        uint64_t v62 = (uint64_t)v106;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
        uint64_t v64 = v108;
        v63(v7, v62, v108);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v7, 0LL, 1LL, v64);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1LL, v64) != 1)
        {
          uint64_t v65 = v105;
          v63(v105, (uint64_t)v7, v64);
          id v66 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
          v66(v62, v65, v64);
          id v67 = v101;
          v66((uint64_t)v101, v65, v64);
          type metadata accessor for LACOnenessAuthenticatorPendingRequest();
          uint64_t v68 = swift_allocObject();
          v63( (char *)(v68 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_identifier),  (uint64_t)v67,  v64);
          *(void *)(v68 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request) = a1;
          uint64_t v69 = (void (**)(uint64_t, uint64_t))(v68
                                                       + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_completion);
          char *v69 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ();
          v69[1] = v59;
          uint64_t v70 = (uint64_t *)(v112
                          + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions);
          swift_beginAccess();
          swift_unknownObjectRetain();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v113 = *v70;
          *uint64_t v70 = 0x8000000000000000LL;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v68,  v62,  isUniquelyReferenced_nonNull_native,  (void (*)(uint64_t))specialized _NativeDictionary.copy(),  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
          *uint64_t v70 = v113;
          swift_bridgeObjectRelease();
          os_log_type_t v72 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
          v72(v62, v64);
          swift_endAccess();
          id v73 = LACLogABM();
          uint64_t v74 = v104;
          Logger.init(_:)();
          uint64_t v75 = v102;
          v66((uint64_t)v102, v65, v64);
          swift_unknownObjectRetain_n();
          uint64_t v76 = (os_log_s *)Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = v75;
            uint64_t v79 = swift_slowAlloc();
            uint64_t v80 = v64;
            uint64_t v81 = swift_slowAlloc();
            v114[0] = v81;
            *(_DWORD *)uint64_t v79 = 136446466;
            lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
            uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v114);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v72((uint64_t)v78, v80);
            *(_WORD *)(v79 + 12) = 1026;
            unsigned int v84 = objc_msgSend(a1, sel_identifier);
            swift_unknownObjectRelease();
            LODWORD(v113) = v84;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_unknownObjectRelease();
            _os_log_impl( &dword_189219000,  v76,  v77,  "Did start companion session with id: %{public}s for request %{public}u",  (uint8_t *)v79,  0x12u);
            swift_arrayDestroy();
            MEMORY[0x1895E56D4](v81, -1LL, -1LL);
            MEMORY[0x1895E56D4](v79, -1LL, -1LL);
            outlined consume of Data._Representation(v110, v107);

            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v98 + 8))(v104, v99);
            v72((uint64_t)v105, v80);
          }

          else
          {
            swift_unknownObjectRelease();
            outlined consume of Data._Representation(v110, v107);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
            v72((uint64_t)v75, v64);
            (*(void (**)(char *, uint64_t))(v98 + 8))(v74, v99);
            v72((uint64_t)v65, v64);
          }

          goto LABEL_25;
        }
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, 1LL, 1LL, v108);
      }

      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v7,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
      id v85 = LACLogABM();
      Logger.init(_:)();
      swift_unknownObjectRetain();
      id v86 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 67240192;
        LODWORD(v114[0]) = objc_msgSend(a1, sel_identifier);
        uint64_t v89 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        _os_log_impl( &dword_189219000,  v86,  v87,  "Unable to start companion authentication for request: %{public}u",  v88,  8u);
        MEMORY[0x1895E56D4](v88, -1LL, -1LL);

        uint64_t v91 = v98;
        uint64_t v90 = v99;
      }

      else
      {

        swift_unknownObjectRelease();
        uint64_t v91 = v98;
        uint64_t v90 = v99;
        uint64_t v89 = v110;
      }

      id v92 = v111;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v20, v90);
      uint64_t v93 = (void *)objc_opt_self();
      uint64_t v94 = (void *)MEMORY[0x1895E445C](0xD000000000000026LL, 0x80000001892BB010LL);
      id v95 = objc_msgSend(v93, sel_errorWithCode_debugDescription_, -1000, v94);

      id v96 = v95;
      char v97 = (void *)_convertErrorToNSError(_:)();
      v92[2](v92, 0LL, v97);
      swift_unknownObjectRelease();

      uint64_t v51 = v89;
      unint64_t v52 = v33;
    }

    else
    {
      id v42 = LACLogABM();
      Logger.init(_:)();
      id v43 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v45 = 0;
        _os_log_impl(&dword_189219000, v43, v44, "Missing client info", v45, 2u);
        MEMORY[0x1895E56D4](v45, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
      uint64_t v46 = (void *)objc_opt_self();
      id v47 = (void *)MEMORY[0x1895E445C](0xD000000000000013LL, 0x80000001892BB090LL);
      id v48 = objc_msgSend(v46, sel_errorWithCode_debugDescription_, -1000, v47);

      id v49 = v48;
      id v50 = (void *)_convertErrorToNSError(_:)();
      v111[2](v111, 0LL, v50);

      uint64_t v51 = v110;
      unint64_t v52 = v107;
    }

    outlined consume of Data._Representation(v51, v52);
LABEL_25:
    swift_release();
    return;
  }

  id v36 = LACLogABM();
  Logger.init(_:)();
  swift_unknownObjectRetain();
  uint64_t v37 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = v16;
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 67240192;
    LODWORD(v114[0]) = objc_msgSend(a1, sel_identifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_189219000, v37, v38, "ACMContext for request: %{public}u is nil", v40, 8u);
    int64_t v41 = v40;
    uint64_t v16 = v39;
    MEMORY[0x1895E56D4](v41, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease();
  }

  uint64_t v53 = v111;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v27, v16);
  unint64_t v54 = (void *)objc_opt_self();
  uint64_t v55 = (void *)MEMORY[0x1895E445C](0xD000000000000013LL, 0x80000001892BB070LL);
  id v56 = objc_msgSend(v54, sel_errorWithCode_debugDescription_, -1000, v55);

  id v57 = v56;
  uint64_t v58 = (void *)_convertErrorToNSError(_:)();
  v53[2](v53, 0LL, v58);
  swift_release();
}

uint64_t specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didStartAuthenticationWith:)( uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = LACLogABM();
  Logger.init(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v12 = v1;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v26 = v7;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 67240192;
    uint64_t v16 = &v12[OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_pendingSessions];
    swift_beginAccess();
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v25 = v8;
    if (v18 && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v20 & 1) != 0))
    {
      uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 8 * v19);
      swift_endAccess();
      unsigned int v22 = objc_msgSend( *(id *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACOnenessAuthenticatorPendingRequest_request),  sel_identifier);
    }

    else
    {
      swift_endAccess();
      unsigned int v22 = 0;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unsigned int v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_189219000, v13, v14, "Did start companion authentication for request %{public}u", v15, 8u);
    MEMORY[0x1895E56D4](v15, -1LL, -1LL);
    uint64_t v8 = v25;
    uint64_t v7 = v26;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    uint64_t v13 = (os_log_s *)v12;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)( uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v7 - 8);
  uint64_t v21 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, v13, v10);
  aBlock[4] = partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_22;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1895E46B4](0LL, v9, v6, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
  swift_release();
  return swift_release();
}

uint64_t specialized LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v23[0] = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[1] = *(void *)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore28LACOnenessAuthenticatorModel_replyQueue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  unint64_t v19 = (void *)v23[0];
  *(void *)(v18 + v17) = v23[0];
  aBlock[4] = partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_15;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = v19;
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1895E46B4](0LL, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v25);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for LACOnenessAuthenticatorModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessAuthenticatorModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessAuthenticatorModel.__allocating_init(authenticationProvider:clientInfoProvider:replyQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t ObjC metadata update function for LACOnenessAuthenticatorPendingRequest()
{
  return type metadata accessor for LACOnenessAuthenticatorPendingRequest();
}

uint64_t type metadata completion function for LACOnenessAuthenticatorPendingRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for LACOnenessAuthenticatorPendingRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessAuthenticatorPendingRequest.__allocating_init(identifier:request:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1892681A0()
{
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ()( uint64_t a1, uint64_t a2)
{
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_189268244()
{
  return swift_deallocObject();
}

uint64_t sub_189268268()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didFailAuthenticationWith:error:)( *(void *)(v0 + 16),  v0 + v2,  *(id *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_18926833C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80LL);
  return closure #1 in LACOnenessAuthenticatorModel.authenticationProvider(_:didCompleteAuthenticationWith:)( *(void *)(v0 + 16),  v0 + ((v1 + 24) & ~v1));
}

uint64_t outlined init with take of (key: UUID, value: LACOnenessAuthenticatorPendingRequest)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_189268424()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80LL);
  closure #1 in LACOnenessAuthenticatorModel.simulateAuthenticationSuccess()( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + ((v1 + 32) & ~v1));
}

id LACOnenessControllerModel.isFeatureEnabled.getter()
{
  return LACOnenessControllerModel.isFeatureEnabled.getter((SEL *)&selRef_featureFlagApproveByMacEnabled);
}

id LACOnenessControllerModel.isFailureUIEnabled.getter()
{
  return LACOnenessControllerModel.isFeatureEnabled.getter((SEL *)&selRef_featureFlagApproveByMacFailureUIEnabled);
}

id LACOnenessControllerModel.isFeatureEnabled.getter(SEL *a1)
{
  id v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v3 = [v2 *a1];

  return v3;
}

id LACOnenessControllerModel.__allocating_init(authenticator:sessionMonitor:uiPresenter:replyQueue:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v9 = objc_allocWithZone(v4);
  return LACOnenessControllerModel.init(authenticator:sessionMonitor:uiPresenter:replyQueue:)(a1, a2, a3, a4);
}

id LACOnenessControllerModel.init(authenticator:sessionMonitor:uiPresenter:replyQueue:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests;
  uint64_t v12 = v5;
  *(void *)&v5[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  *(void *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator] = a1;
  *(void *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor] = a2;
  *(void *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_uiPresenter] = a3;
  *(void *)&v12[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue] = a4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v13 = a4;

  v16.receiver = v12;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  objc_msgSend((id)swift_unknownObjectRetain(), sel_addObserver_, v14);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v14;
}

id LACOnenessControllerModel.isSessionActive.getter()
{
  return objc_msgSend( *(id *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor),  sel_isSessionActive);
}

void LACOnenessControllerModel.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(v3 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator);
  v7[4] = a2;
  v7[5] = a3;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_6;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_domainStateForRequest_completion_, a1, v6);
  _Block_release(v6);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t LACOnenessControllerModel.canProcessRequest(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  id v9 = (char *)&v33 - v8;
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  objc_super v16 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x18961B7F8], v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    id v19 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    unsigned int v20 = objc_msgSend(v19, sel_featureFlagApproveByMacEnabled);

    if (v20)
    {
      if (objc_msgSend( *(id *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator),  sel_isAvailable))
      {
        if (objc_msgSend( *(id *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor),  sel_isSessionActive)) {
          return 1LL;
        }
        id v29 = LACLogABM();
        Logger.init(_:)();
        swift_unknownObjectRetain();
        uint64_t v30 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          unint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v32 = 67240192;
          unsigned int v35 = objc_msgSend(a1, sel_identifier);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          _os_log_impl(&dword_189219000, v30, v31, "Not handling request rid: %{public}u - session not active", v32, 8u);
          MEMORY[0x1895E56D4](v32, -1LL, -1LL);
        }

        else
        {

          swift_unknownObjectRelease();
        }
      }

      else
      {
        id v25 = LACLogABM();
        Logger.init(_:)();
        swift_unknownObjectRetain();
        uint64_t v26 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 67240192;
          unsigned int v36 = objc_msgSend(a1, sel_identifier);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          _os_log_impl( &dword_189219000,  v26,  v27,  "Not handling request rid: %{public}u - authenticator not available",  v28,  8u);
          MEMORY[0x1895E56D4](v28, -1LL, -1LL);
        }

        else
        {

          swift_unknownObjectRelease();
        }

        uint64_t v11 = v9;
      }
    }

    else
    {
      id v21 = LACLogABM();
      Logger.init(_:)();
      swift_unknownObjectRetain();
      uint64_t v22 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 67240192;
        unsigned int v37 = objc_msgSend(a1, sel_identifier);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        _os_log_impl( &dword_189219000,  v22,  v23,  "Not handling request rid: %{public}u - feature flag disabled",  v24,  8u);
        MEMORY[0x1895E56D4](v24, -1LL, -1LL);
      }

      else
      {

        swift_unknownObjectRelease();
      }

      uint64_t v11 = v6;
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v3);
    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void LACOnenessControllerModel.processRequest(_:configuration:completion:)( void *a1, void *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v5 = v4;
  id v42 = a3;
  id v38 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v39 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  id v17 = (uint64_t *)((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = *(void **)((char *)v5 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  void *v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x18961B7F8], v14);
  id v19 = v18;
  LOBYTE(v1_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    if ((LACOnenessControllerModel.canProcessRequest(_:)(a1) & 1) != 0)
    {
      type metadata accessor for LACOnenessControllerPendingRequest();
      uint64_t v20 = swift_allocObject();
      swift_unknownObjectRetain();
      id v21 = v38;
      swift_retain();
      UUID.init()();
      *(_BYTE *)(v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
      *(void *)(v20
                + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0LL;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))( v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID,  1LL,  1LL,  v10);
      *(void *)(v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
      swift_unknownObjectRetain();
      id v22 = objc_msgSend(v21, sel_nextProcessor);
      *(void *)(v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v22;
      os_log_type_t v23 = (void (**)(void))(v20
                            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
      *os_log_type_t v23 = v42;
      v23[1] = a4;
      *(_BYTE *)(v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = 0;
      swift_unknownObjectRelease();

      uint64_t v24 = v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( v13,  v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id,  v10);
      id v42 = v5;
      id v25 = (uint64_t *)((char *)v5 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = *v25;
      uint64_t *v25 = 0x8000000000000000LL;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
      uint64_t *v25 = v43;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_endAccess();
      id v27 = LACLogABM();
      uint64_t v28 = v39;
      Logger.init(_:)();
      swift_unknownObjectRetain_n();
      swift_retain_n();
      id v29 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        id v38 = (id)swift_slowAlloc();
        v44[0] = v38;
        *(_DWORD *)uint64_t v31 = 136446466;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 1024;
        unsigned int v34 = objc_msgSend(a1, sel_identifier);
        swift_unknownObjectRelease();
        LODWORD(v43) = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        _os_log_impl( &dword_189219000,  v29,  v30,  "Registered pending request: %{public}s for evaluation request rid: %u",  (uint8_t *)v31,  0x12u);
        id v35 = v38;
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v35, -1LL, -1LL);
        MEMORY[0x1895E56D4](v31, -1LL, -1LL);
      }

      else
      {

        swift_release_n();
        swift_unknownObjectRelease_n();
      }

      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
      LACOnenessControllerModel.processAndEvaluateRequest(with:)(v24);
      swift_release();
    }

    else
    {
      id v36 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
      v42();
    }
  }

  else
  {
    __break(1u);
  }

uint64_t LACOnenessControllerPendingRequest.__allocating_init(request:configuration:completion:state:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  UUID.init()();
  *(_BYTE *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
  *(void *)(v10
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0LL;
  uint64_t v11 = v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  *(void *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
  swift_unknownObjectRetain();
  id v13 = objc_msgSend(a2, sel_nextProcessor);

  *(void *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v13;
  uint64_t v14 = (void *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
  void *v14 = a3;
  v14[1] = a4;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = a5;
  swift_unknownObjectRelease();
  return v10;
}

void LACOnenessControllerModel.processAndEvaluateRequest(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint8_t **)(v4 - 8);
  uint64_t v87 = v4;
  uint64_t v88 = v5;
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v80 - v9;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  unsigned int v84 = (char *)v80 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  unint64_t v83 = (char *)v80 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)v80 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1895F8858](v21);
  uint64_t v24 = (void *)((char *)v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v25 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x18961B7F8], v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    return;
  }

  id v27 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
  swift_beginAccess();
  uint64_t v28 = *v27;
  if (*(void *)(*v27 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v30 & 1) != 0))
  {
    uint64_t v82 = v2;
    uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
    swift_endAccess();
    swift_retain();
    id v32 = LACLogABM();
    Logger.init(_:)();
    uint64_t v34 = v87;
    unint64_t v33 = v88;
    (*((void (**)(char *, uint64_t, uint64_t))v88 + 2))(v10, a1, v87);
    id v35 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v81 = v31;
      uint64_t v39 = v33;
      uint64_t v40 = v38;
      v90[0] = v38;
      *(_DWORD *)uint64_t v37 = 136446210;
      v80[1] = v37 + 4;
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&__int128 v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = (void (*)(char *, uint64_t))*((void *)v39 + 1);
      uint64_t v31 = v81;
      v43(v10, v34);
      _os_log_impl(&dword_189219000, v35, v36, "Will process request: %{public}s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v40, -1LL, -1LL);
      MEMORY[0x1895E56D4](v37, -1LL, -1LL);
    }

    else
    {
      (*((void (**)(char *, uint64_t))v33 + 1))(v10, v34);
    }

    uint64_t v53 = v86;
    unint64_t v54 = *(void (**)(char *, uint64_t))(v85 + 8);
    v54(v20, v86);
    if (objc_msgSend( *(id *)(v82 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor),  sel_isSessionActive))
    {
      id v55 =  objc_msgSend( *(id *)(v31 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request),  sel_options);
      if (v55)
      {
        id v56 = v55;
        uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v89 = 1084LL;
        type metadata accessor for LACPolicyOption(0LL);
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption,  (uint64_t)&protocol conformance descriptor for LACPolicyOption);
        AnyHashable.init<A>(_:)();
        if (*(void *)(v57 + 16))
        {
          unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v90);
          uint64_t v59 = v83;
          if ((v60 & 1) != 0)
          {
            outlined init with copy of Any(*(void *)(v57 + 56) + 32 * v58, (uint64_t)&v91);
          }

          else
          {
            __int128 v91 = 0u;
            __int128 v92 = 0u;
          }
        }

        else
        {
          __int128 v91 = 0u;
          __int128 v92 = 0u;
          uint64_t v59 = v83;
        }

        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)v90);
        if (*((void *)&v92 + 1))
        {
          if (swift_dynamicCast() && (v90[0] & 1) != 0)
          {
            id v65 = LACLogABM();
            Logger.init(_:)();
            swift_retain_n();
            id v66 = (os_log_s *)Logger.logObject.getter();
            os_log_type_t v67 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v66, v67))
            {
              uint64_t v68 = (uint8_t *)swift_slowAlloc();
              uint64_t v69 = swift_slowAlloc();
              *(_DWORD *)uint64_t v68 = 136446210;
              v90[0] = v69;
              uint64_t v88 = v68 + 4;
              lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
              uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&__int128 v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_189219000, v66, v67, "Failing request: %{public}s - Oneness not supported", v68, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1895E56D4](v69, -1LL, -1LL);
              MEMORY[0x1895E56D4](v68, -1LL, -1LL);

              os_log_type_t v72 = v83;
            }

            else
            {

              swift_release_n();
              os_log_type_t v72 = v59;
            }

            v54(v72, v53);
            id v73 = (void *)objc_opt_self();
            uint64_t v74 = (void *)MEMORY[0x1895E445C](0xD000000000000053LL, 0x80000001892BB7D0LL);
            id v75 = objc_msgSend(v73, sel_errorWithCode_subcode_debugDescription_, -1, 33, v74);

            uint64_t v76 = v31 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
            os_log_type_t v77 = (void *)objc_opt_self();
            uint64_t v78 = (void *)_convertErrorToNSError(_:)();
            id v79 = objc_msgSend(v77, sel_resultWithFailure_, v78);

            LACOnenessControllerModel.finishRequestProcessing(with:result:)(v76, v79);
            swift_release();

            return;
          }

LABEL_29:
          LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(v31 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id);
          swift_release();
          return;
        }
      }

      else
      {
        __int128 v91 = 0u;
        __int128 v92 = 0u;
      }

      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v91,  &demangling cache variable for type metadata for Any?);
      goto LABEL_29;
    }

    id v61 = LACLogABM();
    Logger.init(_:)();
    uint64_t v62 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl(&dword_189219000, v62, v63, "Companion session is not active, evaluating right away", v64, 2u);
      MEMORY[0x1895E56D4](v64, -1LL, -1LL);
    }

    v54(v84, v53);
    LACOnenessControllerModel.finishRequestProcessing(with:result:)( v31 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id,  0LL);
    swift_release();
  }

  else
  {
    swift_endAccess();
    id v44 = LACLogABM();
    Logger.init(_:)();
    uint64_t v46 = v87;
    unint64_t v45 = v88;
    (*((void (**)(char *, uint64_t, uint64_t))v88 + 2))(v8, a1, v87);
    id v47 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      id v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      v90[0] = v50;
      *(_DWORD *)id v49 = 136446210;
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&__int128 v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v88 + 1))(v8, v46);
      _os_log_impl(&dword_189219000, v47, v48, "Cannot process request: %{public}s, no such pending request", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v50, -1LL, -1LL);
      MEMORY[0x1895E56D4](v49, -1LL, -1LL);
    }

    else
    {
      (*((void (**)(char *, uint64_t))v45 + 1))(v8, v46);
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v14, v86);
  }

void LACOnenessControllerModel.postProcessRequest(_:result:completion:)( void *a1, void *a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v43 - v14;
  id v16 = LACOnenessControllerModel.postProcessRequest(_:result:)(a1, a2);
  id v17 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  unsigned int v18 = objc_msgSend(v17, sel_featureFlagApproveByMacFailureUIEnabled);

  if (!v18)
  {
    id v24 = LACLogABM();
    Logger.init(_:)();
    swift_unknownObjectRetain();
    id v25 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v44 = v16;
      id v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v27 = 67240192;
      LODWORD(aBlock[0]) = objc_msgSend(a1, sel_identifier);
      id v16 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl( &dword_189219000,  v25,  v26,  "Skipping presentation of failure UI for rid: %{public}u. Feature not enabled.",  v27,  8u);
      MEMORY[0x1895E56D4](v27, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v10);
    goto LABEL_22;
  }

  id v19 = objc_msgSend(a1, sel_options);
  if (!v19)
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
LABEL_17:
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v48,  &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }

  uint64_t v20 = v19;
  uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = 1039LL;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v21 + 16) && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v23 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v48);
  }

  else
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
  }

  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)aBlock);
  if (!*((void *)&v49 + 1)) {
    goto LABEL_17;
  }
  if (swift_dynamicCast() && (aBlock[0] & 1) != 0)
  {
    id v28 = LACLogABM();
    Logger.init(_:)();
    swift_unknownObjectRetain();
    unint64_t v29 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      LODWORD(v44) = v31;
      unint64_t v33 = v32;
      *(_DWORD *)id v32 = 67240192;
      LODWORD(aBlock[0]) = objc_msgSend(a1, sel_identifier);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl( &dword_189219000,  v29,  (os_log_type_t)v44,  "Skipping presentation of failure UI for rid: %{public}u. No failure UI option.",  v33,  8u);
      MEMORY[0x1895E56D4](v33, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v10);
    goto LABEL_22;
  }

id LACOnenessControllerModel.postProcessRequest(_:result:)(void *a1, void *a2)
{
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  __int128 v49 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v46 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (uint64_t *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  void *v11 = v12;
  uint64_t v13 = *MEMORY[0x18961B7F8];
  uint64_t v14 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 104);
  v14(v11, v13, v8);
  id v15 = v12;
  char v16 = _dispatchPreconditionTest(_:)();
  id v17 = *(uint64_t (**)(void *, uint64_t))(v9 + 8);
  id result = (id)v17(v11, v8);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  swift_beginAccess();
  swift_unknownObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = specialized Sequence.first(where:)(v19, a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 152LL))(3LL);
    void *v11 = v15;
    v14(v11, v13, v8);
    id v21 = v15;
    char v22 = _dispatchPreconditionTest(_:)();
    id result = (id)v17(v11, v8);
    if ((v22 & 1) != 0)
    {
      uint64_t v23 = v20 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)(v23);
      swift_endAccess();
      uint64_t v24 = swift_release();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v20 + 168LL))(v24) & 1) != 0)
      {
        id v25 = specialized LACOnenessControllerModel.mapResult(_:for:)(v50, v20);
        id v26 = LACLogABM();
        id v27 = v46;
        Logger.init(_:)();
        swift_retain_n();
        id v28 = v25;
        unint64_t v29 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        int v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v50 = (void *)swift_slowAlloc();
          v52[0] = (uint64_t)v50;
          *(_DWORD *)uint64_t v32 = 136446466;
          LODWORD(v49) = v31;
          type metadata accessor for UUID();
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
          uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 12) = 2080;
          id v35 = objc_msgSend(v28, sel_debugDescription);
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v38 = v37;

          uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl( &dword_189219000,  v29,  (os_log_type_t)v49,  "Post-processing request: %{public}s with result: %s",  (uint8_t *)v32,  0x16u);
          uint64_t v39 = v50;
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v39, -1LL, -1LL);
          MEMORY[0x1895E56D4](v32, -1LL, -1LL);
          swift_release();
        }

        else
        {

          swift_release_n();
        }

        (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v48);
        return v28;
      }

      else
      {
        id v44 = v50;
        swift_release();
        return v44;
      }
    }

LABEL_16:
    __break(1u);
    return result;
  }

  id v40 = LACLogABM();
  Logger.init(_:)();
  swift_unknownObjectRetain();
  uint64_t v41 = (os_log_s *)Logger.logObject.getter();
  uint64_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, (os_log_type_t)v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 67240192;
    LODWORD(v52[0]) = objc_msgSend(a1, sel_identifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_189219000, v41, (os_log_type_t)v42, "No pending request for rid: %{public}u", v43, 8u);
    MEMORY[0x1895E56D4](v43, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
  return v50;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void @objc LACOnenessControllerModel.processRequest(_:configuration:completion:)( void *a1, int a2, uint64_t a3, void *a4, void *aBlock, void (*a6)(uint64_t, id, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  swift_unknownObjectRetain();
  id v11 = a4;
  id v12 = a1;
  a6(a3, v11, v12, v10);
  _Block_release(v10);
  _Block_release(v10);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall LACOnenessControllerModel.cancelAllRequests()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v0);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  LACOnenessControllerModel.cancelPendingRequests(contextID:)((uint64_t)v2);
  outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v2,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t LACOnenessControllerModel.cancelPendingRequests(contextID:)(uint64_t a1)
{
  uint64_t v149 = a1;
  uint64_t v151 = type metadata accessor for Logger();
  uint64_t v138 = *(void *)(v151 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v151);
  v148 = (char *)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  v146 = (char *)&v132 - v5;
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  v147 = (char *)&v132 - v7;
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  v141 = (char *)&v132 - v9;
  MEMORY[0x1895F8858](v8);
  uint64_t v140 = (uint64_t)&v132 - v10;
  uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x1895F8858](v137);
  unint64_t v142 = (unint64_t)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  v139 = (char *)&v132 - v14;
  MEMORY[0x1895F8858](v13);
  char v16 = (char *)&v132 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  v136 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  v143 = (char *)&v132 - v22;
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  v135 = (char *)&v132 - v24;
  MEMORY[0x1895F8858](v23);
  id v26 = (char *)&v132 - v25;
  uint64_t v27 = type metadata accessor for DispatchPredicate();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  os_log_type_t v30 = (uint64_t *)((char *)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v145 = v1;
  int v31 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *os_log_type_t v30 = v31;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v30, *MEMORY[0x18961B7F8], v27);
  id v32 = v31;
  uint64_t v33 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  if ((v33 & 1) != 0)
  {
    outlined init with copy of UUID?(v149, (uint64_t)v16);
    int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17);
    int v31 = (void *)v17;
    *(void *)&__int128 v144 = v18;
    if (v34 == 1)
    {
      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v16,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
      swift_beginAccess();
      uint64_t v35 = swift_bridgeObjectRetain();
      unint64_t v36 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v35);
      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v26, v16, v17);
      unint64_t v37 = (uint64_t *)(v145 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
      uint64_t v38 = swift_beginAccess();
      uint64_t v39 = *v37;
      MEMORY[0x1895F8858](v38);
      *(&v132 - 2) = (uint64_t)v26;
      swift_bridgeObjectRetain();
      unint64_t v36 = specialized Sequence.filter(_:)( (uint64_t)partial apply for closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:),  (uint64_t)(&v132 - 4),  v39);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v26, v17);
    }

    os_log_type_t v30 = v146;
    uint64_t v28 = v140;
    uint64_t v33 = (uint64_t)v139;
    char v16 = (char *)(v36 >> 62);
    unint64_t v150 = v36;
    if (!(v36 >> 62))
    {
      uint64_t v40 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v41 = v149;
      if (v40) {
        goto LABEL_7;
      }
LABEL_59:
      swift_bridgeObjectRelease();
      id v123 = LACLogABM();
      uint64_t v124 = v148;
      Logger.init(_:)();
      uint64_t v125 = v142;
      outlined init with copy of UUID?(v41, v142);
      id v126 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v127 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v126, v127))
      {
        uint64_t v128 = (uint8_t *)swift_slowAlloc();
        uint64_t v129 = swift_slowAlloc();
        v152[0] = v129;
        *(_DWORD *)uint64_t v128 = 136446210;
        uint64_t v130 = Optional.debugDescription.getter();
        uint64_t v154 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AsyncStream<()>.Continuation?( v125,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_189219000, v126, v127, "No requests to cancel for contextID: %{public}s", v128, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v129, -1LL, -1LL);
        MEMORY[0x1895E56D4](v128, -1LL, -1LL);
      }

      else
      {
        outlined destroy of AsyncStream<()>.Continuation?( v125,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v124, v151);
    }
  }

  else
  {
    __break(1u);
  }

  swift_bridgeObjectRetain();
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v41 = v149;
  if (!v40) {
    goto LABEL_59;
  }
LABEL_7:
  id v42 = LACLogABM();
  Logger.init(_:)();
  outlined init with copy of UUID?(v41, v33);
  unint64_t v43 = v150;
  swift_bridgeObjectRetain_n();
  id v44 = (os_log_s *)Logger.logObject.getter();
  int v45 = static os_log_type_t.debug.getter();
  BOOL v46 = os_log_type_enabled(v44, (os_log_type_t)v45);
  v148 = (char *)v40;
  uint64_t v149 = (uint64_t)v31;
  if (!v46)
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of AsyncStream<()>.Continuation?( v33,  (uint64_t *)&demangling cache variable for type metadata for UUID?);

    __int128 v49 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8);
    uint64_t result = v49(v28, v151);
    unint64_t v52 = v43;
    goto LABEL_36;
  }

  uint64_t v47 = swift_slowAlloc();
  uint64_t v132 = swift_slowAlloc();
  uint64_t v154 = v132;
  *(_DWORD *)uint64_t v47 = 136446466;
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
  }

  else
  {
    uint64_t v48 = *(void *)((v150 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
  }

  uint64_t v53 = v144;
  int v133 = v45;
  uint64_t v54 = MEMORY[0x18961AFE8];
  os_log_t v134 = v44;
  if (v48)
  {
    uint64_t v153 = MEMORY[0x18961AFE8];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v48 & ~(v48 >> 63),  0);
    if (v48 < 0)
    {
LABEL_64:
      __break(1u);
      return result;
    }

    uint64_t v55 = v153;
    id v56 = v136;
    uint64_t v57 = v135;
    if ((v150 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v48; ++i)
      {
        uint64_t v59 = MEMORY[0x1895E478C](i, v150)
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, void *))(v53 + 16))(v57, v59, v31);
        swift_unknownObjectRelease();
        uint64_t v153 = v55;
        unint64_t v61 = *(void *)(v55 + 16);
        unint64_t v60 = *(void *)(v55 + 24);
        if (v61 >= v60 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v60 > 1,  v61 + 1,  1);
          uint64_t v55 = v153;
        }

        *(void *)(v55 + 16) = v61 + 1;
        (*(void (**)(unint64_t, char *, void *))(v53 + 32))( v55 + ((*(unsigned __int8 *)(v53 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
        + *(void *)(v53 + 72) * v61,
          v57,
          v31);
      }

      unint64_t v52 = v150;
      swift_bridgeObjectRelease();
      uint64_t v40 = (uint64_t)v148;
    }

    else
    {
      v135 = (char *)v47;
      uint64_t v64 = v53;
      uint64_t v65 = 0LL;
      unint64_t v52 = v150;
      do
      {
        uint64_t v66 = *(void *)(v52 + 8 * v65 + 32)
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, void *))(v64 + 16))(v56, v66, v31);
        uint64_t v153 = v55;
        unint64_t v68 = *(void *)(v55 + 16);
        unint64_t v67 = *(void *)(v55 + 24);
        if (v68 >= v67 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v67 > 1,  v68 + 1,  1);
          uint64_t v55 = v153;
        }

        ++v65;
        *(void *)(v55 + 16) = v68 + 1;
        (*(void (**)(unint64_t, char *, void *))(v64 + 32))( v55 + ((*(unsigned __int8 *)(v64 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))
        + *(void *)(v64 + 72) * v68,
          v56,
          v31);
      }

      while (v48 != v65);
      swift_bridgeObjectRelease();
      uint64_t v40 = (uint64_t)v148;
      uint64_t v53 = v64;
      uint64_t v47 = (uint64_t)v135;
    }

    uint64_t v54 = MEMORY[0x18961AFE8];
    int64_t v62 = *(void *)(v55 + 16);
    if (v62) {
      goto LABEL_28;
    }
  }

  else
  {
    unint64_t v52 = v150;
    swift_bridgeObjectRelease();
    uint64_t v55 = MEMORY[0x18961AFE8];
    int64_t v62 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (v62)
    {
LABEL_28:
      v135 = (char *)v47;
      uint64_t v153 = v54;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62, 0);
      unint64_t v69 = v55 + ((*(unsigned __int8 *)(v53 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      unint64_t v142 = *(void *)(v53 + 72);
      uint64_t v70 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
      do
      {
        unint64_t v71 = v143;
        uint64_t v72 = v149;
        v70(v143, v69, v149);
        uint64_t v73 = UUID.uuidString.getter();
        uint64_t v75 = v74;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v72);
        uint64_t v63 = v153;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v63 + 16) + 1LL,  1);
          uint64_t v63 = v153;
        }

        unint64_t v77 = *(void *)(v63 + 16);
        unint64_t v76 = *(void *)(v63 + 24);
        if (v77 >= v76 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v76 > 1,  v77 + 1,  1);
          uint64_t v63 = v153;
        }

        *(void *)(v63 + 16) = v77 + 1;
        unint64_t v78 = v63 + 16 * v77;
        *(void *)(v78 + 32) = v73;
        *(void *)(v78 + 40) = v75;
        v69 += v142;
        --v62;
        uint64_t v53 = v144;
      }

      while (v62);
      swift_bridgeObjectRelease();
      unint64_t v52 = v150;
      uint64_t v40 = (uint64_t)v148;
      uint64_t v47 = (uint64_t)v135;
      goto LABEL_35;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v63 = MEMORY[0x18961AFE8];
LABEL_35:
  uint64_t v153 = v63;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v79 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v81 = v80;
  swift_bridgeObjectRelease();
  uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v81, &v154);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v47 + 12) = 2082;
  uint64_t v82 = (uint64_t)v139;
  uint64_t v83 = Optional.debugDescription.getter();
  uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v154);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of AsyncStream<()>.Continuation?( v82,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
  os_log_t v85 = v134;
  _os_log_impl( &dword_189219000,  v134,  (os_log_type_t)v133,  "Cancelling requests: %{public}s for contextID: %{public}s",  (uint8_t *)v47,  0x16u);
  uint64_t v86 = v132;
  swift_arrayDestroy();
  MEMORY[0x1895E56D4](v86, -1LL, -1LL);
  MEMORY[0x1895E56D4](v47, -1LL, -1LL);

  __int128 v49 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8);
  uint64_t result = v49(v140, v151);
  os_log_type_t v30 = v146;
LABEL_36:
  uint64_t v87 = v147;
  if (v40 < 1)
  {
    __break(1u);
    goto LABEL_64;
  }

  uint64_t v88 = 0LL;
  v143 = (char *)OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator;
  unint64_t v89 = v52 & 0xC000000000000001LL;
  uint64_t v140 = -4LL;
  v139 = (char *)(MEMORY[0x18961AFC0] + 8LL);
  *(void *)&__int128 v51 = 136446210LL;
  __int128 v144 = v51;
  unint64_t v142 = v52 & 0xC000000000000001LL;
  do
  {
    if (v89)
    {
      uint64_t v90 = MEMORY[0x1895E478C](v88, v52);
    }

    else
    {
      uint64_t v90 = *(void *)(v52 + 8 * v88 + 32);
      swift_retain();
    }

    int v91 = (*(unsigned __int8 (**)(void))(*(void *)v90 + 144LL))();
    if ((v91 - 2) >= 2)
    {
      if (v91)
      {
        id v109 = LACLogABM();
        Logger.init(_:)();
        swift_retain_n();
        uint64_t v110 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v110, v111))
        {
          uint64_t v112 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          uint64_t v154 = v113;
          *(_DWORD *)uint64_t v112 = v144;
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
          uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v112 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, &v154);
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl( &dword_189219000,  v110,  v111,  "Cancelling companion authentication of request: %{public}s",  (uint8_t *)v112,  0xCu);
          swift_arrayDestroy();
          uint64_t v116 = v113;
          uint64_t v87 = v147;
          MEMORY[0x1895E56D4](v116, -1LL, -1LL);
          uint64_t v117 = v112;
          unint64_t v52 = v150;
          MEMORY[0x1895E56D4](v117, -1LL, -1LL);
        }

        else
        {

          swift_release_n();
        }

        v49((uint64_t)v87, v151);
        os_log_type_t v30 = v146;
        objc_msgSend( *(id *)&v143[v145],  sel_cancelAuthenticationForRequest_,  *(void *)(v90 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request));
        swift_release();
      }

      else
      {
        id v101 = LACLogABM();
        id v102 = v141;
        Logger.init(_:)();
        swift_retain_n();
        id v103 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v103, v104))
        {
          uint64_t v105 = swift_slowAlloc();
          uint64_t v106 = swift_slowAlloc();
          uint64_t v154 = v106;
          *(_DWORD *)uint64_t v105 = v144;
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
          uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v105 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, &v154);
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl( &dword_189219000,  v103,  v104,  "Cancelling request: %{public}s during preprocessing",  (uint8_t *)v105,  0xCu);
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v106, -1LL, -1LL);
          MEMORY[0x1895E56D4](v105, -1LL, -1LL);
        }

        else
        {

          swift_release_n();
        }

        v49((uint64_t)v102, v151);
        os_log_type_t v30 = v146;
        uint64_t v118 = v90 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
        id v119 = objc_msgSend((id)objc_opt_self(), sel_errorWithCode_, v140);
        v120 = (void *)objc_opt_self();
        uint64_t v121 = (void *)_convertErrorToNSError(_:)();
        id v122 = objc_msgSend(v120, sel_resultWithFailure_, v121);

        LACOnenessControllerModel.finishRequestProcessing(with:result:)(v118, v122);
        swift_release();

        uint64_t v87 = v147;
        uint64_t v40 = (uint64_t)v148;
        unint64_t v52 = v150;
        unint64_t v89 = v142;
      }
    }

    else
    {
      id v92 = LACLogABM();
      Logger.init(_:)();
      swift_retain_n();
      uint64_t v93 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        uint64_t v95 = swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        uint64_t v154 = v96;
        *(_DWORD *)uint64_t v95 = v144;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v95 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, &v154);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl( &dword_189219000,  v93,  v94,  "Request: %{public}s not cancelled because it is already evaluating",  (uint8_t *)v95,  0xCu);
        swift_arrayDestroy();
        uint64_t v99 = v96;
        uint64_t v87 = v147;
        MEMORY[0x1895E56D4](v99, -1LL, -1LL);
        uint64_t v100 = v95;
        unint64_t v52 = v150;
        MEMORY[0x1895E56D4](v100, -1LL, -1LL);
        swift_release();
      }

      else
      {

        swift_release_n();
      }

      v49((uint64_t)v30, v151);
      uint64_t v40 = (uint64_t)v148;
    }

    ++v88;
  }

  while (v40 != v88);
  return swift_bridgeObjectRelease();
}

uint64_t LACOnenessControllerModel.cancelRequests(forContextID:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
  LACOnenessControllerModel.cancelPendingRequests(contextID:)((uint64_t)v4);
  return outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v4,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

id LACOnenessControllerModel.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACOnenessControllerModel.init()()
{
}

id LACOnenessControllerModel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACOnenessControllerModel.handleSessionUpdate()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (void *)((char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)&v0[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue];
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x18961B7F8], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    id v15 = LACLogABM();
    Logger.init(_:)();
    char v16 = v0;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    uint64_t v19 = &OBJC_PROTOCOL___LACRequest;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 67109120;
      void v23[2] = objc_msgSend( *(id *)&v16[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_sessionMonitor],  sel_isSessionActive);
      uint64_t v19 = &OBJC_PROTOCOL___LACRequest;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_189219000, v17, v18, "Companion session changed to isActive: %{BOOL}d", v20, 8u);
      MEMORY[0x1895E56D4](v20, -1LL, -1LL);
    }

    else
    {

      uint64_t v17 = (os_log_s *)v16;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t result = (uint64_t)objc_msgSend(*(id *)&v16[(unint64_t)v19[30].isa], sel_isSessionActive);
    if ((result & 1) == 0)
    {
      uint64_t v21 = &v16[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests];
      uint64_t result = swift_beginAccess();
      if (*(void *)(*(void *)v21 + 16LL))
      {
        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v3, 1LL, 1LL, v22);
        LACOnenessControllerModel.cancelPendingRequests(contextID:)((uint64_t)v3);
        return outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v3,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(**(void **)a1 + 216LL))(v4);
  LOBYTE(a1) = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return a1 & 1;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(uint64_t *))result;
  int64_t v6 = 0LL;
  uint64_t v20 = MEMORY[0x18961AFE8];
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v17 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v18 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v6++, 1LL))
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v6 >= v18) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v17 + 8 * v6);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v15 = v6 + 1;
  if (v6 + 1 >= v18)
  {
LABEL_29:
    swift_release();
    return v20;
  }

  unint64_t v14 = *(void *)(v17 + 8 * v15);
  if (!v14)
  {
    int64_t v15 = v6 + 2;
    if (v6 + 2 >= v18) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = v6 + 3;
      if (v6 + 3 >= v18) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v6 + 4;
        if (v6 + 4 < v18)
        {
          unint64_t v14 = *(void *)(v17 + 8 * v15);
          if (v14) {
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v6 = v15 + 1;
            if (__OFADD__(v15, 1LL)) {
              break;
            }
            if (v6 >= v18) {
              goto LABEL_29;
            }
            unint64_t v14 = *(void *)(v17 + 8 * v6);
            ++v15;
            if (v14) {
              goto LABEL_19;
            }
          }

LABEL_31:
          __break(1u);
          return result;
        }

        goto LABEL_29;
      }
    }
  }

  __break(1u);
}

  return v12;
}

uint64_t LACOnenessControllerModel.authenticateRequest(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)v54 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  id v13 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  id v56 = (char *)v54 - v14;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  int64_t v18 = (void *)((char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x18961B7F8], v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    uint64_t v22 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
    swift_beginAccess();
    uint64_t v23 = *v22;
    if (*(void *)(*v22 + 16) && (uint64_t v24 = v2, v25 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v26 & 1) != 0))
    {
      uint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
      swift_endAccess();
      uint64_t v28 = *(void (**)(uint64_t))(*(void *)v27 + 152LL);
      swift_retain();
      v28(1LL);
      id v29 = LACLogABM();
      os_log_type_t v30 = v56;
      Logger.init(_:)();
      uint64_t v31 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v9, a1, v4);
      id v32 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v55 = v24;
        uint64_t v35 = v31;
        unint64_t v36 = (uint8_t *)v34;
        uint64_t v37 = swift_slowAlloc();
        aBlock[0] = v37;
        *(_DWORD *)unint64_t v36 = 136446210;
        v54[1] = v36 + 4;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
        uint64_t v24 = v55;
        v40(v9, v4);
        _os_log_impl(&dword_189219000, v32, v33, "Will authenticate request: %{public}s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v37, -1LL, -1LL);
        MEMORY[0x1895E56D4](v36, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v4);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v30, v58);
      }

      __int128 v49 = *(void **)(v24 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_authenticator);
      uint64_t v50 = *(void *)(v27 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request);
      uint64_t v51 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v52 = swift_allocObject();
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 24) = v27;
      aBlock[4] = (uint64_t)partial apply for closure #1 in LACOnenessControllerModel.authenticateRequest(with:);
      aBlock[5] = v52;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_55;
      uint64_t v53 = _Block_copy(aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v49, sel_authenticateRequest_completion_, v50, v53);
      _Block_release(v53);
      swift_release();
      return swift_unknownObjectRelease();
    }

    else
    {
      swift_endAccess();
      id v41 = LACLogABM();
      Logger.init(_:)();
      uint64_t v42 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v7, a1, v4);
      unint64_t v43 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        int v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        aBlock[0] = v46;
        *(_DWORD *)int v45 = 136446210;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v4);
        _os_log_impl( &dword_189219000,  v43,  v44,  "Cannot authenticate request: %{public}s, no such pending request",  v45,  0xCu);
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v46, -1LL, -1LL);
        MEMORY[0x1895E56D4](v45, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v4);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v13, v58);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void closure #1 in LACOnenessControllerModel.authenticateRequest(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 + 16;
  if (a2)
  {
    uint64_t v6 = (void *)objc_opt_self();
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    id v8 = objc_msgSend(v6, sel_errorWithCode_underlyingError_, -1, v7);

    swift_beginAccess();
    uint64_t v9 = MEMORY[0x1895E5764](v5);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      uint64_t v11 = a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      uint64_t v12 = (void *)objc_opt_self();
      id v13 = (void *)_convertErrorToNSError(_:)();
      id v14 = objc_msgSend(v12, sel_resultWithFailure_, v13);

      LACOnenessControllerModel.finishRequestProcessing(with:result:)(v11, v14);
    }
  }

  else
  {
    uint64_t v15 = *(void (**)(uint64_t))(*(void *)a4 + 200LL);
    uint64_t v16 = swift_bridgeObjectRetain();
    v15(v16);
    swift_beginAccess();
    uint64_t v17 = MEMORY[0x1895E5764](v5);
    if (!v17) {
      return;
    }
    id v8 = (id)v17;
    LACOnenessControllerModel.finishRequestProcessing(with:result:)( a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id,  0LL);
  }
}

void LACOnenessControllerModel.finishRequestProcessing(with:result:)(uint64_t a1, void *a2)
{
  id v50 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  id v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v51 = (char *)&v49 - v14;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  int64_t v18 = (uint8_t **)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x18961B7F8], v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    uint64_t v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
    swift_beginAccess();
    uint64_t v22 = *v21;
    if (*(void *)(*v21 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v24 & 1) != 0))
    {
      uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
      swift_endAccess();
      swift_retain();
      id v26 = LACLogABM();
      uint64_t v27 = v51;
      Logger.init(_:)();
      uint64_t v28 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v9, a1, v4);
      id v29 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        v56[0] = v32;
        *(_DWORD *)uint64_t v31 = 136446210;
        __int128 v49 = v31 + 4;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v4);
        _os_log_impl(&dword_189219000, v29, v30, "Will finish processing of request: %{public}s", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v32, -1LL, -1LL);
        MEMORY[0x1895E56D4](v31, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v4);

        (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v53);
      }

      (*(void (**)(uint64_t))(*(void *)v25 + 152LL))(2LL);
      if (v50)
      {
        unint64_t v43 = *(void (**)(id))(v25
                                        + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
        id v44 = v50;
        swift_retain();
        v43(v44);

        swift_release();
        swift_release();
      }

      else
      {
        int v45 = *(void (**)(void))(v25
                               + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
        uint64_t v46 = (void *)objc_opt_self();
        uint64_t v47 = *(void *)(v25 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request);
        swift_retain();
        id v48 = objc_msgSend(v46, sel_resultWithNext_, v47);
        v45();
        swift_release();
        swift_release();
      }
    }

    else
    {
      swift_endAccess();
      id v35 = LACLogABM();
      Logger.init(_:)();
      uint64_t v36 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v7, a1, v4);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        v56[0] = v40;
        *(_DWORD *)unint64_t v39 = 136446210;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v4);
        _os_log_impl( &dword_189219000,  v37,  v38,  "Cannot finish processing of request: %{public}s, no such pending request",  v39,  0xCu);
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v40, -1LL, -1LL);
        MEMORY[0x1895E56D4](v39, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v4);
      }

      (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v53);
    }
  }

  else
  {
    __break(1u);
  }

void LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v101 = a1;
  uint64_t v102 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v102 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v102);
  uint64_t v6 = (char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v4);
  uint64_t v97 = (char *)v91 - v8;
  uint64_t v96 = v9;
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)v91 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v99 = *(void *)(v12 - 8);
  uint64_t v100 = v12;
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v95 = (char *)v91 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)v91 - v18;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  unint64_t v23 = (void *)((char *)v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v24 = *(void **)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue);
  *unint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, *MEMORY[0x18961B7F8], v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    return;
  }

  id v26 = (uint64_t *)(v2 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests);
  swift_beginAccess();
  uint64_t v27 = *v26;
  uint64_t v28 = v101;
  if (*(void *)(v27 + 16))
  {
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v101);
    if ((v30 & 1) != 0)
    {
      uint64_t v31 = *(void *)(v27 + 56);
      uint64_t v98 = v3;
      uint64_t v32 = *(void *)(v31 + 8 * v29);
      swift_endAccess();
      uint64_t v94 = v32;
      uint64_t v33 = v98;
      swift_retain();
      id v34 = LACLogABM();
      Logger.init(_:)();
      uint64_t v35 = v102;
      id v92 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
      v92(v11, v28, v102);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v93 = v2;
      if (v38)
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        aBlock[0] = v40;
        *(_DWORD *)unint64_t v39 = 136446210;
        v91[1] = v39 + 4;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&__int128 v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v35);
        _os_log_impl(&dword_189219000, v36, v37, "Will preflight request: %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v40, -1LL, -1LL);
        MEMORY[0x1895E56D4](v39, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v35);
      }

      uint64_t v51 = *(void (**)(char *, uint64_t))(v99 + 8);
      v51(v19, v100);
      uint64_t v52 = v94;
      (*(void (**)(uint64_t))(*(void *)v94 + 176LL))(1LL);
      uint64_t v53 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request;
      id v54 =  objc_msgSend( *(id *)(v52 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request),  sel_options);
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        *(void *)&v104[0] = 1000LL;
        type metadata accessor for LACPolicyOption(0LL);
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type LACPolicyOption and conformance LACPolicyOption,  (uint64_t (*)(uint64_t))type metadata accessor for LACPolicyOption,  (uint64_t)&protocol conformance descriptor for LACPolicyOption);
        AnyHashable.init<A>(_:)();
        if (*(void *)(v56 + 16)
          && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v58 & 1) != 0))
        {
          outlined init with copy of Any(*(void *)(v56 + 56) + 32 * v57, (uint64_t)&v105);
        }

        else
        {
          __int128 v105 = 0u;
          __int128 v106 = 0u;
        }

        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)aBlock);
        if (*((void *)&v106 + 1))
        {
          if (swift_dynamicCast() && (aBlock[0] & 1) != 0)
          {
            id v59 = LACLogABM();
            unint64_t v60 = v95;
            Logger.init(_:)();
            swift_retain_n();
            uint64_t v61 = (os_log_s *)Logger.logObject.getter();
            os_log_type_t v62 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v61, v62))
            {
              uint64_t v63 = (uint8_t *)swift_slowAlloc();
              uint64_t v64 = swift_slowAlloc();
              *(_DWORD *)uint64_t v63 = 136446210;
              aBlock[0] = v64;
              lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
              uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)&__int128 v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, aBlock);
              uint64_t v52 = v94;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl( &dword_189219000,  v61,  v62,  "Not preflying request: %{public}s - not interactive evaluation",  v63,  0xCu);
              swift_arrayDestroy();
              MEMORY[0x1895E56D4](v64, -1LL, -1LL);
              MEMORY[0x1895E56D4](v63, -1LL, -1LL);

              unint64_t v67 = v95;
            }

            else
            {

              swift_release_n();
              unint64_t v67 = v60;
            }

            v51(v67, v100);
            uint64_t v87 = *(void (**)(void))(v52
                                   + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
            uint64_t v88 = (void *)objc_opt_self();
            uint64_t v89 = *(void *)(v52 + v53);
            swift_retain();
            id v90 = objc_msgSend(v88, sel_resultWithNext_, v89);
            v87();
            swift_release();
            swift_release();

            return;
          }

          goto LABEL_23;
        }
      }

      else
      {
        __int128 v105 = 0u;
        __int128 v106 = 0u;
      }

      outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v105,  &demangling cache variable for type metadata for Any?);
LABEL_23:
      uint64_t v68 = MEMORY[0x1896184C8];
      id v69 = objc_msgSend(*(id *)(v52 + v53), sel_shallowCopy);
      id v70 = objc_msgSend(v69, sel_options);
      if (v70)
      {
        unint64_t v71 = v70;
        uint64_t v72 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      }

      else
      {
        uint64_t v72 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
      }

      uint64_t v73 = v101;
      uint64_t v74 = v102;
      uint64_t v75 = v92;
      *(void *)&__int128 v105 = 1000LL;
      AnyHashable.init<A>(_:)();
      *((void *)&v106 + 1) = v68;
      LOBYTE(v105) = 1;
      outlined init with take of Any(&v105, v104);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t aBlock[6] = v72;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v104,  (uint64_t)aBlock,  isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)aBlock);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v69, sel_updateOptions_, isa);

      unint64_t v78 = *(void **)(v52 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor);
      uint64_t v79 = (void *)objc_opt_self();
      swift_unknownObjectRetain();
      id v80 = objc_msgSend(v79, sel_defaultConfiguration);
      uint64_t v81 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v82 = v97;
      v75(v97, v73, v74);
      uint64_t v83 = v98;
      unint64_t v84 = (*(unsigned __int8 *)(v98 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
      os_log_t v85 = (char *)swift_allocObject();
      *((void *)v85 + 2) = v81;
      *((void *)v85 + 3) = v69;
      *((void *)v85 + 4) = v52;
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(&v85[v84], v82, v74);
      aBlock[4] = (uint64_t)partial apply for closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:);
      aBlock[5] = (uint64_t)v85;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_39;
      uint64_t v86 = _Block_copy(aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v78, sel_processRequest_configuration_completion_, v69, v80, v86);
      swift_unknownObjectRelease();
      _Block_release(v86);
      swift_release();
      swift_unknownObjectRelease();

      return;
    }
  }

  swift_endAccess();
  id v43 = LACLogABM();
  Logger.init(_:)();
  uint64_t v44 = v102;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v28, v102);
  int v45 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    aBlock[0] = v48;
    uint64_t v98 = v3;
    *(_DWORD *)uint64_t v47 = 136446210;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&__int128 v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v6, v44);
    _os_log_impl(&dword_189219000, v45, v46, "Cannot preflight request: %{public}s, no such pending request", v47, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v48, -1LL, -1LL);
    MEMORY[0x1895E56D4](v47, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v44);
  }

  (*(void (**)(char *, uint64_t))(v99 + 8))(v15, v100);
}

void closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)( void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x1895E5764](a2 + 16);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    if (objc_msgSend(a1, sel_rawValue) == (id)1)
    {
      uint64_t v16 = (void *)objc_opt_self();
      unint64_t v38 = 0LL;
      unint64_t v39 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease();
      unint64_t v38 = 0xD00000000000001BLL;
      unint64_t v39 = 0x80000001892BB850LL;
      unsigned int v37 = objc_msgSend(a3, sel_identifier);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      uint64_t v18 = (void *)MEMORY[0x1895E445C](v38, v39);
      swift_bridgeObjectRelease();
      id v19 = objc_msgSend(v16, sel_errorWithCode_debugDescription_, -1000, v18);

      uint64_t v20 = a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      uint64_t v21 = (void *)objc_opt_self();
      uint64_t v22 = (void *)_convertErrorToNSError(_:)();
      id v23 = objc_msgSend(v21, sel_resultWithFailure_, v22);

      LACOnenessControllerModel.finishRequestProcessing(with:result:)(v20, v23);
      uint64_t v15 = v23;
    }

    else
    {
      uint64_t v35 = (uint64_t)a3;
      uint64_t v36 = a4;
      char v24 = *(void **)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor);
      unsigned __int8 v25 = objc_msgSend(v24, sel_respondsToSelector_, sel_postProcessRequest_result_completion_);
      uint64_t v34 = (uint64_t)a1;
      if ((v25 & 1) != 0)
      {
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v24;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = partial apply;
        *(void *)(v27 + 24) = v26;
        swift_unknownObjectRetain();
        uint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))partial apply for thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ();
      }

      else
      {
        uint64_t v28 = (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))closure #1 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:);
      }

      uint64_t v33 = v28;
      uint64_t v29 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a5,  v10);
      unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      unint64_t v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v32 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v32 + v30, v13, v10);
      *(void *)(v32 + v31) = v29;
      *(void *)(v32 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8LL)) = v36;
      swift_retain();
      swift_retain();
      v33( v35,  v34,  (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:));
      swift_release();
      swift_release();
      swift_release();
    }
  }

uint64_t closure #1 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return a3(a2);
}

void closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v99 = a4;
  uint64_t v102 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v95 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  os_log_t v96 = (os_log_t)((char *)&v95 - v15);
  MEMORY[0x1895F8858](v14);
  Swift::String v17 = (char *)&v95 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v100 = *(void *)(v18 - 8);
  uint64_t v101 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  char v24 = (char *)&v95 - v23;
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  os_log_t v97 = (os_log_t)((char *)&v95 - v26);
  MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)&v95 - v27;
  uint64_t v103 = a3 + 16;
  uint64_t v98 = a1;
  id v29 = objc_msgSend(a1, sel_error);
  if (v29)
  {
    v107[0] = (uint64_t)v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for NSError();
    if ((swift_dynamicCast() & 1) != 0)
    {
      id v30 = v106[0];
      unint64_t v31 = (void *)objc_opt_self();
      id v32 = v30;
      uint64_t v33 = (void *)_convertErrorToNSError(_:)();

      LODWORD(v31) = objc_msgSend(v31, sel_error_hasCode_, v33, -1004);
      if (!(_DWORD)v31)
      {
        id v52 = LACLogABM();
        Logger.init(_:)();
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v102, v6);
        id v32 = v32;
        uint64_t v53 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = swift_slowAlloc();
          os_log_t v97 = (os_log_t)swift_slowAlloc();
          uint64_t v102 = swift_slowAlloc();
          v107[0] = v102;
          *(_DWORD *)uint64_t v55 = 136446466;
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
          uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
          v106[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v107);
          os_log_t v96 = v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          *(_WORD *)(v55 + 12) = 2112;
          v106[0] = v32;
          id v58 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_t v59 = v97;
          *(void *)os_log_t v97 = v32;

          os_log_t v60 = v96;
          _os_log_impl( &dword_189219000,  v96,  v54,  "Preflight for request: %{public}s finished with error: %@",  (uint8_t *)v55,  0x16u);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v59, -1LL, -1LL);
          uint64_t v61 = v102;
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v61, -1LL, -1LL);
          MEMORY[0x1895E56D4](v55, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        }

        (*(void (**)(char *, uint64_t))(v100 + 8))(v21, v101);
        uint64_t v72 = v103;
        swift_beginAccess();
        uint64_t v73 = MEMORY[0x1895E5764](v72);
        if (v73)
        {
          uint64_t v74 = (void *)v73;
          LACOnenessControllerModel.finishRequestProcessing(with:result:)( v99 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id,  v98);
        }

        goto LABEL_15;
      }

      uint64_t v34 = v103;
      swift_beginAccess();
      uint64_t v35 = MEMORY[0x1895E5764](v34);
      if (v35
        && (uint64_t v36 = (void *)v35,
            char v37 = specialized LACOnenessControllerModel.isContinuityUnlockAvailable(nonInteractiveError:)(v32),
            v36,
            (v37 & 1) != 0))
      {
        swift_beginAccess();
        uint64_t v38 = MEMORY[0x1895E5764](v34);
        if (v38)
        {
          unint64_t v39 = (void *)v38;
          char v40 = specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(v32);

          if ((v40 & 1) != 0)
          {
            swift_beginAccess();
            uint64_t v41 = MEMORY[0x1895E5764](v34);
            if (v41)
            {
              unint64_t v42 = (void *)v41;
              LACOnenessControllerModel.authenticateRequest(with:)(v99 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id);
            }

            goto LABEL_15;
          }
        }

        id v76 = LACLogABM();
        os_log_t v77 = v97;
        Logger.init(_:)();
        os_log_t v78 = v96;
        uint64_t v79 = v6;
        (*(void (**)(os_log_t, uint64_t, uint64_t))(v7 + 16))(v96, v102, v6);
        id v32 = v32;
        id v80 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v82 = swift_slowAlloc();
          uint64_t v98 = (void *)swift_slowAlloc();
          uint64_t v102 = swift_slowAlloc();
          v105[0] = (id)v102;
          *(_DWORD *)uint64_t v82 = 136446466;
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
          os_log_t v95 = v80;
          uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, (uint64_t *)v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(os_log_t, uint64_t))(v7 + 8))(v78, v79);
          *(_WORD *)(v82 + 12) = 2112;
          os_log_t v85 = v77;
          uint64_t v104 = (uint64_t)v32;
          id v86 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v87 = v98;
          void *v98 = v32;

          os_log_t v88 = v95;
          _os_log_impl( &dword_189219000,  v95,  v81,  "Continuity unlock not satisfiable for request: %{public}s error: %@",  (uint8_t *)v82,  0x16u);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          uint64_t v34 = v103;
          MEMORY[0x1895E56D4](v87, -1LL, -1LL);
          uint64_t v89 = v102;
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v89, -1LL, -1LL);
          MEMORY[0x1895E56D4](v82, -1LL, -1LL);

          (*(void (**)(os_log_t, uint64_t))(v100 + 8))(v85, v101);
        }

        else
        {
          (*(void (**)(os_log_t, uint64_t))(v7 + 8))(v78, v79);

          (*(void (**)(os_log_t, uint64_t))(v100 + 8))(v77, v101);
        }

        swift_beginAccess();
        uint64_t v75 = MEMORY[0x1895E5764](v34);
        if (!v75) {
          goto LABEL_15;
        }
      }

      else
      {
        id v62 = LACLogABM();
        Logger.init(_:)();
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v102, v6);
        id v32 = v32;
        uint64_t v63 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = swift_slowAlloc();
          uint64_t v98 = (void *)swift_slowAlloc();
          uint64_t v102 = swift_slowAlloc();
          v106[0] = (id)v102;
          *(_DWORD *)uint64_t v65 = 136446466;
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
          os_log_t v97 = v63;
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
          v105[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
          *(_WORD *)(v65 + 12) = 2112;
          v105[0] = v32;
          id v68 = v32;
          uint64_t v34 = v103;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v69 = v98;
          void *v98 = v32;

          os_log_t v70 = v97;
          _os_log_impl( &dword_189219000,  v97,  v64,  "Continuity unlock not available for request: %{public}s error: %@",  (uint8_t *)v65,  0x16u);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v69, -1LL, -1LL);
          uint64_t v71 = v102;
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v71, -1LL, -1LL);
          MEMORY[0x1895E56D4](v65, -1LL, -1LL);
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
        }

        (*(void (**)(char *, uint64_t))(v100 + 8))(v24, v101);
        swift_beginAccess();
        uint64_t v75 = MEMORY[0x1895E5764](v34);
        if (!v75) {
          goto LABEL_15;
        }
      }

      id v90 = (void *)v75;
      uint64_t v91 = v99 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      id v92 = (void *)objc_opt_self();
      id v93 = v32;
      uint64_t v94 = (void *)_convertErrorToNSError(_:)();
      id v32 = objc_msgSend(v92, sel_resultWithFailure_, v94);

      LACOnenessControllerModel.finishRequestProcessing(with:result:)(v91, v32);
LABEL_15:

      return;
    }
  }

  id v43 = LACLogABM();
  Logger.init(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v17, v102, v6);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    v107[0] = v47;
    uint64_t v102 = v7;
    *(_DWORD *)os_log_type_t v46 = 136446210;
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    v106[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v17, v6);
    _os_log_impl(&dword_189219000, v44, v45, "Preflight for request: %{public}s finished with success", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v47, -1LL, -1LL);
    MEMORY[0x1895E56D4](v46, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }

  (*(void (**)(char *, uint64_t))(v100 + 8))(v28, v101);
  uint64_t v50 = v103;
  swift_beginAccess();
  uint64_t v51 = MEMORY[0x1895E5764](v50);
  if (v51)
  {
    id v32 = (id)v51;
    LACOnenessControllerModel.finishRequestProcessing(with:result:)( v99 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id,  v98);
    goto LABEL_15;
  }

BOOL static LACOnenessControllerPendingRequest.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LACOnenessControllerPendingRequest.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int LACOnenessControllerPendingRequest.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t LACOnenessControllerPendingRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t LACOnenessControllerPendingRequest.completion.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
  swift_retain();
  return v1;
}

uint64_t LACOnenessControllerPendingRequest.nextProcessor.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessControllerPendingRequest.request.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACOnenessControllerPendingRequest.state.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state);
  swift_beginAccess();
  return *v1;
}

uint64_t LACOnenessControllerPendingRequest.state.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*LACOnenessControllerPendingRequest.state.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACOnenessControllerPendingRequest.isOnenessProcessed.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed);
  swift_beginAccess();
  return *v1;
}

uint64_t LACOnenessControllerPendingRequest.isOnenessProcessed.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*LACOnenessControllerPendingRequest.isOnenessProcessed.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackReason.modify;
}

uint64_t LACOnenessControllerPendingRequest.companionAuthenticationResult.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LACOnenessControllerPendingRequest.companionAuthenticationResult.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*LACOnenessControllerPendingRequest.companionAuthenticationResult.modify())()
{
  return LACDTOMutablePendingPolicyEvaluation.callbackURL.modify;
}

uint64_t key path setter for LACOnenessControllerPendingRequest.contextID : LACOnenessControllerPendingRequest( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 224LL))(v6);
}

uint64_t LACOnenessControllerPendingRequest.contextID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  swift_beginAccess();
  outlined init with copy of UUID?(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v8,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
  closure #1 in LACOnenessControllerPendingRequest.contextID.getter(v1, a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0LL, 1LL, v10);
  swift_beginAccess();
  outlined assign with take of UUID?((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t closure #1 in LACOnenessControllerPendingRequest.contextID.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 =  objc_msgSend( *(id *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request),  sel_contextID);
  if (v11)
  {
    uint64_t v12 = v11;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v10, v7, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0LL, 1LL, v4);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1LL, 1LL, v4);
  }

  UUID.init()();
  return outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v10,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t LACOnenessControllerPendingRequest.contextID.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0LL, 1LL, v6);
  uint64_t v8 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  swift_beginAccess();
  outlined assign with take of UUID?((uint64_t)v5, v8);
  return swift_endAccess();
}

void (*LACOnenessControllerPendingRequest.contextID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  uint64_t v5 = type metadata accessor for UUID();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  LACOnenessControllerPendingRequest.contextID.getter((uint64_t)v8);
  return LACOnenessControllerPendingRequest.contextID.modify;
}

void LACOnenessControllerPendingRequest.contextID.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 80LL);
  uint64_t v3 = *(void **)(*(void *)a1 + 88LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v8 = v2[6];
    size_t v7 = (void *)v2[7];
    (*(void (**)(void, void, uint64_t))(v6 + 16))(v2[10], v2[11], v5);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v7, v4, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v7, 0LL, 1LL, v5);
    uint64_t v9 = v8 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v7, v9);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }

  else
  {
    uint64_t v10 = v2[8];
    uint64_t v11 = v2[9];
    uint64_t v12 = v2[6];
    size_t v7 = (void *)v2[7];
    (*(void (**)(void *, void, uint64_t))(v11 + 32))(v7, v2[11], v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0LL, 1LL, v10);
    uint64_t v13 = v12
        + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v7, v13);
    swift_endAccess();
  }

  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

uint64_t LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = specialized LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)(a1, a2, a3, a4, a5);
  swift_unknownObjectRelease();

  return v6;
}

uint64_t LACOnenessControllerPendingRequest.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AsyncStream<()>.Continuation?( v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return v0;
}

uint64_t LACOnenessControllerPendingRequest.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AsyncStream<()>.Continuation?( v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_deallocClassInstance();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1895E4750](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    char v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (uint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            uint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  void v16[2];
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  uint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F58]);
      uint64_t v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t type metadata accessor for LACOnenessControllerPendingRequest()
{
  uint64_t result = type metadata singleton initialization cache for LACOnenessControllerPendingRequest;
  if (!type metadata singleton initialization cache for LACOnenessControllerPendingRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v14 - v12 == 0x8000000000000000LL && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_37;
      }

    uint64_t v9 = 0;
    goto LABEL_37;
  }

  int64_t v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10LL);
  uint64_t v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

  if (__dst) {
    Util_DeallocRequirement((int *)__dst);
  }
  return v4;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (j << 6); ; unint64_t i = __clz(__rbit64(v14)) + (j << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    unint64_t v17 = *(void **)(v16 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request);
    swift_retain();
    unsigned int v18 = objc_msgSend(v17, sel_identifier);
    if (v18 == objc_msgSend(a2, sel_identifier))
    {
      swift_release();
      return v16;
    }

    uint64_t result = swift_release();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = j + 1;
    if (__OFADD__(j, 1LL)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++j;
    if (v14) {
      goto LABEL_19;
    }
    int64_t j = v13 + 1;
    if (v13 + 1 >= v8) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v4 + 8 * j);
    if (v14) {
      goto LABEL_19;
    }
    int64_t j = v13 + 2;
    if (v13 + 2 >= v8) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v4 + 8 * j);
    if (v14) {
      goto LABEL_19;
    }
    int64_t j = v13 + 3;
    if (v13 + 3 >= v8) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v4 + 8 * j);
    if (v14) {
      goto LABEL_19;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v8)
    {
LABEL_24:
      swift_release();
      return 0LL;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v15);
    for (int64_t j = v15; !v14; ++v15)
    {
      int64_t j = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_27;
      }
      if (j >= v8) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v4 + 8 * j);
    }

LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

  uint64_t v34 = objc_msgSend(v15, sel_error);
  if (!v34)
  {
LABEL_25:
    ((void (**)(void, id))a4)[2](a4, v15);
LABEL_26:
    swift_release();
    goto LABEL_27;
  }

  uint64_t v35 = v34;
  uint64_t v36 = (void *)objc_opt_self();
  char v37 = (void *)_convertErrorToNSError(_:)();
  LODWORD(v36) = objc_msgSend(v36, sel_error_hasCode_subcode_, v37, -1, 33);

  if (!(_DWORD)v36)
  {

    goto LABEL_25;
  }

  uint64_t v38 = *(void **)(a3 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_uiPresenter);
  unint64_t v39 = (void *)swift_allocObject();
  v39[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ();
  v39[3] = v27;
  v39[4] = v15;
  aBlock[4] = partial apply for closure #1 in LACOnenessControllerModel.postProcessRequest(_:result:completion:);
  aBlock[5] = v39;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_20;
  char v40 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v41 = v15;
  swift_release();
  objc_msgSend(v38, sel_presentUIForIdentifier_request_completion_, 3, a1, v40);
  _Block_release(v40);
  swift_release();

  int64_t v15 = v35;
LABEL_27:
}

  int64_t v13 = 70;
LABEL_13:
  return v12;
}

  if ((_DWORD)v6) {
    unint64_t v17 = 70;
  }
  else {
    unint64_t v17 = 10;
  }
  if (v17 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unint64_t v22 = "ACMLib";
    uint64_t v23 = 2080;
    char v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    uint64_t v25 = 2048;
    uint64_t v26 = (int)v6;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v6;
}

uint64_t specialized LACOnenessControllerPendingRequest.init(request:configuration:completion:state:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
  *(void *)(v5
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0LL;
  uint64_t v11 = v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  *(void *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
  swift_unknownObjectRetain();
  id v13 = objc_msgSend(a2, sel_nextProcessor);
  *(void *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v13;
  unint64_t v14 = (void *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
  void *v14 = a3;
  v14[1] = a4;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = a5;
  return v5;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State()
{
  unint64_t result = lazy protocol witness table cache variable for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State;
  if (!lazy protocol witness table cache variable for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State)
  {
    unint64_t result = MEMORY[0x1895E5638]( &protocol conformance descriptor for LACOnenessControllerPendingRequest.State,  &type metadata for LACOnenessControllerPendingRequest.State);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LACOnenessControllerPendingRequest.State and conformance LACOnenessControllerPendingRequest.State);
  }

  return result;
}

uint64_t sub_1892704CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144LL))();
  *a2 = result;
  return result;
}

uint64_t sub_1892704FC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 152LL))(*a1);
}

uint64_t sub_189270528@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168LL))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_18927055C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 176LL))(*a1);
}

uint64_t sub_189270588@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192LL))();
  *a2 = result;
  return result;
}

uint64_t sub_1892705B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 200LL);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1892705E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 216LL))();
}

uint64_t type metadata accessor for LACOnenessControllerModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessControllerModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessControllerModel.__allocating_init(authenticator:sessionMonitor:uiPresenter:replyQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t ObjC metadata update function for LACOnenessControllerPendingRequest()
{
  return type metadata accessor for LACOnenessControllerPendingRequest();
}

void type metadata completion function for LACOnenessControllerPendingRequest()
{
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }

uint64_t method lookup function for LACOnenessControllerPendingRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.isOnenessProcessed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.isOnenessProcessed.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.isOnenessProcessed.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.companionAuthenticationResult.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.companionAuthenticationResult.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.companionAuthenticationResult.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.contextID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.contextID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.contextID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of LACOnenessControllerPendingRequest.__allocating_init(request:configuration:completion:state:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }

uint64_t getEnumTagSinglePayload for LACOnenessControllerPendingRequest.State( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for LACOnenessControllerPendingRequest.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1892708E4 + 4 * byte_1892B5165[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_189270918 + 4 * byte_1892B5160[v4]))();
}

uint64_t sub_189270918(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_189270920(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x189270928LL);
  }
  return result;
}

uint64_t sub_189270934(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18927093CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_189270940(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_189270948(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LACOnenessControllerPendingRequest.State()
{
  return &type metadata for LACOnenessControllerPendingRequest.State;
}

void specialized LACOnenessControllerModel.processRequest(_:configuration:completion:)( void *a1, void *a2, char *a3, void (**a4)(void, void))
{
  id v41 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x1895F8858](v7);
  unint64_t v42 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = swift_allocObject();
  unsigned int v18 = *(void **)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_replyQueue];
  uint64_t v45 = v17;
  *(void *)(v17 + 16) = a4;
  void *v16 = v18;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x18961B7F8], v13);
  _Block_copy(a4);
  id v19 = v18;
  LOBYTE(v1_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v18 & 1) != 0)
  {
    if ((LACOnenessControllerModel.canProcessRequest(_:)(a1) & 1) != 0)
    {
      uint64_t v20 = a3;
      type metadata accessor for LACOnenessControllerPendingRequest();
      uint64_t v21 = swift_allocObject();
      swift_unknownObjectRetain();
      id v22 = v41;
      uint64_t v23 = v45;
      swift_retain();
      UUID.init()();
      *(_BYTE *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_isOnenessProcessed) = 0;
      *(void *)(v21
                + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_companionAuthenticationResult) = 0LL;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))( v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest____lazy_storage___contextID,  1LL,  1LL,  v9);
      *(void *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_request) = a1;
      swift_unknownObjectRetain();
      id v24 = objc_msgSend(v22, sel_nextProcessor);
      *(void *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_nextProcessor) = v24;
      uint64_t v25 = (void *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_completion);
      void *v25 = thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()partial apply;
      v25[1] = v23;
      *(_BYTE *)(v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_state) = 0;
      swift_unknownObjectRelease();

      uint64_t v26 = v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( v12,  v21 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACOnenessControllerPendingRequest_id,  v9);
      uint64_t v27 = (uint64_t *)&v20[OBJC_IVAR____TtC23LocalAuthenticationCore25LACOnenessControllerModel_pendingRequests];
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v46 = *v27;
      *uint64_t v27 = 0x8000000000000000LL;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
      *uint64_t v27 = v46;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_endAccess();
      id v29 = LACLogABM();
      id v30 = v42;
      Logger.init(_:)();
      swift_unknownObjectRetain_n();
      swift_retain_n();
      unint64_t v31 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        v47[0] = v40;
        *(_DWORD *)uint64_t v33 = 136446466;
        id v41 = v20;
        uint64_t v34 = v26;
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 1024;
        unsigned int v37 = objc_msgSend(a1, sel_identifier);
        swift_unknownObjectRelease();
        LODWORD(v46) = v37;
        uint64_t v26 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        _os_log_impl( &dword_189219000,  v31,  v32,  "Registered pending request: %{public}s for evaluation request rid: %u",  (uint8_t *)v33,  0x12u);
        uint64_t v38 = v40;
        swift_arrayDestroy();
        MEMORY[0x1895E56D4](v38, -1LL, -1LL);
        MEMORY[0x1895E56D4](v33, -1LL, -1LL);
      }

      else
      {

        swift_release_n();
        swift_unknownObjectRelease_n();
      }

      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
      LACOnenessControllerModel.processAndEvaluateRequest(with:)(v26);
      swift_release();
      swift_release();
    }

    else
    {
      id v39 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
      ((void (**)(void, id))a4)[2](a4, v39);
      swift_release();
    }
  }

  else
  {
    __break(1u);
  }

uint64_t specialized LACOnenessControllerModel.mapValue(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a2 + 192LL))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = MEMORY[0x189618740];
    AnyHashable.init<A>(_:)();
    uint64_t v9 = v4;
    *(void *)&__int128 v8 = 2LL;
    outlined init with take of Any(&v8, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v10);
  }

  return a1;
}

id specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  __int128 v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = &v32[-v9];
  uint64_t v11 = (void *)objc_opt_self();
  uint64_t v12 = (void *)MEMORY[0x1895E445C](a1, a2);
  id v13 = objc_msgSend(v11, sel_mechanismTreeFromSerializedTree_, v12);

  if (v13)
  {
    id v14 = objc_msgSend(v13, sel_isSatisfiableWithValue_, 13);
    id v15 = LACLogABM();
    Logger.init(_:)();
    swift_bridgeObjectRetain_n();
    id v16 = v13;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v35 = v4;
      uint64_t v20 = v19;
      uint64_t v21 = swift_slowAlloc();
      unsigned int v33 = v14;
      id v22 = (void *)v21;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v38 = v34;
      *(_DWORD *)uint64_t v20 = 136315650;
      uint64_t v36 = v5;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2112;
      uint64_t v37 = (uint64_t)v16;
      id v23 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v22 = v13;

      *(_WORD *)(v20 + 22) = 1024;
      uint64_t v24 = v33;
      LODWORD(v37) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl( &dword_189219000,  v17,  v18,  "Serialized tree: %s parsed into tree: %@ and is satisfiable: %{BOOL}d",  (uint8_t *)v20,  0x1Cu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v22, -1LL, -1LL);
      uint64_t v25 = v34;
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v25, -1LL, -1LL);
      MEMORY[0x1895E56D4](v20, -1LL, -1LL);

      (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v10, v35);
      return (id)v24;
    }

    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
      return v14;
    }
  }

  else
  {
    id v27 = LACLogABM();
    Logger.init(_:)();
    swift_bridgeObjectRetain_n();
    uint64_t v28 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v36 = v5;
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v38 = v31;
      *(_DWORD *)id v30 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_189219000, v28, v29, "Could not parse tree: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v31, -1LL, -1LL);
      MEMORY[0x1895E56D4](v30, -1LL, -1LL);

      (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v8, v4);
    }

    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
    }

    return 0LL;
  }

uint64_t specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_userInfo);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v2 + 16) || (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v6 & 1) == 0))
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_7:
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v11,  &demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }

  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    unsigned __int8 v7 = 0;
    return v7 & 1;
  }

  unsigned __int8 v7 = specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(v9, v10);
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized LACOnenessControllerModel.isContinuityUnlockAvailable(nonInteractiveError:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_userInfo);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v2 + 16) || (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v6 & 1) == 0))
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v5, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
LABEL_7:
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v11,  &demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int]);
  if (!swift_dynamicCast())
  {
LABEL_8:
    uint64_t v7 = MEMORY[0x18961AFE8];
    goto LABEL_9;
  }

  uint64_t v7 = v10;
LABEL_9:
  char v8 = specialized Sequence<>.contains(_:)(13LL, v7);
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id specialized LACOnenessControllerModel.mapError(_:for:)(void *a1)
{
  uint64_t v2 = (void *)objc_opt_self();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  unsigned int v4 = objc_msgSend(v2, sel_error_hasCode_, v3, -1004);

  if (!v4)
  {
    id v7 = a1;
    return a1;
  }

  unint64_t v5 = (void *)_convertErrorToNSError(_:)();
  if ((specialized LACOnenessControllerModel.isRequestSatisfiable(with:)(v5) & 1) != 0)
  {
    if ((specialized LACOnenessControllerModel.isContinuityUnlockAvailable(nonInteractiveError:)(v5) & 1) != 0)
    {
      id v6 = a1;

      return a1;
    }

    __int128 v11 = (void *)MEMORY[0x1895E445C](0xD000000000000041LL, 0x80000001892BB780LL);
    id v10 = objc_msgSend(v2, sel_errorWithCode_debugDescription_, -11, v11);
  }

  else
  {
    uint64_t v9 = (void *)MEMORY[0x1895E445C](0xD000000000000059LL, 0x80000001892BB720LL);
    id v10 = objc_msgSend(v2, sel_errorWithCode_subcode_debugDescription_, -1, 33, v9);
  }

  return v10;
}

id specialized LACOnenessControllerModel.mapResult(_:for:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v12;
  if (!v13)
  {
    char v8 = (void *)objc_opt_self();
    specialized LACOnenessControllerModel.mapValue(_:for:)((uint64_t)v3, a2);
    outlined consume of LACEvaluationResultWithAssociatedValue(v3, 0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v8, sel_resultWithSuccess_, isa);

    return v7;
  }

  if (v13 == 1)
  {
    unsigned int v4 = (void *)objc_opt_self();
    id v5 = specialized LACOnenessControllerModel.mapError(_:for:)(v3);
    id v6 = (void *)_convertErrorToNSError(_:)();

    id v7 = objc_msgSend(v4, sel_resultWithFailure_, v6);
    outlined consume of LACEvaluationResultWithAssociatedValue(v3, 1);
    return v7;
  }

  outlined consume of LACEvaluationResultWithAssociatedValue(v12, 2);
  return a1;
}

void specialized LACOnenessControllerModel.postProcessRequest(_:result:completion:)( void *a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  __int128 v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  char v13 = (char *)&v42 - v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  _Block_copy(a4);
  id v15 = LACOnenessControllerModel.postProcessRequest(_:result:)(a1, a2);
  id v16 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  unsigned int v17 = objc_msgSend(v16, sel_featureFlagApproveByMacFailureUIEnabled);

  if (!v17)
  {
    id v23 = LACLogABM();
    Logger.init(_:)();
    swift_unknownObjectRetain();
    uint64_t v24 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v43 = a4;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 67240192;
      LODWORD(aBlock[0]) = objc_msgSend(a1, sel_identifier);
      a4 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl( &dword_189219000,  v24,  v25,  "Skipping presentation of failure UI for rid: %{public}u. Feature not enabled.",  v26,  8u);
      MEMORY[0x1895E56D4](v26, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v8);
    ((void (**)(void, id))a4)[2](a4, v15);
    goto LABEL_26;
  }

  id v18 = objc_msgSend(a1, sel_options);
  if (!v18)
  {
    __int128 v47 = 0u;
    __int128 v48 = 0u;
LABEL_17:
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v47,  &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }

  uint64_t v19 = v18;
  uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = 1039LL;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v20 + 16) && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v22 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v21, (uint64_t)&v47);
  }

  else
  {
    __int128 v47 = 0u;
    __int128 v48 = 0u;
  }

  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)aBlock);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_17;
  }
  if (!swift_dynamicCast())
  {
LABEL_18:
    uint64_t v27 = v14;
    goto LABEL_19;
  }

  uint64_t v27 = v14;
  if ((aBlock[0] & 1) != 0)
  {
    id v28 = LACLogABM();
    Logger.init(_:)();
    swift_unknownObjectRetain();
    os_log_type_t v29 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      id v42 = a1;
      os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
      LODWORD(v43) = v31;
      unsigned int v33 = v32;
      *(_DWORD *)os_log_type_t v32 = 67240192;
      LODWORD(aBlock[0]) = objc_msgSend(v42, sel_identifier);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl( &dword_189219000,  v29,  (os_log_type_t)v43,  "Skipping presentation of failure UI for rid: %{public}u. No failure UI option.",  v33,  8u);
      MEMORY[0x1895E56D4](v33, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v8);
    goto LABEL_25;
  }

uint64_t sub_189271F0C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()( uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()( a1,  *(void *)(v1 + 16));
}

uint64_t objectdestroyTm_0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACOnenessControllerModel.postProcessRequest(_:result:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:)( uint64_t a1)
{
  return closure #1 in LACOnenessControllerModel.cancelPendingRequests(contextID:)(a1) & 1;
}

void outlined consume of LACEvaluationResultWithAssociatedValue(void *a1, char a2)
{
  switch(a2)
  {
    case 2:
      swift_unknownObjectRelease();
      break;
    case 1:

      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }

uint64_t sub_189271FD4()
{
  return swift_deallocObject();
}

uint64_t sub_189271FF8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80LL);
  closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1892720C0()
{
  uint64_t v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))( v0 + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL)),  v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)( void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  closure #2 in closure #1 in LACOnenessControllerModel.preflightAndEvaluateRequest(with:)( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1892721A8()
{
  return swift_deallocObject();
}

id partial apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(v3 + 16), sel_postProcessRequest_result_completion_, a1, a2, a3);
}

uint64_t sub_1892721E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ()( a1,  a2,  a3,  a4,  *(void (**)(uint64_t, uint64_t, void *))(v4 + 16));
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }

  return result;
}

uint64_t sub_189272250()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in LACOnenessControllerModel.authenticateRequest(with:)( uint64_t a1, uint64_t a2)
{
}

id LACOnenessAuthenticator.isAvailable.getter()
{
  id v1 = objc_msgSend(objc_msgSend(v0, sel_model), sel_isAvailable);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t LACOnenessAuthenticator.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LACOnenessAuthenticator.domainState(for:completion:)( a1,  a2,  a3,  (uint64_t)&block_descriptor_7,  (SEL *)&selRef_domainStateForRequest_completion_);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t LACOnenessAuthenticator.authenticateRequest(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LACOnenessAuthenticator.domainState(for:completion:)( a1,  a2,  a3,  (uint64_t)&block_descriptor_3_0,  (SEL *)&selRef_authenticateRequest_completion_);
}

uint64_t LACOnenessAuthenticator.domainState(for:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v11 = objc_msgSend(v5, sel_model);
  v14[4] = a2;
  v14[5] = a3;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 1107296256LL;
  void v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v14[3] = a4;
  uint64_t v12 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(v11, *a5, a1, v12);
  _Block_release(v12);
  return swift_unknownObjectRelease();
}

uint64_t LACOnenessAuthenticator.cancelAuthentication(for:)(uint64_t a1)
{
  return swift_unknownObjectRelease();
}

char *LACOnenessAuthenticator.makeModel(withClientInfoProvider:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_authenticationProvider);
  swift_unknownObjectRetain();
  id v4 = objc_msgSend(v1, sel_replyQueue);
  id v5 = objc_allocWithZone((Class)type metadata accessor for LACOnenessAuthenticatorModel());
  return LACOnenessAuthenticatorModel.init(authenticationProvider:clientInfoProvider:replyQueue:)((uint64_t)v3, a1, v4);
}

uint64_t sub_18927289C()
{
  return swift_deallocObject();
}

uint64_t LACPreboardUseCaseProvider.provider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess();
  outlined init with copy of URL?( v3,  (uint64_t)v8,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
  if (v9 == 1)
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v8,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
    uint64_t v4 = type metadata accessor for LACPreboardUseCaseProviderAMFI();
    uint64_t v5 = swift_allocObject();
    uint64_t v9 = v4;
    uint64_t v10 = &protocol witness table for LACPreboardUseCaseProviderAMFI;
    v8[0] = v5;
    outlined init with copy of URL?( (uint64_t)v8,  (uint64_t)v7,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    swift_beginAccess();
    outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v7, v3);
    swift_endAccess();
  }

  return outlined init with take of LACPreboardUseCaseProviding?((uint64_t)v8, a1);
}

uint64_t outlined assign with take of LACPreboardUseCaseProviding??(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACPreboardUseCaseProviding??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of LACPreboardUseCaseProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t key path setter for LACPreboardUseCaseProvider.provider : LACPreboardUseCaseProvider( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined init with take of LACPreboardUseCaseProviding?((uint64_t)v6, (uint64_t)v5);
  swift_beginAccess();
  outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v5, v3 + 16);
  return swift_endAccess();
}

uint64_t LACPreboardUseCaseProvider.provider.setter(uint64_t a1)
{
  return swift_endAccess();
}

void (*LACPreboardUseCaseProvider.provider.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  LACPreboardUseCaseProvider.provider.getter((uint64_t)v3);
  return LACPreboardUseCaseProvider.provider.modify;
}

void LACPreboardUseCaseProvider.provider.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 40;
  uint64_t v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of URL?( *a1,  v3,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    outlined init with take of LACPreboardUseCaseProviding?(v3, v4);
    swift_beginAccess();
    outlined assign with take of LACPreboardUseCaseProviding??(v4, v5 + 16);
    swift_endAccess();
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v2,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
  }

  else
  {
    uint64_t v6 = v2[18];
    outlined init with take of LACPreboardUseCaseProviding?(*a1, v3);
    swift_beginAccess();
    outlined assign with take of LACPreboardUseCaseProviding??(v3, v6 + 16);
    swift_endAccess();
  }

  free(v2);
}

double LACPreboardUseCaseProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + 32) = 0LL;
  *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 0LL;
  *(void *)&double result = 1LL;
  *(_OWORD *)(v0 + 40) = xmmword_1892B5300;
  return result;
}

double LACPreboardUseCaseProvider.init()()
{
  *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 0LL;
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + 32) = 0LL;
  *(void *)&double result = 1LL;
  *(_OWORD *)(v0 + 40) = xmmword_1892B5300;
  return result;
}

void LACPreboardUseCaseProvider.preboardUseCase.getter()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v20 - v5;
  LACPreboardUseCaseProvider.provider.getter((uint64_t)&v20);
  if (v21)
  {
    outlined init with take of LACPreboardUseCaseProviding(&v20, (uint64_t)v22);
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) == -1
      && (id v9 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance),
          id v10 = objc_msgSend(v9, sel_valueForFlagPreboardMode),
          v9,
          v10)
      && (uint64_t v11 = (uint64_t)objc_msgSend(v10, sel_integerValue), v10, v11 >= -1)
      && v11 <= 4)
    {
      id v12 = LACLogPreboard();
      Logger.init(_:)();
      char v13 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v15 = 134217984;
        *(void *)&__int128 v20 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_189219000, v13, v14, "Using mocked use case: %ld", v15, 0xCu);
        MEMORY[0x1895E56D4](v15, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
  }

  else
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)&v20,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    id v16 = LACLogPreboard();
    Logger.init(_:)();
    unsigned int v17 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_189219000, v17, v18, "Unsupported platform", v19, 2u);
      MEMORY[0x1895E56D4](v19, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }

uint64_t LACPreboardUseCaseProvider.completeCurrentUseCase(success:)(char a1)
{
  *(void *)(v2 + 96) = v1;
  *(_BYTE *)(v2 + 120) = a1;
  return swift_task_switch();
}

uint64_t LACPreboardUseCaseProvider.completeCurrentUseCase(success:)()
{
  id v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v2 = objc_msgSend(v1, sel_valueForFlagPreboardMode);

  if (v2)
  {
    objc_msgSend((id)objc_opt_self(), sel_setPreboardMode_, 0);
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }

  LACPreboardUseCaseProvider.provider.getter(v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of AsyncStream<()>.Continuation?( v0 + 56,  &demangling cache variable for type metadata for LACPreboardUseCaseProviding?);
    uint64_t v8 = (void *)objc_opt_self();
    id v9 = (void *)MEMORY[0x1895E445C](0xD000000000000014LL, 0x80000001892BB890LL);
    objc_msgSend(v8, sel_errorWithCode_debugDescription_, -1020, v9);

    swift_willThrow();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }

  outlined init with take of LACPreboardUseCaseProviding((__int128 *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
  id v10 = (uint64_t (*)(void, uint64_t, uint64_t))(**(int **)(v6 + 16) + *(void *)(v6 + 16));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = LACPreboardUseCaseProvider.completeCurrentUseCase(success:);
  return v10(*(unsigned __int8 *)(v0 + 120), v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardUseCaseProvider.deinit()
{
  return v0;
}

uint64_t LACPreboardUseCaseProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for LACPreboardUseCaseProviding.preboardUseCase.getter in conformance LACPreboardUseCaseProvider()
{
}

uint64_t protocol witness for LACPreboardUseCaseProviding.completeCurrentUseCase(success:) in conformance LACPreboardUseCaseProvider( char a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + _Block_object_dispose(va, 8) = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  *(void *)(v5 + 96) = v4;
  *(_BYTE *)(v5 + 120) = a1;
  return swift_task_switch();
}

uint64_t outlined init with take of LACPreboardUseCaseProviding(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v3;
  return a2;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_189273330@<X0>(uint64_t a1@<X8>)
{
  return LACPreboardUseCaseProvider.provider.getter(a1);
}

uint64_t type metadata accessor for LACPreboardUseCaseProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardUseCaseProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardUseCaseProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

id LACGlobalDomain.isDTOStrictModeEnabled.getter()
{
  return LACGlobalDomain.isDTOStrictModeEnabled.getter((SEL *)&selRef_valueForFlagDTOStrictModeEnabled);
}

uint64_t LACGlobalDomain.isDTOStrictModeEnabled.setter(void *a1)
{
  return specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(a1, (SEL *)&selRef_flagDTOStrictModeEnabledKey);
}

uint64_t static LACGlobalDomain.companionAuthentication.getter()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v1 = objc_msgSend(v0, sel_valueForFlagOnenessSessionAuthentication);

  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id static LACGlobalDomain.isCompanionSessionActive.getter()
{
  return LACGlobalDomain.isDTOStrictModeEnabled.getter((SEL *)&selRef_valueForFlagOnenessSessionActive);
}

uint64_t static LACGlobalDomain.isCompanionSessionActive.setter(void *a1)
{
  return specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(a1, (SEL *)&selRef_flagOnenessSessionActiveKey);
}

id static LACGlobalDomain.isCompanionDeviceMocked.getter()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v1 = objc_msgSend(v0, sel_valueForFlagCompanionMockDevices);

  if (!v1) {
    return 0LL;
  }
  id v2 = objc_msgSend(v1, sel_BOOLValue);

  return v2;
}

uint64_t static LACGlobalDomain.isCompanionDeviceMocked.setter(char a1)
{
  v7[3] = MEMORY[0x1896184C8];
  LOBYTE(v7[0]) = a1;
  id v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance, v7[0]);
  id v2 = objc_msgSend(v1, sel_flagCompanionMockDevicesKey);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)v7, v3, v5);
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)v7);
}

id static LACGlobalDomain.preboardMode.getter()
{
  return LACGlobalDomain.isDTOStrictModeEnabled.getter((SEL *)&selRef_valueForFlagPreboardMode);
}

uint64_t static LACGlobalDomain.preboardMode.setter(void *a1)
{
  return specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(a1, (SEL *)&selRef_flagPreboardModeKey);
}

id static LACGlobalDomain.runningInBATS.getter()
{
  return LACGlobalDomain.isDTOStrictModeEnabled.getter((SEL *)&selRef_valueForFlagRunningInBATS);
}

uint64_t static LACGlobalDomain.runningInBATS.setter(void *a1)
{
  return specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(a1, (SEL *)&selRef_flagRunningInBATSKey);
}

id static LACGlobalDomain.isSharedModeActive.getter()
{
  return LACGlobalDomain.isDTOStrictModeEnabled.getter((SEL *)&selRef_valueForFlagSharedModeActive);
}

uint64_t static LACGlobalDomain.isSharedModeActive.setter(void *a1)
{
  return specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(a1, (SEL *)&selRef_flagSharedModeActiveKey);
}

id @objc static LACGlobalDomain.isCompanionSessionActive.getter(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v5 = [v4 *a3];

  return v5;
}

id static LACGlobalDomain.sharedModeLatency.getter()
{
  return LACGlobalDomain.isDTOStrictModeEnabled.getter((SEL *)&selRef_valueForFlagSharedModeLatency);
}

id LACGlobalDomain.isDTOStrictModeEnabled.getter(SEL *a1)
{
  id v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v3 = [v2 *a1];

  return v3;
}

uint64_t static LACGlobalDomain.sharedModeLatency.setter(void *a1)
{
  return specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(a1, (SEL *)&selRef_flagSharedModeLatencyKey);
}

uint64_t static LACGlobalDomain.osVariantAllowsDomainOverrides.getter()
{
  return os_variant_allows_internal_security_policies();
}

void specialized static LACGlobalDomain.setObject(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)objc_opt_self();
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = *MEMORY[0x189607560];
  id v9 = objc_msgSend(v7, sel_persistentDomainForName_, *MEMORY[0x189607560]);

  if (v9)
  {
    unint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }

  else
  {
    unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  }

  unint64_t v19 = v10;
  outlined init with copy of Any?(a1, (uint64_t)&v17);
  if (v18)
  {
    outlined init with take of Any(&v17, v16);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v15 = v10;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of Any?((uint64_t)&v17);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v16);
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v16);
  }

  id v12 = objc_msgSend(v6, sel_standardUserDefaults, v15);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setPersistentDomain_forName_, isa, v8);

  id v14 = objc_msgSend(v6, sel_standardUserDefaults);
  objc_msgSend(v14, sel_synchronize);
}

uint64_t specialized static LACGlobalDomain.companionAuthentication.setter(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
  }

  else
  {
    *((void *)&v12 + 1) = MEMORY[0x189606D70];
    *(void *)&__int128 v11 = a1;
    *((void *)&v11 + 1) = a2;
  }

  id v4 = (void *)objc_opt_self();
  outlined copy of Data?(a1, a2);
  id v5 = objc_msgSend(v4, sel_sharedInstance, v11);
  id v6 = objc_msgSend(v5, sel_flagOnenessSessionAuthenticationKey);

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)&v11, v7, v9);
  outlined consume of Data?(a1, a2);
  swift_bridgeObjectRelease();
  return outlined destroy of Any?((uint64_t)&v11);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t specialized LACGlobalDomain.isDTOStrictModeEnabled.setter(void *a1, SEL *a2)
{
  if (a1)
  {
    *((void *)&v13 + 1) = type metadata accessor for NSNumber();
    *(void *)&__int128 v12 = a1;
  }

  else
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
  }

  id v4 = (void *)objc_opt_self();
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_sharedInstance, (void)v12);
  id v7 = [v6 *a2];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  specialized static LACGlobalDomain.setObject(_:forKey:)((uint64_t)&v12, v8, v10);
  swift_bridgeObjectRelease();

  return outlined destroy of Any?((uint64_t)&v12);
}

char *keypath_get_selector_isDTOStrictModeEnabled()
{
  return sel_isDTOStrictModeEnabled;
}

id sub_189273F2C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isDTOStrictModeEnabled);
  *a2 = result;
  return result;
}

id sub_189273F64(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIsDTOStrictModeEnabled_, *a1);
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }

  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

id LACOnenessSessionMonitor.isMonitoring.getter()
{
  return LACOnenessSessionMonitor.isMonitoring.getter((SEL *)&selRef_isMonitoring);
}

id @objc LACOnenessSessionMonitor.isMonitoring.getter(void *a1, uint64_t a2, SEL *a3)
{
  id v4 = a1;
  id v5 = objc_msgSend(objc_msgSend(v4, sel_model), *a3);

  swift_unknownObjectRelease();
  return v5;
}

id LACOnenessSessionMonitor.isSessionActive.getter()
{
  return LACOnenessSessionMonitor.isMonitoring.getter((SEL *)&selRef_isSessionActive);
}

id LACOnenessSessionMonitor.isMonitoring.getter(SEL *a1)
{
  id v2 = objc_msgSend(objc_msgSend(v1, sel_model), *a1);
  swift_unknownObjectRelease();
  return v2;
}

Swift::Void __swiftcall LACOnenessSessionMonitor.start()()
{
}

Swift::Void __swiftcall LACOnenessSessionMonitor.stop()()
{
}

uint64_t LACOnenessSessionMonitor.start()(SEL *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t @objc LACOnenessSessionMonitor.start()(void *a1, uint64_t a2, SEL *a3)
{
  id v4 = a1;
  objc_msgSend(objc_msgSend(v4, sel_model), *a3);

  return swift_unknownObjectRelease();
}

uint64_t LACOnenessSessionMonitor.add(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitor.add(_:)(a1, (SEL *)&selRef_addObserver_);
}

uint64_t LACOnenessSessionMonitor.remove(_:)(uint64_t a1)
{
  return LACOnenessSessionMonitor.add(_:)(a1, (SEL *)&selRef_removeObserver_);
}

uint64_t LACOnenessSessionMonitor.add(_:)(uint64_t a1, SEL *a2)
{
  return swift_unknownObjectRelease();
}

uint64_t @objc LACOnenessSessionMonitor.add(_:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7 = a1;
  objc_msgSend(objc_msgSend(v7, sel_model), *a4, a3);
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

id LACOnenessSessionMonitor.makeModel()()
{
  id v1 = objc_msgSend(v0, sel_replyQueue);
  type metadata accessor for LACOnenessSessionProviderAKS();
  id v2 = (void *)swift_allocObject();
  v2[2] = 0LL;
  v2[4] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool?, Never>);
  swift_allocObject();
  v2[5] = CurrentValueSubject.init(_:)();
  v2[3] = v1;
  swift_retain();
  id v3 = objc_msgSend(v0, sel_replyQueue);
  id v4 = objc_allocWithZone((Class)type metadata accessor for LACOnenessSessionMonitorModel());
  id v5 = specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)((uint64_t)v2, v3, v4);
  swift_release();

  return v5;
}

id specialized LACOnenessSessionMonitorModel.init(sessionProvider:replyQueue:)( uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v14[3] = type metadata accessor for LACOnenessSessionProviderAKS();
  v14[4] = &protocol witness table for LACOnenessSessionProviderAKS;
  v14[0] = a1;
  a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel__isOnenessActive] = 0;
  *(void *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionSubscription] = 0LL;
  id v7 = (void *)objc_opt_self();
  uint64_t v8 = a3;
  id v9 = objc_msgSend(v7, sel_weakObjectsHashTable);
  *(void *)&v8[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_observers] = v9;
  outlined init with copy of LACOnenessSessionProviding( (uint64_t)v14,  (uint64_t)&v8[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_sessionProvider]);
  *(void *)&v8[OBJC_IVAR____TtC23LocalAuthenticationCore29LACOnenessSessionMonitorModel_replyQueue] = a2;
  id v10 = a2;

  v13.receiver = v8;
  v13.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v11;
}

uint64_t dispatch thunk of LACPreboardLaunching.launchPreboard()(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(void *)(a2 + 8));
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v5;
  void *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v7(a1, a2);
}

void LACEvaluationResult.resultWithAssociatedValue.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_rawValue);
  if (v3)
  {
    if (v3 == (id)1)
    {
      id v4 = objc_msgSend(v1, sel_request);
      if (v4)
      {
        uint64_t v5 = (uint64_t)v4;
        char v6 = 2;
LABEL_10:
        *(void *)a1 = v5;
        *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v6;
        return;
      }
    }

    else if (v3 == (id)2)
    {
      id v8 = objc_msgSend(v1, sel_value);
      if (v8)
      {
        id v9 = v8;
        uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        char v6 = 0;
        goto LABEL_10;
      }
    }
  }

  else
  {
    id v7 = objc_msgSend(v1, sel_error);
    if (v7)
    {
      uint64_t v5 = (uint64_t)v7;
      char v6 = 1;
      goto LABEL_10;
    }
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for LACEvaluationResultWithAssociatedValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LACEvaluationResultWithAssociatedValue(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4;
  return a1;
}

id outlined copy of LACEvaluationResultWithAssociatedValue(id result, char a2)
{
  switch(a2)
  {
    case 2:
      return (id)swift_unknownObjectRetain();
    case 1:
      return result;
    case 0:
      return (id)swift_bridgeObjectRetain();
  }

  return result;
}

void destroy for LACEvaluationResultWithAssociatedValue(uint64_t a1)
{
}

uint64_t assignWithCopy for LACEvaluationResultWithAssociatedValue(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of LACEvaluationResultWithAssociatedValue(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v4;
  outlined consume of LACEvaluationResultWithAssociatedValue(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for LACEvaluationResultWithAssociatedValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v3;
  outlined consume of LACEvaluationResultWithAssociatedValue(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LACEvaluationResultWithAssociatedValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LACEvaluationResultWithAssociatedValue( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LACEvaluationResultWithAssociatedValue(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for LACEvaluationResultWithAssociatedValue(uint64_t result, char a2)
{
  *(_BYTE *)(result + _Block_object_dispose(va, 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LACEvaluationResultWithAssociatedValue()
{
  return &type metadata for LACEvaluationResultWithAssociatedValue;
}

uint64_t LACACMContextProvider.externalizedContext.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_externalizedContext);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t LACACMContextProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  id v1 = objc_msgSend(objc_allocWithZone((Class)LACACMHelper), sel_initAndCreateContext);
  if (v1)
  {
    *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v1;
  }

  else
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v0;
}

uint64_t LACACMContextProvider.init()()
{
  id v1 = objc_msgSend(objc_allocWithZone((Class)LACACMHelper), sel_initAndCreateContext);
  if (v1)
  {
    *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v1;
  }

  else
  {
    type metadata accessor for LACACMContextProvider();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v0;
}

uint64_t type metadata accessor for LACACMContextProvider()
{
  return objc_opt_self();
}

uint64_t LACACMContextProvider.deinit()
{
  return v0;
}

uint64_t LACACMContextProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LACACMContextProviding.externalizedContext.getter in conformance LACACMContextProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88LL))();
}

uint64_t dispatch thunk of LACACMContextProviding.externalizedContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t method lookup function for LACACMContextProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACACMContextProvider.externalizedContext.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

uint64_t dispatch thunk of LACACMContextProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of LACPreboardUseCaseProviding.preboardUseCase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LACPreboardUseCaseProviding.completeCurrentUseCase(success:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(void *)(a3 + 16));
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v7;
  *id v7 = v3;
  v7[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return v9(a1, a2, a3);
}

uint64_t LACOnenessSessionProviderDummy.isSessionActive.getter()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1895F8858](v2);
  int v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Share<CurrentValueSubject<Bool, Never>>, OS_dispatch_queue>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v0[2])
  {
    uint64_t v9 = v0[2];
  }

  else
  {
    uint64_t v16 = v0[4];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>,  &demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>,  MEMORY[0x1896022F0]);
    uint64_t v10 = Publisher.share()();
    id v15 = (id)v0[3];
    id v11 = v15;
    uint64_t v16 = v10;
    uint64_t v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v4, 1LL, 1LL, v12);
    id v13 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<CurrentValueSubject<Bool, Never>>);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.Share<CurrentValueSubject<Bool, Never>> and conformance Publishers.Share<A>,  &demangling cache variable for type metadata for Publishers.Share<CurrentValueSubject<Bool, Never>>,  MEMORY[0x189602208]);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
    Publisher.receive<A>(on:options:)();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v4);

    swift_release();
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( &lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Share<CurrentValueSubject<Bool, Never>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>,  &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Share<CurrentValueSubject<Bool, Never>>, OS_dispatch_queue>,  MEMORY[0x189602218]);
    uint64_t v9 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v1[2] = v9;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v9;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    unint64_t v1 = type metadata accessor for OS_dispatch_queue();
    unint64_t result = MEMORY[0x1895E5638](MEMORY[0x18961B890], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }

  return result;
}

uint64_t LACOnenessSessionProviderDummy.isSessionActive.setter(uint64_t a1)
{
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a1;
  return swift_release();
}

uint64_t (*LACOnenessSessionProviderDummy.isSessionActive.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = LACOnenessSessionProviderDummy.isSessionActive.getter();
  return LACOnenessSessionProviderAKS.isSessionActive.modify;
}

void *LACOnenessSessionProviderDummy.__allocating_init(replyQueue:)(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  uint64_t v3 = CurrentValueSubject.init(_:)();
  v2[3] = a1;
  v2[4] = v3;
  return v2;
}

void *LACOnenessSessionProviderDummy.init(replyQueue:)(uint64_t a1)
{
  v1[2] = 0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  swift_allocObject();
  uint64_t v3 = CurrentValueSubject.init(_:)();
  v1[3] = a1;
  v1[4] = v3;
  return v1;
}

uint64_t LACOnenessSessionProviderDummy.deinit()
{
  swift_release();
  return v0;
}

uint64_t LACOnenessSessionProviderDummy.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for LACOnenessSessionProviding.isSessionActive.getter in conformance LACOnenessSessionProviderDummy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))();
}

uint64_t sub_189274F24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104LL))();
  *a2 = result;
  return result;
}

uint64_t sub_189274F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112LL);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t type metadata accessor for LACOnenessSessionProviderDummy()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACOnenessSessionProviderDummy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.isSessionActive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.isSessionActive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.isSessionActive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of LACOnenessSessionProviderDummy.__allocating_init(replyQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> ()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.Class isa = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)();
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned LACEvaluationRequest, @unowned LACEvaluationResult, @unowned @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, void *))
{
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 1107296256LL;
  void v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v10[3] = &block_descriptor_25;
  id v8 = _Block_copy(v10);
  swift_retain();
  a5(a1, a2, v8);
  _Block_release(v8);
  return swift_release();
}

id LACOnenessController.isSessionActive.getter()
{
  id v1 = objc_msgSend(objc_msgSend(v0, sel_model), sel_isSessionActive);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t LACOnenessController.domainState(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_msgSend(v3, sel_model);
  v10[4] = a2;
  v10[5] = a3;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 1107296256LL;
  void v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v10[3] = &block_descriptor_8;
  id v8 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_domainStateForRequest_completion_, a1, v8);
  _Block_release(v8);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id LACOnenessController.canProcessRequest(_:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_msgSend(v1, sel_model), sel_canProcessRequest_, a1);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t LACOnenessController.processRequest(_:configuration:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_msgSend(v4, sel_model);
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 1107296256LL;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  uint64_t v12[3] = &block_descriptor_3_1;
  uint64_t v10 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_processRequest_configuration_completion_, a1, a2, v10);
  _Block_release(v10);
  return swift_unknownObjectRelease();
}

uint64_t LACOnenessController.postProcessRequest(_:result:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSDictionary v5 = v4;
  id v10 = objc_msgSend(v5, sel_model);
  v13[4] = a3;
  v13[5] = a4;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 1107296256LL;
  v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
  v13[3] = &block_descriptor_6_0;
  id v11 = _Block_copy(v13);
  swift_retain();
  objc_msgSend(v10, sel_postProcessRequest_result_completion_, a1, a2, v11);
  _Block_release(v11);
  swift_unknownObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall LACOnenessController.cancelAllRequests()()
{
}

void LACOnenessController.cancelRequests(forContextID:)()
{
  id v1 = objc_msgSend(v0, sel_model);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_cancelRequestsForContextID_, isa);
  swift_unknownObjectRelease();
}

id LACOnenessController.makeModel()()
{
  id v1 = objc_msgSend(v0, sel_authenticator);
  id v2 = objc_msgSend(v0, sel_sessionMonitor);
  id v3 = objc_msgSend(v0, sel_uiPresenter);
  id v4 = objc_msgSend(v0, sel_replyQueue);
  id v5 = objc_allocWithZone((Class)type metadata accessor for LACOnenessControllerModel());
  return LACOnenessControllerModel.init(authenticator:sessionMonitor:uiPresenter:replyQueue:)( (uint64_t)v1,  (uint64_t)v2,  (uint64_t)v3,  v4);
}

uint64_t sub_189275CA4()
{
  return swift_deallocObject();
}

uint64_t static LACLogger.abm.getter()
{
  id v0 = LACLogABM();
  return Logger.init(_:)();
}

uint64_t static LACLogger.default.getter()
{
  id v0 = LACLogDefault();
  return Logger.init(_:)();
}

uint64_t static LACLogger.ui.getter()
{
  id v0 = LACLogUI();
  return Logger.init(_:)();
}

uint64_t static LACLogger.processor.getter()
{
  id v0 = LACLogProcessor();
  return Logger.init(_:)();
}

uint64_t static LACLogger.dtoUI.getter()
{
  id v0 = LACLogDTOUI();
  return Logger.init(_:)();
}

uint64_t static LACLogger.dtoEvaluation.getter()
{
  id v0 = LACLogDTOEvaluation();
  return Logger.init(_:)();
}

uint64_t static LACLogger.dtoEnvironment.getter()
{
  id v0 = LACLogDTOEnvironment();
  return Logger.init(_:)();
}

uint64_t static LACLogger.preboard.getter()
{
  id v0 = LACLogPreboard();
  return Logger.init(_:)();
}

Swift::Void __swiftcall LACLogger.debug(_:)(Swift::String a1)
{
  char v1 = 0;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

Swift::Void __swiftcall LACLogger.log(level:_:)(LocalAuthenticationCore::LACLogger::Level level, Swift::String _)
{
  id v3 = (unsigned __int8 *)level;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v2, v4);
  __asm { BR              X9 }

uint64_t sub_189275F24()
{
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v7 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v8 = v6;
  if (os_log_type_enabled(v7, v6))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(void *)(v5 - 104) = v0;
    uint64_t v11 = v4;
    uint64_t v12 = v10;
    *(void *)(v5 - 8_Block_object_dispose(va, 8) = v10;
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v5 - 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v2, (uint64_t *)(v5 - 88));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_189219000, v7, v8, "%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v12, -1LL, -1LL);
    MEMORY[0x1895E56D4](v9, -1LL, -1LL);

    return (*(uint64_t (**)(uint64_t, void))(v3 + 8))(v1, *(void *)(v5 - 104));
  }

  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  }

Swift::Void __swiftcall LACLogger.info(_:)(Swift::String a1)
{
  char v1 = 1;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

Swift::Void __swiftcall LACLogger.log(_:)(Swift::String a1)
{
  char v1 = 2;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

Swift::Void __swiftcall LACLogger.error(_:)(Swift::String a1)
{
  char v1 = 3;
  LACLogger.log(level:_:)((LocalAuthenticationCore::LACLogger::Level)&v1, a1);
}

BOOL static LACLogger.Level.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LACLogger.Level.hash(into:)()
{
}

Swift::Int LACLogger.Level.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LACLogger.Level and conformance LACLogger.Level()
{
  unint64_t result = lazy protocol witness table cache variable for type LACLogger.Level and conformance LACLogger.Level;
  if (!lazy protocol witness table cache variable for type LACLogger.Level and conformance LACLogger.Level)
  {
    unint64_t result = MEMORY[0x1895E5638]( &protocol conformance descriptor for LACLogger.Level,  &type metadata for LACLogger.Level);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LACLogger.Level and conformance LACLogger.Level);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for LACLogger(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t initializeWithCopy for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for LACLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LACLogger()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_189276380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LACLogger()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1892763C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for LACLogger()
{
  uint64_t result = type metadata singleton initialization cache for LACLogger;
  if (!type metadata singleton initialization cache for LACLogger) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for LACLogger()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LACLogger.Level(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1892764F8 + 4 * byte_1892B55A9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18927652C + 4 * byte_1892B55A4[v4]))();
}

uint64_t sub_18927652C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_189276534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18927653CLL);
  }
  return result;
}

uint64_t sub_189276548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x189276550LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_189276554(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18927655C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LACLogger.Level()
{
  return &type metadata for LACLogger.Level;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }

  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }

uint64_t LACRatchetFlowManager.showCoolOffSheet(options:presentationCompletion:sheetCompletion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 0LL;
  *(void *)(v10 + 24) = 0LL;
  *(void *)(v10 + 32) = v9;
  *(_OWORD *)(v10 + 40) = xmmword_1892B5300;
  *(void *)(v10 + 56) = a2;
  *(void *)(v10 + 64) = a3;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?(a2);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v7,  (uint64_t)&async function pointer to partial apply for closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:),  v10);
  return swift_release();
}

uint64_t sub_1892767D0()
{
  return swift_deallocObject();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()( uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t LACRatchetFlowManager.dismiss(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = v8;
  v9[5] = a1;
  v9[6] = a2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?(a1);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v6,  (uint64_t)&async function pointer to partial apply for closure #1 in LACRatchetFlowManager.dismiss(completion:),  (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in LACRatchetFlowManager.dismiss(completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in LACRatchetFlowManager.dismiss(completion:)()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1895E5764](v1);
  *(void *)(v0 + 64) = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in LACRatchetFlowManager.dismiss(completion:);
    v4[23] = v3;
    return swift_task_switch();
  }

  else
  {
    uint64_t v6 = *(void (**)(void))(v0 + 48);
    if (v6) {
      v6(0LL);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v1 = *(void (**)(void))(v0 + 48);
  if (v1) {
    v1(0LL);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(void *);
  id v4;
  uint64_t v1 = *(void *)(v0 + 48);

  uint64_t v2 = *(void **)(v0 + 80);
  if (v1)
  {
    uint64_t v3 = *(void (**)(void *))(v0 + 48);
    uint64_t v4 = v2;
    v3(v2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACRatchetFlowManager.dismiss()()
{
  *(void *)(v1 + 184) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  unsigned int v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  Class isa;
  uint64_t v1 = objc_msgSend(*(id *)(v0 + 184), sel_presenter);
  if (v1)
  {
    uint64_t v2 = objc_msgSend(v1, sel_isPresented);
    swift_unknownObjectRelease();
    if (v2)
    {
      uint64_t v3 = objc_msgSend(*(id *)(v0 + 184), sel_presenter);
      *(void *)(v0 + 192) = v3;
      if (v3)
      {
        uint64_t v4 = v3;
        *(void *)(v0 + 80) = v0;
        *(void *)(v0 + 8_Block_object_dispose(va, 8) = LACRatchetFlowManager.dismiss();
        *(void *)(v0 + 176) = swift_continuation_init();
        *(void *)(v0 + 144) = MEMORY[0x1895F87A8];
        *(void *)(v0 + 152) = 0x40000000LL;
        *(void *)(v0 + 160) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
        *(void *)(v0 + 16_Block_object_dispose(va, 8) = &block_descriptor_34;
        objc_msgSend(v4, sel_dismissAnimated_completion_, 1, v0 + 144);
        return swift_continuation_await();
      }

      uint64_t v5 = objc_msgSend(*(id *)(v0 + 184), sel_uiManager);
      *(void *)(v0 + 20_Block_object_dispose(va, 8) = v5;
      if (v5)
      {
        uint64_t v6 = v5;
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 2outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = isa;
        swift_bridgeObjectRelease();
        *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v0;
        *(void *)(v0 + 24) = LACRatchetFlowManager.dismiss();
        *(void *)(v0 + 176) = swift_continuation_init();
        *(void *)(v0 + 144) = MEMORY[0x1895F87A8];
        *(void *)(v0 + 152) = 0x40000000LL;
        *(void *)(v0 + 160) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
        *(void *)(v0 + 16_Block_object_dispose(va, 8) = &block_descriptor_9;
        objc_msgSend(v6, sel_transitionToState_withOptions_completion_, 0, isa, v0 + 144);
        return swift_continuation_await();
      }
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 200LL) = *(void *)(*(void *)v0 + 112LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  Class isa;
  uint64_t v3;
  void *v4;
  swift_unknownObjectRelease();
  uint64_t v1 = objc_msgSend(*(id *)(v0 + 184), sel_uiManager);
  *(void *)(v0 + 20_Block_object_dispose(va, 8) = v1;
  if (!v1) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 2outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v0;
  *(void *)(v0 + 24) = LACRatchetFlowManager.dismiss();
  uint64_t v3 = swift_continuation_init();
  *(void *)(v0 + 144) = MEMORY[0x1895F87A8];
  uint64_t v4 = (void *)(v0 + 144);
  v4[1] = 0x40000000LL;
  v4[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v4[3] = &block_descriptor_9;
  v4[4] = v3;
  objc_msgSend(v1, sel_transitionToState_withOptions_completion_, 0, isa, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 224LL) = *(void *)(*(void *)v0 + 48LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 216);
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v1 = *(void **)(v0 + 216);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1895E5764](v1);
  *(void *)(v0 + 80) = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v4;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v5;
    void *v5 = v0;
    v5[1] = closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:);
    uint64_t v6 = *(void *)(v0 + 48);
    v5[57] = *(void *)(v0 + 56);
    v5[58] = v3;
    v5[55] = v6;
    v5[56] = v4;
    return swift_task_switch();
  }

  else
  {
    uint64_t v8 = *(void (**)(void))(v0 + 64);
    if (v8) {
      v8(0LL);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    uint64_t v3 = *(void **)(v2 + 80);
    swift_bridgeObjectRelease();
  }

  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v1 = *(void (**)(void))(v0 + 64);
  if (v1) {
    v1(0LL);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void *);
  id v5;
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void **)(v0 + 104);
  if (v2)
  {
    unint64_t v4 = *(void (**)(void *))(v0 + 64);
    uint64_t v5 = v3;
    v4(v3);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)()
{
  __int128 v5 = *(_OWORD *)(v0 + 48);
  __int128 v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + _Block_object_dispose(va, 8) = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  *(void *)(v3 + 72) = v2;
  *(_OWORD *)(v3 + 56) = v5;
  *(_OWORD *)(v3 + 40) = v6;
  return swift_task_switch();
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in LACRatchetFlowManager.dismiss(completion:)()
{
  __int128 v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + _Block_object_dispose(va, 8) = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v5;
  return swift_task_switch();
}

uint64_t objectdestroy_7Tm_0()
{
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_18927760C()
{
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()( uint64_t a1)
{
}

uint64_t objectdestroy_2Tm()
{
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t closure #1 in LACRatchetFlowManager.transition(to:with:style:completion:)partial apply()
{
  __int128 v5 = *(_OWORD *)(v0 + 48);
  __int128 v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + _Block_object_dispose(va, 8) = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  *(void *)(v3 + 72) = v2;
  *(_OWORD *)(v3 + 56) = v5;
  *(_OWORD *)(v3 + 40) = v6;
  return swift_task_switch();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t LACRatchetFlowManager.transition(to:with:style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[57] = a3;
  v4[58] = v3;
  v4[55] = a1;
  v4[56] = a2;
  return swift_task_switch();
}

uint64_t LACRatchetFlowManager.transition(to:with:style:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  if (v1)
  {
    unsigned int v2 = objc_msgSend(v1, sel_isPresented);
    swift_unknownObjectRelease();
    if (v2)
    {
      id v3 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
      if (v3)
      {
        id v4 = *(id *)(v0 + 456);
        id v5 = objc_msgSend(v3, sel_presentationStyle);
        swift_unknownObjectRelease();
        if (v5 == v4)
        {
          id v6 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
          *(void *)(v0 + 52_Block_object_dispose(va, 8) = v6;
          if (v6)
          {
            uint64_t v7 = v6;
            uint64_t v8 = *(void *)(v0 + 440);
            v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            *(NSDictionary *)(v0 + 536) = v9;
            *(void *)(v0 + 80) = v0;
            *(void *)(v0 + 8_Block_object_dispose(va, 8) = LACRatchetFlowManager.transition(to:with:style:);
            *(void *)(v0 + 432) = swift_continuation_init();
            *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
            *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
            uint64_t v10 = &block_descriptor_47;
LABEL_9:
            *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
            *(void *)(v0 + 424) = v10;
            objc_msgSend(v7, sel_transitionToState_withOptions_completion_, v8, v9.super.isa, v0 + 400);
            return swift_continuation_await();
          }

          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }

      id v16 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
      *(void *)(v0 + 472) = v16;
      if (v16)
      {
        __int128 v17 = v16;
        *(void *)(v0 + 20_Block_object_dispose(va, 8) = v0;
        *(void *)(v0 + 2outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = LACRatchetFlowManager.transition(to:with:style:);
        *(void *)(v0 + 432) = swift_continuation_init();
        *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
        *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
        *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
        *(void *)(v0 + 424) = &block_descriptor_46;
        objc_msgSend(v17, sel_dismissAnimated_completion_, 1, v0 + 400);
        return swift_continuation_await();
      }

      id v19 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
      *(void *)(v0 + 48_Block_object_dispose(va, 8) = v19;
      if (v19)
      {
        uint64_t v7 = v19;
        uint64_t v8 = *(void *)(v0 + 440);
        v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(NSDictionary *)(v0 + 496) = v9;
        *(void *)(v0 + 336) = v0;
        *(void *)(v0 + 344) = LACRatchetFlowManager.transition(to:with:style:);
        *(void *)(v0 + 432) = swift_continuation_init();
        *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
        *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
        uint64_t v10 = &block_descriptor_45;
        goto LABEL_9;
      }

      id v20 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
      *(void *)(v0 + 512) = v20;
      if (!v20) {
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      id v13 = v20;
      uint64_t v14 = *(void *)(v0 + 456);
      *(void *)(v0 + 272) = v0;
      *(void *)(v0 + 280) = LACRatchetFlowManager.transition(to:with:style:);
      *(void *)(v0 + 432) = swift_continuation_init();
      *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
      *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
      id v15 = &block_descriptor_44;
LABEL_12:
      *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
      *(void *)(v0 + 424) = v15;
      objc_msgSend(v13, sel_presentWithStyle_animated_completion_, v14, 1, v0 + 400);
      return swift_continuation_await();
    }
  }

  id v11 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
  *(void *)(v0 + 552) = v11;
  if (v11)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v0 + 440);
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(NSDictionary *)(v0 + 560) = v9;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 152) = LACRatchetFlowManager.transition(to:with:style:);
    *(void *)(v0 + 432) = swift_continuation_init();
    *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
    *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
    uint64_t v10 = &block_descriptor_43;
    goto LABEL_9;
  }

  id v12 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(void *)(v0 + 576) = v12;
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)(v0 + 456);
    *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v0;
    *(void *)(v0 + 24) = LACRatchetFlowManager.transition(to:with:style:);
    *(void *)(v0 + 432) = swift_continuation_init();
    *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
    *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
    id v15 = &block_descriptor_41;
    goto LABEL_12;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 480LL) = *(void *)(*(void *)v0 + 240LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  Class isa;
  id v5;
  void *v6;
  uint64_t v7;
  swift_unknownObjectRelease();
  id v1 = objc_msgSend(*(id *)(v0 + 464), sel_uiManager);
  *(void *)(v0 + 48_Block_object_dispose(va, 8) = v1;
  if (v1)
  {
    unsigned int v2 = v1;
    id v3 = *(void *)(v0 + 440);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 496) = isa;
    *(void *)(v0 + 336) = v0;
    *(void *)(v0 + 344) = LACRatchetFlowManager.transition(to:with:style:);
    *(void *)(v0 + 432) = swift_continuation_init();
    *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
    *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
    *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    *(void *)(v0 + 424) = &block_descriptor_45;
    objc_msgSend(v2, sel_transitionToState_withOptions_completion_, v3, isa, v0 + 400);
    return swift_continuation_await();
  }

  id v5 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(void *)(v0 + 512) = v5;
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)(v0 + 456);
    *(void *)(v0 + 272) = v0;
    *(void *)(v0 + 280) = LACRatchetFlowManager.transition(to:with:style:);
    *(void *)(v0 + 432) = swift_continuation_init();
    *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
    *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
    *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    *(void *)(v0 + 424) = &block_descriptor_44;
    objc_msgSend(v6, sel_presentWithStyle_animated_completion_, v7, 1, v0 + 400);
    return swift_continuation_await();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 504LL) = *(void *)(*(void *)v0 + 368LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v1 = *(void **)(v0 + 496);
  swift_unknownObjectRelease();

  unsigned int v2 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(void *)(v0 + 512) = v2;
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  id v3 = *(void *)(v0 + 456);
  *(void *)(v0 + 272) = v0;
  *(void *)(v0 + 280) = LACRatchetFlowManager.transition(to:with:style:);
  *(void *)(v0 + 432) = swift_continuation_init();
  *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
  *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
  *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(void *)(v0 + 424) = &block_descriptor_44;
  objc_msgSend(v2, sel_presentWithStyle_animated_completion_, v3, 1, v0 + 400);
  return swift_continuation_await();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 520LL) = *(void *)(*(void *)v0 + 304LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 544LL) = *(void *)(*(void *)v0 + 112LL);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 568LL) = *(void *)(*(void *)v0 + 176LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v1 = *(void **)(v0 + 560);
  swift_unknownObjectRelease();

  unsigned int v2 = objc_msgSend(*(id *)(v0 + 464), sel_presenter);
  *(void *)(v0 + 576) = v2;
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  id v3 = *(void *)(v0 + 456);
  *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v0;
  *(void *)(v0 + 24) = LACRatchetFlowManager.transition(to:with:style:);
  *(void *)(v0 + 432) = swift_continuation_init();
  *(void *)(v0 + 400) = MEMORY[0x1895F87A8];
  *(void *)(v0 + 40_Block_object_dispose(va, 8) = 0x40000000LL;
  *(void *)(v0 + 4outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(void *)(v0 + 424) = &block_descriptor_41;
  objc_msgSend(v2, sel_presentWithStyle_animated_completion_, v3, 1, v0 + 400);
  return swift_continuation_await();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 584LL) = *(void *)(*(void *)v0 + 48LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v1 = *(void **)(v0 + 560);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v1 = *(void **)(v0 + 496);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_willThrow();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v1 = *(void **)(v0 + 536);
  swift_willThrow();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
  *id v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_18927846C()
{
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  id v4 = *(int **)(v1 + 16);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v5;
  void *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t LACPreboardStorageRequest.identifier.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_identifier);
}

uint64_t LACPreboardStorageRequest.acl.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_acl);
  outlined copy of Data?( v1,  *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_acl + 8));
  return v1;
}

uint64_t LACPreboardStorageRequest.client.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t LACPreboardStorageRequest.contextID.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UUID?( v1 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_contextID,  a1);
}

uint64_t LACPreboardStorageRequest.domain.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_domain);
}

uint64_t LACPreboardStorageRequest.key.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_key);
}

id LACPreboardStorageRequest.__allocating_init(for:contextID:)(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return LACPreboardStorageRequest.init(for:contextID:)(a1, a2);
}

id LACPreboardStorageRequest.init(for:contextID:)(id result, uint64_t a2)
{
  *(_OWORD *)&v2[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_acl] = xmmword_1892B5660;
  int v3 = static LACPreboardStorageRequest.identifier + 1;
  if (static LACPreboardStorageRequest.identifier == -1)
  {
    __break(1u);
  }

  else
  {
    id v5 = result;
    ++static LACPreboardStorageRequest.identifier;
    *(_DWORD *)&v2[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_identifier] = v3;
    id v6 = (void *)objc_opt_self();
    uint64_t v7 = v2;
    id v8 = objc_msgSend(v6, sel_currentConnection);
    id v9 = objc_msgSend(objc_allocWithZone((Class)LACXPCClient), sel_initWithConnection_, v8);

    *(void *)&v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_client] = v9;
    uint64_t v10 = &v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_contextID];
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a2, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
    *(void *)&v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_domain] = 0LL;
    *(void *)&v7[OBJC_IVAR____TtC23LocalAuthenticationCore25LACPreboardStorageRequest_key] = v5;

    v14.receiver = v7;
    v14.super_class = (Class)type metadata accessor for LACPreboardStorageRequest();
    id v13 = objc_msgSendSuper2(&v14, sel_init);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, v11);
    return v13;
  }

  return result;
}

uint64_t type metadata accessor for LACPreboardStorageRequest()
{
  uint64_t result = type metadata singleton initialization cache for LACPreboardStorageRequest;
  if (!type metadata singleton initialization cache for LACPreboardStorageRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id LACPreboardStorageRequest.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACPreboardStorageRequest.init()()
{
}

id LACPreboardStorageRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACPreboardStorageRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for LACPreboardStorageRequest()
{
  return type metadata accessor for LACPreboardStorageRequest();
}

void type metadata completion function for LACPreboardStorageRequest()
{
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for LACPreboardStorageRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardStorageRequest.__allocating_init(for:contextID:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t LACPreboardController.contextProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___contextProvider;
  swift_beginAccess();
  outlined init with copy of URL?( v3,  (uint64_t)v6,  &demangling cache variable for type metadata for LACACMContextProviding??);
  if (v7 != 1) {
    return outlined init with take of LACACMContextProviding?((uint64_t)v6, a1);
  }
  uint64_t v4 = outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v6,  &demangling cache variable for type metadata for LACACMContextProviding??);
  (*(void (**)(uint64_t))(**(void **)(v1
                                                + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_contextProviderFactory)
                                  + 88LL))(v4);
  outlined init with copy of URL?( a1,  (uint64_t)v6,  &demangling cache variable for type metadata for LACACMContextProviding?);
  swift_beginAccess();
  outlined assign with take of LACACMContextProviding??((uint64_t)v6, v3);
  return swift_endAccess();
}

id LACPreboardController.launchDispatchQueue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  id v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1895F8858](v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1895F8858](v7);
  uint64_t v8 = OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue;
  id v9 = *(void **)(v0
                + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue);
  if (v9)
  {
    id v10 = *(id *)(v0
                + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue);
  }

  else
  {
    v15[2] = type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.userInitiated.getter();
    v15[3] = MEMORY[0x18961AFE8];
    v15[1] = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8],  MEMORY[0x18961B8C0]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes],  MEMORY[0x189618470]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961B900], v2);
    uint64_t v11 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v12 = *(void **)(v0 + v8);
    *(void *)(v1 + v_Block_object_dispose(va, 8) = v11;
    id v10 = v11;

    id v9 = 0LL;
  }

  id v13 = v9;
  return v10;
}

char *LACPreboardController.__allocating_init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  objc_super v14 = specialized LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)( a1,  a2,  a3,  a4,  a5,  a6);
  swift_release();
  swift_unknownObjectRelease();
  return v14;
}

char *LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = specialized LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)( a1,  a2,  a3,  a4,  a5,  a6);
  swift_release();
  swift_unknownObjectRelease();
  return v6;
}

id LACPreboardController.isFeatureSupported.getter()
{
  id v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  id v1 = objc_msgSend(v0, sel_featureFlagPreboardEnabled);

  return v1;
}

id LACPreboardController.isRequired.getter()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v1);
  id v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = (void *)objc_opt_self();
  id v9 = &selRef_setEventBus_;
  id v10 = objc_msgSend(v8, sel_sharedInstance);
  unsigned int v11 = objc_msgSend(v10, sel_featureFlagPreboardEnabled);

  if (v11)
  {
    uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
    uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
    __swift_project_boxed_opaque_existential_1( (void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider),  v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    id v15 = LACLogPreboard();
    Logger.init(_:)();
    id v16 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v33 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v31 = v1;
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7269757165527369LL, 0xEA00000000006465LL, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2048;
      uint64_t v32 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_189219000, v16, v17, "%s use case: %ld", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      uint64_t v20 = v19;
      id v9 = &selRef_setEventBus_;
      MEMORY[0x1895E56D4](v20, -1LL, -1LL);
      MEMORY[0x1895E56D4](v18, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v31);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    }

    if (v14 == 4)
    {
      id v27 = [v8 v9[57]];
      id v28 = objc_msgSend(v27, sel_featureFlagPreboardDeveloperModeEnabled);
LABEL_13:
      id v26 = v28;

      return v26;
    }

    if (v14 == 3)
    {
      id v27 = [v8 v9[57]];
      id v28 = objc_msgSend(v27, sel_featureFlagPreboardUPPEnabled);
      goto LABEL_13;
    }
  }

  else
  {
    id v21 = LACLogPreboard();
    Logger.init(_:)();
    char v22 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v33 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7269757165527369LL, 0xEA00000000006465LL, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_189219000, v22, v23, "%s - feature is not supported", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v25, -1LL, -1LL);
      MEMORY[0x1895E56D4](v24, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }

  return 0LL;
}

uint64_t LACPreboardController.useCase.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1( (void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider),  v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

Swift::String_optional __swiftcall LACPreboardController.uppTeamName()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 24);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 32);
  __swift_project_boxed_opaque_existential_1( (void *)(v0 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager),  v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LACPreboardController.launchPreboard()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v46 - v7;
  unint64_t v49 = (void *)type metadata accessor for DispatchTime();
  uint64_t v9 = *(v49 - 1);
  uint64_t v10 = MEMORY[0x1895F8858](v49);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v15);
  os_log_type_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v18 = LACPreboardController.launchDispatchQueue.getter();
  id v52 = v2;
  OS_dispatch_queue.sync<A>(execute:)();

  if (v53 == 1)
  {
    uint64_t v46 = v8;
    uint64_t v48 = v1;
    dispatch_semaphore_t v19 = dispatch_semaphore_create(0LL);
    uint64_t v20 = type metadata accessor for TaskPriority();
    id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL);
    v21(v17, 1LL, 1LL, v20);
    char v22 = (void *)swift_allocObject();
    v22[2] = 0LL;
    void v22[3] = 0LL;
    v22[4] = v2;
    v22[5] = v19;
    id v23 = v2;
    uint64_t v24 = v19;
    uint64_t v25 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v17,  (uint64_t)&async function pointer to partial apply for closure #2 in LACPreboardController.launchPreboard(),  (uint64_t)v22);
    static DispatchTime.now()();
    MEMORY[0x1895E43F0](v12, 1.0);
    id v26 = *(void (**)(char *, void *))(v9 + 8);
    id v27 = v12;
    id v28 = v49;
    v26(v27, v49);
    __int128 v47 = v24;
    LOBYTE(v24) = MEMORY[0x1895E46CC](v14);
    v26(v14, v28);
    if ((v24 & 1) != 0)
    {
      uint64_t v29 = (uint64_t)v17;
      unint64_t v49 = v21;
      id v30 = LACLogPreboard();
      uint64_t v31 = v46;
      Logger.init(_:)();
      uint64_t v32 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        id v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v34 = 0;
        _os_log_impl(&dword_189219000, v32, v33, "Launch semaphore timed out, rebooting now.", v34, 2u);
        MEMORY[0x1895E56D4](v34, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v51);
      MEMORY[0x1895E460C](v25, MEMORY[0x18961AFC8] + 8LL, MEMORY[0x18961A520], MEMORY[0x18961A528]);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v29, 1LL, 1LL, v20);
      uint64_t v35 = (void *)swift_allocObject();
      _OWORD v35[2] = 0LL;
      v35[3] = 0LL;
      v35[4] = v23;
      uint64_t v36 = (char *)v23;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v29,  (uint64_t)&async function pointer to partial apply for closure #3 in LACPreboardController.launchPreboard(),  (uint64_t)v35);
      swift_release();
      id v37 = specialized static LACPreboardErrorBuilder.error(code:message:)( 2LL,  0xD000000000000013LL,  0x80000001892BBDC0LL);
      uint64_t v38 = &v36[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult];
      id v39 = *(void **)&v36[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult];
      *(void *)uint64_t v38 = v37;
      unsigned __int8 v40 = v38[8];
      v38[8] = 1;
      outlined consume of Result<(), Error>?(v39, v40);
    }

    id v41 = LACPreboardController.launchDispatchQueue.getter();
    MEMORY[0x1895F8858](v41);
    *(&v46 - 2) = (char *)v23;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
  }

  else
  {
    id v42 = LACLogPreboard();
    Logger.init(_:)();
    uint64_t v43 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_189219000, v43, v44, "LAPreboard is already launching", v45, 2u);
      MEMORY[0x1895E56D4](v45, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v51);
    specialized static LACPreboardErrorBuilder.error(code:message:)(1LL, 0xD00000000000001FLL, 0x80000001892BBDA0LL);
    swift_willThrow();
  }

uint64_t closure #2 in LACPreboardController.launchPreboard()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[8] = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #2 in LACPreboardController.launchPreboard();
  return LACPreboardController.launchPreboard()();
}

uint64_t closure #2 in LACPreboardController.launchPreboard()()
{
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t v1 = *(void *)(v0 + 24) + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  uint64_t v2 = *(void **)v1;
  *(void *)uint64_t v1 = 0LL;
  uint64_t v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 0;
  outlined consume of Result<(), Error>?(v2, v3);
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  os_log_s *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void **)(v0 + 72);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v10 = v7;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v11;

    _os_log_impl(&dword_189219000, v5, v6, "Synchronous launch failed with %@, rebooting now.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v9, -1LL, -1LL);
    MEMORY[0x1895E56D4](v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v12 = *(void **)(v0 + 72);
  }

  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  uint64_t v15 = v14 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  uint64_t v16 = *(void **)(v14 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult);
  *(void *)uint64_t v15 = v13;
  os_log_type_t v17 = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(v15 + _Block_object_dispose(va, 8) = 1;
  outlined consume of Result<(), Error>?(v16, v17);
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.launchPreboard()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  os_log_s *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  if ((LACPreboardController.isRequired.getter() & 1) != 0)
  {
    uint64_t v1 = (void *)(v0[2] + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launcher);
    uint64_t v2 = v1[3];
    uint64_t v3 = v1[4];
    __swift_project_boxed_opaque_existential_1(v1, v2);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 8) + *(void *)(v3 + 8));
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = LACPreboardController.launchPreboard();
    return v14(v2, v3);
  }

  else
  {
    uint64_t v6 = LACLogPreboard();
    Logger.init(_:)();
    uint64_t v7 = (os_log_s *)Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_189219000, v7, v8, "Unable to launch preboard as the feature is not supported", v9, 2u);
      MEMORY[0x1895E56D4](v9, -1LL, -1LL);
    }

    uint64_t v11 = v0[4];
    uint64_t v10 = v0[5];
    uint64_t v12 = v0[3];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[9] = v13;
    *uint64_t v13 = v0;
    v13[1] = LACPreboardController.launchPreboard();
    return LACPreboardController.terminate()();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    return swift_task_switch();
  }
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v3;
  *uint64_t v3 = v2;
  v3[1] = LACPreboardController.launchPreboard();
  return LACPreboardController.terminate()();
}

{
  uint64_t v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_189219000, v2, v3, "Did launch preboard", v4, 2u);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (!v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  specialized static LACPreboardErrorBuilder.error(code:message:)(2LL, 0xD000000000000015LL, 0x80000001892BBDE0LL);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in LACPreboardController.launchPreboard()()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #3 in LACPreboardController.launchPreboard();
  return LACPreboardController.terminate()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_189219000, v2, v3, "Device reboot failed", v4, 2u);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 16);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.terminate()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v5;
  os_log_s *v6;
  int v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  uint64_t v2 = objc_msgSend(v1, sel_featureFlagPreboardEnabled);

  if (v2)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v3;
    *uint64_t v3 = v0;
    v3[1] = LACPreboardController.terminate();
    return LACPreboardController.finishPreboard(success:reason:)(0, 0xD000000000000016LL, 0x80000001892BBE00LL);
  }

  else
  {
    uint64_t v5 = LACLogPreboard();
    Logger.init(_:)();
    uint64_t v6 = (os_log_s *)Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, (os_log_type_t)v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( &dword_189219000,  v6,  (os_log_type_t)v7,  "Unable to terminate preboard as the feature is not supported",  v8,  2u);
      MEMORY[0x1895E56D4](v8, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    specialized static LACPreboardErrorBuilder.error(code:message:)(2LL, 0xD000000000000015LL, 0x80000001892BBDE0LL);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (!v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_189219000, v2, v3, "Preboard terminated", v4, 2u);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #4 in LACPreboardController.launchPreboard()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult);
  int v3 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult + 8);
  if (v3 == 255)
  {
    specialized static LACPreboardErrorBuilder.error(code:message:)(2LL, 0xD000000000000017LL, 0x80000001892BC120LL);
    uint64_t v6 = *(void **)v1;
    unsigned __int8 v5 = *(_BYTE *)(v1 + 8);
    int v4 = 1;
  }

  else
  {
    int v4 = v3 & 1;
    unsigned __int8 v5 = *(_BYTE *)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult + 8);
    uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult);
  }

  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = -1;
  outlined copy of Result<(), Error>?(v2, v3);
  outlined consume of Result<(), Error>?(v6, v5);
  if (v4) {
    swift_willThrow();
  }
}

uint64_t @objc closure #1 in LACPreboardController.launchPreboard()(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  int v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *int v4 = v2;
  v4[1] = @objc closure #1 in LACPreboardController.launchPreboard();
  return LACPreboardController.launchPreboard()();
}

uint64_t @objc closure #1 in LACPreboardController.launchPreboard()()
{
  uint64_t v2 = *(void **)(*v1 + 16);
  uint64_t v3 = *v1;
  swift_task_dealloc();

  uint64_t v4 = *(void *)(v3 + 24);
  if (v0)
  {
    unsigned __int8 v5 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }

  else
  {
    (*(void (**)(void, void))(v4 + 16))(*(void *)(v3 + 24), 0LL);
  }

  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t LACPreboardController.enableCurrentUseCase(withPasscode:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = type metadata accessor for String.Encoding();
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LACPreboardController.enableCurrentUseCase(withPasscode:)()
{
  uint64_t v1 = *(void **)(v0 + 168);
  id v2 = LACLogPreboard();
  Logger.init(_:)();
  id v3 = v1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(char **)(v0 + 168);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    uint64_t v8 = *(void *)&v6[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24];
    uint64_t v9 = *(void *)&v6[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32];
    __swift_project_boxed_opaque_existential_1( &v6[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider],  v8);
    *(void *)(v0 + 144) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_189219000, v4, v5, "Enabling protected option for usecase: %ld", v7, 0xCu);
    MEMORY[0x1895E56D4](v7, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 208) + 8LL);
  *(void *)(v0 + 264) = v12;
  v12(v10, v11);
  if ((LACPreboardController.isRequired.getter() & 1) == 0)
  {
    id v27 = LACLogPreboard();
    Logger.init(_:)();
    id v28 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl( &dword_189219000,  v28,  v29,  "Unable to enable protected option as the feature is not supported",  v30,  2u);
      MEMORY[0x1895E56D4](v30, -1LL, -1LL);
    }

    uint64_t v31 = *(void *)(v0 + 216);
    uint64_t v32 = *(void *)(v0 + 200);

    v12(v31, v32);
    uint64_t v25 = 0xD000000000000015LL;
    id v26 = "Feature not supported";
    goto LABEL_12;
  }

  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v15 = *(void *)(v0 + 176);
  static String.Encoding.utf8.getter();
  uint64_t v16 = String.data(using:allowLossyConversion:)();
  unint64_t v18 = v17;
  *(void *)(v0 + 272) = v16;
  *(void *)(v0 + 280) = v17;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  if (v18 >> 60 == 15)
  {
    id v19 = LACLogPreboard();
    Logger.init(_:)();
    uint64_t v20 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl(&dword_189219000, v20, v21, "Unable to encode passcode", v22, 2u);
      MEMORY[0x1895E56D4](v22, -1LL, -1LL);
    }

    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 200);

    v12(v23, v24);
    uint64_t v25 = 0xD000000000000019LL;
    id v26 = "Unable to encode passcode";
LABEL_12:
    specialized static LACPreboardErrorBuilder.error(code:message:)( 2LL,  v25,  (unint64_t)(v26 - 32) | 0x8000000000000000LL);
    swift_willThrow();
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  LACPreboardController.contextProvider.getter(v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of AsyncStream<()>.Continuation?( v0 + 56,  &demangling cache variable for type metadata for LACACMContextProviding?);
    id v44 = LACLogPreboard();
    Logger.init(_:)();
    uint64_t v45 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      __int128 v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__int128 v47 = 0;
      _os_log_impl(&dword_189219000, v45, v46, "Unable to instantiate ACM helper", v47, 2u);
      MEMORY[0x1895E56D4](v47, -1LL, -1LL);
    }

    uint64_t v48 = *(void *)(v0 + 232);
    uint64_t v49 = *(void *)(v0 + 200);

    v12(v48, v49);
    specialized static LACPreboardErrorBuilder.error(code:message:)(2LL, 0xD00000000000001DLL, 0x80000001892BBE40LL);
    swift_willThrow();
    outlined consume of Data?(v16, v18);
    goto LABEL_13;
  }

  outlined init with take of LACPreboardUseCaseProviding((__int128 *)(v0 + 56), v0 + 16);
  uint64_t v34 = *(void *)(v0 + 40);
  uint64_t v35 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v34);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v36;
  *(void *)(v0 + 296) = v37;
  if (v37 >> 60 == 15)
  {
    id v38 = LACLogPreboard();
    Logger.init(_:)();
    id v39 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl(&dword_189219000, v39, v40, "Unable to get externalized context", v41, 2u);
      MEMORY[0x1895E56D4](v41, -1LL, -1LL);
    }

    uint64_t v42 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 200);

    v12(v42, v43);
    specialized static LACPreboardErrorBuilder.error(code:message:)(2LL, 0xD000000000000021LL, 0x80000001892BBE60LL);
    swift_willThrow();
    outlined consume of Data?(v16, v18);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_13;
  }

  uint64_t v50 = v36;
  unint64_t v51 = v37;
  id v52 = (void *)(*(void *)(v0 + 168)
                 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_passcodeVerifier);
  uint64_t v53 = v52[3];
  uint64_t v54 = v52[4];
  __swift_project_boxed_opaque_existential_1(v52, v53);
  (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v54 + 8))( v16,  v18,  v50,  v51,  v53,  v54);
  uint64_t v55 = (void *)(*(void *)(v0 + 168)
                 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider);
  uint64_t v56 = v55[3];
  uint64_t v57 = v55[4];
  __swift_project_boxed_opaque_existential_1(v55, v56);
  uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
  if (v58 == 4)
  {
    os_log_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v59;
    void *v59 = v0;
    v59[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
    return LACPreboardController.setEnvironmentVariable()();
  }

  else if (v58 == 3)
  {
    os_log_t v60 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v60;
    void *v60 = v0;
    v60[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
    return LACPreboardController.installProfile()();
  }

  else
  {
    if (v58 == -1)
    {
      _StringGuts.grow(_:)(24LL);
      *(void *)(v0 + 120) = 0xE000000000000000LL;
      uint64_t v61 = v0 + 120;
      *(void *)(v61 - _Block_object_dispose(va, 8) = 0LL;
      v62._object = (void *)0x80000001892BBED0LL;
      v62._countAndFlagsBits = 0xD000000000000016LL;
      String.append(_:)(v62);
      uint64_t v63 = v55[3];
      uint64_t v64 = v55[4];
      __swift_project_boxed_opaque_existential_1(v55, v63);
      *(void *)(v61 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v64);
    }

    else
    {
      _StringGuts.grow(_:)(24LL);
      *(void *)(v0 + 104) = 0xE000000000000000LL;
      uint64_t v65 = v0 + 104;
      *(void *)(v65 - _Block_object_dispose(va, 8) = 0LL;
      v66._object = (void *)0x80000001892BBED0LL;
      v66._countAndFlagsBits = 0xD000000000000016LL;
      String.append(_:)(v66);
      uint64_t v67 = v55[3];
      uint64_t v68 = v55[4];
      __swift_project_boxed_opaque_existential_1(v55, v67);
      *(void *)(v65 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v67, v68);
    }

    type metadata accessor for LACPreboardUseCase(0LL);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  id v2 = *v1;
  *(void *)(v2 + 312) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 336) = v4;
  *uint64_t v4 = v2;
  v4[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
  return LACPreboardController.finishPreboard(success:reason:)(1, 0xD000000000000025LL, 0x80000001892BBEF0LL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  id v2 = *v1;
  *(void *)(v2 + 32_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 336) = v4;
  *uint64_t v4 = v2;
  v4[1] = LACPreboardController.enableCurrentUseCase(withPasscode:);
  return LACPreboardController.finishPreboard(success:reason:)(1, 0xD000000000000025LL, 0x80000001892BBEF0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 344LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v1 = LACLogPreboard();
  Logger.init(_:)();
  id v2 = (os_log_s *)Logger.logObject.getter();
  id v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_189219000, v2, v3, "Preboard completed", v4, 2u);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 272);
  os_log_type_t v5 = *(void *)(v0 + 280);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v9 = *(void *)(v0 + 200);
  outlined consume of Data?(*(void *)(v0 + 288), *(void *)(v0 + 296));
  outlined consume of Data?(v6, v5);

  v7(v8, v9);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v2 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 296);
  outlined consume of Data?(*(void *)(v0 + 272), *(void *)(v0 + 280));
  outlined consume of Data?(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v2 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 296);
  outlined consume of Data?(*(void *)(v0 + 272), *(void *)(v0 + 280));
  outlined consume of Data?(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v2 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 296);
  outlined consume of Data?(*(void *)(v0 + 272), *(void *)(v0 + 280));
  outlined consume of Data?(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.setEnvironmentVariable()()
{
  v1[23] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[24] = v2;
  v1[25] = *(void *)(v2 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return swift_task_switch();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  Class isa;
  uint64_t v9;
  uint64_t v1 = v0[23];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  id v3 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1( (void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider),  v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  os_log_type_t v5 = LACPreboardController.storageRequest(for:)(v4);
  v0[28] = v5;
  v0[29] = specialized Data.init<A>(_:)((uint64_t)&outlined read-only object #0 of LACPreboardController.setEnvironmentVariable());
  v0[30] = v6;
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[31] = isa;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = LACPreboardController.setEnvironmentVariable();
  uint64_t v9 = swift_continuation_init();
  v0[10] = MEMORY[0x1895F87A8];
  v0[11] = 0x40000000LL;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned NSError?) -> () with result type Any;
  v0[13] = &block_descriptor_10;
  v0[14] = v9;
  objc_msgSend(v7, sel_setObject_forRequest_connection_completionHandler_, isa, v5, 0, v0 + 10);
  return swift_continuation_await();
}

{
  uint64_t v0;
  *(void *)(*(void *)v0 + 256LL) = *(void *)(*(void *)v0 + 48LL);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  os_log_s *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 224);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);

  id v3 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v9 = *(void **)(v0 + 224);
  if (v6)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_189219000, v4, v5, "Environment variable set succeeded", v10, 2u);
    MEMORY[0x1895E56D4](v10, -1LL, -1LL);
    outlined consume of Data._Representation(v8, v7);
  }

  else
  {

    outlined consume of Data._Representation(v8, v7);
  }

  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 200);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  os_log_s *v9;
  os_log_type_t v10;
  void *v11;
  uint8_t *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v2 = *(void **)(v0 + 248);
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 232);
  id v3 = *(void *)(v0 + 240);
  os_log_type_t v5 = *(void **)(v0 + 224);
  swift_willThrow();
  outlined consume of Data._Representation(v4, v3);

  uint64_t v6 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v7 = v1;
  uint64_t v8 = v1;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = *(void **)(v0 + 256);
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    uint64_t v14 = v11;
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 176) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v15;

    _os_log_impl(&dword_189219000, v9, v10, "Environment variable set failed with error: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v13, -1LL, -1LL);
    MEMORY[0x1895E56D4](v12, -1LL, -1LL);
  }

  else
  {
    uint64_t v16 = *(void **)(v0 + 256);
  }

  unint64_t v17 = *(void **)(v0 + 256);
  unint64_t v18 = *(void *)(v0 + 208);
  id v19 = *(void *)(v0 + 192);
  uint64_t v20 = *(void *)(v0 + 200);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  _StringGuts.grow(_:)(46LL);
  *(void *)(v0 + 152) = 0LL;
  *(void *)(v0 + 160) = 0xE000000000000000LL;
  v21._object = (void *)0x80000001892BC0B0LL;
  v21._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v21);
  *(void *)(v0 + 16_Block_object_dispose(va, 8) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  specialized static LACPreboardErrorBuilder.error(code:message:)(1LL, *(void *)(v0 + 152), *(void *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.installProfile()()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return swift_task_switch();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v11)(id, uint64_t, uint64_t, uint64_t);
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  id v3 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1( (void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider),  v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  os_log_type_t v5 = LACPreboardController.storageRequest(for:)(v4);
  v0[11] = v5;
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 24);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager + 32);
  __swift_project_boxed_opaque_existential_1( (void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager),  v6);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage);
  uint64_t v11 = (uint64_t (*)(id, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 16) + *(void *)(v7 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *uint64_t v9 = v0;
  v9[1] = LACPreboardController.installProfile();
  return v11(v5, v8, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  os_log_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = LACLogPreboard();
  Logger.init(_:)();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  id v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_189219000, v2, v3, "UPP install succeeded", v4, 2u);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);
    os_log_type_t v5 = *(os_log_s **)(v0 + 88);
  }

  else
  {
    os_log_type_t v5 = v2;
    uint64_t v2 = *(os_log_s **)(v0 + 88);
  }

  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  os_log_s *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v1 = *(void **)(v0 + 104);

  uint64_t v2 = LACLogPreboard();
  Logger.init(_:)();
  id v3 = v1;
  uint64_t v4 = v1;
  os_log_type_t v5 = (os_log_s *)Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void **)(v0 + 104);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v10 = v7;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v11;

    _os_log_impl(&dword_189219000, v5, v6, "UPP install failed with error: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v9, -1LL, -1LL);
    MEMORY[0x1895E56D4](v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v12 = *(void **)(v0 + 104);
  }

  uint64_t v13 = *(void **)(v0 + 104);
  (*(void (**)(void, void))(*(void *)(v0 + 64) + 8LL))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  _StringGuts.grow(_:)(33LL);
  *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  v14._object = (void *)0x80000001892BC100LL;
  v14._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v14);
  *(void *)(v0 + 32) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  specialized static LACPreboardErrorBuilder.error(code:message:)(3LL, *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LACPreboardController.finishPreboard(success:reason:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 4_Block_object_dispose(va, 8) = v3;
  *(void *)(v4 + 32) = a2;
  *(_BYTE *)(v4 + 132) = a1;
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = *(void *)(v5 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 80) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t LACPreboardController.finishPreboard(success:reason:)()
{
  id v1 = LACLogPreboard();
  Logger.init(_:)();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v24 = *(void *)(v0 + 56);
    uint64_t v25 = *(void *)(v0 + 80);
    unint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v23 = *(void *)(v0 + 64);
    int v6 = *(unsigned __int8 *)(v0 + 132);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v27 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 1024;
    *(_DWORD *)(v0 + 12_Block_object_dispose(va, 8) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_189219000, v2, v3, "Finishing Preboard with reason: %s success: %{BOOL}d", (uint8_t *)v7, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v8, -1LL, -1LL);
    MEMORY[0x1895E56D4](v7, -1LL, -1LL);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v9(v25, v24);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 64);
    swift_bridgeObjectRelease_n();

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }

  uint64_t v13 = *(void *)(v0 + 48);
  int v14 = *(unsigned __int8 *)(v0 + 132);
  uint64_t v15 = @"com.apple.LocalAuthentication.storage.ProtectedVariableSetSuccess";
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = v9;
  *(void *)(v0 + 96) = @"com.apple.LocalAuthentication.storage.ProtectedVariableSetSuccess";
  *(void *)(v0 + 104) = @"com.apple.LocalAuthentication.storage.ProtectedVariableSetFailure";
  if (!v14) {
    uint64_t v15 = @"com.apple.LocalAuthentication.storage.ProtectedVariableSetFailure";
  }
  uint64_t v16 = v15;
  id v17 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v17, sel_postNotification_, v16);

  unint64_t v18 = (void *)(v13 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider);
  uint64_t v19 = *(void *)(v13 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 24);
  uint64_t v20 = *(void *)(v13 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider + 32);
  __swift_project_boxed_opaque_existential_1(v18, v19);
  id v26 = (uint64_t (*)(void, uint64_t, uint64_t))(**(int **)(v20 + 16) + *(void *)(v20 + 16));
  os_log_type_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v21;
  void *v21 = v0;
  v21[1] = LACPreboardController.finishPreboard(success:reason:);
  return v26(*(unsigned __int8 *)(v0 + 132), v19, v20);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 120LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id *v1;
  id v1 = (id *)(v0 + 104);
  if (*(_BYTE *)(v0 + 132)) {
    id v1 = (id *)(v0 + 96);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  os_log_s *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void **v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v1 = *(void **)(v0 + 120);
  uint64_t v2 = LACLogPreboard();
  Logger.init(_:)();
  os_log_type_t v3 = v1;
  unint64_t v4 = v1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter();
  int v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void **)(v0 + 120);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t v10 = v7;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v11;

    _os_log_impl(&dword_189219000, v5, v6, "Unable to complete boot mode with error: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v9, -1LL, -1LL);
    MEMORY[0x1895E56D4](v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v12 = *(void **)(v0 + 120);
  }

  uint64_t v13 = (void **)(v0 + 104);
  int v14 = *(void (**)(uint64_t, uint64_t))(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v16 = *(void *)(v0 + 56);
  if (*(_BYTE *)(v0 + 132)) {
    uint64_t v13 = (void **)(v0 + 96);
  }
  id v17 = *v13;

  v14(v15, v16);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)( int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  void *v8 = v3;
  v8[1] = @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:);
  return LACPreboardController.enableCurrentUseCase(withPasscode:)(v5, v7);
}

uint64_t @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)()
{
  uint64_t v2 = *(void **)(*v1 + 16);
  uint64_t v3 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 24);
  if (v0)
  {
    uint64_t v5 = (void *)_convertErrorToNSError(_:)();

    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }

  else
  {
    (*(void (**)(void, void))(v4 + 16))(*(void *)(v3 + 24), 0LL);
  }

  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t @objc closure #1 in LACPreboardController.terminate()(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = @objc closure #1 in LACPreboardController.terminate();
  return LACPreboardController.terminate()();
}

id LACPreboardController.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACPreboardController.init()()
{
}

id LACPreboardController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACPreboardController.acmContext(for:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v43 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  id v38 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v39 = (uint64_t)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  int v14 = (char *)v34 - v13;
  LACPreboardController.contextProvider.getter((uint64_t)v40);
  uint64_t v15 = v41;
  if (v41)
  {
    uint64_t v36 = v5;
    unint64_t v37 = v9;
    v34[1] = v2;
    uint64_t v16 = v42;
    id v17 = __swift_project_boxed_opaque_existential_1(v40, v41);
    uint64_t v18 = *(void *)(v15 - 8);
    MEMORY[0x1895F8858](v17);
    uint64_t v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v18 + 16))(v20);
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v40,  &demangling cache variable for type metadata for LACACMContextProviding?);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))( v14,  v3 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uuid,  v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v14, 0LL, 1LL, v4);
      uint64_t v24 = (uint64_t)v37;
      uint64_t v25 = (uint64_t)&v37[*(int *)(v7 + 48)];
      outlined init with copy of URL?( (uint64_t)v14,  (uint64_t)v37,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined init with copy of URL?(v43, v25, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      id v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
      if (v26(v24, 1LL, v4) == 1)
      {
        outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v14,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (v26(v25, 1LL, v4) == 1)
        {
          outlined destroy of AsyncStream<()>.Continuation?( v24,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
          return v35;
        }
      }

      else
      {
        uint64_t v27 = v39;
        outlined init with copy of URL?(v24, v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (v26(v25, 1LL, v4) != 1)
        {
          id v28 = v38;
          (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v38, v25, v4);
          lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( &lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F58]);
          char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v30 = *(void (**)(char *, uint64_t))(v23 + 8);
          v30(v28, v4);
          outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v14,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v30((char *)v27, v4);
          outlined destroy of AsyncStream<()>.Continuation?( v24,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if ((v29 & 1) != 0) {
            return v35;
          }
          goto LABEL_12;
        }

        outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v14,  (uint64_t *)&demangling cache variable for type metadata for UUID?);
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v4);
      }

      outlined destroy of AsyncStream<()>.Continuation?( v24,  &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_12:
      outlined consume of Data?(v35, v22);
    }
  }

  else
  {
    outlined destroy of AsyncStream<()>.Continuation?( (uint64_t)v40,  &demangling cache variable for type metadata for LACACMContextProviding?);
  }

  uint64_t v32 = (void *)objc_opt_self();
  os_log_type_t v33 = (void *)MEMORY[0x1895E445C](0x63204D4341206F4ELL, 0xEE00747865746E6FLL);
  objc_msgSend(v32, sel_errorWithCode_debugDescription_, -1000, v33);

  return swift_willThrow();
}

uint64_t LACPreboardController.bundleID(for:)()
{
  return 0LL;
}

id LACPreboardController.storageRequest(for:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 == 4)
  {
    uint64_t v7 = &LACStorageKeyDeveloperMode;
LABEL_5:
    uint64_t v8 = (void *)*v7;
    (*(void (**)(char *, uint64_t))(v4 + 16))( v6,  v1 + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uuid);
    id v9 = objc_allocWithZone((Class)type metadata accessor for LACPreboardStorageRequest());
    return LACPreboardStorageRequest.init(for:contextID:)(v8, (uint64_t)v6);
  }

  if (a1 == 3)
  {
    uint64_t v7 = &LACStorageKeyUPP;
    goto LABEL_5;
  }

  void v12[2] = 0LL;
  uint64_t v12[3] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(31LL);
  v11._object = (void *)0x80000001892BC0E0LL;
  v11._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v11);
  v12[1] = a1;
  type metadata accessor for LACPreboardUseCase(0LL);
  _print_unlocked<A, B>(_:_:)();
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)( uint64_t (*a1)(void))
{
  return a1() & 1;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    id result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    id result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    id result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    id result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

char *specialized LACPreboardController.init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v15 = v7;
  UUID.init()();
  uint64_t v16 = &v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___contextProvider];
  *((void *)v16 + 1) = 0LL;
  *((void *)v16 + 2) = 0LL;
  *(void *)uint64_t v16 = 0LL;
  *(_OWORD *)(v16 + 24) = xmmword_1892B5300;
  id v17 = &v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult];
  *(void *)id v17 = 0LL;
  v17[8] = -1;
  *(void *)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController____lazy_storage___launchDispatchQueue] = 0LL;
  *(void *)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_contextProviderFactory] = a1;
  outlined init with copy of LACOnenessSessionProviding( a2,  (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launcher]);
  outlined init with copy of LACOnenessSessionProviding( a3,  (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_passcodeVerifier]);
  *(void *)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage] = a4;
  outlined init with copy of LACOnenessSessionProviding( a5,  (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_uppManager]);
  outlined init with copy of LACOnenessSessionProviding( a6,  (uint64_t)&v15[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_useCaseProvider]);
  swift_retain();
  swift_unknownObjectRetain();

  v20.receiver = v15;
  v20.super_class = ObjectType;
  uint64_t v18 = (char *)objc_msgSendSuper2(&v20, sel_init);
  objc_msgSend( *(id *)&v18[OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_secureStorage],  sel_setDelegate_,  v18);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v18;
}

void partial apply for closure #1 in LACPreboardController.launchPreboard()(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16) + OBJC_IVAR____TtC23LocalAuthenticationCore21LACPreboardController_launchResult;
  int v4 = *(unsigned __int8 *)(v3 + 8);
  if (v4 == 255)
  {
    unint64_t v5 = *(void **)v3;
    *(void *)uint64_t v3 = 0LL;
    *(_BYTE *)(v3 + _Block_object_dispose(va, 8) = 0;
    outlined consume of Result<(), Error>?(v5, 0xFFu);
  }

  *a1 = v4 == 255;
}

uint64_t sub_18927D8D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LACPreboardController.launchPreboard()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v8;
  void *v8 = v2;
  v8[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return closure #2 in LACPreboardController.launchPreboard()(a1, v4, v5, v7, v6);
}

uint64_t sub_18927D980()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in LACPreboardController.launchPreboard()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v1;
  void *v1 = v0;
  v1[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return closure #3 in LACPreboardController.launchPreboard()();
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<(), Error>(a1, a2 & 1);
  }
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if ((a2 & 1) != 0) {
}
  }

void partial apply for closure #4 in LACPreboardController.launchPreboard()()
{
}

uint64_t ObjC metadata update function for LACPreboardController()
{
  return type metadata accessor for LACPreboardController();
}

uint64_t type metadata accessor for LACPreboardController()
{
  uint64_t result = type metadata singleton initialization cache for LACPreboardController;
  if (!type metadata singleton initialization cache for LACPreboardController) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for LACPreboardController()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for LACPreboardController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardController.__allocating_init(contextProviderFactory:launcher:passcodeVerifier:secureStorage:uppManager:useCaseProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for @objc closure #1 in LACPreboardController.terminate()()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in LACPreboardController.terminate()
                                                       + async function pointer to @objc closure #1 in LACPreboardController.terminate()))( v2,  v3);
}

uint64_t sub_18927DBCC()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)
                                                      + async function pointer to @objc closure #1 in LACPreboardController.enableCurrentUseCase(withPasscode:)))( v2,  v3,  v4);
}

uint64_t objectdestroy_19Tm()
{
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACPreboardController.launchPreboard()()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in LACPreboardController.launchPreboard()
                                                       + async function pointer to @objc closure #1 in LACPreboardController.launchPreboard()))( v2,  v3);
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 0LL;
    *(void *)(result + 24) = v2;
  }

  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  uint64_t v10 = lazy protocol witness table accessor for type CurrentValueSubject<Bool?, Never> and conformance CurrentValueSubject<A, B>( (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189607200]);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t outlined assign with take of LACACMContextProviding??(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACACMContextProviding??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of LACACMContextProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LACACMContextProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id outlined copy of Result<(), Error>?(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of Result<(), Error>(result, a2 & 1);
  }
  return result;
}

id outlined copy of Result<(), Error>(id result, char a2)
{
  if ((a2 & 1) != 0) {
    return result;
  }
  return result;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 5LL; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1LL)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }

  __break(1u);
  return result;
}

uint64_t LACEvaluationRequestCompoundProcessor.processors.getter()
{
  return swift_bridgeObjectRetain();
}

id LACEvaluationRequestCompoundProcessor.__allocating_init(processors:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0LL;
  uint64_t v4 = &v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex];
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices] = MEMORY[0x18961AFE8];
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

id LACEvaluationRequestCompoundProcessor.init(processors:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0LL;
  uint64_t v4 = &v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex];
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  *(void *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices] = MEMORY[0x18961AFE8];
  *(void *)&v1[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors] = a1;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t LACEvaluationRequestCompoundProcessor.canProcessRequest(_:)()
{
  return 1LL;
}

void LACEvaluationRequestCompoundProcessor.processRequest(_:configuration:completion:)( void *a1, id a2, void (*a3)(void), uint64_t a4)
{
  BOOL v5 = v4;
  if (v4[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex + 8] == 1)
  {
    unint64_t v10 = *(void *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors];
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_4;
      }
    }

    else if (*(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_4:
      id v11 = objc_msgSend(a2, sel_nextProcessor);
      *(void *)&v5[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = v11;
      swift_unknownObjectRelease();
      LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(a1, 0LL, a3, a4);
      return;
    }

    id v25 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
    a3();
  }

  else
  {
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v4, sel_description);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    id v17 = (void *)objc_opt_self();
    v18._countAndFlagsBits = 0x7973756220LL;
    v18._object = (void *)0xE500000000000000LL;
    String.append(_:)(v18);
    uint64_t v19 = (void *)MEMORY[0x1895E445C](0x6F737365636F7250LL, 0xEA00000000002072LL);
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v17, sel_errorWithCode_debugDescription_, -1000, v19);

    unint64_t v21 = (void *)objc_opt_self();
    unint64_t v22 = (void *)_convertErrorToNSError(_:)();
    id v24 = objc_msgSend(v21, sel_resultWithFailure_, v22);

    ((void (*)(id))a3)(v24);
  }

void LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)( id a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v41 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  unint64_t v10 = *(void (**)(void))(v9 - 8);
  MEMORY[0x1895F8858](v9);
  id v12 = (unint64_t *)((char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v13 = *(void *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if (!(v13 >> 62))
  {
    int v14 = *(void **)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_17:
    id v40 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
    a3();

    return;
  }

  swift_bridgeObjectRetain();
  int v14 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  uint64_t v15 = v5 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex;
  *(void *)uint64_t v15 = a2;
  *(_BYTE *)(v15 + _Block_object_dispose(va, 8) = 0;
  if ((v13 & 0xC000000000000001LL) == 0)
  {
    if (a2 < 0)
    {
      __break(1u);
    }

    else if (*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10) > (unint64_t)a2)
    {
      int v14 = *(void **)(v13 + 8 * a2 + 32);
      swift_unknownObjectRetain();
      goto LABEL_7;
    }

    __break(1u);
    goto LABEL_21;
  }

  int v14 = (void *)MEMORY[0x1895E478C](a2, v13);
LABEL_7:
  if (objc_msgSend(v14, sel_canProcessRequest_, a1))
  {
    id v12 = (unint64_t *)(v5
                             + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices);
    swift_beginAccess();
    unint64_t v13 = *v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t *v12 = v13;
    unint64_t v10 = a3;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_9:
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        unint64_t v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  (void *)v13);
        unint64_t *v12 = v13;
      }

      *(void *)(v13 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v18 + 1;
      *(void *)(v13 + 8 * v18 + 32) = a2;
      swift_endAccess();
      id v19 = objc_msgSend( objc_allocWithZone((Class)LACProcessingConfiguration),  sel_initWithNextProcessor_,  LACEvaluationRequestCompoundProcessor.nextProcessor(after:)(a2));
      uint64_t v20 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v21 = (void *)swift_allocObject();
      v21[2] = v20;
      v21[3] = v10;
      v21[4] = v41;
      v21[5] = a2;
      aBlock[4] = (uint64_t)closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)partial apply;
      aBlock[5] = (uint64_t)v21;
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_39_0;
      unint64_t v22 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v14, sel_processRequest_configuration_completion_, a1, v19, v22);
      _Block_release(v22);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return;
    }

uint64_t LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  if ((*(_BYTE *)(v4
                 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex
                 + 8) & 1) != 0)
    return ((uint64_t (*)(uint64_t))a3)(a2);
  unint64_t v10 = *(void *)(v4
                  + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  specialized LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( a1,  a2,  v10,  v4,  v11,  a3,  a4);
  swift_release();
  return swift_release();
}

uint64_t sub_18927EB00()
{
  return swift_deallocObject();
}

void closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x1895E5764](a2 + 16);
  if (v10)
  {
    uint64_t v11 = (char *)v10;
    uint64_t v12 = v10 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex;
    *(void *)uint64_t v12 = 0LL;
    *(_BYTE *)(v12 + _Block_object_dispose(va, 8) = 1;
    unint64_t v13 = (void *)(v10
                   + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices);
    swift_beginAccess();
    *unint64_t v13 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRelease();
    *(void *)&v11[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0LL;
    swift_unknownObjectRelease();
    a3(a1);
  }

  else
  {
    id v14 = LACLogProcessor();
    Logger.init(_:)();
    uint64_t v15 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl( &dword_189219000,  v15,  v16,  "LACEValuationRequestCompoundProcessor was unexpectedly released during post-processing",  v17,  2u);
      MEMORY[0x1895E56D4](v17, -1LL, -1LL);
    }

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }

uint64_t LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( uint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  if ((a3 & 0x8000000000000000LL) != 0) {
    return a4(a2);
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(v5 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if ((v11 & 0xC000000000000001LL) != 0)
  {
    uint64_t v12 = (void *)MEMORY[0x1895E478C](a3);
  }

  else
  {
    if (*(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10) <= a3)
    {
      __break(1u);
      return result;
    }

    uint64_t v12 = *(void **)(v11 + 8 * a3 + 32);
    swift_unknownObjectRetain();
  }

  if (((objc_msgSend(v12, sel_canProcessRequest_, v10) & 1) != 0
     || (unint64_t v13 = (uint64_t *)(v5
                         + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices),
         swift_beginAccess(),
         (specialized Sequence<>.contains(_:)(a3, *v13) & 1) != 0))
    && (objc_msgSend(v12, sel_respondsToSelector_, sel_postProcessRequest_result_completion_) & 1) != 0)
  {
    uint64_t v14 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v14;
    v15[3] = v10;
    void v15[4] = a3;
    v15[5] = a4;
    v15[6] = a5;
    aBlock[4] = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
    aBlock[3] = &block_descriptor_31_0;
    os_log_type_t v16 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    objc_msgSend(v12, sel_postProcessRequest_result_completion_, v10, a2, v16);
    _Block_release(v16);
    swift_unknownObjectRelease_n();
    swift_release();
    swift_release();
    return swift_release();
  }

  else
  {
    LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( v10,  a2,  a3 - 1,  a4,  a5);
    return swift_unknownObjectRelease();
  }

id LACEvaluationRequestCompoundProcessor.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACEvaluationRequestCompoundProcessor.init()()
{
}

id LACEvaluationRequestCompoundProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LACEvaluationRequestCompoundProcessor.nextProcessor(after:)(uint64_t a1)
{
  uint64_t v5 = a1 + 1;
  if (__OFADD__(a1, 1LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
    unint64_t v4 = v2 >> 62;
    if (!(v2 >> 62))
    {
      unint64_t v6 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_34;
    }
  }

  swift_bridgeObjectRetain();
  unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((uint64_t)v6 >= v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20 >= v5)
    {
LABEL_4:
      if ((v5 & 0x8000000000000000LL) == 0)
      {
        if (v4)
        {
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v7 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v7 >= (uint64_t)v6)
        {
          if ((v6 & 0x8000000000000000LL) == 0)
          {
            if ((v2 & 0xC000000000000001LL) != 0 && v5 != v6)
            {
              if (v5 >= v6)
              {
                __break(1u);
                goto LABEL_40;
              }

              Swift::Int v8 = v5;
              do
              {
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LACEvaluationRequestProcessor);
                _ArrayBuffer._typeCheckSlowPath(_:)(v8++);
              }

              while (v6 != v8);
            }

            if (v4)
            {
              swift_bridgeObjectRetain();
              uint64_t v7 = _CocoaArrayWrapper.subscript.getter();
              uint64_t v3 = v9;
              uint64_t v5 = v10;
              unint64_t v6 = v11;
              swift_bridgeObjectRelease();
              if ((v6 & 1) != 0) {
                goto LABEL_20;
              }
            }

            else
            {
              uint64_t v7 = v2 & 0xFFFFFFFFFFFFFF8LL;
              uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFF8LL) + 32;
              unint64_t v6 = (2 * v6) | 1;
              swift_bridgeObjectRetain();
              if ((v6 & 1) != 0)
              {
LABEL_20:
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                uint64_t v13 = swift_dynamicCastClass();
                if (!v13)
                {
                  swift_unknownObjectRelease();
                  uint64_t v13 = MEMORY[0x18961AFE8];
                }

                uint64_t v14 = *(void *)(v13 + 16);
                swift_release();
                if (!__OFSUB__(v6 >> 1, v5))
                {
                  if (v14 == (v6 >> 1) - v5)
                  {
                    uint64_t v12 = swift_dynamicCastClass();
                    if (!v12)
                    {
                      swift_unknownObjectRelease();
                      uint64_t v12 = MEMORY[0x18961AFE8];
                    }

LABEL_26:
                    swift_unknownObjectRelease();
                    if (!*(void *)(v1
                                    + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor))
                    {
LABEL_29:
                      os_log_type_t v16 = (void *)objc_opt_self();
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LACEvaluationRequestProcessor);
                      Class isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      id v18 = objc_msgSend(v16, sel_makeProcessorWithSubprocessors_, isa);

                      return (uint64_t)v18;
                    }

                    uint64_t v15 = swift_unknownObjectRetain_n();
                    MEMORY[0x1895E4558](v15);
                    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8LL) + 0x10) < *(void *)((v12 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1)
                    {
LABEL_28:
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                      swift_unknownObjectRelease();
                      goto LABEL_29;
                    }

LABEL_38:
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    goto LABEL_28;
                  }

                  goto LABEL_41;
                }

        Swift::Int v8 = 4294967285LL;
        goto LABEL_35;
      }

LABEL_37:
          __break(1u);
          goto LABEL_38;
        }

LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  __break(1u);
  return result;
}

                unint64_t v4 = v11;
              }
            }
          }
        }
      }
    }
  }

  if ((a3 & 8) != 0) {
    memset_s(v24, 0x20uLL, 0, 0x20uLL);
  }
  return v8;
}

void closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)( void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x1895E5764](a2 + 16);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    if (objc_msgSend(a1, sel_rawValue) == (id)1
      && (id v16 = objc_msgSend(a1, sel_request)) != 0)
    {
      if (__OFADD__(a5, 1LL))
      {
        __break(1u);
      }

      else
      {
        LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)(v16, a5 + 1, a3, a4);

        swift_unknownObjectRelease();
      }
    }

    else
    {
      ((void (*)(void *))a3)(a1);
    }
  }

  else
  {
    id v17 = LACLogProcessor();
    Logger.init(_:)();
    id v18 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( &dword_189219000,  v18,  v19,  "LACEValuationRequestCompoundProcessor was unexpectedly released during processing",  v20,  2u);
      MEMORY[0x1895E56D4](v20, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

void closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x1895E5764](a2 + 16);
  if (v16)
  {
    if (__OFSUB__(a4, 1LL))
    {
      __break(1u);
    }

    else
    {
      id v17 = (void *)v16;
      LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( a3,  a1,  a4 - 1,  a5,  a6);
    }
  }

  else
  {
    id v18 = LACLogProcessor();
    Logger.init(_:)();
    os_log_type_t v19 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl( &dword_189219000,  v19,  v20,  "LACEValuationRequestCompoundProcessor was unexpectedly released during post-processing",  v21,  2u);
      MEMORY[0x1895E56D4](v21, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v10 = (void *)MEMORY[0x18961AFE8];
      uint64_t v13 = (void *)(MEMORY[0x18961AFE8] + 32LL);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    char v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)( id a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void **)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  int64_t v11 = (void **)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a4;
  unint64_t v13 = *(void *)(a3 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if (v13 >> 62)
  {
    _Block_copy(a4);
    _Block_copy(a4);
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v36 > a2)
    {
LABEL_3:
      uint64_t v15 = a3 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex;
      *(void *)uint64_t v15 = a2;
      *(_BYTE *)(v15 + _Block_object_dispose(va, 8) = 0;
      if ((v13 & 0xC000000000000001LL) == 0)
      {
        if (a2 < 0)
        {
          __break(1u);
        }

        else if (*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10) > (unint64_t)a2)
        {
          unint64_t v13 = *(void *)(v13 + 8 * a2 + 32);
          swift_unknownObjectRetain();
          goto LABEL_7;
        }

        __break(1u);
        goto LABEL_22;
      }

      unint64_t v13 = MEMORY[0x1895E478C](a2, v13);
LABEL_7:
      if (!objc_msgSend((id)v13, sel_canProcessRequest_, a1))
      {
        id v23 = LACLogDefault();
        Logger.init(_:)();
        swift_unknownObjectRetain_n();
        swift_unknownObjectRetain();
        id v24 = (os_log_s *)Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        int v43 = v25;
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          id v44 = a1;
          uint64_t v27 = v26;
          uint64_t v42 = swift_slowAlloc();
          aBlock[0] = v42;
          *(_DWORD *)uint64_t v27 = 67240450;
          os_log_t v41 = v24;
          LODWORD(v46) = objc_msgSend(v44, sel_identifier);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease();
          *(_WORD *)(v27 + _Block_object_dispose(va, 8) = 2080;
          id v28 = objc_msgSend((id)v13, sel_description, v27 + 10);
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          int v39 = v9;
          uint64_t v40 = v8;
          uint64_t v30 = v29;
          unint64_t v32 = v31;

          uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          os_log_t v33 = v41;
          _os_log_impl( &dword_189219000,  v41,  (os_log_type_t)v43,  "Skipping processing of request rid: %{public}u by %s",  (uint8_t *)v27,  0x12u);
          uint64_t v34 = v42;
          swift_arrayDestroy();
          MEMORY[0x1895E56D4](v34, -1LL, -1LL);
          uint64_t v35 = v27;
          a1 = v44;
          MEMORY[0x1895E56D4](v35, -1LL, -1LL);

          ((void (*)(void **, uint64_t))v39[1])(v11, v40);
        }

        else
        {

          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease();
          ((void (*)(void **, uint64_t))v9[1])(v11, v8);
        }

        _Block_copy(a4);
        specialized LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)( a1,  a2 + 1,  a3,  a4);
        _Block_release(a4);
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_16;
      }

      int64_t v11 = (void **)(a3
                      + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices);
      swift_beginAccess();
      uint64_t v9 = *v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char *v11 = v9;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_9:
        unint64_t v18 = v9[2];
        unint64_t v17 = v9[3];
        if (v18 >= v17 >> 1)
        {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v9);
          char *v11 = v9;
        }

        v9[2] = v18 + 1;
        v9[v18 + 4] = a2;
        swift_endAccess();
        id v19 = objc_msgSend( objc_allocWithZone((Class)LACProcessingConfiguration),  sel_initWithNextProcessor_,  LACEvaluationRequestCompoundProcessor.nextProcessor(after:)(a2));
        uint64_t v20 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v21 = (void *)swift_allocObject();
        v21[2] = v20;
        v21[3] = thunk for @escaping @callee_unowned @convention(block) (@unowned LACEvaluationResult) -> ()partial apply;
        v21[4] = v12;
        v21[5] = a2;
        aBlock[4] = (uint64_t)partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:);
        aBlock[5] = (uint64_t)v21;
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
        aBlock[3] = (uint64_t)&block_descriptor_11;
        uint64_t v22 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend((id)v13, sel_processRequest_configuration_completion_, a1, v19, v22);
        _Block_release(v22);
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

LABEL_16:
        _Block_release(a4);
        return;
      }

void specialized LACEvaluationRequestCompoundProcessor.processRequest(_:configuration:completion:)( void *a1, void *a2, char *a3, void *aBlock)
{
  if (a3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex + 8] != 1)
  {
    _Block_copy(aBlock);
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease();
    id v11 = objc_msgSend(a3, sel_description);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)objc_opt_self();
    v17._countAndFlagsBits = 0x7973756220LL;
    v17._object = (void *)0xE500000000000000LL;
    String.append(_:)(v17);
    unint64_t v18 = (void *)MEMORY[0x1895E445C](0x6F737365636F7250LL, 0xEA00000000002072LL);
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(v16, sel_errorWithCode_debugDescription_, -1000, v18);

    uint64_t v20 = (void *)objc_opt_self();
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    id v22 = objc_msgSend(v20, sel_resultWithFailure_, v21);

    (*((void (**)(void *, id))aBlock + 2))(aBlock, v22);
    goto LABEL_8;
  }

  unint64_t v8 = *(void *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors];
  if (v8 >> 62)
  {
    _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_4;
    }
LABEL_7:
    id v24 = objc_msgSend((id)objc_opt_self(), sel_resultWithNext_, a1);
    (*((void (**)(void *, id))aBlock + 2))(aBlock, v24);

    goto LABEL_8;
  }

  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  _Block_copy(aBlock);
  if (!v9) {
    goto LABEL_7;
  }
LABEL_4:
  id v10 = objc_msgSend(a2, sel_nextProcessor);
  *(void *)&a3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = v10;
  swift_unknownObjectRelease();
  _Block_copy(aBlock);
  specialized LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)( a1,  0LL,  (uint64_t)a3,  (void (**)(void, void))aBlock);
  _Block_release(aBlock);
LABEL_8:
  _Block_release(aBlock);
}

void *specialized LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t result = (void *)swift_allocObject();
  Swift::String v15 = result;
  result[2] = a5;
  result[3] = a6;
  result[4] = a7;
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)(a2, a5, a6);
    swift_release();
    swift_release();
    goto LABEL_11;
  }

  uint64_t v16 = *(void *)(a4 + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors);
  if ((v16 & 0xC000000000000001LL) != 0)
  {
    swift_retain_n();
    swift_retain_n();
    Swift::String v17 = (void *)MEMORY[0x1895E478C](a3, v16);
    goto LABEL_5;
  }

  if (*(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a3)
  {
    Swift::String v17 = *(void **)(v16 + 8 * a3 + 32);
    swift_retain_n();
    swift_retain_n();
    swift_unknownObjectRetain();
LABEL_5:
    if ((objc_msgSend(v17, sel_canProcessRequest_, a1) & 1) == 0
      && (unint64_t v18 = (uint64_t *)(a4
                          + OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices),
          swift_beginAccess(),
          (specialized Sequence<>.contains(_:)(a3, *v18) & 1) == 0)
      || (objc_msgSend(v17, sel_respondsToSelector_, sel_postProcessRequest_result_completion_) & 1) == 0)
    {
      swift_retain();
      swift_retain();
      specialized LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( a1,  a2,  a3 - 1,  a4,  a5,  a6,  a7);
      swift_release();
      swift_unknownObjectRelease();
      swift_release_n();
      swift_release_n();
LABEL_12:
      swift_release();
      return (void *)swift_release();
    }

    uint64_t v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = v19;
    void v20[3] = a1;
    v20[4] = a3;
    v20[5] = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:);
    v20[6] = v15;
    aBlock[4] = partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed LACDTOLocationState) -> ();
    aBlock[3] = &block_descriptor_23;
    uint64_t v21 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    objc_msgSend(v17, sel_postProcessRequest_result_completion_, a1, a2, v21);
    _Block_release(v21);
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease_n();
    swift_release();
    swift_release();
LABEL_11:
    swift_release();
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for LACEvaluationRequestCompoundProcessor()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACEvaluationRequestCompoundProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACEvaluationRequestCompoundProcessor.__allocating_init(processors:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_189280594()
{
  return swift_deallocObject();
}

uint64_t _sSo19LACEvaluationResultCIeyBy_ABIegg_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1892805C8()
{
  return objectdestroy_12Tm();
}

void partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.processRequest(_:subProcessorIndex:completion:)( void *a1)
{
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_1892805F4()
{
  return objectdestroy_12Tm();
}

void partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:completion:)( uint64_t a1)
{
}

uint64_t objectdestroy_19Tm_0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in LACEvaluationRequestCompoundProcessor.postProcessRequest(_:result:subProcessorIndex:completion:)( uint64_t a1)
{
}

uint64_t sub_189280658()
{
  return objectdestroy_12Tm();
}

uint64_t objectdestroy_12Tm()
{
  return swift_deallocObject();
}

Swift::Bool __swiftcall LACMechanismTree.isSatisfiable(withValue:)(Swift::Int withValue)
{
  id v3 = objc_msgSend(v1, sel_children);
  type metadata accessor for LACMechanismTree();
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  swift_bridgeObjectRelease();
  if (v5)
  {
    unsigned __int8 v6 = objc_msgSend(v1, sel_isAnd);
    id v7 = objc_msgSend(v1, sel_children);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v9 = v1;
    char v10 = specialized Sequence.reduce<A>(_:_:)(v6, v8, v9, withValue);
    swift_bridgeObjectRelease();
  }

  else
  {
    char v10 = objc_msgSend(v1, sel_value) == (id)withValue;
  }

  return v10 & 1;
}

unint64_t type metadata accessor for LACMechanismTree()
{
  unint64_t result = lazy cache variable for type metadata for LACMechanismTree;
  if (!lazy cache variable for type metadata for LACMechanismTree)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LACMechanismTree);
  }

  return result;
}

uint64_t static LACMechanismTree.make(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0LL;
  return static LACMechanismTree.parse(tree:index:)(a1, a2, &v3);
}

uint64_t static LACMechanismTree.parse(tree:index:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = MEMORY[0x18961AFE8];
  uint64_t v66 = 0LL;
  unint64_t v67 = 0xE000000000000000LL;
  unint64_t v68 = MEMORY[0x18961AFE8];
  uint64_t v7 = *a3;
  if (v7 >= String.count.getter())
  {
    LOBYTE(v3) = 0;
LABEL_112:
    swift_bridgeObjectRelease();
    unint64_t v8 = v6 >> 62;
    if (v6 >> 62)
    {
LABEL_121:
      swift_bridgeObjectRetain();
      uint64_t v58 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v58)
      {
LABEL_114:
        if ((v6 & 0xC000000000000001LL) != 0)
        {
          id v59 = (id)MEMORY[0x1895E478C](0LL, v6);
        }

        else
        {
          if (!*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            goto LABEL_125;
          }

          id v59 = *(id *)(v6 + 32);
        }

        uint64_t v58 = v59;
        swift_bridgeObjectRelease();
        if (!v8)
        {
          if (*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10) == 1LL)
          {
LABEL_119:
            swift_bridgeObjectRelease();
            return (uint64_t)v58;
          }

LABEL_126:
          id v61 = objc_allocWithZone((Class)&OBJC_CLASS___LACMechanismTree);
          type metadata accessor for LACMechanismTree();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v63 = objc_msgSend(v61, sel_initWithChildren_isAndNode_, isa, v3 & 1);

          return (uint64_t)v63;
        }

LABEL_125:
        swift_bridgeObjectRetain();
        uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v60 == 1) {
          goto LABEL_119;
        }
        goto LABEL_126;
      }
    }

    else
    {
      uint64_t v58 = *(void **)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (v58) {
        goto LABEL_114;
      }
    }

    swift_bridgeObjectRelease_n();
    return (uint64_t)v58;
  }

  char v64 = 0;
  unint64_t v8 = 0LL;
  while (1)
  {
    String.index(_:offsetBy:)();
    uint64_t v9 = String.subscript.getter();
    BOOL v11 = v9 == 40 && v10 == (void *)0xE100000000000000LL;
    if (v11 || (v12 = v9, unint64_t v13 = v10, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      *uint64_t v3 = v7 + 1;
      uint64_t v14 = (void *)static LACMechanismTree.parse(tree:index:)(a1, a2, v3);
      if (v14)
      {
        id v15 = v14;
        MEMORY[0x1895E4558]();
        if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }

      char v16 = 0;
      goto LABEL_13;
    }

    if (v12 == 124 && v13 == (void *)0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = v66;
      unint64_t v27 = v67;
      uint64_t v29 = HIBYTE(v67) & 0xF;
      if ((v67 & 0x2000000000000000LL) == 0) {
        uint64_t v29 = v66 & 0xFFFFFFFFFFFFLL;
      }
      if (!v29 || (swift_bridgeObjectRetain(), uint64_t v30 = specialized FixedWidthInteger.init(_:)(v28, v27), (v31 & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        id v32 = objc_msgSend(objc_allocWithZone((Class)LACMechanismTree), sel_initWithValue_, v30);
        swift_bridgeObjectRelease();
        if (v32)
        {
          id v33 = v32;
          MEMORY[0x1895E4558]();
          if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }

      char v16 = 0;
      char v64 = 0;
      uint64_t v66 = 0LL;
      unint64_t v67 = 0xE000000000000000LL;
    }

    else
    {
      if (v12 == 38 && v13 == (void *)0xE100000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v66;
        unint64_t v40 = v67;
        uint64_t v42 = HIBYTE(v67) & 0xF;
        if ((v67 & 0x2000000000000000LL) == 0) {
          uint64_t v42 = v66 & 0xFFFFFFFFFFFFLL;
        }
        if (!v42
          || (swift_bridgeObjectRetain(), uint64_t v43 = specialized FixedWidthInteger.init(_:)(v41, v40), (v44 & 1) != 0))
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          id v45 = objc_msgSend(objc_allocWithZone((Class)LACMechanismTree), sel_initWithValue_, v43);
          swift_bridgeObjectRelease();
          if (v45)
          {
            id v46 = v45;
            MEMORY[0x1895E4558]();
            if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }

        char v16 = 0;
        uint64_t v66 = 0LL;
        unint64_t v67 = 0xE000000000000000LL;
        *uint64_t v3 = v7 + 1;
        char v64 = 1;
        goto LABEL_13;
      }

      v55._countAndFlagsBits = v12;
      v55._object = v13;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      char v16 = 0;
    }

    *uint64_t v3 = v7 + 1;
LABEL_13:
    uint64_t v7 = *v3;
    uint64_t v17 = String.count.getter();
    if ((v16 & 1) != 0 || v7 >= v17)
    {
      unint64_t v6 = v68;
      LOBYTE(v3) = v64;
      goto LABEL_112;
    }
  }

  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = v66;
  unint64_t v6 = v67;
  uint64_t v20 = HIBYTE(v67) & 0xF;
  uint64_t v21 = v66 & 0xFFFFFFFFFFFFLL;
  if ((v67 & 0x2000000000000000LL) != 0) {
    uint64_t v22 = HIBYTE(v67) & 0xF;
  }
  else {
    uint64_t v22 = v66 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22) {
    goto LABEL_105;
  }
  if ((v67 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v19, v6, 10LL);
    char v57 = v56;
    swift_bridgeObjectRelease();
    if ((v57 & 1) != 0) {
      goto LABEL_105;
    }
    goto LABEL_72;
  }

  if ((v67 & 0x2000000000000000LL) == 0)
  {
    if ((v66 & 0x1000000000000000LL) != 0) {
      uint64_t v23 = (unsigned __int8 *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v23 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    id v24 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v23, v21, 10LL);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = (uint64_t)v24;
      goto LABEL_72;
    }

LABEL_105:
    swift_bridgeObjectRelease();
LABEL_106:
    uint64_t v66 = 0LL;
    unint64_t v67 = 0xE000000000000000LL;
    if (__OFADD__(*v3, 1LL))
    {
      __break(1u);
      goto LABEL_121;
    }

    ++*v3;
    char v16 = 1;
    goto LABEL_13;
  }

  v65[0] = v66;
  v65[1] = v67 & 0xFFFFFFFFFFFFFFLL;
  if (v66 == 43)
  {
    if (!v20) {
      goto LABEL_129;
    }
    if (v20 == 1) {
      goto LABEL_109;
    }
    if ((BYTE1(v66) - 48) <= 9u)
    {
      uint64_t v26 = (BYTE1(v66) - 48);
      if (v20 == 2) {
        goto LABEL_70;
      }
      if ((BYTE2(v66) - 48) <= 9u)
      {
        uint64_t v26 = 10LL * (BYTE1(v66) - 48) + (BYTE2(v66) - 48);
        uint64_t v34 = v20 - 3;
        if (v20 != 3)
        {
          uint64_t v35 = (unsigned __int8 *)v65 + 3;
          while (1)
          {
            unsigned int v36 = *v35 - 48;
            if (v36 > 9) {
              goto LABEL_65;
            }
            uint64_t v37 = 10 * v26;
            uint64_t v26 = v37 + v36;
            LOBYTE(v20) = 0;
            ++v35;
            if (!--v34) {
              goto LABEL_71;
            }
          }
        }

        goto LABEL_70;
      }
    }

LABEL_65:
    uint64_t v26 = 0LL;
    LOBYTE(v20) = 1;
    goto LABEL_71;
  }

  if (v66 != 45)
  {
    uint64_t v26 = (v66 - 48);
    if (v20 == 1)
    {
LABEL_70:
      LOBYTE(v20) = 0;
      goto LABEL_71;
    }

    if ((BYTE1(v66) - 48) <= 9u)
    {
      uint64_t v26 = 10LL * (v66 - 48) + (BYTE1(v66) - 48);
      uint64_t v47 = v20 - 2;
      if (v20 != 2)
      {
        uint64_t v48 = (unsigned __int8 *)v65 + 2;
        while (1)
        {
          unsigned int v49 = *v48 - 48;
          if (v49 > 9) {
            goto LABEL_65;
          }
          uint64_t v50 = 10 * v26;
          uint64_t v26 = v50 + v49;
          LOBYTE(v20) = 0;
          ++v48;
          if (!--v47) {
            goto LABEL_71;
          }
        }
      }

      goto LABEL_70;
    }

    goto LABEL_65;
  }

  if (v20)
  {
    if (v20 != 1)
    {
      if (v20 == 2)
      {
        LOBYTE(v20) = 0;
        uint64_t v26 = -(uint64_t)(BYTE1(v66) - 48);
        goto LABEL_71;
      }

      uint64_t v26 = -10LL * (BYTE1(v66) - 48) - (BYTE2(v66) - 48);
      uint64_t v51 = v20 - 3;
      if (v20 != 3)
      {
        id v52 = (unsigned __int8 *)v65 + 3;
        while (1)
        {
          unsigned int v53 = *v52 - 48;
          if (v53 > 9) {
            goto LABEL_65;
          }
          uint64_t v54 = 10 * v26;
          uint64_t v26 = v54 - v53;
          LOBYTE(v20) = 0;
          ++v52;
          if (!--v51) {
            goto LABEL_71;
          }
        }
      }

      goto LABEL_70;
    }

LABEL_109:
    uint64_t v26 = 0LL;
LABEL_71:
    if ((v20 & 1) != 0) {
      goto LABEL_105;
    }
LABEL_72:
    id v38 = objc_msgSend(objc_allocWithZone((Class)LACMechanismTree), sel_initWithValue_, v26);
    swift_bridgeObjectRelease();
    if (v38)
    {
      id v39 = v38;
      MEMORY[0x1895E4558]();
      if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t v6 = (unint64_t)&v68;
      specialized Array._endMutation()();
    }

    goto LABEL_106;
  }

  __break(1u);
LABEL_129:
  __break(1u);
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        unint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_37;
    }

    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        id v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          uint64_t v7 = v17 + v16;
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              BOOL v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                uint64_t v7 = v13 - v12;
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }

LABEL_34:
          uint64_t v7 = 0LL;
          char v9 = 1;
          goto LABEL_37;
        }

        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          uint64_t v7 = v21 + v20;
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

  if (v39) {
    Util_SafeDeallocParameters(v39, v38);
  }
  return v10;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x1895E4504](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }

  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)( unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0LL);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)( (unint64_t)v14,  (uint64_t)(v11 + 4),  v10,  a1,  a2,  a3,  a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }

    else
    {
      unsigned int v11 = (void *)MEMORY[0x18961AFE8];
    }

    uint64_t v13 = MEMORY[0x1895E44B0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
LABEL_12:
      }
        JUMPOUT(0x1895E44B0LL);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1895E44B0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }

unint64_t specialized Collection.count.getter( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v_Block_object_dispose(va, 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }

  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t specialized Sequence.reduce<A>(_:_:)(unsigned __int8 a1, unint64_t a2, void *a3, uint64_t a4)
{
  if (a2 >> 62) {
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    uint64_t v8 = 4LL;
    uint64_t v9 = 0LL;
    if ((a2 & 0xC000000000000001LL) != 0)
    {
LABEL_4:
      id v10 = (id)MEMORY[0x1895E478C](v9, a2);
      goto LABEL_6;
    }

    while (1)
    {
      id v10 = *(id *)(a2 + 8 * v8);
LABEL_6:
      uint64_t v11 = v10;
      BOOL v12 = __OFADD__(v9, 1LL);
      uint64_t v13 = v9 + 1;
      if (v12) {
        break;
      }
      if (objc_msgSend(a3, sel_isAnd))
      {
        if ((a1 & 1) != 0) {
          goto LABEL_12;
        }

        a1 = 0;
      }

      else
      {
        if ((a1 & 1) == 0)
        {
LABEL_12:
          a1 = objc_msgSend(v11, sel_isSatisfiableWithValue_, a4);

          goto LABEL_13;
        }

        a1 = 1;
      }

id static LACPreboardErrorBuilder.variableSetError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(1LL, a1, a2);
}

id static LACPreboardErrorBuilder.genericError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(2LL, a1, a2);
}

id static LACPreboardErrorBuilder.notSupportedError()()
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)( 2LL,  0xD000000000000015LL,  0x80000001892BBDE0LL);
}

id static LACPreboardErrorBuilder.profileInstallError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(3LL, a1, a2);
}

id static LACPreboardErrorBuilder.passcodeVerificationError(with:)(uint64_t a1, unint64_t a2)
{
  return specialized static LACPreboardErrorBuilder.error(code:message:)(0LL, a1, a2);
}

id @objc static LACPreboardErrorBuilder.passcodeVerificationError(with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }

  else
  {
    unint64_t v6 = 0LL;
  }

  id v7 = specialized static LACPreboardErrorBuilder.error(code:message:)(*a4, a3, v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)_convertErrorToNSError(_:)();

  return v8;
}

id static LACPreboardErrorBuilder.genericError(with:)(unint64_t a1)
{
  return specialized static LACPreboardErrorBuilder.error(code:underlyingError:)(2LL, a1);
}

id LACPreboardErrorBuilder.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LACPreboardErrorBuilder.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id LACPreboardErrorBuilder.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized static LACPreboardErrorBuilder.error(code:message:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = xmmword_1892B4FF0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v7;
    *(void *)(inited + 72) = MEMORY[0x189617FA8];
    *(void *)(inited + 4_Block_object_dispose(va, 8) = a2;
    *(void *)(inited + 56) = v3;
    swift_bridgeObjectRetain();
    unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  }

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)MEMORY[0x1895E445C](v8, v10);
  swift_bridgeObjectRelease();
  if (v3)
  {
    v12.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v12.super.Class isa = 0LL;
  }

  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x189607870]), sel_initWithDomain_code_userInfo_, v11, a1, v12.super.isa);
  swift_bridgeObjectRelease();

  return v13;
}

BOOL specialized static LACPreboardErrorBuilder.hasCode(_:code:)(uint64_t a1, id a2)
{
  unint64_t v3 = (void *)_convertErrorToNSError(_:)();
  id v4 = objc_msgSend(v3, sel_domain);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {

      return 0LL;
    }
  }

  id v12 = objc_msgSend(v3, sel_code);

  return v12 == a2;
}

id specialized static LACPreboardErrorBuilder.error(code:underlyingError:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = xmmword_1892B4FF0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v5;
    swift_getErrorValue();
    *(void *)(inited + 72) = v14;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v14 - 8) + 16LL))(boxed_opaque_existential_1);
    unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  }

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  char v10 = (void *)MEMORY[0x1895E445C](v7, v9);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v11.super.Class isa = 0LL;
  }

  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x189607870]), sel_initWithDomain_code_userInfo_, v10, a1, v11.super.isa);
  swift_bridgeObjectRelease();

  return v12;
}

uint64_t type metadata accessor for LACPreboardErrorBuilder()
{
  return objc_opt_self();
}

id static LACEvaluationRequestProcessorFactory.makeProcessor(withSubprocessors:)(uint64_t a1)
{
  unint64_t v2 = (objc_class *)type metadata accessor for LACEvaluationRequestCompoundProcessor();
  unint64_t v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_nextProcessor] = 0LL;
  id v4 = &v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_currentProcessorIndex];
  *(void *)id v4 = 0LL;
  v4[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_involvedProcessorIndices] = MEMORY[0x18961AFE8];
  *(void *)&v3[OBJC_IVAR____TtC23LocalAuthenticationCore37LACEvaluationRequestCompoundProcessor_processors] = a1;
  v6.receiver = v3;
  v6.super_class = v2;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t protocol witness for LACPreboardLaunching.launchPreboard() in conformance LACPreboardLauncher()
{
  unint64_t v2 = *v0;
  v1[2] = v1;
  v1[3] = protocol witness for LACPreboardLaunching.launchPreboard() in conformance LACPreboardLauncher;
  uint64_t v3 = swift_continuation_init();
  v1[10] = MEMORY[0x1895F87A8];
  id v4 = v1 + 10;
  v4[1] = 0x40000000LL;
  v4[2] = @objc completion handler block implementation for <A><A1>@escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v4[3] = &block_descriptor_12;
  v4[4] = v3;
  objc_msgSend(v2, sel_launchPreboardWithCompletion_, v4);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v1 = *v0;
  if (*(void *)(v1 + 48)) {
    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t LACPreboardPasscodeVerifier.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LACPreboardPasscodeVerifier.init()()
{
  return v0;
}

void LACPreboardPasscodeVerifier.verifyPasscode(_:in:)()
{
}

uint64_t LACPreboardPasscodeVerifier.deinit()
{
  return v0;
}

uint64_t LACPreboardPasscodeVerifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for LACPreboardPasscodeVerifying.verifyPasscode(_:in:) in conformance LACPreboardPasscodeVerifier()
{
}

void specialized LACPreboardPasscodeVerifier.verifyPasscode(_:in:)()
{
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v0 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  unint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v4 = Data._bridgeToObjectiveC()().super.isa;
  Class v5 = Data._bridgeToObjectiveC()().super.isa;
  int v6 = MKBVerifyPasswordWithContext();

  if (v6)
  {
    id v7 = LACLogPreboard();
    Logger.init(_:)();
    uint64_t v8 = (os_log_s *)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      char v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v10 = 67109120;
      LODWORD(v14) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_189219000, v8, v9, "Passcode verification failed with code: %d", v10, 8u);
      MEMORY[0x1895E56D4](v10, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v13);
    uint64_t v14 = 0LL;
    unint64_t v15 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease();
    uint64_t v14 = 0xD00000000000001FLL;
    unint64_t v15 = 0x80000001892BC330LL;
    int v16 = v6;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    specialized static LACPreboardErrorBuilder.error(code:message:)(0LL, v14, v15);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

uint64_t dispatch thunk of LACPreboardPasscodeVerifying.verifyPasscode(_:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for LACPreboardPasscodeVerifier()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardPasscodeVerifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardPasscodeVerifier.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t static LACLocalization.faceID()()
{
  v1._countAndFlagsBits = 0LL;
  v1._object = (void *)0xE000000000000000LL;
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)( 0x44495F45434146LL,  (void *)0xE700000000000000LL,  v1);
}

uint64_t static LACLocalization.touchID()()
{
  v1._countAndFlagsBits = 0LL;
  v1._object = (void *)0xE000000000000000LL;
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)( 0x44495F4843554F54LL,  (void *)0xE800000000000000LL,  v1);
}

uint64_t static LACLocalization.opticID()()
{
  v1._countAndFlagsBits = 0LL;
  v1._object = (void *)0xE000000000000000LL;
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)( 0x44495F434954504FLL,  (void *)0xE800000000000000LL,  v1);
}

id @objc static LACLocalization.faceID()(int a1, int a2, uint64_t a3, void *a4)
{
  v9._countAndFlagsBits = 0LL;
  v9._object = (void *)0xE000000000000000LL;
  uint64_t v6 = specialized static LACLocalization.localizedString(key:value:tableSuffix:)(a3, a4, v9);
  id v7 = (void *)MEMORY[0x1895E445C](v6);
  swift_bridgeObjectRelease();
  return v7;
}

void one-time initialization function for ratchetTableSuffix()
{
  static LACLocalization.ratchetTableSuffix = 0x74656863746152LL;
  unk_18C78DF10 = 0xE700000000000000LL;
}

uint64_t static LACLocalization.dtoErrorPasscodeNotSet()()
{
  return static LACLocalization.dtoErrorPasscodeNotSet()(0xD00000000000001ALL, (void *)0x80000001892BC350LL);
}

uint64_t static LACLocalization.dtoErrorBiometryNotEnrolled()()
{
  return static LACLocalization.dtoErrorPasscodeNotSet()(0xD00000000000001FLL, (void *)0x80000001892BC370LL);
}

uint64_t static LACLocalization.dtoErrorDeviceTypeNotSupported()()
{
  return static LACLocalization.dtoErrorPasscodeNotSet()(0xD000000000000023LL, (void *)0x80000001892BC390LL);
}

uint64_t static LACLocalization.dtoErrorPasscodeNotSet()(uint64_t a1, void *a2)
{
  if (one-time initialization token for ratchetTableSuffix != -1) {
    swift_once();
  }
  return specialized static LACLocalization.localizedString(key:value:tableSuffix:)( a1,  a2,  (Swift::String)static LACLocalization.ratchetTableSuffix);
}

id @objc static LACLocalization.dtoErrorPasscodeNotSet()(int a1, int a2, uint64_t a3, void *a4)
{
  if (one-time initialization token for ratchetTableSuffix != -1) {
    swift_once();
  }
  uint64_t v6 = specialized static LACLocalization.localizedString(key:value:tableSuffix:)( a3,  a4,  (Swift::String)static LACLocalization.ratchetTableSuffix);
  id v7 = (void *)MEMORY[0x1895E445C](v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t NSBundle.Sentinel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id one-time initialization function for current()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.current = (uint64_t)result;
  return result;
}

uint64_t specialized static LACLocalization.localizedString(key:value:tableSuffix:)( uint64_t a1, void *a2, Swift::String a3)
{
  uint64_t v5 = HIBYTE(a3._object) & 0xF;
  if (v5)
  {
    String.append(_:)(a3);
    uint64_t v6 = 45LL;
    unint64_t v7 = 0xE100000000000000LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  Swift::String v9 = (NSBundle *)(id)static NSBundle.current;
  v15._object = (void *)0xE000000000000000LL;
  v10._uint64_t countAndFlagsBits = a1;
  v10._object = a2;
  v11.value._uint64_t countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62LL;
  v12._uint64_t countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  v15._uint64_t countAndFlagsBits = 0LL;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, v9, v12, v15)._countAndFlagsBits;
  swift_bridgeObjectRelease();

  return countAndFlagsBits;
}

id specialized static LACLocalization.dtoSecurityDelayEndedText(_:duration:)( uint64_t a1, uint64_t a2, double a3)
{
  if (a3 <= 0.0)
  {
    swift_bridgeObjectRetain();
    return (id)a1;
  }

  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x189607840]), sel_init);
  objc_msgSend(v6, sel_setUnitsStyle_, 3);
  id result = objc_msgSend(v6, sel_stringFromTimeInterval_, a3);
  if (result)
  {
    unint64_t v8 = result;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (one-time initialization token for ratchetTableSuffix != -1) {
      swift_once();
    }
    uint64_t v12 = static LACLocalization.ratchetTableSuffix;
    uint64_t v13 = (void *)unk_18C78DF10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = xmmword_1892B4FE0;
    uint64_t v15 = MEMORY[0x189617FA8];
    *(void *)(v14 + 56) = MEMORY[0x189617FA8];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v14 + 32) = a1;
    *(void *)(v14 + 40) = a2;
    *(void *)(v14 + 96) = v15;
    *(void *)(v14 + 104) = v16;
    *(void *)(v14 + 64) = v16;
    *(void *)(v14 + 72) = v9;
    *(void *)(v14 + 80) = v11;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v12;
    v17._object = v13;
    specialized static LACLocalization.localizedString(key:value:tableSuffix:)( 0xD00000000000001DLL,  (void *)0x80000001892BC430LL,  v17);
    swift_bridgeObjectRetain();
    a1 = String.init(format:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)a1;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for NSBundle.Sentinel()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = MEMORY[0x1895E5638](MEMORY[0x189607190], MEMORY[0x189617FA8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

unint64_t static LACDTOPendingPolicyEvaluationStore.storeKey.getter()
{
  return 0xD000000000000012LL;
}

uint64_t LACDTOPendingPolicyEvaluationStore.pendingEvaluationsDict.setter(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(void *)((char *)v1
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  *(void *)((char *)v1
            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict) = a1;
  swift_bridgeObjectRetain();
  specialized static Dictionary<>.== infix(_:_:)(v4, a1);
  char v6 = v5;
  uint64_t v7 = swift_bridgeObjectRelease();
  if ((v6 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x18961B398] & *v1) + 0x88LL))(v7);
  uint64_t v10 = *(void *)((char *)v1 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v1;
  v11[3] = v9;
  v11[4] = ObjectType;
  uint64_t v12 = *(void (**)(void *, void *))(*(void *)v10 + 120LL);
  uint64_t v13 = v1;
  v12(&closure #1 in LACDTOPendingPolicyEvaluationStore.persist()partial apply, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

void *LACDTOPendingPolicyEvaluationStore.pendingEvaluations.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  Swift::String v1 = specialized _copyCollectionToContiguousArray<A>(_:)( v0,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
  swift_bridgeObjectRelease();
  return v1;
}

id LACDTOPendingPolicyEvaluationStore.__allocating_init(persistentStore:workQueue:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  char v6 = (char *)objc_allocWithZone(v2);
  uint64_t v7 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup;
  type metadata accessor for SerialTask();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = v6;
  SerialTask.start()();
  *(void *)&v6[v7] = v8;
  uint64_t v12 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict;
  *(void *)&v11[v12] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  *(void *)&v11[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_store] = a1;
  *(void *)&v11[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue] = a2;
  swift_unknownObjectRetain();
  id v13 = a2;

  v16.receiver = v11;
  v16.super_class = v3;
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  swift_unknownObjectRelease();

  return v14;
}

id LACDTOPendingPolicyEvaluationStore.init(persistentStore:workQueue:)(uint64_t a1, void *a2)
{
  id v3 = specialized LACDTOPendingPolicyEvaluationStore.init(persistentStore:workQueue:)(a1, a2);
  swift_unknownObjectRelease();

  return v3;
}

uint64_t LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v4);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = v8;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v6,  (uint64_t)&async function pointer to partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:),  (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[26] = a5;
  v6[27] = a6;
  v6[25] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[28] = v7;
  v6[29] = *(void *)(v7 - 8);
  v6[30] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v6[31] = v8;
  v6[32] = *(void *)(v8 - 8);
  v6[33] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  uint64_t v1 = *(void *)(v0 + 200) + 16LL;
  swift_beginAccess();
  unint64_t v2 = (void *)MEMORY[0x1895E5764](v1);
  *(void *)(v0 + 272) = v2;
  if (v2)
  {
    id v3 = *(int **)((*MEMORY[0x18961B398] & *v2) + 0xA0LL);
    char v6 = (uint64_t (*)(void))((char *)v3 + *v3);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:);
    return v6();
  }

  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v1 = v0[25] + 16LL;
  swift_beginAccess();
  unint64_t v2 = MEMORY[0x1895E5764](v1);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = v0[36];
    uint64_t v5 = v0[33];
    char v6 = v0[30];
    uint64_t v15 = v0[32];
    objc_super v16 = v0[31];
    uint64_t v8 = v0[28];
    uint64_t v7 = v0[29];
    uint64_t v10 = v0[26];
    uint64_t v9 = v0[27];
    uint64_t v11 = objc_retain(*(id *)(v2
                            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue));

    uint64_t v12 = (void *)swift_allocObject();
    void v12[2] = v10;
    uint64_t v12[3] = v9;
    void v12[4] = v4;
    v0[12] = partial apply for closure #1 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:);
    v0[13] = v12;
    v0[8] = MEMORY[0x1895F87A8];
    v0[9] = 1107296256LL;
    v0[10] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[11] = &block_descriptor_62;
    id v13 = _Block_copy(v0 + 8);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[24] = MEMORY[0x18961AFE8];
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1895E46B4](0LL, v5, v6, v13);
    _Block_release(v13);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v16);
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v1 = *(void *)(v0 + 200);

  swift_beginAccess();
  unint64_t v2 = MEMORY[0x1895E5764](v1 + 16);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = *(void **)(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 264);
    char v6 = *(void *)(v0 + 240);
    objc_super v16 = *(void *)(v0 + 256);
    Swift::String v17 = *(void *)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = objc_retain(*(id *)(v2
                            + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue));

    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v9;
    v11[4] = v4;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = partial apply for closure #2 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:);
    *(void *)(v0 + 56) = v11;
    *(void *)(v0 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = MEMORY[0x1895F87A8];
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *(void *)(v0 + 40) = &block_descriptor_13;
    uint64_t v12 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    id v13 = v4;
    static DispatchQoS.unspecified.getter();
    *(void *)(v0 + 184) = MEMORY[0x18961AFE8];
    lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1895E46B4](0LL, v5, v6, v12);
    _Block_release(v12);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v5, v17);
    swift_release();
  }

  else
  {
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 28_Block_object_dispose(va, 8) = a1;
  *(void *)(v3 + 296) = v1;
  swift_task_dealloc();
  if (!v1) {

  }
  return swift_task_switch();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> ()( objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t LACDTOPendingPolicyEvaluationStore.load()()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return swift_task_switch();
}

{
  void *v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t ObjectType;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v1 = LACLogDTOEvaluation();
  Logger.init(_:)();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_189219000, v2, v3, "Loading pending evaluations", v4, 2u);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);
  }

  uint64_t v5 = v0[8];
  uint64_t v6 = v0[5];
  id v7 = v0[6];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v0[9] = v8;
  v8(v5, v6);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[10] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LACDTOMutablePendingPolicyEvaluation]);
  uint64_t v12 = lazy protocol witness table accessor for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A]( &lazy protocol witness table cache variable for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A],  &lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation and conformance LACDTOMutablePendingPolicyEvaluation,  (uint64_t)&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation,  MEMORY[0x189618478]);
  *uint64_t v10 = v0;
  v10[1] = LACDTOPendingPolicyEvaluationStore.load();
  return LACPersistentStore.object<A>(forKey:)( (uint64_t)(v0 + 2),  0xD000000000000012LL,  0x80000001892BA5C0LL,  ObjectType,  v11,  v12);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  os_log_s *v3;
  os_log_type_t v4;
  BOOL v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = LACLogDTOEvaluation();
    Logger.init(_:)();
    swift_bridgeObjectRetain_n();
    uint64_t v3 = (os_log_s *)Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 72);
    id v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 40);
    if (v5)
    {
      char v19 = *(void *)(v0 + 56);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      unint64_t v18 = v8;
      uint64_t v10 = swift_slowAlloc();
      char v20 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v11 = type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
      uint64_t v12 = swift_bridgeObjectRetain();
      id v13 = MEMORY[0x1895E457C](v12, v11);
      Swift::String v17 = v6;
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_189219000, v3, v4, "Loaded pending evaluations %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1895E56D4](v10, -1LL, -1LL);
      MEMORY[0x1895E56D4](v9, -1LL, -1LL);

      v17(v19, v18);
    }

    else
    {
      swift_bridgeObjectRelease_n();

      v6(v7, v8);
    }
  }

  else
  {
    uint64_t v1 = MEMORY[0x18961AFE8];
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load();
  return LACDTOPendingPolicyEvaluationStore.load()();
}

uint64_t @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  if (v0)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();

    Class isa = 0LL;
    uint64_t v8 = (void *)v6;
  }

  else
  {
    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0LL;
    uint64_t v8 = isa;
  }

  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

Swift::Void __swiftcall LACDTOPendingPolicyEvaluationStore.persistEvaluations()()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x88LL))();
  uint64_t v3 = *(void *)((char *)v0 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v0;
  v4[3] = v2;
  v4[4] = ObjectType;
  uint64_t v5 = *(void (**)(void *, void *))(*(void *)v3 + 120LL);
  uint64_t v6 = v0;
  v5(&async function pointer to partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.persist(), v4);
  swift_release();
}

uint64_t LACDTOPendingPolicyEvaluationStore.addPendingEvaluation(_:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier];
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC23LocalAuthenticationCore36LACDTOMutablePendingPolicyEvaluation_identifier + 8];
  uint64_t v6 = *(void *)(v2
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  swift_bridgeObjectRetain();
  id v7 = a1;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, v4, v5, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return LACDTOPendingPolicyEvaluationStore.pendingEvaluationsDict.setter(v6);
}

void *LACDTOPendingPolicyEvaluationStore.pendingEvaluation(withIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  if (!*(void *)(v3 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = *(void **)(*(void *)(v3 + 56) + 8 * v6);
    id v9 = v8;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Void __swiftcall LACDTOPendingPolicyEvaluationStore.removePendingEvaluation(with:)(Swift::String with)
{
  object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  uint64_t v4 = *(void *)(v1
                 + OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict);
  swift_bridgeObjectRetain();

  LACDTOPendingPolicyEvaluationStore.pendingEvaluationsDict.setter(v4);
}

id LACDTOPendingPolicyEvaluationStore.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LACDTOPendingPolicyEvaluationStore.init()()
{
}

id LACDTOPendingPolicyEvaluationStore.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LACDTOPendingPolicyEvaluationStore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.persist()(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.persist()()
{
  uint64_t v1 = v0[6];
  uint64_t ObjectType = swift_getObjectType();
  v0[2] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LACDTOMutablePendingPolicyEvaluation]);
  uint64_t v5 = lazy protocol witness table accessor for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A]( &lazy protocol witness table cache variable for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A],  &lazy protocol witness table cache variable for type LACDTOMutablePendingPolicyEvaluation and conformance LACDTOMutablePendingPolicyEvaluation,  (uint64_t)&protocol conformance descriptor for LACDTOMutablePendingPolicyEvaluation,  MEMORY[0x189618448]);
  *uint64_t v3 = v0;
  v3[1] = closure #1 in LACDTOPendingPolicyEvaluationStore.persist();
  return LACPersistentStore.set<A>(object:for:)( (uint64_t)(v0 + 2),  0xD000000000000012LL,  0x80000001892BA5C0LL,  ObjectType,  v4,  v5);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v1 = LACLogDTOEvaluation();
  Logger.init(_:)();
  swift_bridgeObjectRetain_n();
  objc_super v2 = (os_log_s *)Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v15 = *(void *)(v0 + 64);
    objc_super v16 = *(void *)(v0 + 56);
    Swift::String v17 = *(void *)(v0 + 80);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    unint64_t v18 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    unint64_t v6 = type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    char v7 = swift_bridgeObjectRetain();
    uint64_t v8 = MEMORY[0x1895E457C](v7, v6);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_189219000, v2, v3, "Persisted pending evaluations %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v5, -1LL, -1LL);
    MEMORY[0x1895E56D4](v4, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 56);
    id v13 = *(void *)(v0 + 64);
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  os_log_s *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v1 = *(void **)(v0 + 96);
  objc_super v2 = LACLogDTOEvaluation();
  Logger.init(_:)();
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = (os_log_s *)Logger.logObject.getter();
  unint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    char v7 = *(void **)(v0 + 96);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543362;
    uint64_t v10 = v7;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v11;

    _os_log_impl(&dword_189219000, v5, v6, "Failed to persist pending evaluations with error %{public}@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1895E56D4](v9, -1LL, -1LL);
    MEMORY[0x1895E56D4](v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v12 = *(void **)(v0 + 96);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 64) + 8LL))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v12 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }

LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    unint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {

      return;
    }

    type metadata accessor for LACDTOMutablePendingPolicyEvaluation();
    id v23 = *(id *)(*(void *)(a2 + 56) + 8 * v20);
    char v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0) {
      return;
    }
  }

  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  int64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
  *int64_t v4 = v3;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v5;
  void *v5 = v4;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }

  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( void (*a1)(void))
{
  return _swift_stdlib_bridgeErrorToNSError();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    void *v8 = v6;
    *a2 = v8 + 1;
  }

  else
  {
  }

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)( a1,  (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)( a1,  &demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(a2);
    uint64_t v9 = v14;
  }

  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }

    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1895F8858](v4);
  char v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v34 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v35 + 72);
      id v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v33(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v22 + v16 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v23 = *(void *)(a2 + 56);
            char v24 = (void *)(v23 + 8 * a1);
            uint64_t v25 = (void *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *char v24 = *v25;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1LL << a1) - 1;
  }

  uint64_t *v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            __int128 v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        __int128 v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            void *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            uint64_t *v15 = *v16;
            int64_t v3 = v6;
          }
        }

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessAuthenticatorPendingRequest>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  objc_super v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  unint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  __int128 v9 = 0LL;
  *(void *)(v4 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = *(void *)(v2 + 16);
  Swift::Int v10 = 1LL << *(_BYTE *)(v2 + 32);
  unint64_t v11 = -1LL;
  if (v10 < 64) {
    unint64_t v11 = ~(-1LL << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    BOOL v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      __int128 v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, LACOnenessControllerPendingRequest>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  objc_super v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  unint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  __int128 v9 = 0LL;
  *(void *)(v4 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = *(void *)(v2 + 16);
  Swift::Int v10 = 1LL << *(_BYTE *)(v2 + 32);
  unint64_t v11 = -1LL;
  if (v10 < 64) {
    unint64_t v11 = ~(-1LL << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    BOOL v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      __int128 v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

LABEL_25:
    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v20;
    unint64_t result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  BOOL v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    __int128 v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    __int128 v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    int64_t v16 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    unint64_t result = (void *)swift_retain();
  }

  char v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    uint64_t v13 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }

  char v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    __int128 v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    __int128 v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = v20;
  }

  char v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    __int128 v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    __int128 v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  unint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v26 = v9;
    return result;
  }

  unint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0LL;
  *(void *)(v9 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, LACDTOMutablePendingPolicyEvaluation>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)( a1,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x18961AFE8];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      int64_t v9 = (void *)MEMORY[0x18961AFE8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LACEvaluationRequestProcessor);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      int64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)( uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  uint64_t v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : [Int : Any]].Iterator._Variant();
  if (v8 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v5;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    void *v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)( void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    void *v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

id specialized LACDTOPendingPolicyEvaluationStore.init(persistentStore:workQueue:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_taskGroup;
  type metadata accessor for SerialTask();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v7 + OBJC_IVAR____TtC23LocalAuthenticationCore10SerialTask_continuation;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<()>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = v3;
  SerialTask.start()();
  *(void *)&v3[v6] = v7;
  uint64_t v11 = OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_pendingEvaluationsDict;
  *(void *)&v10[v11] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
  *(void *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_store] = a1;
  *(void *)&v10[OBJC_IVAR____TtC23LocalAuthenticationCore34LACDTOPendingPolicyEvaluationStore_workQueue] = a2;
  swift_unknownObjectRetain();
  id v12 = a2;

  v14.receiver = v10;
  v14.super_class = (Class)type metadata accessor for LACDTOPendingPolicyEvaluationStore();
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t sub_189286B90()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in LACDTOPendingPolicyEvaluationStore.persist()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return closure #1 in LACDTOPendingPolicyEvaluationStore.persist()(v2, v3);
}

uint64_t type metadata accessor for LACDTOPendingPolicyEvaluationStore()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACDTOPendingPolicyEvaluationStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.pendingEvaluations.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x88LL))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.__allocating_init(persistentStore:workQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0x98LL))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.load()()
{
  uint64_t v2 = *(int **)((*MEMORY[0x18961B398] & *v0) + 0xA0LL);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = dispatch thunk of LACDTOPendingPolicyEvaluationStore.load();
  return v5();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.load()(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.persistEvaluations()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xA8LL))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.addPendingEvaluation(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xB0LL))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.pendingEvaluation(withIdentifier:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xB8LL))();
}

uint64_t dispatch thunk of LACDTOPendingPolicyEvaluationStore.removePendingEvaluation(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x18961B398] & *v0) + 0xC0LL))();
}

uint64_t sub_189286E34()
{
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = dispatch thunk of LACUserDefaultsPersistentStore.setData(_:forKey:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()
                                                       + async function pointer to @objc closure #1 in LACDTOPendingPolicyEvaluationStore.load()))( v2,  v3);
}

uint64_t sub_189286ECC()
{
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v5;
  void *v5 = v2;
  v5[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))( a1,  v4);
}

uint64_t sub_189286F60()
{
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> ()( objc_class *a1, uint64_t a2)
{
}

uint64_t objectdestroy_2Tm_0()
{
  return swift_deallocObject();
}

uint64_t closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)partial apply( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = dispatch thunk of LACUserDefaultsPersistentStore.removeObject(forKey:);
  return closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t objectdestroy_8Tm()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type [LACDTOMutablePendingPolicyEvaluation] and conformance <A> [A]( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LACDTOMutablePendingPolicyEvaluation]);
    uint64_t v10 = lazy protocol witness table accessor for type LACPolicy and conformance LACPolicy( a2,  (uint64_t (*)(uint64_t))type metadata accessor for LACDTOMutablePendingPolicyEvaluation,  a3);
    uint64_t result = MEMORY[0x1895E5638](a4, v9, &v10);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1892870F8()
{
  return objectdestroy_54Tm((void (*)(void))MEMORY[0x18961B1E8]);
}

uint64_t partial apply for closure #2 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(0LL, *(void *)(v0 + 32));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_189287148()
{
  return objectdestroy_54Tm((void (*)(void))MEMORY[0x18961B108]);
}

uint64_t objectdestroy_54Tm(void (*a1)(void))
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LACDTOPendingPolicyEvaluationStore.loadPersistedEvaluations(completion:)()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0LL);
}

uint64_t LACPreboardACMContextProviderFactory.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t LACPreboardACMContextProviderFactory.init()()
{
  return v0;
}

double LACPreboardACMContextProviderFactory.makeProvider()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LACACMContextProvider();
  uint64_t v3 = swift_allocObject();
  id v4 = objc_msgSend(objc_allocWithZone((Class)LACACMHelper), sel_initAndCreateContext);
  if (v4)
  {
    *(void *)(v3 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v4;
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = &protocol witness table for LACACMContextProvider;
    *(void *)a1 = v3;
  }

  else
  {
    swift_deallocPartialClassInstance();
    *(void *)(a1 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 0u;
  }

  return result;
}

uint64_t LACPreboardACMContextProviderFactory.deinit()
{
  return v0;
}

uint64_t LACPreboardACMContextProviderFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LACPreboardACMContextProviderFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for LACPreboardACMContextProviderFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LACPreboardACMContextProviderFactory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of LACPreboardACMContextProviderFactory.makeProvider()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

uint64_t acm_explicit_bzero(void *a1, rsize_t __n)
{
  return memset_s(a1, __n, 0, __n);
}

uint64_t acm_get_mem()
{
  return _allocatedMem_0;
}

void *acm_mem_alloc_data(size_t __size)
{
  double result = calloc(1uLL, __size);
  if (result) {
    _allocatedMem_2 += __size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = _allocatedMem_2 - __n;
    if (_allocatedMem_2 < __n) {
      uint64_t v4 = 0LL;
    }
    _allocatedMem_2 = v4;
  }

void *acm_mem_alloc(size_t __size)
{
  double result = calloc(1uLL, __size);
  if (result) {
    _allocatedMem_3 += __size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = _allocatedMem_3 - __n;
    if (_allocatedMem_3 < __n) {
      uint64_t v4 = 0LL;
    }
    _allocatedMem_3 = v4;
  }

const char *acm_mem_alloc_info( const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    _allocatedMem_0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = "NULL";
    }
    if (a4) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf( "%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n",  "ACM",  "acm_mem_alloc_info",  v7,  a2,  a3,  _allocatedMem_0,  0,  _allocatedMem_2,  _allocatedMem_3,  v8,  a5,  v6);
  }

  return result;
}

const char *acm_mem_free_info( const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = _allocatedMem_0 - a3;
    if (_allocatedMem_0 < a3) {
      uint64_t v6 = 0LL;
    }
    _allocatedMem_0 = v6;
  }

  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v7 = "NULL";
    if (result) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = "NULL";
    }
    if (a4) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = "NULL";
    }
    if (a6) {
      uint64_t v7 = a6;
    }
    return (const char *)printf( "%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n",  "ACM",  "acm_mem_free_info",  v8,  a2,  a3,  _allocatedMem_0,  0,  _allocatedMem_2,  _allocatedMem_3,  v9,  a5,  v7);
  }

  return result;
}

uint64_t GetSerializedVerifyPolicySize( uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, void *a7)
{
  unsigned int v14 = 0;
  uint64_t result = 4294967293LL;
  if (a1 && __s1 && a7)
  {
    size_t v12 = strnlen(__s1, 0x81uLL);
    if (v12 > 0x80)
    {
      return 4294967293LL;
    }

    else
    {
      size_t v13 = v12;
      uint64_t result = getLengthOfParameters(a5, a6, &v14);
      if (!(_DWORD)result) {
        *a7 = v13 + v14 + 26;
      }
    }
  }

  return result;
}

uint64_t getLengthOfParameters(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  if (a3)
  {
    *a3 = 0;
    int v6 = 0;
    if (a2)
    {
      uint64_t v7 = a2;
      while (1)
      {
        uint64_t v8 = checkParameter(a1);
        if ((_DWORD)v8) {
          break;
        }
        int v9 = v6 + 8;
        int v10 = a1[4];
        v6 += v10 + 8;
        if (__CFADD__(v10, v9)) {
          goto LABEL_10;
        }
        a1 += 6;
        if (!--v7) {
          goto LABEL_9;
        }
      }

      uint64_t v11 = v8;
      unsigned int v12 = 70;
    }

    else
    {
LABEL_9:
      uint64_t v11 = 0LL;
      *a3 = v6;
      unsigned int v12 = 10;
    }
  }

  else
  {
LABEL_10:
    unsigned int v12 = 70;
    uint64_t v11 = 4294967293LL;
  }

  return v11;
}

uint64_t SerializeVerifyPolicy( _OWORD *a1, char *__s1, char a3, uint64_t a4, _DWORD *a5, unsigned int a6, _OWORD *a7, size_t *a8)
{
  unint64_t v21 = 0LL;
  uint64_t result = 4294967293LL;
  if (a1)
  {
    if (__s1)
    {
      if (a8)
      {
        if (a7)
        {
          if (a6 <= 0xA && (a5 != 0LL) == (a6 != 0))
          {
            int v15 = a4;
            uint64_t result = GetSerializedVerifyPolicySize((uint64_t)a1, __s1, 0LL, a4, a5, a6, &v21);
            if (!(_DWORD)result)
            {
              if (*a8 < v21) {
                return 4294967293LL;
              }
              *a7 = *a1;
              size_t v17 = strnlen(__s1, 0x81uLL);
              if (v17 > 0x80)
              {
                return 4294967293LL;
              }

              else
              {
                size_t v18 = v17;
                memcpy(a7 + 1, __s1, v17 + 1);
                int64_t v19 = (char *)a7 + v18;
                v19[17] = a3;
                *(_DWORD *)(v19 + 1_Block_object_dispose(va, 8) = v15;
                size_t v20 = v18 + 22;
                uint64_t result = serializeParameters((uint64_t)a5, a6, (uint64_t)a7, (uint64_t *)&v20);
                if (!(_DWORD)result) {
                  *a8 = v20;
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t serializeParameters(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  LODWORD(v6) = a2;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293LL;
  if (a3 && a4)
  {
    uint64_t v10 = *a4;
    *(_DWORD *)(a3 + v10) = v6;
    uint64_t v11 = v10 + 4;
    if ((_DWORD)v6)
    {
      uint64_t v6 = v6;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        size_t __n = *(void *)(a1 + 16);
        uint64_t v12 = checkParameter(__src);
        if ((_DWORD)v12) {
          break;
        }
        size_t v13 = (_DWORD *)(a3 + v11);
        size_t v14 = __n;
        *size_t v13 = __src[0];
        v13[1] = v14;
        v11 += 8LL;
        if ((_DWORD)v14)
        {
          memcpy((void *)(a3 + v11), __src[1], v14);
          v11 += v14;
        }

        a1 += 24LL;
        if (!--v6) {
          goto LABEL_11;
        }
      }

      uint64_t v9 = v12;
      unsigned int v8 = 70;
    }

    else
    {
LABEL_11:
      uint64_t v9 = 0LL;
      *a4 = v11;
      unsigned int v8 = 10;
    }
  }

  return v9;
}

uint64_t DeserializeVerifyPolicy( uint64_t a1, unint64_t a2, _OWORD *a3, void *a4, BOOL *a5, _DWORD *a6, void *a7, _DWORD *a8)
{
  int64_t v28 = 0LL;
  unsigned int v27 = 0;
  uint64_t v8 = 4294967293LL;
  unint64_t v9 = a2 - 16;
  if (a2 >= 0x10 && a1 && a3 && a4 && a5 && a6 && a7 && a8)
  {
    *a3 = *(_OWORD *)a1;
    unint64_t v17 = strnlen((const char *)(a1 + 16), a2 - 16);
    if (v17 > 0x80 || v9 <= v17) {
      return 4294967293LL;
    }
    uint64_t v26 = a4;
    unint64_t v18 = v17 + 1;
    int64_t v19 = acm_mem_alloc_data(v17 + 1);
    acm_mem_alloc_info( "<data>",  v19,  v17 + 1,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  349,  "DeserializeVerifyPolicy");
    if (!v19) {
      return 4294967292LL;
    }
    memcpy(v19, (const void *)(a1 + 16), v17 + 1);
    unint64_t v29 = v17 + 17;
    if (v17 + 17 == a2 || (size_t v20 = a5, v21 = *(_BYTE *)(a1 + v17 + 17) != 0, v29 = v17 + 18, a2 - (v17 + 18) < 4))
    {
      uint64_t v8 = 4294967293LL;
    }

    else
    {
      unint64_t v25 = v17 + 1;
      int64_t v22 = a8;
      int v23 = *(_DWORD *)(a1 + v17 + 18);
      unint64_t v29 = v17 + 22;
      uint64_t v8 = deserializeParameters(a1, a2, &v29, &v28, &v27);
      if (!(_DWORD)v8)
      {
        void *v26 = v19;
        *size_t v20 = v21;
        *a6 = v23;
        *a7 = v28;
        *int64_t v22 = v27;
        return v8;
      }

      unint64_t v18 = v25;
    }

    acm_mem_free_info( "<data>",  v19,  v18,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  378,  "DeserializeVerifyPolicy");
    acm_mem_free_data(v19, v18);
    if (v28) {
      Util_SafeDeallocParameters(v28, v27);
    }
  }

  return v8;
}

uint64_t deserializeParameters(uint64_t a1, unint64_t a2, unint64_t *a3, void *a4, _DWORD *a5)
{
  uint64_t v10 = (unsigned __int8 *)&unk_18C78E000;
  unsigned int v11 = 70;
  uint64_t v12 = 4294967293LL;
  if (!a1 || !a3 || !a4 || !a5) {
    goto LABEL_25;
  }
  unint64_t v13 = *a3;
  if (a2 <= *a3)
  {
    LODWORD(v14) = 0;
LABEL_23:
    unint64_t v16 = 0LL;
LABEL_24:
    uint64_t v12 = 0LL;
    *a4 = v16;
    *a5 = v14;
    unsigned int v11 = 10;
    *a3 = v13;
    goto LABEL_25;
  }

  if (a2 - *a3 < 4 || (uint64_t v14 = *(unsigned int *)(a1 + v13), v14 > 0xA))
  {
    unsigned int v11 = 70;
    uint64_t v12 = 4294967293LL;
    goto LABEL_25;
  }

  v13 += 4LL;
  if (!(_DWORD)v14) {
    goto LABEL_23;
  }
  int v27 = v14;
  uint64_t v15 = 24 * v14;
  unint64_t v16 = (char *)acm_mem_alloc(24 * v14);
  acm_mem_alloc_info( "array of ACMParameter",  v16,  v15,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  194,  "deserializeParameters");
  if (!v16)
  {
    unsigned int v11 = 70;
    uint64_t v12 = 4294967292LL;
    goto LABEL_25;
  }

  int64_t v24 = a4;
  unint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v17 = 0LL;
  while (1)
  {
    unint64_t v18 = &v16[v17];
    *(void *)&v16[v17 + 8] = 0LL;
    if (a2 - v13 < 8
      || (*(_DWORD *)unint64_t v18 = *(_DWORD *)(a1 + v13), a2 - (v13 + 4) < 4)
      || (int64_t v19 = &v16[v17],
          size_t v20 = *(unsigned int *)(a1 + v13 + 4),
          *(_DWORD *)&v16[v17 + 16] = v20,
          v13 += 8LL,
          a2 - v13 < v20))
    {
      unsigned int v11 = 70;
      uint64_t v12 = 4294967293LL;
      goto LABEL_31;
    }

    uint64_t v21 = checkParameter(&v16[v17]);
    if ((_DWORD)v21)
    {
      uint64_t v12 = v21;
      unsigned int v11 = 70;
      goto LABEL_31;
    }

    if ((_DWORD)v20) {
      break;
    }
LABEL_20:
    v17 += 24LL;
    if (v15 == v17)
    {
      uint64_t v10 = (_BYTE *)&unk_18C78E000;
      a5 = v25;
      a3 = v26;
      a4 = v24;
      LODWORD(v14) = v27;
      goto LABEL_24;
    }
  }

  int64_t v22 = acm_mem_alloc_data(v20);
  acm_mem_alloc_info( "<data>",  v22,  v20,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  212,  "deserializeParameters");
  *((void *)v18 + 1) = v22;
  if (v22)
  {
    memcpy(v22, (const void *)(a1 + v13), *((unsigned int *)v19 + 4));
    v13 += *((unsigned int *)v19 + 4);
    goto LABEL_20;
  }

  unsigned int v11 = 70;
  uint64_t v12 = 4294967292LL;
LABEL_31:
  uint64_t v10 = (_BYTE *)&unk_18C78E000;
LABEL_25:
  if (v11 >= v10[48]) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "deserializeParameters", (int)v12);
  }
  return v12;
}

uint64_t GetSerializedVerifyAclConstraintSize( int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, _DWORD *a9, unsigned int a10, void *a11)
{
  unsigned int v18 = 0;
  uint64_t result = 4294967293LL;
  if (a3)
  {
    if (a11)
    {
      if (a10 <= 0xA && (a9 != 0LL) == (a10 != 0))
      {
        uint64_t result = getLengthOfParameters(a9, a10, &v18);
        if (!(_DWORD)result)
        {
          uint64_t v15 = 29LL;
          if (a1 == 32) {
            uint64_t v15 = 33LL;
          }
          uint64_t v16 = v15 + a4;
          if (a1 == 32) {
            uint64_t v17 = a6;
          }
          else {
            uint64_t v17 = 0LL;
          }
          *a11 = v16 + v17 + v18;
        }
      }
    }
  }

  return result;
}

uint64_t SerializeVerifyAclConstraint( int a1, _OWORD *a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, char a7, int a8, _DWORD *a9, unsigned int a10, uint64_t a11, void *a12)
{
  if (!a3) {
    return 4294967293LL;
  }
  uint64_t result = 4294967293LL;
  if (a12) {
    BOOL v14 = a11 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && a10 <= 0xA && (a9 != 0LL) == (a10 != 0))
  {
    unsigned int v31 = 0;
    uint64_t result = getLengthOfParameters(a9, a10, &v31);
    if (!(_DWORD)result)
    {
      uint64_t v21 = 29LL;
      if (a1 == 32) {
        uint64_t v21 = 33LL;
      }
      uint64_t v22 = v21 + a4;
      if (a1 == 32) {
        uint64_t v23 = a6;
      }
      else {
        uint64_t v23 = 0LL;
      }
      if (*a12 < v22 + v23 + (unint64_t)v31)
      {
        return 4294967293LL;
      }

      else
      {
        int v28 = a8;
        if (a2)
        {
          *(_OWORD *)a11 = *a2;
        }

        else
        {
          *(void *)a11 = 0LL;
          *(void *)(a11 + _Block_object_dispose(va, 8) = 0LL;
        }

        *(_DWORD *)(a11 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a4;
        memcpy((void *)(a11 + 20), a3, a4);
        uint64_t v24 = a4 + 20LL;
        if (a1 == 32)
        {
          *(_DWORD *)(a11 + v24) = a6;
          uint64_t v25 = a4 + 24LL;
          memcpy((void *)(a11 + v25), a5, a6);
          uint64_t v24 = v25 + a6;
        }

        uint64_t v26 = a11 + v24;
        *(_BYTE *)uint64_t v26 = a7;
        *(_DWORD *)(v26 + 1) = v28;
        uint64_t v30 = v24 + 5;
        uint64_t result = serializeParameters((uint64_t)a9, a10, a11, &v30);
        if (!(_DWORD)result) {
          *a12 = v30;
        }
      }
    }
  }

  return result;
}

uint64_t DeserializeVerifyAclConstraint( int a1, uint64_t a2, unsigned int a3, _OWORD *a4, void *a5, _DWORD *a6, size_t *a7, _DWORD *a8, BOOL *a9, _DWORD *a10, void *a11, _DWORD *a12)
{
  id v33 = 0LL;
  unint64_t v34 = 0LL;
  unsigned int v32 = 0;
  uint64_t v12 = 4294967293LL;
  if (a2 && a4 && a5 && a6 && a9 && a10 && a11 && a12 && a3 >= 0x10)
  {
    unint64_t v16 = a3;
    *a4 = *(_OWORD *)a2;
    unint64_t v34 = 16LL;
    if ((a3 & 0xFFFFFFFC) == 0x10LL)
    {
      uint64_t v12 = 4294967293LL;
    }

    else
    {
      unint64_t v20 = *(unsigned int *)(a2 + 16);
      unint64_t v34 = 20LL;
      uint64_t v21 = acm_mem_alloc_data(v20);
      acm_mem_alloc_info( "<data>",  v21,  v20,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  532,  "DeserializeVerifyAclConstraint");
      if (v21)
      {
        if (v16 - 20 < v20) {
          goto LABEL_24;
        }
        memcpy(v21, (const void *)(a2 + 20), v20);
        unint64_t v22 = v20 + 20;
        unint64_t v34 = v20 + 20;
        unsigned int v31 = a5;
        if (a1 != 32)
        {
          uint64_t v25 = 0LL;
          LODWORD(v23) = 0;
          goto LABEL_19;
        }

        if (v16 - v22 < 4)
        {
LABEL_24:
          uint64_t v25 = 0LL;
          LODWORD(v23) = 0;
        }

        else
        {
          size_t v23 = *(unsigned int *)(a2 + v22);
          unint64_t v24 = v20 + 24;
          unint64_t v34 = v20 + 24;
          uint64_t v25 = acm_mem_alloc_data(v23);
          acm_mem_alloc_info( "<data>",  v25,  v23,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  544,  "DeserializeVerifyAclConstraint");
          if (!v25)
          {
            uint64_t v12 = 4294967292LL;
LABEL_26:
            acm_mem_free_info( "<data>",  v21,  v20,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  580,  "DeserializeVerifyAclConstraint");
            acm_mem_free_data(v21, v20);
            if (v25)
            {
              acm_mem_free_info( "<data>",  v25,  v23,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  583,  "DeserializeVerifyAclConstraint");
              acm_mem_free_data(v25, v23);
            }

            goto LABEL_30;
          }

          if (v16 - v24 >= v23)
          {
            memcpy(v25, (const void *)(a2 + v24), v23);
            unint64_t v22 = v24 + v23;
            unint64_t v34 = v24 + v23;
LABEL_19:
            if (v22 != v16)
            {
              BOOL v26 = *(_BYTE *)(a2 + v22) != 0;
              unint64_t v34 = v22 + 1;
              if (v16 - (v22 + 1) >= 4)
              {
                unint64_t v30 = v20;
                int v27 = v23;
                size_t v23 = (size_t)v25;
                int v28 = *(_DWORD *)(a2 + v22 + 1);
                unint64_t v34 = v22 + 5;
                uint64_t v12 = deserializeParameters(a2, v16, &v34, &v33, &v32);
                if (!(_DWORD)v12)
                {
                  *unsigned int v31 = v21;
                  *a7 = v23;
                  *a8 = v27;
                  *a6 = v30;
                  *a9 = v26;
                  *a10 = v28;
                  *a11 = v33;
                  *a12 = v32;
                  return v12;
                }

                uint64_t v25 = (void *)v23;
                LODWORD(v23) = v27;
                unint64_t v20 = v30;
                goto LABEL_26;
              }
            }
          }
        }

        uint64_t v12 = 4294967293LL;
        goto LABEL_26;
      }

      uint64_t v12 = 4294967292LL;
    }
  }

uint64_t GetSerializedProcessAclSize( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, void *a9)
{
  unsigned int v12 = 0;
  uint64_t result = 4294967293LL;
  if (a2 && a3 && a9 && a8 <= 0xA && (a7 != 0LL) == (a8 != 0))
  {
    uint64_t result = getLengthOfParameters(a7, a8, &v12);
    if (!(_DWORD)result) {
      *a9 = a3 + (unint64_t)a5 + v12 + 36;
    }
  }

  return result;
}

uint64_t SerializeProcessAcl( _OWORD *a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t v23 = 0LL;
  uint64_t result = 4294967293LL;
  if (a2 && a3)
  {
    BOOL v15 = !a10 || a9 == 0;
    if (!v15 && a8 <= 0xA && (a7 != 0LL) == (a8 != 0))
    {
      int v17 = a6;
      uint64_t result = GetSerializedProcessAclSize(4294967293LL, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, &v23);
      if (!(_DWORD)result)
      {
        if (*a10 < v23)
        {
          return 4294967293LL;
        }

        else
        {
          if (a1)
          {
            *(_OWORD *)a9 = *a1;
          }

          else
          {
            *(void *)a9 = 0LL;
            *(void *)(a9 + _Block_object_dispose(va, 8) = 0LL;
          }

          *(_DWORD *)(a9 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a3;
          memcpy((void *)(a9 + 20), a2, a3);
          *(_DWORD *)(a9 + a3 + 20) = a5;
          uint64_t v21 = a3 + 24LL;
          if (a5)
          {
            memcpy((void *)(a9 + v21), a4, a5);
            v21 += a5;
          }

          *(_DWORD *)(a9 + v21) = v17;
          unint64_t v22 = v21 + 4;
          uint64_t result = serializeParameters((uint64_t)a7, a8, a9, (uint64_t *)&v22);
          if (!(_DWORD)result) {
            *a10 = v22;
          }
        }
      }
    }
  }

  return result;
}

uint64_t DeserializeProcessAcl( uint64_t a1, unsigned int a2, _OWORD *a3, void *a4, _DWORD *a5, void *a6, unsigned int *a7, _DWORD *a8, void *a9, _DWORD *a10)
{
  id v39 = 0LL;
  unint64_t v40 = 0LL;
  unsigned int v38 = 0;
  uint64_t v10 = 4294967293LL;
  if (a1)
  {
    if (a3)
    {
      unsigned int v11 = a4;
      if (a4)
      {
        unsigned int v12 = a5;
        if (a5)
        {
          unint64_t v13 = a6;
          if (a6)
          {
            BOOL v14 = a7;
            if (a7)
            {
              BOOL v15 = a8;
              if (a8)
              {
                if (a9 && a10 && a2 >= 0x10)
                {
                  unint64_t v17 = a2;
                  *a3 = *(_OWORD *)a1;
                  unint64_t v40 = 16LL;
                  if ((a2 & 0xFFFFFFFC) == 0x10LL)
                  {
                    uint64_t v10 = 4294967293LL;
                  }

                  else
                  {
                    unint64_t v18 = *(unsigned int *)(a1 + 16);
                    unint64_t v40 = 20LL;
                    int64_t v19 = acm_mem_alloc_data(v18);
                    acm_mem_alloc_info( "<data>",  v19,  v18,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  722,  "DeserializeProcessAcl");
                    if (v19)
                    {
                      if (v17 - 20 < v18
                        || (memcpy(v19, (const void *)(a1 + 20), v18), unint64_t v40 = v18 + 20, v17 - (v18 + 20) < 4))
                      {
                        unsigned int v32 = 0LL;
                        unsigned int v37 = 0;
                        uint64_t v10 = 4294967293LL;
                      }

                      else
                      {
                        size_t v20 = *(unsigned int *)(a1 + v18 + 20);
                        unint64_t v21 = v18 + 24;
                        unint64_t v40 = v18 + 24;
                        unsigned int v37 = v20;
                        if (!(_DWORD)v20)
                        {
                          unsigned int v36 = 0LL;
                          goto LABEL_20;
                        }

                        id v33 = v12;
                        unint64_t v34 = v11;
                        unint64_t v22 = v13;
                        unint64_t v23 = v14;
                        unint64_t v24 = v15;
                        size_t v25 = v20;
                        BOOL v26 = acm_mem_alloc_data(v20);
                        acm_mem_alloc_info( "<data>",  v26,  v25,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  734,  "DeserializeProcessAcl");
                        if (v26)
                        {
                          int v27 = v26;
                          unsigned int v11 = v34;
                          if (v17 - v21 >= v25)
                          {
                            unsigned int v36 = v27;
                            memcpy(v27, (const void *)(a1 + v21), v25);
                            v21 += v25;
                            unint64_t v40 = v21;
                            BOOL v15 = v24;
                            BOOL v14 = v23;
                            unint64_t v13 = v22;
                            unsigned int v12 = v33;
LABEL_20:
                            if (v17 - v21 < 4)
                            {
                              uint64_t v10 = 4294967293LL;
                            }

                            else
                            {
                              unint64_t v35 = v18;
                              int v28 = v19;
                              unint64_t v29 = v15;
                              int v30 = *(_DWORD *)(a1 + v21);
                              unint64_t v40 = v21 + 4;
                              uint64_t v10 = deserializeParameters(a1, v17, &v40, &v39, &v38);
                              if (!(_DWORD)v10)
                              {
                                void *v11 = v28;
                                _DWORD *v12 = v35;
                                *unint64_t v13 = v36;
                                unsigned int *v14 = v37;
                                *unint64_t v29 = v30;
                                *a9 = v39;
                                *a10 = v38;
                                return v10;
                              }

                              int64_t v19 = v28;
                              unint64_t v18 = v35;
                            }

                            unsigned int v32 = v36;
                            goto LABEL_32;
                          }

                          uint64_t v10 = 4294967293LL;
                          unsigned int v32 = v27;
                        }

                        else
                        {
                          unsigned int v32 = 0LL;
                          uint64_t v10 = 4294967292LL;
                        }
                      }

uint64_t GetSerializedRequirementSize(_DWORD *a1, uint64_t *a2)
{
  uint64_t v12 = 0LL;
  uint64_t result = 4294967293LL;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  int v5 = *a1;
  if (*a1 > 0x1Cu) {
    return result;
  }
  if (((1 << v5) & 0x1FFCFF4E) != 0)
  {
    uint64_t result = 0LL;
    *a2 = a1[3] + 16LL;
    return result;
  }

  if (((1 << v5) & 0x30) == 0)
  {
    if (v5 != 7) {
      return result;
    }
    *a2 = 24LL;
    uint64_t v9 = a1[5];
    if ((_DWORD)v9)
    {
      uint64_t v10 = a1 + 6;
      uint64_t v11 = 24LL;
      do
      {
        uint64_t result = GetSerializedRequirementSize(*v10, &v12);
        if ((_DWORD)result) {
          break;
        }
        v11 += v12;
        *a2 = v11;
        ++v10;
        --v9;
      }

      while (v9);
      return result;
    }

    return 0LL;
  }

  *a2 = 20LL;
  uint64_t v6 = a1[4];
  if (!(_DWORD)v6) {
    return 0LL;
  }
  uint64_t v7 = a1 + 5;
  uint64_t v8 = 20LL;
  while (1)
  {
    uint64_t result = GetSerializedRequirementSize(*v7, &v12);
    if ((_DWORD)result) {
      break;
    }
    v8 += v12;
    *a2 = v8;
    ++v7;
    if (!--v6) {
      return 0LL;
    }
  }

  return result;
}

uint64_t SerializeRequirement(_DWORD *a1, _OWORD *a2, uint64_t *a3)
{
  unint64_t v12 = 0LL;
  uint64_t result = 4294967293LL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = GetSerializedRequirementSize(a1, (uint64_t *)&v12);
        if (!(_DWORD)result)
        {
          if (v12 > *a3) {
            return 4294967293LL;
          }
          *a2 = *(_OWORD *)a1;
          int v7 = *a1;
          uint64_t result = 4294967293LL;
          if (*a1 <= 0x1Cu)
          {
            if (((1 << v7) & 0x1FFCFF4E) != 0)
            {
              memcpy(a2 + 1, a1 + 4, a1[3]);
              uint64_t v8 = a1[3] + 16LL;
LABEL_9:
              uint64_t result = 0LL;
              *a3 = v8;
              return result;
            }

            if (((1 << v7) & 0x30) != 0)
            {
              *((_DWORD *)a2 + 4) = a1[4];
              if (!a1[4])
              {
                uint64_t v8 = 20LL;
                goto LABEL_9;
              }

              uint64_t v9 = 0LL;
              uint64_t v8 = 20LL;
              while (1)
              {
                uint64_t v11 = *a3 - v8;
                uint64_t result = SerializeRequirement(*(void *)&a1[2 * v9 + 5], (char *)a2 + v8, &v11);
                if ((_DWORD)result) {
                  break;
                }
                v8 += v11;
              }
            }

            else if (v7 == 7)
            {
              *((void *)a2 + 2) = *((void *)a1 + 2);
              if (!a1[5])
              {
                uint64_t v8 = 24LL;
                goto LABEL_9;
              }

              uint64_t v10 = 0LL;
              uint64_t v8 = 24LL;
              while (1)
              {
                uint64_t v11 = *a3 - v8;
                uint64_t result = SerializeRequirement(*(void *)&a1[2 * v10 + 6], (char *)a2 + v8, &v11);
                if ((_DWORD)result) {
                  break;
                }
                v8 += v11;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t DeserializeRequirement(unsigned int *a1, unint64_t a2, void **a3, size_t *a4)
{
  __dst = 0LL;
  uint64_t v4 = 4294967293LL;
  if (a1)
  {
    if (a2 >= 0x10)
    {
      if (a3)
      {
        if (a4)
        {
          unsigned int v9 = *a1;
          if (v9 <= 0x1C)
          {
            if (((1 << v9) & 0x1FFCFF4E) != 0)
            {
              size_t v10 = a1[3] + 16LL;
              if (v10 > a2) {
                goto LABEL_36;
              }
              uint64_t v11 = Util_AllocRequirement(v9, 0LL, &__dst);
              if (!(_DWORD)v11)
              {
                if (__dst)
                {
                  memcpy(__dst, a1, v10);
LABEL_11:
                  uint64_t v4 = 0LL;
                  *a4 = v10;
                  *a3 = __dst;
                  return v4;
                }

                return 4294967292LL;
              }

              goto LABEL_35;
            }

            if (((1 << v9) & 0x30) != 0)
            {
              uint64_t v13 = a1[4];
              if (8 * v13 + 20 > a2) {
                goto LABEL_36;
              }
              uint64_t v11 = Util_AllocRequirement(v9, v13, &__dst);
              if ((_DWORD)v11) {
                goto LABEL_35;
              }
              BOOL v14 = __dst;
              if (!__dst) {
                return 4294967292LL;
              }
              if (*((_DWORD *)__dst + 3) == 84)
              {
                __int128 v15 = *(_OWORD *)a1;
                *((_DWORD *)__dst + 4) = a1[4];
                _OWORD *v14 = v15;
                *((_DWORD *)__dst + 3) = 84;
                if (!a1[4])
                {
                  size_t v10 = 20LL;
                  goto LABEL_11;
                }

                uint64_t v16 = 0LL;
                size_t v10 = 20LL;
                while (1)
                {
                  uint64_t v21 = 0LL;
                  uint64_t v22 = 0LL;
                  uint64_t v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                  if ((_DWORD)v11) {
                    goto LABEL_35;
                  }
                  *(void *)((char *)__dst + 8 * v16 + 20) = v22;
                  v10 += v21;
                }
              }

              goto LABEL_39;
            }

            if (v9 == 7)
            {
              uint64_t v17 = a1[5];
              if (8 * v17 + 24 <= a2)
              {
                uint64_t v11 = Util_AllocRequirement(7, v17, &__dst);
                if (!(_DWORD)v11)
                {
                  unint64_t v18 = __dst;
                  if (!__dst) {
                    return 4294967292LL;
                  }
                  if (*((_DWORD *)__dst + 3) != 88)
                  {
LABEL_39:
                    uint64_t v4 = 4294967291LL;
                    goto LABEL_36;
                  }

                  __int128 v19 = *(_OWORD *)a1;
                  *((void *)__dst + 2) = *((void *)a1 + 2);
                  _OWORD *v18 = v19;
                  *((_DWORD *)__dst + 3) = 88;
                  if (!a1[5])
                  {
                    size_t v10 = 24LL;
                    goto LABEL_11;
                  }

                  uint64_t v20 = 0LL;
                  size_t v10 = 24LL;
                  while (1)
                  {
                    uint64_t v21 = 0LL;
                    uint64_t v22 = 0LL;
                    uint64_t v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                    if ((_DWORD)v11) {
                      break;
                    }
                    *((void *)__dst + v20 + 3) = v22;
                    v10 += v21;
                  }
                }

uint64_t GetSerializedCredentialSize(_DWORD *a1, void *a2)
{
  uint64_t result = 4294967293LL;
  if (a1 && a2 && *a1 <= 0x17u && ((1 << *a1) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0LL;
    *a2 = a1[7] + 32LL;
  }

  return result;
}

uint64_t SerializeCredential(unsigned int *__src, void *__dst, size_t *a3)
{
  uint64_t result = 4294967293LL;
  if (__src && __dst && a3)
  {
    unsigned int v6 = *__src;
    if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0)
    {
      size_t v8 = __src[7] + 32LL;
      if (v8 <= *a3 && v6 <= 0x17 && ((1 << v6) & 0xFFF7FE) != 0)
      {
        memcpy(__dst, __src, v8);
        uint64_t result = 0LL;
        *a3 = __src[7] + 32LL;
      }
    }
  }

  return result;
}

uint64_t DeserializeCredential(unsigned int *a1, unint64_t a2, void **a3, void *a4)
{
  __dst = 0LL;
  uint64_t v4 = 4294967293LL;
  if (a2 >= 0x20 && a1 && a3 && a4)
  {
    unsigned int v8 = *a1;
    uint64_t v10 = a1[7];
    switch(*a1)
    {
      case 1u:
        if ((_DWORD)v10 == 28) {
          goto LABEL_7;
        }
        return v4;
      case 2u:
        if ((_DWORD)v10 == 136) {
          goto LABEL_7;
        }
        return v4;
      case 3u:
        if ((_DWORD)v10 == 305) {
          goto LABEL_7;
        }
        return v4;
      case 4u:
      case 5u:
      case 6u:
      case 8u:
      case 0xEu:
      case 0x10u:
      case 0x13u:
      case 0x16u:
      case 0x17u:
        if (!(_DWORD)v10) {
          goto LABEL_7;
        }
        return v4;
      case 7u:
        if ((_DWORD)v10 == 56) {
          goto LABEL_7;
        }
        return v4;
      case 9u:
        if ((_DWORD)v10 == 24) {
          goto LABEL_7;
        }
        return v4;
      case 0xAu:
        if ((_DWORD)v10 == 52) {
          goto LABEL_7;
        }
        return v4;
      case 0xCu:
      case 0xFu:
        if ((_DWORD)v10 == 8) {
          goto LABEL_7;
        }
        return v4;
      case 0xDu:
      case 0x15u:
        if ((_DWORD)v10 == 132) {
          goto LABEL_7;
        }
        return v4;
      case 0x11u:
        if ((_DWORD)v10 == 81) {
          goto LABEL_7;
        }
        return v4;
      case 0x12u:
        if ((_DWORD)v10 == 20) {
          goto LABEL_7;
        }
        return v4;
      case 0x14u:
        if ((_DWORD)v10 != 32) {
          return v4;
        }
LABEL_7:
        uint64_t v4 = Util_AllocCredential(*a1, &__dst);
        if ((_DWORD)v4)
        {
          if (__dst)
          {
LABEL_16:
            Util_DeallocCredential(__dst);
            return v4;
          }
        }

        else
        {
          if (__dst)
          {
            if (*((_DWORD *)__dst + 1) > 3u || *((_DWORD *)__dst + 2) > 0x50u)
            {
              uint64_t v4 = 4294967293LL;
            }

            else
            {
              uint64_t v4 = 4294967293LL;
              if (v8 <= 0x17 && ((1 << v8) & 0xFFF7FE) != 0 && v10 + 32 <= a2)
              {
                memcpy(__dst, a1, v10 + 32);
                uint64_t v4 = 0LL;
                *a3 = __dst;
                *a4 = v10 + 32;
                return v4;
              }
            }

            goto LABEL_16;
          }

          uint64_t v4 = 4294967292LL;
        }

        break;
      default:
        return v4;
    }
  }

  return v4;
}

uint64_t CopyCredential(uint64_t a1, void **a2)
{
  __dst = 0LL;
  uint64_t v2 = 4294967293LL;
  if (a1 && a2)
  {
    uint64_t v2 = Util_AllocCredential(*(_DWORD *)a1, &__dst);
    if ((_DWORD)v2)
    {
      if (__dst) {
        Util_DeallocCredential(__dst);
      }
    }

    else if (__dst)
    {
      memcpy(__dst, (const void *)a1, *(unsigned int *)(a1 + 28) + 32LL);
      uint64_t v2 = 0LL;
      *a2 = __dst;
    }

    else
    {
      return 4294967292LL;
    }
  }

  return v2;
}

uint64_t CompareCredentials(void *__s1, void *__s2, _BYTE *a3)
{
  uint64_t v3 = 4294967293LL;
  if (__s1)
  {
    uint64_t v4 = __s2;
    if (__s2)
    {
      if (a3)
      {
        unsigned int v6 = __s1;
        if (*(_DWORD *)__s1 == *(_DWORD *)__s2)
        {
          uint64_t v7 = *((unsigned int *)__s1 + 7);
          if ((_DWORD)v7 == *((_DWORD *)__s2 + 7))
          {
            uint64_t v3 = 4294967293LL;
            switch(*(_DWORD *)__s1)
            {
              case 1:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)__s1 + 44;
                BOOL v14 = (char *)__s2 + 44;
                goto LABEL_74;
              case 2:
                if (*((_DWORD *)__s1 + 8) != *((_DWORD *)__s2 + 8)) {
                  break;
                }
                size_t v8 = *((unsigned int *)__s1 + 9);
                if ((_DWORD)v8 != *((_DWORD *)__s2 + 9)) {
                  break;
                }
                __s2 += 5;
                __s1 += 5;
                goto LABEL_8;
              case 3:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)(__s1 + 13);
                BOOL v14 = (char *)(__s2 + 13);
                goto LABEL_74;
              case 4:
              case 5:
              case 6:
              case 8:
              case 0xC:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x16:
              case 0x17:
                size_t v8 = v7 + 32;
                goto LABEL_8;
              case 7:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                BOOL isNullOrEqualMem2 = _isNullOrEqualMem2( (unint64_t)(__s1 + 4),  0x20uLL,  (unint64_t)(__s2 + 4),  32LL);
                if (!isNullOrEqualMem2) {
                  goto LABEL_100;
                }
                uint64_t v13 = (char *)(v6 + 8);
                BOOL v14 = (char *)(v4 + 8);
                size_t v21 = 24LL;
                uint64_t v22 = 24LL;
                goto LABEL_103;
              case 9:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)(__s1 + 5);
                BOOL v14 = (char *)(__s2 + 5);
                goto LABEL_74;
              case 0xA:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                BOOL isNullOrEqualMem2 = _isNullOrEqualMem2( (unint64_t)__s1 + 36,  0x10uLL,  (unint64_t)__s2 + 36,  16LL);
                if (!isNullOrEqualMem2) {
                  goto LABEL_100;
                }
                uint64_t v13 = (char *)v6 + 52;
                BOOL v14 = (char *)v4 + 52;
LABEL_74:
                size_t v21 = 16LL;
                uint64_t v22 = 16LL;
                goto LABEL_103;
              case 0xD:
                size_t v8 = *((unsigned int *)__s1 + 8);
                if ((_DWORD)v8 != *((_DWORD *)__s2 + 8)) {
                  break;
                }
                __s2 = (void *)((char *)__s2 + 36);
                __s1 = (void *)((char *)__s1 + 36);
LABEL_8:
                LOBYTE(isNullOrEqualMem2) = memcmp(__s1, __s2, v8) == 0;
                goto LABEL_100;
              case 0x14:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                BOOL v14 = (char *)(__s2 + 4);
                uint64_t v13 = (char *)(__s1 + 4);
                size_t v21 = 32LL;
                uint64_t v22 = 32LL;
                goto LABEL_103;
              case 0x15:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3]) {
                  break;
                }
                uint64_t v13 = (char *)__s1 + 36;
                BOOL v14 = (char *)__s2 + 36;
                size_t v21 = 128LL;
                uint64_t v22 = 128LL;
LABEL_103:
                LOBYTE(isNullOrEqualMem2) = _isNullOrEqualMem2((unint64_t)v13, v21, (unint64_t)v14, v22);
                goto LABEL_100;
              default:
                return v3;
            }
          }
        }

        LOBYTE(isNullOrEqualMem2) = 0;
LABEL_100:
        uint64_t v3 = 0LL;
        *a3 = isNullOrEqualMem2;
      }
    }
  }

  return v3;
}

BOOL _isNullOrEqualMem2(unint64_t __s1, size_t __n, unint64_t __s2, uint64_t a4)
{
  if (__n != a4) {
    return 0LL;
  }
  if (!(__s1 | __s2)) {
    return 1LL;
  }
  BOOL result = 0LL;
  BOOL v6 = __s1 == 0;
  if (__s2)
  {
    BOOL v7 = 1;
  }

  else
  {
    BOOL v6 = 0;
    BOOL v7 = __s1 == 0;
  }

  if (v7 && !v6) {
    return memcmp((const void *)__s1, (const void *)__s2, __n) == 0;
  }
  return result;
}

uint64_t GetSerializedAddCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293LL;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0LL;
    *a4 = a2[7] + 52LL;
  }

  return result;
}

uint64_t SerializeAddCredential(_OWORD *a1, unsigned int *__src, int a3, uint64_t a4, void *a5)
{
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  uint64_t result = 4294967293LL;
  if (a5)
  {
    if (a4)
    {
      if (__src)
      {
        if ((v7 & 1) == 0)
        {
          uint64_t result = 4294967293LL;
          if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0 && *a5 >= (unint64_t)__src[7] + 52)
          {
            if (a1)
            {
              *(_OWORD *)a4 = *a1;
            }

            else
            {
              *(void *)a4 = 0LL;
              *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
            }

            uint64_t v13 = *a5 - 16LL;
            uint64_t result = SerializeCredential(__src, (void *)(a4 + 16), (size_t *)&v13);
            if (!(_DWORD)result)
            {
              size_t v12 = v13;
              *(_DWORD *)(v13 + a4 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a3;
              *a5 = v12 + 20;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t DeserializeAddCredential(uint64_t a1, unint64_t a2, _OWORD *a3, void *a4, _DWORD *a5)
{
  size_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v5 = 4294967293LL;
  if (a1 && a2 >= 0x34 && a3 && a4 && a5)
  {
    *a3 = *(_OWORD *)a1;
    uint64_t v10 = DeserializeCredential((unsigned int *)(a1 + 16), a2 - 16, (void **)&v12, &v13);
    if ((_DWORD)v10)
    {
      uint64_t v5 = v10;
    }

    else if (a2 - (v13 + 16) >= 4)
    {
      uint64_t v5 = 0LL;
      *a5 = *(_DWORD *)(a1 + v13 + 16);
      *a4 = v12;
      return v5;
    }
  }

  if (v12) {
    Util_DeallocCredential(v12);
  }
  return v5;
}

uint64_t DeserializeAddCredentialType(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result = 4294967293LL;
  if (a2 >= 0x34 && a1)
  {
    if (a3)
    {
      uint64_t result = 0LL;
      *a3 = *(_DWORD *)(a1 + 16);
    }
  }

  return result;
}

uint64_t GetSerializedRemoveCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293LL;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0LL;
    *a4 = a2[7] + 52LL;
  }

  return result;
}

uint64_t GetSerializedReplacePassphraseCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293LL;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0LL;
    *a4 = a2[7] + 52LL;
  }

  return result;
}

uint64_t SerializeCredentialList(unsigned int **a1, unsigned int a2, unsigned int *a3, void *a4)
{
  if (a2) {
    BOOL v6 = a1 == 0LL;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6 || a3 == 0LL || a4 == 0LL) {
    return 4294967293LL;
  }
  v16[7] = v4;
  v16[8] = v5;
  *a3 = a2;
  if (a2)
  {
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    uint64_t v13 = 4LL;
    while (1)
    {
      BOOL v14 = *v11;
      if (!*v11) {
        return 4294967293LL;
      }
      v16[0] = *a4 - v13;
      uint64_t result = SerializeCredential(v14, (char *)a3 + v13, v16);
      if ((_DWORD)result) {
        return result;
      }
      v13 += v16[0];
      ++v11;
      if (!--v12) {
        goto LABEL_18;
      }
    }
  }

  else
  {
    uint64_t v13 = 4LL;
LABEL_18:
    uint64_t result = 0LL;
    *a4 = v13;
  }

  return result;
}

uint64_t DeserializeCredentialList(unsigned int *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t v15 = 0LL;
  uint64_t v4 = 4294967293LL;
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t v8 = *a1;
        if (v8 <= 0x3E8)
        {
          if ((_DWORD)v8)
          {
            uint64_t v10 = (char *)acm_mem_alloc(8 * v8);
            acm_mem_alloc_info( "array of ACMCredentialRef",  v10,  8 * v8,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  1778,  "DeserializeCredentialList");
            if (v10)
            {
              uint64_t v11 = 0LL;
              uint64_t v12 = 4LL;
              while (1)
              {
                uint64_t v13 = DeserializeCredential((unsigned int *)((char *)a1 + v12), a2 - v12, (void **)&v10[v11], &v15);
                if ((_DWORD)v13) {
                  break;
                }
                v12 += v15;
                v11 += 8LL;
                if (8 * v8 == v11) {
                  goto LABEL_12;
                }
              }

              uint64_t v4 = v13;
              DeallocCredentialList((_DWORD **)v10, v8);
            }

            else
            {
              return 4294967292LL;
            }
          }

          else
          {
            uint64_t v10 = 0LL;
LABEL_12:
            uint64_t v4 = 0LL;
            *a4 = v8;
            *a3 = v10;
          }
        }
      }
    }
  }

  return v4;
}

void DeallocCredentialList(_DWORD **a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v4 = a1;
      uint64_t v5 = a2;
      do
      {
        if (*v4)
        {
          Util_DeallocCredential(*v4);
          *uint64_t v4 = 0LL;
        }

        ++v4;
        --v5;
      }

      while (v5);
    }

    unint64_t v6 = 8 * v3;
    acm_mem_free_info( "array of ACMCredentialRef",  a1,  v6,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c",  1816,  "DeallocCredentialList");
    acm_mem_free(a1, v6);
  }

uint64_t GetSerializedGetContextPropertySize(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4294967293LL;
  }
  uint64_t result = 0LL;
  *a3 = 20LL;
  return result;
}

__n128 SerializeGetContextProperty(__n128 *a1, unsigned __int32 a2, __n128 *a3, void *a4)
{
  if (a1 && a3 && a4 && *a4 >= 0x14uLL)
  {
    __n128 result = *a1;
    *a3 = *a1;
    a3[1].n128_u32[0] = a2;
    *a4 = 20LL;
  }

  return result;
}

uint64_t DeserializeGetContextProperty(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result = 4294967293LL;
  if (a2 >= 0x10 && a1 && a3 && a4)
  {
    *a3 = *(_OWORD *)a1;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0x10)
    {
      uint64_t result = 0LL;
      *a4 = *(_DWORD *)(a1 + 16);
    }
  }

  return result;
}

uint64_t LibSer_GetAclAuthMethod_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967293LL;
  }
  uint64_t result = 0LL;
  *a2 = 16LL;
  return result;
}

__n128 LibSer_GetAclAuthMethod_Serialize(__n128 *a1, __n128 *a2, void *a3)
{
  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    __n128 result = *a1;
    *a2 = *a1;
    *a3 = 16LL;
  }

  return result;
}

__n128 LibSer_GetAclAuthMethod_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      __n128 result = *a1;
      *a3 = *a1;
    }
  }

  return result;
}

uint64_t LibSer_ContextCredentialGetProperty_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a4) {
    return 4294967293LL;
  }
  uint64_t result = 0LL;
  *a4 = 24LL;
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Serialize( __n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, void *a5)
{
  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    __n128 result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24LL;
  }

  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Deserialize( __n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      __n128 result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }

  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_GetSize(void *a1)
{
  if (!a1) {
    return 4294967293LL;
  }
  uint64_t result = 0LL;
  *a1 = 8LL;
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Serialize(int a1, int a2, _DWORD *a3, void *a4)
{
  uint64_t result = 4294967293LL;
  if (a3 && a4 && *a4 >= 8uLL)
  {
    uint64_t result = 0LL;
    *a3 = a1;
    a3[1] = a2;
    *a4 = 8LL;
  }

  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Deserialize( _DWORD *a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 4294967293LL;
  if (a2 >= 8 && a1 && a3)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      *a3 = *a1;
      *a4 = a1[1];
    }
  }

  return result;
}

uint64_t LibSer_RemoveCredentialByType_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a4) {
    return 4294967293LL;
  }
  uint64_t result = 0LL;
  *a4 = 24LL;
  return result;
}

__n128 LibSer_RemoveCredentialByType_Serialize( __n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, void *a5)
{
  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    __n128 result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24LL;
  }

  return result;
}

__n128 LibSer_RemoveCredentialByType_Deserialize( __n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      __n128 result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }

  return result;
}

uint64_t LibSer_DeleteContext_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967293LL;
  }
  uint64_t result = 0LL;
  *a2 = 16LL;
  return result;
}

__n128 LibSer_DeleteContext_Serialize(__n128 *a1, __n128 *a2, void *a3)
{
  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    __n128 result = *a1;
    *a2 = *a1;
    *a3 = 16LL;
  }

  return result;
}

__n128 LibSer_DeleteContext_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      __n128 result = *a1;
      *a3 = *a1;
    }
  }

  return result;
}

uint64_t LibSer_StorageAnyCmd_DeserializeCommonFields( uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result = 4294967293LL;
  if (a1 && a2 >= 0x14)
  {
    if (a3) {
      *a3 = *(_OWORD *)a1;
    }
    uint64_t result = 0LL;
    if (a4) {
      *a4 = *(_DWORD *)(a1 + 16);
    }
  }

  return result;
}

uint64_t LibSer_StorageSetData_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, void *a4)
{
  unsigned int v7 = 0;
  if (!a4) {
    return 4294967291LL;
  }
  uint64_t result = getLengthOfParameters(a2, a3, &v7);
  if (!(_DWORD)result) {
    *a4 = a1 + v7 + 28;
  }
  return result;
}

uint64_t LibSer_StorageSetData_Serialize( _OWORD *a1, int a2, const void *a3, size_t a4, _DWORD *a5, unsigned int a6, uint64_t a7, size_t *a8)
{
  uint64_t result = 4294967293LL;
  if (a1)
  {
    if (a2)
    {
      if (a7)
      {
        if (a8)
        {
          unsigned int v18 = 0;
          uint64_t result = getLengthOfParameters(a5, a6, &v18);
          if (!(_DWORD)result)
          {
            if (*a8 < a4 + v18 + 28)
            {
              return 4294967293LL;
            }

            else
            {
              *(_OWORD *)a7 = *a1;
              *(_DWORD *)(a7 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a2;
              *(_DWORD *)(a7 + 20) = a4;
              memcpy((void *)(a7 + 24), a3, a4);
              size_t v17 = a4 + 24;
              uint64_t result = serializeParameters((uint64_t)a5, a6, a7, (uint64_t *)&v17);
              if (!(_DWORD)result) {
                *a8 = v17;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t LibSer_StorageSetData_Deserialize( uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, void *a5, void *a6, void *a7, _DWORD *a8)
{
  uint64_t v10 = 4294967293LL;
  if (a1 && a2 >= 0x18 && a6 && a3 && a4 && a5 && a7 && a8)
  {
    v14[1] = v8;
    void v14[2] = v9;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    uint64_t v11 = *(unsigned int *)(a1 + 20);
    v14[0] = 24LL;
    *a6 = v11;
    if ((_DWORD)v11)
    {
      unint64_t v12 = v11 + 24;
      if (v12 > a2) {
        return 4294967293LL;
      }
      *a5 = a1 + 24;
      v14[0] = v12;
    }

    else
    {
      *a5 = 0LL;
    }

    return deserializeParameters(a1, a2, v14, a7, a8);
  }

  return v10;
}

uint64_t LibSer_StorageGetData_GetSize(_DWORD *a1, unsigned int a2, void *a3)
{
  unsigned int v5 = 0;
  if (!a3) {
    return 4294967291LL;
  }
  uint64_t result = getLengthOfParameters(a1, a2, &v5);
  if (!(_DWORD)result) {
    *a3 = v5 + 25LL;
  }
  return result;
}

uint64_t LibSer_StorageGetData_Serialize( _OWORD *a1, int a2, char a3, _DWORD *a4, unsigned int a5, uint64_t a6, void *a7)
{
  uint64_t result = 4294967293LL;
  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        if (a7)
        {
          unsigned int v16 = 0;
          uint64_t result = getLengthOfParameters(a4, a5, &v16);
          if (!(_DWORD)result)
          {
            if (*a7 < (unint64_t)v16 + 25)
            {
              return 4294967293LL;
            }

            else
            {
              *(_OWORD *)a6 = *a1;
              *(_DWORD *)(a6 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a2;
              *(_BYTE *)(a6 + 20) = a3;
              uint64_t v15 = 21LL;
              uint64_t result = serializeParameters((uint64_t)a4, a5, a6, &v15);
              if (!(_DWORD)result) {
                *a7 = v15;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t LibSer_StorageGetData_Deserialize( uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, BOOL *a5, void *a6, _DWORD *a7)
{
  uint64_t v9 = 4294967293LL;
  if (a1 && a2 >= 0x15 && a3 && a4 && a5)
  {
    v11[1] = v7;
    v11[2] = v8;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    *a5 = *(_BYTE *)(a1 + 20) != 0;
    v11[0] = 21LL;
    return deserializeParameters(a1, a2, v11, a6, a7);
  }

  return v9;
}

uint64_t LibSer_GetUnlockSecret_GetSize(_DWORD *a1, unsigned int a2, void *a3)
{
  unsigned int v5 = 0;
  if (!a3) {
    return 4294967291LL;
  }
  uint64_t result = getLengthOfParameters(a1, a2, &v5);
  if (!(_DWORD)result) {
    *a3 = v5 + 20LL;
  }
  return result;
}

uint64_t LibSer_GetUnlockSecret_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, _OWORD *a4, void *a5)
{
  uint64_t result = 4294967293LL;
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        unsigned int v12 = 0;
        uint64_t result = getLengthOfParameters(a2, a3, &v12);
        if (!(_DWORD)result)
        {
          if (*a5 < (unint64_t)v12 + 20)
          {
            return 4294967293LL;
          }

          else
          {
            *a4 = *a1;
            uint64_t v11 = 16LL;
            uint64_t result = serializeParameters((uint64_t)a2, a3, (uint64_t)a4, &v11);
            if (!(_DWORD)result) {
              *a5 = v11;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t LibSer_GetUnlockSecret_Deserialize( _OWORD *a1, unint64_t a2, _OWORD *a3, void *a4, _DWORD *a5)
{
  if (!a1) {
    return 4294967293LL;
  }
  uint64_t result = 4294967293LL;
  if (a2 >= 0x10 && a3 && a4)
  {
    if (a5)
    {
      v9[1] = v5;
      v9[2] = v6;
      *a3 = *a1;
      v9[0] = 16LL;
      return deserializeParameters((uint64_t)a1, a2, v9, a4, a5);
    }
  }

  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967291LL;
  }
  uint64_t result = 0LL;
  *a2 = a1 + 1;
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Serialize(void *__src, size_t __n, char a3, _BYTE *a4, void *a5)
{
  uint64_t result = 4294967293LL;
  if (__src && __n && a4 && a5)
  {
    size_t v9 = __n + 1;
    if (*a5 < __n + 1)
    {
      return 4294967293LL;
    }

    else
    {
      *a4 = a3;
      memcpy(a4 + 1, __src, __n);
      uint64_t result = 0LL;
      *a5 = v9;
    }
  }

  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Deserialize(_BYTE *a1, uint64_t a2, void *a3, void *a4, _BYTE *a5)
{
  uint64_t result = 4294967293LL;
  if (a2 && a5 && a1 && a3)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      *a5 = *a1;
      *a3 = a1 + 1;
      *a4 = a2 - 1;
    }
  }

  return result;
}

uint64_t LibSer_SEPControl_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, void *a4)
{
  unsigned int v7 = 0;
  if (!a4) {
    return 4294967291LL;
  }
  uint64_t result = getLengthOfParameters(a2, a3, &v7);
  if (!(_DWORD)result) {
    *a4 = a1 + v7 + 24;
  }
  return result;
}

uint64_t LibSer_SEPControl_Serialize( _OWORD *a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6, void *a7)
{
  uint64_t result = 4294967293LL;
  if (a6)
  {
    if (a7)
    {
      unsigned int v18 = 0;
      uint64_t result = getLengthOfParameters(a2, a3, &v18);
      if (!(_DWORD)result)
      {
        if (*a7 < a5 + v18 + 24)
        {
          return 4294967293LL;
        }

        else
        {
          if (a1)
          {
            *(_OWORD *)a6 = *a1;
          }

          else
          {
            *(void *)a6 = 0LL;
            *(void *)(a6 + _Block_object_dispose(va, 8) = 0LL;
          }

          uint64_t v17 = 16LL;
          uint64_t result = serializeParameters((uint64_t)a2, a3, a6, &v17);
          if (!(_DWORD)result)
          {
            uint64_t v15 = v17;
            *(_DWORD *)(a6 + v17) = a5;
            uint64_t v16 = v15 + 4;
            memcpy((void *)(a6 + v15 + 4), a4, a5);
            uint64_t result = 0LL;
            *a7 = v16 + a5;
          }
        }
      }
    }
  }

  return result;
}

uint64_t LibSer_SEPControl_Deserialize( _OWORD *a1, unint64_t a2, _OWORD *a3, void *a4, _DWORD *a5, unint64_t *a6, void *a7)
{
  if (!a1) {
    return 4294967293LL;
  }
  uint64_t result = 4294967293LL;
  if (a2 >= 0x18 && a7 && a3 && a4 && a5 && a6)
  {
    *a3 = *a1;
    unint64_t v12 = 16LL;
    uint64_t result = deserializeParameters((uint64_t)a1, a2, &v12, a4, a5);
    if (!(_DWORD)result)
    {
      unint64_t v11 = (unint64_t)a1 + v12 + 4;
      *a7 = *(unsigned int *)((char *)a1 + v12);
      *a6 = v11;
    }
  }

  return result;
}

uint64_t LibSer_SEPControlResponse_GetSize(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294967291LL;
  }
  uint64_t result = 0LL;
  *a2 = a1 + 4;
  return result;
}

uint64_t LibSer_SEPControlResponse_Serialize(void *__src, size_t __n, _DWORD *a3, uint64_t *a4)
{
  uint64_t result = 4294967293LL;
  if (a3 && a4)
  {
    uint64_t v8 = __n + 4;
    if (*a4 < __n + 4)
    {
      return 4294967293LL;
    }

    else
    {
      *a3 = __n;
      if (__src) {
        memcpy(a3 + 1, __src, __n);
      }
      else {
        uint64_t v8 = 4LL;
      }
      uint64_t result = 0LL;
      *a4 = v8;
    }
  }

  return result;
}

uint64_t LibSer_SEPControlResponse_Deserialize(unsigned int *a1, unint64_t a2, void *a3, void *a4)
{
  if (!a1) {
    return 4294967293LL;
  }
  uint64_t result = 4294967293LL;
  if (a2 >= 4 && a3 && a4)
  {
    uint64_t result = 0LL;
    unsigned int v7 = *a1;
    unint64_t v6 = a1 + 1;
    *a4 = v7;
    if (!v7) {
      unint64_t v6 = 0LL;
    }
    *a3 = v6;
  }

  return result;
}

uint64_t checkParameter(_DWORD *a1)
{
  if (!a1) {
    return 4294967293LL;
  }
  switch(*a1)
  {
    case 0:
    case 0xC:
      if (a1[4]) {
        return 4294967293LL;
      }
      break;
    case 1:
    case 4:
    case 5:
    case 0xA:
      if (a1[4] != 4) {
        return 4294967293LL;
      }
      break;
    case 2:
    case 6:
    case 7:
      if (a1[4] != 16) {
        return 4294967293LL;
      }
      break;
    case 3:
      break;
    case 8:
    case 9:
      if (a1[4] != 1) {
        return 4294967293LL;
      }
      break;
    case 0xB:
      if (a1[4] > 0x400u) {
        return 4294967293LL;
      }
      break;
    default:
      return 4294967293LL;
  }

  return 0LL;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  unsigned int v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))v1;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v17 = 0x2000LL;
  uint64_t v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17) {
      BOOL v14 = v18;
    }
    else {
      BOOL v14 = 0LL;
    }
    (*(void (**)(uint64_t, _BYTE *))(v3 + 16))(v3, v14);
  }

  if ((_DWORD)v13) {
    unsigned int v15 = 70;
  }
  else {
    unsigned int v15 = 10;
  }
  return v13;
}

uint64_t LibCall_ACMSEPControl_Block( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  size_t v20 = 1024LL;
  uint64_t v16 = LibCall_ACMSEPControl(a1, a2, a3, a4, a5, a6, a7, v21, &v20);
  if (a8)
  {
    if (v20) {
      uint64_t v17 = v21;
    }
    else {
      uint64_t v17 = 0LL;
    }
    (*(void (**)(uint64_t, _BYTE *))(a8 + 16))(a8, v17);
  }

  if ((_DWORD)v16) {
    unsigned int v18 = 70;
  }
  else {
    unsigned int v18 = 10;
  }
  return v16;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty_Block( uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v9 = (uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, _BYTE *, uint64_t *))result;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 256LL;
  if (v9)
  {
    uint64_t v13 = 8LL;
    uint64_t result = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v15, &v13);
    if ((_DWORD)result)
    {
LABEL_7:
      uint64_t v10 = result;
      goto LABEL_8;
    }

    if (v13 == 8)
    {
      uint64_t result = v9(a2, 27LL, 0LL, &v15, 8LL, v16, &v14);
      goto LABEL_7;
    }

    uint64_t v10 = 4294967291LL;
  }

  else
  {
    uint64_t v10 = 4294967293LL;
  }

uint64_t LibCall_ACMContextVerifyPolicy_Block( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *a4, uint64_t a5)
{
  return LibCall_ACMContextVerifyPolicyWithPreflight_Block(a1, a2, a3, a4, 0LL, a5);
}

uint64_t LibCall_ACMContextVerifyPolicyWithPreflight_Block( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = 0LL;
  BOOL v16 = 0;
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293LL;
  if (a3 && __s1 && a6)
  {
    uint64_t v13 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, 0LL, 0, 0LL, &v16, &v17);
    uint64_t v14 = v17;
    if (!(_DWORD)v13)
    {
      (*(void (**)(uint64_t, BOOL, int *))(a6 + 16))(a6, v16, v17);
      uint64_t v14 = v17;
    }

    if (v14) {
      Util_DeallocRequirement(v14);
    }
    if ((_DWORD)v13) {
      unsigned int v12 = 70;
    }
    else {
      unsigned int v12 = 10;
    }
  }

  return v13;
}

int *LibCall_ACMContextVerifyPolicyEx_Block( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  BOOL v17 = 0LL;
  unsigned int v18 = 0LL;
  uint64_t v22 = 0LL;
  BOOL v21 = 0;
  uint64_t v19 = 4294967293LL;
  if (a3 && __s1 && a9)
  {
    uint64_t v19 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, a6, a7, a8, &v21, &v22);
    unsigned int v18 = v22;
    BOOL v17 = v21;
  }

  (*(void (**)(uint64_t, uint64_t, BOOL, int *))(a9 + 16))(a9, v19, v17, v18);
  uint64_t result = v22;
  if (v22) {
    uint64_t result = (int *)Util_DeallocRequirement(v22);
  }
  return result;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicy_Block( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, uint64_t a7)
{
  *(void *)int v15 = 0LL;
  uint64_t result = LibCall_ACMContextCreate( (uint64_t (*)(uint64_t, uint64_t, void, void, void, _BYTE *, uint64_t *))a1,  a2,  v15,  0LL,  1);
  if ((_DWORD)result)
  {
    if (a7) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a7 + 16))(a7, result, 0LL, 0LL);
    }
  }

  else
  {
    uint64_t result = (uint64_t)LibCall_ACMContextVerifyPolicyEx_Block(a1, a2, *(_OWORD **)v15, a3, a4, a5, a6, 0xFFFFFFFFLL, a7);
  }

  if (*(void *)v15) {
    uint64_t result = LibCall_ACMContextDelete( (void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))a1,  a2,  *(void **)v15,  1);
  }
  return result;
}

uint64_t LibCall_ACMGetEnvironmentVariable_Block( uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 128LL;
  if (!a4)
  {
    unsigned int v12 = 70;
    uint64_t v9 = 4294967293LL;
    goto LABEL_17;
  }

  if (a3 == 36)
  {
    int v8 = acm_mem_alloc_data(0x800uLL);
    acm_mem_alloc_info( "<data>",  v8,  2048LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c",  162,  "LibCall_ACMGetEnvironmentVariable_Block");
    if (!v8)
    {
      unsigned int v12 = 70;
      uint64_t v9 = 4294967292LL;
      goto LABEL_17;
    }

    uint64_t v14 = 2048LL;
    uint64_t v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, 36, (uint64_t)v8, (uint64_t)&v14);
    if (!(_DWORD)v9)
    {
      if (v14) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 0LL;
      }
      (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v10);
      acm_mem_free_info( "<data>",  v8,  0x800uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c",  176,  "LibCall_ACMGetEnvironmentVariable_Block");
      acm_mem_free_data(v8, 0x800uLL);
LABEL_16:
      unsigned int v12 = 10;
      goto LABEL_17;
    }

    acm_mem_free_info( "<data>",  v8,  0x800uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c",  176,  "LibCall_ACMGetEnvironmentVariable_Block");
    acm_mem_free_data(v8, 0x800uLL);
  }

  else
  {
    uint64_t v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, a3, (uint64_t)v15, (uint64_t)&v14);
    if (!(_DWORD)v9)
    {
      if (v14) {
        uint64_t v11 = v15;
      }
      else {
        uint64_t v11 = 0LL;
      }
      (*(void (**)(uint64_t, _BYTE *))(a4 + 16))(a4, v11);
      goto LABEL_16;
    }
  }

  unsigned int v12 = 70;
LABEL_17:
  return v9;
}

uint64_t LibCall_ACMTRMLoadState_Block(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))v1;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 0x2000LL;
  if (v3)
  {
    uint64_t v7 = LibCall_ACMTRMLoadState(v6, v5, (uint64_t)v12, (uint64_t)&v11);
    if ((_DWORD)v7)
    {
      unsigned int v9 = 70;
    }

    else
    {
      if (v11) {
        int v8 = v12;
      }
      else {
        int v8 = 0LL;
      }
      (*(void (**)(uint64_t, _BYTE *))(v3 + 16))(v3, v8);
      unsigned int v9 = 10;
    }
  }

  else
  {
    unsigned int v9 = 70;
    uint64_t v7 = 4294967293LL;
  }

  return v7;
}

uint64_t LibCall_ACMContextUnloadToImage_Block(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (v3)
  {
    uint64_t v5 = LibCall_ACMContextUnloadToImage(v4);
    if ((_DWORD)v5)
    {
      unsigned int v6 = 70;
    }

    else
    {
      (*(void (**)(uint64_t, _BYTE *))(v3 + 16))(v3, v8);
      unsigned int v6 = 10;
    }
  }

  else
  {
    unsigned int v6 = 70;
    uint64_t v5 = 4294967293LL;
  }

  return v5;
}

uint64_t LibCall_ACMGetAclAuthMethod_Block(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4)
{
  uint64_t v7 = (void (*)(uint64_t, uint64_t, void, __n128 *, uint64_t, _BYTE *, uint64_t *, __n128))result;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 256LL;
  if (v7 && a3 && a4)
  {
    uint64_t v10 = 16LL;
    __n128 AclAuthMethod_Serialize = LibSer_GetAclAuthMethod_Serialize(a3, &v12, &v10);
    if (!v9 && v10 == 16) {
      v7(a2, 31LL, 0LL, &v12, 16LL, v13, &v11, AclAuthMethod_Serialize);
    }
    goto LABEL_9;
  }

  if (a4) {
LABEL_9:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraint( uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  return verifyAclConstraintForOperationCommandInternal(a1, a2, 0xBu, a3, a4, a5, 0LL, 0, a6, a7, a8, a9, a10);
}

uint64_t verifyAclConstraintForOperationCommandInternal( uint64_t result, uint64_t a2, unsigned __int8 a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, uint64_t a13)
{
  size_t v20 = (uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, unsigned int *, unint64_t *))result;
  size_t v25 = 0LL;
  BOOL v24 = 0;
  if (a4 && a5 && a6 && a13)
  {
    uint64_t v21 = verifyAclConstraintInternal(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, &v24, &v25);
    uint64_t v22 = v25;
    BOOL v23 = v24;
  }

  else
  {
    if (!a13) {
      goto LABEL_10;
    }
    uint64_t v22 = 0LL;
    BOOL v23 = 0LL;
    uint64_t v21 = 4294967293LL;
  }

  (*(void (**)(uint64_t, uint64_t, BOOL, int *))(a13 + 16))(a13, v21, v23, v22);
  uint64_t result = (uint64_t)v25;
  if (v25) {
    uint64_t result = Util_DeallocRequirement(v25);
  }
LABEL_10:
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraintForOperation( uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return verifyAclConstraintForOperationCommandInternal(a1, a2, 0x20u, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t Util_GetBitCount(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

BOOL Util_isNullOrZeroMemory(_BYTE *a1, uint64_t a2)
{
  if (!a1) {
    return 1LL;
  }
  if (*a1) {
    return 0LL;
  }
  return memcmp(a1, a1 + 1, a2 - 1) == 0;
}

BOOL Util_isNonNullEqualMemory(void *__s1, size_t __n, void *__s2, uint64_t a4)
{
  if (__n != a4) {
    return 0LL;
  }
  BOOL result = 0LL;
  if (__s1)
  {
    if (__s2) {
      return memcmp(__s1, __s2, __n) == 0;
    }
  }

  return result;
}

char *Util_hexDumpToStrHelper(char *result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!result && a2) {
    Util_hexDumpToStrHelper_cold_1();
  }
  if (!a3 && a4) {
    Util_hexDumpToStrHelper_cold_2();
  }
  if (a2 >= a4) {
    unint64_t v4 = a4;
  }
  else {
    unint64_t v4 = a2;
  }
  if (v4)
  {
    uint64_t v5 = (_BYTE *)(a3 + 1);
    do
    {
      *(v5 - 1) = a0123456789abcd[(unint64_t)*result >> 4];
      char v6 = *result++;
      _BYTE *v5 = a0123456789abcd[v6 & 0xF];
      v5 += 2;
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t Util_WriteToBuffer(uint64_t a1, size_t a2, void *a3, void *__src, size_t __n)
{
  if (a3)
  {
    uint64_t v10 = *a3;
    size_t v11 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (a1 && v11 > a2)
      {
        uint64_t v12 = 4294967276LL;
        goto LABEL_19;
      }

      if (!a1 || !__src || !__n) {
        goto LABEL_12;
      }
      if (!__CFADD__(a1, v10))
      {
        memcpy((void *)(a1 + v10), __src, __n);
LABEL_12:
        uint64_t v12 = 0LL;
        *a3 = v11;
        unsigned int v13 = 10;
        goto LABEL_13;
      }
    }

    uint64_t v12 = 4294967291LL;
  }

  else
  {
    uint64_t v12 = 4294967293LL;
  }

uint64_t Util_ReadFromBuffer(uint64_t a1, size_t a2, void *a3, void *__dst, size_t __n)
{
  uint64_t v10 = 4294967293LL;
  unsigned int v11 = 70;
  if (a1 && a3)
  {
    uint64_t v12 = *a3;
    size_t v13 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (v13 > a2)
      {
        uint64_t v10 = 4294967276LL;
        goto LABEL_17;
      }

      if (!__dst || !__n) {
        goto LABEL_11;
      }
      if (!__CFADD__(a1, v12))
      {
        memcpy(__dst, (const void *)(a1 + v12), __n);
LABEL_11:
        uint64_t v10 = 0LL;
        *a3 = v13;
        unsigned int v11 = 10;
        goto LABEL_12;
      }
    }

    uint64_t v10 = 4294967291LL;
LABEL_17:
    unsigned int v11 = 70;
  }

LABEL_12:
  return v10;
}

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

  free(*(void **)&inputStructCnt[1]);
  return v17;
}

unint64_t Util_KeybagLockStateToEnvVar(unsigned int a1)
{
  unint64_t v1 = 0x2010103020201uLL >> (8 * a1);
  if (a1 >= 7) {
    LOBYTE(v1) = 1;
  }
  return v1 & 3;
}

void Util_SafeDeallocParameters(unsigned int *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      unint64_t v4 = a1 + 4;
      uint64_t v5 = a2;
      do
      {
        char v6 = (void *)*((void *)v4 - 1);
        if (v6)
        {
          unint64_t v7 = *v4;
          acm_mem_free_info( "<data>",  *((const void **)v4 - 1),  v7,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  118,  "Util_SafeDeallocParameters");
          acm_mem_free_data(v6, v7);
        }

        v4 += 6;
        --v5;
      }

      while (v5);
    }

    acm_mem_free_info( "array of ACMParameter",  a1,  24 * v3,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  121,  "Util_SafeDeallocParameters");
    acm_mem_free(a1, 24 * v3);
  }

uint64_t Util_DeallocCredential(_DWORD *a1)
{
  if (a1)
  {
    uint64_t v2 = 4294967293LL;
    unsigned int v3 = 70;
    switch(*a1)
    {
      case 1:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPasscodeValidated";
        rsize_t v5 = 60LL;
        char v6 = a1;
        unint64_t v7 = 60LL;
        int v8 = 144;
        goto LABEL_6;
      case 2:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPassphraseEntered";
        rsize_t v5 = 168LL;
        char v6 = a1;
        unint64_t v7 = 168LL;
        int v8 = 136;
        goto LABEL_6;
      case 3:
        unint64_t v4 = "ACMCredential - ACMCredentialDataBiometryMatched";
        rsize_t v5 = 337LL;
        char v6 = a1;
        unint64_t v7 = 337LL;
        int v8 = 140;
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 8:
      case 0xE:
      case 0x10:
      case 0x13:
      case 0x16:
      case 0x17:
        unint64_t v4 = "ACMCredential";
        rsize_t v5 = 32LL;
        char v6 = a1;
        unint64_t v7 = 32LL;
        int v8 = 189;
        goto LABEL_6;
      case 7:
        unint64_t v4 = "ACMCredential - ACMCredentialDataUserOutputDisplayed";
        rsize_t v5 = 88LL;
        char v6 = a1;
        unint64_t v7 = 88LL;
        int v8 = 152;
        goto LABEL_6;
      case 9:
        unint64_t v4 = "ACMCredential - ACMCredentialDataContinuityUnlock";
        rsize_t v5 = 56LL;
        char v6 = a1;
        unint64_t v7 = 56LL;
        int v8 = 156;
        goto LABEL_6;
      case 0xA:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPasscodeValidated2";
        rsize_t v5 = 84LL;
        char v6 = a1;
        unint64_t v7 = 84LL;
        int v8 = 148;
        goto LABEL_6;
      case 0xC:
      case 0xF:
        unint64_t v4 = "ACMCredential - ACMCredentialDataKextDenyList";
        rsize_t v5 = 40LL;
        char v6 = a1;
        unint64_t v7 = 40LL;
        int v8 = 161;
        goto LABEL_6;
      case 0xD:
        unint64_t v4 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
        rsize_t v5 = 164LL;
        char v6 = a1;
        unint64_t v7 = 164LL;
        int v8 = 132;
        goto LABEL_6;
      case 0x11:
        unint64_t v4 = "ACMCredential - ACMCredentialDataSecureIntent";
        rsize_t v5 = 113LL;
        char v6 = a1;
        unint64_t v7 = 113LL;
        int v8 = 165;
        goto LABEL_6;
      case 0x12:
        unint64_t v4 = "ACMCredential - ACMCredentialDataBiometryMatchAttempted";
        rsize_t v5 = 52LL;
        char v6 = a1;
        unint64_t v7 = 52LL;
        int v8 = 169;
        goto LABEL_6;
      case 0x14:
        unint64_t v4 = "ACMCredential - ACMCredentialDataAP";
        rsize_t v5 = 64LL;
        char v6 = a1;
        unint64_t v7 = 64LL;
        int v8 = 173;
        goto LABEL_6;
      case 0x15:
        unint64_t v4 = "ACMCredential - ACMCredentialDataSignature";
        rsize_t v5 = 164LL;
        char v6 = a1;
        unint64_t v7 = 164LL;
        int v8 = 177;
LABEL_6:
        acm_mem_free_info( v4,  v6,  v7,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  v8,  "Util_DeallocCredential");
        acm_mem_free(a1, v5);
        uint64_t v2 = 0LL;
        unsigned int v3 = 10;
        break;
      default:
        break;
    }
  }

  else
  {
    uint64_t v2 = 4294967293LL;
    unsigned int v3 = 70;
  }

  return v2;
}

uint64_t Util_AllocCredential(int a1, void *a2)
{
  if (!a2) {
    return 4294967293LL;
  }
  uint64_t result = 4294967293LL;
  switch(a1)
  {
    case 1:
      rsize_t v5 = acm_mem_alloc(0x3CuLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataPasscodeValidated",  v5,  60LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  226,  "Util_AllocCredential");
      int v6 = 28;
      goto LABEL_4;
    case 2:
      rsize_t v5 = acm_mem_alloc(0xA8uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataPassphraseEntered",  v5,  168LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  216,  "Util_AllocCredential");
      int v6 = 136;
      goto LABEL_4;
    case 3:
      rsize_t v5 = acm_mem_alloc(0x151uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataBiometryMatched",  v5,  337LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  221,  "Util_AllocCredential");
      int v6 = 305;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 8:
    case 14:
    case 16:
    case 19:
    case 22:
    case 23:
      rsize_t v5 = acm_mem_alloc(0x20uLL);
      acm_mem_alloc_info( "ACMCredential",  v5,  32LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  280,  "Util_AllocCredential");
      int v6 = 0;
      goto LABEL_4;
    case 7:
      rsize_t v5 = acm_mem_alloc(0x58uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataUserOutputDisplayed",  v5,  88LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  236,  "Util_AllocCredential");
      int v6 = 56;
      goto LABEL_4;
    case 9:
      rsize_t v5 = acm_mem_alloc(0x38uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataContinuityUnlock",  v5,  56LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  241,  "Util_AllocCredential");
      int v6 = 24;
      goto LABEL_4;
    case 10:
      rsize_t v5 = acm_mem_alloc(0x54uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataPasscodeValidated2",  v5,  84LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  231,  "Util_AllocCredential");
      int v6 = 52;
      goto LABEL_4;
    case 12:
    case 15:
      rsize_t v5 = acm_mem_alloc(0x28uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataKextDenyList",  v5,  40LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  247,  "Util_AllocCredential");
      int v6 = 8;
      goto LABEL_4;
    case 13:
      rsize_t v5 = acm_mem_alloc(0xA4uLL);
      unint64_t v7 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
      int v8 = v5;
      int v9 = 211;
      goto LABEL_18;
    case 17:
      rsize_t v5 = acm_mem_alloc(0x71uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataSecureIntent",  v5,  113LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  252,  "Util_AllocCredential");
      int v6 = 81;
      goto LABEL_4;
    case 18:
      rsize_t v5 = acm_mem_alloc(0x34uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataBiometryMatchAttempted",  v5,  52LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  257,  "Util_AllocCredential");
      int v6 = 20;
      goto LABEL_4;
    case 20:
      rsize_t v5 = acm_mem_alloc(0x40uLL);
      acm_mem_alloc_info( "ACMCredential - ACMCredentialDataAP",  v5,  64LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  262,  "Util_AllocCredential");
      int v6 = 32;
      goto LABEL_4;
    case 21:
      rsize_t v5 = acm_mem_alloc(0xA4uLL);
      unint64_t v7 = "ACMCredential - ACMCredentialDataSignature";
      int v8 = v5;
      int v9 = 267;
LABEL_18:
      acm_mem_alloc_info( v7,  v8,  164LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  v9,  "Util_AllocCredential");
      int v6 = 132;
LABEL_4:
      if (v5)
      {
        uint64_t result = 0LL;
        _DWORD *v5 = a1;
        v5[1] = 1;
        v5[7] = v6;
        v5[3] = -1;
        *a2 = v5;
      }

      else
      {
        uint64_t result = 4294967292LL;
      }

      break;
    default:
      return result;
  }

  return result;
}

uint64_t Util_AllocRequirement(int a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v6 = 4294967293LL;
    unsigned int v7 = 70;
    switch(a1)
    {
      case 1:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
        uint64_t v12 = v8;
        int v13 = 338;
        goto LABEL_49;
      case 2:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
        uint64_t v12 = v8;
        int v13 = 343;
        goto LABEL_49;
      case 3:
        int v8 = acm_mem_alloc(0xACuLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataBiometryMatched",  v8,  172LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  348,  "Util_AllocRequirement");
        int v9 = 156;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 4:
        int v8 = acm_mem_alloc(0x64uLL);
        uint64_t v14 = "ACMRequirement - ACMRequirementDataOr";
        int v15 = v8;
        int v16 = 406;
        goto LABEL_28;
      case 5:
        int v8 = acm_mem_alloc(0x64uLL);
        uint64_t v14 = "ACMRequirement - ACMRequirementDataAnd";
        int v15 = v8;
        int v16 = 398;
LABEL_28:
        acm_mem_alloc_info( v14,  v15,  100LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  v16,  "Util_AllocRequirement");
        int v9 = 84;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 23:
      case 27:
      case 28:
        int v8 = acm_mem_alloc(0x10uLL);
        acm_mem_alloc_info( "ACMRequirement",  v8,  16LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  333,  "Util_AllocRequirement");
        int v9 = 0;
        if (v8) {
          goto LABEL_6;
        }
        goto LABEL_50;
      case 7:
        int v8 = acm_mem_alloc(0x68uLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataKofN",  v8,  104LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  391,  "Util_AllocRequirement");
        int v9 = 88;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 8:
        int v8 = acm_mem_alloc(0x410uLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataAccessGroups",  v8,  1040LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  378,  "Util_AllocRequirement");
        int v9 = 1024;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 13:
        int v8 = acm_mem_alloc(0x30uLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataUserOutputDisplayed",  v8,  48LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  363,  "Util_AllocRequirement");
        int v9 = 32;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 16:
      case 17:
        break;
      case 20:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataSecureIntent";
        uint64_t v12 = v8;
        int v13 = 353;
        goto LABEL_49;
      case 21:
        int v8 = acm_mem_alloc(0x14uLL);
        unsigned int v11 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
        uint64_t v12 = v8;
        int v13 = 358;
LABEL_49:
        acm_mem_alloc_info( v11,  v12,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  v13,  "Util_AllocRequirement");
        int v9 = 4;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 24:
        int v8 = acm_mem_alloc(0x434uLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataAP",  v8,  1076LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  368,  "Util_AllocRequirement");
        int v9 = 1060;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 25:
        int v8 = acm_mem_alloc(0x3BuLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataKeyRef",  v8,  59LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  373,  "Util_AllocRequirement");
        int v9 = 43;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 26:
        int v8 = acm_mem_alloc(0x2CuLL);
        acm_mem_alloc_info( "ACMRequirement - ACMRequirementDataRatchet",  v8,  44LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  384,  "Util_AllocRequirement");
        int v9 = 28;
        if (!v8)
        {
LABEL_50:
          uint64_t v6 = 4294967292LL;
          goto LABEL_54;
        }

uint64_t Util_CreateRequirement(int a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  Util_AllocRequirement(a1, a2, &v5);
  return v5;
}

uint64_t Util_DeallocRequirement(int *a1)
{
  if (!a1)
  {
    uint64_t v7 = 4294967293LL;
    unsigned int v8 = 70;
    goto LABEL_28;
  }

  int v2 = *a1;
  if (*a1 > 6)
  {
    if (v2 == 7)
    {
      if (a1[5])
      {
        unint64_t v6 = 0LL;
        do
          Util_DeallocRequirement(*(void *)&a1[2 * v6++ + 6]);
        while (v6 < a1[5]);
      }
    }

    else
    {
      if (v2 != 1000) {
        goto LABEL_25;
      }
      if (a1[13])
      {
        unint64_t v4 = 0LL;
        do
          Util_DeallocRequirement(*(void *)&a1[2 * v4++ + 14]);
        while (v4 < a1[13]);
      }
    }
  }

  else if (v2 == 4)
  {
    if (a1[4])
    {
      unint64_t v5 = 0LL;
      do
        Util_DeallocRequirement(*(void *)&a1[2 * v5++ + 5]);
      while (v5 < a1[4]);
    }
  }

  else
  {
    if (v2 != 5) {
      goto LABEL_25;
    }
    if (a1[4])
    {
      unint64_t v3 = 0LL;
      do
        Util_DeallocRequirement(*(void *)&a1[2 * v3++ + 5]);
      while (v3 < a1[4]);
    }
  }

  int v2 = *a1;
LABEL_25:
  uint64_t v7 = 4294967293LL;
  unsigned int v8 = 70;
  switch(v2)
  {
    case 1:
      int v9 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
      rsize_t v10 = 20LL;
      unsigned int v11 = a1;
      unint64_t v12 = 20LL;
      int v13 = 542;
      goto LABEL_27;
    case 2:
      int v9 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
      rsize_t v10 = 20LL;
      unsigned int v11 = a1;
      unint64_t v12 = 20LL;
      int v13 = 546;
      goto LABEL_27;
    case 3:
      int v9 = "ACMRequirement - ACMRequirementDataBiometryMatched";
      rsize_t v10 = 172LL;
      unsigned int v11 = a1;
      unint64_t v12 = 172LL;
      int v13 = 550;
      goto LABEL_27;
    case 4:
      int v9 = "ACMRequirement - ACMRequirementDataOr";
      rsize_t v10 = 100LL;
      unsigned int v11 = a1;
      unint64_t v12 = 100LL;
      int v13 = 595;
      goto LABEL_27;
    case 5:
      int v9 = "ACMRequirement - ACMRequirementDataAnd";
      rsize_t v10 = 100LL;
      unsigned int v11 = a1;
      unint64_t v12 = 100LL;
      int v13 = 589;
      goto LABEL_27;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 27:
    case 28:
      int v9 = "ACMRequirement";
      rsize_t v10 = 16LL;
      unsigned int v11 = a1;
      unint64_t v12 = 16LL;
      int v13 = 538;
      goto LABEL_27;
    case 7:
      int v9 = "ACMRequirement - ACMRequirementDataKofN";
      rsize_t v10 = 104LL;
      unsigned int v11 = a1;
      unint64_t v12 = 104LL;
      int v13 = 584;
      goto LABEL_27;
    case 8:
      int v9 = "ACMRequirement - ACMRequirementDataAccessGroups";
      rsize_t v10 = 1040LL;
      unsigned int v11 = a1;
      unint64_t v12 = 1040LL;
      int v13 = 574;
      goto LABEL_27;
    case 13:
      int v9 = "ACMRequirement - ACMRequirementDataUserOutputDisplayed";
      rsize_t v10 = 48LL;
      unsigned int v11 = a1;
      unint64_t v12 = 48LL;
      int v13 = 562;
      goto LABEL_27;
    case 16:
    case 17:
      break;
    case 20:
      int v9 = "ACMRequirement - ACMRequirementDataSecureIntent";
      rsize_t v10 = 20LL;
      unsigned int v11 = a1;
      unint64_t v12 = 20LL;
      int v13 = 554;
      goto LABEL_27;
    case 21:
      int v9 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
      rsize_t v10 = 20LL;
      unsigned int v11 = a1;
      unint64_t v12 = 20LL;
      int v13 = 558;
      goto LABEL_27;
    case 24:
      int v9 = "ACMRequirement - ACMRequirementDataAP";
      rsize_t v10 = 1076LL;
      unsigned int v11 = a1;
      unint64_t v12 = 1076LL;
      int v13 = 566;
      goto LABEL_27;
    case 25:
      int v9 = "ACMRequirement - ACMRequirementDataKeyRef";
      rsize_t v10 = 59LL;
      unsigned int v11 = a1;
      unint64_t v12 = 59LL;
      int v13 = 570;
      goto LABEL_27;
    case 26:
      int v9 = "ACMRequirement - ACMRequirementDataRatchet";
      rsize_t v10 = 44LL;
      unsigned int v11 = a1;
      unint64_t v12 = 44LL;
      int v13 = 579;
LABEL_27:
      acm_mem_free_info( v9,  v11,  v12,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c",  v13,  "Util_DeallocRequirement");
      acm_mem_free(a1, v10);
      uint64_t v7 = 0LL;
      unsigned int v8 = 10;
      break;
    default:
      switch(v2)
      {
        case 1000:
          int v9 = "ACMRequirement - ACMRequirementDataKofNWithAttributes";
          rsize_t v10 = 136LL;
          unsigned int v11 = a1;
          unint64_t v12 = 136LL;
          int v13 = 601;
          goto LABEL_27;
        case 1001:
          int v9 = "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes";
          rsize_t v10 = 184LL;
          unsigned int v11 = a1;
          unint64_t v12 = 184LL;
          int v13 = 605;
          goto LABEL_27;
        case 1002:
          int v9 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
          rsize_t v10 = 20LL;
          unsigned int v11 = a1;
          unint64_t v12 = 20LL;
          int v13 = 609;
          goto LABEL_27;
        case 1003:
          int v9 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
          rsize_t v10 = 20LL;
          unsigned int v11 = a1;
          unint64_t v12 = 20LL;
          int v13 = 613;
          goto LABEL_27;
        case 1004:
          int v9 = "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes";
          rsize_t v10 = 32LL;
          unsigned int v11 = a1;
          unint64_t v12 = 32LL;
          int v13 = 617;
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
  }

void Util_hexDumpToStrHelper_cold_1()
{
}

void Util_hexDumpToStrHelper_cold_2()
{
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "ACMContextCreate";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v6 = 0LL;
  uint64_t v2 = LibCall_ACMContextCreate( (uint64_t (*)(uint64_t, uint64_t, void, void, void, _BYTE *, uint64_t *))ioKitTransport,  (uint64_t)&v6,  a1,  &_logLevel,  1);
  if ((_DWORD)v2)
  {
    updateLogLevelFromKext();
    unsigned int v3 = 70;
  }

  else
  {
    unsigned int v3 = 10;
    if (a1 && _logLevel <= 0x28u)
    {
      if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *a1;
        if (*a1) {
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        }
        *(_DWORD *)buf = 136315650;
        unsigned int v8 = "ACMLib";
        __int16 v9 = 2080;
        rsize_t v10 = "ACMContextCreate";
        __int16 v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }

      unsigned int v3 = 10;
    }
  }

  if (v3 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "ACMContextCreate";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v2;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v2;
}

uint64_t ioKitTransport(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    uint64_t v21 = "ioKitTransport";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }

  if (a1)
  {
    uint64_t v14 = init();
    unsigned int v15 = 70;
    if ((_DWORD)v14)
    {
      uint64_t v16 = v14;
    }

    else
    {
      uint64_t v16 = performCommand(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }

  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293LL;
  }

  if (v15 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    uint64_t v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v18,  0x20u);
  }

  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    rsize_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v8 = 0LL;
  uint64_t v4 = LibCall_ACMContextCreateWithExternalForm( (uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *))ioKitTransport,  (uint64_t)&v8,  a1,  a2,  &_logLevel,  1);
  if (v4)
  {
    if (_logLevel <= 0x28u && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
    {
      int v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      rsize_t v10 = "ACMLib";
      __int16 v11 = 2080;
      uint64_t v12 = "ACMContextCreateWithExternalForm";
      __int16 v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }

    unsigned int v6 = 30;
  }

  else
  {
    updateLogLevelFromKext();
    unsigned int v6 = 70;
  }

  if (v6 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    rsize_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, -> ctx = %p.\n",  buf,  0x20u);
  }

  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  _OWORD v16[2] = *MEMORY[0x1895F89C0];
  unsigned int v4 = _logLevel;
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    unsigned int v4 = _logLevel;
  }

  if (a1 && v4 <= 0x28 && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    unsigned int v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      unsigned int v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }

  rsize_t v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete( (void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))ioKitTransport,  (uint64_t)&v10,  a1,  a2);
  if ((_DWORD)v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }

  else {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16LL);
  }
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }

uint64_t init()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    uint64_t v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "init";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v7, 0x16u);
  }

  if ((_initialized & 1) != 0)
  {
    uint64_t v0 = 0LL;
  }

  else
  {
    mach_port_t v1 = *MEMORY[0x1896086B0];
    uint64_t v2 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(v1, v2);
    if (!MatchingService)
    {
      unsigned int v5 = 70;
      uint64_t v0 = 4294967291LL;
      goto LABEL_10;
    }

    io_object_t v4 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, *MEMORY[0x1895FBBE0], 0, (io_connect_t *)&_connect);
    if ((_DWORD)v0)
    {
      unsigned int v5 = 70;
      goto LABEL_10;
    }

    IOObjectRelease(v4);
    _initialized = 1;
  }

  unsigned int v5 = 10;
LABEL_10:
  if (v5 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "init";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v0;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v7,  0x20u);
  }

  return v0;
}

uint64_t performCommand(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v25 = "ACMLib";
    __int16 v26 = 2080;
    int v27 = "performCommand";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  size_t inputStructCnt = 0LL;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293LL;
    }

    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0LL;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(_connect, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if ((_DWORD)v17)
      {
        if (_logLevel <= 0x46u && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          size_t v25 = "ACMLib";
          __int16 v26 = 2080;
          int v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)unint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n",  buf,  0x2Eu);
        }
      }

      else
      {
        if (_logLevel <= 0x28u && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          size_t v25 = "ACMLib";
          __int16 v26 = 2080;
          int v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)unint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: cmd(%u) on CS[%u] -> ok.\n",  buf,  0x22u);
        }

        uint64_t v18 = 0LL;
        if (a7) {
          *a7 = v22;
        }
      }
    }

    rsize_t v19 = inputStructCnt;
    acm_mem_free_info( "<data>",  v15,  inputStructCnt,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  134,  "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }

  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291LL;
  }

  if (v20 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    size_t v25 = "ACMLib";
    __int16 v26 = 2080;
    int v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)unint64_t v29 = (int)v18;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v18;
}

uint64_t ACMContextAddCredential(_OWORD *a1, unsigned int *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    __int16 v6 = "ACMLib";
    __int16 v7 = 2080;
    uint64_t v8 = "ACMContextAddCredential";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }

  return ACMContextAddCredentialWithScope(a1, a2, 1);
}

uint64_t ACMContextAddCredentialWithScope(_OWORD *a1, unsigned int *a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextAddCredentialWithScope";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  size_t __size = 0LL;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293LL;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t SerializedAddCredentialSize = init();
    if ((_DWORD)SerializedAddCredentialSize
      || (uint64_t SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a1, a2, a3, &__size),
          (_DWORD)SerializedAddCredentialSize))
    {
      uint64_t v9 = SerializedAddCredentialSize;
      unsigned int v8 = 70;
    }

    else
    {
      size_t v11 = __size;
      uint64_t v12 = acm_mem_alloc_data(__size);
      acm_mem_alloc_info( "<data>",  v12,  v11,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  325,  "ACMContextAddCredentialWithScope");
      if (v12)
      {
        uint64_t v13 = SerializeAddCredential(a1, a2, a3, (uint64_t)v12, &__size);
        if (!(_DWORD)v13) {
          uint64_t v13 = performCommand((uint64_t)a1, 5, 0, v12, __size, 0LL, 0LL);
        }
        uint64_t v9 = v13;
        rsize_t v14 = __size;
        acm_mem_free_info( "<data>",  v12,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  338,  "ACMContextAddCredentialWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }

      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292LL;
      }
    }
  }

  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextAddCredentialWithScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v9;
}

uint64_t ACMContextRemoveCredentialsByType(_OWORD *a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    BOOL v6 = "ACMLib";
    __int16 v7 = 2080;
    unsigned int v8 = "ACMContextRemoveCredentialsByType";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }

  return ACMContextRemoveCredentialsByTypeAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByTypeAndScope(_OWORD *a1, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    rsize_t v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }

  if (a1 || a3 == 2)
  {
    uint64_t v6 = init();
    if ((_DWORD)v6)
    {
      uint64_t v8 = v6;
      unsigned int v9 = 70;
    }

    else
    {
      __int16 v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info( "<data>",  v7,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  386,  "ACMContextRemoveCredentialsByTypeAndScope");
      if (v7)
      {
        if (a1)
        {
          *__int16 v7 = *a1;
        }

        else
        {
          *(void *)__int16 v7 = 0LL;
          *((void *)v7 + 1) = 0LL;
        }

        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        uint64_t v8 = performCommand((uint64_t)a1, 9, 0, v7, 0x18uLL, 0LL, 0LL);
        acm_mem_free_info( "<data>",  v7,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  407,  "ACMContextRemoveCredentialsByTypeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8) {
          unsigned int v9 = 70;
        }
        else {
          unsigned int v9 = 10;
        }
      }

      else
      {
        unsigned int v9 = 70;
        uint64_t v8 = 4294967292LL;
      }
    }
  }

  else
  {
    unsigned int v9 = 70;
    uint64_t v8 = 4294967293LL;
  }

  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    rsize_t v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v11,  0x20u);
  }

  return v8;
}

uint64_t ACMContextRemoveCredentialsByValue(uint64_t a1, _DWORD *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    uint64_t v6 = "ACMLib";
    __int16 v7 = 2080;
    uint64_t v8 = "ACMContextRemoveCredentialsByValue";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }

  return ACMContextRemoveCredentialsByValueAndScope(a1, a2, 1LL);
}

uint64_t ACMContextRemoveCredentialsByValueAndScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextRemoveCredentialsByValueAndScope";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  size_t __size = 0LL;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = (_DWORD)a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293LL;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t v10 = init();
    if ((_DWORD)v10 || (uint64_t v10 = GetSerializedRemoveCredentialSize(a1, a2, a3, &__size), (_DWORD)v10))
    {
      uint64_t v9 = v10;
      unsigned int v8 = 70;
    }

    else
    {
      size_t v11 = __size;
      uint64_t v12 = acm_mem_alloc_data(__size);
      acm_mem_alloc_info( "<data>",  v12,  v11,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  457,  "ACMContextRemoveCredentialsByValueAndScope");
      if (v12)
      {
        uint64_t v13 = SerializeRemoveCredential(a1, a2, a3, v12, &__size);
        if (!(_DWORD)v13) {
          uint64_t v13 = performCommand(a1, 6, 0, v12, __size, 0LL, 0LL);
        }
        uint64_t v9 = v13;
        rsize_t v14 = __size;
        acm_mem_free_info( "<data>",  v12,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  470,  "ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }

      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292LL;
      }
    }
  }

  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextRemoveCredentialsByValueAndScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v9;
}

uint64_t ACMContextContainsCredentialType(_OWORD *a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    BOOL v6 = "ACMLib";
    __int16 v7 = 2080;
    unsigned int v8 = "ACMContextContainsCredentialType";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }

  return ACMContextContainsCredentialTypeEx(a1, a2, 0);
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  int v14 = 0;
  size_t v13 = 4LL;
  if (a1)
  {
    uint64_t v6 = init();
    if ((_DWORD)v6)
    {
      uint64_t v11 = v6;
      unsigned int v8 = 70;
    }

    else
    {
      __int16 v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info( "<data>",  v7,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  576,  "ACMContextContainsCredentialTypeEx");
      unsigned int v8 = 70;
      if (v7)
      {
        *(_OWORD *)__int16 v7 = *a1;
        void v7[4] = a2;
        v7[5] = a3;
        unsigned int v9 = performCommand((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = -7;
        }
        if (v9) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v10;
        }
        acm_mem_free_info( "<data>",  v7,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  590,  "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }

      else
      {
        uint64_t v11 = 4294967292LL;
      }
    }
  }

  else
  {
    unsigned int v8 = 70;
    uint64_t v11 = 4294967293LL;
  }

  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    __int16 v19 = 2048;
    uint64_t v20 = (int)v11;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v11;
}

uint64_t ACMGlobalContextAddCredential(unsigned int *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextAddCredential";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v6 = 0LL;
  if (a1)
  {
    uint64_t v2 = ACMContextCreate((uint64_t *)&v6);
    if (!(_DWORD)v2) {
      uint64_t v2 = ACMContextAddCredentialWithScope(v6, a1, 2);
    }
    uint64_t v3 = v2;
    if (v6) {
      ACMContextDelete(v6, 1);
    }
    if ((_DWORD)v3) {
      unsigned int v4 = 70;
    }
    else {
      unsigned int v4 = 10;
    }
  }

  else
  {
    unsigned int v4 = 70;
    uint64_t v3 = 4294967293LL;
  }

  if (v4 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextAddCredential";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v3;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v3;
}

uint64_t ACMGlobalContextRemoveCredentialsByType(int a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextRemoveCredentialsByType";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v6 = 0LL;
  uint64_t v2 = ACMContextCreate((uint64_t *)&v6);
  if (!(_DWORD)v2) {
    uint64_t v2 = ACMContextRemoveCredentialsByTypeAndScope(v6, a1, 2);
  }
  uint64_t v3 = v2;
  if (v6) {
    ACMContextDelete(v6, 1);
  }
  if ((_DWORD)v3) {
    unsigned int v4 = 70;
  }
  else {
    unsigned int v4 = 10;
  }
  if (v4 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    unsigned int v10 = "ACMGlobalContextRemoveCredentialsByType";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v3;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v3;
}

uint64_t ACMContextRemovePassphraseCredentialsByPurposeAndScope(_OWORD *a1, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    int v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }

  if (a1 || a3 == 2)
  {
    uint64_t v6 = init();
    if ((_DWORD)v6)
    {
      uint64_t v8 = v6;
      unsigned int v9 = 70;
    }

    else
    {
      __int16 v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info( "<data>",  v7,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  492,  "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
      if (v7)
      {
        if (a1)
        {
          *__int16 v7 = *a1;
        }

        else
        {
          *(void *)__int16 v7 = 0LL;
          *((void *)v7 + 1) = 0LL;
        }

        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        uint64_t v8 = performCommand((uint64_t)a1, 16, 0, v7, 0x18uLL, 0LL, 0LL);
        acm_mem_free_info( "<data>",  v7,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  513,  "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8) {
          unsigned int v9 = 70;
        }
        else {
          unsigned int v9 = 10;
        }
      }

      else
      {
        unsigned int v9 = 70;
        uint64_t v8 = 4294967292LL;
      }
    }
  }

  else
  {
    unsigned int v9 = 70;
    uint64_t v8 = 4294967293LL;
  }

  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    int v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v11,  0x20u);
  }

  return v8;
}

uint64_t ACMContextReplacePassphraseCredentialsWithScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    uint64_t v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  size_t __size = 0LL;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = (_DWORD)a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293LL;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t SerializedReplacePassphraseCredentialSize = init();
    if ((_DWORD)SerializedReplacePassphraseCredentialSize
      || (uint64_t SerializedReplacePassphraseCredentialSize = GetSerializedReplacePassphraseCredentialSize(a1, a2, a3, &__size),
          (_DWORD)SerializedReplacePassphraseCredentialSize))
    {
      uint64_t v9 = SerializedReplacePassphraseCredentialSize;
      unsigned int v8 = 70;
    }

    else
    {
      size_t v11 = __size;
      uint64_t v12 = acm_mem_alloc_data(__size);
      acm_mem_alloc_info( "<data>",  v12,  v11,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  538,  "ACMContextReplacePassphraseCredentialsWithScope");
      if (v12)
      {
        uint64_t v13 = SerializeReplacePassphraseCredential(a1, a2, a3, v12, &__size);
        if (!(_DWORD)v13) {
          uint64_t v13 = performCommand(a1, 15, 0, v12, __size, 0LL, 0LL);
        }
        uint64_t v9 = v13;
        bzero(v12, __size);
        rsize_t v14 = __size;
        acm_mem_free_info( "<data>",  v12,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  552,  "ACMContextReplacePassphraseCredentialsWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }

      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292LL;
      }
    }
  }

  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    uint64_t v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v9;
}

uint64_t ACMContextContainsPassphraseCredentialWithPurpose(_OWORD *a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  int v14 = 0;
  size_t v13 = 4LL;
  if (a1)
  {
    uint64_t v6 = init();
    if ((_DWORD)v6)
    {
      uint64_t v11 = v6;
      unsigned int v8 = 70;
    }

    else
    {
      char v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info( "<data>",  v7,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  614,  "ACMContextContainsPassphraseCredentialWithPurpose");
      unsigned int v8 = 70;
      if (v7)
      {
        *(_OWORD *)char v7 = *a1;
        void v7[4] = a2;
        v7[5] = a3;
        unsigned int v9 = performCommand((uint64_t)a1, 13, 0, v7, 0x18uLL, &v14, &v13);
        if (v14) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = -7;
        }
        if (v9) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v10;
        }
        acm_mem_free_info( "<data>",  v7,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  628,  "ACMContextContainsPassphraseCredentialWithPurpose");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }

      else
      {
        uint64_t v11 = 4294967292LL;
      }
    }
  }

  else
  {
    unsigned int v8 = 70;
    uint64_t v11 = 4294967293LL;
  }

  if (v8 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    __int16 v19 = 2048;
    uint64_t v20 = (int)v11;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v11;
}

uint64_t ACMContextVerifyPolicy(_OWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v11 = "ACMLib";
    __int16 v12 = 2080;
    size_t v13 = "ACMContextVerifyPolicy";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  unsigned int v9 = a1;
  uint64_t v6 = LibCall_ACMContextVerifyPolicy_Block( (uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))ioKitTransport,  (uint64_t)&v9,  a1,  a2,  a3);
  if ((_DWORD)v6) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v11 = "ACMLib";
    __int16 v12 = 2080;
    size_t v13 = "ACMContextVerifyPolicy";
    __int16 v14 = 2048;
    uint64_t v15 = (int)v6;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v6;
}

uint64_t ACMContextVerifyPolicyWithPreflight(_OWORD *a1, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMContextVerifyPolicyWithPreflight";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v11 = a1;
  uint64_t v8 = LibCall_ACMContextVerifyPolicyWithPreflight_Block( (uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))ioKitTransport,  (uint64_t)&v11,  a1,  __s1,  a3,  a4);
  if ((_DWORD)v8) {
    unsigned int v9 = 70;
  }
  else {
    unsigned int v9 = 10;
  }
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMContextVerifyPolicyWithPreflight";
    __int16 v16 = 2048;
    uint64_t v17 = (int)v8;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v8;
}

void ACMContextVerifyPolicyEx( _OWORD *a1, char *__s1, uint64_t a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  __int16 v14 = a1;
  LibCall_ACMContextVerifyPolicyEx_Block( (uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))ioKitTransport,  (uint64_t)&v14,  a1,  __s1,  a3,  a4,  a5,  a6,  a7);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }

void ACMGlobalContextVerifyPolicy(char *a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  *(void *)uint64_t v11 = 0LL;
  uint64_t v10 = ACMContextCreate((uint64_t *)v11);
  if ((_DWORD)v10)
  {
    if (a5) {
      (*(void (**)(uint64_t, uint64_t, void, void))(a5 + 16))(a5, v10, 0LL, 0LL);
    }
  }

  else
  {
    ACMContextVerifyPolicyEx(*(_OWORD **)v11, a1, a2, a3, a4, 0xFFFFFFFFLL, a5);
  }

  if (*(void *)v11) {
    ACMContextDelete(*(_DWORD **)v11, 1);
  }
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v13 = "ACMLib";
    __int16 v14 = 2080;
    uint64_t v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }

uint64_t ACMContextVerifyAclConstraint( _OWORD *a1, const void *a2, uint64_t a3, unsigned __int8 a4, _DWORD *a5, unsigned int a6, unsigned int a7, uint64_t a8)
{
  unsigned int v9 = a1;
  return LibCall_ACMContextVerifyAclConstraint((uint64_t)ioKitTransport, (uint64_t)&v9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ACMContextVerifyAclConstraintForOperation( _OWORD *a1, const void *a2, uint64_t a3, const void *a4, unsigned int a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v11 = a1;
  return LibCall_ACMContextVerifyAclConstraintForOperation( (uint64_t)ioKitTransport,  (uint64_t)&v11,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
}

uint64_t ACMContextGetTrackingNumber(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

uint64_t ACMParseAclAndCopyConstraintCharacteristics(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  size_t __n = 4096LL;
  size_t __size = 0LL;
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v22 = "ACMLib";
    __int16 v23 = 2080;
    uint64_t v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v6 = 4294967293LL;
  if (!a1 || !a2 || !a3) {
    goto LABEL_28;
  }
  uint64_t SerializedProcessAclSize = init();
  if ((_DWORD)SerializedProcessAclSize
    || (uint64_t SerializedProcessAclSize = GetSerializedProcessAclSize(0LL, (uint64_t)a1, a2, 0LL, 0, 0LL, 0LL, 0, &__size),
        (_DWORD)SerializedProcessAclSize))
  {
    uint64_t v6 = SerializedProcessAclSize;
LABEL_28:
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(a3 + 16))(a3, v6, 0LL, 4096LL);
    goto LABEL_19;
  }

  size_t v8 = __size;
  unsigned int v9 = acm_mem_alloc_data(__size);
  acm_mem_alloc_info( "<data>",  v9,  v8,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  744,  "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v9)
  {
    uint64_t v6 = 4294967292LL;
    goto LABEL_28;
  }

  uint64_t v10 = SerializeProcessAcl(0LL, a1, a2, 0LL, 0, 0LL, 0LL, 0, (uint64_t)v9, &__size);
  if ((_DWORD)v10)
  {
    uint64_t v6 = v10;
    __int16 v12 = 0LL;
    __int16 v14 = 0LL;
    size_t v11 = 4096LL;
    goto LABEL_15;
  }

  size_t v11 = 4096LL;
  __int16 v12 = acm_mem_alloc_data(0x1000uLL);
  acm_mem_alloc_info( "<data>",  v12,  4096LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  750,  "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v12)
  {
    __int16 v14 = 0LL;
LABEL_31:
    uint64_t v6 = 4294967292LL;
    goto LABEL_15;
  }

  uint64_t v13 = performCommand(0LL, 20, 0, v9, __size, v12, &__n);
  size_t v11 = __n;
  if ((_DWORD)v13)
  {
    uint64_t v6 = v13;
    __int16 v14 = 0LL;
    goto LABEL_15;
  }

  __int16 v14 = acm_mem_alloc_data(__n);
  acm_mem_alloc_info( "<data>",  v14,  v11,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  756,  "ACMParseAclAndCopyConstraintCharacteristics");
  size_t v11 = __n;
  if (!v14) {
    goto LABEL_31;
  }
  memcpy(v14, v12, __n);
  uint64_t v6 = 0LL;
  size_t v11 = __n;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, void *, size_t))(a3 + 16))(a3, v6, v14, v11);
  rsize_t v15 = __size;
  acm_mem_free_info( "<data>",  v9,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  767,  "ACMParseAclAndCopyConstraintCharacteristics");
  acm_mem_free_data(v9, v15);
  if (v12)
  {
    acm_mem_free_info( "<data>",  v12,  0x1000uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  770,  "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v12, 0x1000uLL);
  }

  if (v14)
  {
    rsize_t v16 = __n;
    acm_mem_free_info( "<data>",  v14,  __n,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  773,  "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v14, v16);
  }

uint64_t ACMCredentialGetProperty(int *a1, int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMCredentialGetProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  unsigned int v6 = 70;
  uint64_t v7 = 4294967293LL;
  if (a1 && a3)
  {
    uint64_t v7 = LibCall_ACMCredentialGetPropertyData(a1, a2, &v10, &v9);
    if ((_DWORD)v7)
    {
      unsigned int v6 = 70;
    }

    else
    {
      (*(void (**)(uint64_t, int *, uint64_t))(a3 + 16))(a3, v10, v9);
      unsigned int v6 = 10;
    }
  }

  if (v6 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMCredentialGetProperty";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v7;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v7;
}

void ACMRequirementGetSubrequirements(int *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }

  if (a1 && a2)
  {
    int v4 = *a1;
    if (*a1 == 4)
    {
      if (a1[4])
      {
        unint64_t v6 = 0LL;
        do
          (*(void (**)(uint64_t, void))(a2 + 16))(a2, *(void *)&a1[2 * v6++ + 5]);
        while (v6 < a1[4]);
      }
    }

    else if (v4 == 5)
    {
      if (a1[4])
      {
        unint64_t v7 = 0LL;
        do
          (*(void (**)(uint64_t, void))(a2 + 16))(a2, *(void *)&a1[2 * v7++ + 5]);
        while (v7 < a1[4]);
      }
    }

    else if (v4 == 7 && a1[5])
    {
      unint64_t v5 = 0LL;
      do
        (*(void (**)(uint64_t, void))(a2 + 16))(a2, *(void *)&a1[2 * v5++ + 6]);
      while (v5 < a1[5]);
    }
  }

  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v8, 0x16u);
  }

uint64_t ACMRequirementGetProperty(int *a1, int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMRequirementGetProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  unint64_t v9 = 0LL;
  __int16 v10 = 0LL;
  unsigned int v6 = 70;
  uint64_t v7 = 4294967293LL;
  if (a1 && a3)
  {
    uint64_t v7 = LibCall_ACMRequirementGetPropertyData(a1, a2, &v10, &v9);
    if ((_DWORD)v7)
    {
      unsigned int v6 = 70;
    }

    else
    {
      (*(void (**)(uint64_t, int *, unint64_t))(a3 + 16))(a3, v10, v9);
      unsigned int v6 = 10;
    }
  }

  if (v6 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMRequirementGetProperty";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v7;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v7;
}

uint64_t ACMRequirementGetProperties(int *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    unint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetProperties";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }

  uint64_t v4 = 4294967293LL;
  unsigned int v5 = 70;
  if (a1 && a2)
  {
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 1LL, a1, 4LL);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 2LL, a1 + 1, 4LL);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 3LL, a1 + 2, 4LL);
    uint64_t v4 = 0LL;
    int v6 = *a1;
    unsigned int v5 = 10;
    switch(*a1)
    {
      case 1:
        goto LABEL_10;
      case 2:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 200LL, a1 + 4, 4LL);
        goto LABEL_13;
      case 3:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100LL, a1 + 4, 4LL);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 300LL, a1 + 5, 8LL);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 302LL, a1 + 9, 8LL);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 301LL, a1 + 13, 8LL);
        goto LABEL_13;
      case 4:
      case 5:
      case 6:
        break;
      case 7:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 700LL, a1 + 4, 4LL);
        goto LABEL_13;
      default:
        if (v6 != 20 && v6 != 21) {
          break;
        }
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100LL, a1 + 4, 4LL);
LABEL_13:
        uint64_t v4 = 0LL;
        unsigned int v5 = 10;
        break;
    }
  }

  if (v5 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v8 = 136315650;
    unint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMRequirementGetProperties";
    __int16 v12 = 2048;
    uint64_t v13 = (int)v4;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v8,  0x20u);
  }

  return v4;
}

void ACMGetAclAuthMethod(__n128 *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMGetAclAuthMethod";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v4 = a1;
  LibCall_ACMGetAclAuthMethod_Block((uint64_t)ioKitTransport, (uint64_t)&v4, a1, a2);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMGetAclAuthMethod";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }

uint64_t ACMSetEnvironmentVariable(int a1, const void *a2, size_t a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v11 = "ACMLib";
    __int16 v12 = 2080;
    uint64_t v13 = "ACMSetEnvironmentVariable";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v9 = 0LL;
  uint64_t v6 = LibCall_ACMSetEnvironmentVariable( (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))ioKitTransport,  (uint64_t)&v9,  a1,  0LL,  0LL,  0LL,  a2,  a3);
  if ((_DWORD)v6) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    size_t v11 = "ACMLib";
    __int16 v12 = 2080;
    uint64_t v13 = "ACMSetEnvironmentVariable";
    __int16 v14 = 2048;
    uint64_t v15 = (int)v6;
    __int16 v16 = 1024;
    int v17 = a1;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld, var=%u.\n",  buf,  0x26u);
  }

  return v6;
}

uint64_t ACMSetEnvironmentVariableWithAccessPolicy( int a1, _OWORD *a2, _OWORD *a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v17 = "ACMLib";
    __int16 v18 = 2080;
    uint64_t v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v15 = 0LL;
  uint64_t v12 = LibCall_ACMSetEnvironmentVariable( (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))ioKitTransport,  (uint64_t)&v15,  a1,  a2,  a3,  a4,  a5,  a6);
  if ((_DWORD)v12) {
    unsigned int v13 = 70;
  }
  else {
    unsigned int v13 = 10;
  }
  if (v13 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    int v17 = "ACMLib";
    __int16 v18 = 2080;
    uint64_t v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    __int16 v20 = 2048;
    uint64_t v21 = (int)v12;
    __int16 v22 = 1024;
    int v23 = a1;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld, var=%u.\n",  buf,  0x26u);
  }

  return v12;
}

uint64_t ACMGetEnvironmentVariable(int a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMGetEnvironmentVariable";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v7 = 0LL;
  uint64_t v4 = LibCall_ACMGetEnvironmentVariable_Block( (uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t))ioKitTransport,  (uint64_t)&v7,  a1,  a2);
  if ((_DWORD)v4) {
    unsigned int v5 = 70;
  }
  else {
    unsigned int v5 = 10;
  }
  if (v5 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v9 = "ACMLib";
    __int16 v10 = 2080;
    size_t v11 = "ACMGetEnvironmentVariable";
    __int16 v12 = 2048;
    uint64_t v13 = (int)v4;
    __int16 v14 = 1024;
    int v15 = a1;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld, var=%u.\n",  buf,  0x26u);
  }

  return v4;
}

uint64_t ACMKernelControl(int a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMKernelControl";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v2 = LibCall_ACMKernelControl_Block((uint64_t)ioKitTransport);
  if ((_DWORD)v2) {
    unsigned int v3 = 70;
  }
  else {
    unsigned int v3 = 10;
  }
  if (v3 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    uint64_t v6 = "ACMLib";
    __int16 v7 = 2080;
    int v8 = "ACMKernelControl";
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld, code=%u.\n",  buf,  0x26u);
  }

  return v2;
}

uint64_t ACMSEPControl(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  return LibCall_ACMSEPControl_Block( (uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *))ioKitTransport,  (uint64_t)&v4,  a1,  a2,  0LL,  0LL,  0,  a3);
}

uint64_t ACMSEPControlEx(uint64_t a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t v7 = 0LL;
  return LibCall_ACMSEPControl_Block( (uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *))ioKitTransport,  (uint64_t)&v7,  a4,  a5,  a1,  a2,  a3,  a6);
}

void ACMGlobalContextCredentialGetProperty(int a1, int a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v8 = "ACMLib";
    __int16 v9 = 2080;
    uint64_t v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v6 = 0LL;
  LibCall_ACMGlobalContextCredentialGetProperty_Block((uint64_t)ioKitTransport, (uint64_t)&v6, a1, a2, a3);
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v8 = "ACMLib";
    __int16 v9 = 2080;
    uint64_t v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }

void ACMContextCredentialGetProperty(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v16 = "ACMLib";
    __int16 v17 = 2080;
    __int16 v18 = "ACMContextCredentialGetProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint64_t v10 = 256LL;
  if (a4)
  {
    __int16 v9 = a1;
    uint64_t v8 = LibCall_ACMContextCredentialGetProperty( (uint64_t (*)(uint64_t, uint64_t, void, __n128 *, uint64_t, uint64_t, uint64_t, __n128))ioKitTransport,  (uint64_t)&v9,  a1,  a2,  a3,  (uint64_t)buf,  (uint64_t)&v10);
    (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(a4 + 16))(a4, v8, buf, v10);
  }

  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v11 = 136315394;
    int v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMContextCredentialGetProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", v11, 0x16u);
  }

uint64_t ACMContextSetData(_OWORD *a1, int a2, const void *a3, size_t a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    int v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMContextSetData";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }

  uint64_t v8 = ACMContextSetDataEx(a1, a2, 0LL, 0, a3, a4);
  if ((_DWORD)v8) {
    unsigned int v9 = 70;
  }
  else {
    unsigned int v9 = 10;
  }
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    int v12 = "ACMLib";
    __int16 v13 = 2080;
    __int16 v14 = "ACMContextSetData";
    __int16 v15 = 2048;
    uint64_t v16 = (int)v8;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v11,  0x20u);
  }

  return v8;
}

uint64_t ACMContextSetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, const void *a5, size_t a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v17 = "ACMLib";
    __int16 v18 = 2080;
    uint64_t v19 = "ACMContextSetDataEx";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  __int16 v15 = a1;
  uint64_t v12 = LibCall_ACMContextSetData( (uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, void, void))ioKitTransport,  (uint64_t)&v15,  a1,  a2,  a3,  a4,  a5,  a6);
  if ((_DWORD)v12) {
    unsigned int v13 = 70;
  }
  else {
    unsigned int v13 = 10;
  }
  if (v13 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v17 = "ACMLib";
    __int16 v18 = 2080;
    uint64_t v19 = "ACMContextSetDataEx";
    __int16 v20 = 2048;
    uint64_t v21 = (int)v12;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v12;
}

uint64_t ACMContextGetData(_OWORD *a1, int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    uint64_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextGetData";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v9, 0x16u);
  }

  uint64_t Data = ACMContextGetDataEx(a1, a2, 0LL, 0, a3);
  if ((_DWORD)Data) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v9 = 136315650;
    uint64_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextGetData";
    __int16 v13 = 2048;
    uint64_t v14 = (int)Data;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v9,  0x20u);
  }

  return Data;
}

uint64_t ACMContextGetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int __size_4 = 136315394;
    uint64_t v24 = "ACMLib";
    __int16 v25 = 2080;
    uint64_t v26 = "ACMContextGetDataEx";
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&__size_4,  0x16u);
  }

  unsigned int __size = 0;
  uint64_t v20 = 0LL;
  uint64_t v21 = 4LL;
  uint64_t v19 = a1;
  uint64_t v10 = LibCall_ACMContextGetData( (uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, uint64_t, uint64_t))ioKitTransport,  (uint64_t)&v19,  a1,  a2,  1,  a3,  a4,  (uint64_t)&__size,  (uint64_t)&v21);
  if (!(_DWORD)v10)
  {
    uint64_t v11 = __size;
    if (__size)
    {
      uint64_t v12 = acm_mem_alloc_data(__size);
      acm_mem_alloc_info( "<data>",  v12,  v11,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  1199,  "ACMContextGetDataEx");
      if (!v12)
      {
        unsigned int v16 = 70;
        uint64_t v14 = 4294967292LL;
        goto LABEL_15;
      }

      uint64_t v20 = __size;
      __int16 v18 = a1;
      uint64_t v13 = LibCall_ACMContextGetData( (uint64_t (*)(uint64_t, uint64_t, void, void *, size_t, uint64_t, uint64_t))ioKitTransport,  (uint64_t)&v18,  a1,  a2,  0,  a3,  a4,  (uint64_t)v12,  (uint64_t)&v20);
      uint64_t v14 = v13;
      if (a5 && !(_DWORD)v13) {
        (*(void (**)(uint64_t, void *, uint64_t))(a5 + 16))(a5, v12, v20);
      }
      rsize_t v15 = __size;
      acm_mem_free_info( "<data>",  v12,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  1213,  "ACMContextGetDataEx");
      acm_mem_free_data(v12, v15);
      if ((_DWORD)v14) {
        goto LABEL_11;
      }
    }

    else if (a5)
    {
      (*(void (**)(uint64_t, void, void))(a5 + 16))(a5, 0LL, 0LL);
    }

    uint64_t v14 = 0LL;
    unsigned int v16 = 10;
    goto LABEL_15;
  }

  uint64_t v14 = v10;
LABEL_11:
  unsigned int v16 = 70;
LABEL_15:
  if (v16 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int __size_4 = 136315650;
    uint64_t v24 = "ACMLib";
    __int16 v25 = 2080;
    uint64_t v26 = "ACMContextGetDataEx";
    __int16 v27 = 2048;
    uint64_t v28 = (int)v14;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&__size_4,  0x20u);
  }

  return v14;
}

uint64_t ACMContextGetDataProperty(_OWORD *a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextGetDataProperty";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }

  uint64_t Data = ACMContextGetData(a1, a2 | (a3 << 16), a4);
  if ((_DWORD)Data) {
    unsigned int v9 = 70;
  }
  else {
    unsigned int v9 = 10;
  }
  if (v9 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    int v11 = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextGetDataProperty";
    __int16 v15 = 2048;
    uint64_t v16 = (int)Data;
    _os_log_impl( &dword_189219000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v11,  0x20u);
  }

  return Data;
}

uint64_t ACMContextGetInfo(__int128 *a1, int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v11 = "ACMLib";
    __int16 v12 = 2080;
    __int16 v13 = "ACMContextGetInfo";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  unsigned int v9 = a1;
  uint64_t v6 = LibCall_ACMContextGetInfo( (uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, _OWORD *, unint64_t *))ioKitTransport,  (uint64_t)&v9,  a1,  a2,  a3);
  if ((_DWORD)v6) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  if (v7 >= _logLevel && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v11 = "ACMLib";
    __int16 v12 = 2080;
    __int16 v13 = "ACMContextGetInfo";
    __int16 v14 = 2048;
    uint64_t v15 = (int)v6;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }

  return v6;
}

uint64_t ACMPing()
{
  uint64_t v1 = 0LL;
  return LibCall_ACMPing( (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))ioKitTransport,  (uint64_t)&v1,  29LL);
}

void updateLogLevelFromKext()
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (_logLevel <= 0xAu && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v5 = "ACMLib";
    __int16 v6 = 2080;
    unsigned int v7 = "updateLogLevelFromKext";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }

  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(_connect, 2u, 0LL, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  _logLevel = output;
  if (output <= 0x1EuLL && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v5 = "ACMLib";
    __int16 v6 = 2080;
    unsigned int v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    unsigned int v1 = _logLevel;
  }

  if (v1 <= 0xA && os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v5 = "ACMLib";
    __int16 v6 = 2080;
    unsigned int v7 = "updateLogLevelFromKext";
    _os_log_impl(&dword_189219000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  __int16 v12 = 0LL;
  if (a5) {
    BOOL v13 = a4 == 0LL;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8LL)
    {
      __int16 v12 = 0LL;
    }

    else
    {
      __int16 v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info( "<data>",  v12,  a5 + 8,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  22,  "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)__int16 v12 = 1396920900;
        void v12[4] = a1;
        v12[5] = a2;
        void v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }

  return v12;
}

uint64_t LibCall_ACMContextCreate( uint64_t (*a1)(uint64_t, uint64_t, void, void, void, _BYTE *, uint64_t *), uint64_t a2, void *a3, _BYTE *a4, int a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293LL;
  if (!a1 || !a3) {
    goto LABEL_25;
  }
  __int16 v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info( "ACMHandleWithPayload",  v12,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  50,  "LibCall_ACMContextCreate");
  if (!v12)
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967292LL;
    goto LABEL_25;
  }

  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    uint64_t v18 = 21LL;
    uint64_t v13 = a1(a2, 36LL, 0LL, 0LL, 0LL, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        uint64_t v11 = 4294967291LL;
        goto LABEL_23;
      }

      uint64_t v11 = 0LL;
      goto LABEL_20;
    }

    uint64_t v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info( "ACMHandleWithPayload",  v12,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  89,  "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      unsigned int v10 = 70;
      goto LABEL_25;
    }
  }

  uint64_t v18 = 17LL;
  unsigned int v14 = a1(a2, 1LL, 0LL, 0LL, 0LL, v19, &v18);
  if (v18 == 17) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = -5;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v15;
  }
  if (!v14 && v18 == 17)
  {
LABEL_20:
    int v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)__int16 v12 = *(_OWORD *)v19;
    void v12[4] = v16;
    *a3 = v12;
    if (a4) {
      *a4 = v19[16];
    }
  }

  if ((_DWORD)v11) {
    goto LABEL_23;
  }
  unsigned int v10 = 10;
LABEL_25:
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  __int16 v12 = 0LL;
  unsigned int v13 = 70;
  int v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      uint64_t v20 = 9LL;
      int v15 = a1(a2, 37LL, 0LL, a3, 16LL, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          int v14 = 0;
          goto LABEL_19;
        }

        int v14 = -5;
        goto LABEL_28;
      }

      int v14 = v15;
      if (v15 != -3) {
        goto LABEL_28;
      }
    }

    uint64_t v20 = 5LL;
    int v16 = a1(a2, 18LL, 0LL, a3, 16LL, v21, &v20);
    if (v20 == 5) {
      int v17 = 0;
    }
    else {
      int v17 = -5;
    }
    if (v16) {
      int v14 = v16;
    }
    else {
      int v14 = v17;
    }
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        __int16 v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info( "ACMHandleWithPayload",  v12,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  128,  "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          unsigned int v13 = 70;
          int v14 = -4;
          goto LABEL_31;
        }

        int v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)__int16 v12 = *a3;
        void v12[4] = v18;
        if (a5) {
          *a5 = BYTE4(v21[0]);
        }
        if (v14)
        {
          acm_mem_free_info( "ACMHandleWithPayload",  v12,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  147,  "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          unsigned int v13 = 70;
          goto LABEL_31;
        }
      }

      else
      {
        __int16 v12 = 0LL;
      }

      goto LABEL_30;
    }

uint64_t LibCall_ACMContextDelete( void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2LL, 0LL, a3, 16LL, 0LL, 0LL);
    }
    goto LABEL_7;
  }

  if (a3)
  {
LABEL_7:
    acm_mem_free_info( "ACMHandleWithPayload",  a3,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  172,  "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0LL;
    unsigned int v9 = 10;
    goto LABEL_8;
  }

  unsigned int v9 = 70;
  uint64_t v8 = 4294967293LL;
LABEL_8:
  return v8;
}

uint64_t LibCall_ACMContexAddCredentialWithScope( uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, void, void), uint64_t a2, _OWORD *a3, unsigned int *a4, int a5)
{
  size_t __size = 0LL;
  if (a3) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a5 == 2;
  }
  char v11 = !v10;
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293LL;
  if (a4 && (v11 & 1) == 0)
  {
    uint64_t SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a3, a4, a5, &__size);
    if ((_DWORD)SerializedAddCredentialSize)
    {
      uint64_t v13 = SerializedAddCredentialSize;
      unsigned int v12 = 70;
    }

    else
    {
      size_t v15 = __size;
      int v16 = acm_mem_alloc_data(__size);
      acm_mem_alloc_info( "<data>",  v16,  v15,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  192,  "LibCall_ACMContexAddCredentialWithScope");
      if (v16)
      {
        uint64_t v17 = SerializeAddCredential(a3, a4, a5, (uint64_t)v16, &__size);
        if (!(_DWORD)v17) {
          uint64_t v17 = a1(a2, 5LL, 0LL, v16, __size, 0LL, 0LL);
        }
        uint64_t v13 = v17;
        rsize_t v18 = __size;
        acm_mem_free_info( "<data>",  v16,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  203,  "LibCall_ACMContexAddCredentialWithScope");
        acm_mem_free_data(v16, v18);
        if ((_DWORD)v13) {
          unsigned int v12 = 70;
        }
        else {
          unsigned int v12 = 10;
        }
      }

      else
      {
        unsigned int v12 = 70;
        uint64_t v13 = 4294967292LL;
      }
    }
  }

  return v13;
}

uint64_t LibCall_ACMContexRemoveCredentialsByTypeAndScope( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void, void), uint64_t a2, _OWORD *a3, int a4, int a5)
{
  if (a3 || a5 == 2)
  {
    BOOL v10 = acm_mem_alloc_data(0x18uLL);
    acm_mem_alloc_info( "<data>",  v10,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  217,  "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
    if (v10)
    {
      if (a3)
      {
        *BOOL v10 = *a3;
      }

      else
      {
        *(void *)BOOL v10 = 0LL;
        *((void *)v10 + 1) = 0LL;
      }

      *((_DWORD *)v10 + 4) = a4;
      *((_DWORD *)v10 + 5) = a5;
      uint64_t v11 = a1(a2, 9LL, 0LL, v10, 24LL, 0LL, 0LL);
      acm_mem_free_info( "<data>",  v10,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  233,  "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
      acm_mem_free_data(v10, 0x18uLL);
      if ((_DWORD)v11) {
        unsigned int v12 = 70;
      }
      else {
        unsigned int v12 = 10;
      }
    }

    else
    {
      unsigned int v12 = 70;
      uint64_t v11 = 4294967292LL;
    }
  }

  else
  {
    unsigned int v12 = 70;
    uint64_t v11 = 4294967293LL;
  }

  return v11;
}

uint64_t LibCall_ACMContextRemoveCredentialsByValueAndScope( uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, void, void), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  size_t __size = 0LL;
  if (a3) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (_DWORD)a5 == 2;
  }
  char v11 = !v10;
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293LL;
  if (a4 && (v11 & 1) == 0)
  {
    uint64_t v14 = GetSerializedRemoveCredentialSize(a3, a4, a5, &__size);
    if ((_DWORD)v14)
    {
      uint64_t v13 = v14;
      unsigned int v12 = 70;
    }

    else
    {
      size_t v15 = __size;
      int v16 = acm_mem_alloc_data(__size);
      acm_mem_alloc_info( "<data>",  v16,  v15,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  251,  "LibCall_ACMContextRemoveCredentialsByValueAndScope");
      if (v16)
      {
        uint64_t v17 = SerializeRemoveCredential(a3, a4, a5, v16, &__size);
        if (!(_DWORD)v17) {
          uint64_t v17 = a1(a2, 6LL, 0LL, v16, __size, 0LL, 0LL);
        }
        uint64_t v13 = v17;
        rsize_t v18 = __size;
        acm_mem_free_info( "<data>",  v16,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  264,  "LibCall_ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v16, v18);
        if ((_DWORD)v13) {
          unsigned int v12 = 70;
        }
        else {
          unsigned int v12 = 10;
        }
      }

      else
      {
        unsigned int v12 = 70;
        uint64_t v13 = 4294967292LL;
      }
    }
  }

  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyAndCopyRequirementEx( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, void *a10)
{
  size_t v32 = 0LL;
  size_t __size = 0LL;
  __int16 v30 = 0LL;
  unint64_t v31 = 4096LL;
  unsigned int v18 = 70;
  uint64_t v19 = 4294967293LL;
  size_t v29 = 0LL;
  if (a1 && a3 && __s1 && a9)
  {
    if ((a6 != 0LL) != (a7 != 0))
    {
      unsigned int v18 = 70;
      uint64_t v19 = 4294967293LL;
    }

    else
    {
      uint64_t SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &__size);
      if ((_DWORD)SerializedVerifyPolicySize)
      {
        uint64_t v19 = SerializedVerifyPolicySize;
        unsigned int v18 = 70;
      }

      else
      {
        size_t v21 = __size;
        uint64_t v22 = acm_mem_alloc_data(__size);
        acm_mem_alloc_info( "<data>",  v22,  v21,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  293,  "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
        if (v22)
        {
          size_t v32 = __size;
          uint64_t v23 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v22, &v32);
          if ((_DWORD)v23)
          {
            uint64_t v19 = v23;
            uint64_t v24 = 0LL;
          }

          else
          {
            uint64_t v24 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
            acm_mem_alloc_info( "<data>",  v24,  4096LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  300,  "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            if (v24)
            {
              uint64_t v25 = a1(a2, 3LL, 0LL, v22, v32, v24, &v31);
              if ((_DWORD)v25)
              {
                uint64_t v19 = v25;
              }

              else
              {
                unint64_t v26 = v31 - 4;
                if (v31 < 4)
                {
                  uint64_t v19 = 4294967291LL;
                }

                else
                {
                  *a9 = *v24 != 0;
                  if (a10)
                  {
                    uint64_t v19 = DeserializeRequirement(v24 + 1, v26, &v30, &v29);
                    if (!(_DWORD)v19) {
                      *a10 = v30;
                    }
                  }

                  else
                  {
                    uint64_t v19 = 0LL;
                  }
                }
              }
            }

            else
            {
              uint64_t v19 = 4294967292LL;
            }
          }

          rsize_t v27 = __size;
          acm_mem_free_info( "<data>",  v22,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  324,  "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
          acm_mem_free_data(v22, v27);
          if (v24)
          {
            acm_mem_free_info( "<data>",  v24,  0x1000uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  327,  "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            acm_mem_free_data(v24, 0x1000uLL);
          }

          if ((_DWORD)v19) {
            unsigned int v18 = 70;
          }
          else {
            unsigned int v18 = 10;
          }
        }

        else
        {
          unsigned int v18 = 70;
          uint64_t v19 = 4294967292LL;
        }
      }
    }
  }

  return v19;
}

uint64_t LibCall_ACMRequirementDelete(uint64_t a1, int *a2)
{
  unsigned int v4 = 70;
  uint64_t v5 = 4294967293LL;
  if (a1 && a2)
  {
    uint64_t v5 = Util_DeallocRequirement(a2);
    if ((_DWORD)v5) {
      unsigned int v4 = 70;
    }
    else {
      unsigned int v4 = 10;
    }
  }

  return v5;
}

uint64_t LibCall_ACMKernelControl( uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1;
  v20[1] = *MEMORY[0x1895F89C0];
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))printf( "%s: %s: called.\n",  "ACM",  "LibCall_ACMKernelControl");
  }
  if (!v13) {
    goto LABEL_16;
  }
  BOOL v14 = a5 != 0;
  if (a4) {
    BOOL v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000LL;
  }
  if (v14)
  {
LABEL_16:
    unsigned int v18 = 70;
    uint64_t v17 = 4294967293LL;
  }

  else
  {
    v20[0] = v20;
    MEMORY[0x1895F8858](a1);
    size_t v15 = (_DWORD *)((char *)v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0LL));
    _DWORD *v15 = a3;
    int v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      int v16 = (_DWORD *)((char *)v16 + a5);
    }

    uint64_t v17 = v13(a2, 26LL, 0LL, (char *)v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0LL), a5 + 4, a6, a7);
    if ((_DWORD)v17) {
      unsigned int v18 = 70;
    }
    else {
      unsigned int v18 = 10;
    }
  }

  return v17;
}

_DWORD *LibCall_ACMCredentialDelete(_DWORD *a1)
{
  if (a1) {
    return (_DWORD *)Util_DeallocCredential(a1);
  }
  return a1;
}

unsigned int *LibCall_ACMCredentialGetType(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t LibCall_ACMCredentialSetProperty(int *a1, int a2, _OWORD *__src, size_t __n)
{
  if (!a1) {
    return 4294967293LL;
  }
  int v4 = __n;
  if ((__src != 0LL) != (__n != 0)) {
    return 4294967293LL;
  }
  uint64_t result = 4294967293LL;
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 <= 801)
      {
        if (a2 != 602)
        {
          if (a2 == 701)
          {
            if (__n <= 0x80 && *a1 == 13)
            {
              a1[8] = __n;
              BOOL v14 = a1 + 9;
LABEL_118:
              memcpy(v14, __src, __n);
              return 0LL;
            }
          }

          else if (a2 == 801 && __n == 16 && *a1 == 17)
          {
            uint64_t result = 0LL;
            *((_OWORD *)a1 + 2) = *__src;
          }

          return result;
        }

        BOOL v13 = *a1 == 12 || *a1 == 15;
        if (__n != 4 || !v13) {
          return result;
        }
LABEL_79:
        uint64_t result = 0LL;
        a1[9] = *(_DWORD *)__src;
        return result;
      }

      if (a2 == 802)
      {
        if (__n != 65 || *a1 != 17) {
          return result;
        }
        uint64_t result = 0LL;
        *((_OWORD *)a1 + 3) = *__src;
        __int128 v11 = __src[1];
        __int128 v16 = __src[2];
        __int128 v17 = __src[3];
        *((_BYTE *)a1 + 112) = *((_BYTE *)__src + 64);
        *((_OWORD *)a1 + 5) = v16;
        *((_OWORD *)a1 + 6) = v17;
        goto LABEL_92;
      }

      if (a2 != 901)
      {
        if (a2 == 1001 && __n <= 0x80 && *a1 == 21)
        {
          memcpy(a1 + 9, __src, __n);
          uint64_t result = 0LL;
          a1[8] = v4;
        }

        return result;
      }

      if (__n != 32 || *a1 != 20) {
        return result;
      }
    }

    else
    {
      if (a2 > 501)
      {
        switch(a2)
        {
          case 502:
            if (__n == 16 && *a1 == 10)
            {
LABEL_102:
              uint64_t result = 0LL;
              *(_OWORD *)(a1 + 13) = *__src;
            }

            break;
          case 503:
            if (__n == 16 && *a1 == 10)
            {
              uint64_t result = 0LL;
              __int128 v15 = *__src;
LABEL_99:
              *(_OWORD *)(a1 + 17) = v15;
            }

            break;
          case 601:
            BOOL v9 = *a1 == 12 || *a1 == 15;
            BOOL v10 = v9;
            if (__n == 4 && v10)
            {
LABEL_64:
              uint64_t result = 0LL;
              a1[8] = *(_DWORD *)__src;
            }

            break;
        }

        return result;
      }

      if (a2 != 400)
      {
        if (a2 != 401)
        {
          if (a2 == 501 && __n == 16 && *a1 == 10)
          {
LABEL_16:
            uint64_t result = 0LL;
            *(_OWORD *)(a1 + 9) = *__src;
          }

          return result;
        }

        if (__n != 24 || *a1 != 7) {
          return result;
        }
        uint64_t result = 0LL;
        __int128 v11 = *__src;
        *((void *)a1 + 10) = *((void *)__src + 2);
LABEL_92:
        *((_OWORD *)a1 + 4) = v11;
        return result;
      }

      if (__n != 32 || *a1 != 7) {
        return result;
      }
    }

    uint64_t result = 0LL;
    __int128 v18 = __src[1];
    *((_OWORD *)a1 + 2) = *__src;
    *((_OWORD *)a1 + 3) = v18;
    return result;
  }

  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (__n == 16 && *a1 == 3) {
          goto LABEL_16;
        }
        break;
      case 301:
        if (__n == 32 && *a1 == 3)
        {
          uint64_t result = 0LL;
          __int128 v15 = *__src;
          *(_OWORD *)(a1 + 21) = __src[1];
          goto LABEL_99;
        }

        break;
      case 302:
        if (__n == 16 && *a1 == 3) {
          goto LABEL_102;
        }
        break;
      case 303:
        if (__n == 65 && *a1 == 3)
        {
          uint64_t result = 0LL;
          *(_OWORD *)(a1 + 30) = *__src;
          __int128 v19 = __src[1];
          __int128 v20 = __src[2];
          __int128 v21 = __src[3];
          *((_BYTE *)a1 + 184) = *((_BYTE *)__src + 64);
          *(_OWORD *)(a1 + 42) = v21;
          *(_OWORD *)(a1 + 3_Block_object_dispose(va, 8) = v20;
          *(_OWORD *)(a1 + 34) = v19;
        }

        break;
      case 304:
        if (__n == 16 && *a1 == 3)
        {
          uint64_t result = 0LL;
          *(_OWORD *)((char *)a1 + 185) = *__src;
        }

        break;
      case 305:
        if (__n == 4 && *a1 == 3)
        {
          uint64_t result = 0LL;
          *(int *)((char *)a1 + 201) = *(_DWORD *)__src;
        }

        break;
      case 306:
        if (__n <= 0x80 && *a1 == 3)
        {
          memcpy((char *)a1 + 209, __src, __n);
          uint64_t result = 0LL;
          *(int *)((char *)a1 + 205) = v4;
        }

        break;
      default:
        if (a2 == 200)
        {
          if (__n <= 0x80 && *a1 == 2)
          {
            a1[9] = __n;
            BOOL v14 = a1 + 10;
            goto LABEL_118;
          }
        }

        else if (a2 == 201 && __n == 4 && *a1 == 2)
        {
          goto LABEL_64;
        }

        break;
    }

    return result;
  }

  if (a2 > 100)
  {
    if (a2 == 101)
    {
      if (__n == 4)
      {
        switch(*a1)
        {
          case 1:
          case 3:
          case 9:
          case 10:
            goto LABEL_64;
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return result;
          default:
            if (*a1 == 18) {
              goto LABEL_64;
            }
            break;
        }
      }

      return result;
    }

    if (a2 != 102 || __n != 4 || *a1 != 1) {
      return result;
    }
    goto LABEL_79;
  }

  if (a2 == 5)
  {
    if (__n == 4)
    {
      uint64_t result = 0LL;
      a1[3] = *(_DWORD *)__src;
    }
  }

  else if (a2 == 100 && __n == 16)
  {
    int v7 = *a1;
    if (*a1 > 8)
    {
      if (v7 == 9)
      {
        uint64_t v8 = a1 + 10;
        a1[9] = 16;
      }

      else
      {
        if (v7 != 18) {
          return result;
        }
        uint64_t v8 = a1 + 9;
      }
    }

    else if (v7 == 1)
    {
      uint64_t v8 = a1 + 11;
      a1[10] = 16;
    }

    else
    {
      if (v7 != 3) {
        return result;
      }
      uint64_t v8 = a1 + 26;
      a1[25] = 16;
    }

    uint64_t result = 0LL;
    _OWORD *v8 = *__src;
  }

  return result;
}

uint64_t LibCall_ACMCredentialGetPropertyData(int *a1, int a2, int **a3, uint64_t *a4)
{
  uint64_t result = 4294967293LL;
  if (!a1 || !a3 || !a4) {
    return result;
  }
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 > 801)
      {
        if (a2 == 802)
        {
          if (*a1 != 17) {
            return result;
          }
          __int128 v11 = a1 + 12;
LABEL_87:
          uint64_t v12 = 65LL;
          BOOL v13 = v11;
          uint64_t v14 = 65LL;
        }

        else
        {
          if (a2 != 901)
          {
            if (a2 != 1001 || *a1 != 21) {
              return result;
            }
            __int128 v15 = a1 + 9;
            if (Util_isNullOrZeroMemory((_BYTE *)a1 + 36, 128LL))
            {
              __int128 v15 = 0LL;
              uint64_t v10 = 0LL;
            }

            else
            {
              uint64_t v10 = a1[8];
            }

            uint64_t result = 0LL;
            *a3 = v15;
LABEL_99:
            *a4 = v10;
            return result;
          }

          if (*a1 != 20) {
            return result;
          }
          __int128 v11 = a1 + 8;
          uint64_t v12 = 32LL;
          BOOL v13 = v11;
          uint64_t v14 = 32LL;
        }
      }

      else
      {
        if (a2 == 602)
        {
          if (*a1 != 15 && *a1 != 12) {
            return result;
          }
          goto LABEL_61;
        }

        if (a2 == 701)
        {
          if (*a1 != 13) {
            return result;
          }
          uint64_t result = 0LL;
          *a3 = a1 + 9;
          uint64_t v10 = a1[8];
          goto LABEL_99;
        }

        if (a2 != 801 || *a1 != 17) {
          return result;
        }
        __int128 v11 = a1 + 8;
        uint64_t v12 = 16LL;
        BOOL v13 = v11;
        uint64_t v14 = 16LL;
      }

      BOOL isNullOrZeroMemory = Util_isNullOrZeroMemory(v13, v14);
      uint64_t result = 0LL;
      BOOL v20 = !isNullOrZeroMemory;
      if (isNullOrZeroMemory) {
        __int128 v21 = 0LL;
      }
      else {
        __int128 v21 = (int *)v11;
      }
      if (v20) {
        uint64_t v22 = v12;
      }
      else {
        uint64_t v22 = 0LL;
      }
      *a3 = v21;
      *a4 = v22;
      return result;
    }

    if (a2 > 501)
    {
      if (a2 == 502)
      {
        if (*a1 != 10) {
          return result;
        }
        BOOL v9 = a1 + 13;
      }

      else
      {
        if (a2 != 503)
        {
          if (a2 != 601 || *a1 != 15 && *a1 != 12) {
            return result;
          }
          goto LABEL_77;
        }

        if (*a1 != 10) {
          return result;
        }
        BOOL v9 = a1 + 17;
      }

LABEL_68:
      *a3 = v9;
      uint64_t result = Util_isNullOrZeroMemory(v9, 16LL);
      if ((_DWORD)result)
      {
        uint64_t result = 0LL;
        *a4 = 0LL;
        *a3 = 0LL;
        return result;
      }

LABEL_70:
      uint64_t v10 = 16LL;
      goto LABEL_99;
    }

    if (a2 == 400)
    {
      if (*a1 != 7) {
        return result;
      }
      uint64_t result = 0LL;
      __int128 v16 = a1 + 8;
LABEL_84:
      *a3 = v16;
      uint64_t v10 = 32LL;
      goto LABEL_99;
    }

    if (a2 == 401)
    {
      if (*a1 != 7) {
        return result;
      }
      uint64_t result = 0LL;
      *a3 = a1 + 16;
      uint64_t v10 = 24LL;
      goto LABEL_99;
    }

    if (a2 != 501 || *a1 != 10) {
      return result;
    }
LABEL_15:
    BOOL v9 = a1 + 9;
    goto LABEL_68;
  }

  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (*a1 == 3)
        {
          uint64_t result = 0LL;
          uint64_t v8 = a1 + 9;
          goto LABEL_50;
        }

        break;
      case 301:
        if (*a1 == 3)
        {
          uint64_t result = 0LL;
          __int128 v16 = a1 + 17;
          goto LABEL_84;
        }

        break;
      case 302:
        if (*a1 == 3)
        {
          uint64_t result = 0LL;
          uint64_t v8 = a1 + 13;
          goto LABEL_50;
        }

        break;
      case 303:
        if (*a1 == 3)
        {
          __int128 v11 = a1 + 30;
          goto LABEL_87;
        }

        break;
      case 304:
        if (*a1 == 3)
        {
          uint64_t result = 0LL;
          uint64_t v8 = (int *)((char *)a1 + 185);
LABEL_50:
          *a3 = v8;
          goto LABEL_70;
        }

        break;
      case 305:
        if (*a1 == 3)
        {
          uint64_t result = 0LL;
          __int128 v17 = (int *)((char *)a1 + 201);
          goto LABEL_97;
        }

        break;
      case 306:
        if (*a1 == 3)
        {
          uint64_t result = 0LL;
          uint64_t v10 = *(unsigned int *)((char *)a1 + 205);
          uint64_t v23 = (int *)((char *)a1 + 209);
          *a3 = v23;
          goto LABEL_99;
        }

        break;
      default:
        if (a2 == 200)
        {
          if (*a1 == 2)
          {
            uint64_t result = 0LL;
            *a3 = a1 + 10;
            uint64_t v10 = a1[9];
            goto LABEL_99;
          }
        }

        else if (a2 == 201 && *a1 == 2)
        {
          goto LABEL_77;
        }

        break;
    }

    return result;
  }

  if (a2 > 99)
  {
    if (a2 != 100)
    {
      if (a2 != 101)
      {
        if (a2 != 102 || *a1 != 1) {
          return result;
        }
LABEL_61:
        uint64_t result = 0LL;
        __int128 v17 = a1 + 9;
        goto LABEL_97;
      }

LABEL_77:
      uint64_t result = 0LL;
      __int128 v17 = a1 + 8;
LABEL_97:
      *a3 = v17;
LABEL_98:
      uint64_t v10 = 4LL;
      goto LABEL_99;
    }

    int v18 = *a1;
    if (*a1 <= 8)
    {
      if (v18 == 1)
      {
        BOOL v9 = a1 + 11;
      }

      else
      {
        if (v18 != 3) {
          return result;
        }
        BOOL v9 = a1 + 26;
      }

      goto LABEL_68;
    }

    if (v18 == 9)
    {
      BOOL v9 = a1 + 10;
      goto LABEL_68;
    }

    if (v18 != 18) {
      return result;
    }
    goto LABEL_15;
  }

  switch(a2)
  {
    case 1:
      uint64_t result = 0LL;
      *a3 = a1 + 4;
      uint64_t v10 = 8LL;
      goto LABEL_99;
    case 2:
      uint64_t result = 0LL;
      __int128 v17 = a1 + 6;
      goto LABEL_97;
    case 3:
      uint64_t result = 0LL;
      *a3 = a1;
      goto LABEL_98;
    case 4:
      uint64_t result = 0LL;
      __int128 v17 = a1 + 1;
      goto LABEL_97;
    case 5:
      uint64_t result = 0LL;
      __int128 v17 = a1 + 3;
      goto LABEL_97;
    default:
      return result;
  }

  return result;
}

unsigned int *LibCall_ACMRequirementGetType(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t LibCall_ACMRequirementGetState(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t LibCall_ACMRequirementGetPriority(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t LibCall_ACMRequirementGetPropertyData(int *a1, int a2, int **a3, unint64_t *a4)
{
  uint64_t v4 = 4294967293LL;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  uint64_t v4 = 4294967293LL;
  if (a2 > 399)
  {
    if (a2 > 600)
    {
      if (a2 == 601)
      {
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            int v7 = a1 + 7;
LABEL_45:
            *a3 = v7;
            unint64_t v10 = 16LL;
            goto LABEL_72;
          }

          return 4294967282LL;
        }

        return 4294967293LL;
      }

      if (a2 != 602)
      {
        if (a2 != 700) {
          return v4;
        }
        if (*a1 == 7)
        {
LABEL_28:
          uint64_t v8 = a1 + 4;
          goto LABEL_58;
        }

        return 4294967293LL;
      }

      if (*a1 != 26) {
        return 4294967293LL;
      }
      *a3 = a1 + 4;
      unint64_t v10 = 8LL;
    }

    else
    {
      if (a2 == 400)
      {
        if (*a1 == 13)
        {
          BOOL v9 = a1 + 4;
LABEL_64:
          *a3 = v9;
          unint64_t v10 = 32LL;
          goto LABEL_72;
        }

        return 4294967293LL;
      }

      if (a2 != 500)
      {
        if (a2 != 600) {
          return v4;
        }
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            uint64_t v8 = a1 + 6;
LABEL_58:
            *a3 = v8;
            goto LABEL_59;
          }

          return 4294967282LL;
        }

        return 4294967293LL;
      }

      if (*a1 != 25) {
        return 4294967293LL;
      }
      *a3 = a1 + 4;
      unint64_t v10 = 43LL;
    }

LABEL_72:
    uint64_t v4 = 0LL;
    *a4 = v10;
    return v4;
  }

  if (a2 > 99)
  {
    switch(a2)
    {
      case 300:
        if (*a1 != 3) {
          return 4294967293LL;
        }
        int v7 = a1 + 5;
        goto LABEL_45;
      case 301:
        if (*a1 != 3) {
          return 4294967293LL;
        }
        BOOL v9 = a1 + 13;
        goto LABEL_64;
      case 302:
        if (*a1 != 3) {
          return 4294967293LL;
        }
        int v7 = a1 + 9;
        goto LABEL_45;
      case 303:
        if (*a1 != 3) {
          return 4294967293LL;
        }
        unint64_t v10 = 0LL;
        __int128 v11 = a1 + 21;
        break;
      case 304:
        if (*a1 != 3) {
          return 4294967293LL;
        }
        uint64_t v8 = a1 + 41;
        goto LABEL_58;
      case 305:
        if (*a1 != 3) {
          return 4294967293LL;
        }
        uint64_t v8 = a1 + 42;
        goto LABEL_58;
      case 306:
        if (*a1 != 24) {
          return 4294967293LL;
        }
        *a3 = a1 + 5;
        unint64_t v10 = a1[4];
        goto LABEL_72;
      case 307:
        if (*a1 != 24) {
          return 4294967293LL;
        }
        BOOL v9 = a1 + 261;
        goto LABEL_64;
      default:
        if (a2 == 100)
        {
          int v13 = *a1;
          if (*a1 > 19)
          {
            if (v13 == 20 || v13 == 21) {
              goto LABEL_28;
            }
          }

          else if (v13 == 1 || v13 == 3)
          {
            goto LABEL_28;
          }

          return v4;
        }

        if (a2 != 200) {
          return v4;
        }
        if (*a1 != 2) {
          return 4294967293LL;
        }
        goto LABEL_28;
    }

    while (!Util_isNullOrZeroMemory((_BYTE *)v11 + v10, 16LL))
    {
      BOOL v12 = v10 >= 0x40;
      v10 += 16LL;
      if (v12)
      {
        unint64_t v10 = 80LL;
        goto LABEL_71;
      }
    }

    if (!v10) {
      __int128 v11 = 0LL;
    }
LABEL_71:
    *a3 = v11;
    goto LABEL_72;
  }

  switch(a2)
  {
    case 1:
      *a3 = a1;
LABEL_59:
      unint64_t v10 = 4LL;
      goto LABEL_72;
    case 2:
      uint64_t v8 = a1 + 1;
      goto LABEL_58;
    case 3:
      uint64_t v8 = a1 + 2;
      goto LABEL_58;
  }

  return v4;
}

uint64_t LibCall_ACMPing( uint64_t (*a1)(uint64_t, uint64_t, void, void, void, void, void), uint64_t a2, uint64_t a3)
{
  unsigned int v6 = 70;
  if (a1 && ((_DWORD)a3 == 47 || (_DWORD)a3 == 29))
  {
    uint64_t v7 = a1(a2, a3, 0LL, 0LL, 0LL, 0LL, 0LL);
    if ((_DWORD)v7) {
      unsigned int v6 = 70;
    }
    else {
      unsigned int v6 = 10;
    }
  }

  else
  {
    uint64_t v7 = 4294967293LL;
  }

  return v7;
}

uint64_t LibCall_ACMKernDoubleClickNotify( uint64_t (*a1)(uint64_t, uint64_t, void, void, void, void, void), uint64_t a2)
{
  unsigned int v4 = 70;
  if (a1)
  {
    uint64_t v5 = a1(a2, 28LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    if ((_DWORD)v5) {
      unsigned int v4 = 70;
    }
    else {
      unsigned int v4 = 10;
    }
  }

  else
  {
    uint64_t v5 = 4294967293LL;
  }

  return v5;
}

uint64_t LibCall_ACMContextCredentialGetProperty( uint64_t (*a1)(uint64_t, uint64_t, void, __n128 *, uint64_t, uint64_t, uint64_t, __n128), uint64_t a2, __n128 *a3, unsigned __int32 a4, unsigned __int32 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unsigned int v14 = 70;
  uint64_t v15 = 4294967293LL;
  if (a1)
  {
    if (a3)
    {
      uint64_t v15 = 4294967293LL;
      if (a6)
      {
        if (a7)
        {
          uint64_t v19 = 24LL;
          __n128 Property_Serialize = LibSer_ContextCredentialGetProperty_Serialize(a3, a4, a5, &v20, &v19);
          if ((_DWORD)v16)
          {
            uint64_t v15 = v16;
          }

          else if (v19 == 24)
          {
            uint64_t v15 = a1(a2, 33LL, 0LL, &v20, 24LL, a6, a7, Property_Serialize);
            if (!(_DWORD)v15)
            {
              unsigned int v14 = 10;
              goto LABEL_11;
            }
          }

          else
          {
            uint64_t v15 = 4294967291LL;
          }

          unsigned int v14 = 70;
        }
      }
    }
  }

uint64_t LibCall_ACMGlobalContextCredentialGetProperty( uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unsigned int v12 = 70;
  uint64_t v13 = 4294967293LL;
  if (a1 && a5 && a6)
  {
    uint64_t v16 = 8LL;
    uint64_t Property_Serialize = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v17, &v16);
    if ((_DWORD)Property_Serialize)
    {
      uint64_t v13 = Property_Serialize;
    }

    else if (v16 == 8)
    {
      uint64_t v13 = a1(a2, 27LL, 0LL, &v17, 8LL, a5, a6);
      if (!(_DWORD)v13)
      {
        unsigned int v12 = 10;
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v13 = 4294967291LL;
    }

    unsigned int v12 = 70;
  }

uint64_t LibCall_ACMContextVerifyPolicyEx( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, int **a10)
{
  unint64_t v31 = 4096LL;
  size_t __size = 0LL;
  size_t v29 = 0LL;
  __int16 v30 = 0LL;
  uint64_t v18 = 4294967293LL;
  if (!a3 || !__s1 || !a9)
  {
LABEL_18:
    if (!(_DWORD)v18) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }

  uint64_t SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &__size);
  if (!(_DWORD)SerializedVerifyPolicySize)
  {
    size_t v20 = __size;
    uint64_t v21 = acm_mem_alloc_data(__size);
    acm_mem_alloc_info( "<data>",  v21,  v20,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1257,  "LibCall_ACMContextVerifyPolicyEx");
    if (v21)
    {
      uint64_t v22 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v21, &__size);
      if ((_DWORD)v22)
      {
        uint64_t v18 = v22;
        uint64_t v23 = 0LL;
      }

      else
      {
        uint64_t v23 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info( "<data>",  v23,  4096LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1263,  "LibCall_ACMContextVerifyPolicyEx");
        if (v23)
        {
          uint64_t v24 = a1(a2, 3LL, 0LL, v21, __size, v23, &v31);
          if ((_DWORD)v24)
          {
            uint64_t v18 = v24;
          }

          else
          {
            unint64_t v25 = v31 - 4;
            if (v31 < 4)
            {
              uint64_t v18 = 4294967291LL;
            }

            else
            {
              *a9 = *v23 != 0;
              if (a10)
              {
                uint64_t v18 = DeserializeRequirement(v23 + 1, v25, (void **)&v30, &v29);
                if (!(_DWORD)v18) {
                  *a10 = v30;
                }
              }

              else
              {
                uint64_t v18 = 0LL;
              }
            }
          }
        }

        else
        {
          uint64_t v18 = 4294967292LL;
        }
      }

      rsize_t v26 = __size;
      acm_mem_free_info( "<data>",  v21,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1288,  "LibCall_ACMContextVerifyPolicyEx");
      acm_mem_free_data(v21, v26);
      if (v23)
      {
        acm_mem_free_info( "<data>",  v23,  0x1000uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1291,  "LibCall_ACMContextVerifyPolicyEx");
        acm_mem_free_data(v23, 0x1000uLL);
      }
    }

    else
    {
      uint64_t v18 = 4294967292LL;
    }

    goto LABEL_18;
  }

  uint64_t v18 = SerializedVerifyPolicySize;
LABEL_19:
  if (v30) {
    Util_DeallocRequirement(v30);
  }
LABEL_21:
  if ((_DWORD)v18) {
    unsigned int v27 = 70;
  }
  else {
    unsigned int v27 = 10;
  }
  return v18;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicyEx( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, BOOL *a7, int **a8)
{
  *(void *)size_t v20 = 0LL;
  uint64_t v16 = LibCall_ACMContextCreate( (uint64_t (*)(uint64_t, uint64_t, void, void, void, _BYTE *, uint64_t *))a1,  a2,  v20,  0LL,  1);
  if (!(_DWORD)v16) {
    uint64_t v16 = LibCall_ACMContextVerifyPolicyEx(a1, a2, *(_OWORD **)v20, a3, a4, a5, a6, 0xFFFFFFFFLL, a7, a8);
  }
  uint64_t v17 = v16;
  if (*(void *)v20) {
    LibCall_ACMContextDelete( (void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))a1,  a2,  *(void **)v20,  1);
  }
  if ((_DWORD)v17) {
    unsigned int v18 = 70;
  }
  else {
    unsigned int v18 = 10;
  }
  return v17;
}

uint64_t LibCall_ACMGetEnvironmentVariable( uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v12 = a3;
  unsigned int v9 = 70;
  uint64_t v10 = 4294967293LL;
  if (a1 && a4 && a5)
  {
    uint64_t v10 = a1(a2, 25LL, 0LL, &v12, 4LL, a4, a5);
    if ((_DWORD)v10) {
      unsigned int v9 = 70;
    }
    else {
      unsigned int v9 = 10;
    }
  }

  return v10;
}

uint64_t LibCall_ACMSetEnvironmentVariable( uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, void, void), uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, uint64_t a6, const void *a7, size_t a8)
{
  uint64_t v15 = a1;
  v21[1] = *MEMORY[0x1895F89C0];
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))printf( "%s: %s: called.\n",  "ACM",  "LibCall_ACMSetEnvironmentVariable");
  }
  if (v15 && a6 == 16LL * (a5 != 0LL) && (a7 ? (BOOL v16 = a8 - 129 < 0xFFFFFFFFFFFFFF80LL) : (BOOL v16 = a8 != 0), !v16))
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v17 = (char *)v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0LL);
    *(_DWORD *)uint64_t v17 = a3;
    *((_DWORD *)v17 + 1) = 2;
    *((_DWORD *)v17 + 2) = a8;
    *(_OWORD *)(v17 + 12) = 0u;
    *(_OWORD *)(v17 + 2_Block_object_dispose(va, 8) = 0u;
    if (a4) {
      *(_OWORD *)(v17 + 12) = *a4;
    }
    if (a5) {
      *(_OWORD *)(v17 + 2_Block_object_dispose(va, 8) = *a5;
    }
    if (a8) {
      memcpy(v17 + 44, a7, a8);
    }
    uint64_t v18 = v15(a2, 44LL, 0LL, (char *)v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0LL), a8 + 44, 0LL, 0LL);
    if ((_DWORD)v18) {
      unsigned int v19 = 70;
    }
    else {
      unsigned int v19 = 10;
    }
  }

  else
  {
    unsigned int v19 = 70;
    uint64_t v18 = 4294967293LL;
  }

  return v18;
}

uint64_t LibCall_ACMTRMLoadState( uint64_t (*a1)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293LL;
  if (a1 && a3 && a4)
  {
    uint64_t v9 = a1(a2, 38LL, 0LL, 0LL, 0LL, a3, a4);
    if ((_DWORD)v9) {
      unsigned int v8 = 70;
    }
    else {
      unsigned int v8 = 10;
    }
  }

  return v9;
}

uint64_t LibCall_ACMTRMSaveState( uint64_t (*a1)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, void), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a1)
  {
    BOOL v10 = (unint64_t)(a4 - 8193) < 0xFFFFFFFFFFFFE000LL;
    if (!a3) {
      BOOL v10 = a4 != 0;
    }
    unsigned int v11 = 70;
    if (!v10)
    {
      if (a5) {
        uint64_t v12 = 43LL;
      }
      else {
        uint64_t v12 = 39LL;
      }
      uint64_t v13 = a1(a2, v12, 0LL, a3, a4, 0LL, 0LL);
      if ((_DWORD)v13) {
        unsigned int v11 = 70;
      }
      else {
        unsigned int v11 = 10;
      }
      goto LABEL_13;
    }
  }

  else
  {
    unsigned int v11 = 70;
  }

  uint64_t v13 = 4294967293LL;
LABEL_13:
  return v13;
}

uint64_t LibCall_ACMContextLoadFromImage(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  unsigned int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, _OWORD *, unint64_t *))v1;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  unsigned int v11 = 70;
  uint64_t v12 = 4294967293LL;
  if (v10 && v7 && (unint64_t)(v5 - 4097) >= 0xFFFFFFFFFFFFF000LL)
  {
    uint64_t v13 = acm_mem_alloc(0x14uLL);
    acm_mem_alloc_info( "ACMHandleWithPayload",  v13,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1447,  "LibCall_ACMContextLoadFromImage");
    if (v13)
    {
      bzero(v21, 0x1005uLL);
      char v20 = 1;
      *(_WORD *)&v21[1] = 6;
      __int16 v22 = v5;
      __memcpy_chk();
      memset(v18, 0, sizeof(v18));
      uint64_t v19 = 0LL;
      unint64_t v17 = 280LL;
      uint64_t v14 = v10(v9, 48LL, 0LL, &v20, 4102LL, v18, &v17);
      if ((_DWORD)v14)
      {
        uint64_t v12 = v14;
      }

      else if (v17 < 0x18)
      {
        uint64_t v12 = 4294967291LL;
      }

      else
      {
        if (LOBYTE(v18[0]))
        {
          uint64_t v12 = 0LL;
          int v15 = DWORD1(v18[1]);
          *(_OWORD *)uint64_t v13 = *(_OWORD *)((char *)v18 + 4);
          v13[4] = v15;
          *unsigned int v3 = v13;
          unsigned int v11 = 10;
          goto LABEL_11;
        }

        uint64_t v12 = 4294967280LL;
      }

      acm_mem_free_info( "ACMHandleWithPayload",  v13,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1508,  "LibCall_ACMContextLoadFromImage");
      acm_mem_free(v13, 0x14uLL);
      unsigned int v11 = 70;
    }

    else
    {
      unsigned int v11 = 70;
      uint64_t v12 = 4294967292LL;
    }
  }

uint64_t LibCall_ACMContextUnloadToImage(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  unsigned int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, void, int *, uint64_t, _BYTE *, int *))v1;
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unsigned int v11 = 70;
  uint64_t v12 = 4294967293LL;
  if (v10 && v5 && v3)
  {
    int v20 = 1310721;
    if (v7) {
      __int128 v21 = *v7;
    }
    else {
      __int128 v21 = 0uLL;
    }
    bzero(v17, 0x1106uLL);
    *(void *)BOOL v16 = 4358LL;
    uint64_t v13 = v10(v9, 49LL, 0LL, &v20, 20LL, v17, v16);
    if ((_DWORD)v13)
    {
      uint64_t v12 = v13;
LABEL_18:
      unsigned int v11 = 70;
      goto LABEL_14;
    }

    if (*(void *)v16 < 6uLL)
    {
      unsigned int v11 = 70;
      uint64_t v12 = 4294967291LL;
    }

    else
    {
      if (v17[0])
      {
        uint64_t v15 = v18;
        uint64_t v12 = Util_ReadFromBuffer((uint64_t)v17, *(size_t *)v16, &v15, v5, (unsigned __int16)__n);
        if (!(_DWORD)v12)
        {
          *unsigned int v3 = v15 - v18;
          unsigned int v11 = 10;
          goto LABEL_14;
        }

        goto LABEL_18;
      }

      unsigned int v11 = 70;
      uint64_t v12 = 4294967280LL;
    }
  }

uint64_t LibCall_ACMContextSetData( uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, void, void), uint64_t a2, _OWORD *a3, int a4, _DWORD *a5, unsigned int a6, const void *a7, size_t a8)
{
  size_t __size = 0LL;
  unsigned int v16 = 70;
  uint64_t v17 = 4294967293LL;
  if (a1 && a3)
  {
    if ((a7 != 0LL) != (a8 != 0))
    {
      unsigned int v16 = 70;
      uint64_t v17 = 4294967293LL;
    }

    else if (a8 > 0xE00)
    {
      unsigned int v16 = 70;
      uint64_t v17 = 4294967276LL;
    }

    else
    {
      uint64_t Size = LibSer_StorageSetData_GetSize(a8, a5, a6, &__size);
      if ((_DWORD)Size)
      {
        uint64_t v17 = Size;
        unsigned int v16 = 70;
      }

      else
      {
        size_t v19 = __size;
        int v20 = acm_mem_alloc_data(__size);
        acm_mem_alloc_info( "<data>",  v20,  v19,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1593,  "LibCall_ACMContextSetData");
        if (v20)
        {
          uint64_t v21 = LibSer_StorageSetData_Serialize(a3, a4, a7, a8, a5, a6, (uint64_t)v20, &__size);
          if (!(_DWORD)v21) {
            uint64_t v21 = a1(a2, 40LL, 0LL, v20, __size, 0LL, 0LL);
          }
          uint64_t v17 = v21;
          rsize_t v22 = __size;
          acm_mem_free_info( "<data>",  v20,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1605,  "LibCall_ACMContextSetData");
          acm_mem_free_data(v20, v22);
          if ((_DWORD)v17) {
            unsigned int v16 = 70;
          }
          else {
            unsigned int v16 = 10;
          }
        }

        else
        {
          unsigned int v16 = 70;
          uint64_t v17 = 4294967292LL;
        }
      }
    }
  }

  return v17;
}

uint64_t LibCall_ACMContextGetData( uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, uint64_t, uint64_t), uint64_t a2, _OWORD *a3, int a4, char a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (gACMLoggingLevel <= 0xAu)
  {
    uint64_t v16 = a8;
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetData");
    a8 = v16;
  }

  size_t __size = 0LL;
  unsigned int v17 = 70;
  uint64_t v18 = 4294967293LL;
  if (a1)
  {
    uint64_t v26 = a2;
    if (a3)
    {
      uint64_t v18 = 4294967293LL;
      if (a8)
      {
        if (a9)
        {
          uint64_t v19 = a8;
          uint64_t Size = LibSer_StorageGetData_GetSize(a6, a7, &__size);
          if ((_DWORD)Size)
          {
            uint64_t v18 = Size;
            unsigned int v17 = 70;
          }

          else
          {
            size_t v21 = __size;
            rsize_t v22 = acm_mem_alloc_data(__size);
            acm_mem_alloc_info( "<data>",  v22,  v21,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1628,  "LibCall_ACMContextGetData");
            if (v22)
            {
              uint64_t Data_Serialize = LibSer_StorageGetData_Serialize(a3, a4, a5, a6, a7, (uint64_t)v22, &__size);
              if (!(_DWORD)Data_Serialize) {
                uint64_t Data_Serialize = a1(v26, 41LL, 0LL, v22, __size, v19, a9);
              }
              uint64_t v18 = Data_Serialize;
              rsize_t v24 = __size;
              acm_mem_free_info( "<data>",  v22,  __size,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1640,  "LibCall_ACMContextGetData");
              acm_mem_free_data(v22, v24);
              if ((_DWORD)v18) {
                unsigned int v17 = 70;
              }
              else {
                unsigned int v17 = 10;
              }
            }

            else
            {
              unsigned int v17 = 70;
              uint64_t v18 = 4294967292LL;
            }
          }
        }
      }
    }
  }

  return v18;
}

uint64_t LibCall_ACMPublishTrustedAccessories( uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, void, void), uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v7 = a1;
  v14[1] = *MEMORY[0x1895F89C0];
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))printf( "%s: %s: called.\n",  "ACM",  "LibCall_ACMPublishTrustedAccessories");
  }
  if (v7)
  {
    if (a3) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = a4 == 0;
    }
    char v9 = !v8;
    unsigned int v10 = 70;
    uint64_t v11 = 4294967293LL;
    if ((a4 & 0xF) == 0 && a4 <= 0x100 && (v9 & 1) == 0)
    {
      MEMORY[0x1895F8858](a1);
      uint64_t v12 = (_DWORD *)((char *)v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0LL));
      _DWORD *v12 = 1;
      v12[1] = a4;
      if (a4) {
        memcpy(v12 + 2, a3, a4);
      }
      uint64_t v11 = v7(a2, 45LL, 0LL, (char *)v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0LL), a4 + 8, 0LL, 0LL);
      if ((_DWORD)v11) {
        unsigned int v10 = 70;
      }
      else {
        unsigned int v10 = 10;
      }
    }
  }

  else
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967293LL;
  }

  return v11;
}

uint64_t LibCall_ACMContextGetInfo( uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, _OWORD *, unint64_t *), uint64_t a2, __int128 *a3, int a4, void *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293LL;
  if (a3 && a1 && a5)
  {
    int v16 = 1;
    int v18 = a4;
    __int128 v17 = *a3;
    memset(v15, 0, 140);
    unint64_t v14 = 140LL;
    uint64_t v12 = a1(a2, 46LL, 0LL, &v16, 24LL, v15, &v14);
    if ((_DWORD)v12)
    {
      uint64_t v11 = v12;
    }

    else if (v14 < 0xC)
    {
      uint64_t v11 = 4294967291LL;
    }

    else
    {
      if (LODWORD(v15[0]))
      {
        uint64_t v11 = 0LL;
        *a5 = *(void *)((char *)v15 + 4);
        unsigned int v10 = 10;
        goto LABEL_10;
      }

      uint64_t v11 = 4294967281LL;
    }

    unsigned int v10 = 70;
  }

uint64_t verifyAclConstraintInternal( uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, uint64_t a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, BOOL *a13, int **a14)
{
  size_t v36 = 0LL;
  uint64_t v34 = 0LL;
  unint64_t v35 = 4096LL;
  size_t v33 = 0LL;
  uint64_t v20 = 4294967293LL;
  if (!a4 || !a5 || !a6 || !a13)
  {
LABEL_19:
    if (!(_DWORD)v20) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }

  SerializedVerifyAclConstraintuint64_t Size = GetSerializedVerifyAclConstraintSize( a3,  (uint64_t)a4,  (uint64_t)a5,  a6,  (uint64_t)a7,  a8,  a9,  a12,  a10,  a11,  &v36);
  if (!(_DWORD)SerializedVerifyAclConstraintSize)
  {
    uint64_t v22 = v36;
    uint64_t v23 = acm_mem_alloc_data(v36);
    acm_mem_alloc_info( "<data>",  v23,  v22,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1929,  "verifyAclConstraintInternal");
    if (v23)
    {
      uint64_t v24 = SerializeVerifyAclConstraint(a3, a4, a5, a6, a7, a8, a9, a12, a10, a11, (uint64_t)v23, &v36);
      if ((_DWORD)v24)
      {
        uint64_t v20 = v24;
        unint64_t v25 = 0LL;
      }

      else
      {
        unint64_t v25 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info( "<data>",  v25,  4096LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1935,  "verifyAclConstraintInternal");
        if (v25)
        {
          uint64_t v26 = a1(a2, a3, 0LL, v23, v36, v25, &v35);
          if ((_DWORD)v26)
          {
            uint64_t v20 = v26;
          }

          else
          {
            unint64_t v27 = v35 - 4;
            if (v35 < 4)
            {
              uint64_t v20 = 4294967291LL;
            }

            else
            {
              *a13 = *v25 != 0;
              if (a14)
              {
                uint64_t v20 = DeserializeRequirement(v25 + 1, v27, (void **)&v34, &v33);
                if (!(_DWORD)v20) {
                  *a14 = v34;
                }
              }

              else
              {
                uint64_t v20 = 0LL;
              }
            }
          }
        }

        else
        {
          uint64_t v20 = 4294967292LL;
        }
      }

      rsize_t v28 = v36;
      acm_mem_free_info( "<data>",  v23,  v36,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1958,  "verifyAclConstraintInternal");
      acm_mem_free_data(v23, v28);
      if (v25)
      {
        acm_mem_free_info( "<data>",  v25,  0x1000uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1961,  "verifyAclConstraintInternal");
        acm_mem_free_data(v25, 0x1000uLL);
      }
    }

    else
    {
      uint64_t v20 = 4294967292LL;
    }

    goto LABEL_19;
  }

  uint64_t v20 = SerializedVerifyAclConstraintSize;
LABEL_20:
  if (v34) {
    Util_DeallocRequirement(v34);
  }
LABEL_22:
  if ((_DWORD)v20) {
    unsigned int v29 = 70;
  }
  else {
    unsigned int v29 = 10;
  }
  return v20;
}

uint64_t LibCall_ACMSecContextProcessAcl( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12)
{
  return processAclCommandInternal(a1, a2, 12, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0LL, 0LL);
}

uint64_t processAclCommandInternal( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, int a3, _OWORD *a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, _DWORD *a9, unsigned int a10, unsigned int a11, _DWORD *a12, BOOL *a13, void *a14, unint64_t *a15)
{
  unsigned int v19 = gACMLoggingLevel;
  if (gACMLoggingLevel <= 0xAu)
  {
    printf("%s: %s: called.\n", "ACM", "processAclCommandInternal");
    unsigned int v19 = gACMLoggingLevel;
  }

  if (v19 <= 0x14)
  {
    printf("%s: %s: command = %u.\n", "ACM", "processAclCommandInternal", a3);
    unsigned int v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: context = %p.\n", "ACM", "processAclCommandInternal", a4);
      unsigned int v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: acl = %p, aclLength = %zu.\n", "ACM", "processAclCommandInternal", a5, a6);
        unsigned int v19 = gACMLoggingLevel;
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s (len=%u): acl:", "ACM", "processAclCommandInternal", a6);
          unsigned int v19 = gACMLoggingLevel;
        }
      }
    }
  }

  if (a6)
  {
    uint64_t v20 = a6;
    size_t v21 = a5;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v21);
        unsigned int v19 = gACMLoggingLevel;
      }

      ++v21;
      --v20;
    }

    while (v20);
  }

  if (v19 < 0x15)
  {
    putchar(10);
    unsigned int v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: operation = %p, operationLength = %zu.\n", "ACM", "processAclCommandInternal", a7, a8);
      unsigned int v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s (len=%u): operation:", "ACM", "processAclCommandInternal", a8);
        unsigned int v19 = gACMLoggingLevel;
      }
    }
  }

  int v39 = a3;
  if (a8)
  {
    uint64_t v22 = a8;
    uint64_t v23 = a7;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v23);
        unsigned int v19 = gACMLoggingLevel;
      }

      ++v23;
      --v22;
    }

    while (v22);
  }

  if (v19 < 0x15)
  {
    putchar(10);
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: parameters = %p, parameterCount = %u.\n", "ACM", "processAclCommandInternal", a9, a10);
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: maxGlobalCredentialAge = %u.\n", "ACM", "processAclCommandInternal", a11);
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s: constraintState = %p.\n", "ACM", "processAclCommandInternal", a12);
        }
      }
    }
  }

  if (a7 || a9 || a12)
  {
    if (a5) {
      BOOL v26 = a6 == 0;
    }
    else {
      BOOL v26 = 1;
    }
    int v27 = v26;
    unsigned int v24 = 70;
    uint64_t v25 = 4294967293LL;
    if (!a7) {
      goto LABEL_79;
    }
    if (!a8) {
      goto LABEL_79;
    }
    if (v27) {
      goto LABEL_79;
    }
    unsigned int v24 = 70;
    uint64_t v25 = 4294967293LL;
    if ((a9 != 0LL) != (a10 != 0) || !a12) {
      goto LABEL_79;
    }
    size_t v45 = 0LL;
    unint64_t v44 = 4096LL;
    uint64_t SerializedProcessAclSize = GetSerializedProcessAclSize( (uint64_t)a4,  (uint64_t)a5,  a6,  (uint64_t)a7,  a8,  a11,  a9,  a10,  &v45);
    if ((_DWORD)SerializedProcessAclSize)
    {
      uint64_t v25 = SerializedProcessAclSize;
      unsigned int v37 = 70;
      goto LABEL_74;
    }

    uint64_t v29 = v45;
    __int16 v30 = acm_mem_alloc_data(v45);
    acm_mem_alloc_info( "<data>",  v30,  v29,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1776,  "processAclInternal");
    if (!v30)
    {
      unsigned int v37 = 70;
      uint64_t v25 = 4294967292LL;
      goto LABEL_74;
    }

    unint64_t v44 = 4096LL;
    unint64_t v31 = acm_mem_alloc_data(0x1000uLL);
    acm_mem_alloc_info( "<data>",  v31,  4096LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1780,  "processAclInternal");
    if (!v31)
    {
      unint64_t v35 = 0LL;
      unint64_t v34 = 0LL;
      uint64_t v25 = 4294967292LL;
      goto LABEL_68;
    }

    uint64_t v32 = SerializeProcessAcl(a4, a5, a6, a7, a8, a11, a9, a10, (uint64_t)v30, &v45);
    if ((_DWORD)v32 || (uint64_t v32 = a1(a2, v39, 0LL, (char *)v30, v45, v31, (uint64_t *)&v44), (_DWORD)v32))
    {
      uint64_t v25 = v32;
      unint64_t v34 = 0LL;
      unint64_t v35 = 0LL;
      goto LABEL_67;
    }

    unint64_t v33 = v44;
    if (v44 >= 8)
    {
      *a12 = *v31;
      if (a13) {
        *a13 = v31[1] != 0;
      }
      uint64_t v25 = 0LL;
      unint64_t v34 = 0LL;
      if (v39 != 30 || !a14)
      {
        unint64_t v35 = 0LL;
        goto LABEL_67;
      }

      unint64_t v35 = 0LL;
      if (!a15)
      {
LABEL_67:
        acm_mem_free_info( "<data>",  v31,  0x1000uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1817,  "processAclInternal");
        acm_mem_free_data(v31, 0x1000uLL);
LABEL_68:
        rsize_t v36 = v45;
        acm_mem_free_info( "<data>",  v30,  v45,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1821,  "processAclInternal");
        acm_mem_free_data(v30, v36);
        if ((_DWORD)v25 && v35)
        {
          acm_mem_free_info( "<data>",  v35,  v34,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1825,  "processAclInternal");
          acm_mem_free_data(v35, v34);
          unsigned int v37 = 70;
        }

        else if ((_DWORD)v25)
        {
          unsigned int v37 = 70;
        }

        else
        {
          unsigned int v37 = 10;
        }

LABEL_74:
        goto LABEL_76;
      }

      if (v33 >= 0xC)
      {
        unint64_t v34 = v31[2];
        if ((_DWORD)v34)
        {
          if (v33 >= v34 + 12)
          {
            unint64_t v35 = acm_mem_alloc_data(v31[2]);
            acm_mem_alloc_info( "<data>",  v35,  v34,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  1805,  "processAclInternal");
            if (v35)
            {
              memcpy(v35, v31 + 3, v34);
              uint64_t v25 = 0LL;
              *a14 = v35;
              *a15 = v34;
            }

            else
            {
              uint64_t v25 = 4294967292LL;
            }

            goto LABEL_67;
          }

          goto LABEL_84;
        }

        unint64_t v34 = 0LL;
        unint64_t v35 = 0LL;
        uint64_t v25 = 0LL;
        goto LABEL_67;
      }
    }

    unint64_t v34 = 0LL;
LABEL_84:
    unint64_t v35 = 0LL;
    uint64_t v25 = 4294967291LL;
    goto LABEL_67;
  }

  if (a4)
  {
    unsigned int v24 = 70;
    uint64_t v25 = 4294967293LL;
    goto LABEL_79;
  }

  unsigned int v24 = 70;
  uint64_t v25 = 4294967293LL;
  if (a5 && a13 && a6)
  {
    uint64_t v25 = aclRequiresPasscodeInternal(a1, a2, a5, a6, a13);
LABEL_76:
    if ((_DWORD)v25) {
      unsigned int v24 = 70;
    }
    else {
      unsigned int v24 = 10;
    }
  }

LABEL_79:
  return v25;
}

uint64_t LibCall_ACMSecContextProcessAclAndCopyAuthMethod( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12, void *a13, unint64_t *a14)
{
  return processAclCommandInternal(a1, a2, 30, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement( uint64_t (*a1)(uint64_t, uint64_t, void, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, BOOL *a12, int **a13)
{
  unsigned int v21 = 70;
  uint64_t v22 = 4294967293LL;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        unsigned int v21 = 70;
        uint64_t v22 = 4294967293LL;
        if ((a9 != 0LL) == (a10 != 0))
        {
          if (a12)
          {
            uint64_t v22 = verifyAclConstraintInternal(a1, a2, 11LL, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            if ((_DWORD)v22) {
              unsigned int v21 = 70;
            }
            else {
              unsigned int v21 = 10;
            }
          }
        }
      }
    }
  }

  if (v21 >= gACMLoggingLevel) {
    printf( "%s: %s: returning, err = %ld.\n",  "ACM",  "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement",  (int)v22);
  }
  return v22;
}

uint64_t LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, void, void), uint64_t a2, const void *a3, unsigned int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, uint64_t a9)
{
  int v16 = a1;
  v24[1] = *MEMORY[0x1895F89C0];
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, uint64_t, void, void))printf( "%s: %s: called.\n",  "ACM",  "LibCall_ACMSecCredentialPr oviderEnrollmentStateChangedForUser");
  }
  BOOL v17 = a4 - 113 < 0xFFFFFF90;
  if (!a3) {
    BOOL v17 = a4 != 0;
  }
  if (v17)
  {
    unsigned int v18 = 70;
    uint64_t v19 = 4294967293LL;
  }

  else
  {
    unsigned int v18 = 70;
    uint64_t v19 = 4294967293LL;
    if (a8)
    {
      if (a9 == 16)
      {
        uint64_t v19 = 4294967293LL;
        if (a5)
        {
          if (a6 == 16)
          {
            uint64_t v20 = a4 + 36LL;
            MEMORY[0x1895F8858](a1);
            uint64_t v22 = (char *)v24 - ((v21 + 51) & 0x1FFFFFFF0LL);
            *(_DWORD *)uint64_t v22 = a7;
            *(_OWORD *)(v22 + 4) = *a8;
            *(_OWORD *)(v22 + 20) = *a5;
            if (a3) {
              memcpy(v22 + 36, a3, v21);
            }
            uint64_t v19 = v16(a2, 14LL, 0LL, v22, v20, 0LL, 0LL);
            if ((_DWORD)v19) {
              unsigned int v18 = 70;
            }
            else {
              unsigned int v18 = 10;
            }
          }
        }
      }
    }
  }

  if (v18 >= gACMLoggingLevel) {
    printf( "%s: %s: returning, err = %ld.\n",  "ACM",  "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser",  (int)v19);
  }
  return v19;
}

uint64_t LibCall_ACMSecSetBuiltinBiometry( uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, void, void), uint64_t a2, char a3)
{
  char v9 = a3;
  uint64_t v5 = LibCall_ACMSetEnvironmentVariable(a1, a2, 30, 0LL, 0LL, 0LL, &v9, 1uLL);
  uint64_t v6 = v5;
  if ((_DWORD)v5) {
    unsigned int v7 = 70;
  }
  else {
    unsigned int v7 = 10;
  }
  return v6;
}

uint64_t LibCall_ACMSecSetBiometryAvailability( uint64_t (*a1)(uint64_t, uint64_t, void, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, char a3, int a4)
{
  char v15 = 0;
  unint64_t v14 = 1LL;
  char v13 = 0;
  uint64_t v8 = LibCall_ACMGetEnvironmentVariable(a1, a2, 6, (uint64_t)&v15, (uint64_t)&v14);
  if ((_DWORD)v8)
  {
    uint64_t v11 = v8;
    unsigned int v9 = 70;
  }

  else
  {
    unsigned int v9 = 70;
    if (v14 > 1)
    {
      uint64_t v11 = 4294967291LL;
    }

    else
    {
      char v10 = v15 & ~a3;
      if (a4) {
        char v10 = v15 | a3;
      }
      char v13 = v10;
      uint64_t v11 = LibCall_ACMSetEnvironmentVariable( (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, void, void))a1,  a2,  6,  0LL,  0LL,  0LL,  &v13,  1uLL);
      if ((_DWORD)v11) {
        unsigned int v9 = 70;
      }
      else {
        unsigned int v9 = 10;
      }
    }
  }

  return v11;
}

uint64_t LibCall_ACMSecContextGetUnlockSecret( uint64_t (*a1)(void, void, void, void, void, void, void), uint64_t a2, _OWORD *a3, _DWORD *a4, unsigned int a5, void *a6, size_t *a7, _BYTE *a8)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = 64LL;
  uint64_t v24 = 129LL;
  if (!a3) {
    goto LABEL_18;
  }
  unsigned int v16 = 70;
  uint64_t v17 = 4294967293LL;
  if (!a6 || !a7 || !a8) {
    goto LABEL_14;
  }
  if ((a4 != 0LL) != (a5 != 0))
  {
LABEL_18:
    unsigned int v16 = 70;
    uint64_t v17 = 4294967293LL;
    goto LABEL_14;
  }

  uint64_t UnlockSecret_Serialize = LibSer_GetUnlockSecret_Serialize(a3, a4, a5, v27, &v25);
  if ((_DWORD)UnlockSecret_Serialize
    || (uint64_t UnlockSecret_Serialize = a1(a2, 50LL, 0LL, v27, v25, v26, &v24), (_DWORD)UnlockSecret_Serialize)
    || (size_t __n = 0LL,
        __src = 0LL,
        char v21 = 0,
        uint64_t UnlockSecret_Serialize = LibSer_GetUnlockSecretResponse_Deserialize(v26, v24, &__src, &__n, &v21),
        (_DWORD)UnlockSecret_Serialize))
  {
    uint64_t v17 = UnlockSecret_Serialize;
  }

  else
  {
    size_t v19 = __n;
    if (*a7 < __n)
    {
      uint64_t v17 = 4294967276LL;
    }

    else
    {
      if (__src)
      {
        memcpy(a6, __src, __n);
        uint64_t v17 = 0LL;
        *a7 = v19;
        *a8 = v21;
        unsigned int v16 = 10;
        goto LABEL_14;
      }

      uint64_t v17 = 4294967291LL;
    }
  }

  unsigned int v16 = 70;
LABEL_14:
  return v17;
}

uint64_t LibCall_ACMSEPControl( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, void *a8, size_t *a9)
{
  __int16 v30 = a8;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  unint64_t v33 = 1024LL;
  uint64_t v34 = 0LL;
  if (!a1) {
    goto LABEL_17;
  }
  BOOL v16 = a4 - 4097 < 0xFFFFFFFFFFFFF000LL;
  if (!a3) {
    BOOL v16 = a4 != 0;
  }
  if (v16)
  {
LABEL_17:
    unsigned int v25 = 70;
    uint64_t v24 = 4294967293LL;
    goto LABEL_21;
  }

  uint64_t Size = LibSer_SEPControl_GetSize(a4, a6, a7, &v34);
  if ((_DWORD)Size)
  {
LABEL_18:
    uint64_t v24 = Size;
LABEL_25:
    unsigned int v25 = 70;
    goto LABEL_21;
  }

  uint64_t v18 = a5;
  uint64_t v19 = a2;
  uint64_t v20 = (_OWORD *)MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = LibSer_SEPControl_Serialize(v20, a6, a7, a3, a4, (uint64_t)v22, &v34);
  if ((_DWORD)v23)
  {
    uint64_t v24 = v23;
    goto LABEL_20;
  }

  uint64_t v24 = a1(v19, 51LL, 0LL, v22, v34, v35, &v33);
  if ((_DWORD)v24)
  {
LABEL_20:
    unsigned int v25 = 70;
    goto LABEL_21;
  }

  unsigned int v25 = 10;
  BOOL v26 = v30;
  if (!v30 || !a9) {
    goto LABEL_21;
  }
  size_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t Size = LibSer_SEPControlResponse_Deserialize(v35, v33, &v32, &v31);
  if ((_DWORD)Size) {
    goto LABEL_18;
  }
  size_t v27 = v31;
  if (*a9 < v31)
  {
    uint64_t v24 = 4294967276LL;
    goto LABEL_25;
  }

  if (v32) {
    memcpy(v26, v32, v31);
  }
  uint64_t v24 = 0LL;
  *a9 = v27;
  unsigned int v25 = 10;
LABEL_21:
  return v24;
}

uint64_t aclRequiresPasscodeInternal( uint64_t (*a1)(uint64_t, uint64_t, void, char *, uint64_t, int *, uint64_t *), uint64_t a2, const void *a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v19 = 0;
  uint64_t v18 = 4LL;
  size_t v10 = a4;
  uint64_t v11 = a4 + 4LL;
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (unsigned int *)((char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0LL));
  unsigned int v13 = 70;
  uint64_t v14 = 4294967293LL;
  if (a3 && a5)
  {
    unsigned int *v12 = a4;
    memcpy(v12 + 1, a3, v10);
    uint64_t v15 = a1(a2, 17LL, 0LL, (char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0LL), v11, &v19, &v18);
    if ((_DWORD)v15)
    {
      uint64_t v14 = v15;
      unsigned int v13 = 70;
    }

    else if (v18 == 4)
    {
      uint64_t v14 = 0LL;
      *a5 = 1;
      unsigned int v13 = 10;
    }

    else
    {
      unsigned int v13 = 70;
      uint64_t v14 = 4294967291LL;
    }
  }

  return v14;
}

void LibCall_ACMKernelControl_cold_1()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

uint64_t lib_platform_rng()
{
  uint64_t v0 = ccrng();
  REQUIRE_func(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  REQUIRE_func(0LL, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t lib_platform_read_random(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(unsigned int (**)(uint64_t, void, uint64_t))platform_rng();
  uint64_t v5 = platform_rng();
  BOOL v6 = v4(v5, a2, a1) == 0;
  return REQUIRE_func(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t rfc3394_wrap( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, void *a7, unint64_t *a8)
{
  uint64_t v41 = a1;
  uint64_t v42 = a3;
  uint64_t v45 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_encrypt_mode();
  MEMORY[0x1895F8858](v14);
  uint64_t v43 = (char *)&v36 - v15;
  bzero((char *)&v36 - v15, v15);
  MEMORY[0x1895F8858](v16);
  bzero((char *)&v36 - v17, v17);
  uint64_t v18 = 0xFFFFFFFFLL;
  int v39 = &v36;
  unint64_t v40 = a8;
  unsigned int v38 = a7;
  if (!a4)
  {
    BOOL v20 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v20 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }

    unint64_t v37 = a6 + 8;
    cccbc_init();
    goto LABEL_15;
  }

  if (a8)
  {
    unint64_t v19 = *v40;
    unint64_t v37 = a6 + 8;
    if (v19 >= a6 + 8)
    {
LABEL_15:
      uint64_t v21 = 0LL;
      unsigned int v22 = a6 >> 3;
      else {
        uint64_t v23 = v22;
      }
      do
      {
        uint64_t v24 = *a5++;
        *((void *)&__s[v21++] + 1) = v24;
      }

      while (v23 != v21);
      uint64_t v25 = 0LL;
      *(void *)&__s[0] = v42;
      uint64_t v26 = 1LL;
      uint64_t v41 = v22;
      do
      {
        uint64_t v42 = v25;
        uint64_t v27 = 0LL;
        uint64_t v28 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1LL, &firebloom_null_iv, v28, v28, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv();
            firebloom_cbc_update_f();
          }

          uint64_t v29 = *v28;
          v28 += 2;
          unint64_t v30 = v29 ^ bswap64(v26 + v27++);
          *(void *)&__s[v27 % v22] = v30;
        }

        while (v23 != v27);
        uint64_t v25 = v42 + 1;
        v26 += v41;
      }

      while (v42 != 5);
      size_t v31 = v38;
      void *v38 = *(void *)&__s[0];
      uint64_t v32 = v31 + 1;
      unint64_t v33 = (uint64_t *)__s + 1;
      do
      {
        uint64_t v34 = *v33;
        v33 += 2;
        *v32++ = v34;
        --v23;
      }

      while (v23);
      uint64_t v18 = 0LL;
      unint64_t *v40 = v37 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4) {
        return v18;
      }
LABEL_31:
      cc_clear();
      return v18;
    }
  }

uint64_t rfc3394_wrap_legacy( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  unint64_t v11 = *a8;
  uint64_t v9 = rfc3394_wrap(a1, a2, a3, a4, a5, a6, a7, &v11);
  REQUIRE_func(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t rfc3394_unwrap( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unint64_t a6, void *a7, void *a8)
{
  uint64_t v45 = a5;
  uint64_t v43 = a1;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_decrypt_mode();
  MEMORY[0x1895F8858](v14);
  id v46 = (char *)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  MEMORY[0x1895F8858](v16);
  bzero((char *)&v37 - v17, v17);
  uint64_t v18 = 0xFFFFFFFFLL;
  if (HIDWORD(a6)) {
    goto LABEL_33;
  }
  uint64_t v39 = a3;
  unsigned int v19 = a6 >> 3;
  unint64_t v40 = &v37;
  uint64_t v41 = a8;
  unsigned int v38 = a7;
  unint64_t v44 = a6;
  if (!a4)
  {
    BOOL v20 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v20 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }

    cccbc_init();
    goto LABEL_15;
  }

  if (a8 && *v41 >= v44 - 8)
  {
LABEL_15:
    *(void *)&__s[0] = *v45;
    uint64_t v21 = v19 - 1;
    if (v19 != 1)
    {
      unsigned int v22 = (void *)__s + 1;
      uint64_t v23 = v45 + 1;
      uint64_t v24 = v19 - 1;
      do
      {
        uint64_t v25 = *v23++;
        *unsigned int v22 = v25;
        v22 += 2;
        --v24;
      }

      while (v24);
    }

    int v26 = 6 * v19 - 6;
    LODWORD(v43) = 1 - v19;
    int v27 = 5;
    uint64_t v42 = (unint64_t *)&__s[v19 - 2];
    do
    {
      LODWORD(v45) = v27;
      if (v44 >= 0x10)
      {
        uint64_t v28 = v42;
        int v29 = v21;
        unsigned int v30 = v26;
        do
        {
          unint64_t *v28 = *(void *)&__s[v29 % v21] ^ bswap64(v30);
          if (a4)
          {
            if ((a4(0LL, &firebloom_null_iv, v28, v28, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv();
            firebloom_cbc_update_f();
          }

          --v30;
          v28 -= 2;
          BOOL v31 = __OFSUB__(v29--, 1);
        }

        while (!((v29 < 0) ^ v31 | (v29 == 0)));
      }

      int v27 = (_DWORD)v45 - 1;
      v26 += v43;
    }

    while ((_DWORD)v45);
    if (*(void *)&__s[0] == v39)
    {
      uint64_t v32 = v38;
      if ((_DWORD)v21)
      {
        unint64_t v33 = (uint64_t *)__s + 1;
        uint64_t v34 = v21;
        do
        {
          uint64_t v35 = *v33;
          v33 += 2;
          *v32++ = v35;
          --v34;
        }

        while (v34);
      }

      uint64_t v18 = 0LL;
      *uint64_t v41 = (8 * v21);
    }

    else
    {
      uint64_t v18 = 0xFFFFFFFFLL;
    }

LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4) {
      return v18;
    }
LABEL_34:
    cc_clear();
    return v18;
  }

uint64_t rfc3394_unwrap_legacy( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v11 = *a8;
  uint64_t v9 = rfc3394_unwrap(a1, a2, a3, a4, a5, a6, a7, &v11);
  REQUIRE_func(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t rfc3394_wrapped_size_legacy(unsigned int a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 15LL;
  uint64_t v3 = v2 << 31 >> 31;
  BOOL v4 = v3 != v2 || v3 < 0;
  int v5 = v4;
  if (!v4) {
    *a2 = v3 & 0xFFFFFFF8;
  }
  return v5 ^ 1u;
}

uint64_t rfc3394_wrapped_size(unint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 >= 0xFFFFFFFFFFFFFFF1LL;
  BOOL v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  int v4 = v3;
  if (!v3) {
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  }
  return v4 ^ 1u;
}

BOOL rfc3394_unwrapped_size_legacy(unsigned int a1, unsigned int *a2)
{
  unsigned int v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL rfc3394_unwrapped_size(unint64_t a1, unint64_t *a2)
{
  unint64_t v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t aks_fv_new_vek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  v23[0] = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096LL;
  uint64_t v13 = 3758097090LL;
  if (v7 && v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_vek",  ":",  179,  "",  0,  "",  "");
      uint64_t v13 = 3758097084LL;
      goto LABEL_16;
    }

    mach_port_t v15 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v19, v9)
      || !der_utils_encode_fv_data(&v19, v11)
      || !der_utils_encode_fv_params(&v19, v12)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_14;
    }

    input[0] = *((void *)&v19 + 1);
    input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
    uint64_t v16 = IOConnectCallMethod(v15, 0x4Au, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v20);
    if ((_DWORD)v16)
    {
      uint64_t v13 = v16;
      goto LABEL_16;
    }

    *(void *)&__int128 v18 = __s;
    *((void *)&v18 + 1) = &__s[v20];
    if (!v3)
    {
      uint64_t v13 = 0LL;
      goto LABEL_16;
    }

    uint64_t v13 = 0LL;
    if ((der_utils_decode_fv_key(&v18, 0, v3) & 1) == 0) {
LABEL_14:
    }
      uint64_t v13 = 3758097098LL;
  }

uint64_t get_aks_client_connection()
{
  if (get_aks_client_dispatch_queue_onceToken != -1) {
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  }
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_150);
  uint64_t result = get_aks_client_connection_connection;
  if (!get_aks_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return get_aks_client_connection_connection;
  }

  return result;
}

unint64_t _aks_save_file(char *a1, const void *a2, size_t a3)
{
  unint64_t v3 = (unint64_t)a1;
  if (a1)
  {
    int v6 = open_dprotected_np(a1, 1793, 4, 0, 384LL);
    if (v6 == -1)
    {
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0LL;
    }

    else
    {
      int v7 = v6;
      ssize_t v8 = write(v6, a2, a3);
      unint64_t v3 = v8 != -1;
      if (v8 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }

      close(v7);
    }
  }

  return v3;
}

const char *_aks_load_file(char *a1, void *a2, off_t *a3)
{
  unint64_t v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      off_t st_size = v14.st_size;
      int v7 = open(v3, 0);
      if (v7 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }

      else
      {
        int v8 = v7;
        uint64_t v9 = calloc(st_size, 1uLL);
        unint64_t v3 = (const char *)(v9 != 0LL);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }

        uint64_t v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }

        close(v8);
        free(v10);
      }
    }

    return 0LL;
  }

  return v3;
}

uint64_t aks_delete_xart_leak(unsigned int a1, const void *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x6Cu, input, 1u, a2, 0x10uLL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_delete_xart_leak",  ":",  268,  "",  0,  "",  "");
  return 3758097084LL;
}

char *_iterate_path(char *result, uint64_t a2, uint64_t a3)
{
  v9[2] = *(char **)MEMORY[0x1895F89C0];
  if (result)
  {
    v9[0] = result;
    v9[1] = 0LL;
    uint64_t result = (char *)fts_open(v9, 84, 0LL);
    if (result)
    {
      int v5 = (FTS *)result;
      int v6 = fts_read((FTS *)result);
      if (v6)
      {
        int v7 = v6;
        do
        {
          int fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
              }
            }

            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }

          int v7 = fts_read(v5);
        }

        while (v7);
      }

      return (char *)fts_close(v5);
    }
  }

  return result;
}

char *aks_dump_path(char *result, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (result)
  {
    unint64_t v3 = result;
    bzero(v8, 0x400uLL);
    uint64_t result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = MEMORY[0x1895F87A8];
      v6[1] = 0x40000000LL;
      v6[2] = __aks_dump_path_block_invoke;
      v6[3] = &__block_descriptor_tmp;
      int v7 = a2;
      v4[0] = MEMORY[0x1895F87A8];
      v4[1] = 0x40000000LL;
      v4[2] = __aks_dump_path_block_invoke_2;
      v4[3] = &__block_descriptor_tmp_126;
      int v5 = a2;
      return _iterate_path(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }

  return result;
}

uint64_t __aks_dump_path_block_invoke(uint64_t a1, uint64_t a2)
{
  int path_class = _get_path_class(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || path_class == v5) {
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), path_class);
  }
  return 1LL;
}

uint64_t _get_path_class(const char *a1)
{
  int v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = v1;
  uint64_t v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return v3;
}

uint64_t __aks_dump_path_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result = _get_path_class(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || (_DWORD)result == v5) {
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  }
  return result;
}

uint64_t aks_fs_supports_enhanced_apfs()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  io_registry_entry_t v0 = IORegistryEntryFromPath(*MEMORY[0x1896086B0], "IODeviceTree:/filesystems");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"e-apfs", (CFAllocatorRef)*MEMORY[0x189604DB0], 0);
    BOOL v3 = CFProperty != 0LL;
    if (CFProperty) {
      CFRelease(CFProperty);
    }
    IOObjectRelease(v1);
  }

  else
  {
    BOOL v3 = 0;
  }

  size_t __len = 1023LL;
  bzero(__big, 0x400uLL);
  if ((_aks_check_apfs_shared_datavolume_bootarg_init & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0LL, 0LL) && strnstr(__big, "-apfs_shared_datavolume", __len)) {
      _aks_check_apfs_shared_datavolume_bootarg_value = 1;
    }
    _aks_check_apfs_shared_datavolume_bootarg_init = 1;
  }

  unsigned int v4 = _aks_check_apfs_shared_datavolume_bootarg_value;
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n",  "aks",  "",  "",  "",  "aks_fs_supports_enhanced_apfs",  ":",  437,  "",  0,  "",  v3,  _aks_check_apfs_shared_datavolume_bootarg_value,  "");
  return v3 | v4;
}

uint64_t aks_fs_status(const char *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    aks_fs_status_with_map(v4, (uint64_t)&sharedPathMap, 35LL);
    if ((aks_fs_supports_enhanced_apfs() & 1) == 0) {
      aks_fs_status_with_map(__str, (uint64_t)&userPathMap, 72LL);
    }
  }

  return 0LL;
}

void aks_fs_status_with_map(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }

      else
      {
        _get_path_class(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }

      v6 += 48LL;
      --a3;
    }

    while (a3);
  }

uint64_t aks_user_fs_status(const char *a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3)) {
    aks_fs_status_with_map(v3, (uint64_t)&userPathMap, 72LL);
  }
  return 0LL;
}

const char *aks_show_allowlist()
{
  return aks_show_allowlist_with_map("<user>", (uint64_t)&userPathMap, 72LL);
}

const char *aks_show_allowlist_with_map(const char *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = result;
    uint64_t v5 = (const char **)(a2 + 16);
    uint64_t v6 = (const char **)(a2 + 16);
    do
    {
      char v7 = *(_BYTE *)v6;
      v6 += 6;
      if ((v7 & 1) != 0) {
        uint64_t result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      }
      uint64_t v5 = v6;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t aks_fv_new_kek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  uint64_t v10 = v1;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096LL;
  uint64_t v11 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v13 = aks_client_connection;
      if (!ccder_blob_encode_body_tl()
        || !der_utils_encode_fv_data(&v17, v7)
        || !der_utils_encode_fv_params(&v17, v10)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_10;
      }

      input[0] = v9;
      input[1] = *((void *)&v17 + 1);
      uint64_t input[2] = (uint64_t)&v21 - *((void *)&v17 + 1);
      uint64_t v14 = IOConnectCallMethod(v13, 0x4Cu, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &v18);
      if ((_DWORD)v14)
      {
        uint64_t v11 = v14;
        goto LABEL_12;
      }

      *(void *)&__int128 v16 = __s;
      *((void *)&v16 + 1) = &__s[v18];
      if (!ccder_blob_decode_range() || (uint64_t v11 = 0LL, (der_utils_decode_fv_data(&v16, 0, v3) & 1) == 0)) {
LABEL_10:
      }
        uint64_t v11 = 3758097098LL;
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_kek",  ":",  508,  "",  0,  "",  "");
      uint64_t v11 = 3758097084LL;
    }
  }

uint64_t aks_fv_new_sibling_vek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096LL;
  uint64_t v11 = 3758097090LL;
  if (v7 && v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_sibling_vek",  ":",  543,  "",  0,  "",  "");
      uint64_t v11 = 3758097084LL;
      goto LABEL_15;
    }

    mach_port_t v13 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v17, v9)
      || !der_utils_encode_fv_params(&v17, v10)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_13;
    }

    input[0] = *((void *)&v17 + 1);
    input[1] = (uint64_t)&v21 - *((void *)&v17 + 1);
    uint64_t v14 = IOConnectCallMethod(v13, 0x63u, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v18);
    if ((_DWORD)v14)
    {
      uint64_t v11 = v14;
      goto LABEL_15;
    }

    *(void *)&__int128 v16 = __s;
    *((void *)&v16 + 1) = &__s[v18];
    if (!v3)
    {
      uint64_t v11 = 0LL;
      goto LABEL_15;
    }

    uint64_t v11 = 0LL;
    if ((der_utils_decode_fv_key(&v16, 0, v3) & 1) == 0) {
LABEL_13:
    }
      uint64_t v11 = 3758097098LL;
  }

uint64_t aks_fv_rewrap_kek(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  v23[0] = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096LL;
  uint64_t v13 = 3758097090LL;
  if (v9 && v7 && v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v15 = aks_client_connection;
      if (!der_utils_encode_fv_data(&v19, v5)
        || !ccder_blob_encode_body_tl()
        || !der_utils_encode_fv_data(&v19, v9)
        || !der_utils_encode_fv_data(&v19, v11)
        || !der_utils_encode_fv_params(&v19, v12)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_14;
      }

      input[0] = *((void *)&v19 + 1);
      input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
      uint64_t v16 = IOConnectCallMethod(v15, 0x4Du, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v20);
      if ((_DWORD)v16)
      {
        uint64_t v13 = v16;
        goto LABEL_16;
      }

      *(void *)&__int128 v18 = __s;
      *((void *)&v18 + 1) = &__s[v20];
      if (!ccder_blob_decode_range() || (uint64_t v13 = 0LL, (der_utils_decode_fv_data(&v18, 0, v3) & 1) == 0)) {
LABEL_14:
      }
        uint64_t v13 = 3758097098LL;
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_rewrap_kek",  ":",  582,  "",  0,  "",  "");
      uint64_t v13 = 3758097084LL;
    }
  }

uint64_t aks_fv_set_protection(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v19 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = v1;
  v25[0] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097098LL;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_set_protection",  ":",  616,  "",  0,  "",  "");
    uint64_t v14 = 3758097084LL;
    goto LABEL_14;
  }

  mach_port_t v16 = aks_client_connection;
  if (der_utils_encode_fv_data(&v21, v4)
    && der_utils_encode_fv_data(&v21, v6)
    && der_utils_encode_fv_data(&v21, v8)
    && der_utils_encode_fv_params(&v21, v13)
    && ccder_blob_encode_tl())
  {
    input[0] = v12;
    input[1] = v10;
    uint64_t input[2] = *((void *)&v21 + 1);
    uint64_t input[3] = (uint64_t)v25 - *((void *)&v21 + 1);
    uint64_t v17 = IOConnectCallMethod(v16, 0x54u, input, 4u, 0LL, 0LL, 0LL, 0LL, __s, &v22);
    if ((_DWORD)v17)
    {
      uint64_t v14 = v17;
      goto LABEL_14;
    }

    *(void *)&__int128 v20 = __s;
    *((void *)&v20 + 1) = &__s[v22];
    if (!v22) {
      goto LABEL_13;
    }
    if (!v19)
    {
LABEL_13:
      uint64_t v14 = 0LL;
      goto LABEL_14;
    }

    uint64_t v14 = 0LL;
    if ((der_utils_decode_fv_data(&v20, 0, v19) & 1) == 0) {
      uint64_t v14 = 3758097098LL;
    }
  }

uint64_t aks_fv_unwrap_vek_with_acm(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unsigned int v13 = v12;
  uint64_t v14 = v1;
  v25[0] = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096LL;
  if (!v7)
  {
    uint64_t v18 = 3758097090LL;
    goto LABEL_15;
  }

  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_unwrap_vek_with_acm",  ":",  653,  "",  0,  "",  "");
    uint64_t v18 = 3758097084LL;
    goto LABEL_15;
  }

  mach_port_t v16 = aks_client_connection;
  if (!der_utils_encode_fv_data(&v21, v5)
    || !der_utils_encode_fv_data(&v21, v7)
    || !der_utils_encode_fv_data(&v21, v9)
    || !der_utils_encode_fv_data(&v21, v11)
    || !der_utils_encode_fv_params(&v21, v14)
    || !ccder_blob_encode_tl())
  {
    goto LABEL_13;
  }

  input[0] = *((void *)&v21 + 1);
  input[1] = (uint64_t)v25 - *((void *)&v21 + 1);
  uint64_t input[2] = v13;
  uint64_t v17 = IOConnectCallMethod(v16, 0x4Bu, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &v22);
  if ((_DWORD)v17)
  {
    uint64_t v18 = v17;
    goto LABEL_15;
  }

  *(void *)&__int128 v20 = __s;
  *((void *)&v20 + 1) = &__s[v22];
  if (!v3)
  {
    uint64_t v18 = 0LL;
    goto LABEL_15;
  }

  uint64_t v18 = 0LL;
  if ((der_utils_decode_fv_key(&v20, 0, v3) & 1) == 0) {
LABEL_13:
  }
    uint64_t v18 = 3758097098LL;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v18;
}

uint64_t aks_fv_unwrap_vek_with_opts(uint64_t a1)
{
  return aks_fv_unwrap_vek_with_acm(a1);
}

void aks_gather_stats(const char *a1, char a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      uint64_t v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 0x40000000LL;
      int v11[2] = __aks_gather_stats_block_invoke_2;
      unint64_t v11[3] = &__block_descriptor_tmp_139;
      uint8_t v11[4] = v4;
      _iterate_path(v12, (uint64_t)&__block_literal_global_17, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if ((a2 & 1) != 0) {
          printf("Free Blocks:%lld blocks of size:%d\n");
        }
        else {
          printf("%lld,%d\n");
        }
      }

      uint64_t v5 = v4 + 340;
      for (uint64_t i = 1LL; i != 5; ++i)
      {
        if ((a2 & 1) != 0)
        {
          uint64_t v9 = &v4[296 * i];
          printf( "%s:\n \tNum files:\t%u,\n \tNum hardlinks:\t%u,\n \tNum compressed:\t%u,\n \tTotal Size:\t%lld,\n \tMin File Size:\t%lld,\n \tMax File Size:\t%lld,\n",  class_names[i],  *(_DWORD *)v9,  *((_DWORD *)v9 + 2),  *((_DWORD *)v9 + 1),  *((void *)v9 + 2),  *((void *)v9 + 3),  *((void *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (uint64_t j = 0LL; j != 252; j += 4LL)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }

        else
        {
          uint64_t v7 = &v4[296 * i];
          printf( "%i,%u,%u,%u,%lld,%lld,%lld,",  i,  *(_DWORD *)v7,  *((_DWORD *)v7 + 2),  *((_DWORD *)v7 + 1),  *((void *)v7 + 2),  *((void *)v7 + 3),  *((void *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (uint64_t k = 0LL; k != 252; k += 4LL)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }

        putchar(10);
        v5 += 296;
      }

      free(v4);
    }
  }

uint64_t __aks_gather_stats_block_invoke()
{
  return 1LL;
}

uint64_t __aks_gather_stats_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result = _get_path_class(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    uint64_t v5 = *(void *)(a2 + 96);
    int64_t v6 = *(void *)(v5 + 96);
    uint64_t v7 = *(void *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296LL * result);
    if ((*(_BYTE *)(v5 + 116) & 0x20) != 0) {
      ++*(_DWORD *)(v7 + 296LL * result + 4);
    }
    uint64_t v8 = v7 + 296LL * result;
    int64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10) {
      *uint64_t v9 = v6;
    }
    uint64_t v11 = v7 + 296LL * result;
    int64_t v14 = *(void *)(v11 + 24);
    unsigned int v12 = (int64_t *)(v11 + 24);
    int64_t v13 = v14;
    if (v14) {
      BOOL v15 = v6 < v13;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      int64_t *v12 = v6;
    }
    if (v6) {
      unint64_t v16 = v7 + 296LL * result + 4 * (63 - __clz(v6));
    }
    else {
      unint64_t v16 = v7 + 296LL * result;
    }
    ++*(_DWORD *)(v16 + 40);
  }

  return result;
}

uint64_t aks_kext_set_options(unsigned int a1, uint64_t a2)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = 1LL;
  input[1] = a1;
  uint64_t input[2] = a2;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x56u, input, 3u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kext_set_options",  ":",  820,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_kext_get_options(unsigned int a1, uint64_t *a2)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v2 = 3758097084LL;
  if (!a2) {
    return 3758097090LL;
  }
  input[0] = 0LL;
  input[1] = a1;
  uint64_t input[2] = 0LL;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v2 = IOConnectCallMethod(aks_client_connection, 0x56u, input, 3u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (!(_DWORD)v2) {
      *a2 = output;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kext_get_options",  ":",  841,  "",  0,  "",  "");
  }

  return v2;
}

uint64_t aks_internal_state()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x10u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_internal_state",  ":",  857,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_run_internal_test(unsigned int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x86u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_run_internal_test",  ":",  871,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_stash_escrow(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  int v16 = v1;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = v16;
    input[1] = v15;
    uint64_t input[2] = v13;
    uint64_t input[3] = v11;
    if (!v15 || (uint64_t v18 = 3758097090LL, v5) && v3)
    {
      uint64_t v18 = IOConnectCallMethod(aks_client_connection, 0x36u, input, 4u, v9, v7, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)v18 && v15)
      {
        __int128 v19 = calloc(__count, 1uLL);
        void *v5 = v19;
        if (v19)
        {
          memcpy(v19, __src, __count);
          uint64_t v18 = 0LL;
          *uint64_t v3 = __count;
        }

        else
        {
          uint64_t v18 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    uint64_t v18 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_escrow",  ":",  890,  "",  0,  "",  "");
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v18;
}

void __get_aks_client_connection_block_invoke()
{
  if (!get_aks_client_connection_connection) {
    get_aks_client_connection_connection = _copy_aks_client_connection( "IOService:/IOResources/AppleKeyStore",  "AppleKeyStore");
  }
}

uint64_t get_akstest_client_connection()
{
  if (get_aks_client_dispatch_queue_onceToken != -1) {
    dispatch_once(&get_aks_client_dispatch_queue_onceToken, &__block_literal_global_168);
  }
  dispatch_sync((dispatch_queue_t)get_aks_client_dispatch_queue_connection_queue, &__block_literal_global_154);
  uint64_t result = get_akstest_client_connection_connection;
  if (!get_akstest_client_connection_connection)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return get_akstest_client_connection_connection;
  }

  return result;
}

void __get_akstest_client_connection_block_invoke()
{
  if (!get_akstest_client_connection_connection) {
    get_akstest_client_connection_connection = _copy_aks_client_connection( "IOService:/IOResources/AppleKeyStoreTest",  "AppleKeyStoreTest");
  }
}

uint64_t akstest_new_key( mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  size_t v19 = 1024LL;
  uint64_t v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if ((_DWORD)v11) {
    return v11;
  }
  uint64_t v17 = 3758097084LL;
  if (outputCnt == 1)
  {
    *a7 = output;
    else {
      return 0LL;
    }
  }

  return v17;
}

uint64_t akstest_new_ekwk( mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint32_t outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  size_t v26 = 1024LL;
  uint64_t v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if ((_DWORD)v17) {
    return v17;
  }
  uint64_t v23 = 3758097084LL;
  if (outputCnt == 3)
  {
    int v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    else {
      return 0LL;
    }
  }

  return v23;
}

uint64_t akstest_new_ek( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  uint64_t v11 = IOConnectCallMethod( a1,  0x14u,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  a7,  a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t akstest_rewrap_ek( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  uint64_t input[3] = a12;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  uint64_t v16 = IOConnectCallMethod( a1,  0x15u,  input,  4u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  outputStruct,  a14);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
  }

  else if (outputCnt == 1)
  {
    uint64_t v17 = 0LL;
    *a15 = output;
  }

  else
  {
    uint64_t v17 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t akstest_unwrap_key( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t outputStructCnt = 1024LL;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  uint64_t v15 = IOConnectCallMethod( a1,  0x10u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &outputStructCnt);
  if ((_DWORD)v15)
  {
    uint64_t v21 = v15;
  }

  else if (aks_unpack_data(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    uint64_t v21 = 3758097084LL;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t akstest_unwrap_ek( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t v25 = 1024LL;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  uint64_t v17 = IOConnectCallMethod( a1,  0x17u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &v25);
  if ((_DWORD)v17)
  {
    uint64_t v23 = v17;
  }

  else if (aks_unpack_data(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    uint64_t v23 = 3758097084LL;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t akstest_check_class(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a3;
  return IOConnectCallMethod(a1, 0x11u, input, 1u, inputStruct, 0x10uLL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t akstest_last_user( mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  uint64_t v9 = IOConnectCallMethod( a1,  0x12u,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t aks_get_internal_info_for_key(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v7) {
      size_t v9 = 18LL;
    }
    else {
      size_t v9 = 0LL;
    }
    uint64_t v10 = IOConnectCallMethod(aks_client_connection, 0x5Du, input, 1u, v7, v9, 0LL, 0LL, __src, &__count);
    size_t v11 = __count;
    if ((_DWORD)v10)
    {
      uint64_t v13 = v10;
    }

    else if (__count - 32769 < 0xFFFFFFFFFFFF8000LL)
    {
      uint64_t v13 = 3758097090LL;
    }

    else
    {
      uint64_t v12 = calloc(__count, 1uLL);
      void *v5 = v12;
      size_t v11 = __count;
      if (v12)
      {
        *uint64_t v3 = __count;
        memcpy(v12, __src, v11);
        uint64_t v13 = 0LL;
        size_t v11 = __count;
      }

      else
      {
        uint64_t v13 = 3758097085LL;
      }
    }
  }

  else
  {
    uint64_t v13 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_internal_info_for_key",  ":",  1246,  "",  0,  "",  "");
    size_t v11 = 0x8000LL;
  }

  memset_s(__src, v11, 0, v11);
  return v13;
}

dispatch_queue_t __get_aks_client_dispatch_queue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("aks-client-queue", 0LL);
  get_aks_client_dispatch_queue_connection_queue = (uint64_t)result;
  return result;
}

uint64_t _copy_aks_client_connection(char *path, const char *a2)
{
  kern_return_t v7;
  CFDictionaryRef v8;
  io_service_t MatchingService;
  io_object_t v10;
  uint64_t result;
  kern_return_t v12;
  io_connect_t connect;
  connect = 0;
  mach_port_t v3 = *MEMORY[0x1896086B0];
  io_service_t v4 = IORegistryEntryFromPath(*MEMORY[0x1896086B0], path);
  uint64_t v5 = (task_port_t *)MEMORY[0x1895FBBE0];
  if (!v4 || (io_object_t v6 = v4, v7 = IOServiceOpen(v4, *MEMORY[0x1895FBBE0], 0, &connect), IOObjectRelease(v6), v7))
  {
    uint64_t v8 = IOServiceMatching(a2);
    io_service_t MatchingService = IOServiceGetMatchingService(v3, v8);
    if (MatchingService)
    {
      uint64_t v10 = MatchingService;
      IOServiceOpen(MatchingService, *v5, 0, &connect);
      IOObjectRelease(v10);
    }
  }

  dispatch_queue_t result = connect;
  if (connect)
  {
    uint64_t v12 = IOConnectCallMethod(connect, 0, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    dispatch_queue_t result = connect;
    if (v12)
    {
      IOServiceClose(connect);
      return 0LL;
    }
  }

  return result;
}

uint64_t sizeof_backup_bag()
{
  return ccder_sizeof();
}

uint64_t encode_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_body_tl()
    || !ccder_blob_encode_implicit_uint64())
  {
    return 4294967273LL;
  }

  int v3 = ccder_blob_encode_tl();
  uint64_t result = 4294967273LL;
  if (v3)
  {
    if (a2 == v6) {
      return 0LL;
    }
    else {
      return 4294967273LL;
    }
  }

  return result;
}

uint64_t decode_backup_bag(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&__int128 v6 = a1;
  *((void *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range()
    || !der_utils_decode_implicit_uint64(&v6, 0x8000000000000000LL, a3)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000001LL, (uint64_t)(a3 + 1), 16)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000002LL, (uint64_t)(a3 + 3), 40)
    || !der_utils_decode_implicit_raw_octet_string_copy(&v6, 0x8000000000000003LL, (uint64_t)(a3 + 8), 16))
  {
    return 4294967277LL;
  }

  int v4 = der_utils_decode_implicit_uint64(&v6, 0x8000000000000004LL, a3 + 10);
  uint64_t result = 4294967277LL;
  if (v4)
  {
    if ((void)v6 == *((void *)&v6 + 1)) {
      return 0LL;
    }
    else {
      return 4294967277LL;
    }
  }

  return result;
}

uint64_t wrap_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  int v12 = 40;
  *(void *)a4 = 0LL;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(void *)(a4 + 80) = 1LL;
  platform_read_random(a4 + 64, 0x10u);
  uint64_t v8 = ccsha256_di();
  if (firebloom_ccpbkdf2_hmac(v8, a3, a2, 16LL, a4 + 64, *(void *)(a4 + 80), 32LL, __s))
  {
    uint64_t v10 = 4294967286LL;
  }

  else
  {
    uint64_t v9 = rfc3394_wrap_legacy( (uint64_t)__s,  0x20u,  0xA6A6A6A6A6A6A6A6LL,  0LL,  (uint64_t *)a1,  0x20u,  (void *)(a4 + 24),  &v12);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
    }

    else if (v12 == 40)
    {
      uint64_t v10 = 0LL;
    }

    else
    {
      uint64_t v10 = 4294967286LL;
    }
  }

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

uint64_t unwrap_backup_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  int v12 = 32;
  if (*(void *)a1)
  {
    uint64_t v10 = 4294967284LL;
  }

  else
  {
    uint64_t v8 = ccsha256_di();
    uint64_t v9 = rfc3394_unwrap_legacy( (uint64_t)__s,  0x20u,  0xA6A6A6A6A6A6A6A6LL,  0LL,  (void *)(a1 + 24),  0x28u,  (void *)a4,  &v12);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
      goto LABEL_8;
    }

    if (v12 != 32)
    {
LABEL_9:
      uint64_t v10 = 4294967286LL;
    }

    else
    {
      cccurve25519_make_pub();
      else {
        uint64_t v10 = 0LL;
      }
    }
  }

uint64_t aks_stash_create_for_bag_and_kek(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  unsigned int v11 = v10;
  int v12 = v1;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v13 = 3758097098LL;
  bzero(v19, 0x1000uLL);
  *(void *)&__int128 v17 = v19;
  *((void *)&v17 + 1) = &v20;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v15 = aks_client_connection;
    if (der_utils_encode_fv_data(&v17, v3) && ccder_blob_encode_tl())
    {
      input[0] = v12;
      input[1] = v11;
      uint64_t input[2] = v7;
      uint64_t input[3] = v5;
      uint64_t input[4] = v9;
      uint64_t input[5] = *((void *)&v17 + 1);
      input[6] = (uint64_t)&v20 - *((void *)&v17 + 1);
      return IOConnectCallMethod(v15, 0x21u, input, 7u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_create_for_bag_and_kek",  ":",  50,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return v13;
}

uint64_t aks_stash_create(uint64_t a1)
{
  return aks_stash_create_for_bag_and_kek(a1);
}

uint64_t aks_stash_load(int a1)
{
  return _aks_stash_load(a1, 0, 0LL);
}

uint64_t _aks_stash_load(int a1, unsigned int a2, BOOL *a3)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0x22u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t result = 0LL;
      if (a3) {
        *a3 = output != 0;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_stash_load",  ":",  77,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_stash_verify(int a1, _BYTE *a2)
{
  BOOL v4 = 0;
  if (!a2) {
    return _aks_stash_load(a1, 1u, &v4);
  }
  *a2 = 0;
  uint64_t result = _aks_stash_load(a1, 1u, &v4);
  if (!(_DWORD)result) {
    *a2 = v4;
  }
  return result;
}

uint64_t aks_stash_destroy()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x25u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_destroy",  ":",  125,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_stash_commit(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x24u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_commit",  ":",  138,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_stash_enable(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x33u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_enable",  ":",  154,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_stash_persist(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x35u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_persist",  ":",  170,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_prederived_free(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856) {
    return 0xFFFFFFFFLL;
  }
  free(a1[1]);
  free(a1);
  return 0LL;
}

uint64_t aks_prederived_create(int a1, uint64_t a2, unint64_t a3, int a4, void ***a5)
{
  uint64_t v14 = 0LL;
  if (!a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  if (_aks_prederived_create_ctx(a4, &v14) || (unsigned int v9 = calloc(0x20uLL, 1uLL)) == 0LL)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }

  else
  {
    unsigned int v10 = v9;
    int v11 = _aks_prederive_passcode(v14, a2, a3, (uint64_t)v9);
    uint64_t v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE
      && !v11
      && !_set_prederived_configuration(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      uint64_t v12 = 0LL;
      if (a5)
      {
        *a5 = v14;
        uint64_t v14 = 0LL;
      }
    }

    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }

  if (v14) {
    aks_prederived_free(v14);
  }
  return v12;
}

uint64_t _aks_prederived_create_ctx(int a1, void *a2)
{
  uint64_t v6 = calloc(0x20uLL, 1uLL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v6;
  *((void *)v6 + 2) = 20LL;
  unsigned int v8 = calloc(0x14uLL, 1uLL);
  *((void *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }

  *uint64_t v7 = 1634431856;
  void v7[6] = a1;
  uint64_t result = CCRandomCopyBytes();
  if ((_DWORD)result)
  {
    unsigned int v10 = (void *)*((void *)v7 + 1);
    if (v10) {
      free(v10);
    }
    goto LABEL_19;
  }

  if (a1 == 3) {
    int v9 = 2000;
  }
  else {
    int v9 = 10000000;
  }
  if (a1 == 2) {
    int v9 = 1000;
  }
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t _aks_prederive_passcode(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 != 1634431856 || !a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 && (a1[6] - 4) >= 0xFFFFFFFD)
  {
    ccsha256_di();
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t _set_prederived_configuration(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  rsize_t __n = 0LL;
  __s = 0LL;
  uint64_t v10 = 3758097090LL;
  uint64_t v14 = 0LL;
  if ((a2 || !a3) && a4 && a5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v12 = aks_client_connection;
      if (!encode_list_add_data(&v14, (uint64_t)der_key_config_prederived_salt, *(void *)(a5 + 8))
        && !encode_list_add_data(&v14, (uint64_t)der_key_config_prederived_passcode, a4)
        && !encode_list_add_number( &v14,  (uint64_t)der_key_config_prederived_iterations,  *(unsigned int *)(a5 + 4))
        && !encode_list_add_number( &v14,  (uint64_t)der_key_config_prederived_type,  *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !encode_list_add_data(&v14, (uint64_t)der_key_passcode, a2))
        && !encode_list_is_empty(&v14)
        && !encode_list_dict(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        uint64_t input[2] = __n;
        uint64_t v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_set_prederived_configuration",  ":",  218,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
    }
  }

  encode_list_free(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v10;
}

uint64_t aks_prederived_is_enabled(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  *(_DWORD *)uint64_t result = 1634431856;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_prederived_configuration",  ":",  384,  "",  0,  "",  "");
LABEL_16:
    aks_prederived_free((void **)v6);
    return 0LL;
  }

  mach_port_t v8 = aks_client_connection;
  bzero(outputStruct, 0x8000uLL);
  v14[0] = 0x8000LL;
  uint64_t input = v4;
  if (IOConnectCallMethod(v8, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, v14) || v14[0] > 0x8000) {
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  __int128 v16 = 0u;
  __int128 v18 = 0u;
  uint64_t v19 = 0LL;
  __int128 v15 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  v14[1] = (size_t)der_key_config_prederived_salt;
  __int128 v17 = (unint64_t)der_key_config_prederived_iterations;
  uint64_t v20 = der_key_config_prederived_type;
  der_dict_iterate();
  uint64_t v10 = ccder_decode_tl();
  if (v10)
  {
    int v11 = (const void *)v10;
    mach_port_t v12 = calloc(*(void *)(v6 + 16), 1uLL);
    *(void *)(v6 + _Block_object_dispose(va, 8) = v12;
    if (!v12)
    {
      int v13 = 0;
      if (!Mutable) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    memcpy(v12, v11, *(void *)(v6 + 16));
    *(_DWORD *)(v6 + 4) = der_get_number();
    *(_DWORD *)(v6 + 24) = der_get_number();
  }

  int v13 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (!v13 || !*(void *)(v6 + 16)) {
    goto LABEL_16;
  }
  *uint64_t v3 = v6;
  return 1LL;
}

uint64_t aks_prederived_unlock_keybag(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  if (a3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a4 == 0LL;
  else {
    uint64_t v7 = aks_unlock_bag(a1, (uint64_t)v9, 32);
  }
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t aks_unlock_bag(int a1, uint64_t a2, int a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    return IOConnectCallMethod(aks_client_connection, 0xCu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_bag",  ":",  807,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_prederived_change_secret(int a1, uint64_t a2, int a3, uint64_t a4, int a5, void ***a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  __int128 v16 = 0LL;
  if (!a6) {
    goto LABEL_17;
  }
  uint64_t v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3) {
    goto LABEL_17;
  }
  int v11 = _aks_prederived_create_ctx(*((_DWORD *)v7 + 6), &v16);
  mach_port_t v12 = v16;
  if (v11 || (int v13 = _aks_prederive_passcode(v16, a4, a5, (uint64_t)v17), v12 = v16, v13))
  {
LABEL_15:
    if (v12) {
      aks_prederived_free(v12);
    }
LABEL_17:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }

  if (_set_prederived_configuration(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    mach_port_t v12 = v16;
    goto LABEL_15;
  }

  aks_prederived_free(v7);
  uint64_t v14 = 0LL;
  *a6 = v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t aks_create_bag(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0LL, 0, a3, -1, a4);
}

uint64_t _create_bag(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  input[6] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      uint64_t input[2] = a1;
      uint64_t input[3] = a2;
      uint64_t input[4] = a3;
      uint64_t input[5] = a4;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      uint64_t v14 = IOConnectCallMethod(aks_client_connection, 2u, input, 6u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v14) {
        *a7 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_create_bag",  ":",  187,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t aks_create_escrow_bag(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0LL, 0, 2u, a3, a4);
}

uint64_t aks_create_escrow_bag_with_auth(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return _create_bag(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t aks_create_sync_bag(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return _create_bag(a1, a2, 0LL, 0, 0x8000002u, a3, a4);
}

uint64_t aks_create_sync_bag_with_auth(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return _create_bag(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t aks_invalidate_sync_bags()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x42u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_invalidate_sync_bags",  ":",  544,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_unlock_with_sync_bag(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      uint64_t input[2] = a4;
      return IOConnectCallMethod(aks_client_connection, 0x43u, input, 3u, a1, a2, 0LL, 0LL, 0LL, 0LL);
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_with_sync_bag",  ":",  557,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t aks_load_bag(const void *a1, int a2, _DWORD *a3)
{
  output[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v6 = 3758097090LL;
    if (a1)
    {
      if (a3)
      {
        output[0] = 0LL;
        uint32_t outputCnt = 1;
        uint64_t v6 = IOConnectCallMethod(aks_client_connection, 6u, 0LL, 0, a1, a2, output, &outputCnt, 0LL, 0LL);
        if (!(_DWORD)v6) {
          *a3 = output[0];
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_load_bag",  ":",  574,  "",  0,  "",  "");
  }

  return v6;
}

uint64_t aks_invalidate_bag(const void *a1, int a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a1) {
      return IOConnectCallMethod(aks_client_connection, 0x57u, 0LL, 0, a1, a2, 0LL, 0LL, 0LL, 0LL);
    }
    return 3758097090LL;
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_invalidate_bag",  ":",  596,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_unload_bag(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 4u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_bag",  ":",  612,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_unload_session_bags(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x37u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_session_bags",  ":",  629,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_save_bag(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  BOOL v5 = v4;
  int v6 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v8 = aks_client_connection;
    uint64_t result = 3758097090LL;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        uint64_t input = v6;
        uint64_t result = IOConnectCallMethod(v8, 3u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          void *v5 = v10;
          if (v10)
          {
            memcpy(v10, __src, __count);
            uint64_t result = 0LL;
            *uint64_t v3 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_save_bag",  ":",  646,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_change_secret_opts( int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  input[12] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a11;
    uint64_t input[2] = a10;
    uint64_t input[3] = a2;
    uint64_t input[4] = a3;
    uint64_t input[5] = a4;
    input[6] = a5;
    uint64_t input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0xFu, input, 0xCu, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a13)
    {
      if (!(_DWORD)result) {
        *a13 = output;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_change_secret_opts",  ":",  678,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_change_secret_se( int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return aks_change_secret_opts(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t aks_change_secret(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return aks_change_secret_opts(a1, a2, a3, a4, a5, 0LL, 0, 0LL, 0, 0xFFu, a6, 0, a7);
}

uint64_t aks_get_bag_uuid(int a1, _OWORD *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  size_t v7 = 16LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      __int128 outputStruct = 0uLL;
      uint64_t input = a1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0x17u, &input, 1u, 0LL, 0LL, 0LL, 0LL, &outputStruct, &v7);
      if (!(_DWORD)v4) {
        *a2 = outputStruct;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_bag_uuid",  ":",  729,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_copy_volume_cookie(int a1, void *a2, size_t *a3)
{
  return aks_copy_volume_cookie_persona(a1, (uint64_t)&UUID_NULL, a2, a3);
}

uint64_t aks_copy_volume_cookie_persona(int a1, uint64_t a2, void *a3, size_t *a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  __int16 v23 = 0;
  memset(__src, 0, sizeof(__src));
  size_t __count = 34LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v14 = 3758097090LL;
    if (a3 && a4)
    {
      mach_port_t v15 = aks_client_connection;
      uint64_t input = a1;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v16 = IOConnectCallMethod( v15,  0x44u,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
        if ((_DWORD)v16)
        {
          uint64_t v14 = v16;
        }

        else
        {
          __int128 v17 = calloc(__count, 1uLL);
          *a3 = v17;
          uint64_t v14 = 3758097085LL;
          if (v17)
          {
            memcpy(v17, __src, __count);
            uint64_t v14 = 0LL;
            *a4 = __count;
          }
        }
      }

      else
      {
        uint64_t v14 = 3758097085LL;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_copy_volume_cookie_persona",  ":",  760,  "",  0,  "",  "");
    uint64_t v14 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t aks_lock_bag(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0xDu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_bag",  ":",  790,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_get_lock_state(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 7u, input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_lock_state",  ":",  824,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_wrap_key(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      size_t v18 = *a6;
      uint64_t v16 = IOConnectCallMethod(aks_client_connection, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }

      else
      {
        *a6 = v18;
        uint64_t v14 = 0LL;
        if (a7) {
          *a7 = output;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_wrap_key",  ":",  848,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t aks_unwrap_key(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v12 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v12 = 3758097090LL;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          size_t v15 = *a6;
          uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0xBu, input, 2u, a1, a2, 0LL, 0LL, a5, &v15);
          if (!(_DWORD)v12) {
            *a6 = v15;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unwrap_key",  ":",  877,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t aks_rewrap_key_for_backup( const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v14 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      uint64_t input[2] = a5;
      uint64_t input[3] = a6;
      size_t v17 = 108LL;
      return IOConnectCallMethod(aks_client_connection, 0x18u, input, 4u, a1, a2, 0LL, 0LL, a7, &v17);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_rewrap_key_for_backup",  ":",  901,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t aks_get_system(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0xEu, input, a1 != 0, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_system",  ":",  922,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_set_system_with_passcode(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(aks_client_connection, 5u, input, 4u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_system_with_passcode",  ":",  950,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_set_system(int a1, int a2)
{
  return aks_set_system_with_passcode(a1, a2, 0LL, 0);
}

uint64_t aks_set_keybag_for_volume(int a1, uint64_t a2, unsigned int a3)
{
  return aks_set_keybag_for_volume_with_cookie_persona(a1, a2, a3);
}

uint64_t aks_set_keybag_for_volume_with_cookie(int a1, uint64_t a2, unsigned int a3)
{
  return aks_set_keybag_for_volume_with_cookie_persona(a1, a2, a3);
}

uint64_t aks_set_keybag_for_volume_with_cookie_persona(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v6 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v13 = aks_client_connection;
    input[0] = a1;
    input[1] = a3;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v6 = IOConnectCallMethod( v13,  0x41u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
      uint64_t v14 = *(void **)&inputStructCnt[1];
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v6 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_keybag_for_volume_with_cookie_persona",  ":",  987,  "",  0,  "",  "");
    uint64_t v14 = 0LL;
  }

  free(v14);
  return v6;
}

uint64_t aks_backup_enable_volume(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  BOOL v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 3758097085LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v18 = aks_client_connection;
    input[0] = v9;
    input[1] = v7;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v13, v14, v15, v16, v17, v10);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v19 = IOConnectCallMethod( v18,  0x6Eu,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
      if ((_DWORD)v19)
      {
        uint64_t v11 = v19;
      }

      else
      {
        uint64_t v20 = calloc(__count, 1uLL);
        void *v5 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          uint64_t v11 = 0LL;
          *uint64_t v3 = __count;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_enable_volume",  ":",  1014,  "",  0,  "",  "");
    uint64_t v11 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t aks_backup_disable_volume(uint64_t a1)
{
  uint64_t v2 = 3758097084LL;
  uint64_t v13 = 0LL;
  int v12 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v9 = aks_client_connection;
    aks_pack_data(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      uint64_t v2 = IOConnectCallMethod(v9, 0x6Fu, 0LL, 0, v13, v12, 0LL, 0LL, 0LL, 0LL);
      uint64_t v10 = v13;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v2 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_disable_volume",  ":",  1044,  "",  0,  "",  "");
    uint64_t v10 = 0LL;
  }

  free(v10);
  return v2;
}

uint64_t aks_backup_copy_current_bag_uuid(uint64_t a1, void *a2)
{
  uint64_t v4 = 3758097084LL;
  uint64_t v16 = 0LL;
  int v15 = 0;
  size_t v14 = 16LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v11 = aks_client_connection;
    aks_pack_data(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x70u, 0LL, 0, v16, v15, 0LL, 0LL, a2, &v14);
      int v12 = v16;
    }

    else
    {
      int v12 = 0LL;
      uint64_t v4 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_copy_current_bag_uuid",  ":",  1066,  "",  0,  "",  "");
    int v12 = 0LL;
  }

  free(v12);
  return v4;
}

uint64_t aks_backup_rewrap_key( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v13 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v20 = aks_client_connection;
    __int128 v21 = 0LL;
    uint64_t v13 = 3758097090LL;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      uint64_t input[2] = a6;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      size_t v23 = 108LL;
      uint64_t v13 = IOConnectCallMethod( v20,  0x71u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  a7,  &v23);
      __int128 v21 = *(void **)&inputStructCnt[1];
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_rewrap_key",  ":",  1087,  "",  0,  "",  "");
    __int128 v21 = 0LL;
  }

  free(v21);
  return v13;
}

uint64_t aks_backup_rewrap_ek( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v15 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v22 = aks_client_connection;
    size_t v23 = 0LL;
    uint64_t v15 = 3758097090LL;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      uint64_t input[2] = a8;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      size_t v25 = 108LL;
      uint64_t v15 = IOConnectCallMethod( v22,  0x71u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &v25);
      size_t v23 = *(void **)&inputStructCnt[1];
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_rewrap_ek",  ":",  1113,  "",  0,  "",  "");
    size_t v23 = 0LL;
  }

  free(v23);
  return v15;
}

uint64_t aks_backup_unwrap_bag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 __s = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = decode_backup_bag(a1, a2, v13);
  if ((_DWORD)v8)
  {
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = unwrap_backup_bag((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!(_DWORD)v9)
    {
      __int128 v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      __int128 v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }

  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return err_sks_to_aks(v9);
}

uint64_t aks_backup_copy_bag_uuid(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = decode_backup_bag(a1, a2, v6);
  if (!(_DWORD)v4) {
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  }
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return err_sks_to_aks(v4);
}

uint64_t aks_backup_unwrap_key(__int128 *a1, void *a2, unsigned int a3, void *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v6 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v6;
  __int128 v7 = a1[3];
  __int128 v14 = a1[2];
  __int128 v15 = v7;
  unsigned int v10 = *a5;
  int __s = 1;
  uint64_t v8 = unwrap_data((uint64_t)&__s, 0LL, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return err_sks_to_aks(v8);
}

uint64_t aks_kc_backup_unwrap_key(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64LL;
      return IOConnectCallMethod(aks_client_connection, 0x82u, input, 2u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_unwrap_key",  ":",  1193,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t aks_kc_backup_wrap_key(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      input[0] = a1;
      return IOConnectCallMethod(aks_client_connection, 0x81u, input, 1u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_wrap_key",  ":",  1212,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t aks_kc_backup_get_handle(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0x83u, input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_handle",  ":",  1231,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_kc_backup_get_uuid(int a1, unsigned __int8 *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t v10 = 0LL;
      input[0] = a1;
      size_t v8 = 16LL;
      *(void *)src = 0LL;
      uint64_t v6 = IOConnectCallMethod(aks_client_connection, 0x84u, input, 1u, 0LL, 0LL, 0LL, 0LL, src, &v8);
      if ((_DWORD)v6)
      {
        return v6;
      }

      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0LL;
      }

      else
      {
        return 3758604298LL;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_uuid",  ":",  1253,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_kc_backup_open_keybag(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  if (a5)
  {
    int v7 = a4;
    int v9 = a2;
    *a5 = -1;
    int v11 = aks_backup_unwrap_bag((uint64_t)a1, a2, a3, a4, a6);
    __int128 v12 = (FILE **)MEMORY[0x1895F89E0];
    __int128 v13 = (FILE *)*MEMORY[0x1895F89E0];
    if (!v11)
    {
      fprintf( v13,  "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1302,  "",  0,  "",  "");
      uint64_t v17 = 0LL;
      goto LABEL_9;
    }

    fprintf( v13,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1290,  "",  0,  "",  v11,  "");
    uint64_t bag = aks_load_bag(a1, v9, a5);
    if ((_DWORD)bag)
    {
      uint64_t v17 = bag;
      fprintf( *v12,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1292,  "",  0,  "",  bag,  "");
    }

    else
    {
      int is_enabled = aks_prederived_is_enabled(*a5);
      int v16 = *a5;
      if (is_enabled)
      {
        uint64_t v17 = aks_prederived_unlock_keybag(v16, a3, v7, 0LL);
        if (!(_DWORD)v17) {
          goto LABEL_9;
        }
        fprintf( *v12,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }

      else
      {
        uint64_t v17 = aks_unlock_bag(v16, a3, v7);
        if (!(_DWORD)v17) {
          goto LABEL_9;
        }
        fprintf( *v12,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }
    }
  }

  else
  {
    uint64_t v17 = 3758097090LL;
  }

  if (*a5 != -1)
  {
    aks_unload_bag(*a5);
    *a5 = -1;
  }

uint64_t aks_keybag_persona_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v8 = 3758097084LL;
  uint64_t v19 = 0LL;
  int v18 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v15 = aks_client_connection;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    aks_pack_data(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      uint64_t v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0LL, 0LL, 0LL, 0LL);
      int v16 = v19;
    }

    else
    {
      int v16 = 0LL;
      uint64_t v8 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_create",  ":",  1324,  "",  0,  "",  "");
    int v16 = 0LL;
  }

  free(v16);
  return v8;
}

uint64_t aks_keybag_persona_create_with_flags(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v17 = aks_client_connection;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a5;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v10 = IOConnectCallMethod( v17,  0x75u,  input,  4u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
      int v18 = *(void **)&inputStructCnt[1];
    }

    else
    {
      int v18 = 0LL;
      uint64_t v10 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_create_with_flags",  ":",  1346,  "",  0,  "",  "");
    int v18 = 0LL;
  }

  free(v18);
  return v10;
}

uint64_t aks_keybag_persona_list(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  uint64_t v16 = *MEMORY[0x1895F89C0];
  bzero(__src, 0x2000uLL);
  size_t __count = 0x2000LL;
  uint64_t input = v6;
  uint64_t v7 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      uint64_t v9 = IOConnectCallMethod(aks_client_connection, 0x61u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v9)
      {
        uint64_t v7 = v9;
      }

      else
      {
        if (__count)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          void *v5 = v10;
          if (!v10)
          {
            uint64_t v7 = 3758097085LL;
            goto LABEL_10;
          }

          memcpy(v10, __src, __count);
          size_t v11 = __count;
        }

        else
        {
          size_t v11 = 0LL;
          void *v5 = 0LL;
        }

        uint64_t v7 = 0LL;
        *uint64_t v3 = v11;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_list",  ":",  1372,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

uint64_t aks_keybag_persona_delete(int a1, uint64_t a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  uint64_t v15 = 0LL;
  int v14 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v11 = aks_client_connection;
    input[0] = a1;
    aks_pack_data(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x62u, input, 1u, v15, v14, 0LL, 0LL, 0LL, 0LL);
      uint64_t v12 = v15;
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v4 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_delete",  ":",  1394,  "",  0,  "",  "");
    uint64_t v12 = 0LL;
  }

  free(v12);
  return v4;
}

uint64_t aks_auth_token_create(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v12 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v12 = 3758097090LL;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      uint64_t input[2] = a2;
      uint64_t input[3] = a3;
      return IOConnectCallMethod(aks_client_connection, 0x26u, input, 4u, 0LL, 0LL, 0LL, 0LL, a5, a6);
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_auth_token_create",  ":",  1415,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t aks_set_configuration(int a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  rsize_t __n = 0LL;
  int __s = 0LL;
  uint64_t v7 = 3758097090LL;
  uint64_t v20 = 0LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v9 = aks_client_connection;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!_copy_cf_key(a4, @"GracePeriod", TypeID, (uint64_t)der_key_config_graceperiod, &v20))
    {
      CFTypeID v11 = CFNumberGetTypeID();
      if (!_copy_cf_key(a4, @"BackOffDelay", v11, (uint64_t)der_key_config_backoff_delay, &v20))
      {
        CFTypeID v12 = CFNumberGetTypeID();
        if (!_copy_cf_key( a4,  @"MaxUnlockAttempts",  v12,  (uint64_t)der_key_config_max_unlock_attempts,  &v20))
        {
          CFTypeID v13 = CFNumberGetTypeID();
          if (!_copy_cf_key( a4,  @"EscrowPasscodePeriod",  v13,  (uint64_t)der_key_config_escrow_passcode_period,  &v20))
          {
            CFTypeID v14 = CFNumberGetTypeID();
            if (!_copy_cf_key( a4,  @"EscrowTokenPeriod",  v14,  (uint64_t)der_key_config_escrow_token_period,  &v20))
            {
              CFTypeID v15 = CFDataGetTypeID();
              if (!_copy_cf_key(a4, @"UserUUID", v15, (uint64_t)der_key_config_user_uuid, &v20))
              {
                CFTypeID v16 = CFDataGetTypeID();
                if (!_copy_cf_key(a4, @"BindKEKToKB", v16, (uint64_t)der_key_config_bind_kek, &v20))
                {
                  CFTypeID v17 = CFBooleanGetTypeID();
                  if (!_copy_cf_key( a4,  @"InactivityRebootEnabled",  v17,  (uint64_t)der_key_inactivity_reboot_enabled,  &v20))
                  {
                    CFTypeID v18 = CFBooleanGetTypeID();
                    if (!_copy_cf_key( a4,  @"OnenessAutomaticMode",  v18,  (uint64_t)der_key_oneness_automatic_mode,  &v20)
                      && !encode_list_is_empty(&v20)
                      && (!a2 || !encode_list_add_data(&v20, (uint64_t)der_key_passcode, a2))
                      && !encode_list_dict(&v20, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      uint64_t input[2] = __n;
                      uint64_t v7 = IOConnectCallMethod(v9, 0x1Eu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_configuration",  ":",  1488,  "",  0,  "",  "");
    uint64_t v7 = 3758097084LL;
  }

  encode_list_free(&v20);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v7;
}

uint64_t _copy_cf_key(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  value = 0LL;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if ((_DWORD)result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        uint64_t v10 = 0LL;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10)
          || encode_list_add_number(a5, a4, v10))
        {
          return 0xFFFFFFFFLL;
        }

        return 0LL;
      }

      if (CFBooleanGetTypeID() == a3)
      {
        CFBooleanGetValue((CFBooleanRef)value);
      }

      else
      {
        if (CFDataGetTypeID() != a3) {
          return 0xFFFFFFFFLL;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        CFDataGetLength((CFDataRef)value);
      }

      return 0LL;
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t aks_get_configuration(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t v51 = *MEMORY[0x1895F89C0];
  uint64_t v5 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      mach_port_t v7 = aks_client_connection;
      bzero(outputStruct, 0x8000uLL);
      v47[0] = 0x8000LL;
      uint64_t input = v4;
      uint64_t v8 = IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, v47);
      if ((_DWORD)v8)
      {
        return v8;
      }

      else if (v47[0] > 0x8000)
      {
        return 3758604298LL;
      }

      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
        bzero(v48, 0x250uLL);
        v47[1] = (size_t)der_key_config_graceperiod;
        v48[4] = der_key_config_backoff_delay;
        v48[9] = der_key_config_max_unlock_attempts;
        v48[14] = der_key_config_escrow_passcode_period;
        v48[19] = der_key_config_escrow_token_period;
        v48[24] = der_key_config_flags;
        v48[29] = der_key_config_user_uuid;
        v48[34] = der_key_config_group_uuid;
        v48[39] = der_key_config_recovery_iterations;
        v48[44] = der_key_config_recovery_flags;
        v48[49] = der_key_config_recovery_target_iterations;
        v48[54] = der_key_memento_supported;
        v48[59] = der_key_memento_blob_exists;
        v48[64] = der_key_config_memento_passcode_generation;
        v48[69] = der_key_config_passcode_generation;
        der_dict_iterate();
        uint64_t v10 = v48[0];
        uint64_t v11 = v48[5];
        uint64_t v12 = v48[10];
        uint64_t v13 = v48[15];
        uint64_t v14 = v48[20];
        uint64_t v15 = v48[25];
        uint64_t v16 = v48[30];
        id v46 = v3;
        uint64_t v17 = v48[35];
        uint64_t v39 = v48[40];
        uint64_t v40 = v48[45];
        uint64_t v41 = v48[50];
        uint64_t v42 = v48[55];
        uint64_t v43 = v48[60];
        uint64_t v44 = v48[65];
        uint64_t v45 = v48[70];
        CFTypeID TypeID = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"GracePeriod", TypeID, v10);
        CFTypeID v19 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"BackOffDelay", v19, v11);
        CFTypeID v20 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"MaxUnlockAttempts", v20, v12);
        CFTypeID v21 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"EscrowPasscodePeriod", v21, v13);
        CFTypeID v22 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"EscrowTokenPeriod", v22, v14);
        CFTypeID v23 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"ConfigFlags", v23, v15);
        CFTypeID v24 = CFDataGetTypeID();
        _set_cf_key(Mutable, @"UserUUID", v24, v16);
        CFTypeID v25 = CFDataGetTypeID();
        _set_cf_key(Mutable, @"GroupUUID", v25, v17);
        CFTypeID v26 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"RecoveryIterations", v26, v39);
        CFTypeID v27 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"RecoveryFlags", v27, v40);
        CFTypeID v28 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"RecoveryTargetIterations", v28, v41);
        CFTypeID v29 = CFBooleanGetTypeID();
        _set_cf_key(Mutable, @"MementoSupported", v29, v42);
        CFTypeID v30 = CFBooleanGetTypeID();
        _set_cf_key(Mutable, @"MementoBlobExists", v30, v43);
        CFTypeID v31 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"MementoPasscodeGeneration", v31, v44);
        CFTypeID v32 = CFNumberGetTypeID();
        _set_cf_key(Mutable, @"PasscodeGeneration", v32, v45);
        char number = der_get_number();
        uint64_t v34 = (const void *)*MEMORY[0x189604DE0];
        uint64_t v35 = (const void *)*MEMORY[0x189604DE8];
        if ((number & 2) != 0) {
          uint64_t v36 = (const void *)*MEMORY[0x189604DE8];
        }
        else {
          uint64_t v36 = (const void *)*MEMORY[0x189604DE0];
        }
        CFDictionarySetValue(Mutable, @"InactivityRebootEnabled", v36);
        if ((number & 8) != 0) {
          uint64_t v37 = v35;
        }
        else {
          uint64_t v37 = v34;
        }
        CFDictionarySetValue(Mutable, @"OnenessAutomaticMode", v37);
        uint64_t v5 = 0LL;
        char *v46 = Mutable;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_configuration",  ":",  1556,  "",  0,  "",  "");
  }

  return v5;
}

void _set_cf_key(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      CFIndex valuePtr = der_get_number();
      CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt64Type, &valuePtr);
      if (!v7) {
        return;
      }
LABEL_12:
      CFNumberRef v11 = v7;
      CFDictionaryAddValue(a1, a2, v7);
      CFRelease(v11);
      return;
    }

    if (CFBooleanGetTypeID() == a3)
    {
      int v8 = der_get_BOOL();
      mach_port_t v9 = (const void **)MEMORY[0x189604DE8];
      if (!v8) {
        mach_port_t v9 = (const void **)MEMORY[0x189604DE0];
      }
      CFDictionaryAddValue(a1, a2, *v9);
    }

    else if (CFDataGetTypeID() == a3)
    {
      CFIndex valuePtr = 0LL;
      uint64_t v10 = (const UInt8 *)ccder_decode_tl();
      if (v10)
      {
        CFNumberRef v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], v10, valuePtr);
        goto LABEL_12;
      }
    }
  }

uint64_t aks_assert_hold(int a1, unsigned int a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x1Au, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_hold",  ":",  1654,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_assert_drop(int a1, unsigned int a2)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = a2;
  input[1] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x1Bu, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_drop",  ":",  1672,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_assert_promote(int a1, unsigned int a2)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x64u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_promote",  ":",  1687,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_oneness_heartbeat(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x91u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_oneness_heartbeat",  ":",  1707,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_assert_consume(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x65u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_consume",  ":",  1722,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_recover_with_escrow_bag(int a1, uint64_t a2)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  uint64_t v15 = 0LL;
  int v14 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v10 = aks_client_connection;
    aks_pack_data((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    uint64_t input[2] = v14;
    uint64_t v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v12 = v15;
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_recover_with_escrow_bag",  ":",  1739,  "",  0,  "",  "");
    uint64_t v12 = 0LL;
    uint64_t v11 = 3758097084LL;
  }

  free(v12);
  return v11;
}

uint64_t aks_fdr_hmac_data(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v8 = (const void *)v1;
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 3758097090LL;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v8 && v5 && v3)
    {
      uint64_t v11 = IOConnectCallMethod(aks_client_connection, 0x29u, 0LL, 0, v8, v7, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v11)
      {
        uint64_t v9 = v11;
      }

      else
      {
        uint64_t v12 = calloc(__count, 1uLL);
        void *v5 = v12;
        if (v12)
        {
          memcpy(v12, __src, __count);
          uint64_t v9 = 0LL;
          *uint64_t v3 = __count;
        }

        else
        {
          uint64_t v9 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fdr_hmac_data",  ":",  1758,  "",  0,  "",  "");
    uint64_t v9 = 3758097084LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v9;
}

uint64_t aks_generation(int a1, unsigned int a2, _DWORD *a3)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0x28u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a3)
    {
      if (!(_DWORD)result) {
        *a3 = output;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_generation",  ":",  1781,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t _aks_verify_password(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  uint64_t v9 = 3758097084LL;
  CFTypeID v21 = 0LL;
  int v20 = 0;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v16 = aks_client_connection;
    if (a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = "";
    }
    aks_pack_data((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      uint64_t input[2] = (uint64_t)v21;
      uint64_t input[3] = v20;
      uint64_t v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      CFTypeID v18 = v21;
    }

    else
    {
      CFTypeID v18 = 0LL;
      uint64_t v9 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_verify_password",  ":",  1807,  "",  0,  "",  "");
    CFTypeID v18 = 0LL;
  }

  free(v18);
  return v9;
}

uint64_t aks_verify_password(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _aks_verify_password(a1, a2, a3, a4, a5, 0);
}

uint64_t aks_verify_password_memento(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _aks_verify_password(a1, a2, a3, a4, a5, 1u);
}

uint64_t aks_register_for_notifications()
{
  return 3758097084LL;
}

uint64_t aks_create_signing_key(int a1, int a2, void *a3, size_t *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  size_t __count = 256LL;
  input[0] = a1;
  input[1] = a2;
  uint64_t result = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      memset(__src, 0, sizeof(__src));
      uint64_t result = IOConnectCallMethod(aks_client_connection, 0x31u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x100)
        {
          return 3758604298LL;
        }

        else
        {
          uint64_t v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            uint64_t result = 0LL;
            *a4 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_create_signing_key",  ":",  1859,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_create_signing_key_with_params(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v18 = *MEMORY[0x1895F89C0];
  size_t __count = 0x8000LL;
  input[0] = v1;
  input[1] = v6;
  uint64_t result = 3758097090LL;
  if (v4)
  {
    uint64_t v8 = v5;
    if (v5)
    {
      uint64_t v9 = v4;
      size_t v10 = v3;
      uint64_t v11 = v2;
      mach_port_t aks_client_connection = get_aks_client_connection();
      if (aks_client_connection)
      {
        mach_port_t v13 = aks_client_connection;
        bzero(__src, 0x8000uLL);
        uint64_t result = IOConnectCallMethod(v13, 0x31u, input, 2u, v11, v10, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count > 0x8000)
          {
            return 3758604298LL;
          }

          else
          {
            uint64_t v14 = calloc(__count, 1uLL);
            *uint64_t v9 = v14;
            if (v14)
            {
              memcpy(v14, __src, __count);
              uint64_t result = 0LL;
              size_t *v8 = __count;
            }

            else
            {
              return 3758097085LL;
            }
          }
        }
      }

      else
      {
        fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_create_signing_key_with_params",  ":",  1881,  "",  0,  "",  "");
        return 3758097084LL;
      }
    }
  }

  return result;
}

uint64_t aks_obliterate_signing_keys(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t remote_session_operate(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  uint32_t v7 = v6;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  size_t __count = 15360LL;
  input[0] = v1;
  input[1] = v8;
  uint64_t input[2] = v9;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v11 = aks_client_connection;
    bzero(__src, 0x3C00uLL);
    uint64_t v12 = IOConnectCallMethod(v11, v7, input, 3u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v12)
    {
      return v12;
    }

    else if (__count > 0x3C00)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v13 = 0LL;
      if (v5 && v3)
      {
        if (__count)
        {
          uint64_t v14 = calloc(__count, 1uLL);
          void *v5 = v14;
          if (!v14) {
            return 3758097085LL;
          }
          memcpy(v14, __src, __count);
          size_t v15 = __count;
        }

        else
        {
          size_t v15 = 0LL;
        }

        uint64_t v13 = 0LL;
        *size_t v3 = v15;
      }
    }
  }

  else
  {
    uint64_t v13 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "remote_session_operate",  ":",  2017,  "",  0,  "",  "");
  }

  return v13;
}

uint64_t aks_sign_signing_key( int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8, size_t *a9)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  memset(__src, 0, sizeof(__src));
  size_t __count = 256LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  uint64_t v9 = 3758097090LL;
  uint64_t input[2] = a5;
  if (a8 && a9)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v18 = aks_client_connection;
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v19 = IOConnectCallMethod( v18,  0x32u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
        if ((_DWORD)v19)
        {
          uint64_t v9 = v19;
        }

        else if (__count > 0x100)
        {
          uint64_t v9 = 3758604298LL;
        }

        else
        {
          uint64_t v20 = calloc(__count, 1uLL);
          *a8 = v20;
          uint64_t v9 = 3758097085LL;
          if (v20)
          {
            memcpy(v20, __src, __count);
            uint64_t v9 = 0LL;
            *a9 = __count;
          }
        }
      }

      else
      {
        uint64_t v9 = 3758097085LL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_sign_signing_key",  ":",  1911,  "",  0,  "",  "");
      uint64_t v9 = 3758097084LL;
    }
  }

  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t aks_remote_session( int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  uint64_t v10 = 3758097084LL;
  input[0] = a2;
  input[1] = a1;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v17 = aks_client_connection;
    aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v18 = IOConnectCallMethod( v17,  0x2Cu,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  0LL,  0LL);
      uint64_t v10 = v18;
      if (a9 && !(_DWORD)v18) {
        *a9 = output;
      }
    }

    else
    {
      uint64_t v10 = 3758097085LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_session",  ":",  1938,  "",  0,  "",  "");
  }

  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t aks_validate_local_key(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  mach_port_t v17 = 0LL;
  int __s = 0LL;
  uint64_t v4 = 3758097084LL;
  rsize_t __n = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v5 = 3758097090LL;
  rsize_t __smax = 0LL;
  if (!a3 || !a4) {
    goto LABEL_12;
  }
  int v8 = -536870212;
  *(void *)&__int128 v19 = a3;
  *((void *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4)) {
    goto LABEL_19;
  }
  uint64_t v16 = 0LL;
  if ((ccder_blob_decode_range() & 1) == 0)
  {
    int v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    uint64_t v5 = 3758097084LL;
LABEL_12:
    uint64_t v12 = __s;
    uint64_t v4 = v5;
    goto LABEL_13;
  }

  der_utils_decode_implicit_uint64(&v19, 0x8000000000000001LL, &v16);
  if (v16)
  {
    uint64_t v5 = remote_session_operate(a1);
    if ((_DWORD)v5) {
      syslog(3, "error: validating v1 local signing key failed: %d");
    }
    goto LABEL_12;
  }

  uint64_t v11 = aks_create_signing_key(a1, 11, &__s, &__n);
  if ((_DWORD)v11)
  {
    uint64_t v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }

  uint64_t v12 = __s;
  if (__s && __n)
  {
    uint64_t v5 = aks_sign_signing_key(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if ((_DWORD)v5) {
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    }
    goto LABEL_12;
  }

uint64_t aks_remote_session_step(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_setup(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_setup_with_acm(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_peer_confirm(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_session_token(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_drain_backup_keys(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v8 = aks_client_connection;
    uint64_t result = 3758097090LL;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        input[0] = v6;
        input[1] = 0LL;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            uint64_t v10 = calloc(__count, 1uLL);
            void *v5 = v10;
            if (v10)
            {
              memcpy(v10, __src, __count);
              uint64_t result = 0LL;
              *size_t v3 = __count;
            }

            else
            {
              return 3758097085LL;
            }
          }

          else
          {
            return 3758097136LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drain_backup_keys",  ":",  2072,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_drain_backup_keys_info(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v8 = aks_client_connection;
    uint64_t result = 3758097090LL;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        input[0] = v6;
        input[1] = 1LL;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298LL;
            }

            else
            {
              uint64_t v10 = calloc(__count, 1uLL);
              void *v5 = v10;
              if (v10)
              {
                memcpy(v10, __src, __count);
                uint64_t result = 0LL;
                *size_t v3 = __count / 0x7C;
              }

              else
              {
                return 3758097085LL;
              }
            }
          }

          else
          {
            return 3758097136LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drain_backup_keys_info",  ":",  2100,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_clear_backup_bag(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    return IOConnectCallMethod(aks_client_connection, 0x16u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_clear_backup_bag",  ":",  2129,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_set_backup_bag(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  int v12 = v1;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_backup_bag",  ":",  2146,  "",  0,  "",  "");
    return 3758097084LL;
  }

  mach_port_t v14 = aks_client_connection;
  if (v5)
  {
    if (!v3) {
      return 3758097090LL;
    }
    __int128 outputStruct = __src;
    p_count = &__count;
    uint64_t v17 = 1LL;
  }

  else
  {
    p_count = 0LL;
    __int128 outputStruct = 0LL;
    uint64_t v17 = 0LL;
  }

  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  input[0] = v12;
  input[1] = v11;
  uint64_t input[2] = v17;
  uint64_t input[3] = v9;
  uint64_t input[4] = v7;
  uint64_t result = IOConnectCallMethod(v14, 0x15u, input, 5u, 0LL, 0LL, 0LL, 0LL, outputStruct, p_count);
  if (v5 && !(_DWORD)result)
  {
    __int128 v19 = calloc(__count, 1uLL);
    void *v5 = v19;
    if (v19)
    {
      memcpy(v19, __src, __count);
      uint64_t result = 0LL;
      *size_t v3 = __count;
    }

    else
    {
      return 3758097085LL;
    }
  }

  return result;
}

uint64_t aks_make_public_backup_bag(int a1, _DWORD *a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097084LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      input[0] = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(aks_client_connection, 0x52u, input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_make_public_backup_bag",  ":",  2178,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t aks_remote_session_reset(uint64_t a1)
{
  return remote_session_operate(a1);
}

uint64_t aks_remote_session_reset_all()
{
  return remote_session_operate(0LL);
}

uint64_t aks_get_device_state()
{
  return _get_device_state();
}

uint64_t _get_device_state()
{
  int v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  uint32_t v4 = v3;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v0;
  *(void *)int v12 = 4096LL;
  uint64_t v5 = 3758097084LL;
  int v18 = 0;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 __s = 0u;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v2)
    {
      mach_port_t v7 = aks_client_connection;
      bzero(outputStruct, 0x1000uLL);
      uint64_t v8 = IOConnectCallMethod(v7, v4, input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, (size_t *)v12);
      if ((_DWORD)v8)
      {
        return v8;
      }

      else
      {
        uint64_t v5 = 0LL;
        if (!decode_extended_state((uint64_t)outputStruct, v12[0], (char *)&__s))
        {
          __int128 v9 = v16;
          *(_OWORD *)(v2 + 32) = v15;
          *(_OWORD *)(v2 + 4_Block_object_dispose(va, 8) = v9;
          *(_WORD *)(v2 + 64) = v17;
          __int128 v10 = v14;
          *(_OWORD *)uint64_t v2 = __s;
          *(_OWORD *)(v2 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v10;
        }
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_device_state",  ":",  2224,  "",  0,  "",  "");
  }

  return v5;
}

uint64_t aks_get_extended_device_state()
{
  return _get_device_state();
}

uint64_t aks_remote_peer_get_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint32_t v3 = v2;
  size_t v5 = v4;
  mach_port_t v7 = v6;
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 3758097084LL;
  v13[0] = 4096LL;
  uint64_t input = v1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (v3)
    {
      mach_port_t v10 = aks_client_connection;
      bzero(outputStruct, 0x1000uLL);
      memset_s(v3, 0x10uLL, 0, 0x10uLL);
      uint64_t v11 = IOConnectCallMethod(v10, 0x39u, &input, 1u, v7, v5, 0LL, 0LL, outputStruct, v13);
      if ((_DWORD)v11)
      {
        return v11;
      }

      else
      {
        uint64_t v18 = 0LL;
        __int128 v22 = 0u;
        __int128 v14 = 0u;
        __int128 v15 = 0u;
        __int128 v17 = 0u;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        __int128 v23 = 0u;
        uint64_t v24 = 0LL;
        v13[1] = (size_t)der_key_peer_unlock_token_status;
        __int128 v16 = (unint64_t)der_key_peer_unwrapped_escrow_record_status;
        __int128 v19 = der_key_peer_wrapped_escrow_record_status;
        *(void *)&__int128 v22 = der_key_peer_flags;
        der_dict_iterate();
        *uint32_t v3 = der_get_number();
        v3[1] = der_get_number();
        v3[2] = der_get_number();
        uint64_t v8 = 0LL;
        v3[3] = der_get_number();
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_peer_get_state",  ":",  2255,  "",  0,  "",  "");
  }

  return v8;
}

uint64_t aks_remote_peer_drop(int a1, const void *a2, size_t a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x3Au, input, 1u, a2, a3, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_peer_drop",  ":",  2292,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_lock_device(int a1, int a2)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2) {
      uint32_t v4 = 32;
    }
    else {
      uint32_t v4 = 8;
    }
    return IOConnectCallMethod(aks_client_connection, v4, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_device",  ":",  2307,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_lock_cx(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x8Du, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_cx",  ":",  2327,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_unlock_device(int a1, uint64_t a2, int a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 9u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_device",  ":",  2342,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_obliterate_class_d()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x13u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_obliterate_class_d",  ":",  2355,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_migrate_s_key(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(aks_client_connection, 0x3Fu, input, 4u, a5, a6, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_migrate_s_key",  ":",  2367,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_smartcard_register( int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, void *a7, size_t *a8)
{
  uint64_t input[4] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a4;
  uint64_t input[2] = a2;
  uint64_t input[3] = a3;
  size_t __count = 2048LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v13 = aks_client_connection;
    bzero(__src, 0x800uLL);
    uint64_t v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v14)
    {
      return v14;
    }

    else if (__count > 0x800)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v15 = 0LL;
      if (a7 && a8)
      {
        if (__count)
        {
          __int128 v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16) {
            return 3758097085LL;
          }
          memcpy(v16, __src, __count);
          size_t v17 = __count;
        }

        else
        {
          size_t v17 = 0LL;
        }

        uint64_t v15 = 0LL;
        *a8 = v17;
      }
    }
  }

  else
  {
    uint64_t v15 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_register",  ":",  2388,  "",  0,  "",  "");
  }

  return v15;
}

uint64_t aks_smartcard_unregister(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x3Cu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_unregister",  ":",  2412,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_smartcard_request_unlock(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  size_t __count = 2048LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v10 = aks_client_connection;
    bzero(__src, 0x800uLL);
    uint64_t v11 = IOConnectCallMethod(v10, 0x3Du, input, 1u, a2, a3, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }

    else if (__count > 0x800)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      if (a4 && a5)
      {
        if (__count)
        {
          mach_port_t v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13) {
            return 3758097085LL;
          }
          memcpy(v13, __src, __count);
          size_t v14 = __count;
        }

        else
        {
          size_t v14 = 0LL;
        }

        uint64_t v12 = 0LL;
        *a5 = v14;
      }
    }
  }

  else
  {
    uint64_t v12 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_request_unlock",  ":",  2429,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t aks_smartcard_unlock(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  size_t __count = 2048LL;
  aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(void *)&inputStructCnt[1])
  {
    uint64_t v17 = 3758097085LL;
    goto LABEL_12;
  }

  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_unlock",  ":",  2460,  "",  0,  "",  "");
    uint64_t v17 = 3758097084LL;
    goto LABEL_12;
  }

  uint64_t v16 = IOConnectCallMethod( aks_client_connection,  0x3Eu,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
    goto LABEL_12;
  }

  if (__count > 0x800)
  {
    uint64_t v17 = 3758604298LL;
    goto LABEL_12;
  }

  uint64_t v17 = 0LL;
  if (a6 && a7)
  {
    if (!__count)
    {
      size_t v19 = 0LL;
      goto LABEL_11;
    }

    uint64_t v18 = calloc(__count, 1uLL);
    *a6 = v18;
    uint64_t v17 = 3758097085LL;
    if (v18)
    {
      memcpy(v18, __src, __count);
      size_t v19 = __count;
LABEL_11:
      uint64_t v17 = 0LL;
      *a7 = v19;
    }
  }

uint64_t aks_smartcard_get_sc_usk(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_smartcard_get_foo(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a6 && a3 && a4 && a5 && a3 + a4 > a3)
  {
    der_dict_iterate();
    if (a2)
    {
      if (*a6 == 8LL)
      {
        uint64_t number = der_get_number();
        uint64_t result = 0LL;
        *a5 = number;
        return result;
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t v11 = ccder_decode_tl();
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v12 = v11;
    uint64_t result = 0LL;
    *a5 = v12;
    *a6 = 0LL;
  }

  return result;
}

uint64_t aks_smartcard_get_ec_pub(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t aks_smartcard_get_mode(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0LL;
  uint64_t result = aks_smartcard_get_foo((uint64_t)der_key_sc_auth_mode, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t aks_smartcard_get_version(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0LL;
  uint64_t result = aks_smartcard_get_foo((uint64_t)der_key_sc_auth_version, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t aks_se_fail(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x47u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_fail",  ":",  2589,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_set_healthy(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x49u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_set_healthy",  ":",  2605,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_set_secret(int a1, uint64_t a2, uint64_t a3)
{
  return __aks_se_set_secret(a1, a2, a3, 0x45u);
}

uint64_t __aks_se_set_secret(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, a4, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "__aks_se_set_secret",  ":",  2621,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_set_secret_memento(int a1, uint64_t a2, uint64_t a3)
{
  return __aks_se_set_secret(a1, a2, a3, 0x8Cu);
}

uint64_t aks_se_recover(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x46u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_recover",  ":",  2649,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_change_secret_epilogue(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x69u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_change_secret_epilogue",  ":",  2665,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_get_reset_token_for_memento_secret(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint32_t v3 = v2;
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  input[1] = v4;
  uint64_t input[2] = v5;
  bzero(__s, 0x1000uLL);
  __n[0] = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    uint64_t v9 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_token_for_memento_secret",  ":",  2683,  "",  0,  "",  "");
    goto LABEL_10;
  }

  uint64_t v7 = IOConnectCallMethod(aks_client_connection, 0x48u, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, __n);
  if ((_DWORD)v7)
  {
    uint64_t v9 = v7;
    goto LABEL_10;
  }

  if (__n[0] - 4097 < 0xFFFFFFFFFFFFF000LL)
  {
    uint64_t v9 = 3758604298LL;
    goto LABEL_10;
  }

  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  __n[1] = (rsize_t)der_key_config_se_reset_token;
  __int128 v14 = (unint64_t)der_key_config_se_slot;
  der_dict_iterate();
  if ((void)v12)
  {
    ccder_decode_tl();
LABEL_9:
    uint64_t v9 = 0LL;
    goto LABEL_10;
  }

  if (!*((void *)&v14 + 1)) {
    goto LABEL_9;
  }
  unint64_t number = der_get_number();
  if (number > 0xFF) {
    goto LABEL_9;
  }
  uint64_t v9 = 0LL;
  *uint32_t v3 = number;
LABEL_10:
  memset_s(__s, __n[0], 0, __n[0]);
  return v9;
}

uint64_t aks_se_get_reset_token(uint64_t a1)
{
  return aks_se_get_reset_token_for_memento_secret(a1);
}

uint64_t aks_se_set_nonce(int a1, const void *a2, size_t a3)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    if (a2) {
      size_t v6 = a3;
    }
    else {
      size_t v6 = 0LL;
    }
    return IOConnectCallMethod(aks_client_connection, 0x58u, input, 1u, a2, v6, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_set_nonce",  ":",  2737,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t aks_se_get_reset_sig(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint32_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  bzero(&__s, 0x1000uLL);
  size_t __n = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (v9)
  {
    if (v7)
    {
      uint64_t v10 = 3758097090LL;
      if (v5)
      {
        if (v3)
        {
          mach_port_t aks_client_connection = get_aks_client_connection();
          if (aks_client_connection)
          {
            uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0x5Au, input, 1u, 0LL, 0LL, 0LL, 0LL, &__s, &__n);
            if ((_DWORD)v12)
            {
              uint64_t v10 = v12;
            }

            else if (__n - 4097 < 0xFFFFFFFFFFFFF005LL)
            {
              uint64_t v10 = 3758604298LL;
            }

            else
            {
              __int128 v13 = calloc(5uLL, 1uLL);
              void *v5 = v13;
              if (v13)
              {
                *uint32_t v3 = 5LL;
                int v14 = __s;
                v13[4] = v20;
                *(_DWORD *)__int128 v13 = v14;
                __int128 v15 = calloc(__n - 5, 1uLL);
                *uint64_t v9 = v15;
                uint64_t v10 = 3758097085LL;
                if (v15)
                {
                  size_t v16 = __n;
                  *uint64_t v7 = __n - 5;
                  memcpy(v15, v21, v16);
                  uint64_t v10 = 0LL;
                }
              }

              else
              {
                uint64_t v10 = 3758097085LL;
              }
            }
          }

          else
          {
            fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_sig",  ":",  2759,  "",  0,  "",  "");
            uint64_t v10 = 3758097084LL;
          }
        }
      }
    }
  }

  memset_s(&__s, __n, 0, __n);
  return v10;
}

uint64_t aks_se_get_reset_pubkey(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint32_t v3 = v2;
  uint64_t v5 = v4;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  size_t v6 = 4096LL;
  bzero(__src, 0x1000uLL);
  size_t __count = 4096LL;
  uint64_t v7 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      uint64_t v9 = IOConnectCallMethod(aks_client_connection, 0x59u, input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      size_t v6 = __count;
      if ((_DWORD)v9)
      {
        uint64_t v7 = v9;
      }

      else if (__count - 4097 < 0xFFFFFFFFFFFFF000LL)
      {
        uint64_t v7 = 3758604298LL;
      }

      else
      {
        uint64_t v10 = calloc(__count, 1uLL);
        void *v5 = v10;
        size_t v6 = __count;
        if (v10)
        {
          *uint32_t v3 = __count;
          memcpy(v10, __src, v6);
          uint64_t v7 = 0LL;
          size_t v6 = __count;
        }

        else
        {
          uint64_t v7 = 3758097085LL;
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_pubkey",  ":",  2791,  "",  0,  "",  "");
      size_t v6 = 4096LL;
      uint64_t v7 = 3758097084LL;
    }
  }

  memset_s(__src, v6, 0, v6);
  return v7;
}

uint64_t aks_se_delete_reset_token(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Bu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_delete_reset_token",  ":",  2815,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_support_in_rm(unsigned int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Eu, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_support_in_rm",  ":",  2832,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_support_in_rm_is_set(BOOL *a1)
{
  output[1] = *MEMORY[0x1895F89C0];
  output[0] = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t result = IOConnectCallMethod(aks_client_connection, 0x6Bu, 0LL, 0, 0LL, 0LL, output, &outputCnt, 0LL, 0LL);
    if (a1)
    {
      if (!(_DWORD)result) {
        *a1 = output[0] != 0;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_support_in_rm_is_set",  ":",  2848,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t aks_se_stage_stash()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Fu, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_stage_stash",  ":",  2865,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_fv_lock_volume_bag()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_unwrap_vek(uint64_t a1)
{
  return aks_fv_unwrap_vek_with_acm(a1);
}

uint64_t aks_fv_get_blob_state(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint32_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v12 = __s;
  *((void *)&v12 + 1) = &v15;
  *(void *)__int128 v13 = 4096LL;
  uint64_t v7 = 3758097090LL;
  if (v5 && v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v9 = aks_client_connection;
      if (der_utils_encode_fv_data(&v12, v5) && der_utils_encode_fv_params(&v12, v6))
      {
        uint64_t v7 = 3758097098LL;
        if (ccder_blob_encode_tl())
        {
          uint64_t v10 = IOConnectCallMethod( v9,  0x55u,  0LL,  0,  *((const void **)&v12 + 1),  (size_t)&v15 - *((void *)&v12 + 1),  0LL,  0LL,  __s,  (size_t *)v13);
          if (!(_DWORD)v10) {
            uint64_t v10 = decode_fv_blob_state((uint64_t)__s, *(uint64_t *)v13, v3);
          }
          uint64_t v7 = v10;
        }
      }

      else
      {
        uint64_t v7 = 3758097098LL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_get_blob_state",  ":",  2900,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v7;
}

uint64_t aks_fv_get_last_known_gp_state(__int128 *a1)
{
  char v7 = 0;
  uint64_t v5 = &v7;
  uint64_t v6 = 1LL;
  __int128 v3 = 0uLL;
  uint64_t v4 = 0LL;
  if (a1)
  {
    __int128 v3 = *a1;
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v1 = *((void *)&v3 + 1) | 0x10LL;
  }

  else
  {
    uint64_t v1 = 16LL;
  }

  *((void *)&v3 + 1) = v1;
  return aks_fv_get_blob_state((uint64_t)&v3);
}

uint64_t aks_fv_get_size(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v3 = v2;
  uint64_t v4 = v1;
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = 3758097098LL;
  uint64_t output = 0LL;
  input[0] = v6;
  uint32_t outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v10 = __s;
  *((void *)&v10 + 1) = &output;
  if (v3)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v8 = aks_client_connection;
      if (der_utils_encode_fv_params(&v10, v4))
      {
        if (ccder_blob_encode_tl())
        {
          uint64_t v5 = IOConnectCallMethod( v8,  0x4Eu,  input,  1u,  *((const void **)&v10 + 1),  (size_t)&input[-1] - *((void *)&v10 + 1),  &output,  &outputCnt,  0LL,  0LL);
          if (!(_DWORD)v5) {
            *__int128 v3 = output;
          }
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_get_size",  ":",  2943,  "",  0,  "",  "");
      uint64_t v5 = 3758097084LL;
    }
  }

  else
  {
    uint64_t v5 = 3758097090LL;
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t aks_fv_import(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  __int128 v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v9;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v16 = __s;
  *((void *)&v16 + 1) = input;
  size_t v17 = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (v7 && v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (!aks_client_connection)
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_import",  ":",  2971,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
      goto LABEL_14;
    }

    mach_port_t v12 = aks_client_connection;
    if (!ccder_blob_encode_body_tl()
      || !der_utils_encode_fv_data(&v16, v7)
      || !der_utils_encode_fv_params(&v16, v8)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_12;
    }

    uint64_t v13 = IOConnectCallMethod( v12,  0x4Fu,  input,  1u,  *((const void **)&v16 + 1),  (size_t)input - *((void *)&v16 + 1),  0LL,  0LL,  __s,  &v17);
    if ((_DWORD)v13)
    {
      uint64_t v10 = v13;
      goto LABEL_14;
    }

    *(void *)&__int128 v15 = __s;
    *((void *)&v15 + 1) = &__s[v17];
    if (!v3)
    {
      uint64_t v10 = 0LL;
      goto LABEL_14;
    }

    uint64_t v10 = 0LL;
    if ((der_utils_decode_fv_data(&v15, 0, v3) & 1) == 0) {
LABEL_12:
    }
      uint64_t v10 = 3758097098LL;
  }

uint64_t aks_fv_get_verifier_size()
{
  return aks_fv_get_size(0LL);
}

uint64_t aks_fv_get_access_token_size()
{
  return aks_fv_get_size(0LL);
}

uint64_t aks_fv_new_verifier()
{
  return aks_fv_new_kek(0LL);
}

uint64_t aks_fv_rewrap_verifier()
{
  return aks_fv_rewrap_kek(0LL);
}

uint64_t aks_fv_new_access_token()
{
  v1[0] = 0LL;
  v1[1] = 2LL;
  v1[2] = 0LL;
  return aks_fv_new_vek((uint64_t)v1);
}

uint64_t aks_fv_new_unbound_access_token(char a1)
{
  uint64_t v1 = 130LL;
  if ((a1 & 6) == 0) {
    uint64_t v1 = 2LL;
  }
  v3[0] = 0LL;
  v3[1] = v1;
  v3[2] = 0LL;
  return aks_fv_new_vek((uint64_t)v3);
}

uint64_t aks_fv_bind_access_token()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_is_access_token_unbound(uint64_t a1, BOOL *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v5 = 0u;
  if (!a2) {
    return 3758097090LL;
  }
  uint64_t result = aks_fv_get_blob_state((uint64_t)v4);
  if (!(_DWORD)result)
  {
    if ((_DWORD)v5 == 1)
    {
      uint64_t result = 0LL;
      *a2 = (DWORD1(v7) & 0x8000000) != 0;
    }

    else
    {
      return 3758604312LL;
    }
  }

  return result;
}

uint64_t aks_fv_load_access_token_as_system_keychain()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_verify_user_opts()
{
  return aks_fv_unwrap_vek_with_acm(0LL);
}

uint64_t aks_fv_grant_ownership(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 3758097098LL;
  bzero(v16, 0x1000uLL);
  bzero(v15, 0x1000uLL);
  *(void *)&__int128 v14 = v16;
  *((void *)&v14 + 1) = &v17;
  *(void *)&__int128 v13 = v15;
  *((void *)&v13 + 1) = v16;
  if (der_utils_encode_fv_data(&v14, v9)
    && der_utils_encode_fv_data(&v14, v7)
    && ccder_blob_encode_tl()
    && der_utils_encode_fv_data(&v13, v5)
    && der_utils_encode_fv_data(&v13, v3)
    && ccder_blob_encode_tl())
  {
    return aks_fv_set_protection(v10);
  }

  return v11;
}

uint64_t aks_fv_owners_exist(uint64_t a1)
{
  return aks_fv_set_protection(a1);
}

uint64_t aks_fv_remove_external_kek_group(uint64_t a1)
{
  v2[3] = a1;
  memset(v2, 0, 24);
  return aks_fv_set_protection((uint64_t)v2);
}

uint64_t aks_fv_sidp_status(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  bzero(v8, 0x4000uLL);
  uint64_t result = aks_fv_set_protection(v6);
  if (!(_DWORD)result)
  {
    if (ccder_decode_sequence_tl() && ccder_decode_tl())
    {
      __memcpy_chk();
      if (v5) {
        _BYTE *v5 = 0;
      }
      if (v3) {
        *uint64_t v3 = 0;
      }
      return 0LL;
    }

    else
    {
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_fv_stash_kek()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_fv_stash_kek_with_secret(int a1)
{
  uint64_t v1 = 8LL;
  if (a1) {
    uint64_t v1 = 12LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = v1;
  uint64_t v6 = 0LL;
  uint64_t v2 = aks_fv_set_protection((uint64_t)&v4);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v5, v2);
  return v2;
}

uint64_t aks_fv_commit_stashed_kek()
{
  uint64_t v0 = aks_fv_set_protection(0LL);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t aks_fv_destroy_stashed_kek()
{
  uint64_t v0 = aks_fv_set_protection(0LL);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t aks_fv_verify_user()
{
  return aks_fv_unwrap_vek_with_acm(0LL);
}

uint64_t aks_fv_delete_verifier()
{
  return aks_fv_set_protection(0LL);
}

uint64_t aks_absinthe_collection(uint64_t a1)
{
  unsigned int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v8 = 3758097084LL;
  input[0] = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (v5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v15 = aks_client_connection;
      if (v7) {
        __int128 v16 = v7;
      }
      else {
        __int128 v16 = "";
      }
      aks_pack_data((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, (uint64_t)v16);
      uint64_t v17 = IOConnectCallMethod( v15,  0x50u,  input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
      if ((_DWORD)v17)
      {
        uint64_t v8 = v17;
      }

      else
      {
        uint64_t v18 = calloc(__count, 1uLL);
        void *v5 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          uint64_t v8 = 0LL;
          *uint64_t v3 = (int)__count;
        }

        else
        {
          uint64_t v8 = 3758097085LL;
        }
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_collection",  ":",  3220,  "",  0,  "",  "");
    }
  }

  else
  {
    uint64_t v8 = 3758097090LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v8;
}

uint64_t aks_absinthe_generate( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  input[1] = *MEMORY[0x1895F89C0];
  __int128 v21 = 0LL;
  input[0] = a1;
  int v20 = 0;
  uint64_t v7 = 3758097090LL;
  if (a2 && a6 && a7)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v17 = aks_client_connection;
      aks_pack_data(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      size_t v19 = *a7;
      uint64_t v7 = IOConnectCallMethod(v17, 0x51u, input, 1u, v21, v20, 0LL, 0LL, a6, &v19);
      if (!(_DWORD)v7) {
        *a7 = (int)v19;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_generate",  ":",  3253,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

  free(v21);
  return v7;
}

uint64_t aks_drop_auxiliary_auth_by_uid(unsigned int a1)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = 0LL;
  input[1] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x53u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drop_auxiliary_auth_by_uid",  ":",  3280,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_drop_auxiliary_auth_by_handle(int a1)
{
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = 1LL;
  input[1] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x53u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drop_auxiliary_auth_by_handle",  ":",  3296,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_lower_iteration_count()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x5Cu, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lower_iteration_count",  ":",  3310,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_se_secret_drop(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x6Au, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_secret_drop",  ":",  3326,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_get_current_sep_measurement(uint64_t a1, uint64_t a2)
{
  return 3758097084LL;
}

uint64_t aks_get_internal_info(uint64_t a1)
{
  return aks_get_internal_info_for_key(a1);
}

uint64_t aks_get_seconds_since_passcode_change(uint64_t a1, void *a2)
{
  uint64_t v3 = 3758097084LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  if (!aks_get_internal_info_for_key(a1)
    && der_dict_get_number( (uint64_t)der_key_passcode_change_time,  (uint64_t)v9,  (uint64_t)v9 + v8,  (uint64_t)&v7))
  {
    if (a2)
    {
      time_t v4 = time(0LL);
      uint64_t v3 = 0LL;
      time_t v5 = v4 - v7;
      if (v4 <= v7) {
        time_t v5 = 0LL;
      }
      *a2 = v5;
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  free(v9);
  return v3;
}

uint64_t aks_get_internal_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  input[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 3758097090LL;
  input[0] = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (!aks_client_connection)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_internal_state",  ":",  3405,  "",  0,  "",  "");
    uint64_t v4 = 3758097084LL;
    goto LABEL_11;
  }

  if (!v3)
  {
LABEL_11:
    rsize_t v7 = 4096LL;
    goto LABEL_9;
  }

  uint64_t v6 = IOConnectCallMethod(aks_client_connection, 0x8Eu, input, 1u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
  rsize_t v7 = __n;
  if ((_DWORD)v6)
  {
    uint64_t v4 = v6;
  }

  else if (__n - 4097 >= 0xFFFFFFFFFFFFF000LL)
  {
    else {
      uint64_t v4 = 0LL;
    }
    rsize_t v7 = __n;
  }

uint64_t aks_fairplay_wrap(const void *a1, size_t a2, void *a3, size_t *a4)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = 266LL;
  uint64_t result = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      size_t v10 = *a4;
      uint64_t result = IOConnectCallMethod(aks_client_connection, 0x68u, input, 1u, a1, a2, 0LL, 0LL, a3, &v10);
      if (!(_DWORD)result) {
        *a4 = (int)v10;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fairplay_wrap",  ":",  3431,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t _fairplay_generate_csk_internal(unsigned int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = ((unint64_t)a1 << 8) | 1;
  uint64_t result = 3758097090LL;
  if (a4 && a5)
  {
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      size_t v11 = *a5;
      uint64_t result = IOConnectCallMethod(aks_client_connection, 0x68u, input, 1u, a2, a3, 0LL, 0LL, a4, &v11);
      if (!(_DWORD)result) {
        *a5 = (int)v11;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_fairplay_generate_csk_internal",  ":",  3455,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t aks_fairplay_generate_csk(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return _fairplay_generate_csk_internal(0, a1, a2, a3, a4);
}

uint64_t aks_fairplay_generate_csk_v1(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return _fairplay_generate_csk_internal(1u, a1, a2, a3, a4);
}

uint64_t aks_bak_get_beacon_internal(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  time_t v5 = v4;
  size_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __int128 v19 = 0u;
  memset(v20, 0, sizeof(v20));
  bzero(__s, 0x4000uLL);
  size_t v16 = 0x4000LL;
  input[0] = 1LL;
  input[1] = v10;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v12 = IOConnectCallMethod(aks_client_connection, 0x87u, input, 2u, v9, v7, 0LL, 0LL, __s, &v16);
    if ((_DWORD)v12)
    {
      uint64_t v14 = v12;
    }

    else
    {
      __memcpy_chk();
      *uint64_t v3 = 44LL;
      uint64_t v13 = calloc(0x2CuLL, 1uLL);
      void *v5 = v13;
      if (v13)
      {
        __memcpy_chk();
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t v14 = 3758097085LL;
      }
    }
  }

  else
  {
    uint64_t v14 = 3758097084LL;
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_bak_get_beacon_internal",  ":",  3491,  "",  0,  "",  "");
  }

  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  return v14;
}

uint64_t aks_bak_get_beacon(int a1, unsigned int a2)
{
  uint64_t beacon_internal = aks_bak_get_beacon_internal(a1 ^ 1u | ((unint64_t)a2 << 16));
  else {
    return 3758604312LL;
  }
}

uint64_t aks_bak_get_swizzler_internal(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  time_t v5 = v4;
  size_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t input[2] = *MEMORY[0x1895F89C0];
  input[0] = 2LL;
  input[1] = v1;
  int v37 = 0;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v28 = 0u;
  memset(v27, 0, sizeof(v27));
  bzero(__s, 0x4000uLL);
  size_t v25 = 0x4000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v11 = IOConnectCallMethod(aks_client_connection, 0x87u, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v25);
    if ((_DWORD)v11)
    {
      uint64_t v12 = v11;
    }

    else
    {
      uint64_t v12 = 3758097085LL;
      __memcpy_chk();
      uint64_t v13 = calloc(0x28uLL, 1uLL);
      *uint64_t v9 = v13;
      if (v13)
      {
        *size_t v7 = 40LL;
        __int128 v14 = *(_OWORD *)&v27[1];
        __int128 v15 = *(_OWORD *)&v27[3];
        v13[4] = v27[5];
        *(_OWORD *)uint64_t v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        size_t v16 = calloc(0x91uLL, 1uLL);
        void *v5 = v16;
        if (v16)
        {
          uint64_t v12 = 0LL;
          *uint64_t v3 = 145LL;
          __int128 v17 = v29;
          _OWORD *v16 = v28;
          v16[1] = v17;
          __int128 v18 = v30;
          __int128 v19 = v31;
          __int128 v20 = v33;
          v16[4] = v32;
          v16[5] = v20;
          int v16[2] = v18;
          void v16[3] = v19;
          __int128 v21 = v34;
          __int128 v22 = v35;
          __int128 v23 = v36;
          *((_BYTE *)v16 + 144) = v37;
          v16[7] = v22;
          v16[8] = v23;
          v16[6] = v21;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_bak_get_swizzler_internal",  ":",  3551,  "",  0,  "",  "");
    uint64_t v12 = 3758097084LL;
  }

  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  memset_s(v27, 0xC4uLL, 0, 0xC4uLL);
  return v12;
}

uint64_t aks_bak_get_swizzler()
{
  return aks_bak_get_swizzler_internal(0LL);
}

uint64_t aks_test_stashed_kek(uint64_t a1)
{
  mach_port_t akstest_client_connection = get_akstest_client_connection();
  if (akstest_client_connection) {
    return IOConnectCallMethod( akstest_client_connection,  0xCu,  0LL,  0,  *(const void **)a1,  *(void *)(a1 + 8),  0LL,  0LL,  0LL,  0LL);
  }
  else {
    return 3758097084LL;
  }
}

uint64_t aks_get_dsme_key(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  bzero(__src, 0x4000uLL);
  size_t __count = 0x4000LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v6 = 3758097090LL;
    if (v4 && v3)
    {
      uint64_t v7 = IOConnectCallMethod(aks_client_connection, 0x96u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v7)
      {
        uint64_t v6 = v7;
      }

      else
      {
        uint64_t v8 = calloc(__count, 1uLL);
        *uint64_t v4 = v8;
        if (v8)
        {
          size_t v9 = __count;
          *uint64_t v3 = __count;
          memcpy(v8, __src, v9);
          uint64_t v6 = 0LL;
        }

        else
        {
          uint64_t v6 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_dsme_key",  ":",  3600,  "",  0,  "",  "");
    uint64_t v6 = 3758097084LL;
  }

  memset_s(__src, 0x4000uLL, 0, 0x4000uLL);
  return v6;
}

BOOL aks_bag_in_xart(uint64_t a1, uint64_t a2)
{
  return a2 == 4 || a2 == 32;
}

uint64_t aks_prewarm_sps()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x73u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_prewarm_sps",  ":",  3627,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_sealed_hashes_set(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v12[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = 4294967285LL;
  if (a3 && a4 <= 0x30)
  {
    uint64_t v4 = 3758097084LL;
    mach_port_t aks_client_connection = get_aks_client_connection();
    if (aks_client_connection)
    {
      mach_port_t v6 = aks_client_connection;
      ccder_sizeof_raw_octet_string();
      ccder_sizeof_uint64();
      ccder_sizeof_raw_octet_string();
      uint64_t v7 = ccder_sizeof();
      size_t v8 = v7;
      MEMORY[0x1895F8858](v7);
      uint64_t v10 = (char *)v12 - v9;
      bzero((char *)v12 - v9, v8);
      ccder_encode_raw_octet_string();
      ccder_encode_uint64();
      ccder_encode_raw_octet_string();
      else {
        return 3758097090LL;
      }
    }

    else
    {
      fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_sealed_hashes_set",  ":",  3644,  "",  0,  "",  "");
    }
  }

  return v4;
}

uint64_t aks_measure_and_seal_cryptex_manifest(const void *a1, size_t a2)
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x90u, 0LL, 0, a1, a2, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_measure_and_seal_cryptex_manifest",  ":",  3674,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_seal_cryptex_manifest_lock()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x95u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_seal_cryptex_manifest_lock",  ":",  3688,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_lkgp_recover(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t input[3] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x85u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lkgp_recover",  ":",  3704,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_memento_efface_blob(int a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x8Au, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_memento_efface_blob",  ":",  3720,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_memento_get_state(uint64_t a1)
{
  int v1 = MEMORY[0x1895F8858](a1);
  uint64_t v3 = v2;
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    uint64_t v5 = IOConnectCallMethod(aks_client_connection, 0x8Bu, input, 1u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
    rsize_t v6 = __n;
    if ((_DWORD)v5)
    {
      uint64_t v7 = v5;
    }

    else
    {
      uint64_t v7 = 3758097090LL;
      if (__n - 4097 >= 0xFFFFFFFFFFFFF000LL)
      {
        else {
          uint64_t v7 = 0LL;
        }
        rsize_t v6 = __n;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_memento_get_state",  ":",  3738,  "",  0,  "",  "");
    uint64_t v7 = 3758097084LL;
    rsize_t v6 = 4096LL;
  }

  memset_s(__s, v6, 0, v6);
  return v7;
}

uint64_t aks_set_jcop_supports_updated_kud_policy()
{
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x89u, &input, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_jcop_supports_updated_kud_policy",  ":",  3758,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_set_cx_window(uint64_t a1)
{
  input[1] = *MEMORY[0x1895F89C0];
  input[0] = a1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection) {
    return IOConnectCallMethod(aks_client_connection, 0x97u, input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_cx_window",  ":",  3774,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t aks_get_cx_window(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  outputStruct[512] = *MEMORY[0x1895F89C0];
  size_t v6 = 4096LL;
  if (!v1) {
    return 4294967285LL;
  }
  uint64_t v2 = (void *)v1;
  mach_port_t aks_client_connection = get_aks_client_connection();
  if (aks_client_connection)
  {
    mach_port_t v4 = aks_client_connection;
    bzero(outputStruct, 0x1000uLL);
    uint64_t result = IOConnectCallMethod(v4, 0x98u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, outputStruct, &v6);
    if (!(_DWORD)result)
    {
      if (v6 == 8)
      {
        uint64_t result = 0LL;
        *uint64_t v2 = outputStruct[0];
      }

      else
      {
        return 3758604298LL;
      }
    }
  }

  else
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_cx_window",  ":",  3791,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t get_aks_log_pid()
{
  return 0LL;
}

uint64_t compress_uuid()
{
  return 0LL;
}

unint64_t time_seconds_to_abs_interval(unsigned int a1)
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return 1000000000 * info.denom * (unint64_t)a1 / info.numer;
}

unint64_t time_absolute_to_nanoseconds(uint64_t a1)
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return (unint64_t)info.numer * a1 / info.denom;
}

uint64_t get_usec_time()
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return mach_continuous_time() * info.numer / info.denom / 0x3E8;
}

__darwin_time_t get_clock_time()
{
  v1.tv_sec = 0LL;
  *(void *)&v1.tv_usec = 0LL;
  gettimeofday(&v1, 0LL);
  return v1.tv_sec;
}

uint64_t ipc_seconds_to_microsecond_interval(uint64_t a1)
{
  return 1000000 * a1;
}

unint64_t ipc_microseconds_to_seconds(uint64_t a1)
{
  return (a1 + 999999) / 0xF4240uLL;
}

void *circular_queue_init(unsigned int a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1LL;
  uint64_t v3 = v2 << 31 >> 31;
  if (v3 != v2 || v3 < 0)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s overflow%s\n",  "aks",  "",  "",  "",  "circular_queue_init",  ":",  341,  "",  0,  "",  "");
    return 0LL;
  }

  else
  {
    uint64_t v5 = calloc(0x20uLL, 1uLL);
    size_t v6 = v5;
    if (v5)
    {
      v5[1] = 0LL;
      size_t v7 = (v3 & 0x1FFFFFFFFLL) * a2;
      *(_DWORD *)uint64_t v5 = a2;
      *((_DWORD *)v5 + 1) = v2;
      size_t v8 = calloc(v7, 1uLL);
      v6[2] = v7;
      v6[3] = v8;
    }
  }

  return v6;
}

uint64_t circular_queue_size(_DWORD *a1)
{
  unsigned int v3 = a1[2];
  unsigned int v2 = a1[3];
  uint64_t result = v2 - v3;
  if (v2 < v3) {
    return (result + a1[1]);
  }
  return result;
}

uint64_t circular_queue_enqueue(unsigned int *a1, const void *a2)
{
  unsigned int v3 = a1[3];
  unsigned int v4 = (v3 + 1) % a1[1];
  memcpy((void *)(*((void *)a1 + 3) + *a1 * v3), a2, *a1);
  a1[3] = v4;
  if (v4 == a1[2]) {
    a1[2] = (v4 + 1) % a1[1];
  }
  return 0LL;
}

uint64_t circular_queue_dequeue(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  if (__dst)
  {
    memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
    unsigned int v2 = a1[2];
  }

  memset_s((void *)(*((void *)a1 + 3) + *a1 * v2), *a1, 0, *a1);
  uint64_t result = 0LL;
  a1[2] = (a1[2] + 1) % a1[1];
  return result;
}

uint64_t circular_queue_peek(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
  return 0LL;
}

uint64_t circular_queue_dequeue_all(int *a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v8 = v6 - v7;
  if (v6 < v7) {
    v8 += a1[1];
  }
  if (!v8) {
    return 0LL;
  }
  unsigned int v9 = *a1 * v8;
  uint64_t v10 = (char *)calloc(v9, 1uLL);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  unsigned int v12 = a1[2];
  unsigned int v13 = a1[3];
  if (v13 <= v12)
  {
    if (v12 <= v13) {
      goto LABEL_13;
    }
    unsigned int v17 = a1[1] - v12;
    memcpy(v10, (const void *)(*((void *)a1 + 3) + *a1 * v12), *a1 * v17);
    if (v8 <= v17) {
      goto LABEL_13;
    }
    uint64_t v10 = &v11[*a1 * v17];
    __int128 v14 = (const void *)*((void *)a1 + 3);
    size_t v15 = *a1 * (v8 - v17);
  }

  else
  {
    __int128 v14 = (const void *)(*((void *)a1 + 3) + *a1 * v12);
    size_t v15 = *a1 * v8;
  }

  memcpy(v10, v14, v15);
LABEL_13:
  unsigned int v18 = a1[1];
  int v19 = *a1;
  a1[2] = (a1[2] + v8) % v18;
  memset_s(*((void **)a1 + 3), v19 * v18, 0, v19 * v18);
  uint64_t result = 0LL;
  *a2 = v11;
  *a3 = v9;
  return result;
}

uint64_t circular_queue_clear(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  rsize_t v1 = (*(_DWORD *)a1 * *(_DWORD *)(a1 + 4));
  return memset_s(*(void **)(a1 + 24), v1, 0, v1);
}

void circular_queue_free(void *a1)
{
  *((void *)a1 + 1) = 0LL;
  rsize_t v2 = (*(_DWORD *)a1 * *((_DWORD *)a1 + 1));
  memset_s(*((void **)a1 + 3), v2, 0, v2);
  memset_s(*((void **)a1 + 3), *((void *)a1 + 2), 0, *((void *)a1 + 2));
  free(*((void **)a1 + 3));
  memset_s(a1, 0x20uLL, 0, 0x20uLL);
  free(a1);
}

uint64_t class_gen_get(unsigned int a1)
{
  return (a1 >> 5) & 1;
}

BOOL persona_uuid_is_valid(uint8x16_t *a1)
{
  int8x16_t v1 = (int8x16_t)vmovl_high_u8(*a1);
  int8x16_t v2 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a1->i8);
  int8x16_t v3 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8( vorr_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v1.i8),  vorr_s8( (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))));
  return vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) != 0LL;
}

BOOL is_non_zero(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  int v2 = 0;
  do
  {
    int v3 = *a1++;
    v2 |= v3;
    --a2;
  }

  while (a2);
  return v2 != 0;
}

_DWORD *pfk_params_is_valid(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

uint64_t class_gen_set(char a1, int a2)
{
  return a1 & 0x1F | (32 * a2);
}

uint64_t class_persona_get(unsigned int a1)
{
  return (a1 >> 6) & 1;
}

uint64_t class_persona_unset(int a1)
{
  return a1 & 0xFFFFFFBF;
}

uint64_t class_persona_set(int a1)
{
  return a1 | 0x40u;
}

uint64_t keychain_key(char a1)
{
  char v1 = a1 & 0x1F;
  if ((a1 & 0x1Fu) >= 0x14) {
    char v1 = -1;
  }
  return ((a1 & 0x1Fu) < 0x14) & (0xC3FC0u >> v1);
}

uint64_t class_id_get(char a1)
{
  if ((a1 & 0x1Fu) > 0x13) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a1 & 0x1F;
  }
}

uint64_t fs_class_key(char a1)
{
  unsigned int v1 = a1 & 0x1F;
  if (v1 > 0x13) {
    unsigned int v1 = -1;
  }
  return (v1 < 0x12) & (0x2E03Eu >> v1);
}

uint64_t keystore_type(char a1)
{
  return a1 & 0xF;
}

BOOL store_type_equal(int a1, int a2)
{
  return ((a2 ^ a1) & 0xF) == 0;
}

uint64_t memcmp_c()
{
  return cc_cmp_safe();
}

uint64_t dump_bytes_internal(const char *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unsigned int v4 = a1;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  char v24 = 0;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v17 = 0u;
  uint64_t v5 = (FILE **)MEMORY[0x1895F89E0];
  if (a3 >= 0x41)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s %sdump %s (len = %zd)%s%s\n",  "aks",  "",  "",  "",  "dump_bytes_internal",  ":",  786,  "",  0,  "",  "",  a1,  a3,  "",  "");
    unsigned int v4 = "";
  }

  else if (!a3)
  {
    return memset_s(__str, 0x81uLL, 0, 0x81uLL);
  }

  unint64_t v6 = 0LL;
  unint64_t v15 = v3;
  do
  {
    unsigned int v7 = v5;
    if (v3 - v6 >= 0x40) {
      uint64_t v8 = 64LL;
    }
    else {
      uint64_t v8 = v3 - v6;
    }
    if (v8)
    {
      unsigned int v9 = (unsigned __int8 *)(a2 + v6);
      uint64_t v10 = __str;
      uint64_t v11 = v8;
      do
      {
        int v12 = *v9++;
        snprintf(v10, 3uLL, "%02x", v12);
        v10 += 2;
        --v11;
      }

      while (v11);
    }

    uint64_t v5 = v7;
    fprintf( *v7,  "%s%s:%s%s%s%s%u:%s%u:%s %s%s%s[%04zu,%04zu): %s%s%s%s\n",  "aks",  "",  "",  "",  "dump_bytes_internal",  ":",  796,  "",  0,  "",  "",  v4,  "",  v6,  v8 + v6,  "",  __str,  "",  "");
    v6 += v8;
    unint64_t v3 = v15;
  }

  while (v6 < v15);
  return memset_s(__str, 0x81uLL, 0, 0x81uLL);
}

_BYTE *bytes_to_str_hint(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 0x10) {
    uint64_t v2 = 16LL;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    unsigned int v4 = bytes_to_str_hint_buf;
    uint64_t v5 = v2;
    do
    {
      int v6 = *a1++;
      snprintf(v4, 3uLL, "%02x", v6);
      v4 += 2;
      --v5;
    }

    while (v5);
  }

  bytes_to_str_hint_buf[2 * v2] = 0;
  return bytes_to_str_hint_buf;
}

uint64_t get_kcv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(__s, 0, sizeof(__s));
  if (a4 == 3)
  {
    ccsha256_di();
    cchmac();
    uint64_t v5 = 0LL;
    *(_WORD *)a3 = __s[0];
    *(_BYTE *)(a3 + 2) = BYTE2(__s[0]);
  }

  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v5;
}

uint64_t print_kcv(const char *a1, uint64_t a2, uint64_t a3)
{
  char v6 = 0;
  __int16 v5 = 0;
  get_kcv(a2, a3, (uint64_t)&v5, 3LL);
  return dump_bytes_internal(a1, (uint64_t)&v5, 3uLL);
}

char *byte_swap_val(char *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = a2 >> 1;
    unint64_t v3 = &result[a2 - 1];
    do
    {
      char v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t ascii_hex_to_bytes(unsigned __int8 *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if ((a2 & 1) == 0)
  {
    char v6 = a1;
    if (a1)
    {
      if (a3 && a4)
      {
        unint64_t v9 = a2 >> 1;
        uint64_t v10 = calloc(a2 >> 1, 1uLL);
        if (v10)
        {
          if (a2 >= 2)
          {
            if (v9 <= 1) {
              uint64_t v11 = 1LL;
            }
            else {
              uint64_t v11 = a2 >> 1;
            }
            int v12 = v10;
            do
            {
              int v13 = *v6;
              unsigned int v14 = v13 - 48;
              unsigned int v15 = v13 - 97;
              else {
                char v16 = v13 - 55;
              }
              char v17 = v13 - 87;
              if (v15 > 5) {
                char v17 = v16;
              }
              if (v14 < 0xA) {
                char v17 = v14;
              }
              char v18 = 16 * v17;
              int v19 = v6[1];
              unsigned int v20 = v19 - 48;
              unsigned int v21 = v19 - 97;
              else {
                char v22 = v19 - 55;
              }
              char v23 = v19 - 87;
              if (v21 > 5) {
                char v23 = v22;
              }
              if (v20 < 0xA) {
                char v23 = v20;
              }
              *v12++ = v23 | v18;
              v6 += 2;
              --v11;
            }

            while (v11);
          }

          uint64_t v5 = 0LL;
          *a3 = v10;
          *a4 = v9;
        }

        else
        {
          return 4294967279LL;
        }
      }
    }
  }

  return v5;
}

uint64_t err_sks_to_aks(uint64_t result)
{
  return result;
}

uint64_t fv_init_cred_from_secret(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return 4294967285LL;
  }
  if (a2 && *(void *)a2 && (size_t v7 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v8 = calloc(v7, 1uLL);
    if (v8)
    {
      *a1 = v8;
      unint64_t v9 = *(const void **)a2;
      a1[1] = *(void *)(a2 + 8);
      memcpy(v8, v9, *(void *)(a2 + 8));
      return 0LL;
    }

    else
    {
      return 4294967279LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a1 = 0LL;
    a1[1] = 0LL;
  }

  return result;
}

uint64_t REQUIRE_func(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n",  "aks",  "",  "",  "",  "REQUIRE_func",  ":",  1047,  "",  0,  "",  a3,  a2,  "");
    abort();
  }

  return result;
}

uint64_t generate_wrapping_key_curve25519(__int128 *a1, __int128 *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(v14, 0, sizeof(v14));
  platform_read_random((uint64_t)v14, 0x20u);
  cccurve25519_make_pub();
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  int __s = 0x1000000;
  __int128 v4 = a2[1];
  __int128 v10 = *a2;
  __int128 v11 = v4;
  __int128 v5 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v5;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  memset_s(v14, 0x20uLL, 0, 0x20uLL);
  return 0LL;
}

uint64_t wrap_data( int *a1, uint64_t (*a2)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), char a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  unsigned int v30 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  memset(__s, 0, sizeof(__s));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (!a6 || !a7) {
    goto LABEL_40;
  }
  if (!a1)
  {
LABEL_14:
    if (a2)
    {
      if (rfc3394_wrapped_size_legacy(a5, &v30))
      {
        if (*a7 < v30) {
          goto LABEL_40;
        }
        char v18 = 0LL;
        unsigned int v19 = 0;
        unsigned int v20 = a2;
        unsigned int v21 = a4;
        goto LABEL_38;
      }
    }

    else
    {
      if ((a3 & 4) != 0)
      {
        if ((a5 & 0xF) != 0 || *a7 < a5) {
          goto LABEL_40;
        }
        unsigned int v30 = a5;
        ccaes_cbc_encrypt_mode();
        firebloom_cbc_one_shot_f();
LABEL_39:
        uint64_t v8 = 0LL;
        *a7 = v30;
        goto LABEL_40;
      }

      if (rfc3394_wrapped_size_legacy(a5, &v30))
      {
        if (*a7 < v30) {
          goto LABEL_40;
        }
        if ((a3 & 8) != 0)
        {
          ccsha256_di();
          cchkdf();
          char v18 = __s;
        }

        else
        {
          char v18 = a1 + 2;
        }

        unsigned int v19 = 32;
        unsigned int v20 = 0LL;
        unsigned int v21 = a4;
LABEL_38:
        if (rfc3394_wrap_legacy( (uint64_t)v18,  v19,  0xA6A6A6A6A6A6A6A6LL,  v20,  v21,  a5,  (void *)a6,  &v30)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
    }

    uint64_t v8 = 4294967285LL;
    if ((a3 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

  int v14 = *a1;
  if ((*a1 - 1) >= 2)
  {
    if (v14) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }

  if ((a3 & 4) != 0) {
    unsigned int v15 = 64;
  }
  else {
    unsigned int v15 = 72;
  }
  unsigned int v30 = v15;
  if (!a2 && a5 == 32 && *a7 >= v15)
  {
    if (v14 == 1)
    {
      generate_wrapping_key_curve25519((__int128 *)(a1 + 9), &v32);
    }

    else
    {
      __int128 v23 = *(_OWORD *)(a1 + 5);
      __int128 v32 = *(_OWORD *)(a1 + 1);
      __int128 v33 = v23;
      __int128 v24 = *(_OWORD *)(a1 + 13);
      __int128 v34 = *(_OWORD *)(a1 + 9);
      __int128 v35 = v24;
    }

    if ((a3 & 0x80) == 0)
    {
      __int128 v25 = v33;
      *(_OWORD *)a6 = v32;
      *(_OWORD *)(a6 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v25;
      if ((a3 & 4) != 0)
      {
        ccaes_cbc_encrypt_mode();
        firebloom_cbc_one_shot_f();
        goto LABEL_34;
      }

      int v29 = 40;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        uint64_t v27 = (void *)(a6 + 32);
        uint64_t v26 = __s;
      }

      else
      {
        uint64_t v26 = &v34;
        uint64_t v27 = (void *)(a6 + 32);
      }

      if (!rfc3394_wrap_legacy((uint64_t)v26, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, a4, 0x20u, v27, &v29))
      {
LABEL_34:
        uint64_t v8 = 0LL;
        *a7 = v15;
        if ((a3 & 8) == 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
  }

uint64_t generate_unwrap_shared_key_curve25519(__int128 *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  __int128 v8 = 0u;
  __int128 v7 = 0u;
  __int128 v3 = a1[1];
  __int128 v9 = *a1;
  __int128 v10 = v3;
  __int128 v4 = a3[1];
  __int128 v11 = *a3;
  int __s = 0x1000000;
  __int128 v12 = v4;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  return 0LL;
}

uint64_t unwrap_data( uint64_t a1, uint64_t (*a2)(void, void *, unint64_t *, unint64_t *, uint64_t), char a3, void *a4, unsigned int a5, void *a6, unsigned int *a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unsigned int v22 = 0;
  memset(v24, 0, sizeof(v24));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (a4 && a5)
  {
    if (!a1) {
      goto LABEL_6;
    }
    if (*(_DWORD *)a1 != 1)
    {
      if (!*(_DWORD *)a1)
      {
LABEL_6:
        if (a5 <= 0x28)
        {
          if (a2)
          {
            if (rfc3394_unwrapped_size_legacy(a5, &v22) && *a7 >= v22)
            {
              unsigned int v15 = 0LL;
              unsigned int v16 = 0;
              char v17 = a2;
              goto LABEL_30;
            }
          }

          else if ((a3 & 4) != 0)
          {
            if ((a5 & 0xF) == 0 && *a7 >= a5)
            {
              unsigned int v22 = a5;
              ccaes_cbc_decrypt_mode();
              firebloom_cbc_one_shot_f();
LABEL_31:
              uint64_t v8 = 0LL;
              *a7 = v22;
              goto LABEL_35;
            }
          }

          else if (rfc3394_unwrapped_size_legacy(a5, &v22) && *a7 >= v22)
          {
            if ((a3 & 8) != 0)
            {
              ccsha256_di();
              cchkdf();
              unsigned int v15 = v24;
            }

            else
            {
              unsigned int v15 = (_OWORD *)(a1 + 8);
            }

            unsigned int v16 = 32;
            char v17 = 0LL;
LABEL_30:
            goto LABEL_40;
          }
        }

uint64_t firebloom_export_pub_key(uint64_t a1, void *a2, size_t *a3)
{
  size_t v5 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  char v6 = calloc(v5, 1uLL);
  if (!v6) {
    return 4294967279LL;
  }
  __int128 v7 = v6;
  ccec_export_pub();
  uint64_t result = 0LL;
  *a2 = v7;
  *a3 = v5;
  return result;
}

unint64_t firebloom_cp_prime_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

unint64_t firebloom_sign_max_size()
{
  return (((unint64_t)(cczp_bitlen() + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 9;
}

unint64_t firebloom_ec_export_pub_size()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

unint64_t firebloom_ec_compact_export_pub_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t firebloom_cbc_one_shot_f()
{
  return cccbc_one_shot();
}

uint64_t firebloom_ecb_one_shot_f()
{
  return ccecb_one_shot();
}

uint64_t firebloom_cbc_update_f()
{
  return cccbc_update();
}

BOOL firebloom_ec_import()
{
  return !MEMORY[0x1895E4E58]() && ccn_read_uint() == 0;
}

uint64_t firebloom_ec_export()
{
  return 1LL;
}

uint64_t dict_find_params_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 8) >= *(void *)a5)
  {
    char v13 = 0;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    while (1)
    {
      BOOL v11 = der_equal( *(const void **)(*(void *)(a5 + 24) + v9),  *(void *)(*(void *)(a5 + 24) + v9)
            + *(unsigned __int8 *)(*(void *)(*(void *)(a5 + 24) + v9) + 1LL)
            + 2LL,
              a1);
      if (v11) {
        break;
      }
      ++v10;
      v9 += 40LL;
      if (v10 >= *(void *)a5) {
        goto LABEL_10;
      }
    }

    int v14 = (void *)(*(void *)(a5 + 24) + v9);
    if (v14[1])
    {
      char v12 = 0;
      *(_BYTE *)(a5 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = 1;
    }

    else
    {
      ++*(void *)(a5 + 8);
      v14[1] = a3;
      _OWORD v14[2] = a3 + a4;
      unint64_t v14[3] = a3;
      v14[4] = a3 + a4;
      char v12 = 1;
    }

BOOL der_key_equal(unsigned __int8 *a1, const void *a2)
{
  return der_equal(a1, (uint64_t)&a1[a1[1] + 2], a2);
}

BOOL der_equal(const void *a1, uint64_t a2, const void *a3)
{
  size_t v5 = der_get_sizeof((uint64_t)a1);
  return v5 == der_get_sizeof((uint64_t)a3) && memcmp(a1, a3, v5) == 0;
}

uint64_t der_get_sizeof(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t der_dict_iterate()
{
  uint64_t result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl())
    {
      uint64_t result = ccder_blob_decode_tl();
      if ((_DWORD)result) {
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t der_dict_find_value(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    der_dict_iterate();
    if (a2)
    {
      if (a3)
      {
        *a2 = 0LL;
        *a3 = 0LL;
      }
    }
  }

  return 0LL;
}

BOOL _dict_find_value_cb(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = der_equal(*(const void **)a5, *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1LL) + 2LL, a1);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(void *)(a5 + _Block_object_dispose(va, 8) = a3;
    *(void *)(a5 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = a3 + a4;
  }

  return !v8;
}

uint64_t der_dict_get_number(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  if (result)
  {
    der_dict_iterate();
    return 0LL;
  }

  return result;
}

uint64_t der_get_number()
{
  return 0LL;
}

uint64_t der_dict_get_data(uint64_t result)
{
  if (result)
  {
    der_dict_iterate();
    return 0LL;
  }

  return result;
}

double der_utils_decode_implicit_raw_octet_string(__int128 *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  __int128 v8 = *a1;
  if (ccder_blob_decode_range())
  {
    *a4 = 0LL;
    *a3 = 0;
    double result = *(double *)&v8;
    *a1 = v8;
  }

  return result;
}

uint64_t der_array_iterate( uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, void, uint64_t), uint64_t a4)
{
  *(void *)&__int128 v12 = a1;
  *((void *)&v12 + 1) = a2;
  uint64_t v6 = ccder_blob_decode_range();
  if ((_DWORD)v6)
  {
    uint64_t v11 = 0LL;
    uint64_t v7 = v12;
    if (der_utils_decode_tl(&v12, &v10, &v11))
    {
      do
      {
        uint64_t v8 = v12 + v11;
        if (!a3(v7, v12 + v11 - v7, a4)) {
          break;
        }
        *(void *)&__int128 v12 = v8;
        uint64_t v7 = v8;
      }

      while ((der_utils_decode_tl(&v12, &v10, &v11) & 1) != 0);
    }
  }

  return v6;
}

uint64_t der_utils_decode_tl(__int128 *a1, void *a2, void *a3)
{
  __int128 v7 = *a1;
  uint64_t result = ccder_blob_decode_tag();
  if ((_DWORD)result)
  {
    uint64_t result = ccder_blob_decode_len();
    if ((_DWORD)result)
    {
      *a1 = v7;
      *a2 = 0LL;
      *a3 = 0LL;
      return 1LL;
    }
  }

  return result;
}

uint64_t der_get_BOOL()
{
  return 0LL;
}

uint64_t encode_list_free(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unint64_t v2 = *a1;
    if (!*a1) {
      break;
    }
    __int128 v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }

    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }

  return 0LL;
}

uint64_t encode_list_remove_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v2 = (void **)a1;
  uint64_t result = (uint64_t)_encode_list_find_key(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != (void *)result; uint64_t i = (void *)*i)
      unint64_t v2 = (void **)i;
    *unint64_t v2 = *(void **)result;
    uint64_t v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }

    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0LL;
  }

  return result;
}

void *_encode_list_find_key(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      size_t v5 = (const void *)v2[1];
      unint64_t v2 = (void *)*v2;
    }

    while (v2);
  }

  return v2;
}

uint64_t encode_list_get_data(void *a1, unsigned __int8 *a2, int a3, void *a4, void *a5)
{
  key = _encode_list_find_key(a1, a2);
  if (!key) {
    return 0LL;
  }
  uint64_t v9 = 1LL;
  if (a4)
  {
    if (a5)
    {
      uint64_t v10 = key[1] + key[2];
      *(void *)&__int128 v15 = key[1];
      *((void *)&v15 + 1) = v10;
      uint64_t v9 = ccder_blob_decode_sequence_tl();
      if ((_DWORD)v9)
      {
        if (der_utils_decode_implicit_raw_octet_string_copy(&v15, 12LL, 0LL, 0))
        {
          uint64_t v11 = v15;
          if (ccder_blob_decode_tag())
          {
            if (ccder_blob_decode_len())
            {
              uint64_t v13 = 0LL;
              uint64_t v12 = v15;
              if (a3)
              {
                uint64_t v13 = (v15 - v11);
                uint64_t v12 = v11;
              }

              *a4 = v12;
              *a5 = v13;
            }
          }
        }
      }
    }
  }

  return v9;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy(__int128 *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0 || a3 && a4) {
    return 0LL;
  }
  *a1 = v8;
  return 1LL;
}

uint64_t encode_list_cstr_get_data(void *a1, char *__s, void *a3, size_t a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  memset(v18, 0, sizeof(v18));
  __int128 v17 = 0u;
  __int128 v16 = 0u;
  __int128 v15 = 0u;
  __int128 v14 = 0u;
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  v11[0] = 12;
  v11[1] = strlen(__s);
  __int128 v7 = (unsigned __int8 *)der_key_validate((uint64_t)v11);
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && v7)
  {
    __memcpy_chk();
    __src = 0LL;
    uint64_t v10 = 0LL;
    if (encode_list_get_data(a1, v7, 0, &__src, &v10))
    {
      if (v10 == a4)
      {
        memcpy(a3, __src, a4);
        return 0LL;
      }

      else
      {
        return 4294967277LL;
      }
    }

    else
    {
      return 4294967293LL;
    }
  }

  return result;
}

uint64_t der_key_validate(uint64_t a1)
{
  if ((ccder_blob_decode_tl() & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x1895F89E0], "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  return a1;
}

uint64_t encode_list_get_number(void *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t data = encode_list_get_data(a1, a2, 1, &v7, &v8);
  uint64_t v5 = data;
  if (a3 && (_DWORD)data) {
    *a3 = der_get_number();
  }
  return v5;
}

uint64_t encode_list_get_BOOL(void *a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t data = encode_list_get_data(a1, a2, 1, &v7, &v8);
  uint64_t v5 = data;
  if (a3 && (_DWORD)data) {
    *a3 = der_get_BOOL();
  }
  return v5;
}

uint64_t encode_list_merge_dict(uint64_t a1)
{
  if (a1) {
    return der_dict_iterate() - 1;
  }
  else {
    return 4294967285LL;
  }
}

uint64_t _merge_dict_cb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (unsigned __int8 *)der_key_validate(a1);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
  }

  fprintf( (FILE *)*MEMORY[0x1895F89E0],  "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n",  "aks",  "",  "",  "",  "_merge_dict_cb",  ":",  647,  "",  0,  "",  "");
  return 0LL;
}

uint64_t encode_list_dict(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          uint64_t v10 = 0LL;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16LL;
            --v8;
          }

          while (v7);
          if (v8 >= 0xF000000000000001LL && (v11 = -v9, (__int128 v12 = calloc(-v9, 1uLL)) != 0LL))
          {
            __int128 v13 = v12;
            __int128 v14 = (void *)*a1;
            if (*a1)
            {
              __int128 v15 = v12;
              do
              {
                *v15++ = *(_OWORD *)(v14 + 1);
                __int128 v14 = (void *)*v14;
              }

              while (v14);
            }

            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))_qsort_compare);
            size_t v16 = ccder_sizeof();
            __int128 v17 = (char *)calloc(v16, 1uLL);
            char v18 = v17;
            if (v17)
            {
              uint64_t v25 = v17;
              uint64_t v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              uint64_t v20 = (uint64_t)v13 - v9 - 8;
              while (!__CFADD__(v19++, 1LL))
              {
                uint64_t v22 = v20 - 16;
                char v23 = ccder_blob_encode_body();
                uint64_t v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }

              if (!ccder_blob_encode_tl() || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }

              uint64_t v3 = 0LL;
              *a2 = v18;
              *a3 = v16;
              char v18 = 0LL;
            }

            else
            {
              uint64_t v3 = 4294967279LL;
            }

uint64_t encode_list_add_der(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    if (der_get_sizeof(a3) <= (unint64_t)(a4 - a3))
    {
      size_t v6 = ccder_sizeof();
      uint64_t v7 = (char *)calloc(v6, 1uLL);
      if (!v7) {
        return 4294967279LL;
      }
      unint64_t v8 = v7;
      size_t v16 = &v7[v6];
      if (ccder_blob_encode_body())
      {
        int v9 = ccder_blob_encode_body();
        uint64_t v10 = v16;
        if (!v9) {
          uint64_t v10 = 0LL;
        }
        __int128 v17 = v10;
        int v11 = ccder_blob_encode_tl();
        __int128 v12 = v17;
        if (!v11) {
          __int128 v12 = 0LL;
        }
        if (v12 && v12 == v8)
        {
          __int128 v14 = calloc(0x18uLL, 1uLL);
          if (v14)
          {
            __int128 v15 = v14;
            uint64_t result = 0LL;
            v15[1] = v8;
            int v15[2] = v6;
            void *v15 = *a1;
            *a1 = v15;
            return result;
          }
        }
      }

      memset_s(v8, v6, 0, v6);
      free(v8);
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t encode_list_add_key(void *a1, uint64_t a2, uint64_t a3)
{
  return encode_list_add_der(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t encode_list_add_data(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    size_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      __int128 v15 = &v6[v5];
      int v8 = ccder_blob_encode_body();
      int v9 = v15;
      if (!v8) {
        int v9 = 0LL;
      }
      size_t v16 = v9;
      int v10 = ccder_blob_encode_tl();
      int v11 = v16;
      if (!v10) {
        int v11 = 0LL;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (__int128 v13 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v14 = v13;
        uint64_t result = 0LL;
        v14[1] = v7;
        _OWORD v14[2] = v5;
        void *v14 = *a1;
        *a1 = v14;
      }

      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_cstr_add_data(void *a1, char *__s, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(v14, 0, sizeof(v14));
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  __int128 v11 = 0u;
  __int128 v10 = 0u;
  __int128 v9 = 0u;
  __int128 v8 = 0u;
  v7[0] = 12;
  v7[1] = strlen(__s);
  uint64_t v5 = der_key_validate((uint64_t)v7);
  uint64_t result = 4294967285LL;
  if (a3)
  {
    if (v5)
    {
      __memcpy_chk();
      return encode_list_add_data(a1, v5, a3);
    }
  }

  return result;
}

uint64_t encode_list_add_BOOL(void *a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v4 = ccder_sizeof();
    uint64_t v5 = (char *)calloc(v4, 1uLL);
    if (v5)
    {
      size_t v6 = v5;
      __int128 v14 = &v5[v4];
      int v7 = ccder_blob_encode_body();
      __int128 v8 = v14;
      if (!v7) {
        __int128 v8 = 0LL;
      }
      uint64_t v15 = v8;
      int v9 = ccder_blob_encode_tl();
      __int128 v10 = v15;
      if (!v9) {
        __int128 v10 = 0LL;
      }
      BOOL v11 = v10 && v10 == v6;
      if (v11 && (__int128 v12 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v13 = v12;
        uint64_t result = 0LL;
        v13[1] = v6;
        int v13[2] = v4;
        *__int128 v13 = *a1;
        *a1 = v13;
      }

      else
      {
LABEL_18:
        memset_s(v6, v4, 0, v4);
        free(v6);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_number(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v25[1] = *MEMORY[0x1895F89C0];
  unint64_t v5 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v10 = 8LL;
  }

  else
  {
    uint64_t v6 = 9LL;
    uint64_t v7 = 48LL;
    uint64_t v8 = 1LL;
    while ((unint64_t)(v6 - 2) >= 2)
    {
      uint64_t v9 = a3 >> v7;
      --v6;
      v7 -= 8LL;
      if ((_DWORD)v5 != v9)
      {
        uint64_t v8 = v6 - 1;
        goto LABEL_8;
      }
    }

    uint64_t v6 = 2LL;
LABEL_8:
    else {
      uint64_t v10 = v8;
    }
  }

  v25[0] = 0LL;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v12 = ccder_sizeof();
    __int128 v13 = (char *)calloc(v12, 1uLL);
    if (v13)
    {
      __int128 v14 = v13;
      uint64_t v15 = v10;
      do
      {
        *((_BYTE *)v25 + v15 - 1) = v3;
        v3 >>= 8;
        --v15;
      }

      while (v15);
      char v23 = &v13[v12];
      int v16 = ccder_blob_encode_body();
      __int128 v17 = v23;
      if (!v16) {
        __int128 v17 = 0LL;
      }
      __int128 v24 = v17;
      int v18 = ccder_blob_encode_tl();
      unint64_t v19 = v24;
      if (!v18) {
        unint64_t v19 = 0LL;
      }
      BOOL v20 = v19 && v19 == v14;
      if (v20 && (int v21 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        uint64_t v22 = v21;
        uint64_t result = 0LL;
        v22[1] = v14;
        v22[2] = v12;
        *uint64_t v22 = *a1;
        *a1 = v22;
      }

      else
      {
LABEL_30:
        memset_s(v14, v12, 0, v12);
        free(v14);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_string(void *a1, uint64_t a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && __s)
  {
    strlen(__s);
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    uint64_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v15 = &v6[v5];
      int v8 = ccder_blob_encode_body();
      uint64_t v9 = v15;
      if (!v8) {
        uint64_t v9 = 0LL;
      }
      int v16 = v9;
      int v10 = ccder_blob_encode_tl();
      BOOL v11 = v16;
      if (!v10) {
        BOOL v11 = 0LL;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (__int128 v13 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        __int128 v14 = v13;
        uint64_t result = 0LL;
        v14[1] = v7;
        _OWORD v14[2] = v5;
        void *v14 = *a1;
        *a1 = v14;
      }

      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t encode_list_add_list(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0LL;
  int __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    size_t v5 = 0LL;
    if (a3)
    {
      if (encode_list_dict(a3, &__s, &__n))
      {
        uint64_t v3 = 0LL;
        size_t v5 = 0LL;
      }

      else
      {
        size_t v5 = ccder_sizeof();
        uint64_t v7 = (char *)calloc(v5, 1uLL);
        uint64_t v3 = v7;
        if (v7)
        {
          uint64_t v15 = &v7[v5];
          int v18 = v3;
          unint64_t v19 = v15;
          int v8 = ccder_blob_encode_body();
          uint64_t v9 = v19;
          if (!v8) {
            uint64_t v9 = 0LL;
          }
          int v18 = v3;
          unint64_t v19 = v9;
          int v10 = ccder_blob_encode_tl();
          BOOL v11 = v19;
          if (!v10) {
            BOOL v11 = 0LL;
          }
          BOOL v12 = v11 && v11 == v3;
          if (v12 && (__int128 v13 = calloc(0x18uLL, 1uLL)) != 0LL)
          {
            uint64_t v4 = 0LL;
            v13[1] = v3;
            int v13[2] = v5;
            *__int128 v13 = *a1;
            *a1 = v13;
            uint64_t v3 = 0LL;
          }

          else
          {
LABEL_23:
            uint64_t v4 = 0xFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v4 = 4294967279LL;
        }
      }
    }
  }

  else
  {
    size_t v5 = 0LL;
  }

  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v3)
  {
    memset_s(v3, v5, 0, v5);
    free(v3);
  }

  return v4;
}

BOOL encode_list_is_empty(void *a1)
{
  return *a1 == 0LL;
}

uint64_t ccder_sizeof_fv_data()
{
  return ccder_sizeof();
}

uint64_t ccder_sizeof_fv_key()
{
  uint64_t v0 = ccder_sizeof();
  return ccder_sizeof() + v0;
}

uint64_t der_utils_encode_fv_key(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    uint64_t result = ccder_blob_encode_body_tl();
    if (!(_DWORD)result) {
      return result;
    }
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0LL;
    }
  }

  else if (!ccder_blob_encode_body_tl() || (ccder_blob_encode_tl() & 1) == 0)
  {
    return 0LL;
  }

  *a1 = v4;
  return 1LL;
}

uint64_t der_utils_decode_fv_key(__int128 *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 20);
  __int128 v11 = *a1;
  if (a2)
  {
    __int128 v14 = *a1;
    BOOL v12 = 0LL;
    uint64_t v13 = 0LL;
    if ((ccder_blob_decode_range() & 1) == 0) {
      return 0LL;
    }
    uint64_t v6 = (uint64_t)v12;
    unsigned int v8 = v13 - (_DWORD)v12;
    __int128 v11 = v14;
  }

  else
  {
    LODWORD(v14) = v5;
    uint64_t result = der_utils_decode_implicit_raw_octet_string_copy_len(&v11, 4LL, v6, &v14);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v8 = v14;
  }

  __int128 v14 = v11;
  BOOL v12 = 0LL;
  uint64_t v13 = 0LL;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  __int128 v11 = v14;
  int v10 = *v12;
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v8;
  *(_DWORD *)(a3 + outlined assign with take of LACPreboardUseCaseProviding??((uint64_t)v3, v1 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v7;
  *a1 = v11;
  return 1LL;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy_len( __int128 *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int128 v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  if (a3)
  {
    if (a4) {
      *a4 = 0;
    }
  }

  *a1 = v8;
  return 1LL;
}

uint64_t der_utils_encode_fv_data(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = ccder_blob_encode_tl();
    if (!(_DWORD)result) {
      return result;
    }
  }

  *a1 = v4;
  return 1LL;
}

uint64_t der_utils_decode_fv_data(__int128 *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  __int128 v9 = *a1;
  if (a2)
  {
    __int128 v12 = *a1;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t result = ccder_blob_decode_range();
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v6 = v10;
    unsigned int v8 = v11 - v10;
    __int128 v9 = v12;
  }

  else
  {
    LODWORD(v12) = v5;
    uint64_t result = der_utils_decode_implicit_raw_octet_string_copy_len(&v9, 4LL, v6, &v12);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v8 = v12;
  }

  *a3 = v6;
  a3[1] = v8;
  *a1 = v9;
  return 1LL;
}

uint64_t der_utils_encode_fv_params(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = ccder_blob_encode_tl();
    if (!(_DWORD)result) {
      return result;
    }
  }

  *a1 = v4;
  return 1LL;
}

uint64_t der_utils_decode_fv_params(__int128 *a1)
{
  __int128 v3 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  *a1 = v3;
  return 1LL;
}

uint64_t encode_extended_state(unsigned int *a1, int a2, void *a3, _DWORD *a4)
{
  __int128 v12 = 0LL;
  if (encode_list_add_number(&v12, (uint64_t)der_key_state_state, *a1)
    || encode_list_add_number(&v12, (uint64_t)der_key_state_lock_state, a1[1])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_backoff, *((void *)a1 + 1))
    || encode_list_add_number(&v12, (uint64_t)der_key_state_failed_attempts, a1[4])
    || encode_list_add_number(&v12, (uint64_t)der_key_state_generation_state, a1[5])
    || encode_list_add_number( &v12,  (uint64_t)der_key_state_recovery_countdown,  *(void *)((char *)a1 + 26))
    || encode_list_add_number(&v12, (uint64_t)der_key_state_more_state, *(void *)((char *)a1 + 34))
    || encode_list_add_number(&v12, (uint64_t)der_key_keybag_handle, *(int *)((char *)a1 + 42))
    || encode_list_add_number( &v12,  (uint64_t)der_key_config_max_unlock_attempts,  *(unsigned int *)((char *)a1 + 46))
    || encode_list_add_data(&v12, (uint64_t)der_key_config_user_uuid, (uint64_t)a1 + 50)
    || a2
    && (encode_list_add_number(&v12, (uint64_t)der_key_state_assertion_set, *((char *)a1 + 66))
     || encode_list_add_number(&v12, (uint64_t)der_key_state_grace_period_enabled, *((char *)a1 + 67))
     || encode_list_add_number(&v12, (uint64_t)der_key_lock_time, *(void *)(a1 + 17))
     || encode_list_add_number(&v12, (uint64_t)der_key_cx_window, *(void *)(a1 + 19)))
    || (uint64_t v10 = 0LL, v11 = 0LL, encode_list_dict(&v12, &v10, &v11)))
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = 0LL;
    *a3 = v10;
    *a4 = v11;
  }

  encode_list_free(&v12);
  return v8;
}

uint64_t decode_extended_state(uint64_t a1, int a2, char *__s)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1)
  {
    if (__s)
    {
      memset_s(__s, 0x54uLL, 0, 0x54uLL);
      bzero(v7, 0x228uLL);
      void v7[4] = der_key_state_lock_state;
      v7[9] = der_key_state_backoff;
      v7[14] = der_key_state_failed_attempts;
      v7[19] = der_key_state_generation_state;
      v7[24] = der_key_state_assertion_set;
      v7[29] = der_key_state_grace_period_enabled;
      v7[34] = der_key_state_recovery_countdown;
      v7[39] = der_key_state_more_state;
      v7[44] = der_key_keybag_handle;
      v7[49] = der_key_config_max_unlock_attempts;
      v7[54] = der_key_config_user_uuid;
      __int128 v9 = der_key_lock_time;
      uint64_t v10 = der_key_cx_window;
      der_dict_iterate();
      *(_DWORD *)int __s = der_get_number();
      *((_DWORD *)__s + 1) = der_get_number();
      *((void *)__s + 1) = der_get_number();
      *((_DWORD *)__s + 4) = der_get_number();
      *((_DWORD *)__s + 5) = der_get_number();
      *(void *)(__s + 26) = der_get_number();
      *(void *)(__s + 34) = der_get_number();
      *(_DWORD *)(__s + 42) = der_get_number();
      *(_DWORD *)(__s + 46) = der_get_number();
      der_utils_decode_implicit_raw_octet_string_copy(&v8, 4LL, (uint64_t)(__s + 50), 16);
      __s[66] = der_get_number();
      __s[67] = der_get_number();
      *(void *)(__s + 6_Block_object_dispose(va, 8) = der_get_number();
      uint64_t number = der_get_number();
      uint64_t result = 0LL;
      *(void *)(__s + 76) = number;
    }
  }

  return result;
}

uint64_t decode_memento_state(uint64_t a1, int a2, _BYTE *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (der_dict_iterate())
    {
      void *__s = der_get_number();
      *((_DWORD *)__s + 1) = der_get_number();
      *((_DWORD *)__s + 2) = der_get_number();
      int number = der_get_number();
      uint64_t result = 0LL;
      *((_DWORD *)__s + 3) = number;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t decode_primary_identity_state(uint64_t a1, int a2, void *__s, void *a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s && a4)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    memset_s(a4, 0x10uLL, 0, 0x10uLL);
    uint64_t v12 = 0LL;
    v10[0] = 0u;
    __int128 v11 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    v10[1] = (unint64_t)der_key_group_uuid;
    uint64_t v13 = der_key_uuid;
    der_dict_iterate();
    if (der_utils_decode_implicit_raw_octet_string_copy(v10, 4LL, (uint64_t)__s, 16)
      && der_utils_decode_implicit_raw_octet_string_copy( (__int128 *)((char *)&v11 + 8),  4LL,  (uint64_t)a4,  16))
    {
      return der_utils_decode_implicit_raw_octet_string_copy(&v15, 4LL, a5, 16) - 1;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t decode_fv_blob_state(uint64_t a1, uint64_t a2, _DWORD *__s)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x58uLL, 0, 0x58uLL);
    __int128 v24 = 0u;
    uint64_t v26 = 0LL;
    __int128 v27 = 0u;
    uint64_t v28 = 0LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    uint64_t v33 = 0LL;
    __int128 v34 = 0u;
    uint64_t v35 = 0LL;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v40 = 0LL;
    __int128 v41 = 0u;
    uint64_t v42 = 0LL;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v8 = 0u;
    uint64_t v9 = 0LL;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v15 = 0LL;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v21 = 0LL;
    __int128 v23 = 0u;
    uint64_t v10 = der_key_id;
    *(void *)&__int128 v13 = der_key_flags;
    uint64_t v16 = der_key_version;
    *(void *)&__int128 v19 = der_key_state_reserved;
    uint64_t v22 = der_key_state_failed_attempts;
    uint64_t v25 = der_key_state_failed_attempts_other;
    int v29 = der_key_config_max_unlock_attempts;
    __int128 v32 = der_key_state_backoff;
    uint64_t v36 = der_key_state_backoff_other;
    uint64_t v39 = der_key_config_capabilities;
    uint64_t v43 = der_key_state_refcount;
    der_dict_iterate();
    void *__s = der_get_number();
    if (der_utils_decode_implicit_raw_octet_string_copy( (__int128 *)((char *)&v8 + 8),  4LL,  (uint64_t)(__s + 1),  16)
      && der_utils_decode_implicit_raw_octet_string_copy(&v12, 4LL, (uint64_t)(__s + 5), 16)
      && (__s[9] = der_get_number(),
          __s[10] = der_get_number(),
          __s[11] = der_get_number(),
          __s[12] = der_get_number(),
          __s[15] = der_get_number(),
          __s[13] = der_get_number(),
          __s[14] = der_get_number(),
          der_utils_decode_implicit_raw_octet_string_copy_partial((__int128 *)((char *)&v20 + 8))))
    {
      int v6 = __s[9];
      if ((v6 & 0x400) != 0)
      {
        *((void *)__s + 9) = der_get_number();
        int v6 = __s[9];
      }

      if ((v6 & 0x800) != 0)
      {
        int number = der_get_number();
        uint64_t result = 0LL;
        __s[20] = number;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t der_utils_decode_implicit_raw_octet_string_copy_partial(__int128 *a1)
{
  __int128 v4 = *a1;
  uint64_t v2 = ccder_blob_decode_range();
  if ((v2 & 1) != 0) {
    *a1 = v4;
  }
  return v2;
}

uint64_t encode_pfk_params_public(int *a1, void *a2, _DWORD *a3)
{
  __int128 v11 = 0LL;
  uint64_t v3 = 4294967273LL;
  if (a2 && a3)
  {
    if (a1 && (int v7 = *a1) != 0)
    {
      if ((v7 & 1) != 0)
      {
        encode_list_cstr_add_data(&v11, "persona_uuid", (uint64_t)(a1 + 1));
        int v7 = *a1;
      }

      if ((v7 & 2) != 0) {
        encode_list_cstr_add_data(&v11, "volume_uuid", (uint64_t)(a1 + 5));
      }
      uint64_t v9 = 0LL;
      size_t v10 = 0LL;
      if (!encode_list_dict(&v11, &v9, &v10))
      {
        uint64_t v3 = 0LL;
        *a2 = v9;
        *a3 = v10;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      *a2 = 0LL;
      *a3 = 0;
    }
  }

  encode_list_free(&v11);
  return v3;
}

uint64_t decode_pfk_params_internal(uint64_t a1, uint64_t a2, char *__s)
{
  int v6 = 0LL;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x24uLL, 0, 0x24uLL);
    if (der_dict_iterate())
    {
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }

  encode_list_free(&v6);
  return v3;
}

uint64_t encode_fv_params_internal(uint64_t a1, void *a2, _DWORD *a3)
{
  size_t v10 = 0LL;
  uint64_t v3 = 4294967273LL;
  if (a2 && a3)
  {
    if (a1)
    {
      if (!encode_list_cstr_add_data(&v10, "options", a1)
        && !encode_list_cstr_add_data(&v10, "kc", a1 + 8))
      {
        uint64_t v8 = 0LL;
        size_t v9 = 0LL;
        if (!encode_list_dict(&v10, &v8, &v9))
        {
          uint64_t v3 = 0LL;
          *a2 = v8;
          *a3 = v9;
        }
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      *a2 = 0LL;
      *a3 = 0;
    }
  }

  encode_list_free(&v10);
  return v3;
}

uint64_t decode_fv_params_internal(uint64_t a1, uint64_t a2, char *__s)
{
  int v6 = 0LL;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (der_dict_iterate())
    {
      encode_list_cstr_get_data(&v6, "options", __s, 8uLL);
      encode_list_cstr_get_data(&v6, "kc", __s + 8, 4uLL);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }

  encode_list_free(&v6);
  return v3;
}

uint64_t ref_key_op_der_to_enum(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  uint64_t v4 = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    if (der_key_op) {
      der_dict_iterate();
    }
    return 0LL;
  }

  return result;
}

uint64_t der_utils_decode_implicit_raw_octet_string_alloc(__int128 *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  __int128 v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0LL;
  }
  if (a3 && a4)
  {
    uint64_t result = (uint64_t)calloc(0LL, 1uLL);
    if (!result) {
      return result;
    }
    *a3 = result;
    *a4 = 0;
  }

  *a1 = v8;
  return 1LL;
}

uint64_t der_utils_decode_implicit_uint64(__int128 *a1, uint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0LL;
  }
  __int128 v6 = *a1;
  uint64_t result = ccder_blob_decode_range();
  if ((_DWORD)result)
  {
    if (ccn_read_uint())
    {
      return 0LL;
    }

    else
    {
      *a1 = v6;
      if (a3) {
        *a3 = 0LL;
      }
      return 1LL;
    }
  }

  return result;
}

uint64_t _qsort_compare(const void **a1, void **a2)
{
  uint64_t v5 = *a1;
  __s2 = *a2;
  if (!ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !v5
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !__s2)
  {
    return 4294967293LL;
  }

  int v2 = memcmp(v5, __s2, 0LL);
  if (v2 > 0) {
    return 1LL;
  }
  else {
    return ((v2 < 0) << 31 >> 31);
  }
}

uint64_t platform_get_measurement()
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  36,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return 4294967284LL;
}

uint64_t platform_rng()
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  62,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_rng != 0LL,  63,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_rng();
}

uint64_t platform_read_random(uint64_t a1, unsigned int a2)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  70,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func( lib_platform_read_random != 0LL,  71,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return lib_platform_read_random(a1, a2);
}

uint64_t platform_pka_get_pub_key( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  78,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 79, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t platform_pka_ecdh( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  86,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 87, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t platform_pka_sign( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  94,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 95, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t platform_pka_sika_attest( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  106,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 107, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t platform_pka_shared_encrypt( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  115,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 116, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t platform_ref_key_hw_crypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  123,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 124, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5);
}

uint64_t platform_ref_key_hw_crypt_clear_cache()
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  131,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 132, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0]();
}

uint64_t platform_get_device_id(uint64_t a1, uint64_t a2)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  139,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 140, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2);
}

uint64_t platform_get_aon_security(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  147,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 148, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_att_sep_chip_rev(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  155,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 156, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_chip_id(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  163,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 164, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_ecid(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  171,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 172, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_board_id(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  179,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 180, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_fuse_bits(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  187,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 188, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t platform_get_att_board_and_chip_id(uint64_t a1)
{
  REQUIRE_func( &lib_platform_callbacks != 0LL,  195,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  REQUIRE_func(0LL, 196, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t aks_get_pad_size(int a1)
{
  return -a1 & 3;
}

char *aks_copy_packed_data(_DWORD *a1, const void *a2, int a3)
{
  uint64_t v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    int v5 = -a3;
    size_t v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      int __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }

  else
  {
    *a1 = 0;
  }

  return v3;
}

char *aks_pack_data( char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = &a9;
  unsigned int v12 = 4;
  if (a3)
  {
    int v13 = a3;
    do
    {
      __int128 v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }

    while (v13);
  }

  uint64_t result = (char *)calloc(1uLL, v12);
  uint64_t v16 = result;
  uint64_t v22 = (const void **)&a9;
  int v17 = 0;
  if (a3)
  {
    uint64_t v18 = 4LL;
    do
    {
      __int128 v19 = v22;
      __int128 v20 = *v22;
      v22 += 2;
      uint64_t result = aks_copy_packed_data(&v16[v18], v20, *((_DWORD *)v19 + 2));
      uint64_t v18 = result - v16;
      ++v17;
    }

    while (a3 != v17);
  }

  *(_DWORD *)uint64_t v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t aks_unpack_data( unsigned int *a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 < 4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = a3;
  if (*a1 >= a3)
  {
    __int128 v19 = (void **)&a9;
    if (!a3) {
      return 0LL;
    }
    __int128 v11 = (char *)(a1 + 1);
    while (1)
    {
      unsigned int v12 = v19;
      int v13 = *v19;
      v19 += 2;
      unsigned int v16 = *(_DWORD *)v11;
      __int128 v14 = v11 + 4;
      size_t v15 = v16;
      if (v16 > a2) {
        break;
      }
      if (v13)
      {
        int v17 = (size_t *)v12[1];
        if (*v17 < v15) {
          return 0xFFFFFFFFLL;
        }
        memcpy(v13, v14, v15);
        size_t *v17 = v15;
      }

      __int128 v11 = &v14[v15];
      if (!--v9) {
        return 0LL;
      }
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x189606000]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x189606018]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x189606028]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1896060A8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1896060C0]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1896060D0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x189606200]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x189606260]();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)( Swift::String _, Swift::String_optional tableName, NSBundle *bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = MEMORY[0x189606348]( _._countAndFlagsBits,  _._object,  tableName.value._countAndFlagsBits,  tableName.value._object,  bundle,  value._countAndFlagsBits,  value._object,  comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x189606928]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x189606940]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189606A48]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x189606A90]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x189606BA8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x189606C58]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189606CA0]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x189606DF8]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x189606E00]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x189606E10]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189606E38]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x189606E40]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x189606E60]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x189606EC8]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x189606ED8]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x189606EE8]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189606EF0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x189606F10]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x189606F20]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x18961D1D8]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x18961D1F0]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x18961D200]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x1896022D8]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x1896022E8]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x189602320]();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return MEMORY[0x189602328]();
}

uint64_t Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)()
{
  return MEMORY[0x189602330]();
}

uint64_t Publisher.share()()
{
  return MEMORY[0x189602340]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x189602348]();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return MEMORY[0x189602350]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x189602358]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x18961B6A0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x18961B6E8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x18961B6F8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x18961B708]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x18961B778]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x18961B788]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x18961B800]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x18961B820]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x18961B828]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x189607050]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189607078]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1896179F8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x189617B30]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x189617B48]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x189617B50]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x189617C20]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1896070D8]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189607100]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x189607118]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x189607138]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x189607150]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x189607178]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x189617C90]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x189617D80]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x189617DD8]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x189617E20]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x189617E40]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x189617EB0]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x189617EB8]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x189617ED0]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x189617ED8]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x189617EE0]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x189617F48]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x189618040]();
}

{
  return MEMORY[0x189618078]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x189618070]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x189618308]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1896071D0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1896071E0]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x189618318]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x189618320]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x189618358]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1896183C8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x18961BC98]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x18961BD20]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x18961BD28]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x18961BD68]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x18961BD88]();
}

uint64_t AsyncStream.Iterator.next(isolation:)()
{
  return MEMORY[0x18961BD90]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x18961BDD0]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x189607250]();
}

uint64_t static Int._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x189607260]();
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x189607268]();
}

uint64_t static Int._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x189607270]();
}

uint64_t Int.hashValue.getter()
{
  return MEMORY[0x189618730]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x18961D210]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x18961D220]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x18961D228]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x18961D248]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x18961B8A8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x18961B8E8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x18961B920]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x18961B938]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x18961B948]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x18961B958]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x18961BA18]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x18961BA28]();
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x18961BAF0]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x189618AB0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x189618AC0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x189618D30]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x189618D50]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x189618EE0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x189619018]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x189619020]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1896190C8](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1896190D0]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x189619100]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1896191F0]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x189619300]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x189619440]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1896194A0]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1896194C0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1896194F8]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x189619500]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x189619660]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1896198A0]();
}

{
  return MEMORY[0x1896198A8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x189619930]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x189619938]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x189619948]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x189619950]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x189619960]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x189619978]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x189619A08]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x189619A80]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x189619AB0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x189619AF8]();
}

{
  return MEMORY[0x189619B00]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x189619BB0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x189619BD8]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x189619BF0]();
}

{
  return MEMORY[0x189619BF8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x189619CC8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x18961A050]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x18961A120]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x18961A3A0]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x18961A678]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x18961A680]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x18961A950]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x18961A978]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x18961AF60]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x18961AF68]();
}

uint64_t AKSEventsRegister()
{
  return MEMORY[0x18960D120]();
}

uint64_t AKSEventsUnregister()
{
  return MEMORY[0x18960D128]();
}

uint64_t AMFIArmSecurityBootMode()
{
  return MEMORY[0x18960D470]();
}

uint64_t AMFICompleteSecurityBootMode()
{
  return MEMORY[0x18960D478]();
}

uint64_t AMFIDeveloperModeCommit()
{
  return MEMORY[0x18960D480]();
}

uint64_t AMFIGetSecurityBootMode()
{
  return MEMORY[0x18960D488]();
}

uint64_t AMFIGetSecurityBootModeArmed()
{
  return MEMORY[0x18960D490]();
}

uint64_t AMFIProfileCommitProfile()
{
  return MEMORY[0x18960D498]();
}

uint64_t AMFIProfileGetScheduledProfile()
{
  return MEMORY[0x18960D4A0]();
}

uint64_t AMFIProfileSetTrustWithOptions()
{
  return MEMORY[0x18960D4A8]();
}

uint64_t CCRandomCopyBytes()
{
  return MEMORY[0x1895F8220]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x189602C08](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

void CFNotificationCenterAddObserver( CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x189602E50]();
}

void CFNotificationCenterPostNotification( CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver( CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

kern_return_t IOConnectCallMethod( mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x189607CB8]( *(void *)&connection,  *(void *)&selector,  input,  *(void *)&inputCnt,  inputStruct,  inputStructCnt,  output,  outputCnt);
}

kern_return_t IOConnectCallScalarMethod( mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x189607CC0]( *(void *)&connection,  *(void *)&selector,  input,  *(void *)&inputCnt,  output,  outputCnt);
}

kern_return_t IOConnectCallStructMethod( mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x189607CC8]( *(void *)&connection,  *(void *)&selector,  inputStruct,  inputStructCnt,  outputStruct,  outputStructCnt);
}

kern_return_t IOConnectSetNotificationPort( io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return MEMORY[0x189607CF8](*(void *)&connect, *(void *)&type, *(void *)&port, reference);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x189608398](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608470](*(void *)&entry, key, allocator, *(void *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x189608488](*(void *)&mainPort, path);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x189608550](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x189608560](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608580](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x189608598](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1896136F0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x189613710]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x189613728]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x189613750]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x189611510]();
}

uint64_t MKBVerifyPasswordWithContext()
{
  return MEMORY[0x189611548]();
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x189603A50](typePtr, sizep, alignp);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x189607700](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x189607718](aSelector);
}

uint64_t SecAccessControlCopyData()
{
  return MEMORY[0x18960B1B0]();
}

uint64_t SecAccessControlCreateFromData()
{
  return MEMORY[0x18960B1C0]();
}

SecAccessControlRef SecAccessControlCreateWithFlags( CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x18960B1C8](allocator, protection, flags, error);
}

uint64_t SecAccessControlGetConstraints()
{
  return MEMORY[0x18960B1D8]();
}

uint64_t SecAccessControlGetRequirePassword()
{
  return MEMORY[0x18960B1E8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1895F8D88]();
}

void _os_log_debug_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl( void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x189612738]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x18961B048]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x18961B058]();
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

uint64_t cc_clear()
{
  return MEMORY[0x1895F9748]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1895F9750]();
}

uint64_t ccaes_cbc_decrypt_mode()
{
  return MEMORY[0x1895F9758]();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return MEMORY[0x1895F9760]();
}

uint64_t cccbc_clear_iv()
{
  return MEMORY[0x1895F97D0]();
}

uint64_t cccbc_init()
{
  return MEMORY[0x1895F97D8]();
}

uint64_t cccbc_one_shot()
{
  return MEMORY[0x1895F97E0]();
}

uint64_t cccbc_update()
{
  return MEMORY[0x1895F97F0]();
}

uint64_t cccurve25519()
{
  return MEMORY[0x1895F9868]();
}

uint64_t cccurve25519_make_pub()
{
  return MEMORY[0x1895F9880]();
}

uint64_t ccder_blob_decode_len()
{
  return MEMORY[0x1895F98C0]();
}

uint64_t ccder_blob_decode_range()
{
  return MEMORY[0x1895F98D0]();
}

uint64_t ccder_blob_decode_sequence_tl()
{
  return MEMORY[0x1895F98D8]();
}

uint64_t ccder_blob_decode_tag()
{
  return MEMORY[0x1895F98E0]();
}

uint64_t ccder_blob_decode_tl()
{
  return MEMORY[0x1895F98E8]();
}

uint64_t ccder_blob_encode_body()
{
  return MEMORY[0x1895F98F8]();
}

uint64_t ccder_blob_encode_body_tl()
{
  return MEMORY[0x1895F9900]();
}

uint64_t ccder_blob_encode_implicit_raw_octet_string()
{
  return MEMORY[0x1895F9908]();
}

uint64_t ccder_blob_encode_implicit_uint64()
{
  return MEMORY[0x1895F9910]();
}

uint64_t ccder_blob_encode_tl()
{
  return MEMORY[0x1895F9918]();
}

uint64_t ccder_decode_sequence_tl()
{
  return MEMORY[0x1895F9960]();
}

uint64_t ccder_decode_tl()
{
  return MEMORY[0x1895F9970]();
}

uint64_t ccder_encode_constructed_tl()
{
  return MEMORY[0x1895F9990]();
}

uint64_t ccder_encode_raw_octet_string()
{
  return MEMORY[0x1895F99A8]();
}

uint64_t ccder_encode_uint64()
{
  return MEMORY[0x1895F99C8]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x1895F99D0]();
}

uint64_t ccder_sizeof_implicit_uint64()
{
  return MEMORY[0x1895F99E0]();
}

uint64_t ccder_sizeof_raw_octet_string()
{
  return MEMORY[0x1895F9A00]();
}

uint64_t ccder_sizeof_uint64()
{
  return MEMORY[0x1895F9A10]();
}

uint64_t ccdigest()
{
  return MEMORY[0x1895F9A90]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x1895F9B68]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x1895F9BA8]();
}

uint64_t ccecb_one_shot()
{
  return MEMORY[0x1895F9C88]();
}

uint64_t cchkdf()
{
  return MEMORY[0x1895F9F08]();
}

uint64_t cchmac()
{
  return MEMORY[0x1895F9F20]();
}

uint64_t ccn_read_uint()
{
  return MEMORY[0x1895FA098]();
}

uint64_t ccn_write_uint_padded()
{
  return MEMORY[0x1895FA0D0]();
}

uint64_t ccpbkdf2_hmac()
{
  return MEMORY[0x1895FA0F8]();
}

uint64_t ccrng()
{
  return MEMORY[0x1895FA118]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1895FA4B8]();
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1895FABB0](flags, block);
}

uint64_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1895FABE0](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1895FAC60]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class( dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1895FAD78](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADF0](value);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create( dispatch_source_type_t type, uintptr_t handle, unint64_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1895FAE50](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer( dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

uint64_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1895FAEB0](source);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1895FAEE8](when, delta);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

void free(void *a1)
{
}

int fts_close(FTS *a1)
{
  return MEMORY[0x1895FB490](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x1895FB498](a1, *(void *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x1895FB4A0](a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return MEMORY[0x1895FB4A8](a1, a2, *(void *)&a3);
}

uid_t geteuid(void)
{
  return MEMORY[0x1895FB540]();
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1895FBAB0]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1895FBBF8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1895FBE68](__s, __smax, *(void *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1896165B8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1896166B8](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1896166D8](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x189616700](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x189616730]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x189616738]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x189616740]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x189616748]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x189616820](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x189616828](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x189616838](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x189616968](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1895FC250](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1895FC600](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1895FC6A8]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1895FC890](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1895FCB88](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1895FCB98](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1895FCC80](a1, a2);
}

uint64_t reboot3()
{
  return MEMORY[0x1895FCC98]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1895FD018](a1, a2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1895FD108](__big, __little, __len);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x18961B0E8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x18961B0F0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x18961B0F8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x18961BFB8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x18961BFC0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x18961BFD0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x18961BFD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x18961B160]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x18961BFE0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x18961BFE8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x18961BFF0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x18961B170]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x18961B188]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x18961B1D8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x18961B1F0]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B258]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x18961B260]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x18961B270]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x18961B2A8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x18961B2C0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x18961B3A0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x18961B3A8]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x18961B3E8]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x18961B410]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B438]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x18961C008]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x18961C010]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x18961C018]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x18961C038]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x18961B460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x18961B490]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x18961B498]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x18961B4A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x18961B4D0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x18961B4F0]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x18961B4F8]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x18961B500]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t task_info( task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1895FD320](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1895FD338](*(void *)&target_tport, *(void *)&pid, tn);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x1895FD418](__b1, __b2, __len);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1895FD4B8](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD750](*(void *)&__fd, __buf, __nbyte);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1895FDC48](xdict, key);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t objc_msgSend__cancelPreviousNotificationForPendingEvaluationRecord_scheduledOnly_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel__cancelPreviousNotificationForPendingEvaluationRecord_scheduledOnly_);
}

uint64_t objc_msgSend__securityDelayEndedNotificationWithIdentifier_body_callbackURL_after_maxAge_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel__securityDelayEndedNotificationWithIdentifier_body_callbackURL_after_maxAge_);
}

uint64_t objc_msgSend_cancelPendingEvaluationForClient_ratchetIdentifier_reason_completion_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_cancelPendingEvaluationForClient_ratchetIdentifier_reason_completion_);
}

uint64_t objc_msgSend_cancelPreviousSecurityDelayFinishedNotificationForPendingEvaluation_scheduledOnly_completion_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_cancelPreviousSecurityDelayFinishedNotificationForPendingEvaluation_scheduledOnly_completion_);
}

uint64_t objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_);
}

uint64_t objc_msgSend_initWithAvailabilityError_biometryType_enrolled_lockedOut_stateHash_sensorInaccessible_approvalState_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithAvailabilityError_biometryType_enrolled_lockedOut_stateHash_sensorInaccessible_approvalState_);
}

uint64_t objc_msgSend_initWithLocationProvider_featureController_ratchetStateProvider_lostModeController_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithLocationProvider_featureController_ratchetStateProvider_lostModeController_);
}

uint64_t objc_msgSend_initWithReplyQueue_dataSource_policyTraitsManager_policyCoordinator_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_initWithReplyQueue_dataSource_policyTraitsManager_policyCoordinator_);
}

uint64_t objc_msgSend_initWithTrustStateProvider_featureStateProvider_repairStateProvider_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_initWithTrustStateProvider_featureStateProvider_repairStateProvider_);
}

uint64_t objc_msgSend_notificationManager_didRespondToNotification_fromCategory_withAction_completionHandler_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_notificationManager_didRespondToNotification_fromCategory_withAction_completionHandler_);
}

uint64_t objc_msgSend_scheduleSecurityDelayFinishedNotificationForPendingEvaluation_after_validity_completion_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_scheduleSecurityDelayFinishedNotificationForPendingEvaluation_after_validity_completion_);
}