void FTSandboxEnter()
{
  char *v0;
  char v1[1024];
  if ((_set_user_dir_suffix() & 1) == 0
    || (bzero(v1, 0x400uLL), !confstr(65537, v1, 0x400uLL))
    || (v0 = realpath_DARWIN_EXTSN(v1, 0LL)) == 0LL)
  {
    exit(1);
  }

  free(v0);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ([(id)objc_opt_self(TUNeighborhoodActivityConduit) isConduitAvailable])
  {
    FTSandboxEnter();
    uint64_t v13 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
    static DispatchQoS.unspecified.getter(v13);
    v25 = _swiftEmptyArrayStorage;
    uint64_t v14 = sub_10000465C( &qword_1000CD718,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v15 = sub_10000360C(&qword_1000CD720);
    unint64_t v16 = sub_10000364C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v15, v16, v7, v14);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v3);
    v17 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000033LL,  0x80000001000A32C0LL,  v12,  v9,  v6,  0LL);
    if (qword_1000CD670 != -1) {
      swift_once(&qword_1000CD670, sub_100053BD8);
    }
    uint64_t v18 = qword_1000CD630;
    id v19 = (id)qword_1000D35E8;
    if (v18 != -1) {
      swift_once(&qword_1000CD630, sub_10001B498);
    }
    v20 = (void *)qword_1000D35C0;
    objc_allocWithZone((Class)type metadata accessor for NeighborhoodActivityConduitServer());
    v21 = sub_100011158(v17, v19, v20);
    id v22 = [(id)objc_opt_self(NSXPCListener) serviceListener];
    [v22 setDelegate:v21];
    [v22 resume];
  }

  return 0;
}

uint64_t sub_10000360C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000364C()
{
  unint64_t result = qword_1000CD728;
  if (!qword_1000CD728)
  {
    uint64_t v1 = sub_100003698(&qword_1000CD720);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000CD728);
  }

  return result;
}

uint64_t sub_100003698(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1000036DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C(&qword_1000CD908);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    unint64_t result = sub_100004CD4(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000037F4(uint64_t a1)
{
  return sub_100003A90(a1, &qword_1000CD940, &qword_1000CD948);
}

unint64_t sub_100003808(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C((uint64_t *)&unk_1000CF960);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005318(v7, (uint64_t)&v16, &qword_1000CD8E0);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100004CD4(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100004E20(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000393C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C(&qword_1000CFA60);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005318(v7, (uint64_t)v16, &qword_1000CD8C0);
    unint64_t result = sub_100004DF0((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_100004E20(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100003A7C(uint64_t a1)
{
  return sub_100003A90(a1, &qword_1000CD8E8, &qword_1000CD8F0);
}

unint64_t sub_100003A90(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000360C(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    __int128 v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v12;
  }

  sub_10000360C(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  __int128 v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t v14 = *(int *)(v6 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v29 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v7 + 72);
  swift_retain(v11);
  while (1)
  {
    sub_100005318(v17, (uint64_t)v9, a2);
    unint64_t result = sub_100004D38((uint64_t)v9);
    if ((v20 & 1) != 0) {
      break;
    }
    unint64_t v21 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v22 = v12[6];
    uint64_t v23 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))( v22 + *(void *)(*(void *)(v23 - 8) + 72LL) * v21,  v9,  v23);
    *(void *)(v12[7] + 8 * v21) = *(void *)&v9[v14];
    uint64_t v24 = v12[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_12;
    }
    v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      uint64_t v27 = v29;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100003C1C(uint64_t a1)
{
  return sub_100003C40(a1, &qword_1000CD910);
}

unint64_t sub_100003C28(uint64_t a1)
{
  return sub_100003C40(a1, (uint64_t *)&unk_1000CD8D0);
}

unint64_t sub_100003C34(uint64_t a1)
{
  return sub_100003C40(a1, &qword_1000CD938);
}

unint64_t sub_100003C40(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 2);
    uint64_t v9 = (uint64_t)*(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    id v11 = v10;
    unint64_t result = sub_100004CD4(v8, v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v14 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v14 = v8;
    v14[1] = v9;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v15 = v5[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100003D54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C(&qword_1000CD930);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = *(v6 - 1);
    id v9 = v7;
    unint64_t result = sub_100004E30((uint64_t)v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = 8 * result;
    *(void *)(v4[6] + v12) = v8;
    *(void *)(v4[7] + v12) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100003E5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C((uint64_t *)&unk_1000CD920);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100004CD4(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100003F7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C(&qword_1000CD918);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100004CD4(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of CSDConversationManager.queue()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t variable initialization expression of NeighborhoodActivityPublisherService.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  BOOL v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_10000465C( &qword_1000CD718,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_10000360C(&qword_1000CD720);
  unint64_t v13 = sub_10000364C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ELL,  0x80000001000A3300LL,  v9,  v6,  v3,  0LL);
}

unint64_t variable initialization expression of NeighborhoodActivityPublisherService.firstValueCancellables()
{
  return sub_100003A90((uint64_t)_swiftEmptyArrayStorage, &qword_1000CD940, &qword_1000CD948);
}

void type metadata accessor for RPDeviceChangeFlags(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionMessageParticipantUpdateSubtype(uint64_t a1)
{
}

void type metadata accessor for IDSGroupSessionMessageParticipantUpdateType(uint64_t a1)
{
}

void type metadata accessor for TUConversationLetMeInRequestState(uint64_t a1)
{
}

void type metadata accessor for TUConversationAVMode(uint64_t a1)
{
}

void type metadata accessor for RPRemoteDisplayDiscoveryState(uint64_t a1)
{
}

void type metadata accessor for TUConversationState(uint64_t a1)
{
}

void type metadata accessor for TUNearbyConversationHandoffType(uint64_t a1)
{
}

void type metadata accessor for TUNearbyConversationPullContext(uint64_t a1)
{
}

void sub_10000439C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000043A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000A9584, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000043F4(uint64_t a1)
{
  uint64_t v2 = sub_10000465C( &qword_1000CD9A8,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9444);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100004434(uint64_t a1)
{
  uint64_t v2 = sub_10000465C( &qword_1000CD9A8,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9444);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100004478(uint64_t a1)
{
  uint64_t v2 = sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000044B8()
{
  return *v0;
}

uint64_t sub_1000044C0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1000044C8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

unsigned __int8 *sub_1000044D8@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000044E8(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000044F4(uint64_t a1, uint64_t a2)
{
  return sub_100004B60(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004500(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100004574(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000045F0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100004630()
{
  return sub_10000465C( (unint64_t *)&unk_1000CD8B0,  (uint64_t (*)(uint64_t))type metadata accessor for TUConversationAVMode,  (uint64_t)&unk_1000A9078);
}

uint64_t sub_10000465C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

Swift::Int sub_10000469C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000046E0()
{
}

Swift::Int sub_100004708(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100004748@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100004770()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(TUNeighborhoodActivityConduitErrorDomain);
}

uint64_t sub_100004780(uint64_t a1)
{
  uint64_t v2 = sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000047C0(uint64_t a1)
{
  uint64_t v2 = sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100004800(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100004864()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100004898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000048E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100004944(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000A9584, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100004980(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000A9584, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000049C8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1000A9584, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100004A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100004A78(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100004A8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100004AD0(uint64_t a1)
{
  uint64_t v2 = sub_10000465C( &qword_1000CD9F0,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000A92E4);
  uint64_t v3 = sub_10000465C( &qword_1000CD9F8,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000A928C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004B54(uint64_t a1, uint64_t a2)
{
  return sub_100004B60(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004B60(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100004B9C(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004BDC(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100004C4C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_100004CD4(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100004E7C(a1, a2, v5);
}

unint64_t sub_100004D38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_10000465C( (unint64_t *)&qword_1000CD8F8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100004F5C(a1, v7);
}

unint64_t sub_100004DA4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000051D0(a1, v4, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
}

unint64_t sub_100004DF0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10000509C(a1, v4);
}

_OWORD *sub_100004E20(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100004E30(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000051D0(a1, v4, (unint64_t *)&unk_1000CE390, &OBJC_CLASS___TUHandle_ptr);
}

unint64_t sub_100004E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100004F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_10000465C( &qword_1000CD900,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10000509C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_100005160(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10000519C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t sub_100005160(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000519C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000051D0(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t i = a2 & ~v6;
  if (((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_1000052E0(0LL, a3, a4);
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * i);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = ~v6;
      for (unint64_t i = (i + 1) & v10; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v10)
      {
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * i);
        char v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_1000052E0(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100005318(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000360C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void type metadata accessor for CNContactSortOrder(uint64_t a1)
{
}

void type metadata accessor for TUCallDisconnectedReason(uint64_t a1)
{
}

void type metadata accessor for TUNeighborhoodActivityConduitError(uint64_t a1)
{
}

void type metadata accessor for DeviceType(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_1000053C0()
{
  return sub_10000465C( &qword_1000CD978,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1000A91BC);
}

uint64_t sub_1000053EC()
{
  return sub_10000465C( &qword_1000CD980,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000A9254);
}

uint64_t sub_100005418()
{
  return sub_10000465C( &qword_1000CD988,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000A922C);
}

uint64_t sub_100005444()
{
  return sub_10000465C( &qword_1000CD990,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceType,  (uint64_t)&unk_1000A92BC);
}

uint64_t sub_100005470()
{
  return sub_10000465C( &qword_1000CD998,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A936C);
}

uint64_t sub_10000549C()
{
  return sub_10000465C( &qword_1000CD9A0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9394);
}

uint64_t sub_1000054C8()
{
  return sub_10000465C( &qword_1000CD9A8,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9444);
}

uint64_t sub_1000054F4()
{
  return sub_10000465C( &qword_1000CD9B0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9414);
}

uint64_t sub_100005520()
{
  return sub_10000465C( &qword_1000CD9B8,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A93D4);
}

uint64_t sub_10000554C()
{
  return sub_10000465C( &qword_1000CD9C0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000A9524);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_10000558C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000055D0()
{
  return sub_10000465C( &qword_1000CD9C8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000A94EC);
}

unint64_t sub_100005600()
{
  unint64_t result = qword_1000CD9D0;
  if (!qword_1000CD9D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000CD9D0);
  }

  return result;
}

uint64_t sub_100005644()
{
  return sub_10000465C( &qword_1000CD9D8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000A955C);
}

uint64_t sub_100005670()
{
  return sub_10000465C( (unint64_t *)&qword_1000CD9E0,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
}

uint64_t sub_10000569C()
{
  return sub_10000465C( &qword_1000CD9E8,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1000A91E8);
}

uint64_t sub_1000056D8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = 0LL;

  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t _s24AuthenticationControllerCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC44com_apple_NeighborhoodActivityConduitService20CompanionLinkManager24AuthenticationController);
}

uint64_t sub_100005738(uint64_t a1)
{
  return sub_100005760(a1, &TUCallCenterDidStartCaptioningNotification, &qword_1000CDB98);
}

uint64_t sub_10000574C(uint64_t a1)
{
  return sub_100005760(a1, &TUCallCenterDidStopCaptioningNotification, &qword_1000CDBA0);
}

uint64_t sub_100005760(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a3 = v6;
  return result;
}

uint64_t sub_1000057A4()
{
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  if (qword_1000CD610 != -1) {
    swift_once(&qword_1000CD610, sub_100005738);
  }
  CFNotificationCenterRemoveObserver(v1, v0, (CFNotificationName)qword_1000CDB98, 0LL);

  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  if (qword_1000CD618 != -1) {
    swift_once(&qword_1000CD618, sub_10000574C);
  }
  CFNotificationCenterRemoveObserver(v2, v0, (CFNotificationName)qword_1000CDBA0, 0LL);

  sub_100006120((uint64_t)v0 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService27ConversationUIStateObserver_uiState);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100005884()
{
  return type metadata accessor for ConversationUIStateObserver(0LL);
}

uint64_t type metadata accessor for ConversationUIStateObserver(uint64_t a1)
{
  return sub_100005920(a1, qword_1000CDBD0, (uint64_t)&nominal type descriptor for ConversationUIStateObserver);
}

uint64_t sub_1000058A0(uint64_t a1)
{
  uint64_t result = type metadata accessor for ConversationUIState(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for ConversationUIState(uint64_t a1)
{
  return sub_100005920(a1, qword_1000CDCD0, (uint64_t)&nominal type descriptor for ConversationUIState);
}

uint64_t sub_100005920(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void *sub_100005954(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_1000059DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_100005A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100005A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100005AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100005B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100005B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100005B8C);
}

uint64_t sub_100005B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2) {
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100005C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100005C24);
}

uint64_t sub_100005C24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_100005C9C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000A9678;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_100005D0C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a1;
  id v9 = a3;
  id v10 = a5;
  sub_100005F24(a2, a3);
}

const void *sub_100005D78(void *a1)
{
  uint64_t v3 = type metadata accessor for ConversationUIState(0LL);
  __chkstk_darwin(v3);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v5[*(int *)(v3 + 20)] = 0;
  sub_100005EE0( (uint64_t)v5,  (uint64_t)v1 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService27ConversationUIStateObserver_uiState);
  uint64_t v7 = CFNotificationCenterGetDarwinNotifyCenter();
  if (qword_1000CD610 != -1) {
    swift_once(&qword_1000CD610, sub_100005738);
  }
  CFNotificationCenterAddObserver( v7,  v1,  (CFNotificationCallback)sub_100005D0C,  (CFStringRef)qword_1000CDB98,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);

  id v8 = CFNotificationCenterGetDarwinNotifyCenter();
  if (qword_1000CD618 != -1) {
    swift_once(&qword_1000CD618, sub_10000574C);
  }
  CFNotificationCenterAddObserver( v8,  v1,  (CFNotificationCallback)sub_100005D0C,  (CFStringRef)qword_1000CDBA0,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);

  return v1;
}

uint64_t sub_100005EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationUIState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005F24(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = type metadata accessor for ConversationUIStateObserver(0LL);
    uint64_t v5 = swift_unknownObjectRetain(v3);
    uint64_t v6 = swift_dynamicCastClass(v5, v4);
    if (!v6) {
      return swift_unknownObjectRelease(v3);
    }
    uint64_t v7 = v6;
    uint64_t v8 = qword_1000CD610;
    id v9 = a2;
    if (v8 == -1)
    {
      if (a2) {
        goto LABEL_5;
      }
    }

    else
    {
      swift_once(&qword_1000CD610, sub_100005738);
      if (a2)
      {
LABEL_5:
        uint64_t v10 = (void *)qword_1000CDB98;
        type metadata accessor for CFString(0LL);
        uint64_t v12 = v11;
        unint64_t v13 = sub_1000060D8();
        id v14 = v10;
        id v15 = v9;
        id v16 = v14;
        LOBYTE(v12) = static _CFObject.== infix(_:_:)(v16, v15, v12, v13);

        if ((v12 & 1) != 0)
        {

          char v17 = 1;
LABEL_13:
          uint64_t v25 = v7 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService27ConversationUIStateObserver_uiState;
          *(_BYTE *)(v25 + *(int *)(type metadata accessor for ConversationUIState(0LL) + 20)) = v17;
          return swift_unknownObjectRelease(v3);
        }
      }
    }

    if (qword_1000CD618 == -1)
    {
      if (!a2) {
        return swift_unknownObjectRelease(v3);
      }
    }

    else
    {
      swift_once(&qword_1000CD618, sub_10000574C);
      if (!a2) {
        return swift_unknownObjectRelease(v3);
      }
    }

    uint64_t v18 = (void *)qword_1000CDBA0;
    type metadata accessor for CFString(0LL);
    uint64_t v20 = v19;
    unint64_t v21 = sub_1000060D8();
    id v22 = v18;
    id v23 = v9;
    id v24 = v22;
    LOBYTE(v20) = static _CFObject.== infix(_:_:)(v24, v23, v20, v21);

    if ((v20 & 1) != 0)
    {
      char v17 = 0;
      goto LABEL_13;
    }

    return swift_unknownObjectRelease(v3);
  }

  return result;
}

unint64_t sub_1000060D8()
{
  unint64_t result = qword_1000CDD08;
  if (!qword_1000CDD08)
  {
    type metadata accessor for CFString(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000A9584, v1);
    atomic_store(result, (unint64_t *)&qword_1000CDD08);
  }

  return result;
}

uint64_t sub_100006120(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationUIState(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000615C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  LOBYTE(a3) = sub_10008F058(v9, a2, a3);
  swift_endAccess(v8);
  uint64_t result = swift_bridgeObjectRelease(v9[1]);
  *a4 = (a3 & 1) == 0;
  return result;
}

unint64_t sub_1000061F4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000360C(&qword_1000CDE18);
  uint64_t inited = swift_initStackObject(v4, v11);
  *(_OWORD *)(inited + 16) = xmmword_1000A96A0;
  *(void *)(inited + 32) = 0x646975476E656573LL;
  *(void *)(inited + 40) = 0xE900000000000073LL;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = swift_bridgeObjectRetain(v6);
  uint64_t v8 = sub_10000B130(v7);
  swift_bridgeObjectRelease(v6);
  *(void *)(inited + 72) = sub_10000360C((uint64_t *)&unk_1000CF940);
  *(void *)(inited + 48) = v8;
  unint64_t result = sub_100003808(inited);
  *a2 = result;
  return result;
}

uint64_t sub_1000062C4()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for ProxyMessageDeduplicator()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService24ProxyMessageDeduplicator);
}

char *sub_10000631C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  v39 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000360C((uint64_t *)&unk_1000CE420);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = &v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantData];
  *unint64_t v13 = xmmword_1000A96B0;
  id v14 = &v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_clientContextData];
  *(_OWORD *)&v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_clientContextData] = xmmword_1000A96B0;
  uint64_t v44 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_members;
  *(void *)&v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_members] = 0LL;
  v42 = v13;
  uint64_t v43 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantIDs;
  *(void *)&v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantIDs] = 0LL;
  v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_couldBroadcastLocalData] = 0;
  id v15 = v2;
  uint64_t v16 = NCProtoIDSProxyMessage.GroupUpdate.groupUuid.getter();
  uint64_t v18 = v17;
  UUID.init(uuidString:)(v16);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
  {
    v38[1] = v14;
    v38[4] = v2;
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v26 = NCProtoIDSProxyMessage.GroupUpdate.updateType.getter(v25);
    uint64_t v27 = NCProtoIDSProxyMessage.GroupUpdate.updateSubtype.getter();
    *((_BYTE *)v15
    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_isInitiator) = NCProtoIDSProxyMessage.GroupUpdate.isInitiator.getter() & 1;
    v38[2] = v12;
    v38[3] = v10;
    uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
    v38[5] = v9;
    uint64_t v29 = v28( (char *)v15 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_groupUUID,  v12,  v9);
    *(void *)((char *)v15
              + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantIdentifier) = NCProtoIDSProxyMessage.GroupUpdate.participantID.getter(v29);
    uint64_t v30 = NCProtoIDSProxyMessage.GroupUpdate.participantDestinationID.getter();
    v31 = (void *)((char *)v15
                   + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantDestinationID);
    uint64_t *v31 = v30;
    v31[1] = v32;
    *(void *)((char *)v15
              + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantUpdateType) = v26;
    *(void *)((char *)v15
              + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantUpdateSubtype) = v27;
    *((_BYTE *)v15
    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_fromServer) = NCProtoIDSProxyMessage.GroupUpdate.fromServer.getter() & 1;
    uint64_t v33 = NCProtoIDSProxyMessage.GroupUpdate.serverDate.getter();
    v34 = v39;
    Date.init(timeIntervalSinceReferenceDate:)(v33);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))( (uint64_t)v15 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_serverDate,  v34,  v41);
    NCProtoIDSProxyMessage.GroupUpdate.participantData.getter(v35);
    __asm { BR              X10 }
  }

  sub_10000BFC8((uint64_t)v8, (uint64_t *)&unk_1000CE420);
  unint64_t v19 = sub_10000C004();
  uint64_t v20 = swift_allocError(&type metadata for ProxiedGroupSessionParticipantUpdate.Error, v19, 0LL, 0LL);
  void *v21 = 0x49555570756F7267LL;
  v21[1] = 0xE900000000000044LL;
  swift_willThrow(v20);
  uint64_t v22 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(a1, v22);
  sub_10000C048(*(void *)v42, *((void *)v42 + 1));
  sub_10000C048(*(void *)v14, *((void *)v14 + 1));
  swift_bridgeObjectRelease(*(void *)&v2[v44]);
  uint64_t v23 = *(void *)&v2[v43];

  swift_bridgeObjectRelease(v23);
  uint64_t v24 = type metadata accessor for ProxiedGroupSessionParticipantUpdate(0LL);
  swift_deallocPartialClassInstance( v15,  v24,  *(unsigned int *)((swift_isaMask & *v15) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v15) + 0x34LL));
  return v12;
}

void *sub_1000068D0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    sub_10009C418(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10009C418(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10009C418(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      sub_100004E20(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_100006A48()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v41[0] = 0LL;
  v41[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(256LL);
  v5._countAndFlagsBits = 0xD000000000000031LL;
  v5._object = (void *)0x80000001000A3870LL;
  String.append(_:)(v5);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_isInitiator))
    uint64_t v6 = 1702195828LL;
  else {
    uint64_t v6 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_isInitiator))
    unint64_t v7 = 0xE400000000000000LL;
  else {
    unint64_t v7 = 0xE500000000000000LL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x80000001000A38B0LL;
  v9._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))( v4,  v0 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_groupUUID,  v1);
  uint64_t v10 = sub_10000465C( &qword_1000CE780,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v10);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v13._object = (void *)0x80000001000A38D0LL;
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v13);
  uint64_t v40 = *(void *)(v0
                  + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantIdentifier);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  id v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._object = (void *)0x80000001000A38F0LL;
  v16._countAndFlagsBits = 0xD000000000000020LL;
  String.append(_:)(v16);
  uint64_t v17 = *(void *)(v0
                  + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantDestinationID);
  uint64_t v18 = *(void **)(v0
                 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantDestinationID
                 + 8);
  swift_bridgeObjectRetain(v18);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._object = (void *)0x80000001000A3920LL;
  v20._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v20);
  uint64_t v40 = *(void *)(v0
                  + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantUpdateType);
  type metadata accessor for IDSGroupSessionMessageParticipantUpdateType(0LL);
  _print_unlocked<A, B>(_:_:)( &v40,  v41,  v21,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v22._object = (void *)0x80000001000A3940LL;
  v22._countAndFlagsBits = 0xD000000000000020LL;
  String.append(_:)(v22);
  uint64_t v40 = *(void *)(v0
                  + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_participantUpdateSubtype);
  type metadata accessor for IDSGroupSessionMessageParticipantUpdateSubtype(0LL);
  _print_unlocked<A, B>(_:_:)( &v40,  v41,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v24._object = (void *)0x80000001000A3970LL;
  v24._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v24);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_fromServer))
    uint64_t v25 = 1702195828LL;
  else {
    uint64_t v25 = 0x65736C6166LL;
  }
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_fromServer))
    unint64_t v26 = 0xE400000000000000LL;
  else {
    unint64_t v26 = 0xE500000000000000LL;
  }
  unint64_t v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease(v26);
  v28._countAndFlagsBits = 0x656D202020200A2CLL;
  v28._object = (void *)0xEF203A737265626DLL;
  String.append(_:)(v28);
  uint64_t v29 = *(void *)(v0
                  + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_members);
  if (v29)
  {
    uint64_t v40 = *(void *)(v0
                    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService36ProxiedGroupSessionParticipantUpdate_members);
    swift_bridgeObjectRetain(v29);
    uint64_t v30 = sub_10000360C(&qword_1000CDEB0);
    uint64_t v31 = String.init<A>(reflecting:)(&v40, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 0xD000000000000010LL;
  v35._object = (void *)0x80000001000A3990LL;
  String.append(_:)(v35);
  v36 = (objc_class *)type metadata accessor for CSDMessagingConversationParticipantDidJoinContext();
  swift_deallocPartialClassInstance(objc_allocWithZone(v36), v36, 8LL, 7LL);
  v37._countAndFlagsBits = 0x3E6C696E3CLL;
  v37._object = (void *)0xE500000000000000LL;
  String.append(_:)(v37);
  return v41[0];
}

id sub_100006E58()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProxiedGroupSessionParticipantUpdate(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100006F50()
{
  return type metadata accessor for ProxiedGroupSessionParticipantUpdate(0LL);
}

uint64_t type metadata accessor for ProxiedGroupSessionParticipantUpdate(uint64_t a1)
{
  uint64_t result = qword_1000CDE08;
  if (!qword_1000CDE08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProxiedGroupSessionParticipantUpdate);
  }
  return result;
}

uint64_t sub_100006F94(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = &unk_1000A9758;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = &unk_1000A9770;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[6] = *(void *)(result - 8) + 64LL;
      v5[7] = &unk_1000A9788;
      v5[8] = &unk_1000A9788;
      void v5[9] = &unk_1000A97A0;
      v5[10] = &unk_1000A97A0;
      v5[11] = &unk_1000A9770;
      v5[12] = &unk_1000A9770;
      return swift_updateClassMetadata2(a1, 256LL, 13LL, v5, a1 + 80);
    }
  }

  return result;
}

uint64_t sub_100007058()
{
  uint64_t v0 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0LL);
  uint64_t v30 = *(void *)(v0 - 8);
  uint64_t v31 = v0;
  __chkstk_darwin(v0);
  uint64_t v29 = (void **)((char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v2 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0LL);
  uint64_t v27 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  __chkstk_darwin(v2);
  unint64_t v26 = (void **)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C(&qword_1000CDE30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NCProtoIDSProxyMessage.OneOf_Message(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v25 - v17;
  NCProtoIDSProxyMessage.message.getter(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_10000BFC8((uint64_t)v10, &qword_1000CDE30);
    id v19 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    return swift_willThrow(v19);
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if (v21 == enum case for NCProtoIDSProxyMessage.OneOf_Message.rawData(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
    sub_1000073A4((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    if (v21 == enum case for NCProtoIDSProxyMessage.OneOf_Message.groupUpdate(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
      uint64_t v23 = v26;
      uint64_t v22 = v27;
      uint64_t v24 = v28;
      (*(void (**)(void **, char *, uint64_t))(v27 + 32))(v26, v15, v28);
      sub_100007DDC(v23);
    }

    else
    {
      if (v21 != enum case for NCProtoIDSProxyMessage.OneOf_Message.resource(_:))
      {
        uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v11, v11);
        __break(1u);
        return result;
      }

      (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
      uint64_t v23 = v29;
      uint64_t v22 = v30;
      uint64_t v24 = v31;
      (*(void (**)(void **, char *, uint64_t))(v30 + 32))(v29, v15, v31);
      sub_100008480((uint64_t)v23);
    }

    (*(void (**)(void **, uint64_t))(v22 + 8))(v23, v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
}

void sub_1000073A4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v117 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v116 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v114 = *(void *)(v7 - 8);
  uint64_t v115 = v7;
  __chkstk_darwin(v7);
  v113 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (char *)type metadata accessor for NCProtoIDSProxyMessage.RawData(0LL);
  uint64_t v118 = *((void *)v9 - 1);
  v119 = v9;
  uint64_t v10 = *(void *)(v118 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  v112 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v99 - v12;
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  __chkstk_darwin(v16);
  uint64_t v19 = *(void *)&v3[OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator];
  if (v19)
  {
    uint64_t v110 = v18;
    v111 = (char *)&v99 - v17;
    uint64_t v108 = v5;
    uint64_t v20 = swift_retain(v19);
    uint64_t v21 = NCProtoIDSProxyMessage.RawData.context.getter(v20);
    id v22 = sub_10000B9D8(v21);
    if (v2)
    {
      swift_release(v19);
      swift_bridgeObjectRelease(v21);
      return;
    }

    uint64_t v105 = a1;
    uint64_t v106 = v14;
    uint64_t v107 = v15;
    uint64_t v109 = v19;
    uint64_t v27 = 0LL;
    uint64_t v28 = v22;
    swift_bridgeObjectRelease(v21);
    uint64_t v29 = v28;
    id v30 = [v28 storageGuid];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v34 = v33;

      __chkstk_darwin(v35);
      *(&v99 - 4) = v36;
      *(&v99 - 3) = v32;
      *(&v99 - 2) = v34;
      Lock.withLock<A>(_:)(aBlock, sub_10000BD10, &v99 - 6, &type metadata for Bool);
      swift_bridgeObjectRelease(v34);
      if ((aBlock[0] & 1) == 0)
      {
        Strong = (void *)swift_unknownObjectWeakLoadStrong( &v3[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProviderDelegate],  v37);
        uint64_t v54 = v106;
        uint64_t v53 = v107;
        if (!Strong)
        {
          id v78 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
          swift_willThrow(v78);
          swift_release(v109);

          return;
        }

        v55 = Strong;
        v103 = (char *)[Strong conversationManager];
        swift_unknownObjectRelease(v55);
        if (qword_1000CD6A8 != -1) {
          swift_once(&qword_1000CD6A8, sub_100088E90);
        }
        uint64_t v104 = 0LL;
        uint64_t v56 = sub_10000ADF4(v54, (uint64_t)qword_1000D3668);
        uint64_t v57 = v110;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v110, v56, v54);
        uint64_t v58 = v54;
        uint64_t v59 = v118;
        v60 = v119;
        uint64_t v61 = v105;
        v102 = *(void (**)(char *, uint64_t, char *))(v118 + 16);
        v102(v13, v105, v119);
        v62 = v29;
        v63 = (os_log_s *)Logger.logObject.getter(v62);
        int v101 = static os_log_type_t.info.getter();
        BOOL v64 = os_log_type_enabled(v63, (os_log_type_t)v101);
        v111 = v62;
        if (v64)
        {
          os_log_t v100 = v63;
          uint64_t v65 = swift_slowAlloc(32LL, -1LL);
          uint64_t v66 = swift_slowAlloc(64LL, -1LL);
          aBlock[0] = v66;
          *(_DWORD *)uint64_t v65 = 136315651;
          uint64_t v67 = NCProtoIDSProxyMessage.RawData.fromID.getter();
          uint64_t v68 = v59;
          unint64_t v70 = v69;
          uint64_t v122 = sub_10009BE3C(v67, v69, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 4, v65 + 12);
          swift_bridgeObjectRelease(v70);
          v71 = *(void (**)(char *, char *))(v68 + 8);
          uint64_t v27 = v111;
          v71(v13, v60);
          *(_WORD *)(v65 + 12) = 2160;
          uint64_t v122 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 14, v65 + 22);
          *(_WORD *)(v65 + 22) = 2081;
          id v72 = [v27 storageGuid];
          if (!v72)
          {
LABEL_28:

            __break(1u);
            return;
          }

          v73 = v72;
          uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
          unint64_t v76 = v75;

          uint64_t v122 = sub_10009BE3C(v74, v76, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v65 + 24, v65 + 32);

          swift_bridgeObjectRelease(v76);
          os_log_t v77 = v100;
          _os_log_impl( (void *)&_mh_execute_header,  v100,  (os_log_type_t)v101,  "Incoming proxied IDS message, fromID %s, guid %{private,mask.hash}s",  (uint8_t *)v65,  0x20u);
          swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1LL, -1LL);
          swift_slowDealloc(v65, -1LL, -1LL);

          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v110, v106);
          uint64_t v61 = v105;
          uint64_t v59 = v118;
          v60 = v119;
        }

        else
        {
          (*(void (**)(char *, char *))(v59 + 8))(v13, v60);

          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v57, v58);
        }

        v79 = v112;
        v80 = v103;
        v81 = *(void **)&v103[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22CSDConversationManager_queue];
        v102(v112, v61, v60);
        uint64_t v82 = *(unsigned __int8 *)(v59 + 80);
        uint64_t v83 = (v82 + 24) & ~v82;
        uint64_t v84 = v82 | 7;
        uint64_t v85 = v10 + v83 + 7;
        uint64_t v86 = v59;
        unint64_t v87 = v85 & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v88 = swift_allocObject(&unk_1000C26C0, (v85 & 0xFFFFFFFFFFFFFFF8LL) + 8, v84);
        *(void *)(v88 + 16) = v80;
        (*(void (**)(uint64_t, char *, char *))(v86 + 32))(v88 + v83, v79, v60);
        v89 = v111;
        *(void *)(v88 + v87) = v111;
        aBlock[4] = (uint64_t)sub_10000BDBC;
        uint64_t v121 = v88;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)sub_10000ABC8;
        aBlock[3] = (uint64_t)&unk_1000C26D8;
        v90 = _Block_copy(aBlock);
        v119 = v89;
        id v91 = v81;
        id v92 = v80;
        v93 = v113;
        static DispatchQoS.unspecified.getter(v92);
        uint64_t v122 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v94 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v95 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
        uint64_t v96 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
        v97 = v116;
        uint64_t v98 = v108;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v122, v95, v96, v108, v94);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v93, v97, v90);
        swift_release(v109);
        _Block_release(v90);

        (*(void (**)(char *, uint64_t))(v117 + 8))(v97, v98);
        (*(void (**)(char *, uint64_t))(v114 + 8))(v93, v115);
        swift_release(v121);
        return;
      }

      uint64_t v38 = v106;
      uint64_t v39 = v107;
      if (qword_1000CD6A8 != -1) {
        swift_once(&qword_1000CD6A8, sub_100088E90);
      }
      uint64_t v40 = sub_10000ADF4(v38, (uint64_t)qword_1000D3668);
      uint64_t v41 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v111, v40, v38);
      uint64_t v3 = v29;
      v42 = (char *)Logger.logObject.getter(v3);
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      v119 = v42;
      if (!os_log_type_enabled((os_log_t)v42, v43))
      {

        swift_release(v109);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
        return;
      }

      uint64_t v104 = 0LL;
      uint64_t v44 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v45;
      *(_DWORD *)uint64_t v44 = 141558275;
      uint64_t v122 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v44 + 4, v44 + 12);
      *(_WORD *)(v44 + 12) = 2081;
      id v46 = [v3 storageGuid];
      if (v46)
      {
        v47 = v46;
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        unint64_t v50 = v49;

        uint64_t v122 = sub_10009BE3C(v48, v50, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v44 + 14, v44 + 22);

        swift_bridgeObjectRelease(v50);
        v51 = v119;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v119,  v43,  "Already received IDS message with ID %{private,mask.hash}s, not proxying",  (uint8_t *)v44,  0x16u);
        swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);

        swift_release(v109);
        (*(void (**)(char *, uint64_t))(v107 + 8))(v111, v106);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_28;
  }

  if (qword_1000CD6A8 != -1) {
    swift_once(&qword_1000CD6A8, sub_100088E90);
  }
  uint64_t v23 = sub_10000ADF4(v14, (uint64_t)qword_1000D3668);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "IDS proxy message received with no deduplicator in place, ignoring.",  v26,  2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }
}

uint64_t sub_100007DDC(void **a1)
{
  uint64_t v3 = v1;
  id v72 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v70 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  __chkstk_darwin(v6);
  uint64_t v67 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NCProtoIDSProxyMessage.GroupUpdate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CDE48);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for HandoffInfo(0LL);
  __chkstk_darwin(v15);
  v73 = (uint8_t *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState, v77, 0LL, 0LL);
  sub_100005318(v17, (uint64_t)v14, &qword_1000CDE48);
  uint64_t v18 = type metadata accessor for HandoffState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v14, 1LL, v18) == 1)
  {
    sub_10000BFC8((uint64_t)v14, &qword_1000CDE48);
LABEL_11:
    id v34 = (id)TUMakeNeighborhoodConduitError(1LL, 0LL);
    return swift_willThrow(v34);
  }

  if (swift_getEnumCaseMultiPayload(v14, v18) != 1)
  {
    uint64_t v32 = type metadata accessor for HandoffState;
    uint64_t v33 = (uint64_t)v14;
LABEL_10:
    sub_10000BF5C(v33, v32);
    goto LABEL_11;
  }

  uint64_t v66 = v4;
  uint64_t v19 = v73;
  sub_10000BEA4((uint64_t)v14, (uint64_t)v73);
  id v20 =  [*(id *)(v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager) activeConversations];
  uint64_t v21 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
  unint64_t v22 = sub_10000BEE8();
  uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22);

  __chkstk_darwin(v24);
  *(&v65 - 2) = v19;
  sub_100009290(sub_10000BF40, (uint64_t)(&v65 - 4), v23);
  char v26 = v25;
  swift_bridgeObjectRelease(v23);
  if ((v26 & 1) == 0)
  {
    uint64_t v32 = type metadata accessor for HandoffInfo;
    uint64_t v33 = (uint64_t)v19;
    goto LABEL_10;
  }

  (*(void (**)(char *, void **, uint64_t))(v9 + 16))(v11, v72, v8);
  id v27 = objc_allocWithZone((Class)type metadata accessor for ProxiedGroupSessionParticipantUpdate(0LL));
  uint64_t v28 = sub_10000631C((uint64_t)v11);
  if (v2)
  {
    uint64_t v30 = (uint64_t)v73;
    return sub_10000BF5C(v30, type metadata accessor for HandoffInfo);
  }

  uint64_t v35 = v28;
  Strong = (void *)swift_unknownObjectWeakLoadStrong( v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProviderDelegate,  v29);
  uint64_t v37 = (uint64_t)v73;
  if (!Strong)
  {
    id v52 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_willThrow(v52);

    uint64_t v30 = v37;
    return sub_10000BF5C(v30, type metadata accessor for HandoffInfo);
  }

  uint64_t v38 = Strong;
  uint64_t v39 = (void **)[Strong conversationManager];
  swift_unknownObjectRelease(v38);
  if (qword_1000CD6A8 != -1) {
    swift_once(&qword_1000CD6A8, sub_100088E90);
  }
  uint64_t v40 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v40, (uint64_t)qword_1000D3668);
  uint64_t v41 = v35;
  v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc(12LL, -1LL);
    id v72 = v39;
    uint64_t v45 = (uint8_t *)v44;
    id v46 = (void ***)swift_slowAlloc(8LL, -1LL);
    uint64_t v65 = v45;
    *(_DWORD *)uint64_t v45 = 138412290;
    v47 = v45 + 12;
    uint64_t v48 = v45 + 4;
    aBlock = v41;
    unint64_t v49 = v41;
    uint64_t v39 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v48, v47);
    *id v46 = v41;

    unint64_t v50 = v65;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Proxied group update: %@", v65, 0xCu);
    uint64_t v51 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v46, 1LL, v51);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {

    v42 = (os_log_s *)v41;
  }

  uint64_t v53 = *(void **)((char *)v39
                 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22CSDConversationManager_queue);
  uint64_t v54 = swift_allocObject(&unk_1000C2710, 32LL, 7LL);
  *(void *)(v54 + 16) = v39;
  *(void *)(v54 + 24) = v41;
  v75[3] = nullsub_1;
  uint64_t v76 = v54;
  aBlock = _NSConcreteStackBlock;
  v75[0] = 1107296256LL;
  v75[1] = sub_10000ABC8;
  v75[2] = &unk_1000C2728;
  v55 = _Block_copy(&aBlock);
  id v72 = v41;
  id v56 = v53;
  uint64_t v57 = v39;
  uint64_t v58 = v67;
  static DispatchQoS.unspecified.getter(v57);
  id v78 = _swiftEmptyArrayStorage;
  uint64_t v59 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v60 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v61 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
  v62 = v70;
  uint64_t v63 = v60;
  uint64_t v64 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v63, v61, v66, v59);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v58, v62, v55);
  _Block_release(v55);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v62, v64);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v58, v69);
  sub_10000BF5C((uint64_t)v73, type metadata accessor for HandoffInfo);
  return swift_release(v76);
}

void sub_100008480(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v138 = *(void *)(v9 - 8);
  uint64_t v139 = v9;
  __chkstk_darwin(v9);
  v137 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for URL(0LL);
  uint64_t v136 = *(void *)(v143 - 8);
  uint64_t v11 = *(void *)(v136 + 64);
  uint64_t v12 = __chkstk_darwin(v143);
  v135 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  v140 = (char *)&v119 - v14;
  __chkstk_darwin(v13);
  v142 = (char *)&v119 - v15;
  uint64_t v16 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0LL);
  uint64_t v144 = *(void *)(v16 - 8);
  uint64_t v145 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  v141 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = v18;
  __chkstk_darwin(v17);
  id v20 = (char *)&v119 - v19;
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v27 = *(void *)(v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator);
  if (v27)
  {
    v131 = (char *)&v119 - v24;
    id v130 = v26;
    uint64_t v132 = v25;
    unint64_t v133 = v23;
    v128 = v8;
    uint64_t v28 = swift_retain(v27);
    uint64_t v29 = NCProtoIDSProxyMessage.Resource.context.getter(v28);
    id v30 = sub_10000B9D8(v29);
    if (v2)
    {
      swift_release(v27);
      swift_bridgeObjectRelease(v29);
      return;
    }

    uint64_t v124 = v6;
    v125 = v5;
    uint64_t v129 = v27;
    id v35 = v30;
    swift_bridgeObjectRelease(v29);
    id v127 = v35;
    id v36 = [v35 storageGuid];
    if (!v36)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:

      __break(1u);
      goto LABEL_37;
    }

    uint64_t v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v40 = v39;

    __chkstk_darwin(v41);
    *(&v119 - 4) = v42;
    *(&v119 - 3) = v38;
    *(&v119 - 2) = v40;
    Lock.withLock<A>(_:)(aBlock, sub_10000C464, &v119 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v40);
    if ((aBlock[0] & 1) != 0)
    {
      if (qword_1000CD6A8 != -1) {
        swift_once(&qword_1000CD6A8, sub_100088E90);
      }
      unint64_t v44 = v133;
      uint64_t v45 = sub_10000ADF4(v133, (uint64_t)qword_1000D3668);
      v47 = v131;
      uint64_t v46 = v132;
      (*(void (**)(char *, uint64_t, unint64_t))(v132 + 16))(v131, v45, v44);
      id v35 = v127;
      uint64_t v48 = (void *)Logger.logObject.getter(v35);
      uint64_t v5 = (void *)static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v48, (os_log_type_t)v5))
      {

        swift_release(v129);
        (*(void (**)(char *, unint64_t))(v46 + 8))(v47, v44);
        return;
      }

      LODWORD(v145) = (_DWORD)v5;
      uint64_t v126 = 0LL;
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v50;
      *(_DWORD *)uint64_t v49 = 141558275;
      uint64_t v148 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 12) = 2081;
      id v51 = [v35 storageGuid];
      if (v51)
      {
        id v52 = v51;
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        unint64_t v55 = v54;

        uint64_t v148 = sub_10009BE3C(v53, v55, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v49 + 14, v49 + 22);

        swift_bridgeObjectRelease(v55);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v48,  (os_log_type_t)v145,  "Already received IDS resource with ID %{private,mask.hash}s, not proxying",  (uint8_t *)v49,  0x16u);
        swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1LL, -1LL);
        swift_slowDealloc(v49, -1LL, -1LL);

        swift_release(v129);
        (*(void (**)(char *, unint64_t))(v132 + 8))(v131, v133);
        return;
      }

      goto LABEL_36;
    }

    Strong = (void *)swift_unknownObjectWeakLoadStrong( v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProviderDelegate,  v43);
    if (!Strong)
    {
      id v78 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
      swift_willThrow(v78);
      swift_release(v129);

      return;
    }

    uint64_t v57 = Strong;
    v131 = (char *)[Strong conversationManager];
    swift_unknownObjectRelease(v57);
    if (qword_1000CD6A8 != -1) {
      swift_once(&qword_1000CD6A8, sub_100088E90);
    }
    uint64_t v126 = 0LL;
    unint64_t v58 = v133;
    uint64_t v59 = sub_10000ADF4(v133, (uint64_t)qword_1000D3668);
    uint64_t v60 = v132;
    id v61 = v130;
    (*(void (**)(id, uint64_t, unint64_t))(v132 + 16))(v130, v59, v58);
    uint64_t v62 = v144;
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v144 + 16);
    uint64_t v123 = a1;
    uint64_t v64 = v145;
    uint64_t v122 = v63;
    v63(v20, a1, v145);
    uint64_t v5 = v127;
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v5);
    LODWORD(v127) = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v65, (os_log_type_t)v127))
    {
      os_log_t v121 = v65;
      uint64_t v66 = v62;
      uint64_t v67 = swift_slowAlloc(32LL, -1LL);
      uint64_t v120 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v120;
      *(_DWORD *)uint64_t v67 = 136315651;
      uint64_t v68 = NCProtoIDSProxyMessage.Resource.fromID.getter();
      unint64_t v70 = v69;
      uint64_t v148 = sub_10009BE3C(v68, v69, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease(v70);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v20, v64);
      *(_WORD *)(v67 + 12) = 2160;
      uint64_t v148 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v67 + 14, v67 + 22);
      *(_WORD *)(v67 + 22) = 2081;
      id v71 = [v5 storageGuid];
      if (!v71)
      {
LABEL_37:

        __break(1u);
        return;
      }

      id v72 = v71;
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      unint64_t v75 = v74;

      uint64_t v148 = sub_10009BE3C(v73, v75, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v67 + 24, v67 + 32);

      swift_bridgeObjectRelease(v75);
      os_log_t v76 = v121;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  (os_log_type_t)v127,  "Incoming proxied IDS resource, fromID %s, guid %{private,mask.hash}s",  (uint8_t *)v67,  0x20u);
      uint64_t v77 = v120;
      swift_arrayDestroy(v120, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);

      (*(void (**)(id, unint64_t))(v132 + 8))(v130, v133);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v20, v64);

      (*(void (**)(id, unint64_t))(v60 + 8))(v61, v58);
    }

    sub_1000052E0(0LL, &qword_1000CDE68, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v79 = sub_1000052E0(0LL, &qword_1000CDE70, &OBJC_CLASS___NSDictionary_ptr);
    uint64_t v80 = NCProtoIDSProxyMessage.Resource.resourceData.getter();
    unint64_t v82 = v81;
    uint64_t v83 = v126;
    uint64_t v84 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v79, v80, v81, v79);
    if (v83)
    {
      swift_errorRelease(v83);
      sub_10000BE18(v80, v82);
    }

    else
    {
      uint64_t v117 = (void *)v84;
      sub_10000BE18(v80, v82);
      if (v117)
      {
        aBlock[0] = 0LL;
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v117,  aBlock,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

        id v35 = v140;
        if (aBlock[0])
        {
          unint64_t v133 = aBlock[0];
LABEL_29:
          uint64_t v126 = 0LL;
          id v85 = [(id)objc_opt_self(NSFileManager) defaultManager];
          id v86 = [v85 temporaryDirectory];

          static URL._unconditionallyBridgeFromObjectiveC(_:)(v86);
          id v87 = [v5 storageGuid];
          v140 = (char *)v5;
          if (v87)
          {
            uint64_t v88 = v87;
            uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
            uint64_t v91 = v90;

            id v92 = v142;
            URL.appendingPathComponent(_:)(v89, v91);
            swift_bridgeObjectRelease(v91);
            uint64_t v93 = v136;
            uint64_t v132 = *(void *)(v136 + 8);
            id v94 = v35;
            uint64_t v95 = v143;
            ((void (*)(id, uint64_t))v132)(v94, v143);
            id v130 = *(id *)&v131[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22CSDConversationManager_queue];
            uint64_t v96 = v135;
            (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v135, v92, v95);
            v122(v141, v123, v145);
            uint64_t v97 = *(unsigned __int8 *)(v93 + 80);
            uint64_t v98 = (v97 + 24) & ~v97;
            unint64_t v99 = (v11 + v98 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v100 = v144;
            uint64_t v101 = *(unsigned __int8 *)(v144 + 80);
            uint64_t v102 = (v101 + v99 + 8) & ~v101;
            unint64_t v103 = (v134 + v102 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v104 = swift_allocObject(&unk_1000C2760, v103 + 8, v97 | v101 | 7);
            *(void *)(v104 + 16) = v131;
            (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v104 + v98, v96, v95);
            *(void *)(v104 + v99) = v133;
            (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v104 + v102, v141, v145);
            uint64_t v105 = v140;
            *(void *)(v104 + v103) = v140;
            aBlock[4] = (uint64_t)sub_10000C14C;
            uint64_t v147 = v104;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256LL;
            aBlock[2] = (uint64_t)sub_10000ABC8;
            aBlock[3] = (uint64_t)&unk_1000C2778;
            uint64_t v106 = _Block_copy(aBlock);
            id v107 = v105;
            id v108 = v130;
            uint64_t v109 = v131;
            uint64_t v110 = v137;
            static DispatchQoS.unspecified.getter(v109);
            uint64_t v148 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v111 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v112 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
            uint64_t v113 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
            uint64_t v114 = v128;
            uint64_t v115 = v112;
            v116 = v125;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v148, v115, v113, v125, v111);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v110, v114, v106);
            swift_release(v129);
            _Block_release(v106);

            (*(void (**)(char *, void *))(v124 + 8))(v114, v116);
            (*(void (**)(char *, uint64_t))(v138 + 8))(v110, v139);
            ((void (*)(char *, uint64_t))v132)(v142, v143);
            swift_release(v147);
            return;
          }

          goto LABEL_35;
        }

LABEL_28:
        unint64_t v133 = sub_10000393C((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(0LL);
        goto LABEL_29;
      }
    }

    id v35 = v140;
    goto LABEL_28;
  }

  if (qword_1000CD6A8 != -1)
  {
    uint64_t v118 = v23;
    swift_once(&qword_1000CD6A8, sub_100088E90);
    uint64_t v23 = v118;
  }

  uint64_t v31 = sub_10000ADF4(v23, (uint64_t)qword_1000D3668);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v34 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "IDS proxy message received with no deduplicator in place, ignoring.",  v34,  2u);
    swift_slowDealloc(v34, -1LL, -1LL);
  }
}

      swift_release(a3);
      return 0LL;
    }

      char v26 = v28;
      uint64_t v24 = v29;
      swift_release(a2);
      uint64_t v25 = 1LL;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1LL, v26);
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_1000091C4(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [*a1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  uint64_t v9 = type metadata accessor for HandoffInfo(0LL);
  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2 + *(int *)(v9 + 28));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

void sub_100009290(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
    unint64_t v10 = sub_10000BEE8();
    uint64_t v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    uint64_t v5 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v12 = v33[2];
    int64_t v13 = v33[3];
    unint64_t v14 = v33[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v31 = a3 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a3 + 56);
    uint64_t v11 = (void *)swift_bridgeObjectRetain(a3);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v19 = __CocoaSet.Iterator.next()(v11);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v32 = v19;
    uint64_t v21 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    id v22 = v34;
    swift_unknownObjectRelease(v20);
    int64_t v23 = v13;
    uint64_t v24 = v14;
    while (v22)
    {
      id v34 = v22;
      char v28 = a1(&v34);

      if (v4 || (v28 & 1) != 0) {
        break;
      }
      int64_t v13 = v23;
      unint64_t v14 = v24;
      if (v5 < 0) {
        goto LABEL_11;
      }
LABEL_14:
      if (v14)
      {
        uint64_t v24 = (v14 - 1) & v14;
        unint64_t v25 = __clz(__rbit64(v14)) | (v13 << 6);
        int64_t v23 = v13;
      }

      else
      {
        int64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
          __break(1u);
          return;
        }

        if (v23 >= v30) {
          break;
        }
        unint64_t v26 = *(void *)(v31 + 8 * v23);
        if (!v26)
        {
          int64_t v27 = v13 + 2;
          if (v13 + 2 >= v30) {
            break;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26) {
            goto LABEL_25;
          }
          int64_t v27 = v13 + 3;
          if (v13 + 3 >= v30) {
            break;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26) {
            goto LABEL_25;
          }
          int64_t v27 = v13 + 4;
          if (v13 + 4 >= v30) {
            break;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            int64_t v23 = v27;
          }

          else
          {
            int64_t v23 = v13 + 5;
            if (v13 + 5 >= v30) {
              break;
            }
            unint64_t v26 = *(void *)(v31 + 8 * v23);
            if (!v26)
            {
              int64_t v29 = v13 + 6;
              while (v30 != v29)
              {
                unint64_t v26 = *(void *)(v31 + 8 * v29++);
                if (v26)
                {
                  int64_t v23 = v29 - 1;
                  goto LABEL_26;
                }
              }

              break;
            }
          }
        }

LABEL_26:
        uint64_t v24 = (v26 - 1) & v26;
        unint64_t v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }

      id v22 = *(id *)(*(void *)(v5 + 48) + 8 * v25);
    }
  }

  sub_10000B7D8(v5);
}

  uint64_t v6 = (v13 - 1) & v13;
  uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; uint64_t v11 = v10 | (i << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    uint64_t v20 = v19;
    uint64_t v21 = sub_100004CD4(v18, v17);
    id v22 = v21;
    if ((v23 & 1) != 0)
    {
      uint64_t v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease(v8[1]);
      *uint64_t v8 = v18;
      v8[1] = v17;
      uint64_t v9 = v3[7];

      *(void *)(v9 + 8 * v22) = v20;
      if (!v6) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v21;
    uint64_t v24 = (uint64_t *)(v3[6] + 16 * v21);
    *uint64_t v24 = v18;
    v24[1] = v17;
    *(void *)(v3[7] + 8 * v21) = v20;
    unint64_t v25 = v3[2];
    unint64_t v26 = __OFADD__(v25, 1LL);
    int64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v3[2] = v27;
    if (!v6) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

          unint64_t v26 = (v26 + 1) & v27;
          if (((*(void *)(v20 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0)
          {
            swift_release(v19);
            uint64_t v7 = v35;
            uint64_t v8 = v34;
            goto LABEL_40;
          }
        }
      }

      swift_release(v19);
LABEL_40:
      uint64_t result = swift_bridgeObjectRelease(v20);
      int64_t v13 = v40;
      uint64_t v11 = v37;
    }
  }

  uint64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }

  if (v16 >= v36) {
    goto LABEL_43;
  }
  uint64_t v17 = *(void *)(v8 + 8 * v16);
  ++v13;
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 1;
  if (v16 + 1 >= v36) {
    goto LABEL_43;
  }
  uint64_t v17 = *(void *)(v8 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 2;
  if (v16 + 2 >= v36) {
    goto LABEL_43;
  }
  uint64_t v17 = *(void *)(v8 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 3;
  if (v16 + 3 >= v36) {
    goto LABEL_43;
  }
  uint64_t v17 = *(void *)(v8 + 8 * v13);
  if (v17)
  {
LABEL_21:
    uint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_22;
  }

  uint64_t v18 = v16 + 4;
  if (v18 < v36)
  {
    uint64_t v17 = *(void *)(v8 + 8 * v18);
    int64_t v13 = v18;
    if (!v17)
    {
      while (1)
      {
        int64_t v13 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          goto LABEL_45;
        }
        if (v13 >= v36) {
          goto LABEL_43;
        }
        uint64_t v17 = *(void *)(v8 + 8 * v13);
        ++v18;
        if (v17) {
          goto LABEL_21;
        }
      }
    }

    goto LABEL_21;
  }

  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      id v22 = *v21;
      int64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v27 = 0;
        char v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          int64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          int64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      id v22 = *v21;
      int64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      Data.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int64_t v27 = 0;
        char v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          int64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          int64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      id v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      int64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        int64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          char v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          int64_t v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v4);
  *uint64_t v3 = v7;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      id v22 = result & ~v21;
      int64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            int64_t v23 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    unint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    id v22 = *v21;
    int64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      char v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    unint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    id v22 = *v21;
    int64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    sub_1000109D4(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      char v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    id v22 = *(void *)(v7 + 40);
    int64_t v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    uint64_t result = NSObject._rawHashValue(seed:)(v22);
    uint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      char v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        int64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        int64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
    ++*(void *)(v7 + 16);
  }

  uint64_t v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release_n(v4, 2LL);
    uint64_t v3 = v31;
    goto LABEL_38;
  }

  uint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    uint64_t v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    uint64_t v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    id v22 = result & ~v21;
    int64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          int64_t v23 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

uint64_t sub_1000095A8(uint64_t a1)
{
  uint64_t v2 = sub_10000360C(&qword_1000CDE38);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v69 = (uint64_t)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v73 = (char *)v60 - v5;
  uint64_t v72 = sub_10000360C(&qword_1000CDE40);
  uint64_t v6 = __chkstk_darwin(v72);
  uint64_t v63 = (void *)((char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)v60 - v9;
  __chkstk_darwin(v8);
  uint64_t v68 = (char *)v60 - v11;
  unint64_t v75 = _swiftEmptyDictionarySingleton;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v66 = a1 + 64;
  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1LL << -(char)v13);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v12;
  v60[0] = -1LL << *(_BYTE *)(a1 + 32);
  int64_t v65 = (unint64_t)(63 - v13) >> 6;
  int v64 = enum case for Google_Protobuf_Value.OneOf_Kind.numberValue(_:);
  int v62 = enum case for Google_Protobuf_Value.OneOf_Kind.stringValue(_:);
  int v61 = enum case for Google_Protobuf_Value.OneOf_Kind.BOOLValue(_:);
  uint64_t result = swift_bridgeObjectRetain(a1);
  uint64_t v70 = a1;
  int64_t i = 0LL;
  if (v15) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v20 = i + 1;
  if (!__OFADD__(i, 1LL))
  {
    if (v20 < v65)
    {
      unint64_t v21 = *(void *)(v66 + 8 * v20);
      int64_t v22 = i + 1;
      if (v21) {
        goto LABEL_24;
      }
      int64_t v22 = i + 2;
      if (i + 2 >= v65) {
        goto LABEL_47;
      }
      unint64_t v21 = *(void *)(v66 + 8 * v22);
      if (v21) {
        goto LABEL_24;
      }
      int64_t v22 = i + 3;
      if (i + 3 >= v65) {
        goto LABEL_47;
      }
      unint64_t v21 = *(void *)(v66 + 8 * v22);
      if (v21) {
        goto LABEL_24;
      }
      int64_t v22 = i + 4;
      if (i + 4 >= v65) {
        goto LABEL_47;
      }
      unint64_t v21 = *(void *)(v66 + 8 * v22);
      if (v21)
      {
LABEL_24:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
        for (i = v22; ; unint64_t v19 = v18 | (i << 6))
        {
          uint64_t v24 = *(void *)(v70 + 56);
          unint64_t v25 = (uint64_t *)(*(void *)(v70 + 48) + 16 * v19);
          uint64_t v27 = *v25;
          uint64_t v26 = v25[1];
          uint64_t v28 = type metadata accessor for Google_Protobuf_Value(0LL);
          uint64_t v29 = *(void *)(v28 - 8);
          uint64_t v30 = v24 + *(void *)(v29 + 72) * v19;
          uint64_t v31 = v72;
          uint64_t v32 = v68;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(&v68[*(int *)(v72 + 48)], v30, v28);
          *uint64_t v32 = v27;
          v32[1] = v26;
          sub_10000BE5C((uint64_t)v32, (uint64_t)v10);
          os_log_type_t v33 = &v10[*(int *)(v31 + 48)];
          uint64_t v34 = swift_bridgeObjectRetain(v26);
          uint64_t v35 = (uint64_t)v10;
          uint64_t v17 = (uint64_t)v73;
          Google_Protobuf_Value.kind.getter(v34);
          uint64_t v36 = type metadata accessor for Google_Protobuf_Value.OneOf_Kind(0LL);
          uint64_t v37 = *(void *)(v36 - 8);
          int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v17, 1LL, v36);
          uint64_t v39 = v69;
          if (v38 == 1) {
            goto LABEL_7;
          }
          sub_100005318(v17, v69, &qword_1000CDE38);
          int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 88))(v39, v36);
          if (v40 == v64)
          {
            (*(void (**)(uint64_t, uint64_t))(v37 + 96))(v39, v36);
            isa = Double._bridgeToObjectiveC()().super.super.isa;
            uint64_t v41 = (uint64_t)v73;
            uint64_t v42 = (uint64_t *)v35;
          }

          else
          {
            uint64_t v42 = (uint64_t *)v35;
            if (v40 == v62)
            {
              (*(void (**)(uint64_t, uint64_t))(v37 + 96))(v39, v36);
              uint64_t v43 = *(void *)(v39 + 8);
              isa = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v43);
            }

            else
            {
              if (v40 != v61)
              {
                (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v36);
                uint64_t v17 = (uint64_t)v73;
LABEL_7:
                sub_10000BFC8(v17, &qword_1000CDE38);
                uint64_t result = sub_10000BFC8(v35, &qword_1000CDE40);
                unint64_t v10 = (char *)v35;
                if (!v15) {
                  goto LABEL_9;
                }
                goto LABEL_8;
              }

              (*(void (**)(uint64_t, uint64_t))(v37 + 96))(v39, v36);
              isa = Bool._bridgeToObjectiveC()().super.super.isa;
            }

            uint64_t v41 = (uint64_t)v73;
          }

          sub_10000BFC8(v41, &qword_1000CDE38);
          unint64_t v44 = v63;
          uint64_t v45 = (char *)v63 + *(int *)(v72 + 48);
          uint64_t v46 = *v42;
          uint64_t v47 = v42[1];
          uint64_t *v63 = *v42;
          v44[1] = v47;
          (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v45, v33, v28);
          uint64_t v48 = v75;
          unint64_t v49 = v75[2];
          if (v75[3] <= v49)
          {
            sub_100075F74(v49 + 1, 1LL);
            uint64_t v48 = v75;
          }

          Hasher.init(_seed:)(v74, v48[5]);
          String.hash(into:)(v74, v46, v47);
          uint64_t result = Hasher._finalize()();
          uint64_t v50 = v48 + 8;
          uint64_t v51 = -1LL << *((_BYTE *)v48 + 32);
          unint64_t v52 = result & ~v51;
          unint64_t v53 = v52 >> 6;
          if (((-1LL << v52) & ~v48[(v52 >> 6) + 8]) != 0)
          {
            unint64_t v54 = __clz(__rbit64((-1LL << v52) & ~v48[(v52 >> 6) + 8])) | v52 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v55 = 0;
            unint64_t v56 = (unint64_t)(63 - v51) >> 6;
            do
            {
              if (++v53 == v56 && (v55 & 1) != 0)
              {
                __break(1u);
                goto LABEL_48;
              }

              BOOL v57 = v53 == v56;
              if (v53 == v56) {
                unint64_t v53 = 0LL;
              }
              v55 |= v57;
              uint64_t v58 = v50[v53];
            }

            while (v58 == -1);
            unint64_t v54 = __clz(__rbit64(~v58)) + (v53 << 6);
          }

          *(void *)((char *)v50 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v54;
          uint64_t v59 = (void *)(v48[6] + 16 * v54);
          *uint64_t v59 = v46;
          v59[1] = v47;
          *(void *)(v48[7] + 8 * v54) = isa;
          ++v48[2];
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v45, v28);
          unint64_t v10 = (char *)v35;
          if (!v15) {
            goto LABEL_9;
          }
LABEL_8:
          unint64_t v18 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
        }
      }

      int64_t v23 = i + 5;
      if (i + 5 < v65)
      {
        unint64_t v21 = *(void *)(v66 + 8 * v23);
        if (v21)
        {
          int64_t v22 = i + 5;
          goto LABEL_24;
        }

        while (1)
        {
          int64_t v22 = v23 + 1;
          if (__OFADD__(v23, 1LL)) {
            goto LABEL_49;
          }
          if (v22 >= v65) {
            break;
          }
          unint64_t v21 = *(void *)(v66 + 8 * v22);
          ++v23;
          if (v21) {
            goto LABEL_24;
          }
        }
      }
    }

LABEL_47:
    sub_10000B7D8(v70);
    return (uint64_t)v75;
  }

LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

  swift_retain(a3);
  return sub_100079254(a1, a2, 0LL, a3);
}

            __break(1u);
            return result;
          }

          return 1LL;
        }
      }
    }
  }

uint64_t sub_100009B9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000360C(&qword_1000CFA60);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v31 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v30) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v31 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v30) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v31 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v30) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v31 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v30) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v31 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    unint64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v19 = v18[1];
    int64_t v20 = *(void **)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v41[0] = *v18;
    *((void *)&v41[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    id v21 = v20;
    swift_dynamicCast(&v33, v41, &type metadata for String, &type metadata for AnyHashable, 7LL);
    id v32 = v21;
    uint64_t v22 = sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
    swift_dynamicCast(v36, &v32, v22, (char *)&type metadata for Any + 8, 7LL);
    __int128 v37 = v33;
    __int128 v38 = v34;
    uint64_t v39 = v35;
    sub_100004E20(v36, v40);
    __int128 v33 = v37;
    __int128 v34 = v38;
    uint64_t v35 = v39;
    sub_100004E20(v40, v41);
    sub_100004E20(v41, &v37);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v23 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~v7[v24 >> 6]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1LL << v24) & ~v7[v24 >> 6])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = v7[v25];
      }

      while (v29 == -1);
      unint64_t v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(void *)(v11 + 32) = v35;
    uint64_t result = (uint64_t)sub_100004E20(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_10000B7D8(a1);
    return (uint64_t)v3;
  }

  unint64_t v15 = *(void *)(v31 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v30) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v31 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  uint64_t v79 = [v39 tokenPrefixedURI];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
  unint64_t v81 = v80;

  unint64_t v82 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  uint64_t v83 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v81);
  uint64_t v84 = [v82 initWithPrefixedURI:v83];

  if (!v84)
  {
    uint64_t v122 = v39;
    uint64_t v123 = (os_log_s *)Logger.logObject.getter(v122);
    uint64_t v124 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v123, v124))
    {
      v125 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v126 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v125 = 138412290;
      aBlock = v122;
      id v127 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v125 + 4, v125 + 12);
      *uint64_t v126 = v122;

      uint64_t v19 = v156;
      _os_log_impl( (void *)&_mh_execute_header,  v123,  v124,  "Failed to verify %@ because we couldn't create a URI.",  v125,  0xCu);
      v128 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v126, 1LL, v128);
      swift_slowDealloc(v126, -1LL, -1LL);
      swift_slowDealloc(v125, -1LL, -1LL);
    }

    else
    {

      uint64_t v123 = (os_log_s *)v122;
    }

    v155 = sub_10008729C();
    v116 = swift_allocError(&type metadata for VoucherManagerError, v155, 0LL, 0LL);
    uint64_t v118 = v116;
    uint64_t v119 = 1LL;
LABEL_34:
    *uint64_t v117 = v119;
    uint64_t v120 = (void *)_convertErrorToNSError(_:)(v116);
    ((void (*)(void *, void, void *))v171[2])(v171, 0LL, v120);

    swift_errorRelease(v118);
    goto LABEL_35;
  }

  id v85 = sub_10000360C(&qword_1000D0128);
  id v86 = swift_allocObject(v85, 48LL, 7LL);
  *(_OWORD *)(v86 + 16) = xmmword_1000A96A0;
  id v87 = swift_allocObject(&unk_1000C57E0, 32LL, 7LL);
  *(void *)(v87 + 16) = sub_100017D74;
  *(void *)(v87 + 24) = v19;
  *(void *)(v86 + 32) = sub_1000872E0;
  *(void *)(v86 + 40) = v87;
  swift_beginAccess(v35, &aBlock, 33LL, 0LL);
  uint64_t v88 = *v35;
  uint64_t v89 = (objc_class *)sub_10000360C(&qword_1000D0130);
  uint64_t v90 = (char *)objc_allocWithZone(v89);
  uint64_t v91 = &v90[*(void *)((swift_isaMask & *(void *)v90) + 0x68LL)];
  *(void *)uint64_t v91 = v86;
  v91[8] = 1;
  v179.receiver = v90;
  v179.super_class = v89;
  swift_bridgeObjectRetain_n(v86, 2LL);
  id v92 = v39;
  swift_retain(v19);
  uint64_t v93 = objc_msgSendSuper2(&v179, "init");
  id v94 = (char *)objc_allocWithZone(v37);
  *(void *)&v94[*(void *)((swift_isaMask & *(void *)v94) + 0x68LL)] = v92;
  v178.receiver = v94;
  v178.super_class = v37;
  uint64_t v95 = v92;
  uint64_t v96 = objc_msgSendSuper2(&v178, "init");
  [v88 setObject:v93 forKey:v96];
  swift_endAccess(&aBlock);

  swift_bridgeObjectRelease_n(v86, 2LL);
  uint64_t v97 = swift_allocObject(&unk_1000C5808, 32LL, 7LL);
  uint64_t v98 = swift_allocObject(&unk_1000C5830, 32LL, 7LL);
  *(void *)(v97 + 16) = sub_100087338;
  unint64_t v99 = v170;
  *(void *)(v98 + 16) = v95;
  *(void *)(v98 + 24) = v99;
  *(void *)(v97 + 24) = v98;
  uint64_t v100 = v95;
  uint64_t v101 = v99;
  if (([v164 shouldForceVerificationFailures] & 1) == 0)
  {
    uint64_t v129 = *(void *)&v101[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 32];
    v170 = *(char **)&v101[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 24];
    v171 = sub_10000F2CC(&v101[OBJC_IVAR___CSDVoucherManagerImpl_idsService], (uint64_t)v170);
    id v130 = [v100 encryptedData];
    v165 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v130);
    uint64_t v132 = v131;

    unint64_t v133 = [v100 unsafeData];
    uint64_t v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v133);
    v169 = v84;
    uint64_t v136 = v135;

    v137 = swift_allocObject(&unk_1000C5858, 32LL, 7LL);
    *(void *)(v137 + 16) = v101;
    *(void *)(v137 + 24) = v97;
    uint64_t v138 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, id, uint64_t, uint64_t (*)(char, uint64_t), uint64_t, char *, uint64_t))(v129 + 8);
    uint64_t v139 = v101;
    swift_retain(v97);
    v140 = v165;
    v138(v165, v132, v134, v136, v84, 3LL, sub_100087344, v137, v170, v129);
    swift_release(v137);
    sub_10000BE18(v134, v136);
    v141 = sub_10000BE18(v140, v132);
    v171 = *(void **)&v139[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue];
    v142 = v166;
    static DispatchTime.now()(v141);
    uint64_t v143 = v168;
    + infix(_:_:)(v142, &v139[OBJC_IVAR___CSDVoucherManagerImpl_timeout]);
    uint64_t v144 = *(void (**)(char *, uint64_t))(v167 + 8);
    uint64_t v145 = v157;
    v144(v142, v157);
    v176[3] = sub_10008734C;
    v177 = v97;
    aBlock = _NSConcreteStackBlock;
    v176[0] = 1107296256LL;
    v176[1] = sub_10000ABC8;
    v176[2] = &unk_1000C5870;
    v146 = _Block_copy(&aBlock);
    uint64_t v147 = swift_retain(v97);
    uint64_t v148 = v158;
    static DispatchQoS.unspecified.getter(v147);
    v174 = _swiftEmptyArrayStorage;
    uint64_t v149 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v150 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
    v151 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
    v152 = v161;
    v153 = v150;
    v154 = v163;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v174, v153, v151, v163, v149);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v143, v148, v152, v146);

    _Block_release(v146);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v152, v154);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v148, v160);
    v144(v143, v145);
    swift_release(v177);
    swift_release(v97);
    os_log_t v121 = v156;
    return swift_release(v121);
  }

  uint64_t v102 = sub_10008729C();
  unint64_t v103 = swift_allocError(&type metadata for VoucherManagerError, v102, 0LL, 0LL);
  *uint64_t v104 = 5LL;
  swift_retain(v98);
  sub_10008419C(0, v103, *(void **)(v98 + 16), *(void *)(v98 + 24));
  sub_1000874BC((uint64_t)sub_100087338, v98);

  swift_errorRelease(v103);
  uint64_t v105 = *(void *)(v97 + 16);
  uint64_t v106 = *(void *)(v97 + 24);
  *(void *)(v97 + 16) = 0LL;
  *(void *)(v97 + 24) = 0LL;
  sub_1000874BC(v105, v106);
  swift_release(v97);
LABEL_35:
  os_log_t v121 = v19;
  return swift_release(v121);
}

  uint64_t v45 = *v57;
  *(void *)(*v57 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_100018D40((uint64_t)a1, *(void *)(v45 + 48) + *(void *)(v59 + 72) * a2);
  uint64_t v47 = *(void *)(v45 + 16);
  uint64_t v48 = __OFADD__(v47, 1LL);
  unint64_t v49 = v47 + 1;
  if (v48) {
    __break(1u);
  }
  else {
    *(void *)(v45 + 16) = v49;
  }
  return result;
}

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 24 * v15;
    int64_t v17 = *(void *)(v2 + 48) + v16;
    unint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    int64_t v20 = *(void *)(v4 + 48) + v16;
    id v21 = *(_BYTE *)(v17 + 16);
    *(void *)int64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + 16) = v21;
    uint64_t result = (void *)sub_10000EEF8(v18, v19, v21);
  }

  unint64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    int64_t v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1000109D4(v17, *((unint64_t *)&v17 + 1));
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    unint64_t v13 = (v20 - 1) & v20;
    int64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    int64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    uint64_t result = v18;
  }

  id v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  int64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    unint64_t v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    int64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    int64_t v16 = (v22 - 1) & v22;
    uint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    int64_t v20 = *(void *)(v3 + 72) * v19;
    sub_10004EA38(*(void *)(v6 + 48) + v20, (uint64_t)v5);
    uint64_t result = (void *)sub_100018D40((uint64_t)v5, *(void *)(v8 + 48) + v20);
  }

  uint64_t v23 = v21 + 3;
  if (v23 >= v17) {
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    unint64_t v13 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

    unint64_t v15 = (v24 - 1) & v24;
    unint64_t v18 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_8:
    uint64_t v19 = *(void *)(*(void *)(v10 + 48) + 16 * v18 + 8);
    int64_t v20 = *(void **)(v1 + v7);
    swift_bridgeObjectRetain(v19);
    id v21 = v20;
    uint64_t v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    [v21 setActivityAuthorization:0 forBundleIdentifier:v22];
  }

  unint64_t v25 = v23 + 5;
  if (v25 >= v16)
  {
LABEL_28:
    swift_release(v10);
    return;
  }

  unint64_t v24 = *(void *)(v12 + 8 * v25);
  if (v24)
  {
    uint64_t v11 = v25;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v11 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v11);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }

  __break(1u);
}

LABEL_39:
  __break(1u);
  return result;
}

void sub_100009F5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000360C((uint64_t *)&unk_1000CD8D0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v12 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v12 >= v28) {
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(v29 + 8 * v12);
  int64_t v14 = i + 1;
  if (!v13)
  {
    int64_t v14 = i + 2;
    if (i + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v14);
    if (!v13)
    {
      int64_t v14 = i + 3;
      if (i + 3 >= v28) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = i + 4;
        if (i + 4 >= v28) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v14);
        if (!v13)
        {
          int64_t v15 = i + 5;
          if (i + 5 < v28)
          {
            unint64_t v13 = *(void *)(v29 + 8 * v15);
            if (v13)
            {
              int64_t v14 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v14 = v15 + 1;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_36;
              }
              if (v14 >= v28) {
                break;
              }
              unint64_t v13 = *(void *)(v29 + 8 * v14);
              ++v15;
              if (v13) {
                goto LABEL_26;
              }
            }
          }

LABEL_32:
          sub_10000B7D8(a1);
          return;
        }
      }
    }
  }

    char v23 = (v31 - 1) & v31;
    unint64_t v24 = __clz(__rbit64(v31)) + (v25 << 6);
    goto LABEL_33;
  }

  __break(1u);
LABEL_38:
  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10000A1FC()
{
  uint64_t v0 = NCProtoIDSProxyMessage.RawData.messageData.getter();
  unint64_t v2 = v1;
  NCProtoIDSProxyMessage.RawData.fromID.getter();
  swift_bridgeObjectRelease(v3);
  return sub_10000BE18(v0, v2);
}

uint64_t sub_10000A240(void **a1)
{
  unint64_t v74 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v71 = *(void *)(v1 - 8);
  uint64_t v72 = v1;
  __chkstk_darwin(v1);
  uint64_t v70 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  uint64_t v67 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v66 = (void ***)((char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v9 = (void ***)((char *)&v58 - v8);
  uint64_t v65 = type metadata accessor for DispatchWallTime(0LL);
  uint64_t v63 = *(void *)(v65 - 8);
  uint64_t v10 = __chkstk_darwin(v65);
  int v61 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  int v62 = (char *)&v58 - v12;
  uint64_t v13 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v60 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v73 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD6A8 != -1) {
    swift_once(&qword_1000CD6A8, sub_100088E90);
  }
  uint64_t v19 = sub_10000ADF4(v16, (uint64_t)qword_1000D3668);
  id v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v22 = 134217984;
    aBlock = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v78, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Setting IDS proxy timeout of %ld seconds", v22, 0xCu);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  uint64_t v23 = OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer;
  uint64_t v24 = *(void *)(v75 + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer);
  if (v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v18, v19, v16);
    uint64_t v25 = qword_1000CD6D8;
    swift_unknownObjectRetain(v24);
    if (v25 != -1) {
      swift_once(&qword_1000CD6D8, sub_1000890B0);
    }
    swift_beginAccess(&static os_log_type_t.errorWithState, v76, 0LL, 0LL);
    os_log_type_t v26 = static os_log_type_t.errorWithState;
    int64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    if (os_log_type_enabled(v28, v26))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      uint64_t v58 = v14;
      uint64_t v30 = v13;
      uint64_t v31 = v23;
      id v32 = v29;
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v26,  "Existing IDS proxy timer found. Canceling it and making a new one.",  v29,  2u);
      __int128 v33 = v32;
      uint64_t v23 = v31;
      uint64_t v13 = v30;
      uint64_t v14 = v58;
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v18, v16);
    swift_getObjectType(v24);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v24);
    uint64_t v34 = *(void *)(v75 + v23);
    *(void *)(v75 + v23) = 0LL;
    swift_unknownObjectRelease(v34);
  }

  uint64_t v59 = v23;
  sub_1000052E0(0LL, &qword_1000CDE80, &OBJC_CLASS___OS_dispatch_source_ptr);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v35 = sub_10000465C( &qword_1000CDE88,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v36 = sub_10000360C(&qword_1000CDE90);
  uint64_t v37 = sub_10000C1B4(&qword_1000CDE98, &qword_1000CDE90);
  __int128 v38 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v36, v37, v13, v35);
  uint64_t v39 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v38, 0LL);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v38, v13);
  uint64_t ObjectType = swift_getObjectType(v39);
  uint64_t v41 = v61;
  static DispatchWallTime.now()();
  char *v9 = v74;
  uint64_t v42 = v64;
  uint64_t v43 = *(void (**)(void ***, void, uint64_t))(v64 + 104);
  v43(v9, enum case for DispatchTimeInterval.seconds(_:), v5);
  unint64_t v44 = v62;
  + infix(_:_:)(v41, v9);
  uint64_t v45 = *(void (**)(void ***, uint64_t))(v42 + 8);
  v45(v9, v5);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v63 + 8);
  uint64_t v47 = v65;
  v46(v41, v65);
  v43(v9, enum case for DispatchTimeInterval.never(_:), v5);
  uint64_t v48 = v66;
  *uint64_t v66 = 0LL;
  v43(v48, enum case for DispatchTimeInterval.nanoseconds(_:), v5);
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v44, v9, v48, ObjectType);
  v45(v48, v5);
  v45(v9, v5);
  v46(v44, v47);
  uint64_t v49 = swift_allocObject(&unk_1000C27B0, 24LL, 7LL);
  uint64_t v50 = v75;
  swift_unknownObjectWeakInit(v49 + 16, v75);
  v78[3] = sub_10000C218;
  uint64_t v79 = v49;
  aBlock = _NSConcreteStackBlock;
  v78[0] = 1107296256LL;
  v78[1] = sub_10000ABC8;
  v78[2] = &unk_1000C27C8;
  uint64_t v51 = _Block_copy(&aBlock);
  uint64_t v52 = swift_retain(v49);
  unint64_t v53 = v67;
  static DispatchQoS.unspecified.getter(v52);
  unint64_t v54 = v70;
  sub_10000ABF4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v53, v54, v51, ObjectType);
  _Block_release(v51);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v72);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v69);
  uint64_t v55 = v79;
  swift_release(v49);
  swift_release(v55);
  OS_dispatch_source.activate()();
  uint64_t v56 = *(void *)(v50 + v59);
  *(void *)(v50 + v59) = v39;
  return swift_unknownObjectRelease(v56);
}

void sub_10000A908(uint64_t a1)
{
  uint64_t v2 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v2);
  uint64_t v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = a1 + 16;
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000ADF4(v6, (uint64_t)qword_1000D3620);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Timing out IDS proxy", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  swift_beginAccess(v5, v22, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v11);
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    uint64_t v14 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v4, 1LL, 1LL, v14);
    uint64_t v15 = qword_1000CD668;
    id v16 = v13;
    if (v15 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v17 = qword_1000D35E0;
    uint64_t v18 = sub_10000465C( &qword_1000CF800,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
    uint64_t v19 = (void *)swift_allocObject(&unk_1000C2800, 40LL, 7LL);
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = v16;
    swift_retain(v17);
    uint64_t v20 = sub_10004EC20((uint64_t)v4, (uint64_t)&unk_1000CDEA8, (uint64_t)v19);
    swift_release(v20);
  }

uint64_t sub_10000AB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10000AB6C, qword_1000D35E0, 0LL);
}

uint64_t sub_10000AB6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator);
  *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator) = 0LL;
  swift_release(v2);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer);
  *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer) = 0LL;
  swift_unknownObjectRelease(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000ABC8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10000ABF4()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v3 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

void sub_10000ACA0()
{
  uint64_t v1 = OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer;
  if (*(void *)(v0 + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer))
  {
    uint64_t v2 = v0;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cleaning up IDS proxy", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v2 + v1);
    if (v8)
    {
      swift_getObjectType(*(void *)(v2 + v1));
      swift_unknownObjectRetain(v8);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v8);
      uint64_t v9 = *(void *)(v2 + v1);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    *(void *)(v2 + v1) = 0LL;
    swift_unknownObjectRelease(v9);
    uint64_t v10 = *(void *)(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator);
    *(void *)(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator) = 0LL;
    swift_release(v10);
  }

uint64_t sub_10000ADF4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *sub_10000AE0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NCProtoIDSProxyMessage.ParticipantIDList(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000360C(&qword_1000CDE60);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  int64_t v7 = 0LL;
  uint64_t v45 = a1;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v9 = a1 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 - 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v40 = v9;
  int64_t v41 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v42 = result + 8;
  uint64_t v43 = result;
  uint64_t v38 = v3;
  uint64_t v39 = v2;
  unint64_t v44 = v5;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v46 = (v13 - 1) & v13;
  int64_t v47 = v7;
  for (unint64_t i = __clz(__rbit64(v13)) | (v7 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    uint64_t v19 = *(void *)(v45 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v45 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v48 = *v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, v19 + *(void *)(v3 + 72) * i, v2);
    uint64_t v49 = v21;
    uint64_t v22 = swift_bridgeObjectRetain(v21);
    uint64_t v23 = NCProtoIDSProxyMessage.ParticipantIDList.identifiers.getter(v22);
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)(v23 + 16);
    if (v25)
    {
      uint64_t v50 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v25);
      uint64_t v26 = 0LL;
      do
      {
        uint64_t v27 = v26 + 1;
        id v28 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*(void *)(v24 + 8 * v26 + 32)];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        uint64_t v29 = v50[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
        uint64_t v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v28);
        specialized ContiguousArray._endMutation()(v30);
        uint64_t v26 = v27;
      }

      while (v25 != v27);
      uint64_t v31 = v50;
      swift_bridgeObjectRelease(v24);
      uint64_t v3 = v38;
      uint64_t v2 = v39;
    }

    else
    {
      swift_bridgeObjectRelease(v23);
      uint64_t v31 = _swiftEmptyArrayStorage;
    }

    uint64_t v5 = v44;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v44, v2);
    uint64_t result = v43;
    *(void *)((char *)v42 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    id v32 = (void *)(result[6] + 16 * i);
    uint64_t v33 = v49;
    *id v32 = v48;
    v32[1] = v33;
    *(void *)(result[7] + 8 * i) = v31;
    uint64_t v34 = result[2];
    BOOL v35 = __OFADD__(v34, 1LL);
    uint64_t v36 = v34 + 1;
    if (v35)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    result[2] = v36;
    unint64_t v13 = v46;
    int64_t v7 = v47;
    if (v46) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_29;
    }
    if (v15 >= v41) {
      return result;
    }
    unint64_t v16 = *(void *)(v40 + 8 * v15);
    int64_t v17 = v7 + 1;
    if (!v16)
    {
      int64_t v17 = v7 + 2;
      if (v7 + 2 >= v41) {
        return result;
      }
      unint64_t v16 = *(void *)(v40 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v7 + 3;
        if (v7 + 3 >= v41) {
          return result;
        }
        unint64_t v16 = *(void *)(v40 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }

LABEL_18:
    uint64_t v46 = (v16 - 1) & v16;
    int64_t v47 = v17;
  }

  uint64_t v18 = v7 + 4;
  if (v7 + 4 >= v41) {
    return result;
  }
  unint64_t v16 = *(void *)(v40 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v7 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v17 >= v41) {
      return result;
    }
    unint64_t v16 = *(void *)(v40 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_18;
    }
  }

    uint64_t v10 = v18;
    goto LABEL_19;
  }

  __break(1u);
LABEL_33:
  __break(1u);
}

    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v37 = v17;
  }

  uint64_t v18 = v5 + 4;
  if (v5 + 4 >= v30) {
    return result;
  }
  unint64_t v16 = *(void *)(v29 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v5 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v17 >= v30) {
      return result;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_18;
    }
  }

LABEL_30:
  __break(1u);
  return result;
}

    swift_release(a1);
    return;
  }

  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

    swift_release(a1);
    return;
  }

  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

    unint64_t v13 = (v21 - 1) & v21;
    uint64_t v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_31:
    uint64_t v19 = *(id *)(*(void *)(v2 + 48) + 8 * v14);
    if (!v19) {
      goto LABEL_34;
    }
    while (1)
    {
      sub_10008FE78((Swift::Int *)v25, v19);

      int64_t v7 = v15;
      uint64_t v8 = v13;
      if ((v2 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      unint64_t v16 = __CocoaSet.Iterator.next()(a1);
      if (v16)
      {
        int64_t v17 = v16;
        uint64_t v24 = v16;
        uint64_t v18 = sub_1000052E0(0LL, &qword_1000CE5B8, &OBJC_CLASS___TUConversationMember_ptr);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
        uint64_t v19 = v25[0];
        swift_unknownObjectRelease(v17);
        int64_t v15 = v7;
        unint64_t v13 = v8;
        if (v19) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void *sub_10000B130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000360C(&qword_1000CDE20);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  void v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_10000B3E0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10000B7D8(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10000B214(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000360C(&qword_1000CDE28);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  void v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  uint64_t v7 = sub_10000B5E0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10000B7D8(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10000B2FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000360C(&qword_1000CDE78);
  uint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  void v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  uint64_t v7 = sub_10000B7E0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10000B7D8(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_10000B3E0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v27 = (v37 - 1) & v37;
        id v28 = __clz(__rbit64(v37)) + (v29 << 6);
      }

      uint64_t v33 = *(id *)(*(void *)(v8 + 48) + 8 * v28);
    }

    *(void *)(v0 + 168) = v29;
    *(void *)(v0 + 176) = v27;
    *(void *)(v0 + 160) = v33;
    if (!v33) {
      break;
    }
    uint64_t v39 = *(void *)(v0 + 96);
    uint64_t v40 = swift_task_alloc(32LL);
    *(void *)(v40 + 16) = v33;
    int64_t v41 = sub_10000465C( &qword_1000CFE48,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
    static Message.with(_:)(sub_100095718, v40, v39, v41);
    swift_task_dealloc(v40);
    uint64_t v42 = [v33 deviceHandle];
    uint64_t v43 = [v42 knownIdentifiersByHandleType];
    unint64_t v44 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v45 = sub_100017D34( (unint64_t *)&qword_1000CF810,  (unint64_t *)&qword_1000CD8C8,  &OBJC_CLASS___NSNumber_ptr);
    uint64_t v46 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v43, v44, &type metadata for String, v45);

    int64_t v47 = [objc_allocWithZone(NSNumber) initWithInteger:2];
    uint64_t v48 = v47;
    if (*(void *)(v46 + 16))
    {
      uint64_t v49 = sub_100004DA4((uint64_t)v47);
      if ((v50 & 1) != 0)
      {
        uint64_t v63 = (uint64_t *)(*(void *)(v46 + 56) + 16 * v49);
        uint64_t v65 = *v63;
        uint64_t v64 = v63[1];
        *(void *)(v0 + 184) = v64;
        swift_bridgeObjectRetain(v64);
        swift_bridgeObjectRelease(v46);

        if (qword_1000CD638 != -1) {
          swift_once(&qword_1000CD638, sub_10001FF5C);
        }
        *(void *)(v0 + 192) = qword_1000D35C8;
        uint64_t v66 = (void *)swift_task_alloc(dword_1000CFE44);
        *(void *)(v0 + 200) = v66;
        *uint64_t v66 = v0;
        v66[1] = sub_10008DB78;
        uint64_t v67 = *(void *)(v0 + 112);
        uint64_t v68 = v65;
        uint64_t v69 = v64;
        uint64_t v70 = 0;
        return sub_1000534D8(5, v67, v68, v69, v70);
      }
    }

    swift_bridgeObjectRelease(v46);
    uint64_t v51 = [v33 deviceHandle];
    uint64_t v52 = [v51 knownIdentifiersByHandleType];
    unint64_t v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, v44, &type metadata for String, v45);

    unint64_t v54 = [objc_allocWithZone(NSNumber) initWithInteger:0];
    uint64_t v55 = v54;
    if (*(void *)(v53 + 16))
    {
      uint64_t v56 = sub_100004DA4((uint64_t)v54);
      if ((v57 & 1) != 0)
      {
        uint64_t v71 = (uint64_t *)(*(void *)(v53 + 56) + 16 * v56);
        uint64_t v73 = *v71;
        uint64_t v72 = v71[1];
        *(void *)(v0 + 216) = v72;
        swift_bridgeObjectRetain(v72);
        swift_bridgeObjectRelease(v53);

        if (qword_1000CD638 != -1) {
          swift_once(&qword_1000CD638, sub_10001FF5C);
        }
        *(void *)(v0 + 224) = qword_1000D35C8;
        unint64_t v74 = (void *)swift_task_alloc(dword_1000CFE44);
        *(void *)(v0 + 232) = v74;
        *unint64_t v74 = v0;
        v74[1] = sub_10008DBDC;
        uint64_t v67 = *(void *)(v0 + 112);
        uint64_t v68 = v73;
        uint64_t v69 = v72;
        uint64_t v70 = 2;
        return sub_1000534D8(5, v67, v68, v69, v70);
      }
    }

    swift_bridgeObjectRelease(v53);
    uint64_t v58 = v33;
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v58);
    uint64_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v59))
    {
      uint64_t v60 = swift_slowAlloc(12LL, -1LL);
      int v61 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v60 = 138412290;
      *(void *)(v60 + 4) = v58;
      *int v61 = v33;

      _os_log_impl((void *)&_mh_execute_header, v26, v59, "Could not find device for %@", (uint8_t *)v60, 0xCu);
      int v62 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v61, 1LL, v62);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    else
    {

      uint64_t v26 = (os_log_s *)v58;
    }

    int64_t v19 = (void *)(*(uint64_t (**)(void, void))(*(void *)(v0 + 104) + 8LL))( *(void *)(v0 + 112),  *(void *)(v0 + 96));
    unint64_t v9 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 176);
  }

  uint64_t v8 = *(void *)(v0 + 136);
LABEL_58:
  os_log_t v76 = *(void *)(v0 + 112);
  sub_10000B7D8(v8);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000B5E0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      swift_retain(v20);
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_retain(v20);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_10000B7D8(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000B7E0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

id sub_10000B9D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1000095A8(a1);
  uint64_t v7 = sub_100009B9C(v6);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  id v9 = [objc_allocWithZone(IDSMessageContext) initWithDictionary:isa boostContext:0];

  if (v9)
  {
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    if (qword_1000CD6A8 != -1) {
      swift_once(&qword_1000CD6A8, sub_100088E90);
    }
    uint64_t v10 = sub_10000ADF4(v2, (uint64_t)qword_1000D3668);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    if (qword_1000CD6D8 != -1) {
      swift_once(&qword_1000CD6D8, sub_1000890B0);
    }
    swift_beginAccess(&static os_log_type_t.errorWithState, v29, 0LL, 0LL);
    int v11 = static os_log_type_t.errorWithState;
    uint64_t v12 = swift_bridgeObjectRetain(v6);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    if (os_log_type_enabled(v13, (os_log_type_t)v11))
    {
      int v27 = v11;
      int64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v26;
      uint64_t v25 = v14;
      *(_DWORD *)int64_t v14 = 136315138;
      uint64_t v24 = v14 + 4;
      uint64_t v15 = sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
      uint64_t v16 = swift_bridgeObjectRetain(v6);
      uint64_t v17 = Dictionary.description.getter(v16, &type metadata for String, v15, &protocol witness table for String);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(v6);
      uint64_t v28 = sub_10009BE3C(v17, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v24, v14 + 12);
      swift_bridgeObjectRelease_n(v6, 2LL);
      swift_bridgeObjectRelease(v19);
      uint64_t v20 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  (os_log_type_t)v27,  "Failed to decode IDSMessage context from dictionary: %s",  v25,  0xCu);
      uint64_t v21 = v26;
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v6, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v22 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    swift_willThrow(v22);
  }

  return v9;
}

uint64_t sub_10000BD10@<X0>(BOOL *a1@<X8>)
{
  return sub_10000615C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_10000BD2C()
{
  uint64_t v1 = type metadata accessor for NCProtoIDSProxyMessage.RawData(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10000BDBC()
{
  return sub_10000A1FC();
}

uint64_t sub_10000BE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000BE10(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000BE18(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000BE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CDE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HandoffInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000BEE8()
{
  unint64_t result = qword_1000CDE50;
  if (!qword_1000CDE50)
  {
    uint64_t v1 = sub_1000052E0(255LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000CDE50);
  }

  return result;
}

uint64_t sub_10000BF40(id *a1)
{
  return sub_1000091C4(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10000BF5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10000BF98()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000BFC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000360C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_10000C004()
{
  unint64_t result = qword_1000CDE58;
  if (!qword_1000CDE58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A97C0, &type metadata for ProxiedGroupSessionParticipantUpdate.Error);
    atomic_store(result, (unint64_t *)&qword_1000CDE58);
  }

  return result;
}

uint64_t sub_10000C048(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000BE18(result, a2);
  }
  return result;
}

uint64_t sub_10000C05C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for NCProtoIDSProxyMessage.Resource(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return swift_deallocObject(v0, v10 + 8, v12);
}

uint64_t sub_10000C14C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000C1B4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100003698(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000C1F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10000C218()
{
}

uint64_t sub_10000C220()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10000C24C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CDEA4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C2B8;
  return sub_10000AB08(a1, v4, v5, v6);
}

uint64_t sub_10000C2B8()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void *initializeBufferWithCopyOfBuffer for ProxiedGroupSessionParticipantUpdate.Error( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ProxiedGroupSessionParticipantUpdate.Error(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for ProxiedGroupSessionParticipantUpdate.Error(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 initializeWithTake for ProxiedGroupSessionParticipantUpdate.Error(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for ProxiedGroupSessionParticipantUpdate.Error(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProxiedGroupSessionParticipantUpdate.Error(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxiedGroupSessionParticipantUpdate.Error( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_10000C434()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for ProxiedGroupSessionParticipantUpdate.Error()
{
  return &type metadata for ProxiedGroupSessionParticipantUpdate.Error;
}

uint64_t sub_10000C464@<X0>(BOOL *a1@<X8>)
{
  return sub_10000BD10(a1);
}

unint64_t sub_10000C47C(uint64_t a1, void *a2, char a3)
{
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v5 = 0xD000000000000024LL;
  }

  else
  {
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v5 = 0xD000000000000023LL;
  }

  unint64_t v9 = v5;
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 41LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return v9;
}

unint64_t sub_10000C57C()
{
  return sub_10000C47C(*(void *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10000C588(uint64_t a1, uint64_t a2)
{
  return sub_10000F1E4( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16));
}

Swift::Int sub_10000C5A4()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void **)(v0 + 8);
  char v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v8, 0LL);
  unint64_t v4 = sub_10000C47C(v1, v2, v3);
  uint64_t v6 = v5;
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_10000C618(uint64_t a1)
{
  unint64_t v3 = sub_10000C47C(*(void *)v1, *(void **)(v1 + 8), *(_BYTE *)(v1 + 16));
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000C65C(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void **)(v1 + 8);
  char v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v9, a1);
  unint64_t v5 = sub_10000C47C(v2, v3, v4);
  uint64_t v7 = v6;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_10000C6CC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 184) = a4;
  *(void *)(v5 + 192) = v4;
  *(_BYTE *)(v5 + 240) = a3;
  *(void *)(v5 + 168) = a1;
  *(void *)(v5 + 176) = a2;
  *(void *)(v5 + 200) = *v4;
  return swift_task_switch(sub_10000C6F4, 0LL, 0LL);
}

uint64_t sub_10000C6F4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v0 + 168);
  *(void *)(v2 + 24) = v3;
  sub_10000F310(v1, v0 + 16);
  uint64_t v4 = qword_1000CD688;
  uint64_t v5 = swift_bridgeObjectRetain(v3);
  if (v4 == -1)
  {
  }

  else
  {
    uint64_t v28 = swift_once(&qword_1000CD688, sub_100088B38);
    if (!_TUIsInternalInstall(v28))
    {
LABEL_4:
      if (*(_BYTE *)(v0 + 240) != 1)
      {
LABEL_13:
        int v7 = 1;
        goto LABEL_14;
      }

LABEL_8:
      uint64_t v8 = *(void *)(v0 + 40);
      uint64_t v9 = *(void *)(v0 + 48);
      sub_10000F354(v0 + 16, v8);
      int v11 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))( v0 + 96,  v8,  v9);
      if ((*v10 & 0x20000) == 0) {
        *v10 |= 0x20000uLL;
      }
      v11(v0 + 96, 0LL);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = *(void *)(v0 + 48);
      sub_10000F354(v0 + 16, v12);
      uint64_t v15 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))( v0 + 128,  v12,  v13);
      if ((*v14 & 0x200000) == 0) {
        *v14 |= 0x200000uLL;
      }
      v15(v0 + 128, 0LL);
      goto LABEL_13;
    }
  }

  sub_100088B94(4);
  if (v6 == 2) {
    goto LABEL_4;
  }
  int v7 = v6 & 1;
  if ((v6 & 1) != 0 && (*(_BYTE *)(v0 + 240) & 1) != 0) {
    goto LABEL_8;
  }
LABEL_14:
  *(_DWORD *)(v0 + 236) = v7;
  id v16 = [objc_allocWithZone(RPCompanionLinkDevice) init];
  *(void *)(v0 + 208) = v16;
  id v17 = v16;
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 setIdentifier:v18];

  uint64_t v19 = *(void *)(v0 + 40);
  uint64_t v20 = *(void *)(v0 + 48);
  sub_10000F354(v0 + 16, v19);
  uint64_t v21 = *(void (**)(id, uint64_t, uint64_t))(v20 + 96);
  id v22 = v17;
  v21(v17, v19, v20);
  sub_10000F310(v0 + 16, v0 + 56);
  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v24 = *(void *)(v0 + 88);
  sub_10000F2CC((void *)(v0 + 56), v23);
  uint64_t v25 = *(int **)(v24 + 240);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)v25 + *v25);
  uint64_t v26 = (void *)swift_task_alloc(v25[1]);
  *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_10000C938;
  return v29(v23, v24);
}

  int64_t v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v66 + 16))(v71, v29, v14);
  uint64_t v42 = NCProtoContinuityCall.conversationUuidString.getter(v41);
  unint64_t v44 = v43;
  uint64_t v45 = (uint64_t)v69;
  UUID.init(uuidString:)(v42);
  uint64_t v46 = swift_bridgeObjectRelease(v44);
  int64_t v47 = NCProtoContinuityCall.callGroupUuidString.getter(v46);
  uint64_t v49 = v48;
  uint64_t v50 = (uint64_t)v70;
  UUID.init(uuidString:)(v47);
  uint64_t v51 = swift_bridgeObjectRelease(v49);
  if ((NCProtoContinuityCall.hasIsMuted.getter(v51) & 1) != 0)
  {
    sub_100088AFC();
    uint64_t v52 = NCProtoContinuityCall.isMuted.getter();
    v53.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(v52 & 1).super.super.isa;
  }

  else
  {
    v53.super.super.Class isa = 0LL;
  }

  uint64_t v59 = v29;
  if ((NCProtoContinuityCall.hasIsCameraEnabled.getter() & 1) != 0)
  {
    sub_100088AFC();
    uint64_t v60 = NCProtoContinuityCall.isCameraEnabled.getter();
    v61.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(v60 & 1).super.super.isa;
  }

  else
  {
    v61.super.super.Class isa = 0LL;
  }

  int v62 = objc_allocWithZone(&OBJC_CLASS___TUContinuityCall);
  uint64_t v24 = sub_1000889C0(v71, v45, v50, v65, (uint64_t)v53.super.super.isa, (uint64_t)v61.super.super.isa, (uint64_t)v30);

  (*(void (**)(char *, uint64_t))(v66 + 8))(v59, v14);
  return v24;
}

uint64_t sub_10000C938()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 176));
    uint64_t v4 = sub_10000CBEC;
  }

  else
  {
    uint64_t v4 = sub_10000C9A4;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10000C9A4()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  sub_10000F2F0((void *)(v0 + 56));
  sub_10000F310(v0 + 16, v2 + 32);
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v4, (uint64_t)qword_1000D36B0);
  uint64_t v5 = swift_bridgeObjectRetain(v3);
  char v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void **)(v0 + 208);
  if (v8)
  {
    int v19 = *(_DWORD *)(v0 + 236);
    uint64_t v21 = *(void **)(v0 + 184);
    unint64_t v10 = *(void *)(v0 + 176);
    uint64_t v11 = *(void *)(v0 + 168);
    uint64_t v12 = swift_slowAlloc(18LL, -1LL);
    uint64_t v20 = v9;
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain(v10);
    *(void *)(v0 + 160) = sub_10009BE3C(v11, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3LL);
    *(_WORD *)(v12 + 12) = 1024;
    *(_DWORD *)(v0 + 232) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 236, v12 + 14, v12 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%s] Creating connection assertion (forceAWDL=%{BOOL}d).",  (uint8_t *)v12,  0x12u);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    uint64_t v14 = v12;
    uint64_t v1 = (void *)(v0 + 16);
    swift_slowDealloc(v14, -1LL, -1LL);

    uint64_t v15 = v21;
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 176);
    id v16 = *(void **)(v0 + 184);

    swift_bridgeObjectRelease_n(v17, 2LL);
    uint64_t v15 = v16;
  }

  sub_10000F2F0(v15);
  sub_10000F2F0(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 192));
}

uint64_t sub_10000CBEC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v3 = *(void **)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);

  sub_10000F2F0(v3);
  sub_10000F2F0((void *)(v0 + 56));
  sub_10000F2F0((void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v2 + 24));
  swift_deallocPartialClassInstance(v2, v1, 72LL, 7LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_10000CC70()
{
  uint64_t v1 = v0;
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D36B0);
  uint64_t v3 = swift_retain(v0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v7;
    *(_DWORD *)char v6 = 136315138;
    uint64_t v8 = v1[2];
    unint64_t v9 = v1[3];
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = sub_10009BE3C(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Releasing connection assertion.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release(v1);
  }

  uint64_t v10 = v1[7];
  uint64_t v11 = v1[8];
  sub_10000F2CC(v1 + 4, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 232))(v10, v11);
  swift_bridgeObjectRelease(v1[3]);
  sub_10000F2F0(v1 + 4);
  return v1;
}

uint64_t sub_10000CE4C()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t sub_10000CE6C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v75 = v1 + 56;
  uint64_t v2 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 56);
  int64_t v76 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(v1);
  int64_t v5 = 0LL;
  while (v4)
  {
    unint64_t v7 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v8 = v7 | (v5 << 6);
LABEL_22:
    uint64_t v12 = *(void *)(v1 + 48) + 24 * v8;
    uint64_t v14 = *(void *)v12;
    uint64_t v13 = *(void *)(v12 + 8);
    int v15 = *(unsigned __int8 *)(v12 + 16);
    if (v15)
    {
      if (v15 == 1)
      {
        id v16 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
        sub_10000EEF8(v14, v13, 1u);
        swift_bridgeObjectRetain(v13);
        id v17 = [v16 initWithInteger:1];
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        unint64_t v20 = sub_100004DA4((uint64_t)v17);
        uint64_t v21 = _swiftEmptyDictionarySingleton[2];
        BOOL v22 = (v19 & 1) == 0;
        uint64_t v23 = v21 + v22;
        if (__OFADD__(v21, v22)) {
          goto LABEL_64;
        }
        char v24 = v19;
        if (_swiftEmptyDictionarySingleton[3] >= v23)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v19 & 1) != 0) {
              goto LABEL_4;
            }
          }

          else
          {
            sub_1000782CC();
            if ((v24 & 1) != 0) {
              goto LABEL_4;
            }
          }
        }

        else
        {
          sub_100076280(v23, isUniquelyReferenced_nonNull_native);
          unint64_t v25 = sub_100004DA4((uint64_t)v17);
          if ((v24 & 1) != (v26 & 1)) {
            goto LABEL_71;
          }
          unint64_t v20 = v25;
          if ((v24 & 1) != 0)
          {
LABEL_4:
            char v6 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v20);
            swift_bridgeObjectRelease(v6[1]);
            uint64_t *v6 = v14;
            v6[1] = v13;
            goto LABEL_5;
          }
        }

        _swiftEmptyDictionarySingleton[(v20 >> 6) + 8] |= 1LL << v20;
        *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v20) = v17;
        uint64_t v49 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v20);
        *uint64_t v49 = v14;
        v49[1] = v13;
        uint64_t v50 = _swiftEmptyDictionarySingleton[2];
        BOOL v51 = __OFADD__(v50, 1LL);
        uint64_t v52 = v50 + 1;
        if (v51) {
          goto LABEL_67;
        }
        _swiftEmptyDictionarySingleton[2] = v52;
        id v53 = v17;
LABEL_5:

        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_10000EF20(v14, v13, 1u);
      }

      else
      {
        id v38 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
        sub_10000EEF8(v14, v13, 2u);
        swift_bridgeObjectRetain(v13);
        id v39 = [v38 initWithInteger:0];
        uint64_t v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        unint64_t v42 = sub_100004DA4((uint64_t)v39);
        uint64_t v43 = _swiftEmptyDictionarySingleton[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_66;
        }
        char v46 = v41;
        if (_swiftEmptyDictionarySingleton[3] >= v45)
        {
          if ((v40 & 1) != 0)
          {
            if ((v41 & 1) != 0) {
              goto LABEL_48;
            }
          }

          else
          {
            sub_1000782CC();
            if ((v46 & 1) != 0) {
              goto LABEL_48;
            }
          }
        }

        else
        {
          sub_100076280(v45, v40);
          unint64_t v47 = sub_100004DA4((uint64_t)v39);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_71;
          }
          unint64_t v42 = v47;
          if ((v46 & 1) != 0)
          {
LABEL_48:
            uint64_t v55 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v42);
            swift_bridgeObjectRelease(v55[1]);
            uint64_t *v55 = v14;
            v55[1] = v13;
            goto LABEL_58;
          }
        }

        _swiftEmptyDictionarySingleton[(v42 >> 6) + 8] |= 1LL << v42;
        *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v42) = v39;
        uint64_t v60 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v42);
        uint64_t *v60 = v14;
        v60[1] = v13;
        uint64_t v61 = _swiftEmptyDictionarySingleton[2];
        BOOL v51 = __OFADD__(v61, 1LL);
        uint64_t v62 = v61 + 1;
        if (v51) {
          goto LABEL_69;
        }
        _swiftEmptyDictionarySingleton[2] = v62;
        id v63 = v39;
LABEL_58:

        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_10000EF20(v14, v13, 2u);
      }
    }

    else
    {
      id v27 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
      sub_10000EEF8(v14, v13, 0);
      swift_bridgeObjectRetain(v13);
      id v28 = [v27 initWithInteger:2];
      uint64_t v29 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      unint64_t v31 = sub_100004DA4((uint64_t)v28);
      uint64_t v32 = _swiftEmptyDictionarySingleton[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_65;
      }
      char v35 = v30;
      if (_swiftEmptyDictionarySingleton[3] >= v34)
      {
        if ((v29 & 1) != 0)
        {
          if ((v30 & 1) != 0) {
            goto LABEL_45;
          }
        }

        else
        {
          sub_1000782CC();
          if ((v35 & 1) != 0) {
            goto LABEL_45;
          }
        }
      }

      else
      {
        sub_100076280(v34, v29);
        unint64_t v36 = sub_100004DA4((uint64_t)v28);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_71;
        }
        unint64_t v31 = v36;
        if ((v35 & 1) != 0)
        {
LABEL_45:
          unint64_t v54 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v31);
          swift_bridgeObjectRelease(v54[1]);
          *unint64_t v54 = v14;
          v54[1] = v13;
          goto LABEL_54;
        }
      }

      _swiftEmptyDictionarySingleton[(v31 >> 6) + 8] |= 1LL << v31;
      *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v31) = v28;
      uint64_t v56 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v31);
      *uint64_t v56 = v14;
      v56[1] = v13;
      uint64_t v57 = _swiftEmptyDictionarySingleton[2];
      BOOL v51 = __OFADD__(v57, 1LL);
      uint64_t v58 = v57 + 1;
      if (v51) {
        goto LABEL_68;
      }
      _swiftEmptyDictionarySingleton[2] = v58;
      id v59 = v28;
LABEL_54:

      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_10000EF20(v14, v13, 0);
    }
  }

  int64_t v9 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    uint64_t v74 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v74);
    __break(1u);
    return result;
  }

  if (v9 >= v76) {
    goto LABEL_59;
  }
  unint64_t v10 = *(void *)(v75 + 8 * v9);
  ++v5;
  if (v10) {
    goto LABEL_21;
  }
  int64_t v5 = v9 + 1;
  if (v9 + 1 >= v76) {
    goto LABEL_59;
  }
  unint64_t v10 = *(void *)(v75 + 8 * v5);
  if (v10) {
    goto LABEL_21;
  }
  int64_t v5 = v9 + 2;
  if (v9 + 2 >= v76) {
    goto LABEL_59;
  }
  unint64_t v10 = *(void *)(v75 + 8 * v5);
  if (v10)
  {
LABEL_21:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v5 << 6);
    goto LABEL_22;
  }

  int64_t v11 = v9 + 3;
  if (v11 < v76)
  {
    unint64_t v10 = *(void *)(v75 + 8 * v11);
    if (!v10)
    {
      while (1)
      {
        int64_t v5 = v11 + 1;
        if (__OFADD__(v11, 1LL)) {
          goto LABEL_70;
        }
        if (v5 >= v76) {
          goto LABEL_59;
        }
        unint64_t v10 = *(void *)(v75 + 8 * v5);
        ++v11;
        if (v10) {
          goto LABEL_21;
        }
      }
    }

    int64_t v5 = v11;
    goto LABEL_21;
  }

LABEL_59:
  swift_release(v1);
  uint64_t v64 = *(void *)(v0 + 80);
  uint64_t v65 = *(void *)(v0 + 88);
  uint64_t v66 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v64);
  uint64_t v67 = sub_10007B074(v65, v66);
  id v68 = *(id *)(v0 + 48);
  if (v64)
  {
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v64);
  }

  else
  {
    NSString v69 = 0LL;
  }

  id v70 = objc_allocWithZone(&OBJC_CLASS___TUNearbyDeviceHandle);
  sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
  sub_10000F3C0();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  id v72 = [v70 initWithName:v69 knownIdentifiers:isa deviceModel:v67 capabilities:v68];

  return (uint64_t)v72;
}

uint64_t sub_10000D524(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 56;
  swift_weakInit(v4, 0LL);
  *(void *)(v2 + 64) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  id v5 = [a1 idsDeviceIdentifier];
  if (v5)
  {
    char v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;

    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    *(void *)(v2 + 24) = v9;
    id v10 = [a1 effectiveIdentifier];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    *(void *)(v2 + 32) = v11;
    *(void *)(v2 + 40) = v13;
    *(void *)(v2 + 48) = sub_10000D684();
    id v14 = [a1 accountAltDSID];
    if (v14)
    {
      int v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = v17;
    }

    else
    {
      uint64_t v16 = 0LL;
      uint64_t v18 = 0LL;
    }

    *(void *)(v2 + 104) = v16;
    *(void *)(v2 + 112) = v18;
    sub_10000E690(a1);
  }

  else
  {

    swift_weakDestroy(v4);
    swift_bridgeObjectRelease(*(void *)(v2 + 64));
    swift_bridgeObjectRelease(*(void *)(v2 + 80));
    swift_bridgeObjectRelease(*(void *)(v2 + 96));
    uint64_t v19 = type metadata accessor for ConduitDevice();
    swift_deallocPartialClassInstance(v2, v19, 120LL, 7LL);
    return 0LL;
  }

  return v2;
}

id sub_10000D684()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000360C(&qword_1000CE108);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [v0 sourceVersion];
  if (v5)
  {
    char v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;

    uint64_t v47 = v7;
    uint64_t v48 = v9;
    uint64_t v45 = 3158068LL;
    unint64_t v46 = 0xE300000000000000LL;
    uint64_t v10 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v4, 1LL, 1LL, v10);
    unint64_t v11 = sub_10000F248();
    uint64_t v12 = StringProtocol.compare<A>(_:options:range:locale:)( &v45,  64LL,  0LL,  0LL,  1LL,  v4,  &type metadata for String,  &type metadata for String,  v11,  v11);
    sub_10000F28C((uint64_t)v4);
    swift_bridgeObjectRelease(v9);
    BOOL v13 = v12 != -1;
  }

  else
  {
    BOOL v13 = 1LL;
  }

  uint64_t v14 = sub_10000360C(&qword_1000CDE20);
  uint64_t inited = swift_initStackObject(v14, v49);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A9840;
  *(void *)(inited + 32) = 0x355654656C707041LL;
  *(void *)(inited + 40) = 0xEA0000000000332CLL;
  *(void *)(inited + 48) = 0x365654656C707041LL;
  *(void *)(inited + 56) = 0xEA0000000000322CLL;
  id v16 = [v1 model];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v20 = v19;

    LOBYTE(v17) = sub_10000F120(v18, v20, (void *)inited);
    swift_bridgeObjectRelease(inited);
    swift_bridgeObjectRelease(v20);
    char v21 = v17 ^ 1;
  }

  else
  {
    swift_bridgeObjectRelease(inited);
    char v21 = 1;
  }

  id v22 = [v1 sourceVersion];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v26 = v25;

    uint64_t v47 = v24;
    uint64_t v48 = v26;
    uint64_t v45 = 3158069LL;
    unint64_t v46 = 0xE300000000000000LL;
    uint64_t v27 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v4, 1LL, 1LL, v27);
    unint64_t v28 = sub_10000F248();
    uint64_t v29 = StringProtocol.compare<A>(_:options:range:locale:)( &v45,  64LL,  0LL,  0LL,  1LL,  v4,  &type metadata for String,  &type metadata for String,  v28,  v28);
    sub_10000F28C((uint64_t)v4);
    swift_bridgeObjectRelease(v26);
    v21 &= v29 != -1;
  }

  unsigned int v30 = [v1 statusFlags];
  unint64_t v31 = (unint64_t)[v1 statusFlags];
  BOOL v32 = (v21 & 1) != 0 && (*(void *)&v30 & 0x80000LL | v31 & 0x1000000000LL) != 0;
  id v33 = [objc_allocWithZone(TUFeatureFlags) init];
  unsigned int v34 = [v33 lagunaAudioCallsEnabled];

  if (v34 && (id v35 = [v1 sourceVersion]) != 0)
  {
    unint64_t v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v39 = v38;

    uint64_t v47 = v37;
    uint64_t v48 = v39;
    uint64_t v45 = 0x302E35372E303135LL;
    unint64_t v46 = 0xE800000000000000LL;
    uint64_t v40 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v4, 1LL, 1LL, v40);
    unint64_t v41 = sub_10000F248();
    uint64_t v42 = StringProtocol.compare<A>(_:options:range:locale:)( &v45,  64LL,  0LL,  0LL,  1LL,  v4,  &type metadata for String,  &type metadata for String,  v41,  v41);
    sub_10000F28C((uint64_t)v4);
    swift_bridgeObjectRelease(v39);
    BOOL v43 = v42 != -1;
  }

  else
  {
    BOOL v43 = 0LL;
  }

  return [objc_allocWithZone(TUNearbyDeviceHandleCapabilities) initWithAVLessCapable:v13 lagunaCapable:v32 audioCallCapable:v43 telephonyRelayCapable:0];
}

uint64_t sub_10000DAA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = 7104878LL;
  v34[0] = 0LL;
  v34[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(66LL);
  uint64_t v35 = 0LL;
  unint64_t v36 = 0xE000000000000000LL;
  v3._countAndFlagsBits = 0x746975646E6F433CLL;
  v3._object = (void *)0xEF20656369766544LL;
  String.append(_:)(v3);
  uint64_t v4 = v0[2];
  id v5 = (void *)v0[3];
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x6669746E65646920LL;
  v7._object = (void *)0xED00003D73726569LL;
  String.append(_:)(v7);
  swift_beginAccess(v0 + 8, v34, 0LL, 0LL);
  uint64_t v8 = v0[8];
  unint64_t v9 = sub_10000F37C();
  uint64_t v10 = swift_bridgeObjectRetain(v8);
  v11._countAndFlagsBits = Set.description.getter(v10, &type metadata for ConduitDevice.Identifier, v9);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v8);
  v13._countAndFlagsBits = 0x3D656D616E20LL;
  v13._object = (void *)0xE600000000000000LL;
  String.append(_:)(v13);
  uint64_t v14 = v1[10];
  if (v14)
  {
    BOOL v32 = (void *)v1[9];
    uint64_t v33 = v14;
    swift_bridgeObjectRetain(v14);
    uint64_t v15 = String.init<A>(reflecting:)(&v32, &type metadata for String);
    unint64_t v17 = v16;
  }

  else
  {
    unint64_t v17 = 0xE300000000000000LL;
    uint64_t v15 = 7104878LL;
  }

  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 0x3D6C65646F6D20LL;
  v19._object = (void *)0xE700000000000000LL;
  String.append(_:)(v19);
  uint64_t v20 = v1[12];
  if (v20)
  {
    BOOL v32 = (void *)v1[11];
    uint64_t v33 = v20;
    swift_bridgeObjectRetain(v20);
    uint64_t v2 = String.init<A>(reflecting:)(&v32, &type metadata for String);
    id v22 = v21;
  }

  else
  {
    id v22 = (void *)0xE300000000000000LL;
  }

  v23._countAndFlagsBits = v2;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 0x6C69626170616320LL;
  v24._object = (void *)0xEE003D7365697469LL;
  String.append(_:)(v24);
  BOOL v32 = (void *)v1[6];
  uint64_t v25 = v32;
  uint64_t v26 = sub_1000052E0(0LL, &qword_1000CE138, &OBJC_CLASS___TUNearbyDeviceHandleCapabilities_ptr);
  id v27 = v25;
  v28._countAndFlagsBits = String.init<A>(reflecting:)(&v32, v26);
  uint64_t v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._countAndFlagsBits = 62LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  return v35;
}

uint64_t sub_10000DD10()
{
  uint64_t v1 = v0;
  id v2 = [v0 effectiveIdentifier];
  unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  id v5 = v4;

  Hasher.init(_seed:)(v92, *((void *)&_swiftEmptySetSingleton + 5));
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 41LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  String.hash(into:)(v92, 0xD000000000000023LL, 0x80000001000A3BA0LL);
  swift_bridgeObjectRelease(0x80000001000A3BA0LL);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v13 = v12 + 24 * v10;
      if (*(unsigned __int8 *)(v13 + 16) >= 2u)
      {
        uint64_t v14 = *(void **)(v13 + 8);
        BOOL v15 = *(void *)v13 == v3 && v14 == v5;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v13, v14, v3, v5, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v10 = (v10 + 1) & v11;
    }

    unint64_t v16 = &_swiftEmptySetSingleton;
  }

  else
  {
LABEL_11:
    swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
    uint64_t v91 = &_swiftEmptySetSingleton;
    unint64_t v19 = *((void *)&_swiftEmptySetSingleton + 2);
    unint64_t v18 = *((void *)&_swiftEmptySetSingleton + 3);
    uint64_t result = swift_bridgeObjectRetain(v5);
    if (v18 <= v19)
    {
      uint64_t v21 = v19 + 1;
      if (isUniquelyReferenced_nonNull_native) {
        sub_100090CD0(v21);
      }
      else {
        sub_100093FAC(v21);
      }
      Hasher.init(_seed:)(v92, *((void *)&_swiftEmptySetSingleton + 5));
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v22._countAndFlagsBits = v3;
      v22._object = v5;
      String.append(_:)(v22);
      v23._countAndFlagsBits = 41LL;
      v23._object = (void *)0xE100000000000000LL;
      String.append(_:)(v23);
      String.hash(into:)(v92, 0xD000000000000023LL, 0x80000001000A3BA0LL);
      swift_bridgeObjectRelease(0x80000001000A3BA0LL);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
      unint64_t v10 = result & ~v24;
      if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0)
      {
        uint64_t v25 = ~v24;
        uint64_t v26 = *((void *)&_swiftEmptySetSingleton + 6);
        do
        {
          uint64_t v27 = v26 + 24 * v10;
          if (*(unsigned __int8 *)(v27 + 16) >= 2u)
          {
            Swift::String v28 = *(void **)(v27 + 8);
            if (*(void *)v27 == v3 && v28 == v5) {
              goto LABEL_85;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v27, v28, v3, v5, 0LL);
            if ((result & 1) != 0) {
              goto LABEL_85;
            }
          }

          unint64_t v10 = (v10 + 1) & v25;
        }

        while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0);
      }
    }

    else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10009346C();
    }

    *(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v10;
    uint64_t v30 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v10;
    *(void *)uint64_t v30 = v3;
    *(void *)(v30 + 8) = v5;
    *(_BYTE *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
    uint64_t v31 = *((void *)&_swiftEmptySetSingleton + 2);
    BOOL v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (v32)
    {
      __break(1u);
      goto LABEL_91;
    }

    *((void *)&_swiftEmptySetSingleton + 2) = v33;
    unint64_t v16 = (void *)0x8000000000000000LL;
  }

  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v5);
  id v34 = [v1 idsDeviceIdentifier];
  if (!v34) {
    goto LABEL_59;
  }
  uint64_t v35 = v34;
  unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  id v5 = v36;

  Hasher.init(_seed:)(v92, *((void *)&_swiftEmptySetSingleton + 5));
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v37._countAndFlagsBits = v3;
  v37._object = v5;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 41LL;
  v38._object = (void *)0xE100000000000000LL;
  String.append(_:)(v38);
  String.hash(into:)(v92, 0xD000000000000023LL, 0x80000001000A3C00LL);
  swift_bridgeObjectRelease(0x80000001000A3C00LL);
  Swift::Int v39 = Hasher._finalize()();
  uint64_t v40 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v41 = v39 & ~v40;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v41) & 1) != 0)
  {
    uint64_t v42 = ~v40;
    uint64_t v43 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v44 = v43 + 24 * v41;
      if (!*(_BYTE *)(v44 + 16))
      {
        uint64_t v45 = *(void **)(v44 + 8);
        BOOL v46 = *(void *)v44 == v3 && v45 == v5;
        if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v44, v45, v3, v5, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v41 = (v41 + 1) & v42;
    }

    uint64_t v47 = &_swiftEmptySetSingleton;
    goto LABEL_58;
  }

LABEL_40:
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  int v48 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
  uint64_t v91 = &_swiftEmptySetSingleton;
  unint64_t v50 = *((void *)&_swiftEmptySetSingleton + 2);
  unint64_t v49 = *((void *)&_swiftEmptySetSingleton + 3);
  uint64_t result = swift_bridgeObjectRetain(v5);
  if (v49 <= v50)
  {
    uint64_t v51 = v50 + 1;
    if (v48) {
      sub_100090CD0(v51);
    }
    else {
      sub_100093FAC(v51);
    }
    Hasher.init(_seed:)(v92, *((void *)&_swiftEmptySetSingleton + 5));
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v52._countAndFlagsBits = v3;
    v52._object = v5;
    String.append(_:)(v52);
    v53._countAndFlagsBits = 41LL;
    v53._object = (void *)0xE100000000000000LL;
    String.append(_:)(v53);
    String.hash(into:)(v92, 0xD000000000000023LL, 0x80000001000A3C00LL);
    swift_bridgeObjectRelease(0x80000001000A3C00LL);
    uint64_t result = Hasher._finalize()();
    uint64_t v54 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
    unint64_t v41 = result & ~v54;
    if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v41) & 1) != 0)
    {
      uint64_t v55 = ~v54;
      uint64_t v56 = *((void *)&_swiftEmptySetSingleton + 6);
      do
      {
        uint64_t v57 = v56 + 24 * v41;
        if (!*(_BYTE *)(v57 + 16))
        {
          uint64_t v58 = *(void **)(v57 + 8);
          if (*(void *)v57 == v3 && v58 == v5) {
            goto LABEL_85;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v57, v58, v3, v5, 0LL);
          if ((result & 1) != 0) {
            goto LABEL_85;
          }
        }

        unint64_t v41 = (v41 + 1) & v55;
      }

      while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v41) & 1) != 0);
    }
  }

  else if ((v48 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10009346C();
  }

  *(void *)((char *)&_swiftEmptySetSingleton + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v41;
  uint64_t v60 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v41;
  *(void *)uint64_t v60 = v3;
  *(void *)(v60 + 8) = v5;
  *(_BYTE *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v61 = *((void *)&_swiftEmptySetSingleton + 2);
  BOOL v32 = __OFADD__(v61, 1LL);
  uint64_t v62 = v61 + 1;
  if (v32)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  *((void *)&_swiftEmptySetSingleton + 2) = v62;
  uint64_t v47 = (void *)0x8000000000000000LL;
LABEL_58:
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v5);
LABEL_59:
  id v63 = objc_msgSend(v1, "mediaRouteIdentifier", v91);
  if (!v63) {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v64 = v63;
  id v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v1 = v65;

  Hasher.init(_seed:)(v92, *((void *)&_swiftEmptySetSingleton + 5));
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v66._countAndFlagsBits = (uint64_t)v5;
  v66._object = v1;
  String.append(_:)(v66);
  v67._countAndFlagsBits = 41LL;
  v67._object = (void *)0xE100000000000000LL;
  String.append(_:)(v67);
  String.hash(into:)(v92, 0xD000000000000024LL, 0x80000001000A3BD0LL);
  swift_bridgeObjectRelease(0x80000001000A3BD0LL);
  Swift::Int v68 = Hasher._finalize()();
  uint64_t v69 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v3 = v68 & ~v69;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v3) & 1) != 0)
  {
    uint64_t v70 = ~v69;
    uint64_t v71 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v72 = v71 + 24 * v3;
      if (*(_BYTE *)(v72 + 16) == 1)
      {
        uint64_t v73 = *(void **)(v72 + 8);
        BOOL v74 = *(void **)v72 == v5 && v73 == v1;
        if (v74 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v72, v73, v5, v1, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v3 = (v3 + 1) & v70;
    }

    uint64_t v75 = &_swiftEmptySetSingleton;
    goto LABEL_88;
  }

    uint64_t v143 = (id)TUMakeNeighborhoodConduitError(21LL, 0LL);
    swift_willThrow(v143);

LABEL_41:
    uint64_t v72 = *(void *)(v0 + 176);
    uint64_t v73 = *(void *)(v0 + 152);
    uint64_t v75 = *(void *)(v0 + 136);
    BOOL v74 = *(void *)(v0 + 144);
    unint64_t v77 = *(void *)(v0 + 112);
    int v76 = *(void *)(v0 + 120);
    uint64_t v79 = *(void *)(v0 + 96);
    unint64_t v78 = *(void *)(v0 + 104);
    Swift::String v80 = *(void *)(v0 + 88);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8LL))(v72, *(void *)(v0 + 160));
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_release(v4);
  return swift_release(a1);
}

LABEL_70:
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  int v76 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
  unint64_t v78 = *((void *)&_swiftEmptySetSingleton + 2);
  unint64_t v77 = *((void *)&_swiftEmptySetSingleton + 3);
  uint64_t result = swift_bridgeObjectRetain(v1);
  if (v77 > v78)
  {
    if ((v76 & 1) == 0) {
      uint64_t result = (uint64_t)sub_10009346C();
    }
    goto LABEL_86;
  }

  uint64_t v79 = v78 + 1;
  if (v76) {
    sub_100090CD0(v79);
  }
  else {
    sub_100093FAC(v79);
  }
  Hasher.init(_seed:)(v92, *((void *)&_swiftEmptySetSingleton + 5));
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v80._countAndFlagsBits = (uint64_t)v5;
  v80._object = v1;
  String.append(_:)(v80);
  v81._countAndFlagsBits = 41LL;
  v81._object = (void *)0xE100000000000000LL;
  String.append(_:)(v81);
  String.hash(into:)(v92, 0xD000000000000024LL, 0x80000001000A3BD0LL);
  swift_bridgeObjectRelease(0x80000001000A3BD0LL);
  uint64_t result = Hasher._finalize()();
  uint64_t v82 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v3 = result & ~v82;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v3 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v3) & 1) != 0)
  {
    uint64_t v83 = ~v82;
    uint64_t v84 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v85 = v84 + 24 * v3;
      if (*(_BYTE *)(v85 + 16) == 1)
      {
        id v86 = *(void **)(v85 + 8);
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v85, v86, v5, v1, 0LL);
        if ((result & 1) != 0) {
          break;
        }
      }

      unint64_t v3 = (v3 + 1) & v83;
    }

LABEL_85:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ConduitDevice.Identifier);
    __break(1u);
  }

LABEL_86:
  *(void *)((char *)&_swiftEmptySetSingleton + ((v3 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v3;
  uint64_t v88 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v3;
  *(void *)uint64_t v88 = v5;
  *(void *)(v88 + 8) = v1;
  *(_BYTE *)(v88 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  uint64_t v89 = *((void *)&_swiftEmptySetSingleton + 2);
  BOOL v32 = __OFADD__(v89, 1LL);
  uint64_t v90 = v89 + 1;
  if (!v32)
  {
    *((void *)&_swiftEmptySetSingleton + 2) = v90;
    uint64_t v75 = (void *)0x8000000000000000LL;
LABEL_88:
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

LABEL_92:
  __break(1u);
  return result;
}

        __break(1u);
        return result;
      }

      uint64_t v44 = v36 + 4;
LABEL_65:
      uint64_t v72 = (v43 - 1) & v43;
      BOOL v74 = v44;
      unint64_t v41 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_66:
      uint64_t v70 = v41;
      BOOL v46 = *(void *)(v5 + 48) + 24 * v41;
      uint64_t v47 = *(void *)v46;
      int v48 = *(void **)(v46 + 8);
      unint64_t v49 = *(unsigned __int8 *)(v46 + 16);
      Hasher.init(_seed:)(v80, *(void *)(v4 + 40));
      if (v49)
      {
        swift_bridgeObjectRetain(v48);
        if (v49 == 1)
        {
          _StringGuts.grow(_:)(39LL);
          swift_bridgeObjectRelease(0xE000000000000000LL);
          unint64_t v77 = 0xD000000000000024LL;
          unint64_t v50 = 0x80000001000A3BD0LL;
        }

        else
        {
          _StringGuts.grow(_:)(38LL);
          swift_bridgeObjectRelease(0xE000000000000000LL);
          unint64_t v77 = 0xD000000000000023LL;
          unint64_t v50 = 0x80000001000A3BA0LL;
        }
      }

      else
      {
        swift_bridgeObjectRetain(v48);
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        unint64_t v77 = 0xD000000000000023LL;
        unint64_t v50 = 0x80000001000A3C00LL;
      }

      uint64_t v79 = v50;
      v51._countAndFlagsBits = v47;
      v51._object = v48;
      String.append(_:)(v51);
      v52._countAndFlagsBits = 41LL;
      v52._object = (void *)0xE100000000000000LL;
      String.append(_:)(v52);
      String.hash(into:)(v80, v77, v79);
      swift_bridgeObjectRelease(v79);
      Swift::String v53 = Hasher._finalize()();
      uint64_t v54 = -1LL << *(_BYTE *)(v4 + 32);
      uint64_t v55 = v53 & ~v54;
      if (((*(void *)(v40 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v55) & 1) == 0)
      {
LABEL_49:
        uint64_t result = sub_10000EF20(v47, (uint64_t)v48, v49);
        id v5 = v81;
        unint64_t v36 = v74;
        uint64_t v4 = a4;
        Swift::Int v39 = v72;
        continue;
      }

      break;
    }

    uint64_t v56 = ~v54;
    uint64_t v57 = *(void *)(a4 + 48);
    while (2)
    {
      uint64_t v58 = (uint64_t *)(v57 + 24 * v55);
      id v59 = *v58;
      uint64_t v60 = (void *)v58[1];
      uint64_t v61 = *((unsigned __int8 *)v58 + 16);
      if (!*((_BYTE *)v58 + 16))
      {
        if (!v49) {
          goto LABEL_80;
        }
        goto LABEL_74;
      }

      if (v61 != 1)
      {
        if (v49 == 2) {
          goto LABEL_80;
        }
        goto LABEL_74;
      }

      if (v49 != 1) {
        goto LABEL_74;
      }
LABEL_80:
      uint64_t v62 = v59 == v47 && v60 == v48;
      if (!v62 && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v47, v48, 0LL) & 1) == 0)
      {
LABEL_74:
        uint64_t v55 = (v55 + 1) & v56;
        if (((*(void *)(v40 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v55) & 1) == 0) {
          goto LABEL_49;
        }
        continue;
      }

      break;
    }

    uint64_t result = sub_10000EF20(v47, (uint64_t)v48, v61);
    *(unint64_t *)((char *)v64 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v70;
    uint64_t v35 = __OFADD__(v68++, 1LL);
    id v5 = v81;
    unint64_t v36 = v74;
    uint64_t v4 = a4;
    Swift::Int v39 = v72;
    if (!v35) {
      continue;
    }
    break;
  }

  __break(1u);
LABEL_88:
  swift_retain(v5);
  return sub_100078FF8(v64, a2, v68, v5);
}

void sub_10000E690(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000DD10();
  swift_beginAccess(v2 + 64, v24, 33LL, 0LL);
  sub_10000E870(v4);
  swift_endAccess(v24);
  id v5 = [a1 name];
  if (v5)
  {
    Swift::String v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v9 = v8;

    uint64_t v10 = *(void *)(v2 + 80);
    *(void *)(v2 + 72) = v7;
    *(void *)(v2 + 80) = v9;
    swift_bridgeObjectRelease(v10);
  }

  id v11 = [a1 model];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    uint64_t v16 = *(void *)(v2 + 96);
    *(void *)(v2 + 88) = v13;
    *(void *)(v2 + 96) = v15;
    swift_bridgeObjectRelease(v16);
  }

  id v17 = sub_10000D684();
  else {
    uint64_t v18 = (uint64_t)[v17 isLagunaCapable];
  }
  else {
    uint64_t v19 = (uint64_t)[v17 isLagunaCapable];
  }
  else {
    uint64_t v20 = (uint64_t)[v17 isAudioCallCapable];
  }
  else {
    uint64_t v21 = (uint64_t)[v17 isTelephonyRelayCapable];
  }
  id v22 = [objc_allocWithZone(TUNearbyDeviceHandleCapabilities) initWithAVLessCapable:v18 lagunaCapable:v19 audioCallCapable:v20 telephonyRelayCapable:v21];

  Swift::String v23 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = v22;
}

uint64_t sub_10000E870(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v7) {
      return swift_release(v1);
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      int64_t v2 = v14 + 1;
      if (v14 + 1 >= v7) {
        return swift_release(v1);
      }
      unint64_t v15 = *(void *)(v3 + 8 * v2);
      if (!v15)
      {
        int64_t v2 = v14 + 2;
        if (v14 + 2 >= v7) {
          return swift_release(v1);
        }
        unint64_t v15 = *(void *)(v3 + 8 * v2);
        if (!v15)
        {
          int64_t v2 = v14 + 3;
          if (v14 + 3 >= v7) {
            return swift_release(v1);
          }
          unint64_t v15 = *(void *)(v3 + 8 * v2);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_22:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v9 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(v1 + 48) + 24 * v9;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *(void **)(v10 + 8);
    char v13 = *(_BYTE *)(v10 + 16);
    sub_10000EEF8(*(void *)v10, (uint64_t)v12, v13);
    sub_10008F204((uint64_t)v17, v11, v12, v13);
    uint64_t result = sub_10000EF20(v17[0], v17[1], v18);
  }

  int64_t v16 = v14 + 4;
  if (v16 >= v7) {
    return swift_release(v1);
  }
  unint64_t v15 = *(void *)(v3 + 8 * v16);
  if (v15)
  {
    int64_t v2 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v2 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release(v1);
    }
    unint64_t v15 = *(void *)(v3 + 8 * v2);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

        uint64_t v71 = (v15 - 1) & v15;
        uint64_t v73 = v16;
        char v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }

      unsigned __int8 v18 = *(void *)(v4 + 48) + 24 * v13;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void **)(v18 + 8);
      uint64_t v21 = *(unsigned __int8 *)(v18 + 16);
      Hasher.init(_seed:)(v80, *(void *)(v5 + 40));
      if (v21)
      {
        swift_bridgeObjectRetain(v20);
        if (v21 == 1)
        {
          _StringGuts.grow(_:)(39LL);
          swift_bridgeObjectRelease(0xE000000000000000LL);
          int v76 = 0xD000000000000024LL;
          id v22 = 0x80000001000A3BD0LL;
        }

        else
        {
          _StringGuts.grow(_:)(38LL);
          swift_bridgeObjectRelease(0xE000000000000000LL);
          int v76 = 0xD000000000000023LL;
          id v22 = 0x80000001000A3BA0LL;
        }
      }

      else
      {
        swift_bridgeObjectRetain(v20);
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        int v76 = 0xD000000000000023LL;
        id v22 = 0x80000001000A3C00LL;
      }

      unint64_t v78 = v22;
      v23._countAndFlagsBits = v19;
      v23._object = v20;
      String.append(_:)(v23);
      v24._countAndFlagsBits = 41LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      String.hash(into:)(v80, v76, v78);
      swift_bridgeObjectRelease(v78);
      uint64_t v25 = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v5 + 32);
      uint64_t v27 = v25 & ~v26;
      if (((*(void *)(v12 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0)
      {
LABEL_6:
        uint64_t result = sub_10000EF20(v19, (uint64_t)v20, v21);
        uint64_t v5 = v81;
        unint64_t v8 = v73;
        uint64_t v4 = a4;
        uint64_t v11 = v71;
        continue;
      }

      break;
    }

    Swift::String v28 = ~v26;
    uint64_t v29 = *(void *)(v81 + 48);
    while (1)
    {
      uint64_t v30 = (uint64_t *)(v29 + 24 * v27);
      uint64_t v31 = *v30;
      BOOL v32 = (void *)v30[1];
      uint64_t v33 = *((unsigned __int8 *)v30 + 16);
      if (!*((_BYTE *)v30 + 16))
      {
        if (!v21) {
          goto LABEL_37;
        }
        goto LABEL_31;
      }

      if (v33 != 1) {
        break;
      }
      if (v21 == 1) {
        goto LABEL_37;
      }
LABEL_31:
      uint64_t v27 = (v27 + 1) & v28;
      if (((*(void *)(v12 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0) {
        goto LABEL_6;
      }
    }

    if (v21 != 2) {
      goto LABEL_31;
    }
LABEL_37:
    id v34 = v31 == v19 && v32 == v20;
    if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v19, v20, 0LL) & 1) == 0) {
      goto LABEL_31;
    }
    uint64_t result = sub_10000EF20(v19, (uint64_t)v20, v33);
    *(unint64_t *)((char *)v64 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
    uint64_t v35 = __OFADD__(v68++, 1LL);
    uint64_t v5 = v81;
    unint64_t v8 = v73;
    uint64_t v4 = a4;
    uint64_t v11 = v71;
    if (!v35) {
      continue;
    }
    break;
  }

  __break(1u);
LABEL_45:
  unint64_t v36 = 0LL;
  uint64_t v65 = v5 + 56;
  Swift::String v37 = 1LL << *(_BYTE *)(v5 + 32);
  if (v37 < 64) {
    Swift::String v38 = ~(-1LL << v37);
  }
  else {
    Swift::String v38 = -1LL;
  }
  Swift::Int v39 = v38 & *(void *)(v5 + 56);
  Swift::String v67 = (unint64_t)(v37 + 63) >> 6;
  Swift::Int v68 = 0LL;
  uint64_t v40 = v4 + 56;
  while (2)
  {
    while (2)
    {
      if (v39)
      {
        uint64_t v72 = (v39 - 1) & v39;
        BOOL v74 = v36;
        unint64_t v41 = __clz(__rbit64(v39)) | (v36 << 6);
        goto LABEL_66;
      }

      uint64_t v42 = v36 + 1;
      if (__OFADD__(v36, 1LL)) {
        goto LABEL_90;
      }
      if (v42 >= v67) {
        goto LABEL_88;
      }
      uint64_t v43 = *(void *)(v65 + 8 * v42);
      uint64_t v44 = v36 + 1;
      if (v43) {
        goto LABEL_65;
      }
      uint64_t v44 = v36 + 2;
      if (v36 + 2 >= v67) {
        goto LABEL_88;
      }
      uint64_t v43 = *(void *)(v65 + 8 * v44);
      if (v43) {
        goto LABEL_65;
      }
      uint64_t v44 = v36 + 3;
      if (v36 + 3 >= v67) {
        goto LABEL_88;
      }
      uint64_t v43 = *(void *)(v65 + 8 * v44);
      if (v43) {
        goto LABEL_65;
      }
      uint64_t v45 = v36 + 4;
      if (v36 + 4 >= v67) {
        goto LABEL_88;
      }
      uint64_t v43 = *(void *)(v65 + 8 * v45);
      if (!v43)
      {
        while (1)
        {
          uint64_t v44 = v45 + 1;
          if (__OFADD__(v45, 1LL)) {
            break;
          }
          if (v44 >= v67) {
            goto LABEL_88;
          }
          uint64_t v43 = *(void *)(v65 + 8 * v44);
          ++v45;
          if (v43) {
            goto LABEL_65;
          }
        }

        Swift::Int v39 = (v12 - 1) & v12;
        unint64_t v41 = v13;
        uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      }

      unint64_t v15 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v10);
      id v17 = *v15;
      int64_t v16 = v15[1];
      Hasher.init(_seed:)(&__s1, *(void *)(a3 + 40));
      sub_1000109D4(v17, v16);
      Data.hash(into:)(&__s1, v17, v16);
      unsigned __int8 v18 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a3 + 32));
      if (((*(void *)(v43 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0) {
        __asm { BR              X8 }
      }

      sub_10000BE18(v17, v16);
      unint64_t v9 = v39;
      unint64_t v6 = v41;
    }
  }

  uint64_t v19 = 0LL;
  id v34 = a3 + 56;
  uint64_t v20 = 1LL << *(_BYTE *)(a3 + 32);
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  else {
    uint64_t v21 = -1LL;
  }
  id v22 = v21 & *(void *)(a3 + 56);
  Swift::String v37 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v44 = a4 + 56;
  while (1)
  {
    if (v22)
    {
      uint64_t v40 = (v22 - 1) & v22;
      uint64_t v42 = v19;
      Swift::String v23 = __clz(__rbit64(v22)) | (v19 << 6);
      goto LABEL_46;
    }

    uint64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_50:
      __break(1u);
      JUMPOUT(0x1000358FCLL);
    }

    if (v24 >= v37) {
      goto LABEL_48;
    }
    uint64_t v25 = *(void *)(v34 + 8 * v24);
    uint64_t v26 = v19 + 1;
    if (!v25)
    {
      uint64_t v26 = v19 + 2;
      if (v19 + 2 >= v37) {
        goto LABEL_48;
      }
      uint64_t v25 = *(void *)(v34 + 8 * v26);
      if (!v25)
      {
        uint64_t v26 = v19 + 3;
        if (v19 + 3 >= v37) {
          goto LABEL_48;
        }
        uint64_t v25 = *(void *)(v34 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }

        int64_t v7 = (v17 - 1) & v17;
        unint64_t v8 = __clz(__rbit64(v17)) + (v9 << 6);
      }

      char v13 = *(id *)(*(void *)(v6 + 48) + 8 * v8);
    }

    *(void *)(v0 + 168) = v9;
    *(void *)(v0 + 176) = v7;
    *(void *)(v0 + 160) = v13;
    if (!v13) {
      break;
    }
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v20 = swift_task_alloc(32LL);
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    uint64_t v21 = sub_10000465C( &qword_1000CFE48,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
    static Message.with(_:)(sub_100095718, v20, v19, v21);
    swift_task_dealloc(v20);
    id v22 = [v13 deviceHandle];
    Swift::String v23 = [v22 knownIdentifiersByHandleType];
    uint64_t v24 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v25 = sub_100017D34( (unint64_t *)&qword_1000CF810,  (unint64_t *)&qword_1000CD8C8,  &OBJC_CLASS___NSNumber_ptr);
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, &type metadata for String, v25);

    uint64_t v27 = [objc_allocWithZone(NSNumber) initWithInteger:2];
    Swift::String v28 = v27;
    if (*(void *)(v26 + 16))
    {
      uint64_t v29 = sub_100004DA4((uint64_t)v27);
      if ((v30 & 1) != 0)
      {
        uint64_t v43 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v29);
        uint64_t v1 = *v43;
        int64_t v2 = v43[1];
        *(void *)(v0 + 184) = v2;
        swift_bridgeObjectRetain(v2);
        swift_bridgeObjectRelease(v26);

        if (qword_1000CD638 == -1) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
    }

    swift_bridgeObjectRelease(v26);
    uint64_t v31 = [v13 deviceHandle];
    BOOL v32 = [v31 knownIdentifiersByHandleType];
    uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, v24, &type metadata for String, v25);

    id v34 = [objc_allocWithZone(NSNumber) initWithInteger:0];
    uint64_t v35 = v34;
    if (*(void *)(v33 + 16))
    {
      unint64_t v36 = sub_100004DA4((uint64_t)v34);
      if ((v37 & 1) != 0)
      {
        unint64_t v49 = (uint64_t *)(*(void *)(v33 + 56) + 16 * v36);
        uint64_t v51 = *v49;
        unint64_t v50 = v49[1];
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v50;
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRelease(v33);

        if (qword_1000CD638 != -1) {
          swift_once(&qword_1000CD638, sub_10001FF5C);
        }
        *(void *)(v0 + 224) = qword_1000D35C8;
        Swift::String v52 = (void *)swift_task_alloc(dword_1000CFE44);
        *(void *)(v0 + 232) = v52;
        *Swift::String v52 = v0;
        v52[1] = sub_10008DBDC;
        uint64_t v45 = *(void *)(v0 + 112);
        BOOL v46 = v51;
        uint64_t v47 = v50;
        int v48 = 2;
        return sub_1000534D8(5, v45, v46, v47, v48);
      }
    }

    swift_bridgeObjectRelease(v33);
    Swift::String v38 = v13;
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v38);
    Swift::Int v39 = static os_log_type_t.error.getter();
    uint64_t v1 = v39;
    if (os_log_type_enabled(v3, v39))
    {
      uint64_t v40 = swift_slowAlloc(12LL, -1LL);
      unint64_t v41 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v40 = 138412290;
      *(void *)(v40 + 4) = v38;
      *unint64_t v41 = v13;

      _os_log_impl( (void *)&_mh_execute_header,  v3,  (os_log_type_t)v1,  "Could not find device for %@",  (uint8_t *)v40,  0xCu);
      uint64_t v42 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v41, 1LL, v42);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      uint64_t v3 = (os_log_s *)v38;
    }
  }

  unint64_t v6 = *(void *)(v0 + 136);
LABEL_38:
  uint64_t v54 = *(void *)(v0 + 112);
  sub_10000B7D8(v6);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

        int64_t v7 = (v17 - 1) & v17;
        unint64_t v8 = __clz(__rbit64(v17)) + (v9 << 6);
      }

      char v13 = *(id *)(*(void *)(v6 + 48) + 8 * v8);
    }

    *(void *)(v0 + 168) = v9;
    *(void *)(v0 + 176) = v7;
    *(void *)(v0 + 160) = v13;
    if (!v13) {
      break;
    }
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v20 = swift_task_alloc(32LL);
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    uint64_t v21 = sub_10000465C( &qword_1000CFE48,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
    static Message.with(_:)(sub_100095718, v20, v19, v21);
    swift_task_dealloc(v20);
    id v22 = [v13 deviceHandle];
    Swift::String v23 = [v22 knownIdentifiersByHandleType];
    uint64_t v24 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v25 = sub_100017D34( (unint64_t *)&qword_1000CF810,  (unint64_t *)&qword_1000CD8C8,  &OBJC_CLASS___NSNumber_ptr);
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, &type metadata for String, v25);

    uint64_t v27 = [objc_allocWithZone(NSNumber) initWithInteger:2];
    Swift::String v28 = v27;
    if (*(void *)(v26 + 16))
    {
      uint64_t v29 = sub_100004DA4((uint64_t)v27);
      if ((v30 & 1) != 0)
      {
        uint64_t v43 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v29);
        uint64_t v1 = *v43;
        int64_t v2 = v43[1];
        *(void *)(v0 + 184) = v2;
        swift_bridgeObjectRetain(v2);
        swift_bridgeObjectRelease(v26);

        if (qword_1000CD638 == -1) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
    }

    swift_bridgeObjectRelease(v26);
    uint64_t v31 = [v13 deviceHandle];
    BOOL v32 = [v31 knownIdentifiersByHandleType];
    uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, v24, &type metadata for String, v25);

    id v34 = [objc_allocWithZone(NSNumber) initWithInteger:0];
    uint64_t v35 = v34;
    if (*(void *)(v33 + 16))
    {
      unint64_t v36 = sub_100004DA4((uint64_t)v34);
      if ((v37 & 1) != 0)
      {
        unint64_t v49 = (uint64_t *)(*(void *)(v33 + 56) + 16 * v36);
        uint64_t v51 = *v49;
        unint64_t v50 = v49[1];
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v50;
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRelease(v33);

        if (qword_1000CD638 != -1) {
          swift_once(&qword_1000CD638, sub_10001FF5C);
        }
        *(void *)(v0 + 224) = qword_1000D35C8;
        Swift::String v52 = (void *)swift_task_alloc(dword_1000CFE44);
        *(void *)(v0 + 232) = v52;
        *Swift::String v52 = v0;
        v52[1] = sub_10008DBDC;
        uint64_t v45 = *(void *)(v0 + 112);
        BOOL v46 = v51;
        uint64_t v47 = v50;
        int v48 = 2;
        return sub_1000534D8(5, v45, v46, v47, v48);
      }
    }

    swift_bridgeObjectRelease(v33);
    Swift::String v38 = v13;
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v38);
    Swift::Int v39 = static os_log_type_t.error.getter();
    uint64_t v1 = v39;
    if (os_log_type_enabled(v3, v39))
    {
      uint64_t v40 = swift_slowAlloc(12LL, -1LL);
      unint64_t v41 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v40 = 138412290;
      *(void *)(v40 + 4) = v38;
      *unint64_t v41 = v13;

      _os_log_impl( (void *)&_mh_execute_header,  v3,  (os_log_type_t)v1,  "Could not find device for %@",  (uint8_t *)v40,  0xCu);
      uint64_t v42 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v41, 1LL, v42);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      uint64_t v3 = (os_log_s *)v38;
    }
  }

  unint64_t v6 = *(void *)(v0 + 136);
LABEL_38:
  uint64_t v54 = *(void *)(v0 + 112);
  sub_10000B7D8(v6);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

        int64_t v7 = (v17 - 1) & v17;
        unint64_t v8 = __clz(__rbit64(v17)) + (v9 << 6);
      }

      char v13 = *(id *)(*(void *)(v6 + 48) + 8 * v8);
    }

    *(void *)(v0 + 168) = v9;
    *(void *)(v0 + 176) = v7;
    *(void *)(v0 + 160) = v13;
    if (!v13) {
      break;
    }
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v20 = swift_task_alloc(32LL);
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
    uint64_t v21 = sub_10000465C( &qword_1000CFE48,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
    static Message.with(_:)(sub_100095718, v20, v19, v21);
    swift_task_dealloc(v20);
    id v22 = [v13 deviceHandle];
    Swift::String v23 = [v22 knownIdentifiersByHandleType];
    uint64_t v24 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v25 = sub_100017D34( (unint64_t *)&qword_1000CF810,  (unint64_t *)&qword_1000CD8C8,  &OBJC_CLASS___NSNumber_ptr);
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, &type metadata for String, v25);

    uint64_t v27 = [objc_allocWithZone(NSNumber) initWithInteger:2];
    Swift::String v28 = v27;
    if (*(void *)(v26 + 16))
    {
      uint64_t v29 = sub_100004DA4((uint64_t)v27);
      if ((v30 & 1) != 0)
      {
        uint64_t v43 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v29);
        uint64_t v1 = *v43;
        int64_t v2 = v43[1];
        *(void *)(v0 + 184) = v2;
        swift_bridgeObjectRetain(v2);
        swift_bridgeObjectRelease(v26);

        if (qword_1000CD638 == -1) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
    }

    swift_bridgeObjectRelease(v26);
    uint64_t v31 = [v13 deviceHandle];
    BOOL v32 = [v31 knownIdentifiersByHandleType];
    uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, v24, &type metadata for String, v25);

    id v34 = [objc_allocWithZone(NSNumber) initWithInteger:0];
    uint64_t v35 = v34;
    if (*(void *)(v33 + 16))
    {
      unint64_t v36 = sub_100004DA4((uint64_t)v34);
      if ((v37 & 1) != 0)
      {
        unint64_t v49 = (uint64_t *)(*(void *)(v33 + 56) + 16 * v36);
        uint64_t v51 = *v49;
        unint64_t v50 = v49[1];
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v50;
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRelease(v33);

        if (qword_1000CD638 != -1) {
          swift_once(&qword_1000CD638, sub_10001FF5C);
        }
        *(void *)(v0 + 224) = qword_1000D35C8;
        Swift::String v52 = (void *)swift_task_alloc(dword_1000CFE44);
        *(void *)(v0 + 232) = v52;
        *Swift::String v52 = v0;
        v52[1] = sub_10008DBDC;
        uint64_t v45 = *(void *)(v0 + 112);
        BOOL v46 = v51;
        uint64_t v47 = v50;
        int v48 = 2;
        return sub_1000534D8(5, v45, v46, v47, v48);
      }
    }

    swift_bridgeObjectRelease(v33);
    Swift::String v38 = v13;
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v38);
    Swift::Int v39 = static os_log_type_t.error.getter();
    uint64_t v1 = v39;
    if (os_log_type_enabled(v3, v39))
    {
      uint64_t v40 = swift_slowAlloc(12LL, -1LL);
      unint64_t v41 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v40 = 138412290;
      *(void *)(v40 + 4) = v38;
      *unint64_t v41 = v13;

      _os_log_impl( (void *)&_mh_execute_header,  v3,  (os_log_type_t)v1,  "Could not find device for %@",  (uint8_t *)v40,  0xCu);
      uint64_t v42 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v41, 1LL, v42);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      uint64_t v3 = (os_log_s *)v38;
    }
  }

  unint64_t v6 = *(void *)(v0 + 136);
LABEL_38:
  uint64_t v54 = *(void *)(v0 + 112);
  sub_10000B7D8(v6);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  Swift::String v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
  }
  return result;
}

    int64_t v7 = (v20 - 1) & v20;
    uint64_t v11 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = 16 * v11;
    char v13 = (uint64_t *)(*(void *)(a1 + 48) + v12);
    int64_t v14 = *v13;
    unint64_t v15 = v13[1];
    int64_t v16 = (uint64_t *)(*(void *)(a1 + 56) + v12);
    id v17 = *v16;
    unsigned __int8 v18 = v16[1];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    LOBYTE(v17) = a2(v14, v15, v17, v18);
    swift_bridgeObjectRelease(v18);
    uint64_t result = swift_bridgeObjectRelease(v15);
    if ((v17 & 1) != 0)
    {
      id v22 = 1LL;
LABEL_25:
      swift_release(a1);
      return v22;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

LABEL_25:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v42, (uint64_t)qword_1000D3620);
    uint64_t v43 = swift_bridgeObjectRetain(v7);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    uint64_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      BOOL v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v47 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v47;
      *(_DWORD *)BOOL v46 = 136380675;
      int v48 = swift_bridgeObjectRetain(v7);
      unint64_t v49 = Array.description.getter(v48, &type metadata for String);
      uint64_t v51 = v50;
      swift_bridgeObjectRelease(v7);
      *(void *)(v54 + 32) = sub_10009BE3C(v49, v51, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v54 + 32, v54 + 40, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease_n(v7, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Error generating local device handle -- missing caller id. URIs: %{private}s",  v46,  0xCu);
      swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v7, 2LL);
    }

    Swift::String v52 = (id)TUMakeNeighborhoodConduitError(12LL, 0LL);
    swift_willThrow(v52);
    BOOL v32 = v54;
    return (*(uint64_t (**)(void))(v32 + 8))();
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    id v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    unsigned __int8 v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    id v22 = (void *)(*(void *)(v4 + 56) + v18);
    *id v22 = v20;
    v22[1] = v21;
    Swift::String v23 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    unint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    int64_t v14 = (v21 - 1) & v21;
    int64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    id v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    unsigned __int8 v18 = 8 * v16;
    uint64_t v19 = *(void **)(*(void *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = v19;
  }

  id v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    sub_100005160(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    id v17 = 32 * v15;
    sub_100036EA0(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    unsigned __int8 v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)unsigned __int8 v18 = v19;
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    uint64_t result = sub_100004E20(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  Swift::String v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  id v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    unint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unsigned __int8 v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_retain(v20);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  Swift::String v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    Swift::String v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    int64_t v14 = (v21 - 1) & v21;
    int64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    id v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    unsigned __int8 v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain(v19);
  }

  id v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    id v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    unsigned __int8 v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100036EA0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_100004E20(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  Swift::String v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    Swift::String v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    id v17 = *(void **)(*(void *)(v2 + 48) + v16);
    unsigned __int8 v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(void *)(*(void *)(v4 + 56) + vswift_unknownObjectWeakDestroy(v0 + 16) = v18;
    uint64_t v19 = v17;
    uint64_t result = v18;
  }

  id v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

        unint64_t v9 = (v25 - 1) & v25;
        int64_t v14 = __clz(__rbit64(v25)) + (v12 << 6);
      }

      unint64_t v15 = *(void *)(v3 + 48) + 24 * v14;
      int64_t v16 = *(void *)v15;
      id v17 = *(void **)(v15 + 8);
      unsigned __int8 v18 = *(_BYTE *)(v15 + 16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      uint64_t v19 = sub_10000C47C(v16, v17, v18);
      uint64_t v21 = v20;
      String.hash(into:)(v30, v19, v20);
      swift_bridgeObjectRelease(v21);
      id v22 = Hasher._finalize()();
      uint64_t result = _HashTable.nextHole(atOrAfter:)( v22 & ~(-1LL << *(_BYTE *)(v6 + 32)),  v6 + 56,  ~(-1LL << *(_BYTE *)(v6 + 32)));
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
      Swift::String v23 = *(void *)(v6 + 48) + 24 * result;
      *(void *)Swift::String v23 = v16;
      *(void *)(v23 + 8) = v17;
      *(_BYTE *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *int64_t v2 = v6;
  return result;
}

    id v17 = (v27 - 1) & v27;
    id v59 = v28;
    uint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_26:
    uint64_t v30 = *(void *)(v11 + 48);
    uint64_t v31 = *(void *)(v57 + 72);
    sub_100018D40(v30 + v31 * v25, (uint64_t)v10);
    Hasher.init(_seed:)(v60, *(void *)(v13 + 40));
    uint64_t v33 = *v10;
    BOOL v32 = v10[1];
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v60, v33, v32);
    swift_bridgeObjectRelease(v32);
    id v34 = type metadata accessor for UUID(0LL);
    uint64_t v35 = sub_10000465C( (unint64_t *)&qword_1000CD8F8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v60, v34, v35);
    unint64_t v36 = *(id *)((char *)v10 + v21[6]);
    NSObject.hash(into:)(v60);

    sub_1000956D0((uint64_t)v10 + v21[7], (uint64_t)v8);
    Swift::String v37 = v58;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1LL, v58) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Swift::String v38 = v8;
      Swift::Int v39 = v51;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v51, v38, v37);
      Hasher._combine(_:)(1u);
      uint64_t v40 = sub_10000465C( &qword_1000CF820,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
      dispatch thunk of Hashable.hash(into:)(v60, v37, v40);
      unint64_t v41 = v39;
      unint64_t v8 = v38;
      uint64_t v21 = (int *)v52;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v41, v37);
    }

    Hasher._combine(_:)(*(uint64_t *)((char *)v10 + v21[8]));
    uint64_t result = Hasher._finalize()();
    uint64_t v42 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v43 = result & ~v42;
    uint64_t v44 = v43 >> 6;
    if (((-1LL << v43) & ~*(void *)(v18 + 8 * (v43 >> 6))) != 0)
    {
      Swift::String v23 = __clz(__rbit64((-1LL << v43) & ~*(void *)(v18 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v45 = 0;
      BOOL v46 = (unint64_t)(63 - v42) >> 6;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }

        uint64_t v47 = v44 == v46;
        if (v44 == v46) {
          uint64_t v44 = 0LL;
        }
        v45 |= v47;
        int v48 = *(void *)(v18 + 8 * v44);
      }

      while (v48 == -1);
      Swift::String v23 = __clz(__rbit64(~v48)) + (v44 << 6);
    }

    *(void *)(v18 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t result = sub_100018D40((uint64_t)v10, *(void *)(v13 + 48) + v23 * v31);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v55;
    uint64_t v20 = v59;
  }

  uint64_t v29 = v20 + 4;
  if (v20 + 4 < v53)
  {
    uint64_t v27 = v54[v29];
    if (!v27)
    {
      while (1)
      {
        Swift::String v28 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_44;
        }
        if (v28 >= v53) {
          goto LABEL_38;
        }
        uint64_t v27 = v54[v28];
        ++v29;
        if (v27) {
          goto LABEL_25;
        }
      }
    }

    Swift::String v28 = v20 + 4;
    goto LABEL_25;
  }

    unint64_t v9 = (v25 - 1) & v25;
    int64_t v14 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_10:
    unint64_t v15 = *(void *)(v3 + 48) + 24 * v14;
    int64_t v16 = *(void *)v15;
    id v17 = *(void **)(v15 + 8);
    unsigned __int8 v18 = *(_BYTE *)(v15 + 16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    sub_10000EEF8(v16, (uint64_t)v17, v18);
    uint64_t v19 = sub_10000C47C(v16, v17, v18);
    uint64_t v21 = v20;
    String.hash(into:)(v29, v19, v20);
    swift_bridgeObjectRelease(v21);
    id v22 = Hasher._finalize()();
    uint64_t result = _HashTable.nextHole(atOrAfter:)( v22 & ~(-1LL << *(_BYTE *)(v6 + 32)),  v6 + 56,  ~(-1LL << *(_BYTE *)(v6 + 32)));
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    Swift::String v23 = *(void *)(v6 + 48) + 24 * result;
    *(void *)Swift::String v23 = v16;
    *(void *)(v23 + 8) = v17;
    *(_BYTE *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
    ++*(void *)(v6 + 16);
  }

  uint64_t v26 = v24 + 3;
  if (v26 >= v28)
  {
LABEL_26:
    swift_release(v3);
    goto LABEL_27;
  }

  uint64_t v25 = *(void *)(v27 + 8 * v26);
  if (v25)
  {
    uint64_t v12 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v12 >= v28) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v27 + 8 * v12);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    id v17 = (v28 - 1) & v28;
    uint64_t v60 = v29;
    uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_26:
    uint64_t v31 = *(void *)(v21 + 48);
    id v59 = *(void *)(v57 + 72);
    sub_10004EA38(v31 + v59 * v26, (uint64_t)v10);
    Hasher.init(_seed:)(v61, *(void *)(v13 + 40));
    uint64_t v33 = *v10;
    BOOL v32 = v10[1];
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v61, v33, v32);
    swift_bridgeObjectRelease(v32);
    id v34 = type metadata accessor for UUID(0LL);
    uint64_t v35 = sub_10000465C( (unint64_t *)&qword_1000CD8F8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v61, v34, v35);
    unint64_t v36 = *(id *)((char *)v10 + v22[6]);
    NSObject.hash(into:)(v61);

    sub_1000956D0((uint64_t)v10 + v22[7], (uint64_t)v8);
    Swift::String v37 = v58;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v8, 1LL, v58) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Swift::String v38 = v13;
      Swift::Int v39 = v21;
      uint64_t v40 = v8;
      unint64_t v41 = v52;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v52, v40, v37);
      Hasher._combine(_:)(1u);
      uint64_t v42 = sub_10000465C( &qword_1000CF820,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
      dispatch thunk of Hashable.hash(into:)(v61, v37, v42);
      uint64_t v43 = v41;
      unint64_t v8 = v40;
      uint64_t v21 = v39;
      char v13 = v38;
      id v22 = (int *)v53;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v43, v37);
    }

    Hasher._combine(_:)(*(uint64_t *)((char *)v10 + v22[8]));
    uint64_t result = Hasher._finalize()();
    uint64_t v44 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v45 = result & ~v44;
    BOOL v46 = v45 >> 6;
    if (((-1LL << v45) & ~*(void *)(v18 + 8 * (v45 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1LL << v45) & ~*(void *)(v18 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v47 = 0;
      int v48 = (unint64_t)(63 - v44) >> 6;
      do
      {
        if (++v46 == v48 && (v47 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }

        unint64_t v49 = v46 == v48;
        if (v46 == v48) {
          BOOL v46 = 0LL;
        }
        v47 |= v49;
        unint64_t v50 = *(void *)(v18 + 8 * v46);
      }

      while (v50 == -1);
      uint64_t v24 = __clz(__rbit64(~v50)) + (v46 << 6);
    }

    *(void *)(v18 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    uint64_t result = sub_100018D40((uint64_t)v10, *(void *)(v13 + 48) + v24 * v59);
    ++*(void *)(v13 + 16);
    uint64_t v20 = v60;
  }

  uint64_t v30 = v20 + 4;
  if (v20 + 4 >= v55)
  {
LABEL_38:
    uint64_t result = swift_release_n(v21, 2LL);
    int64_t v2 = v51;
    goto LABEL_40;
  }

  Swift::String v28 = *(void *)(v54 + 8 * v30);
  if (v28)
  {
    uint64_t v29 = v20 + 4;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v29 >= v55) {
      goto LABEL_38;
    }
    Swift::String v28 = *(void *)(v54 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_25;
    }
  }

uint64_t sub_10000E9FC()
{
  *(void *)(v1 + 80) = v0;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v2 = qword_1000D35C8;
  *(void *)(v1 + 88) = qword_1000D35C8;
  return swift_task_switch(sub_10000EA64, v2, 0LL);
}

uint64_t sub_10000EA64()
{
  if (swift_weakLoadStrong(*(void *)(v0 + 80) + 56LL)) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v2 = *(void *)(v0 + 80);
  p_weak_ivar_lyt = *(void ***)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = qword_1000CD640;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t Strong = swift_weakLoadStrong(qword_1000D35D0 + 176);
    if (!Strong)
    {
      char v19 = 0;
      goto LABEL_28;
    }

    uint64_t v27 = Strong;
    id v7 = [*(id *)(Strong + 16) activeDevices];
    uint64_t v8 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CE128, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    uint64_t v10 = *(void *)(v0 + 80);
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain(*(void *)(v0 + 80));
    swift_bridgeObjectRetain(v9);
    if (!v11) {
      goto LABEL_26;
    }
LABEL_7:
    uint64_t v25 = v4;
    uint64_t v26 = p_weak_ivar_lyt;
    Swift::String v28 = (uint64_t *)(v10 + 64);
    swift_beginAccess(v10 + 64, v0 + 56, 0LL, 0LL);
    uint64_t v4 = 0LL;
    p_weak_ivar_lyt = &Defaults.weak_ivar_lyt;
    while (1)
    {
      id v12 = (v9 & 0xC000000000000001LL) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v9)
          : *(id *)(v9 + 8 * v4 + 32);
      char v13 = v12;
      uint64_t v14 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        break;
      }
      if (([v12 statusFlags] & 2) != 0)
      {
        uint64_t v15 = *v28;
        swift_bridgeObjectRetain(*v28);
        uint64_t v16 = sub_10000DD10();
        uint64_t v17 = sub_100033AC4(v16, v15);
        swift_bridgeObjectRelease(v16);
        uint64_t v18 = *(void *)(v17 + 16);

        swift_release(v17);
        if (v18)
        {
          swift_release(*(void *)(v0 + 80));
          char v19 = 1;
LABEL_19:
          uint64_t v4 = v25;
          p_weak_ivar_lyt = v26;
          goto LABEL_27;
        }
      }

      else
      {
      }

      ++v4;
      if (v14 == v11)
      {
        swift_release(*(void *)(v0 + 80));
        char v19 = 0;
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_21:
    swift_once(&qword_1000CD640, sub_1000202C4);
  }

  if (v9 < 0) {
    uint64_t v20 = v9;
  }
  else {
    uint64_t v20 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain(*(void *)(v0 + 80));
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
  uint64_t v10 = *(void *)(v0 + 80);
  if (v11) {
    goto LABEL_7;
  }
LABEL_26:
  swift_release(v10);
  char v19 = 0;
LABEL_27:
  swift_bridgeObjectRelease_n(v9, 2LL);
  swift_release(v27);
LABEL_28:
  id v21 = [objc_allocWithZone(RPCompanionLinkClient) init];
  *(void *)(v0 + 40) = sub_1000052E0(0LL, &qword_1000CE118, &OBJC_CLASS___RPCompanionLinkClient_ptr);
  *(void *)(v0 + 48) = &off_1000C5EA8;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  uint64_t v22 = type metadata accessor for ConduitDevice.ConnectionAssertion();
  Swift::String v23 = (void *)swift_allocObject(v22, 72LL, 7LL);
  uint64_t v24 = swift_task_alloc(dword_1000CE124);
  *(void *)(v0 + 96) = v24;
  *(void *)uint64_t v24 = v0;
  *(void *)(v24 + 8) = sub_10000ED7C;
  *(void *)(v24 + 184) = v0 + 16;
  *(void *)(v24 + 192) = v23;
  *(_BYTE *)(v24 + 240) = v19;
  *(void *)(v24 + 168) = p_weak_ivar_lyt;
  *(void *)(v24 + 176) = v4;
  *(void *)(v24 + 200) = *v23;
  return swift_task_switch(sub_10000C6F4, 0LL, 0LL);
}

uint64_t sub_10000ED7C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 88);
  if (v1)
  {
    id v7 = sub_10000EE34;
  }

  else
  {
    *(void *)(v4 + 112) = a1;
    id v7 = sub_10000EDF4;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10000EDF4()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 112));
}

uint64_t sub_10000EE34()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000EE40()
{
  swift_weakDestroy(v0 + 56);
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  return v0;
}

uint64_t sub_10000EE94()
{
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t type metadata accessor for ConduitDevice()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService13ConduitDevice);
}

uint64_t type metadata accessor for ConduitDevice.ConnectionAssertion()
{
  return objc_opt_self(&OBJC_CLASS____TtCC44com_apple_NeighborhoodActivityConduitService13ConduitDevice19ConnectionAssertion);
}

uint64_t sub_10000EEF8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for ConduitDevice.Identifier(uint64_t a1)
{
  return sub_10000EF20(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10000EF20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s44com_apple_NeighborhoodActivityConduitService13ConduitDeviceC10IdentifierOwCP_0( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_10000EEF8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ConduitDevice.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_10000EEF8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_10000EF20(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for ConduitDevice.Identifier(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ConduitDevice.Identifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_10000EF20(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConduitDevice.Identifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConduitDevice.Identifier( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10000F0B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10000F0C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConduitDevice.Identifier()
{
  return &type metadata for ConduitDevice.Identifier;
}

unint64_t sub_10000F0DC()
{
  unint64_t result = qword_1000CE100;
  if (!qword_1000CE100)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9920, &type metadata for ConduitDevice.Identifier);
    atomic_store(result, (unint64_t *)&qword_1000CE100);
  }

  return result;
}

uint64_t sub_10000F120(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10000F1E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6) {
      goto LABEL_4;
    }
    return 0LL;
  }

  if (a3 != 1)
  {
    if (a6 == 2) {
      goto LABEL_4;
    }
    return 0LL;
  }

  if (a6 != 1) {
    return 0LL;
  }
LABEL_4:
  if (a1 == a4 && a2 == a5) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
  }
}

unint64_t sub_10000F248()
{
  unint64_t result = qword_1000CE110;
  if (!qword_1000CE110)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000CE110);
  }

  return result;
}

uint64_t sub_10000F28C(uint64_t a1)
{
  uint64_t v2 = sub_10000360C(&qword_1000CE108);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10000F2CC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_10000F2F0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000F310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000F354(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

unint64_t sub_10000F37C()
{
  unint64_t result = qword_1000CE130;
  if (!qword_1000CE130)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A98E0, &type metadata for ConduitDevice.Identifier);
    atomic_store(result, (unint64_t *)&qword_1000CE130);
  }

  return result;
}

unint64_t sub_10000F3C0()
{
  unint64_t result = qword_1000CF810;
  if (!qword_1000CF810)
  {
    uint64_t v1 = sub_1000052E0(255LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000CF810);
  }

  return result;
}

id CSDConversationManager.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id CSDConversationManager.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22CSDConversationManager_queue;
  sub_10000F4A4();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = static OS_dispatch_queue.main.getter();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for CSDConversationManager();
  return objc_msgSendSuper2(&v4, "init");
}

unint64_t sub_10000F4A4()
{
  unint64_t result = qword_1000CD710;
  if (!qword_1000CD710)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000CD710);
  }

  return result;
}

uint64_t type metadata accessor for CSDConversationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService22CSDConversationManager);
}

id CSDConversationManager.__deallocating_deinit()
{
  return sub_10000F5EC(type metadata accessor for CSDConversationManager);
}

void CSDMessagingConversationParticipantDidJoinContext.init()()
{
}

id CSDMessagingConversationParticipantDidJoinContext.__deallocating_deinit()
{
  return sub_10000F5EC(type metadata accessor for CSDMessagingConversationParticipantDidJoinContext);
}

id sub_10000F5EC(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for CSDMessagingConversationParticipantDidJoinContext()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService49CSDMessagingConversationParticipantDidJoinContext);
}

void sub_10000F640(uint64_t a1)
{
  int64_t v2 = 0LL;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v3;
  int64_t v24 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v3) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v2 + 1;
  if (!__OFADD__(v2, 1LL))
  {
    if (v10 < v24)
    {
      unint64_t v11 = *(void *)(v4 + 8 * v10);
      ++v2;
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v24) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v2);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 2;
      if (v10 + 2 >= v24) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v2);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v2 = v10 + 3;
      if (v10 + 3 >= v24) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v2);
      if (v11)
      {
LABEL_22:
        unint64_t v7 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v2 << 6); ; unint64_t i = v8 | (v2 << 6))
        {
          id v13 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          id v14 = [v13 iCloudAltDSID];
          if (!v14) {
            goto LABEL_5;
          }

          id v15 = [v13 iCloudAltDSID];
          if (!v15) {
            goto LABEL_33;
          }
          BOOL v16 = v15;
          uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
          unint64_t v19 = v18;

          uint64_t v20 = swift_bridgeObjectRelease(v19);
          uint64_t v21 = HIBYTE(v19) & 0xF;
          if ((v19 & 0x2000000000000000LL) == 0) {
            uint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
          }
          if (v21)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
            uint64_t v22 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
            uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v13);
            specialized ContiguousArray._endMutation()(v23);
            if (!v7) {
              goto LABEL_7;
            }
          }

          else
          {
LABEL_5:

            if (!v7) {
              goto LABEL_7;
            }
          }

LABEL_6:
          unint64_t v8 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }

      int64_t v12 = v10 + 4;
      if (v12 < v24)
      {
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (v11)
        {
          int64_t v2 = v12;
          goto LABEL_22;
        }

        while (1)
        {
          int64_t v2 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_32;
          }
          if (v2 >= v24) {
            break;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v2);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
      }
    }

          int64_t v10 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }

      id v14 = v12 + 4;
      if (v14 < v23)
      {
        id v13 = *(void *)(v4 + 8 * v14);
        if (v13)
        {
          int64_t v2 = v14;
          goto LABEL_22;
        }

        while (1)
        {
          int64_t v2 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_32;
          }
          if (v2 >= v23) {
            break;
          }
          id v13 = *(void *)(v4 + 8 * v2);
          ++v14;
          if (v13) {
            goto LABEL_22;
          }
        }
      }
    }

void sub_10000F878(uint64_t a1)
{
  int64_t v2 = 0LL;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & v3;
  int64_t v23 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v3) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1LL))
  {
    if (v12 < v23)
    {
      unint64_t v13 = *(void *)(v4 + 8 * v12);
      ++v2;
      if (v13) {
        goto LABEL_22;
      }
      int64_t v2 = v12 + 1;
      if (v12 + 1 >= v23) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v2);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v2 = v12 + 2;
      if (v12 + 2 >= v23) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v2);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v2 = v12 + 3;
      if (v12 + 3 >= v23) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v2);
      if (v13)
      {
LABEL_22:
        unint64_t v7 = (v13 - 1) & v13;
        for (unint64_t i = __clz(__rbit64(v13)) + (v2 << 6); ; unint64_t i = v10 | (v2 << 6))
        {
          id v15 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          id v16 = [v15 iCloudAltDSID];
          if (!v16) {
            goto LABEL_5;
          }

          id v17 = [v15 iCloudAltDSID];
          if (!v17) {
            goto LABEL_33;
          }
          unint64_t v18 = v17;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          unint64_t v21 = v20;

          id v16 = (id)swift_bridgeObjectRelease(v21);
          uint64_t v22 = HIBYTE(v21) & 0xF;
          if ((v21 & 0x2000000000000000LL) == 0) {
            uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
          }
          if (v22)
          {

            if (!v7) {
              goto LABEL_7;
            }
          }

          else
          {
LABEL_5:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
            uint64_t v8 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
            uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v15);
            specialized ContiguousArray._endMutation()(v9);
            if (!v7) {
              goto LABEL_7;
            }
          }

uint64_t sub_10000FAB0(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (!v4) {
      return (uint64_t)v5;
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t result = sub_10009C434(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v7 = 0LL;
    uint64_t v5 = v27;
    unint64_t v17 = v3 & 0xC000000000000001LL;
    uint64_t v18 = v3;
    while (v4 != v7)
    {
      if (v17) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v7 + 32);
      }
      id v9 = v8;
      swift_bridgeObjectRetain(a3);
      sub_10001EC9C(v9, a2, a3, v23);
      uint64_t v10 = v23[0];
      uint64_t v11 = v23[1];
      __int128 v21 = v25;
      __int128 v22 = v24;
      uint64_t v12 = v26;

      uint64_t v27 = v5;
      unint64_t v14 = v5[2];
      unint64_t v13 = v5[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009C434(v13 > 1, v14 + 1, 1);
        uint64_t v5 = v27;
      }

      ++v7;
      v5[2] = v14 + 1;
      id v15 = &v5[8 * v14];
      v15[4] = v9;
      v15[5] = v10;
      v15[6] = v11;
      *(_OWORD *)(v15 + 7) = v22;
      *(_OWORD *)(v15 + 9) = v21;
      v15[11] = v12;
      uint64_t v3 = v18;
      if (v4 == v7) {
        return (uint64_t)v5;
      }
    }

    __break(1u);
LABEL_15:
    if (v3 < 0) {
      uint64_t v16 = v3;
    }
    else {
      uint64_t v16 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v3);
  }

  __break(1u);
  return result;
}

id sub_10000FC68(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  sub_10001098C(a1, (uint64_t)v120);
  uint64_t v3 = v121;
  uint64_t v2 = v122;
  unint64_t v5 = v123;
  uint64_t v4 = v124;
  unint64_t v7 = v125;
  uint64_t v6 = v126;
  sub_10001098C((uint64_t)v1, (uint64_t)v127);
  if (*((void *)&v127[0] + 1))
  {
    __int128 v129 = v127[0];
    __int128 v130 = v127[1];
    __int128 v131 = v127[2];
    uint64_t v132 = v128;
    id v8 = (void *)objc_opt_self(&OBJC_CLASS___PBSUserProfileManager);
    swift_bridgeObjectRetain(v3);
    sub_1000109D4(v2, v5);
    sub_1000109D4(v4, v7);
    swift_bridgeObjectRetain(v6);
    id v9 = [v8 sharedInstance];
    id v10 = [v9 userProfilesSnapshot];

    id v11 = [v10 userProfiles];
    unint64_t v108 = sub_100010A18();
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for String,  v108,  &protocol witness table for String);

    unint64_t v13 = (void *)*((void *)&v129 + 1);
    uint64_t v14 = v129;
    swift_bridgeObjectRetain(*((void *)&v129 + 1));
    uint64_t v15 = swift_bridgeObjectRetain(v12);
    sub_10000F640(v15);
    unint64_t v17 = v16;
    swift_bridgeObjectRetain(v13);
    uint64_t v18 = sub_10000FAB0(v17, v14, v13);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v13);
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v109 = v12;
    uint64_t v110 = v1;
    if (v19)
    {
      os_log_t log = (os_log_t)v14;
      uint64_t v105 = v13;
      swift_bridgeObjectRetain(v18);
      uint64_t v20 = 0LL;
      uint64_t v111 = v18;
      while (1)
      {
        uint64_t v21 = v18 + v20;
        uint64_t v22 = *(void *)(v18 + v20 + 48);
        uint64_t v23 = *(void *)(v18 + v20 + 56);
        unint64_t v25 = *(void *)(v18 + v20 + 64);
        uint64_t v24 = *(void *)(v18 + v20 + 72);
        unint64_t v27 = *(void *)(v18 + v20 + 80);
        uint64_t v26 = *(void *)(v18 + v20 + 88);
        Swift::String v28 = *(void **)(v21 + 32);
        uint64_t v137 = *(void *)(v21 + 40);
        uint64_t v138 = v22;
        uint64_t v139 = v23;
        unint64_t v140 = v25;
        uint64_t v141 = v24;
        unint64_t v142 = v27;
        uint64_t v143 = v26;
        id v29 = v28;
        swift_bridgeObjectRetain(v22);
        sub_1000109D4(v23, v25);
        sub_1000109D4(v24, v27);
        swift_bridgeObjectRetain(v26);
        sub_10001D1E0();
        if ((v30 & 1) != 0) {
          break;
        }
        swift_bridgeObjectRelease(v22);

        sub_10000BE18(v23, v25);
        sub_10000BE18(v24, v27);
        swift_bridgeObjectRelease(v26);
        v20 += 64LL;
        --v19;
        uint64_t v18 = v111;
        if (!v19)
        {
          swift_bridgeObjectRelease(v111);
          uint64_t v12 = v109;
          uint64_t v1 = v110;
          uint64_t v14 = (uint64_t)log;
          unint64_t v13 = v105;
          goto LABEL_7;
        }
      }

      swift_bridgeObjectRelease(v105);
      swift_bridgeObjectRelease_n(v111, 2LL);
      if (qword_1000CD690 != -1) {
        swift_once(&qword_1000CD690, sub_100088E24);
      }
      uint64_t v54 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v54, (uint64_t)qword_1000D3620);
      sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
      id v55 = v29;
      swift_bridgeObjectRetain(v22);
      sub_1000109D4(v23, v25);
      sub_1000109D4(v24, v27);
      unint64_t v56 = v27;
      uint64_t v57 = v24;
      unint64_t v58 = v25;
      uint64_t v59 = v23;
      uint64_t v60 = v22;
      unint64_t v61 = v56;
      swift_bridgeObjectRetain(v26);
      sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
      id v62 = v55;
      swift_bridgeObjectRetain(v60);
      sub_1000109D4(v59, v58);
      sub_1000109D4(v57, v61);
      uint64_t v63 = swift_bridgeObjectRetain(v26);
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v113 = v62;
        uint64_t v66 = swift_slowAlloc(22LL, -1LL);
        uint64_t v106 = swift_slowAlloc(64LL, -1LL);
        *(void *)&__int128 v115 = v106;
        *(_DWORD *)uint64_t v66 = 136315394;
        loga = v64;
        __int128 v133 = v129;
        __int128 v134 = v130;
        __int128 v135 = v131;
        uint64_t v136 = v132;
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
        uint64_t v67 = String.init<A>(reflecting:)(&v133, &type metadata for UserAccountInfo);
        os_log_type_t type = v65;
        unint64_t v69 = v68;
        *(void *)&__int128 v133 = sub_10009BE3C(v67, v68, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 8, v66 + 4, v66 + 12);
        swift_bridgeObjectRelease(v69);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        *(_WORD *)(v66 + 12) = 2080;
        *(void *)&__int128 v133 = v113;
        id v70 = v113;
        uint64_t v71 = String.init<A>(reflecting:)(&v133, v108);
        unint64_t v73 = v72;
        *(void *)&__int128 v133 = sub_10009BE3C(v71, v72, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 8, v66 + 14, v66 + 22);
        swift_bridgeObjectRelease(v60);

        swift_bridgeObjectRelease(v73);
        sub_10000BE18(v59, v58);
        sub_10000BE18(v57, v61);
        swift_bridgeObjectRelease(v60);

        swift_bridgeObjectRelease(v26);
        sub_10000BE18(v59, v58);
        sub_10000BE18(v57, v61);
        swift_bridgeObjectRelease(v26);
        _os_log_impl( (void *)&_mh_execute_header,  loga,  type,  "Found user profile matching %s, profile: %s",  (uint8_t *)v66,  0x16u);
        swift_arrayDestroy(v106, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1LL, -1LL);
        uint64_t v74 = v66;
        id v62 = v113;
        swift_slowDealloc(v74, -1LL, -1LL);

        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        swift_bridgeObjectRelease(v60);
        uint64_t v75 = v109;
      }

      else
      {
        swift_bridgeObjectRelease(v109);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        swift_bridgeObjectRelease(v60);

        sub_10000BE18(v59, v58);
        sub_10000BE18(v57, v61);
        swift_bridgeObjectRelease(v60);

        swift_bridgeObjectRelease(v26);
        sub_10000BE18(v59, v58);
        sub_10000BE18(v57, v61);
        swift_bridgeObjectRelease(v60);

        uint64_t v75 = v26;
      }

      swift_bridgeObjectRelease(v75);
      sub_10000BE18(v59, v58);
      uint64_t v97 = v57;
      unint64_t v98 = v61;
      goto LABEL_30;
    }

LABEL_7:
    swift_bridgeObjectRelease(v18);
    uint64_t v31 = swift_bridgeObjectRetain(v12);
    sub_10000F878(v31);
    unint64_t v33 = v32;
    swift_bridgeObjectRetain(v13);
    uint64_t v34 = sub_10000FAB0(v33, v14, v13);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease_n(v13, 2LL);
    uint64_t v35 = *(void *)(v34 + 16);
    if (v35)
    {
      swift_bridgeObjectRetain(v34);
      uint64_t v36 = 0LL;
      uint64_t v112 = v34;
      while (1)
      {
        uint64_t v38 = *(void *)(v34 + v36 + 48);
        uint64_t v37 = *(void *)(v34 + v36 + 56);
        unint64_t v40 = *(void *)(v34 + v36 + 64);
        uint64_t v39 = *(void *)(v34 + v36 + 72);
        unint64_t v41 = *(void *)(v34 + v36 + 80);
        uint64_t v26 = *(void *)(v34 + v36 + 88);
        uint64_t v42 = *(void **)(v34 + v36 + 32);
        *(void *)&__int128 v133 = *(void *)(v34 + v36 + 40);
        *((void *)&v133 + 1) = v38;
        *(void *)&__int128 v134 = v37;
        *((void *)&v134 + 1) = v40;
        *(void *)&__int128 v135 = v39;
        *((void *)&v135 + 1) = v41;
        uint64_t v136 = v26;
        id v43 = v42;
        swift_bridgeObjectRetain(v38);
        sub_1000109D4(v37, v40);
        sub_1000109D4(v39, v41);
        swift_bridgeObjectRetain(v26);
        sub_10001D1E0();
        if ((v44 & 1) != 0) {
          break;
        }
        swift_bridgeObjectRelease(v38);

        sub_10000BE18(v37, v40);
        sub_10000BE18(v39, v41);
        swift_bridgeObjectRelease(v26);
        v36 += 64LL;
        --v35;
        uint64_t v34 = v112;
        if (!v35)
        {
          swift_bridgeObjectRelease(v112);
          uint64_t v12 = v109;
          uint64_t v1 = v110;
          goto LABEL_12;
        }
      }

      swift_bridgeObjectRelease_n(v112, 2LL);
      if (qword_1000CD690 != -1) {
        swift_once(&qword_1000CD690, sub_100088E24);
      }
      uint64_t v76 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v76, (uint64_t)qword_1000D3620);
      sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
      id v77 = v43;
      swift_bridgeObjectRetain(v38);
      sub_1000109D4(v37, v40);
      sub_1000109D4(v39, v41);
      unint64_t v78 = v41;
      uint64_t v79 = v39;
      unint64_t v80 = v40;
      uint64_t v81 = v37;
      uint64_t v82 = v38;
      unint64_t v83 = v78;
      swift_bridgeObjectRetain(v26);
      sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
      id v62 = v77;
      swift_bridgeObjectRetain(v82);
      sub_1000109D4(v81, v80);
      sub_1000109D4(v79, v83);
      uint64_t v84 = swift_bridgeObjectRetain(v26);
      uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
      os_log_type_t v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v114 = v62;
        uint64_t v87 = swift_slowAlloc(22LL, -1LL);
        uint64_t v107 = swift_slowAlloc(64LL, -1LL);
        uint64_t v119 = v107;
        *(_DWORD *)uint64_t v87 = 136315394;
        __int128 v115 = v129;
        __int128 v116 = v130;
        __int128 v117 = v131;
        uint64_t v118 = v132;
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
        os_log_type_t logb = v86;
        uint64_t v88 = String.init<A>(reflecting:)(&v115, &type metadata for UserAccountInfo);
        typea = v85;
        unint64_t v90 = v89;
        *(void *)&__int128 v115 = sub_10009BE3C(v88, v89, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 8, v87 + 4, v87 + 12);
        swift_bridgeObjectRelease(v90);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        *(_WORD *)(v87 + 12) = 2080;
        *(void *)&__int128 v115 = v114;
        id v91 = v114;
        uint64_t v92 = String.init<A>(reflecting:)(&v115, v108);
        unint64_t v94 = v93;
        *(void *)&__int128 v115 = sub_10009BE3C(v92, v93, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 8, v87 + 14, v87 + 22);
        swift_bridgeObjectRelease(v82);

        swift_bridgeObjectRelease(v94);
        sub_10000BE18(v81, v80);
        sub_10000BE18(v79, v83);
        swift_bridgeObjectRelease(v82);

        swift_bridgeObjectRelease(v26);
        sub_10000BE18(v81, v80);
        sub_10000BE18(v79, v83);
        swift_bridgeObjectRelease(v26);
        _os_log_impl( (void *)&_mh_execute_header,  typea,  logb,  "Found user profile matching %s, profile: %s",  (uint8_t *)v87,  0x16u);
        swift_arrayDestroy(v107, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v107, -1LL, -1LL);
        uint64_t v95 = v87;
        id v62 = v114;
        swift_slowDealloc(v95, -1LL, -1LL);

        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        swift_bridgeObjectRelease(v82);
        uint64_t v96 = v109;
      }

      else
      {
        swift_bridgeObjectRelease(v109);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        sub_100010ABC(v110, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
        swift_bridgeObjectRelease(v82);

        sub_10000BE18(v81, v80);
        sub_10000BE18(v79, v83);
        swift_bridgeObjectRelease(v82);

        swift_bridgeObjectRelease(v26);
        sub_10000BE18(v81, v80);
        sub_10000BE18(v79, v83);
        swift_bridgeObjectRelease(v82);

        uint64_t v96 = v26;
      }

      swift_bridgeObjectRelease(v96);
      sub_10000BE18(v81, v80);
      uint64_t v97 = v79;
      unint64_t v98 = v83;
LABEL_30:
      sub_10000BE18(v97, v98);
      swift_bridgeObjectRelease(v26);
      return v62;
    }

LABEL_12:
    swift_bridgeObjectRelease(v34);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v45, (uint64_t)qword_1000D3620);
    sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
    BOOL v46 = sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v119 = v50;
      *(_DWORD *)unint64_t v49 = 136315138;
      __int128 v115 = v129;
      __int128 v116 = v130;
      __int128 v117 = v131;
      uint64_t v118 = v132;
      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010A54);
      uint64_t v51 = String.init<A>(reflecting:)(&v115, &type metadata for UserAccountInfo);
      unint64_t v53 = v52;
      *(void *)&__int128 v115 = sub_10009BE3C(v51, v52, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 8, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v53);
      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "No user profile matching %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      swift_bridgeObjectRelease(v12);
      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
      sub_100010ABC(v1, (void (*)(void, void, void, void, void, void, void))sub_100010AF4);
    }
  }

  return 0LL;
}

      sub_10004EAC0((uint64_t)v18);
      a2 = (a2 + 1) & v63;
    }

    while (((*(void *)(v26 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

  if ((v14 == 3 || v14 == 2) && (v13 & 0xFFFFFFFFFFFFFFFELL) != 2) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_10001098C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CE198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000109D4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100010A18()
{
  unint64_t result = qword_1000CE1A0;
  if (!qword_1000CE1A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___PBSUserProfile);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000CE1A0);
  }

  return result;
}

uint64_t sub_100010A54( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    sub_1000109D4(a3, a4);
    sub_1000109D4(a5, a6);
    return swift_bridgeObjectRetain(a7);
  }

  return result;
}

void *sub_100010ABC( void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100010AF4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    sub_10000BE18(a3, a4);
    sub_10000BE18(a5, a6);
    return swift_bridgeObjectRelease(a7);
  }

  return result;
}

uint64_t sub_100010B5C(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v34 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 16);
  }

  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_10009C450(0, v2 & ~(v2 >> 63), 0);
    if (v34)
    {
      if (v1 < 0) {
        uint64_t v4 = v1;
      }
      else {
        uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t result = __CocoaSet.startIndex.getter(v4);
      unsigned __int8 v6 = 1;
    }

    else
    {
      uint64_t result = sub_10009CC8C(v1);
      unsigned __int8 v6 = v7 & 1;
    }

    uint64_t v36 = result;
    uint64_t v37 = v5;
    unsigned __int8 v38 = v6;
    if (v2 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
    }

    else
    {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
      if (v1 < 0) {
        uint64_t v8 = v1;
      }
      uint64_t v32 = v8;
      uint64_t v33 = v1;
      do
      {
        while (1)
        {
          uint64_t v15 = v36;
          uint64_t v14 = v37;
          uint64_t v16 = v38;
          sub_10009C9B0(v36, v37, v38, v1);
          uint64_t v18 = v17;
          id v19 = [v17 value];
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          uint64_t v22 = v21;

          uint64_t v23 = v39;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v39);
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10009C450(0, v23[2] + 1LL, 1);
            uint64_t v23 = v39;
          }

          unint64_t v25 = v23[2];
          unint64_t v24 = v23[3];
          if (v25 >= v24 >> 1)
          {
            uint64_t result = sub_10009C450(v24 > 1, v25 + 1, 1);
            uint64_t v23 = v39;
          }

          uint64_t v23[2] = v25 + 1;
          uint64_t v26 = &v23[2 * v25];
          v26[4] = v20;
          v26[5] = v22;
          if (v34) {
            break;
          }
          uint64_t v1 = v33;
          uint64_t v9 = sub_10009C8C8(v15, v14, v16, v33);
          uint64_t v11 = v10;
          char v13 = v12;
          sub_100018054(v15, v14, v16);
          uint64_t v36 = v9;
          uint64_t v37 = v11;
          unsigned __int8 v38 = v13 & 1;
          if (!--v2) {
            goto LABEL_28;
          }
        }

        uint64_t v1 = v33;
        if ((v16 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v27 = __CocoaSet.Index.handleBitPattern.getter(v15, v14);
        if (v27) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v29 = sub_10000360C(&qword_1000CE440);
        char v30 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v35, v29);
        __CocoaSet.formIndex(after:isUnique:)(v31, isUniquelyReferenced_nonNull_native, v32);
        v30(v35, 0LL);
        --v2;
      }

      while (v2);
LABEL_28:
      sub_100018054(v36, v37, v38);
      return (uint64_t)v39;
    }
  }

  return result;
}

uint64_t sub_100010DD4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v34 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 16);
  }

  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_10009C450(0, v2 & ~(v2 >> 63), 0);
    if (v34)
    {
      if (v1 < 0) {
        uint64_t v4 = v1;
      }
      else {
        uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t result = __CocoaSet.startIndex.getter(v4);
      unsigned __int8 v6 = 1;
    }

    else
    {
      uint64_t result = sub_10009CC8C(v1);
      unsigned __int8 v6 = v7 & 1;
    }

    uint64_t v36 = result;
    uint64_t v37 = v5;
    unsigned __int8 v38 = v6;
    if (v2 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
    }

    else
    {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
      if (v1 < 0) {
        uint64_t v8 = v1;
      }
      uint64_t v32 = v8;
      uint64_t v33 = v1;
      do
      {
        while (1)
        {
          uint64_t v15 = v36;
          uint64_t v14 = v37;
          uint64_t v16 = v38;
          sub_10009C9C4(v36, v37, v38, v1);
          uint64_t v18 = v17;
          id v19 = [v17 identifier];
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          uint64_t v22 = v21;

          uint64_t v23 = v39;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v39);
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10009C450(0, v23[2] + 1LL, 1);
            uint64_t v23 = v39;
          }

          unint64_t v25 = v23[2];
          unint64_t v24 = v23[3];
          if (v25 >= v24 >> 1)
          {
            uint64_t result = sub_10009C450(v24 > 1, v25 + 1, 1);
            uint64_t v23 = v39;
          }

          uint64_t v23[2] = v25 + 1;
          uint64_t v26 = &v23[2 * v25];
          v26[4] = v20;
          v26[5] = v22;
          if (v34) {
            break;
          }
          uint64_t v1 = v33;
          uint64_t v9 = sub_10009C8C8(v15, v14, v16, v33);
          uint64_t v11 = v10;
          char v13 = v12;
          sub_100018054(v15, v14, v16);
          uint64_t v36 = v9;
          uint64_t v37 = v11;
          unsigned __int8 v38 = v13 & 1;
          if (!--v2) {
            goto LABEL_28;
          }
        }

        uint64_t v1 = v33;
        if ((v16 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v27 = __CocoaSet.Index.handleBitPattern.getter(v15, v14);
        if (v27) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v29 = sub_10000360C(&qword_1000CFDD0);
        char v30 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v35, v29);
        __CocoaSet.formIndex(after:isUnique:)(v31, isUniquelyReferenced_nonNull_native, v32);
        v30(v35, 0LL);
        --v2;
      }

      while (v2);
LABEL_28:
      sub_100018054(v36, v37, v38);
      return (uint64_t)v39;
    }
  }

  return result;
}

void sub_10001104C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v7 = qword_1000CD690;
  id v8 = a1;
  id v9 = a3;
  id v10 = a5;
  if (v7 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v11, (uint64_t)qword_1000D3620);
  char v12 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received language change, restarting process", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  exit(0);
}

NSString sub_100011124()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1000CE1B0 = (uint64_t)result;
  return result;
}

char *sub_100011158(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  uint64_t v9 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v4[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_systemLanguageChanged] = sub_10001104C;
  uint64_t v12 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_continuitySessionClient;
  uint64_t v13 = qword_1000CD660;
  uint64_t v14 = v4;
  if (v13 != -1) {
    swift_once(&qword_1000CD660, sub_10003EDE8);
  }
  uint64_t v15 = qword_1000D35D8;
  *(void *)&v4[v12] = qword_1000D35D8;
  swift_retain(v15);
  uint64_t v16 = &_swiftEmptySetSingleton;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
      uint64_t v16 = (void *)sub_10009CD18((uint64_t)_swiftEmptyArrayStorage);
    }
    else {
      uint64_t v16 = &_swiftEmptySetSingleton;
    }
  }

  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_cancellables] = v16;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_connections] = &_swiftEmptySetSingleton;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_splitSessionApprovalConnection] = 0LL;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_queue] = a1;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit] = a2;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_suggestionController] = a3;
  id v17 = a1;
  id v18 = a2;
  id v19 = a3;

  v44.receiver = v14;
  v44.super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v44, "init");
  uint64_t v21 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v11, 1LL, 1LL, v21);
  uint64_t v22 = (void *)swift_allocObject(&unk_1000C3240, 48LL, 7LL);
  v22[2] = 0LL;
  v22[3] = 0LL;
  v22[4] = v18;
  v22[5] = v20;
  id v23 = v20;
  unint64_t v24 = (char *)v18;
  unint64_t v25 = (char *)v23;
  uint64_t v26 = sub_10004EC20((uint64_t)v11, (uint64_t)&unk_1000CE550, (uint64_t)v22);
  swift_release(v26);
  v43[0] = *(void *)&v24[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffStateSubject];
  uint64_t v27 = sub_10000360C(&qword_1000CF850);
  uint64_t v28 = sub_100018F4C( &qword_1000CE560,  &qword_1000CF850,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v43[0] = Publisher.eraseToAnyPublisher()(v27, v28);
  uint64_t v29 = swift_allocObject(&unk_1000C30D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v29 + 16, v25);
  uint64_t v30 = sub_10000360C(&qword_1000CE568);
  uint64_t v31 = sub_100018F4C( &qword_1000CE570,  &qword_1000CE568,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v32 = Publisher<>.sink(receiveValue:)(sub_100018F3C, v29, v30, v31);
  swift_release(v29);
  swift_release(v43[0]);
  uint64_t v33 = &v25[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_cancellables];
  swift_beginAccess( &v25[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_cancellables],  v43,  33LL,  0LL);
  AnyCancellable.store(in:)(v33);
  swift_endAccess(v43);
  swift_release(v32);
  v43[0] = *(void *)(*(void *)&v25[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_continuitySessionClient]
                     + 120LL);
  uint64_t v34 = v43[0];
  uint64_t v35 = swift_allocObject(&unk_1000C30D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v35 + 16, v25);
  swift_retain(v34);
  uint64_t v36 = sub_10000360C(&qword_1000CE578);
  uint64_t v37 = sub_100018F4C( &qword_1000CE580,  &qword_1000CE578,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v38 = Publisher<>.sink(receiveValue:)(sub_100018F44, v35, v36, v37);
  swift_release(v35);
  swift_release(v43[0]);
  swift_beginAccess(v33, v43, 33LL, 0LL);
  AnyCancellable.store(in:)(v33);
  swift_endAccess(v43);
  swift_release(v38);
  notify_post("NeighborhoodActivityConduitClientsShouldConnectNotification");
  uint64_t v39 = CFNotificationCenterGetDarwinNotifyCenter();
  unint64_t v40 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v25[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_systemLanguageChanged];
  if (qword_1000CD620 != -1) {
    swift_once(&qword_1000CD620, sub_100011124);
  }
  CFNotificationCenterAddObserver( v39,  0LL,  v40,  (CFStringRef)qword_1000CE1B0,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);

  return v25;
}

uint64_t sub_1000115D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1000115EC, 0LL, 0LL);
}

uint64_t sub_1000115EC()
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10001164C, qword_1000D35E0, 0LL);
}

uint64_t sub_10001164C()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate + 8) = &off_1000C29C0;
  swift_unknownObjectWeakAssign();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CDE48);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v22, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2, v11);
  if (result)
  {
    uint64_t v13 = (void *)result;
    uint64_t v14 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v10, 1LL, 1LL, v14);
    sub_100005318(a1, (uint64_t)&v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8], &qword_1000CDE48);
    uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    unint64_t v17 = (v6 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v18 = swift_allocObject(&unk_1000C3290, v17 + 8, v15 | 7);
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(v18 + 24) = 0LL;
    sub_1000192A4((uint64_t)v7, v18 + v16, &qword_1000CDE48);
    *(void *)(v18 + v17) = v13;
    id v19 = v13;
    uint64_t v20 = sub_10004EC20((uint64_t)v10, (uint64_t)&unk_1000CE5A8, v18);

    return swift_release(v20);
  }

  return result;
}

uint64_t sub_100011820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000192A4(a1, (uint64_t)v15, &qword_1000CE4E8);
  a2 += 16LL;
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = swift_allocObject(&unk_1000C30D8, 24LL, 7LL);
  swift_beginAccess(a2, v14, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(a2, v9);
  swift_unknownObjectWeakInit(v8 + 16, Strong);

  uint64_t v11 = (void *)swift_allocObject(&unk_1000C3268, 112LL, 7LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = v8;
  sub_1000192A4((uint64_t)v15, (uint64_t)(v11 + 5), &qword_1000CE4E8);
  sub_100019068( v15,  (void (*)(void, void, void, void, void, void, void, void, void))sub_1000190B0);
  uint64_t v12 = sub_10004ED6C((uint64_t)v6, (uint64_t)&unk_1000CE590, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100011974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return swift_task_switch(sub_100011990, 0LL, 0LL);
}

uint64_t sub_100011990()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1000D0738 + dword_1000D0738);
    uint64_t v4 = (void *)swift_task_alloc(unk_1000D073C);
    *(void *)(v0 + 72) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100011A3C;
    return v6(*(void *)(v0 + 56));
  }

  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100011A3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8_swift_stdlib_reportUnimplementedInitializer( "com_apple_NeighborhoodActivityConduitService.CSDMessagingConversationParticipantDidJoinContext",  94LL,  "init()",  6LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100011A98, 0LL, 0LL);
}

uint64_t sub_100011A98()
{
  uint64_t v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 64);
  sub_100012C78((uint64_t)sub_100017C8C, 0LL);

  **(_BYTE **)(v0 + 40) = *(void *)(v0 + 64) == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100011AF4()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = &v0[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_cancellables];
  swift_beginAccess( &v0[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_cancellables],  v7,  1LL,  0LL);
  uint64_t v3 = *(void *)v2;
  *(void *)uint64_t v2 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = CFNotificationCenterGetDarwinNotifyCenter();
  if (qword_1000CD620 != -1) {
    swift_once(&qword_1000CD620, sub_100011124);
  }
  CFNotificationCenterRemoveObserver(v4, 0LL, (CFNotificationName)qword_1000CE1B0, 0LL);

  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

void sub_100011D28(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v54, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (!Strong)
  {
LABEL_14:
    char v43 = 0;
    goto LABEL_15;
  }

  uint64_t v8 = (char *)Strong;
  if ((sub_100012314() & 1) == 0)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v32, (uint64_t)qword_1000D3620);
    id v33 = a2;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      aBlock = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = aBlock;
      *(_DWORD *)uint64_t v36 = 136315138;
      BOOL v46 = v8;
      id v37 = [v33 debugDescription];
      uint64_t v38 = a3;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      unint64_t v41 = v40;

      uint64_t v42 = v39;
      a3 = v38;
      id v53 = (id)sub_10009BE3C(v42, v41, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v36 + 4, v36 + 12);

      swift_bridgeObjectRelease(v41);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "%s not entitled to use NeighborhoodActivityConduitService",  v36,  0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
    }

    goto LABEL_14;
  }

  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___TUNeighborhoodActivityConduitXPCClient);
  id v10 = [v9 neighborhoodActivityClientXPCInterface];
  [a2 setRemoteObjectInterface:v10];

  id v11 = [v9 neighborhoodActivityServerXPCInterface];
  [a2 setExportedInterface:v11];

  [a2 setExportedObject:v8];
  uint64_t v12 = swift_allocObject(&unk_1000C30D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v8);
  uint64_t v13 = swift_allocObject(&unk_1000C3100, 32LL, 7LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(void *)(v13 + 24) = a2;
  uint64_t v51 = sub_100018DC4;
  uint64_t v52 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  unint64_t v49 = sub_10000ABC8;
  uint64_t v50 = &unk_1000C3118;
  uint64_t v14 = _Block_copy(&aBlock);
  uint64_t v15 = v52;
  id v16 = a2;
  swift_release(v15);
  [v16 setInterruptionHandler:v14];
  _Block_release(v14);
  uint64_t v17 = swift_allocObject(&unk_1000C30D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v17 + 16, v8);
  uint64_t v18 = swift_allocObject(&unk_1000C3150, 32LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  uint64_t v51 = sub_100018E2C;
  uint64_t v52 = v18;
  aBlock = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  unint64_t v49 = sub_10000ABC8;
  uint64_t v50 = &unk_1000C3168;
  id v19 = _Block_copy(&aBlock);
  uint64_t v20 = v52;
  id v21 = v16;
  swift_release(v20);
  [v21 setInvalidationHandler:v19];
  _Block_release(v19);
  [v21 _setQueue:*(void *)&v8[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_queue]];
  swift_beginAccess( &v8[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_connections],  &aBlock,  33LL,  0LL);
  id v22 = v21;
  sub_10008FE40((Swift::Int *)&v53, v22);
  swift_endAccess(&aBlock);

  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v23, (uint64_t)qword_1000D3620);
  unint64_t v24 = (void **)v22;
  unint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(8LL, -1LL);
    aBlock = v24;
    objc_super v44 = (void *)v28;
    *(_DWORD *)uint64_t v27 = 138412290;
    uint64_t v29 = v8;
    uint64_t v30 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v48, v27 + 4, v27 + 12);
    *objc_super v44 = v24;

    uint64_t v8 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Connected to new client %@", v27, 0xCu);
    uint64_t v31 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v44, 1LL, v31);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    unint64_t v25 = (os_log_s *)v24;
  }

  [v24 resume];
  char v43 = 1;
LABEL_15:
  *a3 = v43;
}

uint64_t sub_100012314()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    memset(v5, 0, sizeof(v5));
  }

  sub_1000192A4((uint64_t)v5, (uint64_t)v6, &qword_1000CE540);
  if (v7)
  {
    uint64_t result = swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
    if ((_DWORD)result) {
      return v4;
    }
  }

  else
  {
    sub_10000BFC8((uint64_t)v6, &qword_1000CE540);
    return 0LL;
  }

  return result;
}

uint64_t sub_100012404(uint64_t a1, void *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v48 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v55, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1, v17);
  if (result)
  {
    id v19 = (void *)result;
    uint64_t v45 = v14;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v43 = a6;
    objc_super v44 = v16;
    uint64_t v46 = v13;
    uint64_t v47 = v12;
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v20, (uint64_t)qword_1000D3620);
    id v21 = a2;
    id v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = v9;
      unint64_t v25 = (uint8_t *)v24;
      os_log_type_t v26 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v25 = 138412290;
      aBlock = v21;
      uint64_t v27 = v21;
      uint64_t v41 = v10;
      uint64_t v28 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v53, v25 + 4, v25 + 12);
      *os_log_type_t v26 = v21;

      uint64_t v10 = v41;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v48, v25, 0xCu);
      uint64_t v29 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v26, 1LL, v29);
      swift_slowDealloc(v26, -1LL, -1LL);
      uint64_t v30 = v25;
      uint64_t v9 = v42;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      id v22 = (os_log_s *)v21;
    }

    uint64_t v31 = swift_allocObject(v49, 32LL, 7LL);
    *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
    *(void *)(v31 + 24) = v21;
    v53[3] = v50;
    uint64_t v54 = v31;
    aBlock = _NSConcreteStackBlock;
    v53[0] = 1107296256LL;
    v53[1] = sub_10000ABC8;
    v53[2] = v43;
    uint64_t v32 = _Block_copy(&aBlock);
    id v33 = v21;
    id v34 = v19;
    os_log_type_t v35 = v44;
    static DispatchQoS.unspecified.getter(v34);
    uint64_t v51 = _swiftEmptyArrayStorage;
    uint64_t v36 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v37 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
    uint64_t v38 = sub_100018F4C(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v39 = v47;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v37, v38, v9, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v39, v32);
    _Block_release(v32);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v39, v9);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v46);

    return swift_release(v54);
  }

  return result;
}

void sub_100012794(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_100094EA8(a2);
  swift_endAccess(v4);
}

void sub_1000128B8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v3
                + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v12 = __CocoaSet.makeIterator()(v11);
    uint64_t v13 = sub_1000052E0(0LL, &qword_1000CE358, &OBJC_CLASS___NSXPCConnection_ptr);
    uint64_t v14 = sub_100017D34(&qword_1000CE360, &qword_1000CE358, &OBJC_CLASS___NSXPCConnection_ptr);
    uint64_t v15 = Set.Iterator.init(_cocoa:)(v45, v12, v13, v14);
    a1 = v45[0];
    uint64_t v40 = v45[1];
    uint64_t v16 = v45[2];
    uint64_t v17 = v45[3];
    unint64_t v18 = v45[4];
  }

  else
  {
    uint64_t v19 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v40 = a1 + 56;
    uint64_t v16 = ~v19;
    uint64_t v21 = -v19;
    if (v21 < 64) {
      uint64_t v22 = ~(-1LL << v21);
    }
    else {
      uint64_t v22 = -1LL;
    }
    unint64_t v18 = v22 & v20;
    uint64_t v15 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v17 = 0LL;
  }

  v36[1] = v16;
  uint64_t v38 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v39 = (unint64_t)(v16 + 64) >> 6;
  uint64_t v37 = (char *)&type metadata for Swift.AnyObject + 8;
  while (a1 < 0)
  {
    uint64_t v26 = __CocoaSet.Iterator.next()(v15);
    if (!v26) {
      goto LABEL_36;
    }
    uint64_t v27 = v26;
    uint64_t v43 = v26;
    uint64_t v28 = sub_1000052E0(0LL, &qword_1000CE358, &OBJC_CLASS___NSXPCConnection_ptr);
    swift_unknownObjectRetain(v27);
    swift_dynamicCast(v44, &v43, v37, v28, 7LL);
    id v29 = (id)v44[0];
    swift_unknownObjectRelease(v27);
    uint64_t v25 = v17;
    uint64_t v23 = v18;
    if (!v29) {
      goto LABEL_36;
    }
LABEL_34:
    id v33 = [v29 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)(v44);
    swift_unknownObjectRelease(v33);
    uint64_t v34 = sub_10000360C(&qword_1000CE368);
    if ((swift_dynamicCast(&v43, v44, (char *)&type metadata for Any + 8, v34, 6LL) & 1) != 0)
    {
      uint64_t v35 = v43;
      v41(v43);
      swift_unknownObjectRelease(v35);
    }

    uint64_t v17 = v25;
    unint64_t v18 = v23;
  }

  if (v18)
  {
    uint64_t v23 = (v18 - 1) & v18;
    unint64_t v24 = __clz(__rbit64(v18)) | (v17 << 6);
    uint64_t v25 = v17;
LABEL_33:
    id v29 = *(id *)(*(void *)(a1 + 48) + 8 * v24);
    if (!v29) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }

  int64_t v30 = v17 + 1;
  if (!__OFADD__(v17, 1LL))
  {
    if (v30 >= v39) {
      goto LABEL_36;
    }
    unint64_t v31 = *(void *)(v40 + 8 * v30);
    uint64_t v25 = v17 + 1;
    if (!v31)
    {
      uint64_t v25 = v17 + 2;
      if (v17 + 2 >= v39) {
        goto LABEL_36;
      }
      unint64_t v31 = *(void *)(v40 + 8 * v25);
      if (!v31)
      {
        uint64_t v25 = v17 + 3;
        if (v17 + 3 >= v39) {
          goto LABEL_36;
        }
        unint64_t v31 = *(void *)(v40 + 8 * v25);
        if (!v31)
        {
          uint64_t v25 = v17 + 4;
          if (v17 + 4 >= v39) {
            goto LABEL_36;
          }
          unint64_t v31 = *(void *)(v40 + 8 * v25);
          if (!v31)
          {
            uint64_t v32 = v17 + 5;
            while (v39 != v32)
            {
              unint64_t v31 = *(void *)(v40 + 8 * v32++);
              if (v31)
              {
                uint64_t v25 = v32 - 1;
                goto LABEL_32;
              }
            }

LABEL_36:
            sub_10000B7D8(a1);
            return;
          }
        }
      }
    }

    sub_10000B7D8(v1);
    return;
  }

  __break(1u);
}

uint64_t sub_100012C78(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)&v2[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_queue];
  uint64_t v13 = (void *)swift_allocObject(&unk_1000C29F8, 40LL, 7LL);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100017D10;
  unint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000ABC8;
  aBlock[3] = &unk_1000C2A10;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v2;
  uint64_t v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v19 = sub_100018F4C(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

uint64_t sub_100012E78(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1
                 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_connections);
  swift_beginAccess( a1 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_connections,  v9,  0LL,  0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = swift_bridgeObjectRetain(v6);
  sub_1000128B8(v7, a2, a3);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100012EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v7 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  v6[5] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[6] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[7] = swift_task_alloc(v9);
  v6[8] = swift_task_alloc(v9);
  return swift_task_switch(sub_100012F64, 0LL, 0LL);
}

uint64_t sub_100012F64()
{
  v0[9] = *(void *)(v0[2]
                    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit);
  NSString v1 = (void *)swift_task_alloc(dword_1000CF9F4);
  v0[10] = v1;
  *NSString v1 = v0;
  v1[1] = sub_100012FBC;
  return sub_10004F0B0();
}

uint64_t sub_100012FBC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 80);
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_100013394;
  }
  else {
    uint64_t v5 = sub_100013028;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100013028()
{
  *(void *)(v0 + 104) = OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100013098, qword_1000D35E0, 0LL);
}

uint64_t sub_100013098()
{
  uint64_t v1 = *(void *)(v0[9] + v0[13]);
  v0[14] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1000130E0, 0LL, 0LL);
}

uint64_t sub_1000130E0()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v31 = v0[6];
    uint64_t v32 = v0[7];
    uint64_t v30 = v0[5];
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = sub_10007A68C(v1);
    uint64_t v4 = result;
    uint64_t v6 = v5;
    char v8 = v7 & 1;
    uint64_t v33 = v1;
    uint64_t v34 = v1 + 56;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(v1 + 32))
    {
      if (*(_DWORD *)(v1 + 36) != (_DWORD)v6) {
        goto LABEL_13;
      }
      uint64_t v37 = v35[14];
      uint64_t v10 = v35[7];
      uint64_t v9 = v35[8];
      char v36 = v8;
      sub_100018CFC( *(void *)(v1 + 48) + *(void *)(v31 + 72) * v4,  v9,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      sub_100018D40(v9, v10);
      uint64_t v11 = *(void *)(v32 + 8);
      uint64_t v12 = *(void **)(v10 + *(int *)(v30 + 24));
      uint64_t v13 = *(void *)(v10 + *(int *)(v30 + 32));
      id v14 = objc_allocWithZone(&OBJC_CLASS___TUNearbyConversationInfo);
      swift_bridgeObjectRetain(v11);
      id v15 = v12;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      id v18 = [v14 initWithConversationUUID:isa userProfileIdentifier:v17 deviceHandle:v15 avMode:v13];

      uint64_t v19 = sub_10000BF5C(v10, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      uint64_t v20 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
      uint64_t v21 = v20;
      uint64_t v1 = v33;
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
      specialized ContiguousArray._endMutation()(v22);
      uint64_t result = sub_10009C8C8(v4, v6, v36 & 1, v37);
      uint64_t v4 = result;
      uint64_t v6 = v23;
      char v8 = v24 & 1;
      if (!--v2)
      {
        uint64_t v0 = v35;
        uint64_t v25 = v35[14];
        sub_100018054(result, v23, v8);
        swift_bridgeObjectRelease(v25);
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease(v0[14]);
LABEL_10:
    uint64_t v26 = v0[11];
    uint64_t v27 = (void (*)(uint64_t, uint64_t, void))v0[3];
    uint64_t v28 = sub_10007B7CC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v27(v26, v28, 0LL);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v26);
    uint64_t v29 = v0[7];
    swift_task_dealloc(v0[8]);
    swift_task_dealloc(v29);
    return ((uint64_t (*)(void))v0[1])();
  }

  return result;
}

uint64_t sub_100013394()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void (**)(unint64_t, void *, uint64_t))(v0 + 24);
  unint64_t v3 = sub_100003A7C((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRetain(v1);
  v2(v3, &_swiftEmptySetSingleton, v1);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease(v3);
  swift_errorRelease(v1);
  uint64_t v4 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10001353C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1000052E0(0LL, &qword_1000CE380, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
  sub_100017D34(&qword_1000CE388, &qword_1000CE380, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
  v7.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, Class))(a4 + 16))(a4, v6.super.isa, v7.super.isa);
}

uint64_t sub_10001366C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for HandoffState(0LL);
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000136D0, 0LL, 0LL);
}

uint64_t sub_1000136D0()
{
  uint64_t v1 = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  v0[11] = *(void *)(v0[7]
                     + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit);
  v0[12] = v1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100013750, qword_1000D35E0, 0LL);
}

uint64_t sub_100013750()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[11] + v0[12];
  swift_beginAccess(v3, v0 + 2, 0LL, 0LL);
  sub_100018CFC(v0[11] + v0[12], v0[10], type metadata accessor for HandoffState);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000D0A34);
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100013854;
  return sub_100099EC8();
}

uint64_t sub_100013814()
{
  uint64_t v1 = *(void *)(v0 + 80);
  (*(void (**)(void))(v0 + 40))(0LL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013854(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 112LL) = a1;
  swift_task_dealloc(v2);
  sub_10000BF5C(v3, type metadata accessor for HandoffState);
  return swift_task_switch(sub_1000138C4, 0LL, 0LL);
}

uint64_t sub_1000138C4()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  (*(void (**)(void *))(v0 + 40))(v1);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v11;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  unint64_t v9 = (*(void *)(*(void *)(sub_10000360C((uint64_t *)&unk_1000CE420) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[8] = swift_task_alloc(v9);
  void v8[9] = swift_task_alloc(v9);
  return swift_task_switch(sub_100013AA8, 0LL, 0LL);
}

uint64_t sub_100013AA8()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000CFE54);
  v0[10] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_100013B0C;
  return sub_10004F978(v0[9], v0[5], v0[6], v0[7]);
}

uint64_t sub_100013B0C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100013BFC;
  }
  else {
    uint64_t v3 = sub_100013B70;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100013B70()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void (**)(uint64_t, void))(v0 + 16);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 0LL, 1LL, v3);
  v2(v1, 0LL);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  sub_10000BFC8(v5, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013BFC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 16);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v2, 1LL, 1LL, v4);
  swift_errorRetain(v1);
  v3(v2, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  sub_10000BFC8(v6, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100013EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000360C((uint64_t *)&unk_1000CE420);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005318(a1, (uint64_t)v8, (uint64_t *)&unk_1000CE420);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }

  if (a2) {
    uint64_t v12 = (void *)_convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v12 = 0LL;
  }
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v12);
}

uint64_t sub_100013FC4()
{
  uint64_t v1 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1LL, 1LL, v4);
  uint64_t v6 = (void *)swift_allocObject(&unk_1000C2F98, 40LL, 7LL);
  v6[2] = 0LL;
  uint64_t v7 = v6 + 2;
  v6[3] = 0LL;
  v6[4] = v0;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4);
  id v9 = v0;
  if (v8 == 1)
  {
    sub_10000BFC8((uint64_t)v3, (uint64_t *)&unk_1000CF840);
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 7168LL;
  }

  else
  {
    unsigned __int8 v13 = TaskPriority.rawValue.getter(v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v12 = v13 | 0x1C00LL;
    uint64_t v14 = *v7;
    if (*v7)
    {
      uint64_t v15 = v6[3];
      uint64_t ObjectType = swift_getObjectType(*v7);
      swift_unknownObjectRetain(v14);
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      uint64_t v11 = v17;
      swift_unknownObjectRelease(v14);
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
    }
  }

  uint64_t v18 = swift_allocObject(&unk_1000C2FC0, 32LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = &unk_1000CE4F8;
  *(void *)(v18 + 24) = v6;
  if (v11 | v10)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    uint64_t v19 = v22;
    v22[2] = v10;
    v22[3] = v11;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  uint64_t v20 = swift_task_create(v12, v19, (char *)&type metadata for () + 8, &unk_1000CE500, v18);
  return swift_release(v20);
}

uint64_t sub_100014194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_1000141AC, 0LL, 0LL);
}

uint64_t sub_1000141AC()
{
  *(void *)(v0 + 24) = *(void *)(*(void *)(v0 + 16)
                                   + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100014220, qword_1000D35E0, 0LL);
}

uint64_t sub_100014220()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  return swift_task_switch(sub_1000142A0, 0LL, 0LL);
}

uint64_t sub_1000142A0()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000D0738 + dword_1000D0738);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000D073C);
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001433C;
  return v3(v0 + 16);
}

uint64_t sub_10001433C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100014398, 0LL, 0LL);
}

uint64_t sub_100014398()
{
  uint64_t v1 = *(void **)(v0 + 192);
  (*(void (**)(void *, void))(v0 + 168))(v1, 0LL);

  sub_100019068( (void *)(v0 + 16),  (void (*)(void, void, void, void, void, void, void, void, void))sub_10001885C);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100014510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_100014568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[23] = a7;
  _BYTE v8[24] = a8;
  v8[21] = a5;
  v8[22] = a6;
  v8[20] = a4;
  return swift_task_switch(sub_100014588, 0LL, 0LL);
}

uint64_t sub_100014588()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000CEFFC);
  v0[25] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_1000145EC;
  return sub_1000407C4((uint64_t)(v0 + 11), v0[21], v0[22]);
}

uint64_t sub_1000145EC()
{
  uint64_t v2 = *(void *)(*v1 + 200);
  uint64_t v3 = *v1;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100014784, 0LL, 0LL);
  }
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 88);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 112);
  uint64_t v6 = *(void *)(v3 + 152);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v3 + 96);
  *(void *)(v3 + 40) = v5;
  __int128 v7 = *(_OWORD *)(v3 + 136);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v3 + 120);
  *(_OWORD *)(v3 + 64) = v7;
  *(void *)(v3 + 80) = v6;
  sub_1000186F4((void *)(v3 + 88));
  id v9 = (uint64_t (*)(uint64_t))((char *)&dword_1000D0738 + dword_1000D0738);
  int v8 = (void *)swift_task_alloc(unk_1000D073C);
  *(void *)(v3 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *int v8 = v3;
  v8[1] = sub_1000146C8;
  return v9(v3 + 16);
}

uint64_t sub_1000146C8(uint64_t a1)
{
  uint64_t v2 = (void *)(*(void *)v1 + 88LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 224LL) = a1;
  swift_task_dealloc(v3);
  sub_100018774(v2);
  return swift_task_switch(sub_100014730, 0LL, 0LL);
}

uint64_t sub_100014730()
{
  uint64_t v1 = *(void **)(v0 + 224);
  (*(void (**)(void *, void))(v0 + 184))(v1, 0LL);

  sub_100018774((void *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014784()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 184);
  swift_errorRetain(v1);
  v2(0LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001492C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CE420);
  v7[4] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100014988, 0LL, 0LL);
}

uint64_t sub_100014988()
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_1000149E8, qword_1000D35E0, 0LL);
}

uint64_t sub_1000149E8()
{
  id v1 = (id)TUMakeNeighborhoodConduitError(10101LL, 0LL);
  *(void *)(v0 + 40) = v1;
  swift_willThrow(v1);
  return swift_task_switch(sub_100014A44, 0LL, 0LL);
}

uint64_t sub_100014A44()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 40);
  uint64_t v3 = *(void (**)(uint64_t, void *))(v0 + 16);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v1, 1LL, 1LL, v4);
  id v5 = v2;
  v3(v1, v2);

  sub_10000BFC8(v1, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = a6;
  *(void *)(v7 + 24) = a7;
  return swift_task_switch(sub_100014CE0, 0LL, 0LL);
}

uint64_t sub_100014CE0()
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100014D40, qword_1000D35E0, 0LL);
}

uint64_t sub_100014D40()
{
  id v1 = (id)TUMakeNeighborhoodConduitError(10101LL, 0LL);
  *(void *)(v0 + 32) = v1;
  swift_willThrow(v1);
  return swift_task_switch(sub_100014D9C, 0LL, 0LL);
}

uint64_t sub_100014D9C()
{
  id v1 = *(void **)(v0 + 32);
  uint64_t v2 = *(void (**)(void *))(v0 + 16);
  id v3 = v1;
  v2(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = a6;
  *(void *)(v7 + 24) = a7;
  return swift_task_switch(sub_100014FF0, 0LL, 0LL);
}

uint64_t sub_100014FF0()
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100015050, qword_1000D35E0, 0LL);
}

uint64_t sub_100015050()
{
  *(void *)(v0 + 32) = (id)TUMakeNeighborhoodConduitError(10101LL, 0LL);
  swift_willThrow();
  return swift_task_switch(sub_100019448, 0LL, 0LL);
}

uint64_t sub_100015298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_1000152B8, 0LL, 0LL);
}

uint64_t sub_1000152B8()
{
  id v1 = (uint64_t **)swift_task_alloc(dword_1000CF00C);
  v0[7] = (uint64_t)v1;
  *id v1 = v0;
  v1[1] = (uint64_t *)sub_100015314;
  return sub_100042CAC(v0[3], v0[4]);
}

uint64_t sub_100015314()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = sub_1000153B0;
  }
  else {
    id v3 = sub_100015378;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100015378()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000153B0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 40);
  swift_errorRetain(v1);
  v2(0LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015558( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_100015578, 0LL, 0LL);
}

uint64_t sub_100015578()
{
  *(void *)(v0 + 56) = *(void *)(*(void *)(v0 + 16)
                                   + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_1000155EC, qword_1000D35E0, 0LL);
}

uint64_t sub_1000155EC()
{
  if ([*(id *)(v0[7] + OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags) lagunaEnabled])
  {
    uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000CFE34);
    v0[8] = (uint64_t)v1;
    *uint64_t v1 = v0;
    v1[1] = (uint64_t *)sub_1000156AC;
    return sub_10007B96C(v0[3], v0[4]);
  }

  else
  {
    id v3 = (id)TUMakeNeighborhoodConduitError(10101LL, 0LL);
    swift_willThrow(v3);
    v0[9] = (uint64_t)v3;
    return swift_task_switch(sub_100015744, 0LL, 0LL);
  }

uint64_t sub_1000156AC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 64));
  if (v0)
  {
    *(void *)(v2 + 72) = v0;
    id v3 = sub_100015744;
  }

  else
  {
    id v3 = sub_100015710;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100015710()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015744()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 40);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000158E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_100015904, 0LL, 0LL);
}

uint64_t sub_100015904()
{
  id v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CFE18 + dword_1000CFE18);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFE1C);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015974;
  return v3(*(void *)(v0 + 24));
}

uint64_t sub_100015974()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = sub_10001944C;
  }
  else {
    id v3 = sub_1000193DC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100015B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_100015B30, 0LL, 0LL);
}

uint64_t sub_100015B30()
{
  id v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CFE08 + dword_1000CFE08);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFE0C);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015BA0;
  return v3(*(void *)(v0 + 24));
}

uint64_t sub_100015BA0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    id v3 = sub_100015C38;
  }
  else {
    id v3 = sub_100015C04;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100015C04()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015C38()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000161A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  uint64_t v9 = type metadata accessor for HandoffInfo(0LL);
  v8[8] = v9;
  void v8[9] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (*(void *)(*(void *)(sub_10000360C((uint64_t *)&unk_1000CE420) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[10] = swift_task_alloc(v10);
  v8[11] = swift_task_alloc(v10);
  return swift_task_switch(sub_10001623C, 0LL, 0LL);
}

uint64_t sub_10001623C()
{
  v0[12] = *(void *)(v0[5]
                     + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v1 = qword_1000D35E0;
  v0[13] = qword_1000D35E0;
  return swift_task_switch(sub_1000162B4, v1, 0LL);
}

uint64_t sub_1000162B4()
{
  uint64_t v1 = sub_100010B5C(v0[6]);
  v0[14] = v1;
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1000CFDF4);
  v0[15] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_10001632C;
  return sub_10005B58C(v0[9], v1, v0[7]);
}

uint64_t sub_10001632C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 104);
    id v5 = sub_100016420;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 104);
    swift_bridgeObjectRelease(*(void *)(v2 + 112));
    id v5 = sub_10001639C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10001639C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v2 + *(int *)(v0[8] + 24LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v0[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[18] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  sub_10000BF5C(v2, type metadata accessor for HandoffInfo);
  return swift_task_switch(sub_100019434, 0LL, 0LL);
}

uint64_t sub_100016420()
{
  return swift_task_switch(sub_1000193D4, 0LL, 0LL);
}

uint64_t sub_1000165F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  uint64_t v9 = type metadata accessor for HandoffInfo(0LL);
  v8[8] = v9;
  void v8[9] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (*(void *)(*(void *)(sub_10000360C((uint64_t *)&unk_1000CE420) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[10] = swift_task_alloc(v10);
  v8[11] = swift_task_alloc(v10);
  return swift_task_switch(sub_100016688, 0LL, 0LL);
}

uint64_t sub_100016688()
{
  v0[12] = *(void *)(v0[5]
                     + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer_conduit);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v1 = qword_1000D35E0;
  v0[13] = qword_1000D35E0;
  return swift_task_switch(sub_100016700, v1, 0LL);
}

uint64_t sub_100016700()
{
  uint64_t v1 = sub_100010DD4(v0[6]);
  v0[14] = v1;
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1000CFDF4);
  v0[15] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_100016778;
  return sub_10005B58C(v0[9], v1, v0[7]);
}

uint64_t sub_100016778()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_1000168F8;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 104);
    swift_bridgeObjectRelease(*(void *)(v2 + 112));
    uint64_t v5 = sub_1000167E8;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1000167E8()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v2 + *(int *)(v0[8] + 24LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v0[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[18] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  sub_10000BF5C(v2, type metadata accessor for HandoffInfo);
  return swift_task_switch(sub_10001686C, 0LL, 0LL);
}

uint64_t sub_10001686C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void (**)(uint64_t, void))(v0 + 24);
  (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(v0 + 144) + 56LL))( v1,  0LL,  1LL,  *(void *)(v0 + 136));
  v2(v1, 0LL);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  sub_10000BFC8(v4, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000168F8()
{
  return swift_task_switch(sub_100016934, 0LL, 0LL);
}

uint64_t sub_100016934()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 24);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v2, 1LL, 1LL, v4);
  swift_errorRetain(v1);
  v3(v2, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 72);
  sub_10000BFC8(v5, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100016B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_100016B98, 0LL, 0LL);
}

uint64_t sub_100016B98()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1000CFDE8 + dword_1000CFDE8);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFDEC);
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016C00;
  return v3();
}

uint64_t sub_100016C00(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 40);
  *(void *)(*v3 + 48) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = sub_100016CBC;
  }

  else
  {
    *(void *)(v6 + 56) = a2;
    *(void *)(v6 + 64) = a1;
    uint64_t v8 = sub_100016C78;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100016C78()
{
  uint64_t v1 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, void, void))(v0 + 24))(v1, *(void *)(v0 + 56), 0LL);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100016CBC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void (**)(void, void, uint64_t))(v0 + 24);
  swift_errorRetain(v1);
  v2(0LL, 0LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100016E38(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa = a1;
  if (a1)
  {
    sub_1000052E0(0LL, &qword_1000CE400, &OBJC_CLASS___TUContinuitySessionContact_ptr);
    sub_100017D34(&qword_1000CE408, &qword_1000CE400, &OBJC_CLASS___TUContinuitySessionContact_ptr);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
  }

  if (a3) {
    uint64_t v8 = _convertErrorToNSError(_:)(a3);
  }
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, Class, uint64_t))(a4 + 16))(a4, isa, a2);
}

uint64_t sub_100016F08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_100016F28, 0LL, 0LL);
}

uint64_t sub_100016F28()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000CFDD8 + dword_1000CFDD8);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFDDC);
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100016F98;
  return v3(v0[5], v0[6]);
}

uint64_t sub_100016F98(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 56);
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    uint64_t v8 = sub_100017064;
  }

  else
  {
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 80) = a1;
    uint64_t v8 = sub_100017010;
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t sub_100017010()
{
  unint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  (*(void (**)(uint64_t, unint64_t, void))(v0 + 16))(v1, v2, 0LL);
  sub_10000BE18(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017064()
{
  uint64_t v1 = *(void *)(v0 + 64);
  unint64_t v2 = *(void (**)(void, unint64_t, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(0LL, 0xF000000000000000LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100017210(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  Class isa = 0LL;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

uint64_t sub_100017290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1000172AC, 0LL, 0LL);
}

uint64_t sub_1000172AC()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CFDC8 + dword_1000CFDC8);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFDCC);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001731C;
  return v3(*(void *)(v0 + 24));
}

uint64_t sub_10001731C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000173B8;
  }
  else {
    uint64_t v3 = sub_100017380;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100017380()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000173B8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(0LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000175A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1000175BC, 0LL, 0LL);
}

uint64_t sub_1000175BC()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CFDB0 + dword_1000CFDB0);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFDB4);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001762C;
  return v3(*(void *)(v0 + 24));
}

uint64_t sub_10001762C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100019450;
  }
  else {
    uint64_t v3 = sub_1000193E0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10001781C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = sub_10000360C(&qword_1000CDE48);
  v5[4] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100017878, 0LL, 0LL);
}

uint64_t sub_100017878()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100005318(*(void *)(v0 + 16), v1, &qword_1000CDE48);
  uint64_t v2 = type metadata accessor for HandoffState(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_10000BFC8(*(void *)(v0 + 32), &qword_1000CDE48);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = swift_allocObject(&unk_1000C32B8, 24LL, 7LL);
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    sub_100012C78((uint64_t)sub_1000193B4, v4);
    swift_release(v4);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = (void *)swift_task_alloc(dword_1000D0A34);
    *(void *)(v0 + 40) = v6;
    void *v6 = v0;
    v6[1] = sub_100017970;
    return sub_100099EC8();
  }

uint64_t sub_100017970(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 48LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000179CC, 0LL, 0LL);
}

uint64_t sub_1000179CC()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_allocObject(&unk_1000C32B8, 24LL, 7LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  id v4 = v1;
  sub_100012C78((uint64_t)sub_1000193B4, v3);
  swift_release(v3);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100017A5C(void *a1)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1000052E0(0LL, &qword_1000CE380, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
  sub_100017D34(&qword_1000CE388, &qword_1000CE380, &OBJC_CLASS___TUNearbyConversationInfo_ptr);
  Class v3 = Set._bridgeToObjectiveC()().super.isa;
  [a1 joinableNearbyConversationsChanged:isa nearbyConversationInfos:v3];
}

void sub_100017B64(void *a1, uint64_t a2, uint64_t a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [a1 contactInfoUpdated:isa fromDevice:a3];
}

void sub_100017C30(void *a1, uint64_t a2)
{
  id v3 = (id)_convertErrorToNSError(_:)(a2);
  [a1 handoffFailedWithError:v3];
}

id sub_100017C78(void *a1, uint64_t a2, uint64_t a3)
{
  return [a1 suggestionAdvertisementUpdated:a2 fromDevice:a3];
}

id sub_100017C8C(void *a1)
{
  return [a1 continuitySessionsUpdated];
}

uint64_t type metadata accessor for NeighborhoodActivityConduitServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService33NeighborhoodActivityConduitServer);
}

uint64_t sub_100017CE4()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100017D10()
{
  return sub_100012E78(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100017D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100017D2C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100017D34(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_1000052E0(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_100017D74(char a1, uint64_t a2)
{
}

uint64_t sub_100017D80()
{
  uint64_t v2 = swift_task_alloc(dword_1000CE3B4);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000193E4;
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_1000175BC, 0LL, 0LL);
}

uint64_t sub_100017DE4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100017E20()
{
  uint64_t v2 = swift_task_alloc(dword_1000CE3D4);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000193E4;
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_1000172AC, 0LL, 0LL);
}

void sub_100017E80(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_100017E88()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100017EC4()
{
  __int128 v6 = *(_OWORD *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc(dword_1000CE3E4);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10000C2B8;
  *(void *)(v3 + 48) = v2;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v6;
  return swift_task_switch(sub_100016F28, 0LL, 0LL);
}

void sub_100017F40(objc_class *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100017F4C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1000CE3F4);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000193E4;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return swift_task_switch(sub_100016B98, 0LL, 0LL);
}

void sub_100017FB4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100017FC0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1000CE414);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000165F0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100018054(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100018064(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1000CE434);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000161A4(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100018100()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10001813C(uint64_t a1)
{
}

uint64_t sub_100018144()
{
  return sub_1000184D8((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100018150()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = swift_task_alloc(dword_1000CE45C);
  __int128 v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = sub_1000193E4;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  return swift_task_switch(sub_100015B30, 0LL, 0LL);
}

uint64_t sub_1000181EC()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100018228()
{
  uint64_t v2 = swift_task_alloc(dword_1000CE46C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  __int128 v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000193E4;
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_100015904, 0LL, 0LL);
}

uint64_t sub_10001828C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = swift_task_alloc(dword_1000CE47C);
  __int128 v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_1000193E4;
  *(void *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  return swift_task_switch(sub_100015578, 0LL, 0LL);
}

uint64_t sub_100018308()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = swift_task_alloc(dword_1000CE48C);
  __int128 v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_1000193E4;
  *(void *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  return swift_task_switch(sub_1000152B8, 0LL, 0LL);
}

uint64_t sub_100018380()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000183A4()
{
  return sub_1000184D8((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1000183B0()
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL)
  uint64_t v4 = swift_task_alloc(dword_1000CE49C);
  __int128 v5 = *(_OWORD *)(v0 + v3);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000193E4;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return swift_task_switch(sub_100014FF0, 0LL, 0LL);
}

uint64_t sub_100018438()
{
  return sub_1000184D8((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100018444()
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL)
  uint64_t v4 = swift_task_alloc(dword_1000CE4AC);
  __int128 v5 = *(_OWORD *)(v0 + v3);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000193E4;
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return swift_task_switch(sub_100014CE0, 0LL, 0LL);
}

uint64_t sub_1000184CC()
{
  return sub_1000184D8((uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_1000184D8(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v1 + 16));

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release(*(void *)(v1 + v7 + 8));
  return swift_deallocObject(v1, v7 + 16, v6);
}

uint64_t sub_100018578(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  unsigned __int8 v13 = (void *)swift_task_alloc(dword_1000CE4BC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *unsigned __int8 v13 = v2;
  v13[1] = sub_1000193E4;
  return sub_10001492C(a1, v6, v7, v8, v9, v11, v12);
}

void sub_100018634(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100018640()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10001867C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = swift_task_alloc(dword_1000CE4CC);
  __int128 v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_1000193E4;
  *(void *)(v5 + 192) = v4;
  *(_OWORD *)(v5 + 176) = v6;
  *(void *)(v5 + 160) = v2;
  *(void *)(v5 + 168) = v3;
  return swift_task_switch(sub_100014588, 0LL, 0LL);
}

void *sub_1000186F4(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[8];
  swift_bridgeObjectRetain(a1[1]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *sub_100018774(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000187F4()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_1000CE4DC);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000193E4;
  *(void *)(v3 + 176) = v2;
  *(_OWORD *)(v3 + 160) = v4;
  return swift_task_switch(sub_1000142A0, 0LL, 0LL);
}

uint64_t sub_10001885C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_release(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a9);
  }

  return result;
}

uint64_t sub_1000188D8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100018904()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CE4F4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000193E4;
  v3[2] = v2;
  return swift_task_switch(sub_1000141AC, 0LL, 0LL);
}

uint64_t sub_100018964()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100018988(uint64_t a1)
{
  __int128 v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CFA9C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000C2B8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000CFA98 + dword_1000CFA98))(a1, v4);
}

uint64_t sub_1000189F8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 40));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_100018AA0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  unsigned __int8 v13 = (void *)swift_task_alloc(dword_1000CE50C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *unsigned __int8 v13 = v2;
  v13[1] = sub_1000193E4;
  return sub_100013A30(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100018B78()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_100018B88()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100018BBC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CE51C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000193E4;
  return sub_10001366C(a1, v4, v5, v6, v7, v8);
}

void sub_100018C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100018C48()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100018C7C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CE52C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000193E4;
  return sub_100012EF0(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100018CFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100018D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018D84()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100018DA8(char *a1@<X8>)
{
}

uint64_t sub_100018DC4()
{
  return sub_100012404( *(void *)(v0 + 16),  *(void **)(v0 + 24),  "XPC connection interrupted from client %@",  (uint64_t)&unk_1000C31F0,  (uint64_t)sub_1000193D0,  (uint64_t)&unk_1000C3208);
}

uint64_t sub_100018E00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100018E2C()
{
  return sub_100012404( *(void *)(v0 + 16),  *(void **)(v0 + 24),  "XPC connection invalidated from client %@",  (uint64_t)&unk_1000C31A0,  (uint64_t)sub_100018E90,  (uint64_t)&unk_1000C31B8);
}

uint64_t sub_100018E64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100018E90()
{
}

uint64_t sub_100018EA8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100018EDC()
{
  uint64_t v2 = swift_task_alloc(dword_1000CE54C);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000193E4;
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_1000115EC, 0LL, 0LL);
}

uint64_t sub_100018F3C(uint64_t a1)
{
  return sub_100011698(a1, v1);
}

uint64_t sub_100018F44(uint64_t a1)
{
  return sub_100011820(a1, v1);
}

uint64_t sub_100018F4C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100003698(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100018F8C()
{
  uint64_t v1 = v0[6];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_release(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[10]);
    swift_bridgeObjectRelease(v0[11]);
    swift_bridgeObjectRelease(v0[12]);
    swift_bridgeObjectRelease(v0[13]);
  }

  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100018FF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CE58C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000193E4;
  v5[6] = v4;
  v5[7] = v1 + 40;
  v5[5] = a1;
  return swift_task_switch(sub_100011990, 0LL, 0LL);
}

void *sub_100019068( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000190B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_retain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a9);
  }

  return result;
}

uint64_t sub_10001912C()
{
  uint64_t v1 = *(void *)(sub_10000360C(&qword_1000CDE48) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v5 = (char *)(v0 + v3);
  uint64_t v6 = type metadata accessor for HandoffState(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v0 + v3, 1LL, v6))
  {
    if (swift_getEnumCaseMultiPayload(v0 + v3, v6) == 1)
    {
      swift_bridgeObjectRelease(*((void *)v5 + 2));
      uint64_t v7 = (int *)type metadata accessor for HandoffInfo(0LL);
      uint64_t v8 = &v5[v7[6]];
      uint64_t v9 = type metadata accessor for UUID(0LL);
      uint64_t v10 = *(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL);
      v10(v8, v9);
      v10(&v5[v7[7]], v9);
      swift_release(*(void *)&v5[v7[8]]);

      uint64_t v11 = &v5[v7[10]];
      uint64_t v12 = type metadata accessor for Date(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
    }

    else
    {
      swift_release(*(void *)v5);
    }
  }

  unint64_t v14 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = v14 + 8;

  return swift_deallocObject(v0, v15, v2 | 7);
}

uint64_t sub_1000192A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000360C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000192E8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000360C(&qword_1000CDE48) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v10 = (void *)swift_task_alloc(dword_1000CE5A4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000193E4;
  return sub_10001781C(a1, v6, v7, v8, v9);
}

uint64_t sub_100019390()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1000193B4(void *a1)
{
  return [a1 splitSessionUpdated:*(void *)(v1 + 16)];
}

void sub_100019468(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  v25[1] = a2;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v3 = __CocoaSet.makeIterator()(a1);
    uint64_t v4 = sub_1000052E0(0LL, &qword_1000CE5B8, &OBJC_CLASS___TUConversationMember_ptr);
    unint64_t v5 = sub_10001A8A0();
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    uint64_t v2 = v26[0];
    uint64_t v23 = v26[1];
    uint64_t v6 = v26[2];
    uint64_t v7 = v26[3];
    unint64_t v8 = v26[4];
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
  }

  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = (v8 - 1) & v8;
      unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v15 = v7;
      goto LABEL_31;
    }

    int64_t v20 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v20 >= v12) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    uint64_t v15 = v7 + 1;
    if (!v21)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v12) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v15);
      if (!v21)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v12) {
          goto LABEL_34;
        }
        unint64_t v21 = *(void *)(v23 + 8 * v15);
        if (!v21)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v12) {
            goto LABEL_34;
          }
          unint64_t v21 = *(void *)(v23 + 8 * v15);
          if (!v21)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v12) {
              goto LABEL_34;
            }
            unint64_t v21 = *(void *)(v23 + 8 * v15);
            if (!v21)
            {
              uint64_t v22 = v7 + 6;
              while (v12 != v22)
              {
                unint64_t v21 = *(void *)(v23 + 8 * v22++);
                if (v21)
                {
                  uint64_t v15 = v22 - 1;
                  goto LABEL_30;
                }
              }

LABEL_34:
              sub_10000B7D8(v2);
              return;
            }
          }
        }
      }
    }

        __break(1u);
LABEL_35:
        swift_once(&qword_1000CD698, sub_100088E48);
LABEL_28:
        uint64_t v45 = type metadata accessor for Logger(0LL);
        sub_10000ADF4(v45, (uint64_t)qword_1000D3638);
        uint64_t v46 = swift_bridgeObjectRetain_n(v11, 2LL);
        uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
        uint64_t v48 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v50 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v50;
          *(_DWORD *)uint64_t v49 = 136315138;
          uint64_t v51 = sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
          uint64_t v52 = swift_bridgeObjectRetain(v11);
          id v53 = Dictionary.description.getter(v52, &type metadata for String, v51, &protocol witness table for String);
          id v55 = v54;
          swift_bridgeObjectRelease(v11);
          uint64_t v66 = sub_10009BE3C(v53, v55, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, aBlock, v49 + 4, v49 + 12);
          swift_bridgeObjectRelease_n(v11, 2LL);
          swift_bridgeObjectRelease(v55);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Send laguna call ended event with data: %s", v49, 0xCu);
          swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1LL, -1LL);
          swift_slowDealloc(v49, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v11, 2LL);
        }

        unint64_t v56 = v65;
        uint64_t v57 = String._bridgeToObjectiveC()();
        unint64_t v58 = swift_allocObject(&unk_1000C32F0, 24LL, 7LL);
        *(void *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
        aBlock[4] = (uint64_t)sub_10001A91C;
        unint64_t v68 = v58;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)sub_100019B18;
        aBlock[3] = (uint64_t)&unk_1000C3308;
        uint64_t v59 = _Block_copy(aBlock);
        uint64_t v60 = v68;
        swift_bridgeObjectRetain(v11);
        swift_release(v60);
        AnalyticsSendEventLazy(v57, v59);
        _Block_release(v59);
        swift_bridgeObjectRelease(v11);

        v64(v56, v7);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_34;
  }

  sub_10001A860((uint64_t)v6);
  if (qword_1000CD698 != -1) {
    swift_once(&qword_1000CD698, sub_100088E48);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000ADF4(v15, (uint64_t)qword_1000D3638);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  uint64_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v19 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Not reporting endCall for calls that weren't answered",  v19,  2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }
}

      swift_bridgeObjectRelease_n(v23, 2LL);
      uint64_t Strong = swift_weakLoadStrong(v92);
      if (Strong)
      {
        uint64_t v35 = Strong;
        char v36 = *(id *)(Strong + 16);
        swift_release(v35);
        uint64_t v37 = [v36 activeDevices];
        uint64_t v38 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CE128, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
        int64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

        if ((unint64_t)v39 >> 62)
        {
          if (v39 < 0) {
            uint64_t v84 = v39;
          }
          else {
            uint64_t v84 = v39 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v39);
          uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v84);
          if (v40)
          {
LABEL_37:
            uint64_t v41 = v98 + 8;
            swift_beginAccess(v98 + 8, v101, 0LL, 0LL);
            uint64_t v42 = 4LL;
            while (1)
            {
              uint64_t v43 = (v39 & 0xC000000000000001LL) != 0
                  ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, v39)
                  : *(id *)(v39 + 8 * v42);
              objc_super v44 = v43;
              uint64_t v45 = v42 - 3;
              if (__OFADD__(v42 - 4, 1LL)) {
                break;
              }
              uint64_t v46 = *v41;
              swift_bridgeObjectRetain(*v41);
              uint64_t v47 = sub_10000DD10();
              uint64_t v48 = sub_100033B5C( v47,  v46,  (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
              swift_bridgeObjectRelease(v47);
              uint64_t v49 = *(void *)(v48 + 16);

              swift_release(v48);
              if (v49)
              {
                swift_release(v98);

                swift_bridgeObjectRelease_n(v39, 2LL);
                goto LABEL_66;
              }

              ++v42;
              if (v45 == v40) {
                goto LABEL_44;
              }
            }

void sub_100019704(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1000052E0(0LL, &qword_1000CE5B8, &OBJC_CLASS___TUConversationMember_ptr);
    unint64_t v5 = sub_10001A8A0();
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v29, v3, v4, v5);
    uint64_t v1 = v29[0];
    uint64_t v27 = v29[1];
    uint64_t v7 = v29[2];
    uint64_t v8 = v29[3];
    unint64_t v9 = v29[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v27 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t v6 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  int64_t v26 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    uint64_t v13 = v8;
    if ((v1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()(v6);
    if (!v16) {
      goto LABEL_37;
    }
    uint64_t v17 = v16;
    uint64_t v28 = v16;
    uint64_t v18 = sub_1000052E0(0LL, &qword_1000CE5B8, &OBJC_CLASS___TUConversationMember_ptr);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
    id v19 = v30;
    swift_unknownObjectRelease(v17);
    if (!v19) {
      goto LABEL_37;
    }
LABEL_35:
    id v23 = [v19 association];
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = [v23 type];

      if (v25 == (id)2) {
        goto LABEL_37;
      }
    }

    else
    {
    }
  }

  if (v9)
  {
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_34:
    id v19 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v19) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }

  int64_t v20 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v20 >= v26) {
      goto LABEL_37;
    }
    unint64_t v21 = *(void *)(v27 + 8 * v20);
    ++v8;
    if (!v21)
    {
      uint64_t v8 = v13 + 2;
      if (v13 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v27 + 8 * v8);
      if (!v21)
      {
        uint64_t v8 = v13 + 3;
        if (v13 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v21 = *(void *)(v27 + 8 * v8);
        if (!v21)
        {
          uint64_t v8 = v13 + 4;
          if (v13 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v21 = *(void *)(v27 + 8 * v8);
          if (!v21)
          {
            uint64_t v8 = v13 + 5;
            if (v13 + 5 >= v26) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v27 + 8 * v8);
            if (!v21)
            {
              uint64_t v22 = v13 + 6;
              while (v26 != v22)
              {
                unint64_t v21 = *(void *)(v27 + 8 * v22++);
                if (v21)
                {
                  uint64_t v8 = v22 - 1;
                  goto LABEL_33;
                }
              }

LABEL_37:
              sub_10000B7D8(v1);
              return;
            }
          }
        }
      }
    }

LABEL_33:
    unint64_t v9 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v8 << 6);
    goto LABEL_34;
  }

  __break(1u);
}

    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      uint64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  id v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v35;
  }
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + 8 * v22);
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v22);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    if ((v39 & 1) == 0)
    {
      uint64_t v35 = v31;
      swift_bridgeObjectRetain(v34);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(void *)(*(void *)(v8 + 48) + 8 * v19) = v31;
    int64_t v20 = (void *)(*(void *)(v8 + 56) + 16 * v19);
    void *v20 = v33;
    v20[1] = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *id v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v34;
  }
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v32;
      uint64_t v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

unint64_t TUNearbyConversationPullContext.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 0xD000000000000019LL;
  switch(v1)
  {
    case 0LL:
      unint64_t result = 0x50664F746E696F70LL;
      break;
    case 1LL:
      return result;
    case 2LL:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 3LL:
      unint64_t result = 0x61576D6574737973LL;
      break;
    case 4LL:
      unint64_t result = 0x656D695465636166LL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E75LL;
      break;
  }

  return result;
}

uint64_t TUNearbyConversationHandoffType.description.getter(unint64_t a1)
{
  if (a1 > 4) {
    return 0x6E776F6E6B6E55LL;
  }
  else {
    return *(void *)&aUnknown[8 * a1];
  }
}

Class sub_100019B18(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  return v5.super.isa;
}

unint64_t sub_100019B9C()
{
  return TUNearbyConversationPullContext.description.getter(*v0);
}

uint64_t sub_100019BA4()
{
  return TUNearbyConversationHandoffType.description.getter(*v0);
}

void sub_100019BAC(uint64_t a1)
{
  if (a1)
  {
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v2 = sub_10000360C(&qword_1000CF8D0);
    type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
    uint64_t v4 = v3;
    if (swift_dynamicCast(&v27, aBlock, v2, v3, 6LL))
    {
      id v5 = v27;
      unint64_t v6 = sub_10001A93C();
      _BridgedStoredNSError.code.getter(aBlock, v4, v6);
    }

    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v7 = sub_1000052E0(0LL, &qword_1000CE5D0, &OBJC_CLASS___NSError_ptr);
    if ((swift_dynamicCast(&v27, aBlock, v2, v7, 6LL) & 1) != 0)
    {
      id v8 = v27;
      [v27 code];
    }
  }

  uint64_t v9 = sub_10000360C(&qword_1000CE5C8);
  uint64_t inited = swift_initStackObject(v9, v30);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A9840;
  *(void *)(inited + 32) = 0x646F43726F727265LL;
  *(void *)(inited + 40) = 0xE900000000000065LL;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "nacErrorCode");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  unint64_t v11 = sub_100003C28(inited);
  if (qword_1000CD698 != -1) {
    swift_once(&qword_1000CD698, sub_100088E48);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v12, (uint64_t)qword_1000D3638);
  uint64_t v13 = swift_bridgeObjectRetain_n(v11, 2LL);
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v18 = sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
    uint64_t v19 = swift_bridgeObjectRetain(v11);
    uint64_t v20 = Dictionary.description.getter(v19, &type metadata for String, v18, &protocol witness table for String);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease(v11);
    id v27 = (id)sub_10009BE3C(v20, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, aBlock, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease(v22);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Send laguna continuity session error event with data: %s",  v16,  0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  NSString v23 = String._bridgeToObjectiveC()();
  uint64_t v24 = swift_allocObject(&unk_1000C3340, 24LL, 7LL);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  aBlock[4] = (uint64_t)sub_10001AE38;
  uint64_t v29 = v24;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100019B18;
  aBlock[3] = (uint64_t)&unk_1000C3358;
  id v25 = _Block_copy(aBlock);
  uint64_t v26 = v29;
  swift_bridgeObjectRetain(v11);
  swift_release(v26);
  AnalyticsSendEventLazy(v23, v25);
  _Block_release(v25);
  swift_bridgeObjectRelease(v11);
}

void sub_100019FB0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CE5B0);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = type metadata accessor for HandoffInfo(0LL);
  sub_10001A818(a2 + *(int *)(v14 + 40), (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
  {
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    static Date.now.getter(v20);
    double v21 = Date.timeIntervalSince(_:)(v13);
    unint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v11, v7);
    if ((~*(void *)&v21 & 0x7FF0000000000000LL) != 0)
    {
      if (v21 > -9.22337204e18)
      {
        if (v21 < 9.22337204e18)
        {
          uint64_t v64 = v22;
          os_log_type_t v65 = v13;
          id v23 = [a1 mergedRemoteMembers];
          uint64_t v24 = sub_1000052E0(0LL, &qword_1000CE5B8, &OBJC_CLASS___TUConversationMember_ptr);
          unint64_t v25 = sub_10001A8A0();
          uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, v25);

          if ((v26 & 0xC000000000000001LL) != 0)
          {
            if (v26 < 0) {
              uint64_t v27 = v26;
            }
            else {
              uint64_t v27 = v26 & 0xFFFFFFFFFFFFFF8LL;
            }
            uint64_t v62 = __CocoaSet.count.getter(v27);
          }

          else
          {
            uint64_t v62 = *(void *)(v26 + 16);
          }

          uint64_t v63 = (uint64_t)v21;
          swift_bridgeObjectRelease(v26);
          id v28 = [a1 link];
          if (v28) {

          }
          id v29 = [a1 mergedRemoteMembers];
          uint64_t v30 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v29, v24, v25);

          id v31 = [a1 kickedMembers];
          uint64_t v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v24, v25);

          sub_100019468(v32, v30);
          uint64_t v34 = v33;
          sub_100019704(v33);
          swift_bridgeObjectRelease(v34);
          uint64_t v35 = sub_10000360C(&qword_1000CE5C8);
          uint64_t inited = swift_initStackObject(v35, v69);
          *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A9AE0;
          *(void *)(inited + 32) = 0x657079546C6C6163LL;
          *(void *)(inited + 40) = 0xE800000000000000LL;
          id v37 = [a1 localMember];
          if (v37
            && (uint64_t v38 = v37,
                unsigned __int8 v39 = [v37 isLightweightMember],
                v38,
                (v39 & 1) != 0))
          {
            unint64_t v40 = 0xE700000000000000LL;
          }

          else if ([a1 avMode] == (id)1)
          {
            unint64_t v40 = 0xEE006F6964754120LL;
          }

          else
          {
            unint64_t v40 = 0xEE006F6564695620LL;
          }

          NSString v41 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v40);
          *(void *)(inited + 48) = v41;
          *(void *)(inited + 56) = 0x6E6F697461727564LL;
          *(void *)(inited + 64) = 0xE800000000000000LL;
          *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
          *(void *)(inited + 80) = 0xD00000000000001BLL;
          *(void *)(inited + 88) = 0x80000001000A3FC0LL;
          *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
          *(void *)(inited + 104) = 0x6165527472617473LL;
          *(void *)(inited + 112) = 0xEB000000006E6F73LL;
          unint64_t v42 = (unint64_t)[*(id *)(a2 + *(int *)(v14 + 36)) type];
          if (v42 > 4) {
            unint64_t v43 = 0xE700000000000000LL;
          }
          else {
            unint64_t v43 = *(void *)&aHandoffHandoff[8 * v42 + 32];
          }
          NSString v44 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v43);
          *(void *)(inited + 120) = v44;
          *(void *)(inited + 128) = 0x6B6E694C736177LL;
          *(void *)(inited + 136) = 0xE700000000000000LL;
          *(NSNumber *)(inited + 144) = Bool._bridgeToObjectiveC()();
          *(void *)(inited + 152) = 0xD000000000000012LL;
          *(void *)(inited + 160) = 0x80000001000A3FE0LL;
          *(NSNumber *)(inited + 168) = Bool._bridgeToObjectiveC()();
          unint64_t v11 = (char *)sub_100003C28(inited);
          if (qword_1000CD698 == -1) {
            goto LABEL_28;
          }
          goto LABEL_35;
        }

uint64_t sub_10001A818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CE5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A860(uint64_t a1)
{
  uint64_t v2 = sub_10000360C(&qword_1000CE5B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10001A8A0()
{
  unint64_t result = qword_1000CE5C0;
  if (!qword_1000CE5C0)
  {
    uint64_t v1 = sub_1000052E0(255LL, &qword_1000CE5B8, &OBJC_CLASS___TUConversationMember_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE5C0);
  }

  return result;
}

uint64_t sub_10001A8F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10001A91C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_10001A924(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001A934(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10001A93C()
{
  unint64_t result = qword_1000CD9E0;
  if (!qword_1000CD9E0)
  {
    type metadata accessor for TUNeighborhoodActivityConduitError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000A9484, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD9E0);
  }

  return result;
}

void sub_10001A984(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD698 != -1) {
    swift_once(&qword_1000CD698, sub_100088E48);
  }
  uint64_t v6 = sub_10000ADF4(v2, (uint64_t)qword_1000D3638);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v27 = a1;
    uint64_t v12 = a1 - 1;
    unint64_t v13 = 0x80000001000A3FA0LL;
    uint64_t v14 = 0xD000000000000019LL;
    switch(v12)
    {
      case 0LL:
        unint64_t v13 = 0xEF6B63616279616CLL;
        uint64_t v14 = 0x50664F746E696F70LL;
        break;
      case 1LL:
        break;
      case 2LL:
        uint64_t v14 = 0xD00000000000001CLL;
        unint64_t v13 = 0x80000001000A3F80LL;
        break;
      case 3LL:
        unint64_t v13 = 0xEA0000000000656BLL;
        uint64_t v14 = 0x61576D6574737973LL;
        break;
      case 4LL:
        unint64_t v13 = 0xEB00000000707041LL;
        uint64_t v14 = 0x656D695465636166LL;
        break;
      default:
        unint64_t v13 = 0xE700000000000000LL;
        uint64_t v14 = 0x6E776F6E6B6E75LL;
        break;
    }

    uint64_t v28 = sub_10009BE3C(v14, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, aBlock, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Send SharePlay pull to TV event, context: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    a1 = v27;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  uint64_t v15 = sub_10000360C(&qword_1000CE5D8);
  uint64_t inited = swift_initStackObject(v15, v31);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
  *(void *)(inited + 32) = 0x747865746E6F63LL;
  *(void *)(inited + 40) = 0xE700000000000000LL;
  unint64_t v17 = 0x80000001000A3FA0LL;
  switch(a1)
  {
    case 1LL:
      unint64_t v17 = 0xEF6B63616279616CLL;
      break;
    case 2LL:
      break;
    case 3LL:
      unint64_t v17 = 0x80000001000A3F80LL;
      break;
    case 4LL:
      unint64_t v17 = 0xEA0000000000656BLL;
      break;
    case 5LL:
      unint64_t v17 = 0xEB00000000707041LL;
      break;
    default:
      unint64_t v17 = 0xE700000000000000LL;
      break;
  }

  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  *(void *)(inited + 48) = v18;
  unint64_t v19 = sub_100003C34(inited);
  sub_100009F5C(v19);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease(v19);
  NSString v22 = String._bridgeToObjectiveC()();
  uint64_t v23 = swift_allocObject(&unk_1000C3390, 24LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  aBlock[4] = (uint64_t)sub_10001AE38;
  uint64_t v30 = v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100019B18;
  aBlock[3] = (uint64_t)&unk_1000C33A8;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v30;
  swift_bridgeObjectRetain(v21);
  swift_release(v25);
  AnalyticsSendEventLazy(v22, v24);
  _Block_release(v24);
  swift_bridgeObjectRelease(v21);
}

void sub_10001AE44(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
    unint64_t v5 = sub_10000BEE8();
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    uint64_t v1 = v27[0];
    uint64_t v25 = v27[1];
    uint64_t v7 = v27[2];
    uint64_t v8 = v27[3];
    unint64_t v9 = v27[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t v6 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  uint64_t v24 = v7;
  int64_t v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v16 = v8;
    goto LABEL_32;
  }

  int64_t v21 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v21 < v13)
    {
      unint64_t v22 = *(void *)(v25 + 8 * v21);
      uint64_t v16 = v8 + 1;
      if (v22) {
        goto LABEL_31;
      }
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v13) {
        goto LABEL_36;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v16);
      if (v22) {
        goto LABEL_31;
      }
      uint64_t v16 = v8 + 3;
      if (v8 + 3 >= v13) {
        goto LABEL_36;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v16);
      if (v22) {
        goto LABEL_31;
      }
      uint64_t v16 = v8 + 4;
      if (v8 + 4 >= v13) {
        goto LABEL_36;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v16);
      if (v22)
      {
LABEL_31:
        uint64_t v14 = (v22 - 1) & v22;
        unint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        for (i = *(id *)(*(void *)(v1 + 48) + 8 * v15); i; uint64_t v14 = v9)
        {
          if (objc_msgSend(i, "state", v24) == (id)3) {
            break;
          }

          uint64_t v8 = v16;
          unint64_t v9 = v14;
          if ((v1 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v17 = __CocoaSet.Iterator.next()(v6);
          if (!v17) {
            break;
          }
          uint64_t v18 = v17;
          uint64_t v26 = v17;
          uint64_t v19 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
          swift_unknownObjectRetain(v18);
          swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
          id i = v28;
          swift_unknownObjectRelease(v18);
          uint64_t v16 = v8;
        }

        goto LABEL_36;
      }

      uint64_t v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v16);
        if (!v22)
        {
          uint64_t v23 = v8 + 6;
          while (v13 != v23)
          {
            unint64_t v22 = *(void *)(v25 + 8 * v23++);
            if (v22)
            {
              uint64_t v16 = v23 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

uint64_t sub_10001B104()
{
  uint64_t v0 = type metadata accessor for NearbySuggestionActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v1);
  qword_1000D35B8 = v1;
  return result;
}

uint64_t sub_10001B13C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for NearbySuggestionActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService21NearbySuggestionActor);
}

uint64_t sub_10001B178()
{
  return v0;
}

uint64_t sub_10001B184()
{
  if (qword_1000CD628 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  return swift_retain(qword_1000D35B8);
}

uint64_t sub_10001B1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for NearbySuggestionActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_10001B1E8(void *a1, void *a2, char a3)
{
  v6._object = (void *)0x80000001000A4260LL;
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v6);
  id v7 = [a1 description];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x3A72656D697420LL;
  v12._object = (void *)0xE700000000000000LL;
  String.append(_:)(v12);
  id v13 = [a2 debugDescription];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 0x616F626E4F736920LL;
  v18._object = (void *)0xEE003A676E696472LL;
  String.append(_:)(v18);
  if ((a3 & 1) != 0) {
    uint64_t v19 = 1702195828LL;
  }
  else {
    uint64_t v19 = 0x65736C6166LL;
  }
  if ((a3 & 1) != 0) {
    unint64_t v20 = 0xE400000000000000LL;
  }
  else {
    unint64_t v20 = 0xE500000000000000LL;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 62LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  return 0LL;
}

uint64_t sub_10001B37C(id *a1, void **a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  Swift::String v11 = *a2;
  id v12 = [*a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = [v11 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v13) = static UUID.== infix(_:_:)(v10, v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v10, v4);
  return v13 & 1;
}

uint64_t sub_10001B48C()
{
  return sub_10001B1E8(*(void **)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

char *sub_10001B498()
{
  id v0 = [(id)objc_opt_self(TUCallCenter) sharedInstance];
  id v1 = [v0 conversationManager];

  id v2 = [objc_allocWithZone(TUFeatureFlags) init];
  uint64_t v3 = (char *)objc_allocWithZone((Class)type metadata accessor for NearbySuggestionController());
  uint64_t result = sub_10001C0BC(v1, v2, v3);
  qword_1000D35C0 = (uint64_t)result;
  return result;
}

id sub_10001B52C()
{
  uint64_t v1 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (void *)swift_allocObject(&unk_1000C3518, 40LL, 7LL);
  _OWORD v5[2] = 0LL;
  v5[3] = 0LL;
  v5[4] = v0;
  id v6 = v0;
  uint64_t v7 = sub_10004EC20((uint64_t)v3, (uint64_t)&unk_1000CE7D8, (uint64_t)v5);
  swift_release(v7);
  uint64_t v8 = (objc_class *)type metadata accessor for NearbySuggestionController();
  v10.receiver = v6;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, "dealloc");
}

uint64_t sub_10001B608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_10001B620, 0LL, 0LL);
}

uint64_t sub_10001B620()
{
  if (qword_1000CD628 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  return swift_task_switch(sub_10001B680, qword_1000D35B8, 0LL);
}

uint64_t sub_10001B680()
{
  if (qword_1000CD6B8 != -1) {
    swift_once(&qword_1000CD6B8, sub_100088EE8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000ADF4(v1, (uint64_t)qword_1000D3698);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating IRSession", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 16);

  *(_BYTE *)(v6 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_isRunning) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for NearbySuggestionController()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController);
}

unint64_t TUConversationAVMode.description.getter(uint64_t a1)
{
  unint64_t v1 = 0xD000000000000019LL;
  if (!a1) {
    return 0xD000000000000018LL;
  }
  if (a1 != 2 && a1 != 1)
  {
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    v4._countAndFlagsBits = 41LL;
    v4._object = (void *)0xE100000000000000LL;
    String.append(_:)(v4);
    return 0xD00000000000001CLL;
  }

  return v1;
}

uint64_t sub_10001BA40()
{
  if (qword_1000CD628 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  unint64_t v1 = (void *)swift_task_alloc(dword_1000CE78C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_1000193E4;
  return sub_10001BAB0();
}

uint64_t sub_10001BAB0()
{
  *(void *)(v1 + 24) = v0;
  if (qword_1000CD628 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  return swift_task_switch(sub_10001BB14, qword_1000D35B8, 0LL);
}

uint64_t sub_10001BB14()
{
  id v1 = objc_retainAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(v0 + 24)
                 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_conversationManager),
           "activeConversations"));
  uint64_t v2 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
  unint64_t v3 = sub_10000BEE8();
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  sub_10001AE44(v4);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(v4);
  if (v6)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v7, (uint64_t)qword_1000D3620);
    id v8 = v6;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      Swift::String v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      Swift::String v17 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)Swift::String v11 = 138412290;
      *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
      id v12 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      void *v17 = v6;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "updateRecommendationMode for conversation: %@", v11, 0xCu);
      uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v17, 1LL, v13);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    if ([v8 state] == (id)3)
    {
      id v14 = [v8 presentationContext];
      id v15 = [v14 mode];

      if (v15 != (id)2
        && (objc_msgSend( *(id *)(*(void *)(v0 + 24)
                                  + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_featureFlags),
                            "lagunaAudioCallsEnabled") & 1) == 0)
      {
        [v8 avMode];
      }
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for NearbySuggestionController.SuggestionState( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for NearbySuggestionController.SuggestionState(id *a1)
{
}

uint64_t assignWithCopy for NearbySuggestionController.SuggestionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NearbySuggestionController.SuggestionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySuggestionController.SuggestionState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySuggestionController.SuggestionState( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NearbySuggestionController.SuggestionState()
{
  return &type metadata for NearbySuggestionController.SuggestionState;
}

uint64_t sub_10001C090(uint64_t a1, uint64_t a2)
{
  return sub_10001CFD8( (unint64_t *)&unk_1000CE760,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for NearbySuggestionActor,  (uint64_t)&unk_1000A9C58);
}

char *sub_10001C0BC(void *a1, void *a2, char *a3)
{
  uint64_t v6 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v10 = &a3[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_suggestionXPCDelegate];
  *((void *)v10 + 1) = 0LL;
  swift_unknownObjectWeakInit(v10, 0LL);
  Swift::String v11 = &a3[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_delegate];
  *((void *)v11 + 1) = 0LL;
  swift_unknownObjectWeakInit(v11, 0LL);
  uint64_t v12 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_suggestionResultSubject;
  uint64_t v13 = sub_10000360C(&qword_1000CE7E0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  id v14 = a3;
  *(void *)&a3[v12] = PassthroughSubject.init()();
  id v15 = &v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_suggestionState];
  v15[16] = 0;
  *(void *)id v15 = 0LL;
  *((void *)v15 + 1) = 0LL;
  uint64_t v16 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_conduitDeviceManager;
  if (qword_1000CD640 != -1) {
    swift_once(&qword_1000CD640, sub_1000202C4);
  }
  uint64_t v17 = qword_1000D35D0;
  *(void *)&v14[v16] = qword_1000D35D0;
  v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_isRunning] = 0;
  v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_suppressSuggestions] = 0;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_suppressSuggestionTimer] = 0LL;
  uint64_t v18 = type metadata accessor for NeighborhoodActivityPublisherService();
  swift_allocObject(v18, 32LL, 7LL);
  swift_retain(v17);
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_publisherService] = sub_10008B074();
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_conversationManager] = a1;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_featureFlags] = a2;
  id v19 = a1;
  id v20 = a2;

  unint64_t v21 = (objc_class *)type metadata accessor for NearbySuggestionController();
  v30.receiver = v14;
  v30.super_class = v21;
  Swift::String v22 = (char *)objc_msgSendSuper2(&v30, "init");
  uint64_t v23 = OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_conversationManager;
  uint64_t v24 = *(void **)&v22[OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService26NearbySuggestionController_conversationManager];
  sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for DispatchQoS.QoSClass.userInteractive(_:),  v6);
  uint64_t v25 = v22;
  id v26 = v24;
  uint64_t v27 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  [v26 addDelegate:v25 queue:v27];

  id v28 = *(id *)&v22[v23];
  [v28 registerWithCompletionHandler:0];

  return v25;
}

uint64_t sub_10001C358(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD6B8 != -1) {
    swift_once(&qword_1000CD6B8, sub_100088EE8);
  }
  uint64_t v14 = sub_10000ADF4(v10, (uint64_t)qword_1000D3698);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  id v15 = a1;
  uint64_t v16 = v11;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v15);
  int v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    int v42 = v18;
    uint64_t v43 = v16;
    NSString v44 = v2;
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v41 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v41;
    *(_DWORD *)uint64_t v19 = 136315394;
    unint64_t v20 = (unint64_t)[v15 state];
    uint64_t v45 = v6;
    if (v20 > 4)
    {
      unint64_t v23 = 0xE900000000000029LL;
      uint64_t v22 = 0x6E776F6E6B6E5528LL;
    }

    else
    {
      uint64_t v21 = 8 * v20;
      uint64_t v22 = *(void *)&aWaitingPrepari[8 * v20];
      unint64_t v23 = *(void *)&aWaitingPrepari[v21 + 40];
    }

    uint64_t v47 = sub_10009BE3C(v22, v23, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v19 + 4, v19 + 12);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v40 = v19 + 14;
    id v24 = [v15 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    uint64_t v25 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v7, v25);
    unint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v7);
    uint64_t v47 = sub_10009BE3C(v26, v28, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40, v19 + 22);

    swift_bridgeObjectRelease(v28);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  (os_log_type_t)v42,  "Conversation state changed to %s for %s.",  (uint8_t *)v19,  0x16u);
    uint64_t v29 = v41;
    swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
    uint64_t v2 = v44;
    uint64_t v6 = v45;
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v10);
  }

  uint64_t v30 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v6, 1LL, 1LL, v30);
  uint64_t v31 = qword_1000CD628;
  id v33 = v2;
  if (v31 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  uint64_t v34 = qword_1000D35B8;
  uint64_t v35 = sub_10001CFD8( (unint64_t *)&unk_1000CE760,  v32,  (uint64_t (*)(uint64_t))type metadata accessor for NearbySuggestionActor,  (uint64_t)&unk_1000A9C58);
  char v36 = (void *)swift_allocObject(&unk_1000C34C8, 40LL, 7LL);
  void v36[2] = v34;
  v36[3] = v35;
  v36[4] = v33;
  swift_retain(v34);
  uint64_t v37 = sub_10004EC20((uint64_t)v6, (uint64_t)&unk_1000CE7C0, (uint64_t)v36);
  return swift_release(v37);
}

uint64_t sub_10001C7C0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD6B8 != -1) {
    swift_once(&qword_1000CD6B8, sub_100088EE8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v11, (uint64_t)qword_1000D3698);
  id v12 = a1;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    int v42 = v6;
    uint64_t v16 = v15;
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    uint64_t v44 = v40;
    *(_DWORD *)uint64_t v16 = 136315394;
    id v17 = [v12 presentationContext];
    id v18 = [v17 description];
    uint64_t v41 = v2;
    id v19 = v18;

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v39 = v8;
    unint64_t v22 = v21;

    uint64_t v43 = sub_10009BE3C(v20, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v16 + 12) = 2080;
    id v23 = [v12 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    uint64_t v24 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v7, v24);
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v7);
    uint64_t v43 = sub_10009BE3C(v25, v27, &v44);
    uint64_t v2 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v16 + 14, v16 + 22);

    swift_bridgeObjectRelease(v27);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Conversation presentation context changed to %s for %s.",  (uint8_t *)v16,  0x16u);
    uint64_t v28 = v40;
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v16;
    uint64_t v6 = v42;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v30 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v6, 1LL, 1LL, v30);
  uint64_t v31 = qword_1000CD628;
  id v33 = v2;
  if (v31 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  uint64_t v34 = qword_1000D35B8;
  uint64_t v35 = sub_10001CFD8( (unint64_t *)&unk_1000CE760,  v32,  (uint64_t (*)(uint64_t))type metadata accessor for NearbySuggestionActor,  (uint64_t)&unk_1000A9C58);
  char v36 = (void *)swift_allocObject(&unk_1000C34A0, 40LL, 7LL);
  void v36[2] = v34;
  v36[3] = v35;
  v36[4] = v33;
  swift_retain(v34);
  uint64_t v37 = sub_10004EC20((uint64_t)v6, (uint64_t)&unk_1000CE7B0, (uint64_t)v36);
  return swift_release(v37);
}

uint64_t sub_10001CBB4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD6B8 != -1) {
    swift_once(&qword_1000CD6B8, sub_100088EE8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v11, (uint64_t)qword_1000D3698);
  id v12 = a1;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = v6;
    uint64_t v16 = v15;
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v38;
    *(_DWORD *)uint64_t v16 = 136315394;
    unint64_t v17 = TUConversationAVMode.description.getter((uint64_t)[v12 avMode]);
    unint64_t v19 = v18;
    uint64_t v41 = sub_10009BE3C(v17, v18, &v42);
    uint64_t v39 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v16 + 12) = 2080;
    id v20 = [v12 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

    uint64_t v21 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v7, v21);
    uint64_t v23 = v8;
    unint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
    uint64_t v41 = sub_10009BE3C(v22, v25, &v42);
    uint64_t v2 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v16 + 14, v16 + 22);

    swift_bridgeObjectRelease(v25);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Conversation avMode changed to %s for %s.",  (uint8_t *)v16,  0x16u);
    uint64_t v26 = v38;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v16;
    uint64_t v6 = v40;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v28 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v6, 1LL, 1LL, v28);
  uint64_t v29 = qword_1000CD628;
  id v31 = v2;
  if (v29 != -1) {
    swift_once(&qword_1000CD628, sub_10001B104);
  }
  uint64_t v32 = qword_1000D35B8;
  uint64_t v33 = sub_10001CFD8( (unint64_t *)&unk_1000CE760,  v30,  (uint64_t (*)(uint64_t))type metadata accessor for NearbySuggestionActor,  (uint64_t)&unk_1000A9C58);
  uint64_t v34 = (void *)swift_allocObject(&unk_1000C3478, 40LL, 7LL);
  v34[2] = v32;
  void v34[3] = v33;
  v34[4] = v31;
  swift_retain(v32);
  uint64_t v35 = sub_10004EC20((uint64_t)v6, (uint64_t)&unk_1000CE778, (uint64_t)v34);
  return swift_release(v35);
}

uint64_t sub_10001CF6C()
{
  id v1 = (void *)swift_task_alloc(dword_1000CE774);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_1000193E4;
  return sub_10001BA40();
}

uint64_t sub_10001CFD8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10001D01C()
{
  id v1 = (void *)swift_task_alloc(dword_1000CE7AC);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_1000193E4;
  return sub_10001BA40();
}

uint64_t sub_10001D08C()
{
  id v1 = (void *)swift_task_alloc(dword_1000CE7BC);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_10000C2B8;
  return sub_10001BA40();
}

uint64_t sub_10001D0FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = (void *)swift_task_alloc(dword_1000CE7CC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_1000193E4;
  v3[2] = v2;
  return swift_task_switch(sub_10001B620, 0LL, 0LL);
}

uint64_t sub_10001D15C(uint64_t a1)
{
  return a1;
}

void sub_10001D180(void *a1, void *a2)
{
  if (a1)
  {
  }

uint64_t sub_10001D1B0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10001D1E0()
{
  __asm { BR              X9 }

uint64_t sub_10001D6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2) {
      __asm { BR              X8 }
    }
  }

  return 1LL;
}

void sub_10001E014(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  sub_1000109D4(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  sub_10000BE18(v5, v6);
  uint64_t v7 = v1[4];
  unint64_t v8 = v1[5];
  sub_1000109D4(v7, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_10000BE18(v7, v8);
  uint64_t v9 = v1[6];
  uint64_t v14 = v9;
  Swift::UInt v10 = *(void *)(v9 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    swift_bridgeObjectRetain(v9);
    uint64_t v11 = (unint64_t *)(v9 + 40);
    do
    {
      uint64_t v12 = *(v11 - 1);
      unint64_t v13 = *v11;
      sub_1000109D4(v12, *v11);
      Data.hash(into:)(a1, v12, v13);
      sub_10000BE18(v12, v13);
      v11 += 2;
      --v10;
    }

    while (v10);
    sub_10001FC00(&v14);
  }

uint64_t sub_10001E12C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001E164 + 4 * byte_1000A9CE0[a1]))( 0xD000000000000012LL,  0x80000001000A4350LL);
}

uint64_t sub_10001E164()
{
  return 0x65636E6F6ELL;
}

  ;
}

BOOL sub_10001E19C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10001E1B0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001E1F4()
{
}

Swift::Int sub_10001E21C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10001E25C()
{
  return sub_10001E12C(*v0);
}

uint64_t sub_10001E264@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10001F594(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001E288()
{
  return 0LL;
}

void sub_10001E294(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10001E2A0(uint64_t a1)
{
  unint64_t v2 = sub_10001FACC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001E2C8(uint64_t a1)
{
  unint64_t v2 = sub_10001FACC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001E2F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000360C(&qword_1000CE828);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000F2CC(a1, v9);
  unint64_t v11 = sub_10001FACC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UserAccountInfo.CodingKeys,  &type metadata for UserAccountInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    __int128 v20 = *((_OWORD *)v3 + 1);
    char v19 = 1;
    unint64_t v14 = sub_10001FB54();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v14);
    __int128 v20 = *((_OWORD *)v3 + 2);
    char v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v14);
    *(void *)&__int128 v20 = v3[6];
    char v19 = 3;
    uint64_t v15 = sub_10000360C(&qword_1000CE818);
    uint64_t v16 = sub_10001FB98( &qword_1000CE838,  (void (*)(void))sub_10001FB54,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_10001E4C0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_10001E50C(void *a1)
{
  return sub_10001E2F0(a1);
}

Swift::Int sub_10001E520()
{
  return Hasher._finalize()();
}

Swift::Int sub_10001E560(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10001E598(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_10001EA10((uint64_t *)v5, v7) & 1;
}

void sub_10001E5F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10001E64C()
{
  uint64_t v8 = v3;
  __int16 v9 = v4;
  char v10 = BYTE2(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE4(v4);
  char v13 = BYTE5(v4);
  sub_100035A68((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_10000BE18(v1, v0);
  if (!v2) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10001E814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100035A68(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_10001E8C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10001E90C()
{
  return ((uint64_t (*)(void))((char *)&loc_10001E940 + *((int *)qword_10001EA00 + (v0 >> 62))))();
}

uint64_t sub_10001E950@<X0>(uint64_t a1@<X8>)
{
  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      char v5 = 1;
    }

    else
    {
      sub_1000109D4(v2, v1);
      sub_10001E5F0(v4, v3);
    }
  }

  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

uint64_t sub_10001EA10(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1) != 0) {
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t sub_10001EC9C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CE420);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v46 - v12;
  id v14 = [a1 iCloudAltDSID];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
  }

  uint64_t v47 = sub_100051940(v16, v18, a2, a3);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease(v18);
  id v21 = [a1 iTunesAltDSID];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v25 = v24;
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v25 = 0LL;
  }

  uint64_t v46 = sub_100051940(v23, v25, a2, a3);
  unint64_t v27 = v26;
  swift_bridgeObjectRelease(v25);
  id v28 = [a1 homeUserIdentifier];
  if (v28)
  {
    uint64_t v29 = v28;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

    uint64_t v30 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v11, 0LL, 1LL, v30);
  }

  else
  {
    uint64_t v30 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v11, 1LL, 1LL, v30);
  }

  sub_10001EF7C((uint64_t)v11, (uint64_t)v13);
  type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v13, 1LL, v30);
  if ((_DWORD)v32 == 1)
  {
    sub_10001EFC4((uint64_t)v13);
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v33 = UUID.uuidString.getter(v32);
    uint64_t v34 = v35;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v30);
  }

  uint64_t v36 = sub_100051940(v33, v34, a2, a3);
  unint64_t v38 = v37;
  swift_bridgeObjectRelease(v34);
  if (v38 >> 60 == 15)
  {
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t v40 = sub_10000360C(&qword_1000CE7E8);
    uint64_t result = swift_allocObject(v40, 48LL, 7LL);
    *(_OWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
    *(void *)(result + 32) = v36;
    *(void *)(result + 40) = v38;
  }

  if (v20 >> 60 == 15) {
    uint64_t v41 = 0LL;
  }
  else {
    uint64_t v41 = v47;
  }
  unint64_t v42 = 0xC000000000000000LL;
  if (v20 >> 60 == 15) {
    unint64_t v43 = 0xC000000000000000LL;
  }
  else {
    unint64_t v43 = v20;
  }
  if (v27 >> 60 == 15) {
    uint64_t v44 = 0LL;
  }
  else {
    uint64_t v44 = v46;
  }
  if (v27 >> 60 != 15) {
    unint64_t v42 = v27;
  }
  *a4 = a2;
  a4[1] = (uint64_t)a3;
  a4[2] = v41;
  a4[3] = v43;
  if (result) {
    uint64_t v45 = (void *)result;
  }
  else {
    uint64_t v45 = _swiftEmptyArrayStorage;
  }
  a4[4] = v44;
  a4[5] = v42;
  a4[6] = (uint64_t)v45;
  return result;
}

uint64_t sub_10001EF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CE420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001EFC4(uint64_t a1)
{
  uint64_t v2 = sub_10000360C((uint64_t *)&unk_1000CE420);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001F004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = PropertyListDecoder.init()();
  unint64_t v8 = sub_10001F274();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v14,  &type metadata for UserAccountInfo,  a1,  a2,  &type metadata for UserAccountInfo,  v8);
  uint64_t result = swift_release(v7);
  uint64_t v10 = v14[1];
  __int128 v11 = v15;
  __int128 v12 = v16;
  uint64_t v13 = v17;
  *(void *)a3 = v14[0];
  *(void *)(a3 + 8) = v10;
  *(_OWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_OWORD *)(a3 + 32) = v12;
  *(void *)(a3 + 48) = v13;
  return result;
}

unint64_t sub_10001F274()
{
  unint64_t result = qword_1000CE7F0;
  if (!qword_1000CE7F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9DA0, &type metadata for UserAccountInfo);
    atomic_store(result, (unint64_t *)&qword_1000CE7F0);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ContinuitySessionClient.Session(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for UserAccountInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

void *initializeWithCopy for UserAccountInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  swift_bridgeObjectRetain(v4);
  sub_1000109D4(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  sub_1000109D4(v7, v8);
  a1[4] = v7;
  a1[5] = v8;
  uint64_t v9 = a2[6];
  a1[6] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

void *assignWithCopy for UserAccountInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000109D4(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_10000BE18(v8, v9);
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000109D4(v10, v11);
  uint64_t v12 = a1[4];
  unint64_t v13 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  sub_10000BE18(v12, v13);
  uint64_t v14 = a2[6];
  uint64_t v15 = a1[6];
  a1[6] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for UserAccountInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for UserAccountInfo(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10000BE18(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10000BE18(v8, v9);
  uint64_t v10 = a1[6];
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserAccountInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserAccountInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UserAccountInfo()
{
  return &type metadata for UserAccountInfo;
}

unint64_t sub_10001F550()
{
  unint64_t result = qword_1000CE7F8;
  if (!qword_1000CE7F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9D10, &type metadata for UserAccountInfo);
    atomic_store(result, (unint64_t *)&qword_1000CE7F8);
  }

  return result;
}

uint64_t sub_10001F594(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000LL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6F6ELL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v6 = 0x80000001000A4350LL;
    if (a2 == 0x80000001000A4350LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001000A4350LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v7 = 0x80000001000A4370LL;
    if (a2 == 0x80000001000A4370LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001000A4370LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x80000001000A4390LL)
  {
    swift_bridgeObjectRelease(0x80000001000A4390LL);
    return 3LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001000A4390LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10001F720@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000360C(&qword_1000CE800);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000F2CC(a1, v9);
  unint64_t v11 = sub_10001FACC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for UserAccountInfo.CodingKeys,  &type metadata for UserAccountInfo.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10000F2F0(a1);
  }
  LOBYTE(v36) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  uint64_t v14 = v13;
  uint64_t v35 = v12;
  char v38 = 1;
  unint64_t v15 = sub_10001FB10();
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for Data, &v38, v5, &type metadata for Data, v15);
  uint64_t v33 = v14;
  uint64_t v16 = v36;
  char v38 = 2;
  unint64_t v34 = v37;
  sub_1000109D4(v36, v37);
  uint64_t v32 = 0LL;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for Data, &v38, v5, &type metadata for Data, v15);
  uint64_t v31 = v16;
  uint64_t v17 = v36;
  unint64_t v18 = v37;
  uint64_t v19 = sub_10000360C(&qword_1000CE818);
  char v38 = 3;
  uint64_t v29 = v17;
  unint64_t v30 = v18;
  sub_1000109D4(v17, v18);
  uint64_t v20 = sub_10001FB98( &qword_1000CE820,  (void (*)(void))sub_10001FB10,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, v19, &v38, v5, v19, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v36;
  uint64_t v22 = v33;
  swift_bridgeObjectRetain(v33);
  uint64_t v23 = v31;
  unint64_t v24 = v34;
  sub_1000109D4(v31, v34);
  uint64_t v26 = v29;
  unint64_t v25 = v30;
  sub_1000109D4(v29, v30);
  swift_bridgeObjectRetain(v21);
  sub_10000BE18(v26, v25);
  sub_10000BE18(v23, v24);
  swift_bridgeObjectRelease(v22);
  sub_10000F2F0(a1);
  swift_bridgeObjectRelease(v22);
  sub_10000BE18(v23, v24);
  sub_10000BE18(v26, v25);
  uint64_t result = swift_bridgeObjectRelease(v21);
  *a2 = v35;
  a2[1] = v22;
  a2[2] = v23;
  a2[3] = v24;
  a2[4] = v26;
  a2[5] = v25;
  a2[6] = v21;
  return result;
}

unint64_t sub_10001FACC()
{
  unint64_t result = qword_1000CE808;
  if (!qword_1000CE808)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9E8C, &type metadata for UserAccountInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CE808);
  }

  return result;
}

unint64_t sub_10001FB10()
{
  unint64_t result = qword_1000CE810;
  if (!qword_1000CE810)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000CE810);
  }

  return result;
}

unint64_t sub_10001FB54()
{
  unint64_t result = qword_1000CE830;
  if (!qword_1000CE830)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000CE830);
  }

  return result;
}

uint64_t sub_10001FB98(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100003698(&qword_1000CE818);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_10001FC00(void *a1)
{
  return a1;
}

_BYTE *initializeBufferWithCopyOfBuffer for HandoffType(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for UserAccountInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

    uint64_t v9 = (v16 - 1) & v16;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    unint64_t v15 = (v21 - 1) & v21;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      swift_unknownObjectRelease(v12);
      unint64_t v1 = v43;
      uint64_t v5 = v45;
      if (v9 == v45) {
        return;
      }
    }
  }

  uint64_t v26 = 0LL;
  unint64_t v42 = v1 + 32;
  uint64_t v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v26 != v44)
  {
    unint64_t v27 = v4[5];
    uint64_t v28 = *(id *)(v42 + 8 * v26);
    uint64_t v29 = NSObject._rawHashValue(seed:)(v27);
    unint64_t v30 = -1LL << *((_BYTE *)v4 + 32);
    uint64_t v31 = v29 & ~v30;
    uint64_t v32 = v31 >> 6;
    uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
    unint64_t v34 = 1LL << v31;
    if (((1LL << v31) & v33) != 0)
    {
      sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
      uint64_t v35 = *(id *)(v4[6] + 8 * v31);
      uint64_t v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      unint64_t v37 = ~v30;
      while (1)
      {
        uint64_t v31 = (v31 + 1) & v37;
        uint64_t v32 = v31 >> 6;
        uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
        unint64_t v34 = 1LL << v31;
        if ((v33 & (1LL << v31)) == 0) {
          break;
        }
        char v38 = *(id *)(v4[6] + 8 * v31);
        uint64_t v39 = static NSObject.== infix(_:_:)(v38, v28);

        if ((v39 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v8[8 * v32] = v34 | v33;
    *(void *)(v4[6] + 8 * v31) = v28;
    uint64_t v40 = v4[2];
    unint64_t v11 = __OFADD__(v40, 1LL);
    uint64_t v41 = v40 + 1;
    if (v11) {
      goto LABEL_44;
    }
    void v4[2] = v41;
LABEL_31:
    if (++v26 == v45) {
      return;
    }
  }

uint64_t storeEnumTagSinglePayload for UserAccountInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10001FD14 + 4 * byte_1000A9CE9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10001FD48 + 4 * byte_1000A9CE4[v4]))();
}

uint64_t sub_10001FD48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001FD50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001FD58LL);
  }
  return result;
}

uint64_t sub_10001FD64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001FD6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10001FD70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001FD78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001FD84(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001FD8C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserAccountInfo.CodingKeys()
{
  return &type metadata for UserAccountInfo.CodingKeys;
}

unint64_t sub_10001FDA8()
{
  unint64_t result = qword_1000CE840;
  if (!qword_1000CE840)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9E64, &type metadata for UserAccountInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CE840);
  }

  return result;
}

unint64_t sub_10001FDF0()
{
  unint64_t result = qword_1000CE848;
  if (!qword_1000CE848)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9DD4, &type metadata for UserAccountInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CE848);
  }

  return result;
}

unint64_t sub_10001FE38()
{
  unint64_t result = qword_1000CE850;
  if (!qword_1000CE850)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000A9DFC, &type metadata for UserAccountInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CE850);
  }

  return result;
}

void sub_10001FE7C(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v5 = *(void (**)(void))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  unsigned int v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject(&unk_1000C37B8, 24LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  swift_retain(v4);
  id v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);
}

void sub_10001FF10(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10001FF5C()
{
  uint64_t v0 = type metadata accessor for ConduitDeviceActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize();
  qword_1000D35C8 = v1;
  return result;
}

uint64_t type metadata accessor for ConduitDeviceActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService18ConduitDeviceActor);
}

uint64_t sub_10001FFB4()
{
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_retain(qword_1000D35C8);
}

uint64_t sub_10001FFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ConduitDeviceActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_100020018(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100020054 + 4 * byte_1000A9EE0[a1]))( 0xD00000000000002DLL,  0x80000001000A4CB0LL);
}

unint64_t sub_100020054()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_100020094(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000200CC + 4 * byte_1000A9EE4[a1]))( 0xD00000000000002BLL,  0x80000001000A4BB0LL);
}

uint64_t sub_1000200CC(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_100020190(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000201CC + 4 * byte_1000A9EF1[a1]))( 0xD00000000000002BLL,  0x80000001000A4890LL);
}

uint64_t sub_1000201CC()
{
  return v0 + 2;
}

uint64_t sub_1000202BC()
{
  return sub_100020018(*v0);
}

void sub_1000202C4()
{
  id v0 = [objc_allocWithZone(RPCompanionLinkClient) init];
  id v1 = [objc_allocWithZone(RPCompanionLinkClient) init];
  id v2 = [objc_allocWithZone(RPRemoteDisplayDiscovery) init];
  uint64_t v3 = type metadata accessor for ConduitDeviceManager();
  id v4 = (void *)swift_allocObject(v3, 200LL, 7LL);
  id v5 = v0;
  id v6 = v1;
  id v7 = v2;
  id v8 = sub_100035CD0((uint64_t)v5, (uint64_t)v6, (uint64_t)v7, v4);

  qword_1000D35D0 = (uint64_t)v8;
}

uint64_t sub_100020384(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_10002039C, 0LL, 0LL);
}

uint64_t sub_10002039C()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  *(void *)(v2 + 24) = v1;
  id v3 = objc_allocWithZone(&OBJC_CLASS___RPCompanionLinkClient);
  swift_retain(v1);
  id v4 = [v3 init];
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  [v4 setControlFlags:0x180000000002];
  v0[14] = sub_1000383C4;
  v0[15] = v1;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_1000207BC;
  v0[13] = &unk_1000C3F78;
  id v5 = _Block_copy(v0 + 10);
  uint64_t v6 = v0[15];
  swift_retain(v1);
  id v7 = v4;
  swift_release(v6);
  [v7 setDeviceFoundHandler:v5];
  _Block_release(v5);

  id v8 = *(void **)(v2 + 16);
  v0[14] = sub_1000383EC;
  v0[15] = v1;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_1000207BC;
  v0[13] = &unk_1000C3FA0;
  uint64_t v9 = _Block_copy(v0 + 10);
  uint64_t v10 = v0[15];
  swift_retain(v1);
  id v11 = v8;
  swift_release(v10);
  [v11 setDeviceLostHandler:v9];
  _Block_release(v9);

  uint64_t v12 = *(void **)(v2 + 16);
  v0[18] = v12;
  v0[2] = v0;
  v0[3] = sub_100020580;
  uint64_t v13 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_1000209D8;
  v0[13] = &unk_1000C3FC8;
  v0[14] = v13;
  [v12 activateWithCompletion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100020580()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v2;
  if (v2)
  {
    swift_release(*(void *)(v1 + 136));
    id v3 = sub_1000206DC;
  }

  else
  {
    id v3 = sub_1000205E8;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000205E8()
{
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000ADF4(v1, (uint64_t)qword_1000D36B0);
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[BLE] BLE discovery client assertion activated!", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  swift_release(*(void *)(v0 + 128));

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 136));
}

uint64_t sub_1000206DC()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_willThrow();
  swift_release(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002078C, qword_1000D35C8, 0LL);
}

uint64_t sub_10002078C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000207BC(uint64_t a1, void *a2)
{
  os_log_type_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_10002080C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = qword_1000CD638;
  swift_retain(a2);
  id v14 = a1;
  if (v12 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v15 = qword_1000D35C8;
  uint64_t v16 = sub_10001CFD8( &qword_1000CEC58,  v13,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v17 = (void *)swift_allocObject(a3, 48LL, 7LL);
  uint64_t v17[2] = v15;
  v17[3] = v16;
  v17[4] = a2;
  v17[5] = v14;
  swift_retain(v15);
  uint64_t v18 = sub_10004EC20((uint64_t)v10, a4, (uint64_t)v17);
  return swift_release(v18);
}

uint64_t sub_100020944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_1000209A8, qword_1000D35C8, 0LL);
}

uint64_t sub_1000209A8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000209D8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_10000360C(&qword_1000CF8D0);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  void *v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_100020A4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [*(id *)(v1 + 16) activeDevices];
  uint64_t v6 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CE128, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  uint64_t v8 = *(void *)(v1 + 24);
  [*(id *)(v1 + 16) invalidate];
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v4, 1LL, 1LL, v9);
  uint64_t v10 = qword_1000CD638;
  swift_retain(v8);
  if (v10 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v12 = qword_1000D35C8;
  uint64_t v13 = sub_10001CFD8( &qword_1000CEC58,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  id v14 = (void *)swift_allocObject(&unk_1000C3858, 48LL, 7LL);
  void v14[2] = v12;
  v14[3] = v13;
  v14[4] = v7;
  v14[5] = v8;
  swift_retain(v12);
  uint64_t v15 = sub_10004EC20((uint64_t)v4, (uint64_t)&unk_1000CECA0, (uint64_t)v14);
  swift_release(v15);
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000ADF4(v16, (uint64_t)qword_1000D36B0);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[BLE] BLE discovery client assertion deactivated...", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  swift_release(*(void *)(v1 + 24));
  return v1;
}

uint64_t sub_100020C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 64) = a4;
  *(void *)(v5 + 72) = a5;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100020CF4, qword_1000D35C8, 0LL);
}

uint64_t sub_100020CF4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v29 = *(void *)(v0 + 64);
    }
    else {
      uint64_t v29 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 64));
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v29);
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(*(void *)(v0 + 64));
  if (!v2) {
    goto LABEL_23;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = (uint64_t *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 64);
    unint64_t v6 = v1 & 0xC000000000000001LL;
    uint64_t v34 = *(void *)(v0 + 72);
    swift_beginAccess(v34 + 48, v0 + 16, 0LL, 0LL);
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v36 = v5 + 32;
    uint64_t v9 = (void *)(v34 + 48);
    uint64_t v30 = v0 + 48;
    uint64_t v31 = v2;
    uint64_t v32 = v0;
    uint64_t v35 = (uint64_t *)(v0 + 40);
    unint64_t v33 = v1 & 0xC000000000000001LL;
    while (1)
    {
      if (v6) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, *(void *)(v0 + 64));
      }
      else {
        id v10 = *(id *)(v36 + 8 * v8);
      }
      uint64_t v11 = *v9;
      id v12 = v10;
      uint64_t v13 = swift_bridgeObjectRetain(v11);
      uint64_t v14 = sub_100036424(v13);

      swift_bridgeObjectRelease(v11);
      if (v14)
      {
        if ((sub_100025B98((unint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))v14) & 1) == 0)
        {
          uint64_t v37 = v7;
          uint64_t v15 = v9;
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          swift_beginAccess(v15, v4, 33LL, 0LL);
          swift_bridgeObjectRetain(v16);
          uint64_t v18 = sub_100039280(v17, v16);
          swift_endAccess(v4);
          swift_bridgeObjectRelease(v16);
          swift_release(v18);
          if (qword_1000CD6C0 != -1) {
            swift_once(&qword_1000CD6C0, sub_100088F0C);
          }
          uint64_t v19 = type metadata accessor for Logger(0LL);
          sub_10000ADF4(v19, (uint64_t)qword_1000D36B0);
          uint64_t v20 = swift_retain_n(v14, 2LL);
          uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v24 = swift_slowAlloc(32LL, -1LL);
            uint64_t v38 = v24;
            *(_DWORD *)uint64_t v23 = 136315138;
            uint64_t v25 = sub_10000DAA0();
            unint64_t v27 = v26;
            uint64_t v4 = v35;
            *uint64_t v35 = sub_10009BE3C(v25, v26, &v38);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v30, v23 + 4, v23 + 12);
            swift_bridgeObjectRelease(v27);
            swift_release_n(v14, 2LL);
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Conduit device disconnected %s.", v23, 0xCu);
            swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v24, -1LL, -1LL);
            uint64_t v28 = v23;
            uint64_t v2 = v31;
            uint64_t v0 = v32;
            swift_slowDealloc(v28, -1LL, -1LL);
          }

          else
          {
            swift_release_n(v14, 2LL);

            uint64_t v4 = v35;
          }

          uint64_t v9 = (void *)(v34 + 48);
          uint64_t v7 = v37;
          *uint64_t v4 = v14;
          PassthroughSubject.send(_:)(v4);
          swift_release(v14);

          unint64_t v6 = v33;
          goto LABEL_7;
        }

        swift_release(v14);
      }

LABEL_7:
      if (v2 == ++v8) {
        goto LABEL_23;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100021060()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_100021080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_1000210E8, qword_1000D35C8, 0LL);
}

uint64_t sub_1000210E8()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_100024A04(*(void **)(v0 + 56));
    swift_release(Strong);
  }

  **(_BYTE **)(v0 + 40) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002115C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = qword_1000CD638;
  swift_retain(a2);
  id v14 = a1;
  if (v12 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v15 = qword_1000D35C8;
  uint64_t v16 = sub_10001CFD8( &qword_1000CEC58,  v13,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v17 = (void *)swift_allocObject(a3, 48LL, 7LL);
  uint64_t v17[2] = v15;
  v17[3] = v16;
  v17[4] = a2;
  v17[5] = v14;
  swift_retain(v15);
  uint64_t v18 = sub_10004ED6C((uint64_t)v10, a4, (uint64_t)v17);
  return swift_release(v18);
}

uint64_t sub_100021294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_1000212FC, qword_1000D35C8, 0LL);
}

uint64_t sub_1000212FC()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_100025038(*(void **)(v0 + 56));
    swift_release(Strong);
  }

  **(_BYTE **)(v0 + 40) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021370(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = qword_1000CD638;
  swift_retain(a4);
  if (v10 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v12 = qword_1000D35C8;
  uint64_t v13 = sub_10001CFD8( &qword_1000CEC58,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v14 = swift_allocObject(&unk_1000C37E0, 41LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  *(void *)(v14 + 32) = a4;
  *(_BYTE *)(v14 + 40) = a1;
  swift_retain(v12);
  uint64_t v15 = sub_10004ED6C((uint64_t)v8, (uint64_t)&unk_1000CEC70, v14);
  return swift_release(v15);
}

uint64_t sub_10002149C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 56) = a5;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a4;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100021504, qword_1000D35C8, 0LL);
}

uint64_t sub_100021504()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    sub_1000252A0(*(_BYTE *)(v0 + 56));
    swift_release(Strong);
  }

  **(_BYTE **)(v0 + 40) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021578()
{
  uint64_t v1 = v7;
  uint64_t v2 = v8;
  sub_10000F2CC(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 232))(v1, v2);
  sub_10000F2F0(v6);
  sub_10000F310(v0 + 96, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_10000F2CC(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 232))(v3, v4);
  sub_10000F2F0(v6);
  sub_10001D15C(v0 + 16);
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  sub_10000F2F0((void *)(v0 + 56));
  sub_10000F2F0((void *)(v0 + 96));
  sub_10000F2F0((void *)(v0 + 136));
  swift_weakDestroy(v0 + 176);
  swift_release(*(void *)(v0 + 184));

  return v0;
}

uint64_t sub_10002168C()
{
  return swift_deallocClassInstance(v0, 200LL, 7LL);
}

uint64_t type metadata accessor for ConduitDeviceManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService20ConduitDeviceManager);
}

void sub_1000216CC(void *a1)
{
  if (qword_1000CD6A0 != -1) {
    swift_once(&qword_1000CD6A0, sub_100088E6C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3650);
  id v9 = a1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    id v10 = v9;
    id v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    void *v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Incoming session: %@", v5, 0xCu);
    uint64_t v8 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_10002187C()
{
  v1[4] = v0;
  uint64_t v2 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v1[5] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v3 = qword_1000D35C8;
  v1[6] = qword_1000D35C8;
  return swift_task_switch(sub_100021908, v3, 0LL);
}

uint64_t sub_100021908()
{
  if ((TULockdownModeEnabled() & 1) != 0)
  {
    unint64_t v1 = sub_100036DB4();
    uint64_t v2 = swift_allocError(&type metadata for ConduitDeviceManagerError, v1, 0LL, 0LL);
    *uint64_t v3 = 0;
    swift_willThrow(v2);
    swift_task_dealloc(*(void *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t Strong = swift_weakLoadStrong(*(void *)(v0 + 32) + 176LL);
    if (Strong)
    {
      uint64_t v6 = Strong;
      swift_task_dealloc(*(void *)(v0 + 40));
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
    }

    else
    {
      uint64_t v7 = *(void *)(v0 + 32);
      uint64_t v8 = *(void *)(v7 + 184);
      *(void *)(v0 + 56) = v8;
      if (v8)
      {
        uint64_t v9 = async function pointer to Task.value.getter[1];
        swift_retain(v8);
        id v10 = (void *)swift_task_alloc(v9);
        *(void *)(v0 + 64) = v10;
        uint64_t v11 = type metadata accessor for ConduitDeviceManager.BleDiscoveryAssertion();
        uint64_t v12 = sub_10000360C(&qword_1000CF8D0);
        *id v10 = v0;
        v10[1] = sub_100021B60;
        uint64_t v13 = v0 + 24;
        uint64_t v14 = v8;
      }

      else
      {
        uint64_t v15 = *(void *)(v0 + 40);
        uint64_t v16 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
        uint64_t v17 = qword_1000D35C8;
        uint64_t v19 = sub_10001CFD8( &qword_1000CEC58,  v18,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
        uint64_t v20 = (void *)swift_allocObject(&unk_1000C3F60, 40LL, 7LL);
        v20[2] = v17;
        v20[3] = v19;
        v20[4] = v7;
        swift_retain(v7);
        swift_retain(v17);
        uint64_t v21 = sub_100051AB8(v15, (uint64_t)&unk_1000CEF48, (uint64_t)v20);
        *(void *)(v0 + 80) = v21;
        uint64_t v22 = *(void *)(v7 + 184);
        *(void *)(v7 + 184) = v21;
        swift_retain(v21);
        swift_release(v22);
        uint64_t v23 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
        *(void *)(v0 + 88) = v23;
        uint64_t v11 = type metadata accessor for ConduitDeviceManager.BleDiscoveryAssertion();
        uint64_t v12 = sub_10000360C(&qword_1000CF8D0);
        *uint64_t v23 = v0;
        v23[1] = sub_100021C08;
        uint64_t v13 = v0 + 16;
        uint64_t v14 = v21;
      }

      return Task.value.getter(v13, v14, v11, v12, &protocol self-conformance witness table for Error);
    }
  }

uint64_t sub_100021B60()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    os_log_type_t v4 = sub_100021CDC;
  }
  else {
    os_log_type_t v4 = sub_100021BC4;
  }
  return swift_task_switch(v4, *(void *)(v2 + 48), 0LL);
}

uint64_t sub_100021BC4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100021C08()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    os_log_type_t v4 = sub_100021D18;
  }
  else {
    os_log_type_t v4 = sub_100021C6C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 48), 0LL);
}

uint64_t sub_100021C6C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_weakAssign(v2 + 176, v3);
  uint64_t v4 = *(void *)(v2 + 184);
  *(void *)(v2 + 184) = 0LL;
  swift_release(v1);
  swift_release(v4);
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100021CDC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021D18()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v2 + 184);
  *(void *)(v2 + 184) = 0LL;
  swift_release(v1);
  swift_release(v3);
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  v4[3] = qword_1000D35C8;
  uint64_t v6 = type metadata accessor for ConduitDeviceManager.BleDiscoveryAssertion();
  uint64_t v7 = swift_allocObject(v6, 32LL, 7LL);
  uint64_t v8 = dword_1000CEF54;
  swift_retain(a4);
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v4[4] = v9;
  void *v9 = v4;
  v9[1] = sub_100021E28;
  v9[16] = a4;
  v9[17] = v7;
  return swift_task_switch(sub_10002039C, 0LL, 0LL);
}

uint64_t sub_100021E28(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  uint64_t v8 = *(void *)(v4 + 24);
  *(void *)(v4 + 40) = a1;
  return swift_task_switch(sub_100021EA4, v8, 0LL);
}

uint64_t sub_100021EA4()
{
  **(void **)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021EBC()
{
  *(void *)(v1 + 824) = v0;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v2 = qword_1000D35C8;
  *(void *)(v1 + 832) = qword_1000D35C8;
  return swift_task_switch(sub_100021F24, v2, 0LL);
}

uint64_t sub_100021F24()
{
  if ((TULockdownModeEnabled() & 1) != 0)
  {
    unint64_t v1 = sub_100036DB4();
    uint64_t v2 = swift_allocError(&type metadata for ConduitDeviceManagerError, v1, 0LL, 0LL);
    *uint64_t v3 = 0;
    swift_willThrow(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 824) + 56LL;
    swift_beginAccess(v5, v0 + 800, 0LL, 0LL);
    sub_10000F310(v5, v0 + 16);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    sub_10000F2CC((void *)(v0 + 16), v6);
    uint64_t v8 = *(int **)(v7 + 240);
    id v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + *v8);
    uint64_t v9 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 840) = v9;
    void *v9 = v0;
    v9[1] = sub_100022014;
    return v10(v6, v7);
  }

uint64_t sub_100022014()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 840);
  *(void *)(*v1 + 848) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000233F8;
  }
  else {
    uint64_t v4 = sub_100022078;
  }
  return swift_task_switch(v4, *(void *)(v2 + 832), 0LL);
}

uint64_t sub_100022078()
{
  uint64_t v1 = v0[103];
  sub_10000F2F0(v0 + 2);
  sub_10000F310(v1 + 96, (uint64_t)(v0 + 12));
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  sub_10000F2CC(v0 + 12, v2);
  uint64_t v4 = *(int **)(v3 + 240);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[107] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10002210C;
  return v7(v2, v3);
}

uint64_t sub_10002210C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 856);
  *(void *)(*v1 + 864) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10002342C;
  }
  else {
    uint64_t v4 = sub_100022170;
  }
  return swift_task_switch(v4, *(void *)(v2 + 832), 0LL);
}

uint64_t sub_100022170()
{
  uint64_t v1 = v0[103];
  sub_10000F2F0(v0 + 12);
  v1 += 136LL;
  swift_beginAccess(v1, v0 + 97, 0LL, 0LL);
  sub_10000F310(v1, (uint64_t)(v0 + 17));
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  sub_10000F2CC(v0 + 17, v2);
  uint64_t v4 = *(int **)(v3 + 40);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[109] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100022220;
  return v7(v2, v3);
}

uint64_t sub_100022220()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 872);
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100023460;
  }
  else {
    uint64_t v4 = sub_100022284;
  }
  return swift_task_switch(v4, *(void *)(v2 + 832), 0LL);
}

uint64_t sub_100022284()
{
  uint64_t v1 = *(void *)(v0 + 824);
  sub_10000F2F0((void *)(v0 + 136));
  uint64_t v2 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v2 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 216);
  uint64_t v3 = *(void *)(v0 + 248);
  sub_10000F2CC((void *)(v0 + 216), *(void *)(v0 + 240));
  uint64_t v4 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v4 + 16, v1);
  uint64_t v5 = swift_allocObject(&unk_1000C3880, 48LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_BYTE *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = &unk_1000CECB0;
  *(void *)(v5 + 40) = v2;
  uint64_t v6 = *(void (**)(void))(v3 + 264);
  swift_retain(v4);
  swift_retain(v2);
  v6();
  swift_release(v4);
  swift_release(v5);
  sub_10000F2F0((void *)(v0 + 216));
  swift_release(v2);
  uint64_t v7 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v7 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 256);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 288);
  sub_10000F2CC((void *)(v0 + 256), v8);
  uint64_t v10 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_1000C38A8, 48LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(_BYTE *)(v11 + 24) = 1;
  *(void *)(v11 + 32) = &unk_1000CECC0;
  *(void *)(v11 + 40) = v7;
  uint64_t v12 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v9 + 264);
  swift_retain(v10);
  swift_retain(v7);
  v12(0xD000000000000029LL, 0x80000001000A4B80LL, 0LL, sub_100036734, v11, v8, v9);
  swift_release(v10);
  swift_release(v11);
  sub_10000F2F0((void *)(v0 + 256));
  swift_release(v7);
  uint64_t v13 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v13 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 296);
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 328);
  sub_10000F2CC((void *)(v0 + 296), v14);
  uint64_t v16 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v16 + 16, v1);
  uint64_t v17 = swift_allocObject(&unk_1000C38D0, 48LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(_BYTE *)(v17 + 24) = 8;
  *(void *)(v17 + 32) = &unk_1000CECD0;
  *(void *)(v17 + 40) = v13;
  uint64_t v18 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 264);
  swift_retain(v16);
  swift_retain(v13);
  v18(0xD00000000000002FLL, 0x80000001000A49F0LL, 0LL, sub_1000367E0, v17, v14, v15);
  swift_release(v16);
  swift_release(v17);
  sub_10000F2F0((void *)(v0 + 296));
  swift_release(v13);
  uint64_t v19 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v19 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 336);
  uint64_t v20 = *(void *)(v0 + 360);
  uint64_t v21 = *(void *)(v0 + 368);
  sub_10000F2CC((void *)(v0 + 336), v20);
  uint64_t v22 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v22 + 16, v1);
  uint64_t v23 = swift_allocObject(&unk_1000C38F8, 48LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  *(_BYTE *)(v23 + 24) = 9;
  *(void *)(v23 + 32) = &unk_1000CECE0;
  *(void *)(v23 + 40) = v19;
  uint64_t v24 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v21 + 264);
  swift_retain(v22);
  swift_retain(v19);
  v24(0xD000000000000021LL, 0x80000001000A49C0LL, 0LL, sub_10003688C, v23, v20, v21);
  swift_release(v22);
  swift_release(v23);
  sub_10000F2F0((void *)(v0 + 336));
  swift_release(v19);
  uint64_t v25 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v25 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 376);
  uint64_t v26 = *(void *)(v0 + 400);
  uint64_t v27 = *(void *)(v0 + 408);
  sub_10000F2CC((void *)(v0 + 376), v26);
  uint64_t v28 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v28 + 16, v1);
  uint64_t v29 = swift_allocObject(&unk_1000C3920, 48LL, 7LL);
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
  *(_BYTE *)(v29 + 24) = 0;
  *(void *)(v29 + 32) = sub_1000368C8;
  *(void *)(v29 + 40) = v25;
  uint64_t v30 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v27 + 272);
  swift_retain(v28);
  swift_retain(v25);
  v30(0xD00000000000002BLL, 0x80000001000A4890LL, 0LL, sub_100036904, v29, v26, v27);
  swift_release(v28);
  swift_release(v29);
  sub_10000F2F0((void *)(v0 + 376));
  swift_release(v25);
  uint64_t v31 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v31 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 416);
  uint64_t v32 = *(void *)(v0 + 440);
  uint64_t v33 = *(void *)(v0 + 448);
  sub_10000F2CC((void *)(v0 + 416), v32);
  uint64_t v34 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v34 + 16, v1);
  uint64_t v35 = swift_allocObject(&unk_1000C3948, 48LL, 7LL);
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
  *(_BYTE *)(v35 + 24) = 1;
  *(void *)(v35 + 32) = sub_100036934;
  *(void *)(v35 + 40) = v31;
  uint64_t v36 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v33 + 272);
  swift_retain(v34);
  swift_retain(v31);
  v36(0xD000000000000029LL, 0x80000001000A4860LL, 0LL, sub_100036970, v35, v32, v33);
  swift_release(v34);
  swift_release(v35);
  sub_10000F2F0((void *)(v0 + 416));
  swift_release(v31);
  uint64_t v37 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v37 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 456);
  uint64_t v38 = *(void *)(v0 + 488);
  sub_10000F2CC((void *)(v0 + 456), *(void *)(v0 + 480));
  uint64_t v39 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v39 + 16, v1);
  uint64_t v40 = swift_allocObject(&unk_1000C3970, 48LL, 7LL);
  *(void *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  *(_BYTE *)(v40 + 24) = 2;
  *(void *)(v40 + 32) = sub_1000369A0;
  *(void *)(v40 + 40) = v37;
  uint64_t v41 = *(void (**)(void))(v38 + 272);
  swift_retain(v39);
  swift_retain(v37);
  v41();
  swift_release(v39);
  swift_release(v40);
  sub_10000F2F0((void *)(v0 + 456));
  swift_release(v37);
  uint64_t v42 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v42 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 496);
  uint64_t v43 = *(void *)(v0 + 520);
  uint64_t v44 = *(void *)(v0 + 528);
  sub_10000F2CC((void *)(v0 + 496), v43);
  uint64_t v45 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v45 + 16, v1);
  uint64_t v46 = swift_allocObject(&unk_1000C3998, 48LL, 7LL);
  *(void *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = v45;
  *(_BYTE *)(v46 + 24) = 3;
  *(void *)(v46 + 32) = sub_100036A0C;
  *(void *)(v46 + 40) = v42;
  uint64_t v47 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v44 + 272);
  swift_retain(v45);
  swift_retain(v42);
  v47(0xD000000000000033LL, 0x80000001000A47E0LL, 0LL, sub_100036A48, v46, v43, v44);
  swift_release(v45);
  swift_release(v46);
  sub_10000F2F0((void *)(v0 + 496));
  swift_release(v42);
  uint64_t v48 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v48 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 536);
  uint64_t v49 = *(void *)(v0 + 560);
  uint64_t v50 = *(void *)(v0 + 568);
  sub_10000F2CC((void *)(v0 + 536), v49);
  uint64_t v51 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v51 + 16, v1);
  uint64_t v52 = swift_allocObject(&unk_1000C39C0, 48LL, 7LL);
  *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = v51;
  *(_BYTE *)(v52 + 24) = 6;
  *(void *)(v52 + 32) = sub_100036A78;
  *(void *)(v52 + 40) = v48;
  uint64_t v53 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v50 + 272);
  swift_retain(v51);
  swift_retain(v48);
  v53(0xD000000000000029LL, 0x80000001000A4750LL, 0LL, sub_100036AB4, v52, v49, v50);
  swift_release(v51);
  swift_release(v52);
  sub_10000F2F0((void *)(v0 + 536));
  swift_release(v48);
  uint64_t v54 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v54 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 576);
  uint64_t v55 = *(void *)(v0 + 600);
  uint64_t v56 = *(void *)(v0 + 608);
  sub_10000F2CC((void *)(v0 + 576), v55);
  uint64_t v57 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v57 + 16, v1);
  uint64_t v58 = swift_allocObject(&unk_1000C39E8, 48LL, 7LL);
  *(void *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = v57;
  *(_BYTE *)(v58 + 24) = 7;
  *(void *)(v58 + 32) = sub_100036AE4;
  *(void *)(v58 + 40) = v54;
  uint64_t v59 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v56 + 272);
  swift_retain(v57);
  swift_retain(v54);
  v59(0xD000000000000027LL, 0x80000001000A4720LL, 0LL, sub_100036AF0, v58, v55, v56);
  swift_release(v57);
  swift_release(v58);
  sub_10000F2F0((void *)(v0 + 576));
  swift_release(v54);
  uint64_t v60 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v60 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 616);
  uint64_t v61 = *(void *)(v0 + 640);
  uint64_t v62 = *(void *)(v0 + 648);
  sub_10000F2CC((void *)(v0 + 616), v61);
  uint64_t v63 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v63 + 16, v1);
  uint64_t v64 = swift_allocObject(&unk_1000C3A10, 48LL, 7LL);
  *(void *)(v64 + swift_unknownObjectWeakDestroy(v0 + 16) = v63;
  *(_BYTE *)(v64 + 24) = 8;
  *(void *)(v64 + 32) = sub_100036B20;
  *(void *)(v64 + 40) = v60;
  os_log_type_t v65 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v62 + 272);
  swift_retain(v63);
  swift_retain(v60);
  v65(0xD000000000000038LL, 0x80000001000A46E0LL, 0LL, sub_100036B5C, v64, v61, v62);
  swift_release(v63);
  swift_release(v64);
  sub_10000F2F0((void *)(v0 + 616));
  swift_release(v60);
  uint64_t v66 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v66 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 656);
  uint64_t v67 = *(void *)(v0 + 680);
  uint64_t v68 = *(void *)(v0 + 688);
  sub_10000F2CC((void *)(v0 + 656), v67);
  uint64_t v69 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v69 + 16, v1);
  uint64_t v70 = swift_allocObject(&unk_1000C3A38, 48LL, 7LL);
  *(void *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v69;
  *(_BYTE *)(v70 + 24) = 9;
  *(void *)(v70 + 32) = sub_100036B8C;
  *(void *)(v70 + 40) = v66;
  uint64_t v71 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v68 + 272);
  swift_retain(v69);
  swift_retain(v66);
  v71(0xD00000000000002CLL, 0x80000001000A46B0LL, 0LL, sub_100036BC0, v70, v67, v68);
  swift_release(v69);
  swift_release(v70);
  sub_10000F2F0((void *)(v0 + 656));
  swift_release(v66);
  uint64_t v72 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v72 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 696);
  uint64_t v73 = *(void *)(v0 + 720);
  uint64_t v74 = *(void *)(v0 + 728);
  sub_10000F2CC((void *)(v0 + 696), v73);
  uint64_t v75 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v75 + 16, v1);
  uint64_t v76 = swift_allocObject(&unk_1000C3A60, 48LL, 7LL);
  *(void *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = v75;
  *(_BYTE *)(v76 + 24) = 11;
  *(void *)(v76 + 32) = sub_100036BF0;
  *(void *)(v76 + 40) = v72;
  id v77 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v74 + 272);
  swift_retain(v75);
  swift_retain(v72);
  v77(0xD00000000000002BLL, 0x80000001000A4650LL, 0LL, sub_100036C2C, v76, v73, v74);
  swift_release(v75);
  swift_release(v76);
  sub_10000F2F0((void *)(v0 + 696));
  swift_release(v72);
  uint64_t v78 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v78 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 736);
  uint64_t v79 = *(void *)(v0 + 760);
  uint64_t v80 = *(void *)(v0 + 768);
  sub_10000F2CC((void *)(v0 + 736), v79);
  uint64_t v81 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v81 + 16, v1);
  uint64_t v82 = swift_allocObject(&unk_1000C3A88, 48LL, 7LL);
  *(void *)(v82 + swift_unknownObjectWeakDestroy(v0 + 16) = v81;
  *(_BYTE *)(v82 + 24) = 12;
  *(void *)(v82 + 32) = sub_100036C5C;
  *(void *)(v82 + 40) = v78;
  unint64_t v83 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v80 + 272);
  swift_retain(v81);
  swift_retain(v78);
  v83(0xD000000000000034LL, 0x80000001000A4610LL, 0LL, sub_100036C90, v82, v79, v80);
  swift_release(v81);
  swift_release(v82);
  sub_10000F2F0((void *)(v0 + 736));
  swift_release(v78);
  uint64_t v84 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v84 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 176);
  uint64_t v85 = *(void *)(v0 + 200);
  uint64_t v86 = *(void *)(v0 + 208);
  sub_10000F2CC((void *)(v0 + 176), v85);
  uint64_t v87 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v87 + 16, v1);
  uint64_t v88 = swift_allocObject(&unk_1000C3AB0, 48LL, 7LL);
  *(void *)(v88 + swift_unknownObjectWeakDestroy(v0 + 16) = v87;
  *(_BYTE *)(v88 + 24) = 13;
  *(void *)(v88 + 32) = sub_100036CC0;
  *(void *)(v88 + 40) = v84;
  unint64_t v89 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v86 + 272);
  swift_retain(v87);
  swift_retain(v84);
  v89(0xD000000000000030LL, 0x80000001000A45D0LL, 0LL, sub_100036CF4, v88, v85, v86);
  swift_release(v87);
  swift_release(v88);
  sub_10000F2F0((void *)(v0 + 176));
  swift_release(v84);
  uint64_t v90 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v90 + 16, v1);
  sub_10000F310(v1 + 96, v0 + 56);
  uint64_t v91 = *(void *)(v0 + 80);
  uint64_t v92 = *(void *)(v0 + 88);
  sub_10000F2CC((void *)(v0 + 56), v91);
  uint64_t v93 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
  swift_weakInit(v93 + 16, v1);
  uint64_t v94 = swift_allocObject(&unk_1000C3AD8, 48LL, 7LL);
  *(void *)(v94 + swift_unknownObjectWeakDestroy(v0 + 16) = v93;
  *(_BYTE *)(v94 + 24) = 14;
  *(void *)(v94 + 32) = sub_100036D24;
  *(void *)(v94 + 40) = v90;
  uint64_t v95 = *(void (**)(unint64_t, unint64_t, void, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v92 + 272);
  swift_retain(v93);
  swift_retain(v90);
  v95(0xD00000000000002ALL, 0x80000001000A45A0LL, 0LL, sub_100036D84, v94, v91, v92);
  swift_release(v93);
  swift_release(v94);
  sub_10000F2F0((void *)(v0 + 56));
  swift_release(v90);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000233F8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002342C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100023460()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100023494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v5 = qword_1000D35C8;
  void v4[9] = qword_1000D35C8;
  return swift_task_switch(sub_100023500, v5, 0LL);
}

uint64_t sub_100023500()
{
  uint64_t v1 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong
    && (uint64_t v4 = Strong,
        uint64_t v5 = swift_unknownObjectWeakLoadStrong(Strong + 16, v3),
        *(void *)(v0 + 80) = v5,
        swift_release(v4),
        v5))
  {
    if (qword_1000CD668 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v6 = (void *)swift_task_alloc(dword_1000CFC5C);
    *(void *)(v0 + 88) = v6;
    void *v6 = v0;
    v6[1] = sub_100023610;
    return sub_10005F128(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
  }

  else
  {
    unint64_t v8 = sub_100036DB4();
    uint64_t v9 = swift_allocError(&type metadata for ConduitDeviceManagerError, v8, 0LL, 0LL);
    *uint64_t v10 = 2;
    swift_willThrow(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100023610()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000236A8;
  }
  else {
    uint64_t v4 = sub_100023674;
  }
  return swift_task_switch(v4, *(void *)(v2 + 72), 0LL);
}

uint64_t sub_100023674()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000236A8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000236DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v5 = qword_1000D35C8;
  void v4[9] = qword_1000D35C8;
  return swift_task_switch(sub_100023748, v5, 0LL);
}

uint64_t sub_100023748()
{
  uint64_t v1 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong
    && (uint64_t v4 = Strong,
        uint64_t v5 = swift_unknownObjectWeakLoadStrong(Strong + 16, v3),
        *(void *)(v0 + 80) = v5,
        swift_release(v4),
        v5))
  {
    if (qword_1000CD668 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v6 = (void *)swift_task_alloc(dword_1000CFBDC);
    *(void *)(v0 + 88) = v6;
    void *v6 = v0;
    v6[1] = sub_100023858;
    return sub_1000609C0(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
  }

  else
  {
    unint64_t v8 = sub_100036DB4();
    uint64_t v9 = swift_allocError(&type metadata for ConduitDeviceManagerError, v8, 0LL, 0LL);
    *uint64_t v10 = 2;
    swift_willThrow(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100023858()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000389B4;
  }
  else {
    uint64_t v4 = sub_1000389B0;
  }
  return swift_task_switch(v4, *(void *)(v2 + 72), 0LL);
}

uint64_t sub_1000238BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v5 = qword_1000D35C8;
  void v4[9] = qword_1000D35C8;
  return swift_task_switch(sub_100023928, v5, 0LL);
}

uint64_t sub_100023928()
{
  uint64_t v1 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong
    && (uint64_t v4 = Strong,
        uint64_t v5 = swift_unknownObjectWeakLoadStrong(Strong + 16, v3),
        *(void *)(v0 + 80) = v5,
        swift_release(v4),
        v5))
  {
    if (qword_1000CD668 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    return swift_task_switch(sub_100023A20, qword_1000D35E0, 0LL);
  }

  else
  {
    unint64_t v7 = sub_100036DB4();
    uint64_t v8 = swift_allocError(&type metadata for ConduitDeviceManagerError, v7, 0LL, 0LL);
    _BYTE *v9 = 2;
    swift_willThrow(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100023A20()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_1000CF01C);
  v0[11] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_100023858;
  return sub_100045288(v0[5], v0[6], v0[7]);
}

uint64_t sub_100023A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v5 = qword_1000D35C8;
  void v4[9] = qword_1000D35C8;
  return swift_task_switch(sub_100023AEC, v5, 0LL);
}

uint64_t sub_100023AEC()
{
  uint64_t v1 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong
    && (uint64_t v4 = Strong,
        uint64_t v5 = swift_unknownObjectWeakLoadStrong(Strong + 16, v3),
        *(void *)(v0 + 80) = v5,
        swift_release(v4),
        v5))
  {
    if (qword_1000CD668 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v6 = (void *)swift_task_alloc(dword_1000CFB94);
    *(void *)(v0 + 88) = v6;
    void *v6 = v0;
    v6[1] = sub_100023858;
    return sub_100064D18(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
  }

  else
  {
    unint64_t v8 = sub_100036DB4();
    uint64_t v9 = swift_allocError(&type metadata for ConduitDeviceManagerError, v8, 0LL, 0LL);
    *uint64_t v10 = 2;
    swift_willThrow(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100023BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for NCProtoIDSProxyMessage(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  unint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v9);
  uint64_t v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a3 += 16LL;
  swift_beginAccess(a3, v26, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(result + 16, v13);
    uint64_t result = swift_release(v14);
    if (Strong)
    {
      uint64_t v16 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v11, 1LL, 1LL, v16);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  a1,  v5);
      uint64_t v17 = qword_1000CD668;
      id v18 = Strong;
      if (v17 != -1) {
        swift_once(&qword_1000CD668, sub_100053B3C);
      }
      uint64_t v19 = qword_1000D35E0;
      uint64_t v20 = sub_10001CFD8( &qword_1000CF800,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
      uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v22 = (v21 + 40) & ~v21;
      uint64_t v23 = (char *)swift_allocObject(&unk_1000C3D08, v22 + v7, v21 | 7);
      *((void *)v23 + 2) = v19;
      *((void *)v23 + 3) = v20;
      *((void *)v23 + 4) = v18;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v23[v22], v8, v5);
      swift_retain(v19);
      uint64_t v24 = sub_10004ED6C((uint64_t)v11, (uint64_t)&unk_1000CEE08, (uint64_t)v23);
      swift_unknownObjectRelease(v18);
      return swift_release(v24);
    }
  }

  return result;
}

uint64_t sub_100023DF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, uint64_t (*a7)(char *, uint64_t, char *))
{
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v11 = a4(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v16);
  id v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v37, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v21 = result;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(result + 16, v20);
    uint64_t result = swift_release(v21);
    if (Strong)
    {
      uint64_t v34 = a7;
      uint64_t v23 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v18, 1LL, 1LL, v23);
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
      uint64_t v24 = qword_1000CD668;
      swift_unknownObjectRetain(Strong);
      uint64_t v33 = a2;
      swift_retain(a2);
      if (v24 != -1) {
        swift_once(&qword_1000CD668, sub_100053B3C);
      }
      uint64_t v25 = qword_1000D35E0;
      uint64_t v26 = sub_10001CFD8( &qword_1000CF800,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
      uint64_t v27 = *(unsigned __int8 *)(v12 + 80);
      uint64_t v28 = (v27 + 40) & ~v27;
      unint64_t v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v30 = (char *)swift_allocObject(v35, v29 + 8, v27 | 7);
      *((void *)v30 + 2) = v25;
      *((void *)v30 + 3) = v26;
      *((void *)v30 + 4) = Strong;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v30[v28], v15, v11);
      *(void *)&v30[v29] = v33;
      swift_retain(v25);
      uint64_t v31 = v34(v18, v36, v30);
      swift_unknownObjectRelease(Strong);
      return swift_release(v31);
    }
  }

  return result;
}

uint64_t sub_100024020( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a6;
  uint64_t v10 = a4(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v14 = &v29[-v13 - 8];
  uint64_t v15 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v15);
  uint64_t v17 = &v29[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a3 += 16LL;
  swift_beginAccess(a3, v29, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(result + 16, v19);
    uint64_t result = swift_release(v20);
    if (Strong)
    {
      uint64_t v22 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v17, 1LL, 1LL, v22);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
      uint64_t v23 = *(unsigned __int8 *)(v11 + 80);
      uint64_t v24 = (v23 + 40) & ~v23;
      unint64_t v25 = (v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v26 = (char *)swift_allocObject(a5, v25 + 8, v23 | 7);
      *((void *)v26 + 2) = 0LL;
      *((void *)v26 + 3) = 0LL;
      *((void *)v26 + 4) = Strong;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v26[v24], v14, v10);
      *(void *)&v26[v25] = a2;
      swift_unknownObjectRetain(Strong);
      swift_retain(a2);
      uint64_t v27 = sub_10004EC20((uint64_t)v17, v28, (uint64_t)v26);
      swift_unknownObjectRelease(Strong);
      return swift_release(v27);
    }
  }

  return result;
}

uint64_t sub_1000241DC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 112) = a3;
  *(void *)(v4 + 48) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v5 = qword_1000D35C8;
  *(void *)(v4 + 72) = qword_1000D35C8;
  return swift_task_switch(sub_10002424C, v5, 0LL);
}

uint64_t sub_10002424C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void **)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  char v4 = *(_BYTE *)(v0 + 112);
  swift_beginAccess(v2 + 48, v0 + 16, 0LL, 0LL);
  uint64_t v5 = *(void *)(v2 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v1, (uint64_t)v3, v4);
  uint64_t v6 = sub_10007B1CC(v5, v1, v3, v4);
  *(void *)(v0 + 80) = v6;
  sub_10000EF20(v1, (uint64_t)v3, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_1000CDEE4);
    *(void *)(v0 + 88) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100024564;
    return sub_10000E9FC();
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 56);
    unsigned __int8 v11 = *(_BYTE *)(v0 + 112);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v12, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v9, v11);
    uint64_t v13 = sub_10000EEF8(v10, v9, v11);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    char v17 = *(_BYTE *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 48);
    id v18 = *(void **)(v0 + 56);
    if (v16)
    {
      os_log_t log = v14;
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v24;
      *(_DWORD *)uint64_t v20 = 136315138;
      sub_10000EEF8(v19, (uint64_t)v18, v17);
      unint64_t v21 = sub_10000C47C(v19, v18, v17);
      unint64_t v23 = v22;
      sub_10000EF20(v19, (uint64_t)v18, v17);
      *(void *)(v0 + 40) = sub_10009BE3C(v21, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v23);
      sub_10000EF20(v19, (uint64_t)v18, v17);
      sub_10000EF20(v19, (uint64_t)v18, v17);
      uint64_t v14 = log;
      _os_log_impl( (void *)&_mh_execute_header,  log,  v15,  "Failed to take connection assertion for %s because we could not find the device.",  v20,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 48), *(void *)(v0 + 56), *(_BYTE *)(v0 + 112));
      sub_10000EF20(v19, (uint64_t)v18, v17);
    }

    (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100024564(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 72);
  if (v1)
  {
    uint64_t v7 = sub_100024610;
  }

  else
  {
    *(void *)(v4 + 104) = a1;
    uint64_t v7 = sub_1000245D8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000245D8()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
}

uint64_t sub_100024610()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024644(uint64_t *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7 = *a1;
  swift_beginAccess(*a1 + 64, v11, 0LL, 0LL);
  uint64_t v8 = *(void *)(v7 + 64);
  swift_bridgeObjectRetain(v8);
  char v9 = sub_10004EF00(a2, a3, a4, v8);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

void sub_1000246D0(void *a1)
{
  id v2 = [a1 knownIdentifiersByHandleType];
  uint64_t v3 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
  unint64_t v4 = sub_10000F3C0();
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, &type metadata for String, v4);

  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v29 = v5 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  uint64_t v31 = (uint64_t *)(v1 + 48);
  swift_beginAccess(v1 + 48, v32, 0LL, 0LL);
  int64_t v10 = 0LL;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  if (v9) {
    goto LABEL_8;
  }
LABEL_9:
  if (!__OFADD__(v10++, 1LL))
  {
    if (v10 >= v30) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v10);
    if (v17)
    {
LABEL_19:
      unint64_t v9 = (v17 - 1) & v17;
      for (unint64_t i = __clz(__rbit64(v17)) + (v10 << 6); ; unint64_t i = v14 | (v10 << 6))
      {
        uint64_t v19 = *(void **)(*(void *)(v5 + 48) + 8 * i);
        uint64_t v20 = (uint64_t *)(*(void *)(v5 + 56) + 16 * i);
        uint64_t v21 = *v20;
        uint64_t v22 = v20[1];
        id v23 = v19;
        swift_bridgeObjectRetain(v22);
        id v24 = [v23 integerValue];
        if (v24 == (id)2)
        {
          uint64_t v11 = *v31;
          __chkstk_darwin(2LL);
          uint64_t v26 = v21;
          uint64_t v27 = v22;
          char v28 = 0;
          swift_bridgeObjectRetain(v11);
          uint64_t v12 = sub_1000365F8;
        }

        else if (v24 == (id)1)
        {
          uint64_t v11 = *v31;
          __chkstk_darwin(1LL);
          uint64_t v26 = v21;
          uint64_t v27 = v22;
          char v28 = 1;
          swift_bridgeObjectRetain(v11);
          uint64_t v12 = sub_1000389CC;
        }

        else
        {
          if (v24)
          {
            swift_bridgeObjectRelease(v22);

            if (!v9) {
              goto LABEL_9;
            }
            goto LABEL_8;
          }

          uint64_t v11 = *v31;
          __chkstk_darwin(0LL);
          uint64_t v26 = v21;
          uint64_t v27 = v22;
          char v28 = 2;
          swift_bridgeObjectRetain(v11);
          uint64_t v12 = sub_1000389CC;
        }

        uint64_t v13 = sub_10003A664(v12, (uint64_t)&v25, v11);
        swift_bridgeObjectRelease(v22);

        swift_bridgeObjectRelease(v11);
        if (v13) {
          goto LABEL_31;
        }
        if (!v9) {
          goto LABEL_9;
        }
LABEL_8:
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
      }
    }

    int64_t v18 = v10 + 1;
    if (v10 + 1 >= v30) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v18);
    if (!v17)
    {
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v17 = *(void *)(v29 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v10 + 3;
        if (v10 + 3 < v30)
        {
          unint64_t v17 = *(void *)(v29 + 8 * v18);
          if (v17) {
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v10 = v18 + 1;
            if (__OFADD__(v18, 1LL)) {
              goto LABEL_33;
            }
            if (v10 >= v30) {
              break;
            }
            unint64_t v17 = *(void *)(v29 + 8 * v10);
            ++v18;
            if (v17) {
              goto LABEL_19;
            }
          }
        }

LABEL_31:
        swift_release(v5);
        return;
      }
    }

void sub_100024A04(void *a1)
{
  uint64_t v2 = v1;
  swift_beginAccess(v2 + 48, v50, 0LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 48);
  id v5 = a1;
  uint64_t v6 = swift_bridgeObjectRetain(v4);
  uint64_t v7 = sub_100036424(v6);
  swift_bridgeObjectRelease(v4);

  if (v7)
  {
    sub_10000E690(v5);
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v8, (uint64_t)qword_1000D36B0);
    uint64_t v9 = swift_retain_n(v7, 2LL);
    int64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v14 = sub_10000DAA0();
      unint64_t v16 = v15;
      uint64_t v47 = sub_10009BE3C(v14, v15, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v12 + 4, v12 + 12);
      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease(v16);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Found existing device again, merged in new data: %s.",  v12,  0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_release(v7);
    }

    else
    {

      swift_release_n(v7, 3LL);
    }
  }

  else if (([v5 flags] & 1) == 0)
  {
    uint64_t v17 = type metadata accessor for ConduitDevice();
    swift_allocObject(v17, 120LL, 7LL);
    id v18 = v5;
    uint64_t v19 = sub_10000D524(v18);
    if (v19)
    {
      uint64_t v20 = v19;
      if (qword_1000CD6C0 != -1) {
        swift_once(&qword_1000CD6C0, sub_100088F0C);
      }
      uint64_t v21 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v21, (uint64_t)qword_1000D36B0);
      id v22 = v18;
      swift_retain_n(v20, 2LL);
      id v23 = v22;
      id v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc(22LL, -1LL);
        uint64_t v45 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v46 = swift_slowAlloc(32LL, -1LL);
        uint64_t v48 = v46;
        *(_DWORD *)uint64_t v26 = 136315394;
        os_log_t log = v24;
        uint64_t v27 = sub_10000DAA0();
        unint64_t v29 = v28;
        uint64_t v47 = sub_10009BE3C(v27, v28, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 4, v26 + 12);
        swift_release_n(v20, 2LL);
        swift_bridgeObjectRelease(v29);
        *(_WORD *)(v26 + 12) = 2112;
        uint64_t v47 = (uint64_t)v23;
        id v30 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 14, v26 + 22);
        *uint64_t v45 = v23;

        _os_log_impl( (void *)&_mh_execute_header,  log,  v25,  "Publishing conduit device %s for %@.",  (uint8_t *)v26,  0x16u);
        uint64_t v31 = sub_10000360C(&qword_1000CE7A0);
        swift_arrayDestroy(v45, 1LL, v31);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v20, 2LL);
      }

      uint64_t v40 = *(void *)(v20 + 16);
      uint64_t v41 = *(void *)(v20 + 24);
      swift_beginAccess(v2 + 48, &v48, 33LL, 0LL);
      swift_retain(v20);
      swift_bridgeObjectRetain(v41);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 48));
      uint64_t v47 = *(void *)(v2 + 48);
      *(void *)(v2 + 48) = 0x8000000000000000LL;
      sub_100077D6C(v20, v40, v41, isUniquelyReferenced_nonNull_native);
      uint64_t v43 = *(void *)(v2 + 48);
      *(void *)(v2 + 48) = v47;
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v43);
      swift_endAccess(&v48);
      uint64_t v48 = v20;
      PassthroughSubject.send(_:)(&v48);
      swift_release(v20);
    }

    else
    {
      if (qword_1000CD6C0 != -1) {
        swift_once(&qword_1000CD6C0, sub_100088F0C);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v32, (uint64_t)qword_1000D36B0);
      id v33 = v18;
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v36 = 138412290;
        uint64_t v48 = (uint64_t)v33;
        id v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v36 + 4, v36 + 12);
        *uint64_t v37 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to create conduit device for %@.", v36, 0xCu);
        uint64_t v39 = sub_10000360C(&qword_1000CE7A0);
        swift_arrayDestroy(v37, 1LL, v39);
        swift_slowDealloc(v37, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

void sub_100025038(void *a1)
{
  uint64_t v2 = v1;
  swift_beginAccess(v2 + 48, v22, 0LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 48);
  id v5 = a1;
  uint64_t v6 = swift_bridgeObjectRetain(v4);
  uint64_t v7 = sub_100036424(v6);
  swift_bridgeObjectRelease(v4);

  if (v7)
  {
    if ((sub_100025B98((unint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))v7) & 1) == 0)
    {
      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v9 = *(void *)(v7 + 24);
      swift_beginAccess(v2 + 48, v21, 33LL, 0LL);
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = sub_100039280(v8, v9);
      swift_endAccess(v21);
      swift_bridgeObjectRelease(v9);
      swift_release(v10);
      if (qword_1000CD6C0 != -1) {
        swift_once(&qword_1000CD6C0, sub_100088F0C);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v11, (uint64_t)qword_1000D36B0);
      uint64_t v12 = swift_retain_n(v7, 2LL);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v16 = swift_slowAlloc(32LL, -1LL);
        v21[0] = v16;
        *(_DWORD *)unint64_t v15 = 136315138;
        uint64_t v17 = sub_10000DAA0();
        unint64_t v19 = v18;
        uint64_t v20 = sub_10009BE3C(v17, v18, v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v15 + 4, v15 + 12);
        swift_release_n(v7, 2LL);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Conduit device disconnected %s.", v15, 0xCu);
        swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v7, 2LL);
      }

      v21[0] = v7;
      PassthroughSubject.send(_:)(v21);
    }

    swift_release(v7);
  }

void sub_1000252A0(char a1)
{
  if (!a1)
  {
    uint64_t v2 = v1;
    swift_beginAccess(v1 + 6, v105, 0LL, 0LL);
    uint64_t v3 = v1[6];
    uint64_t v4 = *(void *)(v3 + 64);
    uint64_t v90 = v3 + 64;
    uint64_t v5 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v6 = -1LL;
    if (v5 < 64) {
      uint64_t v6 = ~(-1LL << v5);
    }
    unint64_t v7 = v6 & v4;
    uint64_t v92 = v1 + 22;
    uint64_t v95 = v3;
    swift_bridgeObjectRetain(v3);
    uint64_t v94 = v1 + 7;
    swift_beginAccess(v1 + 7, v104, 0LL, 0LL);
    unint64_t v89 = v1 + 17;
    __n128 v8 = swift_beginAccess(v1 + 17, v103, 0LL, 0LL);
    int64_t v9 = 0LL;
    int64_t v91 = (unint64_t)(v5 + 63) >> 6;
    v8.n128_u64[0] = 136315138LL;
    __n128 v87 = v8;
    uint64_t v86 = (char *)&type metadata for Any + 8;
    uint64_t v93 = v1;
    uint64_t v88 = v1 + 6;
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      return;
    }

    if (v11 >= v91) {
      goto LABEL_77;
    }
    unint64_t v12 = *(void *)(v90 + 8 * v11);
    int64_t v13 = v9 + 1;
    if (!v12)
    {
      int64_t v13 = v9 + 2;
      if (v9 + 2 >= v91) {
        goto LABEL_77;
      }
      unint64_t v12 = *(void *)(v90 + 8 * v13);
      if (v12) {
        goto LABEL_24;
      }
      int64_t v13 = v9 + 3;
      if (v9 + 3 >= v91) {
        goto LABEL_77;
      }
      unint64_t v12 = *(void *)(v90 + 8 * v13);
      if (v12) {
        goto LABEL_24;
      }
      int64_t v13 = v9 + 4;
      if (v9 + 4 >= v91)
      {
LABEL_77:
        swift_release(v95);
        return;
      }

      unint64_t v12 = *(void *)(v90 + 8 * v13);
      if (!v12)
      {
        uint64_t v14 = v9 + 5;
        if (v9 + 5 < v91)
        {
          unint64_t v12 = *(void *)(v90 + 8 * v14);
          if (v12)
          {
            int64_t v13 = v9 + 5;
            goto LABEL_24;
          }

          while (1)
          {
            int64_t v13 = v14 + 1;
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_82;
            }
            if (v13 >= v91) {
              goto LABEL_77;
            }
            unint64_t v12 = *(void *)(v90 + 8 * v13);
            ++v14;
            if (v12) {
              goto LABEL_24;
            }
          }
        }

        goto LABEL_77;
      }
    }

LABEL_24:
    uint64_t v96 = (v12 - 1) & v12;
    int64_t v97 = v13;
    for (unint64_t i = __clz(__rbit64(v12)) + (v13 << 6); ; unint64_t i = __clz(__rbit64(v7)) | (v9 << 6))
    {
      unint64_t v15 = *(void **)(*(void *)(v95 + 56) + 8 * i);
      uint64_t v16 = v2[10];
      uint64_t v17 = v2[11];
      unint64_t v18 = sub_10000F2CC(v94, v16);
      uint64_t v19 = *(void *)(v16 - 8);
      __chkstk_darwin(v18);
      uint64_t v21 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v19 + 16))(v21);
      id v22 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 80);
      swift_retain(v15);
      uint64_t v23 = v22(v16, v17);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v16);
      unint64_t v98 = v15;
      if ((unint64_t)v23 >> 62)
      {
        if (v23 < 0) {
          uint64_t v83 = v23;
        }
        else {
          uint64_t v83 = v23 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v23);
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v83);
        if (v24)
        {
LABEL_27:
          os_log_type_t v25 = v98 + 8;
          swift_beginAccess(v98 + 8, v102, 0LL, 0LL);
          uint64_t v26 = 4LL;
          while (1)
          {
            if ((v23 & 0xC000000000000001LL) != 0) {
              id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, v23);
            }
            else {
              id v27 = *(id *)(v23 + 8 * v26);
            }
            unint64_t v28 = v27;
            uint64_t v29 = v26 - 3;
            if (__OFADD__(v26 - 4, 1LL))
            {
              __break(1u);
              goto LABEL_80;
            }

            uint64_t v30 = *v25;
            swift_bridgeObjectRetain(*v25);
            uint64_t v31 = sub_10000DD10();
            uint64_t v32 = sub_100033B5C( v31,  v30,  (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
            swift_bridgeObjectRelease(v31);
            uint64_t v33 = *(void *)(v32 + 16);

            swift_release(v32);
            if (v33) {
              break;
            }
            ++v26;
            if (v29 == v24) {
              goto LABEL_34;
            }
          }

          swift_release(v98);
          swift_bridgeObjectRelease_n(v23, 2LL);
LABEL_66:
          uint64_t v2 = v93;
LABEL_7:
          int64_t v9 = v97;
          unint64_t v7 = v96;
          if (!v96) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
      }

      else
      {
        uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v23);
        if (v24) {
          goto LABEL_27;
        }
      }

    int64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      id v27 = *(_OWORD *)v26;
      unint64_t v28 = *(_OWORD *)(v26 + 16);
      uint64_t v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      uint64_t v40 = v28;
      sub_100004E20((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_100005160(v26, (uint64_t)&v39);
      sub_100036EA0(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      uint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    uint64_t v17 = *(void *)(v8 + 48) + 40 * v16;
    unint64_t v18 = v39;
    uint64_t v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
    uint64_t result = (uint64_t)sub_100004E20(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  id v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v36;
  }
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        int64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      id v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      os_log_type_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100004E20(v25, v38);
      }

      else
      {
        sub_100036EA0((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      id v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_100004E20(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

      uint64_t v10 = (v15 - 1) & v15;
      int64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    }

    uint64_t v17 = v4;
    unint64_t v18 = *(void *)(v4 + 48) + 24 * v13;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    uint64_t v21 = *(_BYTE *)(v18 + 16);
    Hasher.init(_seed:)(v31, *(void *)(v6 + 40));
    sub_10000EEF8(v19, (uint64_t)v20, v21);
    id v22 = sub_10000C47C(v19, v20, v21);
    uint64_t v24 = v23;
    String.hash(into:)(v31, v22, v23);
    swift_bridgeObjectRelease(v24);
    os_log_type_t v25 = Hasher._finalize()();
    uint64_t result = _HashTable.nextHole(atOrAfter:)(v25 & ~(-1LL << *(_BYTE *)(v6 + 32)), v30, ~(-1LL << *(_BYTE *)(v6 + 32)));
    *(void *)(v30 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v26 = *(void *)(v6 + 48) + 24 * result;
    *(void *)uint64_t v26 = v19;
    *(void *)(v26 + 8) = v20;
    *(_BYTE *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
    ++*(void *)(v6 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    uint64_t v4 = v17;
    if (!v5) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

      BOOL v62 = (v25 - 1) & v25;
      uint64_t v63 = v26;
      uint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
    }

    unint64_t v28 = *(void *)(a4 + 48);
    char v64 = *(void *)(v60 + 72);
    sub_100018CFC(v28 + v64 * v23, (uint64_t)v14, v20);
    Hasher.init(_seed:)(v65, *(void *)(v15 + 40));
    uint64_t v29 = *v14;
    uint64_t v30 = v14[1];
    swift_bridgeObjectRetain(v30);
    String.hash(into:)(v65, v29, v30);
    swift_bridgeObjectRelease(v30);
    uint64_t v31 = type metadata accessor for UUID(0LL);
    uint64_t v32 = sub_10001CFD8( (unint64_t *)&qword_1000CD8F8,  255LL,  v21,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v65, v31, v32);
    uint64_t v33 = *(id *)((char *)v14 + v12[6]);
    NSObject.hash(into:)(v65);

    sub_100005318((uint64_t)v14 + v12[7], v18, &qword_1000CF740);
    uint64_t v34 = v59;
    uint64_t v35 = v61;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v18, 1LL, v61) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      id v36 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 32);
      uint64_t v57 = a3;
      id v37 = v21;
      uint64_t v38 = v20;
      uint64_t v39 = v15;
      uint64_t v40 = v12;
      uint64_t v41 = v55;
      v36(v55, v18, v35);
      Hasher._combine(_:)(1u);
      uint64_t v42 = sub_10001CFD8( &qword_1000CF820,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
      dispatch thunk of Hashable.hash(into:)(v65, v35, v42);
      id v43 = v41;
      unint64_t v12 = v40;
      unint64_t v15 = v39;
      uint64_t v20 = v38;
      uint64_t v21 = v37;
      unint64_t v18 = (uint64_t)v56;
      a3 = v57;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v43, v35);
    }

    Hasher._combine(_:)(*(uint64_t *)((char *)v14 + v12[8]));
    uint64_t result = Hasher._finalize()();
    uint64_t v44 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v45 = result & ~v44;
    uint64_t v46 = v45 >> 6;
    if (((-1LL << v45) & ~*(void *)(v22 + 8 * (v45 >> 6))) != 0)
    {
      uint64_t v47 = __clz(__rbit64((-1LL << v45) & ~*(void *)(v22 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v48 = 0;
      uint64_t v49 = (unint64_t)(63 - v44) >> 6;
      do
      {
        if (++v46 == v49 && (v48 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v50 = v46 == v49;
        if (v46 == v49) {
          uint64_t v46 = 0LL;
        }
        v48 |= v50;
        uint64_t v51 = *(void *)(v22 + 8 * v46);
      }

      while (v51 == -1);
      uint64_t v47 = __clz(__rbit64(~v51)) + (v46 << 6);
    }

    *(void *)(v22 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v47;
    uint64_t result = sub_10004EA7C((uint64_t)v14, *(void *)(v15 + 48) + v47 * v64, v20);
    ++*(void *)(v15 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v58;
    uint64_t v17 = v62;
    uint64_t v19 = v63;
    if (!a3) {
      goto LABEL_40;
    }
  }

        __break(1u);
        goto LABEL_25;
      }

LABEL_80:
            __break(1u);
            goto LABEL_81;
          }
        }

        else
        {
          uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          swift_bridgeObjectRetain(v39);
          if (v40) {
            goto LABEL_37;
          }
        }

LABEL_44:
        swift_bridgeObjectRelease_n(v39, 2LL);
      }

      uint64_t v2 = v93;
      uint64_t v51 = v93[20];
      uint64_t v50 = v93[21];
      uint64_t v52 = sub_10000F2CC(v89, v51);
      uint64_t v53 = *(void *)(v51 - 8);
      __chkstk_darwin(v52);
      uint64_t v55 = (char *)&v85 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v53 + 16))(v55);
      uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v51, v50);
      uint64_t v58 = v57;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v51);
      uint64_t v59 = (uint64_t)v98;
      if (v58)
      {
        uint64_t v60 = v98[2];
        uint64_t v61 = v98[3];
        BOOL v62 = v56 == v60 && v58 == v61;
        uint64_t v63 = v88;
        if (v62)
        {
          swift_release(v98);
          swift_bridgeObjectRelease(v58);
          goto LABEL_7;
        }

        char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v61, 0LL);
        swift_bridgeObjectRelease(v58);
        if ((v64 & 1) != 0)
        {
          swift_release(v59);
          goto LABEL_7;
        }
      }

      else
      {
        uint64_t v63 = v88;
      }

      uint64_t v65 = *(void *)(v59 + 16);
      uint64_t v66 = *(void *)(v59 + 24);
      swift_beginAccess(v63, v100, 33LL, 0LL);
      uint64_t v67 = *v63;
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRetain(v67);
      unint64_t v68 = sub_100004CD4(v65, v66);
      LOBYTE(v65) = v69;
      swift_bridgeObjectRelease(v67);
      uint64_t v70 = 0LL;
      if ((v65 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v63);
        uint64_t v72 = *v63;
        uint64_t v99 = *v63;
        uint64_t *v63 = 0x8000000000000000LL;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10007888C();
          uint64_t v72 = v99;
        }

        swift_bridgeObjectRelease(*(void *)(*(void *)(v72 + 48) + 16 * v68 + 8));
        uint64_t v70 = *(void *)(*(void *)(v72 + 56) + 8 * v68);
        sub_1000395EC(v68, v72);
        uint64_t v73 = *v63;
        uint64_t *v63 = v72;
        swift_bridgeObjectRelease(v73);
      }

      swift_endAccess(v100);
      swift_release(v70);
      swift_bridgeObjectRelease(v66);
      if (qword_1000CD6C0 != -1) {
        swift_once(&qword_1000CD6C0, sub_100088F0C);
      }
      uint64_t v74 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v74, (uint64_t)qword_1000D36B0);
      uint64_t v75 = swift_retain_n(v59, 2LL);
      uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = swift_slowAlloc(12LL, -1LL);
        uint64_t v79 = swift_slowAlloc(32LL, -1LL);
        v100[0] = v79;
        *(_DWORD *)uint64_t v78 = v87.n128_u32[0];
        uint64_t v80 = sub_10000DAA0();
        unint64_t v82 = v81;
        *(void *)(v78 + 4) = sub_10009BE3C(v80, v81, v100);
        swift_release_n(v59, 2LL);
        swift_bridgeObjectRelease(v82);
        _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Pruning undiscoverable device after display discovery state changed: %s",  (uint8_t *)v78,  0xCu);
        swift_arrayDestroy(v79, 1LL, v86);
        swift_slowDealloc(v79, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v59, 2LL);
      }

      int64_t v9 = v97;
      unint64_t v7 = v96;
      v100[0] = v59;
      PassthroughSubject.send(_:)(v100);
      swift_release(v59);
      if (!v7) {
        goto LABEL_9;
      }
LABEL_8:
      uint64_t v96 = (v7 - 1) & v7;
      int64_t v97 = v9;
    }
  }

uint64_t sub_100025B98( unint64_t (*a1)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4))
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 7;
  swift_beginAccess(v4, v59, 0LL, 0LL);
  uint64_t v6 = v2[10];
  uint64_t v5 = v2[11];
  unint64_t v7 = sub_10000F2CC(v4, v6);
  uint64_t v8 = *(void *)(v6 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(v6, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  if (!((unint64_t)v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain(a1);
    swift_bridgeObjectRetain(v11);
    if (v12) {
      goto LABEL_3;
    }
LABEL_17:
    swift_release(a1);
LABEL_18:
    swift_bridgeObjectRelease_n(v11, 2LL);
    uint64_t Strong = swift_weakLoadStrong(v2 + 22);
    if (Strong)
    {
      uint64_t v24 = Strong;
      uint64_t v25 = (uint64_t)*(id *)(Strong + 16);
      swift_release(v24);
      id v26 = [(id)v25 activeDevices];
      uint64_t v27 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CE128, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
      uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_retain(a1);
      swift_bridgeObjectRetain(v28);
      for (; v29; uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v37))
      {
        id v53 = (id)v25;
        uint64_t v54 = v2;
        uint64_t v55 = a1;
        a1 = (unint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))((char *)a1 + 64);
        swift_beginAccess(a1, v57, 0LL, 0LL);
        uint64_t v25 = 4LL;
        while (1)
        {
          id v30 = (v28 & 0xC000000000000001LL) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v28)
              : *(id *)(v28 + 8 * v25);
          uint64_t v31 = v30;
          uint64_t v2 = (void *)(v25 - 3);
          if (__OFADD__(v25 - 4, 1LL)) {
            break;
          }
          uint64_t v32 = *(void *)a1;
          swift_bridgeObjectRetain(*(void *)a1);
          uint64_t v33 = sub_10000DD10();
          uint64_t v34 = sub_100033B5C( v33,  v32,  (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
          swift_bridgeObjectRelease(v33);
          uint64_t v35 = *(void *)(v34 + 16);

          swift_release(v34);
          if (v35)
          {

            swift_release(v55);
            uint64_t v21 = v28;
            goto LABEL_30;
          }

          ++v25;
          if (v2 == (void *)v29)
          {
            a1 = v55;
            swift_release(v55);
            uint64_t v25 = (uint64_t)v53;
            uint64_t v2 = v54;
            goto LABEL_37;
          }
        }

        __break(1u);
LABEL_32:
        if (v28 < 0) {
          uint64_t v37 = v28;
        }
        else {
          uint64_t v37 = v28 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_retain(a1);
        swift_bridgeObjectRetain(v28);
      }

      swift_release(a1);
LABEL_37:
      swift_bridgeObjectRelease_n(v28, 2LL);
    }

    uint64_t v38 = v2 + 17;
    swift_beginAccess(v2 + 17, v56, 0LL, 0LL);
    uint64_t v40 = v2[20];
    uint64_t v39 = v2[21];
    uint64_t v41 = sub_10000F2CC(v38, v40);
    uint64_t v42 = *(void *)(v40 - 8);
    __chkstk_darwin(v41);
    uint64_t v44 = (char *)&v52 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v42 + 16))(v44);
    uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v39);
    uint64_t v47 = v46;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v40);
    if (v47)
    {
      uint64_t v48 = *((void *)a1 + 2);
      uint64_t v49 = *((void *)a1 + 3);
      if (v45 == v48 && v47 == v49)
      {
        swift_bridgeObjectRelease(v47);
        char v36 = 1;
      }

      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v48, v49, 0LL);
        swift_bridgeObjectRelease(v47);
      }
    }

    else
    {
      char v36 = 0;
    }

    return v36 & 1;
  }

LABEL_13:
  if (v11 < 0) {
    uint64_t v22 = v11;
  }
  else {
    uint64_t v22 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_retain(a1);
  swift_bridgeObjectRetain(v11);
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v12) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v54 = v2;
  uint64_t v55 = a1;
  int64_t v13 = (uint64_t *)((char *)a1 + 64);
  swift_beginAccess((char *)a1 + 64, v58, 0LL, 0LL);
  uint64_t v14 = 4LL;
  a1 = sub_100033CE8;
  while (1)
  {
    if ((v11 & 0xC000000000000001LL) != 0) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v11);
    }
    else {
      id v15 = *(id *)(v11 + 8 * v14);
    }
    uint64_t v16 = v15;
    uint64_t v2 = (void *)(v14 - 3);
    if (__OFADD__(v14 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_13;
    }

    uint64_t v17 = *v13;
    swift_bridgeObjectRetain(*v13);
    uint64_t v18 = sub_10000DD10();
    uint64_t v19 = sub_100033B5C(v18, v17, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
    swift_bridgeObjectRelease(v18);
    uint64_t v20 = *(void *)(v19 + 16);

    swift_release(v19);
    if (v20) {
      break;
    }
    ++v14;
    if (v2 == (void *)v12)
    {
      a1 = v55;
      swift_release(v55);
      uint64_t v2 = v54;
      goto LABEL_18;
    }
  }

  swift_release(v55);
  uint64_t v21 = v11;
LABEL_30:
  swift_bridgeObjectRelease_n(v21, 2LL);
  char v36 = 1;
  return v36 & 1;
}

    uint64_t result = sub_10009C0C4(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

uint64_t sub_100026040( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a8;
  uint64_t v15 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  uint64_t v19 = qword_1000CD638;
  swift_retain(a3);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a1);
  swift_retain(a6);
  if (v19 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v21 = qword_1000D35C8;
  uint64_t v22 = sub_10001CFD8( &qword_1000CEC58,  v20,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v23 = swift_allocObject(a7, 80LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  *(void *)(v23 + 24) = v22;
  *(void *)(v23 + 32) = a3;
  *(void *)(v23 + 40) = a2;
  *(_BYTE *)(v23 + 48) = a4;
  *(void *)(v23 + 56) = a1;
  *(void *)(v23 + 64) = a5;
  *(void *)(v23 + 72) = a6;
  swift_retain(v21);
  uint64_t v24 = sub_10004EC20((uint64_t)v17, v27, v23);
  return swift_release(v24);
}

uint64_t sub_1000261B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CED00);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoFavoritesDidChangeEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_1000262B8, qword_1000D35C8, 0LL);
}

uint64_t sub_1000262B8()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CED10,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoFavoritesDidChangeEvent,  (uint64_t)&protocol conformance descriptor for NCProtoFavoritesDidChangeEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100026CFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CED30);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoContinuityCallsDidChangeEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100026E04, qword_1000D35C8, 0LL);
}

uint64_t sub_100026E04()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CED38,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoContinuityCallsDidChangeEvent,  (uint64_t)&protocol conformance descriptor for NCProtoContinuityCallsDidChangeEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027848( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CED58);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoActiveConversationsDidChangeEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100027950, qword_1000D35C8, 0LL);
}

uint64_t sub_100027950()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CED60,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoActiveConversationsDidChangeEvent,  (uint64_t)&protocol conformance descriptor for NCProtoActiveConversationsDidChangeEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028394( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CED80);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoDeviceLaunchedEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002849C, qword_1000D35C8, 0LL);
}

uint64_t sub_10002849C()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CED88,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeviceLaunchedEvent,  (uint64_t)&protocol conformance descriptor for NCProtoDeviceLaunchedEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEDA8);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoRecentCallsDidChangeEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100028FE8, qword_1000D35C8, 0LL);
}

uint64_t sub_100028FE8()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEDB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoRecentCallsDidChangeEvent,  (uint64_t)&protocol conformance descriptor for NCProtoRecentCallsDidChangeEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100029A2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEDD0);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100029B34, qword_1000D35C8, 0LL);
}

uint64_t sub_100029B34()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEDD8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent,  (uint64_t)&protocol conformance descriptor for NCProtoSuggestionAdvertisementDidChangeEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A578( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEDF8);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NCProtoIDSProxyMessage(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002A680, qword_1000D35C8, 0LL);
}

uint64_t sub_10002A680()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEE00,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoIDSProxyMessage,  (uint64_t)&protocol conformance descriptor for NCProtoIDSProxyMessage);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B0C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEE20);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoPolicyInfoUpdatedEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002B1CC, qword_1000D35C8, 0LL);
}

uint64_t sub_10002B1CC()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEE28,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoPolicyInfoUpdatedEvent,  (uint64_t)&protocol conformance descriptor for NCProtoPolicyInfoUpdatedEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002BC10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEE48);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoEndedSessionEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002BD18, qword_1000D35C8, 0LL);
}

uint64_t sub_10002BD18()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEE50,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoEndedSessionEvent,  (uint64_t)&protocol conformance descriptor for NCProtoEndedSessionEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C75C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEE70);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoStartedSessionEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002C864, qword_1000D35C8, 0LL);
}

uint64_t sub_10002C864()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEE78,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoStartedSessionEvent,  (uint64_t)&protocol conformance descriptor for NCProtoStartedSessionEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002D2A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEE98);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for NCProtoContactUpdateEvent(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = updated;
  uint64_t v14 = *(void *)(updated - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002D3B0, qword_1000D35C8, 0LL);
}

uint64_t sub_10002D3B0()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEEA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoContactUpdateEvent,  (uint64_t)&protocol conformance descriptor for NCProtoContactUpdateEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002DDF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 360) = a8;
  *(void *)(v8 + 368) = v16;
  *(void *)(v8 + 344) = a5;
  *(void *)(v8 + 352) = a7;
  *(_BYTE *)(v8 + 440) = a6;
  *(void *)(v8 + 336) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 376) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 400) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000360C(&qword_1000CEEC0);
  *(void *)(v8 + 408) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = ((uint64_t (*)(void))type metadata accessor for NCProtoJoinEvent)(0LL);
  *(void *)(v8 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 424) = v14;
  *(void *)(v8 + 432) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10002DEFC, qword_1000D35C8, 0LL);
}

uint64_t sub_10002DEFC()
{
  uint64_t v1 = *(void *)(v0 + 336) + 16LL;
  swift_beginAccess(v1, v0 + 160, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (!Strong) {
    goto LABEL_15;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 344);
  if (v4)
  {
    *(void *)(v0 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
    *(void *)(v0 + 232) = v5;
    AnyHashable.init<A>(_:)( (void *)(v0 + 56),  v0 + 224,  &type metadata for String,  &protocol witness table for String);
    if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 56), (v7 & 1) != 0))
    {
      sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 128);
    }

    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }

    sub_10000519C(v0 + 56);
    if (!*(void *)(v0 + 152))
    {
      swift_release(v3);
      sub_10000BFC8(v0 + 128, &qword_1000CE540);
      goto LABEL_15;
    }

    if ((swift_dynamicCast(v0 + 240, v0 + 128, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      swift_beginAccess(v3 + 48, v0 + 184, 0LL, 0LL);
      uint64_t v10 = *(void *)(v3 + 48);
      uint64_t v11 = swift_task_alloc(48LL);
      *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
      *(void *)(v11 + 24) = v8;
      *(_BYTE *)(v11 + 32) = 0;
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      swift_task_dealloc(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v0 + 352);
        *(void *)(v0 + 208) = 0x6567617373656DLL;
        *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE700000000000000LL;
        AnyHashable.init<A>(_:)( (void *)(v0 + 16),  v0 + 208,  &type metadata for String,  &protocol witness table for String);
        if (*(void *)(v13 + 16) && (unint64_t v14 = sub_100004DF0(v0 + 16), (v15 & 1) != 0))
        {
          sub_100036EA0(*(void *)(*(void *)(v0 + 352) + 56LL) + 32 * v14, v0 + 96);
        }

        else
        {
          *(_OWORD *)(v0 + 96) = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }

        sub_10000519C(v0 + 16);
        if (*(void *)(v0 + 120))
        {
          if ((swift_dynamicCast(v0 + 256, v0 + 96, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
          {
            uint64_t v89 = v12;
            uint64_t v43 = *(void *)(v0 + 416);
            uint64_t v44 = *(void *)(v0 + 400);
            uint64_t v46 = *(void *)(v0 + 256);
            unint64_t v45 = *(void *)(v0 + 264);
            uint64_t v91 = 0LL;
            memset(v90, 0, sizeof(v90));
            uint64_t v47 = sub_1000109D4(v46, v45);
            BinaryDecodingOptions.init()(v47);
            uint64_t v48 = sub_10001CFD8( &qword_1000CEEC8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoJoinEvent,  (uint64_t)&protocol conformance descriptor for NCProtoJoinEvent);
            Message.init(serializedData:extensions:partial:options:)(v46, v45, v90, 0LL, v44, v43, v48);
            unint64_t v64 = v45;
            uint64_t type = v46;
            uint64_t v66 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 432);
            uint64_t v68 = *(void *)(v0 + 408);
            uint64_t v67 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, v67);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v65, v68, v67);
            if (qword_1000CD6C0 != -1) {
              swift_once(&qword_1000CD6C0, sub_100088F0C);
            }
            sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
            uint64_t v69 = swift_retain(v89);
            uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              unsigned __int8 v81 = *(_BYTE *)(v0 + 440);
              uint64_t v72 = swift_slowAlloc(22LL, -1LL);
              *(void *)&v90[0] = swift_slowAlloc(64LL, -1LL);
              unint64_t v86 = v64;
              uint64_t v73 = *(void *)&v90[0];
              *(_DWORD *)uint64_t v72 = 136315394;
              uint64_t v74 = *(void *)(v89 + 16);
              unint64_t v75 = *(void *)(v89 + 24);
              swift_bridgeObjectRetain(v75);
              *(void *)(v0 + 320) = sub_10009BE3C(v74, v75, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v72 + 4, v72 + 12);
              swift_bridgeObjectRelease(v75);
              swift_release(v89);
              *(_WORD *)(v72 + 12) = 2080;
              uint64_t v76 = sub_100020190(v81);
              unint64_t v78 = v77;
              *(void *)(v0 + 328) = sub_10009BE3C(v76, v77, (uint64_t *)v90);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v72 + 14, v72 + 22);
              swift_bridgeObjectRelease(v78);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Received event %s.", (uint8_t *)v72, 0x16u);
              swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
              uint64_t v79 = v73;
              unint64_t v64 = v86;
              swift_slowDealloc(v79, -1LL, -1LL);
              swift_slowDealloc(v72, -1LL, -1LL);
            }

            else
            {
              swift_release(v89);
            }

            uint64_t v35 = *(void *)(v0 + 424);
            uint64_t v34 = *(void *)(v0 + 432);
            uint64_t v36 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v0 + 360))(v34, v89);
            swift_release(v3);
            sub_10000BE18(type, v64);
            swift_release(v89);
            goto LABEL_21;
          }
        }

        else
        {
          sub_10000BFC8(v0 + 96, &qword_1000CE540);
        }

        if (qword_1000CD6C0 != -1) {
          swift_once(&qword_1000CD6C0, sub_100088F0C);
        }
        uint64_t v49 = *(void *)(v0 + 352);
        sub_10000ADF4(*(void *)(v0 + 376), (uint64_t)qword_1000D36B0);
        swift_retain_n(v12, 2LL);
        uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
        os_log_type_t typea = static os_log_type_t.error.getter();
        BOOL v52 = os_log_type_enabled(v51, typea);
        uint64_t v53 = *(void *)(v0 + 352);
        if (v52)
        {
          unsigned __int8 v80 = *(_BYTE *)(v0 + 440);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          uint64_t v85 = swift_slowAlloc(96LL, -1LL);
          *(void *)&v90[0] = v85;
          *(_DWORD *)uint64_t v54 = 136315650;
          uint64_t v56 = *(void *)(v12 + 16);
          unint64_t v55 = *(void *)(v12 + 24);
          swift_bridgeObjectRetain(v55);
          *(void *)(v0 + 288) = sub_10009BE3C(v56, v55, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v55);
          swift_release_n(v12, 2LL);
          *(_WORD *)(v54 + 12) = 2080;
          uint64_t v57 = sub_100020190(v80);
          unint64_t v59 = v58;
          *(void *)(v0 + 296) = sub_10009BE3C(v57, v58, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v54 + 14, v54 + 22);
          swift_bridgeObjectRelease(v59);
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v60 = swift_bridgeObjectRetain(v53);
          uint64_t v61 = Dictionary.description.getter( v60,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease(v53);
          *(void *)(v0 + 304) = sub_10009BE3C(v61, v63, (uint64_t *)v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v54 + 24, v54 + 32);
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease_n(v53, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v51,  typea,  "[%s] Failed to decode event %s: %s.",  (uint8_t *)v54,  0x20u);
          swift_arrayDestroy(v85, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_release(v3);

          swift_release(v12);
        }

        else
        {
          swift_release(v3);
          swift_release_n(v12, 3LL);
          swift_bridgeObjectRelease_n(v53, 2LL);
        }

        goto LABEL_24;
      }
    }
  }

  swift_release(v3);
LABEL_15:
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000D36B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
  uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v22 = (void *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v22, v23))
  {
    uint64_t v35 = *(void *)(v0 + 384);
    uint64_t v34 = *(void *)(v0 + 392);
    uint64_t v36 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease_n(v19, 2LL);

LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_24;
  }

  unint64_t v82 = (void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 344);
  unsigned __int8 v24 = *(_BYTE *)(v0 + 440);
  uint64_t v25 = swift_slowAlloc(22LL, -1LL);
  uint64_t v26 = swift_slowAlloc(64LL, -1LL);
  *(void *)&v90[0] = v26;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v27 = sub_100020190(v24);
  unint64_t v29 = v28;
  *(void *)(v0 + 272) = sub_10009BE3C(v27, v28, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v25 + 4, v25 + 12);
  swift_bridgeObjectRelease(v29);
  *(_WORD *)(v25 + 12) = 2080;
  if (v83)
  {
    *unint64_t v82 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v30 = sub_10000360C(&qword_1000CED08);
    uint64_t v31 = String.init<A>(reflecting:)(v82, v30);
    unint64_t v33 = v32;
  }

  else
  {
    unint64_t v33 = 0xE300000000000000LL;
    uint64_t v31 = 7104878LL;
  }

  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 376);
  *(void *)(v0 + 280) = sub_10009BE3C(v31, v33, (uint64_t *)v90);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v25 + 14, v25 + 22);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v19, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "Received event %s from unrecognized device %s.",  (uint8_t *)v25,  0x16u);
  swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1LL, -1LL);
  swift_slowDealloc(v25, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v84);
LABEL_24:
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 432));
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E940( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a10;
  uint64_t v16 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  uint64_t v20 = qword_1000CD638;
  swift_retain(a5);
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  swift_bridgeObjectRetain(a1);
  swift_retain(a8);
  if (v20 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v22 = qword_1000D35C8;
  uint64_t v23 = sub_10001CFD8( &qword_1000CEC58,  v21,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v24 = swift_allocObject(a9, 96LL, 7LL);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  *(void *)(v24 + 24) = v23;
  *(void *)(v24 + 32) = a5;
  *(void *)(v24 + 40) = a2;
  *(_BYTE *)(v24 + 48) = v29;
  *(void *)(v24 + 56) = a3;
  *(void *)(v24 + 64) = a4;
  uint64_t v25 = v30;
  *(void *)(v24 + 72) = a1;
  *(void *)(v24 + 80) = v25;
  *(void *)(v24 + 88) = a8;
  swift_retain(v22);
  uint64_t v26 = sub_10004EC20((uint64_t)v18, v31, v24);
  return swift_release(v26);
}

uint64_t sub_10002EAC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 520) = v19;
  *(_OWORD *)(v8 + 504) = v18;
  *(void *)(v8 + 488) = a7;
  *(void *)(v8 + 496) = a8;
  *(_BYTE *)(v8 + 688) = a6;
  *(void *)(v8 + 472) = a4;
  *(void *)(v8 + 480) = a5;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 528) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 536) = v10;
  *(void *)(v8 + 544) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NCProtoCallStateResponse(0LL);
  *(void *)(v8 + 552) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 560) = v12;
  *(void *)(v8 + 568) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 576) = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = ((uint64_t (*)(void))type metadata accessor for NCProtoCallStateRequest)(0LL);
  *(void *)(v8 + 584) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 592) = v15;
  *(void *)(v8 + 600) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v16 = qword_1000D35C8;
  *(void *)(v8 + 608) = qword_1000D35C8;
  return swift_task_switch(sub_10002EBE4, v16, 0LL);
}

uint64_t sub_10002EBE4()
{
  uint64_t v1 = *(void *)(v0 + 472) + 16LL;
  swift_beginAccess(v1, v0 + 264, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = Strong;
  if (!Strong) {
    goto LABEL_17;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 480);
  if (!v4) {
    goto LABEL_16;
  }
  *(void *)(v0 + 328) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  *(void *)(v0 + 336) = v5;
  AnyHashable.init<A>(_:)((void *)(v0 + 160), v0 + 328, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 160), (v7 & 1) != 0))
  {
    sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 232);
  }

  else
  {
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
  }

  sub_10000519C(v0 + 160);
  if (!*(void *)(v0 + 256))
  {
    swift_release(v3);
    sub_10000BFC8(v0 + 232, &qword_1000CE540);
LABEL_17:
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v24 = *(void *)(v0 + 544);
    uint64_t v25 = *(void *)(v0 + 536);
    uint64_t v26 = *(void *)(v0 + 528);
    uint64_t v27 = *(void *)(v0 + 480);
    uint64_t v28 = sub_10000ADF4(v26, (uint64_t)qword_1000D36B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v28, v26);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v87 = *(void *)(v0 + 480);
      unsigned __int8 v32 = *(_BYTE *)(v0 + 688);
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v35 = sub_100020094(v32);
      unint64_t v37 = v36;
      *(void *)(v0 + 424) = sub_10009BE3C(v35, v36, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2080;
      if (v87)
      {
        *(void *)(v0 + 432) = v27;
        swift_bridgeObjectRetain(v27);
        uint64_t v38 = sub_10000360C(&qword_1000CED08);
        uint64_t v39 = String.init<A>(reflecting:)(v0 + 432, v38);
        unint64_t v41 = v40;
      }

      else
      {
        unint64_t v41 = 0xE300000000000000LL;
        uint64_t v39 = 7104878LL;
      }

      uint64_t v45 = *(void *)(v0 + 544);
      uint64_t v88 = *(void *)(v0 + 536);
      uint64_t v46 = *(void *)(v0 + 528);
      *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = sub_10009BE3C(v39, v41, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease_n(v27, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Received request %s from unrecognized device %s.",  (uint8_t *)v33,  0x16u);
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v45, v46);
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 544);
      uint64_t v43 = *(void *)(v0 + 536);
      uint64_t v44 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease_n(v27, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }

    uint64_t v47 = *(void (**)(void, void, uint64_t))(v0 + 488);
    unint64_t v48 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v48, 0LL, 0LL);
    *uint64_t v50 = 3;
    v47(0LL, 0LL, v49);
    goto LABEL_26;
  }

  if ((swift_dynamicCast(v0 + 312, v0 + 232, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_16:
    swift_release(v3);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(v0 + 312);
  unint64_t v8 = *(void *)(v0 + 320);
  *(void *)(v0 + 624) = v9;
  *(void *)(v0 + 632) = v8;
  swift_beginAccess(v3 + 48, v0 + 288, 0LL, 0LL);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v11 = swift_task_alloc(48LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v11 + 24) = v8;
  *(_BYTE *)(v11 + 32) = 0;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
  *(void *)(v0 + 640) = v12;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v11);
  uint64_t v89 = v12;
  if (!v12)
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_16;
  }

  uint64_t v13 = (void *)(v0 + 120);
  uint64_t v14 = v0 + 376;
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  *(void *)(v0 + 648) = sub_10000ADF4(*(void *)(v0 + 528), (uint64_t)qword_1000D36B0);
  uint64_t v15 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unsigned __int8 v85 = *(_BYTE *)(v0 + 688);
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v92[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(void *)(v0 + 456) = sub_10009BE3C(v9, v8, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v20 = sub_100020094(v85);
    unint64_t v22 = v21;
    *(void *)(v0 + 464) = sub_10009BE3C(v20, v21, (uint64_t *)v92);
    uint64_t v13 = (void *)(v0 + 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v18 + 14, v18 + 22);
    unint64_t v23 = v22;
    uint64_t v14 = v0 + 376;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] Received request %s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  uint64_t v55 = *(void *)(v0 + 504);
  *(void *)(v0 + 376) = 0x6567617373656DLL;
  *(void *)(v0 + 384) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(v13, v14, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v55 + 16) && (unint64_t v56 = sub_100004DF0((uint64_t)v13), (v57 & 1) != 0))
  {
    sub_100036EA0(*(void *)(*(void *)(v0 + 504) + 56LL) + 32 * v56, v0 + 200);
  }

  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  sub_10000519C((uint64_t)v13);
  if (!*(void *)(v0 + 224))
  {
    sub_10000BFC8(v0 + 200, &qword_1000CE540);
    goto LABEL_36;
  }

  if ((swift_dynamicCast(v0 + 360, v0 + 200, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_36:
    unint64_t v64 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v64, 0LL, 0LL);
    *uint64_t v65 = 1;
    swift_willThrow(v49);
    uint64_t v66 = *(void *)(v0 + 632);
    swift_errorRetain(v49);
    swift_bridgeObjectRetain(v66);
    uint64_t v67 = swift_errorRetain(v49);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    BOOL v70 = os_log_type_enabled(v68, v69);
    unint64_t v71 = *(void *)(v0 + 632);
    if (v70)
    {
      uint64_t v72 = *(void *)(v0 + 624);
      unsigned __int8 v86 = *(_BYTE *)(v0 + 688);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      uint64_t v74 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v90 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v90;
      *(_DWORD *)uint64_t v73 = 136315650;
      swift_bridgeObjectRetain(v71);
      *(void *)(v0 + 392) = sub_10009BE3C(v72, v71, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease_n(v71, 3LL);
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v75 = sub_100020094(v86);
      unint64_t v77 = v76;
      *(void *)(v0 + 400) = sub_10009BE3C(v75, v76, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v73 + 22) = 2112;
      swift_errorRetain(v49);
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError(v49);
      *(void *)(v0 + 408) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v73 + 24, v73 + 32);
      *uint64_t v74 = v78;
      swift_errorRelease(v49);
      swift_errorRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%s] Error handling request %s: %@.", (uint8_t *)v73, 0x20u);
      uint64_t v79 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v74, 1LL, v79);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v49);
      swift_errorRelease(v49);
    }

    uint64_t v80 = *(void *)(v0 + 640);
    uint64_t v81 = *(void *)(v0 + 616);
    unint64_t v82 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v49);
    v82(0LL, 0LL, v49);
    swift_release(v80);
    swift_release(v81);
    swift_errorRelease(v49);
LABEL_26:
    swift_errorRelease(v49);
    uint64_t v51 = *(void *)(v0 + 576);
    uint64_t v52 = *(void *)(v0 + 568);
    uint64_t v53 = *(void *)(v0 + 544);
    swift_task_dealloc(*(void *)(v0 + 600));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v58 = *(void *)(v0 + 584);
  uint64_t v59 = *(void *)(v0 + 576);
  uint64_t v60 = *(void *)(v0 + 360);
  unint64_t v61 = *(void *)(v0 + 368);
  *(void *)(v0 + 656) = v60;
  *(void *)(v0 + 664) = v61;
  uint64_t v93 = 0LL;
  memset(v92, 0, sizeof(v92));
  uint64_t v62 = sub_1000109D4(v60, v61);
  BinaryDecodingOptions.init()(v62);
  uint64_t v63 = sub_10001CFD8( &qword_1000CEEE8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCallStateRequest,  (uint64_t)&protocol conformance descriptor for NCProtoCallStateRequest);
  Message.init(serializedData:extensions:partial:options:)(v60, v61, v92, 0LL, v59, v58, v63);
  uint64_t v83 = *(int **)(v0 + 512);
  uint64_t v91 = (int *)((char *)v83 + *v83);
  uint64_t v84 = (void *)swift_task_alloc(v83[1]);
  *(void *)(v0 + 672) = v84;
  *uint64_t v84 = v0;
  v84[1] = sub_10002F674;
  return ((uint64_t (*)(void, void, uint64_t))v91)(*(void *)(v0 + 568), *(void *)(v0 + 600), v89);
}

uint64_t sub_10002F674()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 672);
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10002FCD0;
  }
  else {
    uint64_t v4 = sub_10002F6D8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 608), 0LL);
}

uint64_t sub_10002F6D8()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = sub_10001CFD8( &qword_1000CFBA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCallStateResponse,  (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
  uint64_t v4 = Message.serializedData(partial:)(0LL, v2, v3);
  if (v1)
  {
    uint64_t v6 = *(void *)(v0 + 600);
    uint64_t v7 = *(void *)(v0 + 592);
    uint64_t v8 = *(void *)(v0 + 584);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 560);
    uint64_t v11 = *(void *)(v0 + 552);
    sub_10000BE18(*(void *)(v0 + 656), *(void *)(v0 + 664));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v12 = *(void *)(v0 + 632);
    swift_errorRetain(v1);
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = swift_errorRetain(v1);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void *)(v0 + 632);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 624);
      unsigned __int8 v60 = *(_BYTE *)(v0 + 688);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v64;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain(v17);
      *(void *)(v0 + 392) = sub_10009BE3C(v18, v17, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v21 = sub_100020094(v60);
      unint64_t v23 = v22;
      *(void *)(v0 + 400) = sub_10009BE3C(v21, v22, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 22) = 2112;
      swift_errorRetain(v1);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(void *)(v0 + 408) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v19 + 24, v19 + 32);
      uint64_t *v20 = v24;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] Error handling request %s: %@.", (uint8_t *)v19, 0x20u);
      uint64_t v25 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v20, 1LL, v25);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    uint64_t v41 = *(void *)(v0 + 640);
    uint64_t v42 = *(void *)(v0 + 616);
    uint64_t v43 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v1);
    v43(0LL, 0LL, v1);
    swift_release(v41);
    swift_release(v42);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v26 = v4;
    unint64_t v27 = v5;
    uint64_t v28 = v0 + 16;
    uint64_t v29 = swift_bridgeObjectRetain(*(void *)(v0 + 632));
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 632);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 624);
      unsigned __int8 v61 = *(_BYTE *)(v0 + 688);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain(v33);
      *(void *)(v0 + 440) = sub_10009BE3C(v34, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v33, 3LL);
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v37 = sub_100020094(v61);
      unint64_t v39 = v38;
      *(void *)(v0 + 448) = sub_10009BE3C(v37, v38, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Returning response for %s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v40 = v36;
      uint64_t v28 = v0 + 16;
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
    }

    uint64_t v57 = *(void *)(v0 + 656);
    unint64_t v58 = *(void *)(v0 + 664);
    uint64_t v44 = *(void *)(v0 + 640);
    uint64_t v45 = *(void *)(v0 + 616);
    uint64_t v59 = *(void *)(v0 + 592);
    uint64_t v62 = *(void *)(v0 + 584);
    uint64_t v63 = *(void *)(v0 + 600);
    uint64_t v56 = *(void *)(v0 + 568);
    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 552);
    unint64_t v48 = *(void (**)(unint64_t, void, void))(v0 + 488);
    uint64_t v49 = sub_10000360C(&qword_1000CF9A0);
    uint64_t inited = swift_initStackObject(v49, v28);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
    *(void *)(v0 + 344) = 0x6567617373656DLL;
    *(void *)(v0 + 352) = 0xE700000000000000LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  v0 + 344,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v26;
    *(void *)(inited + 80) = v27;
    sub_1000109D4(v26, v27);
    unint64_t v51 = sub_10000393C(inited);
    v48(v51, 0LL, 0LL);
    swift_release(v45);
    swift_bridgeObjectRelease(v51);
    swift_release(v44);
    sub_10000BE18(v26, v27);
    sub_10000BE18(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v56, v47);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v62);
  }

  uint64_t v52 = *(void *)(v0 + 576);
  uint64_t v53 = *(void *)(v0 + 568);
  uint64_t v54 = *(void *)(v0 + 544);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FCD0()
{
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 584);
  sub_10000BE18(*(void *)(v0 + 656), *(void *)(v0 + 664));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 680);
  uint64_t v5 = *(void *)(v0 + 632);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = swift_errorRetain(v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = *(void *)(v0 + 632);
    uint64_t v10 = *(void *)(v0 + 624);
    unsigned __int8 v24 = *(_BYTE *)(v0 + 688);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v11 = 136315650;
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 392) = sub_10009BE3C(v10, v9, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v12 = sub_100020094(v24);
    unint64_t v14 = v13;
    *(void *)(v0 + 400) = sub_10009BE3C(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain(v4);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(void *)(v0 + 408) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v11 + 24, v11 + 32);
    uint64_t *v25 = v15;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] Error handling request %s: %@.", (uint8_t *)v11, 0x20u);
    uint64_t v16 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v25, 1LL, v16);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  uint64_t v17 = *(void *)(v0 + 640);
  uint64_t v18 = *(void *)(v0 + 616);
  uint64_t v19 = *(void (**)(void, void, uint64_t))(v0 + 488);
  swift_errorRetain(v4);
  v19(0LL, 0LL, v4);
  swift_release(v17);
  swift_release(v18);
  swift_errorRelease(v4);
  swift_errorRelease(v4);
  uint64_t v20 = *(void *)(v0 + 576);
  uint64_t v21 = *(void *)(v0 + 568);
  uint64_t v22 = *(void *)(v0 + 544);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FFD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 520) = v19;
  *(_OWORD *)(v8 + 504) = v18;
  *(void *)(v8 + 488) = a7;
  *(void *)(v8 + 496) = a8;
  *(_BYTE *)(v8 + 688) = a6;
  *(void *)(v8 + 472) = a4;
  *(void *)(v8 + 480) = a5;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 528) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 536) = v10;
  *(void *)(v8 + 544) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = ((uint64_t (*)(void))type metadata accessor for NCProtoLagunaConnectionResponse)(0LL);
  *(void *)(v8 + 552) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 560) = v12;
  *(void *)(v8 + 568) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 576) = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NCProtoLagunaConnectionRequest(0LL);
  *(void *)(v8 + 584) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 592) = v15;
  *(void *)(v8 + 600) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v16 = qword_1000D35C8;
  *(void *)(v8 + 608) = qword_1000D35C8;
  return swift_task_switch(sub_1000300F4, v16, 0LL);
}

uint64_t sub_1000300F4()
{
  uint64_t v1 = *(void *)(v0 + 472) + 16LL;
  swift_beginAccess(v1, v0 + 264, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = Strong;
  if (!Strong) {
    goto LABEL_17;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 480);
  if (!v4) {
    goto LABEL_16;
  }
  *(void *)(v0 + 328) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  *(void *)(v0 + 336) = v5;
  AnyHashable.init<A>(_:)((void *)(v0 + 160), v0 + 328, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 160), (v7 & 1) != 0))
  {
    sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 232);
  }

  else
  {
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
  }

  sub_10000519C(v0 + 160);
  if (!*(void *)(v0 + 256))
  {
    swift_release(v3);
    sub_10000BFC8(v0 + 232, &qword_1000CE540);
LABEL_17:
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v24 = *(void *)(v0 + 544);
    uint64_t v25 = *(void *)(v0 + 536);
    uint64_t v26 = *(void *)(v0 + 528);
    uint64_t v27 = *(void *)(v0 + 480);
    uint64_t v28 = sub_10000ADF4(v26, (uint64_t)qword_1000D36B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v28, v26);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v87 = *(void *)(v0 + 480);
      unsigned __int8 v32 = *(_BYTE *)(v0 + 688);
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v35 = sub_100020094(v32);
      unint64_t v37 = v36;
      *(void *)(v0 + 424) = sub_10009BE3C(v35, v36, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2080;
      if (v87)
      {
        *(void *)(v0 + 432) = v27;
        swift_bridgeObjectRetain(v27);
        uint64_t v38 = sub_10000360C(&qword_1000CED08);
        uint64_t v39 = String.init<A>(reflecting:)(v0 + 432, v38);
        unint64_t v41 = v40;
      }

      else
      {
        unint64_t v41 = 0xE300000000000000LL;
        uint64_t v39 = 7104878LL;
      }

      uint64_t v45 = *(void *)(v0 + 544);
      uint64_t v88 = *(void *)(v0 + 536);
      uint64_t v46 = *(void *)(v0 + 528);
      *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = sub_10009BE3C(v39, v41, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease_n(v27, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Received request %s from unrecognized device %s.",  (uint8_t *)v33,  0x16u);
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v45, v46);
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 544);
      uint64_t v43 = *(void *)(v0 + 536);
      uint64_t v44 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease_n(v27, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }

    uint64_t v47 = *(void (**)(void, void, uint64_t))(v0 + 488);
    unint64_t v48 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v48, 0LL, 0LL);
    *uint64_t v50 = 3;
    v47(0LL, 0LL, v49);
    goto LABEL_26;
  }

  if ((swift_dynamicCast(v0 + 312, v0 + 232, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_16:
    swift_release(v3);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(v0 + 312);
  unint64_t v8 = *(void *)(v0 + 320);
  *(void *)(v0 + 624) = v9;
  *(void *)(v0 + 632) = v8;
  swift_beginAccess(v3 + 48, v0 + 288, 0LL, 0LL);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v11 = swift_task_alloc(48LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v11 + 24) = v8;
  *(_BYTE *)(v11 + 32) = 0;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
  *(void *)(v0 + 640) = v12;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v11);
  uint64_t v89 = v12;
  if (!v12)
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_16;
  }

  uint64_t v13 = (void *)(v0 + 120);
  uint64_t v14 = v0 + 376;
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  *(void *)(v0 + 648) = sub_10000ADF4(*(void *)(v0 + 528), (uint64_t)qword_1000D36B0);
  uint64_t v15 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unsigned __int8 v85 = *(_BYTE *)(v0 + 688);
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v92[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(void *)(v0 + 456) = sub_10009BE3C(v9, v8, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v20 = sub_100020094(v85);
    unint64_t v22 = v21;
    *(void *)(v0 + 464) = sub_10009BE3C(v20, v21, (uint64_t *)v92);
    uint64_t v13 = (void *)(v0 + 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v18 + 14, v18 + 22);
    unint64_t v23 = v22;
    uint64_t v14 = v0 + 376;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] Received request %s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  uint64_t v55 = *(void *)(v0 + 504);
  *(void *)(v0 + 376) = 0x6567617373656DLL;
  *(void *)(v0 + 384) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(v13, v14, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v55 + 16) && (unint64_t v56 = sub_100004DF0((uint64_t)v13), (v57 & 1) != 0))
  {
    sub_100036EA0(*(void *)(*(void *)(v0 + 504) + 56LL) + 32 * v56, v0 + 200);
  }

  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  sub_10000519C((uint64_t)v13);
  if (!*(void *)(v0 + 224))
  {
    sub_10000BFC8(v0 + 200, &qword_1000CE540);
    goto LABEL_36;
  }

  if ((swift_dynamicCast(v0 + 360, v0 + 200, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_36:
    unint64_t v64 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v64, 0LL, 0LL);
    *uint64_t v65 = 1;
    swift_willThrow(v49);
    uint64_t v66 = *(void *)(v0 + 632);
    swift_errorRetain(v49);
    swift_bridgeObjectRetain(v66);
    uint64_t v67 = swift_errorRetain(v49);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    BOOL v70 = os_log_type_enabled(v68, v69);
    unint64_t v71 = *(void *)(v0 + 632);
    if (v70)
    {
      uint64_t v72 = *(void *)(v0 + 624);
      unsigned __int8 v86 = *(_BYTE *)(v0 + 688);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      uint64_t v74 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v90 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v90;
      *(_DWORD *)uint64_t v73 = 136315650;
      swift_bridgeObjectRetain(v71);
      *(void *)(v0 + 392) = sub_10009BE3C(v72, v71, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease_n(v71, 3LL);
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v75 = sub_100020094(v86);
      unint64_t v77 = v76;
      *(void *)(v0 + 400) = sub_10009BE3C(v75, v76, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v73 + 22) = 2112;
      swift_errorRetain(v49);
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError(v49);
      *(void *)(v0 + 408) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v73 + 24, v73 + 32);
      *uint64_t v74 = v78;
      swift_errorRelease(v49);
      swift_errorRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%s] Error handling request %s: %@.", (uint8_t *)v73, 0x20u);
      uint64_t v79 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v74, 1LL, v79);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v49);
      swift_errorRelease(v49);
    }

    uint64_t v80 = *(void *)(v0 + 640);
    uint64_t v81 = *(void *)(v0 + 616);
    unint64_t v82 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v49);
    v82(0LL, 0LL, v49);
    swift_release(v80);
    swift_release(v81);
    swift_errorRelease(v49);
LABEL_26:
    swift_errorRelease(v49);
    uint64_t v51 = *(void *)(v0 + 576);
    uint64_t v52 = *(void *)(v0 + 568);
    uint64_t v53 = *(void *)(v0 + 544);
    swift_task_dealloc(*(void *)(v0 + 600));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v58 = *(void *)(v0 + 584);
  uint64_t v59 = *(void *)(v0 + 576);
  uint64_t v60 = *(void *)(v0 + 360);
  unint64_t v61 = *(void *)(v0 + 368);
  *(void *)(v0 + 656) = v60;
  *(void *)(v0 + 664) = v61;
  uint64_t v93 = 0LL;
  memset(v92, 0, sizeof(v92));
  uint64_t v62 = sub_1000109D4(v60, v61);
  BinaryDecodingOptions.init()(v62);
  uint64_t v63 = sub_10001CFD8( &qword_1000CEF00,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoLagunaConnectionRequest,  (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionRequest);
  Message.init(serializedData:extensions:partial:options:)(v60, v61, v92, 0LL, v59, v58, v63);
  uint64_t v83 = *(int **)(v0 + 512);
  uint64_t v91 = (int *)((char *)v83 + *v83);
  uint64_t v84 = (void *)swift_task_alloc(v83[1]);
  *(void *)(v0 + 672) = v84;
  *uint64_t v84 = v0;
  v84[1] = sub_100030B84;
  return ((uint64_t (*)(void, void, uint64_t))v91)(*(void *)(v0 + 568), *(void *)(v0 + 600), v89);
}

uint64_t sub_100030B84()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 672);
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000389B8;
  }
  else {
    uint64_t v4 = sub_100030BE8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 608), 0LL);
}

uint64_t sub_100030BE8()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = sub_10001CFD8( &qword_1000CEF08,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoLagunaConnectionResponse,  (uint64_t)&protocol conformance descriptor for NCProtoLagunaConnectionResponse);
  uint64_t v4 = Message.serializedData(partial:)(0LL, v2, v3);
  if (v1)
  {
    uint64_t v6 = *(void *)(v0 + 600);
    uint64_t v7 = *(void *)(v0 + 592);
    uint64_t v8 = *(void *)(v0 + 584);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 560);
    uint64_t v11 = *(void *)(v0 + 552);
    sub_10000BE18(*(void *)(v0 + 656), *(void *)(v0 + 664));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v12 = *(void *)(v0 + 632);
    swift_errorRetain(v1);
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = swift_errorRetain(v1);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void *)(v0 + 632);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 624);
      unsigned __int8 v60 = *(_BYTE *)(v0 + 688);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v64;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain(v17);
      *(void *)(v0 + 392) = sub_10009BE3C(v18, v17, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v21 = sub_100020094(v60);
      unint64_t v23 = v22;
      *(void *)(v0 + 400) = sub_10009BE3C(v21, v22, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 22) = 2112;
      swift_errorRetain(v1);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(void *)(v0 + 408) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v19 + 24, v19 + 32);
      uint64_t *v20 = v24;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] Error handling request %s: %@.", (uint8_t *)v19, 0x20u);
      uint64_t v25 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v20, 1LL, v25);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    uint64_t v41 = *(void *)(v0 + 640);
    uint64_t v42 = *(void *)(v0 + 616);
    uint64_t v43 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v1);
    v43(0LL, 0LL, v1);
    swift_release(v41);
    swift_release(v42);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v26 = v4;
    unint64_t v27 = v5;
    uint64_t v28 = v0 + 16;
    uint64_t v29 = swift_bridgeObjectRetain(*(void *)(v0 + 632));
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 632);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 624);
      unsigned __int8 v61 = *(_BYTE *)(v0 + 688);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain(v33);
      *(void *)(v0 + 440) = sub_10009BE3C(v34, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v33, 3LL);
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v37 = sub_100020094(v61);
      unint64_t v39 = v38;
      *(void *)(v0 + 448) = sub_10009BE3C(v37, v38, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Returning response for %s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v40 = v36;
      uint64_t v28 = v0 + 16;
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
    }

    uint64_t v57 = *(void *)(v0 + 656);
    unint64_t v58 = *(void *)(v0 + 664);
    uint64_t v44 = *(void *)(v0 + 640);
    uint64_t v45 = *(void *)(v0 + 616);
    uint64_t v59 = *(void *)(v0 + 592);
    uint64_t v62 = *(void *)(v0 + 584);
    uint64_t v63 = *(void *)(v0 + 600);
    uint64_t v56 = *(void *)(v0 + 568);
    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 552);
    unint64_t v48 = *(void (**)(unint64_t, void, void))(v0 + 488);
    uint64_t v49 = sub_10000360C(&qword_1000CF9A0);
    uint64_t inited = swift_initStackObject(v49, v28);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
    *(void *)(v0 + 344) = 0x6567617373656DLL;
    *(void *)(v0 + 352) = 0xE700000000000000LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  v0 + 344,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v26;
    *(void *)(inited + 80) = v27;
    sub_1000109D4(v26, v27);
    unint64_t v51 = sub_10000393C(inited);
    v48(v51, 0LL, 0LL);
    swift_release(v45);
    swift_bridgeObjectRelease(v51);
    swift_release(v44);
    sub_10000BE18(v26, v27);
    sub_10000BE18(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v56, v47);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v62);
  }

  uint64_t v52 = *(void *)(v0 + 576);
  uint64_t v53 = *(void *)(v0 + 568);
  uint64_t v54 = *(void *)(v0 + 544);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000311E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 520) = v19;
  *(_OWORD *)(v8 + 504) = v18;
  *(void *)(v8 + 488) = a7;
  *(void *)(v8 + 496) = a8;
  *(_BYTE *)(v8 + 688) = a6;
  *(void *)(v8 + 472) = a4;
  *(void *)(v8 + 480) = a5;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 528) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 536) = v10;
  *(void *)(v8 + 544) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NCProtoDisconnectResponse(0LL);
  *(void *)(v8 + 552) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 560) = v12;
  *(void *)(v8 + 568) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 576) = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NCProtoDisconnectRequest(0LL);
  *(void *)(v8 + 584) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 592) = v15;
  *(void *)(v8 + 600) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v16 = qword_1000D35C8;
  *(void *)(v8 + 608) = qword_1000D35C8;
  return swift_task_switch(sub_1000312FC, v16, 0LL);
}

uint64_t sub_1000312FC()
{
  uint64_t v1 = *(void *)(v0 + 472) + 16LL;
  swift_beginAccess(v1, v0 + 264, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = Strong;
  if (!Strong) {
    goto LABEL_17;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 480);
  if (!v4) {
    goto LABEL_16;
  }
  *(void *)(v0 + 328) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  *(void *)(v0 + 336) = v5;
  AnyHashable.init<A>(_:)((void *)(v0 + 160), v0 + 328, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 160), (v7 & 1) != 0))
  {
    sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 232);
  }

  else
  {
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
  }

  sub_10000519C(v0 + 160);
  if (!*(void *)(v0 + 256))
  {
    swift_release(v3);
    sub_10000BFC8(v0 + 232, &qword_1000CE540);
LABEL_17:
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v24 = *(void *)(v0 + 544);
    uint64_t v25 = *(void *)(v0 + 536);
    uint64_t v26 = *(void *)(v0 + 528);
    uint64_t v27 = *(void *)(v0 + 480);
    uint64_t v28 = sub_10000ADF4(v26, (uint64_t)qword_1000D36B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v28, v26);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v87 = *(void *)(v0 + 480);
      unsigned __int8 v32 = *(_BYTE *)(v0 + 688);
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v35 = sub_100020094(v32);
      unint64_t v37 = v36;
      *(void *)(v0 + 424) = sub_10009BE3C(v35, v36, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2080;
      if (v87)
      {
        *(void *)(v0 + 432) = v27;
        swift_bridgeObjectRetain(v27);
        uint64_t v38 = sub_10000360C(&qword_1000CED08);
        uint64_t v39 = String.init<A>(reflecting:)(v0 + 432, v38);
        unint64_t v41 = v40;
      }

      else
      {
        unint64_t v41 = 0xE300000000000000LL;
        uint64_t v39 = 7104878LL;
      }

      uint64_t v45 = *(void *)(v0 + 544);
      uint64_t v88 = *(void *)(v0 + 536);
      uint64_t v46 = *(void *)(v0 + 528);
      *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = sub_10009BE3C(v39, v41, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease_n(v27, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Received request %s from unrecognized device %s.",  (uint8_t *)v33,  0x16u);
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v45, v46);
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 544);
      uint64_t v43 = *(void *)(v0 + 536);
      uint64_t v44 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease_n(v27, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }

    uint64_t v47 = *(void (**)(void, void, uint64_t))(v0 + 488);
    unint64_t v48 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v48, 0LL, 0LL);
    *uint64_t v50 = 3;
    v47(0LL, 0LL, v49);
    goto LABEL_26;
  }

  if ((swift_dynamicCast(v0 + 312, v0 + 232, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_16:
    swift_release(v3);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(v0 + 312);
  unint64_t v8 = *(void *)(v0 + 320);
  *(void *)(v0 + 624) = v9;
  *(void *)(v0 + 632) = v8;
  swift_beginAccess(v3 + 48, v0 + 288, 0LL, 0LL);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v11 = swift_task_alloc(48LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v11 + 24) = v8;
  *(_BYTE *)(v11 + 32) = 0;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
  *(void *)(v0 + 640) = v12;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v11);
  uint64_t v89 = v12;
  if (!v12)
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_16;
  }

  uint64_t v13 = (void *)(v0 + 120);
  uint64_t v14 = v0 + 376;
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  *(void *)(v0 + 648) = sub_10000ADF4(*(void *)(v0 + 528), (uint64_t)qword_1000D36B0);
  uint64_t v15 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unsigned __int8 v85 = *(_BYTE *)(v0 + 688);
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v92[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(void *)(v0 + 456) = sub_10009BE3C(v9, v8, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v20 = sub_100020094(v85);
    unint64_t v22 = v21;
    *(void *)(v0 + 464) = sub_10009BE3C(v20, v21, (uint64_t *)v92);
    uint64_t v13 = (void *)(v0 + 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v18 + 14, v18 + 22);
    unint64_t v23 = v22;
    uint64_t v14 = v0 + 376;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] Received request %s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  uint64_t v55 = *(void *)(v0 + 504);
  *(void *)(v0 + 376) = 0x6567617373656DLL;
  *(void *)(v0 + 384) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(v13, v14, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v55 + 16) && (unint64_t v56 = sub_100004DF0((uint64_t)v13), (v57 & 1) != 0))
  {
    sub_100036EA0(*(void *)(*(void *)(v0 + 504) + 56LL) + 32 * v56, v0 + 200);
  }

  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  sub_10000519C((uint64_t)v13);
  if (!*(void *)(v0 + 224))
  {
    sub_10000BFC8(v0 + 200, &qword_1000CE540);
    goto LABEL_36;
  }

  if ((swift_dynamicCast(v0 + 360, v0 + 200, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_36:
    unint64_t v64 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v64, 0LL, 0LL);
    *uint64_t v65 = 1;
    swift_willThrow(v49);
    uint64_t v66 = *(void *)(v0 + 632);
    swift_errorRetain(v49);
    swift_bridgeObjectRetain(v66);
    uint64_t v67 = swift_errorRetain(v49);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    BOOL v70 = os_log_type_enabled(v68, v69);
    unint64_t v71 = *(void *)(v0 + 632);
    if (v70)
    {
      uint64_t v72 = *(void *)(v0 + 624);
      unsigned __int8 v86 = *(_BYTE *)(v0 + 688);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      uint64_t v74 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v90 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v90;
      *(_DWORD *)uint64_t v73 = 136315650;
      swift_bridgeObjectRetain(v71);
      *(void *)(v0 + 392) = sub_10009BE3C(v72, v71, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease_n(v71, 3LL);
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v75 = sub_100020094(v86);
      unint64_t v77 = v76;
      *(void *)(v0 + 400) = sub_10009BE3C(v75, v76, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v73 + 22) = 2112;
      swift_errorRetain(v49);
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError(v49);
      *(void *)(v0 + 408) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v73 + 24, v73 + 32);
      *uint64_t v74 = v78;
      swift_errorRelease(v49);
      swift_errorRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%s] Error handling request %s: %@.", (uint8_t *)v73, 0x20u);
      uint64_t v79 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v74, 1LL, v79);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v49);
      swift_errorRelease(v49);
    }

    uint64_t v80 = *(void *)(v0 + 640);
    uint64_t v81 = *(void *)(v0 + 616);
    unint64_t v82 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v49);
    v82(0LL, 0LL, v49);
    swift_release(v80);
    swift_release(v81);
    swift_errorRelease(v49);
LABEL_26:
    swift_errorRelease(v49);
    uint64_t v51 = *(void *)(v0 + 576);
    uint64_t v52 = *(void *)(v0 + 568);
    uint64_t v53 = *(void *)(v0 + 544);
    swift_task_dealloc(*(void *)(v0 + 600));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v58 = *(void *)(v0 + 584);
  uint64_t v59 = *(void *)(v0 + 576);
  uint64_t v60 = *(void *)(v0 + 360);
  unint64_t v61 = *(void *)(v0 + 368);
  *(void *)(v0 + 656) = v60;
  *(void *)(v0 + 664) = v61;
  uint64_t v93 = 0LL;
  memset(v92, 0, sizeof(v92));
  uint64_t v62 = sub_1000109D4(v60, v61);
  BinaryDecodingOptions.init()(v62);
  uint64_t v63 = sub_10001CFD8( &qword_1000CEF20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectRequest,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest);
  Message.init(serializedData:extensions:partial:options:)(v60, v61, v92, 0LL, v59, v58, v63);
  uint64_t v83 = *(int **)(v0 + 512);
  uint64_t v91 = (int *)((char *)v83 + *v83);
  uint64_t v84 = (void *)swift_task_alloc(v83[1]);
  *(void *)(v0 + 672) = v84;
  *uint64_t v84 = v0;
  v84[1] = sub_100031D8C;
  return ((uint64_t (*)(void, void, uint64_t))v91)(*(void *)(v0 + 568), *(void *)(v0 + 600), v89);
}

uint64_t sub_100031D8C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 672);
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000389B8;
  }
  else {
    uint64_t v4 = sub_100031DF0;
  }
  return swift_task_switch(v4, *(void *)(v2 + 608), 0LL);
}

uint64_t sub_100031DF0()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = sub_10001CFD8( &qword_1000CFBE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
  uint64_t v4 = Message.serializedData(partial:)(0LL, v2, v3);
  if (v1)
  {
    uint64_t v6 = *(void *)(v0 + 600);
    uint64_t v7 = *(void *)(v0 + 592);
    uint64_t v8 = *(void *)(v0 + 584);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 560);
    uint64_t v11 = *(void *)(v0 + 552);
    sub_10000BE18(*(void *)(v0 + 656), *(void *)(v0 + 664));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v12 = *(void *)(v0 + 632);
    swift_errorRetain(v1);
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = swift_errorRetain(v1);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void *)(v0 + 632);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 624);
      unsigned __int8 v60 = *(_BYTE *)(v0 + 688);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v64;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain(v17);
      *(void *)(v0 + 392) = sub_10009BE3C(v18, v17, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v21 = sub_100020094(v60);
      unint64_t v23 = v22;
      *(void *)(v0 + 400) = sub_10009BE3C(v21, v22, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 22) = 2112;
      swift_errorRetain(v1);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(void *)(v0 + 408) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v19 + 24, v19 + 32);
      uint64_t *v20 = v24;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] Error handling request %s: %@.", (uint8_t *)v19, 0x20u);
      uint64_t v25 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v20, 1LL, v25);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    uint64_t v41 = *(void *)(v0 + 640);
    uint64_t v42 = *(void *)(v0 + 616);
    uint64_t v43 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v1);
    v43(0LL, 0LL, v1);
    swift_release(v41);
    swift_release(v42);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v26 = v4;
    unint64_t v27 = v5;
    uint64_t v28 = v0 + 16;
    uint64_t v29 = swift_bridgeObjectRetain(*(void *)(v0 + 632));
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 632);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 624);
      unsigned __int8 v61 = *(_BYTE *)(v0 + 688);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain(v33);
      *(void *)(v0 + 440) = sub_10009BE3C(v34, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v33, 3LL);
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v37 = sub_100020094(v61);
      unint64_t v39 = v38;
      *(void *)(v0 + 448) = sub_10009BE3C(v37, v38, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Returning response for %s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v40 = v36;
      uint64_t v28 = v0 + 16;
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
    }

    uint64_t v57 = *(void *)(v0 + 656);
    unint64_t v58 = *(void *)(v0 + 664);
    uint64_t v44 = *(void *)(v0 + 640);
    uint64_t v45 = *(void *)(v0 + 616);
    uint64_t v59 = *(void *)(v0 + 592);
    uint64_t v62 = *(void *)(v0 + 584);
    uint64_t v63 = *(void *)(v0 + 600);
    uint64_t v56 = *(void *)(v0 + 568);
    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 552);
    unint64_t v48 = *(void (**)(unint64_t, void, void))(v0 + 488);
    uint64_t v49 = sub_10000360C(&qword_1000CF9A0);
    uint64_t inited = swift_initStackObject(v49, v28);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
    *(void *)(v0 + 344) = 0x6567617373656DLL;
    *(void *)(v0 + 352) = 0xE700000000000000LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  v0 + 344,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v26;
    *(void *)(inited + 80) = v27;
    sub_1000109D4(v26, v27);
    unint64_t v51 = sub_10000393C(inited);
    v48(v51, 0LL, 0LL);
    swift_release(v45);
    swift_bridgeObjectRelease(v51);
    swift_release(v44);
    sub_10000BE18(v26, v27);
    sub_10000BE18(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v56, v47);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v62);
  }

  uint64_t v52 = *(void *)(v0 + 576);
  uint64_t v53 = *(void *)(v0 + 568);
  uint64_t v54 = *(void *)(v0 + 544);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000323E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 520) = v19;
  *(_OWORD *)(v8 + 504) = v18;
  *(void *)(v8 + 488) = a7;
  *(void *)(v8 + 496) = a8;
  *(_BYTE *)(v8 + 688) = a6;
  *(void *)(v8 + 472) = a4;
  *(void *)(v8 + 480) = a5;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 528) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 536) = v10;
  *(void *)(v8 + 544) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NCProtoDeviceTokenResponse(0LL);
  *(void *)(v8 + 552) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 560) = v12;
  *(void *)(v8 + 568) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BinaryDecodingOptions(0LL);
  *(void *)(v8 + 576) = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  *(void *)(v8 + 584) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 592) = v15;
  *(void *)(v8 + 600) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v16 = qword_1000D35C8;
  *(void *)(v8 + 608) = qword_1000D35C8;
  return swift_task_switch(sub_100032504, v16, 0LL);
}

uint64_t sub_100032504()
{
  uint64_t v1 = *(void *)(v0 + 472) + 16LL;
  swift_beginAccess(v1, v0 + 264, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = Strong;
  if (!Strong) {
    goto LABEL_17;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 480);
  if (!v4) {
    goto LABEL_16;
  }
  *(void *)(v0 + 328) = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  *(void *)(v0 + 336) = v5;
  AnyHashable.init<A>(_:)((void *)(v0 + 160), v0 + 328, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_100004DF0(v0 + 160), (v7 & 1) != 0))
  {
    sub_100036EA0(*(void *)(v4 + 56) + 32 * v6, v0 + 232);
  }

  else
  {
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
  }

  sub_10000519C(v0 + 160);
  if (!*(void *)(v0 + 256))
  {
    swift_release(v3);
    sub_10000BFC8(v0 + 232, &qword_1000CE540);
LABEL_17:
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v24 = *(void *)(v0 + 544);
    uint64_t v25 = *(void *)(v0 + 536);
    uint64_t v26 = *(void *)(v0 + 528);
    uint64_t v27 = *(void *)(v0 + 480);
    uint64_t v28 = sub_10000ADF4(v26, (uint64_t)qword_1000D36B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v28, v26);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v87 = *(void *)(v0 + 480);
      unsigned __int8 v32 = *(_BYTE *)(v0 + 688);
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v35 = sub_100020094(v32);
      unint64_t v37 = v36;
      *(void *)(v0 + 424) = sub_10009BE3C(v35, v36, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2080;
      if (v87)
      {
        *(void *)(v0 + 432) = v27;
        swift_bridgeObjectRetain(v27);
        uint64_t v38 = sub_10000360C(&qword_1000CED08);
        uint64_t v39 = String.init<A>(reflecting:)(v0 + 432, v38);
        unint64_t v41 = v40;
      }

      else
      {
        unint64_t v41 = 0xE300000000000000LL;
        uint64_t v39 = 7104878LL;
      }

      uint64_t v45 = *(void *)(v0 + 544);
      uint64_t v88 = *(void *)(v0 + 536);
      uint64_t v46 = *(void *)(v0 + 528);
      *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = sub_10009BE3C(v39, v41, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease_n(v27, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Received request %s from unrecognized device %s.",  (uint8_t *)v33,  0x16u);
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v45, v46);
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 544);
      uint64_t v43 = *(void *)(v0 + 536);
      uint64_t v44 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease_n(v27, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }

    uint64_t v47 = *(void (**)(void, void, uint64_t))(v0 + 488);
    unint64_t v48 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v48, 0LL, 0LL);
    *uint64_t v50 = 3;
    v47(0LL, 0LL, v49);
    goto LABEL_26;
  }

  if ((swift_dynamicCast(v0 + 312, v0 + 232, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_16:
    swift_release(v3);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(v0 + 312);
  unint64_t v8 = *(void *)(v0 + 320);
  *(void *)(v0 + 624) = v9;
  *(void *)(v0 + 632) = v8;
  swift_beginAccess(v3 + 48, v0 + 288, 0LL, 0LL);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v11 = swift_task_alloc(48LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v11 + 24) = v8;
  *(_BYTE *)(v11 + 32) = 0;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  uint64_t v12 = sub_10003A664(sub_1000389CC, v11, v10);
  *(void *)(v0 + 640) = v12;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v11);
  uint64_t v89 = v12;
  if (!v12)
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_16;
  }

  uint64_t v13 = (void *)(v0 + 120);
  uint64_t v14 = v0 + 376;
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  *(void *)(v0 + 648) = sub_10000ADF4(*(void *)(v0 + 528), (uint64_t)qword_1000D36B0);
  uint64_t v15 = swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unsigned __int8 v85 = *(_BYTE *)(v0 + 688);
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v92[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain(v8);
    *(void *)(v0 + 456) = sub_10009BE3C(v9, v8, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(v8, 3LL);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v20 = sub_100020094(v85);
    unint64_t v22 = v21;
    *(void *)(v0 + 464) = sub_10009BE3C(v20, v21, (uint64_t *)v92);
    uint64_t v13 = (void *)(v0 + 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v18 + 14, v18 + 22);
    unint64_t v23 = v22;
    uint64_t v14 = v0 + 376;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] Received request %s.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  uint64_t v55 = *(void *)(v0 + 504);
  *(void *)(v0 + 376) = 0x6567617373656DLL;
  *(void *)(v0 + 384) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(v13, v14, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v55 + 16) && (unint64_t v56 = sub_100004DF0((uint64_t)v13), (v57 & 1) != 0))
  {
    sub_100036EA0(*(void *)(*(void *)(v0 + 504) + 56LL) + 32 * v56, v0 + 200);
  }

  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  sub_10000519C((uint64_t)v13);
  if (!*(void *)(v0 + 224))
  {
    sub_10000BFC8(v0 + 200, &qword_1000CE540);
    goto LABEL_36;
  }

  if ((swift_dynamicCast(v0 + 360, v0 + 200, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_36:
    unint64_t v64 = sub_100036DB4();
    uint64_t v49 = swift_allocError(&type metadata for ConduitDeviceManagerError, v64, 0LL, 0LL);
    *uint64_t v65 = 1;
    swift_willThrow(v49);
    uint64_t v66 = *(void *)(v0 + 632);
    swift_errorRetain(v49);
    swift_bridgeObjectRetain(v66);
    uint64_t v67 = swift_errorRetain(v49);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = static os_log_type_t.error.getter();
    BOOL v70 = os_log_type_enabled(v68, v69);
    unint64_t v71 = *(void *)(v0 + 632);
    if (v70)
    {
      uint64_t v72 = *(void *)(v0 + 624);
      unsigned __int8 v86 = *(_BYTE *)(v0 + 688);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      uint64_t v74 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v90 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v92[0] = v90;
      *(_DWORD *)uint64_t v73 = 136315650;
      swift_bridgeObjectRetain(v71);
      *(void *)(v0 + 392) = sub_10009BE3C(v72, v71, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease_n(v71, 3LL);
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v75 = sub_100020094(v86);
      unint64_t v77 = v76;
      *(void *)(v0 + 400) = sub_10009BE3C(v75, v76, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v73 + 14, v73 + 22);
      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v73 + 22) = 2112;
      swift_errorRetain(v49);
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError(v49);
      *(void *)(v0 + 408) = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v73 + 24, v73 + 32);
      *uint64_t v74 = v78;
      swift_errorRelease(v49);
      swift_errorRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%s] Error handling request %s: %@.", (uint8_t *)v73, 0x20u);
      uint64_t v79 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v74, 1LL, v79);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v49);
      swift_errorRelease(v49);
    }

    uint64_t v80 = *(void *)(v0 + 640);
    uint64_t v81 = *(void *)(v0 + 616);
    unint64_t v82 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v49);
    v82(0LL, 0LL, v49);
    swift_release(v80);
    swift_release(v81);
    swift_errorRelease(v49);
LABEL_26:
    swift_errorRelease(v49);
    uint64_t v51 = *(void *)(v0 + 576);
    uint64_t v52 = *(void *)(v0 + 568);
    uint64_t v53 = *(void *)(v0 + 544);
    swift_task_dealloc(*(void *)(v0 + 600));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v58 = *(void *)(v0 + 584);
  uint64_t v59 = *(void *)(v0 + 576);
  uint64_t v60 = *(void *)(v0 + 360);
  unint64_t v61 = *(void *)(v0 + 368);
  *(void *)(v0 + 656) = v60;
  *(void *)(v0 + 664) = v61;
  uint64_t v93 = 0LL;
  memset(v92, 0, sizeof(v92));
  uint64_t v62 = sub_1000109D4(v60, v61);
  BinaryDecodingOptions.init()(v62);
  uint64_t v63 = sub_10001CFD8( &qword_1000CEF38,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeviceTokenRequest,  (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenRequest);
  Message.init(serializedData:extensions:partial:options:)(v60, v61, v92, 0LL, v59, v58, v63);
  uint64_t v83 = *(int **)(v0 + 512);
  uint64_t v91 = (int *)((char *)v83 + *v83);
  uint64_t v84 = (void *)swift_task_alloc(v83[1]);
  *(void *)(v0 + 672) = v84;
  *uint64_t v84 = v0;
  v84[1] = sub_100032F94;
  return ((uint64_t (*)(void, void, uint64_t))v91)(*(void *)(v0 + 568), *(void *)(v0 + 600), v89);
}

uint64_t sub_100032F94()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 672);
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000389B8;
  }
  else {
    uint64_t v4 = sub_100032FF8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 608), 0LL);
}

uint64_t sub_100032FF8()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = sub_10001CFD8( &qword_1000CFCE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeviceTokenResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
  uint64_t v4 = Message.serializedData(partial:)(0LL, v2, v3);
  if (v1)
  {
    uint64_t v6 = *(void *)(v0 + 600);
    uint64_t v7 = *(void *)(v0 + 592);
    uint64_t v8 = *(void *)(v0 + 584);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 560);
    uint64_t v11 = *(void *)(v0 + 552);
    sub_10000BE18(*(void *)(v0 + 656), *(void *)(v0 + 664));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v12 = *(void *)(v0 + 632);
    swift_errorRetain(v1);
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = swift_errorRetain(v1);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void *)(v0 + 632);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 624);
      unsigned __int8 v60 = *(_BYTE *)(v0 + 688);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v64;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain(v17);
      *(void *)(v0 + 392) = sub_10009BE3C(v18, v17, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v21 = sub_100020094(v60);
      unint64_t v23 = v22;
      *(void *)(v0 + 400) = sub_10009BE3C(v21, v22, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 22) = 2112;
      swift_errorRetain(v1);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(void *)(v0 + 408) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v19 + 24, v19 + 32);
      uint64_t *v20 = v24;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] Error handling request %s: %@.", (uint8_t *)v19, 0x20u);
      uint64_t v25 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v20, 1LL, v25);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    uint64_t v41 = *(void *)(v0 + 640);
    uint64_t v42 = *(void *)(v0 + 616);
    uint64_t v43 = *(void (**)(void, void, uint64_t))(v0 + 488);
    swift_errorRetain(v1);
    v43(0LL, 0LL, v1);
    swift_release(v41);
    swift_release(v42);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v26 = v4;
    unint64_t v27 = v5;
    uint64_t v28 = v0 + 16;
    uint64_t v29 = swift_bridgeObjectRetain(*(void *)(v0 + 632));
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 632);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 624);
      unsigned __int8 v61 = *(_BYTE *)(v0 + 688);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      v65[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain(v33);
      *(void *)(v0 + 440) = sub_10009BE3C(v34, v33, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease_n(v33, 3LL);
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v37 = sub_100020094(v61);
      unint64_t v39 = v38;
      *(void *)(v0 + 448) = sub_10009BE3C(v37, v38, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Returning response for %s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v40 = v36;
      uint64_t v28 = v0 + 16;
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 632), 2LL);
    }

    uint64_t v57 = *(void *)(v0 + 656);
    unint64_t v58 = *(void *)(v0 + 664);
    uint64_t v44 = *(void *)(v0 + 640);
    uint64_t v45 = *(void *)(v0 + 616);
    uint64_t v59 = *(void *)(v0 + 592);
    uint64_t v62 = *(void *)(v0 + 584);
    uint64_t v63 = *(void *)(v0 + 600);
    uint64_t v56 = *(void *)(v0 + 568);
    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 552);
    unint64_t v48 = *(void (**)(unint64_t, void, void))(v0 + 488);
    uint64_t v49 = sub_10000360C(&qword_1000CF9A0);
    uint64_t inited = swift_initStackObject(v49, v28);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
    *(void *)(v0 + 344) = 0x6567617373656DLL;
    *(void *)(v0 + 352) = 0xE700000000000000LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  v0 + 344,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 72) = v26;
    *(void *)(inited + 80) = v27;
    sub_1000109D4(v26, v27);
    unint64_t v51 = sub_10000393C(inited);
    v48(v51, 0LL, 0LL);
    swift_release(v45);
    swift_bridgeObjectRelease(v51);
    swift_release(v44);
    sub_10000BE18(v26, v27);
    sub_10000BE18(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v56, v47);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v63, v62);
  }

  uint64_t v52 = *(void *)(v0 + 576);
  uint64_t v53 = *(void *)(v0 + 568);
  uint64_t v54 = *(void *)(v0 + 544);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000335F0()
{
  if (v7 == 1)
  {
    swift_release(v5[0]);
    return 0x507463657269642ELL;
  }

  else
  {
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    v3._countAndFlagsBits = 41LL;
    v3._object = (void *)0xE100000000000000LL;
    String.append(_:)(v3);
    uint64_t v1 = 0x286465726168732ELL;
    sub_10000F2F0(v5);
  }

  return v1;
}

uint64_t sub_1000336A8(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v4 = qword_1000D35C8;
  v3[11] = qword_1000D35C8;
  return swift_task_switch(sub_100033714, v4, 0LL);
}

uint64_t sub_100033714()
{
  uint64_t Strong = swift_weakLoadStrong(*(void *)(v0 + 72) + 56LL);
  if (Strong)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    *(void *)uint64_t v2 = Strong;
    *(_BYTE *)(v2 + 56) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void **)(v0 + 80);
    swift_beginAccess(v4 + 7, v0 + 16, 0LL, 0LL);
    uint64_t v6 = v4[10];
    uint64_t v5 = v4[11];
    char v7 = sub_10000F2CC(v4 + 7, v6);
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = (uint64_t *)swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(uint64_t *, void *, uint64_t))(v8 + 16))(v9, v7, v6);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(v6, v5);
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v9, v6);
    id v11 = *(id *)(v0 + 72);
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain(v11);
    swift_bridgeObjectRetain(v10);
    for (uint64_t i = *(void *)(v0 + 72); v12; uint64_t i = *(void *)(v0 + 72))
    {
      unint64_t v27 = v9;
      uint64_t v9 = (uint64_t *)(i + 64);
      swift_beginAccess(i + 64, v0 + 40, 0LL, 0LL);
      uint64_t v14 = 0LL;
      while (1)
      {
        id v11 = (v10 & 0xC000000000000001LL) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v10)
            : *(id *)(v10 + 8 * v14 + 32);
        os_log_type_t v15 = v11;
        uint64_t v16 = v14 + 1;
        if (__OFADD__(v14, 1LL)) {
          break;
        }
        uint64_t v17 = *v9;
        swift_bridgeObjectRetain(*v9);
        uint64_t v18 = sub_10000DD10();
        uint64_t v19 = sub_100033B5C(v18, v17, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
        swift_bridgeObjectRelease(v18);
        uint64_t v20 = *(void *)(v19 + 16);
        swift_release(v19);

        if (v20)
        {
          uint64_t v22 = *(void *)(v0 + 72);
          uint64_t v21 = *(void *)(v0 + 80);
          uint64_t v23 = *(void *)(v0 + 64);
          swift_bridgeObjectRelease_n(v10, 2LL);
          swift_release(v22);
          swift_task_dealloc(v27);
          sub_10000F310(v21 + 96, v23);
          uint64_t v24 = *(void *)(v22 + 24);
          *(void *)(v23 + 40) = *(void *)(v22 + 16);
          *(void *)(v23 + 48) = v24;
          *(_BYTE *)(v23 + 56) = 0;
          swift_bridgeObjectRetain(v24);
          return (*(uint64_t (**)(void))(v0 + 8))();
        }

        ++v14;
        if (v16 == v12)
        {
          swift_release(*(void *)(v0 + 72));
          uint64_t v9 = v27;
          goto LABEL_21;
        }
      }

      __break(1u);
LABEL_16:
      if (v10 < 0) {
        uint64_t v25 = v10;
      }
      else {
        uint64_t v25 = v10 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_retain(v11);
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v25);
    }

    swift_release(i);
LABEL_21:
    swift_bridgeObjectRelease_n(v10, 2LL);
    swift_task_dealloc(v9);
    uint64_t v26 = (void *)swift_task_alloc(dword_1000CDEE4);
    *(void *)(v0 + 96) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1000339A8;
    return sub_10000E9FC();
  }

uint64_t sub_1000339A8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  uint64_t v8 = *(void *)(v4 + 88);
  *(void *)(v4 + 104) = a1;
  return swift_task_switch(sub_100033A24, v8, 0LL);
}

uint64_t sub_100033A24()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 104);
  *(_BYTE *)(v1 + 56) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ConduitDeviceManager.BleDiscoveryAssertion()
{
  return objc_opt_self(&OBJC_CLASS____TtCC44com_apple_NeighborhoodActivityConduitService20ConduitDeviceManager21BleDiscoveryAssertion);
}

uint64_t sub_100033A64(uint64_t a1, uint64_t a2)
{
  return sub_10001CFD8( &qword_1000CEC58,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
}

uint64_t sub_100033A90(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100033AC4(uint64_t a1, uint64_t a2)
{
  return sub_100033B5C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
}

uint64_t sub_100033B10(uint64_t a1, uint64_t a2)
{
  return sub_100033B5C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100034488);
}

uint64_t sub_100033B5C( uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(_BYTE *)(a2 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (1LL << v6) + 63;
  unint64_t v9 = v8 >> 6;
  size_t v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    uint64_t v11 = a3((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9, a2, v5);
    swift_release(a2);
  }

  else
  {
    uint64_t v12 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v12, v10);
    uint64_t v11 = a3((char *)v12, v9, a2, v5);
    swift_release(a2);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return v11;
}

unint64_t sub_100033CE8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v64 = (unint64_t *)result;
  unint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void *)(a4 + 16);
  uint64_t v81 = a3;
  if (v7 >= v6) {
    goto LABEL_45;
  }
  int64_t v8 = 0LL;
  uint64_t v66 = a4 + 56;
  uint64_t v68 = 0LL;
  uint64_t v9 = 1LL << *(_BYTE *)(a4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(a4 + 56);
  int64_t v69 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = a3 + 56;
  while (2)
  {
    while (2)
    {
      if (v11)
      {
        uint64_t v71 = (v11 - 1) & v11;
        int64_t v73 = v8;
        unint64_t v13 = __clz(__rbit64(v11)) | (v8 << 6);
      }

      else
      {
        int64_t v14 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }

        if (v14 >= v69) {
          goto LABEL_88;
        }
        unint64_t v15 = *(void *)(v66 + 8 * v14);
        int64_t v16 = v8 + 1;
        if (!v15)
        {
          int64_t v16 = v8 + 2;
          if (v8 + 2 >= v69) {
            goto LABEL_88;
          }
          unint64_t v15 = *(void *)(v66 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v8 + 3;
            if (v8 + 3 >= v69) {
              goto LABEL_88;
            }
            unint64_t v15 = *(void *)(v66 + 8 * v16);
            if (!v15)
            {
              uint64_t v17 = v8 + 4;
              if (v8 + 4 >= v69) {
                goto LABEL_88;
              }
              unint64_t v15 = *(void *)(v66 + 8 * v17);
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_91;
                  }
                  if (v16 >= v69) {
                    goto LABEL_88;
                  }
                  unint64_t v15 = *(void *)(v66 + 8 * v16);
                  ++v17;
                  if (v15) {
                    goto LABEL_22;
                  }
                }
              }

              int64_t v16 = v8 + 4;
            }
          }
        }

Swift::Int sub_100034488(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0LL;
    uint64_t v36 = a4 + 56;
    uint64_t v7 = 1LL << *(_BYTE *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v38 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v43 = a3 + 56;
    while (1)
    {
      if (v9)
      {
        uint64_t v39 = (v9 - 1) & v9;
        int64_t v41 = v6;
        unint64_t v10 = __clz(__rbit64(v9)) | (v6 << 6);
      }

      else
      {
        int64_t v11 = v6 + 1;
        if (__OFADD__(v6, 1LL))
        {
          __break(1u);
          goto LABEL_50;
        }

        if (v11 >= v38) {
          goto LABEL_48;
        }
        unint64_t v12 = *(void *)(v36 + 8 * v11);
        int64_t v13 = v6 + 1;
        if (!v12)
        {
          int64_t v13 = v6 + 2;
          if (v6 + 2 >= v38) {
            goto LABEL_48;
          }
          unint64_t v12 = *(void *)(v36 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v6 + 3;
            if (v6 + 3 >= v38) {
              goto LABEL_48;
            }
            unint64_t v12 = *(void *)(v36 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = v6 + 4;
              if (v6 + 4 >= v38) {
                goto LABEL_48;
              }
              unint64_t v12 = *(void *)(v36 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  int64_t v13 = v14 + 1;
                  if (__OFADD__(v14, 1LL)) {
                    break;
                  }
                  if (v13 >= v38) {
                    goto LABEL_48;
                  }
                  unint64_t v12 = *(void *)(v36 + 8 * v13);
                  ++v14;
                  if (v12) {
                    goto LABEL_22;
                  }
                }

                __break(1u);
LABEL_52:
                __break(1u);
                JUMPOUT(0x100035984LL);
              }

              int64_t v13 = v6 + 4;
            }
          }
        }

LABEL_45:
    uint64_t v40 = (v25 - 1) & v25;
    int64_t v42 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_46:
    uint64_t v28 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v23);
    uint64_t v30 = *v28;
    unint64_t v29 = v28[1];
    Hasher.init(_seed:)(&__s1, *(void *)(a4 + 40));
    sub_1000109D4(v30, v29);
    Data.hash(into:)(&__s1, v30, v29);
    unint64_t v31 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a4 + 32));
    if (((*(void *)(v44 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v31) & 1) != 0) {
      __asm { BR              X8 }
    }

    sub_10000BE18(v30, v29);
    unint64_t v22 = v40;
    int64_t v19 = v42;
  }

  uint64_t v27 = v19 + 4;
  if (v19 + 4 >= v37) {
    goto LABEL_48;
  }
  unint64_t v25 = *(void *)(v34 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v19 + 4;
    goto LABEL_45;
  }

  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      goto LABEL_52;
    }
    if (v26 >= v37) {
      break;
    }
    unint64_t v25 = *(void *)(v34 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_45;
    }
  }

  sub_10000BF5C((uint64_t)v17, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  return 0LL;
}

void sub_100035A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100035AC8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100035CACLL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *int64_t v37 = (_DWORD)result == 0;
  return result;
}

void *sub_100035CD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v38 = sub_1000052E0(0LL, &qword_1000CE118, &OBJC_CLASS___RPCompanionLinkClient_ptr);
  uint64_t v39 = &off_1000C5EA8;
  v37[0] = a1;
  v36[3] = v38;
  v36[4] = &off_1000C5EA8;
  v36[0] = a2;
  v35[3] = sub_1000052E0(0LL, &qword_1000CEC60, &OBJC_CLASS___RPRemoteDisplayDiscovery_ptr);
  v35[4] = &off_1000C5FD0;
  v35[0] = a3;
  a4[3] = 0LL;
  swift_unknownObjectWeakInit(a4 + 2, 0LL);
  uint64_t v8 = sub_10000360C(&qword_1000CF980);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  a4[4] = PassthroughSubject.init()();
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  a4[5] = PassthroughSubject.init()();
  a4[6] = sub_1000036DC((uint64_t)_swiftEmptyArrayStorage);
  swift_weakInit(a4 + 22, 0LL);
  a4[23] = 0LL;
  uint64_t result = [(id)objc_opt_self(FTDeviceSupport) sharedInstance];
  if (result)
  {
    unint64_t v10 = result;
    id v11 = [result deviceType];

    if (v11 == (id)5)
    {
      id v12 = [objc_allocWithZone(RPServer) init];
      [v12 setControlFlags:1036];
      [v12 setPasswordType:1];
      NSString v13 = String._bridgeToObjectiveC()();
      [v12 setServiceType:v13];

      v33[4] = sub_1000216CC;
      void v33[5] = 0LL;
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 1107296256LL;
      v33[2] = sub_10001FE7C;
      v33[3] = &unk_1000C3780;
      uint64_t v14 = _Block_copy(v33);
      [v12 setAcceptHandler:v14];
      _Block_release(v14);
      [v12 activate];
    }

    else
    {
      id v12 = 0LL;
    }

    a4[24] = v12;
    sub_10000F310((uint64_t)v37, (uint64_t)(a4 + 7));
    sub_10000F310((uint64_t)v36, (uint64_t)(a4 + 12));
    sub_10000F310((uint64_t)v35, (uint64_t)(a4 + 17));
    uint64_t v15 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
    swift_weakInit(v15 + 16, a4);
    uint64_t v16 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
    swift_weakInit(v16 + 16, a4);
    swift_beginAccess(a4 + 7, v34, 33LL, 0LL);
    uint64_t v17 = a4[10];
    uint64_t v18 = a4[11];
    sub_10000F354((uint64_t)(a4 + 7), v17);
    uint64_t v20 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 24))( v33,  v17,  v18);
    if ((*v19 & 1) == 0) {
      *v19 |= 1u;
    }
    v20(v33, 0LL);
    uint64_t v21 = a4[10];
    uint64_t v22 = a4[11];
    sub_10000F354((uint64_t)(a4 + 7), v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 40))(1028LL, v21, v22);
    uint64_t v23 = a4[10];
    uint64_t v24 = a4[11];
    sub_10000F354((uint64_t)(a4 + 7), v23);
    unint64_t v25 = *(void (**)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t))(v24 + 120);
    swift_retain(v15);
    v25(sub_100036168, v15, v23, v24);
    uint64_t v26 = a4[10];
    uint64_t v27 = a4[11];
    sub_10000F354((uint64_t)(a4 + 7), v26);
    uint64_t v28 = *(void (**)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t))(v27 + 144);
    swift_retain(v16);
    v28(sub_100036190, v16, v26, v27);
    swift_endAccess(v34);
    uint64_t v29 = swift_allocObject(&unk_1000C3768, 24LL, 7LL);
    swift_weakInit(v29 + 16, a4);
    swift_beginAccess(a4 + 17, v33, 33LL, 0LL);
    uint64_t v30 = a4[20];
    uint64_t v31 = a4[21];
    sub_10000F354((uint64_t)(a4 + 17), v30);
    BOOL v32 = *(void (**)(uint64_t (*)(char, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v31 + 24);
    swift_retain(v29);
    v32(sub_1000361B8, v29, v30, v31);
    swift_endAccess(v33);
    swift_release(v15);
    swift_release(v16);
    sub_10000F2F0(v35);
    sub_10000F2F0(v36);
    sub_10000F2F0(v37);
    swift_release(v29);
    return a4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100036144()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100036168(void *a1)
{
  return sub_10002115C(a1, v1, (uint64_t)&unk_1000C3830, (uint64_t)&unk_1000CEC90);
}

uint64_t sub_100036190(void *a1)
{
  return sub_10002115C(a1, v1, (uint64_t)&unk_1000C3808, (uint64_t)&unk_1000CEC80);
}

uint64_t sub_1000361B8(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100021370(a1, a2, a3, v3);
}

uint64_t sub_1000361C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000361D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000361D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000361FC()
{
  return sub_100038320(41LL);
}

uint64_t sub_100036204(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(_BYTE *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CEC6C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_10002149C(a1, v4, v5, v6, v7);
}

uint64_t sub_100036284(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CEC7C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100021294(a1, v4, v5, v7, v6);
}

uint64_t sub_100036300(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CEC8C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100021080(a1, v4, v5, v7, v6);
}

uint64_t sub_100036378()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000363AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CEC9C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100020C90(a1, v4, v5, v7, v6);
}

uint64_t sub_100036424(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t j = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (j << 6); ; unint64_t i = __clz(__rbit64(v12)) + (j << 6))
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_beginAccess(v14 + 64, v19, 0LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 64);
    swift_retain(v14);
    swift_bridgeObjectRetain(v15);
    uint64_t v16 = sub_10000DD10();
    uint64_t v17 = sub_100033B5C(v16, v15, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100033CE8);
    swift_bridgeObjectRelease(v16);
    uint64_t v18 = *(void *)(v17 + 16);
    swift_release(v17);
    if (v18)
    {
      swift_release(a1);
      return v14;
    }

    uint64_t result = swift_release(v14);
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = j + 1;
    if (__OFADD__(j, 1LL)) {
      break;
    }
    if (v11 >= v6) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++j;
    if (v12) {
      goto LABEL_19;
    }
    int64_t j = v11 + 1;
    if (v11 + 1 >= v6) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v2 + 8 * j);
    if (v12) {
      goto LABEL_19;
    }
    int64_t j = v11 + 2;
    if (v11 + 2 >= v6) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v2 + 8 * j);
    if (v12) {
      goto LABEL_19;
    }
    int64_t j = v11 + 3;
    if (v11 + 3 >= v6) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v2 + 8 * j);
    if (v12) {
      goto LABEL_19;
    }
    int64_t v13 = v11 + 4;
    if (v13 >= v6)
    {
LABEL_24:
      swift_release(a1);
      return 0LL;
    }

    unint64_t v12 = *(void *)(v2 + 8 * v13);
    for (int64_t j = v13; !v12; ++v13)
    {
      int64_t j = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_27;
      }
      if (j >= v6) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v2 + 8 * j);
    }

LABEL_19:
    unint64_t v5 = (v12 - 1) & v12;
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

      __break(1u);
      return result;
    }
  }

  if (!__dst)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v7 = a4 - (void)__dst;
LABEL_10:
  uint64_t v8 = __dst;
  return (uint64_t)strncpy(v8, v6, v7);
}

uint64_t sub_1000365F8(uint64_t *a1)
{
  return sub_100024644(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32)) & 1;
}

uint64_t sub_100036618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CECAC);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000193E4;
  return sub_100023494(a1, a2, a3, v3);
}

uint64_t sub_100036688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E940( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(unsigned __int8 *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40),  (uint64_t)&unk_1000C3F38,  (uint64_t)&unk_1000CEF30);
}

uint64_t sub_1000366C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CECBC);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000193E4;
  return sub_1000236DC(a1, a2, a3, v3);
}

uint64_t sub_100036734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E940( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(unsigned __int8 *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40),  (uint64_t)&unk_1000C3F10,  (uint64_t)&unk_1000CEF18);
}

uint64_t sub_100036770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CECCC);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000193E4;
  return sub_1000238BC(a1, a2, a3, v3);
}

uint64_t sub_1000367E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E940( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(unsigned __int8 *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40),  (uint64_t)&unk_1000C3EE8,  (uint64_t)&unk_1000CEEF8);
}

uint64_t sub_10003681C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CECDC);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000193E4;
  return sub_100023A80(a1, a2, a3, v3);
}

uint64_t sub_10003688C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002E940( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(unsigned __int8 *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40),  (uint64_t)&unk_1000C3EC0,  (uint64_t)&unk_1000CEEE0);
}

uint64_t sub_1000368C8(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoJoinEvent,  (uint64_t)&unk_1000C3E98,  (uint64_t)&unk_1000CEED0,  (uint64_t (*)(char *, uint64_t, char *))sub_10004ED6C);
}

uint64_t sub_100036904(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3E70,  (uint64_t)&unk_1000CEEB8);
}

uint64_t sub_100036934(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoContactUpdateEvent,  (uint64_t)&unk_1000C3E48,  (uint64_t)&unk_1000CEEA8,  (uint64_t (*)(char *, uint64_t, char *))sub_10004ED6C);
}

uint64_t sub_100036970(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3E20,  (uint64_t)&unk_1000CEE90);
}

uint64_t sub_1000369A0(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoStartedSessionEvent,  (uint64_t)&unk_1000C3DF8,  (uint64_t)&unk_1000CEE80,  (uint64_t (*)(char *, uint64_t, char *))sub_10004ED6C);
}

uint64_t sub_1000369DC(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3DD0,  (uint64_t)&unk_1000CEE68);
}

uint64_t sub_100036A0C(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoEndedSessionEvent,  (uint64_t)&unk_1000C3DA8,  (uint64_t)&unk_1000CEE58,  (uint64_t (*)(char *, uint64_t, char *))sub_10004ED6C);
}

uint64_t sub_100036A48(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3D80,  (uint64_t)&unk_1000CEE40);
}

uint64_t sub_100036A78(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoPolicyInfoUpdatedEvent,  (uint64_t)&unk_1000C3D58,  (uint64_t)&unk_1000CEE30,  (uint64_t (*)(char *, uint64_t, char *))sub_10004EC20);
}

uint64_t sub_100036AB4(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3D30,  (uint64_t)&unk_1000CEE18);
}

uint64_t sub_100036AE4(uint64_t a1, uint64_t a2)
{
  return sub_100023BFC(a1, a2, v2);
}

uint64_t sub_100036AF0(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3CE0,  (uint64_t)&unk_1000CEDF0);
}

uint64_t sub_100036B20(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent,  (uint64_t)&unk_1000C3CB8,  (uint64_t)&unk_1000CEDE0,  (uint64_t (*)(char *, uint64_t, char *))sub_10004EC20);
}

uint64_t sub_100036B5C(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3C90,  (uint64_t)&unk_1000CEDC8);
}

uint64_t sub_100036B8C(uint64_t a1, uint64_t a2)
{
  return sub_100024020( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoRecentCallsDidChangeEvent,  (uint64_t)&unk_1000C3C68,  (uint64_t)&unk_1000CEDB8);
}

uint64_t sub_100036BC0(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3C40,  (uint64_t)&unk_1000CEDA0);
}

uint64_t sub_100036BF0(uint64_t a1, uint64_t a2)
{
  return sub_100023DF8( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoDeviceLaunchedEvent,  (uint64_t)&unk_1000C3C18,  (uint64_t)&unk_1000CED90,  (uint64_t (*)(char *, uint64_t, char *))sub_10004EC20);
}

uint64_t sub_100036C2C(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3BF0,  (uint64_t)&unk_1000CED78);
}

uint64_t sub_100036C5C(uint64_t a1, uint64_t a2)
{
  return sub_100024020( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoActiveConversationsDidChangeEvent,  (uint64_t)&unk_1000C3BC8,  (uint64_t)&unk_1000CED68);
}

uint64_t sub_100036C90(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3BA0,  (uint64_t)&unk_1000CED50);
}

uint64_t sub_100036CC0(uint64_t a1, uint64_t a2)
{
  return sub_100024020( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoContinuityCallsDidChangeEvent,  (uint64_t)&unk_1000C3B78,  (uint64_t)&unk_1000CED40);
}

uint64_t sub_100036CF4(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3B50,  (uint64_t)&unk_1000CED28);
}

uint64_t sub_100036D24(uint64_t a1, uint64_t a2)
{
  return sub_100024020( a1,  a2,  v2,  (uint64_t (*)(void))&type metadata accessor for NCProtoFavoritesDidChangeEvent,  (uint64_t)&unk_1000C3B28,  (uint64_t)&unk_1000CED18);
}

uint64_t sub_100036D58()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100036D84(uint64_t a1, uint64_t a2)
{
  return sub_100026040( a1,  a2,  *(void *)(v2 + 16),  *(_BYTE *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  (uint64_t)&unk_1000C3B00,  (uint64_t)&unk_1000CECF8);
}

unint64_t sub_100036DB4()
{
  unint64_t result = qword_1000CECE8;
  if (!qword_1000CECE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AA144, &type metadata for ConduitDeviceManagerError);
    atomic_store(result, &qword_1000CECE8);
  }

  return result;
}

uint64_t sub_100036DFC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CECF4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000261B0(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100036EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100036EDC()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoFavoritesDidChangeEvent);
}

uint64_t sub_100036EE8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoFavoritesDidChangeEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFACC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10007368C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100036F98(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CED24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100026CFC(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_10003703C()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoContinuityCallsDidChangeEvent);
}

uint64_t sub_100037048(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoContinuityCallsDidChangeEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFAD4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000733E4(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1000370F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CED4C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100027848(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_10003719C()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoActiveConversationsDidChangeEvent);
}

uint64_t sub_1000371A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoActiveConversationsDidChangeEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFADC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10007313C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037258(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CED74);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100028394(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1000372FC()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoDeviceLaunchedEvent);
}

uint64_t sub_100037308(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoDeviceLaunchedEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFAE4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100073010(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1000373B8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CED9C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100028EE0(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_10003745C()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoRecentCallsDidChangeEvent);
}

uint64_t sub_100037468(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoRecentCallsDidChangeEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFAEC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100072BAC(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037518(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEDC4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100029A2C(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1000375BC()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent);
}

uint64_t sub_1000375C8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoSuggestionAdvertisementDidChangeEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFAF4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100072E54(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037678(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEDEC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002A578(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_10003771C()
{
  uint64_t v1 = type metadata accessor for NCProtoIDSProxyMessage(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100037798(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NCProtoIDSProxyMessage(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CFB04);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000193E4;
  return sub_100072AEC(a1, v5, v6, v7, v8);
}

uint64_t sub_100037830(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEE14);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002B0C4(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1000378D4()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoPolicyInfoUpdatedEvent);
}

uint64_t sub_1000378E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoPolicyInfoUpdatedEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFB14);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10007295C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037990(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEE3C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002BC10(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100037A34()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoEndedSessionEvent);
}

uint64_t sub_100037A40(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoEndedSessionEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFB24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100072834(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037AF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEE64);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002C75C(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100037B94()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoStartedSessionEvent);
}

uint64_t sub_100037BA0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoStartedSessionEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFB34);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100072728(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037C50(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEE8C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002D2A8(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100037CF4()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoContactUpdateEvent);
}

uint64_t sub_100037D00(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoContactUpdateEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  int64_t v11 = (void *)swift_task_alloc(dword_1000CFB54);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_100072510(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100037DB0()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100037DF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEEB4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_10000C2B8;
  return sub_10002DDF4(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100037E98()
{
  return sub_100037EA4((uint64_t (*)(void))&type metadata accessor for NCProtoJoinEvent);
}

uint64_t sub_100037EA4(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v1 + 16));

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release(*(void *)(v1 + v7));
  return swift_deallocObject(v1, v7 + 8, v6);
}

uint64_t sub_100037F40(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoJoinEvent(0LL) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CFB8C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000193E4;
  return sub_100072464(a1, v5, v6, v7, v8);
}

uint64_t sub_100037FF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEEDC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002EAC8(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1000380A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEEF4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10002FFD8(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100038160(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEF14);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000311E0(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100038218()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100038264(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 48);
  int64_t v11 = (void *)swift_task_alloc(dword_1000CEF2C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *int64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000323E8(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100038318()
{
  return sub_100038320(40LL);
}

uint64_t sub_100038320(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_100038358(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CEF44);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C2B8;
  return sub_100021D68(a1, v4, v5, v6);
}

uint64_t sub_1000383C4(void *a1)
{
  return sub_10002080C(a1, v1, (uint64_t)&unk_1000C4018, (uint64_t)&unk_1000CEF70);
}

uint64_t sub_1000383EC(void *a1)
{
  return sub_10002080C(a1, v1, (uint64_t)&unk_1000C3FF0, (uint64_t)&unk_1000CEF60);
}

uint64_t sub_100038418(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CEF5C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100020944(a1, v4, v5, v7, v6);
}

uint64_t sub_100038494()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000384C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CEF6C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100020728(a1, v4, v5, v7, v6);
}

uint64_t storeEnumTagSinglePayload for ConduitDeviceManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10003858C + 4 * byte_1000A9F05[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000385C0 + 4 * byte_1000A9F00[v4]))();
}

uint64_t sub_1000385C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000385C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000385D0LL);
  }
  return result;
}

uint64_t sub_1000385DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000385E4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000385E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000385F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConduitDeviceManagerError()
{
  return &type metadata for ConduitDeviceManagerError;
}

uint64_t destroy for ConduitDeviceManager.MessagingClient(void *a1)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 56);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1) {
    return swift_release(*a1);
  }
  sub_10000F2F0(a1);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ConduitDeviceManager.MessagingClient(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 56);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *a2;
    *(void *)a1 = *a2;
    swift_retain(v5);
    char v6 = 1;
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v8;
    swift_bridgeObjectRetain(v8);
    char v6 = 0;
  }

  *(_BYTE *)(a1 + 56) = v6;
  return a1;
}

uint64_t assignWithCopy for ConduitDeviceManager.MessagingClient(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release(*(void *)a1);
    }

    else
    {
      sub_10000F2F0((void *)a1);
      swift_bridgeObjectRelease(*(void *)(a1 + 48));
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *a2;
      *(void *)a1 = *a2;
      *(_BYTE *)(a1 + 56) = 1;
      swift_retain(v6);
    }

    else
    {
      uint64_t v7 = a2[3];
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      *(void *)(a1 + 40) = a2[5];
      uint64_t v8 = a2[6];
      *(void *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = 0;
      swift_bridgeObjectRetain(v8);
    }
  }

  return a1;
}

__n128 initializeWithTake for ConduitDeviceManager.MessagingClient(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ConduitDeviceManager.MessagingClient(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release(*(void *)a1);
    }

    else
    {
      sub_10000F2F0((void *)a1);
      swift_bridgeObjectRelease(*(void *)(a1 + 48));
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }

    else
    {
      char v6 = 0;
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
    }

    *(_BYTE *)(a1 + 56) = v6;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for ConduitDeviceManager.MessagingClient(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ConduitDeviceManager.MessagingClient( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 56) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100038910(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 56);
  return result;
}

uint64_t sub_10003892C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 48) = 0LL;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConduitDeviceManager.MessagingClient()
{
  return &type metadata for ConduitDeviceManager.MessagingClient;
}

unint64_t sub_10003896C()
{
  unint64_t result = qword_1000CEF78;
  if (!qword_1000CEF78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AA11C, &type metadata for ConduitDeviceManagerError);
    atomic_store(result, (unint64_t *)&qword_1000CEF78);
  }

  return result;
}

uint64_t sub_1000389CC(uint64_t *a1)
{
  return sub_1000365F8(a1) & 1;
}

id sub_1000389E4()
{
  id result = [(id)objc_opt_self(FTNetworkSupport) sharedInstance];
  if (result) {
    qword_1000CEF80 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_100038A24(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100004E20((_OWORD *)a1, v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v7 = *v2;
    *unsigned int v2 = 0x8000000000000000LL;
    sub_100077C34(v8, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = *v2;
    *unsigned int v2 = v7;
    swift_bridgeObjectRelease(v5);
    return sub_10000519C(a2);
  }

  else
  {
    sub_10000BFC8(a1, &qword_1000CE540);
    sub_100039198(a2, v8);
    sub_10000519C(a2);
    return sub_10000BFC8((uint64_t)v8, &qword_1000CE540);
  }

uint64_t sub_100038AE0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10003A5DC(v0, qword_1000CEF88);
  sub_10000ADF4(v0, (uint64_t)qword_1000CEF88);
  return Logger.init(subsystem:category:)( 0xD00000000000002BLL,  0x80000001000A4D60LL,  0x736C697455534246LL,  0xE800000000000000LL);
}

uint64_t sub_100038B54(uint64_t a1, char a2)
{
  **(_BYTE **)(*(void *)(*(void *)(a1 + 32) + 64LL) + 4swift_beginAccess(v0 + 56, v9, 0LL, 0LL) = a2;
  return swift_continuation_resume();
}

void sub_100038B68(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000360C(&qword_1000CEFB0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  char v10 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v11 = (id)TUPreferredFaceTimeBundleIdentifier(v9);
  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v13 = v12;
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
  }

  swift_beginAccess(a3 + 16, v26, 0LL, 0LL);
  uint64_t v14 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain(v14);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  id v16 = [(id)objc_opt_self(FBSOpenApplicationOptions) optionsWithDictionary:isa];

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_1000C4250, v19 + 8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v20 + v18, v10, v6);
  *(void *)(v20 + v19) = a3;
  aBlock[4] = sub_10003A560;
  uint64_t v25 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100039124;
  aBlock[3] = &unk_1000C4268;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = v25;
  swift_retain(a3);
  swift_release(v22);
  [a2 openApplication:v11 withOptions:v16 completion:v21];
  _Block_release(v21);
}

uint64_t sub_100038D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1000CD650 != -1) {
      swift_once(&qword_1000CD650, sub_100038AE0);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v5, (uint64_t)qword_1000CEF88);
    swift_errorRetain(a2);
    uint64_t v6 = swift_errorRetain(a2);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      char v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v9 = 138412290;
      swift_errorRetain(a2);
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v29 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v9 + 4, v9 + 12);
      *char v10 = v11;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to open FaceTime with error: %@", v9, 0xCu);
      uint64_t v12 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v10, 1LL, v12);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v29 = a2;
    uint64_t v24 = sub_10000360C(&qword_1000CEFB0);
    return CheckedContinuation.resume(throwing:)(&v29, v24);
  }

  else
  {
    if (qword_1000CD650 != -1) {
      swift_once(&qword_1000CD650, sub_100038AE0);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v14, (uint64_t)qword_1000CEF88);
    uint64_t v15 = swift_retain_n(a4, 2LL);
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v27;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_beginAccess(a4 + 16, &v29, 0LL, 0LL);
      uint64_t v19 = *(void *)(a4 + 16);
      uint64_t v20 = swift_bridgeObjectRetain(v19);
      uint64_t v21 = Dictionary.description.getter( v20,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
      unint64_t v23 = v22;
      swift_bridgeObjectRelease(v19);
      uint64_t v28 = sub_10009BE3C(v21, v23, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 4, v18 + 12);
      swift_release_n(a4, 2LL);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "FaceTime launched with options: %s", v18, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a4, 2LL);
    }

    uint64_t v26 = sub_10000360C(&qword_1000CEFB0);
    return CheckedContinuation.resume(returning:)(v26, v26);
  }

void sub_100039124(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

double sub_100039198@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100004DF0(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    *unsigned int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000786A8();
      uint64_t v10 = v13;
    }

    sub_10000519C(*(void *)(v10 + 48) + 40 * v7);
    sub_100004E20((_OWORD *)(*(void *)(v10 + 56) + 32 * v7), a2);
    sub_100039424(v7, v10);
    uint64_t v11 = *v3;
    *unsigned int v3 = v10;
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_100039280(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100004CD4(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *unsigned int v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10007888C();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_1000395EC(v7, v10);
  uint64_t v12 = *v3;
  *unsigned int v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10003934C(uint64_t a1)
{
  unsigned int v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_100004D38(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *unsigned int v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100078A40();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_1000397C0(v5, v8);
  uint64_t v12 = *v2;
  *unsigned int v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_100039424(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_100005160(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_10000519C((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            id v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              _OWORD *v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1000395EC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          id v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          __int128 v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *__int128 v18 = *v19;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    double result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  unint64_t v15 = *(void *)(v3 + 16);
  id v16 = __OFSUB__(v15, 1LL);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

unint64_t sub_1000397C0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v34 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1LL << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v35 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    uint64_t v11 = v35;
    if ((*(void *)(v35 + 8 * (v9 >> 6)) & (1LL << v9)) != 0)
    {
      unint64_t v12 = (result + 1) & v10;
      uint64_t v13 = *(void *)(v34 + 72);
      int v33 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      do
      {
        int64_t v14 = v13 * v9;
        v33(v7, *(void *)(a2 + 48) + v13 * v9, v4);
        uint64_t v15 = *(void *)(a2 + 40);
        unint64_t v16 = sub_10003A61C();
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v4, v16);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 >= v12 && a1 >= (uint64_t)v18)
          {
LABEL_17:
            uint64_t v21 = *(void *)(a2 + 48);
            unint64_t result = v21 + v13 * a1;
            uint64_t v22 = v21 + v14;
            if (v13 * a1 < v14 || result >= v22 + v13)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v4);
            }

            else if (v13 * a1 != v14)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }

            uint64_t v23 = *(void *)(a2 + 56);
            BOOL v24 = (void *)(v23 + 8 * a1);
            uint64_t v25 = (void *)(v23 + 8 * v9);
            uint64_t v11 = v35;
            if (a1 != v9 || (a1 = v9, v24 >= v25 + 1))
            {
              *BOOL v24 = *v25;
              a1 = v9;
            }

            goto LABEL_5;
          }
        }

        else if (v18 >= v12 || a1 >= (uint64_t)v18)
        {
          goto LABEL_17;
        }

        uint64_t v11 = v35;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }

      while (((*(void *)(v11 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
    }

    BOOL v26 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1LL << a1) - 1;
  }

  else
  {
    BOOL v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1LL << a1) - 1;
  }

  *BOOL v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_100039A24(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 305) = a2;
  *(void *)(v2 + 192) = a1;
  uint64_t v3 = sub_10000360C(&qword_1000CEFA8);
  *(void *)(v2 + 200) = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  *(void *)(v2 + 208) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v2 + 2swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v2 + 224) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URLComponents(0LL);
  *(void *)(v2 + 232) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v2 + 240) = v7;
  *(void *)(v2 + 248) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100039AD4, 0LL, 0LL);
}

id sub_100039AD4()
{
  id v1 = [(id)objc_opt_self(FBSOpenApplicationService) serviceWithDefaultShellEndpoint];
  *(void *)(v0 + 256) = v1;
  if (!v1)
  {
    if (qword_1000CD650 != -1) {
      swift_once(&qword_1000CD650, sub_100038AE0);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_10000ADF4(v25, (uint64_t)qword_1000CEF88);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to access open application service.", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    id v30 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_willThrow(v30);
    goto LABEL_20;
  }

  uint64_t v2 = v1;
  uint64_t v4 = (void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = swift_allocObject(&unk_1000C4210, 24LL, 7LL);
  *(void *)(v0 + 264) = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = sub_10000393C((uint64_t)_swiftEmptyArrayStorage);
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 200);
    URLComponents.init()();
    uint64_t v10 = swift_bridgeObjectRetain(v9);
    uint64_t v11 = URLComponents.queryItems.setter(v10);
    URLComponents.url.getter(v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1LL, v6) == 1)
    {
      sub_10000BFC8(*(void *)(v0 + 200), &qword_1000CEFA8);
      if (qword_1000CD650 != -1) {
        swift_once(&qword_1000CD650, sub_100038AE0);
      }
      uint64_t v12 = *v4;
      uint64_t v13 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v13, (uint64_t)qword_1000CEF88);
      uint64_t v14 = swift_bridgeObjectRetain_n(v12, 2LL);
      uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.error.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v18 = *v4;
      if (v17)
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v54 = swift_slowAlloc(32LL, -1LL);
        v57[0] = v54;
        *(_DWORD *)uint64_t v19 = 136315138;
        uint64_t v20 = type metadata accessor for URLQueryItem(0LL);
        uint64_t v21 = swift_bridgeObjectRetain(v18);
        uint64_t v22 = Array.description.getter(v21, v20);
        unint64_t v24 = v23;
        swift_bridgeObjectRelease(v18);
        *(void *)(v0 + 184) = sub_10009BE3C(v22, v24, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease_n(v18, 2LL);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not construct URL from query items %s", v19, 0xCu);
        swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(*v4, 2LL);
      }

      uint64_t v49 = *(void *)(v0 + 240);
      uint64_t v48 = *(void *)(v0 + 248);
      uint64_t v50 = *(void *)(v0 + 232);
      id v51 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
      swift_willThrow(v51);

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      swift_release(v5);
LABEL_20:
      uint64_t v52 = *(void *)(v0 + 224);
      uint64_t v53 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 248));
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }

    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v31 = *(void *)(v0 + 248);
    uint64_t v34 = *(void *)(v0 + 224);
    uint64_t v33 = *(void *)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 32))(v34, *(void *)(v0 + 200), v35);
    *(void *)(v0 + 168) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPayloadURL);
    *(void *)(v0 + 176) = v37;
    AnyHashable.init<A>(_:)(v57, v0 + 168, &type metadata for String, &protocol witness table for String);
    *(void *)(v0 + 144) = v35;
    uint64_t v38 = sub_10003A4AC((void *)(v0 + 120));
    (*(void (**)(void *, uint64_t, uint64_t))(v36 + 16))(v38, v34, v35);
    sub_100038A24(v0 + 120, (uint64_t)v57);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }

  if (*(_BYTE *)(v0 + 305) == 1)
  {
    *(void *)(v0 + 152) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyActivateSuspended);
    *(void *)(v0 + 160) = v39;
    AnyHashable.init<A>(_:)(v57, v0 + 152, &type metadata for String, &protocol witness table for String);
    uint64_t v56 = &type metadata for Bool;
    v55[0] = 1;
    sub_100038A24((uint64_t)v55, (uint64_t)v57);
    uint64_t v40 = swift_task_alloc(32LL);
    *(void *)(v0 + 280) = v40;
    *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 256);
    int64_t v41 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 288) = v41;
    *int64_t v41 = v0;
    v41[1] = sub_10003A33C;
    return (id)withCheckedThrowingContinuation<A>(isolation:function:_:)( v41,  0LL,  0LL,  0xD00000000000003ELL,  0x80000001000A4CF0LL,  sub_10003A4A4,  v40,  (char *)&type metadata for () + 8);
  }

  else
  {
    id result = [(id)objc_opt_self(PBSSystemService) sharedInstance];
    *(void *)(v0 + 272) = result;
    if (result)
    {
      __int16 v43 = result;
      uint64_t v44 = v0 + 16;
      uint64_t v45 = PBSWakeReasonFaceTime;
      *(void *)(v0 + 56) = v0 + 304;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_10003A120;
      uint64_t v46 = swift_continuation_init(v0 + 16, 0LL);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      char v47 = (void *)(v0 + 80);
      v47[1] = 0x40000000LL;
      v47[2] = sub_100038B54;
      v47[3] = &unk_1000C4228;
      v47[4] = v46;
      [v43 wakeSystemForReason:v45 reply:v47];
      return (id)swift_continuation_await(v44);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003A120()
{
  return swift_task_switch(sub_10003A16C, 0LL, 0LL);
}

uint64_t sub_10003A16C()
{
  char v1 = *(_BYTE *)(v0 + 304);

  if ((v1 & 1) != 0)
  {
    uint64_t v2 = swift_task_alloc(32LL);
    *(void *)(v0 + 280) = v2;
    *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 256);
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 288) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10003A33C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v3,  0LL,  0LL,  0xD00000000000003ELL,  0x80000001000A4CF0LL,  sub_10003A4A4,  v2,  (char *)&type metadata for () + 8);
  }

  else
  {
    if (qword_1000CD650 != -1) {
      swift_once(&qword_1000CD650, sub_100038AE0);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10000ADF4(v5, (uint64_t)qword_1000CEF88);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Received an error from PBSSystemService when waking system",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = *(void **)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 264);

    id v12 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_willThrow(v12);
    swift_release(v10);

    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003A33C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10003A410;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 280));
    uint64_t v4 = sub_10003A3A8;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10003A3A8()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);

  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A410()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 264);

  swift_release(v2);
  swift_task_dealloc(v1);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A480()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10003A4A4(uint64_t a1)
{
}

void *sub_10003A4AC(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10003A4E8()
{
  uint64_t v1 = sub_10000360C(&qword_1000CEFB0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10003A560(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_10000360C(&qword_1000CEFB0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_100038D74(a1, a2, v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10003A5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003A5D4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t *sub_10003A5DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

unint64_t sub_10003A61C()
{
  unint64_t result = qword_1000CD8F8;
  if (!qword_1000CD8F8)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD8F8);
  }

  return result;
}

uint64_t sub_10003A664(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    uint64_t v20 = v18;
    swift_retain(v18);
    char v19 = a1(&v20);
    if (v3)
    {
      swift_release(a3);
      swift_release(v18);
      return v18;
    }

    if ((v19 & 1) != 0)
    {
      swift_release(a3);
      return v18;
    }

    uint64_t result = swift_release(v18);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16) {
        goto LABEL_16;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v10) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        int64_t v12 = v17;
        goto LABEL_17;
      }

      int64_t v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        unint64_t v16 = *(void *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            int64_t v12 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              goto LABEL_31;
            }
            if (v12 >= v10) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v6 + 8 * v12);
            ++v17;
            if (v16) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

uint64_t sub_10003A81C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v28 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  uint64_t v6 = *(void *)(v28 - 8);
  uint64_t v7 = __chkstk_darwin(v28);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v31 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a2);
  int64_t v17 = 0LL;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    sub_10004EA38(*(void *)(a2 + 48) + *(void *)(v6 + 72) * i, (uint64_t)v11);
    sub_10004EA7C( (uint64_t)v11,  (uint64_t)v9,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    char v23 = a1(v9);
    if (v3)
    {
      sub_10004EAC0((uint64_t)v9);
      return swift_release(a2);
    }

    if ((v23 & 1) != 0)
    {
      swift_release(a2);
      uint64_t v24 = v29;
      sub_10004EA7C((uint64_t)v9, v29, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v25 = 0LL;
      uint64_t v26 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1LL, v26);
    }

    uint64_t result = sub_10004EAC0((uint64_t)v9);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1LL)) {
      break;
    }
    if (v17 >= v31) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v30 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }

      int64_t v22 = v17 + 4;
      if (v17 + 4 < v31)
      {
        unint64_t v21 = *(void *)(v30 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_31;
            }
            if (v17 >= v31) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v30 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

uint64_t sub_10003AAB4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003AB2C, v8, 0LL);
}

uint64_t sub_10003AB2C()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t started = type metadata accessor for NCProtoStartLagunaSessionRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF2F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoStartLagunaSessionRequest,  (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, started, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003AE9C;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003AE9C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003AF00;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003AF00()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t started = type metadata accessor for NCProtoStartLagunaSessionResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004D904,  v7,  started);
}

uint64_t sub_10003AFFC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  *(void *)(*v1 + 2swift_weakDestroy(v0 + 16) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 200);
  uint64_t v5 = *(void *)(v2 + 152);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v6 = sub_10004EB48;
  }
  else {
    uint64_t v6 = sub_10004EB4C;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10003B06C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003B0E4, v8, 0LL);
}

uint64_t sub_10003B0E4()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t active = type metadata accessor for NCProtoJoinActiveConversationRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF530,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoJoinActiveConversationRequest,  (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, active, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003B454;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003B454()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003B4B8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003B4B8()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t active = type metadata accessor for NCProtoJoinActiveConversationResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E8E4,  v7,  active);
}

uint64_t sub_10003B5B4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003B62C, v8, 0LL);
}

uint64_t sub_10003B62C()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoDeclineContinuityCallRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CFE10,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeclineContinuityCallRequest,  (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003B99C;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003B99C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003BA00;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003BA00()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t v9 = type metadata accessor for NCProtoDeclineContinuityCallResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E898,  v7,  v9);
}

uint64_t sub_10003BAFC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003BB74, v8, 0LL);
}

uint64_t sub_10003BB74()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t started = type metadata accessor for NCProtoStartConversationRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF4F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoStartConversationRequest,  (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, started, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003BEE4;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003BEE4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003BF48;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003BF48()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t started = type metadata accessor for NCProtoStartConversationResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E84C,  v7,  started);
}

uint64_t sub_10003C044(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003C0BC, v8, 0LL);
}

uint64_t sub_10003C0BC()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoAddConversationParticipantsRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddConversationParticipantsRequest,  (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003C42C;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003C42C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003C490;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003C490()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t v9 = type metadata accessor for NCProtoAddConversationParticipantsResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E698,  v7,  v9);
}

uint64_t sub_10003C58C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003C604, v8, 0LL);
}

uint64_t sub_10003C604()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t AddressableContactsRequest = type metadata accessor for NCProtoGetAddressableContactsRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF4D8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoGetAddressableContactsRequest,  (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, AddressableContactsRequest, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003C974;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003C974()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003C9D8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003C9D8()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t AddressableContactsResponse = type metadata accessor for NCProtoGetAddressableContactsResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E800,  v7,  AddressableContactsResponse);
}

uint64_t sub_10003CAD4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003CB4C, v8, 0LL);
}

uint64_t sub_10003CB4C()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t ImageForContactRequest = type metadata accessor for NCProtoGetImageForContactRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CFDE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoGetImageForContactRequest,  (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, ImageForContactRequest, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003CEBC;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003CEBC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003CF20;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003CF20()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t ImageForContactResponse = type metadata accessor for NCProtoGetImageForContactResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E7B4,  v7,  ImageForContactResponse);
}

uint64_t sub_10003D01C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003D094, v8, 0LL);
}

uint64_t sub_10003D094()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoAddMemberRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF568,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddMemberRequest,  (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003D404;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003D404()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10003D5D4;
  }
  else {
    char v4 = sub_10003D468;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003D468()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t v9 = type metadata accessor for NCProtoAddMemberResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003D564;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E97C,  v7,  v9);
}

uint64_t sub_10003D564()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  *(void *)(*v1 + 2swift_weakDestroy(v0 + 16) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 200);
  uint64_t v5 = *(void *)(v2 + 152);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v6 = sub_10003D660;
  }
  else {
    uint64_t v6 = sub_10003D614;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10003D5D4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  sub_10000BE18(*(void *)(v0 + 168), *(void *)(v0 + 176));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D614()
{
  uint64_t v1 = *(void *)(v0 + 160);
  sub_10000BE18(*(void *)(v0 + 168), *(void *)(v0 + 176));
  swift_release(v1);
  sub_10004D918((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D660()
{
  uint64_t v2 = *(void *)(v0 + 168);
  unint64_t v1 = *(void *)(v0 + 176);
  swift_release(*(void *)(v0 + 160));
  sub_10000BE18(v2, v1);
  sub_10004D918((void *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D6B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = v6;
  *(_BYTE *)(v7 + 74) = a6;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(_BYTE *)(v7 + 73) = a2;
  *(void *)(v7 + 112) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v8 = qword_1000D35C8;
  *(void *)(v7 + 152) = qword_1000D35C8;
  return swift_task_switch(sub_10003D730, v8, 0LL);
}

uint64_t sub_10003D730()
{
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  char v4 = *(_BYTE *)(v0 + 74);
  swift_beginAccess(v1 + 48, v0 + 80, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 160) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CFEB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoPullLagunaSessionToTVRequest,  (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
    *(void *)(v0 + 168) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 176) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 184) = v25;
    void *v25 = v0;
    v25[1] = sub_10003DAA0;
    return sub_1000336A8(v0 + 16, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 74);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v10, v11, v12);
    uint64_t v14 = sub_10000EEF8(v10, v11, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 74);
    uint64_t v20 = *(void *)(v0 + 128);
    char v19 = *(void **)(v0 + 136);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 104) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 128), *(void *)(v0 + 136), *(_BYTE *)(v0 + 74));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003DAA0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_10004EB50;
  }
  else {
    char v4 = sub_10003DB04;
  }
  return swift_task_switch(v4, *(void *)(v2 + 152), 0LL);
}

uint64_t sub_10003DB04()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  char v4 = *(_BYTE *)(v0 + 73);
  uint64_t v5 = qword_1000D35C8;
  uint64_t v6 = sub_10001CFD8( &qword_1000CEC58,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitDeviceActor,  (uint64_t)&unk_1000AA028);
  uint64_t v7 = swift_task_alloc(64LL);
  *(void *)(v0 + 200) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v0 + 16;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 48) = v1;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v8;
  uint64_t v9 = type metadata accessor for NCProtoPullLagunaSessionToTVResponse(0LL);
  *uint64_t v8 = v0;
  v8[1] = sub_10003AFFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 112),  v5,  v6,  0xD00000000000001ALL,  0x80000001000A5000LL,  sub_10004E930,  v7,  v9);
}

uint64_t sub_10003DC00(void *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  LODWORD(v63) = a3;
  uint64_t v61 = sub_10000360C(&qword_1000CF300);
  uint64_t v59 = *(void *)(v61 - 8);
  uint64_t v11 = *(void *)(v59 + 64);
  __chkstk_darwin(v61);
  unsigned __int8 v60 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v12, (uint64_t)qword_1000D36B0);
  sub_100033A90(a4, (uint64_t)v69);
  uint64_t v13 = swift_retain(a2);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v62 = a2;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    unint64_t v58 = a1;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc(96LL, -1LL);
    uint64_t v56 = a5;
    uint64_t v20 = v19;
    v66[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315650;
    uint64_t v57 = a6;
    uint64_t v21 = v11;
    uint64_t v22 = *(void *)(a2 + 16);
    unint64_t v23 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v23);
    uint64_t v64 = sub_10009BE3C(v22, v23, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v18 + 4, v18 + 12);
    swift_release(a2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v24 = sub_100020094(v63);
    unint64_t v26 = v25;
    uint64_t v64 = sub_10009BE3C(v24, v25, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v18 + 22) = 2080;
    uint64_t v27 = sub_1000335F0();
    unint64_t v29 = v28;
    uint64_t v64 = sub_10009BE3C(v27, v28, v66);
    uint64_t v11 = v21;
    a6 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease(v29);
    sub_10004D918(v69);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] Sending request %s via %s.", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy(v20, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v30 = v20;
    a5 = v56;
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v31 = v18;
    a1 = v58;
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    swift_release(a2);
    sub_10004D918(v69);
  }

  sub_100033A90(a4, (uint64_t)v69);
  if (v72 == 1)
  {
    uint64_t v32 = *(void *)&v69[0];
    sub_10000F310(*(void *)&v69[0] + 32LL, (uint64_t)v66);
    swift_release(v32);
  }

  else
  {
    swift_bridgeObjectRelease(v71);
    sub_10004D94C(v69, (uint64_t)v66);
  }

  unsigned __int8 v33 = v63;
  uint64_t v56 = v68;
  uint64_t v57 = v67;
  unint64_t v58 = sub_10000F2CC(v66, v67);
  uint64_t v55 = sub_100020094(v33);
  uint64_t v63 = v34;
  uint64_t v35 = sub_10000360C(&qword_1000CF9A0);
  uint64_t inited = swift_initStackObject(v35, v65);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000A96A0;
  *(void *)&v69[0] = 0x6567617373656DLL;
  *((void *)&v69[0] + 1) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)((void *)(inited + 32), v69, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Data;
  *(void *)(inited + 72) = a5;
  *(void *)(inited + 80) = a6;
  sub_1000109D4(a5, a6);
  unint64_t v37 = sub_10000393C(inited);
  sub_100033A90(a4, (uint64_t)v69);
  if (v72 == 1)
  {
    swift_release(*(void *)&v69[0]);
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
    uint64_t v40 = v39;
  }

  else
  {
    uint64_t v38 = v70;
    uint64_t v40 = v71;
    sub_10000F2F0(v69);
  }

  uint64_t v41 = v59;
  uint64_t v42 = v60;
  __int16 v43 = a1;
  uint64_t v44 = v61;
  (*(void (**)(char *, void *, uint64_t))(v59 + 16))(v60, v43, v61);
  uint64_t v45 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v46 = (v45 + 25) & ~v45;
  uint64_t v47 = swift_allocObject(&unk_1000C4568, v46 + v11, v45 | 7);
  uint64_t v48 = v62;
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = v62;
  *(_BYTE *)(v47 + 24) = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v47 + v46, v42, v44);
  uint64_t v49 = v56;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v56 + 280);
  swift_retain(v48);
  uint64_t v53 = v49;
  uint64_t v51 = v63;
  v50(v55, v63, v37, v38, v40, 0LL, sub_10004D970, v47, v57, v53);
  swift_release(v47);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v40);
  return sub_10000F2F0(v66);
}

uint64_t sub_10003E140( uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, unint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  LODWORD(v69) = a3;
  uint64_t v67 = sub_10000360C(a7);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v64 = v15;
  uint64_t v65 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v16, (uint64_t)qword_1000D36B0);
  sub_100033A90(a4, (uint64_t)&v75);
  uint64_t v17 = swift_retain(a2);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v68 = a2;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v62 = a6;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc(96LL, -1LL);
    uint64_t v61 = (void *)a5;
    uint64_t v24 = v23;
    v72[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v63 = a1;
    uint64_t v25 = a8;
    uint64_t v26 = *(void *)(a2 + 16);
    unint64_t v27 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v27);
    uint64_t v70 = sub_10009BE3C(v26, v27, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v22 + 4, v22 + 12);
    swift_release(a2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v28 = sub_100020094(v69);
    unint64_t v30 = v29;
    uint64_t v70 = sub_10009BE3C(v28, v29, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v22 + 22) = 2080;
    uint64_t v31 = sub_1000335F0();
    unint64_t v33 = v32;
    uint64_t v70 = sub_10009BE3C(v31, v32, v72);
    a8 = v25;
    a1 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease(v33);
    sub_10004D918(&v75);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s] Sending request %s via %s.", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v24, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v34 = v24;
    a5 = (uint64_t)v61;
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v35 = v22;
    a6 = v62;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    swift_release(a2);
    sub_10004D918(&v75);
  }

  uint64_t v63 = a9;
  sub_100033A90(a4, (uint64_t)&v75);
  if (v78 == 1)
  {
    uint64_t v36 = v75;
    sub_10000F310(v75 + 32, (uint64_t)v72);
    swift_release(v36);
  }

  else
  {
    swift_bridgeObjectRelease(v77);
    sub_10004D94C(&v75, (uint64_t)v72);
  }

  unsigned __int8 v37 = v69;
  uint64_t v60 = v74;
  uint64_t v62 = v73;
  uint64_t v61 = sub_10000F2CC(v72, v73);
  uint64_t v59 = sub_100020094(v37);
  uint64_t v69 = v38;
  uint64_t v39 = sub_10000360C(&qword_1000CF9A0);
  uint64_t inited = swift_initStackObject(v39, v71);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000A96A0;
  *(void *)&__int128 v75 = 0x6567617373656DLL;
  *((void *)&v75 + 1) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)((void *)(inited + 32), &v75, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Data;
  *(void *)(inited + 72) = a5;
  *(void *)(inited + 80) = a6;
  sub_1000109D4(a5, a6);
  unint64_t v41 = sub_10000393C(inited);
  sub_100033A90(a4, (uint64_t)&v75);
  if (v78 == 1)
  {
    sub_10004D918(&v75);
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
    uint64_t v44 = v43;
  }

  else
  {
    uint64_t v42 = v76;
    uint64_t v44 = v77;
    sub_10000F2F0(&v75);
  }

  uint64_t v45 = v66;
  uint64_t v46 = v65;
  uint64_t v47 = a1;
  uint64_t v48 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v47, v67);
  uint64_t v49 = *(unsigned __int8 *)(v45 + 80);
  uint64_t v50 = (v49 + 25) & ~v49;
  uint64_t v51 = swift_allocObject(a8, v50 + v64, v49 | 7);
  uint64_t v52 = v68;
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = v68;
  *(_BYTE *)(v51 + 24) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v51 + v50, v46, v48);
  uint64_t v53 = v60;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 280);
  swift_retain(v52);
  uint64_t v57 = v53;
  uint64_t v55 = v69;
  v54(v59, v69, v41, v42, v44, 0LL, v63, v51, v62, v57);
  swift_release(v51);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v44);
  return sub_10000F2F0(v72);
}

uint64_t sub_10003E698( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t *a8, unint64_t *a9, uint64_t a10)
{
  uint64_t v71 = a8;
  int v70 = a5;
  uint64_t v15 = type metadata accessor for BinaryDecodingOptions(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = a7(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v64 - v23;
  if (a3)
  {
    uint64_t v25 = swift_errorRetain(a3);
LABEL_14:
    swift_willThrow(v25);
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v33, (uint64_t)qword_1000D36B0);
    swift_retain(a4);
    swift_errorRetain(a3);
    swift_retain(a4);
    uint64_t v34 = swift_errorRetain(a3);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v73[0] = v39;
      *(_DWORD *)uint64_t v37 = 136315650;
      uint64_t v69 = a6;
      uint64_t v41 = *(void *)(a4 + 16);
      unint64_t v40 = *(void *)(a4 + 24);
      swift_bridgeObjectRetain(v40);
      *(void *)&__int128 v75 = sub_10009BE3C(v41, v40, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v37 + 4, v37 + 12);
      swift_release_n(a4, 2LL);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v42 = sub_100020094(v70);
      unint64_t v44 = v43;
      *(void *)&__int128 v75 = sub_10009BE3C(v42, v43, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v37 + 22) = 2112;
      swift_errorRetain(a3);
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError(a3);
      *(void *)&__int128 v75 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v37 + 24, v37 + 32);
      *uint64_t v38 = v45;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%s] Request failed %s: %@.", (uint8_t *)v37, 0x20u);
      uint64_t v46 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v38, 1LL, v46);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      swift_release_n(a4, 2LL);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    *(void *)&v73[0] = a3;
    uint64_t v47 = sub_10000360C(v71);
    return CheckedContinuation.resume(throwing:)(v73, v47);
  }

  if (!a1)
  {
    __int128 v75 = 0u;
    __int128 v76 = 0u;
LABEL_12:
    sub_10000BFC8((uint64_t)&v75, &qword_1000CE540);
    goto LABEL_13;
  }

  v72[0] = 0x6567617373656DLL;
  v72[1] = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(v73, v72, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a1 + 16) && (unint64_t v26 = sub_100004DF0((uint64_t)v73), (v27 & 1) != 0))
  {
    sub_100036EA0(*(void *)(a1 + 56) + 32 * v26, (uint64_t)&v75);
  }

  else
  {
    __int128 v75 = 0u;
    __int128 v76 = 0u;
  }

  sub_10000519C((uint64_t)v73);
  if (!*((void *)&v76 + 1)) {
    goto LABEL_12;
  }
  if ((swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_13:
    unint64_t v31 = sub_100036DB4();
    uint64_t v25 = swift_allocError(&type metadata for ConduitDeviceManagerError, v31, 0LL, 0LL);
    a3 = v25;
    *unint64_t v32 = 1;
    goto LABEL_14;
  }

  uint64_t v68 = a10;
  uint64_t v69 = a6;
  __int128 v28 = v73[0];
  uint64_t v74 = 0LL;
  memset(v73, 0, sizeof(v73));
  uint64_t v29 = sub_1000109D4(v28, *((unint64_t *)&v28 + 1));
  BinaryDecodingOptions.init()(v29);
  uint64_t v30 = sub_10001CFD8(a9, 255LL, a7, v68);
  uint64_t v68 = v28;
  Message.init(serializedData:extensions:partial:options:)(v28, *((void *)&v28 + 1), v73, 0LL, v17, v18, v30);
  unint64_t v67 = *((void *)&v28 + 1);
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v49 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v49, (uint64_t)qword_1000D36B0);
  uint64_t v50 = swift_retain(a4);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  int v53 = v52;
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    int v66 = v53;
    uint64_t v55 = v54;
    uint64_t v65 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v73[0] = v65;
    *(_DWORD *)uint64_t v55 = 136315394;
    uint64_t v56 = *(void *)(a4 + 16);
    unint64_t v57 = *(void *)(a4 + 24);
    swift_bridgeObjectRetain(v57);
    *(void *)&__int128 v75 = sub_10009BE3C(v56, v57, (uint64_t *)v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v55 + 4, v55 + 12);
    swift_release(a4);
    swift_bridgeObjectRelease(v57);
    *(_WORD *)(v55 + 12) = 2080;
    uint64_t v58 = sub_100020094(v70);
    unint64_t v60 = v59;
    *(void *)&__int128 v75 = sub_10009BE3C(v58, v59, (uint64_t *)v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease(v60);
    _os_log_impl( (void *)&_mh_execute_header,  v51,  (os_log_type_t)v66,  "[%s] Response received for %s.",  (uint8_t *)v55,  0x16u);
    uint64_t v61 = v65;
    swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    swift_release(a4);
  }

  unint64_t v62 = v67;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v24, v18);
  uint64_t v63 = sub_10000360C(v71);
  CheckedContinuation.resume(returning:)(v22, v63);
  sub_10000BE18(v68, v62);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v18);
}

uint64_t sub_10003ED68()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10003A5DC(v0, qword_1000CEFB8);
  sub_10000ADF4(v0, (uint64_t)qword_1000CEFB8);
  return Logger.init(subsystem:category:)( 0xD00000000000002BLL,  0x80000001000A4D60LL,  0xD000000000000017LL,  0x80000001000AA1F0LL);
}

void *sub_10003EDE8()
{
  uint64_t v0 = type metadata accessor for ContinuitySessionClient();
  uint64_t v1 = swift_allocObject(v0, 280LL, 15LL);
  uint64_t result = sub_10003F420();
  qword_1000D35D8 = v1;
  return result;
}

uint64_t sub_10003EE20()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(161LL);
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  v2._object = (void *)0x80000001000A4E80LL;
  String.append(_:)(v2);
  uint64_t v3 = *v0;
  char v4 = (void *)v0[1];
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  v6._object = (void *)0x80000001000A4EA0LL;
  String.append(_:)(v6);
  uint64_t v29 = *(void *)(v0[4] + 16);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = 0xD000000000000016LL;
  v9._object = (void *)0x80000001000A4EC0LL;
  String.append(_:)(v9);
  uint64_t v29 = *(void *)(v0[5] + 16);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 0xD000000000000012LL;
  v12._object = (void *)0x80000001000A4EE0LL;
  String.append(_:)(v12);
  uint64_t v13 = v0[6];
  uint64_t v29 = v13;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 >= 0) {
      uint64_t v28 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v28 = v13;
    }
    swift_bridgeObjectRetain(v13);
    _CocoaArrayWrapper.endIndex.getter(v28);
    sub_10001FC00(&v29);
  }

  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 0x746361746E6F6320LL;
  v16._object = (void *)0xEF3D746E756F4373LL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v19._countAndFlagsBits = 0xD000000000000014LL;
  v19._object = (void *)0x80000001000A4F00LL;
  String.append(_:)(v19);
  if ((v1[3] & 1) != 0) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if ((v1[3] & 1) != 0) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  unint64_t v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease(v21);
  v23._object = (void *)0x80000001000A4F20LL;
  v23._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 62LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  return 0LL;
}

uint64_t sub_10003F110()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v6 = sub_10000ADF4(v2, (uint64_t)qword_1000CEFB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = swift_retain_n(v1, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    Swift::String v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v11;
    *(_DWORD *)Swift::String v10 = 136315138;
    uint64_t v12 = v1[17];
    if (v12)
    {
      uint64_t v13 = v1[24];
      uint64_t v34 = v1[23];
      uint64_t v35 = v13;
      uint64_t v36 = v11;
      uint64_t v37 = v3;
      uint64_t v14 = v1[21];
      uint64_t v15 = v1[22];
      uint64_t v16 = v1[20];
      char v17 = *((_BYTE *)v1 + 152);
      uint64_t v18 = v1[18];
      uint64_t v39 = v1[16];
      uint64_t v40 = v12;
      uint64_t v41 = v18;
      LOBYTE(v42) = v17 & 1;
      uint64_t v43 = v16;
      uint64_t v44 = v14;
      uint64_t v45 = v15;
      uint64_t v46 = v34;
      uint64_t v47 = v13;
      swift_bridgeObjectRetain(v12);
      uint64_t v19 = v18;
      uint64_t v3 = v37;
      swift_retain(v19);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v14);
      uint64_t v20 = v15;
      uint64_t v11 = v36;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      uint64_t v21 = String.init<A>(reflecting:)(&v39, &type metadata for ContinuitySessionClient.Session);
      unint64_t v23 = v22;
    }

    else
    {
      unint64_t v23 = 0xE300000000000000LL;
      uint64_t v21 = 7104878LL;
    }

    uint64_t v39 = sub_10009BE3C(v21, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v23);
    swift_release_n(v1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Camera session updated to %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v24 = v1[16];
  uint64_t v25 = v1[17];
  uint64_t v26 = v1[18];
  uint64_t v27 = v1[19];
  uint64_t v28 = v1[20];
  uint64_t v29 = v1[21];
  uint64_t v30 = v1[22];
  uint64_t v32 = v1[23];
  uint64_t v31 = v1[24];
  uint64_t v39 = v24;
  uint64_t v40 = v25;
  uint64_t v41 = v26;
  uint64_t v42 = v27;
  uint64_t v43 = v28;
  uint64_t v44 = v29;
  uint64_t v45 = v30;
  uint64_t v46 = v32;
  uint64_t v47 = v31;
  sub_1000190B0(v24, v25, v26, v27, v28, v29, v30, v32, v31);
  CurrentValueSubject.send(_:)(&v39);
  return sub_10001885C(v24, v25, v26, v27, v28, v29, v30, v32, v31);
}

void *sub_10003F420()
{
  uint64_t v1 = (void *)v0;
  swift_defaultActor_initialize(v0);
  uint64_t v2 = sub_10000360C(&qword_1000CF8F0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 112) = PassthroughSubject.init()();
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v3 = sub_10000360C(&qword_1000CE578);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(void *)(v0 + 120) = CurrentValueSubject.init(_:)(&v25);
  *(void *)(v0 + 208) = 0LL;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(void *)(v0 + 192) = 0LL;
  swift_unknownObjectWeakInit(v0 + 200, 0LL);
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter);
  id v5 = objc_msgSend(v4, "sharedInstance", v25, v26, v27, v28, v29);
  id v6 = [v5 conversationManager];

  v1[27] = v6;
  if (qword_1000CD6F8 != -1) {
    swift_once(&qword_1000CD6F8, sub_10009AAB0);
  }
  uint64_t v7 = qword_1000D36E8;
  uint64_t v8 = (void *)unk_1000D36F0;
  os_log_type_t v9 = (void *)qword_1000D36F8;
  v1[28] = qword_1000D36E8;
  v1[29] = v8;
  v1[30] = v9;
  uint64_t v10 = qword_1000CD640;
  swift_retain(v7);
  id v11 = v8;
  id v12 = v9;
  if (v10 != -1) {
    swift_once(&qword_1000CD640, sub_1000202C4);
  }
  uint64_t v13 = qword_1000D35D0;
  v1[31] = qword_1000D35D0;
  id v14 = objc_allocWithZone(&OBJC_CLASS___RPRemoteDisplayDiscovery);
  swift_retain(v13);
  id v15 = [v14 init];
  v1[32] = v15;
  uint64_t v16 = type metadata accessor for NeighborhoodActivityPublisherService();
  swift_allocObject(v16, 32LL, 7LL);
  v1[33] = sub_10008B074();
  v1[34] = _swiftEmptyArrayStorage;
  uint64_t v17 = swift_allocObject(&unk_1000C4338, 24LL, 7LL);
  swift_weakInit(v17 + 16, v1);
  *(void *)&__int128 v27 = sub_10004C79C;
  *((void *)&v27 + 1) = v17;
  *(void *)&__int128 v25 = _NSConcreteStackBlock;
  *((void *)&v25 + 1) = 1107296256LL;
  *(void *)&__int128 v26 = sub_1000538D4;
  *((void *)&v26 + 1) = &unk_1000C4350;
  uint64_t v18 = _Block_copy(&v25);
  uint64_t v19 = *((void *)&v27 + 1);
  id v20 = v15;
  swift_release(v19);
  [v20 setDiscoverySessionStateChangedHandler:v18];
  _Block_release(v18);

  uint64_t v21 = (void *)v1[32];
  *(void *)&__int128 v27 = sub_10003F940;
  *((void *)&v27 + 1) = 0LL;
  *(void *)&__int128 v25 = _NSConcreteStackBlock;
  *((void *)&v25 + 1) = 1107296256LL;
  *(void *)&__int128 v26 = sub_100053948;
  *((void *)&v26 + 1) = &unk_1000C4378;
  unint64_t v22 = _Block_copy(&v25);
  id v23 = v21;
  [v23 activateWithCompletion:v22];
  _Block_release(v22);

  return v1;
}

uint64_t sub_10003F6F8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a4 += 16LL;
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = swift_allocObject(&unk_1000C4338, 24LL, 7LL);
  swift_beginAccess(a4, v18, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a4);
  swift_weakInit(v12 + 16, Strong);
  swift_release(Strong);
  uint64_t v14 = swift_allocObject(&unk_1000C43B0, 64LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v14 + 24) = 0LL;
  *(void *)(v14 + 32) = v12;
  *(_BYTE *)(v14 + 40) = a1;
  *(void *)(v14 + 48) = a2;
  *(void *)(v14 + 56) = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v15 = sub_10004ED6C((uint64_t)v10, (uint64_t)&unk_1000CF1C8, v14);
  return swift_release(v15);
}

uint64_t sub_10003F838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a6;
  *(void *)(v7 + 64) = a7;
  *(_BYTE *)(v7 + 80) = a5;
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a4;
  return swift_task_switch(sub_10003F858, 0LL, 0LL);
}

uint64_t sub_10003F858()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 72) = Strong;
  if (Strong) {
    return swift_task_switch(sub_10003F8D8, Strong, 0LL);
  }
  **(_BYTE **)(v0 + 40) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F8D8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_10003FC18(*(unsigned __int8 *)(v0 + 80), *(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_release(v1);
  return swift_task_switch(sub_10003F924, 0LL, 0LL);
}

uint64_t sub_10003F924()
{
  **(_BYTE **)(v0 + 40) = *(void *)(v0 + 72) == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003F940(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000CD658 != -1) {
      swift_once(&qword_1000CD658, sub_10003ED68);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v2, (uint64_t)qword_1000CEFB8);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v5 = 138412290;
      swift_errorRetain(a1);
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
      uint64_t *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v4,  "Failed to activate remote display discovery due to %@",  v5,  0xCu);
      uint64_t v8 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v6, 1LL, v8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

BOOL sub_10003FB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v17;
  if (!v17) {
    return 0LL;
  }
  uint64_t v5 = a1;
  uint64_t v6 = v24;
  uint64_t v15 = v23;
  uint64_t v8 = v21;
  uint64_t v7 = v22;
  uint64_t v10 = v19;
  uint64_t v9 = v20;
  uint64_t v11 = v18;
  uint64_t v12 = v16;
  swift_bridgeObjectRetain(v17);
  sub_10001885C(v12, v4, v11, v10, v9, v8, v7, v15, v6);
  if (v12 == v5 && v4 == a2)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v4, v5, a2, 0LL);
  swift_bridgeObjectRelease(v4);
  return (v14 & 1) != 0;
}

uint64_t sub_10003FC18(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v105 = a2;
  uint64_t v5 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v5);
  uint64_t v104 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v11 = sub_10000ADF4(v7, (uint64_t)qword_1000CEFB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v102 = swift_slowAlloc(64LL, -1LL);
    uint64_t v109 = v102;
    *(_DWORD *)uint64_t v15 = 136315394;
    LODWORD(v103) = a1;
    unint64_t v16 = 0x80000001000A5020LL;
    if (!(_BYTE)a1) {
      unint64_t v16 = 0x80000001000A5050LL;
    }
    else {
      uint64_t v17 = 0xD00000000000002ALL;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v107 = sub_10009BE3C(v17, v18, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2080;
    if (a3)
    {
      uint64_t v107 = v105;
      uint64_t v108 = a3;
      swift_bridgeObjectRetain(a3);
      uint64_t v19 = String.init<A>(reflecting:)(&v107, &type metadata for String);
      unint64_t v21 = v20;
    }

    else
    {
      unint64_t v21 = 0xE300000000000000LL;
      uint64_t v19 = 7104878LL;
    }

    uint64_t v107 = sub_10009BE3C(v19, v21, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease_n(a3, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Updated discovery session state: %s (%s",  (uint8_t *)v15,  0x16u);
    uint64_t v23 = v102;
    swift_arrayDestroy(v102, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    LOBYTE(a1) = v103;
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  uint64_t v24 = v106;
  uint64_t v25 = v106[16];
  uint64_t v27 = v106[17];
  __int128 v26 = v106 + 16;
  if (v27)
  {
    uint64_t v28 = v106[18];
    char v29 = a1;
    uint64_t v30 = v106[20];
    uint64_t v31 = v106[21];
    uint64_t v33 = v106[22];
    uint64_t v32 = v106[23];
    uint64_t v34 = v106[24];
    uint64_t v103 = v106[19];
    int v35 = v103 & 1;
    if (v29)
    {
      if (v29 == 1 && a3 && (v25 != v105 || v27 != a3))
      {
        uint64_t v101 = v28;
        uint64_t v36 = a3;
        uint64_t v37 = v25;
        int v38 = v103 & 1;
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v105, v36, 0LL);
        uint64_t v39 = v37;
        uint64_t v40 = v101;
        if ((result & 1) == 0)
        {
          int v41 = v38;
          uint64_t v42 = v24[16];
          uint64_t v98 = v24[17];
          uint64_t v99 = v42;
          uint64_t v43 = v24[18];
          uint64_t v96 = v24[19];
          uint64_t v97 = v43;
          uint64_t v44 = v24[20];
          uint64_t v94 = v24[21];
          uint64_t v95 = v44;
          uint64_t v45 = v24[22];
          uint64_t v92 = v24[23];
          uint64_t v93 = v45;
          uint64_t v46 = v32;
          uint64_t v47 = v24[24];
          *(_OWORD *)__int128 v26 = 0u;
          *((_OWORD *)v26 + 1) = 0u;
          *((_OWORD *)v26 + 2) = 0u;
          *((_OWORD *)v26 + 3) = 0u;
          v26[8] = 0LL;
          uint64_t v100 = v39;
          LODWORD(v105) = v41;
          swift_bridgeObjectRetain_n(v27, 2LL);
          swift_retain_n(v40, 2LL);
          swift_bridgeObjectRetain_n(v30, 2LL);
          swift_bridgeObjectRetain_n(v31, 2LL);
          swift_bridgeObjectRetain_n(v33, 2LL);
          swift_bridgeObjectRetain_n(v46, 2LL);
          uint64_t v102 = v34;
          swift_bridgeObjectRetain_n(v34, 2LL);
          sub_10001885C(v99, v98, v97, v96, v95, v94, v93, v92, v47);
          sub_10003F110();
          uint64_t v48 = type metadata accessor for TaskPriority(0LL);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))( v104,  1LL,  1LL,  v48);
          uint64_t v50 = sub_10001CFD8( &qword_1000CF2D0,  v49,  (uint64_t (*)(uint64_t))type metadata accessor for ContinuitySessionClient,  (uint64_t)&unk_1000AA258);
          uint64_t v51 = swift_allocObject(&unk_1000C4608, 112LL, 7LL);
          *(void *)(v51 + swift_weakDestroy(v0 + 16) = v24;
          *(void *)(v51 + 24) = v50;
          uint64_t v52 = v100;
          *(void *)(v51 + 32) = v24;
          *(void *)(v51 + 40) = v52;
          *(void *)(v51 + 48) = v27;
          *(void *)(v51 + 56) = v40;
          *(_BYTE *)(v51 + 64) = v105;
          *(_DWORD *)(v51 + 65) = v107;
          *(_DWORD *)(v51 + 68) = *(_DWORD *)((char *)&v107 + 3);
          *(void *)(v51 + 72) = v30;
          *(void *)(v51 + 80) = v31;
          *(void *)(v51 + 88) = v33;
          *(void *)(v51 + 96) = v46;
          *(void *)(v51 + 104) = v34;
          swift_retain(v24);
          uint64_t v90 = v34;
          uint64_t v53 = v52;
          uint64_t v54 = v52;
          uint64_t v55 = v103;
          sub_1000190B0(v53, v27, v40, v103, v30, v31, v33, v46, v90);
          swift_retain(v24);
          uint64_t v56 = sub_10004EC20(v104, (uint64_t)&unk_1000CF348, v51);
          swift_release(v56);
          uint64_t v57 = v102;
          uint64_t v58 = v101;
          sub_10001885C(v54, v27, v101, v55, v30, v31, v33, v46, v102);
          return sub_10001885C(v54, v27, v58, v55, v30, v31, v33, v46, v57);
        }
      }
    }

    else
    {
      v106[24] = 0LL;
      *((_OWORD *)v26 + 2) = 0u;
      *((_OWORD *)v26 + 3) = 0u;
      *(_OWORD *)__int128 v26 = 0u;
      *((_OWORD *)v26 + 1) = 0u;
      uint64_t v68 = v25;
      LODWORD(v105) = v35;
      swift_bridgeObjectRetain_n(v27, 2LL);
      swift_retain_n(v28, 2LL);
      uint64_t v69 = v30;
      swift_bridgeObjectRetain_n(v30, 2LL);
      uint64_t v70 = v31;
      swift_bridgeObjectRetain_n(v31, 2LL);
      uint64_t v71 = v33;
      swift_bridgeObjectRetain_n(v33, 2LL);
      swift_bridgeObjectRetain_n(v32, 2LL);
      uint64_t v102 = v34;
      swift_bridgeObjectRetain_n(v34, 2LL);
      uint64_t v91 = v34;
      uint64_t v72 = v28;
      sub_10001885C(v68, v27, v28, v103, v69, v70, v33, v32, v91);
      uint64_t v73 = v70;
      uint64_t v74 = v69;
      uint64_t v75 = v32;
      sub_10003F110();
      uint64_t v76 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v104, 1LL, 1LL, v76);
      uint64_t v78 = sub_10001CFD8( &qword_1000CF2D0,  v77,  (uint64_t (*)(uint64_t))type metadata accessor for ContinuitySessionClient,  (uint64_t)&unk_1000AA258);
      uint64_t v79 = swift_allocObject(&unk_1000C45E0, 112LL, 7LL);
      *(void *)(v79 + swift_weakDestroy(v0 + 16) = v24;
      *(void *)(v79 + 24) = v78;
      *(void *)(v79 + 32) = v24;
      *(void *)(v79 + 40) = v68;
      uint64_t v80 = v68;
      *(void *)(v79 + 48) = v27;
      *(void *)(v79 + 56) = v72;
      *(_BYTE *)(v79 + 64) = v105;
      *(_DWORD *)(v79 + 65) = v107;
      *(_DWORD *)(v79 + 68) = *(_DWORD *)((char *)&v107 + 3);
      *(void *)(v79 + 72) = v74;
      *(void *)(v79 + 80) = v73;
      *(void *)(v79 + 88) = v71;
      *(void *)(v79 + 96) = v75;
      uint64_t v81 = v102;
      *(void *)(v79 + 104) = v102;
      swift_retain_n(v24, 2LL);
      uint64_t v82 = sub_10004EC20(v104, (uint64_t)&unk_1000CF338, v79);
      swift_release(v82);
      return sub_10001885C(v80, v27, v72, v103, v74, v73, v71, v75, v81);
    }
  }

  else if (a1 == 1 && a3)
  {
    unint64_t v59 = (void *)v106[32];
    swift_bridgeObjectRetain_n(a3, 3LL);
    id v60 = [v59 dedicatedDevice];
    if (v60)
    {
      uint64_t v61 = v60;
      id v62 = [v60 idsDeviceIdentifier];
      if (v62)
      {
        uint64_t v63 = v62;
        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        uint64_t v66 = v65;

        uint64_t v67 = v105;
        if (v64 == v105 && v66 == a3)
        {

          swift_bridgeObjectRelease(v66);
          swift_bridgeObjectRelease_n(a3, 2LL);
        }

        else
        {
          char v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, a3, v64, v66, 0LL);

          swift_bridgeObjectRelease(v66);
          swift_bridgeObjectRelease_n(a3, 2LL);
          if ((v83 & 1) == 0) {
            return swift_bridgeObjectRelease(a3);
          }
        }

        uint64_t v84 = type metadata accessor for TaskPriority(0LL);
        uint64_t v85 = v104;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56LL))(v104, 1LL, 1LL, v84);
        uint64_t v87 = sub_10001CFD8( &qword_1000CF2D0,  v86,  (uint64_t (*)(uint64_t))type metadata accessor for ContinuitySessionClient,  (uint64_t)&unk_1000AA258);
        uint64_t v88 = (void *)swift_allocObject(&unk_1000C45B8, 56LL, 7LL);
        v88[2] = v24;
        v88[3] = v87;
        v88[4] = v67;
        v88[5] = a3;
        v88[6] = v24;
        swift_retain_n(v24, 2LL);
        uint64_t v89 = sub_100051BF8(v85, (uint64_t)&unk_1000CF328, (uint64_t)v88);
        return swift_release(v89);
      }
    }

    return swift_bridgeObjectRelease_n(a3, 3LL);
  }

  return result;
}

uint64_t sub_1000404FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CF014);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1000193E4;
  return sub_10004367C(a5);
}

uint64_t sub_100040550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  return swift_task_switch(sub_10004056C, a6, 0LL);
}

uint64_t sub_10004056C()
{
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v1 = v0[15];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000CEFB8);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[15];
  if (v6)
  {
    uint64_t v8 = v0[14];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[11] = v8;
    v0[12] = v7;
    swift_bridgeObjectRetain(v7);
    uint64_t v11 = String.init<A>(reflecting:)(v0 + 11, &type metadata for String);
    unint64_t v13 = v12;
    v0[13] = sub_10009BE3C(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease(v13);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Started remoteDisplaySession with dedicated device: (%s. Automatically requesting continuity session with dedicated device.",  v9,  0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  os_log_type_t v14 = (void *)swift_task_alloc(dword_1000CEFFC);
  v0[17] = v14;
  *os_log_type_t v14 = v0;
  v14[1] = sub_100040774;
  return sub_1000407C4((uint64_t)(v0 + 2), v0[14], v0[15]);
}

uint64_t sub_100040774()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    sub_100018774((void *)(v2 + 16));
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000407C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[33] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[34] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[35] = swift_task_alloc(v7);
  v4[36] = swift_task_alloc(v7);
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v4[37] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004085C, v3, 0LL);
}

uint64_t sub_10004085C()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 256) + 256LL);
  *(void *)(v0 + 304) = v1;
  id v2 = [v1 peerDeviceIdentifier];
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v8 = v7;

  if (v6 == v5 && v8 == v4)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 248));
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, *(void *)(v0 + 240), *(void *)(v0 + 248), 0LL);
    swift_bridgeObjectRelease(v8);
    if ((v10 & 1) == 0)
    {
LABEL_7:
      if (qword_1000CD658 != -1) {
        swift_once(&qword_1000CD658, sub_10003ED68);
      }
      uint64_t v12 = *(void *)(v0 + 272);
      uint64_t v11 = *(void *)(v0 + 280);
      uint64_t v14 = *(void *)(v0 + 256);
      uint64_t v13 = *(void *)(v0 + 264);
      uint64_t v15 = *(void *)(v0 + 248);
      uint64_t v16 = sub_10000ADF4(v13, (uint64_t)qword_1000CEFB8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v16, v13);
      swift_bridgeObjectRetain_n(v15, 2LL);
      uint64_t v17 = swift_retain_n(v14, 2LL);
      unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v21 = *(void *)(v0 + 240);
        unint64_t v20 = *(void *)(v0 + 248);
        uint64_t v22 = swift_slowAlloc(22LL, -1LL);
        uint64_t v23 = swift_slowAlloc(64LL, -1LL);
        v89[0] = v23;
        *(_DWORD *)uint64_t v22 = 136315394;
        swift_bridgeObjectRetain(v20);
        *(void *)(v0 + 192) = sub_10009BE3C(v21, v20, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease_n(v20, 3LL);
        *(_WORD *)(v22 + 12) = 2080;
        id v24 = [v1 peerDeviceIdentifier];
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          uint64_t v28 = v27;

          *(void *)(v0 + 160) = v26;
          *(void *)(v0 + 168) = v28;
          uint64_t v29 = String.init<A>(reflecting:)(v0 + 160, &type metadata for String);
          unint64_t v31 = v30;
        }

        else
        {
          uint64_t v29 = 7104878LL;
          unint64_t v31 = 0xE300000000000000LL;
        }

        uint64_t v72 = *(void *)(v0 + 272);
        uint64_t v88 = *(void *)(v0 + 280);
        uint64_t v74 = *(void *)(v0 + 256);
        uint64_t v73 = *(void *)(v0 + 264);
        *(void *)(v0 + 176) = sub_10009BE3C(v29, v31, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v22 + 14, v22 + 22);
        swift_release_n(v74, 2LL);
        swift_bridgeObjectRelease(v31);
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[CameraSession] Rejecting start camera session request %s because that device does not match connected camera %s.",  (uint8_t *)v22,  0x16u);
        swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);

        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v88, v73);
      }

      else
      {
        uint64_t v55 = *(void *)(v0 + 272);
        uint64_t v54 = *(void *)(v0 + 280);
        uint64_t v57 = *(void *)(v0 + 256);
        uint64_t v56 = *(void *)(v0 + 264);
        uint64_t v58 = *(void *)(v0 + 248);

        swift_release_n(v57, 2LL);
        swift_bridgeObjectRelease_n(v58, 2LL);
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      }

      uint64_t v75 = 18LL;
LABEL_33:
      id v82 = (id)TUMakeNeighborhoodConduitError(v75, 0LL);
      id v83 = v82;
      sub_100019BAC((uint64_t)v82);

      swift_willThrow(v84);
      uint64_t v85 = *(void *)(v0 + 288);
      uint64_t v86 = *(void *)(v0 + 280);
      swift_task_dealloc(*(void *)(v0 + 296));
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v32 = *(void *)(v0 + 256);
  if (*(void *)(v32 + 136))
  {
    uint64_t v33 = *(void *)(v0 + 256);
    if (qword_1000CD658 != -1)
    {
      swift_once(&qword_1000CD658, sub_10003ED68);
      uint64_t v33 = *(void *)(v0 + 256);
    }

    uint64_t v34 = *(void *)(v0 + 288);
    uint64_t v36 = *(void *)(v0 + 264);
    uint64_t v35 = *(void *)(v0 + 272);
    uint64_t v37 = sub_10000ADF4(v36, (uint64_t)qword_1000CEFB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v37, v36);
    uint64_t v38 = swift_retain_n(v33, 2LL);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      int v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v87 = swift_slowAlloc(32LL, -1LL);
      v89[0] = v87;
      *(_DWORD *)int v41 = 136315138;
      uint64_t v42 = *(void *)(v32 + 136);
      if (v42)
      {
        uint64_t v44 = *(void *)(v32 + 184);
        uint64_t v43 = *(void *)(v32 + 192);
        uint64_t v45 = *(void *)(v32 + 168);
        uint64_t v46 = *(void *)(v32 + 176);
        uint64_t v47 = *(void *)(v32 + 160);
        char v48 = *(_BYTE *)(v32 + 152);
        uint64_t v49 = *(void *)(v32 + 144);
        *(void *)(v0 + 88) = *(void *)(v32 + 128);
        *(void *)(v0 + 96) = v42;
        *(void *)(v0 + 104) = v49;
        *(_BYTE *)(v0 + 112) = v48 & 1;
        *(void *)(v0 + 120) = v47;
        *(void *)(v0 + 128) = v45;
        *(void *)(v0 + 136) = v46;
        *(void *)(v0 + 144) = v44;
        *(void *)(v0 + 152) = v43;
        uint64_t v50 = v43;
        swift_bridgeObjectRetain(v42);
        swift_retain(v49);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v50);
        uint64_t v51 = String.init<A>(reflecting:)(v0 + 88, &type metadata for ContinuitySessionClient.Session);
        unint64_t v53 = v52;
      }

      else
      {
        uint64_t v51 = 7104878LL;
        unint64_t v53 = 0xE300000000000000LL;
      }

      uint64_t v78 = *(void *)(v0 + 288);
      uint64_t v80 = *(void *)(v0 + 264);
      uint64_t v79 = *(void *)(v0 + 272);
      uint64_t v81 = *(void *)(v0 + 256);
      *(void *)(v0 + 184) = sub_10009BE3C(v51, v53, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v41 + 4, v41 + 12);
      swift_release_n(v81, 2LL);
      swift_bridgeObjectRelease(v53);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "[CameraSession] Rejecting start camera session request because we already have a session: %s).",  v41,  0xCu);
      swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    }

    else
    {
      uint64_t v68 = *(void *)(v0 + 288);
      uint64_t v69 = *(void *)(v0 + 264);
      uint64_t v70 = *(void *)(v0 + 272);
      uint64_t v71 = *(void *)(v0 + 256);

      swift_release_n(v71, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v69);
    }

    uint64_t v75 = 20LL;
    goto LABEL_33;
  }

  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v59 = *(void *)(v0 + 248);
  *(void *)(v0 + 312) = sub_10000ADF4(*(void *)(v0 + 264), (uint64_t)qword_1000CEFB8);
  uint64_t v60 = swift_bridgeObjectRetain_n(v59, 2LL);
  uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.default.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  unint64_t v64 = *(void *)(v0 + 248);
  if (v63)
  {
    uint64_t v65 = *(void *)(v0 + 240);
    uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v67 = swift_slowAlloc(32LL, -1LL);
    v89[0] = v67;
    *(_DWORD *)uint64_t v66 = 136315138;
    swift_bridgeObjectRetain(v64);
    *(void *)(v0 + 224) = sub_10009BE3C(v65, v64, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v66 + 4, v66 + 12);
    swift_bridgeObjectRelease_n(v64, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "[CameraSession] Requesting to start camera session with %s",  v66,  0xCu);
    swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v64, 2LL);
  }

  uint64_t v76 = (void *)swift_task_alloc(dword_1000CF004);
  *(void *)(v0 + 320) = v76;
  *uint64_t v76 = v0;
  v76[1] = sub_100040FF0;
  return sub_100041644(v0 + 16, *(void *)(v0 + 240), *(void *)(v0 + 248));
}

uint64_t sub_100040FF0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 320);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v6 = *(void *)(v2 + 288);
    uint64_t v5 = *(void *)(v2 + 296);
    uint64_t v7 = *(void *)(v2 + 280);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 256);
    *(void *)(v2 + 328) = *(void *)(v2 + 16);
    __int128 v10 = *(_OWORD *)(v2 + 24);
    *(_BYTE *)(v2 + 392) = *(_BYTE *)(v2 + 40);
    __int128 v11 = *(_OWORD *)(v2 + 48);
    __int128 v12 = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v2 + 336) = v10;
    *(_OWORD *)(v2 + 352) = v11;
    *(_OWORD *)(v2 + 368) = v12;
    *(void *)(v2 + 384) = *(void *)(v2 + 80);
    return swift_task_switch(sub_1000410A8, v9, 0LL);
  }

uint64_t sub_1000410A8()
{
  uint64_t v1 = (__int128 *)(v0 + 16);
  id v2 = [*(id *)(v0 + 304) peerDeviceIdentifier];
  if (!v2)
  {
LABEL_7:
    uint64_t v11 = swift_bridgeObjectRetain_n(*(void *)(v0 + 248), 2LL);
    __int128 v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v15 = *(void *)(v0 + 248);
    if (v14)
    {
      uint64_t v16 = *(void *)(v0 + 240);
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v68[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain(v15);
      *(void *)(v0 + 200) = sub_10009BE3C(v16, v15, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v15, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[CameraSession] RemoteDisplayDiscovery peer changed since initial request - aborting %s",  v17,  0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    uint64_t v30 = *(void *)(v0 + 296);
    uint64_t v31 = *(void *)(v0 + 256);
    uint64_t v32 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v30, 1LL, 1LL, v32);
    uint64_t v34 = sub_10001CFD8( &qword_1000CF2D0,  v33,  (uint64_t (*)(uint64_t))type metadata accessor for ContinuitySessionClient,  (uint64_t)&unk_1000AA258);
    uint64_t v35 = swift_allocObject(&unk_1000C4590, 112LL, 7LL);
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v35 + 24) = v34;
    *(void *)(v35 + 32) = v31;
    __int128 v36 = *v1;
    *(_OWORD *)(v35 + 56) = *(_OWORD *)(v0 + 32);
    __int128 v37 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v35 + 72) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v35 + 88) = v37;
    *(void *)(v35 + 104) = *(void *)(v0 + 80);
    *(_OWORD *)(v35 + 40) = v36;
    swift_retain(v31);
    sub_1000186F4((void *)(v0 + 16));
    swift_retain(v31);
    uint64_t v38 = sub_10004EC20(v30, (uint64_t)&unk_1000CF318, v35);
    swift_release(v38);
    id v39 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    id v40 = v39;
    sub_100019BAC((uint64_t)v39);

    swift_willThrow();
    sub_100018774((void *)(v0 + 16));
    uint64_t v41 = *(void *)(v0 + 288);
    uint64_t v42 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 296));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }

  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v8 = v7;

  if (v6 == v5 && v8 == v4)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 248));
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, *(void *)(v0 + 240), *(void *)(v0 + 248), 0LL);
    swift_bridgeObjectRelease(v8);
    if ((v10 & 1) == 0) {
      goto LABEL_7;
    }
  }

  uint64_t v19 = *(void *)(v0 + 248);
  swift_bridgeObjectRetain(v19);
  sub_1000186F4((void *)(v0 + 16));
  swift_bridgeObjectRetain(v19);
  unint64_t v20 = sub_1000186F4((void *)(v0 + 16));
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  unint64_t v24 = *(void *)(v0 + 248);
  if (v23)
  {
    uint64_t v25 = *(void *)(v0 + 240);
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v66 = swift_slowAlloc(64LL, -1LL);
    v68[0] = v66;
    *(_DWORD *)uint64_t v26 = 136315394;
    swift_bridgeObjectRetain(v24);
    *(void *)(v0 + 208) = sub_10009BE3C(v25, v24, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v24, 3LL);
    *(_WORD *)(v26 + 12) = 2080;
    sub_1000186F4((void *)(v0 + 16));
    uint64_t v27 = sub_10003EE20();
    unint64_t v29 = v28;
    sub_100018774((void *)(v0 + 16));
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = sub_10009BE3C(v27, v29, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease(v29);
    sub_100018774((void *)(v0 + 16));
    sub_100018774((void *)(v0 + 16));
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "[CameraSession] Started camera session with %s: %s",  (uint8_t *)v26,  0x16u);
    swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 248), 2LL);
    sub_100018774((void *)(v0 + 16));
    sub_100018774((void *)(v0 + 16));
  }

  uint64_t v44 = *(void *)(v0 + 384);
  uint64_t v45 = *(unsigned __int8 *)(v0 + 392);
  uint64_t v64 = *(void *)(v0 + 296);
  uint64_t v65 = *(void *)(v0 + 288);
  uint64_t v67 = *(void *)(v0 + 280);
  uint64_t v46 = *(void **)(v0 + 256);
  uint64_t v47 = *(void *)(v0 + 232);
  uint64_t v48 = v46[16];
  uint64_t v49 = v46[17];
  uint64_t v50 = v46[18];
  uint64_t v51 = v46[19];
  uint64_t v63 = v46[20];
  uint64_t v52 = v46[22];
  uint64_t v62 = v46[21];
  uint64_t v53 = v46[24];
  uint64_t v61 = v46[23];
  __int128 v54 = *(_OWORD *)(v0 + 336);
  __int128 v55 = *(_OWORD *)(v0 + 352);
  __int128 v56 = *(_OWORD *)(v0 + 368);
  v46[16] = *(void *)(v0 + 328);
  *(_OWORD *)(v46 + 17) = v54;
  v46[19] = v45;
  *((_OWORD *)v46 + 10) = v55;
  *((_OWORD *)v46 + 11) = v56;
  v46[24] = v44;
  sub_1000186F4((void *)(v0 + 16));
  sub_1000186F4((void *)(v0 + 16));
  sub_10001885C(v48, v49, v50, v51, v63, v62, v52, v61, v53);
  sub_10003F110();
  sub_100018774((void *)(v0 + 16));
  *(_OWORD *)uint64_t v47 = *v1;
  __int128 v58 = *(_OWORD *)(v0 + 48);
  __int128 v57 = *(_OWORD *)(v0 + 64);
  __int128 v59 = *(_OWORD *)(v0 + 32);
  *(void *)(v47 + 64) = *(void *)(v0 + 80);
  *(_OWORD *)(v47 + 32) = v58;
  *(_OWORD *)(v47 + 48) = v57;
  *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = v59;
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

uint64_t sub_100041644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[33] = a3;
  v4[34] = v3;
  v4[31] = a1;
  v4[32] = a2;
  uint64_t v5 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v4[35] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t started = type metadata accessor for NCProtoStartLagunaSessionResponse(0LL);
  v4[36] = started;
  uint64_t v7 = *(void *)(started - 8);
  v4[37] = v7;
  v4[38] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NCProtoStartLagunaSessionRequest(0LL);
  v4[39] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[40] = v9;
  v4[41] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000416F4, v3, 0LL);
}

uint64_t sub_1000416F4()
{
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v1 = v0[33];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[42] = sub_10000ADF4(v2, (uint64_t)qword_1000CEFB8);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[33];
  if (v6)
  {
    uint64_t v8 = v0[32];
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v0[27] = sub_10009BE3C(v8, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Requesting to start a session.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v11 = v0[33];
  v0[43] = *(void *)(v0[34] + 248LL);
  __int128 v12 = (void *)swift_task_alloc(dword_1000CE934);
  v0[44] = v12;
  void *v12 = v0;
  v12[1] = sub_1000418E4;
  return sub_1000241DC(v0[32], v11, 0);
}

uint64_t sub_1000418E4(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 352LL);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    os_log_type_t v5 = sub_100042A28;
  }
  else {
    os_log_type_t v5 = sub_100041950;
  }
  return swift_task_switch(v5, v3[34], 0LL);
}

uint64_t sub_100041950(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 368);
  uint64_t v3 = static Task<>.checkCancellation()(a1);
  if (v2)
  {
    uint64_t v4 = v2;
    swift_release(*(void *)(v1 + 360));
    uint64_t v5 = *(void *)(v1 + 264);
    swift_bridgeObjectRetain(v5);
    swift_errorRetain(v4);
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = swift_errorRetain(v4);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    unint64_t v10 = *(void *)(v1 + 264);
    if (v9)
    {
      uint64_t v11 = *(void *)(v1 + 256);
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v24 = v14;
      *(_DWORD *)uint64_t v12 = 136315394;
      swift_bridgeObjectRetain(v10);
      *(void *)(v1 + 232) = sub_10009BE3C(v11, v10, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 232, v1 + 240, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease_n(v10, 3LL);
      *(_WORD *)(v12 + 12) = 2112;
      swift_errorRetain(v4);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(void *)(v1 + 208) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v12 + 14, v12 + 22);
      *os_log_type_t v13 = v15;
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%s] Failed to start session due to %@.",  (uint8_t *)v12,  0x16u);
      uint64_t v16 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v13, 1LL, v16);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v1 + 264), 2LL);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    swift_errorRetain(v4);
    sub_100019BAC(v4);
    uint64_t v20 = swift_errorRelease(v4);
    uint64_t v21 = *(void *)(v1 + 328);
    uint64_t v22 = *(void *)(v1 + 304);
    uint64_t v23 = *(void *)(v1 + 280);
    swift_willThrow(v20);
    sub_10001885C(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    NCProtoStartLagunaSessionRequest.init()(v3);
    if (qword_1000CD638 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    uint64_t v17 = *(void *)(v1 + 264);
    uint64_t v18 = (void *)swift_task_alloc(dword_1000CF2F4);
    *(void *)(v1 + 376) = v18;
    *uint64_t v18 = v1;
    v18[1] = sub_100041C88;
    return sub_10003AAB4(*(void *)(v1 + 304), 4, *(void *)(v1 + 328), *(void *)(v1 + 256), v17, 0);
  }

uint64_t sub_100041C88()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 376);
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100042784;
  }
  else {
    uint64_t v4 = sub_100041CEC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 272), 0LL);
}

uint64_t sub_100041CEC()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void **)(*(void *)(v0 + 272) + 256LL);
  swift_bridgeObjectRetain_n(*(void *)(v0 + 264), 2LL);
  swift_retain(v1);
  id v3 = [v2 dedicatedDevice];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 idsDeviceIdentifier];
    uint64_t v6 = *(void *)(v0 + 264);
    if (v5)
    {
      unint64_t v7 = v5;
      uint64_t v8 = *(void *)(v0 + 256);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v11 = v10;

      if (v9 == v8 && v11 == v6) {
        char v13 = 1;
      }
      else {
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)(v0 + 256), *(void *)(v0 + 264), v9, v11, 0LL);
      }
      uint64_t v6 = *(void *)(v0 + 264);
      swift_bridgeObjectRelease(v11);
    }

    else
    {

      char v13 = 0;
    }
  }

  else
  {
    char v13 = 0;
    uint64_t v6 = *(void *)(v0 + 264);
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v14 = *(void *)(v0 + 360);
  __int128 v131 = *(_OWORD *)(v0 + 256);
  unint64_t v125 = sub_100003C1C((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v0 + 88) = v131;
  *(void *)(v0 + 104) = v14;
  *(_BYTE *)(v0 + 112) = v13 & 1;
  uint64_t started = NCProtoStartLagunaSessionResponse.activeConversations.getter();
  *(void *)(v0 + 120) = started;
  uint64_t v16 = NCProtoStartLagunaSessionResponse.recentCalls.getter();
  uint64_t v17 = v16;
  v134[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(v16 + 16);
  uint64_t v132 = started;
  uint64_t v119 = v0 + 240;
  uint64_t v120 = v13 & 1;
  uint64_t v118 = v0 + 232;
  if (v18)
  {
    sub_1000052E0(0LL, &qword_1000CDE68, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v19 = sub_1000052E0(0LL, &qword_1000CF2A8, &OBJC_CLASS___CHRecentCall_ptr);
    uint64_t v20 = *(void *)(v0 + 384);
    uint64_t v21 = *(void *)(v17 + 32);
    unint64_t v22 = *(void *)(v17 + 40);
    swift_bridgeObjectRetain(v17);
    sub_1000109D4(v21, v22);
    uint64_t v23 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v19, v21, v22, v19);
    if (v20)
    {
      swift_errorRelease(v20);
      sub_10000BE18(v21, v22);
    }

    else
    {
      uint64_t v27 = v23;
      uint64_t v28 = sub_10000BE18(v21, v22);
      if (v27)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        unint64_t v30 = *(void *)((v134[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v29 = *(void *)((v134[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v30 >= v29 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
        }
        uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v27);
        specialized Array._endMutation()(v31);
      }
    }

    uint64_t v32 = v18 - 1;
    if (v32)
    {
      id v82 = (unint64_t *)(v17 + 56);
      do
      {
        uint64_t v83 = *(v82 - 1);
        unint64_t v84 = *v82;
        sub_1000109D4(v83, *v82);
        uint64_t v85 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v19, v83, v84, v19);
        uint64_t v86 = sub_10000BE18(v83, v84);
        if (v85)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v86);
          unint64_t v88 = *(void *)((v134[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v87 = *(void *)((v134[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v88 >= v87 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1LL);
          }
          uint64_t v89 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, v85);
          specialized Array._endMutation()(v89);
        }

        v82 += 2;
        --v32;
      }

      while (v32);
    }

    uint64_t v26 = v17;
    swift_bridgeObjectRelease(v17);
    uint64_t v24 = 0LL;
    uint64_t v25 = (void *)v134[0];
    uint64_t started = v132;
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v26 = v16;
  }

  uint64_t v33 = *(void *)(v0 + 360);
  uint64_t v34 = *(void *)(v0 + 264);
  uint64_t v35 = swift_bridgeObjectRelease(v26);
  *(void *)(v0 + 136) = v25;
  uint64_t v36 = NCProtoStartLagunaSessionResponse.contactInfos.getter(v35);
  __int128 v37 = sub_10004CA4C(v36);
  swift_bridgeObjectRelease(v125);
  uint64_t v38 = swift_bridgeObjectRelease(v36);
  *(void *)(v0 + 144) = v37;
  uint64_t v39 = NCProtoStartLagunaSessionResponse.favorites.getter(v38);
  *(void *)(v0 + 152) = v39;
  uint64_t v40 = NCProtoStartLagunaSessionResponse.continuityCalls.getter();
  *(void *)(v0 + 128) = v40;
  swift_bridgeObjectRetain(v34);
  swift_retain(v33);
  swift_bridgeObjectRetain(started);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v37);
  uint64_t v41 = swift_bridgeObjectRetain(v39);
  static Task<>.checkCancellation()(v41);
  uint64_t v129 = (uint64_t)v25;
  uint64_t v126 = v40;
  uint64_t v127 = (uint64_t)v37;
  uint64_t v124 = v39;
  if (v24)
  {
    uint64_t v42 = v24;
    uint64_t v44 = *(void *)(v0 + 320);
    uint64_t v43 = *(void *)(v0 + 328);
    uint64_t v46 = *(void *)(v0 + 304);
    uint64_t v45 = *(void *)(v0 + 312);
    uint64_t v47 = *(void *)(v0 + 288);
    uint64_t v48 = *(void *)(v0 + 296);
    uint64_t v117 = *(void *)(v0 + 360);
    swift_release(v117);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    uint64_t v50 = *(void *)(v0 + 96);
    uint64_t v49 = *(void *)(v0 + 104);
    uint64_t v51 = *(void *)(v0 + 120);
    uint64_t v52 = *(void *)(v0 + 128);
    uint64_t v53 = *(void *)(v0 + 136);
    uint64_t v54 = *(void *)(v0 + 144);
    swift_bridgeObjectRelease(*(void *)(v0 + 152));
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v51);
    swift_release(v49);
    swift_bridgeObjectRelease(v50);
    uint64_t v55 = *(void *)(v0 + 256);
    uint64_t v56 = *(void *)(v0 + 264);
    swift_bridgeObjectRetain(v56);
    swift_errorRetain(v42);
    swift_bridgeObjectRetain(v56);
    uint64_t v57 = swift_errorRetain(v42);
    __int128 v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.error.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    unint64_t v61 = *(void *)(v0 + 264);
    uint64_t v122 = v55;
    if (v60)
    {
      uint64_t v116 = *(void *)(v0 + 256);
      uint64_t v62 = swift_slowAlloc(22LL, -1LL);
      uint64_t v63 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v64 = v56;
      uint64_t v65 = swift_slowAlloc(32LL, -1LL);
      v134[0] = v65;
      *(_DWORD *)uint64_t v62 = 136315394;
      swift_bridgeObjectRetain(v61);
      *(void *)(v0 + 232) = sub_10009BE3C(v116, v61, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v118, v119, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease_n(v61, 3LL);
      *(_WORD *)(v62 + 12) = 2112;
      swift_errorRetain(v42);
      uint64_t v66 = _swift_stdlib_bridgeErrorToNSError(v42);
      *(void *)(v0 + 208) = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v62 + 14, v62 + 22);
      uint64_t *v63 = v66;
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "[%s] Failed to start session due to %@.",  (uint8_t *)v62,  0x16u);
      uint64_t v67 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v63, 1LL, v67);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v68 = v65;
      uint64_t v56 = v64;
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v61, 2LL);
      swift_errorRelease(v42);
      swift_errorRelease(v42);
    }

    swift_errorRetain(v42);
    sub_100019BAC(v42);
    uint64_t v90 = swift_errorRelease(v42);
    uint64_t v91 = v126;
    uint64_t v92 = v56;
    if (v56)
    {
      uint64_t v94 = *(void *)(v0 + 272);
      uint64_t v93 = *(void *)(v0 + 280);
      uint64_t v95 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56LL))(v93, 1LL, 1LL, v95);
      uint64_t v97 = sub_10001CFD8( &qword_1000CF2D0,  v96,  (uint64_t (*)(uint64_t))type metadata accessor for ContinuitySessionClient,  (uint64_t)&unk_1000AA258);
      uint64_t v98 = swift_allocObject(&unk_1000C4540, 112LL, 7LL);
      *(void *)(v98 + swift_weakDestroy(v0 + 16) = v94;
      *(void *)(v98 + 24) = v97;
      *(void *)(v98 + 32) = v94;
      *(void *)(v98 + 40) = v122;
      *(void *)(v98 + 48) = v92;
      *(void *)(v98 + 56) = v117;
      *(_BYTE *)(v98 + 64) = v120;
      *(_DWORD *)(v98 + 65) = *(_DWORD *)(v0 + 392);
      uint64_t v91 = v126;
      *(_DWORD *)(v98 + 68) = *(_DWORD *)(v0 + 395);
      *(void *)(v98 + 72) = v132;
      *(void *)(v98 + 80) = v126;
      *(void *)(v98 + 88) = v129;
      *(void *)(v98 + 96) = v127;
      *(void *)(v98 + 104) = v124;
      swift_retain_n(v94, 2LL);
      sub_1000190B0(v122, v92, v117, v120, v132, v126, v129, v127, v124);
      uint64_t v99 = sub_10004EC20(v93, (uint64_t)&unk_1000CF2E8, v98);
      uint64_t v90 = swift_release(v99);
    }

    uint64_t v100 = *(void *)(v0 + 328);
    uint64_t v101 = *(void *)(v0 + 304);
    uint64_t v102 = *(void *)(v0 + 280);
    swift_willThrow(v90);
    sub_10001885C(v122, v92, v117, v120, v132, v91, v129, v127, v124);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    uint64_t v103 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    unint64_t v123 = (_OWORD *)(v0 + 88);
    uint64_t v69 = swift_bridgeObjectRetain_n(*(void *)(v0 + 264), 2LL);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.default.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    unint64_t v73 = *(void *)(v0 + 264);
    if (v72)
    {
      uint64_t v74 = *(void *)(v0 + 256);
      uint64_t v75 = swift_slowAlloc(22LL, -1LL);
      uint64_t v76 = swift_slowAlloc(64LL, -1LL);
      v134[0] = v76;
      *(_DWORD *)uint64_t v75 = 136315394;
      swift_bridgeObjectRetain(v73);
      *(void *)(v0 + 224) = sub_10009BE3C(v74, v73, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v118, v75 + 4, v75 + 12);
      swift_bridgeObjectRelease_n(v73, 3LL);
      *(_WORD *)(v75 + 12) = 2080;
      swift_beginAccess(v123, v0 + 184, 0LL, 0LL);
      __int128 v77 = *(_OWORD *)(v0 + 136);
      *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 120);
      *(_OWORD *)(v0 + 64) = v77;
      *(void *)(v0 + 80) = *(void *)(v0 + 152);
      __int128 v78 = *(_OWORD *)(v0 + 104);
      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *v123;
      *(_OWORD *)(v0 + 32) = v78;
      sub_1000186F4((void *)(v0 + 16));
      uint64_t v79 = sub_10003EE20();
      unint64_t v81 = v80;
      sub_100018774((void *)(v0 + 16));
      *(void *)(v0 + 240) = sub_10009BE3C(v79, v81, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, v0 + 248, v75 + 14, v75 + 22);
      swift_bridgeObjectRelease(v81);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%s] Successfully started %s.", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v76, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v73, 2LL);
    }

    uint64_t v104 = *(void *)(v0 + 360);
    uint64_t v105 = *(void *)(v0 + 320);
    uint64_t v106 = *(void *)(v0 + 328);
    uint64_t v107 = *(void *)(v0 + 304);
    uint64_t v108 = *(void *)(v0 + 312);
    uint64_t v110 = *(void *)(v0 + 288);
    uint64_t v109 = *(void *)(v0 + 296);
    uint64_t v121 = *(void *)(v0 + 280);
    uint64_t v111 = *(void *)(v0 + 264);
    uint64_t v112 = *(void *)(v0 + 248);
    sub_100019BAC(0LL);
    swift_bridgeObjectRelease(v124);
    swift_bridgeObjectRelease(v127);
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(v126);
    swift_bridgeObjectRelease(v132);
    swift_release_n(v104, 2LL);
    swift_bridgeObjectRelease(v111);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v107, v110);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v106, v108);
    swift_beginAccess(v123, v0 + 160, 0LL, 0LL);
    uint64_t v113 = *(void *)(v0 + 88);
    LOBYTE(v111) = *(_BYTE *)(v0 + 112);
    uint64_t v114 = *(void *)(v0 + 152);
    __int128 v133 = *(_OWORD *)(v0 + 120);
    __int128 v128 = *(_OWORD *)(v0 + 96);
    __int128 v130 = *(_OWORD *)(v0 + 136);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v121);
    *(void *)uint64_t v112 = v113;
    *(_OWORD *)(v112 + 8) = v128;
    *(_BYTE *)(v112 + 24) = v111;
    *(_OWORD *)(v112 + 32) = v133;
    *(_OWORD *)(v112 + 48) = v130;
    *(void *)(v112 + 64) = v114;
    uint64_t v103 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v103();
}

uint64_t sub_100042784()
{
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 312);
  swift_release(*(void *)(v0 + 360));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 264);
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = swift_errorRetain(v4);
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = *(void *)(v0 + 256);
    unint64_t v9 = *(void *)(v0 + 264);
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 232) = sub_10009BE3C(v10, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3LL);
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain(v4);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(void *)(v0 + 208) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 14, v11 + 22);
    uint64_t *v12 = v14;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] Failed to start session due to %@.", (uint8_t *)v11, 0x16u);
    uint64_t v15 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v12, 1LL, v15);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 264), 2LL);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  swift_errorRetain(v4);
  sub_100019BAC(v4);
  uint64_t v16 = swift_errorRelease(v4);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v18 = *(void *)(v0 + 304);
  uint64_t v19 = *(void *)(v0 + 280);
  swift_willThrow(v16);
  sub_10001885C(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042A28()
{
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 264);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = *(void *)(v0 + 256);
    unint64_t v6 = *(void *)(v0 + 264);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    unint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v10;
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 232) = sub_10009BE3C(v7, v6, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v1);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 208) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 14, v8 + 22);
    uint64_t *v9 = v11;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Failed to start session due to %@.", (uint8_t *)v8, 0x16u);
    uint64_t v12 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 264), 2LL);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRetain(v1);
  sub_100019BAC(v1);
  uint64_t v13 = swift_errorRelease(v1);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 280);
  swift_willThrow(v13);
  sub_10001885C(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042CAC(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return swift_task_switch(sub_100042CC8, v2, 0LL);
}

uint64_t sub_100042CC8()
{
  *(void *)(v0 + 160) = *(void *)(*(void *)(v0 + 152) + 248LL);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100042D34, qword_1000D35C8, 0LL);
}

uint64_t sub_100042D34()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  swift_beginAccess(v1 + 48, v0 + 11, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = swift_task_alloc(48LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  *(_BYTE *)(v6 + 32) = 2;
  swift_bridgeObjectRetain(v5);
  v0[21] = sub_10003A664(sub_1000365F8, v6, v5);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v6);
  return swift_task_switch(sub_100042DE4, v2, 0LL);
}

uint64_t sub_100042DE4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  if (!v1)
  {
    if (qword_1000CD658 != -1) {
      swift_once(&qword_1000CD658, sub_10003ED68);
    }
    uint64_t v25 = *(void *)(v0 + 144);
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v26, (uint64_t)qword_1000CEFB8);
    uint64_t v27 = swift_bridgeObjectRetain_n(v25, 2LL);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    unint64_t v31 = *(void *)(v0 + 144);
    if (v30)
    {
      uint64_t v32 = *(void *)(v0 + 136);
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      v69[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain(v31);
      *(void *)(v0 + 112) = sub_10009BE3C(v32, v31, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease_n(v31, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Cannot end continuity session because we're unable to find device for %s.",  v33,  0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v31, 2LL);
    }

    id v46 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = *(void **)(v0 + 152);
  uint64_t v3 = v2[16];
  uint64_t v65 = v0 + 128;
  *(void *)(v0 + 176) = v3;
  uint64_t v4 = v2[17];
  *(void *)(v0 + 184) = v4;
  uint64_t v5 = v2[18];
  *(void *)(v0 + 192) = v5;
  uint64_t v68 = v2[19];
  *(void *)(v0 + 200) = v68;
  uint64_t v6 = v2[20];
  *(void *)(v0 + 208) = v6;
  uint64_t v7 = v2[21];
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v7;
  uint64_t v8 = v2[22];
  *(void *)(v0 + 224) = v8;
  uint64_t v9 = v2[23];
  *(void *)(v0 + 232) = v9;
  uint64_t v10 = v2[24];
  *(void *)(v0 + 240) = v10;
  if (!v4) {
    goto LABEL_14;
  }
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v0 + 24) = v4;
  *(void *)(v0 + 32) = v5;
  *(_BYTE *)(v0 + 40) = v68 & 1;
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = v8;
  *(void *)(v0 + 72) = v9;
  *(void *)(v0 + 80) = v10;
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v64 = v9;
  if (v3 != v11 || v4 != v12)
  {
    uint64_t v63 = v8;
    uint64_t v13 = v10;
    uint64_t v14 = v1;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v11, v12, 0LL);
    uint64_t v1 = v14;
    uint64_t v10 = v13;
    uint64_t v8 = v63;
    uint64_t v9 = v64;
    if ((v15 & 1) == 0)
    {
LABEL_14:
      uint64_t v35 = v1;
      if (qword_1000CD658 != -1) {
        swift_once(&qword_1000CD658, sub_10003ED68);
      }
      uint64_t v36 = *(void *)(v0 + 144);
      uint64_t v37 = type metadata accessor for Logger(0LL);
      sub_10000ADF4(v37, (uint64_t)qword_1000CEFB8);
      uint64_t v38 = swift_bridgeObjectRetain_n(v36, 2LL);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.error.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      unint64_t v42 = *(void *)(v0 + 144);
      if (v41)
      {
        uint64_t v43 = *(void *)(v0 + 136);
        uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v45 = swift_slowAlloc(32LL, -1LL);
        v69[0] = v45;
        *(_DWORD *)uint64_t v44 = 136315138;
        swift_bridgeObjectRetain(v42);
        *(void *)(v0 + 120) = sub_10009BE3C(v43, v42, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v65, v44 + 4, v44 + 12);
        swift_bridgeObjectRelease_n(v42, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Failed to end continuity session with %s because we could not find a corresponding session.",  v44,  0xCu);
        swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v42, 2LL);
      }

      id v47 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
      swift_willThrow(v47);
      swift_release(v35);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v67 = v3;
  uint64_t v16 = qword_1000CD658;
  uint64_t v17 = v10;
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  uint64_t v66 = v17;
  swift_bridgeObjectRetain(v17);
  if (v16 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v18, (uint64_t)qword_1000CEFB8);
  sub_1000190B0(v67, v4, v5, v68, v6, v7, v8, v9, v17);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  uint64_t v19 = swift_bridgeObjectRetain(v17);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  os_log_t log = v20;
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t type = v21;
    unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v61 = swift_slowAlloc(32LL, -1LL);
    v69[0] = v61;
    *(_DWORD *)unint64_t v22 = 136315138;
    swift_bridgeObjectRetain(v4);
    swift_retain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v66);
    uint64_t v59 = sub_10003EE20();
    unint64_t v24 = v23;
    sub_10001885C(v67, v4, v5, v68, v6, v7, v8, v9, v66);
    *(void *)(v0 + 128) = sub_10009BE3C(v59, v24, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v65, v0 + 136, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v24);
    sub_10001885C(v67, v4, v5, v68, v6, v7, v8, v64, v66);
    sub_10001885C(v67, v4, v5, v68, v6, v7, v8, v64, v66);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "End continuity session request received - ending camera session %s",  v22,  0xCu);
    swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    sub_10001885C(v67, v4, v5, v68, v6, v7, v8, v9, v66);
    sub_10001885C(v67, v4, v5, v68, v6, v7, v8, v64, v66);
  }

  uint64_t v49 = v2[16];
  uint64_t v50 = v2[17];
  uint64_t v51 = v2[18];
  uint64_t v52 = v2[19];
  uint64_t v53 = v2[20];
  uint64_t v54 = v2[21];
  uint64_t v55 = v2[22];
  uint64_t v56 = v2[23];
  uint64_t v57 = v2[24];
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  v2[24] = 0LL;
  sub_10001885C(v49, v50, v51, v52, v53, v54, v55, v56, v57);
  sub_10003F110();
  __int128 v58 = (void *)swift_task_alloc(dword_1000CF014);
  *(void *)(v0 + 248) = v58;
  *__int128 v58 = v0;
  v58[1] = sub_1000435D4;
  return sub_10004367C(v0 + 16);
}

uint64_t sub_1000435D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 248LL));
  return swift_task_switch(sub_10004362C, v1, 0LL);
}

uint64_t sub_10004362C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  sub_10001885C( *(void *)(v0 + 176),  *(void *)(v0 + 184),  *(void *)(v0 + 192),  *(void *)(v0 + 200),  *(void *)(v0 + 208),  *(void *)(v0 + 216),  *(void *)(v0 + 224),  *(void *)(v0 + 232),  *(void *)(v0 + 240));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004367C(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for NCProtoEndLagunaSessionEvent(0LL);
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000436DC, v1, 0LL);
}

uint64_t sub_1000436DC()
{
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[21] = sub_10000ADF4(v2, (uint64_t)qword_1000CEFB8);
  sub_1000186F4(v1);
  uint64_t v3 = sub_1000186F4(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (uint64_t *)v0[16];
  if (v6)
  {
    os_log_type_t type = v5;
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    uint64_t v21 = v20;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = *v7;
    unint64_t v9 = v7[1];
    swift_bridgeObjectRetain(v9);
    v0[14] = sub_10009BE3C(v10, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v8 + 12) = 2080;
    sub_1000186F4(v7);
    uint64_t v11 = sub_10003EE20();
    unint64_t v13 = v12;
    sub_100018774(v7);
    v0[15] = sub_10009BE3C(v11, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v13);
    sub_100018774(v7);
    sub_100018774(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, type, "[%s] Ending session %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    sub_100018774((void *)v0[16]);
    sub_100018774(v7);
  }

  uint64_t v14 = (uint64_t *)v0[16];
  NCProtoEndLagunaSessionEvent.init()();
  uint64_t v15 = *v14;
  v0[22] = *v14;
  uint64_t v16 = v14[1];
  v0[23] = v16;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  v0[24] = qword_1000D35C8;
  uint64_t v17 = (void *)swift_task_alloc(dword_1000CFAAC);
  v0[25] = v17;
  void *v17 = v0;
  v17[1] = sub_100043984;
  return sub_100051D2C(10, v0[20], v15, v16, 0);
}

uint64_t sub_100043984()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_100043BD0;
  }
  else {
    uint64_t v4 = sub_1000439E8;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1000439E8()
{
  uint64_t v1 = v0[17];
  (*(void (**)(void, void))(v0[19] + 8LL))(v0[20], v0[18]);
  return swift_task_switch(sub_100043A2C, v1, 0LL);
}

uint64_t sub_100043A2C()
{
  uint64_t v1 = sub_1000186F4(*(void **)(v0 + 128));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = *(void *)(v0 + 176);
    unint64_t v4 = *(void *)(v0 + 184);
    BOOL v6 = *(void **)(v0 + 128);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain(v4);
    *(void *)(v0 + 104) = sub_10009BE3C(v5, v4, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v4);
    sub_100018774(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Successfully ended session.", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    sub_100018774(*(void **)(v0 + 128));
  }

  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v10 = *(void *)(v0 + 128);
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *(_OWORD *)v10;
  __int128 v12 = *(_OWORD *)(v10 + 32);
  __int128 v11 = *(_OWORD *)(v10 + 48);
  __int128 v13 = *(_OWORD *)(v10 + 16);
  *(void *)(v0 + 80) = *(void *)(v10 + 64);
  *(_OWORD *)(v0 + 48) = v12;
  *(_OWORD *)(v0 + 64) = v11;
  *(_OWORD *)(v0 + 32) = v13;
  PassthroughSubject.send(_:)(v0 + 16);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043BD0()
{
  uint64_t v1 = v0[17];
  (*(void (**)(void, void))(v0[19] + 8LL))(v0[20], v0[18]);
  return swift_task_switch(sub_100043C14, v1, 0LL);
}

uint64_t sub_100043C14()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 128);
  sub_1000186F4(v2);
  swift_errorRetain(v1);
  sub_1000186F4(v2);
  uint64_t v3 = swift_errorRetain(v1);
  unint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 176);
    unint64_t v7 = *(void *)(v0 + 184);
    uint64_t v9 = *(void **)(v0 + 128);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    __int128 v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 88) = sub_10009BE3C(v8, v7, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v7);
    sub_100018774(v9);
    sub_100018774(v9);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v6);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 96) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v10 + 14, v10 + 22);
    *__int128 v11 = v12;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Failed to end session due to %@.", (uint8_t *)v10, 0x16u);
    uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v6);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v15 = *(void **)(v0 + 128);
    swift_errorRelease(v14);
    sub_100018774(v15);
    sub_100018774(v15);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 128);
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *(_OWORD *)v17;
  __int128 v19 = *(_OWORD *)(v17 + 32);
  __int128 v18 = *(_OWORD *)(v17 + 48);
  __int128 v20 = *(_OWORD *)(v17 + 16);
  *(void *)(v0 + 80) = *(void *)(v17 + 64);
  *(_OWORD *)(v0 + 48) = v19;
  *(_OWORD *)(v0 + 64) = v18;
  *(_OWORD *)(v0 + 32) = v20;
  PassthroughSubject.send(_:)(v0 + 16);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043E98(uint64_t a1)
{
  uint64_t v3 = sub_10000360C((uint64_t *)&unk_1000CF840);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v116 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v1[16];
  uint64_t v8 = v1[17];
  uint64_t v6 = v1 + 16;
  if (v8)
  {
    uint64_t v9 = v1[18];
    uint64_t v10 = v1[19];
    uint64_t v11 = v1[20];
    uint64_t v12 = v1[21];
    uint64_t v14 = v1[22];
    uint64_t v13 = v1[23];
    uint64_t v15 = v1[24];
    *(void *)&__int128 v121 = v1[16];
    *((void *)&v121 + 1) = v8;
    uint64_t v16 = v9;
    *(void *)&__int128 v122 = v9;
    uint64_t v117 = v15;
    uint64_t v118 = v10;
    BYTE8(v122) = v10 & 1;
    uint64_t v17 = v11;
    *(void *)&__int128 v123 = v11;
    *((void *)&v123 + 1) = v12;
    uint64_t v18 = v12;
    *(void *)&__int128 v124 = v14;
    *((void *)&v124 + 1) = v13;
    uint64_t v114 = v13;
    uint64_t v125 = v15;
    unint64_t v19 = *(void *)(a1 + 24);
    uint64_t v112 = *(uint64_t **)(a1 + 16);
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v112, v19, 0LL);
    if ((result & 1) != 0)
    {
LABEL_5:
      unint64_t v105 = v19;
      uint64_t v108 = a1;
      uint64_t v110 = v1;
      uint64_t v115 = v7;
      uint64_t v20 = qword_1000CD658;
      swift_bridgeObjectRetain(v8);
      uint64_t v111 = v16;
      swift_retain(v16);
      uint64_t v21 = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      uint64_t v22 = v14;
      swift_bridgeObjectRetain(v14);
      uint64_t v23 = v8;
      uint64_t v24 = v114;
      swift_bridgeObjectRetain(v114);
      uint64_t v25 = v117;
      swift_bridgeObjectRetain(v117);
      if (v20 != -1) {
        swift_once(&qword_1000CD658, sub_10003ED68);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      uint64_t v113 = sub_10000ADF4(v26, (uint64_t)qword_1000CEFB8);
      uint64_t v27 = v115;
      uint64_t v28 = v23;
      uint64_t v29 = v111;
      uint64_t v30 = v23;
      uint64_t v31 = v118;
      sub_1000190B0(v115, v28, v111, v118, v21, v18, v22, v24, v25);
      uint64_t v32 = v27;
      uint64_t v33 = v30;
      sub_1000190B0(v32, v30, v29, v31, v21, v18, v22, v24, v25);
      uint64_t v34 = v108;
      uint64_t v35 = swift_retain(v108);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.default.getter();
      int v38 = v37;
      uint64_t v109 = v36;
      BOOL v39 = os_log_type_enabled(v36, v37);
      uint64_t v113 = v22;
      uint64_t v40 = v33;
      uint64_t v41 = v29;
      uint64_t v107 = v40;
      if (v39)
      {
        uint64_t v42 = swift_slowAlloc(22LL, -1LL);
        int v103 = v38;
        uint64_t v43 = v42;
        uint64_t v104 = swift_slowAlloc(64LL, -1LL);
        uint64_t v120 = v104;
        *(_DWORD *)uint64_t v43 = 136315394;
        uint64_t v44 = v40;
        unint64_t v45 = v105;
        swift_bridgeObjectRetain(v105);
        uint64_t v119 = sub_10009BE3C((uint64_t)v112, v45, &v120);
        uint64_t v112 = &v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v43 + 4, v43 + 12);
        swift_bridgeObjectRelease(v45);
        swift_release(v34);
        uint64_t v102 = (uint8_t *)v43;
        *(_WORD *)(v43 + 12) = 2080;
        uint64_t v108 = v43 + 14;
        uint64_t v46 = v44;
        swift_bridgeObjectRetain(v44);
        swift_retain(v41);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v18);
        uint64_t v47 = v113;
        swift_bridgeObjectRetain(v113);
        swift_bridgeObjectRetain(v24);
        uint64_t v101 = v21;
        uint64_t v48 = v117;
        swift_bridgeObjectRetain(v117);
        uint64_t v49 = sub_10003EE20();
        uint64_t v50 = v24;
        uint64_t v51 = v47;
        unint64_t v53 = v52;
        uint64_t v54 = v41;
        uint64_t v55 = v115;
        sub_10001885C(v115, v46, v54, v118, v21, v18, v51, v50, v48);
        uint64_t v56 = sub_10009BE3C(v49, v53, &v120);
        uint64_t v57 = v102;
        uint64_t v119 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v112, v108, v102 + 22);
        swift_bridgeObjectRelease(v53);
        uint64_t v58 = v46;
        uint64_t v59 = v46;
        uint64_t v60 = v111;
        uint64_t v61 = v101;
        sub_10001885C(v55, v59, v111, v118, v101, v18, v51, v50, v48);
        uint64_t v100 = v48;
        uint64_t v62 = v55;
        uint64_t v63 = v60;
        uint64_t v64 = v18;
        sub_10001885C(v62, v58, v60, v118, v61, v18, v51, v50, v100);
        uint64_t v65 = v109;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  (os_log_type_t)v103,  "Clearing camera session because we were asked to reset state for %s: %s",  v57,  0x16u);
        uint64_t v66 = v104;
        swift_arrayDestroy(v104, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);

        uint64_t v67 = v61;
        uint64_t v68 = v64;
      }

      else
      {
        swift_release(v34);
        uint64_t v69 = v117;
        uint64_t v70 = v115;
        uint64_t v71 = v29;
        uint64_t v72 = v118;
        uint64_t v73 = v113;
        sub_10001885C(v115, v40, v71, v118, v21, v18, v113, v24, v117);
        sub_10001885C(v70, v40, v41, v72, v21, v18, v73, v24, v69);

        uint64_t v63 = v41;
        uint64_t v67 = v21;
        uint64_t v68 = v18;
      }

      uint64_t v106 = v68;
      uint64_t v74 = v110;
      uint64_t v75 = v110[16];
      uint64_t v76 = v110[17];
      uint64_t v77 = v110[18];
      uint64_t v78 = v110[19];
      uint64_t v79 = v110[20];
      uint64_t v80 = v110[21];
      uint64_t v81 = v110[22];
      uint64_t v82 = v110[23];
      uint64_t v83 = v110[24];
      *(_OWORD *)uint64_t v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      v6[8] = 0LL;
      sub_10001885C(v75, v76, v77, v78, v79, v80, v81, v82, v83);
      sub_10003F110();
      uint64_t v84 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56LL))(v116, 1LL, 1LL, v84);
      uint64_t v86 = sub_10001CFD8( &qword_1000CF2D0,  v85,  (uint64_t (*)(uint64_t))type metadata accessor for ContinuitySessionClient,  (uint64_t)&unk_1000AA258);
      uint64_t v87 = swift_allocObject(&unk_1000C4518, 112LL, 7LL);
      *(void *)(v87 + swift_weakDestroy(v0 + 16) = v74;
      *(void *)(v87 + 24) = v86;
      *(void *)(v87 + 32) = v74;
      __int128 v88 = v121;
      *(_OWORD *)(v87 + 56) = v122;
      __int128 v89 = v124;
      *(_OWORD *)(v87 + 72) = v123;
      *(_OWORD *)(v87 + 88) = v89;
      *(void *)(v87 + 104) = v125;
      *(_OWORD *)(v87 + 40) = v88;
      swift_retain(v74);
      uint64_t v90 = v117;
      uint64_t v91 = v115;
      uint64_t v92 = v107;
      uint64_t v93 = v118;
      uint64_t v94 = v67;
      uint64_t v95 = v68;
      uint64_t v96 = v67;
      uint64_t v97 = v113;
      uint64_t v98 = v114;
      sub_1000190B0(v115, v107, v63, v118, v94, v95, v113, v114, v117);
      swift_retain(v74);
      uint64_t v99 = sub_10004EC20(v116, (uint64_t)&unk_1000CF2D8, v87);
      swift_release(v99);
      return sub_10001885C(v91, v92, v63, v93, v96, v106, v97, v98, v90);
    }
  }

  return result;
}

uint64_t sub_100044550@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v60 = a4;
  uint64_t v61 = a1;
  uint64_t v6 = type metadata accessor for NCProtoRecentCallsDidChangeEvent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v56 - v11;
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v13, (uint64_t)qword_1000CEFB8);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a3, v6);
  v14(v10, a3, v6);
  uint64_t v15 = swift_retain(a2);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = v59;
    *(_DWORD *)uint64_t v19 = 136315650;
    os_log_t v57 = v16;
    int v58 = v18;
    uint64_t v20 = *(void *)(a2 + 16);
    unint64_t v21 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v21);
    uint64_t v63 = sub_10009BE3C(v20, v21, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v19 + 4, v19 + 12);
    swift_release(a2);
    uint64_t v22 = swift_bridgeObjectRelease(v21);
    *(_WORD *)(v19 + 12) = 2048;
    uint64_t v23 = NCProtoRecentCallsDidChangeEvent.recentCalls.getter(v22);
    uint64_t v24 = *(void *)(v23 + 16);
    swift_bridgeObjectRelease(v23);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v12, v6);
    uint64_t v63 = v24;
    uint64_t v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v19 + 14, v19 + 22);
    *(_WORD *)(v19 + 22) = 2048;
    uint64_t v27 = NCProtoRecentCallsDidChangeEvent.contactInfos.getter(v26);
    uint64_t v28 = *(void *)(v27 + 16);
    swift_bridgeObjectRelease(v27);
    v25(v10, v6);
    uint64_t v63 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v19 + 24, v19 + 32);
    os_log_t v29 = v57;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v58,  "[%s] Received updated recent calls %ld and contacts %ld.",  (uint8_t *)v19,  0x20u);
    uint64_t v30 = v59;
    swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
    v31(v10, v6);
    v31(v12, v6);

    swift_release(a2);
  }

  uint64_t v32 = sub_1000186F4(v61);
  uint64_t v33 = NCProtoRecentCallsDidChangeEvent.recentCalls.getter(v32);
  uint64_t v34 = _swiftEmptyArrayStorage;
  unint64_t v62 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(v33 + 16);
  if (v35)
  {
    uint64_t v59 = a3;
    sub_1000052E0(0LL, &qword_1000CDE68, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v36 = sub_1000052E0(0LL, &qword_1000CF2A8, &OBJC_CLASS___CHRecentCall_ptr);
    swift_bridgeObjectRetain(v33);
    os_log_type_t v37 = (unint64_t *)(v33 + 40);
    do
    {
      uint64_t v38 = *(v37 - 1);
      unint64_t v39 = *v37;
      sub_1000109D4(v38, *v37);
      uint64_t v40 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v36, v38, v39, v36);
      uint64_t v41 = sub_10000BE18(v38, v39);
      if (v40)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
        unint64_t v43 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v42 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v43 >= v42 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1LL);
        }
        uint64_t v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v40);
        specialized Array._endMutation()(v44);
      }

      v37 += 2;
      --v35;
    }

    while (v35);
    swift_bridgeObjectRelease(v33);
    uint64_t v34 = (void *)v62;
  }

  uint64_t v45 = *v61;
  uint64_t v46 = v61[1];
  uint64_t v47 = v61[2];
  int v58 = *((unsigned __int8 *)v61 + 24);
  uint64_t v48 = v61[4];
  uint64_t v49 = v61[5];
  uint64_t v59 = v61[8];
  uint64_t v50 = v61[7];
  uint64_t v63 = v61[6];
  uint64_t v64 = v50;
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRetain(v34);
  uint64_t v51 = sub_10001FC00(&v63);
  uint64_t v52 = NCProtoRecentCallsDidChangeEvent.contactInfos.getter(v51);
  unint64_t v53 = sub_10004CA4C(v52);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRetain(v53);
  sub_10001FC00(&v64);
  swift_bridgeObjectRetain(v46);
  swift_retain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v53);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v48);
  swift_release(v47);
  swift_bridgeObjectRelease(v46);
  uint64_t result = swift_bridgeObjectRelease_n(v34, 2LL);
  uint64_t v55 = v60;
  void *v60 = v45;
  v55[1] = v46;
  v55[2] = v47;
  *((_BYTE *)v55 + 24) = v58;
  v55[4] = v48;
  v55[5] = v49;
  v55[6] = v34;
  v55[7] = v53;
  v55[8] = v59;
  return result;
}

double sub_100044A48@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for NCProtoActiveConversationsDidChangeEvent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v12, (uint64_t)qword_1000CEFB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v13 = swift_retain(a2);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    *(void *)&__int128 v37 = a3;
    uint64_t v18 = v17;
    *(void *)&__int128 v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v36;
    *(_DWORD *)uint64_t v18 = 136315394;
    os_log_t v34 = v14;
    LODWORD(v35) = v16;
    uint64_t v19 = *(void *)(a2 + 16);
    unint64_t v20 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v20);
    uint64_t v38 = sub_10009BE3C(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    swift_release(a2);
    uint64_t v21 = swift_bridgeObjectRelease(v20);
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v22 = NCProtoActiveConversationsDidChangeEvent.activeConversations.getter(v21);
    uint64_t v23 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v38 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 14, v18 + 22);
    os_log_t v24 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  (os_log_type_t)v35,  "[%s] Received updated active conversations of count %ld.",  (uint8_t *)v18,  0x16u);
    uint64_t v25 = v36;
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

    swift_release(a2);
  }

  uint64_t v26 = *a1;
  char v27 = *((_BYTE *)a1 + 24);
  uint64_t v39 = a1[4];
  __int128 v28 = *(_OWORD *)(a1 + 1);
  __int128 v37 = *(_OWORD *)(a1 + 5);
  __int128 v29 = *(_OWORD *)(a1 + 7);
  __int128 v35 = v28;
  __int128 v36 = v29;
  uint64_t v30 = sub_1000186F4(a1);
  uint64_t v31 = NCProtoActiveConversationsDidChangeEvent.activeConversations.getter(v30);
  sub_10001FC00(&v39);
  *(void *)a4 = v26;
  *(_OWORD *)(a4 + 8) = v35;
  *(_BYTE *)(a4 + 24) = v27;
  *(void *)(a4 + 32) = v31;
  *(_OWORD *)(a4 + 40) = v37;
  double result = *(double *)&v36;
  *(_OWORD *)(a4 + 56) = v36;
  return result;
}

double sub_100044D0C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for NCProtoContinuityCallsDidChangeEvent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v12, (uint64_t)qword_1000CEFB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v13 = swift_retain(a2);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    *(void *)&__int128 v37 = a3;
    uint64_t v18 = v17;
    *(void *)&__int128 v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v36;
    *(_DWORD *)uint64_t v18 = 136315394;
    os_log_t v34 = v14;
    int v35 = v16;
    uint64_t v19 = *(void *)(a2 + 16);
    unint64_t v20 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v20);
    uint64_t v38 = sub_10009BE3C(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    swift_release(a2);
    uint64_t v21 = swift_bridgeObjectRelease(v20);
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v22 = NCProtoContinuityCallsDidChangeEvent.continuityCalls.getter(v21);
    uint64_t v23 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v38 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 14, v18 + 22);
    os_log_t v24 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  (os_log_type_t)v35,  "[%s][ContinuityCalls] Received updated continuity calls of count %ld.",  (uint8_t *)v18,  0x16u);
    uint64_t v25 = v36;
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

    swift_release(a2);
  }

  uint64_t v26 = *a1;
  char v27 = *((_BYTE *)a1 + 24);
  uint64_t v28 = a1[8];
  uint64_t v29 = a1[4];
  uint64_t v39 = a1[5];
  __int128 v30 = *((_OWORD *)a1 + 3);
  __int128 v36 = *(_OWORD *)(a1 + 1);
  __int128 v37 = v30;
  uint64_t v31 = sub_1000186F4(a1);
  uint64_t v32 = NCProtoContinuityCallsDidChangeEvent.continuityCalls.getter(v31);
  sub_10001FC00(&v39);
  *(void *)a4 = v26;
  *(_OWORD *)(a4 + 8) = v36;
  *(_BYTE *)(a4 + 24) = v27;
  *(void *)(a4 + 32) = v29;
  *(void *)(a4 + 40) = v32;
  double result = *(double *)&v37;
  *(_OWORD *)(a4 + 48) = v37;
  *(void *)(a4 + 64) = v28;
  return result;
}

__n128 sub_100044FC8@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for NCProtoFavoritesDidChangeEvent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v12, (uint64_t)qword_1000CEFB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v13 = swift_retain(a2);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    *(void *)&__int128 v37 = a3;
    uint64_t v18 = v17;
    v36.n128_u64[0] = swift_slowAlloc(32LL, -1LL);
    unint64_t v39 = v36.n128_u64[0];
    *(_DWORD *)uint64_t v18 = 136315394;
    os_log_t v34 = v14;
    LODWORD(v35) = v16;
    uint64_t v19 = *(void *)(a2 + 16);
    unint64_t v20 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v20);
    uint64_t v38 = sub_10009BE3C(v19, v20, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    swift_release(a2);
    uint64_t v21 = swift_bridgeObjectRelease(v20);
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v22 = NCProtoFavoritesDidChangeEvent.favorites.getter(v21);
    uint64_t v23 = *(void *)(v22 + 16);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v38 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 14, v18 + 22);
    os_log_t v24 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  (os_log_type_t)v35,  "[%s][Favorites] Received updated favorites of count %ld.",  (uint8_t *)v18,  0x16u);
    unint64_t v25 = v36.n128_u64[0];
    swift_arrayDestroy(v36.n128_u64[0], 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

    swift_release(a2);
  }

  uint64_t v26 = *a1;
  char v27 = *((_BYTE *)a1 + 24);
  unint64_t v39 = a1[8];
  __int128 v28 = *(_OWORD *)(a1 + 1);
  __int128 v37 = *((_OWORD *)a1 + 2);
  __n128 v29 = *((__n128 *)a1 + 3);
  __int128 v35 = v28;
  __n128 v36 = v29;
  __int128 v30 = sub_1000186F4(a1);
  uint64_t v31 = NCProtoFavoritesDidChangeEvent.favorites.getter(v30);
  sub_10001FC00(&v39);
  *(void *)a4 = v26;
  *(_OWORD *)(a4 + 8) = v35;
  *(_BYTE *)(a4 + 24) = v27;
  __n128 result = v36;
  *(_OWORD *)(a4 + 32) = v37;
  *(__n128 *)(a4 + 48) = result;
  *(void *)(a4 + 64) = v31;
  return result;
}

uint64_t sub_100045288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  _BYTE v4[24] = v6;
  v4[25] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for IncomingHandoffContext(0LL);
  v4[26] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[27] = v8;
  v4[28] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NCProtoConversationAVMode(0LL);
  v4[29] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[30] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[31] = swift_task_alloc(v11);
  v4[32] = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for CallType(0LL);
  v4[33] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[34] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[35] = swift_task_alloc(v14);
  v4[36] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for NCProtoCallState(0LL);
  v4[37] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[38] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[39] = swift_task_alloc(v17);
  v4[40] = swift_task_alloc(v17);
  v4[41] = swift_task_alloc(v17);
  v4[42] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for NCProtoLagunaConnectionRequest(0LL);
  v4[43] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v4[44] = v19;
  v4[45] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000453FC, v3, 0LL);
}

uint64_t sub_1000453FC()
{
  uint64_t v1 = (id *)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 176);
  uint64_t v3 = v2[16];
  *(void *)(v0 + 368) = v3;
  uint64_t v4 = v2[17];
  *(void *)(v0 + 376) = v4;
  uint64_t v5 = v2[18];
  *(void *)(v0 + 384) = v5;
  uint64_t v6 = v2[19];
  *(void *)(v0 + 392) = v6;
  uint64_t v7 = v2[20];
  *(void *)(v0 + 400) = v7;
  uint64_t v8 = v2[21];
  *(void *)(v0 + 408) = v8;
  uint64_t v9 = v2[22];
  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v9;
  uint64_t v10 = v2[23];
  *(void *)(v0 + 424) = v10;
  uint64_t v11 = v2[24];
  *(void *)(v0 + 432) = v11;
  if (!v4) {
    goto LABEL_56;
  }
  if ((v6 & 1) == 0) {
    goto LABEL_56;
  }
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v12 + 24);
  if (v3 == v13 && v4 == v14) {
    goto LABEL_56;
  }
  uint64_t v110 = v10;
  uint64_t v112 = v9;
  uint64_t v114 = v8;
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v13, v14, 0LL);
  uint64_t v2 = *(void **)(v0 + 176);
  if ((v15 & 1) != 0)
  {
LABEL_56:
    if (v2[17])
    {
      if (qword_1000CD658 != -1)
      {
LABEL_53:
        swift_once(&qword_1000CD658, sub_10003ED68);
        uint64_t v2 = *(void **)(v0 + 176);
      }

      uint64_t v17 = *(void *)(v0 + 192);
      uint64_t v16 = *(void *)(v0 + 200);
      uint64_t v18 = *(void *)(v0 + 184);
      uint64_t v19 = *(void *)(v0 + 168);
      uint64_t v20 = sub_10000ADF4(v18, (uint64_t)qword_1000CEFB8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
      swift_retain_n(v2, 2LL);
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v25 = *(void *)(v0 + 168);
        uint64_t v24 = *(void *)(v0 + 176);
        uint64_t v26 = swift_slowAlloc(22LL, -1LL);
        uint64_t type = swift_slowAlloc(64LL, -1LL);
        v125[0] = type;
        *(_DWORD *)uint64_t v26 = 136315394;
        uint64_t v28 = *(void *)(v25 + 16);
        unint64_t v27 = *(void *)(v25 + 24);
        swift_bridgeObjectRetain(v27);
        *(void *)(v0 + 96) = sub_10009BE3C(v28, v27, v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v26 + 4, v26 + 12);
        swift_release(v25);
        swift_bridgeObjectRelease(v27);
        *(_WORD *)(v26 + 12) = 2080;
        uint64_t v29 = *(void *)(v24 + 136);
        if (v29)
        {
          uint64_t v30 = *(void *)(v0 + 176);
          uint64_t v32 = *(void *)(v30 + 184);
          uint64_t v31 = *(void *)(v30 + 192);
          uint64_t v33 = *(void *)(v30 + 168);
          uint64_t v34 = *(void *)(v30 + 176);
          uint64_t v35 = *(void *)(v30 + 160);
          char v36 = *(_BYTE *)(v30 + 152);
          uint64_t v37 = *(void *)(v30 + 144);
          *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v30 + 128);
          *(void *)(v0 + 24) = v29;
          *(void *)(v0 + 32) = v37;
          *(_BYTE *)(v0 + 40) = v36 & 1;
          *(void *)(v0 + 48) = v35;
          *(void *)(v0 + 56) = v33;
          *(void *)(v0 + 64) = v34;
          *(void *)(v0 + 72) = v32;
          *(void *)(v0 + 80) = v31;
          swift_bridgeObjectRetain(v29);
          swift_retain(v37);
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v32);
          swift_bridgeObjectRetain(v31);
          uint64_t v38 = String.init<A>(reflecting:)(v0 + 16, &type metadata for ContinuitySessionClient.Session);
          unint64_t v40 = v39;
        }

        else
        {
          unint64_t v40 = 0xE300000000000000LL;
          uint64_t v38 = 7104878LL;
        }

        uint64_t v72 = *(void *)(v0 + 192);
        uint64_t v73 = *(void *)(v0 + 200);
        uint64_t v74 = *(void *)(v0 + 176);
        uint64_t v75 = *(void *)(v0 + 184);
        *(void *)(v0 + 88) = sub_10009BE3C(v38, v40, v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v26 + 14, v26 + 22);
        swift_release_n(v74, 2LL);
        swift_bridgeObjectRelease(v40);
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Rejecting laguna connection request from %s because we already have a session active with a different device: %s",  (uint8_t *)v26,  0x16u);
        swift_arrayDestroy(type, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(type, -1LL, -1LL);
        swift_slowDealloc(v26, -1LL, -1LL);

        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v75);
      }

      else
      {
        uint64_t v63 = *(void *)(v0 + 192);
        uint64_t v62 = *(void *)(v0 + 200);
        uint64_t v65 = *(void *)(v0 + 176);
        uint64_t v64 = *(void *)(v0 + 184);
        uint64_t v66 = *(void *)(v0 + 168);

        swift_release_n(v65, 2LL);
        swift_release(v66);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
      }

      id typec = (id)TUMakeNeighborhoodConduitError(20LL, 0LL);
      swift_willThrow(typec);
      goto LABEL_21;
    }

    if (qword_1000CD658 != -1) {
      swift_once(&qword_1000CD658, sub_10003ED68);
    }
    uint64_t v42 = *(void *)(v0 + 352);
    uint64_t v41 = *(void *)(v0 + 360);
    uint64_t v43 = *(void *)(v0 + 344);
    uint64_t v45 = *(void *)(v0 + 160);
    uint64_t v44 = *(void *)(v0 + 168);
    *(void *)(v0 + 456) = sub_10000ADF4(*(void *)(v0 + 184), (uint64_t)qword_1000CEFB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v45, v43);
    uint64_t v46 = swift_retain(v44);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v51 = *(void *)(v0 + 352);
    uint64_t v50 = *(void *)(v0 + 360);
    uint64_t v52 = *(void *)(v0 + 344);
    if (v49)
    {
      uint64_t v53 = *(void *)(v0 + 336);
      uint64_t v111 = *(void *)(v0 + 304);
      uint64_t v115 = *(void *)(v0 + 296);
      os_log_type_t typeb = v48;
      uint64_t v54 = *(void *)(v0 + 168);
      uint64_t v116 = *(void *)(v0 + 352);
      uint64_t v55 = swift_slowAlloc(22LL, -1LL);
      uint64_t v117 = swift_slowAlloc(64LL, -1LL);
      v125[0] = v117;
      *(_DWORD *)uint64_t v55 = 136315394;
      uint64_t v113 = v52;
      uint64_t v57 = *(void *)(v54 + 16);
      unint64_t v56 = *(void *)(v54 + 24);
      swift_bridgeObjectRetain(v56);
      *(void *)(v0 + 120) = sub_10009BE3C(v57, v56, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v55 + 4, v55 + 12);
      swift_release(v54);
      uint64_t v58 = swift_bridgeObjectRelease(v56);
      *(_WORD *)(v55 + 12) = 2080;
      NCProtoLagunaConnectionRequest.callState.getter(v58);
      unint64_t v59 = NCProtoCallState.description.getter();
      unint64_t v61 = v60;
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v53, v115);
      *(void *)(v0 + 128) = sub_10009BE3C(v59, v61, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v61);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v50, v113);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  typeb,  "[LagunaConnection] Received laguna connection request from %s with call state %s.",  (uint8_t *)v55,  0x16u);
      swift_arrayDestroy(v117, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
      swift_release(*(void *)(v0 + 168));
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    }

    uint64_t v67 = *(void *)(v0 + 168);
    *(void *)(v0 + 464) = *(void *)(v67 + 16);
    uint64_t v68 = *(void *)(v67 + 24);
    *(void *)(v0 + 472) = v68;
    uint64_t v69 = dword_1000CDEE4;
    swift_bridgeObjectRetain(v68);
    uint64_t v70 = (void *)swift_task_alloc(v69);
    *(void *)(v0 + 480) = v70;
    *uint64_t v70 = v0;
    v70[1] = sub_100046490;
    return sub_10000E9FC();
  }

  else
  {
    uint64_t v85 = (void *)v2[27];
    swift_bridgeObjectRetain(v4);
    uint64_t v109 = v5;
    swift_retain(v5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v11);
    id v86 = [v85 activeConversations];
    uint64_t v87 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
    uint64_t v88 = sub_10004D3D4( (unint64_t *)&qword_1000CDE50,  (unint64_t *)&unk_1000CE790,  &OBJC_CLASS___TUConversation_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v119 = v87;
    uint64_t v89 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v86, v87, v88);

    if ((v89 & 0xC000000000000001LL) != 0)
    {
      uint64_t v90 = (uint64_t)&_swiftEmptySetSingleton;
      v125[0] = (uint64_t)&_swiftEmptySetSingleton;
      if (v89 < 0) {
        uint64_t v91 = v89;
      }
      else {
        uint64_t v91 = v89 & 0xFFFFFFFFFFFFFF8LL;
      }
      *(void *)os_log_type_t typea = __CocoaSet.makeIterator()(v91);
      for (uint64_t i = __CocoaSet.Iterator.next()(*(void *)typea); i; uint64_t i = __CocoaSet.Iterator.next()(v93))
      {
        *(void *)(v0 + 144) = i;
        swift_dynamicCast(v0 + 136, v0 + 144, (char *)&type metadata for Swift.AnyObject + 8, v119, 7LL);
        id v99 = *v1;
        if ([*v1 state] == (id)2 || objc_msgSend(v99, "state") == (id)3)
        {
          id v100 = *v1;
          unint64_t v101 = *(void *)(v90 + 16);
          if (*(void *)(v90 + 24) <= v101)
          {
            sub_10009125C(v101 + 1);
            uint64_t v90 = v125[0];
          }

          Swift::Int v93 = NSObject._rawHashValue(seed:)(*(void *)(v90 + 40));
          uint64_t v94 = v90 + 56;
          uint64_t v95 = -1LL << *(_BYTE *)(v90 + 32);
          unint64_t v96 = v93 & ~v95;
          unint64_t v97 = v96 >> 6;
          if (((-1LL << v96) & ~*(void *)(v90 + 56 + 8 * (v96 >> 6))) != 0)
          {
            unint64_t v98 = __clz(__rbit64((-1LL << v96) & ~*(void *)(v90 + 56 + 8 * (v96 >> 6)))) | v96 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v102 = 0;
            unint64_t v103 = (unint64_t)(63 - v95) >> 6;
            do
            {
              if (++v97 == v103 && (v102 & 1) != 0)
              {
                __break(1u);
                goto LABEL_53;
              }

              BOOL v104 = v97 == v103;
              if (v97 == v103) {
                unint64_t v97 = 0LL;
              }
              v102 |= v104;
              uint64_t v105 = *(void *)(v94 + 8 * v97);
            }

            while (v105 == -1);
            unint64_t v98 = __clz(__rbit64(~v105)) + (v97 << 6);
          }

          *(void *)(v94 + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v98;
          *(void *)(*(void *)(v90 + 48) + 8 * v98) = v100;
          ++*(void *)(v90 + 16);
        }

        else
        {
        }
      }

      swift_release(*(void *)typea);
    }

    else
    {
      uint64_t v90 = sub_10004CCC0(v89);
    }

    if ((v90 & 0xC000000000000001LL) != 0) {
      uint64_t v106 = __CocoaSet.count.getter(v90);
    }
    else {
      uint64_t v106 = *(void *)(v90 + 16);
    }
    swift_release(v90);
    if (v106)
    {
      id typed = (id)TUMakeNeighborhoodConduitError(20LL, 0LL);
      swift_willThrow(typed);
      sub_10001885C(v3, v4, v109, v6, v7, v114, v112, v110, v11);
LABEL_21:
      uint64_t v77 = *(void *)(v0 + 328);
      uint64_t v76 = *(void *)(v0 + 336);
      uint64_t v79 = *(void *)(v0 + 312);
      uint64_t v78 = *(void *)(v0 + 320);
      uint64_t v81 = *(void *)(v0 + 280);
      uint64_t v80 = *(void *)(v0 + 288);
      uint64_t v83 = *(void *)(v0 + 248);
      uint64_t v82 = *(void *)(v0 + 256);
      uint64_t v84 = *(void *)(v0 + 224);
      uint64_t v118 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 360));
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v118);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    uint64_t v107 = (void *)swift_task_alloc(dword_1000CF024);
    *(void *)(v0 + 440) = v107;
    *uint64_t v107 = v0;
    v107[1] = sub_100045DFC;
    uint64_t v108 = *(void *)(v0 + 176);
    v107[2] = v108;
    return swift_task_switch(sub_100047DF0, v108, 0LL);
  }

uint64_t sub_100045DFC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 440);
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000477DC;
  }
  else {
    uint64_t v4 = sub_100045E60;
  }
  return swift_task_switch(v4, *(void *)(v2 + 176), 0LL);
}

uint64_t sub_100045E60()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (*(void *)(v1 + 136))
  {
    if (qword_1000CD658 != -1)
    {
      swift_once(&qword_1000CD658, sub_10003ED68);
      uint64_t v1 = *(void *)(v0 + 176);
    }

    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v2 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = sub_10000ADF4(v4, (uint64_t)qword_1000CEFB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
    swift_retain_n(v1, 2LL);
    uint64_t v7 = swift_retain(v5);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v10 = *(void *)(v0 + 176);
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v76 = swift_slowAlloc(64LL, -1LL);
      v79[0] = v76;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v14 = *(void *)(v11 + 16);
      unint64_t v13 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain(v13);
      *(void *)(v0 + 96) = sub_10009BE3C(v14, v13, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v12 + 4, v12 + 12);
      swift_release(v11);
      swift_bridgeObjectRelease(v13);
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v15 = *(void *)(v10 + 136);
      if (v15)
      {
        uint64_t v16 = *(void *)(v0 + 176);
        uint64_t v18 = *(void *)(v16 + 184);
        uint64_t v17 = *(void *)(v16 + 192);
        uint64_t v19 = *(void *)(v16 + 168);
        uint64_t v20 = *(void *)(v16 + 176);
        uint64_t v21 = *(void *)(v16 + 160);
        char v22 = *(_BYTE *)(v16 + 152);
        uint64_t v23 = *(void *)(v16 + 144);
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v16 + 128);
        *(void *)(v0 + 24) = v15;
        *(void *)(v0 + 32) = v23;
        *(_BYTE *)(v0 + 40) = v22 & 1;
        *(void *)(v0 + 48) = v21;
        *(void *)(v0 + 56) = v19;
        *(void *)(v0 + 64) = v20;
        *(void *)(v0 + 72) = v18;
        *(void *)(v0 + 80) = v17;
        swift_bridgeObjectRetain(v15);
        swift_retain(v23);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v17);
        uint64_t v24 = String.init<A>(reflecting:)(v0 + 16, &type metadata for ContinuitySessionClient.Session);
        unint64_t v26 = v25;
      }

      else
      {
        unint64_t v26 = 0xE300000000000000LL;
        uint64_t v24 = 7104878LL;
      }

      uint64_t v58 = *(void *)(v0 + 192);
      uint64_t v59 = *(void *)(v0 + 200);
      uint64_t v60 = *(void *)(v0 + 176);
      uint64_t v61 = *(void *)(v0 + 184);
      *(void *)(v0 + 88) = sub_10009BE3C(v24, v26, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v12 + 14, v12 + 22);
      swift_release_n(v60, 2LL);
      swift_bridgeObjectRelease(v26);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Rejecting laguna connection request from %s because we already have a session active with a different device: %s",  (uint8_t *)v12,  0x16u);
      swift_arrayDestroy(v76, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v61);
    }

    else
    {
      uint64_t v49 = *(void *)(v0 + 192);
      uint64_t v48 = *(void *)(v0 + 200);
      uint64_t v51 = *(void *)(v0 + 176);
      uint64_t v50 = *(void *)(v0 + 184);
      uint64_t v52 = *(void *)(v0 + 168);

      swift_release_n(v51, 2LL);
      swift_release(v52);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    }

    id v62 = (id)TUMakeNeighborhoodConduitError(20LL, 0LL);
    swift_willThrow(v62);
    uint64_t v64 = *(void *)(v0 + 328);
    uint64_t v63 = *(void *)(v0 + 336);
    uint64_t v66 = *(void *)(v0 + 312);
    uint64_t v65 = *(void *)(v0 + 320);
    uint64_t v68 = *(void *)(v0 + 280);
    uint64_t v67 = *(void *)(v0 + 288);
    uint64_t v70 = *(void *)(v0 + 248);
    uint64_t v69 = *(void *)(v0 + 256);
    *(void *)uint64_t type = *(void *)(v0 + 224);
    uint64_t v78 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 360));
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(*(void *)type);
    swift_task_dealloc(v78);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (qword_1000CD658 != -1) {
      swift_once(&qword_1000CD658, sub_10003ED68);
    }
    uint64_t v28 = *(void *)(v0 + 352);
    uint64_t v27 = *(void *)(v0 + 360);
    uint64_t v29 = *(void *)(v0 + 344);
    uint64_t v31 = *(void *)(v0 + 160);
    uint64_t v30 = *(void *)(v0 + 168);
    *(void *)(v0 + 456) = sub_10000ADF4(*(void *)(v0 + 184), (uint64_t)qword_1000CEFB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v31, v29);
    uint64_t v32 = swift_retain(v30);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v37 = *(void *)(v0 + 352);
    uint64_t v36 = *(void *)(v0 + 360);
    uint64_t v38 = *(void *)(v0 + 344);
    if (v35)
    {
      uint64_t v39 = *(void *)(v0 + 336);
      uint64_t v71 = *(void *)(v0 + 304);
      uint64_t v72 = *(void *)(v0 + 296);
      uint64_t v40 = *(void *)(v0 + 168);
      uint64_t v74 = *(void *)(v0 + 352);
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v77 = swift_slowAlloc(64LL, -1LL);
      v79[0] = v77;
      *(_DWORD *)uint64_t v41 = 136315394;
      uint64_t v73 = v38;
      uint64_t v42 = *(void *)(v40 + 16);
      unint64_t v43 = *(void *)(v40 + 24);
      swift_bridgeObjectRetain(v43);
      *(void *)(v0 + 120) = sub_10009BE3C(v42, v43, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v41 + 4, v41 + 12);
      swift_release(v40);
      uint64_t v44 = swift_bridgeObjectRelease(v43);
      *(_WORD *)(v41 + 12) = 2080;
      NCProtoLagunaConnectionRequest.callState.getter(v44);
      unint64_t v45 = NCProtoCallState.description.getter();
      unint64_t v47 = v46;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v39, v72);
      *(void *)(v0 + 128) = sub_10009BE3C(v45, v47, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease(v47);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v36, v73);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "[LagunaConnection] Received laguna connection request from %s with call state %s.",  (uint8_t *)v41,  0x16u);
      swift_arrayDestroy(v77, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      swift_release(*(void *)(v0 + 168));
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    }

    uint64_t v53 = *(void *)(v0 + 168);
    *(void *)(v0 + 464) = *(void *)(v53 + 16);
    uint64_t v54 = *(void *)(v53 + 24);
    *(void *)(v0 + 472) = v54;
    uint64_t v55 = dword_1000CDEE4;
    swift_bridgeObjectRetain(v54);
    unint64_t v56 = (void *)swift_task_alloc(v55);
    *(void *)(v0 + 480) = v56;
    *unint64_t v56 = v0;
    v56[1] = sub_100046490;
    return sub_10000E9FC();
  }

uint64_t sub_100046490(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 480LL);
  v3[61] = a1;
  v3[62] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1000478BC;
  }
  else {
    uint64_t v5 = sub_1000464FC;
  }
  return swift_task_switch(v5, v3[22], 0LL);
}

uint64_t sub_1000464FC()
{
  uint64_t v1 = v0[59];
  uint64_t v2 = *(void **)(v0[22] + 256LL);
  v0[63] = v2;
  swift_bridgeObjectRetain(v1);
  id v3 = [v2 dedicatedDevice];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 idsDeviceIdentifier];
    uint64_t v6 = v0[59];
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v0[58];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v11 = v10;

      if (v8 == v9 && v6 == v11) {
        char v104 = 1;
      }
      else {
        char v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v0[58], v0[59], v9, v11, 0LL);
      }
      uint64_t v6 = v0[59];
      swift_bridgeObjectRelease(v11);
    }

    else
    {

      char v104 = 0;
    }
  }

  else
  {
    char v104 = 0;
    uint64_t v6 = v0[59];
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v13 = v0[61];
  uint64_t v14 = v0[59];
  unint64_t v15 = sub_100003C1C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = swift_retain(v13);
  uint64_t v17 = NCProtoLagunaConnectionRequest.activeConversations.getter(v16);
  v0[64] = v17;
  uint64_t v18 = swift_bridgeObjectRetain(v17);
  uint64_t v19 = (void *)NCProtoLagunaConnectionRequest.recentCalls.getter(v18);
  uint64_t v20 = v19[2];
  uint64_t v103 = v17;
  if (v20)
  {
    unint64_t v100 = v15;
    sub_1000052E0(0LL, &qword_1000CDE68, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v21 = sub_1000052E0(0LL, &qword_1000CF2A8, &OBJC_CLASS___CHRecentCall_ptr);
    uint64_t v22 = v0[62];
    uint64_t v23 = v19[4];
    unint64_t v24 = v19[5];
    swift_bridgeObjectRetain(v19);
    sub_1000109D4(v23, v24);
    uint64_t v25 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v21, v23, v24, v21);
    if (v22)
    {
      swift_errorRelease(v22);
      sub_10000BE18(v23, v24);
    }

    else
    {
      uint64_t v26 = v25;
      uint64_t v27 = sub_10000BE18(v23, v24);
      if (v26)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        unint64_t v29 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v28 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v29 >= v28 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1LL);
        }
        uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
        specialized Array._endMutation()(v30);
      }
    }

    uint64_t v31 = v20 - 1;
    if (v31)
    {
      uint64_t v74 = v19 + 7;
      do
      {
        uint64_t v75 = *(v74 - 1);
        unint64_t v76 = *v74;
        sub_1000109D4(v75, *v74);
        uint64_t v77 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v21, v75, v76, v21);
        uint64_t v78 = sub_10000BE18(v75, v76);
        if (v77)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
          unint64_t v80 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v79 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v80 >= v79 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
          }
          uint64_t v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
          specialized Array._endMutation()(v81);
        }

        v74 += 2;
        --v31;
      }

      while (v31);
    }

    swift_bridgeObjectRelease(v19);
    unint64_t v15 = v100;
  }

  v0[65] = _swiftEmptyArrayStorage;
  uint64_t v32 = v0[61];
  uint64_t v105 = v0[59];
  uint64_t v90 = v0[58];
  uint64_t v92 = v0[41];
  uint64_t v94 = v0[38];
  uint64_t v95 = v0[37];
  unint64_t v101 = v0[34];
  uint64_t v93 = v0[32];
  uint64_t v91 = v0[30];
  uint64_t v96 = v0[29];
  uint64_t v98 = v0[31];
  uint64_t v33 = (void *)v0[22];
  swift_bridgeObjectRelease(v19);
  uint64_t v34 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  uint64_t v35 = NCProtoLagunaConnectionRequest.contactInfos.getter(v34);
  uint64_t v36 = sub_10004CA4C(v35);
  v0[66] = v36;
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRetain(v36);
  uint64_t v37 = swift_bridgeObjectRelease(v15);
  uint64_t v38 = NCProtoLagunaConnectionRequest.favorites.getter(v37);
  v0[67] = v38;
  uint64_t v39 = swift_bridgeObjectRetain(v38);
  uint64_t v40 = NCProtoLagunaConnectionRequest.continuityCalls.getter(v39);
  v0[68] = v40;
  uint64_t v88 = v33[17];
  uint64_t v89 = v33[16];
  uint64_t v86 = v33[19];
  uint64_t v87 = v33[18];
  uint64_t v84 = v33[21];
  uint64_t v85 = v33[20];
  uint64_t v41 = v33[24];
  uint64_t v82 = v33[23];
  uint64_t v83 = v33[22];
  v33[16] = v90;
  v33[17] = v105;
  v33[18] = v32;
  v33[19] = v104 & 1;
  v33[20] = v103;
  v33[21] = v40;
  v33[22] = _swiftEmptyArrayStorage;
  v33[23] = v36;
  v33[24] = v38;
  swift_bridgeObjectRetain(v105);
  swift_retain(v32);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain_n(v40, 2LL);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v38);
  sub_10001885C(v89, v88, v87, v86, v85, v84, v83, v82, v41);
  sub_10003F110();
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v103);
  swift_release(v32);
  uint64_t v42 = swift_bridgeObjectRelease(v105);
  uint64_t v43 = NCProtoLagunaConnectionRequest.callState.getter(v42);
  NCProtoCallState.avMode.getter(v43);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
  v44(v92, v95);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v98, v93, v96);
  int v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 88))(v98, v96);
  unint64_t v46 = *(void (**)(uint64_t, void, uint64_t))(v101 + 104);
  uint64_t v47 = v0[36];
  uint64_t v48 = v0[33];
  uint64_t v106 = (uint64_t (*)(uint64_t, uint64_t))v44;
  if (v45 == enum case for NCProtoConversationAVMode.audio(_:))
  {
    v46(v47, enum case for CallType.audio(_:), v48);
    uint64_t v52 = (*(uint64_t (**)(void, void))(v91 + 8))(v0[32], v0[29]);
  }

  else
  {
    uint64_t v49 = v0[31];
    uint64_t v50 = v0[29];
    v46(v47, enum case for CallType.video(_:), v48);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v51(v49, v50);
    uint64_t v52 = ((uint64_t (*)(void, void))v51)(v0[32], v0[29]);
  }

  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "[LagunaConnection] Opening FaceTime...", v55, 2u);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  uint64_t v56 = v0[42];
  uint64_t v57 = v0[39];
  uint64_t v58 = v0[40];
  uint64_t v59 = v0[37];
  uint64_t v61 = v0[34];
  uint64_t v60 = v0[35];
  uint64_t v97 = v0[33];
  uint64_t v99 = v0[36];

  uint64_t v63 = NCProtoLagunaConnectionRequest.callState.getter(v62);
  char v102 = NCProtoCallState.isAudioEnabled.getter(v63);
  uint64_t v64 = v106(v56, v59);
  uint64_t v65 = NCProtoLagunaConnectionRequest.callState.getter(v64);
  LOBYTE(v56) = NCProtoCallState.isVideoEnabled.getter(v65);
  v106(v58, v59);
  uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v60, v99, v97);
  uint64_t v67 = NCProtoLagunaConnectionRequest.callState.getter(v66);
  char v68 = NCProtoCallState.isCaptioningEnabled.getter(v67);
  v106(v57, v59);
  IncomingHandoffContext.init(isAudioEnabled:isVideoEnabled:callType:isCaptioningEnabled:skipPreviewBulletin:)( v102 & 1,  v56 & 1,  v60,  v68 & 1,  v104 & 1);
  uint64_t v69 = sub_10000360C((uint64_t *)&unk_1000CFE20);
  uint64_t v70 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v71 = swift_allocObject( v69,  ((*(unsigned __int8 *)(*(void *)(v70 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v70 - 8) + 80LL))
        + *(void *)(*(void *)(v70 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v70 - 8) + 80LL) | 7LL);
  v0[69] = v71;
  *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = xmmword_1000A96A0;
  IncomingHandoffContext.queryItem.getter();
  uint64_t v107 = (char *)&dword_1000CEFA0 + dword_1000CEFA0;
  uint64_t v72 = (void *)swift_task_alloc(unk_1000CEFA4);
  v0[70] = v72;
  *uint64_t v72 = v0;
  v72[1] = sub_100046C70;
  return ((uint64_t (*)(uint64_t, void))v107)(v71, 0LL);
}

uint64_t sub_100046C70()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 560);
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 552);
  uint64_t v5 = *(void *)(v2 + 176);
  swift_bridgeObjectRelease(v4);
  if (v0) {
    uint64_t v6 = sub_100046E1C;
  }
  else {
    uint64_t v6 = sub_100046CE0;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100046CE0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[LagunaConnection] Connecting camera...", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = (void *)v1[63];
  uint64_t v7 = v1[21];
  uint64_t v6 = v1[22];

  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 enterDiscoverySessionWithDevice:v8 reason:v9];

  uint64_t v10 = swift_allocObject(&unk_1000C44F0, 32LL, 7LL);
  v1[72] = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v10 + 24) = v7;
  swift_retain(v7);
  swift_retain(v6);
  return swift_task_switch(sub_100047100, 0LL, 0LL);
}

uint64_t sub_100046E1C()
{
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v6 = v1;
  v5(v2, v4);
  swift_errorRetain(v1);
  uint64_t v7 = swift_errorRetain(v1);
  NSString v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    swift_errorRetain(v6);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 104) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[LagunaConnection] Failed to establish laguna connection due to %@.",  v10,  0xCu);
    uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void *)(v0 + 536);
  uint64_t v16 = *(void *)(v0 + 528);
  uint64_t v17 = *(void *)(v0 + 520);
  uint64_t v18 = *(void **)(v0 + 504);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v42 = *(void *)(v0 + 488);
  uint64_t v44 = *(void *)(v0 + 472);
  uint64_t v20 = *(void **)(v0 + 176);

  uint64_t v21 = v20[16];
  uint64_t v22 = v20[17];
  uint64_t v23 = v20[18];
  uint64_t v24 = v20[19];
  uint64_t v25 = v20[20];
  uint64_t v26 = v20[21];
  uint64_t v27 = v20[22];
  uint64_t v28 = v20[23];
  uint64_t v29 = v20[24];
  *((_OWORD *)v20 + 8) = 0u;
  *((_OWORD *)v20 + 9) = 0u;
  *((_OWORD *)v20 + 10) = 0u;
  *((_OWORD *)v20 + 11) = 0u;
  v20[24] = 0LL;
  sub_10001885C(v21, v22, v23, v24, v25, v26, v27, v28, v29);
  sub_10003F110();
  NSString v30 = String._bridgeToObjectiveC()();
  [v18 exitDiscoverySessionWithReason:v30];

  swift_willThrow(v31);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v19);
  swift_release(v42);
  swift_bridgeObjectRelease(v44);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v35 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 320);
  uint64_t v37 = *(void *)(v0 + 280);
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v39 = *(void *)(v0 + 248);
  uint64_t v38 = *(void *)(v0 + 256);
  uint64_t v40 = *(void *)(v0 + 224);
  uint64_t v43 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047100()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = swift_task_alloc(48LL);
  v0[73] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = &unk_1000CF2B8;
  *(void *)(v2 + 24) = v1;
  *(_OWORD *)(v2 + 32) = xmmword_1000AA1A0;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[74] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000471A0;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)( v3,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1000CF2C0,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000471A0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 592LL);
  *(void *)(*(void *)v1 + 60swift_beginAccess(v0 + 56, v9, 0LL, 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100047220;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v2[73];
    uint64_t v7 = v2[72];
    uint64_t v8 = v2[22];
    swift_release(v7);
    swift_task_dealloc(v6);
    uint64_t v4 = sub_100047550;
    uint64_t v5 = v8;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_100047220()
{
  uint64_t v1 = v0[73];
  uint64_t v2 = v0[22];
  swift_release(v0[72]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004726C, v2, 0LL);
}

uint64_t sub_10004726C()
{
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v6 = v1;
  v5(v2, v4);
  swift_errorRetain(v1);
  uint64_t v7 = swift_errorRetain(v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    swift_errorRetain(v6);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 104) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[LagunaConnection] Failed to establish laguna connection due to %@.",  v10,  0xCu);
    uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void *)(v0 + 536);
  uint64_t v16 = *(void *)(v0 + 528);
  uint64_t v17 = *(void *)(v0 + 520);
  uint64_t v18 = *(void **)(v0 + 504);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v42 = *(void *)(v0 + 488);
  uint64_t v44 = *(void *)(v0 + 472);
  uint64_t v20 = *(void **)(v0 + 176);

  uint64_t v21 = v20[16];
  uint64_t v22 = v20[17];
  uint64_t v23 = v20[18];
  uint64_t v24 = v20[19];
  uint64_t v25 = v20[20];
  uint64_t v26 = v20[21];
  uint64_t v27 = v20[22];
  uint64_t v28 = v20[23];
  uint64_t v29 = v20[24];
  *((_OWORD *)v20 + 8) = 0u;
  *((_OWORD *)v20 + 9) = 0u;
  *((_OWORD *)v20 + 10) = 0u;
  *((_OWORD *)v20 + 11) = 0u;
  v20[24] = 0LL;
  sub_10001885C(v21, v22, v23, v24, v25, v26, v27, v28, v29);
  sub_10003F110();
  NSString v30 = String._bridgeToObjectiveC()();
  [v18 exitDiscoverySessionWithReason:v30];

  swift_willThrow(v31);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v19);
  swift_release(v42);
  swift_bridgeObjectRelease(v44);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v35 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 320);
  uint64_t v37 = *(void *)(v0 + 280);
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v39 = *(void *)(v0 + 248);
  uint64_t v38 = *(void *)(v0 + 256);
  uint64_t v40 = *(void *)(v0 + 224);
  uint64_t v43 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047550()
{
  uint64_t v1 = swift_retain(*(void *)(v0 + 168));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = *(void *)(v0 + 464);
    unint64_t v4 = *(void *)(v0 + 472);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain(v4);
    *(void *)(v0 + 112) = sub_10009BE3C(v5, v4, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[LagunaConnection] Successfully set up continuity session with %s.",  v7,  0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 168));
  }

  uint64_t v21 = *(void *)(v0 + 528);
  uint64_t v19 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v9 = *(void *)(v0 + 512);
  uint64_t v10 = *(void *)(v0 + 488);
  uint64_t v11 = *(void *)(v0 + 472);
  uint64_t v22 = *(void *)(v0 + 360);
  uint64_t v23 = *(void *)(v0 + 536);
  uint64_t v24 = *(void *)(v0 + 336);
  uint64_t v25 = *(void *)(v0 + 328);
  uint64_t v26 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v0 + 288);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v28 = *(void *)(v0 + 280);
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 248);
  uint64_t v16 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v31 = *(void *)(v0 + 200);
  NCProtoLagunaConnectionResponse.init()();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_bridgeObjectRelease(v11);
  swift_release(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v12);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v15);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000477DC()
{
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000478BC()
{
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = sub_10000360C(&qword_1000CF218);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000479EC, 0LL, 0LL);
}

uint64_t sub_1000479EC()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = *(void *)(v0[3] + 224LL);
  v0[2] = v5;
  swift_retain(v5);
  swift_retain(v4);
  uint64_t v6 = sub_10000360C(&qword_1000CF220);
  uint64_t v7 = sub_100018F4C( &qword_1000CF228,  &qword_1000CF220,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.filter(_:)(sub_10004D7FC, v4, v6, v7);
  swift_release(v4);
  swift_release(v0[2]);
  uint64_t v8 = sub_100018F4C( &qword_1000CF230,  &qword_1000CF218,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  uint64_t v9 = Publisher.eraseToAnyPublisher()(v3, v8);
  v0[8] = v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&dword_1000CF238 + dword_1000CF238);
  uint64_t v10 = (void *)swift_task_alloc(unk_1000CF23C);
  v0[9] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100047B2C;
  return v12(v9);
}

uint64_t sub_100047B2C(void *a1)
{
  uint64_t v4 = *(void *)(*v2 + 72);
  uint64_t v5 = *v2;
  *(void *)(v5 + 80) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_100047BC0, 0LL, 0LL);
  }
  uint64_t v7 = *(void *)(v5 + 56);
  swift_release(*(void *)(v5 + 64));

  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100047BC0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100047BFC(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CE420);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v11);
    id v13 = [v10 continuityDeviceUniqueID];
    if (v13)
    {
      uint64_t v14 = v13;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

      uint64_t v15 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v7, 0LL, 1LL, v15);
    }

    else
    {
      uint64_t v15 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v7, 1LL, 1LL, v15);
    }

    sub_1000192A4((uint64_t)v7, (uint64_t)v9, (uint64_t *)&unk_1000CE420);
    type metadata accessor for UUID(0LL);
    uint64_t v17 = *(void *)(v15 - 8);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1LL, v15);
    if ((_DWORD)v18 == 1)
    {
      sub_10000BFC8((uint64_t)v9, (uint64_t *)&unk_1000CE420);
      char v16 = 0;
    }

    else
    {
      uint64_t v19 = UUID.uuidString.getter(v18);
      uint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v15);
      if (v12 == v19 && v11 == v21)
      {
        swift_bridgeObjectRelease(v11);
        char v16 = 1;
      }

      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v19, v21, 0LL);
        swift_bridgeObjectRelease(v11);
        uint64_t v11 = v21;
      }
    }

    swift_bridgeObjectRelease(v11);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_100047DD8()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_100047DF0, v0, 0LL);
}

uint64_t sub_100047DF0()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 16) + 256LL);
  id v2 = [v1 peerDeviceIdentifier];
  if (!v2) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v6 = v5;

  swift_bridgeObjectRetain(v6);
  id v7 = [v1 dedicatedDevice];
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  id v9 = [v7 idsDeviceIdentifier];
  if (!v9)
  {

LABEL_11:
    swift_bridgeObjectRelease_n(v6, 2LL);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v13 = v12;

  if (v4 != v11 || v6 != v13)
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v11, v13, 0LL);

    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v6, 2LL);
    if ((v15 & 1) != 0) {
      goto LABEL_14;
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_bridgeObjectRelease_n(v6, 3LL);
LABEL_14:
  if (qword_1000CD658 != -1) {
    swift_once(&qword_1000CD658, sub_10003ED68);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_10000ADF4(v17, (uint64_t)qword_1000CEFB8);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Tearing down dedicated session for incoming handoff", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = *(void *)(v0 + 16);

  NSString v23 = String._bridgeToObjectiveC()();
  [v1 exitDiscoverySessionWithReason:v23];

  swift_retain(v22);
  return swift_task_switch(sub_100048044, 0LL, 0LL);
}

uint64_t sub_100048044()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc(48LL);
  v0[3] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = &unk_1000CF1D8;
  *(void *)(v2 + 24) = v1;
  *(_OWORD *)(v2 + 32) = xmmword_1000AA1B0;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000480E4;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)( v3,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1000CF1E8,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000480E4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10004816C;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v8 = v2 + 16;
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v7 = *(void *)(v8 + 8);
    swift_release(v6);
    swift_task_dealloc(v7);
    uint64_t v4 = sub_100048160;
    uint64_t v5 = v6;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_100048160()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004816C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc(*(void *)(v0 + 24));
  return swift_task_switch(sub_1000481A8, v1, 0LL);
}

uint64_t sub_1000481A8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000481DC(uint64_t a1, uint64_t a2)
{
  v2[3] = a2;
  uint64_t v3 = sub_10000360C(&qword_1000CF218);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100048240, 0LL, 0LL);
}

uint64_t sub_100048240()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(v0[3] + 224LL);
  v0[2] = v4;
  swift_retain(v4);
  uint64_t v5 = sub_10000360C(&qword_1000CF220);
  uint64_t v6 = sub_100018F4C( &qword_1000CF228,  &qword_1000CF220,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.filter(_:)(sub_100048440, 0LL, v5, v6);
  swift_release(v4);
  uint64_t v7 = sub_100018F4C( &qword_1000CF230,  &qword_1000CF218,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()(v3, v7);
  v0[7] = v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_1000CF238 + dword_1000CF238);
  id v9 = (void *)swift_task_alloc(unk_1000CF23C);
  v0[8] = v9;
  void *v9 = v0;
  v9[1] = sub_100048370;
  return v11(v8);
}

uint64_t sub_100048370(void *a1)
{
  uint64_t v4 = *(void *)(*v2 + 64);
  uint64_t v5 = *v2;
  *(void *)(v5 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_100048404, 0LL, 0LL);
  }
  uint64_t v7 = *(void *)(v5 + 48);
  swift_release(*(void *)(v5 + 56));

  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100048404()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_100048440(void *a1)
{
  return *a1 == 0LL;
}

uint64_t sub_100048450()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 232);

  swift_release(v1);
  swift_release(*(void *)(v0 + 248));

  swift_release(*(void *)(v0 + 264));
  swift_bridgeObjectRelease(*(void *)(v0 + 272));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000484F8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ContinuitySessionClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService23ContinuitySessionClient);
}

uint64_t destroy for ContinuitySessionClient.Session(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for ContinuitySessionClient.Session(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for ContinuitySessionClient.Session(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for ContinuitySessionClient.Session(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t assignWithTake for ContinuitySessionClient.Session(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContinuitySessionClient.Session(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuitySessionClient.Session(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ContinuitySessionClient.Session()
{
  return &type metadata for ContinuitySessionClient.Session;
}

uint64_t sub_100048858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[4] = a2;
  uint64_t v7 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v6[9] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000488BC, 0LL, 0LL);
}

uint64_t sub_1000488BC()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v1, 1LL, 1LL, v6);
  uint64_t v8 = (void *)swift_allocObject(&unk_1000C43D8, 48LL, 7LL);
  _OWORD v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = v5;
  v8[5] = v3;
  swift_retain(v3);
  sub_100049398(v1, (uint64_t)&unk_1000CF1F8, (uint64_t)v8);
  sub_10000BFC8(v1, (uint64_t *)&unk_1000CF840);
  v7(v1, 1LL, 1LL, v6);
  uint64_t v9 = (void *)swift_allocObject(&unk_1000C4400, 48LL, 7LL);
  void v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = v4;
  v9[5] = v2;
  sub_100049398(v1, (uint64_t)&unk_1000CF208, (uint64_t)v9);
  sub_10000BFC8(v1, (uint64_t *)&unk_1000CF840);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
  v0[10] = v10;
  uint64_t v11 = sub_10000360C(&qword_1000CF210);
  *uint64_t v10 = v0;
  v10[1] = sub_100048A1C;
  return ThrowingTaskGroup.nextResult()(v0 + 2, v11);
}

uint64_t sub_100048A1C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10004EB10;
  }

  else
  {
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    *(_BYTE *)(v2 + 25) = *(_BYTE *)(v2 + 24);
    uint64_t v4 = sub_100048A90;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100048A90()
{
  int v1 = *(unsigned __int8 *)(v0 + 25);
  if (v1 == 255)
  {
    id v2 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
LABEL_5:
    uint64_t v4 = *(void *)(v0 + 72);
    swift_willThrow(v2);
    swift_task_dealloc(v4);
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }

  sub_10000360C(&qword_1000CF8D0);
  ThrowingTaskGroup.cancelAll()();
  if ((v1 & 1) != 0) {
    goto LABEL_5;
  }
  swift_task_dealloc(*(void *)(v0 + 72));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100048B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = sub_10000360C((uint64_t *)&unk_1000CF840);
  void v5[9] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100048BB0, 0LL, 0LL);
}

uint64_t sub_100048BB0()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v1, 1LL, 1LL, v6);
  uint64_t v8 = (void *)swift_allocObject(&unk_1000C4630, 48LL, 7LL);
  _OWORD v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = v5;
  v8[5] = v3;
  swift_retain(v3);
  sub_100049528(v1, (uint64_t)&unk_1000CF360, (uint64_t)v8);
  sub_10000BFC8(v1, (uint64_t *)&unk_1000CF840);
  v7(v1, 1LL, 1LL, v6);
  uint64_t v9 = (void *)swift_allocObject(&unk_1000C4658, 48LL, 7LL);
  void v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = v4;
  v9[5] = v2;
  sub_100049528(v1, (uint64_t)&unk_1000CF370, (uint64_t)v9);
  sub_10000BFC8(v1, (uint64_t *)&unk_1000CF840);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
  v0[10] = v10;
  uint64_t v11 = sub_10000360C(&qword_1000CF378);
  *uint64_t v10 = v0;
  v10[1] = sub_100048D10;
  return ThrowingTaskGroup.nextResult()(v0 + 2, v11);
}

uint64_t sub_100048D10()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100048E5C;
  }

  else
  {
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    *(_BYTE *)(v2 + 25) = *(_BYTE *)(v2 + 24);
    uint64_t v4 = sub_100048D84;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100048D84()
{
  int v1 = *(unsigned __int8 *)(v0 + 25);
  if (v1 == 255)
  {
    id v2 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
  }

  else
  {
    sub_10000360C(&qword_1000CF380);
    sub_10000360C(&qword_1000CF8D0);
    ThrowingTaskGroup.cancelAll()();
    uint64_t v3 = *(void *)(v0 + 96);
    if ((v1 & 1) == 0)
    {
      swift_task_dealloc(*(void *)(v0 + 72));
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3 & 1);
    }
  }

  uint64_t v5 = *(void *)(v0 + 72);
  swift_willThrow(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048E5C()
{
  return swift_unexpectedError(*(void *)(v0 + 88), "_Concurrency/TaskGroup.swift", 28LL, 1LL, 1173LL);
}

uint64_t sub_100048E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  void v6[3] = a2;
  uint64_t v7 = sub_10000360C(&qword_1000CF420);
  v6[8] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C(&qword_1000CF428);
  v6[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[11] = swift_task_alloc(v10);
  v6[12] = swift_task_alloc(v10);
  uint64_t v11 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v6[13] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100048F3C, 0LL, 0LL);
}

uint64_t sub_100048F3C()
{
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v1, 1LL, 1LL, v6);
  uint64_t v8 = (void *)swift_allocObject(&unk_1000C4810, 48LL, 7LL);
  _OWORD v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = v5;
  v8[5] = v4;
  swift_retain(v4);
  sub_1000496BC(v1, (uint64_t)&unk_1000CF438, (uint64_t)v8);
  sub_10000BFC8(v1, (uint64_t *)&unk_1000CF840);
  v7(v1, 1LL, 1LL, v6);
  uint64_t v9 = (void *)swift_allocObject(&unk_1000C4838, 48LL, 7LL);
  void v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = v3;
  v9[5] = v2;
  sub_1000496BC(v1, (uint64_t)&unk_1000CF448, (uint64_t)v9);
  sub_10000BFC8(v1, (uint64_t *)&unk_1000CF840);
  unint64_t v10 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
  v0[14] = v10;
  uint64_t v11 = sub_10000360C(&qword_1000CF450);
  *unint64_t v10 = v0;
  v10[1] = sub_100049098;
  return ThrowingTaskGroup.nextResult()(v0[8], v11);
}

uint64_t sub_100049098()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12swift_beginAccess(v0 + 56, v9, 0LL, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000492B4;
  }
  else {
    uint64_t v3 = sub_1000490FC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000490FC()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 48LL))(v2, 1LL, v1) == 1)
  {
    sub_10000BFC8(v2, &qword_1000CF420);
    id v3 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_willThrow(v3);
  }

  else
  {
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    sub_1000192A4(v2, v4, &qword_1000CF428);
    type metadata accessor for HandoffInfo(0LL);
    sub_10000360C(&qword_1000CF8D0);
    ThrowingTaskGroup.cancelAll()();
    sub_100005318(v4, v5, &qword_1000CF428);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v1);
    if ((_DWORD)EnumCaseMultiPayload != 1)
    {
      uint64_t v12 = v0[12];
      uint64_t v13 = v0[13];
      uint64_t v14 = v0[11];
      uint64_t v15 = v0[8];
      uint64_t v16 = v0[2];
      sub_10000BFC8(v12, &qword_1000CF428);
      sub_10004EA7C(v14, v16, type metadata accessor for HandoffInfo);
      swift_task_dealloc(v13);
      swift_task_dealloc(v12);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      uint64_t v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }

    uint64_t v7 = v0[12];
    swift_willThrow(EnumCaseMultiPayload);
    sub_10000BFC8(v7, &qword_1000CF428);
  }

  uint64_t v8 = v0[12];
  uint64_t v9 = v0[11];
  uint64_t v10 = v0[8];
  swift_task_dealloc(v0[13]);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000492B4()
{
  return swift_unexpectedError(*(void *)(v0 + 120), "_Concurrency/TaskGroup.swift", 28LL, 1LL, 1173LL);
}

uint64_t sub_1000492D0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v4;
  v6[1] = sub_1000193E4;
  return v8(a1);
}

uint64_t sub_100049334(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v4;
  v6[1] = sub_10000C2B8;
  return v8(a1);
}

uint64_t sub_100049398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005318(a1, (uint64_t)v10, (uint64_t *)&unk_1000CF840);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11);
  if ((_DWORD)v13 == 1)
  {
    sub_10000BFC8((uint64_t)v10, (uint64_t *)&unk_1000CF840);
    uint64_t v14 = 12544LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v21 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v14 = v21 | 0x3100LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
LABEL_6:
  uint64_t v22 = *v4;
  NSString v23 = (void *)(v20 | v18);
  if (v20 | v18)
  {
    v28[0] = 0LL;
    v28[1] = 0LL;
    NSString v23 = v28;
    v28[2] = v18;
    v28[3] = v20;
  }

  v27[0] = 1LL;
  v27[1] = v23;
  v27[2] = v22;
  uint64_t v24 = swift_task_create(v14, v27, (char *)&type metadata for () + 8, a2, a3);
  return swift_release(v24);
}

uint64_t sub_100049528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005318(a1, (uint64_t)v10, (uint64_t *)&unk_1000CF840);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11);
  if ((_DWORD)v13 == 1)
  {
    sub_10000BFC8((uint64_t)v10, (uint64_t *)&unk_1000CF840);
    uint64_t v14 = 12544LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v21 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v14 = v21 | 0x3100LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
LABEL_6:
  uint64_t v22 = *v4;
  uint64_t v23 = sub_10000360C(&qword_1000CF380);
  uint64_t v24 = (void *)(v20 | v18);
  if (v20 | v18)
  {
    v29[0] = 0LL;
    v29[1] = 0LL;
    uint64_t v24 = v29;
    v29[2] = v18;
    v29[3] = v20;
  }

  v28[0] = 1LL;
  v28[1] = v24;
  v28[2] = v22;
  uint64_t v25 = swift_task_create(v14, v28, v23, a2, a3);
  return swift_release(v25);
}

uint64_t sub_1000496BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005318(a1, (uint64_t)v10, (uint64_t *)&unk_1000CF840);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11);
  if ((_DWORD)v13 == 1)
  {
    sub_10000BFC8((uint64_t)v10, (uint64_t *)&unk_1000CF840);
    uint64_t v14 = 12544LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v21 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v14 = v21 | 0x3100LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
LABEL_6:
  uint64_t v22 = *v4;
  uint64_t v23 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v24 = (void *)(v20 | v18);
  if (v20 | v18)
  {
    v29[0] = 0LL;
    v29[1] = 0LL;
    uint64_t v24 = v29;
    v29[2] = v18;
    v29[3] = v20;
  }

  v28[0] = 1LL;
  v28[1] = v24;
  v28[2] = v22;
  uint64_t v25 = swift_task_create(v14, v28, v23, a2, a3);
  return swift_release(v25);
}

uint64_t sub_10004984C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  _OWORD v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock(0LL);
  v5[4] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[5] = v7;
  v5[6] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000498AC, 0LL, 0LL);
}

uint64_t sub_1000498AC()
{
  id v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000CFA10 + dword_1000CFA10);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFA14);
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100049924;
  return v3(v0[2], v0[3], 0LL, 0LL, 1);
}

uint64_t sub_100049924()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 32LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0) {
    uint64_t v6 = sub_10004EAFC;
  }
  else {
    uint64_t v6 = sub_10004EB08;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000499A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  _OWORD v5[3] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock(0LL);
  v5[4] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[5] = v7;
  v5[6] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100049A04, 0LL, 0LL);
}

uint64_t sub_100049A04()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000CFA10 + dword_1000CFA10);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFA14);
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100049A7C;
  return v3(v0[2], v0[3], 0LL, 0LL, 1);
}

uint64_t sub_100049A7C()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 32LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0) {
    uint64_t v6 = sub_100049B64;
  }
  else {
    uint64_t v6 = sub_100049AFC;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100049AFC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    (id)TUMakeNeighborhoodConduitError(5LL, 0LL);
    swift_willThrow();
  }

  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100049B64()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100049B98(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100049BF8, 0LL, 0LL);
}

uint64_t sub_100049BF8()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  UUID.init()();
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[8] = v4;
  void v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  uint64_t v5 = swift_task_alloc(32LL);
  v0[9] = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[10] = v6;
  uint64_t v7 = sub_10000360C(&qword_1000CF250);
  void *v6 = v0;
  v6[1] = sub_100049CC8;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0 + 2,  &unk_1000CF248,  v4,  sub_10004D370,  v5,  0LL,  0LL,  v7);
}

uint64_t sub_100049CC8()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 72LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v5 = sub_10004EB1C;
  }
  else {
    uint64_t v5 = sub_10004EB0C;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100049D48(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100049DA8, 0LL, 0LL);
}

uint64_t sub_100049DA8()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  UUID.init()();
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[8] = v4;
  void v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  uint64_t v5 = swift_task_alloc(32LL);
  v0[9] = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[10] = v6;
  uint64_t v7 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
  void *v6 = v0;
  v6[1] = sub_100049E84;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0 + 2,  &unk_1000CF3A0,  v4,  sub_10004EB04,  v5,  0LL,  0LL,  v7);
}

uint64_t sub_100049E84()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 72LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v5 = sub_100049F54;
  }
  else {
    uint64_t v5 = sub_100049F04;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100049F04()
{
  uint64_t v1 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v1, *(void *)(v0 + 40));
  uint64_t v2 = *(void *)(v0 + 16);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100049F54()
{
  uint64_t v1 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v1, *(void *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100049F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100049FE4( a1,  a2,  a3,  a4,  &qword_1000CF3D8,  (uint64_t)&unk_1000C4748,  (uint64_t)sub_10004E0E8,  (uint64_t)&unk_1000C4760);
}

uint64_t sub_100049FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100049FE4( a1,  a2,  a3,  a4,  &qword_1000CF458,  (uint64_t)&unk_1000C4860,  (uint64_t)sub_10004E460,  (uint64_t)&unk_1000C4878);
}

uint64_t sub_100049FE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v39 = a3;
  uint64_t v40 = a6;
  uint64_t v42 = a4;
  uint64_t v38 = a1;
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v46 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000360C(a5);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v37 = v13;
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v39, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v38, v13);
  uint64_t v21 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (v21 + 24) & ~v21;
  uint64_t v23 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v24 = (v19 + v23 + v22) & ~v23;
  unint64_t v25 = (v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = swift_allocObject(v40, v25 + 8, v21 | v23 | 7);
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v26 + v22, v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v26 + v24, v16, v37);
  uint64_t v27 = v42;
  *(void *)(v26 + v25) = v42;
  aBlock[4] = v44;
  uint64_t v53 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000ABC8;
  aBlock[3] = v45;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain(a2);
  uint64_t v29 = swift_retain(v27);
  uint64_t v30 = v41;
  static DispatchQoS.unspecified.getter(v29);
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_10001CFD8( (unint64_t *)&unk_1000CE340,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v32 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v33 = sub_100018F4C(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v35 = v46;
  uint64_t v34 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v32, v33, v47, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v30, v35, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v49);
  return swift_release(v53);
}

uint64_t sub_10004A2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a3;
  uint64_t v98 = a2;
  uint64_t v99 = a1;
  uint64_t v89 = sub_10000360C(&qword_1000CF3D8);
  uint64_t v6 = *(char **)(*(void *)(v89 - 8) + 64LL);
  uint64_t v100 = *(void *)(v89 - 8);
  unint64_t v101 = v6;
  uint64_t v7 = __chkstk_darwin(v89);
  uint64_t v94 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v103 = (char *)&v82 - v9;
  uint64_t v10 = sub_10000360C(&qword_1000CF260);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = sub_10000360C(&qword_1000CF3E0);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  char v104 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_10000360C(&qword_1000CF3E8);
  uint64_t v97 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v105 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = v16;
  uint64_t v19 = __chkstk_darwin(v15);
  uint64_t v92 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v82 - v21;
  __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)&v82 - v22;
  uint64_t v23 = *(void (**)(void))(v18 + 16);
  v23();
  uint64_t v24 = v23;
  uint64_t v87 = v23;
  v107[0] = a4;
  v108[0] = *(id *)(a1 + 16);
  id v25 = v108[0];
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v12, 1LL, 1LL, v26);
  id v27 = v25;
  uint64_t v28 = sub_10000360C(&qword_1000CF3F0);
  uint64_t v29 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v30 = sub_100018F4C( &qword_1000CF3F8,  &qword_1000CF3F0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v31 = sub_10004D3D4( &qword_1000CF288,  (unint64_t *)&qword_1000CD710,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v108, v12, v28, v29, v30, v31);
  sub_10000BFC8((uint64_t)v12, &qword_1000CF260);

  uint64_t v32 = v88;
  uint64_t v33 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v88, v98, v85);
  uint64_t v34 = v100;
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v35 = v103;
  uint64_t v36 = v89;
  v86(v103, v106, v89);
  uint64_t v90 = v18;
  uint64_t v37 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v38 = (v37 + 24) & ~v37;
  uint64_t v39 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v82 = v38;
  uint64_t v40 = (v17 + v39 + v38) & ~v39;
  uint64_t v84 = &v101[v40];
  uint64_t v41 = v40;
  uint64_t v102 = v40;
  uint64_t v83 = v37 | v39 | 7;
  uint64_t v42 = swift_allocObject(&unk_1000C4798, &v101[v40], v83);
  uint64_t v43 = v99;
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v44 = v42 + v38;
  unint64_t v101 = *(char **)(v18 + 32);
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v44, v32, v33);
  uint64_t v100 = *(void *)(v34 + 32);
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  ((void (*)(uint64_t, char *, uint64_t))v100)(v42 + v41, v35, v36);
  uint64_t v49 = sub_100018F4C( &qword_1000CF400,  &qword_1000CF3E0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v50 = v43;
  swift_retain(v43);
  uint64_t v81 = v49;
  uint64_t v51 = v91;
  uint64_t v52 = v104;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  sub_10004E108,  v42,  0LL,  0LL,  v91,  v81);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v51);
  uint64_t v53 = v45;
  os_log_type_t v54 = v45;
  uint64_t v55 = v98;
  uint64_t v56 = v46;
  uint64_t v57 = v87;
  ((void (*)(char *, uint64_t, uint64_t))v87)(v53, v98, v46);
  uint64_t v58 = v47;
  uint64_t v59 = v48;
  uint64_t v60 = v86;
  v86(v58, v106, v48);
  uint64_t v61 = v84;
  uint64_t v62 = v83;
  uint64_t v63 = swift_allocObject(&unk_1000C47C0, v84, v83);
  *(void *)(v63 + swift_weakDestroy(v0 + 16) = v50;
  uint64_t v64 = v82;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v63 + v82, v54, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v63 + v102, v103, v59);
  uint64_t v65 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v92, v55, v56);
  uint64_t v66 = v94;
  uint64_t v67 = v59;
  v60(v94, v106, v59);
  uint64_t v68 = swift_allocObject(&unk_1000C47E8, v61, v62);
  uint64_t v69 = v99;
  *(void *)(v68 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v70 = v68 + v64;
  uint64_t v71 = v56;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v70, v65, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v68 + v102, v66, v67);
  uint64_t v72 = sub_100018F4C( &qword_1000CF408,  &qword_1000CF3E8,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  swift_retain_n(v69, 2LL);
  uint64_t v73 = v95;
  uint64_t v74 = v72;
  uint64_t v75 = v105;
  uint64_t v76 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10004E1B8, v63, sub_10004E234, v68, v95, v74);
  swift_release(v63);
  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v75, v73);
  swift_beginAccess(v69 + 24, v107, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v69 + 24));
  v108[0] = *(id *)(v69 + 24);
  *(void *)(v69 + 24) = 0x8000000000000000LL;
  uint64_t v78 = v96;
  sub_100077EC8(v76, v96, isUniquelyReferenced_nonNull_native);
  uint64_t v79 = *(void *)(v69 + 24);
  *(id *)(v69 + 24) = v108[0];
  swift_bridgeObjectRelease(v79);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v78, v71);
  return swift_endAccess(v107);
}

uint64_t sub_10004A978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a3;
  uint64_t v98 = a2;
  uint64_t v99 = a1;
  uint64_t v89 = sub_10000360C(&qword_1000CF258);
  uint64_t v6 = *(char **)(*(void *)(v89 - 8) + 64LL);
  uint64_t v100 = *(void *)(v89 - 8);
  unint64_t v101 = v6;
  uint64_t v7 = __chkstk_darwin(v89);
  uint64_t v94 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v103 = (char *)&v82 - v9;
  uint64_t v10 = sub_10000360C(&qword_1000CF260);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = sub_10000360C(&qword_1000CF268);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  char v104 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_10000360C(&qword_1000CF270);
  uint64_t v97 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v105 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = v16;
  uint64_t v19 = __chkstk_darwin(v15);
  uint64_t v92 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v82 - v21;
  __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)&v82 - v22;
  uint64_t v23 = *(void (**)(void))(v18 + 16);
  v23();
  uint64_t v24 = v23;
  uint64_t v87 = v23;
  v107[0] = a4;
  v108[0] = *(id *)(a1 + 16);
  id v25 = v108[0];
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v12, 1LL, 1LL, v26);
  id v27 = v25;
  uint64_t v28 = sub_10000360C(&qword_1000CF278);
  uint64_t v29 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v30 = sub_100018F4C( &qword_1000CF280,  &qword_1000CF278,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v31 = sub_10004D3D4( &qword_1000CF288,  (unint64_t *)&qword_1000CD710,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v108, v12, v28, v29, v30, v31);
  sub_10000BFC8((uint64_t)v12, &qword_1000CF260);

  uint64_t v32 = v88;
  uint64_t v33 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v88, v98, v85);
  uint64_t v34 = v100;
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v35 = v103;
  uint64_t v36 = v89;
  v86(v103, v106, v89);
  uint64_t v90 = v18;
  uint64_t v37 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v38 = (v37 + 24) & ~v37;
  uint64_t v39 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v82 = v38;
  uint64_t v40 = (v17 + v39 + v38) & ~v39;
  uint64_t v84 = &v101[v40];
  uint64_t v41 = v40;
  uint64_t v102 = v40;
  uint64_t v83 = v37 | v39 | 7;
  uint64_t v42 = swift_allocObject(&unk_1000C4478, &v101[v40], v83);
  uint64_t v43 = v99;
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v44 = v42 + v38;
  unint64_t v101 = *(char **)(v18 + 32);
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v44, v32, v33);
  uint64_t v100 = *(void *)(v34 + 32);
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  ((void (*)(uint64_t, char *, uint64_t))v100)(v42 + v41, v35, v36);
  uint64_t v49 = sub_100018F4C( &qword_1000CF290,  &qword_1000CF268,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v50 = v43;
  swift_retain(v43);
  uint64_t v81 = v49;
  uint64_t v51 = v91;
  uint64_t v52 = v104;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  sub_10004D420,  v42,  0LL,  0LL,  v91,  v81);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v51);
  uint64_t v53 = v45;
  os_log_type_t v54 = v45;
  uint64_t v55 = v98;
  uint64_t v56 = v46;
  uint64_t v57 = v87;
  ((void (*)(char *, uint64_t, uint64_t))v87)(v53, v98, v46);
  uint64_t v58 = v47;
  uint64_t v59 = v48;
  uint64_t v60 = v86;
  v86(v58, v106, v48);
  uint64_t v61 = v84;
  uint64_t v62 = v83;
  uint64_t v63 = swift_allocObject(&unk_1000C44A0, v84, v83);
  *(void *)(v63 + swift_weakDestroy(v0 + 16) = v50;
  uint64_t v64 = v82;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v63 + v82, v54, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v63 + v102, v103, v59);
  uint64_t v65 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v92, v55, v56);
  uint64_t v66 = v94;
  uint64_t v67 = v59;
  v60(v94, v106, v59);
  uint64_t v68 = swift_allocObject(&unk_1000C44C8, v61, v62);
  uint64_t v69 = v99;
  *(void *)(v68 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v70 = v68 + v64;
  uint64_t v71 = v56;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v70, v65, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v68 + v102, v66, v67);
  uint64_t v72 = sub_100018F4C( &qword_1000CF298,  &qword_1000CF270,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  swift_retain_n(v69, 2LL);
  uint64_t v73 = v95;
  uint64_t v74 = v72;
  uint64_t v75 = v105;
  uint64_t v76 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10004D438, v63, sub_10004D50C, v68, v95, v74);
  swift_release(v63);
  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v75, v73);
  swift_beginAccess(v69 + 24, v107, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v69 + 24));
  v108[0] = *(id *)(v69 + 24);
  *(void *)(v69 + 24) = 0x8000000000000000LL;
  uint64_t v78 = v96;
  sub_100077EC8(v76, v96, isUniquelyReferenced_nonNull_native);
  uint64_t v79 = *(void *)(v69 + 24);
  *(id *)(v69 + 24) = v108[0];
  swift_bridgeObjectRelease(v79);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v78, v71);
  return swift_endAccess(v107);
}

uint64_t sub_10004AFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a3;
  uint64_t v98 = a2;
  uint64_t v99 = a1;
  uint64_t v89 = sub_10000360C(&qword_1000CF3A8);
  uint64_t v6 = *(char **)(*(void *)(v89 - 8) + 64LL);
  uint64_t v100 = *(void *)(v89 - 8);
  unint64_t v101 = v6;
  uint64_t v7 = __chkstk_darwin(v89);
  uint64_t v94 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v103 = (char *)&v82 - v9;
  uint64_t v10 = sub_10000360C(&qword_1000CF260);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = sub_10000360C(&qword_1000CF3B0);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  char v104 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_10000360C(&qword_1000CF3B8);
  uint64_t v97 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v105 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = v16;
  uint64_t v19 = __chkstk_darwin(v15);
  uint64_t v92 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v82 - v21;
  __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)&v82 - v22;
  uint64_t v23 = *(void (**)(void))(v18 + 16);
  v23();
  uint64_t v24 = v23;
  uint64_t v87 = v23;
  v107[0] = a4;
  v108[0] = *(id *)(a1 + 16);
  id v25 = v108[0];
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v12, 1LL, 1LL, v26);
  id v27 = v25;
  uint64_t v28 = sub_10000360C(&qword_1000CF3C0);
  uint64_t v29 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v30 = sub_100018F4C( &qword_1000CF890,  &qword_1000CF3C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v31 = sub_10004D3D4( &qword_1000CF288,  (unint64_t *)&qword_1000CD710,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v108, v12, v28, v29, v30, v31);
  sub_10000BFC8((uint64_t)v12, &qword_1000CF260);

  uint64_t v32 = v88;
  uint64_t v33 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v88, v98, v85);
  uint64_t v34 = v100;
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v35 = v103;
  uint64_t v36 = v89;
  v86(v103, v106, v89);
  uint64_t v90 = v18;
  uint64_t v37 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v38 = (v37 + 24) & ~v37;
  uint64_t v39 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v82 = v38;
  uint64_t v40 = (v17 + v39 + v38) & ~v39;
  uint64_t v84 = &v101[v40];
  uint64_t v41 = v40;
  uint64_t v102 = v40;
  uint64_t v83 = v37 | v39 | 7;
  uint64_t v42 = swift_allocObject(&unk_1000C46D0, &v101[v40], v83);
  uint64_t v43 = v99;
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v44 = v42 + v38;
  unint64_t v101 = *(char **)(v18 + 32);
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v44, v32, v33);
  uint64_t v100 = *(void *)(v34 + 32);
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  ((void (*)(uint64_t, char *, uint64_t))v100)(v42 + v41, v35, v36);
  uint64_t v49 = sub_100018F4C( &qword_1000CF3C8,  &qword_1000CF3B0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v50 = v43;
  swift_retain(v43);
  uint64_t v81 = v49;
  uint64_t v51 = v91;
  uint64_t v52 = v104;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  sub_10004DF20,  v42,  0LL,  0LL,  v91,  v81);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v51);
  uint64_t v53 = v45;
  os_log_type_t v54 = v45;
  uint64_t v55 = v98;
  uint64_t v56 = v46;
  uint64_t v57 = v87;
  ((void (*)(char *, uint64_t, uint64_t))v87)(v53, v98, v46);
  uint64_t v58 = v47;
  uint64_t v59 = v48;
  uint64_t v60 = v86;
  v86(v58, v106, v48);
  uint64_t v61 = v84;
  uint64_t v62 = v83;
  uint64_t v63 = swift_allocObject(&unk_1000C46F8, v84, v83);
  *(void *)(v63 + swift_weakDestroy(v0 + 16) = v50;
  uint64_t v64 = v82;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v63 + v82, v54, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v63 + v102, v103, v59);
  uint64_t v65 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v92, v55, v56);
  uint64_t v66 = v94;
  uint64_t v67 = v59;
  v60(v94, v106, v59);
  uint64_t v68 = swift_allocObject(&unk_1000C4720, v61, v62);
  uint64_t v69 = v99;
  *(void *)(v68 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v70 = v68 + v64;
  uint64_t v71 = v56;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v70, v65, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v68 + v102, v66, v67);
  uint64_t v72 = sub_100018F4C( &qword_1000CF3D0,  &qword_1000CF3B8,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  swift_retain_n(v69, 2LL);
  uint64_t v73 = v95;
  uint64_t v74 = v72;
  uint64_t v75 = v105;
  uint64_t v76 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10004DFA8, v63, sub_10004E040, v68, v95, v74);
  swift_release(v63);
  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v75, v73);
  swift_beginAccess(v69 + 24, v107, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v69 + 24));
  v108[0] = *(id *)(v69 + 24);
  *(void *)(v69 + 24) = 0x8000000000000000LL;
  uint64_t v78 = v96;
  sub_100077EC8(v76, v96, isUniquelyReferenced_nonNull_native);
  uint64_t v79 = *(void *)(v69 + 24);
  *(id *)(v69 + 24) = v108[0];
  swift_bridgeObjectRelease(v79);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v78, v71);
  return swift_endAccess(v107);
}

uint64_t sub_10004B680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a3;
  uint64_t v98 = a2;
  uint64_t v99 = a1;
  uint64_t v89 = sub_10000360C(&qword_1000CF458);
  uint64_t v6 = *(char **)(*(void *)(v89 - 8) + 64LL);
  uint64_t v100 = *(void *)(v89 - 8);
  unint64_t v101 = v6;
  uint64_t v7 = __chkstk_darwin(v89);
  uint64_t v94 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v103 = (char *)&v82 - v9;
  uint64_t v10 = sub_10000360C(&qword_1000CF260);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = sub_10000360C(&qword_1000CF460);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  char v104 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_10000360C(&qword_1000CF468);
  uint64_t v97 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v105 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = v16;
  uint64_t v19 = __chkstk_darwin(v15);
  uint64_t v92 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v82 - v21;
  __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)&v82 - v22;
  uint64_t v23 = *(void (**)(void))(v18 + 16);
  v23();
  uint64_t v24 = v23;
  uint64_t v87 = v23;
  v107[0] = a4;
  v108[0] = *(id *)(a1 + 16);
  id v25 = v108[0];
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v12, 1LL, 1LL, v26);
  id v27 = v25;
  uint64_t v28 = sub_10000360C(&qword_1000CF470);
  uint64_t v29 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v30 = sub_100018F4C( &qword_1000CF478,  &qword_1000CF470,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v31 = sub_10004D3D4( &qword_1000CF288,  (unint64_t *)&qword_1000CD710,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v108, v12, v28, v29, v30, v31);
  sub_10000BFC8((uint64_t)v12, &qword_1000CF260);

  uint64_t v32 = v88;
  uint64_t v33 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v24)(v88, v98, v85);
  uint64_t v34 = v100;
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v35 = v103;
  uint64_t v36 = v89;
  v86(v103, v106, v89);
  uint64_t v90 = v18;
  uint64_t v37 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v38 = (v37 + 24) & ~v37;
  uint64_t v39 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v82 = v38;
  uint64_t v40 = (v17 + v39 + v38) & ~v39;
  uint64_t v84 = &v101[v40];
  uint64_t v41 = v40;
  uint64_t v102 = v40;
  uint64_t v83 = v37 | v39 | 7;
  uint64_t v42 = swift_allocObject(&unk_1000C48B0, &v101[v40], v83);
  uint64_t v43 = v99;
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v44 = v42 + v38;
  unint64_t v101 = *(char **)(v18 + 32);
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v44, v32, v33);
  uint64_t v100 = *(void *)(v34 + 32);
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  ((void (*)(uint64_t, char *, uint64_t))v100)(v42 + v41, v35, v36);
  uint64_t v49 = sub_100018F4C( &qword_1000CF480,  &qword_1000CF460,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v50 = v43;
  swift_retain(v43);
  uint64_t v81 = v49;
  uint64_t v51 = v91;
  uint64_t v52 = v104;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  sub_10004E480,  v42,  0LL,  0LL,  v91,  v81);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v52, v51);
  uint64_t v53 = v45;
  os_log_type_t v54 = v45;
  uint64_t v55 = v98;
  uint64_t v56 = v46;
  uint64_t v57 = v87;
  ((void (*)(char *, uint64_t, uint64_t))v87)(v53, v98, v46);
  uint64_t v58 = v47;
  uint64_t v59 = v48;
  uint64_t v60 = v86;
  v86(v58, v106, v48);
  uint64_t v61 = v84;
  uint64_t v62 = v83;
  uint64_t v63 = swift_allocObject(&unk_1000C48D8, v84, v83);
  *(void *)(v63 + swift_weakDestroy(v0 + 16) = v50;
  uint64_t v64 = v82;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v63 + v82, v54, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v63 + v102, v103, v59);
  uint64_t v65 = v92;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v92, v55, v56);
  uint64_t v66 = v94;
  uint64_t v67 = v59;
  v60(v94, v106, v59);
  uint64_t v68 = swift_allocObject(&unk_1000C4900, v61, v62);
  uint64_t v69 = v99;
  *(void *)(v68 + swift_weakDestroy(v0 + 16) = v99;
  uint64_t v70 = v68 + v64;
  uint64_t v71 = v56;
  ((void (*)(uint64_t, char *, uint64_t))v101)(v70, v65, v56);
  ((void (*)(uint64_t, char *, uint64_t))v100)(v68 + v102, v66, v67);
  uint64_t v72 = sub_100018F4C( &qword_1000CF488,  &qword_1000CF468,  (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  swift_retain_n(v69, 2LL);
  uint64_t v73 = v95;
  uint64_t v74 = v72;
  uint64_t v75 = v105;
  uint64_t v76 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10004E4A8, v63, sub_10004E5E4, v68, v95, v74);
  swift_release(v63);
  swift_release(v68);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v75, v73);
  swift_beginAccess(v69 + 24, v107, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v69 + 24));
  v108[0] = *(id *)(v69 + 24);
  *(void *)(v69 + 24) = 0x8000000000000000LL;
  uint64_t v78 = v96;
  sub_100077EC8(v76, v96, isUniquelyReferenced_nonNull_native);
  uint64_t v79 = *(void *)(v69 + 24);
  *(id *)(v69 + 24) = v108[0];
  swift_bridgeObjectRelease(v79);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v78, v71);
  return swift_endAccess(v107);
}

uint64_t sub_10004BD04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t *a7)
{
  uint64_t v33 = a7;
  uint64_t v34 = a4;
  uint64_t v32 = a1;
  uint64_t v10 = a5(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = sub_10000360C(a6);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = (uint64_t *)(a2 + 24);
  swift_beginAccess(a2 + 24, v36, 33LL, 0LL);
  uint64_t v18 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain(v18);
  unint64_t v19 = sub_100004D38(a3);
  LOBYTE(a3) = v20;
  swift_bridgeObjectRelease(v18);
  if ((a3 & 1) == 0) {
    return swift_endAccess(v36);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v17);
  uint64_t v22 = *v17;
  uint64_t v35 = *v17;
  uint64_t *v17 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100078A40();
    uint64_t v22 = v35;
  }

  uint64_t v23 = *(void *)(v22 + 48);
  uint64_t v24 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))( v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v19,  v24);
  uint64_t v25 = v35;
  uint64_t v26 = *(void *)(*(void *)(v35 + 56) + 8 * v19);
  sub_1000397C0(v19, v35);
  uint64_t v27 = *v17;
  uint64_t *v17 = v25;
  swift_bridgeObjectRelease(v27);
  swift_endAccess(v36);
  AnyCancellable.cancel()();
  sub_100005318(v32, (uint64_t)v16, a6);
  if (swift_getEnumCaseMultiPayload(v16, v14) == 1)
  {
    v36[0] = *v16;
    uint64_t v28 = sub_10000360C(v33);
    CheckedContinuation.resume(throwing:)(v36, v28);
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v11 + 32))(v13, v16, v10);
    uint64_t v30 = sub_10000360C(v33);
    CheckedContinuation.resume(returning:)(v13, v30);
  }

  return swift_release(v26);
}

uint64_t sub_10004BF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = type metadata accessor for CancellationError(0LL);
  uint64_t v8 = sub_10001CFD8( &qword_1000CF2A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
  uint64_t v9 = swift_allocError(v7, v8, 0LL, 0LL);
  CancellationError.init()();
  swift_beginAccess(a1 + 24, v13, 33LL, 0LL);
  uint64_t v10 = sub_10003934C(a2);
  swift_endAccess(v13);
  if (v10)
  {
    AnyCancellable.cancel()();
    v13[0] = v9;
    swift_errorRetain(v9);
    uint64_t v11 = sub_10000360C(a4);
    CheckedContinuation.resume(throwing:)(v13, v11);
    swift_release(v10);
  }

  return swift_errorRelease(v9);
}

uint64_t sub_10004C00C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v12 = sub_10000360C(a4);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for CancellationError(0LL);
  uint64_t v16 = sub_10001CFD8( &qword_1000CF2A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
  uint64_t v17 = swift_allocError(v15, v16, 0LL, 0LL);
  CancellationError.init()();
  *uint64_t v14 = v17;
  swift_storeEnumTagMultiPayload(v14, v12, 1LL);
  sub_10004BD04((uint64_t)v14, a1, a2, a3, a5, a4, a6);
  return sub_10000BFC8((uint64_t)v14, a4);
}

uint64_t sub_10004C124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C(&qword_1000CF410);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v20 - v12);
  if (a1)
  {
    uint64_t v21 = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v14 = sub_10000360C(&qword_1000CF8D0);
    uint64_t v15 = _getErrorEmbeddedNSError<A>(_:)(&v21, v14, &protocol self-conformance witness table for Error);
    if (v15)
    {
      uint64_t v16 = v15;
      swift_errorRelease(a1);
    }

    else
    {
      uint64_t v16 = swift_allocError(v14, &protocol self-conformance witness table for Error, 0LL, 0LL);
      *uint64_t v18 = v21;
    }

    *uint64_t v13 = v16;
    swift_storeEnumTagMultiPayload(v13, v8, 1LL);
    sub_10004BD04( (uint64_t)v13,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for NCProtoDeviceTokenResponse,  &qword_1000CF410,  &qword_1000CF3D8);
    swift_errorRelease(a1);
    uint64_t v17 = (uint64_t)v13;
  }

  else
  {
    *uint64_t v11 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_storeEnumTagMultiPayload(v11, v8, 1LL);
    sub_10004BD04( (uint64_t)v11,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for NCProtoDeviceTokenResponse,  &qword_1000CF410,  &qword_1000CF3D8);
    uint64_t v17 = (uint64_t)v11;
  }

  return sub_10000BFC8(v17, &qword_1000CF410);
}

void sub_10004C2F4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if ((a1 & 1) != 0)
  {
    id v12 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_beginAccess(a2 + 24, v15, 33LL, 0LL);
    uint64_t v13 = sub_10003934C(a3);
    swift_endAccess(v15);
    if (v13)
    {
      AnyCancellable.cancel()();
      v15[0] = v12;
      swift_errorRetain(v12);
      uint64_t v14 = sub_10000360C(a5);
      CheckedContinuation.resume(throwing:)(v15, v14);

      swift_release(v13);
    }

    else
    {
    }
  }

  else
  {
    uint64_t v8 = _getErrorEmbeddedNSError<A>(_:)();
    if (!v8) {
      uint64_t v8 = swift_allocError(&type metadata for Never, &protocol witness table for Never, 0LL, 0LL);
    }
    uint64_t v9 = v8;
    swift_beginAccess(a2 + 24, v15, 33LL, 0LL);
    uint64_t v10 = sub_10003934C(a3);
    swift_endAccess(v15);
    if (v10)
    {
      AnyCancellable.cancel()();
      v15[0] = v9;
      swift_errorRetain(v9);
      uint64_t v11 = sub_10000360C(a5);
      CheckedContinuation.resume(throwing:)(v15, v11);
      swift_release(v10);
    }

    swift_errorRelease(v9);
  }

uint64_t sub_10004C470(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C(&qword_1000CF490);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (uint64_t *)((char *)&v17 - v13);
  if ((a1 & 1) != 0)
  {
    *uint64_t v11 = (uint64_t)(id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    uint64_t v14 = v11;
  }

  else
  {
    uint64_t v15 = _getErrorEmbeddedNSError<A>(_:)(v12, &type metadata for Never, &protocol witness table for Never);
    if (!v15) {
      uint64_t v15 = swift_allocError(&type metadata for Never, &protocol witness table for Never, 0LL, 0LL);
    }
    *uint64_t v14 = v15;
  }

  swift_storeEnumTagMultiPayload(v14, v8, 1LL);
  sub_10004BD04( (uint64_t)v14,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for NCProtoJoinEvent,  &qword_1000CF490,  &qword_1000CF458);
  return sub_10000BFC8((uint64_t)v14, &qword_1000CF490);
}

uint64_t sub_10004C5B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t *a7)
{
  uint64_t v26 = a7;
  uint64_t v27 = a4;
  uint64_t v11 = a5(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = sub_10000360C(a6);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v25 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v25 - v19, a1, v11);
  swift_storeEnumTagMultiPayload(v20, v15, 0LL);
  swift_beginAccess(a2 + 24, v28, 33LL, 0LL);
  uint64_t v21 = sub_10003934C(a3);
  swift_endAccess(v28);
  if (v21)
  {
    AnyCancellable.cancel()();
    sub_100005318((uint64_t)v20, (uint64_t)v18, a6);
    if (swift_getEnumCaseMultiPayload(v18, v15) == 1)
    {
      v28[0] = *v18;
      uint64_t v22 = sub_10000360C(v26);
      CheckedContinuation.resume(throwing:)(v28, v22);
    }

    else
    {
      (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v18, v11);
      uint64_t v23 = sub_10000360C(v26);
      CheckedContinuation.resume(returning:)(v14, v23);
    }

    swift_release(v21);
  }

  return sub_10000BFC8((uint64_t)v20, a6);
}

uint64_t sub_10004C778()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004C79C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10003F6F8(a1, a2, a3, v3);
}

uint64_t sub_10004C7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004C7B4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004C7BC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10004C7F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(_BYTE *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v8 = swift_task_alloc(dword_1000CF1C4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)uint64_t v8 = v2;
  *(void *)(v8 + 8) = sub_1000193E4;
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 80) = v5;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = v4;
  return swift_task_switch(sub_10003F858, 0LL, 0LL);
}

uint64_t sub_10004C874(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1000CF1D4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000193E4;
  return sub_1000481DC(a1, v1);
}

uint64_t sub_10004C8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc(dword_1000CF1E4);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000193E4;
  return sub_100048858(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_10004C94C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 32);
  char v5 = (void *)swift_task_alloc(dword_1000CF1F4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *char v5 = v2;
  v5[1] = sub_1000193E4;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc(v4[1]);
  _OWORD v5[2] = v6;
  void *v6 = v5;
  v6[1] = sub_1000193E4;
  return v8(a1);
}

uint64_t sub_10004C9D4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF204);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_10004984C(a1, v4, v5, v7, v6);
}

void *sub_10004CA4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NCProtoContactInfo(0LL);
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v33 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000360C(&qword_1000CD910);
  __n128 result = (void *)static _DictionaryStorage.copy(original:)(a1);
  int64_t v5 = 0LL;
  uint64_t v36 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v29 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v31 = result + 8;
  uint64_t v32 = result;
  uint64_t v11 = v33;
  uint64_t v10 = v34;
  uint64_t v12 = v35;
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v37 = v5;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v36 + 48) + 16 * i);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))( v11,  *(void *)(v36 + 56) + *(void *)(v10 + 72) * i,  v12);
    swift_bridgeObjectRetain(v20);
    sub_10007B4D4();
    uint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
    __n128 result = v32;
    *(void *)((char *)v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v24 = (void *)(result[6] + 16 * i);
    *uint64_t v24 = v21;
    v24[1] = v20;
    *(void *)(result[7] + 8 * i) = v23;
    uint64_t v25 = result[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    result[2] = v27;
    int64_t v5 = v37;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_24;
    }
    if (v15 >= v30) {
      return result;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v15);
    int64_t v17 = v5 + 1;
    if (!v16)
    {
      int64_t v17 = v5 + 2;
      if (v5 + 2 >= v30) {
        return result;
      }
      unint64_t v16 = *(void *)(v29 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v5 + 3;
        if (v5 + 3 >= v30) {
          return result;
        }
        unint64_t v16 = *(void *)(v29 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_10004CCC0(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    sub_10004CE1C((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, v2);
    uint64_t v9 = v8;
    uint64_t v10 = swift_release(v2);
    if (v1) {
      swift_willThrow(v10);
    }
  }

  else
  {
    uint64_t v11 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v11, v7);
    sub_10004CE1C((unint64_t *)v11, v6, v2);
    uint64_t v9 = v12;
    swift_release(v2);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return v9;
}

void sub_10004CE1C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_22:
    id v16 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    if ([v16 state] == (id)2)
    {

LABEL_5:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      if (__OFADD__(v20++, 1LL)) {
        goto LABEL_28;
      }
    }

    else
    {
      id v17 = [v16 state];

      if (v17 == (id)3) {
        goto LABEL_5;
      }
    }
  }

  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v13 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v13);
  ++v4;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v4 = v13 + 2;
  if (v13 + 2 >= v9) {
    goto LABEL_25;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_21:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }

  int64_t v15 = v13 + 3;
  if (v15 >= v9)
  {
LABEL_25:
    swift_retain(a3);
    sub_1000794EC(a1, a2, v20, a3);
    return;
  }

  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }

uint64_t sub_10004CFF0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10004D058;
  return v7(v4 + 40);
}

uint64_t sub_10004D058()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    char v3 = sub_10004D0D4;
  }
  else {
    char v3 = sub_10004D0BC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10004D0BC()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D0D4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004D0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  unint64_t v8 = (void *)swift_task_alloc(dword_1000CF38C);
  *(void *)(v5 + 24) = v8;
  *unint64_t v8 = v5;
  v8[1] = sub_10004D138;
  return sub_10004DD4C(a4, a5);
}

uint64_t sub_10004D138(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1) {
    **(_BYTE **)(v4 + swift_weakDestroy(v0 + 16) = a1 & 1;
  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004D198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_10004D1B4, 0LL, 0LL);
}

uint64_t sub_10004D1B4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  char v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = sub_10000360C(&qword_1000CF250);
  *char v3 = v0;
  v3[1] = sub_10004D26C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD000000000000011LL,  0x80000001000A4FA0LL,  sub_10004D378,  v2,  v4);
}

uint64_t sub_10004D26C()
{
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10004EB00, 0LL, 0LL);
  }
  uint64_t v5 = *(void **)(v3 + 24);
  swift_task_dealloc(*(void *)(v3 + 56));
  *uint64_t v5 = *(void *)(v3 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10004D2F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CF244);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000CF240 + dword_1000CF240))( a1,  v4,  v5,  v6);
}

uint64_t sub_10004D370()
{
  return sub_10008AD18(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10004D378(uint64_t a1)
{
  return sub_100049FE4( a1,  v1[2],  v1[3],  v1[4],  &qword_1000CF258,  (uint64_t)&unk_1000C4428,  (uint64_t)sub_10004D3C0,  (uint64_t)&unk_1000C4440);
}

uint64_t sub_10004D3B4()
{
  return sub_10004E38C(&qword_1000CF258);
}

uint64_t sub_10004D3C0()
{
  return sub_10004DE88( &qword_1000CF258,  (uint64_t (*)(void, unint64_t, unint64_t, void))sub_10004A978);
}

uint64_t sub_10004D3D4(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000052E0(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10004D414()
{
  return sub_10004E524(&qword_1000CF258);
}

uint64_t sub_10004D420()
{
  return sub_10004DF2C(&qword_1000CF258);
}

uint64_t sub_10004D42C()
{
  return sub_10004E524(&qword_1000CF258);
}

void sub_10004D438(char *a1)
{
}

void sub_10004D444(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  swift_beginAccess(a2 + 24, v9, 33LL, 0LL);
  id v5 = v4;
  uint64_t v6 = sub_10003934C(a3);
  swift_endAccess(v9);
  if (v6)
  {
    AnyCancellable.cancel()();
    v9[0] = v4;
    id v7 = v5;
    uint64_t v8 = sub_10000360C(&qword_1000CF258);
    CheckedContinuation.resume(returning:)(v9, v8);

    swift_release(v6);
  }

  else
  {
  }

uint64_t sub_10004D500()
{
  return sub_10004E524(&qword_1000CF258);
}

uint64_t sub_10004D50C(uint64_t a1)
{
  return sub_10004E054( a1,  &qword_1000CF258,  (uint64_t (*)(uint64_t, void, unint64_t, unint64_t))sub_10004D444);
}

uint64_t sub_10004D520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_10004D53C, 0LL, 0LL);
}

uint64_t sub_10004D53C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
  *uint64_t v3 = v0;
  v3[1] = sub_10004D600;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 16,  0LL,  0LL,  0xD000000000000011LL,  0x80000001000A4FA0LL,  sub_10004DE2C,  v2,  v4);
}

uint64_t sub_10004D600()
{
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10004D684, 0LL, 0LL);
  }
  id v5 = *(void **)(v3 + 24);
  swift_task_dealloc(*(void *)(v3 + 56));
  *id v5 = *(void *)(v3 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10004D684()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004D6B8(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  swift_beginAccess(a2 + 24, v9, 33LL, 0LL);
  id v5 = v4;
  uint64_t v6 = sub_10003934C(a3);
  swift_endAccess(v9);
  if (v6)
  {
    AnyCancellable.cancel()();
    v9[0] = v5;
    id v7 = v5;
    uint64_t v8 = sub_10000360C(&qword_1000CF3A8);
    CheckedContinuation.resume(returning:)(v9, v8);

    swift_release(v6);
  }

  else
  {
  }

uint64_t sub_10004D76C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004D798(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_1000CF2B4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_1000193E4;
  return sub_100047988(a1, v5, v4);
}

uint64_t sub_10004D7FC(void **a1)
{
  return sub_100047BFC(a1, v1);
}

uint64_t sub_10004D808()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1000CF2CC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000193E4;
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CF014);
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000193E4;
  return sub_10004367C(v0 + 40);
}

uint64_t sub_10004D888()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1000CF2E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000193E4;
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CF014);
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000193E4;
  return sub_10004367C(v0 + 40);
}

uint64_t sub_10004D904(void *a1)
{
  return sub_10003DC00( a1,  *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24),  *(uint64_t **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

void *sub_10004D918(void *a1)
{
  return a1;
}

uint64_t sub_10004D94C(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_10004D964()
{
  return sub_10004E9A4(&qword_1000CF300);
}

uint64_t sub_10004D970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF300,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoStartLagunaSessionResponse,  &qword_1000CF308,  (uint64_t)&protocol conformance descriptor for NCProtoStartLagunaSessionResponse);
}

uint64_t sub_10004D998()
{
  __int128 v2 = (void *)swift_task_alloc(dword_1000CF314);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *__int128 v2 = v1;
  v2[1] = sub_10000C2B8;
  __int128 v3 = (void *)swift_task_alloc(dword_1000CF014);
  v2[2] = v3;
  *__int128 v3 = v2;
  v3[1] = sub_1000193E4;
  return sub_10004367C(v0 + 40);
}

uint64_t sub_10004DA14()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10004DA48()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CF324);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000193E4;
  v5[15] = v3;
  v5[16] = v4;
  v5[14] = v2;
  return swift_task_switch(sub_10004056C, v4, 0LL);
}

uint64_t sub_10004DABC()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1000CF334);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000193E4;
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CF014);
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000193E4;
  return sub_10004367C(v0 + 40);
}

uint64_t sub_10004DB3C()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10004DBA0()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1000CF344);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000193E4;
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CF014);
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000193E4;
  return sub_10004367C(v0 + 40);
}

uint64_t sub_10004DC20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc(dword_1000CF35C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1000CF358 + dword_1000CF358))( a1,  v4,  v5,  v6);
}

uint64_t sub_10004DCA4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004DCC8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF36C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000CF368
                                                                              + dword_1000CF368))( a1,  v4,  v5,  v7,  v6);
}

uint64_t sub_10004DD4C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for ContinuousClock(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100049A04, 0LL, 0LL);
}

uint64_t sub_10004DDAC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CF39C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000C2B8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000CF398 + dword_1000CF398))( a1,  v4,  v5,  v6);
}

uint64_t sub_10004DE2C(uint64_t a1)
{
  return sub_100049FE4( a1,  v1[2],  v1[3],  v1[4],  &qword_1000CF3A8,  (uint64_t)&unk_1000C4680,  (uint64_t)sub_10004DE74,  (uint64_t)&unk_1000C4698);
}

uint64_t sub_10004DE68()
{
  return sub_10004E38C(&qword_1000CF3A8);
}

uint64_t sub_10004DE74()
{
  return sub_10004DE88( &qword_1000CF3A8,  (uint64_t (*)(void, unint64_t, unint64_t, void))sub_10004AFFC);
}

uint64_t sub_10004DE88( uint64_t *a1, uint64_t (*a2)(void, unint64_t, unint64_t, void))
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(sub_10000360C(a1) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return a2( *(void *)(v2 + 16),  v2 + v5,  v2 + v8,  *(void *)(v2 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10004DF14()
{
  return sub_10004E524(&qword_1000CF3A8);
}

uint64_t sub_10004DF20()
{
  return sub_10004DF2C(&qword_1000CF3A8);
}

uint64_t sub_10004DF2C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a1) - 8) + 80LL);
  return sub_10004BF10(*(void *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_10004DF9C()
{
  return sub_10004E524(&qword_1000CF3A8);
}

void sub_10004DFA8(char *a1)
{
}

void sub_10004DFB4(char *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a2) - 8) + 80LL);
  sub_10004C2F4(*a1, *(void *)(v2 + 16), v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t sub_10004E034()
{
  return sub_10004E524(&qword_1000CF3A8);
}

uint64_t sub_10004E040(uint64_t a1)
{
  return sub_10004E054( a1,  &qword_1000CF3A8,  (uint64_t (*)(uint64_t, void, unint64_t, unint64_t))sub_10004D6B8);
}

uint64_t sub_10004E054( uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t, unint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a2) - 8) + 80LL);
  return a3(a1, *(void *)(v3 + 16), v3 + v7, v3 + ((v7 + v8 + v9) & ~v9));
}

uint64_t sub_10004E0DC()
{
  return sub_10004E38C(&qword_1000CF3D8);
}

uint64_t sub_10004E0E8()
{
  return sub_10004DE88( &qword_1000CF3D8,  (uint64_t (*)(void, unint64_t, unint64_t, void))sub_10004A2F4);
}

uint64_t sub_10004E0FC()
{
  return sub_10004E524(&qword_1000CF3D8);
}

uint64_t sub_10004E108()
{
  return sub_10004E124( &qword_1000CF3D8,  &qword_1000CF410,  (uint64_t (*)(void))&type metadata accessor for NCProtoDeviceTokenResponse);
}

uint64_t sub_10004E124(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a1) - 8) + 80LL);
  return sub_10004C00C(*(void *)(v3 + 16), v3 + v8, v3 + ((v8 + v9 + v10) & ~v10), a2, a3, a1);
}

uint64_t sub_10004E1AC()
{
  return sub_10004E524(&qword_1000CF3D8);
}

uint64_t sub_10004E1B8(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(sub_10000360C(&qword_1000CF3D8) - 8) + 80LL);
  return sub_10004C124(*a1, *(void *)(v1 + 16), v1 + v4, v1 + ((v5 + v6) & ~v6));
}

uint64_t sub_10004E228()
{
  return sub_10004E524(&qword_1000CF3D8);
}

uint64_t sub_10004E234(uint64_t a1)
{
  return sub_10004E600( a1,  &qword_1000CF3D8,  (uint64_t (*)(void))&type metadata accessor for NCProtoDeviceTokenResponse,  &qword_1000CF410);
}

uint64_t sub_10004E254()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004E280(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 32);
  unint64_t v5 = (void *)swift_task_alloc(dword_1000CF434);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_1000193E4;
  unint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc(v4[1]);
  _OWORD v5[2] = v6;
  void *v6 = v5;
  v6[1] = sub_10000C2B8;
  return v8(a1);
}

uint64_t sub_10004E308(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc(dword_1000CF444);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_1000499A4(a1, v4, v5, v7, v6);
}

uint64_t sub_10004E380()
{
  return sub_10004E38C(&qword_1000CF458);
}

uint64_t sub_10004E38C(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = sub_10000360C(a1);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + v10) & ~v10;
  uint64_t v12 = v5 | v10 | 7;
  unint64_t v13 = (*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v11, v8);
  swift_release(*(void *)(v1 + v13));
  return swift_deallocObject(v1, v13 + 8, v12);
}

uint64_t sub_10004E460()
{
  return sub_10004DE88( &qword_1000CF458,  (uint64_t (*)(void, unint64_t, unint64_t, void))sub_10004B680);
}

uint64_t sub_10004E474()
{
  return sub_10004E524(&qword_1000CF458);
}

uint64_t sub_10004E480()
{
  return sub_10004E124( &qword_1000CF458,  &qword_1000CF490,  (uint64_t (*)(void))&type metadata accessor for NCProtoJoinEvent);
}

uint64_t sub_10004E49C()
{
  return sub_10004E524(&qword_1000CF458);
}

uint64_t sub_10004E4A8(char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(sub_10000360C(&qword_1000CF458) - 8) + 80LL);
  return sub_10004C470(*a1, *(void *)(v1 + 16), v1 + v4, v1 + ((v5 + v6) & ~v6));
}

uint64_t sub_10004E518()
{
  return sub_10004E524(&qword_1000CF458);
}

uint64_t sub_10004E524(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = sub_10000360C(a1);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + v10) & ~v10;
  uint64_t v12 = v11 + *(void *)(v9 + 64);
  uint64_t v13 = v5 | v10 | 7;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v11, v8);
  return swift_deallocObject(v1, v12, v13);
}

uint64_t sub_10004E5E4(uint64_t a1)
{
  return sub_10004E600( a1,  &qword_1000CF458,  (uint64_t (*)(void))&type metadata accessor for NCProtoJoinEvent,  &qword_1000CF490);
}

uint64_t sub_10004E600(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a2) - 8) + 80LL);
  return sub_10004C5B4(a1, *(void *)(v4 + 16), v4 + v10, v4 + ((v10 + v11 + v12) & ~v12), a3, a4, a2);
}

uint64_t sub_10004E698(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF4A8, (uint64_t)&unk_1000C4928, (uint64_t)sub_10004E6FC);
}

uint64_t sub_10004E6B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10003E140( a1,  *(void *)(v4 + 16),  *(unsigned __int8 *)(v4 + 24),  *(uint64_t **)(v4 + 32),  *(void *)(v4 + 40),  *(void *)(v4 + 48),  a2,  a3,  a4);
}

uint64_t sub_10004E6F0()
{
  return sub_10004E9A4(&qword_1000CF4A8);
}

uint64_t sub_10004E6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF4A8,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddConversationParticipantsResponse,  &qword_1000CF4B0,  (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsResponse);
}

uint64_t sub_10004E720( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a4) - 8) + 80LL);
  return sub_10003E698( a1,  a2,  a3,  *(void *)(v7 + 16),  *(unsigned __int8 *)(v7 + 24),  v7 + ((v15 + 25) & ~v15),  a5,  a4,  a6,  a7);
}

uint64_t sub_10004E7B4(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF4C0, (uint64_t)&unk_1000C4950, (uint64_t)sub_10004E7DC);
}

uint64_t sub_10004E7D0()
{
  return sub_10004E9A4(&qword_1000CF4C0);
}

uint64_t sub_10004E7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF4C0,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoGetImageForContactResponse,  &qword_1000CF4C8,  (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactResponse);
}

uint64_t sub_10004E800(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF4E0, (uint64_t)&unk_1000C4978, (uint64_t)sub_10004E828);
}

uint64_t sub_10004E81C()
{
  return sub_10004E9A4(&qword_1000CF4E0);
}

uint64_t sub_10004E828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF4E0,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoGetAddressableContactsResponse,  &qword_1000CF4E8,  (uint64_t)&protocol conformance descriptor for NCProtoGetAddressableContactsResponse);
}

uint64_t sub_10004E84C(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF500, (uint64_t)&unk_1000C49A0, (uint64_t)sub_10004E874);
}

uint64_t sub_10004E868()
{
  return sub_10004E9A4(&qword_1000CF500);
}

uint64_t sub_10004E874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF500,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoStartConversationResponse,  &qword_1000CF508,  (uint64_t)&protocol conformance descriptor for NCProtoStartConversationResponse);
}

uint64_t sub_10004E898(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF518, (uint64_t)&unk_1000C49C8, (uint64_t)sub_10004E8C0);
}

uint64_t sub_10004E8B4()
{
  return sub_10004E9A4(&qword_1000CF518);
}

uint64_t sub_10004E8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF518,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeclineContinuityCallResponse,  &qword_1000CF520,  (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallResponse);
}

uint64_t sub_10004E8E4(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF538, (uint64_t)&unk_1000C49F0, (uint64_t)sub_10004E90C);
}

uint64_t sub_10004E900()
{
  return sub_10004E9A4(&qword_1000CF538);
}

uint64_t sub_10004E90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF538,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoJoinActiveConversationResponse,  &qword_1000CF540,  (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationResponse);
}

uint64_t sub_10004E930(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF550, (uint64_t)&unk_1000C4A18, (uint64_t)sub_10004E958);
}

uint64_t sub_10004E94C()
{
  return sub_10004E9A4(&qword_1000CF550);
}

uint64_t sub_10004E958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF550,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoPullLagunaSessionToTVResponse,  &qword_1000CF558,  (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVResponse);
}

uint64_t sub_10004E97C(uint64_t a1)
{
  return sub_10004E6B4(a1, &qword_1000CF570, (uint64_t)&unk_1000C4A40, (uint64_t)sub_10004EA14);
}

uint64_t sub_10004E998()
{
  return sub_10004E9A4(&qword_1000CF570);
}

uint64_t sub_10004E9A4(uint64_t *a1)
{
  uint64_t v2 = sub_10000360C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 25) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10004EA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E720( a1,  a2,  a3,  &qword_1000CF570,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddMemberResponse,  &qword_1000CF578,  (uint64_t)&protocol conformance descriptor for NCProtoAddMemberResponse);
}

uint64_t sub_10004EA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004EA7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004EAC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004EB54(uint64_t a1)
{
  uint64_t result = sub_10007A690(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32)) {
    return 2LL;
  }
  else {
    return sub_10009CC38(result, v3, 0LL, a1) & 1;
  }
}

id related decl 'e' for TUNeighborhoodActivityConduitError.init(_:underlying:)(uint64_t a1, uint64_t a2)
{
  if (a2) {
    char v4 = (void *)_convertErrorToNSError(_:)(a2);
  }
  else {
    char v4 = 0LL;
  }
  id v5 = (id)TUMakeNeighborhoodConduitError(a1, v4);
  swift_errorRelease(a2);

  return v5;
}

uint64_t sub_10004EC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10000BFC8(a1, (uint64_t *)&unk_1000CF840);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_1000C4FA0, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    id v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    id v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000CE500, v16);
}

uint64_t sub_10004ED6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004EDA4(a1, a2, a3, (uint64_t)&unk_1000C4CD0, &qword_1000CF380, (uint64_t)&unk_1000CF8B0);
}

uint64_t sub_10004ED88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004EDA4(a1, a2, a3, (uint64_t)&unk_1000C54A0, &qword_1000CFF18, (uint64_t)&unk_1000CFF10);
}

uint64_t sub_10004EDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1LL, v12) == 1)
  {
    sub_10000BFC8(a1, (uint64_t *)&unk_1000CF840);
    uint64_t v14 = 7168LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    uint64_t v14 = v21 | 0x1C00LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
LABEL_6:
  uint64_t v22 = swift_allocObject(a4, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  uint64_t v23 = sub_10000360C(a5);
  if (v20 | v18)
  {
    v26[0] = 0LL;
    v26[1] = 0LL;
    uint64_t v24 = v26;
    v26[2] = v18;
    v26[3] = v20;
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  return swift_task_create(v14, v24, v23, a6, v22);
}

uint64_t sub_10004EF00(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  if (*(void *)(a4 + 16))
  {
    Hasher.init(_seed:)(v23, *(void *)(a4 + 40));
    unint64_t v8 = sub_10000C47C(a1, a2, a3);
    uint64_t v10 = v9;
    String.hash(into:)(v23, v8, v9);
    swift_bridgeObjectRelease(v10);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1LL << *(_BYTE *)(a4 + 32);
    unint64_t v13 = v11 & ~v12;
    uint64_t v14 = a4 + 56;
    if (((*(void *)(a4 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
    {
      uint64_t v15 = ~v12;
      uint64_t v16 = *(void *)(a4 + 48);
      do
      {
        id v17 = (uint64_t *)(v16 + 24 * v13);
        uint64_t v18 = *v17;
        uint64_t v19 = (void *)v17[1];
        int v20 = *((unsigned __int8 *)v17 + 16);
        if (v20)
        {
          if (v20 == 1)
          {
            if (a3 != 1) {
              goto LABEL_5;
            }
          }

          else if (a3 != 2)
          {
            goto LABEL_5;
          }
        }

        else if (a3)
        {
          goto LABEL_5;
        }

        BOOL v21 = v18 == a1 && v19 == a2;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a1, a2, 0LL) & 1) != 0) {
          return 1LL;
        }
LABEL_5:
        unint64_t v13 = (v13 + 1) & v15;
      }

      while (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
    }
  }

  return 0LL;
}

void sub_10004F050(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_10004F0B0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  v1[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[7] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[8] = swift_task_alloc(v6);
  void v1[9] = swift_task_alloc(v6);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v7 = qword_1000D35E0;
  v1[10] = qword_1000D35E0;
  return swift_task_switch(sub_10004F178, v7, 0LL);
}

uint64_t sub_10004F178()
{
  id v1 = [(id)objc_opt_self(PBSUserProfileManager) sharedInstance];
  id v2 = [v1 userProfilesSnapshot];

  id v3 = [v2 selectedUserProfile];
  if (!v3)
  {
    unint64_t v23 = sub_100003A7C((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_30;
  }

  uint64_t v4 = *(void *)(v0 + 16);

  uint64_t v5 = *(void *)(v4 + OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos);
  *(void *)(v0 + 88) = v5;
  char v6 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v0 + 160) = v6;
  uint64_t v7 = -1LL;
  uint64_t v8 = -1LL << v6;
  if (-(-1LL << v6) < 64) {
    uint64_t v7 = ~(-1LL << -(char)(-1LL << v6));
  }
  unint64_t v9 = v7 & *(void *)(v5 + 56);
  uint64_t v10 = OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager;
  *(void *)(v0 + 96) = OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager;
  *(void *)(v0 + 104) = _swiftEmptyDictionarySingleton;
  Swift::Int v11 = (void *)swift_bridgeObjectRetain(v5);
  if (!v9)
  {
    unint64_t v24 = 63 - v8;
    if ((unint64_t)(63 - v8) > 0x7F)
    {
      unint64_t v25 = v11[8];
      if (v25)
      {
        uint64_t v12 = 1LL;
LABEL_13:
        uint64_t v14 = (v25 - 1) & v25;
        unint64_t v13 = __clz(__rbit64(v25)) + (v12 << 6);
        goto LABEL_6;
      }

      if (v24 >= 0xC0)
      {
        unint64_t v25 = v11[9];
        if (v25)
        {
          uint64_t v12 = 2LL;
          goto LABEL_13;
        }

        if (v24 >= 0x100)
        {
          unint64_t v25 = v11[10];
          if (v25)
          {
            uint64_t v12 = 3LL;
            goto LABEL_13;
          }

          if (v24 > 0x13F)
          {
            unint64_t v25 = v11[11];
            if (v25)
            {
              uint64_t v12 = 4LL;
              goto LABEL_13;
            }

            uint64_t v26 = 0LL;
            uint64_t v27 = v24 >> 6;
            if (v27 <= 5) {
              uint64_t v27 = 5LL;
            }
            uint64_t v28 = v27 - 5;
            while (v28 != v26)
            {
              unint64_t v25 = v11[v26++ + 12];
              if (v25)
              {
                uint64_t v12 = v26 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }

    swift_release(v11);
    unint64_t v23 = *(void *)(v0 + 104);
LABEL_30:
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 40);
    swift_task_dealloc(*(void *)(v0 + 72));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v23);
  }

  uint64_t v12 = 0LL;
  unint64_t v13 = __clz(__rbit64(v9));
  uint64_t v14 = (v9 - 1) & v9;
LABEL_6:
  *(void *)(v0 + 112) = v12;
  *(void *)(v0 + 120) = v14;
  uint64_t v15 = *(void *)(v0 + 64);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v18 = *(void *)(v0 + 16);
  sub_100018CFC( v11[6] + *(void *)(*(void *)(v0 + 56) + 72LL) * v13,  v16,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  sub_10004EA7C(v16, v15, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  *(void *)(v0 + 128) = *(void *)(v18 + v10);
  uint64_t v19 = *(void **)(v15 + *(int *)(v17 + 24));
  *(void *)(v0 + 136) = v19;
  uint64_t v20 = qword_1000CD638;
  id v21 = v19;
  if (v20 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10004F440, qword_1000D35C8, 0LL);
}

uint64_t sub_10004F440()
{
  id v1 = (void *)v0[17];
  uint64_t v2 = v0[10];
  sub_1000246D0(v1);
  v0[18] = v3;

  return swift_task_switch(sub_10004F494, v2, 0LL);
}

uint64_t sub_10004F494()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = qword_1000D35C8;
    uint64_t v2 = sub_10004F6AC;
    return swift_task_switch(v2, v1, 0LL);
  }

  uint64_t result = sub_10000BF5C( *(void *)(v0 + 64),  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  int64_t v4 = *(void *)(v0 + 112);
  unint64_t v5 = *(void *)(v0 + 120);
  if (v5)
  {
    uint64_t v6 = (v5 - 1) & v5;
    unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t result = *(void *)(v0 + 88);
LABEL_5:
    *(void *)(v0 + 112) = v4;
    *(void *)(v0 + 120) = v6;
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 16);
    sub_100018CFC( *(void *)(result + 48) + *(void *)(*(void *)(v0 + 56) + 72LL) * v7,  v10,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    sub_10004EA7C(v10, v9, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    *(void *)(v0 + 128) = *(void *)(v12 + v8);
    unint64_t v13 = *(void **)(v9 + *(int *)(v11 + 24));
    *(void *)(v0 + 136) = v13;
    uint64_t v14 = qword_1000CD638;
    id v15 = v13;
    if (v14 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    uint64_t v1 = qword_1000D35C8;
    uint64_t v2 = sub_10004F440;
    return swift_task_switch(v2, v1, 0LL);
  }

  int64_t v16 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v17 = (unint64_t)((1LL << *(_BYTE *)(v0 + 160)) + 63) >> 6;
    uint64_t result = *(void *)(v0 + 88);
    if (v16 >= v17) {
      goto LABEL_23;
    }
    uint64_t v18 = result + 56;
    unint64_t v19 = *(void *)(result + 56 + 8 * v16);
    ++v4;
    if (v19)
    {
LABEL_12:
      uint64_t v6 = (v19 - 1) & v19;
      unint64_t v7 = __clz(__rbit64(v19)) + (v4 << 6);
      goto LABEL_5;
    }

    int64_t v4 = v16 + 1;
    if (v16 + 1 >= v17) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v4);
    if (v19) {
      goto LABEL_12;
    }
    int64_t v4 = v16 + 2;
    if (v16 + 2 >= v17) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v4);
    if (v19) {
      goto LABEL_12;
    }
    int64_t v20 = v16 + 3;
    if (v20 >= v17)
    {
LABEL_23:
      swift_release(result);
      uint64_t v21 = *(void *)(v0 + 104);
      uint64_t v22 = *(void *)(v0 + 64);
      uint64_t v23 = *(void *)(v0 + 40);
      swift_task_dealloc(*(void *)(v0 + 72));
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
    }

    unint64_t v19 = *(void *)(v18 + 8 * v20);
    if (v19)
    {
      int64_t v4 = v20;
      goto LABEL_12;
    }

    while (1)
    {
      int64_t v4 = v20 + 1;
      if (__OFADD__(v20, 1LL)) {
        break;
      }
      if (v4 >= v17) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v4);
      ++v20;
      if (v19) {
        goto LABEL_12;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10004F6AC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 152) = sub_10000CE6C();
  return swift_task_switch(sub_10004F6F0, v1, 0LL);
}

uint64_t sub_10004F6F0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4 + *(int *)(*(void *)(v0 + 48) + 20LL), v6);
  id v8 = v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_100077AD8((uint64_t)v8, v5, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);

  swift_release(v1);
  uint64_t result = sub_10000BF5C(v4, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  int64_t v11 = *(void *)(v0 + 112);
  unint64_t v12 = *(void *)(v0 + 120);
  *(void *)(v0 + 104) = v3;
  if (!v12)
  {
    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v24 = (unint64_t)((1LL << *(_BYTE *)(v0 + 160)) + 63) >> 6;
      uint64_t result = *(void *)(v0 + 88);
      if (v23 >= v24) {
        goto LABEL_20;
      }
      uint64_t v25 = result + 56;
      unint64_t v26 = *(void *)(result + 56 + 8 * v23);
      ++v11;
      if (v26)
      {
LABEL_9:
        uint64_t v13 = (v26 - 1) & v26;
        unint64_t v14 = __clz(__rbit64(v26)) + (v11 << 6);
        goto LABEL_3;
      }

      int64_t v11 = v23 + 1;
      if (v23 + 1 >= v24) {
        goto LABEL_20;
      }
      unint64_t v26 = *(void *)(v25 + 8 * v11);
      if (v26) {
        goto LABEL_9;
      }
      int64_t v11 = v23 + 2;
      if (v23 + 2 >= v24) {
        goto LABEL_20;
      }
      unint64_t v26 = *(void *)(v25 + 8 * v11);
      if (v26) {
        goto LABEL_9;
      }
      int64_t v27 = v23 + 3;
      if (v27 >= v24)
      {
LABEL_20:
        swift_release(result);
        uint64_t v28 = *(void *)(v0 + 104);
        uint64_t v29 = *(void *)(v0 + 64);
        uint64_t v30 = *(void *)(v0 + 40);
        swift_task_dealloc(*(void *)(v0 + 72));
        swift_task_dealloc(v29);
        swift_task_dealloc(v30);
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v28);
      }

      unint64_t v26 = *(void *)(v25 + 8 * v27);
      if (v26)
      {
        int64_t v11 = v27;
        goto LABEL_9;
      }

      while (1)
      {
        int64_t v11 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          break;
        }
        if (v11 >= v24) {
          goto LABEL_20;
        }
        unint64_t v26 = *(void *)(v25 + 8 * v11);
        ++v27;
        if (v26) {
          goto LABEL_9;
        }
      }
    }

    __break(1u);
    return result;
  }

  uint64_t v13 = (v12 - 1) & v12;
  unint64_t v14 = __clz(__rbit64(v12)) | (v11 << 6);
  uint64_t result = *(void *)(v0 + 88);
LABEL_3:
  *(void *)(v0 + 112) = v11;
  *(void *)(v0 + 120) = v13;
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v17 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 48);
  uint64_t v19 = *(void *)(v0 + 16);
  sub_100018CFC( *(void *)(result + 48) + *(void *)(*(void *)(v0 + 56) + 72LL) * v14,  v17,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  sub_10004EA7C(v17, v16, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  *(void *)(v0 + 128) = *(void *)(v19 + v15);
  int64_t v20 = *(void **)(v16 + *(int *)(v18 + 24));
  *(void *)(v0 + 136) = v20;
  uint64_t v21 = qword_1000CD638;
  id v22 = v20;
  if (v21 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10004F440, qword_1000D35C8, 0LL);
}

uint64_t sub_10004F978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  uint64_t v6 = sub_10000360C(&qword_1000CF8C8);
  v5[20] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for HandoffState(0LL);
  v5[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[22] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[23] = swift_task_alloc(v9);
  v5[24] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for HandoffInfo(0LL);
  v5[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[26] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[27] = swift_task_alloc(v12);
  v5[28] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v5[29] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[30] = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  v5[31] = v15;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[32] = swift_task_alloc(v16);
  v5[33] = swift_task_alloc(v16);
  uint64_t v17 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v5[34] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_10000360C(&qword_1000CFE58);
  v5[35] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10000360C(&qword_1000CDE48);
  v5[36] = v19;
  unint64_t v20 = (*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[37] = swift_task_alloc(v20);
  v5[38] = swift_task_alloc(v20);
  v5[39] = swift_task_alloc(v20);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v21 = qword_1000D35E0;
  v5[40] = qword_1000D35E0;
  return swift_task_switch(sub_10004FB44, v21, 0LL);
}

uint64_t sub_10004FB44()
{
  *(void *)(v0 + 328) = *(void *)(*(void *)(v0 + 152) + OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10004FBB8, qword_1000D35C8, 0LL);
}

uint64_t sub_10004FBB8()
{
  uint64_t v1 = *(void *)(v0 + 320);
  sub_1000246D0(*(void **)(v0 + 136));
  *(void *)(v0 + 336) = v2;
  return swift_task_switch(sub_10004FBFC, v1, 0LL);
}

uint64_t sub_10004FBFC()
{
  uint64_t v1 = *(void *)(v0 + 336);
  if (!v1)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v17 = *(void **)(v0 + 136);
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v18, (uint64_t)qword_1000D3620);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    id v22 = *(void **)(v0 + 136);
    if (v21)
    {
      int64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v119 = swift_slowAlloc(32LL, -1LL);
      v123[0] = v119;
      *(_DWORD *)int64_t v23 = 136315138;
      id v24 = v22;
      id v25 = [v24 description];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      unint64_t v28 = v27;

      *(void *)(v0 + 96) = sub_10009BE3C(v26, v28, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v28);

      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "[Handoff][PullToTV] Rejecting join request for invalid deviceHandle: %s.",  v23,  0xCu);
      swift_arrayDestroy(v119, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
    }

    id v121 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v121);
    goto LABEL_31;
  }

  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  *(void *)(v0 + 344) = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  uint64_t v7 = v5 + v6;
  swift_beginAccess(v5 + v6, v0 + 40, 0LL, 0LL);
  sub_100005318(v7, v2, &qword_1000CDE48);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  *(void *)(v0 + 352) = v8;
  LODWORD(v3) = v8(v2, 1LL, v3);
  sub_10000BFC8(v2, &qword_1000CDE48);
  if ((_DWORD)v3 != 1)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v30 = *(void *)(v0 + 232);
    uint64_t v31 = *(void *)(v0 + 240);
    uint64_t v32 = *(void **)(v0 + 152);
    uint64_t v33 = *(void *)(v0 + 128);
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v34, (uint64_t)qword_1000D3620);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v29, v33, v30);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v108 = *(void *)(v0 + 304);
      uint64_t v110 = *(void *)(v0 + 288);
      uint64_t v37 = *(void *)(v0 + 256);
      uint64_t v38 = *(void *)(v0 + 232);
      uint64_t v107 = *(void *)(v0 + 240);
      uint64_t v112 = *(void **)(v0 + 152);
      uint64_t v120 = v7;
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v116 = v1;
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      v123[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315394;
      uint64_t v41 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v38, v41);
      unint64_t v44 = v43;
      *(void *)(v0 + 104) = sub_10009BE3C(v42, v43, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v44);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v37, v38);
      *(_WORD *)(v39 + 12) = 2080;
      sub_100005318(v120, v108, &qword_1000CDE48);
      uint64_t v45 = String.init<A>(describing:)(v108, v110);
      unint64_t v47 = v46;
      *(void *)(v0 + 112) = sub_10009BE3C(v45, v46, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease(v47);

      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "[Handoff][PullToTV] Rejecting join request for %s because we're already in a session: %s.",  (uint8_t *)v39,  0x16u);
      swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v48 = v40;
      uint64_t v1 = v116;
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      uint64_t v97 = *(void **)(v0 + 152);
      (*(void (**)(void, void))(*(void *)(v0 + 240) + 8LL))( *(void *)(v0 + 256),  *(void *)(v0 + 232));
    }

    id v122 = (id)TUMakeNeighborhoodConduitError(20LL, 0LL);
    swift_willThrow(v122);
    swift_release(v1);
LABEL_31:
    uint64_t v98 = *(void *)(v0 + 304);
    uint64_t v99 = *(void *)(v0 + 296);
    uint64_t v101 = *(void *)(v0 + 272);
    uint64_t v100 = *(void *)(v0 + 280);
    uint64_t v103 = *(void *)(v0 + 256);
    uint64_t v102 = *(void *)(v0 + 264);
    uint64_t v105 = *(void *)(v0 + 216);
    uint64_t v104 = *(void *)(v0 + 224);
    uint64_t v106 = *(void *)(v0 + 192);
    uint64_t v114 = *(void *)(v0 + 184);
    uint64_t v117 = *(void *)(v0 + 160);
    swift_task_dealloc(*(void *)(v0 + 312));
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v10 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(*(void *)(v0 + 152) + OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos);
  uint64_t v12 = swift_task_alloc(32LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v10;
  swift_bridgeObjectRetain(v11);
  sub_10003A81C((uint64_t (*)(char *))sub_100082514, v11, v9);
  swift_bridgeObjectRelease(v11);
  swift_task_dealloc(v12);
  uint64_t v13 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v9, 1LL, v13);
  uint64_t v15 = *(void *)(v0 + 280);
  uint64_t v115 = v1;
  uint64_t v118 = v7;
  if (v14 == 1)
  {
    sub_10000BFC8(v15, &qword_1000CFE58);
    id v16 = 0LL;
  }

  else
  {
    uint64_t v49 = *(void **)(v15 + *(int *)(v13 + 24));
    uint64_t v50 = *(void *)(v15 + 8);
    uint64_t v51 = *(void *)(v15 + *(int *)(v13 + 32));
    id v52 = objc_allocWithZone(&OBJC_CLASS___TUNearbyConversationInfo);
    swift_bridgeObjectRetain(v50);
    id v53 = v49;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    id v16 = [v52 initWithConversationUUID:isa userProfileIdentifier:v55 deviceHandle:v53 avMode:v51];

    sub_10000BF5C(v15, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  }

  *(void *)(v0 + 360) = v16;
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 152)
                                    + OBJC_IVAR___CSDNeighborhoodActivityConduit_pullRequestService);
  sub_10008CEAC(v16);
  int v56 = MGGetBoolAnswer(@"DeviceSupportsLaguna");

  if (v56
    && (uint64_t v57 = *(void *)(v0 + 144),
        id v58 = *(id *)(v0 + 136),
        id v59 = [v58 capabilities],
        unsigned int v60 = [v59 isLagunaCapable],
        v58,
        v59,
        v60)
    && v57 != 1)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v61 = type metadata accessor for Logger(0LL);
    uint64_t v62 = sub_10000ADF4(v61, (uint64_t)qword_1000D3620);
    *(void *)(v0 + 424) = v62;
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "[Handoff][PullToTV] Beginning active pull to TV", v65, 2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    uint64_t v66 = (void *)swift_task_alloc(dword_1000CFE74);
    *(void *)(v0 + 432) = v66;
    *uint64_t v66 = v0;
    v66[1] = sub_10005099C;
    return sub_10005A89C(*(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144));
  }

  else
  {
    uint64_t v68 = *(void *)(v0 + 264);
    uint64_t v69 = *(void *)(v0 + 272);
    uint64_t v70 = *(void *)(v0 + 240);
    uint64_t v71 = *(void *)(v0 + 248);
    uint64_t v72 = *(void *)(v0 + 232);
    uint64_t v109 = *(void **)(v0 + 152);
    uint64_t v111 = *(void *)(v0 + 144);
    uint64_t v113 = v69;
    uint64_t v73 = *(void *)(v0 + 128);
    uint64_t v74 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56LL))(v69, 1LL, 1LL, v74);
    uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16);
    *(void *)(v0 + 376) = v75;
    v75(v68, v73, v72);
    uint64_t v76 = qword_1000D35E0;
    uint64_t v78 = sub_10001CFD8( &qword_1000CF800,  v77,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
    uint64_t v79 = *(unsigned __int8 *)(v70 + 80);
    uint64_t v80 = (v79 + 40) & ~v79;
    unint64_t v81 = (v71 + v80 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v82 = (v81 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v83 = (char *)swift_allocObject(&unk_1000C53D8, v82 + 8, v79 | 7);
    *((void *)v83 + 2) = v76;
    *((void *)v83 + 3) = v78;
    *((void *)v83 + 4) = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(&v83[v80], v68, v72);
    *(void *)&v83[v81] = v115;
    *(void *)&v83[v82] = v111;
    id v84 = v109;
    swift_retain(v115);
    swift_retain(v76);
    uint64_t v85 = sub_100051AC4(v113, (uint64_t)&unk_1000CFE68, (uint64_t)v83, type metadata accessor for HandoffInfo);
    *(void *)(v0 + 384) = v85;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v86 = type metadata accessor for Logger(0LL);
    uint64_t v87 = sub_10000ADF4(v86, (uint64_t)qword_1000D3620);
    *(void *)(v0 + 392) = v87;
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v90 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "[Handoff][PullExpanse] Beginning lightweight pull to TV",  v90,  2u);
      swift_slowDealloc(v90, -1LL, -1LL);
    }

    uint64_t v91 = *(uint64_t **)(v0 + 304);
    uint64_t v92 = *(void *)(v0 + 168);
    uint64_t v93 = *(void *)(v0 + 176);

    *uint64_t v91 = v85;
    swift_storeEnumTagMultiPayload(v91, v92, 0LL);
    uint64_t v94 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v93 + 56);
    *(void *)(v0 + 400) = v94;
    v94(v91, 0LL, 1LL, v92);
    swift_beginAccess(v118, v0 + 64, 33LL, 0LL);
    swift_retain(v85);
    sub_10007B02C((uint64_t)v91, v118);
    swift_endAccess(v0 + 64);
    sub_100053C78();
    sub_10000BFC8((uint64_t)v91, &qword_1000CDE48);
    uint64_t v95 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 408) = v95;
    uint64_t v96 = sub_10000360C(&qword_1000CF8D0);
    *uint64_t v95 = v0;
    v95[1] = sub_100050700;
    return Task.value.getter( *(void *)(v0 + 224),  v85,  *(void *)(v0 + 200),  v96,  &protocol self-conformance witness table for Error);
  }

uint64_t sub_100050700()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 408);
  *(void *)(*v1 + 4swift_weakDestroy(v0 + 16) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100051160;
  }
  else {
    uint64_t v4 = sub_100050764;
  }
  return swift_task_switch(v4, *(void *)(v2 + 320), 0LL);
}

uint64_t sub_100050764(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[Handoff][PullExpanse] Successfully performed lightweight pull",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 400);
  uint64_t v27 = *(void *)(v1 + 384);
  uint64_t v6 = *(void *)(v1 + 344);
  uint64_t v7 = *(void *)(v1 + 304);
  uint64_t v8 = *(void *)(v1 + 224);
  uint64_t v9 = *(void *)(v1 + 200);
  uint64_t v10 = *(void *)(v1 + 168);
  uint64_t v11 = *(void *)(v1 + 152);

  sub_100018CFC(v8, v7, type metadata accessor for HandoffInfo);
  swift_storeEnumTagMultiPayload(v7, v10, 1LL);
  v5(v7, 0LL, 1LL, v10);
  swift_beginAccess(v11 + v6, v1 + 16, 33LL, 0LL);
  sub_10007B02C(v7, v11 + v6);
  swift_endAccess(v1 + 16);
  sub_100053C78();
  sub_10000BFC8(v7, &qword_1000CDE48);
  swift_release(v27);
  uint64_t v12 = v8 + *(int *)(v9 + 24);
  uint64_t v13 = *(void **)(v1 + 360);
  uint64_t v14 = *(void *)(v1 + 336);
  uint64_t v15 = *(void *)(v1 + 304);
  uint64_t v16 = *(void *)(v1 + 312);
  uint64_t v17 = *(void *)(v1 + 296);
  uint64_t v19 = *(void *)(v1 + 272);
  uint64_t v18 = *(void *)(v1 + 280);
  uint64_t v22 = *(void *)(v1 + 264);
  uint64_t v23 = *(void *)(v1 + 256);
  uint64_t v20 = *(void *)(v1 + 224);
  uint64_t v24 = *(void *)(v1 + 216);
  uint64_t v25 = *(void *)(v1 + 192);
  uint64_t v26 = *(void *)(v1 + 184);
  uint64_t v28 = *(void *)(v1 + 160);
  (*(void (**)(void, uint64_t, void))(v1 + 376))(*(void *)(v1 + 120), v12, *(void *)(v1 + 232));
  sub_10000BF5C(v20, type metadata accessor for HandoffInfo);
  sub_10008D0DC(v13);
  swift_release(v14);

  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v20);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10005099C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 432);
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100051398;
  }
  else {
    uint64_t v4 = sub_100050A00;
  }
  return swift_task_switch(v4, *(void *)(v2 + 320), 0LL);
}

uint64_t sub_100050A00()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 168);
  sub_100005318(*(void *)(v0 + 152) + *(void *)(v0 + 344), v2, &qword_1000CDE48);
  int v4 = v1(v2, 1LL, v3);
  uint64_t v5 = *(void *)(v0 + 296);
  if (v4 == 1)
  {
    uint64_t v6 = sub_10000BFC8(v5, &qword_1000CDE48);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[Handoff][PullToTV] HandoffState unexpectedly unavailable.",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void **)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 336);

    id v24 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_willThrow(v24);
    sub_10008D0DC(v10);
    swift_release(v11);

    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 264);
    uint64_t v19 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v22 = *(void *)(v0 + 184);
    uint64_t v23 = *(void *)(v0 + 160);
    swift_task_dealloc(*(void *)(v0 + 312));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10004EA7C(v5, *(void *)(v0 + 192), type metadata accessor for HandoffState);
    return swift_task_switch(sub_100050C04, 0LL, 0LL);
  }

uint64_t sub_100050C04()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  sub_100018CFC(v0[24], v1, type metadata accessor for HandoffState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  int v4 = (uint64_t *)v0[23];
  if (EnumCaseMultiPayload == 1)
  {
    sub_10004EA7C((uint64_t)v4, v0[20], type metadata accessor for HandoffInfo);
    return swift_task_switch(sub_100050F80, v0[40], 0LL);
  }

  else
  {
    uint64_t v6 = *v4;
    v0[56] = *v4;
    uint64_t v7 = (uint64_t **)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[57] = (uint64_t)v7;
    uint64_t v8 = sub_10000360C(&qword_1000CF8D0);
    *uint64_t v7 = v0;
    v7[1] = (uint64_t *)sub_100050CE0;
    return Task.value.getter(v0[20], v6, v0[25], v8, &protocol self-conformance witness table for Error);
  }

uint64_t sub_100050CE0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 456LL);
  *(void *)(*(void *)v1 + 464LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100050D80;
  }
  else {
    uint64_t v3 = sub_100050D44;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100050D44()
{
  return swift_task_switch(sub_100050F80, *(void *)(v0 + 320), 0LL);
}

uint64_t sub_100050D80()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[40];
  swift_release(v0[56]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_100050DCC, v2, 0LL);
}

uint64_t sub_100050DCC()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56LL))( v2,  1LL,  1LL,  *(void *)(v0 + 200));
  sub_10000BF5C(v1, type metadata accessor for HandoffState);
  uint64_t v3 = sub_10000BFC8(v2, &qword_1000CF8C8);
  int v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[Handoff][PullToTV] HandoffState unexpectedly unavailable.",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void **)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 336);

  id v21 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
  swift_willThrow(v21);
  sub_10008D0DC(v7);
  swift_release(v8);

  uint64_t v9 = *(void *)(v0 + 304);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 272);
  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100050F80()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(v0 + 208) + 56LL))( v2,  0LL,  1LL,  *(void *)(v0 + 200));
  uint64_t v3 = sub_10004EA7C(v2, v1, type metadata accessor for HandoffInfo);
  int v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Handoff][PullToTV] Active pull to TV completed.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 200);

  sub_10000BF5C(v9, type metadata accessor for HandoffState);
  uint64_t v11 = v8 + *(int *)(v10 + 24);
  uint64_t v12 = *(void (**)(void, uint64_t, void))(v7 + 16);
  uint64_t v13 = *(void **)(v0 + 360);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 312);
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v22 = *(void *)(v0 + 264);
  uint64_t v23 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 224);
  uint64_t v25 = *(void *)(v0 + 192);
  uint64_t v26 = *(void *)(v0 + 184);
  uint64_t v27 = *(void *)(v0 + 160);
  v12(*(void *)(v0 + 120), v11, *(void *)(v0 + 232));
  sub_10000BF5C(v20, type metadata accessor for HandoffInfo);
  sub_10008D0DC(v13);
  swift_release(v14);

  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v20);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051160()
{
  uint64_t v1 = *(void *)(v0 + 416);
  swift_release(*(void *)(v0 + 384));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 416);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 88) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "[Handoff][PullExpanse] Failed to perform lightweight pull due to %@",  v6,  0xCu);
    uint64_t v9 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 416);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void **)(v0 + 360);
  uint64_t v13 = *(void *)(v0 + 336);

  uint64_t v14 = sub_10005A5D0(v11);
  swift_willThrow(v14);
  sub_10008D0DC(v12);
  swift_release(v13);

  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 272);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 224);
  uint64_t v23 = *(void *)(v0 + 192);
  uint64_t v25 = *(void *)(v0 + 184);
  uint64_t v26 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051398()
{
  uint64_t v1 = *(void **)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 336);
  sub_10008D0DC(v1);
  swift_release(v2);

  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051484()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v2);
  uint64_t v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = sub_10000360C(&qword_1000CDE48);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)&v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState, v32, 0LL, 0LL);
  sub_100005318(v8, (uint64_t)v7, &qword_1000CDE48);
  uint64_t v9 = type metadata accessor for HandoffState(0LL);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) == 1)
  {
    sub_10000BFC8((uint64_t)v7, &qword_1000CDE48);
  }

  else if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    sub_10000BF5C((uint64_t)v7, type metadata accessor for HandoffState);
  }

  else
  {
    uint64_t v10 = *v7;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000ADF4(v11, (uint64_t)qword_1000D3620);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Fulfilling request to cancel pending join conversation.",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    type metadata accessor for HandoffInfo(0LL);
    sub_10000360C(&qword_1000CF8D0);
    Task.cancel()();
    swift_release(v10);
  }

  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000ADF4(v16, (uint64_t)qword_1000D3620);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Sending cancel pending join conversation to nearby conversations",  v20,  2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v21 = *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_pullRequestService);
  swift_beginAccess(v21 + 16, v31, 1LL, 0LL);
  uint64_t v22 = *(void *)(v21 + 16);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
  uint64_t v23 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v4, 1LL, 1LL, v23);
  uint64_t v24 = qword_1000CD668;
  swift_retain(v21);
  if (v24 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v26 = qword_1000D35E0;
  uint64_t v27 = sub_10001CFD8( &qword_1000CF800,  v25,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v28 = (void *)swift_allocObject(&unk_1000C53B0, 48LL, 7LL);
  v28[2] = v26;
  void v28[3] = v27;
  void v28[4] = v22;
  v28[5] = v21;
  swift_retain(v26);
  uint64_t v29 = sub_10004EC20((uint64_t)v4, (uint64_t)&unk_1000CFE38, (uint64_t)v28);
  return swift_release(v29);
}

uint64_t sub_100051848()
{
  id v1 = [v0 knownIdentifiersByHandleType];
  uint64_t v2 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD8C8, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v3 = sub_100017D34( (unint64_t *)&qword_1000CF810,  (unint64_t *)&qword_1000CD8C8,  &OBJC_CLASS___NSNumber_ptr);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, &type metadata for String, v3);

  id v5 = [objc_allocWithZone(NSNumber) initWithInteger:2];
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16) && (unint64_t v7 = sub_100004DA4((uint64_t)v5), (v8 & 1) != 0))
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v7);
    uint64_t v10 = *v9;
    swift_bridgeObjectRetain(v9[1]);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  swift_bridgeObjectRelease(v4);
  return v10;
}

uint64_t sub_100051940(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for SHA512Digest(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SHA512(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2) {
    return 0LL;
  }
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  swift_bridgeObjectRetain(a2);
  v16._countAndFlagsBits = 43LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = a3;
  v17._object = a4;
  String.append(_:)(v17);
  SHA512.init()();
  uint64_t v18 = sub_1000539B0(&v23);
  SHA512.finalize()(v18);
  SHA512Digest.withUnsafeBytes<A>(_:)(&v22, sub_10005399C, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease(v24);
  uint64_t v19 = v22;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v19;
}

uint64_t sub_100051AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051AC4( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for ConduitDeviceManager.BleDiscoveryAssertion);
}

uint64_t sub_100051AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1LL, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_10000BFC8(a1, (uint64_t *)&unk_1000CF840);
    uint64_t v11 = 7168LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      uint64_t v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    uint64_t v11 = v18 | 0x1C00LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12) {
      goto LABEL_3;
    }
  }

  uint64_t v15 = 0LL;
  uint64_t v17 = 0LL;
LABEL_6:
  uint64_t v19 = a4(0LL);
  if (v17 | v15)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    uint64_t v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  return swift_task_create(v11, v20, v19, a2, a3);
}

uint64_t sub_100051BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000BFC8(a1, (uint64_t *)&unk_1000CF840);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      uint64_t v16 = 0LL;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v17 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (!v10) {
      goto LABEL_6;
    }
  }

  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  uint64_t v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13)) {
    goto LABEL_6;
  }
  v19[0] = 0LL;
  v19[1] = 0LL;
  uint64_t v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100051D2C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 552) = v5;
  *(_BYTE *)(v6 + 178) = a5;
  *(void *)(v6 + 544) = a4;
  *(void *)(v6 + 536) = a3;
  *(void *)(v6 + 528) = a2;
  *(_BYTE *)(v6 + 177) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v7 = qword_1000D35C8;
  *(void *)(v6 + 560) = qword_1000D35C8;
  return swift_task_switch(sub_100051DA8, v7, 0LL);
}

uint64_t sub_100051DA8()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void **)(v0 + 544);
  uint64_t v3 = *(void *)(v0 + 536);
  char v4 = *(_BYTE *)(v0 + 178);
  swift_beginAccess(v1 + 48, v0 + 416, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 568) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoEndLagunaSessionEvent(0LL);
    uint64_t v8 = sub_10001CFD8( (unint64_t *)&unk_1000CFAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoEndLagunaSessionEvent,  (uint64_t)&protocol conformance descriptor for NCProtoEndLagunaSessionEvent);
    *(void *)(v0 + 576) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 584) = v9;
    uint64_t v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 592) = v25;
    void *v25 = v0;
    v25[1] = sub_100052128;
    return sub_1000336A8(v0 + 184, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 544);
    uint64_t v11 = *(void *)(v0 + 536);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 178);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v11, v10, v12);
    uint64_t v14 = sub_10000EEF8(v11, v10, v12);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 178);
    uint64_t v19 = *(void **)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 536);
    if (v17)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)uint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 456) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 536), *(void *)(v0 + 544), *(_BYTE *)(v0 + 178));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100052128()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 592);
  *(void *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_100082EE8;
  }
  else {
    char v4 = sub_10005218C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 560), 0LL);
}

uint64_t sub_10005218C()
{
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v40 = (void *)(v0 + 120);
  uint64_t v1 = (void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = (__int128 *)(v0 + 312);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 608) = sub_10000ADF4(v4, (uint64_t)qword_1000D36B0);
  uint64_t v41 = (uint64_t *)(v0 + 184);
  sub_100033A90((uint64_t *)(v0 + 184), v0 + 248);
  uint64_t v5 = swift_retain(v2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 568);
  if (v8)
  {
    unsigned __int8 v38 = *(_BYTE *)(v0 + 177);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = swift_slowAlloc(96LL, -1LL);
    uint64_t v43 = v39;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = *(void *)(v9 + 16);
    unint64_t v12 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain(v12);
    *(void *)(v0 + 504) = sub_10009BE3C(v11, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release(v9);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = sub_100020190(v38);
    unint64_t v15 = v14;
    *(void *)(v0 + 512) = sub_10009BE3C(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 22) = 2080;
    uint64_t v1 = (void *)(v0 + 376);
    uint64_t v16 = sub_1000335F0();
    unint64_t v18 = v17;
    *(void *)(v0 + 520) = sub_10009BE3C(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease(v18);
    sub_10004D918((void *)(v0 + 248));
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] Sending event %s via %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v39, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    uint64_t v19 = v10;
    uint64_t v3 = (__int128 *)(v0 + 312);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 568));
    sub_10004D918((void *)(v0 + 248));
  }

  sub_100033A90(v41, (uint64_t)v3);
  if (*(_BYTE *)(v0 + 368) == 1)
  {
    uint64_t v20 = *(void *)v3;
    sub_10000F310(*(void *)v3 + 32LL, (uint64_t)v1);
    swift_release(v20);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 360));
    sub_10004D94C(v3, (uint64_t)v1);
  }

  unint64_t v21 = *(void *)(v0 + 584);
  uint64_t v22 = *(void *)(v0 + 576);
  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v24 = *(void *)(v0 + 408);
  unsigned __int8 v25 = *(_BYTE *)(v0 + 177);
  sub_10000F2CC(v1, v23);
  uint64_t v26 = sub_100020190(v25);
  uint64_t v28 = v27;
  *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = v27;
  uint64_t v29 = sub_10000360C(&qword_1000CF9A0);
  uint64_t inited = swift_initStackObject(v29, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000A96A0;
  *(void *)(v0 + 440) = 0x6567617373656DLL;
  *(void *)(v0 + 448) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)( (void *)(inited + 32),  v0 + 440,  &type metadata for String,  &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Data;
  *(void *)(inited + 72) = v22;
  *(void *)(inited + 80) = v21;
  sub_1000109D4(v22, v21);
  unint64_t v31 = sub_10000393C(inited);
  *(void *)(v0 + 624) = v31;
  sub_100033A90(v41, (uint64_t)v40);
  if (*(_BYTE *)(v0 + 176) == 1)
  {
    sub_10004D918(v40);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
    uint64_t v34 = v33;
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 160);
    uint64_t v34 = *(void *)(v0 + 168);
    sub_10000F2F0(v40);
  }

  *(void *)(v0 + 632) = v34;
  uint64_t v35 = *(int **)(v24 + 288);
  uint64_t v42 = (int *)((char *)v35 + *v35);
  os_log_type_t v36 = (void *)swift_task_alloc(v35[1]);
  *(void *)(v0 + 640) = v36;
  void *v36 = v0;
  v36[1] = sub_1000525C4;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))v42)( v26,  v28,  v31,  v32,  v34,  0LL,  v23,  v24);
}

uint64_t sub_1000525C4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 640LL);
  *(void *)(*(void *)v1 + 648LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[70];
    uint64_t v5 = sub_100082E78;
  }

  else
  {
    uint64_t v6 = v2[79];
    uint64_t v7 = v2[78];
    uint64_t v8 = v2[77];
    uint64_t v9 = v2[70];
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    uint64_t v5 = sub_100082E54;
    uint64_t v4 = v9;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100052658(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 552) = v5;
  *(_BYTE *)(v6 + 178) = a5;
  *(void *)(v6 + 544) = a4;
  *(void *)(v6 + 536) = a3;
  *(void *)(v6 + 528) = a2;
  *(_BYTE *)(v6 + 177) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v7 = qword_1000D35C8;
  *(void *)(v6 + 560) = qword_1000D35C8;
  return swift_task_switch(sub_1000526D4, v7, 0LL);
}

uint64_t sub_1000526D4()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void **)(v0 + 544);
  uint64_t v3 = *(void *)(v0 + 536);
  char v4 = *(_BYTE *)(v0 + 178);
  swift_beginAccess(v1 + 48, v0 + 416, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 568) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoTVLaunchedEvent(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CF998,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoTVLaunchedEvent,  (uint64_t)&protocol conformance descriptor for NCProtoTVLaunchedEvent);
    *(void *)(v0 + 576) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 584) = v9;
    unsigned __int8 v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 592) = v25;
    void *v25 = v0;
    v25[1] = sub_100052A54;
    return sub_1000336A8(v0 + 184, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 544);
    uint64_t v11 = *(void *)(v0 + 536);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 178);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v11, v10, v12);
    uint64_t v14 = sub_10000EEF8(v11, v10, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 178);
    uint64_t v19 = *(void **)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 536);
    if (v17)
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 456) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 536), *(void *)(v0 + 544), *(_BYTE *)(v0 + 178));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100052A54()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 592);
  *(void *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    char v4 = sub_100052EF0;
  }
  else {
    char v4 = sub_100052AB8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 560), 0LL);
}

uint64_t sub_100052AB8()
{
  if (qword_1000CD6C0 != -1) {
    swift_once(&qword_1000CD6C0, sub_100088F0C);
  }
  uint64_t v40 = (void *)(v0 + 120);
  uint64_t v1 = (void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = (__int128 *)(v0 + 312);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 608) = sub_10000ADF4(v4, (uint64_t)qword_1000D36B0);
  uint64_t v41 = (uint64_t *)(v0 + 184);
  sub_100033A90((uint64_t *)(v0 + 184), v0 + 248);
  uint64_t v5 = swift_retain(v2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 568);
  if (v8)
  {
    unsigned __int8 v38 = *(_BYTE *)(v0 + 177);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = swift_slowAlloc(96LL, -1LL);
    uint64_t v43 = v39;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = *(void *)(v9 + 16);
    unint64_t v12 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain(v12);
    *(void *)(v0 + 504) = sub_10009BE3C(v11, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release(v9);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = sub_100020190(v38);
    unint64_t v15 = v14;
    *(void *)(v0 + 512) = sub_10009BE3C(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 22) = 2080;
    uint64_t v1 = (void *)(v0 + 376);
    uint64_t v16 = sub_1000335F0();
    unint64_t v18 = v17;
    *(void *)(v0 + 520) = sub_10009BE3C(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease(v18);
    sub_10004D918((void *)(v0 + 248));
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] Sending event %s via %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v39, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    uint64_t v19 = v10;
    uint64_t v3 = (__int128 *)(v0 + 312);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 568));
    sub_10004D918((void *)(v0 + 248));
  }

  sub_100033A90(v41, (uint64_t)v3);
  if (*(_BYTE *)(v0 + 368) == 1)
  {
    uint64_t v20 = *(void *)v3;
    sub_10000F310(*(void *)v3 + 32LL, (uint64_t)v1);
    swift_release(v20);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 360));
    sub_10004D94C(v3, (uint64_t)v1);
  }

  unint64_t v21 = *(void *)(v0 + 584);
  uint64_t v22 = *(void *)(v0 + 576);
  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v24 = *(void *)(v0 + 408);
  unsigned __int8 v25 = *(_BYTE *)(v0 + 177);
  sub_10000F2CC(v1, v23);
  uint64_t v26 = sub_100020190(v25);
  uint64_t v28 = v27;
  *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = v27;
  uint64_t v29 = sub_10000360C(&qword_1000CF9A0);
  uint64_t inited = swift_initStackObject(v29, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000A96A0;
  *(void *)(v0 + 440) = 0x6567617373656DLL;
  *(void *)(v0 + 448) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)( (void *)(inited + 32),  v0 + 440,  &type metadata for String,  &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Data;
  *(void *)(inited + 72) = v22;
  *(void *)(inited + 80) = v21;
  sub_1000109D4(v22, v21);
  unint64_t v31 = sub_10000393C(inited);
  *(void *)(v0 + 624) = v31;
  sub_100033A90(v41, (uint64_t)v40);
  if (*(_BYTE *)(v0 + 176) == 1)
  {
    sub_10004D918(v40);
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPDestinationIdentifierDirectPeer);
    uint64_t v34 = v33;
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 160);
    uint64_t v34 = *(void *)(v0 + 168);
    sub_10000F2F0(v40);
  }

  *(void *)(v0 + 632) = v34;
  uint64_t v35 = *(int **)(v24 + 288);
  uint64_t v42 = (int *)((char *)v35 + *v35);
  os_log_type_t v36 = (void *)swift_task_alloc(v35[1]);
  *(void *)(v0 + 640) = v36;
  void *v36 = v0;
  v36[1] = sub_100052F34;
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))v42)( v26,  v28,  v31,  v32,  v34,  0LL,  v23,  v24);
}

uint64_t sub_100052EF0()
{
  uint64_t v1 = *(void *)(v0 + 568);
  sub_10000BE18(*(void *)(v0 + 576), *(void *)(v0 + 584));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052F34()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 640LL);
  *(void *)(*(void *)v1 + 648LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[70];
    uint64_t v5 = sub_1000531E8;
  }

  else
  {
    uint64_t v6 = v2[79];
    uint64_t v7 = v2[78];
    uint64_t v8 = v2[77];
    uint64_t v9 = v2[70];
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    uint64_t v5 = sub_100052FC8;
    uint64_t v4 = v9;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100052FC8()
{
  uint64_t v1 = *(void *)(v0 + 568);
  sub_10000F2F0((void *)(v0 + 376));
  uint64_t v2 = swift_retain_n(v1, 2LL);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v18 = *(void *)(v0 + 576);
    unint64_t v19 = *(void *)(v0 + 584);
    uint64_t v5 = *(void *)(v0 + 568);
    unsigned __int8 v17 = *(_BYTE *)(v0 + 177);
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = swift_slowAlloc(64LL, -1LL);
    uint64_t v20 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + 16);
    unint64_t v9 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 488) = sub_10009BE3C(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v9);
    swift_release_n(v5, 2LL);
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v10 = sub_100020190(v17);
    unint64_t v12 = v11;
    *(void *)(v0 + 496) = sub_10009BE3C(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%s] Sent event %s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    sub_10000BE18(v18, v19);
    swift_release(v5);
  }

  else
  {
    unint64_t v13 = *(void *)(v0 + 584);
    uint64_t v14 = *(void *)(v0 + 576);
    uint64_t v15 = *(void *)(v0 + 568);

    swift_release_n(v15, 2LL);
    sub_10000BE18(v14, v13);
    swift_release(v15);
  }

  sub_10004D918((void *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000531E8()
{
  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 624);
  uint64_t v3 = *(void *)(v0 + 616);
  uint64_t v4 = *(void *)(v0 + 568);
  swift_bridgeObjectRelease(*(void *)(v0 + 632));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10000F2F0((void *)(v0 + 376));
  swift_retain(v4);
  swift_errorRetain(v1);
  swift_retain(v4);
  uint64_t v5 = swift_errorRetain(v1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 648);
    uint64_t v9 = *(void *)(v0 + 568);
    unsigned __int8 v24 = *(_BYTE *)(v0 + 177);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    unsigned __int8 v25 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    v27[0] = v26;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = *(void *)(v9 + 16);
    unint64_t v12 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain(v12);
    *(void *)(v0 + 464) = sub_10009BE3C(v11, v12, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v9, 2LL);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = sub_100020190(v24);
    unint64_t v15 = v14;
    *(void *)(v0 + 472) = sub_10009BE3C(v13, v14, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 22) = 2112;
    swift_errorRetain(v8);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 480) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v10 + 24, v10 + 32);
    uint64_t *v25 = v16;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] Failed to send event %s due to %@.", (uint8_t *)v10, 0x20u);
    uint64_t v17 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v25, 1LL, v17);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 648);
    swift_release_n(*(void *)(v0 + 568), 2LL);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }

  unint64_t v19 = *(void *)(v0 + 584);
  uint64_t v20 = *(void *)(v0 + 576);
  uint64_t v21 = *(void *)(v0 + 568);
  swift_willThrow(v22);
  sub_10000BE18(v20, v19);
  swift_release(v21);
  sub_10004D918((void *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000534D8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 552) = v5;
  *(_BYTE *)(v6 + 178) = a5;
  *(void *)(v6 + 544) = a4;
  *(void *)(v6 + 536) = a3;
  *(void *)(v6 + 528) = a2;
  *(_BYTE *)(v6 + 177) = a1;
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v7 = qword_1000D35C8;
  *(void *)(v6 + 560) = qword_1000D35C8;
  return swift_task_switch(sub_100053554, v7, 0LL);
}

uint64_t sub_100053554()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void **)(v0 + 544);
  uint64_t v3 = *(void *)(v0 + 536);
  char v4 = *(_BYTE *)(v0 + 178);
  swift_beginAccess(v1 + 48, v0 + 416, 0LL, 0LL);
  uint64_t v5 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(v5);
  sub_10000EEF8(v3, (uint64_t)v2, v4);
  uint64_t v6 = sub_10007B1CC(v5, v3, v2, v4);
  *(void *)(v0 + 568) = v6;
  sub_10000EF20(v3, (uint64_t)v2, v4);
  swift_bridgeObjectRelease(v5);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NCProtoCancelAddMemberEvent(0LL);
    uint64_t v8 = sub_10001CFD8( &qword_1000CFE48,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
    *(void *)(v0 + 576) = Message.serializedData(partial:)(0LL, v7, v8);
    *(void *)(v0 + 584) = v9;
    unsigned __int8 v25 = (void *)swift_task_alloc(dword_1000CE93C);
    *(void *)(v0 + 592) = v25;
    void *v25 = v0;
    v25[1] = sub_100052128;
    return sub_1000336A8(v0 + 184, v6);
  }

  else
  {
    if (qword_1000CD6C0 != -1) {
      swift_once(&qword_1000CD6C0, sub_100088F0C);
    }
    uint64_t v10 = *(void *)(v0 + 544);
    uint64_t v11 = *(void *)(v0 + 536);
    unsigned __int8 v12 = *(_BYTE *)(v0 + 178);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D36B0);
    sub_10000EEF8(v11, v10, v12);
    uint64_t v14 = sub_10000EEF8(v11, v10, v12);
    unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    char v18 = *(_BYTE *)(v0 + 178);
    unint64_t v19 = *(void **)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 536);
    if (v17)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v28;
      *(_DWORD *)uint64_t v21 = 136315138;
      sub_10000EEF8(v20, (uint64_t)v19, v18);
      unint64_t v22 = sub_10000C47C(v20, v19, v18);
      unint64_t v24 = v23;
      sub_10000EF20(v20, (uint64_t)v19, v18);
      *(void *)(v0 + 456) = sub_10009BE3C(v22, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      sub_10000EF20(v20, (uint64_t)v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to find conduit device for %s.", v21, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_10000EF20(*(void *)(v0 + 536), *(void *)(v0 + 544), *(_BYTE *)(v0 + 178));
      sub_10000EF20(v20, (uint64_t)v19, v18);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000538D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  swift_retain(v4);
  v5(a2, v6, v8);
  swift_release(v4);
  return swift_bridgeObjectRelease(v8);
}

void sub_100053948(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_10005399C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  return sub_100053A70(a1, a2, a3);
}

uint64_t sub_1000539B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v1 = sub_100075530(*a1, v2);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease(v2);
    *a1 = v1;
    a1[1] = v8;
    unint64_t v2 = v8;
    if ((v8 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    v10[0] = v1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    id v5 = (char *)v10 + (HIBYTE(v2) & 0xF);
    uint64_t v3 = v10;
    return SHA512.update(bufferPointer:)(v3, v5);
  }

  if ((v2 & 0x2000000000000000LL) != 0) {
    goto LABEL_9;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = (void *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v3 = (void *)_StringObject.sharedUTF8.getter(v1, v2);
  }

  if (v3) {
    id v5 = (char *)v3 + v4;
  }
  else {
    id v5 = 0LL;
  }
  return SHA512.update(bufferPointer:)(v3, v5);
}

uint64_t sub_100053A70@<X0>(uint64_t __src@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (__src)
  {
    uint64_t v3 = __src;
    uint64_t v5 = (uint64_t)&a2[-__src];
    if (a2 == (_BYTE *)__src)
    {
      __src = 0LL;
      unint64_t v6 = 0xC000000000000000LL;
    }

    else if (v5 <= 14)
    {
      __src = sub_100080A40((_BYTE *)__src, a2);
      unint64_t v6 = v9 & 0xFFFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v7 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      uint64_t v8 = __DataStorage.init(bytes:length:)(v3, v5);
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        uint64_t v10 = type metadata accessor for Data.RangeReference(0LL);
        __src = swift_allocObject(v10, 32LL, 7LL);
        *(void *)(__src + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(__src + 24) = v5;
        unint64_t v6 = v8 | 0x8000000000000000LL;
      }

      else
      {
        __src = v5 << 32;
        unint64_t v6 = v8 | 0x4000000000000000LL;
      }
    }

    *a3 = __src;
    a3[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return __src;
}

uint64_t sub_100053B3C()
{
  uint64_t v0 = type metadata accessor for ConduitActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v1);
  qword_1000D35E0 = v1;
  return result;
}

uint64_t sub_100053B74()
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_retain(qword_1000D35E0);
}

uint64_t sub_100053BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ConduitActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

void sub_100053BD8()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___TUCallCenter);
  id v1 = [v0 sharedInstance];
  id v2 = [v1 conversationManager];

  id v3 = [v0 sharedInstance];
  id v4 = objc_allocWithZone((Class)type metadata accessor for NeighborhoodActivityConduit(0LL));
  sub_100057F38(v2, v3);
  qword_1000D35E8 = v5;
}

uint64_t sub_100053C78()
{
  uint64_t v1 = type metadata accessor for HandoffState(0LL);
  uint64_t v38 = *(void *)(v1 - 8);
  uint64_t v39 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v36 = (uint64_t)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - v4;
  uint64_t v6 = sub_10000360C(&qword_1000CDE48);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  unsigned __int8 v12 = (char *)&v33 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v19 = sub_10000ADF4(v15, (uint64_t)qword_1000D3620);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
  uint64_t v20 = v0;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  int v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v37))
  {
    uint64_t v33 = v5;
    uint64_t v35 = v16;
    unint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    v42[0] = v34;
    *(_DWORD *)unint64_t v22 = 136315138;
    uint64_t v23 = (uint64_t)&v20[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState];
    swift_beginAccess(&v20[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState], v41, 0LL, 0LL);
    sub_100005318(v23, (uint64_t)v14, &qword_1000CDE48);
    sub_100005318((uint64_t)v14, (uint64_t)v12, &qword_1000CDE48);
    uint64_t v24 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v12, 1LL, v39) == 1)
    {
      sub_10000BFC8((uint64_t)v12, &qword_1000CDE48);
      unint64_t v25 = 0xE300000000000000LL;
      uint64_t v26 = 7104878LL;
    }

    else
    {
      uint64_t v27 = (uint64_t)v33;
      sub_10004EA7C((uint64_t)v12, (uint64_t)v33, type metadata accessor for HandoffState);
      uint64_t v28 = v36;
      sub_100018CFC(v27, v36, type metadata accessor for HandoffState);
      uint64_t v26 = String.init<A>(reflecting:)(v28, v24);
      unint64_t v25 = v29;
      sub_10000BF5C(v27, type metadata accessor for HandoffState);
    }

    sub_10000BFC8((uint64_t)v14, &qword_1000CDE48);
    uint64_t v40 = sub_10009BE3C(v26, v25, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v22 + 4, v22 + 12);

    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v37, "Handoff state updated to %s", v22, 0xCu);
    uint64_t v30 = v34;
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v15);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }

  uint64_t v31 = (uint64_t)&v20[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState];
  swift_beginAccess(&v20[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState], v42, 0LL, 0LL);
  sub_100005318(v31, (uint64_t)v9, &qword_1000CDE48);
  CurrentValueSubject.send(_:)(v9);
  return sub_10000BFC8((uint64_t)v9, &qword_1000CDE48);
}

void sub_100054080()
{
  qword_1000CF580 = 0x65736E61707845LL;
  *(void *)algn_1000CF588 = 0xE700000000000000LL;
}

void sub_1000540A4()
{
  qword_1000CF590 = 0x616E7567614CLL;
  *(void *)algn_1000CF598 = 0xE600000000000000LL;
}

uint64_t sub_1000540C4()
{
  uint64_t v22 = 0LL;
  unint64_t v23 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(110LL);
  v1._countAndFlagsBits = 0xD000000000000031LL;
  v1._object = (void *)0x80000001000A5620LL;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0xD000000000000017LL;
  v5._object = (void *)0x80000001000A5660LL;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  v21[0] = sub_100051848();
  v21[1] = v7;
  uint64_t v8 = sub_10000360C(&qword_1000CF808);
  v9._countAndFlagsBits = String.init<A>(describing:)(v21, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._object = (void *)0x80000001000A5680LL;
  v11._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v11);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 0x3A65646F4D766120LL;
  v16._object = (void *)0xE900000000000020LL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = TUConversationAVMode.description.getter(*(uint64_t *)((char *)v0 + *(int *)(v6 + 32)));
  char v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v19._countAndFlagsBits = 62LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  return v22;
}

void sub_100054288(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C(&qword_1000CF740);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v1;
  uint64_t v12 = v2[1];
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = (int *)type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = sub_10001CFD8( (unint64_t *)&qword_1000CD8F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
  id v16 = *(id *)((char *)v2 + v13[6]);
  NSObject.hash(into:)(a1);

  sub_100005318((uint64_t)v2 + v13[7], (uint64_t)v10, &qword_1000CF740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    uint64_t v17 = sub_10001CFD8( &qword_1000CF820,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  Hasher._combine(_:)(*(void *)((char *)v2 + v13[8]));
}

Swift::Int sub_10005448C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000544CC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100054508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  v4[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[5] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[6] = swift_task_alloc(v7);
  v4[7] = swift_task_alloc(v7);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v8 = qword_1000D35E0;
  v4[8] = qword_1000D35E0;
  return swift_task_switch(sub_1000545A8, v8, 0LL);
}

uint64_t sub_1000545A8()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  Swift::String v1 = (void *)v0[3];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &unk_1000D3000;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = (char *)v0[3];
    uint64_t v7 = v0[4];
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = *(void *)&v6[OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos];
    uint64_t v10 = sub_10001CFD8( &qword_1000CF9F8,  255LL,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo,  (uint64_t)&unk_1000AA5A8);
    uint64_t v11 = swift_bridgeObjectRetain(v9);
    uint64_t v12 = Set.description.getter(v11, v7, v10);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(v9);
    uint64_t v15 = v12;
    uint64_t v5 = (void *)&unk_1000D3000;
    v0[2] = sub_10009BE3C(v15, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "NearbyConversationInfos updated: \n   nearbyConversationInfos: %s",  v8,  0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    id v16 = (void *)v0[3];
  }

  uint64_t v17 = v0[3];
  uint64_t v18 = v5[191];
  v0[9] = v18;
  if (*(void *)(*(void *)(v17 + v18) + 16LL)) {
    sub_10005C7BC(0);
  }
  else {
    sub_10005CC00(0);
  }
  Swift::String v19 = (void *)swift_task_alloc(dword_1000CF9F4);
  v0[10] = v19;
  *Swift::String v19 = v0;
  v19[1] = sub_1000547F8;
  return sub_10004F0B0();
}

uint64_t sub_1000547F8(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 80));
  uint64_t v5 = *(void *)(v4 + 64);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v6 = sub_100054BA8;
  }

  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = sub_100054874;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100054874()
{
  unint64_t v1 = v0[11];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void *)(v2 + v0[9]);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v33 = v0[5];
    uint64_t v34 = v0[6];
    unint64_t v31 = v0[11];
    uint64_t v32 = v0[4];
    swift_bridgeObjectRetain(v3);
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    uint64_t result = sub_10007A690(v3);
    uint64_t v7 = result;
    char v9 = v8 & 1;
    while ((v7 & 0x8000000000000000LL) == 0 && v7 < 1LL << *(_BYTE *)(v3 + 32))
    {
      if (*(_DWORD *)(v3 + 36) != (_DWORD)v6) {
        goto LABEL_16;
      }
      uint64_t v11 = v35[6];
      uint64_t v10 = v35[7];
      uint64_t v37 = v6;
      char v36 = v9;
      sub_100018CFC( *(void *)(v3 + 48) + *(void *)(v33 + 72) * v7,  v10,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      sub_10004EA7C(v10, v11, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v12 = *(void *)(v34 + 8);
      unint64_t v13 = *(void **)(v11 + *(int *)(v32 + 24));
      uint64_t v14 = *(void *)(v11 + *(int *)(v32 + 32));
      id v15 = objc_allocWithZone(&OBJC_CLASS___TUNearbyConversationInfo);
      swift_bridgeObjectRetain(v12);
      id v16 = v13;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      id v19 = [v15 initWithConversationUUID:isa userProfileIdentifier:v18 deviceHandle:v16 avMode:v14];

      uint64_t v20 = sub_10000BF5C(v11, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
      specialized ContiguousArray._endMutation()(v22);
      uint64_t result = sub_10009C8C8(v7, v37, v36 & 1, v3);
      uint64_t v7 = result;
      char v9 = v23 & 1;
      if (!--v4)
      {
        sub_100018054(result, v6, v9);
        swift_bridgeObjectRelease(v3);
        uint64_t v0 = v35;
        uint64_t v2 = v35[3];
        unint64_t v1 = v31;
        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  else
  {
LABEL_9:
    uint64_t v24 = sub_10007B7F0( (uint64_t)_swiftEmptyArrayStorage,  &qword_1000CE380,  &OBJC_CLASS___TUNearbyConversationInfo_ptr,  &qword_1000CE388,  (void (*)(id *, uint64_t))sub_10008FE5C);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate, v25);
    if (Strong)
    {
      uint64_t v27 = Strong;
      if (!v1) {
        unint64_t v1 = sub_100003A7C((uint64_t)_swiftEmptyArrayStorage);
      }
      unint64_t v28 = v1;
      uint64_t v29 = swift_allocObject(&unk_1000C4EB0, 32LL, 7LL);
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = v1;
      *(void *)(v29 + 24) = v24;
      swift_bridgeObjectRetain(v1);
      swift_bridgeObjectRetain(v24);
      sub_100012C78((uint64_t)sub_100080F8C, v29);
      swift_unknownObjectRelease(v27);
      swift_release(v29);
      unint64_t v1 = v24;
      uint64_t v24 = v28;
    }

    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v1);
    uint64_t v30 = v0[6];
    swift_task_dealloc(v0[7]);
    swift_task_dealloc(v30);
    return ((uint64_t (*)(void))v0[1])();
  }

  return result;
}

uint64_t sub_100054BA8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + v0[9]);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v33 = v0[5];
    uint64_t v34 = v0[6];
    uint64_t v32 = v0[4];
    swift_bridgeObjectRetain(v2);
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t result = sub_10007A690(v2);
    uint64_t v5 = result;
    uint64_t v7 = v6;
    char v9 = v8 & 1;
    uint64_t v35 = v2;
    uint64_t v36 = v2 + 56;
    while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v2 + 32))
    {
      if (*(_DWORD *)(v2 + 36) != (_DWORD)v7) {
        goto LABEL_14;
      }
      uint64_t v11 = v37[6];
      uint64_t v10 = v37[7];
      char v38 = v9;
      sub_100018CFC( *(void *)(v2 + 48) + *(void *)(v33 + 72) * v5,  v10,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      sub_10004EA7C(v10, v11, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v12 = *(void *)(v34 + 8);
      unint64_t v13 = *(void **)(v11 + *(int *)(v32 + 24));
      uint64_t v14 = *(void *)(v11 + *(int *)(v32 + 32));
      id v15 = objc_allocWithZone(&OBJC_CLASS___TUNearbyConversationInfo);
      swift_bridgeObjectRetain(v12);
      id v16 = v13;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      id v19 = [v15 initWithConversationUUID:isa userProfileIdentifier:v18 deviceHandle:v16 avMode:v14];

      uint64_t v20 = sub_10000BF5C(v11, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = v21;
      uint64_t v2 = v35;
      uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
      specialized ContiguousArray._endMutation()(v23);
      uint64_t result = sub_10009C8C8(v5, v7, v38 & 1, v35);
      uint64_t v5 = result;
      uint64_t v7 = v24;
      char v9 = v25 & 1;
      if (!--v3)
      {
        sub_100018054(result, v24, v9);
        swift_bridgeObjectRelease(v35);
        uint64_t v0 = v37;
        uint64_t v1 = v37[3];
        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
LABEL_9:
    uint64_t v26 = sub_10007B7F0( (uint64_t)_swiftEmptyArrayStorage,  &qword_1000CE380,  &OBJC_CLASS___TUNearbyConversationInfo_ptr,  &qword_1000CE388,  (void (*)(id *, uint64_t))sub_10008FE5C);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate, v27);
    if (Strong)
    {
      unint64_t v29 = sub_100003A7C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v30 = swift_allocObject(&unk_1000C4EB0, 32LL, 7LL);
      *(void *)(v30 + swift_weakDestroy(v0 + 16) = v29;
      *(void *)(v30 + 24) = v26;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v26);
      sub_100012C78((uint64_t)sub_100080F8C, v30);
      swift_unknownObjectRelease(Strong);
      swift_release(v30);
      uint64_t Strong = v26;
      uint64_t v26 = v29;
    }

    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(Strong);
    uint64_t v31 = v0[6];
    swift_task_dealloc(v0[7]);
    swift_task_dealloc(v31);
    return ((uint64_t (*)(void))v0[1])();
  }

  return result;
}

uint64_t sub_100054ED8(uint64_t a1)
{
  uint64_t v3 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)&v1[OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos];
  *(void *)&v1[OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos] = a1;
  swift_bridgeObjectRetain(a1);
  char v7 = sub_100074E8C(v6, a1);
  swift_bridgeObjectRelease(a1);
  if ((v7 & 1) != 0) {
    return swift_bridgeObjectRelease(v6);
  }
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
  uint64_t v10 = qword_1000CD668;
  uint64_t v12 = v1;
  if (v10 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v13 = qword_1000D35E0;
  uint64_t v14 = sub_10001CFD8( &qword_1000CF800,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  id v15 = (void *)swift_allocObject(&unk_1000C4E88, 40LL, 7LL);
  v15[2] = v13;
  void v15[3] = v14;
  v15[4] = v12;
  swift_retain(v13);
  uint64_t v16 = sub_10004EC20((uint64_t)v5, (uint64_t)&unk_1000CF9E8, (uint64_t)v15);
  swift_release(v16);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100055088(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v64 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v63 = (uint64_t)&v60 - v6;
  uint64_t v7 = sub_10000360C(&qword_1000CDE48);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v72, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2, v10);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v12 = (char *)Strong;
  uint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = sub_100003808((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = (uint64_t)&v12[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState];
  swift_beginAccess(&v12[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState], v68, 0LL, 0LL);
  sub_100005318(v15, (uint64_t)v9, &qword_1000CDE48);
  uint64_t v16 = String.init<A>(describing:)(v9, v7);
  uint64_t v70 = &type metadata for String;
  *(void *)&__int128 v69 = v16;
  *((void *)&v69 + 1) = v17;
  sub_100004E20(&v69, v67);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  uint64_t v66 = v14;
  sub_100078024(v67, 0x5366666F646E6168LL, 0xEC00000065746174LL, isUniquelyReferenced_nonNull_native);
  uint64_t v19 = v66;
  uint64_t v71 = v66;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v20 = *(void *)&v12[OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos];
  int64_t v21 = *(void *)(v20 + 16);
  unsigned int v60 = v12;
  if (v21)
  {
    *(void *)&__int128 v69 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v20);
    sub_10009C450(0, v21, 0);
    uint64_t v22 = sub_10007A690(v20);
    uint64_t v24 = v23;
    char v26 = v25 & 1;
    uint64_t v62 = v20 + 56;
    uint64_t v61 = v20;
    while ((v22 & 0x8000000000000000LL) == 0 && v22 < 1LL << *(_BYTE *)(v20 + 32))
    {
      if (*(_DWORD *)(v20 + 36) != (_DWORD)v24) {
        goto LABEL_25;
      }
      uint64_t v27 = v63;
      sub_100018CFC( *(void *)(v20 + 48) + *(void *)(v65 + 72) * v22,  v63,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v28 = v27;
      uint64_t v29 = v64;
      sub_10004EA7C(v28, v64, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v30 = sub_1000540C4();
      uint64_t v32 = v31;
      sub_10000BF5C(v29, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v13 = (void *)v69;
      if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
      {
        sub_10009C450(0, v13[2] + 1LL, 1);
        uint64_t v13 = (void *)v69;
      }

      unint64_t v34 = v13[2];
      unint64_t v33 = v13[3];
      if (v34 >= v33 >> 1)
      {
        sub_10009C450(v33 > 1, v34 + 1, 1);
        uint64_t v13 = (void *)v69;
      }

      v13[2] = v34 + 1;
      uint64_t v35 = &v13[2 * v34];
      v35[4] = v30;
      void v35[5] = v32;
      uint64_t v20 = v61;
      uint64_t v36 = sub_10009C8C8(v22, v24, v26 & 1, v61);
      uint64_t v22 = v36;
      uint64_t v24 = v37;
      char v26 = v38 & 1;
      if (!--v21)
      {
        sub_100018054(v36, v37, v38 & 1);
        swift_bridgeObjectRelease(v20);
        uint64_t v19 = v71;
        uint64_t v12 = v60;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    swift_once(&qword_1000CD690, sub_100088E24);
    uint64_t v44 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v44, (uint64_t)qword_1000D3620);
    swift_errorRetain(v20);
    uint64_t v45 = swift_errorRetain(v20);
    unint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v65 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v67[0] = v65;
      *(_DWORD *)uint64_t v48 = 138412546;
      swift_errorRetain(v20);
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError(v20);
      *(void *)&__int128 v69 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, (char *)&v69 + 8, v48 + 4, v48 + 12);
      *uint64_t v49 = v50;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      *(_WORD *)(v48 + 12) = 2080;
      swift_beginAccess(&v71, &v69, 0LL, 0LL);
      uint64_t v51 = v71;
      uint64_t v52 = swift_bridgeObjectRetain(v71);
      uint64_t v53 = Dictionary.description.getter( v52,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      unint64_t v55 = v54;
      swift_bridgeObjectRelease(v51);
      uint64_t v66 = sub_10009BE3C(v53, v55, (uint64_t *)v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v55);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Failed to create state dump: %@ \n Info: %s",  (uint8_t *)v48,  0x16u);
      uint64_t v56 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v49, 1LL, v56);
      swift_slowDealloc(v49, -1LL, -1LL);
      uint64_t v57 = v65;
      swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);

      swift_errorRelease(v20);
    }

    else
    {

      swift_errorRelease(v20);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    swift_bridgeObjectRelease(v71);
    return 0LL;
  }

LABEL_14:
  uint64_t v70 = (void *)sub_10000360C((uint64_t *)&unk_1000CF940);
  *(void *)&__int128 v69 = v13;
  sub_100004E20(&v69, v67);
  char v39 = swift_isUniquelyReferenced_nonNull_native(v19);
  uint64_t v66 = v19;
  sub_100078024(v67, 0xD000000000000013LL, 0x80000001000A57B0LL, v39);
  uint64_t v40 = v66;
  uint64_t v71 = v66;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v41 = *(void *)&v12[OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator];
  if (v41)
  {
    swift_retain(*(void *)&v12[OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator]);
    uint64_t v42 = sub_10000360C(&qword_1000CF950);
    Lock.withLock<A>(_:)(&v69, sub_10007C528, v41, v42);
    uint64_t v70 = (void *)v42;
    sub_100004E20(&v69, v67);
    char v43 = swift_isUniquelyReferenced_nonNull_native(v40);
    uint64_t v66 = v40;
    sub_100078024(v67, 0xD000000000000011LL, 0x80000001000A57F0LL, v43);
    uint64_t v40 = v66;
    uint64_t v71 = v66;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    swift_release(v41);
  }

  swift_bridgeObjectRetain(v40);
  uint64_t v58 = sub_1000557BC();
  swift_bridgeObjectRelease_n(v40, 2LL);

  return v58;
}

  uint64_t v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  char v25 = *(void *)(v24 + 16);
  char v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v27;
  }
}

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v13 + 48) + a2) = v5;
  unint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v16;
  }
  return result;
}

uint64_t sub_1000557BC()
{
  uint64_t v0 = type metadata accessor for POSIXError(0LL);
  __chkstk_darwin(v0);
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v9[0] = 0LL;
  id v3 = [v1 dataWithPropertyList:isa format:200 options:0 error:v9];

  id v4 = v9[0];
  if (v3)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v6 = v5;

    __asm { BR              X10 }
  }

  uint64_t v7 = v4;
  _convertNSErrorToError(_:)(v4);

  swift_willThrow();
  return 0LL;
}

uint64_t sub_100055CFC(uint64_t a1, uint64_t a2)
{
  id v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_100055D44()
{
  uint64_t v1 = sub_10000360C(&qword_1000CF910);
  uint64_t v2 = sub_100018F4C( &qword_1000CF918,  &qword_1000CF910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v10[0] = Publisher.eraseToAnyPublisher()(v1, v2);
  uint64_t v3 = swift_allocObject(&unk_1000C4D98, 24LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v0;
  id v4 = v0;
  uint64_t v5 = sub_10000360C(&qword_1000CF920);
  uint64_t v6 = sub_100018F4C( &qword_1000CF928,  &qword_1000CF920,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v7 = Publisher<>.sink(receiveValue:)(sub_10007C474, v3, v5, v6);
  swift_release(v3);
  swift_release(v10[0]);
  uint64_t v8 = &v4[OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables];
  swift_beginAccess(v8, v10, 33LL, 0LL);
  AnyCancellable.store(in:)(v8);
  swift_endAccess(v10);
  return swift_release(v7);
}

uint64_t sub_100055E84(void **a1, void *a2)
{
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
  uint64_t v9 = qword_1000CD668;
  id v10 = v7;
  id v12 = a2;
  if (v9 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v13 = qword_1000D35E0;
  uint64_t v14 = sub_10001CFD8( &qword_1000CF800,  v11,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v15 = (void *)swift_allocObject(&unk_1000C4DC0, 48LL, 7LL);
  v15[2] = v13;
  void v15[3] = v14;
  v15[4] = v7;
  v15[5] = v12;
  swift_retain(v13);
  uint64_t v16 = sub_10004EC20((uint64_t)v6, (uint64_t)&unk_1000CF938, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_100055FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100056018, qword_1000D35E0, 0LL);
}

uint64_t sub_100056018()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = type metadata accessor for ConversationUIStateObserver(0LL);
    swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    id v3 = v1;
    uint64_t v4 = sub_100005D78(v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v5 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationUIStateObserver);
  *(void *)(v5 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationUIStateObserver) = v4;
  swift_release(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056094()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationPublishers);
  uint64_t v3 = sub_10000360C(&qword_1000D0AF0);
  uint64_t v4 = sub_100018F4C( (unint64_t *)&unk_1000CF880,  &qword_1000D0AF0,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v13[0] = Publisher.eraseToAnyPublisher()(v3, v4);
  uint64_t v5 = swift_allocObject(&unk_1000C4BE0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  uint64_t v6 = sub_10000360C(&qword_1000CF3C0);
  uint64_t v7 = sub_100018F4C( &qword_1000CF890,  &qword_1000CF3C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v8 = Publisher<>.sink(receiveValue:)(sub_10007AEF0, v5, v6, v7);
  swift_release(v5);
  swift_release(v13[0]);
  uint64_t v9 = v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables;
  swift_beginAccess(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables, v13, 33LL, 0LL);
  AnyCancellable.store(in:)(v9);
  swift_endAccess(v13);
  swift_release(v8);
  v13[0] = *(void *)(v2
                     + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22ConversationPublishers_conversationLeftSubject);
  v13[0] = Publisher.eraseToAnyPublisher()(v3, v4);
  uint64_t v10 = swift_allocObject(&unk_1000C4BE0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  uint64_t v11 = Publisher<>.sink(receiveValue:)(sub_10007AF18, v10, v6, v7);
  swift_release(v10);
  swift_release(v13[0]);
  swift_beginAccess(v9, v13, 33LL, 0LL);
  AnyCancellable.store(in:)(v9);
  swift_endAccess(v13);
  return swift_release(v11);
}

uint64_t sub_100056298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  void v5[5] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100056300, qword_1000D35E0, 0LL);
}

uint64_t sub_100056300()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    sub_100056370(*(void **)(v0 + 56));
  }

  **(_BYTE **)(v0 + 40) = Strong == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056370(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000360C(&qword_1000CE5B0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v55 = (uint64_t)&v51 - v7;
  uint64_t v8 = sub_10000360C(&qword_1000CDE48);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v54 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  id v12 = (char *)&v51 - v11;
  uint64_t v57 = type metadata accessor for HandoffInfo(0LL);
  __chkstk_darwin(v57);
  uint64_t v58 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v59 = *(void *)(v14 - 8);
  uint64_t v60 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v17, (uint64_t)qword_1000D3620);
  id v18 = a1;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    int64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    v63[0] = v52;
    uint64_t v56 = v1;
    *(_DWORD *)int64_t v21 = 136315138;
    uint64_t v51 = v21 + 4;
    id v22 = [v18 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v23 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = v18;
    char v25 = v16;
    uint64_t v26 = v60;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v60, v23);
    unint64_t v29 = v28;
    uint64_t v30 = v25;
    uint64_t v31 = v26;
    uint64_t v16 = v25;
    id v18 = v24;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v31);
    uint64_t v61 = sub_10009BE3C(v27, v29, v63);
    uint64_t v2 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v51, v21 + 12);

    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Conversation %s was joined.", v21, 0xCu);
    uint64_t v32 = v52;
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v33 = v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState, v63, 0LL, 0LL);
  sub_100005318(v33, (uint64_t)v12, &qword_1000CDE48);
  uint64_t v34 = type metadata accessor for HandoffState(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  if (swift_getEnumCaseMultiPayload(v12, v34) == 1)
  {
    uint64_t v37 = v58;
    sub_10004EA7C((uint64_t)v12, v58, type metadata accessor for HandoffInfo);
    uint64_t v38 = v57;
    uint64_t v39 = v37 + *(int *)(v57 + 24);
    id v40 = [v18 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

    LOBYTE(v40) = static UUID.== infix(_:_:)(v39, v16);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v60);
    uint64_t v56 = v2;
    uint64_t v41 = v37 + *(int *)(v38 + 40);
    uint64_t v42 = v55;
    sub_100005318(v41, v55, &qword_1000CE5B0);
    uint64_t v43 = type metadata accessor for Date(0LL);
    uint64_t v44 = *(void *)(v43 - 8);
    int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1LL, v43);
    uint64_t v46 = sub_10000BFC8(v42, &qword_1000CE5B0);
    if (v45 == 1)
    {
      uint64_t v47 = (uint64_t)v53;
      Date.init()(v46);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v47, 0LL, 1LL, v43);
      sub_10007C320(v47, v41);
      uint64_t v48 = v54;
      sub_100018CFC(v37, v54, type metadata accessor for HandoffInfo);
      swift_storeEnumTagMultiPayload(v48, v34, 1LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v48, 0LL, 1LL, v34);
      swift_beginAccess(v33, &v61, 33LL, 0LL);
      sub_10007B02C(v48, v33);
      swift_endAccess(&v61);
      sub_100053C78();
      sub_10000BFC8(v48, &qword_1000CDE48);
      uint64_t v49 = v37;
      uint64_t v50 = type metadata accessor for HandoffInfo;
    }

    else
    {
LABEL_13:
      uint64_t v50 = type metadata accessor for HandoffInfo;
      uint64_t v49 = v37;
    }
  }

  else
  {
    uint64_t v50 = type metadata accessor for HandoffState;
    uint64_t v49 = (uint64_t)v12;
  }

  return sub_10000BF5C(v49, v50);
}

uint64_t sub_10005690C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 1LL, 1LL, v12);
  uint64_t v13 = qword_1000CD668;
  swift_retain(a2);
  id v15 = v11;
  if (v13 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v16 = qword_1000D35E0;
  uint64_t v17 = sub_10001CFD8( &qword_1000CF800,  v14,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  id v18 = (void *)swift_allocObject(a3, 48LL, 7LL);
  v18[2] = v16;
  v18[3] = v17;
  v18[4] = a2;
  v18[5] = v15;
  swift_retain(v16);
  uint64_t v19 = sub_10004EDA4( (uint64_t)v10,  a4,  (uint64_t)v18,  (uint64_t)&unk_1000C4CD0,  &qword_1000CF380,  (uint64_t)&unk_1000CF8B0);
  return swift_release(v19);
}

uint64_t sub_100056A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  void v5[5] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v6 = qword_1000D35E0;
  v5[8] = qword_1000D35E0;
  return swift_task_switch(sub_100056ACC, v6, 0LL);
}

uint64_t sub_100056ACC()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(void *)(v0 + 72) = Strong;
  if (Strong)
  {
    uint64_t v4 = (void *)swift_task_alloc(dword_1000CF8C4);
    *(void *)(v0 + 80) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100056B68;
    return sub_100056BC4(*(void *)(v0 + 56));
  }

  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100056B68()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 72LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 80LL));

  return swift_task_switch(sub_10003F924, v2, 0LL);
}

uint64_t sub_100056BC4(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for HandoffState(0LL);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[9] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  uint64_t v6 = sub_10000360C(&qword_1000CF8C8);
  v2[12] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for HandoffInfo(0LL);
  v2[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[14] = v8;
  v2[15] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[17] = v10;
  v2[18] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = qword_1000D35E0;
  v2[19] = qword_1000D35E0;
  return swift_task_switch(sub_100056CD8, v11, 0LL);
}

uint64_t sub_100056CD8()
{
  uint64_t v1 = v0 + 16;
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v3 = (id *)(v0 + 48);
  uint64_t v2 = *(void **)(v0 + 48);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v4, (uint64_t)qword_1000D3620);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v33 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v9 = *(void **)(v0 + 48);
    uint64_t v32 = v9;
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v34;
    *(_DWORD *)uint64_t v10 = 136315138;
    id v11 = [v9 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

    uint64_t v12 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v7, v8);
    *(void *)(v0 + 40) = sub_10009BE3C(v13, v15, &v35);
    uint64_t v1 = v0 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Conversation %s was left.", v10, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    id v16 = *v3;
  }

  uint64_t v17 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 56) + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  __n128 v20 = swift_beginAccess(v19, v1, 0LL, 0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v18 + 48))(v19, 1LL, v17, v20))
  {
    uint64_t v21 = *(void *)(v0 + 96);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v21,  1LL,  1LL,  *(void *)(v0 + 104));
    sub_10000BFC8(v21, &qword_1000CF8C8);
    id v22 = [*(id *)(v0 + 48) localMember];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = sub_10005E980();
      if (v25)
      {
        unint64_t v26 = v25;
        sub_10005EA74(v24, v25);
        swift_bridgeObjectRelease(v26);
      }
    }

    uint64_t v27 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 88);
    uint64_t v28 = *(void *)(v0 + 96);
    uint64_t v30 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 144));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_100018CFC(v19, *(void *)(v0 + 88), type metadata accessor for HandoffState);
    return swift_task_switch(sub_100057038, 0LL, 0LL);
  }

uint64_t sub_100057038()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  sub_100018CFC(v0[11], v1, type metadata accessor for HandoffState);
  if (swift_getEnumCaseMultiPayload(v1, v2) == 1)
  {
    sub_10004EA7C(v0[10], v0[12], type metadata accessor for HandoffInfo);
    uint64_t v3 = v0[19];
    sub_10000BF5C(v0[11], type metadata accessor for HandoffState);
    return swift_task_switch(sub_100057310, v3, 0LL);
  }

  else
  {
    uint64_t v5 = *(void *)v0[10];
    v0[20] = v5;
    os_log_type_t v6 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[21] = v6;
    uint64_t v7 = sub_10000360C(&qword_1000CF8D0);
    void *v6 = v0;
    v6[1] = sub_100057124;
    return Task.value.getter(v0[12], v5, v0[13], v7, &protocol self-conformance witness table for Error);
  }

uint64_t sub_100057124()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000571D8;
  }
  else {
    uint64_t v3 = sub_100057188;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100057188()
{
  uint64_t v1 = v0[19];
  sub_10000BF5C(v0[11], type metadata accessor for HandoffState);
  return swift_task_switch(sub_100057310, v1, 0LL);
}

uint64_t sub_1000571D8()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[11];
  swift_release(v0[20]);
  swift_errorRelease(v1);
  sub_10000BF5C(v3, type metadata accessor for HandoffState);
  return swift_task_switch(sub_10005723C, v2, 0LL);
}

uint64_t sub_10005723C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v1,  1LL,  1LL,  *(void *)(v0 + 104));
  sub_10000BFC8(v1, &qword_1000CF8C8);
  id v2 = [*(id *)(v0 + 48) localMember];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_10005E980();
    if (v5)
    {
      unint64_t v6 = v5;
      sub_10005EA74(v4, v5);
      swift_bridgeObjectRelease(v6);
    }
  }

  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057310()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void **)(v0 + 48);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v0 + 112) + 56LL))(v6, 0LL, 1LL, v5);
  sub_10004EA7C(v6, v4, type metadata accessor for HandoffInfo);
  uint64_t v8 = v4 + *(int *)(v5 + 24);
  id v9 = [v7 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  LOBYTE(v8) = static UUID.== infix(_:_:)(v8, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v10 = *(void *)(v0 + 120);
  if ((v8 & 1) != 0) {
    sub_10005D640(*(void **)(v0 + 48));
  }
  sub_10000BF5C(v10, type metadata accessor for HandoffInfo);
  id v11 = [*(id *)(v0 + 48) localMember];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_10005E980();
    if (v14)
    {
      unint64_t v15 = v14;
      sub_10005EA74(v13, v14);
      swift_bridgeObjectRelease(v15);
    }
  }

  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100057478()
{
  uint64_t v1 = v0;
  v8[0] = *(void *)(*(void *)(v0 + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient) + 112LL);
  uint64_t v2 = swift_allocObject(&unk_1000C4BE0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  swift_retain(v8[0]);
  uint64_t v3 = sub_10000360C(&qword_1000CF8F0);
  uint64_t v4 = sub_100018F4C( &qword_1000CF8F8,  &qword_1000CF8F0,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  uint64_t v5 = Publisher<>.sink(receiveValue:)(sub_10007C368, v2, v3, v4);
  swift_release(v2);
  swift_release(v8[0]);
  uint64_t v6 = v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables;
  swift_beginAccess(v6, v8, 33LL, 0LL);
  AnyCancellable.store(in:)(v6);
  swift_endAccess(v8);
  return swift_release(v5);
}

uint64_t sub_100057578(__int128 *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v7 = a1[3];
  __int128 v20 = a1[2];
  __int128 v21 = v7;
  uint64_t v22 = *((void *)a1 + 8);
  __int128 v8 = a1[1];
  __int128 v18 = *a1;
  __int128 v19 = v8;
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v6, 1LL, 1LL, v9);
  swift_retain(a2);
  sub_1000186F4(&v18);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = qword_1000D35E0;
  uint64_t v12 = sub_10001CFD8( &qword_1000CF800,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v13 = swift_allocObject(&unk_1000C4D70, 112LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  *(void *)(v13 + 32) = a2;
  __int128 v14 = v18;
  *(_OWORD *)(v13 + 56) = v19;
  __int128 v15 = v21;
  *(_OWORD *)(v13 + 72) = v20;
  *(_OWORD *)(v13 + 88) = v15;
  *(void *)(v13 + 104) = v22;
  *(_OWORD *)(v13 + 40) = v14;
  swift_retain(v11);
  uint64_t v16 = sub_10004EDA4( (uint64_t)v6,  (uint64_t)&unk_1000CF908,  v13,  (uint64_t)&unk_1000C4CD0,  &qword_1000CF380,  (uint64_t)&unk_1000CF8B0);
  return swift_release(v16);
}

uint64_t sub_1000576FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  void v5[5] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100057764, qword_1000D35E0, 0LL);
}

uint64_t sub_100057764()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    sub_1000577D4(*(uint64_t **)(v0 + 56));
  }

  **(_BYTE **)(v0 + 40) = Strong == 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000577D4(uint64_t *a1)
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  sub_1000186F4(a1);
  uint64_t v3 = sub_1000186F4(a1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_1000186F4(a1);
    uint64_t v8 = sub_10003EE20();
    unint64_t v10 = v9;
    sub_100018774(a1);
    uint64_t v12 = sub_10009BE3C(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    sub_100018774(a1);
    sub_100018774(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Continuity session ended: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    sub_100018774(a1);
    sub_100018774(a1);
  }

  return sub_1000579AC(*a1, a1[1]);
}

uint64_t sub_1000579AC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a1;
  uint64_t v53 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v5 = __chkstk_darwin(v53);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v51 - v8;
  uint64_t v55 = sub_10000360C(&qword_1000CDE48);
  uint64_t v10 = __chkstk_darwin(v55);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  __int128 v14 = (char *)&v51 - v13;
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000ADF4(v15, (uint64_t)qword_1000D3620);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v17 = v3;
  uint64_t v54 = v16;
  __int128 v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  __int128 v20 = &unk_1000D3000;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = v7;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    v61[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v52 = v9;
    swift_bridgeObjectRetain(a2);
    uint64_t v57 = sub_10009BE3C(v56, a2, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v24 = v17;
    unint64_t v25 = &v17[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState];
    swift_beginAccess(v25, &v57, 0LL, 0LL);
    uint64_t v26 = (uint64_t)v25;
    uint64_t v17 = v24;
    __int128 v20 = (void *)&unk_1000D3000;
    sub_100005318(v26, (uint64_t)v14, &qword_1000CDE48);
    uint64_t v27 = String.init<A>(describing:)(v14, v55);
    unint64_t v29 = v28;
    uint64_t v60 = sub_10009BE3C(v27, v28, v61);
    unint64_t v9 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v22 + 14, v22 + 22);

    swift_bridgeObjectRelease(v29);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Reset handoff for %s - handoffState: %s",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v30 = v22;
    uint64_t v7 = v51;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v31 = (uint64_t)&v17[v20[190]];
  swift_beginAccess(v31, v61, 0LL, 0LL);
  sub_100005318(v31, (uint64_t)v12, &qword_1000CDE48);
  uint64_t v32 = type metadata accessor for HandoffState(0LL);
  if (swift_getEnumCaseMultiPayload(v12, v32) == 1)
  {
    sub_10004EA7C((uint64_t)v12, (uint64_t)v9, type metadata accessor for HandoffInfo);
    uint64_t v34 = *((void *)v9 + 1);
    uint64_t v35 = *((void *)v9 + 2);
    if (v34 == v56 && v35 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v56, a2, 0LL) & 1) != 0)
    {
      uint64_t v36 = sub_100018CFC((uint64_t)v9, (uint64_t)v7, type metadata accessor for HandoffInfo);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        id v40 = v17;
        uint64_t v41 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v41;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v42 = sub_10009A2E0();
        unint64_t v44 = v43;
        uint64_t v59 = sub_10009BE3C(v42, v43, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease(v44);
        sub_10000BF5C((uint64_t)v7, type metadata accessor for HandoffInfo);
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Ending handoff because device is no longer reachable %s.",  v39,  0xCu);
        swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v45 = v41;
        uint64_t v17 = v40;
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        sub_10000BF5C((uint64_t)v7, type metadata accessor for HandoffInfo);
      }

      id v48 = *(id *)&v17[OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager];
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v50 = [v48 activeConversationWithGroupUUID:isa];

      sub_10005D640(v50);
    }

    uint64_t v46 = type metadata accessor for HandoffInfo;
    uint64_t v47 = (uint64_t)v9;
  }

  else
  {
    uint64_t v46 = type metadata accessor for HandoffState;
    uint64_t v47 = (uint64_t)v12;
  }

  return sub_10000BF5C(v47, v46);
}

void sub_100057F38(void *a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  id v6 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  uint64_t v7 = v2;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v6 initWithService:v8];

  if (v9)
  {
    __int128 v20 = a2;

    id v10 = [objc_allocWithZone(TUVouchingEnablementImpl) init];
    type metadata accessor for VoucherManagerImpl(0LL);
    id v11 = v9;
    id v12 = sub_100082F4C(v11);
    id v13 = [objc_allocWithZone(TUFeatureFlags) init];
    id v14 = [objc_allocWithZone(RPRemoteDisplayDiscovery) init];
    if (qword_1000CD630 != -1) {
      swift_once(&qword_1000CD630, sub_10001B498);
    }
    uint64_t v15 = (void *)qword_1000D35C0;
    v21[3] = &type metadata for ConversationServerBag;
    uint64_t v21[4] = &off_1000C61D8;
    uint64_t v16 = (char *)objc_allocWithZone(ObjectType);
    uint64_t v17 = sub_10000F354((uint64_t)v21, (uint64_t)&type metadata for ConversationServerBag);
    __chkstk_darwin(v17);
    (*(void (**)(void))(v18 + 16))();
    sub_100079C28(a1, v11, v10, v12, v13, v20, v14, v15, v16);
    sub_10000F2F0(v21);
    uint64_t v19 = swift_getObjectType(v7);
    swift_deallocPartialClassInstance( v7,  v19,  *(unsigned int *)((swift_isaMask & *v7) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v7) + 0x34LL));
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000581A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10005820C, qword_1000D35E0, 0LL);
}

uint64_t sub_10005820C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient);
  *(void *)(v0 + 24) = v1;
  return swift_task_switch(sub_100058230, v1, 0LL);
}

uint64_t sub_100058230()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v2 + 208) = &off_1000C4B90;
  swift_unknownObjectWeakAssign(v2 + 200, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058270(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  id v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a4 += 16LL;
  swift_beginAccess(a4, v23, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a4, v11);
  if (result)
  {
    id v13 = (void *)result;
    uint64_t v14 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v10, 1LL, 1LL, v14);
    uint64_t v15 = qword_1000CD668;
    id v16 = v13;
    swift_bridgeObjectRetain(a3);
    if (v15 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v18 = qword_1000D35E0;
    uint64_t v19 = sub_10001CFD8( &qword_1000CF800,  v17,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
    uint64_t v20 = swift_allocObject(&unk_1000C4F78, 64LL, 7LL);
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v18;
    *(void *)(v20 + 24) = v19;
    *(void *)(v20 + 32) = v16;
    *(_BYTE *)(v20 + 40) = a1;
    *(void *)(v20 + 48) = a2;
    *(void *)(v20 + 56) = a3;
    swift_retain(v18);
    uint64_t v21 = sub_10004EC20((uint64_t)v10, (uint64_t)&unk_1000CFA88, v20);

    return swift_release(v21);
  }

  return result;
}

uint64_t sub_1000583F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = (void *)swift_task_alloc(dword_1000CFA94);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v7;
  v11[1] = sub_1000193E4;
  return sub_100058484(a5, a6, a7);
}

uint64_t sub_100058484(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 56) = a3;
  *(void *)(v4 + 64) = v3;
  *(void *)(v4 + 48) = a2;
  *(_BYTE *)(v4 + 96) = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 72) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 80) = v6;
  *(void *)(v4 + 88) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100058518, qword_1000D35E0, 0LL);
}

uint64_t sub_100058518()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v6 = swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = *(unsigned __int8 *)(v0 + 96);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = swift_slowAlloc(64LL, -1LL);
    uint64_t v26 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    unint64_t v12 = 0x80000001000A5020LL;
    if (!v9) {
      unint64_t v12 = 0x80000001000A5050LL;
    }
    if (v9 == 1) {
      uint64_t v13 = 0xD000000000000027LL;
    }
    else {
      uint64_t v13 = 0xD00000000000002ALL;
    }
    if (v9 == 1) {
      unint64_t v14 = 0x80000001000A5080LL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v15 = *(void *)(v0 + 56);
    *(void *)(v0 + 32) = sub_10009BE3C(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    if (v15)
    {
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 48);
      *(void *)(v0 + 24) = v4;
      swift_bridgeObjectRetain(v4);
      uint64_t v16 = String.init<A>(reflecting:)(v0 + 16, &type metadata for String);
      unint64_t v18 = v17;
    }

    else
    {
      unint64_t v18 = 0xE300000000000000LL;
      uint64_t v16 = 7104878LL;
    }

    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 72);
    *(void *)(v0 + 40) = sub_10009BE3C(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_bridgeObjectRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Discovery session state changed to %s with %s",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v11, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v23);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 72);

    swift_bridgeObjectRelease_n(v4, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }

  if (*(_BYTE *)(v0 + 96) == 1) {
    sub_10005C7BC(1);
  }
  else {
    sub_10005CC00(1);
  }
  swift_task_dealloc(*(void *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000587F8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v5 = 138412290;
      swift_errorRetain(a1);
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
      uint64_t *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to activate remote display discovery: %@", v5, 0xCu);
      uint64_t v8 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v6, 1LL, v8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

uint64_t sub_1000589D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CF974);
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100058A44;
  return sub_100058AF0();
}

uint64_t sub_100058A44()
{
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  uint64_t v2 = (void *)swift_task_alloc(dword_1000CF97C);
  *(void *)(v1 + 32) = v2;
  *uint64_t v2 = v4;
  v2[1] = sub_100058AA8;
  return sub_1000593A8();
}

uint64_t sub_100058AA8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100058AF0()
{
  v1[14] = v0;
  uint64_t v2 = type metadata accessor for NCProtoTVLaunchedEvent(0LL);
  v1[15] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[16] = v3;
  v1[17] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v4 = qword_1000D35E0;
  v1[18] = qword_1000D35E0;
  return swift_task_switch(sub_100058B80, v4, 0LL);
}

uint64_t sub_100058B80()
{
  *(void *)(v0 + 152) = *(void *)(*(void *)(v0 + 112) + OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100058BF4, qword_1000D35C8, 0LL);
}

uint64_t sub_100058BF4()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[14];
  *(void *)(v1 + 24) = &off_1000C4B08;
  swift_unknownObjectWeakAssign(v1 + 16, v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CE92C);
  v0[20] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100058C58;
  return sub_100021EBC();
}

uint64_t sub_100058C58()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000591D4;
  }
  else {
    uint64_t v4 = sub_100058CBC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 144), 0LL);
}

uint64_t sub_100058CBC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void *)v0[14];
  uint64_t v3 = *(void *)(v1 + 32);
  v0[12] = v3;
  uint64_t v4 = swift_allocObject(&unk_1000C4DE8, 24LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v2;
  swift_retain(v3);
  uint64_t v5 = v2;
  uint64_t v6 = sub_10000360C(&qword_1000CF980);
  uint64_t v7 = sub_100018F4C( &qword_1000CF988,  &qword_1000CF980,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  uint64_t v8 = Publisher<>.sink(receiveValue:)(sub_10007C558, v4, v6, v7);
  swift_release(v4);
  swift_release(v0[12]);
  int v9 = &v5[OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables];
  swift_beginAccess(&v5[OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables], v0 + 2, 33LL, 0LL);
  AnyCancellable.store(in:)(v9);
  swift_endAccess(v0 + 2);
  swift_release(v8);
  uint64_t v10 = *(void *)(v1 + 40);
  v0[13] = v10;
  uint64_t v11 = swift_allocObject(&unk_1000C4E10, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v5;
  unint64_t v12 = v5;
  swift_retain(v10);
  uint64_t v13 = Publisher<>.sink(receiveValue:)(sub_10007C580, v11, v6, v7);
  swift_release(v11);
  swift_release(v0[13]);
  swift_beginAccess(v9, v0 + 5, 33LL, 0LL);
  AnyCancellable.store(in:)(v9);
  swift_endAccess(v0 + 5);
  swift_release(v13);
  return swift_task_switch(sub_100058E84, qword_1000D35C8, 0LL);
}

uint64_t sub_100058E84()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  swift_beginAccess(v1 + 48, v0 + 8, 0LL, 0LL);
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  v0[22] = sub_10000B214(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100058EEC, v2, 0LL);
}

void sub_100058EEC()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if ((v1 & 0x8000000000000000LL) == 0 && (v1 & 0x4000000000000000LL) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    *(void *)(v0 + 184) = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_10:
    swift_release(*(void *)(v0 + 176));
    swift_task_dealloc(*(void *)(v0 + 136));
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v5 = swift_bridgeObjectRetain(*(void *)(v0 + 176));
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_release(v1);
  *(void *)(v0 + 184) = v2;
  if (!v2) {
    goto LABEL_10;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 176);
    *(void *)(v0 + 192) = 0LL;
    if ((v3 & 0xC000000000000001LL) != 0) {
      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
    }
    else {
      uint64_t v4 = swift_retain(*(void *)(v3 + 32));
    }
    *(void *)(v0 + sub_10001D15C(v0 + 200) = v4;
    swift_task_switch(sub_100058FB0, *(void *)(v0 + 144), 0LL);
  }

uint64_t sub_100058FB0()
{
  uint64_t v1 = v0[25];
  NCProtoTVLaunchedEvent.init()();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  v0[26] = qword_1000D35C8;
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_1000CF994);
  v0[27] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)sub_100059030;
  return sub_100052658(4, v0[17], v3, v2, 0);
}

uint64_t sub_100059030()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 208LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 224LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_1000590D8;
  }
  else {
    uint64_t v4 = sub_100059094;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_100059094()
{
  uint64_t v1 = v0[18];
  (*(void (**)(void, void))(v0[16] + 8LL))(v0[17], v0[15]);
  return swift_task_switch(sub_100082E6C, v1, 0LL);
}

uint64_t sub_1000590D8()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  swift_errorRelease(v0[28]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return swift_task_switch(sub_100059134, v2, 0LL);
}

uint64_t sub_100059134()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 184);
  swift_release(*(void *)(v0 + 200));
  if (v1 + 1 == v2)
  {
    swift_release(*(void *)(v0 + 176));
    swift_task_dealloc(*(void *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 192) + 1LL;
    *(void *)(v0 + 192) = v4;
    uint64_t v5 = *(void *)(v0 + 176);
    if ((v5 & 0xC000000000000001LL) != 0) {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v5);
    }
    else {
      uint64_t v6 = swift_retain(*(void *)(v5 + 8 * v4 + 32));
    }
    *(void *)(v0 + sub_10001D15C(v0 + 200) = v6;
    return swift_task_switch(sub_100058FB0, *(void *)(v0 + 144), 0LL);
  }

uint64_t sub_1000591D4()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 168);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 88) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to activate device manager: %@", v8, 0xCu);
    uint64_t v11 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 168));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  swift_task_dealloc(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000593A8()
{
  *(void *)(v1 + 24) = v0;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v2 = qword_1000D35E0;
  *(void *)(v1 + 32) = qword_1000D35E0;
  return swift_task_switch(sub_100059410, v2, 0LL);
}

uint64_t sub_100059410()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1000CE924);
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100059464;
  return sub_10002187C();
}

uint64_t sub_100059464(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 32);
  if (v1)
  {
    uint64_t v7 = sub_1000595D0;
  }

  else
  {
    *(void *)(v4 + 56) = a1;
    uint64_t v7 = sub_1000594D8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000594D8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_bleDiscoveryAssertion);
  *(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_bleDiscoveryAssertion) = *(void *)(v0 + 56);
  swift_release(v2);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully grabbed BLE discovery assertion.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000595D0()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 48);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to grab BLE discovery assertion due to %@.", v8, 0xCu);
    uint64_t v11 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 48));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10005979C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  os_state_remove_handler(*(void *)&v0[OBJC_IVAR___CSDNeighborhoodActivityConduit_stateHandle]);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_100059A4C()
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return sub_100081348(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100059AA0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 1LL, 1LL, v12);
  uint64_t v13 = qword_1000CD668;
  id v14 = a2;
  swift_retain(v11);
  if (v13 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v16 = qword_1000D35E0;
  uint64_t v17 = sub_10001CFD8( &qword_1000CF800,  v15,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  unint64_t v18 = (void *)swift_allocObject(a3, 48LL, 7LL);
  v18[2] = v16;
  v18[3] = v17;
  v18[4] = v14;
  v18[5] = v11;
  swift_retain(v16);
  uint64_t v19 = sub_10004EC20((uint64_t)v10, a4, (uint64_t)v18);
  return swift_release(v19);
}

uint64_t sub_100059BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CF9BC);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1000193E4;
  return sub_100059C54(a5);
}

uint64_t sub_100059C54(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100059CB8, qword_1000D35E0, 0LL);
}

uint64_t sub_100059CB8()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  uint64_t v3 = swift_retain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[3];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = *(void *)(v7 + 16);
    unint64_t v11 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain(v11);
    v0[2] = sub_10009BE3C(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    swift_release(v7);
    swift_bridgeObjectRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "ConduitDevice disappeared %s, dropping related nearby conversations",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release(v7);
  }

  uint64_t v12 = (void *)swift_task_alloc(dword_1000CF9C4);
  v0[5] = v12;
  void *v12 = v0;
  v12[1] = sub_100059E98;
  return sub_10005CF70(v0[3]);
}

uint64_t sub_100059E98()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  uint64_t v3 = (void *)swift_task_alloc(dword_1000CF9CC);
  *(void *)(v1 + 48) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100059F00;
  return sub_10005D294(*(void *)(v1 + 24));
}

uint64_t sub_100059F00()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100059F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v12 = (void *)swift_task_alloc(dword_1000CFEBC);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v12;
  void *v12 = v7;
  v12[1] = sub_10000C2B8;
  return sub_100059FF0(a1, a5, a6, a7);
}

uint64_t sub_100059FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[12] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  void v5[13] = v8;
  v5[14] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v9 = qword_1000D35E0;
  v5[15] = qword_1000D35E0;
  return swift_task_switch(sub_10005A08C, v9, 0LL);
}

uint64_t sub_10005A08C()
{
  uint64_t v1 = swift_allocObject(&unk_1000C51F8, 32LL, 7LL);
  v0[16] = v1;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v1 + 24) = 0LL;
  if (qword_1000CD6E8 != -1) {
    swift_once(&qword_1000CD6E8, sub_100096694);
  }
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v6 = (void *)v0[10];
  uint64_t v19 = v0[9];
  uint64_t v7 = v0[7];
  uint64_t v17 = v2;
  uint64_t v18 = v0[8];
  v0[17] = static Duration.seconds(_:)(*(double *)&qword_1000D08A0);
  v0[18] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v7, v4);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  unint64_t v11 = (v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_1000C5450, v13 + 8, v9 | 7);
  v0[19] = v14;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v10, v17, v4);
  *(void *)(v14 + v11) = v1;
  *(void *)(v14 + v12) = v18;
  *(void *)(v14 + v13) = v19;
  id v15 = v6;
  swift_retain(v1);
  swift_retain(v18);
  return swift_task_switch(sub_10005A1E4, 0LL, 0LL);
}

uint64_t sub_10005A1E4()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v4 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v5 = (void *)swift_task_alloc(48LL);
  v0[20] = v5;
  _OWORD v5[2] = &unk_1000CFEC8;
  _OWORD v5[3] = v1;
  v5[4] = v3;
  void v5[5] = v2;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[21] = v6;
  void *v6 = v0;
  v6[1] = sub_10005A29C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0[6], v4, v4, 0LL, 0LL, &unk_1000CFED0, v5, v4);
}

uint64_t sub_10005A29C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10005A358;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v2[19];
    uint64_t v7 = v2[20];
    uint64_t v8 = v2[15];
    swift_release(v6);
    swift_task_dealloc(v7);
    uint64_t v4 = sub_10005A318;
    uint64_t v5 = v8;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_10005A318()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A358()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 160));
  return swift_task_switch(sub_10005A398, v1, 0LL);
}

uint64_t sub_10005A398()
{
  uint64_t v1 = v0 + 16;
  swift_release(*(void *)(v0 + 152));
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 176);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain(v8);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 40) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4, v9 + 12);
    *uint64_t v10 = v11;
    uint64_t v1 = v0 + 16;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[Handoff][PullExpanse] Failed to complete task due to %@.",  v9,  0xCu);
    uint64_t v12 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 176));
    swift_errorRelease(v8);
  }

  uint64_t v13 = *(void *)(v0 + 128);
  swift_beginAccess(v13 + 16, v1, 0LL, 0LL);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v15)
  {
    uint64_t v16 = *(void *)(*(void *)(v0 + 128) + 16LL);
    swift_bridgeObjectRetain(v15);
    sub_10005EA74(v16, v15);
    uint64_t v14 = swift_bridgeObjectRelease(v15);
  }

  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 112);
  swift_willThrow(v14);
  swift_release(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A5D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000360C(&qword_1000CDE48);
  __chkstk_darwin(v4);
  os_log_type_t v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v7, (uint64_t)qword_1000D3620);
  swift_errorRetain(a1);
  uint64_t v8 = swift_errorRetain(a1);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = a1;
    v25[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_errorRetain(a1);
    uint64_t v13 = sub_10000360C(&qword_1000CF8D0);
    uint64_t v14 = String.init<A>(describing:)(&v24, v13);
    unint64_t v16 = v15;
    uint64_t v24 = sub_10009BE3C(v14, v15, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Handoff Failed with error: %s.", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate, v17);
  if (Strong)
  {
    uint64_t v19 = Strong;
    uint64_t v20 = swift_allocObject(&unk_1000C51D0, 24LL, 7LL);
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = a1;
    swift_errorRetain(a1);
    sub_100012C78((uint64_t)sub_100081E4C, v20);
    swift_unknownObjectRelease(v19);
    swift_release(v20);
  }

  uint64_t v21 = type metadata accessor for HandoffState(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v6, 1LL, 1LL, v21);
  uint64_t v22 = v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState, v25, 33LL, 0LL);
  sub_10007B02C((uint64_t)v6, v22);
  swift_endAccess(v25);
  sub_100053C78();
  return sub_10000BFC8((uint64_t)v6, &qword_1000CDE48);
}

uint64_t sub_10005A89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  void v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v8 = qword_1000D35E0;
  v4[11] = qword_1000D35E0;
  return swift_task_switch(sub_10005A934, v8, 0LL);
}

uint64_t sub_10005A934()
{
  if (qword_1000CD6E8 != -1) {
    swift_once(&qword_1000CD6E8, sub_100096694);
  }
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = (void *)v0[6];
  uint64_t v7 = v0[3];
  uint64_t v8 = (void *)v0[4];
  v0[12] = static Duration.seconds(_:)(*(double *)&qword_1000D08A0);
  v0[13] = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  unint64_t v12 = (v2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = swift_allocObject(&unk_1000C5400, v12 + 8, v10 | 7);
  v0[14] = v13;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v13 + 24) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v11, v1, v3);
  *(void *)(v13 + v12) = v6;
  id v14 = v5;
  id v15 = v8;
  return swift_task_switch(sub_10005AA3C, 0LL, 0LL);
}

uint64_t sub_10005AA3C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[15] = v4;
  void v4[2] = &unk_1000CFE80;
  v4[3] = v1;
  v4[4] = v3;
  v4[5] = v2;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10005AAE0;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10005AAE0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10005AB90;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v2[14];
    uint64_t v7 = v2[15];
    uint64_t v8 = v2[11];
    swift_release(v6);
    swift_task_dealloc(v7);
    uint64_t v4 = sub_10005AB5C;
    uint64_t v5 = v8;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_10005AB5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005AB90()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 120));
  return swift_task_switch(sub_10005ABD0, v1, 0LL);
}

uint64_t sub_10005ABD0()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 136);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[Handoff][PullToTV] Failed to complete task due to %@.",  v8,  0xCu);
    uint64_t v11 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 136));
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 80);
  swift_willThrow(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005ADA8()
{
  uint64_t v1 = type metadata accessor for HandoffState(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v57 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v58 = (uint64_t)&v56 - v5;
  uint64_t v64 = type metadata accessor for Logger(0LL);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v7 = __chkstk_darwin(v60);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v56 - v10;
  uint64_t v12 = sub_10000360C(&qword_1000CDE48);
  uint64_t v13 = __chkstk_darwin(v12);
  id v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v59 = (uint64_t)&v56 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char **)((char *)&v56 - v19);
  __chkstk_darwin(v18);
  uint64_t v63 = v0;
  uint64_t v21 = (uint64_t)&v0[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState];
  uint64_t v23 = (char *)&v56 - v22;
  swift_beginAccess(v21, v67, 0LL, 0LL);
  sub_100005318(v21, (uint64_t)v23, &qword_1000CDE48);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  if (v24(v23, 1LL, v1) == 1) {
    return sub_10000BFC8((uint64_t)v23, &qword_1000CDE48);
  }
  sub_100005318((uint64_t)v23, (uint64_t)v20, &qword_1000CDE48);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v1);
  uint64_t v56 = v23;
  if (EnumCaseMultiPayload == 1)
  {
    sub_10004EA7C((uint64_t)v20, (uint64_t)v11, type metadata accessor for HandoffInfo);
    uint64_t v26 = v64;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    sub_10000ADF4(v26, (uint64_t)qword_1000D3620);
    uint64_t v27 = sub_100018CFC((uint64_t)v11, (uint64_t)v9, type metadata accessor for HandoffInfo);
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v68 = (char *)v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v32 = sub_10009A2E0();
      unint64_t v34 = v33;
      uint64_t v66 = sub_10009BE3C(v32, v33, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v34);
      sub_10000BF5C((uint64_t)v9, type metadata accessor for HandoffInfo);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Ending existing conversation as we join another: %s",  v30,  0xCu);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      sub_10000BF5C((uint64_t)v9, type metadata accessor for HandoffInfo);
    }

    id v46 = *(id *)&v63[OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v48 = [v46 activeConversationWithGroupUUID:isa];

    sub_10005D640(v48);
    sub_10000BF5C((uint64_t)v11, type metadata accessor for HandoffInfo);
    uint64_t v23 = v56;
    return sub_10000BFC8((uint64_t)v23, &qword_1000CDE48);
  }

  swift_release(*v20);
  uint64_t v35 = v64;
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v36 = sub_10000ADF4(v35, (uint64_t)qword_1000D3620);
  uint64_t v37 = v61;
  uint64_t v38 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v36, v35);
  uint64_t v39 = v63;
  id v40 = (os_log_s *)Logger.logObject.getter(v39);
  LODWORD(v65) = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, (os_log_type_t)v65))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v63 = (char *)swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = v63;
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v42 = v21;
    uint64_t v43 = v59;
    sub_100005318(v42, v59, &qword_1000CDE48);
    sub_100005318(v43, (uint64_t)v15, &qword_1000CDE48);
    if (v24(v15, 1LL, v1) == 1)
    {
      sub_10000BFC8((uint64_t)v15, &qword_1000CDE48);
      unint64_t v44 = 0xE300000000000000LL;
      uint64_t v45 = 7104878LL;
    }

    else
    {
      uint64_t v50 = v58;
      sub_10004EA7C((uint64_t)v15, v58, type metadata accessor for HandoffState);
      uint64_t v51 = v57;
      sub_100018CFC(v50, v57, type metadata accessor for HandoffState);
      uint64_t v45 = String.init<A>(reflecting:)(v51, v1);
      unint64_t v44 = v52;
      sub_10000BF5C(v50, type metadata accessor for HandoffState);
    }

    uint64_t v53 = v61;
    sub_10000BFC8(v59, &qword_1000CDE48);
    uint64_t v66 = sub_10009BE3C(v45, v44, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v41 + 4, v41 + 12);

    swift_bridgeObjectRelease(v44);
    _os_log_impl( (void *)&_mh_execute_header,  v40,  (os_log_type_t)v65,  "Rejecting request because we're already joining a conversation: %s",  v41,  0xCu);
    uint64_t v54 = v63;
    swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v53, v35);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v35);
  }

  id v55 = (id)TUMakeNeighborhoodConduitError(16LL, 0LL);
  swift_willThrow(v55);
  return sub_10000BFC8((uint64_t)v56, &qword_1000CDE48);
}

uint64_t sub_10005B494(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [a2 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  NCProtoJoinActiveConversationRequest.activeConversationUuidString.setter(v8, v10);
  NCProtoJoinActiveConversationRequest.isAudioEnabled.setter([a2 isAudioEnabled]);
  return NCProtoJoinActiveConversationRequest.isVideoEnabled.setter([a2 isVideoEnabled]);
}

uint64_t sub_10005B58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = type metadata accessor for HandoffInfo(0LL);
  v4[19] = v5;
  v4[20] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for HandoffState(0LL);
  v4[21] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[22] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[23] = swift_task_alloc(v8);
  _BYTE v4[24] = swift_task_alloc(v8);
  uint64_t started = type metadata accessor for NCProtoStartConversationRequest(0LL);
  v4[25] = started;
  uint64_t v10 = *(void *)(started - 8);
  v4[26] = v10;
  v4[27] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NCProtoStartConversationResponse(0LL);
  v4[28] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[29] = v12;
  v4[30] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (*(void *)(*(void *)(sub_10000360C(&qword_1000CDE48) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[31] = swift_task_alloc(v13);
  v4[32] = swift_task_alloc(v13);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v14 = qword_1000D35E0;
  v4[33] = qword_1000D35E0;
  return swift_task_switch(sub_10005B6D8, v14, 0LL);
}

uint64_t sub_10005B6D8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = sub_100089240(0);
  *(void *)(v0 + 272) = v2;
  if (![*(id *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags) lagunaEnabled])
  {
    uint64_t v35 = (void *)TUMakeNeighborhoodConduitError(10101LL, 0LL);
LABEL_28:
    swift_willThrow(v35);
    sub_100089490(0, v2);
    swift_release(v2);
    uint64_t v51 = *(void *)(v0 + 248);
    uint64_t v52 = *(void *)(v0 + 240);
    uint64_t v53 = *(void *)(v0 + 216);
    uint64_t v55 = *(void *)(v0 + 184);
    uint64_t v54 = *(void *)(v0 + 192);
    uint64_t v56 = *(void *)(v0 + 160);
    swift_task_dealloc(*(void *)(v0 + 256));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (!*(void *)(*(void *)(v0 + 128) + 16LL))
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_10000ADF4(v36, (uint64_t)qword_1000D3620);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "[StartConversation] Rejecting start conversation request the handle value set is empty.",  v40,  2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    uint64_t v35 = (void *)TUMakeNeighborhoodConduitError(3LL, 0LL);
    goto LABEL_28;
  }

  CurrentValueSubject.value.getter();
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  *(void *)(v0 + 280) = v3;
  *(void *)(v0 + 288) = v4;
  if (!v4)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    uint64_t v42 = sub_10000ADF4(v41, (uint64_t)qword_1000D3620);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "[StartConversation] Rejecting start conversation request because we don't have an active laguna session.",  v45,  2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    uint64_t v35 = (void *)TUMakeNeighborhoodConduitError(7LL, 0LL);
    goto LABEL_28;
  }

  uint64_t v57 = v2;
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v59 = *(void *)(v0 + 40);
  uint64_t v60 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v61 = *(void *)(v0 + 176);
  uint64_t v62 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain(v4);
  uint64_t v58 = v3;
  sub_10001885C(v3, v4, v60, v59, v5, v6, v7, v9, v8);
  uint64_t v12 = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  *(void *)(v0 + 296) = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  uint64_t v13 = v11 + v12;
  swift_beginAccess(v13, v0 + 88, 0LL, 0LL);
  sub_100005318(v13, v10, &qword_1000CDE48);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  *(void *)(v0 + 304) = v14;
  int v15 = v14(v10, 1LL, v62);
  uint64_t v16 = *(void *)(v0 + 256);
  if (v15 != 1)
  {
    swift_bridgeObjectRelease(v4);
    sub_10000BFC8(v16, &qword_1000CDE48);
    uint64_t v2 = v57;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    uint64_t v47 = sub_10000ADF4(v46, (uint64_t)qword_1000D3620);
    id v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "[StartConversation] Rejecting start conversation request because there's already a conversation handed off.",  v50,  2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    uint64_t v35 = (void *)TUMakeNeighborhoodConduitError(20LL, 0LL);
    goto LABEL_28;
  }

  uint64_t v17 = v4;
  sub_10000BFC8(*(void *)(v0 + 256), &qword_1000CDE48);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = sub_10000ADF4(v18, (uint64_t)qword_1000D3620);
  *(void *)(v0 + 312) = v19;
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = *(void *)(v0 + 136);
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v63 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    unint64_t v25 = TUConversationAVMode.description.getter(v22);
    unint64_t v27 = v26;
    *(void *)(v0 + 112) = sub_10009BE3C(v25, v26, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v27);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[StartConversation] Sending start conversation request with mode %s...",  v23,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v28 = *(void *)(v0 + 200);
  uint64_t v29 = *(void *)(v0 + 136);
  uint64_t v30 = swift_task_alloc(32LL);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = v29;
  uint64_t v31 = sub_10001CFD8( &qword_1000CF4F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoStartConversationRequest,  (uint64_t)&protocol conformance descriptor for NCProtoStartConversationRequest);
  static Message.with(_:)(sub_1000823E8, v30, v28, v31);
  swift_task_dealloc(v30);
  uint64_t v32 = qword_1000CD638;
  swift_bridgeObjectRetain(v17);
  if (v32 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  *(void *)(v0 + 320) = qword_1000D35C8;
  unint64_t v33 = (void *)swift_task_alloc(dword_1000CF4F4);
  *(void *)(v0 + 328) = v33;
  *unint64_t v33 = v0;
  v33[1] = sub_10005BD80;
  return sub_10003BAFC(*(void *)(v0 + 240), 3, *(void *)(v0 + 216), v58, v17, 0);
}

uint64_t sub_10005BD80()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10005C09C;
  }
  else {
    uint64_t v4 = sub_10005BDE4;
  }
  return swift_task_switch(v4, *(void *)(v2 + 320), 0LL);
}

uint64_t sub_10005BDE4()
{
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[26];
  swift_bridgeObjectRelease(v0[36]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10005BE68, v1, 0LL);
}

uint64_t sub_10005BE68()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 168);
  sub_100005318(*(void *)(v0 + 144) + *(void *)(v0 + 296), v2, &qword_1000CDE48);
  if (v1(v2, 1LL, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 248);
    swift_bridgeObjectRelease(*(void *)(v0 + 288));
    uint64_t v5 = sub_10000BFC8(v4, &qword_1000CDE48);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[StartConversation] HandoffState unexpectedly unavailable.",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 272);

    id v10 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    swift_willThrow(v10);
    sub_100089490(0, v9);
    swift_release(v9);
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 160);
    swift_task_dealloc(*(void *)(v0 + 256));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v18 = sub_10004EA7C(*(void *)(v0 + 248), *(void *)(v0 + 192), type metadata accessor for HandoffState);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "[StartConversation] Conversation started, waiting for handoff completion.",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    return swift_task_switch(sub_10005C198, 0LL, 0LL);
  }

uint64_t sub_10005C09C()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[33];
  (*(void (**)(void, void))(v0[26] + 8LL))(v0[27], v0[25]);
  swift_bridgeObjectRelease_n(v1, 2LL);
  return swift_task_switch(sub_10005C0F4, v2, 0LL);
}

uint64_t sub_10005C0F4()
{
  uint64_t v1 = *(void *)(v0 + 272);
  sub_100089490(0, v1);
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C198()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  sub_100018CFC(v0[24], v1, type metadata accessor for HandoffState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  uint64_t v4 = (uint64_t *)v0[23];
  if (EnumCaseMultiPayload == 1)
  {
    sub_10004EA7C((uint64_t)v4, v0[20], type metadata accessor for HandoffInfo);
    return swift_task_switch(sub_10005C410, v0[33], 0LL);
  }

  else
  {
    uint64_t v6 = *v4;
    v0[43] = *v4;
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[44] = v7;
    uint64_t v8 = sub_10000360C(&qword_1000CF8D0);
    *uint64_t v7 = v0;
    v7[1] = sub_10005C270;
    return Task.value.getter(v0[20], v6, v0[19], v8, &protocol self-conformance witness table for Error);
  }

uint64_t sub_10005C270()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 352LL);
  *(void *)(*(void *)v1 + 36Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10005C310;
  }
  else {
    uint64_t v3 = sub_10005C2D4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10005C2D4()
{
  return swift_task_switch(sub_10005C410, *(void *)(v0 + 264), 0LL);
}

uint64_t sub_10005C310()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[33];
  swift_release(v0[43]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10005C35C, v2, 0LL);
}

uint64_t sub_10005C35C()
{
  uint64_t v1 = *(void *)(v0 + 272);
  sub_10000BF5C(*(void *)(v0 + 192), type metadata accessor for HandoffState);
  sub_100089490(0, v1);
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C410(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[StartConversation] Handoff completed, adding recipients.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_1000CFE04);
  v1[46] = (uint64_t)v5;
  *uint64_t v5 = v1;
  v5[1] = (uint64_t *)sub_10005C4E0;
  return sub_100066B0C(v1[16], v1[35], v1[36], 0);
}

uint64_t sub_10005C4E0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 368);
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 264);
    uint64_t v5 = sub_10005C62C;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 264);
    swift_bridgeObjectRelease(*(void *)(v2 + 288));
    uint64_t v5 = sub_10005C554;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10005C554()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 120);
  sub_10000BF5C(v6, type metadata accessor for HandoffState);
  sub_10004EA7C(v8, v9, type metadata accessor for HandoffInfo);
  sub_100089490(0, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005C62C()
{
  uint64_t v1 = swift_bridgeObjectRelease(*(void *)(v0 + 288));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[StartConversation] Adding recipients failed, leaving conversation.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 144);

  id v9 = *(id *)(v8 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v9 leaveConversationWithUUID:isa];

  swift_willThrow(v11);
  sub_10000BF5C(v7, type metadata accessor for HandoffInfo);
  sub_10000BF5C(v6, type metadata accessor for HandoffState);
  sub_100089490(0, v5);
  swift_release(v5);
  uint64_t v12 = *(void *)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005C7BC(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(&v1[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons], v32, 33LL, 0LL);
  sub_100090194(&v31, v3);
  swift_endAccess(v32);
  if (*(void *)&v1[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion])
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_10000ADF4(v7, (uint64_t)qword_1000D3620);
    id v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      v32[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      if (v3) {
        uint64_t v13 = 0xD000000000000010LL;
      }
      else {
        uint64_t v13 = 0xD000000000000013LL;
      }
      if (v3) {
        unint64_t v14 = 0x80000001000A55E0LL;
      }
      else {
        unint64_t v14 = 0x80000001000A5600LL;
      }
      uint64_t v31 = sub_10009BE3C(v13, v14, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v14);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[Assertions] Inserted reason %s into existing FaceTime process assertion.",  v11,  0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10000ADF4(v15, (uint64_t)qword_1000D3620);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      v32[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      if (v3) {
        uint64_t v21 = 0xD000000000000010LL;
      }
      else {
        uint64_t v21 = 0xD000000000000013LL;
      }
      if (v3) {
        unint64_t v22 = 0x80000001000A55E0LL;
      }
      else {
        unint64_t v22 = 0x80000001000A5600LL;
      }
      uint64_t v31 = sub_10009BE3C(v21, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "[Assertions] Acquiring FaceTime process assertion for %s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v23 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v6, 1LL, 1LL, v23);
    uint64_t v24 = qword_1000CD668;
    id v26 = v2;
    if (v24 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v27 = qword_1000D35E0;
    uint64_t v28 = sub_10001CFD8( &qword_1000CF800,  v25,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
    uint64_t v29 = swift_allocObject(&unk_1000C4F00, 41LL, 7LL);
    *(void *)(v29 + swift_weakDestroy(v0 + 16) = v27;
    *(void *)(v29 + 24) = v28;
    *(void *)(v29 + 32) = v26;
    *(_BYTE *)(v29 + 40) = v3;
    swift_retain(v27);
    uint64_t v30 = sub_10004EC20((uint64_t)v6, (uint64_t)&unk_1000CFA40, v29);
    swift_release(v30);
  }

uint64_t sub_10005CC00(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_10000ADF4(v7, (uint64_t)qword_1000D3620);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = v2;
    uint64_t v12 = v6;
    uint64_t v13 = (uint8_t *)v11;
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v34[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    if (v3) {
      uint64_t v15 = 0xD000000000000010LL;
    }
    else {
      uint64_t v15 = 0xD000000000000013LL;
    }
    if (v3) {
      unint64_t v16 = 0x80000001000A55E0LL;
    }
    else {
      unint64_t v16 = 0x80000001000A5600LL;
    }
    uint64_t v33 = sub_10009BE3C(v15, v16, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[Assertions] Removing reason %s from FaceTime assertion.",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    uint64_t v17 = v13;
    uint64_t v6 = v12;
    uint64_t v2 = v32;
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  os_log_type_t v18 = &v2[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons];
  swift_beginAccess(&v2[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons], v34, 33LL, 0LL);
  sub_1000950AC(v3);
  uint64_t result = swift_endAccess(v34);
  if (!*(void *)(*(void *)v18 + 16LL)
    && *(void *)&v2[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion])
  {
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(result);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[Assertions] Invalidating and releasing FaceTime assertion after 10 seconds because there are no reasons left.",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v23 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v6, 1LL, 1LL, v23);
    uint64_t v24 = qword_1000CD668;
    id v26 = v2;
    if (v24 != -1) {
      swift_once(&qword_1000CD668, sub_100053B3C);
    }
    uint64_t v27 = qword_1000D35E0;
    uint64_t v28 = sub_10001CFD8( &qword_1000CF800,  v25,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
    uint64_t v29 = (void *)swift_allocObject(&unk_1000C4ED8, 40LL, 7LL);
    v29[2] = v27;
    v29[3] = v28;
    void v29[4] = v26;
    swift_retain(v27);
    uint64_t v30 = sub_100051BF8((uint64_t)v6, (uint64_t)&unk_1000CFA08, (uint64_t)v29);
    return swift_release(v30);
  }

  return result;
}

uint64_t sub_10005CF70(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v3 = qword_1000D35E0;
  v2[5] = qword_1000D35E0;
  return swift_task_switch(sub_10005CFD8, v3, 0LL);
}

uint64_t sub_10005CFD8()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = v0 + 24;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
  uint64_t v4 = swift_retain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 24);
  if (v7)
  {
    uint64_t v14 = (uint64_t *)(v0 + 16);
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)id v9 = 136315138;
    uint64_t v12 = *(void *)(v8 + 16);
    unint64_t v11 = *(void *)(v8 + 24);
    swift_bridgeObjectRetain(v11);
    *uint64_t v14 = sub_10009BE3C(v12, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, v1, v9 + 4, v9 + 12);
    swift_release(v8);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reset nearby conversations for %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_release(v8);
  }

  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10005D1D4, qword_1000D35C8, 0LL);
}

uint64_t sub_10005D1D4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 48) = sub_10000CE6C();
  return swift_task_switch(sub_10005D218, v1, 0LL);
}

uint64_t sub_10005D218()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos);
  id v2 = *(id *)(v0 + 48);
  uint64_t v3 = swift_bridgeObjectRetain(v1);
  Swift::Int v4 = sub_100080D40(v3, v2);

  sub_100054ED8(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005D294(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v2[5] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10005D31C, qword_1000D35E0, 0LL);
}

uint64_t sub_10005D31C()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  uint64_t v3 = swift_retain(v1);
  Swift::Int v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 24);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = *(void *)(v7 + 16);
    unint64_t v11 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain(v11);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10009BE3C(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_release(v7);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reset session state for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release(v7);
  }

  uint64_t v13 = *(void **)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 24);
  sub_1000579AC(*(void *)(v14 + 16), *(void *)(v14 + 24));
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v12, 1LL, 1LL, v15);
  uint64_t v16 = qword_1000D35E0;
  uint64_t v18 = sub_10001CFD8( &qword_1000CF800,  v17,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v19 = (void *)swift_allocObject(&unk_1000C4E60, 48LL, 7LL);
  v19[2] = v16;
  v19[3] = v18;
  void v19[4] = v13;
  v19[5] = v14;
  swift_retain(v14);
  id v20 = v13;
  swift_retain(v16);
  uint64_t v21 = sub_10004EC20(v12, (uint64_t)&unk_1000CF9D8, (uint64_t)v19);
  swift_release(v21);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10005D5EC, qword_1000D35E0, 0LL);
}

uint64_t sub_10005D5EC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient);
  *(void *)(v0 + 32) = v1;
  return swift_task_switch(sub_10005D610, v1, 0LL);
}

uint64_t sub_10005D610()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005D640(void *a1)
{
  uint64_t v2 = v1;
  id v41 = a1;
  uint64_t v3 = sub_10000360C(&qword_1000CDE48);
  uint64_t v4 = __chkstk_darwin(v3);
  BOOL v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState, v44, 0LL, 0LL);
  sub_100005318(v15, (uint64_t)v8, &qword_1000CDE48);
  uint64_t v16 = type metadata accessor for HandoffState(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if (swift_getEnumCaseMultiPayload(v8, v16) == 1)
  {
    sub_10004EA7C((uint64_t)v8, (uint64_t)v14, type metadata accessor for HandoffInfo);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v19, (uint64_t)qword_1000D3620);
    uint64_t v20 = sub_100018CFC((uint64_t)v14, (uint64_t)v12, type metadata accessor for HandoffInfo);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    int v40 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      os_log_t v39 = v21;
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      v43[0] = v38;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v24 = v23 + 12;
      uint64_t v36 = v23 + 4;
      uint64_t v37 = v23;
      uint64_t v25 = sub_10009A2E0();
      unint64_t v27 = v26;
      uint64_t v42 = sub_10009BE3C(v25, v26, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v36, v24);
      swift_bridgeObjectRelease(v27);
      sub_10000BF5C((uint64_t)v12, type metadata accessor for HandoffInfo);
      uint64_t v21 = v39;
      uint64_t v28 = v37;
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v40, "Handoff ending for %s.", v37, 0xCu);
      uint64_t v29 = v38;
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_10000BF5C((uint64_t)v12, type metadata accessor for HandoffInfo);
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v6, 1LL, 1LL, v16);
    swift_beginAccess(v15, v43, 33LL, 0LL);
    sub_10007B02C((uint64_t)v6, v15);
    swift_endAccess(v43);
    sub_100053C78();
    sub_10000BFC8((uint64_t)v6, &qword_1000CDE48);
    if (v41)
    {
      id v32 = v41;
      sub_100019FB0(v32, (uint64_t)v14);
    }

    sub_100097488();
    sub_10000ACA0();
    id v33 = *(id *)(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v33 leaveConversationWithUUID:isa];

    uint64_t v30 = type metadata accessor for HandoffInfo;
    uint64_t v31 = (uint64_t)v14;
  }

  else
  {
    uint64_t v30 = type metadata accessor for HandoffState;
    uint64_t v31 = (uint64_t)v8;
  }

  return sub_10000BF5C(v31, v30);
}

uint64_t sub_10005DA30(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10005DAC0, qword_1000D35E0, 0LL);
}

uint64_t sub_10005DAC0()
{
  *(void *)(v0 + 64) = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR___CSDNeighborhoodActivityConduit_publisherService);
  return swift_task_switch(sub_10005DAE8, 0LL, 0LL);
}

uint64_t sub_10005DAE8()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[3];
  UUID.init()();
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[9] = v4;
  void v4[2] = v2;
  v4[3] = v1;
  v4[4] = v3;
  uint64_t v5 = swift_task_alloc(32LL);
  v0[10] = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  BOOL v6 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[11] = v6;
  uint64_t v7 = type metadata accessor for NCProtoDeviceTokenResponse(0LL);
  void *v6 = v0;
  v6[1] = sub_10005DBA8;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[2],  &unk_1000CFC90,  v4,  sub_10004D370,  v5,  0LL,  0LL,  v7);
}

uint64_t sub_10005DBA8()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v5 = sub_100082E7C;
  }
  else {
    uint64_t v5 = sub_100082E74;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10005DC28(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_10005DCB8, qword_1000D35E0, 0LL);
}

uint64_t sub_10005DCB8()
{
  *(void *)(v0 + 64) = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR___CSDNeighborhoodActivityConduit_publisherService);
  return swift_task_switch(sub_10005DCE0, 0LL, 0LL);
}

uint64_t sub_10005DCE0()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[3];
  UUID.init()();
  uint64_t v4 = (void *)swift_task_alloc(48LL);
  v0[9] = v4;
  void v4[2] = v2;
  v4[3] = v1;
  v4[4] = v3;
  uint64_t v5 = swift_task_alloc(32LL);
  v0[10] = v5;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v5 + 24) = v1;
  BOOL v6 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[11] = v6;
  uint64_t v7 = type metadata accessor for NCProtoJoinEvent(0LL);
  void *v6 = v0;
  v6[1] = sub_10005DDA0;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[2],  &unk_1000CFD80,  v4,  sub_10004EB04,  v5,  0LL,  0LL,  v7);
}

uint64_t sub_10005DDA0()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0) {
    uint64_t v5 = sub_10005DE68;
  }
  else {
    uint64_t v5 = sub_10005DE20;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10005DE20()
{
  uint64_t v1 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v1, *(void *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005DE68()
{
  uint64_t v1 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v1, *(void *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005DEB0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 48) = a2;
  *(void *)(v4 + 56) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(void *)(v4 + 40) = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v5 = qword_1000D35E0;
  *(void *)(v4 + 64) = qword_1000D35E0;
  return swift_task_switch(sub_10005DF20, v5, 0LL);
}

uint64_t sub_10005DF20()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(v0 + 56)
                                                             + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsService), "URIs"));
  uint64_t v2 = sub_1000052E0(0LL, &qword_1000CFDA0, &OBJC_CLASS___IDSURI_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease(v3);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v17 = _swiftEmptyArrayStorage[2];
    if (!v17) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }

  if (v3 < 0) {
    uint64_t v18 = v3;
  }
  else {
    uint64_t v18 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v3);
  if (!v4) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v55 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10009C450(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = v55;
    do
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v9 = v8;
      id v10 = [v8 prefixedURI];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      uint64_t v55 = v7;
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_10009C450(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v55;
      }

      ++v6;
      v7[2] = v15 + 1;
      uint64_t v16 = &v7[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
    }

    while (v4 != v6);
    swift_bridgeObjectRelease(v3);
    uint64_t v17 = v7[2];
    if (!v17) {
      goto LABEL_25;
    }
LABEL_18:
    swift_bridgeObjectRetain(v7);
    uint64_t v19 = v7 + 5;
    while (1)
    {
      uint64_t v20 = *v19;
      swift_bridgeObjectRetain(*v19);
      NSString v21 = String._bridgeToObjectiveC()();
      id v22 = [v21 _FZIDType];

      if (v22 == (id)6) {
        break;
      }
      v19 += 2;
      swift_bridgeObjectRelease(v20);
      if (!--v17)
      {
        swift_bridgeObjectRelease(v7);
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease(v7);
    uint64_t v23 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    id v25 = [v23 normalizedHandleWithDestinationID:v24];
    *(void *)(v54 + 72) = v25;

    if (v25)
    {
      swift_bridgeObjectRelease(v7);
      id v26 = [v25 value];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v28 = v27;

      id v29 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v28);
      id v31 = [v29 initWithUnprefixedURI:v30];
      uint64_t v32 = v54;
      *(void *)(v54 + 80) = v31;

      if (v31)
      {
        uint64_t v33 = *(void *)(v54 + 48);
        uint64_t v34 = *(void *)(v54 + 56);
        uint64_t v35 = *(void *)(v54 + 40);
        char v36 = *(_BYTE *)(v54 + 120) & 1;
        *(void *)(v54 + 88) = sub_100089240(3);
        uint64_t v37 = qword_1000D35E0;
        uint64_t v39 = sub_10001CFD8( &qword_1000CF800,  v38,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
        uint64_t v40 = swift_task_alloc(64LL);
        *(void *)(v54 + 96) = v40;
        *(void *)(v40 + swift_weakDestroy(v0 + 16) = v34;
        *(void *)(v40 + 24) = v31;
        *(_BYTE *)(v40 + 32) = v36;
        *(void *)(v40 + 40) = v35;
        *(void *)(v40 + 48) = v33;
        id v41 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
        *(void *)(v54 + 104) = v41;
        *id v41 = v54;
        v41[1] = sub_10005E4FC;
        return withCheckedThrowingContinuation<A>(isolation:function:_:)( v54 + 16,  v37,  v39,  0xD000000000000014LL,  0x80000001000A59C0LL,  sub_1000822A4,  v40,  &type metadata for String);
      }

      id v53 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
      swift_willThrow(v53);

      return (*(uint64_t (**)(void))(v32 + 8))();
    }

uint64_t sub_10005E4FC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 64);
    uint64_t v5 = sub_10005E5DC;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 64);
    swift_task_dealloc(*(void *)(v2 + 96));
    uint64_t v5 = sub_10005E570;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10005E570()
{
  uint64_t v2 = *(void **)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  sub_100089490(3, v1);
  swift_release(v1);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v5);
}

uint64_t sub_10005E5DC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 96));
  sub_100089490(3, v1);
  swift_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005E638(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v21 = a3;
  uint64_t v7 = sub_10000360C(&qword_1000CFDA8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  id v10 = *(void **)(a2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsService);
  if ((a4 & 1) != 0)
  {
    if (qword_1000CD680 != -1) {
      swift_once(&qword_1000CD680, sub_1000540A4);
    }
    uint64_t v11 = &qword_1000CF590;
  }

  else
  {
    if (qword_1000CD678 != -1) {
      swift_once(&qword_1000CD678, sub_100054080);
    }
    uint64_t v11 = &qword_1000CF580;
  }

  uint64_t v12 = v11[1];
  swift_bridgeObjectRetain(v12);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v10 pseudonymPropertiesWithFeatureID:v13 scopeID:v14 expiryDurationInSeconds:39600.0];

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v7);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_1000C5360, v17 + v9, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v18 + v17,  (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  aBlock[4] = sub_10008231C;
  uint64_t v23 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10005E97C;
  aBlock[3] = &unk_1000C5378;
  uint64_t v19 = _Block_copy(aBlock);
  swift_release(v23);
  [v10 provisionPseudonymForURI:v21 withProperties:v15 completion:v19];
  _Block_release(v19);
}

void sub_10005E86C(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = [v2 URI];
    id v4 = [v3 prefixedURI];

    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    v13[0] = v5;
    v13[1] = v7;
    uint64_t v8 = sub_10000360C(&qword_1000CFDA8);
    CheckedContinuation.resume(returning:)(v13, v8);
  }

  else
  {
    if (a2)
    {
      swift_errorRetain(a2);
      id v10 = (void *)_convertErrorToNSError(_:)(a2);
    }

    else
    {
      id v10 = 0LL;
    }

    id v11 = (id)TUMakeNeighborhoodConduitError(15LL, v10);
    swift_errorRelease(a2);

    v13[0] = v11;
    uint64_t v12 = sub_10000360C(&qword_1000CFDA8);
    CheckedContinuation.resume(throwing:)(v13, v12);
  }

uint64_t sub_10005E980()
{
  id v1 = [v0 handle];
  NSString v2 = [v1 value];

  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v4 = v3;
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  unsigned int v5 = [v2 destinationIdIsPseudonym];

  if (!v5) {
    return 0LL;
  }
  id v6 = [v0 handle];
  id v7 = [v6 value];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  return v8;
}

void sub_10005EA74(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(a2);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v7 = [v5 initWithPrefixedURI:v6];

  if (v7)
  {
    uint64_t v8 = *(void **)(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_idsService);
    id v9 = [v8 pseudonymForPseudonymURI:v7];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = swift_allocObject(&unk_1000C4CF8, 32LL, 7LL);
      *(void *)(v11 + swift_weakDestroy(v0 + 16) = a1;
      *(void *)(v11 + 24) = a2;
      aBlock[4] = (uint64_t)sub_10007C29C;
      uint64_t v21 = v11;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_10004F050;
      aBlock[3] = (uint64_t)&unk_1000C4D10;
      uint64_t v12 = _Block_copy(aBlock);
      uint64_t v13 = v21;
      swift_bridgeObjectRetain(a2);
      swift_release(v13);
      [v8 revokePseudonym:v10 completion:v12];
      _Block_release(v12);

      return;
    }
  }

  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v14, (uint64_t)qword_1000D3620);
  uint64_t v15 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v22 = sub_10009BE3C(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to find pseudonym to revoke: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

void sub_10005ED30(char a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    sub_10000ADF4(v8, (uint64_t)qword_1000D3620);
    uint64_t v12 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v16;
      *(_DWORD *)uint64_t v15 = 136380675;
      swift_bridgeObjectRetain(a4);
      uint64_t v29 = sub_10009BE3C(a3, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully revoked pseudonym: %{private}s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a4, 2LL);
    }
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v17 = sub_10000ADF4(v8, (uint64_t)qword_1000D3620);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    uint64_t v18 = swift_errorRetain(a2);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = swift_slowAlloc(64LL, -1LL);
      uint64_t v30 = v28;
      *(_DWORD *)uint64_t v21 = 136380931;
      swift_bridgeObjectRetain(a4);
      uint64_t v29 = sub_10009BE3C(a3, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v21 + 12) = 2080;
      if (a2)
      {
        uint64_t v29 = a2;
        swift_errorRetain(a2);
        uint64_t v22 = sub_10000360C(&qword_1000CF8D0);
        uint64_t v23 = String.init<A>(reflecting:)(&v29, v22);
        unint64_t v25 = v24;
      }

      else
      {
        unint64_t v25 = 0xE300000000000000LL;
        uint64_t v23 = 7104878LL;
      }

      uint64_t v29 = sub_10009BE3C(v23, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Error occurred revoking pseudonym: %{private}s, error: %s",  (uint8_t *)v21,  0x16u);
      uint64_t v26 = v28;
      swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

uint64_t sub_10005F128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  void v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v4[11] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v9 = qword_1000D35E0;
  v4[12] = qword_1000D35E0;
  return swift_task_switch(sub_10005F1E4, v9, 0LL);
}

uint64_t sub_10005F1E4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v23 = v0[9];
  uint64_t v24 = v2;
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  unint64_t v25 = (void *)v0[6];
  uint64_t v26 = v0[5];
  uint64_t v6 = sub_10000360C(&qword_1000CFC60);
  uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v8 = PassthroughSubject.init()(v7);
  v0[13] = v8;
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v2, 1LL, 1LL, v9);
  uint64_t v10 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  uint64_t v11 = qword_1000D35E0;
  uint64_t v13 = sub_10001CFD8( &qword_1000CF800,  v12,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v14 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = (v14 + 56) & ~v14;
  uint64_t v16 = (char *)swift_allocObject(&unk_1000C5180, v15 + v23, v14 | 7);
  *((void *)v16 + 2) = v11;
  *((void *)v16 + 3) = v13;
  *((void *)v16 + 4) = v25;
  *((void *)v16 + 5) = v26;
  *((void *)v16 + 6) = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v16[v15], v1, v10);
  id v17 = v25;
  swift_retain(v26);
  swift_retain(v8);
  swift_retain(v11);
  uint64_t v18 = sub_10004EC20(v24, (uint64_t)&unk_1000CFC70, (uint64_t)v16);
  swift_release(v18);
  v0[2] = v8;
  uint64_t v19 = sub_100018F4C( &qword_1000CFC78,  &qword_1000CFC60,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  uint64_t v20 = Publisher.eraseToAnyPublisher()(v6, v19);
  v0[14] = v20;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000CFC80 + dword_1000CFC80);
  uint64_t v21 = (void *)swift_task_alloc(unk_1000CFC84);
  v0[15] = v21;
  void *v21 = v0;
  v21[1] = sub_10005F3D0;
  return v27(v0[3], v20);
}

uint64_t sub_10005F3D0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 96);
    uint64_t v5 = sub_10005F48C;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 96);
    swift_release(*(void *)(v2 + 112));
    uint64_t v5 = sub_10005F444;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10005F444()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F48C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 112));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  uint64_t v8 = type metadata accessor for HandoffInfo(0LL);
  v7[21] = v8;
  v7[22] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v7[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  char v7[24] = v10;
  v7[25] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  v7[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[27] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v7[28] = v13;
  v7[29] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v7[30] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = (*(void *)(*(void *)(sub_10000360C(&qword_1000CDE48) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[31] = swift_task_alloc(v15);
  v7[32] = swift_task_alloc(v15);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v16 = qword_1000D35E0;
  v7[33] = qword_1000D35E0;
  return swift_task_switch(sub_10005F620, v16, 0LL);
}

uint64_t sub_10005F620()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(v0 + 272) = v4;
  uint64_t v5 = *(void *)(v2 + 24);
  *(void *)(v0 + 280) = v5;
  BOOL v6 = sub_10003FB18(v4, v5);
  uint64_t v7 = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  *(void *)(v0 + 288) = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  uint64_t v8 = v3 + v7;
  swift_beginAccess(v8, v0 + 16, 0LL, 0LL);
  sub_100005318(v8, v1, &qword_1000CDE48);
  uint64_t v9 = type metadata accessor for HandoffState(0LL);
  *(void *)(v0 + 296) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v1, 1LL, v9);
  sub_10000BFC8(v1, &qword_1000CDE48);
  if (v11 == 1)
  {
    uint64_t v64 = v4;
    unint64_t v65 = v5;
    uint64_t v74 = v10;
    uint64_t v75 = v9;
    uint64_t v76 = v8;
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v72 = v12;
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 224);
    BOOL v70 = v6;
    uint64_t v16 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 160);
    uint64_t v69 = *(void *)(v0 + 152);
    uint64_t v18 = *(void **)(v0 + 136);
    uint64_t v66 = v13;
    uint64_t v67 = *(void *)(v0 + 144);
    uint64_t v19 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v12, 1LL, 1LL, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v17, v16);
    uint64_t v20 = qword_1000D35E0;
    uint64_t v22 = sub_10001CFD8( &qword_1000CF800,  v21,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
    uint64_t v23 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v24 = (v23 + 40) & ~v23;
    unint64_t v25 = (v24 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v26 = (v24 + v15 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v27 = (char *)swift_allocObject(&unk_1000C51A8, v26 + 8, v23 | 7);
    *((void *)v27 + 2) = v20;
    *((void *)v27 + 3) = v22;
    *((void *)v27 + 4) = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v27[v24], v66, v16);
    uint64_t v28 = &v27[v25];
    *(void *)uint64_t v28 = v67;
    BOOL v29 = v70;
    v28[8] = v70;
    *(void *)&v27[v26] = v69;
    id v30 = v18;
    swift_retain(v67);
    swift_retain(v69);
    swift_retain(v20);
    uint64_t v31 = sub_100051AC4(v72, (uint64_t)&unk_1000CFCA0, (uint64_t)v27, type metadata accessor for HandoffInfo);
    *(void *)(v0 + 304) = v31;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v33 = *(void *)(v0 + 192);
    uint64_t v32 = *(void *)(v0 + 200);
    uint64_t v34 = *(void *)(v0 + 184);
    uint64_t v35 = *(void *)(v0 + 144);
    uint64_t v36 = sub_10000ADF4(v34, (uint64_t)qword_1000D3620);
    *(void *)(v0 + 312) = v36;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v36, v34);
    uint64_t v37 = swift_retain_n(v35, 2LL);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v42 = *(void *)(v0 + 192);
    uint64_t v41 = *(void *)(v0 + 200);
    uint64_t v43 = *(void *)(v0 + 184);
    if (v40)
    {
      uint64_t v68 = *(void *)(v0 + 144);
      uint64_t v73 = v31;
      uint64_t v44 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      uint64_t v77 = v45;
      *(_DWORD *)uint64_t v44 = 136315394;
      if (v70) {
        uint64_t v46 = 0x616E7567616C2ELL;
      }
      else {
        uint64_t v46 = 0x65736E617078652ELL;
      }
      uint64_t v71 = v42;
      if (v29) {
        unint64_t v47 = 0xE700000000000000LL;
      }
      else {
        unint64_t v47 = 0xE800000000000000LL;
      }
      *(void *)(v0 + 112) = sub_10009BE3C(v46, v47, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v44 + 12) = 2080;
      swift_bridgeObjectRetain(v65);
      *(void *)(v0 + 120) = sub_10009BE3C(v64, v65, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease(v65);
      swift_release_n(v68, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "[RequestDeviceHandle] Starting handoff with type %s with %s.",  (uint8_t *)v44,  0x16u);
      swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      uint64_t v48 = v44;
      uint64_t v31 = v73;
      swift_slowDealloc(v48, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v41, v43);
    }

    else
    {
      swift_release_n(*(void *)(v0 + 144), 2LL);

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    }

    uint64_t v60 = *(uint64_t **)(v0 + 248);
    uint64_t *v60 = v31;
    swift_storeEnumTagMultiPayload(v60, v75, 0LL);
    uint64_t v61 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v74 + 56);
    *(void *)(v0 + 320) = v61;
    v61(v60, 0LL, 1LL, v75);
    swift_beginAccess(v76, v0 + 40, 33LL, 0LL);
    swift_retain(v31);
    sub_10007B02C((uint64_t)v60, v76);
    swift_endAccess(v0 + 40);
    sub_100053C78();
    sub_10000BFC8((uint64_t)v60, &qword_1000CDE48);
    uint64_t v62 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 328) = v62;
    uint64_t v63 = sub_10000360C(&qword_1000CF8D0);
    void *v62 = v0;
    v62[1] = sub_10005FC88;
    return Task.value.getter( *(void *)(v0 + 176),  v31,  *(void *)(v0 + 168),  v63,  &protocol self-conformance witness table for Error);
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v49 = sub_10000ADF4(*(void *)(v0 + 184), (uint64_t)qword_1000D3620);
    unint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      id v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v52 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Unable to provision device handle because a split session is already active.",  v52,  2u);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    id v53 = (id)TUMakeNeighborhoodConduitError(20LL, 0LL);
    *(void *)(v0 + 128) = v53;
    PassthroughSubject.send(completion:)(v0 + 128);

    uint64_t v54 = *(void *)(v0 + 248);
    uint64_t v56 = *(void *)(v0 + 232);
    uint64_t v55 = *(void *)(v0 + 240);
    uint64_t v57 = *(void *)(v0 + 200);
    uint64_t v58 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 256));
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10005FC88()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10005FF3C;
  }
  else {
    uint64_t v4 = sub_10005FCEC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 264), 0LL);
}

uint64_t sub_10005FCEC()
{
  uint64_t v1 = swift_retain(*(void *)(v0 + 144));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = *(void *)(v0 + 272);
    unint64_t v4 = *(void *)(v0 + 280);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain(v4);
    *(void *)(v0 + 104) = sub_10009BE3C(v5, v4, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[RequestDeviceHandle] Successfully handed off with %s.",  v7,  0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 144));
  }

  uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 136) + *(void *)(v0 + 288);
  sub_100018CFC(v13, v12, type metadata accessor for HandoffInfo);
  swift_storeEnumTagMultiPayload(v12, v11, 1LL);
  v9(v12, 0LL, 1LL, v11);
  swift_beginAccess(v14, v0 + 64, 33LL, 0LL);
  sub_10007B02C(v12, v14);
  swift_endAccess(v0 + 64);
  sub_100053C78();
  sub_10000BFC8(v12, &qword_1000CDE48);
  swift_release(v10);
  sub_10000BF5C(v13, type metadata accessor for HandoffInfo);
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005FF3C()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 144);
  swift_release(*(void *)(v0 + 304));
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  uint64_t v3 = swift_errorRetain(v1);
  unint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 272);
    unint64_t v7 = *(void *)(v0 + 280);
    uint64_t v22 = *(void *)(v0 + 144);
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v11;
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 96) = sub_10009BE3C(v8, v7, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v7);
    swift_release_n(v22, 2LL);
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain(v6);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 88) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v9 + 14, v9 + 22);
    *uint64_t v10 = v12;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[RequestDeviceHandle] Failed to hand off with %s due to %@.",  (uint8_t *)v9,  0x16u);
    uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v10, 1LL, v13);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 336);
    swift_release_n(*(void *)(v0 + 144), 2LL);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  uint64_t v15 = *(void *)(v0 + 336);
  sub_10005A5D0(v15);
  swift_errorRelease(v15);
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v17 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 200);
  uint64_t v20 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 256));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000601C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 48) = a8;
  *(_BYTE *)(v8 + 88) = a7;
  *(void *)(v8 + 24) = a4;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v9 = qword_1000D35E0;
  *(void *)(v8 + 56) = qword_1000D35E0;
  return swift_task_switch(sub_100060234, v9, 0LL);
}

uint64_t sub_100060234()
{
  char v1 = *(_BYTE *)(v0 + 88);
  uint64_t v2 = NCProtoDeviceTokenRequest.conversationIdentifier.getter();
  uint64_t v4 = v3;
  *(void *)(v0 + 64) = v3;
  os_log_type_t v5 = (void *)swift_task_alloc(dword_1000CFCAC);
  *(void *)(v0 + 72) = v5;
  *os_log_type_t v5 = v0;
  v5[1] = sub_1000602B4;
  return sub_10006035C( *(void *)(v0 + 16),  v2,  v4,  *(void *)(v0 + 40),  v1 & 1,  *(void *)(v0 + 32),  *(void *)(v0 + 48));
}

uint64_t sub_1000602B4()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *v1;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100060328, *(void *)(v3 + 56), 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v3 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100060328()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006035C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = v7;
  *(void *)(v8 + 80) = a4;
  *(void *)(v8 + 88) = a6;
  *(_BYTE *)(v8 + 2swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v8 + 64) = a2;
  *(void *)(v8 + 72) = a3;
  *(void *)(v8 + 56) = a1;
  uint64_t v9 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  *(void *)(v8 + 112) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 120) = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  *(void *)(v8 + 128) = v11;
  *(void *)(v8 + 136) = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v12 = qword_1000D35E0;
  *(void *)(v8 + 144) = qword_1000D35E0;
  return swift_task_switch(sub_100060400, v12, 0LL);
}

uint64_t sub_100060400()
{
  *(void *)(v0 + 152) = sub_100089240(2);
  uint64_t v1 = swift_allocObject(&unk_1000C51F8, 32LL, 7LL);
  *(void *)(v0 + 160) = v1;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v1 + 24) = 0LL;
  if (qword_1000CD6E8 != -1) {
    swift_once(&qword_1000CD6E8, sub_100096694);
  }
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void **)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v17 = v2;
  uint64_t v18 = *(void *)(v0 + 64);
  char v19 = *(_BYTE *)(v0 + 216) & 1;
  *(void *)(v0 + 168) = static Duration.seconds(_:)(*(double *)&qword_1000D08A0);
  *(void *)(v0 + 176) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v7, v5);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = (v10 + 56) & ~v10;
  unint64_t v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_1000C5220, v13 + 8, v10 | 7);
  *(void *)(v0 + 184) = v14;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v18;
  *(void *)(v14 + 24) = v8;
  *(void *)(v14 + 32) = v6;
  *(_BYTE *)(v14 + 40) = v19;
  *(void *)(v14 + 48) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v14 + v11, v17, v5);
  *(void *)(v14 + v12) = v21;
  *(void *)(v14 + v13) = v20;
  swift_bridgeObjectRetain(v8);
  id v15 = v6;
  swift_retain(v1);
  swift_retain(v21);
  swift_retain(v20);
  return swift_task_switch(sub_100060588, 0LL, 0LL);
}

uint64_t sub_100060588()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v5 = (void *)swift_task_alloc(48LL);
  v0[24] = v5;
  _OWORD v5[2] = &unk_1000CFCB8;
  _OWORD v5[3] = v1;
  v5[4] = v3;
  void v5[5] = v2;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[25] = v6;
  void *v6 = v0;
  v6[1] = sub_100060640;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0[7], v4, v4, 0LL, 0LL, &unk_1000CFCC0, v5, v4);
}

uint64_t sub_100060640()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100060710;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v2[23];
    uint64_t v7 = v2[24];
    uint64_t v8 = v2[18];
    swift_release(v6);
    swift_task_dealloc(v7);
    uint64_t v4 = sub_1000606BC;
    uint64_t v5 = v8;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_1000606BC()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 136);
  swift_release(*(void *)(v0 + 160));
  sub_100089490(2, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060710()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 192));
  return swift_task_switch(sub_100060750, v1, 0LL);
}

uint64_t sub_100060750()
{
  uint64_t v1 = v0 + 16;
  swift_release(*(void *)(v0 + 184));
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
  swift_errorRetain(v2);
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 208);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain(v8);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 48) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v9 + 4, v9 + 12);
    *uint64_t v10 = v11;
    uint64_t v1 = v0 + 16;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[Handoff][Push] Failed to complete task due to %@.", v9, 0xCu);
    uint64_t v12 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 208));
    swift_errorRelease(v8);
  }

  uint64_t v13 = *(void *)(v0 + 160);
  swift_beginAccess(v13 + 16, v1, 0LL, 0LL);
  unint64_t v14 = *(void *)(v13 + 24);
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)(v0 + 160) + 16LL);
    swift_bridgeObjectRetain(v14);
    sub_10005EA74(v15, v14);
    swift_bridgeObjectRelease(v14);
  }

  uint64_t v16 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 136);
  *(void *)(v0 + 40) = v16;
  swift_errorRetain(v16);
  PassthroughSubject.send(completion:)(v0 + 40);
  uint64_t v20 = swift_errorRelease(v16);
  swift_willThrow(v20);
  swift_release(v17);
  sub_100089490(2, v18);
  swift_release(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000609C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NCProtoDisconnectRequest.DisconnectReason(0LL);
  v4[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[19] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v9);
  v4[21] = swift_task_alloc(v9);
  v4[22] = swift_task_alloc(v9);
  v4[23] = swift_task_alloc(v9);
  _BYTE v4[24] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for NCProtoDisconnectRequest(0LL);
  v4[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[26] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[27] = swift_task_alloc(v12);
  v4[28] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for SHA256Digest(0LL);
  v4[29] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[30] = v14;
  v4[31] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SHA256(0LL);
  v4[32] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v4[33] = v16;
  v4[34] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000360C(&qword_1000CDE48);
  v4[35] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for HandoffInfo(0LL);
  v4[36] = v18;
  v4[37] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v19 = qword_1000D35E0;
  v4[38] = qword_1000D35E0;
  return swift_task_switch(sub_100060BAC, v19, 0LL);
}

uint64_t sub_100060BAC()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[14] + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v2, v0 + 2, 0LL, 0LL);
  sub_100005318(v2, v1, &qword_1000CDE48);
  uint64_t v3 = type metadata accessor for HandoffState(0LL);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v1, 1LL, v3);
  uint64_t v5 = v0[35];
  v161 = v0;
  if (v4 == 1)
  {
    sub_10000BFC8(v5, &qword_1000CDE48);
LABEL_12:
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v51 = type metadata accessor for Logger(0LL);
    uint64_t v52 = sub_10000ADF4(v51, (uint64_t)qword_1000D3620);
    id v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Disconnect requested while we're not in a session.", v55, 2u);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    uint64_t v56 = type metadata accessor for NCProtoDisconnectResponse(0LL);
    uint64_t v57 = sub_10001CFD8( &qword_1000CFBE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
    static Message.with(_:)(sub_100082E58, 0LL, v56, v57);
    goto LABEL_27;
  }

  if (swift_getEnumCaseMultiPayload(v5, v3) != 1)
  {
    sub_10000BF5C(v5, type metadata accessor for HandoffState);
    goto LABEL_12;
  }

  uint64_t v6 = (char *)v0 + 388;
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[34];
  uint64_t v155 = v0[33];
  uint64_t v9 = v0[31];
  uint64_t v158 = v0[32];
  uint64_t v10 = v0[30];
  *(void *)os_log_type_t typea = v161[29];
  uint64_t v11 = sub_10004EA7C(v5, v7, type metadata accessor for HandoffInfo);
  uint64_t v12 = NCProtoDisconnectRequest.identifierHash.getter(v11);
  unint64_t v14 = v13;
  uint64_t v15 = SHA256.init()();
  *(void *)((char *)v161 + 388) = UUID.uuid.getter(v15);
  *((_BYTE *)v161 + 396) = v16;
  *((_BYTE *)v161 + 397) = v17;
  *((_BYTE *)v161 + 398) = v18;
  *((_BYTE *)v161 + 399) = v19;
  *((_BYTE *)v161 + 400) = v20;
  *((_BYTE *)v161 + 401) = v21;
  *((_BYTE *)v161 + 402) = v22;
  *((_BYTE *)v161 + 403) = v23;
  v151 = v6;
  uint64_t v24 = SHA256.update(bufferPointer:)(v6, (char *)v161 + 404);
  SHA256.finalize()(v24);
  SHA256Digest.withUnsafeBytes<A>(_:)(sub_10005399C, 0LL, &type metadata for Data);
  unint64_t v25 = *(void (**)(uint64_t, void))(v10 + 8);
  uint64_t v0 = v161;
  v25(v9, *(void *)typea);
  uint64_t v27 = v161[5];
  unint64_t v26 = v161[6];
  (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v8, v158);
  sub_10001E8C8(v12, v14);
  char v29 = v28;
  sub_10000BE18(v27, v26);
  sub_10000BE18(v12, v14);
  if ((v29 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v30 = v161[14];
  uint64_t v31 = OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager;
  v161[39] = OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager;
  id v32 = *(id *)(v30 + v31);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v34 = [v32 activeConversationWithGroupUUID:isa];
  v161[40] = v34;

  if (!v34) {
    goto LABEL_21;
  }
  uint64_t v35 = v161[37];
  uint64_t v36 = v161[13];
  uint64_t v37 = *(void *)(v36 + 16);
  uint64_t v38 = *(void *)(v36 + 24);
  uint64_t v39 = *(void *)(v35 + 8);
  uint64_t v40 = *(void *)(v35 + 16);
  if ((v37 != v39 || v38 != v40) && (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) == 0)
  {

LABEL_21:
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v68 = type metadata accessor for Logger(0LL);
    uint64_t v69 = sub_10000ADF4(v68, (uint64_t)qword_1000D3620);
    BOOL v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "Disconnect requested for different conversation or by different device.",  v72,  2u);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    uint64_t v73 = v161[37];

    uint64_t v74 = type metadata accessor for NCProtoDisconnectResponse(0LL);
    uint64_t v75 = sub_10001CFD8( &qword_1000CFBE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
    static Message.with(_:)(sub_100061E58, 0LL, v74, v75);
    goto LABEL_26;
  }

  uint64_t v156 = v31;
  uint64_t v148 = v30;
  uint64_t v41 = v161[28];
  uint64_t v42 = v161[25];
  uint64_t v43 = v161[26];
  uint64_t v44 = v161[12];
  char v45 = NCProtoDisconnectRequest.isPullingBackToPhone.getter();
  uint64_t type = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  uint64_t v46 = type(v41, v44, v42);
  uint64_t v47 = v161[28];
  if ((v45 & 1) != 0)
  {
    uint64_t v48 = v161[19];
    uint64_t v149 = *(uint64_t (**)(uint64_t, uint64_t))(v161[26] + 8LL);
    v149(v161[28], v161[25]);
    int v49 = enum case for NCProtoDisconnectRequest.DisconnectReason.pullingBackToPhone(_:);
    unint64_t v50 = *(void (**)(uint64_t))(v48 + 104);
LABEL_19:
    int v159 = v49;
    v50(v161[22]);
    goto LABEL_29;
  }

  uint64_t v59 = v161[23];
  uint64_t v58 = v161[24];
  uint64_t v61 = v161[18];
  uint64_t v60 = v161[19];
  uint64_t v146 = v161[26];
  uint64_t v150 = v161[25];
  NCProtoDisconnectRequest.disconnectReason.getter(v46);
  unint64_t v50 = *(void (**)(uint64_t))(v60 + 104);
  int v159 = enum case for NCProtoDisconnectRequest.DisconnectReason.pullingBackToPhone(_:);
  v50(v59);
  uint64_t v62 = sub_10001CFD8( &qword_1000CFBE8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectRequest.DisconnectReason,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectRequest.DisconnectReason);
  dispatch thunk of RawRepresentable.rawValue.getter(v61, v62);
  dispatch thunk of RawRepresentable.rawValue.getter(v61, v62);
  uint64_t v63 = v161[7];
  uint64_t v64 = v161[8];
  unint64_t v65 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v65(v59, v61);
  v65(v58, v61);
  uint64_t v66 = v150;
  uint64_t v149 = *(uint64_t (**)(uint64_t, uint64_t))(v146 + 8);
  uint64_t v67 = v149(v47, v66);
  if (v63 == v64)
  {
    int v49 = v159;
    goto LABEL_19;
  }

  NCProtoDisconnectRequest.disconnectReason.getter(v67);
LABEL_29:
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v86 = v161[27];
  uint64_t v87 = v161[25];
  uint64_t v89 = v161[21];
  uint64_t v88 = v161[22];
  uint64_t v90 = v161[18];
  uint64_t v91 = v161[19];
  uint64_t v92 = v161[12];
  uint64_t v93 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v93, (uint64_t)qword_1000D3620);
  type(v86, v92, v87);
  uint64_t v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16);
  v94(v89, v88, v90);
  id v95 = v34;
  uint64_t v0 = v161;
  uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
  os_log_type_t v97 = static os_log_type_t.default.getter();
  BOOL v98 = os_log_type_enabled(v96, v97);
  uint64_t v99 = v161[27];
  uint64_t v100 = v161[21];
  uint64_t v101 = v161[18];
  uint64_t v102 = v161[19];
  if (v98)
  {
    uint64_t v143 = v161[25];
    uint64_t v144 = v161[21];
    os_log_type_t typeb = v97;
    uint64_t v103 = v161[17];
    uint64_t v141 = v161[16];
    uint64_t v104 = v161[15];
    uint64_t v145 = v161[18];
    uint64_t v105 = swift_slowAlloc(28LL, -1LL);
    uint64_t v147 = swift_slowAlloc(64LL, -1LL);
    v162[0] = v147;
    *(_DWORD *)uint64_t v105 = 136315650;
    uint64_t v106 = v94;
    id v107 = [v95 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v107);

    uint64_t v108 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter(v104, v108);
    uint64_t v142 = v102;
    unint64_t v111 = v110;
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v103, v104);
    uint64_t v112 = v109;
    uint64_t v94 = v106;
    v161[9] = sub_10009BE3C(v112, v111, v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v161 + 9, v161 + 10, v105 + 4, v105 + 12);
    uint64_t v0 = v161;
    swift_bridgeObjectRelease(v111);

    *(_WORD *)(v105 + 12) = 1024;
    LODWORD(v104) = NCProtoDisconnectRequest.isPullingBackToPhone.getter() & 1;
    v149(v99, v143);
    *((_DWORD *)v161 + 96) = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v161 + 48, v151, v105 + 14, v105 + 18);
    *(_WORD *)(v105 + 18) = 2080;
    unint64_t v113 = NCProtoDisconnectRequest.DisconnectReason.description.getter();
    unint64_t v115 = v114;
    v161[10] = sub_10009BE3C(v113, v114, v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v161 + 10, v161 + 11, v105 + 20, v105 + 28);
    swift_bridgeObjectRelease(v115);
    uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
    v116(v144, v145);
    _os_log_impl( (void *)&_mh_execute_header,  v96,  typeb,  "Disconnect requested for conversation %s isPullingBackToPhone:%{BOOL}d reason:%s.",  (uint8_t *)v105,  0x1Cu);
    swift_arrayDestroy(v147, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v147, -1LL, -1LL);
    swift_slowDealloc(v105, -1LL, -1LL);
  }

  else
  {
    v149(v161[27], v161[25]);

    uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
    v116(v100, v101);
  }

  v0[41] = v116;
  uint64_t v118 = v0[19];
  uint64_t v117 = v0[20];
  uint64_t v119 = v0[18];
  v94(v117, v0[22], v119);
  int v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 88))(v117, v119);
  if (v120 != v159)
  {
    if (v120 == enum case for NCProtoDisconnectRequest.DisconnectReason.blockedContact(_:))
    {
      LOBYTE(v162[0]) = 0;
      sub_100062A40(38LL);
    }

    else
    {
      uint64_t v127 = v0[20];
      uint64_t v128 = v0[17];
      uint64_t v129 = v0[18];
      uint64_t v130 = v0[15];
      uint64_t v131 = v0[16];
      id v132 = *(id *)(v148 + v156);
      id v133 = [v95 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v133);

      Class v134 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v128, v130);
      [v132 leaveConversationWithUUID:v134];

      v116(v127, v129);
    }

    __int128 v135 = (void *)v0[40];
    uint64_t v136 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v73 = v0[37];
    uint64_t v137 = v0[22];
    uint64_t v138 = v0[18];
    uint64_t v139 = type metadata accessor for NCProtoDisconnectResponse(0LL);
    uint64_t v140 = sub_10001CFD8( &qword_1000CFBE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
    static Message.with(_:)(sub_100062C60, 0LL, v139, v140);

    v136(v137, v138);
LABEL_26:
    sub_10000BF5C(v73, type metadata accessor for HandoffInfo);
LABEL_27:
    uint64_t v76 = v0[34];
    uint64_t v77 = v0[35];
    uint64_t v78 = v0[31];
    uint64_t v80 = v0[27];
    uint64_t v79 = v0[28];
    uint64_t v82 = v0[23];
    uint64_t v81 = v0[24];
    uint64_t v83 = v161[22];
    uint64_t v84 = v161[21];
    uint64_t v157 = v161[20];
    uint64_t v160 = v161[17];
    swift_task_dealloc(v0[37]);
    swift_task_dealloc(v77);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v157);
    swift_task_dealloc(v160);
    return ((uint64_t (*)(void))v161[1])();
  }

  id v121 = (void *)v0[14];
  v0[42] = static Duration.seconds(_:)(5.0);
  v0[43] = v122;
  uint64_t v123 = swift_allocObject(&unk_1000C50B8, 32LL, 7LL);
  *(void *)(v123 + swift_weakDestroy(v0 + 16) = v121;
  *(void *)(v123 + 24) = v95;
  uint64_t v124 = swift_allocObject(&unk_1000C50E0, 32LL, 7LL);
  v0[44] = v124;
  *(void *)(v124 + swift_weakDestroy(v0 + 16) = &unk_1000CFBF8;
  *(void *)(v124 + 24) = v123;
  id v125 = v95;
  id v126 = v121;
  return swift_task_switch(sub_100061838, 0LL, 0LL);
}

uint64_t sub_100061838()
{
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  uint64_t v4 = sub_10000360C(&qword_1000CF380);
  uint64_t v5 = (void *)swift_task_alloc(48LL);
  v0[45] = v5;
  _OWORD v5[2] = &unk_1000CFC08;
  _OWORD v5[3] = v1;
  v5[4] = v3;
  void v5[5] = v2;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[46] = v6;
  void *v6 = v0;
  v6[1] = sub_100061920;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)( (char *)v0 + 404,  v4,  v4,  0LL,  0LL,  &unk_1000CFC18,  v5,  v4);
}

uint64_t sub_100061920()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 368LL);
  *(void *)(*(void *)v1 + 376LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100061BDC;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v2[45];
    uint64_t v7 = v2[38];
    swift_release(v2[44]);
    swift_task_dealloc(v6);
    uint64_t v4 = sub_1000619E8;
    uint64_t v5 = v7;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_1000619E8()
{
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  id v5 = *(id *)(*(void *)(v0 + 112) + *(void *)(v0 + 312));
  id v6 = [v1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  [v5 leaveConversationWithUUID:isa];

  uint64_t v9 = *(void **)(v0 + 320);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v13 = type metadata accessor for NCProtoDisconnectResponse(0LL);
  uint64_t v14 = sub_10001CFD8( &qword_1000CFBE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
  static Message.with(_:)(sub_100062C60, 0LL, v13, v14);

  v8(v11, v12);
  sub_10000BF5C(v10, type metadata accessor for HandoffInfo);
  uint64_t v15 = *(void *)(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 280);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 168);
  uint64_t v22 = *(void *)(v0 + 176);
  uint64_t v25 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100061BDC()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = v0[38];
  swift_errorRelease(v0[47]);
  swift_release(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100061C64, v3, 0LL);
}

uint64_t sub_100061C64()
{
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  id v5 = *(id *)(*(void *)(v0 + 112) + *(void *)(v0 + 312));
  id v6 = [v1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  [v5 leaveConversationWithUUID:isa];

  uint64_t v9 = *(void **)(v0 + 320);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v13 = type metadata accessor for NCProtoDisconnectResponse(0LL);
  uint64_t v14 = sub_10001CFD8( &qword_1000CFBE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDisconnectResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDisconnectResponse);
  static Message.with(_:)(sub_100062C60, 0LL, v13, v14);

  v8(v11, v12);
  sub_10000BF5C(v10, type metadata accessor for HandoffInfo);
  uint64_t v15 = *(void *)(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 280);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 168);
  uint64_t v22 = *(void *)(v0 + 176);
  uint64_t v25 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100061E58()
{
  return NCProtoDisconnectResponse.success.setter(0LL);
}

unint64_t NCProtoDisconnectRequest.DisconnectReason.description.getter()
{
  unint64_t v1 = 0xD00000000000001ELL;
  uint64_t v2 = type metadata accessor for NCProtoDisconnectRequest.DisconnectReason(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v0, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for NCProtoDisconnectRequest.DisconnectReason.UNRECOGNIZED(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    unint64_t v18 = 0LL;
    unint64_t v19 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(v19);
    unint64_t v18 = 0xD00000000000001ELL;
    unint64_t v19 = 0x80000001000A50D0LL;
    uint64_t v17 = v7;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10._countAndFlagsBits = 41LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    return v18;
  }

  else if (v6 == enum case for NCProtoDisconnectRequest.DisconnectReason.unknown(_:))
  {
    return 0xD000000000000018LL;
  }

  else if (v6 != enum case for NCProtoDisconnectRequest.DisconnectReason.endingHandoff(_:))
  {
    if (v6 == enum case for NCProtoDisconnectRequest.DisconnectReason.pullingBackToPhone(_:))
    {
      return 0xD000000000000023LL;
    }

    else if (v6 == enum case for NCProtoDisconnectRequest.DisconnectReason.blockedContact(_:))
    {
      return 0xD00000000000001FLL;
    }

    else
    {
      unint64_t v18 = 0LL;
      unint64_t v19 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      uint64_t v12 = swift_bridgeObjectRelease(v19);
      unint64_t v18 = 0xD000000000000011LL;
      unint64_t v19 = 0x80000001000A50B0LL;
      uint64_t v17 = NCProtoDisconnectRequest.DisconnectReason.rawValue.getter(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v14 = v13._object;
      String.append(_:)(v13);
      swift_bridgeObjectRelease(v14);
      v15._countAndFlagsBits = 41LL;
      v15._object = (void *)0xE100000000000000LL;
      String.append(_:)(v15);
      unint64_t v1 = v18;
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    }
  }

  return v1;
}

uint64_t sub_1000620E0(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for ContinuousClock(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[8] = v6;
  void v2[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v7 = qword_1000D35E0;
  v2[10] = qword_1000D35E0;
  return swift_task_switch(sub_100062198, v7, 0LL);
}

uint64_t sub_100062198()
{
  id v1 = [*(id *)(v0 + 24) UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1);

  uint64_t v2 = (void *)swift_task_alloc(dword_1000CFC24);
  *(void *)(v0 + 88) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100062214;
  return sub_100062454(*(void *)(v0 + 72));
}

uint64_t sub_100062214()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v6 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_100062414;
  }
  else {
    uint64_t v7 = sub_1000622A0;
  }
  return swift_task_switch(v7, *(void *)(v2 + 80), 0LL);
}

uint64_t sub_1000622A0()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000CFA10 + dword_1000CFA10);
  id v1 = (void *)swift_task_alloc(unk_1000CFA14);
  *(void *)(v0 + 104) = v1;
  *id v1 = v0;
  v1[1] = sub_100062320;
  return v3(500000000000000000LL, 0LL, 0LL, 0LL, 1);
}

uint64_t sub_100062320()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 32);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    return swift_task_switch(sub_1000623D4, *(void *)(v6 + 80), 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 48);
  swift_task_dealloc(*(void *)(v6 + 72));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000623D4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062414()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062454(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[8] = v5;
  void v2[9] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000360C(&qword_1000CFC28);
  v2[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CFC30);
  v2[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[14] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v10);
  v2[16] = swift_task_alloc(v10);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = qword_1000D35E0;
  v2[17] = qword_1000D35E0;
  return swift_task_switch(sub_100062550, v11, 0LL);
}

uint64_t sub_100062550()
{
  uint64_t v1 = v0[13];
  uint64_t v25 = v0[16];
  uint64_t v26 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v23 = v0[15];
  uint64_t v24 = v0[11];
  uint64_t v3 = v0[7];
  uint64_t v21 = v0[8];
  uint64_t v22 = v0[10];
  uint64_t v4 = v0[6];
  uint64_t v19 = v0[4];
  uint64_t v20 = v0[9];
  v0[2] = *(void *)(*(void *)(v0[5] + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationPublishers)
                    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22ConversationPublishers_joinedConversationSubject);
  uint64_t v5 = sub_10000360C(&qword_1000CF910);
  uint64_t v6 = sub_100018F4C( &qword_1000CF918,  &qword_1000CF910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v7 = Publisher.eraseToAnyPublisher()(v5, v6);
  v0[3] = v7;
  uint64_t v8 = sub_10000360C(&qword_1000CF920);
  uint64_t v9 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
  uint64_t v10 = sub_100018F4C( &qword_1000CF928,  &qword_1000CF920,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_100065F70, 0LL, v8, v9, v10);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v20, v19, v4);
  uint64_t v11 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1000C5108, v12 + v21, v11 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v20, v4);
  uint64_t v14 = sub_100018F4C( &qword_1000CFC40,  &qword_1000CFC28,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  Publisher.filter(_:)(sub_100081AAC, v13, v22, v14);
  swift_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v22);
  Publishers.Filter.filter(_:)(sub_100065F7C, 0LL, v1);
  Swift::String v15 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v15(v23, v1);
  uint64_t v16 = sub_100018F4C( &qword_1000CFC48,  (uint64_t *)&unk_1000CFC30,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v0[18] = Publisher.eraseToAnyPublisher()(v1, v16);
  v15(v25, v1);
  uint64_t v17 = qword_1000D35E0;
  v0[19] = qword_1000D35E0;
  return swift_task_switch(sub_1000627D0, v17, 0LL);
}

uint64_t sub_1000627D0()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CF390 + dword_1000CF390);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CF394);
  *(void *)(v0 + 160) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100062840;
  return v3(*(void *)(v0 + 144));
}

uint64_t sub_100062840(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 160LL);
  *(void *)(*(void *)v2 + 168LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[17];
    uint64_t v7 = sub_100062930;
  }

  else
  {
    uint64_t v6 = v4[19];
    v4[22] = a1;
    uint64_t v7 = sub_1000628B8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000628B8()
{
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  swift_release(*(void *)(v0 + 144));

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062930()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  swift_release(*(void *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062998(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000629F0;
  return v5();
}

uint64_t sub_1000629F0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    **(_BYTE **)(v2 + swift_weakDestroy(v0 + 16) = 0;
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100062A40(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [*(id *)&v1[OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter] queue];
  uint64_t v11 = swift_allocObject(&unk_1000C5130, 29LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  *(_DWORD *)(v11 + 24) = a1;
  *(_BYTE *)(v11 + 28) = BYTE4(a1) & 1;
  aBlock[4] = sub_100081AD4;
  uint64_t v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000ABC8;
  aBlock[3] = &unk_1000C5148;
  uint64_t v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  unint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_10001CFD8( (unint64_t *)&unk_1000CE340,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v15 = sub_100018F4C(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v3, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v20);
}

uint64_t sub_100062C60()
{
  return NCProtoDisconnectResponse.success.setter(1LL);
}

uint64_t sub_100062C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a1;
  uint64_t v4 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SHA256(0LL);
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for NCProtoContactUpdateEvent(0LL);
  uint64_t v54 = *(void *)(updated - 8);
  uint64_t v55 = updated;
  __chkstk_darwin(updated);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for HandoffInfo(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = sub_10000360C(&qword_1000CDE48);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v22, v58, 0LL, 0LL);
  sub_100005318(v22, (uint64_t)v21, &qword_1000CDE48);
  uint64_t v23 = type metadata accessor for HandoffState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48LL))(v21, 1LL, v23) != 1)
  {
    if (swift_getEnumCaseMultiPayload(v21, v23) != 1)
    {
      sub_10000BF5C((uint64_t)v21, type metadata accessor for HandoffState);
      char v24 = 1;
      return v24 & 1;
    }

    sub_10004EA7C((uint64_t)v21, (uint64_t)v18, type metadata accessor for HandoffInfo);
    uint64_t v25 = *(void *)(a2 + 16);
    uint64_t v26 = *(void *)(a2 + 24);
    uint64_t v27 = *((void *)v18 + 1);
    uint64_t v28 = *((void *)v18 + 2);
    if (v25 == v27 && v26 == v28)
    {
      sub_100018CFC((uint64_t)v18, (uint64_t)v16, type metadata accessor for HandoffInfo);
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v12, v53, v55);
    }

    else
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL);
      sub_100018CFC((uint64_t)v18, (uint64_t)v16, type metadata accessor for HandoffInfo);
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v12, v53, v55);
      char v24 = 0;
      if ((v30 & 1) == 0) {
        goto LABEL_13;
      }
    }

    uint64_t v32 = SHA256.init()(v31);
    uint64_t v56 = UUID.uuid.getter(v32);
    LOWORD(v57) = v33;
    BYTE2(v57) = v34;
    BYTE3(v57) = v35;
    BYTE4(v57) = v36;
    BYTE5(v57) = v37;
    BYTE6(v57) = v38;
    HIBYTE(v57) = v39;
    uint64_t v40 = SHA256.update(bufferPointer:)(&v56, v58);
    SHA256.finalize()(v40);
    SHA256Digest.withUnsafeBytes<A>(_:)(sub_10005399C, 0LL, &type metadata for Data);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v6, v52);
    uint64_t v41 = v56;
    unint64_t v42 = v57;
    uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v9, v50);
    uint64_t v44 = NCProtoContactUpdateEvent.identifierHash.getter(v43);
    unint64_t v46 = v45;
    sub_10001E8C8(v41, v42);
    char v24 = v47;
    sub_10000BE18(v44, v46);
    sub_10000BE18(v41, v42);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v55);
    sub_10000BF5C((uint64_t)v16, type metadata accessor for HandoffInfo);
    sub_10000BF5C((uint64_t)v18, type metadata accessor for HandoffInfo);
    return v24 & 1;
  }

  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_1000630BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = type metadata accessor for NCProtoContactInfo(0LL);
  v6[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[8] = v8;
  v6[9] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (*(void *)(*(void *)(sub_10000360C(&qword_1000CFB68) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[10] = swift_task_alloc(v9);
  v6[11] = swift_task_alloc(v9);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v10 = qword_1000D35E0;
  v6[12] = qword_1000D35E0;
  return swift_task_switch(sub_100063184, v10, 0LL);
}

uint64_t sub_100063184()
{
  if ((sub_100062C8C(*(void *)(v0 + 40), *(void *)(v0 + 48)) & 1) != 0)
  {
    uint64_t v67 = (uint64_t *)(v0 + 24);
    uint64_t v72 = *(void *)(v0 + 88);
    uint64_t v70 = *(void *)(v0 + 80);
    uint64_t v1 = *(void *)(v0 + 64);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_100003D54((uint64_t)_swiftEmptyArrayStorage);
    uint64_t updated = NCProtoContactUpdateEvent.contacts.getter();
    Swift::Int v3 = *(void *)(updated + 16);
    swift_bridgeObjectRelease(updated);
    sub_10000360C(&qword_1000CFB70);
    Dictionary.reserveCapacity(_:)(v3);
    uint64_t v4 = NCProtoContactUpdateEvent.contacts.getter();
    int64_t v5 = 0LL;
    uint64_t v68 = v4 + 64;
    uint64_t v6 = -1LL;
    uint64_t v7 = -1LL << *(_BYTE *)(v4 + 32);
    if (-v7 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v7);
    }
    unint64_t v8 = v6 & *(void *)(v4 + 64);
    Swift::Int v9 = *(void *)(v0 + 16);
    uint64_t v71 = v4;
    uint64_t v66 = v4 + 104;
    int64_t v69 = (unint64_t)(63 - v7) >> 6;
    while (1)
    {
      *(void *)(v0 + 104) = v9;
      if (v8) {
        break;
      }
      int64_t v19 = v5 + 1;
      if (__OFADD__(v5, 1LL)) {
        goto LABEL_68;
      }
      if (v19 >= v69)
      {
        int64_t v21 = v5;
      }

      else
      {
        unint64_t v20 = *(void *)(v68 + 8 * v19);
        if (v20) {
          goto LABEL_14;
        }
        int64_t v21 = v5 + 1;
        if (v5 + 2 < v69)
        {
          unint64_t v20 = *(void *)(v68 + 8 * (v5 + 2));
          if (v20)
          {
            int64_t v19 = v5 + 2;
            goto LABEL_14;
          }

          int64_t v21 = v5 + 2;
          if (v5 + 3 < v69)
          {
            unint64_t v20 = *(void *)(v68 + 8 * (v5 + 3));
            if (v20)
            {
              int64_t v19 = v5 + 3;
LABEL_14:
              unint64_t v8 = (v20 - 1) & v20;
              unint64_t v12 = __clz(__rbit64(v20)) + (v19 << 6);
              int64_t v73 = v19;
LABEL_10:
              uint64_t v13 = *(char **)(v0 + 80);
              uint64_t v14 = *(void *)(v0 + 56);
              uint64_t v15 = (void *)(*(void *)(v71 + 48) + 16 * v12);
              uint64_t v16 = v15[1];
              *(void *)uint64_t v13 = *v15;
              *(void *)(v70 + 8) = v16;
              unint64_t v17 = *(void *)(v71 + 56) + *(void *)(v1 + 72) * v12;
              uint64_t v18 = sub_10000360C(&qword_1000CFB78);
              (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(&v13[*(int *)(v18 + 48)], v17, v14);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( v13,  0LL,  1LL,  v18);
              swift_bridgeObjectRetain(v16);
              goto LABEL_17;
            }

            int64_t v19 = v5 + 4;
            int64_t v21 = v5 + 3;
            if (v5 + 4 < v69)
            {
              unint64_t v20 = *(void *)(v68 + 8 * v19);
              if (v20) {
                goto LABEL_14;
              }
              while (v69 - 5 != v5)
              {
                unint64_t v20 = *(void *)(v66 + 8 * v5++);
                if (v20)
                {
                  int64_t v19 = v5 + 4;
                  goto LABEL_14;
                }
              }

              int64_t v21 = v69 - 1;
            }
          }
        }
      }

      uint64_t v22 = *(void *)(v0 + 80);
      uint64_t v23 = sub_10000360C(&qword_1000CFB78);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
      unint64_t v8 = 0LL;
      int64_t v73 = v21;
LABEL_17:
      uint64_t v24 = *(void *)(v0 + 88);
      sub_1000192A4(*(void *)(v0 + 80), v24, &qword_1000CFB68);
      uint64_t v25 = sub_10000360C(&qword_1000CFB78);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v24, 1LL, v25) == 1)
      {
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = v9;
        swift_release(v71);
        uint64_t v57 = qword_1000CD690;
        swift_bridgeObjectRetain(v9);
        if (v57 != -1) {
          swift_once(&qword_1000CD690, sub_100088E24);
        }
        uint64_t v58 = type metadata accessor for Logger(0LL);
        sub_10000ADF4(v58, (uint64_t)qword_1000D3620);
        uint64_t v59 = swift_bridgeObjectRetain(v9);
        uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v61 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v62 = 134217984;
          if ((v9 & 0xC000000000000001LL) != 0)
          {
            if (v9 < 0) {
              uint64_t v63 = v9;
            }
            else {
              uint64_t v63 = v9 & 0xFFFFFFFFFFFFFF8LL;
            }
            uint64_t v64 = __CocoaDictionary.count.getter(v63);
          }

          else
          {
            uint64_t v64 = *(void *)(v9 + 16);
          }

          swift_bridgeObjectRelease(v9);
          *uint64_t v67 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v0 + 32, v62 + 4, v62 + 12);
          swift_bridgeObjectRelease(v9);
          _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "Sending details of %ld contacts to delegates.",  v62,  0xCu);
          swift_slowDealloc(v62, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v9, 2LL);
        }

        if (qword_1000CD638 != -1) {
          swift_once(&qword_1000CD638, sub_10001FF5C);
        }
        return swift_task_switch(sub_100063914, qword_1000D35C8, 0LL);
      }

      uint64_t v26 = *(void *)(v72 + 8);
      (*(void (**)(void, void, void))(v1 + 32))( *(void *)(v0 + 72),  *(void *)(v0 + 88) + *(int *)(v25 + 48),  *(void *)(v0 + 56));
      uint64_t v27 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      id v29 = [v27 normalizedHandleWithDestinationID:v28];

      if (v29)
      {
        id v30 = v29;
        sub_10007B4D4();
        uint64_t v32 = v31;
        if ((v9 & 0xC000000000000001LL) != 0)
        {
          if (v9 < 0) {
            uint64_t v33 = v9;
          }
          else {
            uint64_t v33 = v9 & 0xFFFFFFFFFFFFFF8LL;
          }
          uint64_t v34 = __CocoaDictionary.count.getter(v33);
          if (__OFADD__(v34, 1LL)) {
            goto LABEL_69;
          }
          Swift::Int v9 = sub_100077888(v33, v34 + 1);
        }

        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
        unint64_t v37 = sub_100004E30((uint64_t)v30);
        uint64_t v38 = *(void *)(v9 + 16);
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39))
        {
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }

        char v41 = v36;
        if (*(void *)(v9 + 24) >= v40)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            uint64_t v44 = 8 * v37;
            if ((v36 & 1) == 0) {
              goto LABEL_32;
            }
          }

          else
          {
            sub_100078E54();
            uint64_t v44 = 8 * v37;
            if ((v41 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }

        else
        {
          sub_1000775B8(v40, isUniquelyReferenced_nonNull_native);
          unint64_t v42 = sub_100004E30((uint64_t)v30);
          if ((v41 & 1) != (v43 & 1))
          {
            uint64_t v65 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE390, &OBJC_CLASS___TUHandle_ptr);
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v65);
          }

          unint64_t v37 = v42;
          uint64_t v44 = 8 * v42;
          if ((v41 & 1) == 0)
          {
LABEL_32:
            *(void *)(v9 + 8 * (v37 >> 6) + 64) |= 1LL << v37;
            *(void *)(*(void *)(v9 + 48) + v44) = v30;
            *(void *)(*(void *)(v9 + 56) + v44) = v32;
            uint64_t v45 = *(void *)(v9 + 16);
            BOOL v46 = __OFADD__(v45, 1LL);
            uint64_t v47 = v45 + 1;
            if (v46) {
              goto LABEL_70;
            }
            *(void *)(v9 + swift_weakDestroy(v0 + 16) = v47;
            id v48 = v30;
            goto LABEL_6;
          }
        }

        uint64_t v10 = *(void *)(v9 + 56);

        *(void *)(v10 + v44) = v32;
LABEL_6:
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      (*(void (**)(void, void))(v1 + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
      int64_t v5 = v73;
    }

    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    int64_t v73 = v5;
    unint64_t v12 = v11 | (v5 << 6);
    goto LABEL_10;
  }

  if (qword_1000CD690 != -1) {
LABEL_71:
  }
    swift_once(&qword_1000CD690, sub_100088E24);
  uint64_t v49 = type metadata accessor for Logger(0LL);
  uint64_t v50 = sub_10000ADF4(v49, (uint64_t)qword_1000D3620);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Dropping contact info event for unrelated conversation/device.",  v53,  2u);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  uint64_t v54 = *(void *)(v0 + 80);
  uint64_t v55 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100063914()
{
  uint64_t v1 = *(void *)(v0 + 96);
  *(void *)(v0 + 112) = sub_10000CE6C();
  return swift_task_switch(sub_100063958, v1, 0LL);
}

uint64_t sub_100063958(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v2 + 32) + OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate,  a2);
  uint64_t v4 = *(void *)(v2 + 104);
  int64_t v5 = *(void **)(v2 + 112);
  if (Strong)
  {
    uint64_t v6 = Strong;
    uint64_t v7 = swift_allocObject(&unk_1000C5040, 32LL, 7LL);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v4;
    *(void *)(v7 + 24) = v5;
    swift_bridgeObjectRetain(v4);
    id v8 = v5;
    sub_100012C78((uint64_t)sub_100081710, v7);
    swift_release(v7);
    swift_unknownObjectRelease(v6);
  }

  swift_bridgeObjectRelease(v4);
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v2 + 72);
  swift_task_dealloc(*(void *)(v2 + 88));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100063A18(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for NCProtoConversationAVMode(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[20] = swift_task_alloc(v6);
  v3[21] = swift_task_alloc(v6);
  uint64_t v7 = sub_10000360C(&qword_1000CF740);
  v3[22] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  v3[23] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[24] = swift_task_alloc(v9);
  v3[25] = swift_task_alloc(v9);
  v3[26] = swift_task_alloc(v9);
  uint64_t v10 = sub_10000360C((uint64_t *)&unk_1000CE420);
  v3[27] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v3[28] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[29] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[30] = swift_task_alloc(v13);
  v3[31] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  v3[32] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[33] = v15;
  v3[34] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for NCProtoStartedSessionEvent(0LL);
  v3[35] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[36] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[37] = swift_task_alloc(v18);
  v3[38] = swift_task_alloc(v18);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v19 = qword_1000D35E0;
  v3[39] = qword_1000D35E0;
  return swift_task_switch(sub_100063BDC, v19, 0LL);
}

uint64_t sub_100063BDC()
{
  uint64_t v1 = v0 + 15;
  uint64_t v2 = ((uint64_t (*)(void))NCProtoStartedSessionEvent.identifier.getter)();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease(v3);
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    id v108 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    swift_willThrow(v108);
LABEL_26:
    uint64_t v89 = v0[37];
    uint64_t v90 = v0[34];
    uint64_t v92 = v0[30];
    uint64_t v91 = v0[31];
    uint64_t v94 = v0[26];
    uint64_t v93 = v0[27];
    uint64_t v96 = v0[24];
    uint64_t v95 = v0[25];
    uint64_t v97 = v0[22];
    uint64_t v104 = v0[21];
    uint64_t v107 = v0[20];
    swift_task_dealloc(v0[38]);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    uint64_t v55 = (uint64_t (*)(void))v0[1];
    return v55();
  }

  uint64_t v6 = (uint64_t)(v0 + 2);
  uint64_t v105 = v0 + 13;
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v7 = v0[38];
  uint64_t v9 = v0[35];
  uint64_t v8 = v0[36];
  uint64_t v10 = v0[15];
  uint64_t v11 = sub_10000ADF4(v0[32], (uint64_t)qword_1000D3620);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v13 = v12(v7, v10, v9);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[38];
  uint64_t v18 = v0[36];
  uint64_t v103 = v12;
  if (v16)
  {
    uint64_t v98 = v0[35];
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v100 = swift_slowAlloc(32LL, -1LL);
    v113[0] = v100;
    *(_DWORD *)uint64_t v19 = 141558275;
    *uint64_t v105 = 1752392040LL;
    uint64_t v20 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v105, v0 + 14, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v21 = NCProtoStartedSessionEvent.identifier.getter(v20);
    uint64_t v22 = v11;
    unint64_t v24 = v23;
    v0[14] = sub_10009BE3C(v21, v23, v113);
    uint64_t v1 = v0 + 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v19 + 14, v19 + 22);
    unint64_t v25 = v24;
    uint64_t v11 = v22;
    swift_bridgeObjectRelease(v25);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v17, v98);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Remote conversation available: %{private,mask.hash}s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1LL, -1LL);
    uint64_t v27 = v19;
    uint64_t v6 = (uint64_t)(v0 + 2);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v17, v0[35]);
  }

  uint64_t v28 = NCProtoStartedSessionEvent.userAccountInfoData.getter();
  unint64_t v30 = v29;
  sub_10001F004(v28, v29, v6);
  sub_10000BE18(v28, v30);
  id v31 = sub_10000FC68(v6);
  v0[40] = v31;
  sub_100081528(v6);
  if (!v31)
  {
    uint64_t v46 = v0[37];
    uint64_t v47 = v0[34];
    uint64_t v49 = v0[30];
    uint64_t v48 = v0[31];
    uint64_t v51 = v0[26];
    uint64_t v50 = v0[27];
    uint64_t v53 = v0[24];
    uint64_t v52 = v0[25];
    uint64_t v54 = v0[22];
    uint64_t v106 = v0[21];
    uint64_t v110 = v0[20];
    swift_task_dealloc(v0[38]);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v106);
    swift_task_dealloc(v110);
    uint64_t v55 = (uint64_t (*)(void))v0[1];
    return v55();
  }

  uint64_t v99 = v26;
  uint64_t v101 = v1 - 3;
  (*(void (**)(void, uint64_t, void))(v0[33] + 16LL))(v0[34], v11, v0[32]);
  id v32 = v31;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  uint64_t v102 = v32;
  if (os_log_type_enabled(v33, v34))
  {
    char v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    v113[0] = v36;
    *(_DWORD *)char v35 = 136315138;
    id v37 = [v32 overrideName];
    uint64_t v109 = v1;
    if (v37)
    {
      uint64_t v38 = v37;
      BOOL v39 = v1 - 6;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v42 = v41;

      v0[9] = v40;
      v0[10] = v42;
      uint64_t v43 = String.init<A>(reflecting:)(v39, &type metadata for String);
      unint64_t v45 = v44;
    }

    else
    {
      unint64_t v45 = 0xE300000000000000LL;
      uint64_t v43 = 7104878LL;
    }

    uint64_t v61 = v0[33];
    uint64_t v60 = v0[34];
    uint64_t v62 = v0[32];
    v0[12] = sub_10009BE3C(v43, v45, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v101, v105, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v45);

    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Nearby session found for: %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);

    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    uint64_t v1 = v109;
  }

  else
  {
    uint64_t v57 = v0[33];
    uint64_t v56 = v0[34];
    uint64_t v58 = v0[32];

    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  }

  uint64_t v63 = v0[28];
  uint64_t v64 = v0[29];
  uint64_t v65 = v0[27];
  uint64_t v66 = NCProtoStartedSessionEvent.identifier.getter(v59);
  uint64_t v68 = v67;
  UUID.init(uuidString:)(v66);
  swift_bridgeObjectRelease(v68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v65, 1LL, v63) == 1)
  {
    int64_t v69 = v1;
    uint64_t v70 = v0[37];
    uint64_t v71 = v0[35];
    uint64_t v72 = v0[15];
    sub_10000BFC8(v0[27], (uint64_t *)&unk_1000CE420);
    uint64_t v73 = v103(v70, v72, v71);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.error.getter();
    BOOL v76 = os_log_type_enabled(v74, v75);
    uint64_t v77 = v0[37];
    uint64_t v78 = v0[35];
    if (v76)
    {
      unint64_t v111 = v69 - 4;
      uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v80 = swift_slowAlloc(32LL, -1LL);
      v113[0] = v80;
      *(_DWORD *)uint64_t v79 = 136315138;
      uint64_t v81 = NCProtoStartedSessionEvent.identifier.getter(v80);
      unint64_t v83 = v82;
      uint64_t *v111 = sub_10009BE3C(v81, v82, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, v101, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease(v83);
      v99(v77, v78);
      _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Nearby session: %s could not be converted to a UUID",  v79,  0xCu);
      swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v79, -1LL, -1LL);
    }

    else
    {
      v99(v0[37], v0[35]);
    }

    id v112 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    swift_willThrow(v112);

    goto LABEL_26;
  }

  uint64_t v84 = v0[31];
  uint64_t v85 = v0[28];
  uint64_t v86 = v0[27];
  uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[29] + 32LL);
  v0[41] = v87;
  v87(v84, v86, v85);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10006438C, qword_1000D35C8, 0LL);
}

uint64_t sub_10006438C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  *(void *)(v0 + 336) = sub_10000CE6C();
  return swift_task_switch(sub_1000643D0, v1, 0LL);
}

uint64_t sub_1000643D0()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  id v6 = [*(id *)(v0 + 320) identifier];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v45 = v8;
  uint64_t v47 = v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3, v5);
  char v9 = NCProtoStartedSessionEvent.hasMemberAssociationPrimaryInfo.getter(v1);
  uint64_t v10 = *(void *)(v0 + 176);
  if ((v9 & 1) != 0)
  {
    NCProtoStartedSessionEvent.memberAssociationPrimaryInfo.getter();
    uint64_t v11 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v10,  0LL,  1LL,  v11);
  }

  else
  {
    uint64_t v13 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( v10,  1LL,  1LL,  v13);
  }

  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 152);
  NCProtoStartedSessionEvent.avMode.getter(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17);
  if (v18 == enum case for NCProtoConversationAVMode.none(_:))
  {
    uint64_t v41 = 0LL;
  }

  else
  {
    if (v18 == enum case for NCProtoConversationAVMode.audio(_:))
    {
      uint64_t v19 = 1LL;
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 152) + 8LL))( *(void *)(v0 + 160),  *(void *)(v0 + 144));
      uint64_t v19 = 2LL;
    }

    uint64_t v41 = v19;
  }

  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 328);
  uint64_t v40 = *(void **)(v0 + 336);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v44 = *(void *)(v0 + 248);
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v42 = *(void **)(v0 + 320);
  uint64_t v43 = *(void *)(v0 + 232);
  uint64_t v24 = *(void *)(v0 + 200);
  unint64_t v23 = *(uint64_t **)(v0 + 208);
  unint64_t v25 = *(int **)(v0 + 184);
  uint64_t v26 = *(void **)(v0 + 192);
  uint64_t v27 = *(void *)(v0 + 176);
  uint64_t v28 = *(void *)(v0 + 136);
  (*(void (**)(void, void))(*(void *)(v0 + 152) + 8LL))(*(void *)(v0 + 168), *(void *)(v0 + 144));
  *unint64_t v23 = v47;
  v23[1] = v45;
  v20((char *)v23 + v25[5], v21, v22);
  *(uint64_t *)((char *)v23 + v25[6]) = (uint64_t)v40;
  sub_1000192A4(v27, (uint64_t)v23 + v25[7], &qword_1000CF740);
  *(uint64_t *)((char *)v23 + v25[8]) = v41;
  uint64_t v29 = *(void *)(v28 + OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos);
  sub_100018CFC( (uint64_t)v23,  (uint64_t)v26,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  swift_bridgeObjectRetain(v29);
  sub_1000902CC(v24, v26);
  sub_10000BF5C(v24, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  sub_100054ED8(v29);

  sub_10000BF5C((uint64_t)v23, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v22);
  uint64_t v30 = *(void *)(v0 + 296);
  uint64_t v31 = *(void *)(v0 + 272);
  uint64_t v33 = *(void *)(v0 + 240);
  uint64_t v32 = *(void *)(v0 + 248);
  uint64_t v35 = *(void *)(v0 + 208);
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v37 = *(void *)(v0 + 192);
  uint64_t v36 = *(void *)(v0 + 200);
  uint64_t v38 = *(void *)(v0 + 176);
  uint64_t v46 = *(void *)(v0 + 168);
  uint64_t v48 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000646D8(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for NCProtoEndedSessionEvent(0LL);
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  void v3[9] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100064768, qword_1000D35E0, 0LL);
}

uint64_t sub_100064768()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v5, (uint64_t)qword_1000D3620);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[9];
  if (v9)
  {
    uint64_t v19 = v0[8];
    uint64_t v20 = v0[7];
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v12;
    *(_DWORD *)uint64_t v11 = 141558275;
    v0[2] = 1752392040LL;
    uint64_t v13 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    uint64_t v14 = NCProtoEndedSessionEvent.identifier.getter(v13);
    unint64_t v16 = v15;
    v0[3] = sub_10009BE3C(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v10, v20);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Remove conversation because session is now not available: %{private,mask.hash}s",  (uint8_t *)v11,  0x16u);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v0[8] + 8LL))(v0[9], v0[7]);
  }

  uint64_t v17 = (void *)swift_task_alloc(dword_1000CF9C4);
  v0[10] = v17;
  void *v17 = v0;
  v17[1] = sub_10006497C;
  return sub_10005CF70(v0[5]);
}

uint64_t sub_10006497C()
{
  uint64_t v1 = *(void *)(*v0 + 72);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

id sub_1000649D0()
{
  uint64_t v0 = type metadata accessor for NCProtoSuggestionAdvertisement.SuggestionType(0LL);
  uint64_t v41 = *(void *)(v0 - 8);
  uint64_t v42 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for NCProtoSuggestionAdvertisement(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000360C((uint64_t *)&unk_1000CE420);
  __chkstk_darwin(v7);
  BOOL v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = 0LL;
  if ((NCProtoSuggestionAdvertisementDidChangeEvent.hasAdvertisement.getter(v12) & 1) != 0)
  {
    uint64_t v40 = v14;
    uint64_t v16 = ((uint64_t (*)(void))NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.getter)();
    uint64_t v17 = NCProtoSuggestionAdvertisement.suggestionIdentifier.getter(v16);
    uint64_t v19 = v18;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v6, v3);
    UUID.init(uuidString:)(v17);
    swift_bridgeObjectRelease(v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
    {
      sub_10000BFC8((uint64_t)v9, (uint64_t *)&unk_1000CE420);
      if (qword_1000CD690 != -1) {
        swift_once(&qword_1000CD690, sub_100088E24);
      }
      uint64_t v21 = type metadata accessor for Logger(0LL);
      uint64_t v22 = sub_10000ADF4(v21, (uint64_t)qword_1000D3620);
      unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        unint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v25 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Received SuggestionAdvertisementDidChangeEvent with invalid suggestionIdentifier.",  v25,  2u);
        swift_slowDealloc(v25, -1LL, -1LL);
      }

      return 0LL;
    }

    else
    {
      uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v40, v9, v10);
      uint64_t v27 = NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.getter(v26);
      NCProtoSuggestionAdvertisement.type.getter(v27);
      uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v20)(v6, v3);
      uint64_t v29 = NCProtoSuggestionAdvertisement.SuggestionType.rawValue.getter(v28);
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v2, v42);
      uint64_t v31 = NCProtoSuggestionAdvertisementDidChangeEvent.advertisement.getter(v30);
      NCProtoSuggestionAdvertisement.deviceIdentifier.getter(v31);
      uint64_t v33 = v32;
      v20(v6, v3);
      id v34 = objc_allocWithZone(&OBJC_CLASS___TUNearbySuggestionAdvertisement);
      uint64_t v35 = v40;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v33);
      id v15 = [v34 initWithSuggestionIdentifier:isa deviceIdentifier:v37 type:v29];

      (*(void (**)(char *, uint64_t))(v11 + 8))(v35, v10);
    }
  }

  return v15;
}

uint64_t sub_100064D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  void v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[14] = v6;
  v4[15] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NCProtoCallState(0LL);
  v4[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[17] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[18] = swift_task_alloc(v9);
  v4[19] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for SHA256Digest(0LL);
  v4[20] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[21] = v11;
  v4[22] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  v4[23] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  _BYTE v4[24] = v13;
  v4[25] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000360C(&qword_1000CDE48);
  v4[26] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for HandoffInfo(0LL);
  v4[27] = v15;
  v4[28] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v16 = qword_1000D35E0;
  v4[29] = qword_1000D35E0;
  return swift_task_switch(sub_100064EA8, v16, 0LL);
}

uint64_t sub_100064EA8()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 96) + OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState;
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  sub_100005318(v2, v1, &qword_1000CDE48);
  uint64_t v3 = type metadata accessor for HandoffState(0LL);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v1, 1LL, v3);
  uint64_t v5 = *(void *)(v0 + 208);
  if (v4 == 1)
  {
    sub_10000BFC8(*(void *)(v0 + 208), &qword_1000CDE48);
LABEL_13:
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = sub_10000ADF4(v35, (uint64_t)qword_1000D3620);
    NSString v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "CallState requested while we're not in a session.", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    id v40 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    swift_willThrow(v40);
    goto LABEL_24;
  }

  if (swift_getEnumCaseMultiPayload(*(void *)(v0 + 208), v3) != 1)
  {
    sub_10000BF5C(v5, type metadata accessor for HandoffState);
    goto LABEL_13;
  }

  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v64 = *(void *)(v0 + 192);
  uint64_t v65 = *(void *)(v0 + 184);
  uint64_t v62 = *(void *)(v0 + 168);
  uint64_t v63 = *(void *)(v0 + 160);
  uint64_t v8 = sub_10004EA7C(v5, *(void *)(v0 + 224), type metadata accessor for HandoffInfo);
  uint64_t v9 = NCProtoCallStateRequest.identifierHash.getter(v8);
  unint64_t v11 = v10;
  uint64_t v12 = SHA256.init()();
  *(void *)(v0 + 272) = UUID.uuid.getter(v12);
  *(_BYTE *)(v0 + 280) = v13;
  *(_BYTE *)(v0 + 281) = v14;
  *(_BYTE *)(v0 + 282) = v15;
  *(_BYTE *)(v0 + 283) = v16;
  *(_BYTE *)(v0 + 284) = v17;
  *(_BYTE *)(v0 + 285) = v18;
  *(_BYTE *)(v0 + 286) = v19;
  *(_BYTE *)(v0 + 287) = v20;
  uint64_t v21 = SHA256.update(bufferPointer:)(v0 + 272, v0 + 288);
  SHA256.finalize()(v21);
  SHA256Digest.withUnsafeBytes<A>(_:)(sub_10005399C, 0LL, &type metadata for Data);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v7, v63);
  uint64_t v22 = *(void *)(v0 + 40);
  unint64_t v23 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v6, v65);
  sub_10001E8C8(v9, v11);
  LOBYTE(v6) = v24;
  sub_10000BE18(v22, v23);
  sub_10000BE18(v9, v11);
  if ((v6 & 1) == 0
    || (id v25 = *(id *)(*(void *)(v0 + 96) + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager),
        Class isa = UUID._bridgeToObjectiveC()().super.isa,
        id v27 = [v25 activeConversationWithGroupUUID:isa],
        *(void *)(v0 + 240) = v27,
        isa,
        v25,
        !v27))
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    uint64_t v42 = sub_10000ADF4(v41, (uint64_t)qword_1000D3620);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "CallState requested for a different conversation.", v45, 2u);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    uint64_t v46 = *(void *)(v0 + 224);

    id v47 = (id)TUMakeNeighborhoodConduitError(2LL, 0LL);
    swift_willThrow(v47);
    uint64_t v48 = v46;
    goto LABEL_23;
  }

  uint64_t v28 = *(void *)(v0 + 224);
  uint64_t v29 = *(void *)(v0 + 88);
  uint64_t v30 = *(void *)(v29 + 16);
  uint64_t v31 = *(void *)(v29 + 24);
  uint64_t v32 = *(void *)(v28 + 8);
  uint64_t v33 = *(void *)(v28 + 16);
  if ((v30 != v32 || v31 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0LL) & 1) == 0)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v55 = type metadata accessor for Logger(0LL);
    uint64_t v56 = sub_10000ADF4(v55, (uint64_t)qword_1000D3620);
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "CallState requested by different device.", v59, 2u);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    uint64_t v60 = *(void *)(v0 + 224);

    id v61 = (id)TUMakeNeighborhoodConduitError(7LL, 0LL);
    swift_willThrow(v61);

    uint64_t v48 = v60;
LABEL_23:
    sub_10000BF5C(v48, type metadata accessor for HandoffInfo);
LABEL_24:
    uint64_t v50 = *(void *)(v0 + 200);
    uint64_t v49 = *(void *)(v0 + 208);
    uint64_t v51 = *(void *)(v0 + 176);
    uint64_t v53 = *(void *)(v0 + 144);
    uint64_t v52 = *(void *)(v0 + 152);
    uint64_t v54 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_1000654FC, qword_1000D35C8, 0LL);
}

uint64_t sub_1000654FC()
{
  uint64_t v1 = *(void **)(v0[11] + 48LL);
  v0[31] = v1;
  uint64_t v2 = dword_1000CFB9C;
  id v3 = v1;
  int v4 = (void *)swift_task_alloc(v2);
  v0[32] = v4;
  *int v4 = v0;
  v4[1] = sub_10006559C;
  return sub_100065B0C(v0[19], v0[30], (uint64_t)v1);
}

uint64_t sub_10006559C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  int v4 = *(void **)(v2 + 248);
  uint64_t v5 = *(void *)(v2 + 232);

  if (v0) {
    uint64_t v6 = sub_100065A38;
  }
  else {
    uint64_t v6 = sub_100065658;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_100065658()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v6, (uint64_t)qword_1000D3620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  unint64_t v10 = *(void **)(v0 + 240);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 128);
  if (v9)
  {
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v34 = *(void *)(v0 + 112);
    uint64_t v32 = *(void *)(v0 + 104);
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v39;
    *(_DWORD *)uint64_t v15 = 136315394;
    unint64_t v16 = NCProtoCallState.description.getter();
    os_log_type_t type = v8;
    unint64_t v18 = v17;
    *(void *)(v0 + 56) = sub_10009BE3C(v16, v17, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v41(v11, v13);
    *(_WORD *)(v15 + 12) = 2080;
    id v19 = [v10 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v20 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v32, v20);
    unint64_t v23 = v22;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v14, v32);
    *(void *)(v0 + 64) = sub_10009BE3C(v21, v23, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v23);

    _os_log_impl( (void *)&_mh_execute_header,  v7,  type,  "CallState: %s requested for conversation %s.",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v41(*(void *)(v0 + 144), *(void *)(v0 + 128));
  }

  char v24 = *(void **)(v0 + 240);
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 208);
  uint64_t v35 = *(void *)(v0 + 200);
  uint64_t v26 = *(void *)(v0 + 152);
  *(void *)os_log_type_t typea = *(void *)(v0 + 176);
  os_log_t log = *(os_log_t *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 128);
  uint64_t v40 = *(void *)(v0 + 120);
  uint64_t v28 = type metadata accessor for NCProtoCallStateResponse(0LL);
  uint64_t v29 = swift_task_alloc(32LL);
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = v26;
  uint64_t v30 = sub_10001CFD8( &qword_1000CFBA0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCallStateResponse,  (uint64_t)&protocol conformance descriptor for NCProtoCallStateResponse);
  static Message.with(_:)(sub_100081718, v29, v28, v30);

  swift_task_dealloc(v29);
  sub_10000BF5C(v25, type metadata accessor for HandoffInfo);
  v41(v26, v27);
  swift_task_dealloc(v25);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(*(void *)typea);
  swift_task_dealloc(v26);
  swift_task_dealloc(log);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065A38()
{
  uint64_t v1 = *(void *)(v0 + 224);

  sub_10000BF5C(v1, type metadata accessor for HandoffInfo);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = sub_10000360C(&qword_1000CFBA8);
  v4[6] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v4[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[8] = v7;
  void v4[9] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v8 = qword_1000D35E0;
  v4[10] = qword_1000D35E0;
  return swift_task_switch(sub_100065BC4, v8, 0LL);
}

uint64_t sub_100065BC4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  id v2 = [*(id *)(v0 + 24) groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v2);

  if (v1) {
    unsigned __int8 v3 = [*(id *)(v0 + 32) isAudioCallCapable];
  }
  else {
    unsigned __int8 v3 = 0;
  }
  uint64_t v4 = *(void *)(v0 + 40);
  unsigned __int8 v5 = [*(id *)(v4 + OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags) lagunaAudioCallsEnabled];
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationUIStateObserver);
  uint64_t v7 = *(void *)(v0 + 48);
  if (v6)
  {
    sub_100018CFC( v6 + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService27ConversationUIStateObserver_uiState,  *(void *)(v0 + 48),  type metadata accessor for ConversationUIState);
    uint64_t v8 = type metadata accessor for ConversationUIState(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 0LL, 1LL, v8);
  }

  else
  {
    uint64_t v10 = type metadata accessor for ConversationUIState(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v7, 1LL, 1LL, v10);
  }

  char v11 = v5 & v3;
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 48);
  uint64_t v15 = *(void *)(v0 + 24);
  uint64_t v16 = qword_1000D35E0;
  uint64_t v17 = sub_10001CFD8( &qword_1000CF800,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v18 = swift_task_alloc(64LL);
  *(void *)(v0 + 88) = v18;
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v18 + 24) = v12;
  *(_BYTE *)(v18 + 32) = v11;
  *(void *)(v18 + 40) = v15;
  *(void *)(v18 + 48) = v13;
  id v19 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 96) = v19;
  uint64_t v20 = type metadata accessor for NCProtoCallState(0LL);
  *id v19 = v0;
  v19[1] = sub_100065D9C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  v16,  v17,  0xD000000000000035LL,  0x80000001000A5930LL,  sub_100081730,  v18,  v20);
}

uint64_t sub_100065D9C()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0) {
    unsigned __int8 v5 = sub_100065E7C;
  }
  else {
    unsigned __int8 v5 = sub_100065E10;
  }
  return swift_task_switch(v5, *(void *)(v2 + 80), 0LL);
}

uint64_t sub_100065E10()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  sub_10000BFC8(v4, &qword_1000CFBA8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065E7C()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  sub_10000BFC8(v4, &qword_1000CFBA8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100065EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for NCProtoCallState(0LL);
  __chkstk_darwin(v3);
  unsigned __int8 v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a2);
  return NCProtoCallStateResponse.callState.setter(v5);
}

id sub_100065F70@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t sub_100065F7C(id *a1)
{
  return [*a1 isOneToOneModeEnabled] ^ 1;
}

uint64_t sub_100065FA0(uint64_t a1, char *a2, uint64_t a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v47 = a3;
  uint64_t v48 = a6;
  uint64_t v53 = a5;
  int v52 = a4;
  uint64_t v59 = a2;
  uint64_t v49 = a1;
  uint64_t v55 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v58 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v57 = v7;
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000360C(&qword_1000CFBA8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v46 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = v12;
  uint64_t v13 = sub_10000360C((uint64_t *)&unk_1000CFBB0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v43 = v13;
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  os_log_type_t v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v42 = v16;
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  id v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v50 = [*(id *)&v59[OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter] queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v47, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v49,  v13);
  sub_100005318(v48, (uint64_t)v12, &qword_1000CFBA8);
  uint64_t v20 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = (v20 + 24) & ~v20;
  uint64_t v22 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v23 = (v18 + v22 + v21) & ~v22;
  uint64_t v24 = v23 + v15;
  unint64_t v25 = (v23 + v15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v27 = (v26 + v25 + 16) & ~v26;
  uint64_t v28 = swift_allocObject(&unk_1000C5068, v27 + v46, v20 | v22 | v26 | 7);
  uint64_t v29 = v59;
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = v59;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28 + v21, v19, v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v28 + v23, v44, v43);
  *(_BYTE *)(v28 + v24) = v52;
  uint64_t v30 = v53;
  *(void *)(v25 + v28 + 8) = v53;
  sub_1000192A4((uint64_t)v45, v28 + v27, &qword_1000CFBA8);
  aBlock[4] = sub_100081888;
  uint64_t v62 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000ABC8;
  aBlock[3] = &unk_1000C5080;
  uint64_t v31 = _Block_copy(aBlock);
  id v32 = v29;
  id v33 = v30;
  uint64_t v34 = v51;
  static DispatchQoS.unspecified.getter(v33);
  uint64_t v60 = _swiftEmptyArrayStorage;
  uint64_t v35 = sub_10001CFD8( (unint64_t *)&unk_1000CE340,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v36 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v37 = sub_100018F4C(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v39 = v54;
  uint64_t v38 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v36, v37, v55, v35);
  uint64_t v40 = v50;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v34, v39, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v38);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v57);
  return swift_release(v62);
}

void sub_10006638C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for NCProtoCallState(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void **)(a1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 callForConversationWithGroupUUID:isa];

  if (v15)
  {
    __chkstk_darwin(v16);
    *(&v20 - 4) = (uint64_t)v15;
    *((_BYTE *)&v20 - 24) = a4 & 1;
    *(&v20 - 2) = a5;
    *(&v20 - 1) = a6;
    uint64_t v17 = sub_10001CFD8( &qword_1000CFBD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCallState,  (uint64_t)&protocol conformance descriptor for NCProtoCallState);
    static Message.with(_:)(sub_100081934, &v20 - 6, v10, v17);
    uint64_t v18 = sub_10000360C((uint64_t *)&unk_1000CFBB0);
    CheckedContinuation.resume(returning:)(v12, v18);
  }

  else
  {
    id v21 = (id)TUMakeNeighborhoodConduitError(2LL, 0LL);
    uint64_t v19 = sub_10000360C((uint64_t *)&unk_1000CFBB0);
    CheckedContinuation.resume(throwing:)(&v21, v19);
  }

uint64_t sub_100066528(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5)
{
  uint64_t v9 = sub_10000360C(&qword_1000CFBA8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NCProtoConversationAVMode(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NCProtoCallState.isAudioEnabled.setter([a2 isUplinkMuted] ^ 1);
  NCProtoCallState.isVideoEnabled.setter([a2 isSendingVideo]);
  uint64_t v16 = (unsigned int *)&enum case for NCProtoConversationAVMode.video(_:);
  if ((a3 & 1) != 0)
  {
    id v17 = [a4 resolvedAudioVideoMode];
    uint64_t v18 = (unsigned int *)&enum case for NCProtoConversationAVMode.none(_:);
    if (v17) {
      uint64_t v18 = (unsigned int *)&enum case for NCProtoConversationAVMode.video(_:);
    }
    if (v17 == (id)1) {
      uint64_t v16 = (unsigned int *)&enum case for NCProtoConversationAVMode.audio(_:);
    }
    else {
      uint64_t v16 = v18;
    }
  }

  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *v16, v12);
  NCProtoCallState.avMode.setter(v15);
  sub_100005318(a5, (uint64_t)v11, &qword_1000CFBA8);
  uint64_t v19 = type metadata accessor for ConversationUIState(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v11, 1LL, v19) == 1)
  {
    sub_10000BFC8((uint64_t)v11, &qword_1000CFBA8);
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = v11[*(int *)(v19 + 20)];
    sub_10000BF5C((uint64_t)v11, type metadata accessor for ConversationUIState);
  }

  return NCProtoCallState.isCaptioningEnabled.setter(v20);
}

void sub_1000666EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter);
  id v4 = [v3 frontmostAudioOrVideoCall];
  if (v4)
  {
    unsigned __int8 v5 = v4;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v6, (uint64_t)qword_1000D3620);
    id v7 = v5;
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc(22LL, -1LL);
      os_log_t log = v8;
      uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = (uint64_t)v7;
      uint64_t v27 = v24;
      *(_DWORD *)uint64_t v10 = 138412546;
      uint64_t v12 = a2;
      id v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v10 + 4, v10 + 12);
      *uint64_t v11 = v5;

      a2 = v12;
      *(_WORD *)(v10 + 12) = 2080;
      LODWORD(v26) = v12;
      BYTE4(v26) = BYTE4(v12) & 1;
      uint64_t v14 = sub_10000360C(&qword_1000CFC50);
      uint64_t v15 = String.init<A>(describing:)(&v26, v14);
      unint64_t v17 = v16;
      uint64_t v26 = sub_10009BE3C(v15, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, log, v9, "Disconnect call %@ with reason: %s", (uint8_t *)v10, 0x16u);
      uint64_t v18 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v11, 1LL, v18);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      if ((v12 & 0x100000000LL) == 0)
      {
LABEL_6:
        [v3 disconnectCall:v7 withReason:a2];
LABEL_14:

        return;
      }
    }

    else
    {

      if ((a2 & 0x100000000LL) == 0) {
        goto LABEL_6;
      }
    }

    [v3 disconnectCall:v7];
    goto LABEL_14;
  }

  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10000ADF4(v19, (uint64_t)qword_1000D3620);
  osos_log_t log = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v21,  "endCurrentCall executed but no frontmostAudioOrVideoCall to end",  v22,  2u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }
}

uint64_t sub_100066A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for NCProtoConversationAVMode(0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = (unsigned int *)&enum case for NCProtoConversationAVMode.audio(_:);
  uint64_t v8 = (unsigned int *)&enum case for NCProtoConversationAVMode.none(_:);
  if (a2) {
    uint64_t v8 = (unsigned int *)&enum case for NCProtoConversationAVMode.video(_:);
  }
  if (a2 != 1) {
    id v7 = v8;
  }
  (*(void (**)(char *, void))(v4 + 104))(v6, *v7);
  return NCProtoStartConversationRequest.avMode.setter(v6);
}

uint64_t sub_100066B0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 136) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = type metadata accessor for NCProtoAddConversationParticipantsRequest(0LL);
  *(void *)(v5 + 48) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NCProtoAddConversationParticipantsResponse(0LL);
  *(void *)(v5 + 72) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 80) = v9;
  *(void *)(v5 + 88) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v10 = qword_1000D35E0;
  *(void *)(v5 + 96) = qword_1000D35E0;
  return swift_task_switch(sub_100066BCC, v10, 0LL);
}

uint64_t sub_100066BCC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(v0 + 104) = sub_100089240(6);
  uint64_t v3 = swift_task_alloc(32LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  uint64_t v4 = sub_10001CFD8( &qword_1000CF4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddConversationParticipantsRequest,  (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
  static Message.with(_:)(sub_10008238C, v3, v1, v4);
  swift_task_dealloc(v3);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  *(void *)(v0 + 112) = qword_1000D35C8;
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CF49C);
  *(void *)(v0 + 120) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100066CF0;
  return sub_10003C044( *(void *)(v0 + 88),  10,  *(void *)(v0 + 64),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(_BYTE *)(v0 + 136));
}

uint64_t sub_100066CF0()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_100066E1C;
  }
  else {
    uint64_t v4 = sub_100066D54;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_100066D54()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  (*(void (**)(void, void))(v0[7] + 8LL))(v0[8], v0[6]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return swift_task_switch(sub_100066DB8, v2, 0LL);
}

uint64_t sub_100066DB8()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  sub_100089490(6, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066E1C()
{
  uint64_t v1 = v0[12];
  (*(void (**)(void, void))(v0[7] + 8LL))(v0[8], v0[6]);
  return swift_task_switch(sub_100066E64, v1, 0LL);
}

uint64_t sub_100066E64()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  sub_100089490(6, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100066EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  uint64_t v7 = sub_10000360C(&qword_1000CFCC8);
  v6[15] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NCProtoAddMemberResponse(0LL);
  v6[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[17] = v9;
  v6[18] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v6[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[20] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[21] = swift_task_alloc(v12);
  v6[22] = swift_task_alloc(v12);
  v6[23] = swift_task_alloc(v12);
  _BYTE v6[24] = swift_task_alloc(v12);
  uint64_t v13 = sub_10000360C(&qword_1000CFE58);
  v6[25] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  v6[26] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v6[27] = v15;
  v6[28] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v16 = qword_1000D35E0;
  v6[29] = qword_1000D35E0;
  return swift_task_switch(sub_100067020, v16, 0LL);
}

uint64_t sub_100067020()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(*(void *)(v0 + 80) + OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos);
  uint64_t v6 = swift_task_alloc(32LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v5);
  sub_10003A81C((uint64_t (*)(char *))sub_100082514, v5, v3);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_10000BFC8(*(void *)(v0 + 200), &qword_1000CFE58);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v11, (uint64_t)qword_1000D3620);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 160);
    if (v15)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      v59[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v21);
      unint64_t v24 = v23;
      *(void *)(v0 + 40) = sub_10009BE3C(v22, v23, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[Handoff][PullExpanse] Failed to find nearby conversation %s.",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v18 + 8))(*(void *)(v0 + 192), *(void *)(v0 + 152));
    }

    id v45 = (id)TUMakeNeighborhoodConduitError(2LL, 0LL);
    swift_willThrow(v45);
    uint64_t v47 = *(void *)(v0 + 192);
    uint64_t v46 = *(void *)(v0 + 200);
    uint64_t v49 = *(void *)(v0 + 176);
    uint64_t v48 = *(void *)(v0 + 184);
    uint64_t v50 = *(void *)(v0 + 168);
    uint64_t v51 = *(void *)(v0 + 144);
    uint64_t v52 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10004EA7C( *(void *)(v0 + 200),  *(void *)(v0 + 224),  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v25 = *(void *)(v0 + 184);
    uint64_t v26 = *(void *)(v0 + 152);
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v28 = *(void *)(v0 + 88);
    uint64_t v29 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 240) = sub_10000ADF4(v29, (uint64_t)qword_1000D3620);
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    *(void *)(v0 + 248) = v30;
    uint64_t v31 = v30(v25, v28, v26);
    id v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void *)(v0 + 184);
    uint64_t v36 = *(void *)(v0 + 152);
    uint64_t v37 = *(void *)(v0 + 160);
    if (v34)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      v59[0] = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v40 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v40);
      unint64_t v43 = v42;
      *(void *)(v0 + 64) = sub_10009BE3C(v41, v42, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v43);
      os_log_type_t v44 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v44(v35, v36);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "[Handoff][PullExpanse] Generating pseudonym for %s.",  v38,  0xCu);
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
      os_log_type_t v44 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v44(*(void *)(v0 + 184), *(void *)(v0 + 152));
    }

    *(void *)(v0 + 256) = v44;
    uint64_t v55 = UUID.uuidString.getter(v54);
    uint64_t v57 = v56;
    *(void *)(v0 + 264) = v56;
    uint64_t v58 = (void *)swift_task_alloc(dword_1000CFCD4);
    *(void *)(v0 + 272) = v58;
    *uint64_t v58 = v0;
    v58[1] = sub_10006754C;
    return sub_10005DEB0(v55, v57, 0);
  }

uint64_t sub_10006754C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 272LL);
  v4[35] = a1;
  v4[36] = a2;
  v4[37] = v2;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[33];
  uint64_t v7 = v4[29];
  swift_bridgeObjectRelease(v6);
  if (v2) {
    uint64_t v8 = sub_1000682DC;
  }
  else {
    uint64_t v8 = sub_1000675C8;
  }
  return swift_task_switch(v8, v7, 0LL);
}

uint64_t sub_1000675C8()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 96);
  swift_beginAccess(v4 + 16, v0 + 16, 1LL, 0LL);
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v6 = swift_bridgeObjectRelease(v5);
  static Task<>.checkCancellation()(v6);
  if (v2)
  {
    uint64_t v7 = *(void *)(v0 + 288);
    sub_10000BF5C(*(void *)(v0 + 224), type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    swift_bridgeObjectRelease(v7);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(void, void, void))(v0 + 248))( *(void *)(v0 + 176),  *(void *)(v0 + 88),  *(void *)(v0 + 152));
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    uint64_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, (os_log_type_t)v18);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v22 = *(void *)(v0 + 152);
    if (v19)
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      uint64_t v25 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
      unint64_t v28 = v27;
      *(void *)(v0 + 56) = sub_10009BE3C(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v28);
      v20(v21, v22);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  (os_log_type_t)v18,  "[Handoff][PullExpanse] Generating association voucher for %s.",  v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      v20(*(void *)(v0 + 176), *(void *)(v0 + 152));
    }

    uint64_t v29 = *(void *)(v0 + 224) + *(int *)(*(void *)(v0 + 208) + 28LL);
    uint64_t v30 = (void *)swift_task_alloc(dword_1000CFCDC);
    *(void *)(v0 + 304) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_10006787C;
    return sub_1000684F8(v29, *(void *)(v0 + 280), *(void *)(v0 + 288), 0);
  }

uint64_t sub_10006787C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 304LL);
  v3[39] = a1;
  v3[40] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[29];
    swift_bridgeObjectRelease(v3[36]);
    uint64_t v6 = sub_100068384;
    uint64_t v7 = v5;
  }

  else
  {
    uint64_t v7 = v3[29];
    uint64_t v6 = sub_1000678F8;
  }

  return swift_task_switch(v6, v7, 0LL);
}

uint64_t sub_1000678F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 320);
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    uint64_t v3 = *(void **)(v1 + 312);
    uint64_t v4 = *(void *)(v1 + 288);
    sub_10000BF5C(*(void *)(v1 + 224), type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    swift_bridgeObjectRelease(v4);

    uint64_t v5 = *(void *)(v1 + 192);
    uint64_t v6 = *(void *)(v1 + 200);
    uint64_t v8 = *(void *)(v1 + 176);
    uint64_t v7 = *(void *)(v1 + 184);
    uint64_t v9 = *(void *)(v1 + 168);
    uint64_t v10 = *(void *)(v1 + 144);
    uint64_t v11 = *(void *)(v1 + 120);
    swift_task_dealloc(*(void *)(v1 + 224));
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v13 = (*(uint64_t (**)(void, void, void))(v1 + 248))( *(void *)(v1 + 168),  *(void *)(v1 + 88),  *(void *)(v1 + 152));
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    uint64_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, (os_log_type_t)v15);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    uint64_t v18 = *(void *)(v1 + 168);
    uint64_t v19 = *(void *)(v1 + 152);
    if (v16)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v22 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v19, v22);
      unint64_t v25 = v24;
      *(void *)(v1 + 48) = sub_10009BE3C(v23, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      v17(v18, v19);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v15,  "[Handoff][PullExpanse] Requesting to add member for %s.",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      v17(*(void *)(v1 + 168), *(void *)(v1 + 152));
    }

    uint64_t v26 = *(void *)(v1 + 104);
    *(void *)(v1 + 328) = *(void *)(v26 + 16);
    uint64_t v27 = qword_1000D35E0;
    *(void *)(v1 + 336) = *(void *)(v26 + 24);
    *(void *)(v1 + 344) = v27;
    return swift_task_switch(sub_100067B68, v27, 0LL);
  }

uint64_t sub_100067B68()
{
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  __int128 v14 = *(_OWORD *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v7 = swift_task_alloc(80LL);
  *(void *)(v0 + 352) = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  *(_OWORD *)(v7 + 32) = v14;
  *(void *)(v7 + 48) = v4;
  *(void *)(v7 + 56) = v3;
  *(void *)(v7 + 64) = v2;
  *(void *)(v7 + 72) = v1;
  uint64_t v8 = (void *)swift_task_alloc(48LL);
  *(void *)(v0 + 360) = v8;
  _OWORD v8[2] = v5;
  void v8[3] = v6;
  v8[4] = v2;
  v8[5] = v1;
  uint64_t v9 = qword_1000D35E0;
  uint64_t v11 = sub_10001CFD8( &qword_1000CF800,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  *(void *)(v0 + 368) = v12;
  void *v12 = v0;
  v12[1] = sub_100067C74;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( *(void *)(v0 + 144),  &unk_1000CFEE0,  v7,  sub_100082C38,  v8,  v9,  v11,  *(void *)(v0 + 128));
}

uint64_t sub_100067C74()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 368LL);
  *(void *)(*(void *)v1 + 376LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[43];
    uint64_t v5 = sub_10006802C;
  }

  else
  {
    uint64_t v7 = v2[44];
    uint64_t v6 = v2[45];
    uint64_t v8 = v2[29];
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v5 = sub_100067CF0;
    uint64_t v4 = v8;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100067CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 376);
  uint64_t v3 = static Task<>.checkCancellation()(a1);
  if (!v2)
  {
    NCProtoAddMemberResponse.identifierHash.getter(v3);
    __asm { BR              X10 }
  }

  uint64_t v4 = *(void **)(v1 + 312);
  uint64_t v5 = *(void *)(v1 + 224);
  uint64_t v7 = *(void *)(v1 + 136);
  uint64_t v6 = *(void *)(v1 + 144);
  uint64_t v8 = *(void *)(v1 + 128);
  swift_bridgeObjectRelease(*(void *)(v1 + 288));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_10000BF5C(v5, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  uint64_t v11 = *(void *)(v1 + 192);
  uint64_t v10 = *(void *)(v1 + 200);
  uint64_t v13 = *(void *)(v1 + 176);
  uint64_t v12 = *(void *)(v1 + 184);
  uint64_t v14 = *(void *)(v1 + 168);
  uint64_t v15 = *(void *)(v1 + 144);
  uint64_t v16 = *(void *)(v1 + 120);
  swift_task_dealloc(*(void *)(v1 + 224));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10006802C()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[29];
  swift_bridgeObjectRelease(v0[36]);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100068088, v3, 0LL);
}

uint64_t sub_100068088()
{
  uint64_t v1 = *(void *)(v0 + 224);

  sub_10000BF5C(v1, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006813C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[53];
  (*v1)[54] = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[51];
  uint64_t v4 = v2[52];
  unint64_t v6 = v2[49];
  uint64_t v7 = (void *)v2[50];
  uint64_t v8 = v2[48];
  uint64_t v9 = v2[36];
  uint64_t v10 = v2[29];
  sub_10000BFC8(v2[15], &qword_1000CFCC8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);

  sub_10000BE18(v8, v6);
  swift_bridgeObjectRelease(v9);
  if (v0) {
    uint64_t v11 = sub_10006842C;
  }
  else {
    uint64_t v11 = sub_10006820C;
  }
  return swift_task_switch(v11, v10, 0LL);
}

uint64_t sub_10006820C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  sub_10000BF5C(v1, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000682DC()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100068384()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006842C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10000BF5C(v1, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000684F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 264) = a4;
  *(void *)(v5 + 56) = a3;
  *(void *)(v5 + 64) = v4;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  uint64_t v6 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType(0LL);
  *(void *)(v5 + 72) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 88) = swift_task_alloc(v8);
  *(void *)(v5 + 96) = swift_task_alloc(v8);
  *(void *)(v5 + 104) = swift_task_alloc(v8);
  *(void *)(v5 + 112) = swift_task_alloc(v8);
  *(void *)(v5 + 120) = swift_task_alloc(v8);
  uint64_t v9 = sub_10000360C(&qword_1000CF740);
  *(void *)(v5 + 128) = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 136) = swift_task_alloc(v10);
  *(void *)(v5 + 144) = swift_task_alloc(v10);
  *(void *)(v5 + 152) = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  *(void *)(v5 + 160) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v5 + 168) = v12;
  *(void *)(v5 + 176) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v13 = qword_1000D35E0;
  *(void *)(v5 + 184) = qword_1000D35E0;
  return swift_task_switch(sub_100068630, v13, 0LL);
}

uint64_t sub_100068630()
{
  if (![*(id *)(*(void *)(v0 + 64) + OBJC_IVAR___CSDNeighborhoodActivityConduit_vouchingEnablement) isEnabled])
  {
LABEL_21:
    uint64_t v46 = *(void *)(v0 + 144);
    uint64_t v47 = *(void *)(v0 + 152);
    uint64_t v48 = *(void *)(v0 + 136);
    uint64_t v50 = *(void *)(v0 + 112);
    uint64_t v49 = *(void *)(v0 + 120);
    uint64_t v52 = *(void *)(v0 + 96);
    uint64_t v51 = *(void *)(v0 + 104);
    uint64_t v53 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v47);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  sub_100005318(*(void *)(v0 + 40), v3, &qword_1000CF740);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_10000BFC8(*(void *)(v0 + 152), &qword_1000CF740);
LABEL_15:
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v31 = *(void *)(v0 + 144);
    uint64_t v32 = *(void *)(v0 + 40);
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v33, (uint64_t)qword_1000D3620);
    uint64_t v34 = sub_100005318(v32, v31, &qword_1000CF740);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = *(void *)(v0 + 144);
    if (v37)
    {
      uint64_t v40 = *(void *)(v0 + 128);
      uint64_t v39 = *(void *)(v0 + 136);
      uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      v145[0] = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      sub_100005318(v38, v39, &qword_1000CF740);
      uint64_t v43 = String.init<A>(describing:)(v39, v40);
      unint64_t v45 = v44;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10009BE3C(v43, v44, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease(v45);
      sub_10000BFC8(v38, &qword_1000CF740);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Insufficient information provided to create association voucher for %s.",  v41,  0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_10000BFC8(*(void *)(v0 + 144), &qword_1000CF740);
    }

    goto LABEL_21;
  }

  uint64_t v4 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 168) + 32LL))( *(void *)(v0 + 176),  *(void *)(v0 + 152),  *(void *)(v0 + 160));
  char v5 = NCProtoMemberAssociationPrimaryInfo.hasConversationGroupUuidString.getter(v4);
  uint64_t v6 = *(void *)(v0 + 176);
  if ((v5 & 1) == 0
    || (char v7 = NCProtoMemberAssociationPrimaryInfo.hasHandleData.getter(), v6 = *(void *)(v0 + 176), (v7 & 1) == 0))
  {
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8LL))(v6, *(void *)(v0 + 160));
    goto LABEL_15;
  }

  uint64_t v8 = NCProtoMemberAssociationPrimaryInfo.handleData.getter();
  unint64_t v10 = v9;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___TUHandle);
  id v13 = [v12 handleFromMessagingData:isa];
  *(void *)(v0 + 192) = v13;
  sub_10000BE18(v8, v10);

  if (!v13)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8LL))(*(void *)(v0 + 176), *(void *)(v0 + 160));
    goto LABEL_15;
  }

  char v14 = NCProtoMemberAssociationPrimaryInfo.hasIdentifier.getter();
  uint64_t v15 = *(void *)(v0 + 176);
  if ((v14 & 1) == 0
    || (v16 = NCProtoMemberAssociationPrimaryInfo.hasAvcIdentifier.getter(), uint64_t v15 = *(void *)(v0 + 176), (v16 & 1) == 0))
  {
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8LL))(v15, *(void *)(v0 + 160));

    goto LABEL_15;
  }

  uint64_t v17 = *(void *)(v0 + 80);
  char v18 = *(_BYTE *)(v0 + 264);
  uint64_t v19 = NCProtoMemberAssociationPrimaryInfo.supportedTypes.getter();
  uint64_t v20 = *(uint64_t (**)(uint64_t, void, uint64_t))(v17 + 104);
  uint64_t v21 = *(void *)(v0 + 72);
  if ((v18 & 1) != 0)
  {
    unsigned int v55 = enum case for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.identityClaiming(_:);
    v20( *(void *)(v0 + 96),  enum case for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.identityClaiming(_:),  v21);
    uint64_t v138 = *(void *)(v19 + 16);
    if (v138)
    {
      uint64_t v129 = (uint64_t *)(v0 + 96);
      unsigned int v130 = v55;
      uint64_t v131 = v20;
      uint64_t v142 = v0 + 24;
      uint64_t v56 = v19;
      uint64_t v58 = *(void *)(v0 + 88);
      uint64_t v57 = *(void *)(v0 + 96);
      uint64_t v60 = *(void *)(v0 + 72);
      uint64_t v59 = *(void *)(v0 + 80);
      unint64_t v61 = (*(unsigned __int8 *)(v59 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      uint64_t v134 = v56;
      uint64_t v136 = *(void (**)(uint64_t, unint64_t, uint64_t))(v59 + 16);
      v136(v58, v56 + v61, v60);
      uint64_t v62 = sub_10001CFD8( &qword_1000CFD88,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
      LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v58, v57, v60, v62);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v30(v58, v60);
      if ((v57 & 1) != 0) {
        goto LABEL_53;
      }
      if (v138 != 1)
      {
        uint64_t v139 = v30;
        uint64_t v133 = *(void *)(*(void *)(v0 + 80) + 72LL);
        unint64_t v87 = v134 + v133 + v61;
        uint64_t v88 = 1LL;
        while (1)
        {
          v136(*(void *)(v0 + 88), v87, *(void *)(v0 + 72));
          uint64_t v89 = v88 + 1;
          if (__OFADD__(v88, 1LL)) {
            goto LABEL_62;
          }
          uint64_t v90 = *(void *)(v0 + 88);
          uint64_t v91 = *(void *)(v0 + 72);
          char v92 = dispatch thunk of static Equatable.== infix(_:_:)(v90, *(void *)(v0 + 96), v91, v62);
          v139(v90, v91);
          if ((v92 & 1) != 0)
          {
LABEL_52:
            uint64_t v30 = v139;
            goto LABEL_53;
          }

          ++v88;
          v87 += v133;
          if (v89 == v138)
          {
            uint64_t v19 = v134;
            v139(*(void *)(v0 + 96), *(void *)(v0 + 72));
            goto LABEL_36;
          }
        }
      }

      uint64_t v19 = v134;
    }

    else
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 80) + 8LL);
    }

    v30(*(void *)(v0 + 96), *(void *)(v0 + 72));
LABEL_36:
    swift_bridgeObjectRelease(v19);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v68 = type metadata accessor for Logger(0LL);
    uint64_t v69 = sub_10000ADF4(v68, (uint64_t)qword_1000D3620);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v70,  "Connected device doesn't support necessary association type (identityClaiming).",  v71,  2u);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    goto LABEL_40;
  }

  unsigned int v22 = enum case for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.expanse(_:);
  v20(*(void *)(v0 + 112), enum case for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.expanse(_:), v21);
  uint64_t v137 = *(void *)(v19 + 16);
  if (!v137)
  {
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 80) + 8LL);
    goto LABEL_29;
  }

  uint64_t v129 = (uint64_t *)(v0 + 112);
  unsigned int v130 = v22;
  uint64_t v131 = v20;
  uint64_t v142 = v0 + 24;
  uint64_t v23 = v19;
  uint64_t v25 = *(void *)(v0 + 104);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v27 = *(void *)(v0 + 72);
  uint64_t v26 = *(void *)(v0 + 80);
  unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v134 = v23;
  __int128 v135 = *(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16);
  v135(v25, v23 + v28, v27);
  uint64_t v29 = sub_10001CFD8( &qword_1000CFD88,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo.MemberAssociationType);
  LOBYTE(v24) = dispatch thunk of static Equatable.== infix(_:_:)(v25, v24, v27, v29);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v30(v25, v27);
  if ((v24 & 1) == 0)
  {
    if (v137 == 1)
    {
      uint64_t v19 = v134;
LABEL_29:
      v30(*(void *)(v0 + 112), *(void *)(v0 + 72));
LABEL_30:
      swift_bridgeObjectRelease(v19);
      if (qword_1000CD690 == -1) {
        goto LABEL_31;
      }
      goto LABEL_63;
    }

    uint64_t v139 = v30;
    uint64_t v132 = *(void *)(*(void *)(v0 + 80) + 72LL);
    unint64_t v81 = v134 + v132 + v28;
    uint64_t v82 = 1LL;
    while (1)
    {
      v135(*(void *)(v0 + 104), v81, *(void *)(v0 + 72));
      uint64_t v83 = v82 + 1;
      if (__OFADD__(v82, 1LL)) {
        break;
      }
      uint64_t v84 = *(void *)(v0 + 104);
      uint64_t v85 = *(void *)(v0 + 72);
      char v86 = dispatch thunk of static Equatable.== infix(_:_:)(v84, *(void *)(v0 + 112), v85, v29);
      v139(v84, v85);
      if ((v86 & 1) != 0) {
        goto LABEL_52;
      }
      ++v82;
      v81 += v132;
      if (v83 == v137)
      {
        uint64_t v19 = v134;
        v139(*(void *)(v0 + 112), *(void *)(v0 + 72));
        goto LABEL_30;
      }
    }

    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_once(&qword_1000CD690, sub_100088E24);
LABEL_31:
    uint64_t v63 = type metadata accessor for Logger(0LL);
    uint64_t v64 = sub_10000ADF4(v63, (uint64_t)qword_1000D3620);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Connected device doesn't support necessary association type (expanse).",  v67,  2u);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

LABEL_53:
  v30(*v129, *(void *)(v0 + 72));
  *(void *)(v0 + sub_10001D15C(v0 + 200) = v30;
  uint64_t v93 = *(void *)(v0 + 120);
  uint64_t v94 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(v134);
  uint64_t v95 = v131(v93, v130, v94);
  uint64_t v96 = NCProtoMemberAssociationPrimaryInfo.MemberAssociationType.rawValue.getter(v95);
  NSString v97 = String._bridgeToObjectiveC()();
  id v98 = [v12 normalizedGenericHandleForValue:v97];
  *(void *)(v0 + 208) = v98;

  if (!v98)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v118 = *(void *)(v0 + 56);
    uint64_t v119 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v119, (uint64_t)qword_1000D3620);
    uint64_t v120 = swift_bridgeObjectRetain_n(v118, 2LL);
    id v121 = (os_log_s *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.error.getter();
    BOOL v123 = os_log_type_enabled(v121, v122);
    unint64_t v124 = *(void *)(v0 + 56);
    if (v123)
    {
      uint64_t v141 = *(void *)(v0 + 48);
      id v125 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v126 = swift_slowAlloc(32LL, -1LL);
      v145[0] = v126;
      *(_DWORD *)id v125 = 136315138;
      swift_bridgeObjectRetain(v124);
      *(void *)(v0 + 24) = sub_10009BE3C(v141, v124, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, v0 + 32, v125 + 4, v125 + 12);
      swift_bridgeObjectRelease_n(v124, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Failed to create handles for %s.", v125, 0xCu);
      swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1LL, -1LL);
      swift_slowDealloc(v125, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 56), 2LL);
    }

    uint64_t v127 = *(void *)(v0 + 120);
    uint64_t v128 = *(void *)(v0 + 72);
    id v144 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    swift_willThrow(v144);

    v30(v127, v128);
    goto LABEL_41;
  }

  uint64_t v140 = *(void *)(v0 + 64);
  uint64_t v99 = (void *)objc_opt_self(&OBJC_CLASS___TUConversationMemberAssociation);
  uint64_t v100 = NCProtoMemberAssociationPrimaryInfo.identifier.getter();
  NCProtoMemberAssociationPrimaryInfo.avcIdentifier.getter();
  uint64_t v102 = v101;
  NSString v103 = String._bridgeToObjectiveC()();
  uint64_t v104 = swift_bridgeObjectRelease(v102);
  NCProtoMemberAssociationPrimaryInfo.conversationGroupUuidString.getter(v104);
  uint64_t v106 = v105;
  NSString v107 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v106);
  id v108 =  [v99 messagingDataWithType:v96 primaryHandle:v13 primaryIdentifier:v100 primaryAvcIdentifier:v103 associatedPseudonym:v98 conversation GroupUUIDString:v107];

  uint64_t v109 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v108);
  uint64_t v111 = v110;

  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v109;
  *(void *)(v0 + 224) = v111;
  *(void *)(v0 + 232) = sub_100089240(4);
  uint64_t v112 = qword_1000D35E0;
  uint64_t v114 = sub_10001CFD8( &qword_1000CF800,  v113,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  unint64_t v115 = (void *)swift_task_alloc(48LL);
  *(void *)(v0 + 240) = v115;
  v115[2] = v140;
  v115[3] = v109;
  v115[4] = v111;
  v115[5] = v98;
  uint64_t v116 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 248) = v116;
  uint64_t v117 = sub_10000360C(&qword_1000CFD90);
  void *v116 = v0;
  v116[1] = sub_1000692C4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 32,  v112,  v114,  0xD000000000000029LL,  0x80000001000A5970LL,  sub_100082278,  v115,  v117);
}

uint64_t sub_1000692C4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 248);
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 184);
    char v5 = sub_10006944C;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 184);
    swift_task_dealloc(*(void *)(v2 + 240));
    char v5 = sub_100069338;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100069338()
{
  unint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v4 = *(void **)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v6 = *(void **)(v0 + 192);
  char v5 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 160);
  uint64_t v20 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v21 = *(void *)(v0 + 32);
  sub_100089490(4, v1);

  sub_10000BE18(v3, v2);
  swift_release(v1);
  v5(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v19);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
}

uint64_t sub_10006944C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  unint64_t v2 = *(void *)(v0 + 224);
  char v5 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  uint64_t v4 = *(void **)(v0 + 208);
  uint64_t v6 = *(void **)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 240));
  sub_100089490(4, v1);

  sub_10000BE18(v3, v2);
  swift_release(v1);
  v5(v7, v8);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8LL))(v9, *(void *)(v0 + 160));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006955C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(v9 + 593) = v27;
  *(void *)(v9 + sub_10001D15C(v0 + 200) = v26;
  *(void *)(v9 + 208) = v8;
  *(void *)(v9 + 184) = a8;
  *(void *)(v9 + 192) = v25;
  *(void *)(v9 + 168) = a6;
  *(void *)(v9 + 176) = a7;
  *(_BYTE *)(v9 + 592) = a5;
  *(void *)(v9 + 152) = a3;
  *(void *)(v9 + 160) = a4;
  *(void *)(v9 + 136) = a1;
  *(void *)(v9 + 144) = a2;
  uint64_t v10 = sub_10000360C(&qword_1000CE5B0);
  *(void *)(v9 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  *(void *)(v9 + 224) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v9 + 232) = v12;
  *(void *)(v9 + 240) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  *(void *)(v9 + 248) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v9 + 256) = v14;
  *(void *)(v9 + 264) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NCProtoConversationAVMode(0LL);
  *(void *)(v9 + 272) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v9 + 280) = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v9 + 288) = swift_task_alloc(v17);
  *(void *)(v9 + 296) = swift_task_alloc(v17);
  *(void *)(v9 + 304) = swift_task_alloc(v17);
  unint64_t v18 = (*(void *)(*(void *)(sub_10000360C(&qword_1000CFCC8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v9 + 312) = swift_task_alloc(v18);
  *(void *)(v9 + 320) = swift_task_alloc(v18);
  *(void *)(v9 + 328) = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  *(void *)(v9 + 336) = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  *(void *)(v9 + 344) = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v9 + 352) = swift_task_alloc(v21);
  *(void *)(v9 + 360) = swift_task_alloc(v21);
  *(void *)(v9 + 368) = swift_task_alloc(v21);
  *(void *)(v9 + 376) = swift_task_alloc(v21);
  *(void *)(v9 + 384) = swift_task_alloc(v21);
  unint64_t v22 = (*(void *)(*(void *)(sub_10000360C((uint64_t *)&unk_1000CE420) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v9 + 392) = swift_task_alloc(v22);
  *(void *)(v9 + 400) = swift_task_alloc(v22);
  *(void *)(v9 + 408) = swift_task_alloc(v22);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v23 = qword_1000D35E0;
  *(void *)(v9 + 4swift_weakDestroy(v0 + 16) = qword_1000D35E0;
  return swift_task_switch(sub_100069778, v23, 0LL);
}

uint64_t sub_100069778()
{
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[42];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[43] + 56);
  v0[53] = (uint64_t)v3;
  v3(v1, 1LL, 1LL, v2);
  if (qword_1000CD6A8 != -1) {
    swift_once(&qword_1000CD6A8, sub_100088E90);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000ADF4(v4, (uint64_t)qword_1000D3668);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Feature has been disabled by the server.", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  if (qword_1000CD648 != -1) {
    swift_once(&qword_1000CD648, sub_1000389E4);
  }
  [(id)qword_1000CEF80 setEnableCriticalReliability:1];
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v9 = sub_10000ADF4(v4, (uint64_t)qword_1000D3620);
  v0[54] = v9;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[Handoff] Waiting for a conversation to become active.",  v12,  2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = (uint64_t **)swift_task_alloc(dword_1000CFD04);
  v0[55] = (uint64_t)v13;
  *uint64_t v13 = v0;
  v13[1] = (uint64_t *)sub_10006998C;
  return sub_10006DE98(v0[18], v0[19], v0[23], v0[24]);
}

uint64_t sub_10006998C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 440LL);
  v3[56] = a1;
  v3[57] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10006B6FC;
  }
  else {
    uint64_t v5 = sub_1000699F8;
  }
  return swift_task_switch(v5, v3[52], 0LL);
}

uint64_t sub_1000699F8()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 336);
  id v6 = [*(id *)(v0 + 448) UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  sub_10000BFC8(v4, (uint64_t *)&unk_1000CE420);
  v2(v3, 0LL, 1LL, v5);
  uint64_t v7 = sub_1000192A4(v3, v4, (uint64_t *)&unk_1000CE420);
  uint64_t v8 = static Task<>.checkCancellation()(v7);
  if (v1)
  {
    uint64_t v9 = v1;

    swift_errorRetain(v1);
    uint64_t v10 = swift_errorRetain(v1);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v102 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v13 = 138412290;
      swift_errorRetain(v9);
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v9);
      *(void *)(v0 + 112) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v13 + 4, v13 + 12);
      *uint64_t v102 = v14;
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Handoff] Failed to join conversation due to %@.", v13, 0xCu);
      uint64_t v15 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v102, 1LL, v15);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v30 = *(void *)(v0 + 392);
    uint64_t v31 = *(void *)(v0 + 336);
    uint64_t v32 = *(void *)(v0 + 344);

    sub_100005318(v29, v30, (uint64_t *)&unk_1000CE420);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31) == 1)
    {
      sub_10000BFC8(*(void *)(v0 + 392), (uint64_t *)&unk_1000CE420);
    }

    else
    {
      uint64_t v34 = *(void *)(v0 + 344);
      uint64_t v33 = *(void *)(v0 + 352);
      uint64_t v35 = *(void *)(v0 + 336);
      uint64_t v36 = *(void *)(v0 + 208);
      (*(void (**)(uint64_t, void, uint64_t))(v34 + 32))(v33, *(void *)(v0 + 392), v35);
      id v37 = *(id *)(v36 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v37 leaveConversationWithUUID:isa];

      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }

    uint64_t v40 = *(void *)(v0 + 400);
    uint64_t v39 = *(void *)(v0 + 408);
    uint64_t v41 = *(void *)(v0 + 384);
    uint64_t v42 = *(void *)(v0 + 392);
    uint64_t v44 = *(void *)(v0 + 368);
    uint64_t v43 = *(void *)(v0 + 376);
    uint64_t v88 = *(void *)(v0 + 360);
    uint64_t v89 = *(void *)(v0 + 352);
    uint64_t v90 = *(void *)(v0 + 328);
    uint64_t v91 = *(void *)(v0 + 320);
    uint64_t v92 = *(void *)(v0 + 312);
    uint64_t v93 = *(void *)(v0 + 304);
    id v94 = *(id *)(v0 + 296);
    uint64_t v96 = *(void *)(v0 + 288);
    uint64_t v98 = *(void *)(v0 + 264);
    uint64_t v100 = *(void *)(v0 + 240);
    uint64_t v103 = *(void *)(v0 + 216);
    sub_100097488();
    sub_10000ACA0();
    swift_willThrow(v45);
    sub_10000BFC8(v39, (uint64_t *)&unk_1000CE420);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v103);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[Handoff] Waiting for a conversation to be joined.", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = *(void *)(v0 + 176);
    char v20 = *(_BYTE *)(v0 + 592);

    sub_100097034(v19);
    if ((v20 & 1) != 0)
    {
      CurrentValueSubject.value.getter((void *)(v0 + 120));
      uint64_t v46 = *(void **)(v0 + 120);
      if (v46)
      {
        unsigned __int8 v47 = [*(id *)(v0 + 120) isHidden];

        char v48 = v47 ^ 1;
      }

      else
      {
        char v48 = 0;
      }

      uint64_t v49 = *(void *)(v0 + 328);
      sub_100005318(*(void *)(v0 + 200), v49, &qword_1000CFCC8);
      uint64_t v50 = type metadata accessor for NCProtoCallState(0LL);
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
      uint64_t v53 = v52(v49, 1LL, v50);
      uint64_t v54 = *(void *)(v0 + 328);
      if ((_DWORD)v53 == 1)
      {
        sub_10000BFC8(*(void *)(v0 + 328), &qword_1000CFCC8);
        char v55 = 0;
      }

      else
      {
        char v56 = NCProtoCallState.isVideoEnabled.getter(v53);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v50);
        char v55 = v56 & v48;
      }

      uint64_t v57 = *(void *)(v0 + 320);
      sub_100005318(*(void *)(v0 + 200), v57, &qword_1000CFCC8);
      uint64_t v58 = v52(v57, 1LL, v50);
      uint64_t v59 = *(void *)(v0 + 320);
      if ((_DWORD)v58 == 1)
      {
        sub_10000BFC8(*(void *)(v0 + 320), &qword_1000CFCC8);
        char v60 = 0;
      }

      else
      {
        char v60 = NCProtoCallState.isAudioEnabled.getter(v58);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, v50);
      }

      if ([*(id *)(*(void *)(v0 + 208) + OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags) lagunaAudioCallsEnabled])
      {
        uint64_t v61 = *(void *)(v0 + 312);
        sub_100005318(*(void *)(v0 + 200), v61, &qword_1000CFCC8);
        uint64_t v62 = v52(v61, 1LL, v50);
        uint64_t v64 = *(void *)(v0 + 304);
        uint64_t v63 = *(void *)(v0 + 312);
        if ((_DWORD)v62 == 1)
        {
          uint64_t v65 = *(void *)(v0 + 272);
          uint64_t v66 = *(void *)(v0 + 280);
          sub_10000BFC8(*(void *)(v0 + 312), &qword_1000CFCC8);
          (*(void (**)(uint64_t, void, uint64_t))(v66 + 104))( v64,  enum case for NCProtoConversationAVMode.video(_:),  v65);
        }

        else
        {
          uint64_t v68 = *(void *)(v0 + 296);
          uint64_t v69 = *(void *)(v0 + 272);
          uint64_t v70 = *(void *)(v0 + 280);
          NCProtoCallState.avMode.getter(v62);
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v63, v50);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v64, v68, v69);
        }

        uint64_t v72 = *(void *)(v0 + 280);
        uint64_t v71 = *(void *)(v0 + 288);
        uint64_t v73 = *(void *)(v0 + 272);
        (*(void (**)(uint64_t, void, uint64_t))(v72 + 16))(v71, *(void *)(v0 + 304), v73);
        int v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 88))(v71, v73);
        if (v74 == enum case for NCProtoConversationAVMode.none(_:))
        {
          uint64_t v67 = 0LL;
        }

        else if (v74 == enum case for NCProtoConversationAVMode.audio(_:))
        {
          uint64_t v67 = 1LL;
        }

        else
        {
          (*(void (**)(void, void))(*(void *)(v0 + 280) + 8LL))( *(void *)(v0 + 288),  *(void *)(v0 + 272));
          uint64_t v67 = 2LL;
        }

        (*(void (**)(void, void))(*(void *)(v0 + 280) + 8LL))( *(void *)(v0 + 304),  *(void *)(v0 + 272));
      }

      else
      {
        uint64_t v67 = 2LL;
      }

      uint64_t v75 = *(void **)(v0 + 448);
      uint64_t v76 = *(void *)(v0 + 264);
      uint64_t v77 = *(void *)(v0 + 240);
      uint64_t v101 = *(void *)(v0 + 248);
      uint64_t v78 = *(void *)(v0 + 224);
      uint64_t v97 = *(void *)(v0 + 232);
      uint64_t v99 = *(void *)(v0 + 256);
      uint64_t v79 = *(char **)(v0 + 208);
      id v80 = [*(id *)&v79[OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter] queue];
      uint64_t v81 = swift_allocObject(&unk_1000C5248, 48LL, 7LL);
      *(void *)(v81 + swift_weakDestroy(v0 + 16) = v75;
      *(_BYTE *)(v81 + 24) = v55;
      *(_BYTE *)(v81 + 25) = v60 & 1;
      *(void *)(v81 + 32) = v67;
      *(void *)(v81 + 40) = v79;
      *(void *)(v0 + 48) = sub_1000820CC;
      *(void *)(v0 + 56) = v81;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
      *(void *)(v0 + 24) = 1107296256LL;
      *(void *)(v0 + 32) = sub_10000ABC8;
      *(void *)(v0 + 40) = &unk_1000C5260;
      uint64_t v82 = _Block_copy((const void *)(v0 + 16));
      id v95 = v75;
      static DispatchQoS.unspecified.getter(v79);
      *(void *)(v0 + 128) = _swiftEmptyArrayStorage;
      uint64_t v83 = sub_10001CFD8( (unint64_t *)&unk_1000CE340,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v84 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
      uint64_t v85 = sub_100018F4C( &qword_1000CE350,  (uint64_t *)&unk_1000CFBC0,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 128, v84, v85, v78, v83);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v76, v77, v82);
      _Block_release(v82);

      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v77, v78);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v76, v101);
      swift_release(*(void *)(v0 + 56));
      id v86 = [v95 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v86);

      unint64_t v87 = (void *)swift_task_alloc(dword_1000CFD0C);
      *(void *)(v0 + 488) = v87;
      *unint64_t v87 = v0;
      v87[1] = sub_10006A920;
      return sub_10006E9F8(*(void *)(v0 + 376));
    }

    else
    {
      unint64_t v21 = *(void **)(v0 + 448);
      unint64_t v22 = *(void **)(*(void *)(v0 + 208) + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
      id v23 = objc_allocWithZone(&OBJC_CLASS___TUJoinConversationRequest);
      id v24 = v22;
      id v25 = [v23 initWithConversation:v21 originatingUIType:44];
      [v24 joinConversationWithRequest:v25];

      id v26 = [v21 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      char v27 = (void *)swift_task_alloc(dword_1000CFD14);
      *(void *)(v0 + 464) = v27;
      *char v27 = v0;
      v27[1] = sub_10006A388;
      return sub_10006E3C8(*(void *)(v0 + 384));
    }
  }

uint64_t sub_10006A388(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[8] = v2;
  void v3[9] = a1;
  v3[10] = v1;
  uint64_t v4 = v3[58];
  v3[59] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v3[52];
  uint64_t v6 = v3[48];
  uint64_t v7 = v3[42];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3[43] + 8LL);
  if (v1)
  {
    v8(v6, v7);
    uint64_t v9 = sub_10006BA20;
  }

  else
  {
    v3[60] = v8;
    v8(v6, v7);
    uint64_t v9 = sub_10006A418;
  }

  return swift_task_switch(v9, v5, 0LL);
}

uint64_t sub_10006A418(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 472);
  uint64_t v3 = *(void **)(v1 + 72);
  *(void *)(v1 + 512) = *(void *)(v1 + 480);
  *(void *)(v1 + 520) = v3;
  uint64_t v4 = static Task<>.checkCancellation()(a1);
  if (v2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = *(void **)(v1 + 448);

    swift_errorRetain(v5);
    uint64_t v7 = swift_errorRetain(v5);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v10 = 138412290;
      swift_errorRetain(v5);
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(void *)(v1 + 112) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v10 + 4, v10 + 12);
      *os_log_type_t v11 = v12;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[Handoff] Failed to join conversation due to %@.", v10, 0xCu);
      uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v11, 1LL, v13);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }

    uint64_t v20 = *(void *)(v1 + 408);
    uint64_t v21 = *(void *)(v1 + 392);
    uint64_t v22 = *(void *)(v1 + 336);
    uint64_t v23 = *(void *)(v1 + 344);

    sub_100005318(v20, v21, (uint64_t *)&unk_1000CE420);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
    {
      sub_10000BFC8(*(void *)(v1 + 392), (uint64_t *)&unk_1000CE420);
    }

    else
    {
      uint64_t v25 = *(void *)(v1 + 344);
      uint64_t v24 = *(void *)(v1 + 352);
      uint64_t v26 = *(void *)(v1 + 336);
      uint64_t v27 = *(void *)(v1 + 208);
      (*(void (**)(uint64_t, void, uint64_t))(v25 + 32))(v24, *(void *)(v1 + 392), v26);
      id v28 = *(id *)(v27 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v28 leaveConversationWithUUID:isa];

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }

    uint64_t v31 = *(void *)(v1 + 400);
    uint64_t v30 = *(void *)(v1 + 408);
    uint64_t v32 = *(void *)(v1 + 384);
    uint64_t v33 = *(void *)(v1 + 392);
    uint64_t v35 = *(void *)(v1 + 368);
    uint64_t v34 = *(void *)(v1 + 376);
    uint64_t v44 = *(void *)(v1 + 360);
    uint64_t v45 = *(void *)(v1 + 352);
    uint64_t v46 = *(void *)(v1 + 328);
    uint64_t v47 = *(void *)(v1 + 320);
    uint64_t v48 = *(void *)(v1 + 312);
    uint64_t v49 = *(void *)(v1 + 304);
    uint64_t v50 = *(void *)(v1 + 296);
    uint64_t v51 = *(void *)(v1 + 288);
    uint64_t v52 = *(void *)(v1 + 264);
    uint64_t v53 = *(void *)(v1 + 240);
    uint64_t v55 = *(void *)(v1 + 216);
    sub_100097488();
    sub_10000ACA0();
    swift_willThrow(v36);
    sub_10000BFC8(v30, (uint64_t *)&unk_1000CE420);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[Handoff] Successfully joined conversation.", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    int v17 = *(unsigned __int8 *)(v1 + 593);

    if (v17 == 1)
    {
      uint64_t v54 = (uint64_t (*)(uint64_t, char))((char *)&dword_1000CEFA0 + dword_1000CEFA0);
      unint64_t v18 = (void *)swift_task_alloc(unk_1000CEFA4);
      *(void *)(v1 + 528) = v18;
      *unint64_t v18 = v1;
      v18[1] = sub_10006AEB8;
      return v54((uint64_t)_swiftEmptyArrayStorage, 0);
    }

    else
    {
      id v37 = *(void **)(v1 + 520);
      uint64_t v38 = *(void *)(v1 + 160);
      sub_10000A240((void **)5);
      uint64_t v39 = *(void *)(v38 + 16);
      *(void *)(v1 + 544) = v39;
      uint64_t v40 = *(void *)(v38 + 24);
      *(void *)(v1 + 552) = v40;
      swift_bridgeObjectRetain(v40);
      id v41 = [v37 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

      id v42 = [v37 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      uint64_t v43 = (void *)swift_task_alloc(dword_1000CE934);
      *(void *)(v1 + 560) = v43;
      *uint64_t v43 = v1;
      v43[1] = sub_10006B344;
      return sub_1000241DC(v39, v40, 0);
    }
  }

uint64_t sub_10006A920(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[11] = v2;
  v3[12] = a1;
  v3[13] = v1;
  uint64_t v4 = v3[61];
  v3[62] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = v3[52];
  uint64_t v6 = v3[47];
  uint64_t v7 = v3[42];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3[43] + 8LL);
  if (v1)
  {
    v8(v6, v7);
    os_log_type_t v9 = sub_10006BD4C;
  }

  else
  {
    v3[63] = v8;
    v8(v6, v7);
    os_log_type_t v9 = sub_10006A9B0;
  }

  return swift_task_switch(v9, v5, 0LL);
}

uint64_t sub_10006A9B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 496);
  uint64_t v3 = *(void **)(v1 + 96);
  *(void *)(v1 + 512) = *(void *)(v1 + 504);
  *(void *)(v1 + 520) = v3;
  uint64_t v4 = static Task<>.checkCancellation()(a1);
  if (v2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = *(void **)(v1 + 448);

    swift_errorRetain(v5);
    uint64_t v7 = swift_errorRetain(v5);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_type_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v10 = 138412290;
      swift_errorRetain(v5);
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(void *)(v1 + 112) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v10 + 4, v10 + 12);
      *os_log_type_t v11 = v12;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[Handoff] Failed to join conversation due to %@.", v10, 0xCu);
      uint64_t v13 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v11, 1LL, v13);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }

    uint64_t v20 = *(void *)(v1 + 408);
    uint64_t v21 = *(void *)(v1 + 392);
    uint64_t v22 = *(void *)(v1 + 336);
    uint64_t v23 = *(void *)(v1 + 344);

    sub_100005318(v20, v21, (uint64_t *)&unk_1000CE420);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22) == 1)
    {
      sub_10000BFC8(*(void *)(v1 + 392), (uint64_t *)&unk_1000CE420);
    }

    else
    {
      uint64_t v25 = *(void *)(v1 + 344);
      uint64_t v24 = *(void *)(v1 + 352);
      uint64_t v26 = *(void *)(v1 + 336);
      uint64_t v27 = *(void *)(v1 + 208);
      (*(void (**)(uint64_t, void, uint64_t))(v25 + 32))(v24, *(void *)(v1 + 392), v26);
      id v28 = *(id *)(v27 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v28 leaveConversationWithUUID:isa];

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }

    uint64_t v31 = *(void *)(v1 + 400);
    uint64_t v30 = *(void *)(v1 + 408);
    uint64_t v32 = *(void *)(v1 + 384);
    uint64_t v33 = *(void *)(v1 + 392);
    uint64_t v35 = *(void *)(v1 + 368);
    uint64_t v34 = *(void *)(v1 + 376);
    uint64_t v44 = *(void *)(v1 + 360);
    uint64_t v45 = *(void *)(v1 + 352);
    uint64_t v46 = *(void *)(v1 + 328);
    uint64_t v47 = *(void *)(v1 + 320);
    uint64_t v48 = *(void *)(v1 + 312);
    uint64_t v49 = *(void *)(v1 + 304);
    uint64_t v50 = *(void *)(v1 + 296);
    uint64_t v51 = *(void *)(v1 + 288);
    uint64_t v52 = *(void *)(v1 + 264);
    uint64_t v53 = *(void *)(v1 + 240);
    uint64_t v55 = *(void *)(v1 + 216);
    sub_100097488();
    sub_10000ACA0();
    swift_willThrow(v36);
    sub_10000BFC8(v30, (uint64_t *)&unk_1000CE420);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[Handoff] Successfully joined conversation.", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    int v17 = *(unsigned __int8 *)(v1 + 593);

    if (v17 == 1)
    {
      uint64_t v54 = (uint64_t (*)(uint64_t, char))((char *)&dword_1000CEFA0 + dword_1000CEFA0);
      unint64_t v18 = (void *)swift_task_alloc(unk_1000CEFA4);
      *(void *)(v1 + 528) = v18;
      *unint64_t v18 = v1;
      v18[1] = sub_10006AEB8;
      return v54((uint64_t)_swiftEmptyArrayStorage, 0);
    }

    else
    {
      id v37 = *(void **)(v1 + 520);
      uint64_t v38 = *(void *)(v1 + 160);
      sub_10000A240((void **)5);
      uint64_t v39 = *(void *)(v38 + 16);
      *(void *)(v1 + 544) = v39;
      uint64_t v40 = *(void *)(v38 + 24);
      *(void *)(v1 + 552) = v40;
      swift_bridgeObjectRetain(v40);
      id v41 = [v37 UUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

      id v42 = [v37 groupUUID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      uint64_t v43 = (void *)swift_task_alloc(dword_1000CE934);
      *(void *)(v1 + 560) = v43;
      *uint64_t v43 = v1;
      v43[1] = sub_10006B344;
      return sub_1000241DC(v39, v40, 0);
    }
  }

uint64_t sub_10006AEB8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 528);
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10006B010;
  }
  else {
    uint64_t v4 = sub_10006AF1C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 416), 0LL);
}

uint64_t sub_10006AF1C()
{
  uint64_t v1 = (void *)v0[65];
  uint64_t v2 = v0[20];
  sub_10000A240((void **)5);
  uint64_t v3 = *(void *)(v2 + 16);
  v0[68] = v3;
  uint64_t v4 = *(void *)(v2 + 24);
  v0[69] = v4;
  swift_bridgeObjectRetain(v4);
  id v5 = [v1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v5);

  id v6 = [v1 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  uint64_t v7 = (void *)swift_task_alloc(dword_1000CE934);
  v0[70] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10006B344;
  return sub_1000241DC(v3, v4, 0);
}

uint64_t sub_10006B010()
{
  uint64_t v1 = *(void **)(v0 + 448);

  uint64_t v2 = *(void *)(v0 + 536);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v6 = 138412290;
    swift_errorRetain(v2);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v0 + 112) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Handoff] Failed to join conversation due to %@.", v6, 0xCu);
    uint64_t v9 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v10 = *(void *)(v0 + 408);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 344);

  sub_100005318(v10, v11, (uint64_t *)&unk_1000CE420);
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v13);
  uint64_t v15 = *(void *)(v0 + 392);
  if (v14 == 1)
  {
    sub_10000BFC8(v15, (uint64_t *)&unk_1000CE420);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v15, v18);
    id v20 = *(id *)(v19 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v20 leaveConversationWithUUID:isa];

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  }

  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 392);
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v28 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 352);
  uint64_t v32 = *(void *)(v0 + 328);
  uint64_t v33 = *(void *)(v0 + 320);
  uint64_t v34 = *(void *)(v0 + 312);
  uint64_t v35 = *(void *)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 296);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v38 = *(void *)(v0 + 264);
  uint64_t v39 = *(void *)(v0 + 240);
  uint64_t v40 = *(void *)(v0 + 216);
  sub_100097488();
  sub_10000ACA0();
  swift_willThrow(v29);
  sub_10000BFC8(v22, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006B344(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 560LL);
  v3[71] = a1;
  v3[72] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[69];
    id v6 = (void (*)(uint64_t, uint64_t))v3[64];
    uint64_t v7 = v3[52];
    uint64_t v9 = v3[45];
    uint64_t v8 = v3[46];
    uint64_t v10 = v3[42];
    swift_bridgeObjectRelease(v5);
    v6(v9, v10);
    v6(v8, v10);
    uint64_t v11 = sub_10006C078;
    uint64_t v12 = v7;
  }

  else
  {
    uint64_t v12 = v3[52];
    uint64_t v11 = sub_10006B3F8;
  }

  return swift_task_switch(v11, v12, 0LL);
}

uint64_t sub_10006B3F8()
{
  id v1 = [*(id *)(v0 + 520) state];
  uint64_t v2 = *(void *)(v0 + 216);
  if (v1 == (id)3)
  {
    Date.init()(3LL);
    uint64_t v3 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 0LL, 1LL, v3);
  }

  else
  {
    uint64_t v4 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v2, 1LL, 1LL, v4);
  }

  uint64_t v5 = *(void *)(v0 + 568);
  uint64_t v6 = *(void *)(v0 + 552);
  uint64_t v7 = *(void *)(v0 + 544);
  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 344);
  uint64_t v12 = *(void *)(v0 + 216);
  uint64_t v13 = *(void **)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 136);
  *(_BYTE *)uint64_t v14 = *(_BYTE *)(v0 + 592) & 1;
  *(void *)(v14 + 8) = v7;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v15 = (int *)type metadata accessor for HandoffInfo(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v16(v14 + v15[6], v9, v10);
  v16(v14 + v15[7], v8, v10);
  *(void *)(v14 + v15[8]) = v5;
  *(void *)(v14 + v15[9]) = v13;
  sub_1000192A4(v12, v14 + v15[10], &qword_1000CE5B0);
  uint64_t v17 = qword_1000CD638;
  id v18 = v13;
  if (v17 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10006B574, qword_1000D35C8, 0LL);
}

uint64_t sub_10006B574()
{
  uint64_t v1 = *(void *)(v0 + 416);
  *(void *)(v0 + 584) = sub_10000CE6C();
  return swift_task_switch(sub_10006B5B8, v1, 0LL);
}

uint64_t sub_10006B5B8()
{
  uint64_t v1 = *(void **)(v0 + 584);
  uint64_t v2 = *(void **)(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 360);
  uint64_t v11 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 320);
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 216);

  sub_10000BFC8(v4, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006B6FC()
{
  uint64_t v1 = *(void *)(v0 + 456);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 112) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v5 + 4, v5 + 12);
    uint64_t *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Handoff] Failed to join conversation due to %@.", v5, 0xCu);
    uint64_t v8 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 344);

  sub_100005318(v9, v10, (uint64_t *)&unk_1000CE420);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v12);
  uint64_t v14 = *(void *)(v0 + 392);
  if (v13 == 1)
  {
    sub_10000BFC8(v14, (uint64_t *)&unk_1000CE420);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v18 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v14, v17);
    id v19 = *(id *)(v18 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v19 leaveConversationWithUUID:isa];

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  }

  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 368);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 352);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 320);
  uint64_t v33 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 304);
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(v0 + 240);
  uint64_t v39 = *(void *)(v0 + 216);
  sub_100097488();
  sub_10000ACA0();
  swift_willThrow(v28);
  sub_10000BFC8(v21, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BA20()
{
  uint64_t v1 = *(void *)(v0 + 472);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 112) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v5 + 4, v5 + 12);
    uint64_t *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Handoff] Failed to join conversation due to %@.", v5, 0xCu);
    uint64_t v8 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 344);

  sub_100005318(v9, v10, (uint64_t *)&unk_1000CE420);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v12);
  uint64_t v14 = *(void *)(v0 + 392);
  if (v13 == 1)
  {
    sub_10000BFC8(v14, (uint64_t *)&unk_1000CE420);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v18 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v14, v17);
    id v19 = *(id *)(v18 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v19 leaveConversationWithUUID:isa];

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  }

  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 368);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 352);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 320);
  uint64_t v33 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 304);
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(v0 + 240);
  uint64_t v39 = *(void *)(v0 + 216);
  sub_100097488();
  sub_10000ACA0();
  swift_willThrow(v28);
  sub_10000BFC8(v21, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006BD4C()
{
  uint64_t v1 = *(void *)(v0 + 496);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 112) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v5 + 4, v5 + 12);
    uint64_t *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Handoff] Failed to join conversation due to %@.", v5, 0xCu);
    uint64_t v8 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 344);

  sub_100005318(v9, v10, (uint64_t *)&unk_1000CE420);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v12);
  uint64_t v14 = *(void *)(v0 + 392);
  if (v13 == 1)
  {
    sub_10000BFC8(v14, (uint64_t *)&unk_1000CE420);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v18 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v14, v17);
    id v19 = *(id *)(v18 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v19 leaveConversationWithUUID:isa];

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  }

  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 368);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 352);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v32 = *(void *)(v0 + 320);
  uint64_t v33 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 304);
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(v0 + 240);
  uint64_t v39 = *(void *)(v0 + 216);
  sub_100097488();
  sub_10000ACA0();
  swift_willThrow(v28);
  sub_10000BFC8(v21, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C078()
{
  uint64_t v1 = *(void **)(v0 + 448);

  uint64_t v2 = *(void *)(v0 + 576);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v2);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(void *)(v0 + 112) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Handoff] Failed to join conversation due to %@.", v6, 0xCu);
    uint64_t v9 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  uint64_t v10 = *(void *)(v0 + 408);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 344);

  sub_100005318(v10, v11, (uint64_t *)&unk_1000CE420);
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v13);
  uint64_t v15 = *(void *)(v0 + 392);
  if (v14 == 1)
  {
    sub_10000BFC8(v15, (uint64_t *)&unk_1000CE420);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v15, v18);
    id v20 = *(id *)(v19 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v20 leaveConversationWithUUID:isa];

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  }

  uint64_t v23 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 392);
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v28 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 352);
  uint64_t v32 = *(void *)(v0 + 328);
  uint64_t v33 = *(void *)(v0 + 320);
  uint64_t v34 = *(void *)(v0 + 312);
  uint64_t v35 = *(void *)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 296);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v38 = *(void *)(v0 + 264);
  uint64_t v39 = *(void *)(v0 + 240);
  uint64_t v40 = *(void *)(v0 + 216);
  sub_100097488();
  sub_10000ACA0();
  swift_willThrow(v29);
  sub_10000BFC8(v22, (uint64_t *)&unk_1000CE420);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  void v5[5] = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[9] = v7;
  v5[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NCProtoPullLagunaSessionToTVResponse(0LL);
  v5[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[12] = v9;
  void v5[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000360C(&qword_1000CFE58);
  v5[14] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = qword_1000D35E0;
  v5[15] = qword_1000D35E0;
  return swift_task_switch(sub_10006C48C, v11, 0LL);
}

uint64_t sub_10006C48C()
{
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_10006C500, qword_1000D35C8, 0LL);
}

uint64_t sub_10006C500()
{
  uint64_t v1 = *(void *)(v0 + 120);
  sub_1000246D0(*(void **)(v0 + 40));
  *(void *)(v0 + 136) = v2;
  return swift_task_switch(sub_10006C544, v1, 0LL);
}

uint64_t sub_10006C544()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(*(void *)(v0 + 32) + OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos);
    uint64_t v5 = swift_task_alloc(32LL);
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
    swift_bridgeObjectRetain(v4);
    sub_10003A81C((uint64_t (*)(char *))sub_100082514, v4, v2);
    swift_bridgeObjectRelease(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v2, 1LL, v6);
    sub_10000BFC8(v2, &qword_1000CFE58);
    if (v7 != 1)
    {
      *(void *)(v0 + 144) = *(void *)(v1 + 32);
      uint64_t v34 = *(void *)(v1 + 40);
      uint64_t v35 = qword_1000D35E0;
      *(void *)(v0 + 152) = v34;
      *(void *)(v0 + 160) = v35;
      swift_bridgeObjectRetain(v34);
      return swift_task_switch(sub_10006C9EC, v35, 0LL);
    }

    uint64_t v43 = (uint64_t *)(v0 + 24);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v12, (uint64_t)qword_1000D3620);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v11, v10);
    int v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 64);
    if (v16)
    {
      uint64_t v41 = *(void *)(v0 + 72);
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v42;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v20 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v18, v20);
      unint64_t v23 = v22;
      *uint64_t v43 = sub_10009BE3C(v21, v22, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v0 + 32, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v17, v18);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[Handoff][PullToTV] Failed to find nearby conversation %s.",  v19,  0xCu);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 72) + 8LL))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    }

    id v38 = (id)TUMakeNeighborhoodConduitError(2LL, 0LL);
    swift_willThrow(v38);
    swift_release(v1);
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v24 = *(void **)(v0 + 40);
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v25, (uint64_t)qword_1000D3620);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void **)(v0 + 40);
    if (v28)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v30 = 138412290;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = v29;
      id v32 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v30 + 4, v30 + 12);
      void *v31 = v29;

      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "[Handoff][PullToTV] Failed to find nearby device %@.",  v30,  0xCu);
      uint64_t v33 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v31, 1LL, v33);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
    }

    id v37 = (id)TUMakeNeighborhoodConduitError(6LL, 0LL);
    swift_willThrow(v37);
  }

  uint64_t v39 = *(void *)(v0 + 104);
  uint64_t v40 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C9EC()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = (void *)swift_task_alloc(64LL);
  v0[21] = v6;
  _OWORD v6[2] = v5;
  void v6[3] = v4;
  v6[4] = v3;
  v6[5] = v2;
  v6[6] = v1;
  int v7 = (void *)swift_task_alloc(48LL);
  v0[22] = v7;
  v7[2] = v4;
  _OWORD v7[3] = v5;
  v7[4] = v2;
  v7[5] = v1;
  uint64_t v8 = qword_1000D35E0;
  uint64_t v10 = sub_10001CFD8( &qword_1000CF800,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[23] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10006CAD8;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[13],  &unk_1000CFE98,  v6,  sub_100082888,  v7,  v8,  v10,  v0[11]);
}

uint64_t sub_10006CAD8()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[20];
    uint64_t v5 = sub_10006CC48;
  }

  else
  {
    uint64_t v7 = v2[21];
    uint64_t v6 = v2[22];
    uint64_t v8 = v2[20];
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v5 = sub_10006CB54;
    uint64_t v4 = v8;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10006CB54()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  swift_bridgeObjectRelease(v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10006CBB4, v1, 0LL);
}

uint64_t sub_10006CBB4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  static Task<>.checkCancellation()();
  uint64_t v2 = *(void *)(v0 + 136);
  if (v1)
  {
    swift_release(v2);
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 80);
    swift_release(v2);
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CC48()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  swift_task_dealloc(v0[22]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10006CC90, v2, 0LL);
}

uint64_t sub_10006CC90()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRelease(*(void *)(v0 + 152));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CCF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = a8;
  *(void *)(v8 + 176) = v20;
  *(void *)(v8 + 152) = a6;
  *(void *)(v8 + 160) = a7;
  *(_BYTE *)(v8 + 432) = a5;
  *(void *)(v8 + 136) = a3;
  *(void *)(v8 + 144) = a4;
  *(void *)(v8 + 120) = a1;
  *(void *)(v8 + 128) = a2;
  uint64_t v9 = sub_10000360C(&qword_1000CFCC8);
  *(void *)(v8 + 184) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = ((uint64_t (*)(void))type metadata accessor for NCProtoDeviceTokenRequest.ConversationHandoffType)(0LL);
  *(void *)(v8 + 192) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + sub_10001D15C(v0 + 200) = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 208) = swift_task_alloc(v12);
  *(void *)(v8 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for NCProtoJoinEvent(0LL);
  *(void *)(v8 + 224) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 232) = v14;
  *(void *)(v8 + 240) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for NCProtoDeviceTokenResponse(0LL);
  *(void *)(v8 + 248) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v8 + 256) = v16;
  *(void *)(v8 + 264) = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000360C(&qword_1000CF740);
  *(void *)(v8 + 272) = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v18 = qword_1000D35E0;
  *(void *)(v8 + 280) = qword_1000D35E0;
  return swift_task_switch(sub_10006CE40, v18, 0LL);
}

uint64_t sub_10006CE40()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 288) = sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 136);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 112) = sub_10009BE3C(v8, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Handoff][Push] Generating pseudonym for %s.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 136), 2LL);
  }

  char v11 = *(_BYTE *)(v0 + 432);
  unint64_t v12 = (void *)swift_task_alloc(dword_1000CFCD4);
  *(void *)(v0 + 296) = v12;
  void *v12 = v0;
  v12[1] = sub_10006D024;
  return sub_10005DEB0(*(void *)(v0 + 128), *(void *)(v0 + 136), v11 & 1);
}

uint64_t sub_10006D024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*v3 + 296);
  uint64_t v5 = *v3;
  *(void *)(v5 + 304) = a1;
  *(void *)(v5 + 312) = a2;
  *(void *)(v5 + 320) = v2;
  swift_task_dealloc(v4);
  if (!v2) {
    return swift_task_switch(sub_10006D0F0, *(void *)(v5 + 280), 0LL);
  }
  uint64_t v6 = *(void *)(v5 + 264);
  uint64_t v7 = *(void *)(v5 + 240);
  uint64_t v9 = *(void *)(v5 + 208);
  uint64_t v8 = *(void *)(v5 + 216);
  uint64_t v10 = *(void *)(v5 + 184);
  swift_task_dealloc(*(void *)(v5 + 272));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10006D0F0()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 152);
  swift_beginAccess(v4 + 16, v0 + 72, 1LL, 0LL);
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v6 = swift_bridgeObjectRelease(v5);
  static Task<>.checkCancellation()(v6);
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 312));
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v11 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v13 = swift_bridgeObjectRetain_n(*(void *)(v0 + 136), 2LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    uint64_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, (os_log_type_t)v15);
    unint64_t v17 = *(void *)(v0 + 136);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 128);
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain(v17);
      *(void *)(v0 + 104) = sub_10009BE3C(v18, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(v17, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v15,  "[Handoff][Push] Generating association voucher for %s.",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 136), 2LL);
    }

    char v21 = NCProtoDeviceTokenRequest.hasMemberAssociationPrimaryInfo.getter();
    uint64_t v22 = *(void *)(v0 + 272);
    if ((v21 & 1) != 0)
    {
      NCProtoDeviceTokenRequest.memberAssociationPrimaryInfo.getter();
      uint64_t v23 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 0LL, 1LL, v23);
    }

    else
    {
      uint64_t v24 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v22, 1LL, 1LL, v24);
    }

    char v25 = *(_BYTE *)(v0 + 432);
    uint64_t v26 = (void *)swift_task_alloc(dword_1000CFCDC);
    *(void *)(v0 + 328) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_10006D39C;
    return sub_1000684F8(*(void *)(v0 + 272), *(void *)(v0 + 304), *(void *)(v0 + 312), v25 & 1);
  }

uint64_t sub_10006D39C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = (*v2)[41];
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[39];
    uint64_t v6 = v3[35];
    sub_10000BFC8(v3[34], &qword_1000CF740);
    swift_bridgeObjectRelease(v5);
    uint64_t v7 = sub_10006DC70;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v3[35];
    sub_10000BFC8(v3[34], &qword_1000CF740);
    uint64_t v7 = sub_10006D440;
    uint64_t v8 = v9;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10006D440(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 344);
  uint64_t v3 = static Task<>.checkCancellation()(a1);
  if (v2)
  {
    uint64_t v4 = *(void **)(v1 + 336);
    swift_bridgeObjectRelease(*(void *)(v1 + 312));

    uint64_t v5 = *(void *)(v1 + 264);
    uint64_t v6 = *(void *)(v1 + 240);
    uint64_t v8 = *(void *)(v1 + 208);
    uint64_t v7 = *(void *)(v1 + 216);
    uint64_t v9 = *(void *)(v1 + 184);
    swift_task_dealloc(*(void *)(v1 + 272));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  else
  {
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "[Handoff][Push] Returning device token response to phone.",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    uint64_t v14 = *(void *)(v1 + 336);
    __int128 v29 = *(_OWORD *)(v1 + 304);
    uint64_t v16 = *(void *)(v1 + 256);
    uint64_t v15 = *(void *)(v1 + 264);
    uint64_t v17 = *(void *)(v1 + 248);

    uint64_t v18 = swift_task_alloc(48LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = v29;
    *(void *)(v18 + 32) = v14;
    uint64_t v19 = sub_10001CFD8( &qword_1000CFCE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeviceTokenResponse,  (uint64_t)&protocol conformance descriptor for NCProtoDeviceTokenResponse);
    static Message.with(_:)(sub_100082084, v18, v17, v19);
    swift_task_dealloc(v18);
    PassthroughSubject.send(_:)(v15);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    char v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[Handoff][Push] Waiting for JoinEvent.", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    uint64_t v24 = *(void *)(v1 + 144);

    *(void *)(v1 + 96) = *(void *)(v24 + OBJC_IVAR___CSDNeighborhoodActivityConduit_joinEventSubject);
    uint64_t v25 = sub_10000360C(&qword_1000CF858);
    uint64_t v26 = sub_100018F4C( &qword_1000CFCE8,  &qword_1000CF858,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    uint64_t v27 = Publisher.eraseToAnyPublisher()(v25, v26);
    *(void *)(v1 + 352) = v27;
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000CFCF0 + dword_1000CFCF0);
    BOOL v28 = (void *)swift_task_alloc(unk_1000CFCF4);
    *(void *)(v1 + 360) = v28;
    *BOOL v28 = v1;
    v28[1] = sub_10006D718;
    return v30(*(void *)(v1 + 240), v27);
  }

uint64_t sub_10006D718()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 368LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[44];
  if (v0)
  {
    uint64_t v5 = v2[39];
    uint64_t v6 = v2[35];
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    uint64_t v7 = sub_10006DCE8;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v2[35];
    swift_release(v4);
    uint64_t v7 = sub_10006D7A0;
    uint64_t v8 = v9;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10006D7A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 368);
  uint64_t v3 = static Task<>.checkCancellation()(a1);
  if (v2)
  {
    uint64_t v4 = *(void **)(v1 + 336);
    uint64_t v5 = *(void *)(v1 + 312);
    (*(void (**)(void, void))(*(void *)(v1 + 232) + 8LL))(*(void *)(v1 + 240), *(void *)(v1 + 224));
    swift_bridgeObjectRelease(v5);

    uint64_t v6 = *(void *)(v1 + 264);
    uint64_t v7 = *(void *)(v1 + 240);
    uint64_t v9 = *(void *)(v1 + 208);
    uint64_t v8 = *(void *)(v1 + 216);
    uint64_t v10 = *(void *)(v1 + 184);
    swift_task_dealloc(*(void *)(v1 + 272));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v13 = *(void *)(v1 + 208);
  uint64_t v12 = *(void *)(v1 + 216);
  uint64_t v14 = *(void *)(v1 + 192);
  uint64_t v15 = *(void *)(v1 + 200);
  uint64_t v16 = NCProtoJoinEvent.identifierHash.getter(v3);
  uint64_t v18 = v17;
  *(void *)(v1 + 376) = v16;
  *(void *)(v1 + 384) = v17;
  NCProtoDeviceTokenRequest.conversationHandoffType.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 88))(v13, v14);
  if (v19 != enum case for NCProtoDeviceTokenRequest.ConversationHandoffType.unknown(_:))
  {
    if (v19 == enum case for NCProtoDeviceTokenRequest.ConversationHandoffType.pull(_:))
    {
      uint64_t v20 = 1LL;
      goto LABEL_13;
    }

    if (v19 == enum case for NCProtoDeviceTokenRequest.ConversationHandoffType.push(_:))
    {
      uint64_t v20 = 2LL;
      goto LABEL_13;
    }

    if (v19 == enum case for NCProtoDeviceTokenRequest.ConversationHandoffType.incoming(_:))
    {
      uint64_t v20 = 3LL;
      goto LABEL_13;
    }

    if (v19 == enum case for NCProtoDeviceTokenRequest.ConversationHandoffType.outgoing(_:))
    {
      uint64_t v20 = 4LL;
      goto LABEL_13;
    }

    (*(void (**)(void, void))(*(void *)(v1 + 200) + 8LL))(*(void *)(v1 + 208), *(void *)(v1 + 192));
  }

  uint64_t v20 = 0LL;
LABEL_13:
  (*(void (**)(void, void))(*(void *)(v1 + 200) + 8LL))(*(void *)(v1 + 216), *(void *)(v1 + 192));
  id v21 = [objc_allocWithZone(TUNeighborhoodHandoffContext) initWithHandoffType:v20];
  *(void *)(v1 + 392) = v21;
  uint64_t v22 = NCProtoJoinEvent.policyInfos.getter();
  *(void *)(v1 + 400) = v22;
  char v23 = NCProtoDeviceTokenRequest.hasCallState.getter();
  uint64_t v24 = *(void *)(v1 + 184);
  if ((v23 & 1) != 0)
  {
    NCProtoDeviceTokenRequest.callState.getter();
    uint64_t v25 = type metadata accessor for NCProtoCallState(0LL);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))( v24,  0LL,  1LL,  v25);
  }

  else
  {
    uint64_t v27 = type metadata accessor for NCProtoCallState(0LL);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))( v24,  1LL,  1LL,  v27);
  }

  NCProtoDeviceTokenRequest.shouldLaunchFaceTime.getter(v26);
  uint64_t v28 = NCProtoJoinEvent.userAccountInfoData.getter();
  unint64_t v30 = v29;
  sub_10001F004(v28, v29, v1 + 16);
  sub_10000BE18(v28, v30);
  id v31 = sub_10000FC68(v1 + 16);
  sub_100081528(v1 + 16);
  if (v31)
  {
    id v32 = [v31 identifier];

    static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v34 = v33;
  }

  else
  {
    uint64_t v34 = 0LL;
  }

  *(void *)(v1 + 408) = v34;
  char v35 = *(_BYTE *)(v1 + 432);
  uint64_t v36 = (void *)swift_task_alloc(dword_1000CFCFC);
  *(void *)(v1 + 4swift_weakDestroy(v0 + 16) = v36;
  void *v36 = v1;
  v36[1] = sub_10006DB00;
  return sub_10006955C( *(void *)(v1 + 120),  v16,  v18,  *(void *)(v1 + 176),  v35 & 1,  (uint64_t)v21,  v22,  *(void *)(v1 + 304));
}

uint64_t sub_10006DB00()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[52];
  (*v1)[53] = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[50];
  uint64_t v4 = v2[51];
  unint64_t v6 = v2[48];
  uint64_t v7 = (void *)v2[49];
  uint64_t v8 = v2[47];
  uint64_t v9 = v2[39];
  uint64_t v10 = v2[35];
  sub_10000BFC8(v2[23], &qword_1000CFCC8);
  swift_bridgeObjectRelease(v5);

  swift_bridgeObjectRelease(v4);
  sub_10000BE18(v8, v6);
  swift_bridgeObjectRelease(v9);
  if (v0) {
    uint64_t v11 = sub_10006DD68;
  }
  else {
    uint64_t v11 = sub_10006DBD0;
  }
  return swift_task_switch(v11, v10, 0LL);
}

uint64_t sub_10006DBD0()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 184);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DC70()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DCE8()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006DD68()
{
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006DE00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    id v7 = a4;
    id v8 = [v7 messagingData];
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    NCProtoDeviceTokenResponse.associationVoucherData.setter(v9, v11);
  }

uint64_t sub_10006DE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  void v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = sub_10000360C(&qword_1000CFD18);
  void v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C(&qword_1000CFD20);
  v5[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v5[13] = v9;
  v5[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v10 = qword_1000D35E0;
  v5[15] = qword_1000D35E0;
  return swift_task_switch(sub_10006DF60, v10, 0LL);
}

uint64_t sub_10006DF60()
{
  uint64_t v1 = v0[11];
  uint64_t v23 = v0[12];
  uint64_t v24 = v0[13];
  uint64_t v21 = v0[14];
  uint64_t v22 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v19 = v0[7];
  uint64_t v20 = v0[9];
  uint64_t v3 = v0[4];
  unint64_t v17 = v0[5];
  uint64_t v18 = v0[6];
  v0[16] = sub_100089240(5);
  v0[2] = *(void *)(*(void *)(v2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationPublishers)
                    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22ConversationPublishers_activeConversationsSubject);
  uint64_t v4 = sub_10000360C(&qword_1000CFD28);
  uint64_t v5 = sub_100018F4C( &qword_1000CFD30,  &qword_1000CFD28,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()(v4, v5);
  v0[3] = v6;
  uint64_t v7 = static Subscribers.Demand.unlimited.getter();
  uint64_t v8 = sub_10000360C(&qword_1000CFD38);
  uint64_t v9 = sub_10000360C(&qword_1000CFD40);
  uint64_t v10 = sub_100018F4C( &qword_1000CFD48,  &qword_1000CFD38,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v11 = sub_100018F4C( &qword_1000CFD50,  &qword_1000CFD40,  (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v7, sub_10006F058, 0LL, v8, v9, v10, v11);
  swift_release(v6);
  uint64_t v12 = (void *)swift_allocObject(&unk_1000C52E8, 48LL, 7LL);
  v12[2] = v3;
  v12[3] = v17;
  v12[4] = v18;
  v12[5] = v19;
  sub_1000109D4(v3, v17);
  uint64_t v13 = sub_100018F4C( &qword_1000CFD58,  &qword_1000CFD18,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  swift_bridgeObjectRetain(v19);
  Publisher.filter(_:)(sub_1000821E8, v12, v20, v13);
  swift_release(v12);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v20);
  uint64_t v14 = sub_100018F4C( &qword_1000CFD60,  &qword_1000CFD20,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v0[17] = Publisher.eraseToAnyPublisher()(v23, v14);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v23);
  uint64_t v15 = qword_1000D35E0;
  v0[18] = qword_1000D35E0;
  return swift_task_switch(sub_10006E1D0, v15, 0LL);
}

uint64_t sub_10006E1D0()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CF390 + dword_1000CF390);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CF394);
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006E240;
  return v3(*(void *)(v0 + 136));
}

uint64_t sub_10006E240(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 152LL);
  *(void *)(*(void *)v2 + 16Hasher.init(_seed:)(v1, 0LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[15];
    uint64_t v7 = sub_10006E360;
  }

  else
  {
    uint64_t v6 = v4[18];
    v4[21] = a1;
    uint64_t v7 = sub_10006E2B8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10006E2B8()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 136));
  return swift_task_switch(sub_10006E2F8, v1, 0LL);
}

uint64_t sub_10006E2F8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_100089490(5, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 168));
}

uint64_t sub_10006E360()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 136));
  sub_100089490(5, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E3C8(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[8] = v5;
  void v2[9] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000360C(&qword_1000CFC28);
  v2[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C((uint64_t *)&unk_1000CFC30);
  v2[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v10 = qword_1000D35E0;
  v2[16] = qword_1000D35E0;
  return swift_task_switch(sub_10006E4B4, v10, 0LL);
}

uint64_t sub_10006E4B4()
{
  uint64_t v1 = v0[12];
  uint64_t v24 = v0[13];
  uint64_t v25 = v0[14];
  uint64_t v22 = v0[15];
  uint64_t v23 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v20 = v0[8];
  uint64_t v21 = v0[10];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v19 = v0[4];
  v0[17] = sub_100089240(1);
  v0[2] = *(void *)(*(void *)(v4 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationPublishers)
                    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22ConversationPublishers_joinedConversationSubject);
  uint64_t v6 = sub_10000360C(&qword_1000CF910);
  uint64_t v7 = sub_100018F4C( &qword_1000CF918,  &qword_1000CF910,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()(v6, v7);
  v0[3] = v8;
  uint64_t v9 = sub_10000360C(&qword_1000CF920);
  uint64_t v10 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE790, &OBJC_CLASS___TUConversation_ptr);
  uint64_t v11 = sub_100018F4C( &qword_1000CF928,  &qword_1000CF920,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_100082EF0, 0LL, v9, v10, v11);
  swift_release(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v19, v5);
  uint64_t v12 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1000C5298, v13 + v20, v12 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v14 + v13, v2, v5);
  uint64_t v15 = sub_100018F4C( &qword_1000CFC40,  &qword_1000CFC28,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  Publisher.filter(_:)(sub_100081AAC, v14, v21, v15);
  swift_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v1, v21);
  uint64_t v16 = sub_100018F4C( &qword_1000CFC48,  (uint64_t *)&unk_1000CFC30,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v0[18] = Publisher.eraseToAnyPublisher()(v24, v16);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
  uint64_t v17 = qword_1000D35E0;
  v0[19] = qword_1000D35E0;
  return swift_task_switch(sub_10006E714, v17, 0LL);
}

uint64_t sub_10006E714()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CF390 + dword_1000CF390);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CF394);
  *(void *)(v0 + 160) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006E784;
  return v3(*(void *)(v0 + 144));
}

uint64_t sub_10006E784(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 160LL);
  *(void *)(*(void *)v2 + 168LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[16];
    uint64_t v7 = sub_10006E8B0;
  }

  else
  {
    uint64_t v6 = v4[19];
    v4[22] = a1;
    uint64_t v7 = sub_10006E7FC;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10006E7FC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release(*(void *)(v0 + 144));
  return swift_task_switch(sub_10006E83C, v1, 0LL);
}

uint64_t sub_10006E83C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  sub_100089490(1, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 176));
}

uint64_t sub_10006E8B0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  swift_release(*(void *)(v0 + 144));
  sub_100089490(1, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006E924(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  id v9 = [objc_allocWithZone(TUJoinConversationRequest) initWithConversation:a1 originatingUIType:44];
  [v9 setVideoEnabled:a2 & 1];
  [v9 setUplinkMuted:(a3 & 1) == 0];
  [v9 setAvMode:a4];
  id v10 =  [*(id *)(a5 + OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter) joinConversationWithConversationRequest:v9];
}

uint64_t sub_10006E9F8(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[8] = v5;
  void v2[9] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000360C(&qword_1000CFD18);
  v2[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[11] = v7;
  v2[12] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000360C(&qword_1000CFD20);
  v2[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[14] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v10);
  v2[16] = swift_task_alloc(v10);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = qword_1000D35E0;
  v2[17] = qword_1000D35E0;
  return swift_task_switch(sub_10006EAF4, v11, 0LL);
}

uint64_t sub_10006EAF4()
{
  uint64_t v1 = v0[13];
  uint64_t v28 = v0[16];
  uint64_t v29 = v0[14];
  uint64_t v26 = v0[15];
  uint64_t v27 = v0[11];
  uint64_t v2 = v0[7];
  uint64_t v24 = v0[8];
  uint64_t v25 = v0[10];
  uint64_t v3 = v0[5];
  uint64_t v22 = v0[6];
  uint64_t v23 = v0[9];
  uint64_t v20 = v0[12];
  uint64_t v21 = v0[4];
  v0[18] = sub_100089240(1);
  v0[2] = *(void *)(*(void *)(v3 + OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationPublishers)
                    + OBJC_IVAR____TtC44com_apple_NeighborhoodActivityConduitService22ConversationPublishers_activeConversationsSubject);
  uint64_t v4 = sub_10000360C(&qword_1000CFD28);
  uint64_t v5 = sub_100018F4C( &qword_1000CFD30,  &qword_1000CFD28,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()(v4, v5);
  v0[3] = v6;
  uint64_t v7 = static Subscribers.Demand.unlimited.getter();
  uint64_t v8 = sub_10000360C(&qword_1000CFD38);
  uint64_t v9 = sub_10000360C(&qword_1000CFD40);
  uint64_t v10 = sub_100018F4C( &qword_1000CFD48,  &qword_1000CFD38,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v11 = sub_100018F4C( &qword_1000CFD50,  &qword_1000CFD40,  (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v7, sub_10006F058, 0LL, v8, v9, v10, v11);
  swift_release(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v23, v21, v22);
  uint64_t v12 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1000C52C0, v13 + v24, v12 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v14 + v13, v23, v22);
  uint64_t v15 = sub_100018F4C( &qword_1000CFD58,  &qword_1000CFD18,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  Publisher.filter(_:)(sub_100081AAC, v14, v25, v15);
  swift_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v25);
  Publishers.Filter.filter(_:)(sub_10006F05C, 0LL, v1);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v16(v26, v1);
  uint64_t v17 = sub_100018F4C( &qword_1000CFD60,  &qword_1000CFD20,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v0[19] = Publisher.eraseToAnyPublisher()(v1, v17);
  v16(v28, v1);
  uint64_t v18 = qword_1000D35E0;
  v0[20] = qword_1000D35E0;
  return swift_task_switch(sub_10006EDB4, v18, 0LL);
}

uint64_t sub_10006EDB4()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))((char *)&dword_1000CF390 + dword_1000CF390);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CF394);
  *(void *)(v0 + 168) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006EE24;
  return v3(*(void *)(v0 + 152));
}

uint64_t sub_10006EE24(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 168LL);
  *(void *)(*(void *)v2 + 176LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[17];
    uint64_t v7 = sub_10006EF60;
  }

  else
  {
    uint64_t v6 = v4[20];
    v4[23] = a1;
    uint64_t v7 = sub_10006EE9C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10006EE9C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_release(*(void *)(v0 + 152));
  return swift_task_switch(sub_10006EEDC, v1, 0LL);
}

uint64_t sub_10006EEDC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  sub_100089490(1, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 184));
}

uint64_t sub_10006EF60()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  swift_release(*(void *)(v0 + 152));
  sub_100089490(1, v1);
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006EFE4()
{
  uint64_t v0 = sub_10000360C(&qword_1000CFD70);
  uint64_t v1 = sub_100018F4C(&qword_1000CFD68, &qword_1000CFD70, (uint64_t)&protocol conformance descriptor for Set<A>);
  return Sequence.publisher.getter(v0, v1);
}

BOOL sub_10006F05C(id *a1)
{
  id v1 = *a1;
  return [*a1 state] == (id)2 || objc_msgSend(v1, "state") == (id)3;
}

uint64_t sub_10006F0AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[9] = a8;
  v8[10] = v13;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  void v8[3] = a2;
  v8[4] = a3;
  _OWORD v8[2] = a1;
  uint64_t v9 = type metadata accessor for NCProtoAddMemberRequest(0LL);
  v8[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[12] = v10;
  v8[13] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v11 = qword_1000D35E0;
  v8[14] = qword_1000D35E0;
  return swift_task_switch(sub_10006F150, v11, 0LL);
}

uint64_t sub_10006F150()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  __int128 v8 = *(_OWORD *)(v0 + 32);
  __int128 v9 = *(_OWORD *)(v0 + 48);
  uint64_t v4 = swift_task_alloc(64LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = v8;
  *(_OWORD *)(v4 + 32) = v9;
  *(void *)(v4 + 48) = v3;
  uint64_t v5 = sub_10001CFD8( &qword_1000CF568,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddMemberRequest,  (uint64_t)&protocol conformance descriptor for NCProtoAddMemberRequest);
  static Message.with(_:)(sub_100082DC0, v4, v2, v5);
  swift_task_dealloc(v4);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  *(void *)(v0 + 120) = qword_1000D35C8;
  uint64_t v6 = (void *)swift_task_alloc(dword_1000CF564);
  *(void *)(v0 + 128) = v6;
  void *v6 = v0;
  v6[1] = sub_10006F290;
  return sub_10003D01C(*(void *)(v0 + 16), 2, *(void *)(v0 + 104), *(void *)(v0 + 72), v1, 0);
}

uint64_t sub_10006F290()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_10006F33C;
  }
  else {
    uint64_t v4 = sub_10006F2F4;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_10006F2F4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 96) + 8LL))(v1, *(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006F33C()
{
  uint64_t v1 = v0[14];
  (*(void (**)(void, void))(v0[12] + 8LL))(v0[13], v0[11]);
  return swift_task_switch(sub_10006F380, v1, 0LL);
}

uint64_t sub_10006F380()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006F3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v25 = a6;
  uint64_t v9 = sub_10000360C(&qword_1000CFF00);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NCProtoAddMemberRequest.NearbyConversationPullContext(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = UUID.uuidString.getter(v14);
  NCProtoAddMemberRequest.conversationIdentifier.setter(v17);
  __n128 v18 = swift_bridgeObjectRetain(a4);
  NCProtoAddMemberRequest.memberToken.setter(a3, a4, v18);
  NCProtoAddMemberRequest.NearbyConversationPullContext.init(rawValue:)(a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v13 + 104))( v16,  enum case for NCProtoAddMemberRequest.NearbyConversationPullContext.unknown(_:),  v12);
    sub_10000BFC8((uint64_t)v11, &qword_1000CFF00);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  }

  NCProtoAddMemberRequest.context.setter(v16);
  if (v25)
  {
    id v19 = v25;
    id v20 = [v19 messagingData];
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    NCProtoAddMemberRequest.associationVoucherData.setter(v21, v23);
  }

uint64_t sub_10006F568(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v7 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NCProtoCancelAddMemberEvent(0LL);
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v51 = v11;
  uint64_t v52 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v53 = (char *)&v46 - v12;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v17, (uint64_t)qword_1000D3620);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  id v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = a4;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = a2;
    uint64_t v24 = v23;
    v58[0] = v23;
    uint64_t v48 = a1;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v47 = v22 + 4;
    uint64_t v25 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v13, v25);
    unint64_t v28 = v27;
    uint64_t v57 = sub_10009BE3C(v26, v27, v58);
    a1 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v47, v22 + 12);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "[Handoff][PullExpanse] Cancelling add member request for %s.",  v22,  0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v29 = v24;
    a2 = v49;
    swift_slowDealloc(v29, -1LL, -1LL);
    unint64_t v30 = v22;
    a4 = v50;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  __chkstk_darwin(v31);
  *(&v46 - 2) = a1;
  uint64_t v32 = sub_10001CFD8( &qword_1000CFE48,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
  uint64_t v33 = v53;
  static Message.with(_:)(sub_1000829FC, &v46 - 4, v9, v32);
  uint64_t v34 = type metadata accessor for TaskPriority(0LL);
  uint64_t v35 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v54, 1LL, 1LL, v34);
  uint64_t v36 = v55;
  id v37 = v52;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v33, v9);
  uint64_t v38 = *(unsigned __int8 *)(v36 + 80);
  uint64_t v39 = (v38 + 40) & ~v38;
  unint64_t v40 = (v51 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v41 = (char *)swift_allocObject(&unk_1000C5478, v40 + 16, v38 | 7);
  *((void *)v41 + 2) = 0LL;
  *((void *)v41 + 3) = 0LL;
  *((void *)v41 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v41[v39], v37, v9);
  uint64_t v42 = &v41[v40];
  *(void *)uint64_t v42 = v56;
  *((void *)v42 + 1) = a4;
  id v43 = a2;
  swift_bridgeObjectRetain(a4);
  uint64_t v44 = sub_100051BF8(v35, (uint64_t)&unk_1000CFEF0, (uint64_t)v41);
  swift_release(v44);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v33, v9);
}

uint64_t sub_10006F97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  _OWORD v7[3] = a5;
  return swift_task_switch(sub_10006F998, 0LL, 0LL);
}

uint64_t sub_10006F998()
{
  uint64_t v1 = v0[5];
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1000CFE44);
  v0[6] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_100059F00;
  return sub_1000534D8(5, v0[3], v0[4], v1, 0);
}

uint64_t sub_10006FA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  _OWORD v6[2] = a1;
  void v6[3] = a2;
  uint64_t v7 = type metadata accessor for NCProtoPullLagunaSessionToTVRequest(0LL);
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v9 = qword_1000D35E0;
  v6[11] = qword_1000D35E0;
  return swift_task_switch(sub_10006FAC0, v9, 0LL);
}

uint64_t sub_10006FAC0()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = swift_task_alloc(32LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = sub_10001CFD8( &qword_1000CFEB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoPullLagunaSessionToTVRequest,  (uint64_t)&protocol conformance descriptor for NCProtoPullLagunaSessionToTVRequest);
  static Message.with(_:)(sub_100082A18, v5, v2, v6);
  swift_task_dealloc(v5);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  v0[12] = qword_1000D35C8;
  uint64_t v7 = (uint64_t **)swift_task_alloc(dword_1000CF54C);
  v0[13] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = (uint64_t *)sub_10006FBE8;
  return sub_10003D6B8(v0[2], 5, v0[10], v0[6], v1, 2);
}

uint64_t sub_10006FBE8()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_10006FC94;
  }
  else {
    uint64_t v4 = sub_10006FC4C;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_10006FC4C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 72) + 8LL))(v1, *(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FC94()
{
  uint64_t v1 = v0[11];
  (*(void (**)(void, void))(v0[9] + 8LL))(v0[10], v0[8]);
  return swift_task_switch(sub_10006FCD8, v1, 0LL);
}

uint64_t sub_10006FCD8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FD0C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = type metadata accessor for NCProtoPullLagunaSessionToTVRequest.Reason(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = UUID.uuidString.getter(v6);
  NCProtoPullLagunaSessionToTVRequest.conversationIdentifier.setter(v9);
  if (a3 > 5) {
    uint64_t v10 = (unsigned int *)&enum case for NCProtoPullLagunaSessionToTVRequest.Reason.unknown(_:);
  }
  else {
    uint64_t v10 = (unsigned int *)*(&off_1000C54B8 + a3);
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *v10, v4);
  return NCProtoPullLagunaSessionToTVRequest.reason.setter(v8);
}

uint64_t sub_10006FDD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  unint64_t v17 = (v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1000C5428, v18 + 16, v15 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v19 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v19 + v16, v10, v7);
  *(void *)(v19 + v17) = a2;
  os_log_type_t v20 = (void *)(v19 + v18);
  void *v20 = v25;
  v20[1] = a4;
  id v21 = a2;
  swift_bridgeObjectRetain(a4);
  uint64_t v22 = sub_100051BF8((uint64_t)v13, (uint64_t)&unk_1000CFEA8, v19);
  return swift_release(v22);
}

uint64_t sub_10006FF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  _OWORD v7[3] = a4;
  v7[4] = a5;
  uint64_t v8 = type metadata accessor for NCProtoCancelAddMemberEvent(0LL);
  v7[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[8] = v9;
  void v7[9] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  void v7[10] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[11] = v11;
  v7[12] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10006FFE0, 0LL, 0LL);
}

uint64_t sub_10006FFE0()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v5, (uint64_t)qword_1000D3620);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[11];
  uint64_t v10 = v0[12];
  uint64_t v12 = v0[10];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    unint64_t v17 = v16;
    v0[2] = sub_10009BE3C(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[Handoff][PullToTV] Cancelling pull laguna session to tv request for %s.",  v13,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[12], v0[10]);
  }

  uint64_t v18 = v0[6];
  uint64_t v19 = v0[7];
  uint64_t v20 = v0[3];
  uint64_t v21 = swift_task_alloc(32LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v20;
  uint64_t v22 = sub_10001CFD8( &qword_1000CFE48,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoCancelAddMemberEvent,  (uint64_t)&protocol conformance descriptor for NCProtoCancelAddMemberEvent);
  static Message.with(_:)(sub_1000829FC, v21, v19, v22);
  swift_task_dealloc(v21);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  v0[13] = qword_1000D35C8;
  uint64_t v23 = (void *)swift_task_alloc(dword_1000CFE44);
  v0[14] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1000702B8;
  return sub_1000534D8(5, v0[9], v0[5], v18, 2);
}

uint64_t sub_1000702B8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100070370;
  }
  else {
    uint64_t v4 = sub_10007031C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 104), 0LL);
}

uint64_t sub_10007031C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 64) + 8LL))(v2, *(void *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100070370()
{
  return swift_task_switch(sub_1000703B4, 0LL, 0LL);
}

uint64_t sub_1000703B4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000703F4(uint64_t *a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1000AA728);
  uint64_t v3 = *a1;
  uint64_t v5 = v3;
  swift_bridgeObjectRetain(v3);
  swift_getAtKeyPath(&v5, KeyPath);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100070464(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v42 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v6 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  os_log_type_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SHA256(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v41 = *a1;
  id v17 = [v41 groupUUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  uint64_t v19 = SHA256.init()(v18);
  uint64_t v45 = UUID.uuid.getter(v19);
  LOWORD(v46) = v20;
  BYTE2(v46) = v21;
  BYTE3(v46) = v22;
  BYTE4(v46) = v23;
  BYTE5(v46) = v24;
  BYTE6(v46) = v25;
  HIBYTE(v46) = v26;
  uint64_t v27 = SHA256.update(bufferPointer:)(&v45, &v47);
  SHA256.finalize()(v27);
  SHA256Digest.withUnsafeBytes<A>(_:)(sub_10005399C, 0LL, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v42);
  uint64_t v28 = v45;
  unint64_t v29 = v46;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10001E8C8(v28, v29);
  LOBYTE(v13) = v30;
  sub_10000BE18(v28, v29);
  if ((v13 & 1) != 0)
  {
    id v31 = [v41 localMember];
    uint64_t v32 = (uint64_t)v31;
    if (v31)
    {
      id v33 = [v31 handle];

      id v34 = [v33 value];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v36 = v35;

      uint64_t v37 = v40;
      if (v32 == v39 && v36 == v40)
      {
        LOBYTE(v32) = 1;
      }

      else
      {
        LOBYTE(v32) = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v36, v39, v40, 0LL);
        uint64_t v37 = v36;
      }

      swift_bridgeObjectRelease(v37);
    }
  }

  else
  {
    LOBYTE(v32) = 0;
  }

  return v32 & 1;
}

uint64_t sub_10007078C(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [*a1 UUID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

void sub_100070844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10000360C(&qword_1000CFD98);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = *(void **)(a2 + OBJC_IVAR___CSDNeighborhoodActivityConduit_voucherManager);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v8);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_1000C5310, v14 + v10, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))( v15 + v14,  (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  aBlock[4] = sub_100082290;
  uint64_t v18 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10005E97C;
  aBlock[3] = &unk_1000C5328;
  unint64_t v16 = _Block_copy(aBlock);
  swift_release(v18);
  [v11 sign:isa as:a5 completion:v16];
  _Block_release(v16);
}

uint64_t sub_1000709B0(void *a1, id a2)
{
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
    swift_errorRetain(a2);
    uint64_t v4 = swift_errorRetain(a2);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v8 = (id)swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = (uint64_t)a2;
      id v33 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_errorRetain(a2);
      uint64_t v9 = sub_10000360C(&qword_1000CF8D0);
      uint64_t v10 = String.init<A>(describing:)(&v32, v9);
      unint64_t v12 = v11;
      uint64_t v32 = sub_10009BE3C(v10, v11, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to sign association voucher due to error %s", v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    id v33 = a2;
LABEL_13:
    uint64_t v24 = sub_10000360C(&qword_1000CFD98);
    return CheckedContinuation.resume(throwing:)(&v33, v24);
  }

  if (!a1)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_10000ADF4(v26, (uint64_t)qword_1000D3620);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Voucher absent from sign response.", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    id v33 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
    goto LABEL_13;
  }

  uint64_t v14 = qword_1000CD690;
  id v15 = a1;
  if (v14 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v16, (uint64_t)qword_1000D3620);
  id v17 = v15;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    __int16 v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v21 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)__int16 v20 = 138412290;
    id v33 = v17;
    id v22 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 4, v20 + 12);
    void *v21 = a1;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully signed voucher %@", v20, 0xCu);
    uint64_t v23 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v21, 1LL, v23);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
  }

  id v33 = a1;
  uint64_t v31 = sub_10000360C(&qword_1000CFD98);
  return CheckedContinuation.resume(returning:)(&v33, v31);
}

BOOL sub_100070DEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_100070E04()
{
  if (*v0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0xD000000000000013LL;
  }
}

uint64_t sub_100070E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 144) = a5;
  *(void *)(v5 + 112) = a4;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  *(void *)(v5 + 120) = qword_1000D35E0;
  id v8 = (uint64_t (*)(uint64_t, char))((char *)&dword_1000CEFA0 + dword_1000CEFA0);
  os_log_type_t v6 = (void *)swift_task_alloc(unk_1000CEFA4);
  *(void *)(v5 + 128) = v6;
  void *v6 = v5;
  v6[1] = sub_100070EE8;
  return v8((uint64_t)_swiftEmptyArrayStorage, 1);
}

uint64_t sub_100070EE8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100071708;
  }
  else {
    uint64_t v4 = sub_100070F4C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 120), 0LL);
}

uint64_t sub_100070F4C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion;
  if (*(void *)(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion))
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10000ADF4(v3, (uint64_t)qword_1000D3620);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_13;
    }
    char v7 = *(_BYTE *)(v0 + 144);
    id v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v54[0] = v9;
    *(_DWORD *)id v8 = 136315138;
    if ((v7 & 1) != 0) {
      uint64_t v10 = 0xD000000000000010LL;
    }
    else {
      uint64_t v10 = 0xD000000000000013LL;
    }
    if ((v7 & 1) != 0) {
      unint64_t v11 = 0x80000001000A55E0LL;
    }
    else {
      unint64_t v11 = 0x80000001000A5600LL;
    }
    *(void *)(v0 + 96) = sub_10009BE3C(v10, v11, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[Assertions] Skipping assertion creation for %s because assertion already exists.",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    unint64_t v12 = v8;
    goto LABEL_12;
  }

  uint64_t v14 = v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons;
  swift_beginAccess(v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons, v0 + 64, 0LL, 0LL);
  if (!*(void *)(*(void *)v14 + 16LL))
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_10000ADF4(v33, (uint64_t)qword_1000D3620);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v35)) {
      goto LABEL_13;
    }
    char v36 = *(_BYTE *)(v0 + 144);
    uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    v54[0] = v38;
    *(_DWORD *)uint64_t v37 = 136315138;
    if ((v36 & 1) != 0) {
      uint64_t v39 = 0xD000000000000010LL;
    }
    else {
      uint64_t v39 = 0xD000000000000013LL;
    }
    if ((v36 & 1) != 0) {
      unint64_t v40 = 0x80000001000A55E0LL;
    }
    else {
      unint64_t v40 = 0x80000001000A5600LL;
    }
    *(void *)(v0 + 104) = sub_10009BE3C(v39, v40, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v40);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v35,  "[Assertions] Skipping assertion creation for %s because the reason has since been removed.",  v37,  0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    unint64_t v12 = v37;
LABEL_12:
    swift_slowDealloc(v12, -1LL, -1LL);
    goto LABEL_13;
  }

  sub_100081108(v15);
  if (v16)
  {
    id v17 = v16;
    uint64_t v53 = *(void *)(v0 + 112);
    id v18 = [(id)objc_opt_self(RBSTarget) targetWithProcessIdentity:v16];
    uint64_t v19 = sub_10000360C(&qword_1000CDE28);
    __int16 v20 = v17;
    uint64_t v21 = swift_allocObject(v19, 40LL, 7LL);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1000AA2B0;
    NSString v22 = String._bridgeToObjectiveC()();
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [(id)objc_opt_self(RBSDomainAttribute) attributeWithDomain:v22 name:v23];

    *(void *)(v21 + 32) = v24;
    v54[0] = v21;
    specialized Array._endMutation()(v25);
    id v26 = objc_allocWithZone(&OBJC_CLASS___RBSAssertion);
    NSString v27 = String._bridgeToObjectiveC()();
    sub_1000052E0(0LL, &qword_1000CFA50, &OBJC_CLASS___RBSAttribute_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    id v29 = [v26 initWithExplanation:v27 target:v18 attributes:isa];

    uint64_t v30 = swift_allocObject(&unk_1000C4BE0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v30 + 16, v53);
    *(void *)(v0 + 48) = sub_100081290;
    *(void *)(v0 + 56) = v30;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_100071E4C;
    *(void *)(v0 + 40) = &unk_1000C4F18;
    uint64_t v31 = _Block_copy((const void *)(v0 + 16));
    swift_release(*(void *)(v0 + 56));
    [v29 acquireWithInvalidationHandler:v31];

    _Block_release(v31);
    uint64_t v32 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v29;

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v41 = type metadata accessor for Logger(0LL);
  uint64_t v42 = sub_10000ADF4(v41, (uint64_t)qword_1000D3620);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "[Assertions] Failed to acquire FaceTime process identity",  v45,  2u);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  id v46 = (id)TUMakeNeighborhoodConduitError(4LL, 0LL);
  swift_willThrow(v46);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  sub_10000ADF4(v41, (uint64_t)qword_1000D3620);
  swift_errorRetain(v46);
  uint64_t v47 = swift_errorRetain(v46);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v49 = 138412290;
    swift_errorRetain(v46);
    uint64_t v51 = _swift_stdlib_bridgeErrorToNSError(v46);
    *(void *)(v0 + 88) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v49 + 4, v49 + 12);
    *uint64_t v50 = v51;
    swift_errorRelease(v46);
    swift_errorRelease(v46);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v48,  "[Assertions] Failed to acquire FaceTime process assertion: %@",  v49,  0xCu);
    uint64_t v52 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v50, 1LL, v52);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);

    swift_errorRelease(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_errorRelease(v46);
  swift_errorRelease(v46);
  swift_errorRelease(v46);
LABEL_13:

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071708()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v6 = 138412290;
    swift_errorRetain(v1);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 88) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v6 + 4, v6 + 12);
    *char v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[Assertions] Failed to acquire FaceTime process assertion: %@",  v6,  0xCu);
    uint64_t v9 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000718CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v54, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v9, (uint64_t)qword_1000D3620);
    id v10 = a1;
    id v11 = v8;
    swift_errorRetain(a2);
    id v12 = v10;
    uint64_t v13 = (char *)v11;
    uint64_t v14 = swift_errorRetain(a2);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v46 = v16;
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      id v18 = (void *)swift_slowAlloc(24LL, -1LL);
      *(_DWORD *)uint64_t v17 = 138412802;
      uint64_t v52 = (uint64_t)v12;
      id v19 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v17 + 4, v17 + 12);
      *id v18 = v12;

      *(_WORD *)(v17 + 12) = 2112;
      __int16 v20 = *(void **)&v13[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion];
      if (v20)
      {
        uint64_t v52 = *(void *)&v13[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion];
        id v21 = v20;
        uint64_t v22 = v17 + 14;
        uint64_t v23 = v17 + 22;
      }

      else
      {
        uint64_t v23 = v17 + 22;
        uint64_t v52 = 0LL;
        uint64_t v22 = v17 + 14;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v22, v23);
      v18[1] = v20;

      *(_WORD *)(v17 + 22) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v52 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v17 + 24, v17 + 32);
      }

      else
      {
        uint64_t v52 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v17 + 24, v17 + 32);
        uint64_t v24 = 0LL;
      }

      v18[2] = v24;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v46,  "FaceTime assertion invalidated. InvalidatedAssertion:%@ heldAssertion:%@ %@",  (uint8_t *)v17,  0x20u);
      uint64_t v25 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v18, 3LL, v25);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    id v26 = (uint64_t *)&v13[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons];
    swift_beginAccess(&v13[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons], &v52, 0LL, 0LL);
    char v27 = sub_10004EB54(*v26);
    if (v27 != 2)
    {
      char v28 = v27 & 1;
      id v29 = v13;
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        char v48 = v28;
        uint64_t v49 = v13;
        uint64_t v32 = swift_slowAlloc(22LL, -1LL);
        uint64_t v33 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        uint64_t v51 = v47;
        *(_DWORD *)uint64_t v32 = 138412546;
        uint64_t v34 = *(void **)&v29[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion];
        if (v34)
        {
          uint64_t v50 = *(void *)&v29[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion];
          id v35 = v34;
          uint64_t v36 = v32 + 4;
          uint64_t v37 = v32 + 12;
        }

        else
        {
          uint64_t v37 = v32 + 12;
          uint64_t v50 = 0LL;
          uint64_t v36 = v32 + 4;
        }

        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v36, v37);
        *uint64_t v33 = v34;

        *(_WORD *)(v32 + 12) = 2080;
        uint64_t v38 = *v26;
        unint64_t v39 = sub_100081008();
        uint64_t v40 = swift_bridgeObjectRetain(v38);
        uint64_t v41 = Set.description.getter( v40,  &type metadata for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason,  v39);
        unint64_t v43 = v42;
        swift_bridgeObjectRelease(v38);
        uint64_t v50 = sub_10009BE3C(v41, v43, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v32 + 14, v32 + 22);
        swift_bridgeObjectRelease(v43);

        _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "FaceTime assertion invalidated while still holding assertion:%@ with reason:%s. Re-acquiring assertion",  (uint8_t *)v32,  0x16u);
        uint64_t v44 = sub_10000360C(&qword_1000CE7A0);
        swift_arrayDestroy(v33, 1LL, v44);
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v32, -1LL, -1LL);

        uint64_t v13 = v49;
        char v28 = v48;
      }

      else
      {
      }

      uint64_t v45 = *(void **)&v29[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion];
      *(void *)&v29[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion] = 0LL;

      sub_10005C7BC(v28);
    }
  }

void sub_100071E4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(id, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(v8, a3);
  swift_release(v5);
}

uint64_t sub_100071EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  void v4[9] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v7 = qword_1000D35E0;
  v4[10] = qword_1000D35E0;
  return swift_task_switch(sub_100071F50, v7, 0LL);
}

uint64_t sub_100071F50()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1000CFA10 + dword_1000CFA10);
  uint64_t v1 = (void *)swift_task_alloc(unk_1000CFA14);
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100071FD0;
  return v3(0x8AC7230489E80000LL, 0LL, 0LL, 0LL, 1);
}

uint64_t sub_100071FD0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v6 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_100072404;
  }
  else {
    uint64_t v7 = sub_10007205C;
  }
  return swift_task_switch(v7, *(void *)(v2 + 80), 0LL);
}

uint64_t sub_10007205C()
{
  uint64_t v1 = (void **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 48) + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons;
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  if (*(void *)(*(void *)v2 + 16LL))
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v3 = *v1;
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v4, (uint64_t)qword_1000D3620);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    id v8 = *v1;
    if (!v7)
    {

      goto LABEL_15;
    }

    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v33;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = *(void *)v2;
    unint64_t v11 = sub_100081008();
    uint64_t v12 = swift_bridgeObjectRetain(v10);
    uint64_t v13 = Set.description.getter( v12,  &type metadata for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason,  v11);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v10);
    *(void *)(v0 + 40) = sub_10009BE3C(v13, v15, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v15);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[Assertions] Canceling invalidation due to new reasons being introduced: %s.",  v9,  0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    os_log_type_t v16 = v9;
    goto LABEL_6;
  }

  uint64_t v17 = (char *)*v1;
  uint64_t v18 = OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion;
  id v19 = *(void **)((char *)*v1 + OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion);
  if (!v19)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_10000ADF4(v29, (uint64_t)qword_1000D3620);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v31)) {
      goto LABEL_7;
    }
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v31,  "[Assertions] Canceling invalidation because assertion has already been released.",  v32,  2u);
    os_log_type_t v16 = v32;
LABEL_6:
    swift_slowDealloc(v16, -1LL, -1LL);
LABEL_7:

    goto LABEL_15;
  }

  uint64_t v20 = qword_1000CD690;
  id v21 = v19;
  if (v20 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_10000ADF4(v22, (uint64_t)qword_1000D3620);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v26 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[Assertions] FaceTime process assertion has been released.",  v26,  2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  char v27 = *(void **)&v17[v18];
  *(void *)&v17[v18] = 0LL;

  [v21 invalidate];
LABEL_15:
  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072404()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[3] = a4;
  v5[4] = a5;
  _OWORD v5[2] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_1000724CC, qword_1000D35E0, 0LL);
}

uint64_t sub_1000724CC()
{
  uint64_t v1 = *(_BYTE **)(v0 + 16);
  PassthroughSubject.send(_:)(*(void *)(v0 + 32));
  *uint64_t v1 = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  _OWORD v6[2] = a1;
  void v6[3] = a4;
  uint64_t updated = type metadata accessor for NCProtoContactUpdateEvent(0LL);
  v6[6] = updated;
  uint64_t v8 = *(void *)(updated - 8);
  v6[7] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[8] = v9;
  v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v6[10] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_1000725C8, qword_1000D35E0, 0LL);
}

uint64_t sub_1000725C8()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v19 = v2;
  uint64_t v20 = *(void *)(v0 + 40);
  BOOL v7 = *(void **)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  id v21 = *(_BYTE **)(v0 + 16);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v1, 1LL, 1LL, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  uint64_t v9 = qword_1000D35E0;
  uint64_t v11 = sub_10001CFD8( &qword_1000CF800,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = (v12 + 40) & ~v12;
  unint64_t v14 = (v3 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (char *)swift_allocObject(&unk_1000C5018, v14 + 8, v12 | 7);
  *((void *)v15 + 2) = v9;
  *((void *)v15 + 3) = v11;
  *((void *)v15 + 4) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v15[v13], v19, v5);
  *(void *)&v15[v14] = v20;
  id v16 = v7;
  swift_retain(v20);
  swift_retain(v9);
  uint64_t v17 = sub_10004EC20(v1, (uint64_t)&unk_1000CFB60, (uint64_t)v15);
  swift_release(v17);
  _BYTE *v21 = 0;
  swift_task_dealloc(v1);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[2] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  void v6[3] = qword_1000D35E0;
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CFB3C);
  v6[4] = v9;
  void *v9 = v6;
  v9[1] = sub_1000727C4;
  return sub_100063A18(a5, a6);
}

uint64_t sub_1000727C4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v0) {
    swift_errorRelease(v0);
  }
  return swift_task_switch(sub_100082EC0, v4, 0LL);
}

uint64_t sub_100072834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[2] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  void v6[3] = qword_1000D35E0;
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CFB2C);
  v6[4] = v9;
  void *v9 = v6;
  v9[1] = sub_1000728D0;
  return sub_1000646D8(a5, a6);
}

uint64_t sub_1000728D0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v5 = sub_100082EC0;
  }

  else
  {
    uint64_t v5 = sub_100072940;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100072940()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 40) != 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007295C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v7 = sub_10000360C((uint64_t *)&unk_1000CF840);
  v6[5] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_1000729E8, qword_1000D35E0, 0LL);
}

uint64_t sub_1000729E8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = NCProtoPolicyInfoUpdatedEvent.policyInfos.getter();
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v1, 1LL, 1LL, v5);
  uint64_t v6 = qword_1000D35E0;
  uint64_t v8 = sub_10001CFD8( &qword_1000CF800,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v9 = (void *)swift_allocObject(&unk_1000C4FF0, 56LL, 7LL);
  void v9[2] = v6;
  void v9[3] = v8;
  v9[4] = v2;
  v9[5] = v4;
  id v9[6] = v3;
  swift_retain(v2);
  swift_bridgeObjectRetain(v4);
  id v10 = v3;
  swift_retain(v6);
  uint64_t v11 = sub_10004EC20(v1, (uint64_t)&unk_1000CFB18, (uint64_t)v9);
  swift_release(v11);
  swift_bridgeObjectRelease(v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[3] = a4;
  v5[4] = a5;
  _OWORD v5[2] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  return swift_task_switch(sub_100072B54, qword_1000D35E0, 0LL);
}

uint64_t sub_100072B54()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  uint64_t v7 = type metadata accessor for NCProtoRecentCallsDidChangeEvent(0LL);
  v6[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  _BYTE v6[24] = v8;
  v6[25] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100072C10, 0LL, 0LL);
}

uint64_t sub_100072C10()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient);
  *(void *)(v0 + 208) = v1;
  return swift_task_switch(sub_100072C34, v1, 0LL);
}

uint64_t sub_100072C34()
{
  uint64_t v1 = *(void **)(v0 + 208);
  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 16LL))( *(void *)(v0 + 200),  *(void *)(v0 + 168),  *(void *)(v0 + 184));
  uint64_t v2 = v1[17];
  if (v2)
  {
    uint64_t v3 = v1[16];
    uint64_t v4 = v1[18];
    uint64_t v5 = v1[19];
    uint64_t v6 = v1[20];
    uint64_t v7 = v1[21];
    uint64_t v9 = v1[22];
    uint64_t v8 = v1[23];
    uint64_t v10 = v1[24];
    uint64_t v11 = *(void *)(v0 + 176);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
    *(void *)(v0 + 24) = v2;
    uint64_t v12 = v4;
    *(void *)(v0 + 32) = v4;
    uint64_t v13 = v5;
    *(_BYTE *)(v0 + 40) = v5 & 1;
    *(void *)(v0 + 48) = v6;
    *(void *)(v0 + 56) = v7;
    *(void *)(v0 + 64) = v9;
    *(void *)(v0 + 72) = v8;
    uint64_t v37 = v10;
    uint64_t v38 = v8;
    *(void *)(v0 + 80) = v10;
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    if (v3 == v14 && v2 == v15) {
      goto LABEL_6;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v14, v15, 0LL) & 1) != 0)
    {
      uint64_t v11 = *(void *)(v0 + 176);
LABEL_6:
      uint64_t v35 = v7;
      uint64_t v36 = v9;
      uint64_t v34 = v3;
      uint64_t v30 = *(void *)(v0 + 200);
      swift_retain(v11);
      uint64_t v33 = v13;
      sub_1000190B0(v3, v2, v12, v13, v6, v7, v9, v38, v37);
      sub_100044550((uint64_t *)(v0 + 16), v11, v30, (void *)(v0 + 88));
      uint64_t v16 = *(unsigned __int8 *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 152);
      uint64_t v18 = v1[17];
      uint64_t v32 = v1[16];
      uint64_t v19 = v1[18];
      uint64_t v20 = v1[19];
      uint64_t v31 = v1[20];
      uint64_t v29 = v1[21];
      uint64_t v28 = v1[22];
      uint64_t v21 = v1[24];
      uint64_t v27 = v1[23];
      __int128 v22 = *(_OWORD *)(v0 + 96);
      __int128 v23 = *(_OWORD *)(v0 + 120);
      __int128 v24 = *(_OWORD *)(v0 + 136);
      v1[16] = *(void *)(v0 + 88);
      *(_OWORD *)(v1 + 17) = v22;
      v1[19] = v16;
      *((_OWORD *)v1 + 10) = v23;
      *((_OWORD *)v1 + 11) = v24;
      v1[24] = v17;
      sub_1000186F4((void *)(v0 + 88));
      sub_10001885C(v32, v18, v19, v20, v31, v29, v28, v27, v21);
      sub_10003F110();
      sub_100018774((void *)(v0 + 88));
      sub_10001885C(v34, v2, v12, v33, v6, v35, v36, v38, v37);
      swift_release(v11);
    }
  }

  uint64_t v25 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 192) + 8LL))(v25, *(void *)(v0 + 184));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v7 = qword_1000D35E0;
  v6[5] = qword_1000D35E0;
  return swift_task_switch(sub_100072EC0, v7, 0LL);
}

uint64_t sub_100072EC0()
{
  *(void *)(v0 + 48) = sub_1000649D0();
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  return swift_task_switch(sub_100072F2C, qword_1000D35C8, 0LL);
}

uint64_t sub_100072F2C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 56) = sub_10000CE6C();
  return swift_task_switch(sub_100072F6C, v1, 0LL);
}

uint64_t sub_100072F6C(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v2 + 16) + OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate,  a2);
  id v4 = *(id *)(v2 + 48);
  id v5 = *(id *)(v2 + 56);
  if (Strong)
  {
    uint64_t v6 = Strong;
    uint64_t v7 = swift_allocObject(&unk_1000C4FC8, 32LL, 7LL);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v4;
    *(void *)(v7 + 24) = v5;
    id v4 = v4;
    id v5 = v5;
    sub_100012C78((uint64_t)sub_100081464, v7);
    swift_release(v7);
    swift_unknownObjectRelease(v6);
  }

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100073010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[2] = a4;
  void v6[3] = a6;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF9C4);
  v6[4] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10007308C;
  return sub_10005CF70(a6);
}

uint64_t sub_10007308C()
{
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  uint64_t v2 = (void *)swift_task_alloc(dword_1000CF9CC);
  *(void *)(v1 + 40) = v2;
  *uint64_t v2 = v4;
  v2[1] = sub_1000730F4;
  return sub_10005D294(*(void *)(v1 + 24));
}

uint64_t sub_1000730F4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10007313C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  uint64_t v7 = type metadata accessor for NCProtoActiveConversationsDidChangeEvent(0LL);
  v6[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  _BYTE v6[24] = v8;
  v6[25] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000731A0, 0LL, 0LL);
}

uint64_t sub_1000731A0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient);
  *(void *)(v0 + 208) = v1;
  return swift_task_switch(sub_1000731C4, v1, 0LL);
}

uint64_t sub_1000731C4()
{
  uint64_t v1 = *(void **)(v0 + 208);
  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 16LL))( *(void *)(v0 + 200),  *(void *)(v0 + 168),  *(void *)(v0 + 184));
  uint64_t v2 = v1[17];
  if (v2)
  {
    uint64_t v3 = v1[16];
    uint64_t v4 = v1[18];
    uint64_t v5 = v1[19];
    uint64_t v6 = v1[20];
    uint64_t v7 = v1[21];
    uint64_t v9 = v1[22];
    uint64_t v8 = v1[23];
    uint64_t v10 = v1[24];
    uint64_t v11 = *(void *)(v0 + 176);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
    *(void *)(v0 + 24) = v2;
    uint64_t v12 = v4;
    *(void *)(v0 + 32) = v4;
    uint64_t v13 = v5;
    *(_BYTE *)(v0 + 40) = v5 & 1;
    *(void *)(v0 + 48) = v6;
    *(void *)(v0 + 56) = v7;
    *(void *)(v0 + 64) = v9;
    *(void *)(v0 + 72) = v8;
    uint64_t v37 = v10;
    uint64_t v38 = v8;
    *(void *)(v0 + 80) = v10;
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    if (v3 == v14 && v2 == v15) {
      goto LABEL_6;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v14, v15, 0LL) & 1) != 0)
    {
      uint64_t v11 = *(void *)(v0 + 176);
LABEL_6:
      uint64_t v35 = v7;
      uint64_t v36 = v9;
      uint64_t v34 = v3;
      uint64_t v30 = *(void *)(v0 + 200);
      swift_retain(v11);
      uint64_t v33 = v13;
      sub_1000190B0(v3, v2, v12, v13, v6, v7, v9, v38, v37);
      sub_100044A48((uint64_t *)(v0 + 16), v11, v30, v0 + 88);
      uint64_t v16 = *(unsigned __int8 *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 152);
      uint64_t v18 = v1[17];
      uint64_t v32 = v1[16];
      uint64_t v19 = v1[18];
      uint64_t v20 = v1[19];
      uint64_t v31 = v1[20];
      uint64_t v29 = v1[21];
      uint64_t v28 = v1[22];
      uint64_t v21 = v1[24];
      uint64_t v27 = v1[23];
      __int128 v22 = *(_OWORD *)(v0 + 96);
      __int128 v23 = *(_OWORD *)(v0 + 120);
      __int128 v24 = *(_OWORD *)(v0 + 136);
      v1[16] = *(void *)(v0 + 88);
      *(_OWORD *)(v1 + 17) = v22;
      v1[19] = v16;
      *((_OWORD *)v1 + 10) = v23;
      *((_OWORD *)v1 + 11) = v24;
      v1[24] = v17;
      sub_1000186F4((void *)(v0 + 88));
      sub_10001885C(v32, v18, v19, v20, v31, v29, v28, v27, v21);
      sub_10003F110();
      sub_100018774((void *)(v0 + 88));
      sub_10001885C(v34, v2, v12, v33, v6, v35, v36, v38, v37);
      swift_release(v11);
    }
  }

  uint64_t v25 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 192) + 8LL))(v25, *(void *)(v0 + 184));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000733E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  uint64_t v7 = type metadata accessor for NCProtoContinuityCallsDidChangeEvent(0LL);
  v6[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  _BYTE v6[24] = v8;
  v6[25] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100073448, 0LL, 0LL);
}

uint64_t sub_100073448()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient);
  *(void *)(v0 + 208) = v1;
  return swift_task_switch(sub_10007346C, v1, 0LL);
}

uint64_t sub_10007346C()
{
  uint64_t v1 = *(void **)(v0 + 208);
  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 16LL))( *(void *)(v0 + 200),  *(void *)(v0 + 168),  *(void *)(v0 + 184));
  uint64_t v2 = v1[17];
  if (v2)
  {
    uint64_t v3 = v1[16];
    uint64_t v4 = v1[18];
    uint64_t v5 = v1[19];
    uint64_t v6 = v1[20];
    uint64_t v7 = v1[21];
    uint64_t v9 = v1[22];
    uint64_t v8 = v1[23];
    uint64_t v10 = v1[24];
    uint64_t v11 = *(void *)(v0 + 176);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
    *(void *)(v0 + 24) = v2;
    uint64_t v12 = v4;
    *(void *)(v0 + 32) = v4;
    uint64_t v13 = v5;
    *(_BYTE *)(v0 + 40) = v5 & 1;
    *(void *)(v0 + 48) = v6;
    *(void *)(v0 + 56) = v7;
    *(void *)(v0 + 64) = v9;
    *(void *)(v0 + 72) = v8;
    uint64_t v37 = v10;
    uint64_t v38 = v8;
    *(void *)(v0 + 80) = v10;
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    if (v3 == v14 && v2 == v15) {
      goto LABEL_6;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v14, v15, 0LL) & 1) != 0)
    {
      uint64_t v11 = *(void *)(v0 + 176);
LABEL_6:
      uint64_t v35 = v7;
      uint64_t v36 = v9;
      uint64_t v34 = v3;
      uint64_t v30 = *(void *)(v0 + 200);
      swift_retain(v11);
      uint64_t v33 = v13;
      sub_1000190B0(v3, v2, v12, v13, v6, v7, v9, v38, v37);
      sub_100044D0C((uint64_t *)(v0 + 16), v11, v30, v0 + 88);
      uint64_t v16 = *(unsigned __int8 *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 152);
      uint64_t v18 = v1[17];
      uint64_t v32 = v1[16];
      uint64_t v19 = v1[18];
      uint64_t v20 = v1[19];
      uint64_t v31 = v1[20];
      uint64_t v29 = v1[21];
      uint64_t v28 = v1[22];
      uint64_t v21 = v1[24];
      uint64_t v27 = v1[23];
      __int128 v22 = *(_OWORD *)(v0 + 96);
      __int128 v23 = *(_OWORD *)(v0 + 120);
      __int128 v24 = *(_OWORD *)(v0 + 136);
      v1[16] = *(void *)(v0 + 88);
      *(_OWORD *)(v1 + 17) = v22;
      v1[19] = v16;
      *((_OWORD *)v1 + 10) = v23;
      *((_OWORD *)v1 + 11) = v24;
      v1[24] = v17;
      sub_1000186F4((void *)(v0 + 88));
      sub_10001885C(v32, v18, v19, v20, v31, v29, v28, v27, v21);
      sub_10003F110();
      sub_100018774((void *)(v0 + 88));
      sub_10001885C(v34, v2, v12, v33, v6, v35, v36, v38, v37);
      swift_release(v11);
    }
  }

  uint64_t v25 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 192) + 8LL))(v25, *(void *)(v0 + 184));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007368C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  uint64_t v7 = type metadata accessor for NCProtoFavoritesDidChangeEvent(0LL);
  v6[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  _BYTE v6[24] = v8;
  v6[25] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000736F0, 0LL, 0LL);
}

uint64_t sub_1000736F0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 160) + OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient);
  *(void *)(v0 + 208) = v1;
  return swift_task_switch(sub_100073714, v1, 0LL);
}

uint64_t sub_100073714()
{
  uint64_t v1 = *(void **)(v0 + 208);
  (*(void (**)(void, void, void))(*(void *)(v0 + 192) + 16LL))( *(void *)(v0 + 200),  *(void *)(v0 + 168),  *(void *)(v0 + 184));
  uint64_t v2 = v1[17];
  if (v2)
  {
    uint64_t v3 = v1[16];
    uint64_t v4 = v1[18];
    uint64_t v5 = v1[19];
    uint64_t v6 = v1[20];
    uint64_t v7 = v1[21];
    uint64_t v9 = v1[22];
    uint64_t v8 = v1[23];
    uint64_t v10 = v1[24];
    uint64_t v11 = *(void *)(v0 + 176);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
    *(void *)(v0 + 24) = v2;
    uint64_t v12 = v4;
    *(void *)(v0 + 32) = v4;
    uint64_t v13 = v5;
    *(_BYTE *)(v0 + 40) = v5 & 1;
    *(void *)(v0 + 48) = v6;
    *(void *)(v0 + 56) = v7;
    *(void *)(v0 + 64) = v9;
    *(void *)(v0 + 72) = v8;
    uint64_t v37 = v10;
    uint64_t v38 = v8;
    *(void *)(v0 + 80) = v10;
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    if (v3 == v14 && v2 == v15) {
      goto LABEL_6;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v14, v15, 0LL) & 1) != 0)
    {
      uint64_t v11 = *(void *)(v0 + 176);
LABEL_6:
      uint64_t v35 = v7;
      uint64_t v36 = v9;
      uint64_t v34 = v3;
      uint64_t v30 = *(void *)(v0 + 200);
      swift_retain(v11);
      uint64_t v33 = v13;
      sub_1000190B0(v3, v2, v12, v13, v6, v7, v9, v38, v37);
      sub_100044FC8((uint64_t *)(v0 + 16), v11, v30, v0 + 88);
      uint64_t v16 = *(unsigned __int8 *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 152);
      uint64_t v18 = v1[17];
      uint64_t v32 = v1[16];
      uint64_t v19 = v1[18];
      uint64_t v20 = v1[19];
      uint64_t v31 = v1[20];
      uint64_t v29 = v1[21];
      uint64_t v28 = v1[22];
      uint64_t v21 = v1[24];
      uint64_t v27 = v1[23];
      __int128 v22 = *(_OWORD *)(v0 + 96);
      __int128 v23 = *(_OWORD *)(v0 + 120);
      __int128 v24 = *(_OWORD *)(v0 + 136);
      v1[16] = *(void *)(v0 + 88);
      *(_OWORD *)(v1 + 17) = v22;
      v1[19] = v16;
      *((_OWORD *)v1 + 10) = v23;
      *((_OWORD *)v1 + 11) = v24;
      v1[24] = v17;
      sub_1000186F4((void *)(v0 + 88));
      sub_10001885C(v32, v18, v19, v20, v31, v29, v28, v27, v21);
      sub_10003F110();
      sub_100018774((void *)(v0 + 88));
      sub_10001885C(v34, v2, v12, v33, v6, v35, v36, v38, v37);
      swift_release(v11);
    }
  }

  uint64_t v25 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 192) + 8LL))(v25, *(void *)(v0 + 184));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TUConversationState.description.getter(unint64_t a1)
{
  if (a1 > 4) {
    return 0x6E776F6E6B6E5528LL;
  }
  else {
    return *(void *)&aWaitingPrepari_0[8 * a1];
  }
}

uint64_t sub_100073978()
{
  return TUConversationState.description.getter(*v0);
}

unint64_t RPRemoteDisplayDiscoveryState.description.getter(char a1)
{
  if (a1 == 1) {
    return 0xD000000000000027LL;
  }
  else {
    return 0xD00000000000002ALL;
  }
}

unint64_t sub_1000739D4()
{
  return RPRemoteDisplayDiscoveryState.description.getter(*v0);
}

unint64_t NCProtoCallState.description.getter()
{
  uint64_t v0 = type metadata accessor for NCProtoConversationAVMode(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v37 = 0xD000000000000011LL;
  unint64_t v38 = 0x80000001000A5180LL;
  uint64_t v5 = NCProtoCallState.hasIsAudioEnabled.getter(v2);
  if ((v5 & 1) != 0)
  {
    v36._countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(18LL);
    uint64_t v6 = swift_bridgeObjectRelease(v36._object);
    v36._countAndFlagsBits = 0x456F696475417369LL;
    v36._object = (void *)0xEF3D64656C62616ELL;
    char v7 = NCProtoCallState.isAudioEnabled.getter(v6);
    BOOL v8 = (v7 & 1) == 0;
    if ((v7 & 1) != 0) {
      uint64_t v9 = 1702195828LL;
    }
    else {
      uint64_t v9 = 0x65736C6166LL;
    }
    if (v8) {
      unint64_t v10 = 0xE500000000000000LL;
    }
    else {
      unint64_t v10 = 0xE400000000000000LL;
    }
    unint64_t v11 = v10;
    String.append(_:)(*(Swift::String *)&v9);
    swift_bridgeObjectRelease(v10);
    v12._countAndFlagsBits = 32LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    object = v36._object;
    String.append(_:)(v36);
    uint64_t v5 = swift_bridgeObjectRelease(object);
  }

  uint64_t v14 = NCProtoCallState.hasIsVideoEnabled.getter(v5);
  if ((v14 & 1) != 0)
  {
    v36._countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(18LL);
    uint64_t v15 = swift_bridgeObjectRelease(v36._object);
    v36._countAndFlagsBits = 0x456F656469567369LL;
    v36._object = (void *)0xEF3D64656C62616ELL;
    char v16 = NCProtoCallState.isVideoEnabled.getter(v15);
    BOOL v17 = (v16 & 1) == 0;
    if ((v16 & 1) != 0) {
      uint64_t v18 = 1702195828LL;
    }
    else {
      uint64_t v18 = 0x65736C6166LL;
    }
    if (v17) {
      unint64_t v19 = 0xE500000000000000LL;
    }
    else {
      unint64_t v19 = 0xE400000000000000LL;
    }
    unint64_t v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease(v19);
    v21._countAndFlagsBits = 32LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    __int128 v22 = v36._object;
    String.append(_:)(v36);
    uint64_t v14 = swift_bridgeObjectRelease(v22);
  }

  uint64_t v23 = NCProtoCallState.hasAvMode.getter(v14);
  if ((v23 & 1) != 0)
  {
    v36._countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    v24._countAndFlagsBits = 0x3D65646F4D7661LL;
    v24._object = (void *)0xE700000000000000LL;
    String.append(_:)(v24);
    NCProtoCallState.avMode.getter();
    _print_unlocked<A, B>(_:_:)( v4,  &v36,  v0,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    v25._countAndFlagsBits = 32LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    id v26 = v36._object;
    String.append(_:)(v36);
    uint64_t v23 = swift_bridgeObjectRelease(v26);
  }

  if ((NCProtoCallState.hasIsCaptioningEnabled.getter(v23) & 1) != 0)
  {
    v36._countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    uint64_t v27 = swift_bridgeObjectRelease(v36._object);
    v36._countAndFlagsBits = 0xD000000000000014LL;
    v36._object = (void *)0x80000001000A51A0LL;
    char v28 = NCProtoCallState.isCaptioningEnabled.getter(v27);
    BOOL v29 = (v28 & 1) == 0;
    if ((v28 & 1) != 0) {
      uint64_t v30 = 1702195828LL;
    }
    else {
      uint64_t v30 = 0x65736C6166LL;
    }
    if (v29) {
      unint64_t v31 = 0xE500000000000000LL;
    }
    else {
      unint64_t v31 = 0xE400000000000000LL;
    }
    unint64_t v32 = v31;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease(v31);
    uint64_t v33 = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v33);
  }

  v34._countAndFlagsBits = 41LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  return v37;
}

unint64_t sub_100073CE8()
{
  return TUConversationAVMode.description.getter(*v0);
}

unint64_t TUConversationLetMeInRequestState.description.getter(uint64_t a1)
{
  unint64_t result = 0xD000000000000025LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 2LL:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 3LL:
      unint64_t result = 0xD000000000000029LL;
      break;
    default:
      _StringGuts.grow(_:)(44LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 41LL;
      v5._object = (void *)0xE100000000000000LL;
      String.append(_:)(v5);
      unint64_t result = 0xD000000000000029LL;
      break;
  }

  return result;
}

unint64_t sub_100073E10()
{
  return TUConversationLetMeInRequestState.description.getter(*v0);
}

uint64_t type metadata accessor for ConduitActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService12ConduitActor);
}

uint64_t sub_100073E3C()
{
  return type metadata accessor for NeighborhoodActivityConduit(0LL);
}

uint64_t type metadata accessor for NeighborhoodActivityConduit(uint64_t a1)
{
  return sub_100005920(a1, (uint64_t *)&unk_1000CF728, (uint64_t)&nominal type descriptor for NeighborhoodActivityConduit);
}

void sub_100073E58(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = "(";
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = &unk_1000AA488;
  v4[8] = &unk_1000AA488;
  void v4[9] = &unk_1000AA4A0;
  v4[10] = &unk_1000AA488;
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100074A20(319LL, &qword_1000CF738, type metadata accessor for HandoffState);
  if (v3 <= 0x3F)
  {
    v4[12] = *(void *)(v2 - 8) + 64LL;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[16] = &unk_1000AA4B8;
    v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[18] = &unk_1000AA4D0;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[21] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[22] = &unk_1000AA4E8;
    v4[23] = &unk_1000AA4D0;
    _BYTE v4[24] = &unk_1000AA4D0;
    v4[25] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[26] = &unk_1000AA4D0;
    v4[27] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[28] = &unk_1000AA4D0;
    swift_updateClassMetadata2(a1, 256LL, 29LL, v4, a1 + 80);
  }

uint64_t getEnumTagSinglePayload for HandoffType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100074054 + 4 * byte_1000AA2C9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100074088 + 4 * byte_1000AA2C4[v4]))();
}

uint64_t sub_100074088(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100074090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100074098LL);
  }
  return result;
}

uint64_t sub_1000740A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000740ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000740B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000740B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000740C4(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason()
{
  return &type metadata for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason;
}

uint64_t *sub_1000740E0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    Swift::String v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    char v16 = (char *)v4 + v14;
    BOOL v17 = (char *)a2 + v14;
    uint64_t v18 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    id v21 = v15;
    if (v20(v17, 1LL, v18))
    {
      uint64_t v22 = sub_10000360C(&qword_1000CF740);
      memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }

  return v4;
}

uint64_t sub_100074230(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);

  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

void *sub_1000742DC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  uint64_t v15 = (char *)a1 + v13;
  char v16 = (char *)a2 + v13;
  uint64_t v17 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  id v20 = v14;
  if (v19(v16, 1LL, v17))
  {
    uint64_t v21 = sub_10000360C(&qword_1000CF740);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_100074400(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void **)((char *)a2 + v12);
  uint64_t v14 = *(void **)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = v13;
  id v15 = v13;

  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1LL, v19);
  int v23 = v21(v18, 1LL, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }

  if (v23)
  {
LABEL_6:
    uint64_t v24 = sub_10000360C(&qword_1000CF740);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_100074580(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = sub_10000360C(&qword_1000CF740);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_10007468C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void **)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);

  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_10000360C(&qword_1000CF740);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1000747F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074804);
}

uint64_t sub_100074804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_10000360C(&qword_1000CF740);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_1000748A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000748B4);
}

uint64_t sub_1000748B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_10000360C(&qword_1000CF740);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(uint64_t a1)
{
  return sub_100005920( a1,  (uint64_t *)&unk_1000CF7A0,  (uint64_t)&nominal type descriptor for NeighborhoodActivityConduit.NearbyConversationInfo);
}

void sub_100074968(uint64_t a1)
{
  v6[0] = &unk_1000AA568;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    _OWORD v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    sub_100074A20( 319LL,  (unint64_t *)&unk_1000CF7B0,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo);
    if (v5 <= 0x3F)
    {
      void v6[3] = *(void *)(v4 - 8) + 64LL;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256LL, 5LL, v6, a1 + 16);
    }
  }

void sub_100074A20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100074A6C()
{
  return sub_10001CFD8( &qword_1000CF7F0,  255LL,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo,  (uint64_t)&unk_1000AA580);
}

unint64_t sub_100074AA0()
{
  unint64_t result = qword_1000CF7F8;
  if (!qword_1000CF7F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000AA678,  &type metadata for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason);
    atomic_store(result, (unint64_t *)&qword_1000CF7F8);
  }

  return result;
}

uint64_t sub_100074AE4(uint64_t a1, uint64_t a2)
{
  return sub_10001CFD8( &qword_1000CF800,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
}

uint64_t sub_100074B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100074B2C, 0LL, 0LL);
}

uint64_t sub_100074B2C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  unint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = type metadata accessor for NCProtoDeviceTokenResponse(0LL);
  *unint64_t v3 = v0;
  v3[1] = sub_100074BD4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0xD000000000000011LL,  0x80000001000A4FA0LL,  sub_100081CA4,  v2,  v4);
}

uint64_t sub_100074BD4()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100082E70, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100074C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100074C64, 0LL, 0LL);
}

uint64_t sub_100074C64()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc(48LL);
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = type metadata accessor for NCProtoJoinEvent(0LL);
  *uint64_t v3 = v0;
  v3[1] = sub_100074D0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0xD000000000000011LL,  0x80000001000A4FA0LL,  sub_10008226C,  v2,  v4);
}

uint64_t sub_100074D0C()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100074D80, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 48));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100074D80()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100074DB4(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t sub_100074E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v68 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000360C(&qword_1000CF740);
  __chkstk_darwin(v7);
  uint64_t v65 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = sub_10000360C(&qword_1000CF828);
  __chkstk_darwin(v66);
  id v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (int *)type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (int64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (int64_t *)((char *)&v54 - v16);
  uint64_t result = __chkstk_darwin(v15);
  int v21 = (char *)&v54 - v20;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v63 = a2;
  uint64_t v64 = v4;
  int64_t v22 = 0LL;
  uint64_t v23 = a1 + 56;
  uint64_t v24 = 1LL << *(_BYTE *)(a1 + 32);
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  else {
    uint64_t v25 = -1LL;
  }
  unint64_t v26 = v25 & *(void *)(a1 + 56);
  int64_t v27 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v69 = a2 + 56;
  uint64_t v61 = v6;
  uint64_t v62 = v11;
  uint64_t v28 = (uint64_t)v65;
  uint64_t v67 = v10;
  uint64_t v58 = a1;
  uint64_t v57 = v19;
  uint64_t v56 = v21;
  uint64_t v55 = a1 + 56;
  int64_t v54 = v27;
  if (v26) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v30 = v22 + 1;
  if (__OFADD__(v22, 1LL))
  {
    __break(1u);
    goto LABEL_48;
  }

  if (v30 >= v27) {
    return 1LL;
  }
  unint64_t v31 = *(void *)(v23 + 8 * v30);
  int64_t v32 = v22 + 1;
  if (!v31)
  {
    int64_t v32 = v30 + 1;
    if (v30 + 1 >= v27) {
      return 1LL;
    }
    unint64_t v31 = *(void *)(v23 + 8 * v32);
    if (!v31)
    {
      int64_t v32 = v30 + 2;
      if (v30 + 2 >= v27) {
        return 1LL;
      }
      unint64_t v31 = *(void *)(v23 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v30 + 3;
        if (v30 + 3 >= v27) {
          return 1LL;
        }
        unint64_t v31 = *(void *)(v23 + 8 * v32);
        if (!v31)
        {
          int64_t v33 = v30 + 4;
          if (v33 < v27)
          {
            unint64_t v31 = *(void *)(v23 + 8 * v33);
            if (v31)
            {
              int64_t v32 = v33;
              goto LABEL_23;
            }

            while (1)
            {
              int64_t v32 = v33 + 1;
              if (__OFADD__(v33, 1LL)) {
                break;
              }
              if (v32 >= v27) {
                return 1LL;
              }
              unint64_t v31 = *(void *)(v23 + 8 * v32);
              ++v33;
              if (v31) {
                goto LABEL_23;
              }
            }

LABEL_23:
  uint64_t v59 = (v31 - 1) & v31;
  int64_t v60 = v32;
  for (unint64_t i = __clz(__rbit64(v31)) + (v32 << 6); ; unint64_t i = __clz(__rbit64(v26)) | (v22 << 6))
  {
    uint64_t v34 = *(void *)(v19 + 72);
    sub_100018CFC( *(void *)(a1 + 48) + v34 * i,  (uint64_t)v21,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    sub_10004EA7C( (uint64_t)v21,  (uint64_t)v17,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    Hasher.init(_seed:)(v70, *(void *)(a2 + 40));
    sub_100054288((uint64_t)v70);
    Swift::Int v35 = Hasher._finalize()();
    uint64_t v36 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v37 = v35 & ~v36;
    if (((*(void *)(v69 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
      break;
    }
    uint64_t v38 = ~v36;
    while (1)
    {
      sub_100018CFC( *(void *)(a2 + 48) + v37 * v34,  (uint64_t)v14,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      uint64_t v39 = v14[1];
      uint64_t v40 = v17[1];
      BOOL v41 = *v14 == *v17 && v39 == v40;
      if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v39, *v17, v40, 0LL) & 1) == 0) {
        goto LABEL_28;
      }
      sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
      uint64_t v42 = v11[7];
      uint64_t v43 = (uint64_t)v17 + v42;
      uint64_t v44 = (uint64_t)v67;
      uint64_t v45 = (uint64_t)&v67[*(int *)(v66 + 48)];
      sub_100005318((uint64_t)v14 + v42, (uint64_t)v67, &qword_1000CF740);
      sub_100005318(v43, v45, &qword_1000CF740);
      os_log_type_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
      uint64_t v47 = v64;
      if (v46(v44, 1LL, v64) == 1) {
        break;
      }
      sub_100005318(v44, v28, &qword_1000CF740);
      if (v46(v45, 1LL, v47) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v28, v47);
LABEL_27:
        sub_10000BFC8((uint64_t)v67, &qword_1000CF828);
        uint64_t v11 = v62;
        a2 = v63;
        goto LABEL_28;
      }

      uint64_t v48 = v68;
      uint64_t v49 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v61, v45, v47);
      uint64_t v50 = sub_10001CFD8( &qword_1000CF838,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v49, v47, v50);
      uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v53 = v49;
      uint64_t v28 = (uint64_t)v65;
      v52(v53, v47);
      v52((char *)v28, v47);
      sub_10000BFC8(v44, &qword_1000CF740);
      uint64_t v11 = v62;
      a2 = v63;
      if ((v51 & 1) != 0) {
        goto LABEL_41;
      }
LABEL_28:
      sub_10000BF5C((uint64_t)v14, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
      unint64_t v37 = (v37 + 1) & v38;
      if (((*(void *)(v69 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
        goto LABEL_45;
      }
    }

    if (v46(v45, 1LL, v47) != 1) {
      goto LABEL_27;
    }
    sub_10000BFC8((uint64_t)v67, &qword_1000CF740);
    uint64_t v11 = v62;
    a2 = v63;
LABEL_41:
    sub_10000BF5C((uint64_t)v14, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    uint64_t result = sub_10000BF5C((uint64_t)v17, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    a1 = v58;
    unint64_t v26 = v59;
    uint64_t v19 = v57;
    int v21 = v56;
    uint64_t v23 = v55;
    int64_t v27 = v54;
    int64_t v22 = v60;
    if (!v59) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v59 = (v26 - 1) & v26;
    int64_t v60 = v22;
  }

    uint64_t v16 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    int64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      BOOL v29 = *(id *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      BOOL v29 = *(id *)(*(void *)(v10 + 56) + 8 * v22);
    }

    int64_t v30 = *(void *)(v12 + 40);
    unint64_t v31 = sub_10001CFD8( (unint64_t *)&qword_1000CD8F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    int64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    int64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      Swift::Int v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

    uint64_t v16 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    int64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      BOOL v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      BOOL v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_retain(v29);
    }

    int64_t v30 = *(void *)(v12 + 40);
    unint64_t v31 = sub_10001CFD8( (unint64_t *)&qword_1000CD8F8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    int64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    int64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      Swift::Int v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  uint64_t v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  *uint64_t v3 = v12;
  return result;
}

    uint64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    sub_1000109D4(v18, v19);
    Data.hash(into:)(v32, v18, v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1LL << *((_BYTE *)v8 + 32);
    int v21 = result & ~v20;
    int64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v26 = v22 == v25;
        if (v22 == v25) {
          int64_t v22 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (uint64_t *)(v8[6] + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    id v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    id v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    id v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = v9[5];
    uint64_t v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *((_BYTE *)v9 + 32);
    int v21 = result & ~v20;
    int64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v26 = v22 == v25;
        if (v22 == v25) {
          int64_t v22 = 0LL;
        }
        v24 |= v26;
        int64_t v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  uint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    uint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

  unint64_t v26 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  int64_t v27 = *(void *)(v26 + 48) + 24 * a4;
  *(void *)int64_t v27 = v10;
  *(void *)(v27 + 8) = a2;
  *(_BYTE *)(v27 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v28 = *(void *)(v26 + 16);
  BOOL v29 = __OFADD__(v28, 1LL);
  int64_t v30 = v28 + 1;
  if (v29) {
    __break(1u);
  }
  else {
    *(void *)(v26 + swift_weakDestroy(v0 + 16) = v30;
  }
  return result;
}

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v12 = __CocoaSet.element(at:)(a1, a2, v11);
  uint64_t v24 = v12;
  uint64_t v13 = sub_1000052E0(0LL, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
  swift_unknownObjectRelease(v12);
}

uint64_t sub_100075480(uint64_t a1, int *a2)
{
  NSString v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000754E4;
  return v6(a1);
}

uint64_t sub_1000754E4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100075530(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_1000755AC(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1000755AC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_1000756F0(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_10009BD60(v12, 0LL);
      unint64_t v5 = sub_1000757DC((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

LABEL_11:
      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v24 = v18[2];
    uint64_t v25 = __OFADD__(v24, 1LL);
    unint64_t v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_100076C10(v15, a4 & 1);
  int v21 = sub_100004CD4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    unint64_t v12 = v21;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      a4 = (a4 + 1) & v20;
    }

    while (((*(void *)(v19 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0);
  }

  if (v1 < 0) {
    unint64_t v7 = v1;
  }
  else {
    unint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  unint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  uint64_t result = swift_bridgeObjectRelease(v1);
  if (!v5) {
    return (uint64_t)v4;
  }
LABEL_15:
  unint64_t v8 = 0LL;
  uint64_t v9 = (char *)(v4 + 7);
  uint64_t v23 = v5;
  while ((v24 & 0xC000000000000001LL) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    uint64_t v10 = __OFADD__(v8++, 1LL);
    if (v10) {
      goto LABEL_32;
    }
LABEL_24:
    uint64_t v25 = result;
    int64_t v27 = result;
    uint64_t v11 = v4[5];
    unint64_t v12 = type metadata accessor for AnyCancellable(0LL);
    uint64_t v13 = sub_10000465C( &qword_1000D0B00,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v13);
    uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)&v9[8 * (v15 >> 6)];
    uint64_t v18 = 1LL << v15;
    if (((1LL << v15) & v17) != 0)
    {
      uint64_t v19 = ~v14;
      uint64_t v20 = sub_10000465C( &qword_1000D0B08,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        unint64_t v26 = *(void *)(v4[6] + 8 * v15);
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v27, v12, v20);
        if ((result & 1) != 0)
        {
          uint64_t result = swift_release(v25);
          unint64_t v5 = v23;
          goto LABEL_17;
        }

        uint64_t v15 = (v15 + 1) & v19;
        uint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)&v9[8 * (v15 >> 6)];
        uint64_t v18 = 1LL << v15;
      }

      while ((v17 & (1LL << v15)) != 0);
      unint64_t v5 = v23;
    }

    *(void *)&v9[8 * v16] = v18 | v17;
    *(void *)(v4[6] + 8 * v15) = v25;
    int v21 = v4[2];
    uint64_t v10 = __OFADD__(v21, 1LL);
    int64_t v22 = v21 + 1;
    if (v10) {
      goto LABEL_33;
    }
    void v4[2] = v22;
LABEL_17:
    if (v8 == v5) {
      return (uint64_t)v4;
    }
  }

  if (v8 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_34;
  }
  uint64_t result = swift_retain(*(void *)(v24 + 32 + 8 * v8));
  uint64_t v10 = __OFADD__(v8++, 1LL);
  if (!v10) {
    goto LABEL_24;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_1000756F0( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_10009BDC4(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_10009BDC4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_1000757DC( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    void v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10009BDC4(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_10009BDC4(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

unint64_t sub_1000759EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    unint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000360C((uint64_t *)&unk_1000CF960);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  unint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100005318(v7, (uint64_t)&v16, &qword_1000CD8E0);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100075B20(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100004E20(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100075B20(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100075B84(a1, a2, v5);
}

unint64_t sub_100075B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_100075CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + 64) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 80) = swift_task_alloc(v14);
  *(void *)(v6 + 88) = swift_task_alloc(v14);
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_100075D6C, 0LL, 0LL);
}

uint64_t sub_100075D6C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v5 = sub_10001CFD8( &qword_1000CFA20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  uint64_t v6 = sub_10001CFD8( (unint64_t *)&unk_1000CFA28,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100075E8C;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100075E8C()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    return swift_task_switch(sub_100075F38, 0LL, 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 80);
  swift_task_dealloc(*(void *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100075F38()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_100075F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000360C((uint64_t *)&unk_1000CD8D0);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_100076280(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000360C((uint64_t *)&unk_1000CFF20);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  int64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_100076564(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000360C(&qword_1000CD8F0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  BOOL v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_1000768FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000360C(&qword_1000CFA60);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

Swift::Int sub_100076C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000360C(&qword_1000CD908);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_100076F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000360C(&qword_1000CD948);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_1000772BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000360C((uint64_t *)&unk_1000CF960);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

Swift::Int sub_1000775B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000360C(&qword_1000CD930);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  BOOL v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_100077888(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000360C(&qword_1000CD930);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_1000052E0(0LL, (unint64_t *)&unk_1000CE390, &OBJC_CLASS___TUHandle_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = sub_1000052E0(0LL, &qword_1000CFB80, &OBJC_CLASS___CNContact_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_1000775B8(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }

  return v4;
}

void sub_100077AD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100004D38(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100078480();
    goto LABEL_7;
  }

  sub_100076564(v17, a3 & 1);
  unint64_t v22 = sub_100004D38(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1000781CC(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_100077C34(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100004DF0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_10000F2F0(v17);
        return sub_100004E20(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000786A8();
      goto LABEL_7;
    }

    sub_1000768FC(v13, a3 & 1);
    unint64_t v19 = sub_100004DF0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100005160(a2, (uint64_t)v21);
      return sub_100078154(v10, (uint64_t)v21, a1, v16);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_100077D6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100004CD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10007888C();
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v10);
    return 0LL;
  }

  uint64_t v15 = *(void *)(v10 + 40);
  swift_bridgeObjectRetain(v10);
  char v16 = NSObject._rawHashValue(seed:)(v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v10 + 32);
  char v18 = v16 & ~v17;
  if (((*(void *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
    goto LABEL_15;
  }
  sub_1000052E0(0LL, a2, a3);
  uint64_t v19 = *(id *)(*(void *)(v10 + 48) + 8 * v18);
  char v20 = static NSObject.== infix(_:_:)(v19, a1);

  if ((v20 & 1) == 0)
  {
    unint64_t v21 = ~v17;
    do
    {
      char v18 = (v18 + 1) & v21;
      if (((*(void *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0) {
        goto LABEL_15;
      }
      char v22 = *(id *)(*(void *)(v10 + 48) + 8 * v18);
      char v23 = static NSObject.== infix(_:_:)(v22, a1);
    }

    while ((v23 & 1) == 0);
  }

  swift_bridgeObjectRelease(v10);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  BOOL v25 = *v8;
  uint64_t v28 = *v8;
  *uint64_t v8 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000937D8(a4);
    BOOL v25 = v28;
  }

  BOOL v14 = *(void *)(*(void *)(v25 + 48) + 8 * v18);
  sub_100095388(v18);
  uint64_t v26 = *v8;
  *uint64_t v8 = v28;
  swift_bridgeObjectRelease(v26);
  return v14;
}

uint64_t sub_100077EC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100004D38(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100078A40();
    goto LABEL_7;
  }

  sub_100076F24(v17, a3 & 1);
  unint64_t v23 = sub_100004D38(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1000781CC(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_100078024(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100004CD4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_10000F2F0(v19);
        return sub_100004E20(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100078C70();
      goto LABEL_7;
    }

    sub_1000772BC(v15, a4 & 1);
    unint64_t v21 = sub_100004CD4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100078264(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_100078154(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100004E20(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_1000781CC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_100078264(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  __int128 v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100004E20(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1000782CC()
{
  uint64_t v1 = v0;
  sub_10000360C((uint64_t *)&unk_1000CFF20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

id sub_100078480()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000360C(&qword_1000CD8F0);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v5);
    *int64_t v24 = v7;
    return result;
  }

  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_1000786A8()
{
  uint64_t v1 = v0;
  sub_10000360C(&qword_1000CFA60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_10007888C()
{
  uint64_t v1 = v0;
  sub_10000360C(&qword_1000CD908);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_100078A40()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000360C(&qword_1000CD948);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    *int64_t v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_100078C70()
{
  uint64_t v1 = v0;
  sub_10000360C((uint64_t *)&unk_1000CF960);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_100078E54()
{
  uint64_t v1 = v0;
  sub_10000360C(&qword_1000CD930);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

unint64_t sub_100078FF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    swift_release(a4);
    return (unint64_t)&_swiftEmptySetSingleton;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10000360C(&qword_1000CFAC0);
  unint64_t result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v6 = result;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  unint64_t v30 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v11 << 6);
    }

    else
    {
      uint64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_30;
      }
      if (v14 >= v29)
      {
LABEL_27:
        swift_release(v4);
        return v6;
      }

      unint64_t v15 = v28[v14];
      ++v11;
      if (!v15)
      {
        uint64_t v11 = v14 + 1;
        if (v14 + 1 >= v29) {
          goto LABEL_27;
        }
        unint64_t v15 = v28[v11];
        if (!v15)
        {
          uint64_t v11 = v14 + 2;
          if (v14 + 2 >= v29) {
            goto LABEL_27;
          }
          unint64_t v15 = v28[v11];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v29) {
              goto LABEL_27;
            }
            unint64_t v15 = v28[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_31;
                }
                if (v11 >= v29) {
                  goto LABEL_27;
                }
                unint64_t v15 = v28[v11];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v16;
          }
        }
      }

Swift::Int sub_100079254(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000360C(&qword_1000CFB40);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

Swift::Int sub_1000794EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000360C(&qword_1000CFAA0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

Swift::Int sub_100079748(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v8 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v55 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000360C(&qword_1000CF740);
  __chkstk_darwin(v10);
  uint64_t v56 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v12 = (int *)type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  uint64_t v60 = *((void *)v12 - 1);
  __chkstk_darwin(v12);
  unint64_t v14 = (uint64_t *)((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  uint64_t v59 = v8;
  sub_10000360C(&qword_1000CFA68);
  Swift::Int result = static _SetStorage.allocate(capacity:)(a3);
  Swift::Int v15 = result;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = (uint64_t)v56;
  uint64_t v19 = 0LL;
  uint64_t v20 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo;
  unint64_t v21 = (uint64_t (*)(uint64_t))&type metadata accessor for UUID;
  Swift::Int v22 = result + 56;
  uint64_t v58 = a4;
  while (1)
  {
    if (v17)
    {
      uint64_t v62 = (v17 - 1) & v17;
      uint64_t v63 = v19;
      unint64_t v23 = __clz(__rbit64(v17)) | (v19 << 6);
    }

    else
    {
      uint64_t v24 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_43;
      }
      if (v24 >= v54)
      {
LABEL_40:
        swift_release(a4);
        return v15;
      }

      unint64_t v25 = v53[v24];
      uint64_t v26 = v19 + 1;
      if (!v25)
      {
        uint64_t v26 = v19 + 2;
        if (v19 + 2 >= v54) {
          goto LABEL_40;
        }
        unint64_t v25 = v53[v26];
        if (!v25)
        {
          uint64_t v26 = v19 + 3;
          if (v19 + 3 >= v54) {
            goto LABEL_40;
          }
          unint64_t v25 = v53[v26];
          if (!v25)
          {
            uint64_t v27 = v19 + 4;
            if (v19 + 4 >= v54) {
              goto LABEL_40;
            }
            unint64_t v25 = v53[v27];
            if (!v25)
            {
              while (1)
              {
                uint64_t v26 = v27 + 1;
                if (__OFADD__(v27, 1LL)) {
                  goto LABEL_44;
                }
                if (v26 >= v54) {
                  goto LABEL_40;
                }
                unint64_t v25 = v53[v26];
                ++v27;
                if (v25) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v26 = v19 + 4;
          }
        }
      }

LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

char *sub_100079C28( void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char *a9)
{
  id v109 = a8;
  id v108 = a7;
  id v111 = a5;
  id v110 = a4;
  id v112 = a3;
  id v115 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a9);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v116 = *(void *)(v11 - 8);
  uint64_t v117 = v11;
  __chkstk_darwin(v11);
  uint64_t v105 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000360C((uint64_t *)&unk_1000CF840);
  __chkstk_darwin(v13);
  Swift::Int v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000360C(&qword_1000CDE48);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v125[3] = &type metadata for ConversationServerBag;
  v125[4] = &off_1000C61D8;
  uint64_t v19 = OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager;
  uint64_t v20 = qword_1000CD640;
  unint64_t v21 = a9;
  if (v20 != -1) {
    swift_once(&qword_1000CD640, sub_1000202C4);
  }
  uint64_t v22 = qword_1000D35D0;
  *(void *)&a9[v19] = qword_1000D35D0;
  swift_retain(v22);
  unint64_t v23 = &_swiftEmptySetSingleton;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
      unint64_t v23 = (void *)sub_10009CD18((uint64_t)_swiftEmptyArrayStorage);
    }
    else {
      unint64_t v23 = &_swiftEmptySetSingleton;
    }
  }

  uint64_t v103 = a9;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_cancellables] = v23;
  uint64_t v24 = &v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_delegate];
  *((void *)v24 + 1) = 0LL;
  swift_unknownObjectWeakInit(v24, 0LL);
  unint64_t v25 = &v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffState];
  uint64_t v26 = type metadata accessor for HandoffState(0LL);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  v27(v25, 1LL, 1LL, v26);
  uint64_t v28 = OBJC_IVAR___CSDNeighborhoodActivityConduit_handoffStateSubject;
  v27(v18, 1LL, 1LL, v26);
  uint64_t v29 = sub_10000360C(&qword_1000CF850);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  *(void *)&v21[v28] = CurrentValueSubject.init(_:)(v18);
  uint64_t v30 = OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationPublishers;
  if (qword_1000CD708 != -1) {
    swift_once(&qword_1000CD708, sub_10009B19C);
  }
  uint64_t v31 = (void *)qword_1000D3700;
  *(void *)&v21[v30] = qword_1000D3700;
  uint64_t v32 = &v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_captureDeviceManager];
  uint64_t v33 = qword_1000CD6F8;
  id v34 = v31;
  if (v33 != -1) {
    swift_once(&qword_1000CD6F8, sub_10009AAB0);
  }
  uint64_t v104 = v19;
  uint64_t v106 = v15;
  uint64_t v35 = qword_1000D36E8;
  uint64_t v36 = (void *)unk_1000D36F0;
  BOOL v37 = (void *)qword_1000D36F8;
  *(void *)uint64_t v32 = qword_1000D36E8;
  *((void *)v32 + 1) = v36;
  *((void *)v32 + 2) = v37;
  uint64_t v38 = OBJC_IVAR___CSDNeighborhoodActivityConduit_continuitySessionClient;
  uint64_t v39 = qword_1000CD660;
  swift_retain(v35);
  id v40 = v36;
  id v41 = v37;
  if (v39 != -1) {
    swift_once(&qword_1000CD660, sub_10003EDE8);
  }
  uint64_t v42 = qword_1000D35D8;
  *(void *)&v21[v38] = qword_1000D35D8;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_bleDiscoveryAssertion] = 0LL;
  uint64_t v43 = OBJC_IVAR___CSDNeighborhoodActivityConduit_joinEventSubject;
  uint64_t v44 = sub_10000360C(&qword_1000CF858);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  uint64_t v45 = swift_retain(v42);
  *(void *)&v21[v43] = PassthroughSubject.init()(v45);
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_nearbyConversationInfos] = &_swiftEmptySetSingleton;
  swift_unknownObjectWeakInit(&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProviderDelegate], 0LL);
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_proxyMessageDeduplicator] = 0LL;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_idsProxyCleanupTimer] = 0LL;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_stateHandle] = 0LL;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationUIStateObserver] = 0LL;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertionReasons] = &_swiftEmptySetSingleton;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_faceTimeProcessAssertion] = 0LL;
  id v46 = v115;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager] = v115;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_callCenter] = a6;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_idsService] = a2;
  unint64_t v47 = a2;
  id v48 = v111;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags] = v111;
  sub_10000F310((uint64_t)v125, (uint64_t)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationServerBag]);
  id v49 = v112;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_vouchingEnablement] = v112;
  id v50 = v110;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_voucherManager] = v110;
  id v51 = v108;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_remoteDisplayDiscovery] = v108;
  uint64_t v52 = type metadata accessor for NeighborhoodActivityPublisherService();
  swift_allocObject(v52, 32LL, 7LL);
  id v115 = v46;
  id v113 = a6;
  id v114 = v47;
  id v111 = v48;
  id v112 = v49;
  id v110 = v50;
  id v108 = v51;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_publisherService] = sub_10008B074();
  id v53 = v109;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_suggestionController] = v109;
  uint64_t v54 = *(void *)&v103[v104];
  uint64_t v55 = type metadata accessor for PullRequestService();
  uint64_t v56 = swift_allocObject(v55, 32LL, 7LL);
  *(void *)(v56 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
  *(void *)(v56 + 24) = v54;
  *(void *)&v21[OBJC_IVAR___CSDNeighborhoodActivityConduit_pullRequestService] = v56;
  id v109 = v53;
  swift_retain(v54);

  v124.receiver = v21;
  v124.super_class = ObjectType;
  id v57 = objc_msgSendSuper2(&v124, "init");
  uint64_t v58 = type metadata accessor for TaskPriority(0LL);
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL);
  uint64_t v60 = (uint64_t)v106;
  v59(v106, 1LL, 1LL, v58);
  uint64_t v61 = qword_1000CD668;
  uint64_t v63 = (char *)v57;
  if (v61 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v64 = qword_1000D35E0;
  uint64_t v65 = sub_10001CFD8( &qword_1000CF800,  v62,  (uint64_t (*)(uint64_t))type metadata accessor for ConduitActor,  (uint64_t)&unk_1000AA700);
  uint64_t v66 = (void *)swift_allocObject(&unk_1000C4BB8, 40LL, 7LL);
  v66[2] = v64;
  uint64_t v66[3] = v65;
  v66[4] = v63;
  swift_retain(v64);
  uint64_t v67 = sub_10004EC20(v60, (uint64_t)&unk_1000CF868, (uint64_t)v66);
  uint64_t v68 = swift_release(v67);
  TURegisterIDSAvailabilityListener(v68);
  uint64_t v69 = OBJC_IVAR___CSDNeighborhoodActivityConduit_remoteDisplayDiscovery;
  uint64_t v70 = *(void **)&v63[OBJC_IVAR___CSDNeighborhoodActivityConduit_remoteDisplayDiscovery];
  uint64_t v71 = swift_allocObject(&unk_1000C4BE0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v71 + 16, v63);
  os_log_type_t v122 = sub_10007AE54;
  uint64_t v123 = v71;
  aBlock = _NSConcreteStackBlock;
  uint64_t v119 = 1107296256LL;
  uint64_t v120 = sub_1000538D4;
  id v121 = &unk_1000C4BF8;
  uint64_t v72 = _Block_copy(&aBlock);
  uint64_t v73 = v123;
  id v74 = v70;
  swift_release(v73);
  [v74 setDiscoverySessionStateChangedHandler:v72];
  _Block_release(v72);

  uint64_t v75 = *(void **)&v63[v69];
  os_log_type_t v122 = sub_1000587F8;
  uint64_t v123 = 0LL;
  aBlock = _NSConcreteStackBlock;
  uint64_t v119 = 1107296256LL;
  uint64_t v120 = sub_100053948;
  id v121 = &unk_1000C4C20;
  uint64_t v76 = _Block_copy(&aBlock);
  id v77 = v75;
  [v77 activateWithCompletion:v76];
  _Block_release(v76);

  v59((char *)v60, 1LL, 1LL, v58);
  uint64_t v78 = qword_1000D35E0;
  uint64_t v79 = (void *)swift_allocObject(&unk_1000C4C58, 40LL, 7LL);
  uint64_t v79[2] = v78;
  v79[3] = v65;
  v79[4] = v63;
  id v80 = v63;
  swift_retain(v78);
  uint64_t v81 = sub_10004EC20(v60, (uint64_t)&unk_1000CF878, (uint64_t)v79);
  swift_release(v81);
  uint64_t v82 = OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager;
  uint64_t v83 = *(void **)&v80[OBJC_IVAR___CSDNeighborhoodActivityConduit_conversationManager];
  sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v84 = v116;
  uint64_t v85 = v117;
  id v86 = *(void (**)(char *, void, uint64_t))(v116 + 104);
  unint64_t v87 = v105;
  v86(v105, enum case for DispatchQoS.QoSClass.userInteractive(_:), v117);
  uint64_t v88 = v80;
  id v89 = v83;
  uint64_t v90 = (void *)static OS_dispatch_queue.global(qos:)(v87);
  uint64_t v91 = *(void (**)(char *, uint64_t))(v84 + 8);
  v91(v87, v85);
  [v89 addDelegate:v88 queue:v90];

  [*(id *)&v80[v82] registerWithCompletionHandler:0];
  v86(v87, enum case for DispatchQoS.QoSClass.background(_:), v85);
  uint64_t v92 = (void *)static OS_dispatch_queue.global(qos:)(v87);
  v91(v87, v85);
  uint64_t v93 = swift_allocObject(&unk_1000C4BE0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v93 + 16, v88);
  os_log_type_t v122 = sub_10007AEE8;
  uint64_t v123 = v93;
  aBlock = _NSConcreteStackBlock;
  uint64_t v119 = 1107296256LL;
  uint64_t v120 = sub_100055CFC;
  id v121 = &unk_1000C4C70;
  id v94 = _Block_copy(&aBlock);
  swift_release(v123);
  uint64_t v95 = os_state_add_handler(v92, v94);
  _Block_release(v94);

  *(void *)&v88[OBJC_IVAR___CSDNeighborhoodActivityConduit_stateHandle] = v95;
  sub_100055D44();
  sub_100057478();
  sub_100056094();
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v96 = type metadata accessor for Logger(0LL);
  uint64_t v97 = sub_10000ADF4(v96, (uint64_t)qword_1000D3620);
  uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
  os_log_type_t v99 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v100 = 0;
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Initialized NeighborhoodActivityConduit", v100, 2u);
    swift_slowDealloc(v100, -1LL, -1LL);
  }

  sub_10000F2F0(v125);
  return v88;
}

uint64_t sub_10007A690(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10007A730(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  char v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10007A798;
  return v5(v2 + 32);
}

uint64_t sub_10007A798()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10007A7E8(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  char v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10007A850;
  return v5(v2 + 16);
}

uint64_t sub_10007A850()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  *uint64_t v2 = *(void *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10007A8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v12 = (void *)swift_task_alloc(dword_1000CF354);
  *(void *)(v6 + 24) = v12;
  void *v12 = v6;
  v12[1] = sub_10004D138;
  return sub_100048B4C(a2, a3, a4, a5, a6);
}

uint64_t sub_10007A920(uint64_t result, uint64_t a2, char *__dst, uint64_t a4)
{
  void v9[2] = __dst;
  void v9[3] = a4;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | result & 0x1000000000000000LL)) {
    return _StringGuts._slowWithCString<A>(_:)(sub_10007C540, v9, result, a2, (char *)&type metadata for () + 8);
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    *(void *)__src = result;
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (__dst)
    {
      size_t v7 = a4 - (void)__dst;
      uint64_t v6 = __src;
      goto LABEL_10;
    }

    __break(1u);
    goto LABEL_18;
  }

  if ((result & 0x1000000000000000LL) != 0)
  {
    uint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    Swift::Int result = _StringObject.sharedUTF8.getter(result, a2);
    uint64_t v6 = (char *)result;
    if (!result)
    {
      if (__dst)
      {
        size_t v7 = a4 - (void)__dst;
        unint64_t v8 = __dst;
        uint64_t v6 = 0LL;
        return (uint64_t)strncpy(v8, v6, v7);
      }

BOOL sub_10007AA10(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for NCProtoMemberAssociationPrimaryInfo(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  size_t v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_10000360C(&qword_1000CF828);
  __chkstk_darwin(v8);
  unint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_10000360C(&qword_1000CF740);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = &v31[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v31[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v31[-v18];
  uint64_t v20 = a1[1];
  uint64_t v21 = a2[1];
  if (*a1 == *a2 && v20 == v21
    || (char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v20, *a2, v21, 0LL), result = 0LL, (v22 & 1) != 0))
  {
    id v34 = v7;
    uint64_t v24 = (int *)type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
    if ((static UUID.== infix(_:_:)((char *)a1 + v24[5], (char *)a2 + v24[5]) & 1) != 0)
    {
      uint64_t v33 = v5;
      sub_1000052E0(0LL, &qword_1000CF830, &OBJC_CLASS___NSObject_ptr);
      if ((static NSObject.== infix(_:_:)(*(void *)((char *)a1 + v24[6]), *(void *)((char *)a2 + v24[6])) & 1) != 0)
      {
        sub_100005318((uint64_t)a1 + v24[7], (uint64_t)v19, &qword_1000CF740);
        sub_100005318((uint64_t)a2 + v24[7], (uint64_t)v17, &qword_1000CF740);
        uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_100005318((uint64_t)v19, (uint64_t)v10, &qword_1000CF740);
        sub_100005318((uint64_t)v17, v25, &qword_1000CF740);
        uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
        if (v26((uint64_t)v10, 1LL, v4) == 1)
        {
          sub_10000BFC8((uint64_t)v17, &qword_1000CF740);
          sub_10000BFC8((uint64_t)v19, &qword_1000CF740);
          if (v26(v25, 1LL, v4) == 1)
          {
            sub_10000BFC8((uint64_t)v10, &qword_1000CF740);
            return *(void *)((char *)a1 + v24[8]) == *(void *)((char *)a2 + v24[8]);
          }
        }

        else
        {
          sub_100005318((uint64_t)v10, (uint64_t)v14, &qword_1000CF740);
          if (v26(v25, 1LL, v4) != 1)
          {
            uint64_t v27 = v34;
            (*(void (**)(void))(v33 + 32))();
            uint64_t v28 = sub_10001CFD8( &qword_1000CF838,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoMemberAssociationPrimaryInfo,  (uint64_t)&protocol conformance descriptor for NCProtoMemberAssociationPrimaryInfo);
            uint64_t v29 = v27;
            int v32 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v27, v4, v28);
            uint64_t v30 = *(void (**)(_BYTE *, uint64_t))(v33 + 8);
            v30(v29, v4);
            sub_10000BFC8((uint64_t)v17, &qword_1000CF740);
            sub_10000BFC8((uint64_t)v19, &qword_1000CF740);
            v30(v14, v4);
            sub_10000BFC8((uint64_t)v10, &qword_1000CF740);
            if ((v32 & 1) != 0) {
              return *(void *)((char *)a1 + v24[8]) == *(void *)((char *)a2 + v24[8]);
            }
            return 0LL;
          }

          sub_10000BFC8((uint64_t)v17, &qword_1000CF740);
          sub_10000BFC8((uint64_t)v19, &qword_1000CF740);
          (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v14, v4);
        }

        sub_10000BFC8((uint64_t)v10, &qword_1000CF828);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10007ADBC()
{
  return sub_100081054(40LL);
}

uint64_t sub_10007ADC4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  size_t v7 = (void *)swift_task_alloc(dword_1000CF864);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *size_t v7 = v2;
  v7[1] = sub_1000193E4;
  return sub_1000581A8(a1, v4, v5, v6);
}

uint64_t sub_10007AE30()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10007AE54(char a1, uint64_t a2, uint64_t a3)
{
  return sub_100058270(a1, a2, a3, v3);
}

uint64_t sub_10007AE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007AE6C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10007AE74()
{
  return sub_100081054(40LL);
}

uint64_t sub_10007AE7C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  size_t v7 = (void *)swift_task_alloc(dword_1000CF874);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *size_t v7 = v2;
  v7[1] = sub_1000193E4;
  return sub_1000589D0(a1, v4, v5, v6);
}

uint64_t sub_10007AEE8(uint64_t a1)
{
  return sub_100055088(a1, v1);
}

uint64_t sub_10007AEF0(void **a1)
{
  return sub_10005690C(a1, v1, (uint64_t)&unk_1000C4D48, (uint64_t)&unk_1000CF8E0);
}

uint64_t sub_10007AF18(void **a1)
{
  return sub_10005690C(a1, v1, (uint64_t)&unk_1000C4CA8, (uint64_t)&unk_1000CF8A0);
}

uint64_t sub_10007AF44(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF89C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100056A60(a1, v4, v5, v7, v6);
}

uint64_t sub_10007AFBC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CF8AC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000CF8A8 + dword_1000CF8A8))(a1, v4);
}

uint64_t sub_10007B02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CDE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007B074(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  v3._countAndFlagsBits = 0x656E6F685069LL;
  v3._object = (void *)0xE600000000000000LL;
  if (String.hasPrefix(_:)(v3))
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
    v5._countAndFlagsBits = 1684099177LL;
    v5._object = (void *)0xE400000000000000LL;
    if (String.hasPrefix(_:)(v5))
    {
      swift_bridgeObjectRelease(a2);
      return 2LL;
    }

    else
    {
      v6._countAndFlagsBits = 0x5654656C707041LL;
      v6._object = (void *)0xE700000000000000LL;
      Swift::Bool v7 = String.hasPrefix(_:)(v6);
      swift_bridgeObjectRelease(a2);
      if (v7) {
        return 3LL;
      }
      else {
        return 0LL;
      }
    }
  }

uint64_t sub_10007B134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_10008155C();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for Data, v3);
  uint64_t v9 = result;
  if (v2)
  {
    Swift::String v5 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      sub_1000109D4(v6, *v5);
      sub_10008F414(v8, v6, v7);
      sub_10000BE18(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }

    while (v2);
    return v9;
  }

  return result;
}

uint64_t sub_10007B1CC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(a1 + 64);
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  uint64_t v35 = result;
  uint64_t v34 = v8;
  while (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_22:
    uint64_t v19 = *(void *)(*(void *)(v7 + 56) + 8 * v15);
    uint64_t result = swift_beginAccess(v19 + 64, v39, 0LL, 0LL);
    uint64_t v20 = *(void *)(v19 + 64);
    if (*(void *)(v20 + 16))
    {
      unint64_t v37 = v11;
      int64_t v40 = v13;
      Hasher.init(_seed:)(v38, *(void *)(v20 + 40));
      swift_retain(v19);
      swift_bridgeObjectRetain(v20);
      unint64_t v21 = sub_10000C47C(a2, a3, a4);
      uint64_t v23 = v22;
      String.hash(into:)(v38, v21, v22);
      swift_bridgeObjectRelease(v23);
      Swift::Int v24 = Hasher._finalize()();
      uint64_t v25 = -1LL << *(_BYTE *)(v20 + 32);
      unint64_t v26 = v24 & ~v25;
      if (((*(void *)(v20 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) != 0)
      {
        uint64_t v27 = ~v25;
        uint64_t v28 = *(void *)(v20 + 48);
        while (1)
        {
          uint64_t v29 = (uint64_t *)(v28 + 24 * v26);
          uint64_t v30 = *v29;
          uint64_t v31 = (void *)v29[1];
          int v32 = *((unsigned __int8 *)v29 + 16);
          if (v32)
          {
            if (v32 == 1)
            {
              if (a4 != 1) {
                goto LABEL_26;
              }
            }

            else if (a4 != 2)
            {
              goto LABEL_26;
            }
          }

          else if (a4)
          {
            goto LABEL_26;
          }

          BOOL v33 = v30 == a2 && v31 == a3;
          if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, a2, a3, 0LL) & 1) != 0)
          {
            swift_release(v35);
            swift_bridgeObjectRelease(v20);
            return v19;
          }

LABEL_43:
  swift_release(v7);
  return 0LL;
}

void sub_10007B4D4()
{
  if ((NCProtoContactInfo.hasIdentifier.getter() & 1) != 0)
  {
    NCProtoContactInfo.identifier.getter();
    uint64_t v1 = v0;
    id v2 = objc_allocWithZone(&OBJC_CLASS___CNMutableContact);
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1);
    id v4 = [v2 initWithIdentifier:v3];
  }

  else
  {
    id v4 = [objc_allocWithZone(CNMutableContact) init];
  }

  NCProtoContactInfo.givenName.getter();
  uint64_t v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  [v4 setGivenName:v7];

  NCProtoContactInfo.middleName.getter();
  uint64_t v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  [v4 setMiddleName:v10];

  NCProtoContactInfo.familyName.getter();
  uint64_t v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v4 setFamilyName:v13];

  NCProtoContactInfo.namePrefix.getter();
  uint64_t v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  [v4 setNamePrefix:v16];

  NCProtoContactInfo.nameSuffix.getter();
  uint64_t v18 = v17;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  [v4 setNameSuffix:v19];

  NCProtoContactInfo.nickname.getter();
  uint64_t v21 = v20;
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  [v4 setNickname:v22];

  NCProtoContactInfo.imageData.getter();
  __asm { BR              X10 }

void *sub_10007B6AC()
{
  uint64_t v3 = sub_10000BE18(v1, v2);
  if ((v2 & 0xFF000000000000LL) != 0)
  {
    uint64_t v4 = ((uint64_t (*)(uint64_t))NCProtoContactInfo.imageData.getter)(v3);
    unint64_t v6 = v5;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000BE18(v4, v6);
    [v0 setImageData:isa];

    uint64_t v8 = ((uint64_t (*)(void))NCProtoContactInfo.imageData.getter)();
    unint64_t v10 = v9;
    Class v11 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000BE18(v8, v10);
    [v0 setThumbnailImageData:v11];
  }

  if ((((uint64_t (*)(uint64_t))NCProtoContactInfo.hasOrganizationName.getter)(v3) & 1) != 0)
  {
    ((void (*)(void))NCProtoContactInfo.organizationName.getter)();
    uint64_t v13 = v12;
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    [v0 setOrganizationName:v14];
  }

  return v0;
}

uint64_t sub_10007B7CC(uint64_t a1)
{
  return sub_10007B7F0( a1,  &qword_1000CE380,  &OBJC_CLASS___TUNearbyConversationInfo_ptr,  &qword_1000CE388,  (void (*)(id *, uint64_t))sub_10008FE5C);
}

uint64_t sub_10007B7F0( uint64_t a1, unint64_t *a2, void *a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v21 = a1;
    }
    else {
      uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v12 = sub_1000052E0(0LL, a2, a3);
  uint64_t v13 = sub_100017D34(a4, a2, a3);
  uint64_t result = Set.init(minimumCapacity:)(v11, v12, v13);
  uint64_t v23 = result;
  if (v10)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v16);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v15) {
      return v23;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15) {
      return v23;
    }
  }

  if (v15 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v15; ++i)
      {
        uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a5(&v22, v18);
      }
    }

    else
    {
      NSString v19 = (void **)(a1 + 32);
      do
      {
        uint64_t v20 = *v19++;
        a5(&v22, (uint64_t)v20);

        --v15;
      }

      while (v15);
    }

    return v23;
  }

  __break(1u);
  return result;
}

uint64_t sub_10007B96C(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v4 = qword_1000D35E0;
  v3[18] = qword_1000D35E0;
  return swift_task_switch(sub_10007B9D8, v4, 0LL);
}

uint64_t sub_10007B9D8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 152) = v2;
  *(void *)(v0 + 160) = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 136);
    swift_bridgeObjectRetain(v1);
    sub_10001885C(v2, v1, v17, v3, v4, v5, v6, v7, v8);
    *(void *)(v0 + 168) = *(void *)(v9 + OBJC_IVAR___CSDNeighborhoodActivityConduit_deviceManager);
    if (qword_1000CD638 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    return swift_task_switch(sub_10007BBC8, qword_1000D35C8, 0LL);
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000ADF4(v11, (uint64_t)qword_1000D3620);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Rejecting to cancel laguna handoff request because we're not currently in a session with the specified device.",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    id v16 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
    swift_willThrow(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10007BBC8()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  swift_beginAccess(v2 + 48, v0 + 2, 0LL, 0LL);
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = swift_task_alloc(48LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v6 + 24) = v1;
  *(_BYTE *)(v6 + 32) = 0;
  swift_bridgeObjectRetain(v5);
  v0[22] = sub_10003A664(sub_1000365F8, v6, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v6);
  return swift_task_switch(sub_10007BC84, v3, 0LL);
}

uint64_t sub_10007BC84()
{
  if (*(void *)(v0 + 176)) {
    return swift_task_switch(sub_10007BDB0, qword_1000D35C8, 0LL);
  }
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Rejecting to cancel laguna handoff request because we're not currently in a session with the specified device.",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  id v7 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
  swift_willThrow(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007BDB0()
{
  uint64_t v1 = v0[22];
  swift_beginAccess(v1 + 64, v0 + 11, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 64);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = v0[15];
    uint64_t v3 = (void *)v0[16];
    Hasher.init(_seed:)(v22, *(void *)(v2 + 40));
    unint64_t v23 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
    swift_bridgeObjectRetain(v2);
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(v24);
    unint64_t v23 = 0xD000000000000023LL;
    unint64_t v24 = 0x80000001000A3BA0LL;
    v5._countAndFlagsBits = v4;
    v5._object = v3;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 41LL;
    v6._object = (void *)0xE100000000000000LL;
    String.append(_:)(v6);
    unint64_t v7 = v24;
    String.hash(into:)(v22, v23, v24);
    swift_bridgeObjectRelease(v7);
    Swift::Int v8 = Hasher._finalize()();
    uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
    unint64_t v10 = v8 & ~v9;
    if (((*(void *)(v2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
    {
      uint64_t v11 = ~v9;
      uint64_t v12 = v0[16];
      uint64_t v13 = *(void *)(v2 + 48);
      while (1)
      {
        uint64_t v14 = v13 + 24 * v10;
        if (*(unsigned __int8 *)(v14 + 16) >= 2u)
        {
          uint64_t v15 = v0[15];
          uint64_t v16 = *(void *)(v14 + 8);
          BOOL v17 = *(void *)v14 == v15 && v16 == v12;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v14, v16, v15, v0[16], 0LL) & 1) != 0) {
            break;
          }
        }

        unint64_t v10 = (v10 + 1) & v11;
        if (((*(void *)(v2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
          goto LABEL_13;
        }
      }

      uint64_t v18 = v0[18];
      swift_bridgeObjectRelease(v2);
      NSString v19 = sub_10007C08C;
    }

    else
    {
LABEL_13:
      uint64_t v18 = v0[18];
      swift_bridgeObjectRelease(v2);
      NSString v19 = sub_100082E50;
    }

    uint64_t v20 = v18;
  }

  else
  {
    uint64_t v20 = v0[18];
    NSString v19 = sub_10007BF88;
  }

  return swift_task_switch(v19, v20, 0LL);
}

uint64_t sub_10007BF88()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000ADF4(v1, (uint64_t)qword_1000D3620);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::String v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)Swift::String v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Rejecting to cancel laguna handoff request because we're not currently in a session with the specified device.",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  id v6 = (id)TUMakeNeighborhoodConduitError(3LL, 0LL);
  swift_willThrow(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007C08C()
{
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = *(void *)(v0 + 128);
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 112) = sub_10009BE3C(v8, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cancelling Laguna HandOff with %s.", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 128), 2LL);
  }

  uint64_t v11 = *(void *)(v0 + 176);
  uint64_t v12 = *(void **)(*(void *)(v0 + 136) + OBJC_IVAR___CSDNeighborhoodActivityConduit_remoteDisplayDiscovery);
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 exitDiscoverySessionWithReason:v13];

  swift_release(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10007C29C(char a1, uint64_t a2)
{
}

uint64_t sub_10007C2A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF8DC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100056298(a1, v4, v5, v7, v6);
}

uint64_t sub_10007C320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CE5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007C368(__int128 *a1)
{
  return sub_100057578(a1, v1);
}

uint64_t sub_10007C370()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10007C3D4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1000CF904);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000193E4;
  return sub_1000576FC(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

uint64_t sub_10007C450()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10007C474(void **a1)
{
  return sub_100055E84(a1, *(void **)(v1 + 16));
}

uint64_t sub_10007C47C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10007C4B0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF934);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100055FB4(a1, v4, v5, v7, v6);
}

unint64_t sub_10007C528@<X0>(unint64_t *a1@<X8>)
{
  return sub_1000061F4(v1, a1);
}

char *sub_10007C540(char *a1)
{
  return sub_100089214(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10007C558(uint64_t *a1)
{
  return sub_100059AA0(a1, *(void **)(v1 + 16), (uint64_t)&unk_1000C4F50, (uint64_t)&unk_1000CFA78);
}

uint64_t sub_10007C580(uint64_t *a1)
{
  return sub_100059AA0(a1, *(void **)(v1 + 16), (uint64_t)&unk_1000C4E38, (uint64_t)&unk_1000CF9B0);
}

uint64_t sub_10007C5AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF9AC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100059BDC(a1, v4, v5, v7, v6);
}

uint64_t sub_10007C628(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CF9D4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_10005D588(a1, v4, v5, v7, v6);
}

uint64_t sub_10007C6A0(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = type metadata accessor for JoinFailureContext(0LL);
  v2[22] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[23] = v4;
  v2[24] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t active = type metadata accessor for NCProtoJoinActiveConversationRequest(0LL);
  v2[25] = active;
  uint64_t v6 = *(void *)(active - 8);
  v2[26] = v6;
  v2[27] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NCProtoJoinActiveConversationResponse(0LL);
  v2[28] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[29] = v8;
  v2[30] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for JoinContinuityConversationRequestContext(0LL);
  v2[31] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[32] = v10;
  v2[33] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v2[34] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[35] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[36] = swift_task_alloc(v13);
  v2[37] = swift_task_alloc(v13);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v14 = qword_1000D35E0;
  v2[38] = qword_1000D35E0;
  return swift_task_switch(sub_10007C7E0, v14, 0LL);
}

uint64_t sub_10007C7E0()
{
  if ([*(id *)(*(void *)(v0 + 168) + OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags) lagunaIncomingCallsEnabled])
  {
    CurrentValueSubject.value.getter();
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v1 = *(void *)(v0 + 24);
    *(void *)(v0 + 312) = v2;
    *(void *)(v0 + 320) = v1;
    if (v1)
    {
      uint64_t v3 = *(void *)(v0 + 48);
      uint64_t v33 = *(void *)(v0 + 40);
      uint64_t v34 = *(void *)(v0 + 32);
      uint64_t v4 = *(void *)(v0 + 56);
      uint64_t v5 = *(void *)(v0 + 64);
      uint64_t v7 = *(void *)(v0 + 72);
      uint64_t v6 = *(void *)(v0 + 80);
      uint64_t v8 = *(void **)(v0 + 160);
      swift_bridgeObjectRetain(v1);
      sub_10001885C(v2, v1, v34, v33, v3, v4, v5, v7, v6);
      id v9 = [v8 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

      sub_10005ADA8();
      uint64_t v10 = *(void *)(v0 + 296);
      uint64_t v22 = *(void *)(v0 + 288);
      uint64_t v23 = *(void *)(v0 + 272);
      unint64_t v24 = *(void **)(v0 + 160);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8LL);
      *(void *)(v0 + 328) = v25;
      v25(v10, v23);
      id v26 = [v24 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      JoinContinuityConversationRequestContext.init(conversationUUID:isAudioEnabled:isVideoEnabled:wantsStagingArea:)( v22,  [v24 isAudioEnabled],  objc_msgSend(v24, "isVideoEnabled"),  objc_msgSend(v24, "wantsStagingArea"));
      uint64_t v27 = sub_10000360C((uint64_t *)&unk_1000CFE20);
      *(void *)(v0 + 336) = v27;
      uint64_t v28 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
      uint64_t v29 = *(void *)(v28 + 72);
      *(void *)(v0 + 344) = v29;
      LODWORD(v28) = *(_DWORD *)(v28 + 80);
      *(_DWORD *)(v0 + 440) = v28;
      uint64_t v30 = swift_allocObject( v27,  ((v28 + 32LL) & ~(unint64_t)v28) + v29,  v28 | 7LL);
      *(void *)(v0 + 352) = v30;
      *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
      JoinContinuityConversationRequestContext.queryItem.getter();
      uint64_t v35 = (uint64_t (*)(uint64_t, char))((char *)&dword_1000CEFA0 + dword_1000CEFA0);
      uint64_t v31 = (void *)swift_task_alloc(unk_1000CEFA4);
      *(void *)(v0 + 360) = v31;
      void *v31 = v0;
      v31[1] = sub_10007CB88;
      return v35(v30, 0);
    }

    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_10000ADF4(v12, (uint64_t)qword_1000D3620);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[JoinConversation] Rejecting request because we're not in a continuity session.",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t v11 = (void *)TUMakeNeighborhoodConduitError(7LL, 0LL);
  }

  else
  {
    uint64_t v11 = (void *)TUMakeNeighborhoodConduitError(10101LL, 0LL);
  }

  swift_willThrow(v11);
  uint64_t v17 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007CB88()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 368LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[44];
  if (v0)
  {
    uint64_t v5 = v2[40];
    uint64_t v6 = v2[38];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    uint64_t v7 = sub_10007D2DC;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v9 = v2[38];
    swift_bridgeObjectRelease(v4);
    uint64_t v7 = sub_10007CC10;
    uint64_t v8 = v9;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_10007CC10()
{
  if ([*(id *)(v0 + 160) wantsStagingArea])
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 320));
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v1 = *(void **)(v0 + 160);
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v2, (uint64_t)qword_1000D3620);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v49 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
      uint64_t v5 = *(void *)(v0 + 288);
      uint64_t v6 = *(void *)(v0 + 272);
      uint64_t v52 = *(void *)(v0 + 256);
      uint64_t v53 = *(void *)(v0 + 248);
      *(void *)os_log_type_t type = *(void *)(v0 + 264);
      uint64_t v7 = *(void **)(v0 + 160);
      id v48 = v7;
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      v57[0] = v51;
      *(_DWORD *)uint64_t v8 = 136315138;
      id v9 = [v7 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

      uint64_t v10 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
      unint64_t v13 = v12;
      v49(v5, v6);
      *(void *)(v0 + 152) = sub_10009BE3C(v11, v13, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13);

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[JoinConversation] Opened staging area for %s.", v8, 0xCu);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);

      (*(void (**)(os_log_type_t *, uint64_t))(v52 + 8))(*(os_log_type_t **)type, v53);
    }

    else
    {
      uint64_t v31 = *(void *)(v0 + 256);
      uint64_t v30 = *(void *)(v0 + 264);
      uint64_t v32 = *(void *)(v0 + 248);
      uint64_t v33 = *(void **)(v0 + 160);

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }

    uint64_t v34 = *(void *)(v0 + 288);
    uint64_t v35 = *(void *)(v0 + 264);
    uint64_t v36 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 216);
    uint64_t v38 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 296));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v14 = *(void *)(v0 + 320);
    os_log_type_t v15 = *(void **)(v0 + 160);
    uint64_t v16 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 376) = sub_10000ADF4(v16, (uint64_t)qword_1000D3620);
    id v17 = v15;
    swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = *(void *)(v0 + 320);
      unint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
      uint64_t v50 = *(void *)(v0 + 312);
      os_log_type_t typea = v19;
      uint64_t v21 = *(void *)(v0 + 288);
      uint64_t v22 = *(void *)(v0 + 272);
      uint64_t v23 = *(void **)(v0 + 160);
      uint64_t v24 = swift_slowAlloc(34LL, -1LL);
      uint64_t v54 = swift_slowAlloc(64LL, -1LL);
      v57[0] = v54;
      *(_DWORD *)uint64_t v24 = 136315906;
      id v25 = [v23 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      uint64_t v26 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v22, v26);
      unint64_t v29 = v28;
      v47(v21, v22);
      *(void *)(v0 + 136) = sub_10009BE3C(v27, v29, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v29);

      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain(v20);
      *(void *)(v0 + 144) = sub_10009BE3C(v50, v20, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease_n(v20, 3LL);
      *(_WORD *)(v24 + 22) = 1024;
      LODWORD(v21) = [v23 isAudioEnabled];

      *(_DWORD *)(v0 + 432) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 436, v24 + 24, v24 + 28);

      *(_WORD *)(v24 + 28) = 1024;
      LODWORD(v21) = [v23 isVideoEnabled];

      *(_DWORD *)(v0 + 436) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 436, v0 + 440, v24 + 30, v24 + 34);

      _os_log_impl( (void *)&_mh_execute_header,  v18,  typea,  "[JoinConversation] Sending join request for %s to %s (isAudioEnabled=%{BOOL}d isVideoEnabled=%{BOOL}d)",  (uint8_t *)v24,  0x22u);
      swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      uint64_t v40 = *(void *)(v0 + 320);
      id v41 = *(void **)(v0 + 160);

      swift_bridgeObjectRelease_n(v40, 2LL);
    }

    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v43 = *(void *)(v0 + 160);
    uint64_t v44 = swift_task_alloc(32LL);
    *(void *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = v43;
    uint64_t v45 = sub_10001CFD8( &qword_1000CF530,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoJoinActiveConversationRequest,  (uint64_t)&protocol conformance descriptor for NCProtoJoinActiveConversationRequest);
    static Message.with(_:)(sub_100082450, v44, v42, v45);
    swift_task_dealloc(v44);
    if (qword_1000CD638 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    *(void *)(v0 + 384) = qword_1000D35C8;
    id v46 = (void *)swift_task_alloc(dword_1000CF52C);
    *(void *)(v0 + 392) = v46;
    *id v46 = v0;
    v46[1] = sub_10007D368;
    return sub_10003B06C( *(void *)(v0 + 240),  11,  *(void *)(v0 + 216),  *(void *)(v0 + 312),  *(void *)(v0 + 320),  0);
  }

uint64_t sub_10007D2DC()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007D368()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10007D554;
  }
  else {
    uint64_t v4 = sub_10007D3CC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 384), 0LL);
}

uint64_t sub_10007D3CC()
{
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[26];
  swift_bridgeObjectRelease(v0[40]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10007D450, v1, 0LL);
}

uint64_t sub_10007D450()
{
  uint64_t v1 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 248);
  if (v3)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  v2,  "[JoinConversation] Successfully joined active conversation!",  v7,  2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007D554()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[38];
  (*(void (**)(void, void))(v0[26] + 8LL))(v0[27], v0[25]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10007D5A8, v2, 0LL);
}

uint64_t sub_10007D5A8()
{
  uint64_t v1 = v0 + 88;
  uint64_t v2 = (void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 400);
  id v4 = *(id *)(v0 + 160);
  swift_errorRetain(v3);
  id v5 = v4;
  uint64_t v6 = swift_errorRetain(v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 400);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v41 = *(void *)(v0 + 272);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v11 = *(void **)(v0 + 160);
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    unint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v43;
    *(_DWORD *)uint64_t v12 = 136315394;
    id v14 = [v11 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v16 = UUID.uuidString.getter(v15);
    unint64_t v18 = v17;
    v42(v10, v41);
    *(void *)(v0 + 120) = sub_10009BE3C(v16, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v18);

    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v9);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 128) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 14, v12 + 22);
    *unint64_t v13 = v19;
    uint64_t v1 = v0 + 88;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[JoinConversation] Failed to join active conversation %s due to %@",  (uint8_t *)v12,  0x16u);
    uint64_t v20 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v13, 1LL, v20);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    uint64_t v21 = v12;
    uint64_t v2 = (void **)(v0 + 96);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 400);
    uint64_t v23 = *(void **)(v0 + 160);

    swift_errorRelease(v22);
    swift_errorRelease(v22);
  }

  uint64_t v24 = *(void *)(v0 + 400);
  *(void *)(v0 + 88) = v24;
  swift_errorRetain(v24);
  uint64_t v25 = sub_10000360C(&qword_1000CF8D0);
  type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
  uint64_t v27 = v26;
  int v28 = swift_dynamicCast(v2, v1, v25, v26, 6LL);
  uint64_t v29 = 0LL;
  if (v28)
  {
    uint64_t v30 = *v2;
    *(void *)(v0 + 112) = v30;
    uint64_t v31 = sub_10001CFD8( (unint64_t *)&qword_1000CD9E0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
    _BridgedStoredNSError.code.getter((void *)(v0 + 104), v27, v31);

    uint64_t v29 = *(void *)(v0 + 104);
  }

  uint64_t v32 = *(unsigned __int8 *)(v0 + 440);
  uint64_t v33 = *(void *)(v0 + 336);
  uint64_t v34 = *(void *)(v0 + 288);
  uint64_t v35 = ((v32 + 32) & ~v32) + *(void *)(v0 + 344);
  uint64_t v36 = v32 | 7;
  id v37 = [*(id *)(v0 + 160) uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

  JoinFailureContext.init(conversationUUID:nacErrorCode:)(v34, v29, v28 ^ 1u);
  uint64_t v38 = swift_allocObject(v33, v35, v36);
  *(void *)(v0 + 408) = v38;
  *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000A96A0;
  JoinFailureContext.queryItem.getter();
  uint64_t v44 = (uint64_t (*)(uint64_t, char))((char *)&dword_1000CEFA0 + dword_1000CEFA0);
  uint64_t v39 = (void *)swift_task_alloc(unk_1000CEFA4);
  *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  void *v39 = v0;
  v39[1] = sub_10007D984;
  return v44(v38, 0);
}

uint64_t sub_10007D984()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 416);
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 408);
  uint64_t v5 = *(void *)(v2 + 304);
  swift_bridgeObjectRelease(v4);
  if (v0) {
    uint64_t v6 = sub_10007DAB0;
  }
  else {
    uint64_t v6 = sub_10007D9F4;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10007D9F4()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DAB0()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  swift_errorRelease(*(void *)(v0 + 400));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DB64(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for NCProtoDeclineContinuityCallRequest(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NCProtoDeclineContinuityCallResponse(0LL);
  v2[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[21] = v6;
  v2[22] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v2[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[24] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[25] = swift_task_alloc(v9);
  v2[26] = swift_task_alloc(v9);
  v2[27] = swift_task_alloc(v9);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v10 = qword_1000D35E0;
  v2[28] = qword_1000D35E0;
  return swift_task_switch(sub_10007DC60, v10, 0LL);
}

uint64_t sub_10007DC60()
{
  if (![*(id *)(*(void *)(v0 + 128) + OBJC_IVAR___CSDNeighborhoodActivityConduit_featureFlags) lagunaIncomingCallsEnabled])
  {
    uint64_t v29 = 10101LL;
LABEL_13:
    id v35 = (id)TUMakeNeighborhoodConduitError(v29, 0LL);
    uint64_t v37 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    uint64_t v38 = *(void *)(v0 + 200);
    uint64_t v39 = *(void *)(v0 + 176);
    uint64_t v40 = *(void *)(v0 + 152);
    swift_willThrow(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  CurrentValueSubject.value.getter();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 232) = v1;
  if (!v1)
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    uint64_t v31 = sub_10000ADF4(v30, (uint64_t)qword_1000D3620);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "[DeclineCall] Rejecting request because we're not in a continuity session",  v34,  2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    uint64_t v29 = 7LL;
    goto LABEL_13;
  }

  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain(v1);
  sub_10001885C(v2, v1, v3, v4, v5, v6, v7, v8, v9);
  if (qword_1000CD690 != -1) {
    swift_once(&qword_1000CD690, sub_100088E24);
  }
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 240) = sub_10000ADF4(v14, (uint64_t)qword_1000D3620);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  *(void *)(v0 + 248) = v15;
  uint64_t v16 = v15(v11, v10, v13);
  unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 184);
  if (v19)
  {
    uint64_t v47 = *(void *)(v0 + 192);
    uint64_t v49 = v2;
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v48;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v21, v23);
    unint64_t v26 = v25;
    *(void *)(v0 + 112) = sub_10009BE3C(v24, v25, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v22 + 4, v22 + 12);
    unint64_t v27 = v26;
    uint64_t v2 = v49;
    swift_bridgeObjectRelease(v27);
    int v28 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v28(v20, v21);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "[DeclineCall] Sending request decline call request for %s",  v22,  0xCu);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    int v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 192) + 8LL);
    v28(v20, v21);
  }

  *(void *)(v0 + 256) = v28;
  uint64_t v42 = *(void *)(v0 + 136);
  uint64_t v43 = *(void *)(v0 + 120);
  uint64_t v44 = swift_task_alloc(32LL);
  *(void *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = v43;
  uint64_t v45 = sub_10001CFD8( &qword_1000CFE10,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoDeclineContinuityCallRequest,  (uint64_t)&protocol conformance descriptor for NCProtoDeclineContinuityCallRequest);
  static Message.with(_:)(sub_100082434, v44, v42, v45);
  swift_task_dealloc(v44);
  if (qword_1000CD638 != -1) {
    swift_once(&qword_1000CD638, sub_10001FF5C);
  }
  *(void *)(v0 + 264) = qword_1000D35C8;
  id v46 = (void *)swift_task_alloc(dword_1000CF514);
  *(void *)(v0 + 272) = v46;
  *id v46 = v0;
  v46[1] = sub_10007E114;
  return sub_10003B5B4(*(void *)(v0 + 176), 12, *(void *)(v0 + 152), v2, v1, 0);
}

uint64_t sub_10007E114()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 272);
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10007E3D8;
  }
  else {
    uint64_t v4 = sub_10007E178;
  }
  return swift_task_switch(v4, *(void *)(v2 + 264), 0LL);
}

uint64_t sub_10007E178()
{
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  swift_bridgeObjectRelease(v0[29]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10007E1F8, v1, 0LL);
}

uint64_t sub_10007E1F8()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(v0 + 248))( *(void *)(v0 + 208),  *(void *)(v0 + 120),  *(void *)(v0 + 184));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    unint64_t v11 = v10;
    *(void *)(v0 + 104) = sub_10009BE3C(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    v17(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[DeclineCall] Successfully declined call %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v0 + 256))(*(void *)(v0 + 208), *(void *)(v0 + 184));
  }

  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 176);
  uint64_t v15 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E3D8()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  (*(void (**)(void, void))(v0[18] + 8LL))(v0[19], v0[17]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10007E428, v1, 0LL);
}

uint64_t sub_10007E428()
{
  uint64_t v1 = *(void *)(v0 + 280);
  (*(void (**)(void, void, void))(v0 + 248))( *(void *)(v0 + 200),  *(void *)(v0 + 120),  *(void *)(v0 + 184));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 280);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = sub_10001CFD8( &qword_1000CE780,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    unint64_t v12 = v11;
    *(void *)(v0 + 88) = sub_10009BE3C(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    v23(v6, v7);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v5);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 96) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v8 + 14, v8 + 22);
    *uint64_t v24 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "[DeclineCall] Failed to decline call %s due to %@",  (uint8_t *)v8,  0x16u);
    uint64_t v14 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v24, 1LL, v14);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 280);
    (*(void (**)(void, void))(v0 + 256))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 176);
  uint64_t v20 = *(void *)(v0 + 152);
  swift_willThrow(v21);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E6C4()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for NCProtoContactHandleAnonym.AnonymType(0LL);
  v1[14] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[15] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[16] = swift_task_alloc(v4);
  v1[17] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for NCProtoContactHandleAnonym(0LL);
  v1[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[19] = v6;
  v1[20] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NCProtoContactInfo(0LL);
  v1[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[22] = v8;
  v1[23] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NCProtoAddressableContact(0LL);
  v1[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[25] = v10;
  v1[26] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AddressableContactsRequest = type metadata accessor for NCProtoGetAddressableContactsRequest(0LL);
  v1[27] = AddressableContactsRequest;
  uint64_t v12 = *(void *)(AddressableContactsRequest - 8);
  v1[28] = v12;
  v1[29] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AddressableContactsResponse = type metadata accessor for NCProtoGetAddressableContactsResponse(0LL);
  v1[30] = AddressableContactsResponse;
  uint64_t v14 = *(void *)(AddressableContactsResponse - 8);
  v1[31] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[32] = swift_task_alloc(v15);
  v1[33] = swift_task_alloc(v15);
  v1[34] = swift_task_alloc(v15);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v16 = qword_1000D35E0;
  v1[35] = qword_1000D35E0;
  return swift_task_switch(sub_10007E848, v16, 0LL);
}

uint64_t sub_10007E848()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v0 + 288) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    swift_bridgeObjectRetain(v2);
    sub_10001885C(v1, v2, v3, v4, v5, v6, v7, v8, v9);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000ADF4(v10, (uint64_t)qword_1000D3620);
    *(void *)(v0 + 296) = v11;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[GetContacts] Sending get contacts request...", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    NCProtoGetAddressableContactsRequest.init()();
    if (qword_1000CD638 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    *(void *)(v0 + 304) = qword_1000D35C8;
    unint64_t v15 = (void *)swift_task_alloc(dword_1000CF4D4);
    *(void *)(v0 + 312) = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_10007EB80;
    return sub_10003C58C(*(void *)(v0 + 272), 6, *(void *)(v0 + 232), v1, v2, 0);
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10000ADF4(v17, (uint64_t)qword_1000D3620);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "[GetContacts] Rejecting get contacts request because we don't have an active laguna session.",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    id v22 = (id)TUMakeNeighborhoodConduitError(7LL, 0LL);
    swift_willThrow(v22);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 256);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 184);
    uint64_t v28 = *(void *)(v0 + 160);
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v29 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10007EB80()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 312);
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10007EBE4;
  }
  else {
    uint64_t v4 = sub_10007ECE0;
  }
  return swift_task_switch(v4, *(void *)(v2 + 304), 0LL);
}

uint64_t sub_10007EBE4()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  (*(void (**)(void, void))(v0[28] + 8LL))(v0[29], v0[27]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10007EC34, v1, 0LL);
}

uint64_t sub_10007EC34()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007ECE0()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  (*(void (**)(void, void))(v0[28] + 8LL))(v0[29], v0[27]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10007ED30, v1, 0LL);
}

uint64_t sub_10007ED30()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[34];
  uint64_t v3 = v1[32];
  uint64_t v4 = v1[30];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1[31] + 16LL);
  v5(v1[33], v2, v4);
  uint64_t v6 = v5(v3, v2, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = v1[32];
    uint64_t v9 = v1[33];
    uint64_t v12 = v1[30];
    uint64_t v11 = v1[31];
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v13 = 134218240;
    uint64_t AddressableContacts = NCProtoGetAddressableContactsResponse.contacts.getter();
    uint64_t v15 = *(void *)(AddressableContacts + 16);
    swift_bridgeObjectRelease(AddressableContacts);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v9, v12);
    v1[11] = v15;
    uint64_t v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 11, v1 + 12, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2048;
    uint64_t v18 = v10;
    uint64_t v19 = NCProtoGetAddressableContactsResponse.contactSortOrder.getter(v17);
    uint64_t v83 = v16;
    v16(v18, v12);
    v1[12] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 12, v1 + 13, v13 + 14, v13 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[GetContacts] Received contacts; count=%ld, contactSortOrder=%lld.",
      (uint8_t *)v13,
      0x16u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    uint64_t v20 = v1[33];
    uint64_t v21 = v1[30];
    id v22 = *(void (**)(uint64_t, uint64_t))(v1[31] + 8LL);
    v22(v1[32], v21);
    uint64_t v83 = v22;
    v22(v20, v21);
  }

  uint64_t v23 = NCProtoGetAddressableContactsResponse.hasContactSortOrder.getter();
  if ((v23 & 1) != 0) {
    uint64_t v82 = NCProtoGetAddressableContactsResponse.contactSortOrder.getter(v23);
  }
  else {
    uint64_t v82 = 0LL;
  }
  uint64_t v24 = NCProtoGetAddressableContactsResponse.contacts.getter();
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    uint64_t v27 = v1[25];
    uint64_t v87 = v1[22];
    uint64_t v98 = v1[19];
    uint64_t v95 = v1[15];
    specialized ContiguousArray.reserveCapacity(_:)(v26);
    uint64_t v28 = 0LL;
    uint64_t v81 = v25;
    unint64_t v86 = v25 + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v88 = v27;
    uint64_t v84 = *(uint64_t (**)(void, unint64_t, void))(v27 + 16);
    uint64_t v85 = *(void *)(v27 + 72);
    int v93 = enum case for NCProtoContactHandleAnonym.AnonymType.emailAddress(_:);
    int v94 = enum case for NCProtoContactHandleAnonym.AnonymType.phoneNumber(_:);
    uint64_t v89 = v26;
    os_log_type_t v99 = v1;
    do
    {
      uint64_t v39 = v1[23];
      uint64_t v40 = v1[21];
      uint64_t v41 = v84(v1[26], v86 + v28 * v85, v1[24]);
      NCProtoAddressableContact.contactInfo.getter(v41);
      sub_10007B4D4();
      uint64_t v43 = v42;
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 8))(v39, v40);
      NCProtoAddressableContact.contactIdentifier.getter(v44);
      uint64_t v29 = v45;
      uint64_t v46 = NCProtoAddressableContact.handleAnonyms.getter();
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)(v46 + 16);
      uint64_t v92 = v43;
      if (v48)
      {
        uint64_t v91 = v29;
        specialized ContiguousArray.reserveCapacity(_:)(v48);
        uint64_t v90 = v47;
        unint64_t v49 = v47 + ((*(unsigned __int8 *)(v98 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
        uint64_t v96 = *(uint64_t (**)(void, unint64_t, void))(v98 + 16);
        uint64_t v97 = *(void *)(v98 + 72);
        do
        {
          uint64_t v61 = v1[17];
          uint64_t v62 = v1[16];
          uint64_t v63 = v1[14];
          uint64_t v64 = v96(v1[20], v49, v1[18]);
          NCProtoContactHandleAnonym.identifier.getter(v64);
          uint64_t v66 = v65;
          NCProtoContactHandleAnonym.label.getter();
          uint64_t v68 = v67;
          NCProtoContactHandleAnonym.localizedLabel.getter();
          uint64_t v70 = v69;
          NCProtoContactHandleAnonym.type.getter();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v62, v61, v63);
          int v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 88))(v62, v63);
          if (v71 == v94)
          {
            uint64_t v50 = *(void (**)(void, void))(v95 + 8);
            uint64_t v51 = 1LL;
          }

          else
          {
            uint64_t v50 = *(void (**)(void, void))(v95 + 8);
            if (v71 == v93)
            {
              uint64_t v51 = 2LL;
            }

            else
            {
              v50(v99[16], v99[14]);
              uint64_t v51 = 0LL;
            }
          }

          uint64_t v100 = v99[20];
          uint64_t v52 = v99[18];
          v50(v99[17], v99[14]);
          id v53 = objc_allocWithZone(&OBJC_CLASS___TUContinuityHandleAnonym);
          NSString v54 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v66);
          NSString v55 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v68);
          NSString v56 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v70);
          id v57 = [v53 initWithIdentifier:v54 label:v55 localizedDisplayName:v56 type:v51];

          uint64_t v1 = v99;
          uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 8))(v100, v52);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v58);
          uint64_t v59 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v59);
          uint64_t v60 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
          specialized ContiguousArray._endMutation()(v60);
          v49 += v97;
          --v48;
        }

        while (v48);
        swift_bridgeObjectRelease(v90);
        uint64_t v29 = v91;
      }

      else
      {
        swift_bridgeObjectRelease(v46);
      }

      ++v28;
      uint64_t v103 = v1[26];
      uint64_t v30 = v1[24];
      uint64_t v31 = sub_10007B7F0( (uint64_t)_swiftEmptyArrayStorage,  &qword_1000CE3C0,  &OBJC_CLASS___TUContinuityHandleAnonym_ptr,  &qword_1000CE3C8,  (void (*)(id *, uint64_t))sub_10008FEB0);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      id v32 = objc_allocWithZone(&OBJC_CLASS___TUContinuitySessionContact);
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      sub_1000052E0(0LL, &qword_1000CE3C0, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
      sub_100017D34(&qword_1000CE3C8, &qword_1000CE3C0, &OBJC_CLASS___TUContinuityHandleAnonym_ptr);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v31);
      id v35 = [v32 initWithContact:v92 contactIdentifier:v33 anonyms:isa];

      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8))(v103, v30);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      uint64_t v37 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v37);
      uint64_t v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      specialized ContiguousArray._endMutation()(v38);
    }

    while (v28 != v89);
    swift_bridgeObjectRelease(v81);
  }

  else
  {
    swift_bridgeObjectRelease(v24);
  }

  uint64_t v72 = v1[33];
  uint64_t v73 = v1[34];
  uint64_t v74 = v1[32];
  uint64_t v76 = v1[29];
  uint64_t v75 = v1[30];
  uint64_t v77 = v1[26];
  uint64_t v78 = v1[23];
  uint64_t v79 = v1[20];
  uint64_t v102 = v1[17];
  uint64_t v104 = v1[16];
  uint64_t v101 = sub_10007B7F0( (uint64_t)_swiftEmptyArrayStorage,  &qword_1000CE400,  &OBJC_CLASS___TUContinuitySessionContact_ptr,  &qword_1000CE408,  (void (*)(id *, uint64_t))sub_10008FE94);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v83(v73, v75);
  swift_task_dealloc(v73);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  return ((uint64_t (*)(uint64_t, uint64_t))v1[1])(v101, v82);
}

uint64_t sub_10007F420(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t ImageForContactRequest = type metadata accessor for NCProtoGetImageForContactRequest(0LL);
  v3[15] = ImageForContactRequest;
  uint64_t v5 = *(void *)(ImageForContactRequest - 8);
  v3[16] = v5;
  v3[17] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ImageForContactResponse = type metadata accessor for NCProtoGetImageForContactResponse(0LL);
  v3[18] = ImageForContactResponse;
  uint64_t v7 = *(void *)(ImageForContactResponse - 8);
  v3[19] = v7;
  v3[20] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v8 = qword_1000D35E0;
  v3[21] = qword_1000D35E0;
  return swift_task_switch(sub_10007F4DC, v8, 0LL);
}

uint64_t sub_10007F4DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v0 + 176) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    swift_bridgeObjectRetain(v2);
    sub_10001885C(v1, v2, v3, v4, v5, v6, v7, v8, v9);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000ADF4(v10, (uint64_t)qword_1000D3620);
    *(void *)(v0 + 184) = v11;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[GetContactImage] Sending get contact image request...",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 104);

    uint64_t v18 = swift_task_alloc(32LL);
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(void *)(v18 + 24) = v16;
    uint64_t v19 = sub_10001CFD8( &qword_1000CFDE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoGetImageForContactRequest,  (uint64_t)&protocol conformance descriptor for NCProtoGetImageForContactRequest);
    static Message.with(_:)(sub_1000823A0, v18, v15, v19);
    swift_task_dealloc(v18);
    if (qword_1000CD638 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    *(void *)(v0 + 192) = qword_1000D35C8;
    uint64_t v20 = (void *)swift_task_alloc(dword_1000CF4BC);
    *(void *)(v0 + sub_10001D15C(v0 + 200) = v20;
    void *v20 = v0;
    v20[1] = sub_10007F824;
    return sub_10003CAD4(*(void *)(v0 + 160), 7, *(void *)(v0 + 136), v1, v2, 0);
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_10000ADF4(v22, (uint64_t)qword_1000D3620);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[GetContactImage] Rejecting get contact image request because we don't have an active laguna session.",  v26,  2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    id v27 = (id)TUMakeNeighborhoodConduitError(7LL, 0LL);
    swift_willThrow(v27);
    uint64_t v28 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10007F824()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 200);
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10007F888;
  }
  else {
    uint64_t v4 = sub_10007F918;
  }
  return swift_task_switch(v4, *(void *)(v2 + 192), 0LL);
}

uint64_t sub_10007F888()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  (*(void (**)(void, void))(v0[16] + 8LL))(v0[17], v0[15]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10007F8D8, v1, 0LL);
}

uint64_t sub_10007F8D8()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007F918()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  (*(void (**)(void, void))(v0[16] + 8LL))(v0[17], v0[15]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10007F968, v1, 0LL);
}

uint64_t sub_10007F968()
{
  uint64_t v1 = swift_bridgeObjectRetain_n(*(void *)(v0 + 104), 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain(v4);
    *(void *)(v0 + 88) = sub_10009BE3C(v5, v4, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[GetContactImage] Received contact image data for %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 104), 2LL);
  }

  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t ImageForContact = NCProtoGetImageForContactResponse.imageData.getter(v12);
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(ImageForContact, v15);
}

uint64_t sub_10007FB18(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for NCProtoAddConversationParticipantsRequest(0LL);
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NCProtoAddConversationParticipantsResponse(0LL);
  v2[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[22] = v6;
  v2[23] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v7 = qword_1000D35E0;
  v2[24] = qword_1000D35E0;
  return swift_task_switch(sub_10007FBD0, v7, 0LL);
}

uint64_t sub_10007FBD0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v0 + sub_10001D15C(v0 + 200) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    swift_bridgeObjectRetain(v2);
    sub_10001885C(v1, v2, v3, v4, v5, v6, v7, v8, v9);
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000ADF4(v10, (uint64_t)qword_1000D3620);
    *(void *)(v0 + 208) = v11;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[AddParticipant] Sending add participants request...",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void *)(v0 + 144);
    uint64_t v16 = *(void *)(v0 + 128);

    uint64_t v17 = swift_task_alloc(32LL);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
    uint64_t v18 = sub_10001CFD8( &qword_1000CF4A0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NCProtoAddConversationParticipantsRequest,  (uint64_t)&protocol conformance descriptor for NCProtoAddConversationParticipantsRequest);
    static Message.with(_:)(sub_10008238C, v17, v15, v18);
    swift_task_dealloc(v17);
    if (qword_1000CD638 != -1) {
      swift_once(&qword_1000CD638, sub_10001FF5C);
    }
    *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = qword_1000D35C8;
    uint64_t v19 = (void *)swift_task_alloc(dword_1000CF49C);
    *(void *)(v0 + 224) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10007FF1C;
    return sub_10003C044(*(void *)(v0 + 184), 10, *(void *)(v0 + 160), v1, v2, 0);
  }

  else
  {
    if (qword_1000CD690 != -1) {
      swift_once(&qword_1000CD690, sub_100088E24);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_10000ADF4(v21, (uint64_t)qword_1000D3620);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[AddParticipant] Rejecting add participant request because we're not currently in a joined conversation",  v25,  2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    id v26 = (id)TUMakeNeighborhoodConduitError(7LL, 0LL);
    uint64_t v27 = *(void *)(v0 + 184);
    uint64_t v28 = *(void *)(v0 + 160);
    swift_willThrow(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10007FF1C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 224);
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100080040;
  }
  else {
    uint64_t v4 = sub_10007FF80;
  }
  return swift_task_switch(v4, *(void *)(v2 + 216), 0LL);
}

uint64_t sub_10007FF80()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v5 = v0[20];
  uint64_t v4 = v0[21];
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[19];
  swift_bridgeObjectRelease(v0[25]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_100080000, v1, 0LL);
}

uint64_t sub_100080000()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100080040()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  (*(void (**)(void, void))(v0[19] + 8LL))(v0[20], v0[18]);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_100080090, v1, 0LL);
}

uint64_t sub_100080090()
{
  uint64_t v1 = v0 + 88;
  uint64_t v2 = *(void *)(v0 + 232);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain(v6);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 120) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[AddParticipant] Adding recipients failed: %@", v7, 0xCu);
    uint64_t v10 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v8, 1LL, v10);
    uint64_t v11 = v8;
    uint64_t v1 = v0 + 88;
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 232);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  uint64_t v13 = *(void *)(v0 + 232);

  *(void *)(v0 + 88) = v13;
  swift_errorRetain(v13);
  uint64_t v14 = sub_10000360C(&qword_1000CF8D0);
  type metadata accessor for TUNeighborhoodActivityConduitError(0LL);
  uint64_t v16 = v15;
  uint64_t v17 = swift_dynamicCast(v0 + 96, v1, v14, v15, 6LL);
  if ((v17 & 1) != 0)
  {
    uint64_t v18 = *(void **)(v0 + 96);
    *(void *)(v0 + 112) = v18;
    uint64_t v19 = sub_10001CFD8( (unint64_t *)&qword_1000CD9E0,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for TUNeighborhoodActivityConduitError,  (uint64_t)&unk_1000A9484);
    _BridgedStoredNSError.code.getter((void *)(v0 + 104), v16, v19);
    if (*(void *)(v0 + 104) == 25LL) {
      sub_100062A40(38LL);
    }
  }

  uint64_t v20 = *(void *)(v0 + 184);
  uint64_t v21 = *(void *)(v0 + 160);
  swift_willThrow(v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000802EC(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v3 = qword_1000D35E0;
  v2[8] = qword_1000D35E0;
  return swift_task_switch(sub_100080354, v3, 0LL);
}

uint64_t sub_100080354()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v32 = v1 & 0xC000000000000001LL;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    if (v1 < 0) {
      uint64_t v2 = *(void *)(v0 + 48);
    }
    else {
      uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v3 = __CocoaSet.count.getter(v2);
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 16);
  }

  if (!v3)
  {
LABEL_29:
    v33[9] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v30 = (uint64_t **)swift_task_alloc(dword_1000CFDC4);
    v33[10] = (uint64_t)v30;
    *uint64_t v30 = v33;
    v30[1] = (uint64_t *)sub_100080608;
    return sub_10007FB18((uint64_t)_swiftEmptyArrayStorage);
  }

  sub_10009C450(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = v33[6];
  if (v32)
  {
    if (v4 >= 0) {
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaSet.startIndex.getter(v4);
    char v7 = 1;
  }

  else
  {
    uint64_t result = sub_10009CC8C(v4);
    char v7 = v8 & 1;
  }

  uint64_t v34 = result;
  uint64_t v35 = v6;
  unsigned __int8 v36 = v7;
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = v33 + 2;
    uint64_t v10 = v33[6];
    if (v10 >= 0) {
      uint64_t v10 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v31 = v10;
    do
    {
      while (1)
      {
        sub_10009C9C4(v34, v35, v36, v33[6]);
        uint64_t v17 = v16;
        id v18 = [v16 identifier];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v21 = v20;

        uint64_t result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
        if ((result & 1) == 0) {
          uint64_t result = sub_10009C450(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        unint64_t v23 = _swiftEmptyArrayStorage[2];
        unint64_t v22 = _swiftEmptyArrayStorage[3];
        if (v23 >= v22 >> 1) {
          uint64_t result = sub_10009C450(v22 > 1, v23 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v23 + 1;
        os_log_type_t v24 = &_swiftEmptyArrayStorage[2 * v23];
        v24[4] = v19;
        v24[5] = v21;
        if (v32) {
          break;
        }
        uint64_t v11 = sub_10009C8C8(v34, v35, v36, v33[6]);
        uint64_t v13 = v12;
        char v15 = v14;
        sub_100018054(v34, v35, v36);
        uint64_t v34 = v11;
        uint64_t v35 = v13;
        unsigned __int8 v36 = v15 & 1;
        if (!--v3) {
          goto LABEL_28;
        }
      }

      if ((v36 & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t v25 = __CocoaSet.Index.handleBitPattern.getter(v34, v35);
      if (v25) {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      }
      else {
        uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      }
      uint64_t v27 = sub_10000360C(&qword_1000CFDD0);
      uint64_t v28 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v9, v27);
      __CocoaSet.formIndex(after:isUnique:)(v29, isUniquelyReferenced_nonNull_native, v31);
      v28(v9, 0LL);
      --v3;
    }

    while (v3);
LABEL_28:
    sub_100018054(v34, v35, v36);
    goto LABEL_29;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100080608()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v3 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10008067C, *(void *)(v3 + 64), 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10008067C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000806B0(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  if (qword_1000CD668 != -1) {
    swift_once(&qword_1000CD668, sub_100053B3C);
  }
  uint64_t v3 = qword_1000D35E0;
  v2[8] = qword_1000D35E0;
  return swift_task_switch(sub_100080718, v3, 0LL);
}

uint64_t sub_100080718()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v32 = v1 & 0xC000000000000001LL;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    if (v1 < 0) {
      uint64_t v2 = *(void *)(v0 + 48);
    }
    else {
      uint64_t v2 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v3 = __CocoaSet.count.getter(v2);
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 16);
  }

  if (!v3)
  {
LABEL_29:
    v33[9] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v30 = (uint64_t **)swift_task_alloc(dword_1000CFDC4);
    v33[10] = (uint64_t)v30;
    *uint64_t v30 = v33;
    v30[1] = (uint64_t *)sub_1000809CC;
    return sub_10007FB18((uint64_t)_swiftEmptyArrayStorage);
  }

  sub_10009C450(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = v33[6];
  if (v32)
  {
    if (v4 >= 0) {
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = __CocoaSet.startIndex.getter(v4);
    char v7 = 1;
  }

  else
  {
    uint64_t result = sub_10009CC8C(v4);
    char v7 = v8 & 1;
  }

  uint64_t v34 = result;
  uint64_t v35 = v6;
  unsigned __int8 v36 = v7;
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = v33 + 2;
    uint64_t v10 = v33[6];
    if (v10 >= 0) {
      uint64_t v10 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v31 = v10;
    do
    {
      while (1)
      {
        sub_10009C9B0(v34, v35, v36, v33[6]);
        uint64_t v17 = v16;
        id v18 = [v16 value];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v21 = v20;

        uint64_t result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
        if ((result & 1) == 0) {
          uint64_t result = sub_10009C450(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        unint64_t v23 = _swiftEmptyArrayStorage[2];
        unint64_t v22 = _swiftEmptyArrayStorage[3];
        if (v23 >= v22 >> 1) {
          uint64_t result = sub_10009C450(v22 > 1, v23 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v23 + 1;
        os_log_type_t v24 = &_swiftEmptyArrayStorage[2 * v23];
        v24[4] = v19;
        v24[5] = v21;
        if (v32) {
          break;
        }
        uint64_t v11 = sub_10009C8C8(v34, v35, v36, v33[6]);
        uint64_t v13 = v12;
        char v15 = v14;
        sub_100018054(v34, v35, v36);
        uint64_t v34 = v11;
        uint64_t v35 = v13;
        unsigned __int8 v36 = v15 & 1;
        if (!--v3) {
          goto LABEL_28;
        }
      }

      if ((v36 & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t v25 = __CocoaSet.Index.handleBitPattern.getter(v34, v35);
      if (v25) {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      }
      else {
        uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      }
      uint64_t v27 = sub_10000360C(&qword_1000CE440);
      uint64_t v28 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v9, v27);
      __CocoaSet.formIndex(after:isUnique:)(v29, isUniquelyReferenced_nonNull_native, v31);
      v28(v9, 0LL);
      --v3;
    }

    while (v3);
LABEL_28:
    sub_100018054(v34, v35, v36);
    goto LABEL_29;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1000809CC()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v3 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_100082EBC, *(void *)(v3 + 64), 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100080A40(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

Swift::Int sub_100080B00(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v27 = a4;
  unint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  Swift::Int result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = 0LL;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v24 = 0LL;
  uint64_t v25 = a3 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v18 >= v26) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v19 = *(void *)(v25 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v25 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }

LABEL_20:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    sub_100018CFC( *(void *)(a3 + 48) + *(void *)(v6 + 72) * v16,  (uint64_t)v9,  type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    unsigned __int8 v17 = objc_msgSend(*(id *)&v9[*(int *)(v5 + 24)], "isEquivalentToDeviceHandle:", v27, v22);
    Swift::Int result = sub_10000BF5C((uint64_t)v9, type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo);
    if ((v17 & 1) == 0)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      if (__OFADD__(v24++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_100079748(v23, v22, v24, a3);
      }
    }
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v26) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }

Swift::Int sub_100080D40(uint64_t a1, void *a2)
{
  char v4 = *(_BYTE *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1LL << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v6, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (char *)&v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0LL);
    bzero(v9, 8 * v6);
    id v10 = v8;
    Swift::Int v11 = sub_100080B00((unint64_t *)v9, v6, a1, (uint64_t)v10);

    uint64_t v12 = swift_release(a1);
    if (v2) {
      swift_willThrow(v12);
    }
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(8 * v6, -1LL);
    bzero(v13, 8 * v6);
    id v14 = v8;
    Swift::Int v11 = sub_100080B00((unint64_t *)v13, v6, a1, (uint64_t)v14);

    swift_release(a1);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return v11;
}

uint64_t sub_100080EEC()
{
  return sub_100081054(40LL);
}

uint64_t sub_100080EF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc(dword_1000CF9E4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_1000193E4;
  return sub_100054508(a1, v4, v5, v6);
}

uint64_t sub_100080F60()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100080F8C(void *a1)
{
}

uint64_t sub_100080F94()
{
  return sub_100081054(40LL);
}

uint64_t sub_100080F9C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc(dword_1000CFA04);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_1000193E4;
  return sub_100071EC0(a1, v4, v5, v6);
}

unint64_t sub_100081008()
{
  unint64_t result = qword_1000CFA18;
  if (!qword_1000CFA18)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000AA638,  &type metadata for NeighborhoodActivityConduit.FaceTimeProcessAssertionReason);
    atomic_store(result, (unint64_t *)&qword_1000CFA18);
  }

  return result;
}

uint64_t sub_10008104C()
{
  return sub_100081054(41LL);
}

uint64_t sub_100081054(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_10008108C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(_BYTE *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc(dword_1000CFA3C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000193E4;
  return sub_100070E44(a1, v4, v5, v6, v7);
}

void sub_100081108(uint64_t a1)
{
  id v1 = (id)TUPreferredFaceTimeBundleIdentifier(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  id v5 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  id v6 = sub_100074DB4(v2, v4, 0);
  id v7 = [v6 identities];

  uint64_t v8 = sub_1000052E0(0LL, &qword_1000CFA58, &OBJC_CLASS___LSApplicationIdentity_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v9);
    if (v13) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(v9);
    return;
  }

  if (!*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v9 & 0xC000000000000001LL) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
    goto LABEL_6;
  }

  if (*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v10 = *(id *)(v9 + 32);
LABEL_6:
    Swift::Int v11 = v10;
    swift_bridgeObjectRelease(v9);
    [(id)objc_opt_self(RBSProcessIdentity) identityForLSApplicationIdentity:v11];

    return;
  }

  __break(1u);
}

void sub_100081290(void *a1, uint64_t a2)
{
}

uint64_t sub_10008129C()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000812D0()
{
  id v1 = (void *)swift_task_alloc(dword_1000CFA74);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_1000193E4;
  return sub_100059A4C();
}

uint64_t sub_100081348(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100081350()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100081384(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  char v9 = *(_BYTE *)(v1 + 40);
  id v10 = (void *)swift_task_alloc(dword_1000CFA84);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *id v10 = v2;
  v10[1] = sub_1000193E4;
  return sub_1000583F0(a1, v4, v5, v6, v9, v7, v8);
}

uint64_t sub_100081414()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100081438()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_100081464(void *a1)
{
  return sub_100017C78(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10008146C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000814A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  char v9 = (void *)swift_task_alloc(dword_1000D08D4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000193E4;
  return sub_100097734(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100081528(uint64_t a1)
{
  return a1;
}

unint64_t sub_10008155C()
{
  unint64_t result = qword_1000CFB48;
  if (!qword_1000CFB48)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, &qword_1000CFB48);
  }

  return result;
}

uint64_t sub_1000815A0()
{
  uint64_t updated = type metadata accessor for NCProtoContactUpdateEvent(0LL);
  uint64_t v2 = *(void *)(updated - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, updated);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100081638(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoContactUpdateEvent(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  Swift::Int v11 = (void *)swift_task_alloc(dword_1000CFB5C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *Swift::Int v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_1000630BC(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1000816E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100081710(void *a1)
{
}

uint64_t sub_100081718(uint64_t a1)
{
  return sub_100065EE8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100081730(uint64_t a1)
{
  return sub_100065FA0( a1,  *(char **)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100081740()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v18 + 24) & ~v18;
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_10000360C((uint64_t *)&unk_1000CFBB0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7) & ~v7;
  unint64_t v9 = (v8 + *(void *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = v9 + v0;
  uint64_t v10 = *(void *)(sub_10000360C(&qword_1000CFBA8) - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v9 + v11 + 16) & ~v11;
  uint64_t v17 = *(void *)(v10 + 64);

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v13(v0 + v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);

  uint64_t v14 = type metadata accessor for ConversationUIState(0LL);
  return swift_deallocObject(v0, v12 + v17, v18 | v7 | v11 | 7);
}

void sub_100081888()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_10000360C((uint64_t *)&unk_1000CFBB0) - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_10000360C(&qword_1000CFBA8) - 8) + 80LL);
  sub_10006638C( *(void *)(v0 + 16),  v0 + v2,  v0 + v5,  *(_BYTE *)(v0 + v6),  *(void *)((v6 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 8),  v0 + (((v6 & 0xFFFFFFFFFFFFFFF8LL) + v7 + 16) & ~v7));
}

uint64_t sub_100081934(uint64_t a1)
{
  return sub_100066528(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100081954()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1000CFBF4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000193E4;
  return sub_1000620E0(v2, v3);
}

uint64_t sub_1000819A4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc(dword_1000CFC04);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000CFC00 + dword_1000CFC00))(a1, v4);
}

uint64_t sub_100081A14(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc(dword_1000CFC14);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000CFC10
                                                                                       + dword_1000CFC10))( a1,  a2,  v6,  v7,  v9,  v8);
}

uint64_t sub_100081AB0()
{
  return swift_deallocObject(v0, 29LL, 7LL);
}

void sub_100081AD4()
{
}

uint64_t sub_100081AF8()
{
  uint64_t v1 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100081B84(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NCProtoDeviceTokenRequest(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  uint64_t v11 = (void *)swift_task_alloc(dword_1000CFC6C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10005F4E4(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100081C2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc(dword_1000CFC8C);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_1000193E4;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_100074B2C, 0LL, 0LL);
}

uint64_t sub_100081CA4(uint64_t a1)
{
  return sub_100049F9C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100081CB0()
{
  uint64_t v1 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v7));
  swift_release(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_100081D58(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoDeviceTokenRequest(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + v7);
  char v13 = *((_BYTE *)v1 + v7 + 8);
  uint64_t v14 = *(void *)((char *)v1 + ((v6 + 23) & 0xFFFFFFFFFFFFF8LL));
  unint64_t v15 = (void *)swift_task_alloc(dword_1000CFC9C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *unint64_t v15 = v2;
  v15[1] = sub_1000193E4;
  return sub_1000601C0(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100081E28()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100081E4C(void *a1)
{
}

uint64_t sub_100081E54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100081E78()
{
  uint64_t v1 = type metadata accessor for NCProtoDeviceTokenRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v0 + 24));

  swift_release(*(void *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100081F28(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NCProtoDeviceTokenRequest(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  char v9 = *(_BYTE *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  char v13 = (void *)swift_task_alloc(dword_1000CFCB4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *char v13 = v2;
  v13[1] = sub_1000193E4;
  return sub_10006CCF4(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100082004(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc(dword_1000CF41C);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000193E4;
  return sub_100048E78(a1, a2, v6, v7, v9, v8);
}

void sub_100082084(uint64_t a1)
{
}

uint64_t sub_1000820A0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000820CC()
{
}

uint64_t sub_1000820E4(id *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10007078C(a1, v1 + ((v3 + 16) & ~v3)) & 1;
}

uint64_t sub_10008212C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008218C()
{
  return sub_100018F4C(&qword_1000CFD68, &qword_1000CFD70, (uint64_t)&protocol conformance descriptor for Set<A>);
}

uint64_t sub_1000821BC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000821E8(id *a1)
{
  return sub_100070464(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000821F4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc(dword_1000CFD7C);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10000C2B8;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_100074C64, 0LL, 0LL);
}

uint64_t sub_10008226C(uint64_t a1)
{
  return sub_100049FC0(a1, v1[2], v1[3], v1[4]);
}

void sub_100082278(uint64_t a1)
{
}

uint64_t sub_100082284()
{
  return sub_1000822C0(&qword_1000CFD98);
}

uint64_t sub_100082290(uint64_t a1, uint64_t a2)
{
  return sub_100082330(a1, a2, &qword_1000CFD98, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000709B0);
}

void sub_1000822A4(uint64_t a1)
{
}

uint64_t sub_1000822B4()
{
  return sub_1000822C0(&qword_1000CFDA8);
}

uint64_t sub_1000822C0(uint64_t *a1)
{
  uint64_t v2 = sub_10000360C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10008231C(uint64_t a1, uint64_t a2)
{
  return sub_100082330(a1, a2, &qword_1000CFDA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005E86C);
}

uint64_t sub_100082330( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_10000360C(a3) - 8) + 80LL);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

uint64_t sub_10008238C()
{
  return sub_100082400();
}

uint64_t sub_1000823A0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  return NCProtoGetImageForContactRequest.contactIdentifier.setter(v2, v1);
}

uint64_t sub_1000823E8(uint64_t a1)
{
  return sub_100066A5C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100082400()
{
  uint64_t v1 = swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return NCProtoAddConversationParticipantsRequest.handleValues.setter(v1);
}

uint64_t sub_100082434(uint64_t a1)
{
  return sub_100082C44(a1, (uint64_t (*)(uint64_t))&NCProtoDeclineContinuityCallRequest.uuidString.setter);
}

uint64_t sub_100082450(uint64_t a1)
{
  return sub_10005B494(a1, *(void **)(v1 + 16));
}

uint64_t sub_100082468()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10008249C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1000D086C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000C2B8;
  return sub_10008D304(a1, v4, v5, v7, v6);
}

uint64_t sub_100082514(uint64_t a1)
{
  return sub_1000827BC(a1) & 1;
}

uint64_t sub_10008252C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_1000825CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8LL));
  char v13 = (void *)swift_task_alloc(dword_1000CFE64);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *char v13 = v2;
  v13[1] = sub_1000193E4;
  return sub_100059F48(a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100082690()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100082718(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v10 = (void *)swift_task_alloc(dword_1000CFE7C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000193E4;
  return sub_10006C3AC(a1, v6, v7, v8, v9);
}

uint64_t sub_1000827BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for NeighborhoodActivityConduit.NearbyConversationInfo(0LL);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 20), v3) & 1;
}

uint64_t sub_100082808(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CFE94);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000193E4;
  return sub_10006FA28(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100082888()
{
  return sub_10006FDD8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100082894()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100082938(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc(dword_1000CFEA4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_1000193E4;
  return sub_10006FF54(a1, v7, v8, v10, v9, v12, v13);
}

uint64_t sub_1000829FC(uint64_t a1)
{
  return sub_100082C44(a1, (uint64_t (*)(uint64_t))&NCProtoCancelAddMemberEvent.conversationIdentifier.setter);
}

uint64_t sub_100082A18(uint64_t a1)
{
  return sub_10006FD0C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100082A30()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_100082AD8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v7);
  uint64_t v12 = *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v13 = (void *)swift_task_alloc(dword_1000CFEC4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_1000193E4;
  return sub_100066EC8(a1, v8, v9, v10, v11, v12);
}

uint64_t sub_100082B98(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc(dword_1000CFEDC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000193E4;
  return sub_10006F0AC(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100082C38()
{
  return sub_10006F568(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100082C44(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = UUID.uuidString.getter(a1);
  return a2(v3);
}

uint64_t sub_100082C84()
{
  uint64_t v1 = type metadata accessor for NCProtoCancelAddMemberEvent(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100082D20()
{
  uint64_t v2 = *(void *)(type metadata accessor for NCProtoCancelAddMemberEvent(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_1000CFEEC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_1000193E4;
  void v9[4] = v7;
  v9[5] = v8;
  void v9[2] = v4;
  void v9[3] = v5;
  return swift_task_switch(sub_10006F998, 0LL, 0LL);
}

void sub_100082DC0(uint64_t a1)
{
}

uint64_t sub_100082DE0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1000CFF0C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000193E4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000CFF08 + dword_1000CFF08))(a1, v4);
}

uint64_t sub_100082E58()
{
  return sub_100061E58();
}

void sub_100082EF4(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

id sub_100082F4C(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = objc_allocWithZone(v1);
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___IDSPushHandler);
  id v9 = a1;
  id result = [v8 sharedInstance];
  if (result)
  {
    uint64_t v11 = (uint64_t)result;
    id v12 = [objc_allocWithZone(TUVouchingEnablementImpl) init];
    void *v6 = 10LL;
    (*(void (**)(void *, void, uint64_t))(v4 + 104))( v6,  enum case for DispatchTimeInterval.seconds(_:),  v3);
    id v13 = sub_1000856FC((uint64_t)v9, v11, (uint64_t)v12, (uint64_t)v6, (char *)objc_allocWithZone(v1));

    uint64_t ObjectType = swift_getObjectType(v7);
    swift_deallocPartialClassInstance( v7,  ObjectType,  *(unsigned int *)((swift_isaMask & *v7) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v7) + 0x34LL));
    return v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

Swift::Int sub_1000830A4(uint64_t a1, uint64_t a2)
{
  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100083104(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100087690();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

unint64_t sub_10008313C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100085BD8(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10008316C(uint64_t a1)
{
  unint64_t v2 = sub_100087690();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100083194(uint64_t a1)
{
  unint64_t v2 = sub_100087690();
  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_1000831BC()
{
  return 0xD000000000000040LL;
}

uint64_t sub_1000831D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100087690();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100083218(uint64_t a1)
{
  uint64_t result = 0xD000000000000014LL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
    case 3LL:
      uint64_t result = 0xD000000000000015LL;
      break;
    case 2LL:
      uint64_t result = 0xD000000000000020LL;
      break;
    case 4LL:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 5LL:
      uint64_t result = 0xD000000000000020LL;
      break;
    default:
      v6[1] = v1;
      _OWORD v6[2] = v2;
      v6[0] = a1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for VoucherManagerError,  v6,  &type metadata for VoucherManagerError,  &type metadata for Int);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_1000832E8()
{
  return sub_100083218(*v0);
}

id sub_1000832F0(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___IDSPushHandler);
  id v9 = a1;
  id result = [v8 sharedInstance];
  if (result)
  {
    uint64_t v11 = (uint64_t)result;
    id v12 = [objc_allocWithZone(TUVouchingEnablementImpl) init];
    *uint64_t v7 = 10LL;
    (*(void (**)(void *, void, uint64_t))(v5 + 104))( v7,  enum case for DispatchTimeInterval.seconds(_:),  v4);
    id v13 = sub_1000856FC((uint64_t)v9, v11, (uint64_t)v12, (uint64_t)v7, (char *)objc_allocWithZone(ObjectType));

    uint64_t v14 = swift_getObjectType(v1);
    swift_deallocPartialClassInstance( v1,  v14,  *(unsigned int *)((swift_isaMask & *v1) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v1) + 0x34LL));
    return v13;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10008346C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(id, uint64_t), uint64_t a7, uint64_t a8, void *a9)
{
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1000CD6B0 != -1) {
      swift_once(&qword_1000CD6B0, sub_100088EBC);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v13, (uint64_t)qword_1000D3680);
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    uint64_t v14 = sub_1000109D4(a4, a5);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = v18;
      *(_DWORD *)uint64_t v17 = 134218242;
      uint64_t v63 = Data.hashValue.getter(a4, a5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v17 + 4, v17 + 12);
      sub_10000BE18(a4, a5);
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v63 = a3;
      swift_errorRetain(a3);
      uint64_t v19 = sub_10000360C(&qword_1000CF8D0);
      uint64_t v20 = String.init<A>(describing:)(&v63, v19);
      unint64_t v22 = v21;
      uint64_t v63 = sub_10009BE3C(v20, v21, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Failed to sign data (%ld) due to error %s.",  (uint8_t *)v17,  0x16u);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      sub_10000BE18(a4, a5);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    swift_errorRetain(a3);
    a6(0LL, a3);
    swift_errorRelease(a3);
    uint64_t v29 = a3;
LABEL_20:
    swift_errorRelease(v29);
    return;
  }

  if (a2 >> 60 == 15)
  {
    if (qword_1000CD6B0 != -1) {
      swift_once(&qword_1000CD6B0, sub_100088EBC);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v24, (uint64_t)qword_1000D3680);
    uint64_t v25 = sub_1000109D4(a4, a5);
    int64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v28 = 134217984;
      uint64_t v64 = Data.hashValue.getter(a4, a5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v28 + 4, v28 + 12);
      sub_10000BE18(a4, a5);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Failed to sign data (%ld) because encrypted data was missing from response (without an error).",  v28,  0xCu);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_10000BE18(a4, a5);
    }

    unint64_t v57 = sub_10008729C();
    uint64_t v58 = swift_allocError(&type metadata for VoucherManagerError, v57, 0LL, 0LL);
    *uint64_t v59 = 2LL;
    a6(0LL, v58);
    uint64_t v29 = v58;
    goto LABEL_20;
  }

  uint64_t v31 = *(void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler + 24);
  uint64_t v32 = *(void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler + 32);
  sub_10000F2CC((void *)(a8 + OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler), v31);
  NSString v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8);
  sub_1000109D4(a1, a2);
  uint64_t v34 = v33(v31, v32);
  unint64_t v36 = v35;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v38 = (id)TUCopyIDSFromIDForHandle(a9);
  uint64_t v39 = (void *)IDSCopyIDForTokenWithID(isa, v38);

  if (v39)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    uint64_t v41 = v40;

    sub_10000BE18(v34, v36);
    id v42 = objc_allocWithZone(&OBJC_CLASS___TUVoucher);
    sub_1000109D4(a4, a5);
    sub_10008751C(a1, a2);
    id v43 = a9;
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    Class v45 = Data._bridgeToObjectiveC()().super.isa;
    Class v46 = Data._bridgeToObjectiveC()().super.isa;
    id v47 = [v42 initWithHandle:v43 tokenPrefixedURI:v44 data:v45 encryptedData:v46];
    sub_10000C048(a1, a2);
    sub_10000BE18(a4, a5);

    if (qword_1000CD6B0 != -1) {
      swift_once(&qword_1000CD6B0, sub_100088EBC);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v48, (uint64_t)qword_1000D3680);
    sub_1000109D4(a4, a5);
    id v49 = v47;
    sub_1000109D4(a4, a5);
    id v50 = v49;
    uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc(22LL, -1LL);
      uint64_t v61 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v53 = 134218242;
      uint64_t v54 = Data.hashValue.getter(a4, a5);
      sub_10000BE18(a4, a5);
      uint64_t v64 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v53 + 4, v53 + 12);
      sub_10000BE18(a4, a5);
      *(_WORD *)(v53 + 12) = 2112;
      uint64_t v64 = (uint64_t)v50;
      id v55 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v53 + 14, v53 + 22);
      *uint64_t v61 = v50;

      _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Successfully signed data (%ld) into %@.",  (uint8_t *)v53,  0x16u);
      uint64_t v56 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v61, 1LL, v56);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {
      sub_10000BE18(a4, a5);
      sub_10000BE18(a4, a5);
    }

    id v60 = v50;
    a6(v50, 0LL);

    sub_10000C048(a1, a2);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100083B8C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a4 + OBJC_IVAR___CSDVoucherManagerImpl_completionQueue);
  os_log_type_t v16 = (void *)swift_allocObject(&unk_1000C59E8, 48LL, 7LL);
  _OWORD v16[2] = a5;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_100087510;
  uint64_t v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000ABC8;
  aBlock[3] = &unk_1000C5A00;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain(a5);
  sub_10008751C(a1, a2);
  uint64_t v18 = swift_errorRetain(a3);
  static DispatchQoS.unspecified.getter(v18);
  int64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v21 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release(v28);
}

uint64_t sub_100083DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  id v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    swift_retain(v10);
    v9(a2, a3, a4);
    sub_1000874BC((uint64_t)v9, v10);
  }

  swift_beginAccess(v8, &v14, 1LL, 0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  return sub_1000874BC(v11, v12);
}

uint64_t sub_100083E5C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t v3 = *(void (**)(void, unint64_t, uint64_t))(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    unint64_t v5 = sub_10008729C();
    uint64_t v6 = swift_allocError(&type metadata for VoucherManagerError, v5, 0LL, 0LL);
    *uint64_t v7 = 0LL;
    swift_retain(v4);
    v3(0LL, 0xF000000000000000LL, v6);
    sub_1000874BC((uint64_t)v3, v4);
    swift_errorRelease(v6);
  }

  swift_beginAccess(v2, &v11, 1LL, 0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return sub_1000874BC(v8, v9);
}

void sub_100083FDC(uint64_t a1, unsigned __int8 a2, void *a3)
{
  if (a2 == 0xFF)
  {
    os_log_type_t v16 = *v3;
    uint64_t v17 = (objc_class *)sub_10000360C(&qword_1000D0120);
    uint64_t v18 = (char *)objc_allocWithZone(v17);
    *(void *)&v18[*(void *)((swift_isaMask & *(void *)v18) + 0x68LL)] = a3;
    v23.receiver = v18;
    v23.super_class = v17;
    id v19 = a3;
    id v20 = objc_msgSendSuper2(&v23, "init");
    [v16 removeObjectForKey:v20];
  }

  else
  {
    uint64_t v7 = *v3;
    uint64_t v8 = (objc_class *)sub_10000360C(&qword_1000D0130);
    uint64_t v9 = objc_allocWithZone(v8);
    uint64_t v10 = (char *)v9 + *(void *)((swift_isaMask & *v9) + 0x68LL);
    *(void *)uint64_t v10 = a1;
    v10[8] = a2 & 1;
    sub_100085358(a1, a2 & 1);
    sub_100085358(a1, a2 & 1);
    v22.receiver = v9;
    v22.super_class = v8;
    id v11 = objc_msgSendSuper2(&v22, "init");
    uint64_t v12 = (objc_class *)sub_10000360C(&qword_1000D0120);
    uint64_t v13 = (char *)objc_allocWithZone(v12);
    *(void *)&v13[*(void *)((swift_isaMask & *(void *)v13) + 0x68LL)] = a3;
    v21.receiver = v13;
    v21.super_class = v12;
    id v14 = a3;
    id v15 = objc_msgSendSuper2(&v21, "init");
    objc_msgSend(v7, "setObject:forKey:", v11, v15, v21.receiver, v21.super_class);

    sub_1000873CC(a1, a2);
    sub_1000873CC(a1, a2);
  }

uint64_t sub_10008419C(unsigned __int8 a1, uint64_t a2, void *a3, uint64_t a4)
{
  unsigned __int8 v7 = a1;
  if ((a1 & 1) != 0)
  {
    if (qword_1000CD6B0 != -1) {
      swift_once(&qword_1000CD6B0, sub_100088EBC);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v8, (uint64_t)qword_1000D3680);
    id v9 = a3;
    uint64_t v10 = (void *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v10, v11))
    {

      goto LABEL_14;
    }

    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v12 = 138412290;
    uint64_t v57 = (uint64_t)v9;
    os_log_type_t v52 = a3;
    id v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v12 + 4, v12 + 12);
    void *v51 = v9;

    a3 = v52;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v10, v11, "Successfully verified %@.", v12, 0xCu);
    uint64_t v14 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v51, 1LL, v14);
    swift_slowDealloc(v51, -1LL, -1LL);
    uint64_t v15 = (uint64_t)v12;
  }

  else
  {
    if (qword_1000CD6B0 != -1) {
      swift_once(&qword_1000CD6B0, sub_100088EBC);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000ADF4(v16, (uint64_t)qword_1000D3680);
    id v17 = a3;
    swift_errorRetain(a2);
    id v18 = v17;
    uint64_t v19 = swift_errorRetain(a2);
    uint64_t v10 = (void *)Logger.logObject.getter(v19);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v10, v20))
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
      goto LABEL_13;
    }

    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    unsigned __int8 v54 = v7;
    objc_super v22 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v50;
    *(_DWORD *)uint64_t v21 = 138412546;
    uint64_t v53 = a3;
    uint64_t v55 = (uint64_t)v18;
    id v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v21 + 4, v21 + 12);
    *objc_super v22 = v18;

    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v55 = a2;
    swift_errorRetain(a2);
    uint64_t v24 = sub_10000360C(&qword_1000D0140);
    uint64_t v25 = String.init<A>(describing:)(&v55, v24);
    unint64_t v27 = v26;
    uint64_t v55 = sub_10009BE3C(v25, v26, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v21 + 14, v21 + 22);
    unint64_t v28 = v27;
    a3 = v53;
    swift_bridgeObjectRelease(v28);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  v20,  "Failed to verify %@ with error %s",  (uint8_t *)v21,  0x16u);
    uint64_t v29 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v22, 1LL, v29);
    uint64_t v30 = v22;
    unsigned __int8 v7 = v54;
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    uint64_t v15 = v21;
  }

  swift_slowDealloc(v15, -1LL, -1LL);
LABEL_13:

LABEL_14:
  uint64_t v31 = (void **)(a4 + OBJC_IVAR___CSDVoucherManagerImpl_verificationCache);
  swift_beginAccess(v31, &v57, 32LL, 0LL);
  uint64_t v32 = *v31;
  NSString v33 = (objc_class *)sub_10000360C(&qword_1000D0120);
  uint64_t v34 = (char *)objc_allocWithZone(v33);
  *(void *)&v34[*(void *)((swift_isaMask & *(void *)v34) + 0x68LL)] = a3;
  v56.receiver = v34;
  v56.super_class = v33;
  id v35 = a3;
  id v36 = objc_msgSendSuper2(&v56, "init");
  uint64_t v37 = [v32 objectForKey:v36];

  if (v37)
  {
    id v38 = (char *)v37 + *(void *)((swift_isaMask & *v37) + 0x68LL);
    uint64_t v39 = *(void *)v38;
    int v40 = v38[8];
    sub_100085358(*(void *)v38, v38[8]);

    if (v40 == 1)
    {
      swift_endAccess(&v57);
      uint64_t v41 = *(void *)(v39 + 16);
      if (v41)
      {
        unsigned __int8 v42 = v7;
        char v43 = v7 & 1;
        NSString v44 = (uint64_t *)(v39 + 40);
        do
        {
          Class v46 = (void (*)(uint64_t *, uint64_t *))*(v44 - 1);
          uint64_t v45 = *v44;
          LOBYTE(v55) = v43;
          uint64_t v57 = a2;
          swift_retain(v45);
          v46(&v55, &v57);
          swift_release(v45);
          v44 += 2;
          --v41;
        }

        while (v41);
        sub_100085374(v39, 1);
        unsigned __int8 v7 = v42;
      }

      else
      {
        sub_100085374(v39, 1);
      }
    }

    else
    {
      swift_endAccess(&v57);
    }
  }

  else
  {
    swift_endAccess(&v57);
  }

  swift_beginAccess(v31, &v57, 33LL, 0LL);
  id v47 = v35;
  if (a2) {
    unsigned __int8 v48 = -1;
  }
  else {
    unsigned __int8 v48 = 0;
  }
  sub_100083FDC((a2 == 0) & v7, v48, v47);
  return swift_endAccess(&v57);
}

uint64_t sub_10008470C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_1000C58D0, 40LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(_BYTE *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = a2;
  aBlock[4] = sub_1000873BC;
  uint64_t v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000ABC8;
  aBlock[3] = &unk_1000C58E8;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain(a4);
  uint64_t v16 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v16);
  objc_super v22 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
  uint64_t v19 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

uint64_t sub_100084918(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t v7 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    swift_retain(v8);
    v7(a2 & 1, a3);
    sub_1000874BC((uint64_t)v7, v8);
  }

  swift_beginAccess(v6, &v12, 1LL, 0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  void *v6 = 0LL;
  v6[1] = 0LL;
  return sub_1000874BC(v9, v10);
}

uint64_t sub_1000849BC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  uint64_t v3 = *(void (**)(void, uint64_t))(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    unint64_t v5 = sub_10008729C();
    uint64_t v6 = swift_allocError(&type metadata for VoucherManagerError, v5, 0LL, 0LL);
    *uint64_t v7 = 0LL;
    swift_retain(v4);
    v3(0LL, v6);
    sub_1000874BC((uint64_t)v3, v4);
    swift_errorRelease(v6);
  }

  swift_beginAccess(v2, &v11, 1LL, 0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return sub_1000874BC(v8, v9);
}

id sub_100084B24()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100084BE8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_100084C18();

  return v2;
}

uint64_t sub_100084C18()
{
  return dispatch thunk of Hashable.hashValue.getter( *(void *)((swift_isaMask & *v0) + 0x50LL),  *(void *)((swift_isaMask & *v0) + 0x60LL));
}

uint64_t sub_100084C54(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = swift_isaMask;
  sub_100087230(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_1000871F0((uint64_t)v12);
    goto LABEL_5;
  }

  uint64_t v4 = v3 & v2;
  uint64_t v5 = *(void *)((v3 & v2) + 0x50);
  uint64_t v6 = *(void *)(v4 + 96);
  uint64_t v7 = type metadata accessor for CountLimitCache.WrappedKey(0LL, v5, *(void *)(v4 + 88), v6);
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
LABEL_5:
    char v9 = 0;
    return v9 & 1;
  }

  uint64_t v8 = v11;
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)( (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x68),  (char *)v11 + *(void *)((*v11 & swift_isaMask) + 0x68LL),  v5,  *(void *)(v6 + 8));

  return v9 & 1;
}

uint64_t sub_100084D38(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v5 = a1;
    swift_unknownObjectRetain(a3);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(a3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
    id v6 = a1;
  }

  char v7 = sub_100084C54((uint64_t)v9);

  sub_1000871F0((uint64_t)v9);
  return v7 & 1;
}

uint64_t sub_100084DAC(void *a1, uint64_t a2)
{
  return sub_100084DFC(a1, a2, (uint64_t (*)(void, void, void))sub_100087198);
}

id sub_100084DB8()
{
  return sub_100084E2C(type metadata accessor for CountLimitCache.WrappedKey);
}

uint64_t sub_100084DC4(char *a1)
{
}

uint64_t sub_100084DF0(void *a1, uint64_t a2)
{
  return sub_100084DFC(a1, a2, (uint64_t (*)(void, void, void))sub_1000871C4);
}

uint64_t sub_100084DFC(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3( *(void *)((swift_isaMask & *a1) + 0x50LL),  *(void *)((swift_isaMask & *a1) + 0x58LL),  *(void *)((swift_isaMask & *a1) + 0x60LL));
}

id sub_100084E20()
{
  return sub_100084E2C(type metadata accessor for CountLimitCache.WrappedValue);
}

id sub_100084E2C(uint64_t (*a1)(void, void, void, void))
{
  uint64_t v2 = (objc_class *)a1( 0LL,  *(void *)((swift_isaMask & *v1) + 0x50LL),  *(void *)((swift_isaMask & *v1) + 0x58LL),  *(void *)((swift_isaMask & *v1) + 0x60LL));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100084E80(char *a1)
{
}

uint64_t sub_100084EAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *v8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v15 = Data._bridgeToObjectiveC()().super.isa;
  v18[4] = a7;
  uint64_t v19 = a8;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256LL;
  v18[2] = sub_10004F050;
  v18[3] = &unk_1000C5A50;
  uint64_t v16 = _Block_copy(v18);
  swift_retain(a8);
  [v13 verifySignedData:isa matchesExpectedData:v15 withTokenURI:a5 forAlgorithm:a6 completion:v16];
  _Block_release(v16);

  return swift_release(v19);
}

uint64_t sub_100084F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9 = *v5;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13[4] = a4;
  uint64_t v14 = a5;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  void v13[2] = sub_100085054;
  void v13[3] = &unk_1000C5A28;
  uint64_t v11 = _Block_copy(v13);
  swift_retain(a5);
  [v9 signData:isa withAlgorithm:a3 completion:v11];
  _Block_release(v11);

  return swift_release(v14);
}

uint64_t sub_100085054(uint64_t a1, void *a2, void *a3)
{
  objc_super v4 = a2;
  id v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    swift_retain(v5);
    id v7 = v4;
    objc_super v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v9 = v8;
  }

  else
  {
    swift_retain(v5);
    unint64_t v9 = 0xF000000000000000LL;
  }

  id v10 = a3;
  v6(v4, v9, a3);

  sub_10000C048((uint64_t)v4, v9);
  return swift_release(v5);
}

id sub_1000850E8()
{
  id result = [*v0 pushToken];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v3;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100085144()
{
  return type metadata accessor for VoucherManagerImpl(0LL);
}

uint64_t type metadata accessor for VoucherManagerImpl(uint64_t a1)
{
  uint64_t result = qword_1000CFF88;
  if (!qword_1000CFF88) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VoucherManagerImpl);
  }
  return result;
}

uint64_t sub_100085188(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  void v4[2] = &unk_1000AA830;
  v4[3] = &unk_1000AA830;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10008521C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CountLimitCache.WrappedKey( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100087530(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountLimitCache.WrappedKey);
}

uint64_t sub_100085298(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 88));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CountLimitCache.WrappedValue( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100087530(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountLimitCache.WrappedValue);
}

uint64_t initializeBufferWithCopyOfBuffer for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100085358(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_100085358(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t destroy for VoucherManagerImpl.VerificationQuery(uint64_t a1)
{
  return sub_100085374(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_100085374(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t assignWithCopy for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100085358(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100085374(v5, v6);
  return a1;
}

uint64_t initializeWithTake for VoucherManagerImpl.VerificationQuery(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for VoucherManagerImpl.VerificationQuery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(_BYTE *)(a1 + 8);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_100085374(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoucherManagerImpl.VerificationQuery(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VoucherManagerImpl.VerificationQuery( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000854AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000854B4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for VoucherManagerImpl.VerificationQuery()
{
  return &type metadata for VoucherManagerImpl.VerificationQuery;
}

uint64_t sub_1000854D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t type metadata accessor for CountLimitCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100087530(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountLimitCache);
}

void *sub_1000854E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_10000360C(&qword_1000CE7E8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100085AE8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000855F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_10000360C(&qword_1000D0128);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100086050(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

id sub_1000856FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v41 = a4;
  uint64_t v39 = a3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  uint64_t v38 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v45[3] = sub_1000052E0(0LL, &qword_1000D0148, &OBJC_CLASS___IDSService_ptr);
  v45[4] = &off_1000C5580;
  v45[0] = a1;
  v44[3] = sub_1000052E0(0LL, &qword_1000D0150, &OBJC_CLASS___IDSPushHandler_ptr);
  void v44[4] = &off_1000C5598;
  v44[0] = a2;
  uint64_t v17 = OBJC_IVAR___CSDVoucherManagerImpl_verificationCache;
  id v18 = objc_allocWithZone(&OBJC_CLASS___NSCache);
  uint64_t v19 = a5;
  id v20 = [v18 init];
  [v20 setCountLimit:32];
  *(void *)&a5[v17] = v20;
  if (qword_1000CD6B0 != -1) {
    swift_once(&qword_1000CD6B0, sub_100088EBC);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10000ADF4(v21, (uint64_t)qword_1000D3680);
  id v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Initializing VoucherManager.", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  uint64_t v26 = sub_1000052E0(0LL, (unint64_t *)&qword_1000CD710, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v26);
  char v43 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_10000465C( &qword_1000CD718,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v28 = sub_10000360C(&qword_1000CD720);
  uint64_t v29 = sub_10000C1B4((unint64_t *)&qword_1000CD728, &qword_1000CD720);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v28, v29, v11, v27);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v38);
  *(void *)&v19[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000032LL,  0x80000001000A5D40LL,  v16,  v13,  v10,  0LL);
  sub_10000F310((uint64_t)v45, (uint64_t)&v19[OBJC_IVAR___CSDVoucherManagerImpl_idsService]);
  sub_10000F310((uint64_t)v44, (uint64_t)&v19[OBJC_IVAR___CSDVoucherManagerImpl_idsPushHandler]);
  uint64_t v30 = v39;
  *(void *)&v19[OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement] = v39;
  uint64_t v31 = &v19[OBJC_IVAR___CSDVoucherManagerImpl_timeout];
  uint64_t v32 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, v41, v32);
  swift_unknownObjectRetain(v30);

  v42.receiver = v19;
  v42.super_class = ObjectType;
  id v35 = objc_msgSendSuper2(&v42, "init");
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
  sub_10000F2F0(v44);
  sub_10000F2F0(v45);
  return v35;
}

uint64_t sub_100085AE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_100085BD8(unint64_t result)
{
  if (result > 5) {
    return 0LL;
  }
  return result;
}

uint64_t sub_100085BE8( uint64_t a1, unint64_t a2, void *a3, char *a4, void (**a5)(void, void, void))
{
  uint64_t v60 = a1;
  unint64_t v61 = a2;
  uint64_t v59 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v64 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v63 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v62 - 8);
  uint64_t v13 = __chkstk_darwin(v62);
  uint64_t v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v52 - v16;
  uint64_t v18 = swift_allocObject(&unk_1000C5920, 24LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  uint64_t v19 = *(void **)&a4[OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement];
  _Block_copy(a5);
  if ([v19 isEnabled])
  {
    uint64_t v20 = swift_allocObject(&unk_1000C5948, 32LL, 7LL);
    uint64_t v21 = (void *)swift_allocObject(&unk_1000C5970, 64LL, 7LL);
    uint64_t v22 = v18;
    uint64_t v23 = v60;
    uint64_t v53 = v17;
    uint64_t v54 = v12;
    unint64_t v24 = v61;
    void v21[2] = v60;
    v21[3] = v24;
    uint64_t v21[4] = sub_100018634;
    void v21[5] = v22;
    uint64_t v25 = a3;
    uint64_t v26 = v22;
    uint64_t v56 = v22;
    uint64_t v57 = v8;
    v21[6] = a4;
    v21[7] = v25;
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100087450;
    *(void *)(v20 + 24) = v21;
    uint64_t v27 = *(void *)&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 24];
    uint64_t v28 = *(void *)&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService + 32];
    v52[1] = sub_10000F2CC(&a4[OBJC_IVAR___CSDVoucherManagerImpl_idsService], v27);
    uint64_t v29 = swift_allocObject(&unk_1000C5998, 32LL, 7LL);
    uint64_t v55 = v10;
    uint64_t v30 = v29;
    *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
    *(void *)(v29 + 24) = v20;
    v52[0] = *(void *)(v28 + 16);
    uint64_t v31 = a4;
    sub_1000109D4(v23, v24);
    swift_retain(v26);
    id v32 = v25;
    swift_retain(v20);
    ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t (*)(uint64_t, unint64_t, uint64_t), uint64_t, uint64_t, uint64_t))v52[0])( v23,  v24,  3LL,  sub_1000874AC,  v30,  v27,  v28);
    uint64_t v33 = swift_release(v30);
    unint64_t v61 = *(void *)&v31[OBJC_IVAR___CSDVoucherManagerImpl_completionQueue];
    static DispatchTime.now()(v33);
    uint64_t v34 = v53;
    + infix(_:_:)(v15, &v31[OBJC_IVAR___CSDVoucherManagerImpl_timeout]);
    id v35 = *(void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v36 = v62;
    v35(v15, v62);
    aBlock[4] = sub_1000874B4;
    uint64_t v67 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10000ABC8;
    aBlock[3] = &unk_1000C59B0;
    uint64_t v37 = _Block_copy(aBlock);
    uint64_t v38 = swift_retain(v20);
    uint64_t v39 = v63;
    static DispatchQoS.unspecified.getter(v38);
    uint64_t v65 = _swiftEmptyArrayStorage;
    uint64_t v40 = sub_10000465C( (unint64_t *)&unk_1000CE340,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v41 = sub_10000360C((uint64_t *)&unk_1000CFBC0);
    uint64_t v42 = sub_10000C1B4(&qword_1000CE350, (uint64_t *)&unk_1000CFBC0);
    char v43 = v55;
    uint64_t v44 = v41;
    uint64_t v45 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v44, v42, v59, v40);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v34, v39, v43, v37);
    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v43, v45);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v39, v58);
    v35(v34, v36);
    uint64_t v46 = v67;
    swift_release(v56);
    swift_release(v20);
    return swift_release(v46);
  }

  else
  {
    unint64_t v48 = sub_10008729C();
    uint64_t v49 = swift_allocError(&type metadata for VoucherManagerError, v48, 0LL, 0LL);
    *uint64_t v50 = 3LL;
    uint64_t v51 = (void *)_convertErrorToNSError(_:)(v49);
    ((void (**)(void, void, void *))a5)[2](a5, 0LL, v51);

    swift_errorRelease(v49);
    return swift_release(v18);
  }

uint64_t sub_100086050(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_10000360C(&qword_1000D0138);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100086158(void *a1, uint64_t a2, void *a3)
{
  id v169 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v167 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  v166 = (char *)&v156 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  v168 = (char *)&v156 - v16;
  uint64_t v17 = swift_allocObject(&unk_1000C57B8, 24LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  v170 = (char *)a2;
  v171 = a3;
  uint64_t v18 = *(void **)(a2 + OBJC_IVAR___CSDVoucherManagerImpl_vouchingEnablement);
  _Block_copy(a3);
  if (![v18 isEnabled])
  {
    unint64_t v30 = sub_10008729C();
    uint64_t v31 = swift_allocError(&type metadata for VoucherManagerError, v30, 0LL, 0LL);
    *id v32 = 3LL;
    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v31);
    ((void (*)(void *, void, void *))v171[2])(v171, 0LL, v33);

    swift_errorRelease(v31);
    return swift_release(v17);
  }

  id v164 = v18;
  uint64_t v19 = v17;
  uint64_t v157 = v13;
  uint64_t v158 = v12;
  if (qword_1000CD6B0 != -1) {
    swift_once(&qword_1000CD6B0, sub_100088EBC);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000ADF4(v20, (uint64_t)qword_1000D3680);
  uint64_t v22 = (void **)v169;
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v163 = v5;
  uint64_t v162 = v6;
  v161 = v8;
  uint64_t v160 = v9;
  uint64_t v159 = v10;
  uint64_t v165 = v21;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = (void ***)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v26 = 138412290;
    aBlock = v22;
    uint64_t v28 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v26 + 4, v26 + 12);
    *uint64_t v27 = v22;

    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Requested to verify %@.", v26, 0xCu);
    uint64_t v29 = sub_10000360C(&qword_1000CE7A0);
    swift_arrayDestroy(v27, 1LL, v29);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

  id v35 = (void **)&v170[OBJC_IVAR___CSDVoucherManagerImpl_verificationCache];
  swift_beginAccess(&v170[OBJC_IVAR___CSDVoucherManagerImpl_verificationCache], &aBlock, 32LL, 0LL);
  uint64_t v36 = *v35;
  uint64_t v37 = (objc_class *)sub_10000360C(&qword_1000D0120);
  uint64_t v38 = (char *)objc_allocWithZone(v37);
  *(void *)&v38[*(void *)((swift_isaMask & *(void *)v38) + 0x68LL)] = v22;
  v180.receiver = v38;
  v180.super_class = v37;
  uint64_t v39 = v22;
  id v40 = objc_msgSendSuper2(&v180, "init");
  uint64_t v41 = [v36 objectForKey:v40];

  if (v41)
  {
    uint64_t v42 = (char *)v41 + *(void *)((swift_isaMask & *v41) + 0x68LL);
    uint64_t v43 = *(void *)v42;
    char v44 = v42[8];
    swift_endAccess(&aBlock);
    sub_100085358(v43, v44);

    if ((v44 & 1) != 0)
    {
      uint64_t v46 = swift_allocObject(&unk_1000C58A8, 32LL, 7LL);
      *(void *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100017D74;
      *(void *)(v46 + 24) = v19;
      id v47 = v39;
      sub_100085358(v43, 1);
      swift_retain(v19);
      swift_retain(v46);
      unint64_t v48 = (void *)v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0) {
        unint64_t v48 = sub_1000855F0(0LL, *(void *)(v43 + 16) + 1LL, 1, (void *)v43);
      }
      unint64_t v50 = v48[2];
      unint64_t v49 = v48[3];
      if (v50 >= v49 >> 1) {
        unint64_t v48 = sub_1000855F0((void *)(v49 > 1), v50 + 1, 1, v48);
      }
      v48[2] = v50 + 1;
      uint64_t v51 = &v48[2 * v50];
      v51[4] = sub_100087708;
      v51[5] = v46;
      swift_release(v46);
      swift_beginAccess(v35, &aBlock, 33LL, 0LL);
      os_log_type_t v52 = *v35;
      uint64_t v53 = (objc_class *)sub_10000360C(&qword_1000D0130);
      uint64_t v54 = (char *)objc_allocWithZone(v53);
      uint64_t v55 = &v54[*(void *)((swift_isaMask & *(void *)v54) + 0x68LL)];
      *(void *)uint64_t v55 = v48;
      v55[8] = 1;
      v173.receiver = v54;
      v173.super_class = v53;
      swift_bridgeObjectRetain_n(v48, 2LL);
      id v56 = objc_msgSendSuper2(&v173, "init");
      uint64_t v57 = (char *)objc_allocWithZone(v37);
      *(void *)&v57[*(void *)((swift_isaMask & *(void *)v57) + 0x68LL)] = v47;
      v172.receiver = v57;
      v172.super_class = v37;
      uint64_t v58 = v47;
      id v59 = objc_msgSendSuper2(&v172, "init");
      [v52 setObject:v56 forKey:v59];
      swift_endAccess(&aBlock);

      swift_bridgeObjectRelease_n(v48, 2LL);
      sub_100085374(v43, 1);
    }

    else
    {
      uint64_t v74 = v43 & 1;
      uint64_t v75 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v77 = 67109120;
        LODWORD(aBlock) = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v77 + 4, v77 + 8);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Retrieved previously verified voucher: %{BOOL}d.", v77, 8u);
        swift_slowDealloc(v77, -1LL, -1LL);
      }

      ((void (*)(void *, uint64_t, void))v171[2])(v171, v74, 0LL);
    }

    goto LABEL_35;
  }

  swift_endAccess(&aBlock);

  id v60 = [v39 handle];
  id v61 = (id)TUCopyIDSFromIDForHandle(v60);

  if (!v61) {
    goto LABEL_30;
  }
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
  uint64_t v64 = v63;

  NSString v65 = [v39 tokenPrefixedURI];
  if (!v65)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v66 = v62;
    uint64_t v68 = v67;
    NSString v65 = String._bridgeToObjectiveC()();
    uint64_t v69 = v68;
    uint64_t v62 = v66;
    swift_bridgeObjectRelease(v69);
  }

  uint64_t v70 = (void *)IDSCopyAddressDestinationForDestination(v65);

  if (!v70)
  {
    swift_bridgeObjectRelease(v64);
    goto LABEL_30;
  }

  uint64_t v156 = v19;
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
  uint64_t v73 = v72;

  if (v62 == v71 && v64 == v73)
  {
    swift_bridgeObjectRelease_n(v64, 2LL);
    uint64_t v19 = v156;
    goto LABEL_27;
  }

  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, v71, v73, 0LL);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v73);
  uint64_t v19 = v156;
  if ((v78 & 1) == 0)
  {
LABEL_30:
    NSString v107 = v39;
    id v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v109))
    {
      id v110 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v111 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v110 = 138412290;
      aBlock = v107;
      uint64_t v112 = v19;
      id v113 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v110 + 4, v110 + 12);
      uint64_t *v111 = v107;

      uint64_t v19 = v112;
      _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "Failed to verify %@ because the token prefixed URI did not come from the handle.",  v110,  0xCu);
      uint64_t v114 = sub_10000360C(&qword_1000CE7A0);
      swift_arrayDestroy(v111, 1LL, v114);
      swift_slowDealloc(v111, -1LL, -1LL);
      swift_slowDealloc(v110, -1LL, -1LL);
    }

    else
    {

      id v108 = (os_log_s *)v107;
    }

    unint64_t v115 = sub_10008729C();
    uint64_t v116 = swift_allocError(&type metadata for VoucherManagerError, v115, 0LL, 0LL);
    uint64_t v118 = v116;
    uint64_t v119 = 4LL;
    goto LABEL_34;
  }

void sub_100087198()
{
}

void sub_1000871C4()
{
}

uint64_t sub_1000871F0(uint64_t a1)
{
  uint64_t v2 = sub_10000360C(&qword_1000CE540);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100087230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000360C(&qword_1000CE540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100087278()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_10008729C()
{
  unint64_t result = qword_1000D0118;
  if (!qword_1000D0118)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AAAAC, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_1000D0118);
  }

  return result;
}

uint64_t sub_1000872E0(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_10008730C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100087338(unsigned __int8 a1, uint64_t a2)
{
  return sub_10008419C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100087344(char a1, uint64_t a2)
{
  return sub_10008470C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10008734C()
{
  return sub_1000849BC(v0);
}

uint64_t sub_100087354(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100087364(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10008736C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100087390()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000873BC()
{
  return sub_100084918(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000873CC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100085374(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1000873E8()
{
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100087414()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100087450(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_100087480()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000874AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100083B8C(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1000874B4()
{
  return sub_100083E5C(v0);
}

uint64_t sub_1000874BC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000874CC()
{
  unint64_t v1 = v0[4];
  if (v1 >> 60 != 15) {
    sub_10000BE18(v0[3], v1);
  }
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100087510()
{
  return sub_100083DA8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10008751C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000109D4(result, a2);
  }
  return result;
}

uint64_t sub_100087530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

ValueMetadata *type metadata accessor for VoucherManagerError()
{
  return &type metadata for VoucherManagerError;
}

unint64_t sub_100087574()
{
  unint64_t result = qword_1000D0158;
  if (!qword_1000D0158)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AA994, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_1000D0158);
  }

  return result;
}

unint64_t sub_1000875BC()
{
  unint64_t result = qword_1000D0160;
  if (!qword_1000D0160)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AAA44, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_1000D0160);
  }

  return result;
}

unint64_t sub_100087604()
{
  unint64_t result = qword_1000D0168;
  if (!qword_1000D0168)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AAA0C, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_1000D0168);
  }

  return result;
}

unint64_t sub_10008764C()
{
  unint64_t result = qword_1000D0170;
  if (!qword_1000D0170)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AAA84, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_1000D0170);
  }

  return result;
}

unint64_t sub_100087690()
{
  unint64_t result = qword_1000D0178;
  if (!qword_1000D0178)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000AA9C4, &type metadata for VoucherManagerError);
    atomic_store(result, (unint64_t *)&qword_1000D0178);
  }

  return result;
}

uint64_t sub_10008770C()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 80));
  swift_release(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  return v0;
}

uint64_t sub_100087790()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for CompanionLinkManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService20CompanionLinkManager);
}

uint64_t sub_1000877D0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000877DC(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  v10._object = (void *)0x80000001000A5F70LL;
  v10._countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v10);
  swift_bridgeObjectRetain(a2);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(a2);
  v12._object = (void *)0xEB00000000203A74LL;
  v12._countAndFlagsBits = 0x736575716572283ELL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = _typeName(_:qualified:)(a4, 0LL);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x6E6F70736572202CLL;
  v15._object = (void *)0xEC000000203A6573LL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = _typeName(_:qualified:)(a5, 0LL);
  uint64_t v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 0x6E6F6974706F202CLL;
  v18._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v18);
  if (a3) {
    unint64_t v19 = a3;
  }
  else {
    unint64_t v19 = sub_10000393C((uint64_t)_swiftEmptyArrayStorage);
  }
  swift_bridgeObjectRetain(a3);
  v20._countAndFlagsBits = Dictionary.description.getter( v19,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  uint64_t v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21);
  v22._countAndFlagsBits = 41LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  return 0LL;
}

uint64_t sub_1000879A4(uint64_t a1)
{
  return sub_1000877DC( *(void *)v1,  *(void **)(v1 + 8),  *(void *)(v1 + 16),  *(void *)(a1 + 16),  *(void *)(a1 + 24));
}

uint64_t sub_1000879B8(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  v8._object = (void *)0x80000001000A5F90LL;
  v8._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v8);
  swift_bridgeObjectRetain(a2);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(a2);
  v10._countAndFlagsBits = 0x3A746E657665283ELL;
  v10._object = (void *)0xE900000000000020LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = _typeName(_:qualified:)(a4, 0LL);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 0x6E6F6974706F202CLL;
  v13._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v13);
  if (a3) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = sub_10000393C((uint64_t)_swiftEmptyArrayStorage);
  }
  swift_bridgeObjectRetain(a3);
  v15._countAndFlagsBits = Dictionary.description.getter( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  Swift::String v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 41LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  return 0LL;
}

uint64_t sub_100087B30(uint64_t a1)
{
  return sub_1000879B8(*(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16), *(void *)(a1 + 16));
}

uint64_t sub_100087B44()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for CompanionRpcMessenger()
{
  return objc_opt_self(&OBJC_CLASS____TtC44com_apple_NeighborhoodActivityConduitService21CompanionRpcMessenger);
}

uint64_t sub_100087B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

__n128 initializeWithTake for CaptureDeviceManager(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CompanionRpcDefinition(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for CompanionRpcDefinition);
}

uint64_t sub_100087BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_100087BD0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *sub_100087BF8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}