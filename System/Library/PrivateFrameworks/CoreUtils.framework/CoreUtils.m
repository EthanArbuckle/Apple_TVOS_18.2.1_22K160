__n128 AES_CTR_Init(CCCryptorRef *cryptorRef, void *key, __n128 *a3)
{
  __n128 result;
  *cryptorRef = 0LL;
  if (!CCCryptorCreate(0, 0, 2u, key, 0x10uLL, 0LL, cryptorRef))
  {
    result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
    cryptorRef[5] = 0LL;
  }

  return result;
}

uint64_t AES_CTR_Update(uint64_t a1, char *a2, unint64_t a3, _BYTE *a4)
{
  unint64_t v5 = a3;
  v8 = (_BYTE *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  if (a3 && v9)
  {
    do
    {
      char v10 = *a2++;
      *a4++ = v8[v9] ^ v10;
      uint64_t v9 = ((int)v9 + 1) & 0xFLL;
      --v5;
    }

    while (v5 && v9);
  }

  *(void *)(a1 + 40) = v9;
  if (v5 < 0x10)
  {
LABEL_14:
    if (v5)
    {
      uint64_t result = CCCryptorUpdate(*(CCCryptorRef *)a1, (const void *)(a1 + 8), 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if (!(_DWORD)result)
      {
        if (dataOutMoved == 16)
        {
          uint64_t v15 = 23LL;
          do
          {
            if (v15 == 7) {
              break;
            }
            __int16 v16 = (*(_BYTE *)(a1 + v15--))++ + 1;
          }

          while ((v16 & 0x100) != 0);
          uint64_t v17 = 0LL;
          size_t dataOutMoved = 0LL;
          if (v5 <= 1) {
            uint64_t v18 = 1LL;
          }
          else {
            uint64_t v18 = v5;
          }
          do
          {
            a4[v17] = *(_BYTE *)(v9 + a1 + 24 + v17) ^ a2[v17];
            size_t dataOutMoved = ++v17;
          }

          while (v18 != v17);
          uint64_t result = 0LL;
          *(void *)(a1 + 40) = v9 + v17;
        }

        else
        {
          return 4294960553LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    while (1)
    {
      uint64_t result = CCCryptorUpdate(*(CCCryptorRef *)a1, (const void *)(a1 + 8), 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if ((_DWORD)result) {
        break;
      }
      if (dataOutMoved != 16) {
        return 4294960553LL;
      }
      uint64_t v12 = 23LL;
      do
      {
        if (v12 == 7) {
          break;
        }
        __int16 v13 = (*(_BYTE *)(a1 + v12--))++ + 1;
      }

      while ((v13 & 0x100) != 0);
      uint64_t v14 = 0LL;
      size_t dataOutMoved = 0LL;
      do
      {
        a4[v14] = v8[v14] ^ a2[v14];
        size_t dataOutMoved = ++v14;
      }

      while (v14 != 16);
      a2 += 16;
      a4 += 16;
      v5 -= 16LL;
      if (v5 <= 0xF) {
        goto LABEL_14;
      }
    }
  }

  return result;
}

uint64_t AES_CTR_Final(_CCCryptor **__s)
{
  v2 = *__s;
  if (v2) {
    CCCryptorRelease(v2);
  }
  return memset_s(__s, 0x30uLL, 0, 0x30uLL);
}

__n128 AES_CBCFrame_Init(CCCryptorRef *cryptorRef, void *key, __n128 *a3, int a4)
{
  *cryptorRef = 0LL;
  if (!CCCryptorCreate(a4 == 0, 0, 0, key, 0x10uLL, 0LL, cryptorRef))
  {
    __n128 result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
  }

  return result;
}

uint64_t AES_CBCFrame_Update(CCCryptorRef *a1, char *a2, uint64_t a3, _BYTE *a4)
{
  size_t v7 = a3 & 0xFFFFFFFFFFFFFFF0LL;
  size_t dataOutMoved = a3 & 0xFFFFFFFFFFFFFFF0LL;
  if ((a3 & 0xFFFFFFFFFFFFFFF0LL) != 0)
  {
    uint64_t result = CCCryptorReset(*a1, a1 + 1);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t result = CCCryptorUpdate(*a1, a2, v7, a4, v7, &dataOutMoved);
    if ((_DWORD)result) {
      return result;
    }
    char v10 = &a2[dataOutMoved];
    a4 += dataOutMoved;
  }

  else
  {
    char v10 = a2;
  }

  while (v10 != &a2[a3])
  {
    char v11 = *v10++;
    *a4++ = v11;
  }

  return 0LL;
}

uint64_t AES_CBCFrame_Final(_CCCryptor **__s)
{
  v2 = *__s;
  if (v2) {
    CCCryptorRelease(v2);
  }
  return memset_s(__s, 0x18uLL, 0, 0x18uLL);
}

double AES_GCM_Init(CCCryptorRef *a1, void *key, __n128 *a3)
{
  *(void *)&double result = AES_GCM_InitEx(a1, 0, key, a3).n128_u64[0];
  return result;
}

__n128 AES_GCM_InitEx(CCCryptorRef *cryptorRef, CCOperation op, void *key, __n128 *a4)
{
  CCCryptorStatus v6 = CCCryptorCreateWithMode(op, 0xBu, 0, 0, 0LL, key, 0x10uLL, 0LL, 0LL, 0, 0, cryptorRef);
  if (a4)
  {
    if (!v6)
    {
      __n128 result = *a4;
      *(__n128 *)(cryptorRef + 1) = *a4;
    }
  }

  return result;
}

uint64_t AES_GCM_InitEx2(CCCryptorRef *cryptorRef, CCOperation op, void *key, size_t keyLength)
{
  return CCCryptorCreateWithMode(op, 0xBu, 0, 0, 0LL, key, keyLength, 0LL, 0LL, 0, 0, cryptorRef);
}

uint64_t AES_GCM_Final(_CCCryptor **__s)
{
  v2 = *__s;
  if (v2) {
    CCCryptorRelease(v2);
  }
  return memset_s(__s, 0x18uLL, 0, 0x18uLL);
}

uint64_t AES_GCM_InitMessage(uint64_t a1, uint64_t a2)
{
  uint64_t result = CCCryptorGCMReset();
  if (!(_DWORD)result)
  {
    if (!a2)
    {
      uint64_t v5 = 23LL;
      do
      {
        if (v5 == 7) {
          break;
        }
        __int16 v6 = (*(_BYTE *)(a1 + v5--))++ + 1;
      }

      while ((v6 & 0x100) != 0);
    }

    return CCCryptorGCMSetIV();
  }

  return result;
}

uint64_t AES_GCM_InitMessageEx()
{
  uint64_t result = CCCryptorGCMReset();
  if (!(_DWORD)result) {
    return CCCryptorGCMSetIV();
  }
  return result;
}

uint64_t AES_GCM_FinalizeMessage()
{
  return CCCryptorGCMFinalize();
}

uint64_t AES_GCM_VerifyMessage()
{
  return CCCryptorGCMFinalize();
}

uint64_t AES_GCM_AddAAD()
{
  return CCCryptorGCMAddAAD();
}

void AES_GCM_Encrypt()
{
}

void AES_GCM_Decrypt()
{
}

uint64_t SimpleArrayAppendItem(void **a1, uint64_t *a2, size_t a3, const void *a4)
{
  uint64_t v4 = *a2;
  size_t v5 = *a2 * a3;
  if (__CFADD__(v5, a3)) {
    return 4294960553LL;
  }
  char v10 = *a1;
  char v11 = (char *)malloc(v5 + a3);
  if (!v11) {
    return 4294960568LL;
  }
  uint64_t v12 = v11;
  if (v4) {
    memcpy(v11, v10, v5);
  }
  memcpy(&v12[v5], a4, a3);
  if (v10) {
    free(v10);
  }
  uint64_t result = 0LL;
  *a1 = v12;
  *a2 = v4 + 1;
  return result;
}

uint64_t SimpleArrayRemoveItemAtIndex( void **a1, unint64_t *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5 = *a2;
  if (*a2 <= a4) {
    return 4294960586LL;
  }
  char v10 = (char *)*a1;
  if (a5)
  {
    if (v5 < 2)
    {
      free(*a1);
      uint64_t result = 0LL;
      *a1 = 0LL;
      *a2 = 0LL;
    }

    else
    {
      unint64_t v11 = v5 - 1;
      BOOL v12 = !is_mul_ok(a3, v5 - 1);
      uint64_t result = 4294960553LL;
      if (a3 && !v12)
      {
        uint64_t v14 = (char *)malloc(a3 * v11);
        if (v14)
        {
          uint64_t v15 = v14;
          if (a4)
          {
            memcpy(v14, v10, a4 * a3);
            uint64_t v14 = &v15[a4 * a3];
          }

          unint64_t v16 = a3 + a3 * a4;
          if (v16 != v5 * a3) {
            memcpy(v14, &v10[v16], v5 * a3 - v16);
          }
          *a1 = v15;
          *a2 = v11;
          free(v10);
          return 0LL;
        }

        else
        {
          return 4294960568LL;
        }
      }
    }
  }

  else
  {
    if (v5 - 1 > a4) {
      memcpy(&v10[a4 * a3], &v10[a3 + a4 * a3], v5 * a3 - (a3 + a4 * a3));
    }
    uint64_t result = 0LL;
    *a2 = v5 - 1;
  }

  return result;
}

uint64_t AsyncConnection_Connect( void *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  uint64_t v23 = 0LL;
  __int128 v25 = 0u;
  uint64_t v24 = 152LL;
  uint64_t v12 = a2;
  int v13 = a3;
  int v14 = a4;
  uint64_t v15 = a5;
  int v16 = a6;
  int v17 = a7;
  uint64_t v18 = a8;
  __int128 v19 = a9;
  uint64_t v20 = a10;
  uint64_t v21 = a11;
  uint64_t v22 = 0LL;
  return AsyncConnection_ConnectEx(a1, (uint64_t)&v12);
}

uint64_t AsyncConnection_ConnectEx(void *a1, uint64_t a2)
{
  uint64_t v4 = calloc(1uLL, 0xB8uLL);
  if (!v4) {
    return 4294960568LL;
  }
  unint64_t v5 = v4;
  *uint64_t v4 = 1;
  if (*(void *)a2)
  {
    __int16 v6 = strdup(*(const char **)a2);
    *((void *)v5 + 1) = v6;
    if (!v6)
    {
      _AsyncConnection_Release(v5);
      return 4294960568LL;
    }
  }

  *((void *)v5 + 2) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    uint64_t v7 = -1LL;
  }
  *((void *)v5 + 6) = v7;
  *((void *)v5 + 3) = *(void *)(a2 + 80);
  double Current = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v9 = *(int **)(a2 + 72);
  if (!v9) {
    uint64_t v9 = &gLogCategory_AsyncCnx;
  }
  *((void *)v5 + 18) = v9;
  *((void *)v5 + 7) = *(void *)(a2 + 24);
  *((double *)v5 + 8) = Current;
  *((void *)v5 + 13) = v10;
  *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 48);
  if ((*(_BYTE *)(a2 + 13) & 4) != 0)
  {
    unint64_t v11 = *(void *)(a2 + 88);
    if (v11 >= 0x68)
    {
      if (*(void *)(a2 + 96))
      {
        *((void *)v5 + 17) = strdup(*(const char **)(a2 + 96));
        uint64_t v18 = &gLogCategory_AsyncCnx;
        LogCategoryReplaceF((uint64_t *)&v18);
        uint64_t v12 = v18;
        if (v18)
        {
          *((void *)v5 + 18) = v18;
          *((void *)v5 + 19) = v12;
        }

        unint64_t v11 = *(void *)(a2 + 88);
      }

      if (v11 >= 0x70)
      {
        *((void *)v5 + 16) = *(void *)(a2 + 104);
        if (v11 >= 0x78)
        {
          int v13 = *(const void **)(a2 + 112);
          if (v13)
          {
            CFRetain(v13);
            uint64_t v14 = *(void *)(a2 + 112);
            unint64_t v11 = *(void *)(a2 + 88);
          }

          else
          {
            uint64_t v14 = 0LL;
          }

          *((void *)v5 + 20) = v14;
          if (v11 >= 0x7C)
          {
            v5[42] = *(_DWORD *)(a2 + 120);
            if (v11 >= 0x84)
            {
              int v15 = *(_DWORD *)(a2 + 124);
              int v16 = *(_DWORD *)(a2 + 128);
              if (!v15) {
                int v15 = 1000;
              }
              v5[43] = v15;
              v5[44] = v16;
              if (v11 >= 0x90)
              {
                *((void *)v5 + 4) = *(void *)(a2 + 136);
                if (v11 >= 0x94) {
                  v5[45] = *(_DWORD *)(a2 + 144);
                }
              }
            }
          }
        }
      }
    }
  }

  dispatch_retain(*(dispatch_object_t *)(a2 + 64));
  dispatch_async_f(*(dispatch_queue_t *)(a2 + 64), v5, (dispatch_function_t)_AsyncConnection_Connect);
  uint64_t result = 0LL;
  *a1 = v5;
  return result;
}

void _AsyncConnection_Connect( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(const __CFArray **)(a1 + 160);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 160));
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      CFIndex v12 = 0LL;
      uint64_t v13 = 4294960591LL;
      while (1)
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v9, v12, TypeID, 0LL);
        if (TypedValueAtIndex) {
          break;
        }
LABEL_22:
        if (v11 == ++v12) {
          goto LABEL_37;
        }
      }

      int v16 = TypedValueAtIndex;
      Value = CFDictionaryGetValue(TypedValueAtIndex, @"nanEP");
      if (!Value)
      {
        uint64_t v24 = CFDictionaryCopyCString(v16, @"dnsName", 0LL);
        if (v24)
        {
          __int128 v25 = v24;
          if (!*(void *)(a1 + 8)) {
            *(void *)(a1 + 8) = v24;
          }
          uint64_t v26 = _AsyncConnection_ConnectOne(a1, v24);
          if ((_DWORD)v26 != -6757)
          {
            if ((_DWORD)v26) {
              goto LABEL_30;
            }
            uint64_t v13 = 0LL;
          }
        }

        goto LABEL_22;
      }

      uint64_t v22 = Value;
      uint64_t v23 = *(int **)(a1 + 144);
      if (*v23 <= 50)
      {
        if (*v23 != -1)
        {
LABEL_8:
          LogPrintF( (uint64_t)v23,  (uint64_t)"OSStatus _AsyncConnection_StartNANDataSession(AsyncConnectionRef, CFTypeRef)",  0x32u,  (uint64_t)"NAN data session start: %@\n",  v18,  v19,  v20,  v21,  (char)v22);
          goto LABEL_18;
        }

        if (_LogCategory_Initialize((uint64_t)v23, 0x32u))
        {
          uint64_t v23 = *(int **)(a1 + 144);
          goto LABEL_8;
        }
      }

LABEL_18:
      __int128 v27 = (char *)calloc(1uLL, 0xB8uLL);
      if (v27)
      {
        uint64_t v28 = v27;
        ++*(_DWORD *)a1;
        *(_DWORD *)__int128 v27 = 1;
        *((void *)v27 + 2) = a1;
        *((_DWORD *)v27 + 15) = -1;
        v29 = objc_alloc_init(&OBJC_CLASS___CUNANDataSession);
        *((void *)v28 + 13) = v29;
        -[CUNANDataSession setDispatchQueue:](v29, "setDispatchQueue:", *(void *)(a1 + 104));
        if (*(void *)(a1 + 136)) {
          -[CUNANDataSession setLabel:](v29, "setLabel:", objc_msgSend(NSString, "stringWithUTF8String:"));
        }
        -[CUNANDataSession setPeerEndpoint:](v29, "setPeerEndpoint:", v22);
        -[CUNANDataSession setTrafficFlags:](v29, "setTrafficFlags:", *(unsigned int *)(a1 + 168));
        ++*(_DWORD *)v28;
        __stringp[0] = (char *)MEMORY[0x1895F87A8];
        __stringp[1] = (char *)3221225472LL;
        __stringp[2] = (char *)___AsyncConnection_StartNANDataSession_block_invoke;
        __stringp[3] = (char *)&unk_189F2FCD0;
        __stringp[4] = (char *)v29;
        __stringp[5] = (char *)a1;
        __stringp[6] = v28;
        -[CUNANDataSession activateWithCompletion:](v29, "activateWithCompletion:", __stringp);
        uint64_t v13 = 0LL;
        *((void *)v28 + 1) = *(void *)(a1 + 80);
        *(void *)(a1 + 80) = v28;
      }

      else
      {
        uint64_t v13 = 4294960568LL;
      }

      goto LABEL_22;
    }

    uint64_t v26 = 4294960591LL;
    goto LABEL_30;
  }

  v30 = *(int **)(a1 + 144);
  if (*v30 <= 50)
  {
    if (*v30 != -1)
    {
LABEL_28:
      LogPrintF( (uint64_t)v30,  (uint64_t)"OSStatus _AsyncConnection_ConnectStrings(AsyncConnectionRef)",  0x32u,  (uint64_t)"Connect start: '%s'\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 8));
      goto LABEL_32;
    }

    if (_LogCategory_Initialize((uint64_t)v30, 0x32u))
    {
      v30 = *(int **)(a1 + 144);
      goto LABEL_28;
    }
  }

  int v16 = *(const void **)(a1 + 24);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 24) = 0LL;
  }

  if (a4) {
    *a4 = v20;
  }
  if (a5) {
    *a5 = v14;
  }
  return v13;
}

  uint64_t v32 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
  readRequests = self->_readRequests;
  self->_readRequests = v32;

  v34 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
  writeRequests = self->_writeRequests;
  self->_writeRequests = v34;
  dispatch_time_t v35 = 1;
LABEL_28:

  return v35;
}

  dispatch_source_t v33 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
  readRequests = self->_readRequests;
  self->_readRequests = v33;

  dispatch_time_t v35 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
  writeRequests = self->_writeRequests;
  self->_writeRequests = v35;
  v36 = 1;
LABEL_28:

  return v36;
}

  softLinkBTLocalDeviceRemoveCallbacks((uint64_t)self->_btLocalDevice, (uint64_t)&self->_btLocalDeviceCallbacks);
  self->_btLocalDeviceCallbacksRegistered = 0;
LABEL_19:
  if (!self->_btPairingAgentStarted) {
    goto LABEL_25;
  }
  uint64_t v14 = self->_ucat;
  if (v14->var0 <= 30)
  {
    if (v14->var0 == -1)
    {
      uint64_t v14 = self->_ucat;
    }

    LogPrintF( (uint64_t)v14,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x1Eu,  (uint64_t)"BTPairingAgentStop\n",  v2,  v3,  v4,  v5,  v28);
  }

  return v14;
}

    v29 = (void (**)(void))self->_selfAccessoryMediaSystemUpdatedHandler;
    if (v29) {
      v29[2]();
    }
    goto LABEL_84;
  }

      v15[2](v15, v21, 0LL);
LABEL_21:

      goto LABEL_22;
    }

    if (var0 <= 90)
    {
      if (var0 == -1)
      {
        ucat = self->_ucat;
      }

      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUHomeKitManager _getPairingIdentityCompleted:options:error:label:completion:]",  0x5Au,  (uint64_t)"### GetPairingIdentity convert failed: %{error}\n",  v22,  v23,  v24,  v25,  (char)v26);
    }

  -[CUHomeKitManager _findPairedPeerWithContext:](self, "_findPairedPeerWithContext:", v60);
LABEL_33:
}

  uint64_t v19 = (void *)MEMORY[0x189607870];
  uint64_t v20 = *MEMORY[0x189607670];
  uint64_t v21 = v17;
  uint64_t v28 = *MEMORY[0x1896075E0];
  uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v17, 0, 0));
  uint64_t v23 = (void *)v22;
  uint64_t v24 = @"?";
  if (v22) {
    uint64_t v24 = (const __CFString *)v22;
  }
  v29[0] = v24;
  [MEMORY[0x189603F68] dictionaryWithObjects:v29 forKeys:&v28 count:1];
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 errorWithDomain:v20 code:v21 userInfo:v25];
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUPairingSession _completed:](self, "_completed:", v26);

LABEL_8:
}

  Int64 = CFDictionaryGetInt64(v5, @"Is Charging", 0LL);
  uint64_t v23 = CFDictionaryGetInt64(v5, @"Show Charging UI", 0LL);
  uint64_t v24 = v23 != 0;
  __int128 v25 = (Int64 | v23) != 0;
  if (self->_charging != v25)
  {
    self->_charging = v25;
    v14 |= 4u;
  }

  if (self->_showChargingUI != v24)
  {
    self->_showChargingUI = v24;
    v14 |= 4u;
  }

  Double = CFDictionaryGetDouble(v5, @"Current Capacity", 0LL);
  __int128 v27 = CFDictionaryGetDouble(v5, @"Max Capacity", 0LL);
  uint64_t v28 = Double / v27;
  if (v27 <= 0.0) {
    uint64_t v28 = 1.0;
  }
  if (v28 > 1.0) {
    uint64_t v28 = 1.0;
  }
  if (v28 < 0.0) {
    uint64_t v28 = 0.0;
  }
  if (v28 != self->_chargeLevel)
  {
    self->_chargeLevel = v28;
    v14 |= 2u;
  }

  v29 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Group Identifier", v29, 0LL);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    groupID = self->_groupID;
    uint64_t v32 = v30;
    dispatch_source_t v33 = groupID;
    if (v32 == v33)
    {
    }

    else
    {
      v34 = v33;
      if (v33)
      {
        dispatch_time_t v35 = -[NSString isEqual:](v32, "isEqual:", v33);

        if ((v35 & 1) != 0) {
          goto LABEL_38;
        }
      }

      else
      {
      }

      objc_storeStrong((id *)&self->_groupID, v30);
      v14 |= 1u;
    }
  }

      CFIndex v12 = 0;
      goto LABEL_19;
    }

    CFIndex v12 = 0;
  }

    -[SiriTTSDaemonSession cancelWithRequest:](self->_speechSynthesizer, "cancelWithRequest:", v24);
  }

  uint64_t v26 = softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences();
  __int128 v27 = @"en-US";
  if (v26) {
    __int128 v27 = (__CFString *)v26;
  }
  uint64_t v28 = (Class (__cdecl *)())getSiriTTSSynthesisVoiceClass[0];
  v29 = v27;
  v30 = (void *)[objc_alloc(v28()) initWithLanguage:v29 name:0];

  v31 = (void *)[objc_alloc((Class)getSiriTTSSpeechRequestClass[0]()) initWithText:v39 voice:v30];
  dispatch_source_t v33 = v31;
  if (a5 > 0.0)
  {
    *(float *)&uint64_t v32 = a5;
    [v31 setPlaybackVolume:v32];
  }

  v34 = objc_alloc_init(&OBJC_CLASS___CUVoiceRequest);
  -[CUVoiceRequest setCompletion:](v34, "setCompletion:", v14);
  -[CUVoiceRequest setFlags:](v34, "setFlags:", v8);
  -[CUVoiceRequest setOwner:](v34, "setOwner:", self);
  -[CUVoiceRequest setSpeechRequest:](v34, "setSpeechRequest:", v33);
  requests = self->_requests;
  if (!requests)
  {
    v36 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
    v37 = self->_requests;
    self->_requests = v36;

    requests = self->_requests;
  }

  -[NSMutableArray addObject:](requests, "addObject:", v34);
  -[CUVoiceSession _processQueuedRequests](self, "_processQueuedRequests");
}

    if (v24)
    {
      uint64_t v18 = (void *)MEMORY[0x189603F70];
      uint64_t v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 allObjects];
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "componentsJoinedByString:", @", ");
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
      [v18 raise:*MEMORY[0x189603A60], @"'%@' array contained unexpected type %@, allowed types: %@", v25, v20, v22 format];
    }

    int v17 = 0LL;
  }

  else
  {
    int v17 = 1LL;
  }

      if (!*v15) {
        return result;
      }
      if ((v18 & 0x80) != 0)
      {
        uint64_t result = __maskrune(v18, 0x4000uLL);
        if (!(_DWORD)result)
        {
LABEL_23:
          if ((v7 & 1) != 0) {
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a4)(5LL, a5);
          }
          else {
            uint64_t result = usleep(3 * v13);
          }
        }
      }

      else
      {
        uint64_t result = *(_DWORD *)(v16 + 4LL * v17 + 60) & 0x4000;
        if (!(_DWORD)result) {
          goto LABEL_23;
        }
      }

      uint64_t v20 = *v15++;
      uint64_t v14 = v20;
    }

    while (v20);
  }

  return result;
}

      __int128 v25 = -6751;
LABEL_22:
      uint64_t v26 = v25;
LABEL_23:
      CFRelease(Mutable);
      Mutable = 0LL;
      uint64_t v18 = v26;
    }
  }

  else
  {
    uint64_t v18 = -6728;
  }

  *a5 = a2;
  *a6 = v18;
  return Mutable;
}

LABEL_32:
  __stringp[0] = *(char **)(a1 + 8);
  uint64_t v13 = 4294960591LL;
  while (__stringp[0])
  {
    v31 = strsep(__stringp, "\x1E");
    if (!v31) {
      break;
    }
    uint64_t v32 = _AsyncConnection_ConnectOne(a1, v31);
    if ((_DWORD)v32 != -6757)
    {
      uint64_t v13 = v32;
      if ((_DWORD)v32) {
        break;
      }
    }
  }

        uint64_t v21 = *(_DWORD *)(a1 + 180);
        if (v21 < *(_DWORD *)(v19 + 176))
        {
          started = _AsyncConnection_StartConnectDelayed( v19,  (void *)a1,  v21 + 1,  (__int128 *)(a1 + 24),  *(unsigned int *)(a1 + 52),  *(unsigned int *)(a1 + 56),  1000000LL * *(unsigned int *)(v19 + 172),  v16);
          if (started) {
            int v17 = started;
          }
          else {
            int v17 = v17;
          }
        }

        _AsyncConnection_ErrorHandler(a1, v17);
        return;
      }

      uint64_t v23 = 4;
      uint64_t v24 = 0;
      if (!getsockopt(*(_DWORD *)(a1 + 60), 0xFFFF, 4103, &v24, &v23))
      {
LABEL_23:
        uint64_t v18 = v24;
LABEL_24:
        if (v18) {
          int v17 = v18;
        }
        else {
          int v17 = 22LL;
        }
        goto LABEL_28;
      }

      if (*__error())
      {
        uint64_t v18 = *__error();
        if (v18) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }

    int v17 = 4294960596LL;
    goto LABEL_28;
  }

  v3 = DNSServiceProcessResult(v2);
  if ((_DWORD)v3)
  {
    v8 = v3;
    uint64_t v9 = *(int **)(*(void *)(a1 + 16) + 144LL);
    if (*v9 <= 90)
    {
      if (*v9 == -1)
      {
        uint64_t v9 = *(int **)(*(void *)(a1 + 16) + 144LL);
      }

      LogPrintF( (uint64_t)v9,  (uint64_t)"void _AsyncConnection_EventHandler(void *)",  0x5Au,  (uint64_t)"DNSServiceProcessResult failed: %#m...Bonjour crashed\n",  v4,  v5,  v6,  v7,  v8);
    }

  Mutable = 0LL;
  uint64_t v24 = 0LL;
  __int128 v25 = -6750;
LABEL_79:
  v58 = v25;
LABEL_96:
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v58;
}

    dispatch_source_t v33 = 0LL;
    while (v24 != v33)
    {
      if (v14[v33] != aI_1[v33]) {
        goto LABEL_40;
      }
      if (++v33 == 2) {
        goto LABEL_45;
      }
    }

    if (!aI_1[v24])
    {
LABEL_45:
      if (sscanf(v23, "%i", &v77) != 1) {
        goto LABEL_123;
      }
      appended = CFPropertyListAppendFormatted( v7,  v9,  (uint64_t)"%.*ks=%i",  v40,  v41,  v42,  v43,  v44,  (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }

  objc_autoreleasePoolPop(v12);
}

  selfAccessoryMediaAccessPassword = self->_selfAccessoryMediaAccessPassword;
  self->_selfAccessoryMediaAccessPassword = 0LL;

  v36 = 1;
LABEL_33:
  v40 = self->_selfAccessoryMediaSystem;
  v41 = v40 != 0LL;
  if (!v40) {
    goto LABEL_39;
  }
  v42 = self->_ucat;
  if (v42->var0 <= 30)
  {
    if (v42->var0 == -1)
    {
      v42 = self->_ucat;
    }
    v43 = -[HMMediaSystem uniqueIdentifier](v40, "uniqueIdentifier");
    v97 = -[HMMediaSystem name](v40, "name");
    LogPrintF( (uint64_t)v42,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystem ID updated: %@ '%@', HK clear",  v44,  v45,  v46,  v47,  (char)v43);
  }

    v30 = 0;
    goto LABEL_33;
  }

    -[CUTCPConnection invalidate](v13, "invalidate");

    return;
  }

  uint64_t v26 = self->_ucat;
  if (v26->var0 <= 60)
  {
    if (v26->var0 == -1)
    {
      uint64_t v26 = self->_ucat;
    }

    -[NSMutableSet count](self->_connections, "count");
    LogPrintF( (uint64_t)v26,  (uint64_t)"-[CUTCPServer _handleConnectionAccept:]",  0x3Cu,  (uint64_t)"### Rejecting connection from %##a when at limit of %d\n",  v27,  v28,  v29,  v30,  (char)v37);
  }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 4096LL);
        if ((v16 & 0x2000) == 0)
        {
LABEL_20:
          if ((v16 & 0x8000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_34;
        }

          if (v17 < 0)
          {
            uint64_t result = __maskrune(v18, 0x4000uLL);
            if (!(_DWORD)result) {
              break;
            }
          }

          else
          {
            uint64_t result = *(_DWORD *)(v16 + 4LL * v18 + 60) & 0x4000;
            if (!(_DWORD)result) {
              break;
            }
          }

          if ((v7 & 1) != 0) {
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a4)(6LL, a5);
          }
          else {
            uint64_t result = usleep(7 * v13);
          }
          break;
      }

          if (v21 == 46)
          {
            uint64_t v26 = v11 + 1;
            uint64_t v21 = v11[1];
            if (v21 == 42)
            {
              __int128 v27 = (unsigned int *)v348[0];
              v348[0] += 8LL;
              uint64_t v28 = *v27;
              *(void *)&v347 = v28;
              uint64_t v21 = v11[2];
              uint64_t v26 = v11 + 2;
            }

            else if ((v21 - 48) > 9)
            {
              uint64_t v28 = 0LL;
            }

            else
            {
              uint64_t v28 = 0LL;
              do
              {
                uint64_t v28 = v21 - 48 + 10 * v28;
                *(void *)&v347 = v28;
                v29 = *++v26;
                uint64_t v21 = v29;
              }

              while ((v29 - 48) < 0xA);
            }

            LOBYTE(v20) = v20 | 8;
            LOBYTE(v346) = v20;
            CFIndex v11 = v26;
            if ((v20 & 1) != 0)
            {
LABEL_43:
              LOBYTE(v20) = v20 & 0xFB;
              LOBYTE(v346) = v20;
            }
          }

          else
          {
            uint64_t v28 = 0LL;
            if ((v20 & 1) != 0) {
              goto LABEL_43;
            }
          }

          v30 = 0;
          v31 = 0;
          while (2)
          {
            HIDWORD(v32) = v21;
            LODWORD(v32) = (v21 << 24) - 1744830464;
            switch((v32 >> 25))
            {
              case 0u:
                BYTE1(v346) = ++v30;
                goto LABEL_48;
              case 1u:
              case 6u:
              case 9u:
                v30 = 0;
                v31 = 1;
                BYTE2(v346) = 1;
                v34 = *++v11;
                LOBYTE(v21) = v34;
                goto LABEL_51;
              case 2u:
                BYTE2(v346) = ++v31;
LABEL_48:
                dispatch_source_t v33 = *++v11;
                uint64_t v21 = v33;
                continue;
              default:
                v39 = 0xFFFFFFFFLL;
                if (v30 && v31) {
                  return 0xFFFFFFFFLL;
                }
                break;
            }

            break;
          }

          break;
      }

      break;
    }

  if (v5 == v4)
  {
    unint64_t v5 = 0LL;
    *v3 = 0LL;
    *(void *)(a1 + 72) = 0LL;
    uint64_t v22 = *(void *)(a1 + 56);
    if (!v22)
    {
LABEL_53:
      if (v8)
      {
        uint64_t v24 = 4294960533LL;
      }

      else
      {
        *(void *)(a1 + 56) = 4096LL;
        v8 = malloc(0x1000uLL);
        *(void *)(a1 + 48) = v8;
        uint64_t v22 = 4096LL;
        if (v8) {
          goto LABEL_55;
        }
        uint64_t v24 = 4294960568LL;
      }

    int v17 = 4294960568LL;
    goto LABEL_33;
  }

  if (v26 != a10)
  {
    int v17 = 4294960553LL;
    goto LABEL_33;
  }

  v29 = 0LL;
LABEL_9:
  v30 = malloc(v26);
  if (!v30)
  {
    LOBYTE(v31) = 0;
    uint64_t v32 = 0LL;
LABEL_37:
    dispatch_source_t v33 = 0LL;
LABEL_40:
    int v17 = 4294960568LL;
    goto LABEL_22;
  }

  if (ccsrp_client_start_authentication())
  {
    LOBYTE(v31) = 0;
    uint64_t v32 = 0LL;
    dispatch_source_t v33 = 0LL;
    int v17 = 4294960596LL;
    goto LABEL_22;
  }

  if (a4 == -1LL) {
    a4 = strlen(a3);
  }
  uint64_t v32 = strndup(a3, a4);
  if (!v32)
  {
    LOBYTE(v31) = 0;
    goto LABEL_37;
  }

  session_key_length = ccsrp_get_session_key_length();
  if (!session_key_length)
  {
    LOBYTE(v31) = 0;
    dispatch_source_t v33 = 0LL;
    int v17 = 4294960553LL;
    goto LABEL_22;
  }

  dispatch_time_t v35 = session_key_length;
  dispatch_source_t v33 = malloc(session_key_length);
  if (!v33)
  {
    LOBYTE(v31) = 0;
    goto LABEL_40;
  }

  if (a6 == -1) {
    strlen(__s);
  }
  if (!ccsrp_client_process_challenge())
  {
    v31 = malloc(v35);
    if (v31)
    {
      v36 = *a1;
      v37 = MEMORY[0x186E42B34](*(void *)(*a1 + 8LL));
      memcpy(v31, (const void *)(v36 + 32 * v37 + 32), v35);
      int v17 = 0LL;
      *a11 = v30;
      *a12 = v26;
      *a13 = v31;
      *a14 = v35;
      LOBYTE(v31) = 1;
      *a15 = v33;
      *a16 = v35;
      v30 = 0LL;
      dispatch_source_t v33 = 0LL;
      goto LABEL_22;
    }

    goto LABEL_40;
  }

  LOBYTE(v31) = 0;
  int v17 = 4294960542LL;
LABEL_22:
  if (v29) {
    free(v29);
  }
  if (v30) {
    free(v30);
  }
  if (v32) {
    free(v32);
  }
  if (v33) {
    free(v33);
  }
  return 0LL;
}

    mach_absolute_time();
    do
LABEL_38:
      int v15 = __ldaxr((unsigned int *)&gTUTotalFailures);
    while (__stlxr(v15 + 1, (unsigned int *)&gTUTotalFailures));
    _TUPrintF();
    uint64_t v14 = 0;
    goto LABEL_40;
  }

LABEL_37:
  uint64_t v26 = v13;
  if ((_DWORD)v13) {
    goto LABEL_30;
  }
  if (*(void *)(a1 + 48) == -1LL) {
    return;
  }
  dispatch_source_t v33 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *(dispatch_queue_t *)(a1 + 104));
  *(void *)(a1 + 72) = v33;
  if (!v33)
  {
    uint64_t v26 = 4294960596LL;
LABEL_30:
    _AsyncConnection_Complete(a1, 0LL, 0xFFFFFFFFLL, v26);
    return;
  }

  dispatch_set_context(v33, (void *)a1);
  dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 72),  (dispatch_function_t)_AsyncConnection_TimeoutHandler);
  v34 = *(dispatch_source_s **)(a1 + 72);
  dispatch_time_t v35 = dispatch_time(0LL, *(void *)(a1 + 48));
  dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 72));
}

      return;
    }

    if (!-[CUWriteRequest endOfData](v5, "endOfData")) {
      goto LABEL_20;
    }
    uint64_t v19 = self->_ucat;
    if (v19->var0 <= 20)
    {
      if (v19->var0 != -1) {
        goto LABEL_14;
      }
      if (_LogCategory_Initialize((uint64_t)v19, 0x14u))
      {
        uint64_t v19 = self->_ucat;
LABEL_14:
        LogPrintF( (uint64_t)v19,  (uint64_t)"-[CUBLEConnection _processWrites]",  0x14u,  (uint64_t)"Shutdown socket %d\n",  v15,  v16,  v17,  v18,  self->_socketFD);
      }
    }

    if (shutdown(self->_socketFD, 1))
    {
      if (!*__error())
      {
        uint64_t v20 = 4294960596LL;
LABEL_22:
        NSErrorWithOSStatusF((const char *)v20);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_23;
      }

      uint64_t v20 = *__error();
      if ((_DWORD)v20) {
        goto LABEL_22;
      }
    }

    -[CUBLEConnection _run](self, "_run");
    goto LABEL_24;
  }

  uint64_t v14 = self->_ucat;
  if (v14->var0 <= 60)
  {
    if (v14->var0 == -1)
    {
      uint64_t v14 = self->_ucat;
    }

    LogPrintF( (uint64_t)v14,  (uint64_t)"-[CUBLEConnection peripheral:didOpenL2CAPChannel:error:]",  0x3Cu,  (uint64_t)"### DidOpenL2CAPChannel already open: channel %@, error %{error}\n",  v10,  v11,  v12,  v13,  (char)v8);
  }

      return;
    }

    if (!-[CUWriteRequest endOfData](v6, "endOfData")) {
      goto LABEL_20;
    }
    uint64_t v20 = self->_ucat;
    if (v20->var0 <= 9)
    {
      if (v20->var0 != -1) {
        goto LABEL_14;
      }
      if (_LogCategory_Initialize((uint64_t)v20, 9u))
      {
        uint64_t v20 = self->_ucat;
LABEL_14:
        LogPrintF( (uint64_t)v20,  (uint64_t)"-[CUBluetoothClassicConnection _processWrites]",  9u,  (uint64_t)"Shutdown socket %d\n",  v16,  v17,  v18,  v19,  self->_socketFD);
      }
    }

    if (shutdown(self->_socketFD, 1))
    {
      if (!*__error())
      {
        uint64_t v21 = 4294960596LL;
LABEL_22:
        NSErrorF_safe(v5, (const char *)v21);
        int v15 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_23;
      }

      uint64_t v21 = *__error();
      if ((_DWORD)v21) {
        goto LABEL_22;
      }
    }

  if (!self->_btLocalDevice)
  {
    v30 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTLocalDeviceGetDefault[0])( (uint64_t)btSession,  (uint64_t)&self->_btLocalDevice);
    if (v30)
    {
      v51 = (v30 + 310000);
      goto LABEL_79;
    }
  }

    ((void (*)(uint64_t, uint64_t))softLinkBTServiceRemoveCallbacks_2060[0])( (uint64_t)self->_btSession,  (uint64_t)_btServiceEventHandler_2059);
  }

  self->_btSessionAddedServiceCallback = 0;
LABEL_39:
  if (!self->_btSession) {
    goto LABEL_45;
  }
  int v17 = self->_ucat;
  if (v17->var0 <= 30)
  {
    if (v17->var0 == -1)
    {
      int v17 = self->_ucat;
    }

    LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x1Eu,  (uint64_t)"BTSession detach\n",  v2,  v3,  v4,  v5,  v28);
  }

    if ((flags & 0x200) != 0)
    {
      uint64_t v14 = (HMHomeManager *)[objc_alloc((Class)getHMHomeManagerConfigurationClass[0]()) initWithOptions:v9 cachePolicy:2];
      int v15 = (HMHomeManager *)[objc_alloc((Class)getHMHomeManagerClass[0]()) initWithConfiguration:v14];
      homeManager = self->_homeManager;
      self->_homeManager = v15;
    }

    else
    {
      uint64_t v13 = (HMHomeManager *)[objc_alloc((Class)getHMHomeManagerClass[0]()) initWithOptions:v9];
      uint64_t v14 = self->_homeManager;
      self->_homeManager = v13;
    }

    -[HMHomeManager setDelegate:](self->_homeManager, "setDelegate:", self);
LABEL_41:
    -[CUHomeKitManager _updateState](self, "_updateState");
    return;
  }

  uint64_t v10 = self->_ucat;
  if (v10->var0 <= 30)
  {
    if (v10->var0 != -1)
    {
LABEL_20:
      LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUHomeKitManager _activateIfNeeded]",  0x1Eu,  (uint64_t)"Deferring HomeKit init until prefs indicate it's configured\n",  v3,  v4,  v5,  v6,  v17);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
    {
      uint64_t v10 = self->_ucat;
      goto LABEL_20;
    }
  }

            ++v26;
          }

          while (v26 != v25);
          v40 = [obj countByEnumeratingWithState:&v50 objects:v59 count:16];
          __int128 v25 = v40;
          if (!v40)
          {
LABEL_41:

            -[CUHomeKitManager _updateUsers](self, "_updateUsers");
            -[CUHomeKitManager _updateSelfAccessoryIfNeeded](self, "_updateSelfAccessoryIfNeeded");
            -[CUHomeKitManager _updateAccessories](self, "_updateAccessories");
            return;
          }
        }
      }
    }
  }

  v41 = self->_ucat;
  if (v41->var0 <= 30)
  {
    if (v41->var0 != -1)
    {
LABEL_44:
      LogPrintF( (uint64_t)v41,  (uint64_t)"-[CUHomeKitManager _updateHomes]",  0x1Eu,  (uint64_t)"Ignoring update homes before homeManagerDidUpdateHomes",  v2,  v3,  v4,  v5,  v62);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v41, 0x1Eu))
    {
      v41 = self->_ucat;
      goto LABEL_44;
    }
  }

      [v4 completion];
      v61 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
      ((void (**)(void, void, id))v61)[2](v61, 0LL, v7);

LABEL_38:
      goto LABEL_39;
    }

    [v4 setTriedHAP:1];
    [(Class)getHAPSystemKeychainStoreClass[0]() systemStore];
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = 0LL;
    [v5 getLocalPairingIdentity:&v71];
    __int16 v6 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = v71;

    if (v6)
    {
      [v6 identifier];
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v8) {
        goto LABEL_14;
      }
      [v4 identifier];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v10 = [v8 caseInsensitiveCompare:v9];

      if (v10) {
        goto LABEL_14;
      }
      [v6 publicKey];
      CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue();
      [v11 data];
      CFIndex v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        int v17 = mach_absolute_time();
        UpTicksToMilliseconds(v17 - [v4 startTicks]);
        uint64_t v18 = self->_ucat;
        if (v18->var0 <= 30)
        {
          if (v18->var0 == -1)
          {
            uint64_t v18 = self->_ucat;
          }

          [v4 identifier];
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
          LogPrintF( (uint64_t)v18,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:]",  0x1Eu,  (uint64_t)"FindPairedPeer found: '%@', HAP, %llu ms\n",  v20,  v21,  v22,  v23,  (char)v19);
        }

  viewHint = self->_viewHint;
  if (viewHint)
  {
    v47 = v8;
    v43 = viewHint;
    NSAppendPrintF(&v47);
    v39 = v47;

    v8 = v39;
  }

  if (v16 < 0x15)
  {
    v46 = v8;
    NSAppendPrintF(&v46);
    v40 = v46;

    v8 = v40;
  }

  return v8;
}

          int v17 = 0;
          goto LABEL_52;
        }

        v42 = 0LL;
        uint64_t v18 = v9;
        v41 = v13;
        uint64_t v19 = (char *)[v18 encodedBytesAndReturnLength:&v42 error:&v41];
        uint64_t v20 = v41;

        if (v19)
        {
          uint64_t v21 = 0LL;
          uint64_t v22 = v42;
LABEL_15:
          if (!HIDWORD(v22))
          {
            v38 = v21;
            uint64_t v28 = v45;
            __src = v45;
            v47 = v22;
            v48 = BYTE2(v22);
            v49 = BYTE3(v22);
            addend = buffer_putalign((uint64_t)&self->_cdb.b, (char *)&__src, 8uLL);
            if ((_DWORD)addend != -1)
            {
              addend = buffer_putalign((uint64_t)&self->_cdb.b, v11, v28);
              if ((_DWORD)addend != -1)
              {
                addend = buffer_putalign((uint64_t)&self->_cdb.b, v19, v22);
                if ((_DWORD)addend != -1)
                {
                  if ((_DWORD)v28)
                  {
                    v29 = 5381;
                    v30 = v28;
                    do
                    {
                      v31 = *v11++;
                      v29 = (33 * v29) ^ v31;
                      --v30;
                    }

                    while (v30);
                    uint64_t v32 = v28;
                    dispatch_source_t v33 = v22;
                  }

                  else
                  {
                    uint64_t v32 = 0;
                    dispatch_source_t v33 = v22;
                    v29 = 5381;
                  }

                  addend = cdb_make_addend((uint64_t)self->_cdb.bspace, v32, v33, v29);
                }
              }
            }

            int v17 = (_DWORD)addend == 0;
            uint64_t v21 = v38;
            if (!a5 || !(_DWORD)addend) {
              goto LABEL_51;
            }
            goto LABEL_49;
          }

          if (a5)
          {
            addend = 4294960591LL;
LABEL_49:
            NSErrorWithOSStatusF((const char *)addend);
            __int128 v27 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_50;
          }

    if (aBlock) {
      ((void (*)(void))aBlock[2])();
    }

    goto LABEL_40;
  }

  NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
  CFIndex v11 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v28 = self->_ucat;
  if (v28->var0 <= 90)
  {
    if (v28->var0 != -1)
    {
LABEL_24:
      LogPrintF( (uint64_t)v28,  (uint64_t)"-[CUNANSubscriber _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v24,  v25,  v26,  v27,  (char)v11);
      goto LABEL_33;
    }

    if (_LogCategory_Initialize((uint64_t)v28, 0x5Au))
    {
      uint64_t v28 = self->_ucat;
      goto LABEL_24;
    }
  }

            -[CUNetInterfaceMonitor _ensureStopped](self, "_ensureStopped", label);
LABEL_38:

            return;
          }

  v67 = 1;
  if (setsockopt(v14, 0xFFFF, 512, &v67, 4u) && (!*__error() || *__error()))
  {
    v39 = self->_ucat;
    if (v39->var0 <= 90)
    {
      if (v39->var0 != -1)
      {
LABEL_44:
        LogPrintF( (uint64_t)v39,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket SO_REUSEPORT failed (%s): %#m\n",  v35,  v36,  v37,  v38,  (char)v9);
        goto LABEL_46;
      }

      if (_LogCategory_Initialize((uint64_t)v39, 0x5Au))
      {
        v39 = self->_ucat;
        goto LABEL_44;
      }
    }
  }

        v39 = -[CUPairingDaemon _saveIdentity:options:](self, "_saveIdentity:options:", v8, a3);
        if (v39)
        {
          uint64_t v13 = 0LL;
          goto LABEL_40;
        }

        goto LABEL_38;
      }
    }

    __int128 v25 = 0LL;
LABEL_40:
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

LABEL_41:
    -[CUTCPConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v15, v25);

    --v14;
  }

  while (v14);
  if (self->_writeSuspended)
  {
    self->_writeSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_writeSource);
  }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x2000LL);
        if ((v12 & 0x8000) == 0)
        {
LABEL_28:
          if ((v12 & 0x200) == 0) {
            goto LABEL_29;
          }
          goto LABEL_39;
        }

    a2 = v11;
    a4 = v21;
  }

  *a4 = a2;
  *a5 = v20;
  return v16;
}

            v30 = *(uint64_t **)(a1 + 696);
            if (v30
              && (v31 = *(void *)(a1 + 704)) != 0
              && (uint64_t v32 = *(void *)(a1 + 712)) != 0
              && (a7 = *(const void **)(a1 + 720)) != 0LL
              && (a8 = *(void *)(a1 + 728)) != 0)
            {
              if (*(void *)(a1 + 736))
              {
                free(*(void **)(a1 + 736));
                *(void *)(a1 + 736) = 0LL;
                v30 = *(uint64_t **)(a1 + 696);
                a5 = *(const char **)(a1 + 384);
                a6 = *(void *)(a1 + 392);
                a7 = *(const void **)(a1 + 720);
                a8 = *(void *)(a1 + 728);
                v31 = *(void *)(a1 + 704);
                uint64_t v32 = *(void *)(a1 + 712);
              }

              *(void *)(a1 + 744) = 0LL;
              appended = SRPClientStart_libsrp( v30,  &_kSRPParameters_3072_SHA512,  "Pair-Setup",  10LL,  a5,  a6,  a7,  a8,  v31,  v32,  &v178,  &v177,  (void *)(a1 + 736),  (void *)(a1 + 744),  &v176,  &v175);
              if (appended) {
                goto LABEL_52;
              }
              dispatch_source_t v33 = *(void **)(a1 + 704);
              if (v33)
              {
                free(v33);
                *(void *)(a1 + 704) = 0LL;
              }

              *(void *)(a1 + 712) = 0LL;
              v34 = *(void **)(a1 + 720);
              if (v34)
              {
                free(v34);
                *(void *)(a1 + 720) = 0LL;
              }

              *(void *)(a1 + 728) = 0LL;
              appended = TLV8BufferAppend((uint64_t)&__src, 6, v15, 1uLL);
              if (appended
                || (appended = TLV8BufferAppend((uint64_t)&__src, 3, (char *)v178, v177)) != 0
                || (appended = TLV8BufferAppend((uint64_t)&__src, 4, (char *)v176, v175)) != 0)
              {
LABEL_52:
                Int64 = 0LL;
                LOBYTE(v23) = 0;
                goto LABEL_165;
              }

              v81 = v190;
              uint64_t v23 = (UInt8 *)v191;
              if (v191)
              {
LABEL_206:
                __src = v192;
                *(void *)&v190 = 0LL;
                v191 = 0LL;
                *a4 = v23;
                *uint64_t v9 = v81;
                appended = 0;
                *(_BYTE *)(a1 + 120) = 4;
                v84 = *(int **)(a1 + 16);
                v85 = *v84;
                if (*v84 <= 30)
                {
                  if (v85 != -1)
                  {
LABEL_208:
                    v86 = v85 > 10 || v85 == -1 && !_LogCategory_Initialize((uint64_t)v84, 0xAu);
                    LogPrintF( (uint64_t)v84,  (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup  client M3 -- verify request\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  (uint64_t)a7,  a8,  v86);
                    goto LABEL_299;
                  }

                  if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
                  {
                    v84 = *(int **)(a1 + 16);
                    v85 = *v84;
                    goto LABEL_208;
                  }
                }

        uint64_t v22 = 4294960596LL;
        goto LABEL_38;
      }

      uint64_t v22 = 0LL;
      goto LABEL_38;
    }

    uint64_t v22 = v21;
    if (gLogCategory_WiFiManagerCore <= 60
      && (gLogCategory_WiFiManagerCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_WiFiManagerCore, 0x3Cu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_WiFiManagerCore,  (uint64_t)"OSStatus WiFiManagerDoApple80211(CUWiFiManagerRef, int, int, void *, size_t)",  0x3Cu,  (uint64_t)"### Bind failed: '%@', %#m",  v16,  v17,  v18,  v19,  *(void *)(a1 + 168));
    }
  }

void _AsyncConnection_Release(void *a1)
{
  if ((*(_DWORD *)a1)-- == 1)
  {
    _AsyncConnection_Complete();
    v3 = (dispatch_object_s *)a1[13];
    if (v3)
    {
      dispatch_release(v3);
      a1[13] = 0LL;
    }

    uint64_t v4 = (void *)a1[1];
    if (v4)
    {
      free(v4);
      a1[1] = 0LL;
    }

    unint64_t v5 = (void *)a1[17];
    if (v5)
    {
      free(v5);
      a1[17] = 0LL;
    }

    __int16 v6 = (_BYTE *)a1[19];
    if (v6 && (v6[18] & 4) != 0)
    {
      LogCategory_Remove(v6);
      a1[19] = 0LL;
    }

    uint64_t v7 = (const void *)a1[20];
    if (v7) {
      CFRelease(v7);
    }
    free(a1);
  }
}

uint64_t _AsyncConnection_Complete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(uint64_t *))(a1 + 128);
  *(void *)(a1 + 128) = 0LL;
  __int16 v6 = *(void (**)(uint64_t, uint64_t, void))(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v5)
  {
    uint64_t v10 = 32LL;
    int v11 = a3;
    int v12 = a4;
    uint64_t v13 = *(void *)(a1 + 120);
    if (a2)
    {
      uint64_t v14 = *(void *)(a2 + 104);
      v5(&v10);
      *(void *)(a2 + 104) = v14;
    }

    else
    {
      uint64_t v14 = 0LL;
      v5(&v10);
    }
  }

  else if (v6)
  {
    v6(a3, a4, *(void *)(a1 + 120));
  }

  v8 = *(dispatch_object_s **)(a1 + 72);
  if (v8)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v8);
    *(void *)(a1 + 72) = 0LL;
  }

  while (1)
  {
    uint64_t result = *(void *)(a1 + 80);
    if (!result) {
      break;
    }
    *(void *)(a1 + 80) = *(void *)(result + 8);
    _AsyncConnection_ReleaseOperation((_DWORD *)result);
  }

  return result;
}

void _AsyncConnection_ReleaseOperation(_DWORD *a1)
{
  v2 = (const __SCNetworkReachability *)*((void *)a1 + 12);
  if (v2)
  {
    SCNetworkReachabilitySetCallback(v2, 0LL, 0LL);
    SCNetworkReachabilitySetDispatchQueue(*((SCNetworkReachabilityRef *)a1 + 12), 0LL);
    CFRelease(*((CFTypeRef *)a1 + 12));
    *((void *)a1 + 12) = 0LL;
  }

  v3 = (dispatch_object_s *)*((void *)a1 + 9);
  if (v3)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 9));
    dispatch_release(v3);
    *((void *)a1 + 9) = 0LL;
  }

  uint64_t v4 = (dispatch_object_s *)*((void *)a1 + 10);
  if (v4)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 10));
    dispatch_release(v4);
    *((void *)a1 + 10) = 0LL;
  }

  unint64_t v5 = (dispatch_object_s *)*((void *)a1 + 11);
  if (v5)
  {
    dispatch_source_cancel(*((dispatch_source_t *)a1 + 11));
    dispatch_release(v5);
    *((void *)a1 + 11) = 0LL;
  }

  __int16 v6 = (_DNSServiceRef_t *)*((void *)a1 + 8);
  if (v6)
  {
    DNSServiceRefDeallocate(v6);
    *((void *)a1 + 8) = 0LL;
  }

  if ((*a1)-- == 1)
  {
    int v8 = a1[15];
    if ((v8 & 0x80000000) == 0)
    {
      if (close(v8) && *__error()) {
        __error();
      }
      a1[15] = -1;
    }

    uint64_t v9 = (void *)*((void *)a1 + 13);
    if (v9)
    {
      [*((id *)a1 + 13) invalidate];

      *((void *)a1 + 13) = 0LL;
    }

    _AsyncConnection_Release(*((void **)a1 + 2));
    free(a1);
  }

LABEL_9:
    int v17 = *(void *)(a1 + 48);
    uint64_t v18 = [a2 code];
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 4294960596LL;
    }
    _AsyncConnection_ErrorHandler(v17, v19);
    _AsyncConnection_ReleaseOperation(*(_DWORD **)(a1 + 48));
    return;
  }

  if (v10 <= 50)
  {
    if (v10 == -1)
    {
      if (!_LogCategory_Initialize(*(void *)(*(void *)(a1 + 40) + 144LL), 0x32u)) {
        goto LABEL_14;
      }
      uint64_t v9 = *(int **)(*(void *)(a1 + 40) + 144LL);
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"OSStatus _AsyncConnection_StartNANDataSession(AsyncConnectionRef, CFTypeRef)_block_invoke",  0x32u,  (uint64_t)"NAN data session started: %@\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 32));
  }

  *((_DWORD *)v10 + 13) = a4;
  *((_DWORD *)v10 + 14) = a5;
  *((CFAbsoluteTime *)v10 + 14) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((void *)v11 + 17) = *(void *)(a2 + 136);
    *((void *)v11 + 19) = *(void *)(a2 + 152);
  }

  int v15 = *(unsigned __int8 *)(a3 + 1);
  if (!*(_BYTE *)(a3 + 1))
  {
    BYTE1(bytes[0]) = 0;
LABEL_17:
    if ((a5 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }

  if (v15 != 30)
  {
    if (v15 == 2)
    {
      bytes[0] = *(_OWORD *)a3;
      if ((a5 & 0x80000000) != 0) {
        goto LABEL_23;
      }
LABEL_18:
      int v16 = BYTE1(bytes[0]);
      if (BYTE1(bytes[0]) != 30 && BYTE1(bytes[0]) != 2) {
        goto LABEL_27;
      }
      int v17 = a5;
      if (WORD1(bytes[0])) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }

    goto LABEL_17;
  }

  bytes[0] = *(_OWORD *)a3;
  *(_OWORD *)((char *)bytes + 12) = *(_OWORD *)(a3 + 12);
  if ((a5 & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_23:
  int v17 = -(int)a5;
  int v16 = BYTE1(bytes[0]);
LABEL_24:
  if (v16 == 30 || v16 == 2) {
    WORD1(bytes[0]) = bswap32(v17) >> 16;
  }
LABEL_27:
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable)
  {
    dispatch_source_t v33 = 4294960568LL;
    goto LABEL_54;
  }

  uint64_t v19 = Mutable;
  uint64_t v20 = 28LL;
  if (v16 != 30) {
    uint64_t v20 = 0LL;
  }
  if (v16 == 2) {
    uint64_t v21 = 16LL;
  }
  else {
    uint64_t v21 = v20;
  }
  CFDictionarySetData(Mutable, @"remote-address", (UInt8 *)bytes, v21);
  if ((_DWORD)a4
    && ((*(_BYTE *)(a1 + 20) & 8) != 0 || BYTE1(bytes[0]) == 2 && BYTE4(bytes[0]) == 169 && BYTE5(bytes[0]) == 254))
  {
    LOBYTE(flags[0]) = 0;
    if_indextoname(a4, (char *)flags);
    if (LOBYTE(flags[0])) {
      CFDictionarySetCString(v19, @"interface", (const char *)flags, -1LL);
    }
  }

  *((void *)v11 + 12) = SCNetworkReachabilityCreateWithOptions();
  CFRelease(v19);
  uint64_t v22 = (const __SCNetworkReachability *)*((void *)v11 + 12);
  if (!v22
    || (context.info = v11,
        !SCNetworkReachabilitySetCallback( v22,  (SCNetworkReachabilityCallBack)_AsyncConnection_ReachabilityHandler,  &context))
    || !SCNetworkReachabilitySetDispatchQueue(*((SCNetworkReachabilityRef *)v11 + 12), *(dispatch_queue_t *)(a1 + 104)))
  {
    dispatch_source_t v33 = 4294960596LL;
    goto LABEL_54;
  }

  flags[0] = 0;
  if (!SCNetworkReachabilityGetFlags(*((SCNetworkReachabilityRef *)v11 + 12), flags) || (flags[0] & 2) == 0) {
    goto LABEL_56;
  }
  *((CFAbsoluteTime *)v11 + 15) = CFAbsoluteTimeGetCurrent() - *((double *)v11 + 14);
  v31 = *(int **)(a1 + 144);
  if (*v31 <= 30)
  {
    if (*v31 == -1)
    {
      v31 = *(int **)(a1 + 144);
    }

    LogPrintF( (uint64_t)v31,  (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void * , uint32_t, int)",  0x1Eu,  (uint64_t)"Reachability of %##a default port %d OK, Flags 0x%X\n",  v27,  v28,  v29,  v30,  a3);
  }

    ;
  }

  if (*(_DWORD *)i) {
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)gRootOptions;
  uint64_t v18 = v5;
  if (*(_DWORD *)gRootOptions)
  {
    uint64_t v9 = (_DWORD *)(gRootOptions + 104);
    uint64_t v10 = *(_DWORD *)gRootOptions;
    while (a1 || v10 != 3 || (*((_BYTE *)v9 - 55) & 1) == 0)
    {
      int v11 = *v9;
      v9 += 26;
      uint64_t v10 = v11;
      if (!v11) {
        goto LABEL_16;
      }
    }

    int v12 = 0;
  }

  else
  {
LABEL_16:
    int v12 = 1;
  }

  uint64_t v13 = 0;
  int v17 = v12;
  if (a1) {
    int v12 = 1;
  }
  if (v12) {
    uint64_t v14 = "Commands";
  }
  else {
    uint64_t v14 = "Commonly used commands";
  }
  int v15 = (const char **)(gRootOptions + 104);
  while (2)
  {
    if (v8 == 3)
    {
      if (a1 || (*((_BYTE *)v15 - 55) & 1) == 0)
      {
        if (!v13) {
          fprintf(*v3, "%s:\n", v14);
        }
        uint64_t result = fprintf(*v3, "%*s%-*s    %s\n", 4, "", v6, *(v15 - 12), *(v15 - 2));
        ++v13;
      }

      goto LABEL_32;
    }

    if (v8)
    {
LABEL_32:
      int v16 = *(_DWORD *)v15;
      v15 += 13;
      int v8 = v16;
      continue;
    }

    break;
  }

  if (v18 | v13) {
    uint64_t result = fputc(10, *v3);
  }
  if (!v17)
  {
    fprintf(*v3, "See '%s help' for a full list of commands.\n", (const char *)gProgramName);
    if (!v13) {
      return fputc(10, *v3);
    }
    return fprintf(*v3, "See '%s help <command>' for more info about a command.\n\n", (const char *)gProgramName);
  }

  if (v13) {
    return fprintf(*v3, "See '%s help <command>' for more info about a command.\n\n", (const char *)gProgramName);
  }
  return result;
}

    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_preparedRequests,  "setObject:forKeyedSubscript:",  0LL,  v21);
    [v11 setCompletion:v6];
    -[NSMutableArray addObject:](self->_playRequests, "addObject:", v11);
    -[CUAudioPlayer _processRequests](self, "_processRequests");
    goto LABEL_13;
  }

  if (var0 <= 90)
  {
    uint64_t v18 = (char)v21;
    if (var0 != -1)
    {
LABEL_7:
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUAudioPlayer _playPreparedIdentifier:completion:]",  0x5Au,  (uint64_t)"### Play prepared ID %@ not found\n",  v7,  v8,  v9,  v10,  v18);
      goto LABEL_11;
    }

    if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x5Au))
    {
      ucat = self->_ucat;
      uint64_t v18 = (char)v21;
      goto LABEL_7;
    }
  }
}

  objc_sync_exit(v6);
}

  objc_sync_exit(v6);
}

  objc_sync_exit(v6);
}

  if (v6 == 1 || v6 == 4)
  {
    self->_startAdvertisingCalled = 0;
  }

  else if (v6 == 5)
  {
    -[CUBLEAdvertiser _ensureStarted](self, "_ensureStarted");
  }

    if (([v14 isAdvertising] & 1) == 0) {
      self->_startAdvertisingCalled = 0;
    }
    -[CURetrier failed](self->_retrier, "failed");
    goto LABEL_12;
  }

  if (var0 <= 30)
  {
    if (var0 == -1)
    {
      ucat = self->_ucat;
    }

    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEAdvertiser peripheralManagerDidStartAdvertising:error:]",  0x1Eu,  (uint64_t)"Advertiser started\n",  v7,  v8,  v9,  v10,  v13);
  }

  uint64_t v7 = SocketSetNonBlocking(v6, 1);
  if ((_DWORD)v7)
  {
    if (a3) {
      goto LABEL_13;
    }
    return 0;
  }

  uint64_t v10 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B60],  v6,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  readSource = self->_readSource;
  self->_readSource = v10;

  int v12 = self->_readSource;
  if (!v12)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v7 = 4294960550LL;
    goto LABEL_13;
  }

  uint64_t v13 = MEMORY[0x1895F87A8];
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 3221225472LL;
  handler[2] = __42__CUBLEConnection__setupIOAndReturnError___block_invoke;
  handler[3] = &unk_189F34238;
  handler[4] = self;
  dispatch_source_set_event_handler((dispatch_source_t)v12, handler);
  uint64_t v14 = self->_readSource;
  v22[0] = v13;
  v22[1] = 3221225472LL;
  v22[2] = __42__CUBLEConnection__setupIOAndReturnError___block_invoke_2;
  v22[3] = &unk_189F34238;
  v22[4] = self;
  dispatch_source_set_cancel_handler((dispatch_source_t)v14, v22);
  dispatch_resume((dispatch_object_t)self->_readSource);
  int v15 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B90],  v6,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  writeSource = self->_writeSource;
  self->_writeSource = v15;

  int v17 = self->_writeSource;
  uint64_t v9 = v17 != 0LL;
  if (v17)
  {
    v21[0] = v13;
    v21[1] = 3221225472LL;
    v21[2] = __42__CUBLEConnection__setupIOAndReturnError___block_invoke_3;
    v21[3] = &unk_189F34238;
    v21[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)v17, v21);
    uint64_t v18 = self->_writeSource;
    v20[0] = v13;
    v20[1] = 3221225472LL;
    v20[2] = __42__CUBLEConnection__setupIOAndReturnError___block_invoke_4;
    v20[3] = &unk_189F34238;
    v20[4] = self;
    dispatch_source_set_cancel_handler((dispatch_source_t)v18, v20);
    self->_writeSuspended = 1;
    return v9;
  }

  if (!a3) {
    return v9;
  }
  NSErrorWithOSStatusF((const char *)0xFFFFE5A5LL);
  int v8 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:
  *a3 = v8;
  return v9;
}

    if ((_DWORD)Data)
    {
      if ((_DWORD)Data == 35)
      {
        if (self->_readSuspended)
        {
          self->_readSuspended = 0;
          dispatch_resume((dispatch_object_t)self->_readSource);
        }
      }

      else
      {
        NSErrorWithOSStatusF(Data);
        int v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUBLEConnection _abortReadsWithError:](self, "_abortReadsWithError:", v16);
      }

      int v17 = obj;
      goto LABEL_18;
    }

    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUBLEConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", obj, 0LL);
    ++v4;
  }

  while (v4 != 4);
  if (self->_readSuspended)
  {
    self->_readSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_readSource);
  }

    ((void (*)(uint64_t))softLinkBTSessionDetachWithQueue[0])((uint64_t)&self->_btSession);
    self->_btSession = 0LL;
  }

  self->_btSessionStarted = 0;
}

    if ((_DWORD)Data)
    {
      if ((_DWORD)Data == 35)
      {
        if (self->_readSuspended)
        {
          self->_readSuspended = 0;
          dispatch_resume((dispatch_object_t)self->_readSource);
        }
      }

      else
      {
        NSErrorF_safe((void *)*MEMORY[0x189607670], Data);
        int v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUBluetoothClassicConnection _abortReadsWithError:](self, "_abortReadsWithError:", v16);
      }

      int v17 = obj;
      goto LABEL_18;
    }

    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUBluetoothClassicConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", obj, 0LL);
    ++v4;
  }

  while (v4 != 4);
  if (self->_readSuspended)
  {
    self->_readSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_readSource);
  }

    free(v10);
    v4 *= 2LL;
    --v3;
  }

  while (v3);
  v48 = self->_ucat;
  if (v48->var0 <= 90)
  {
    if (v48->var0 != -1) {
      goto LABEL_52;
    }
    if (_LogCategory_Initialize((uint64_t)v48, 0x5Au))
    {
      v48 = self->_ucat;
LABEL_52:
      LogPrintF( (uint64_t)v48,  (uint64_t)"-[CUBluetoothClient _handleConnectedDevicesInit]",  0x5Au,  (uint64_t)"### Get connected devices failed (too many)",  v18,  v19,  v20,  v21,  v49);
    }
  }
}

  if (self->_btSessionStarted)
  {
    -[CUBluetoothClient _btEnsureStarted](self, "_btEnsureStarted");
    uint64_t v4 = v13;
  }
}

    bonjourAdvertiser = self->_bonjourAdvertiser;
    BytesPtr = TXTRecordGetBytesPtr(v30 + 2);
    Length = TXTRecordGetLength(v30 + 2);
    int v17 = BonjourAdvertiserSetTXTRecord((uint64_t)bonjourAdvertiser, BytesPtr, Length);
    if (!v17) {
      goto LABEL_14;
    }
    uint64_t v22 = v17;
    uint64_t v23 = self->_ucat;
    if (v23->var0 > 60) {
      goto LABEL_14;
    }
    if (v23->var0 == -1)
    {
      uint64_t v23 = self->_ucat;
    }

    LogPrintF( (uint64_t)v23,  (uint64_t)"-[CUBonjourAdvertiser _updateTXTDictionary]",  0x3Cu,  (uint64_t)"### Set TXT record failed: %#m\n",  v18,  v19,  v20,  v21,  v22);
LABEL_14:
    TXTRecordDeallocate(v30 + 2);
    _Block_object_dispose(&v29, 8);
    return;
  }

  uint64_t v13 = self->_ucat;
  if (v13->var0 <= 30)
  {
    if (v13->var0 == -1)
    {
      uint64_t v13 = self->_ucat;
    }

    LogPrintF( (uint64_t)v13,  (uint64_t)"-[CUBonjourAdvertiser _updateTXTDictionary]",  0x1Eu,  (uint64_t)"Update TXT: <none>\n",  v2,  v3,  v4,  v5,  v26);
  }

      uint64_t v23 = v9;
      uint64_t v24 = v6;
      __int128 v25 = self->_ioQueue;
      if (!v25)
      {
        var4 = self->_ucat->var4;
        uint64_t v26 = NSPrintF();
        __int128 v27 = (const char *)objc_msgSend(v26, "UTF8String", var4);

        dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        uint64_t v28 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
        __int128 v25 = (OS_dispatch_queue *)dispatch_queue_create(v27, v28);

        objc_storeStrong((id *)&self->_ioQueue, v25);
      }

      ioQueue = (dispatch_queue_s *)self->_ioQueue;
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __45__CUFileServer__handleQuery_responseHandler___block_invoke_3;
      block[3] = &unk_189F31578;
      block[4] = self;
      v30 = v17;
      v37 = v30;
      v38 = v12;
      dispatch_async(ioQueue, block);

      __int16 v6 = v24;
      uint64_t v10 = v35;
      uint64_t v9 = v23;
      goto LABEL_12;
    }

    v30 = 0LL;
  }

  else
  {
    dispatch_source_t v33 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5CFLL);
    v30 = (CUFileQuery *)v46[5];
    v46[5] = (id)v33;
  }

      v18[0] = MEMORY[0x1895F87A8];
      v18[1] = 3221225472LL;
      v18[2] = __69__CUHomeKitManager__getPairingIdentityForUserWithOptions_completion___block_invoke;
      v18[3] = &unk_189F31140;
      uint64_t v21 = a3;
      v18[4] = self;
      v18[5] = v7;
      uint64_t v19 = v8;
      uint64_t v20 = v6;
      [v7 pairingIdentityWithCompletionHandler:v18];

      goto LABEL_10;
    }

    [v7 name];
    int v16 = (void *)objc_claimAutoreleasedReturnValue();
    NSErrorWithOSStatusF((const char *)0xFFFFE5B9LL);
    int v15 = (void *)objc_claimAutoreleasedReturnValue();

    -[CUHomeKitManager _getPairingIdentityCompleted:options:error:label:completion:]( self,  "_getPairingIdentityCompleted:options:error:label:completion:",  0LL,  a3,  v15,  v8,  v6,  v16);
  }

  else
  {
    NSErrorWithOSStatusF((const char *)0xFFFEEA0FLL);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUHomeKitManager _getPairingIdentityCompleted:options:error:label:completion:]( self,  "_getPairingIdentityCompleted:options:error:label:completion:",  0LL,  a3,  v14,  v8,  v6);
  }
}
}

    (*(void (**)(void))(a1[7] + 16LL))();

    return;
  }

  int v16 = *(int **)(a1[4] + 32LL);
  if (*v16 <= 30)
  {
    if (*v16 == -1)
    {
      int v16 = *(int **)(a1[4] + 32LL);
    }

    LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUNANPublisher sendMessageData:endpoint:completionHandler:]_block_invoke_4",  0x1Eu,  (uint64_t)"SendMessage completed: EP %@, Data %.12@",  a5,  a6,  a7,  a8,  a1[5]);
  }

    (*(void (**)(void))(a1[7] + 16LL))();

    return;
  }

  int v16 = *(int **)(a1[4] + 96LL);
  if (*v16 <= 30)
  {
    if (*v16 == -1)
    {
      int v16 = *(int **)(a1[4] + 96LL);
    }

    LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUNANSubscriber sendMessageData:endpoint:completionHandler:]_block_invoke_4",  0x1Eu,  (uint64_t)"SendMessage completed: EP %@, Data %.12@",  a5,  a6,  a7,  a8,  a1[5]);
  }

  uint64_t v9 = nw_parameters_create();
  uint64_t v10 = xpc_array_create(0LL, 0LL);
  xpc_array_set_string(v10, 0xFFFFFFFFFFFFFFFFLL, "NetworkExtension");
  xpc_array_set_string(v10, 0xFFFFFFFFFFFFFFFFLL, "NetworkExtension");
  int v11 = xpc_array_create(0LL, 0LL);
  xpc_array_set_string(v11, 0xFFFFFFFFFFFFFFFFLL, "VPN");
  xpc_array_set_string(v11, 0xFFFFFFFFFFFFFFFFLL, "AppVPN");
  nw_parameters_set_avoided_netagent_classes();
  nw_parameters_prohibit_interface_type(v9, nw_interface_type_other);
  evaluator_for_endpoint = (OS_nw_path_evaluator *)nw_path_create_evaluator_for_endpoint();
  nwPathEvaluator = self->_nwPathEvaluator;
  self->_nwPathEvaluator = evaluator_for_endpoint;

  if (self->_nwPathEvaluator)
  {
    objc_initWeak(&location, self);
    uint64_t v14 = MEMORY[0x1895F87A8];
    int v15 = 3221225472LL;
    int v16 = __41__CUNetInterfaceMonitor__ensureStartedNW__block_invoke;
    int v17 = &unk_189F31AA8;
    objc_copyWeak(&v18, &location);
    nw_path_evaluator_set_update_handler();
    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }

  -[CUNetInterfaceMonitor _primaryIPChangedNW:](self, "_primaryIPChangedNW:", 1LL, v14, v15, v16, v17);
}

  if (!self->_completionHandler)
  {
    v45 = self->_ucat;
    if (v45->var0 <= 90)
    {
      if (v45->var0 == -1)
      {
        v45 = self->_ucat;
      }

      v46 = "### No completionHandler\n";
      goto LABEL_76;
    }

  if (v7)
  {
    if (gLogCategory_CUSystemMonitor <= 30
      && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
    {
      NSPrintF();
      int v12 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _manatreeUpdateRetryTimer:]",  0x1Eu,  (uint64_t)"Manatee retry timer start: %@",  v13,  v14,  v15,  v16,  (char)v12);
    }

    int v17 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B78],  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
    uint64_t v18 = self->_manateeRetryTimer;
    self->_manateeRetryTimer = v17;

    uint64_t v19 = self->_manateeRetryTimer;
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 3221225472LL;
    handler[2] = __48__CUSystemMonitorImp__manatreeUpdateRetryTimer___block_invoke;
    handler[3] = &unk_189F34238;
    handler[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)v19, handler);
    uint64_t v20 = self->_manateeRetryTimer;
    uint64_t v21 = dispatch_time(0LL, 300000000000LL);
    dispatch_source_set_timer((dispatch_source_t)v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0xDF8475800uLL);
    dispatch_activate((dispatch_object_t)self->_manateeRetryTimer);
  }

    if ((_DWORD)Data)
    {
      if ((_DWORD)Data == 35)
      {
        if (self->_readSuspended)
        {
          self->_readSuspended = 0;
          dispatch_resume((dispatch_object_t)self->_readSource);
        }
      }

      else
      {
        NSErrorWithOSStatusF(Data);
        int v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUTCPConnection _abortReadsWithError:](self, "_abortReadsWithError:", v17);
      }

      uint64_t v18 = obj;
      goto LABEL_21;
    }

    if ((self->_flags & 0x80) != 0 && -[CUTCPConnection _readableData](self, "_readableData")) {
      objc_msgSend(obj, "setStatusFlags:", objc_msgSend(obj, "statusFlags") | 1);
    }
    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUTCPConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", obj, 0LL);
    ++v4;
  }

  while (v4 != 4);
  if (self->_readSuspended)
  {
    self->_readSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_readSource);
  }

  self->_state = 3;
  int v11 = _Block_copy(self->_actionHandler);
  int v12 = v11;
  if (v11) {
    (*((void (**)(void *, uint64_t, id))v11 + 2))(v11, 4LL, v13);
  }
}

    *(_BYTE *)(v8 + 42) = *(_BYTE *)(v9 + 40);
    return [*(id *)(v9 + 32) _wifiStateChanged];
  }

  return result;
}

  if (cf) {
    CFRelease(cf);
  }
}

  if (*(_BYTE *)(a2 + 67) || (int v11 = *(_DWORD *)(a1 + 8), (v11 & 0x800000) != 0))
  {
    uint64_t v20 = v31;
    uint64_t v21 = os_log_type_enabled(v8, v10);
    if (v20)
    {
      if (!v21) {
        return;
      }
      *(_DWORD *)buf = 136446723;
      *(void *)dispatch_source_t v33 = v20;
      *(_WORD *)&v33[8] = 1040;
      *(_DWORD *)&v33[10] = __n;
      *(_WORD *)&v33[14] = 2081;
      *(void *)&v33[16] = __s1;
      uint64_t v22 = v10;
      uint64_t v23 = "%{public}s: %{private}.*s";
      goto LABEL_20;
    }

    if (!v21) {
      return;
    }
    *(_DWORD *)buf = 68157955;
    *(_DWORD *)dispatch_source_t v33 = __n;
    *(_WORD *)&v33[4] = 2081;
    *(void *)&v33[6] = __s1;
    uint64_t v22 = v10;
    uint64_t v23 = "%{private}.*s";
    goto LABEL_36;
  }

  if (*(_BYTE *)(a2 + 66) || *(_DWORD *)(*(void *)a1 + 16LL) & 0x200 | v11 & 0x2000000)
  {
    int v12 = strndup(__s1, __n);
    if (!v12) {
      return;
    }
    uint64_t v13 = v12;
    uint64_t v14 = v31;
    int v15 = os_log_type_enabled(v8, v10);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)dispatch_source_t v33 = v14;
        *(_WORD *)&v33[8] = 2082;
        *(void *)&v33[10] = v13;
        int v16 = v10;
        int v17 = "%{public}s: %{public}s";
        uint64_t v18 = v8;
        uint64_t v19 = 22;
LABEL_40:
        _os_log_impl(&dword_186A3B000, v18, v16, v17, buf, v19);
      }
    }

    else if (v15)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)dispatch_source_t v33 = v13;
      int v16 = v10;
      int v17 = "%{public}s";
      uint64_t v18 = v8;
      uint64_t v19 = 12;
      goto LABEL_40;
    }

    free(v13);
    return;
  }

  v29 = v31;
  v30 = os_log_type_enabled(v8, v10);
  if (!v29)
  {
    if (!v30) {
      return;
    }
    *(_DWORD *)buf = 68157954;
    *(_DWORD *)dispatch_source_t v33 = __n;
    *(_WORD *)&v33[4] = 2080;
    *(void *)&v33[6] = __s1;
    uint64_t v22 = v10;
    uint64_t v23 = "%.*s";
LABEL_36:
    uint64_t v24 = v8;
    __int128 v25 = 18;
    goto LABEL_37;
  }

  if (v30)
  {
    *(_DWORD *)buf = 136446722;
    *(void *)dispatch_source_t v33 = v29;
    *(_WORD *)&v33[8] = 1040;
    *(_DWORD *)&v33[10] = __n;
    *(_WORD *)&v33[14] = 2080;
    *(void *)&v33[16] = __s1;
    uint64_t v22 = v10;
    uint64_t v23 = "%{public}s: %.*s";
LABEL_20:
    uint64_t v24 = v8;
    __int128 v25 = 28;
LABEL_37:
    _os_log_impl(&dword_186A3B000, v24, v22, v23, buf, v25);
  }

  if (a4) {
    *a4 = if_nametoindex(ifa_name);
  }
  if (a6 || a9 || a10)
  {
    memset(v40, 0, 44);
    __strlcpy_chk();
    if (ioctl(v17, 0xC02C6938uLL, v40) && (!*__error() || *__error()))
    {
      uint64_t v23 = 0;
      if (!a6)
      {
LABEL_29:
        uint64_t v24 = (BYTE8(v40[1]) & 3) == 1;
        if (!a7) {
          goto LABEL_42;
        }
LABEL_30:
        if (v21)
        {
          ifa_flags = v21->ifa_flags;
LABEL_41:
          *a7 = ifa_flags;
          goto LABEL_42;
        }

        memset(v40, 0, 32);
        __strlcpy_chk();
        if (ioctl(v17, 0xC0206911uLL, v40))
        {
          ifa_flags = *__error();
          if (!ifa_flags) {
            goto LABEL_41;
          }
          if (*__error())
          {
            ifa_flags = 0;
            goto LABEL_41;
          }
        }

        ifa_flags = SLOWORD(v40[1]);
        goto LABEL_41;
      }
    }

    else
    {
      uint64_t v23 = v40[1];
      if (!a6) {
        goto LABEL_29;
      }
    }

    *a6 = v23;
    goto LABEL_29;
  }

  LOBYTE(v23) = 0;
  uint64_t v24 = 0LL;
  if (a7) {
    goto LABEL_30;
  }
LABEL_42:
  if (!(v22 | a10))
  {
    LODWORD(v28) = 0;
    goto LABEL_51;
  }

  memset(v40, 0, 32);
  __strlcpy_chk();
  if (!ioctl(v17, 0xC020698EuLL, v40) || *__error() && !*__error())
  {
    uint64_t v28 = *(void *)&v40[1];
    if (!v22) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

  uint64_t v28 = 0LL;
  if (v22) {
LABEL_50:
  }
    *(void *)uint64_t v22 = v28;
LABEL_51:
  if (a9) {
    *a9 = v24;
  }
  if (!a10)
  {
    __int128 v25 = 0LL;
LABEL_59:
    uint64_t v19 = v36;
    goto LABEL_64;
  }

  if (!stricmp_prefix((unsigned __int8 *)ifa_name, "nan"))
  {
    v29 = 128;
    goto LABEL_62;
  }

  if ((v28 & 0x100000) != 0)
  {
    v29 = 4;
    goto LABEL_62;
  }

  if ((v23 & 0xE0) == 0x80)
  {
    v29 = 2;
LABEL_62:
    uint64_t v19 = v36;
LABEL_63:
    __int128 v25 = 0LL;
    *(_DWORD *)a10 = v29;
    goto LABEL_64;
  }

  if ((v28 & 0x20000000) != 0)
  {
    v29 = 16;
    goto LABEL_62;
  }

  *(_DWORD *)a10 = 1;
  memset(v40, 0, 32);
  __strlcpy_chk();
  ioctl(v17, 0xC020699FuLL, v40);
  if (DWORD1(v40[1]) == 18)
  {
    uint64_t v19 = v36;
    if (DWORD2(v40[1]) == 2)
    {
      v29 = 256;
      goto LABEL_63;
    }

    if (DWORD2(v40[1]) == 3)
    {
      v29 = 512;
      goto LABEL_63;
    }
  }

  else
  {
    uint64_t v19 = v36;
    if (DWORD2(v40[1]) == 1)
    {
      v29 = 8;
      goto LABEL_63;
    }
  }

  __int128 v25 = 0LL;
LABEL_64:
  if (v37) {
    MEMORY[0x186E42F24]();
  }
  if ((v19 & 0x80000000) == 0)
  {
LABEL_67:
    if (close(v19) && *__error()) {
      __error();
    }
  }

  return v25;
}

  free(v5);
  int v12 = v18;
  if (v18)
  {
    uint64_t v13 = *(int **)(a1 + 16);
    if (*v13 <= 90)
    {
      if (*v13 != -1)
      {
LABEL_12:
        LogPrintF( (uint64_t)v13,  (uint64_t)"OSStatus _ClientDecryptExtra(PairingSessionRef, const void *, size_t, const uint8_t *)",  0x5Au,  (uint64_t)"### ClientDecryptExtra failed: %#m\n",  v8,  v9,  v10,  v11,  v12);
        return;
      }

      if (_LogCategory_Initialize((uint64_t)v13, 0x5Au))
      {
        int v12 = v18;
        uint64_t v13 = *(int **)(a1 + 16);
        goto LABEL_12;
      }
    }
  }

  pthread_mutex_unlock(&gScreenLock);
  if (a1) {
    *a1 = v2;
  }
  return value;
}

  if (a5) {
    *a5 = v7;
  }
  return v8;
}

  if (!a4) {
    return 0LL;
  }
  for (i = 0LL; i != 32; ++i)
  {
    int v16 = *((unsigned __int8 *)v20 + i);
    *a4 = a0123456789abcd_0[v16 >> 4];
    a4[1] = a0123456789abcd_0[v16 & 0xF];
    a4 += 2;
  }

  uint64_t result = 0LL;
  *a4 = 0;
  return result;
}

LABEL_14:
  uint64_t v20 = *(void **)(a1 + 32);
  if (v20)
  {
    [v20 peerAddress];
    uint64_t v20 = *(void **)(a1 + 32);
  }

  else
  {
    memset(v21, 0, sizeof(v21));
    uint64_t v22 = 0;
  }

  _AsyncConnection_StartConnectNow( *(void *)(a1 + 40),  *(void *)(a1 + 48),  (uint64_t)v21,  [v20 localInterfaceIndex],  *(_DWORD *)(*(void *)(a1 + 40) + 16));
  _AsyncConnection_ReleaseOperation(*(_DWORD **)(a1 + 48));
}

  uint64_t v18 = *(void (**)(uint64_t, const char *, void))(a1 + 88);
  if (v18) {
    v18(2LL, a3, *(void *)(a1 + 96));
  }
  AddrInfo = DNSServiceGetAddrInfo( (DNSServiceRef *)v9 + 8,  (*(_DWORD *)(a1 + 20) << 14) & 0x8000,  interfaceIndex,  0,  hostname,  (DNSServiceGetAddrInfoReply)_AsyncConnection_DNSCallBack,  v9);
  if (!(_DWORD)AddrInfo)
  {
    DNSServiceSetDispatchQueue(*((DNSServiceRef *)v9 + 8), *(dispatch_queue_t *)(a1 + 104));
    *((void *)v9 + 1) = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v9;
    return AddrInfo;
  }

          dispatch_async_f( *(dispatch_queue_t *)(v23 + 104),  (void *)v23,  (dispatch_function_t)_AsyncConnection_UserRelease);
          uint64_t v22 = 0;
        }

        v31 = *(int **)(v23 + 144);
LABEL_12:
        LogPrintF( (uint64_t)v31,  (uint64_t)"OSStatus AsyncConnection_ConnectSyncEx(const char *, int, AsyncConnectionFlags, uint64_t, int, int, A syncConnectionProgressFunc, void *, AsyncConnectionWaitFunc, void *, SocketRef *)",  0x32u,  (uint64_t)"### Canceling connect to %s\n",  v27,  v28,  v29,  v30,  (char)a1);
        goto LABEL_14;
      }

      dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v23 = v33;
LABEL_19:
      dispatch_async_f(*(dispatch_queue_t *)(v23 + 104), (void *)v23, (dispatch_function_t)_AsyncConnection_UserRelease);
LABEL_20:
      uint64_t v21 = v36;
      if (!(_DWORD)v36) {
        *a11 = HIDWORD(v36);
      }
    }

    goto LABEL_22;
  }

  uint64_t v21 = 4294960596LL;
LABEL_24:
  if (object) {
    dispatch_release(object);
  }
  return v21;
}

  if (v13) {
    free(v13);
  }
  __int16 v6 = "FAILED";
  if (!(_DWORD)v2) {
    __int16 v6 = "PASSED";
  }
  printf("AudioStreamTest: %s\n", v6);
  return v2;
}

      uint64_t v18 = *(const void **)(a1 + 184);
      if (v18)
      {
        uint64_t v19 = _Block_copy(v18);
        if (!v19)
        {
          uint64_t v24 = -6700;
          goto LABEL_24;
        }

        uint64_t v20 = v19;
        if (v13) {
          CFRetain(v13);
        }
        uint64_t v21 = *(dispatch_queue_s **)(a1 + 160);
        values[0] = (void *)MEMORY[0x1895F87A8];
        values[1] = (void *)3221225472LL;
        values[2] = ___BonjourBrowser_PostEventEx_block_invoke;
        values[3] = &unk_189F2FED8;
        __int128 v27 = a2;
        values[4] = v20;
        values[5] = v13;
        dispatch_async(v21, values);
        goto LABEL_23;
      }

      uint64_t v22 = calloc(1uLL, 0x20uLL);
      if (v22)
      {
        uint64_t v23 = v22;
        *((_DWORD *)v22 + 4) = a2;
        *uint64_t v22 = *(_OWORD *)(a1 + 168);
        *((void *)v22 + 3) = v13;
        if (v13) {
          CFRetain(v13);
        }
        dispatch_async_f( *(dispatch_queue_t *)(a1 + 160),  v23,  (dispatch_function_t)_BonjourBrowser_PostEventOnEventQueue);
LABEL_23:
        uint64_t v24 = 0;
LABEL_24:
        __int128 v25 = v24;
LABEL_25:
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        return;
      }

    if ((uint64_t)(a3 - (void)v20) < 4)
    {
      uint64_t v14 = -6743;
    }

    else
    {
      if (*(_DWORD *)v20 == 558124613)
      {
        uint64_t v14 = 0;
        v20 += 4;
        goto LABEL_18;
      }

      uint64_t v14 = -6716;
    }

    goto LABEL_31;
  }

  int v15 = _ReadStreamedObject(a1, &v20, a3, &cf);
  uint64_t v13 = cf;
  if (!v15)
  {
    if (!cf)
    {
      uint64_t v14 = -6742;
      goto LABEL_18;
    }

    if ((*(_DWORD *)a1 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }

  uint64_t v14 = v15;
LABEL_31:
  if (v13)
  {
    CFRelease(v13);
    uint64_t v13 = 0LL;
  }

  if (v8)
  {
    if (v22)
    {
      v8[2](v8, v22);
    }

    else
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue();
      v8[2](v8, v25);
    }
  }

  uint64_t v18 = v22;
LABEL_15:

  return v18;
}

  uint64_t v18 = v22;
LABEL_15:

  return v18;
}

  -[CUBluetoothDevice setPresent:](v5, "setPresent:", 1LL);
  -[CUBluetoothClient updateDevice:btDevice:](self, "updateDevice:btDevice:", v5, a3);
  return v5;
}

      objc_storeStrong((id *)&self->_btAdvertisingAddress, v5);
      uint64_t v14 = _Block_copy(self->_bluetoothAddressChangedHandler);
      int v15 = v14;
      if (v14)
      {
        v16[0] = MEMORY[0x1895F87A8];
        v16[1] = 3221225472LL;
        v16[2] = __51__CUBluetoothClient__handleBluetoothAddressChanged__block_invoke;
        v16[3] = &unk_189F33060;
        uint64_t v18 = v14;
        int v17 = v5;
        -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v16);
      }
    }
  }
}

  objc_autoreleasePoolPop(v6);
}
}
}

    selfAccessoryUser = self->_selfAccessoryUser;
    self->_selfAccessoryUser = 0LL;

    uint64_t v7 = 1;
  }

  uint64_t v28 = self->_selfAccessoryAppData;
  if (!v28) {
    goto LABEL_21;
  }
  v29 = self->_ucat;
  if (v29->var0 <= 30)
  {
    if (v29->var0 == -1)
    {
      v29 = self->_ucat;
    }

    LogPrintF( (uint64_t)v29,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessory AppData changed: %##@, HK clear",  v24,  v25,  v26,  v27,  (char)v28);
  }

    self->_state = v8;
    stateChangedHandler = (void (**)(id, void))self->_stateChangedHandler;
    if (stateChangedHandler) {
      stateChangedHandler[2](stateChangedHandler, v8);
    }
  }

  if (v13)
  {
    ((void (**)(id, void *, id))v15)[2](v15, 0LL, v13);
  }

  else
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *, void *))v15)[2](v15, 0LL, v34);
  }

    goto LABEL_15;
  }

  [v4 setTriedHomeRepairFlow:1];
  uint64_t v24 = self->_homeManager;
  v76 = 0LL;
  -[HMHomeManager allPairingIdentitiesInRankOrderWithError:](v24, "allPairingIdentitiesInRankOrderWithError:", &v76);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v26 = v76;
  dispatchQueue = (dispatch_queue_s *)self->_dispatchQueue;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __47__CUHomeKitManager__findPairedPeerWithContext___block_invoke;
  block[3] = &unk_189F32D00;
  block[4] = self;
  v73 = v4;
  v74 = v25;
  v75 = v26;
  uint64_t v28 = v26;
  v29 = v25;
  dispatch_async(dispatchQueue, block);

LABEL_39:
}
}
  }

  wfaPublisher = self->_wfaPublisher;
  v22[0] = MEMORY[0x1895F87A8];
  v22[1] = 3221225472LL;
  v22[2] = __44__CUNANPublisher__updateServiceSpecificInfo__block_invoke;
  v22[3] = &unk_189F31468;
  v22[4] = self;
  -[WiFiAwarePublisher updateServiceSpecificInfo:completionHandler:]( wfaPublisher,  "updateServiceSpecificInfo:completionHandler:",  v9,  v22);
}

        -[CUNANSubscriber _invalidated](self, "_invalidated");

        return;
      }

      ucat = self->_ucat;
    }

    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUNANSubscriber _invalidate]",  0x1Eu,  (uint64_t)"Invalidate\n",  v2,  v3,  v4,  v5,  v13);
    goto LABEL_6;
  }

        [*(id *)(v20 + 112) stop];
LABEL_15:

        return;
      }

      int v11 = *(int **)(v8 + 96);
    }

    LogPrintF( (uint64_t)v11,  (uint64_t)"-[CUNANSubscriber subscriber:failedToStartWithError:]_block_invoke",  0x5Au,  (uint64_t)"### WFASubscriber start failed: '%@', %#m\n",  a5,  a6,  a7,  a8,  *(void *)(v8 + 152));
    int v8 = *(void *)(a1 + 32);
    goto LABEL_7;
  }

        [*(id *)(v19 + 112) stop];
        uint64_t v18 = v23;
LABEL_15:

        return;
      }

      uint64_t v10 = *(int **)(v8 + 96);
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUNANSubscriber subscriberStarted:]_block_invoke",  0x1Eu,  (uint64_t)"WFASubscriber started: '%@'\n",  a5,  a6,  a7,  a8,  *(void *)(v8 + 152));
    int v8 = *(void *)(a1 + 32);
    goto LABEL_7;
  }

  else {
    -[CUNetLinkManager _monitorEnsureStopped](self, "_monitorEnsureStopped", (void)v9);
  }
}

  if (v6)
  {
    int v12 = v21;
    if (v21)
    {
      uint64_t v13 = (void *)MEMORY[0x189607870];
      uint64_t v14 = *MEMORY[0x189607670];
      uint64_t v22 = *MEMORY[0x1896075E0];
      int v15 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v21, 0, 0));
      int v16 = (void *)v15;
      int v17 = @"?";
      if (v15) {
        int v17 = (const __CFString *)v15;
      }
      v23[0] = v17;
      [MEMORY[0x189603F68] dictionaryWithObjects:v23 forKeys:&v22 count:1];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 errorWithDomain:v14 code:v12 userInfo:v18];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
      v6[2](v6, v11, v19);
    }

    else
    {
      v6[2](v6, v11, 0LL);
    }
  }
}
    }

    uint64_t v10 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
  }

  while (v10);
LABEL_16:

  uint64_t v7 = v23;
  unint64_t v5 = v24;
  uint64_t v22 = v25;
LABEL_18:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}
}

  objc_sync_exit(v6);
}

  uint64_t v14 = CUBonjourDeviceReconfirm(*(void **)(v9 + 328));
  if (v14)
  {
    uint64_t v19 = v14;
    uint64_t v20 = *(int **)(v9 + 216);
    if (*v20 <= 60)
    {
      if (*v20 != -1)
      {
LABEL_17:
        LogPrintF( (uint64_t)v20,  (uint64_t)"void _connectCompletion(AsyncConnectionCompletionInfo * _Nonnull)",  0x3Cu,  (uint64_t)"### Reconfirming with Bonjour failed: %#m\n",  v15,  v16,  v17,  v18,  v19);
        goto LABEL_19;
      }

      if (_LogCategory_Initialize((uint64_t)v20, 0x3Cu))
      {
        uint64_t v20 = *(int **)(v9 + 216);
        goto LABEL_17;
      }
    }
  }

  *a3 = v7;
  return v4;
}

  CFRelease(Mutable);
  Mutable = 0LL;
LABEL_15:
  if (v9)
  {
    MEMORY[0x186E42F24]();
    if (!a2) {
      return Mutable;
    }
    goto LABEL_20;
  }

  Value = 0LL;
  if (v7) {
    goto LABEL_39;
  }
LABEL_40:
  if (a4) {
    *a4 = v42;
  }
  if (!Value) {
    return 0LL;
  }
  uint64_t v26 = CFGetInt64(Value, a4);
  CFRelease(Value);
  return v26;
}

uint64_t _AsyncConnection_ConnectOne(uint64_t a1, char *__s)
{
  v2 = (unsigned __int8 *)__s;
  uint64_t v65 = *MEMORY[0x1895F89C0];
  uint64_t v4 = strchr(__s, 58);
  if (!v4
    || v4[1] != 47
    || v4[2] != 47
    || (URLParseComponents((char *)v2, 0LL, (char **)fullname, 0LL),
        v2 = v60,
        size_t v5 = v61,
        v60[v61] = 0,
        strnicmpx(*(unsigned __int8 **)fullname, v59, "wake"))
    || (*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    if (!*v2) {
      return 4294960539LL;
    }
    if (!StringToSockAddr(v2, (uint64_t)v55, 0x1CuLL, 0LL))
    {
      uint64_t v25 = *(unsigned int *)(a1 + 16);
      if ((*(_BYTE *)(a1 + 20) & 4) != 0)
      {
        uint64_t v25 = *(unsigned int *)(a1 + 16);
      }

      return _AsyncConnection_StartConnect(a1, 0LL, (uint64_t)v55, 0LL, v25, v11, v12, v13);
    }

    if (!stristr(v2, "._tcp.") && !stristr(v2, "._udp.")) {
      return _AsyncConnection_StartDNSResolve(a1, 0LL, (const char *)v2, *(_DWORD *)(a1 + 16));
    }
    int v14 = *(_DWORD *)(a1 + 16);
    int v15 = (DNSServiceRef *)calloc(1uLL, 0xB8uLL);
    if (!v15) {
      return 4294960568LL;
    }
    int v16 = v15;
    ++*(_DWORD *)a1;
    *(_DWORD *)int v15 = 1;
    v15[2] = (DNSServiceRef)a1;
    *((_DWORD *)v15 + 15) = -1;
    *((CFAbsoluteTime *)v15 + 16) = CFAbsoluteTimeGetCurrent();
    LODWORD(v62) = 0;
    uint64_t Record = ParseDestination((const char *)v2, fullname, (unsigned int *)name, &v62);
    if ((_DWORD)Record)
    {
LABEL_32:
      _AsyncConnection_ReleaseOperation(v16);
      return Record;
    }

    int v22 = v62;
    if ((_DWORD)v62) {
      BOOL v23 = v14 < 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23) {
      int v22 = v14;
    }
    *((_DWORD *)v16 + 14) = v22;
    uint64_t v24 = *(int **)(a1 + 144);
    if (*v24 <= 30)
    {
      if (*v24 != -1)
      {
LABEL_22:
        LogPrintF( (uint64_t)v24,  (uint64_t)"OSStatus _AsyncConnection_StartSRVQuery(AsyncConnectionRef, const char *, int)",  0x1Eu,  (uint64_t)"Querying SRV %s\n",  v17,  v18,  v19,  v20,  (char)v2);
        goto LABEL_29;
      }

      if (_LogCategory_Initialize((uint64_t)v24, 0x1Eu))
      {
        uint64_t v24 = *(int **)(a1 + 144);
        goto LABEL_22;
      }
    }

LABEL_29:
    __int128 v27 = *(void (**)(uint64_t, unsigned __int8 *, void))(a1 + 88);
    if (v27) {
      v27(1LL, v2, *(void *)(a1 + 96));
    }
    uint64_t Record = DNSServiceQueryRecord( v16 + 8,  0x400000u,  *(uint32_t *)name,  fullname,  0x21u,  1u,  (DNSServiceQueryRecordReply)_AsyncConnection_SRVCallBack,  v16);
    if (!(_DWORD)Record)
    {
      DNSServiceSetDispatchQueue(v16[8], *(dispatch_queue_t *)(a1 + 104));
      v16[1] = *(DNSServiceRef *)(a1 + 80);
      *(void *)(a1 + 80) = v16;
      return Record;
    }

    goto LABEL_32;
  }

  uint64_t v10 = *(int **)(a1 + 144);
  if (*v10 > 50) {
    goto LABEL_36;
  }
  if (*v10 != -1) {
    goto LABEL_8;
  }
  if (_LogCategory_Initialize((uint64_t)v10, 0x32u))
  {
    uint64_t v10 = *(int **)(a1 + 144);
LABEL_8:
    LogPrintF( (uint64_t)v10,  (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)",  0x32u,  (uint64_t)"WakeDevice start: %.*s\n",  v6,  v7,  v8,  v9,  v5);
  }

      v9[2](v9, 0LL, v35);

      goto LABEL_24;
    }
  }

  int v16 = self->_ucat;
  if (v16->var0 <= 30)
  {
    if (v16->var0 == -1)
    {
      int v16 = self->_ucat;
    }

    LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUHomeKitManager _findPairedPeer:options:completion:]",  0x1Eu,  (uint64_t)"FindPairedPeer start: '%@', %#{flags}\n",  v10,  v11,  v12,  v13,  v14);
  }

          v53 = [v4 userIndex];
        }

        while (v53 < [v4 userCount]);
      }

      v54 = mach_absolute_time();
      UpTicksToMilliseconds(v54 - [v4 startTicks]);
      NSErrorWithOSStatusF((const char *)0xFFFFE5B9LL);
      uint64_t v7 = (id)objc_claimAutoreleasedReturnValue();
      v55 = self->_ucat;
      if (v55->var0 <= 90)
      {
        if (v55->var0 == -1)
        {
          v55 = self->_ucat;
        }

        [v4 identifier];
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF( (uint64_t)v55,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:]",  0x5Au,  (uint64_t)"### FindPairedPeer failed: '%@', %{error}, %llu ms\n",  v57,  v58,  v59,  v60,  (char)v56);
      }

    uint64_t v12 = 0LL;
    goto LABEL_30;
  }

  uint64_t v12 = v21;
  uint64_t v9 = (unsigned __int8 *)[v12 bytes];
  uint64_t v13 = [v12 length];
  uint64_t v31 = v13;
LABEL_3:
  if (!HIDWORD(v13))
  {
    if (self->_fd < 0)
    {
      if (a5)
      {
        NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5A7LL);
        int v15 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_7;
      }

      goto LABEL_30;
    }

    self->_cdb.loop = 0;
    if ((int)cdb_findnext(&self->_cdb, v9, v13) <= 0)
    {
      if (a5)
      {
        uint64_t v17 = 0LL;
        *a5 = 0LL;
        goto LABEL_31;
      }

      goto LABEL_30;
    }

    dlen = self->_cdb.dlen;
    if ((_DWORD)dlen)
    {
      uint64_t v19 = (char *)malloc(self->_cdb.dlen);
      if (v19)
      {
        uint64_t v20 = v19;
        if (cdb_read((uint64_t)&self->_cdb, v19, dlen, self->_cdb.dpos))
        {
          free(v20);
          if (a5)
          {
            int v14 = 4294960550LL;
            goto LABEL_6;
          }

    if (aBlock) {
      aBlock[2]();
    }

    goto LABEL_35;
  }

  uint64_t v13 = (const char *)StringToSockAddr( (unsigned __int8 *)[v11 UTF8String], (uint64_t)&self->_peerAddress, 0x1CuLL, 0);
  if (aBlock)
  {
    if ((_DWORD)v13)
    {
      NSErrorF_safe((void *)*MEMORY[0x189607670], v13);
      int v14 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (*)(void (**)(void), void *))aBlock[2])(aBlock, v14);
    }

    else
    {
      ((void (*)(void (**)(void), void))aBlock[2])(aBlock, 0LL);
    }
  }

  [v6 txtRecordData];
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v36 = v34;
  if (v34)
  {
    uint64_t v37 = (void *)CUTXTDictionaryCreateWithTXTData(v34, v35, 0LL);
    int v38 = v37;
    if (!v37)
    {
LABEL_39:

      goto LABEL_40;
    }

    textInfo = self->_textInfo;
    p_textInfo = &self->_textInfo;
    uint64_t v41 = v37;
    uint64_t v42 = textInfo;
    if (v41 == v42)
    {
    }

    else
    {
      uint64_t v43 = v42;
      if (v42)
      {
        int v45 = -[NSDictionary isEqual:](v41, "isEqual:", v42);

        if ((v45 & 1) != 0) {
          goto LABEL_38;
        }
      }

      else
      {
      }

      objc_storeStrong((id *)p_textInfo, v38);
      v13 |= 8u;
    }

          CFRelease(v9);
          goto LABEL_30;
        }

        int v15 = Mutable;
        int v16 = (const __CFString *)*MEMORY[0x18960C548];
        uint64_t v17 = (const __CFString *)*MEMORY[0x18960C538];
        uint64_t v18 = (const __CFString *)*MEMORY[0x18960C588];
        NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  (CFStringRef)*MEMORY[0x18960C548],  (CFStringRef)*MEMORY[0x18960C538],  (CFStringRef)*MEMORY[0x18960C588]);
        if (!NetworkInterfaceEntity) {
          goto LABEL_40;
        }
        uint64_t v20 = NetworkInterfaceEntity;
        CFArrayAppendValue(v15, NetworkInterfaceEntity);
        CFRelease(v20);
        uint64_t v21 = (const __CFString *)*MEMORY[0x18960C590];
        int v22 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, v16, v17, (CFStringRef)*MEMORY[0x18960C590]);
        if (!v22) {
          goto LABEL_40;
        }
        BOOL v23 = v22;
        CFArrayAppendValue(v15, v22);
        CFRelease(v23);
        NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, v16, v18);
        if (!NetworkGlobalEntity
          || (uint64_t v25 = NetworkGlobalEntity,
              CFArrayAppendValue(v15, NetworkGlobalEntity),
              CFRelease(v25),
              (uint64_t v26 = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, v16, v21)) == 0LL))
        {
LABEL_40:
          uint64_t v28 = -6728;
LABEL_28:
          CFRelease(v15);
          if (!v9) {
            goto LABEL_30;
          }
          goto LABEL_29;
        }

        __int128 v27 = v26;
        CFArrayAppendValue(v15, v26);
        CFRelease(v27);
        if (!SCDynamicStoreSetNotificationKeys(v9, 0LL, v15))
        {
          if (!SCError())
          {
LABEL_27:
            uint64_t v28 = -6700;
            goto LABEL_28;
          }

          uint64_t v30 = SCError();
          if (v30)
          {
LABEL_26:
            uint64_t v28 = v30;
            goto LABEL_28;
          }
        }

        if (SCDynamicStoreSetDispatchQueue(v9, (dispatch_queue_t)self->_dispatchQueue))
        {
LABEL_17:
          self->_scStore = v9;
          -[CUNetInterfaceMonitor _networkInterfacesChanged:]( self,  "_networkInterfacesChanged:",  1LL,  label,  context.version,  context.info,  context.retain,  context.release,  context.copyDescription);
          -[CUNetInterfaceMonitor _primaryIPChanged:](self, "_primaryIPChanged:", 1LL);
          uint64_t v9 = 0LL;
          uint64_t v28 = 0;
          goto LABEL_28;
        }

        if (SCError())
        {
          uint64_t v30 = SCError();
          if (!v30) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }

        goto LABEL_27;
      }

      ucat = self->_ucat;
    }

    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUNetInterfaceMonitor _ensureStartedSC]",  0x1Eu,  (uint64_t)"Monitoring start SC",  v2,  v3,  v4,  v5,  v32);
    goto LABEL_6;
  }

  return v35;
}

  getAWDLTrafficRegistrationServiceMPRemoteCamera[0]();
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v30 = v25;
  uint64_t v31 = v29;
  if (v31 == v30)
  {

    goto LABEL_34;
  }

  uint64_t v32 = v31;
  if ((v59 == 0LL) == (v31 != 0LL))
  {

    goto LABEL_36;
  }

  dispatch_source_t v33 = [v30 isEqual:v31];

  if ((v33 & 1) != 0)
  {
LABEL_34:
    uint64_t v13 = 0x2000;
    goto LABEL_58;
  }

  uint64_t v19 = VCPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)&v40);
  uint64_t v20 = v19 & ~(v19 >> 31);
  v44 = 1;
  uint64_t v21 = _LogPrintFCallBack("", 0LL, (uint64_t)&v40);
  int v22 = v8 + (v21 & ~(v21 >> 31));
  pthread_mutex_unlock(&gLogUtilsLock);
  if ((a3 & 0x10000) != 0
    && gLogCategory_DebugServicesStackTrace <= 254
    && (gLogCategory_DebugServicesStackTrace != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesStackTrace, 0xFEu))
    && gLogCategory_DebugServicesLogging <= 90
    && (gLogCategory_DebugServicesLogging != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x5Au)))
  {
    LogPrintF( &gLogCategory_DebugServicesLogging,  "OSStatus DebugStackTrace(LogLevel)",  90LL,  "### stack tracing not supported on this platform\n");
  }

  BOOL v23 = (v20 + v22);
  uint64_t v24 = __s[0];
  if (v7 && __s[0])
  {
    uint64_t v29 = &__s[0][strlen(__s[0])];
    do
    {
      uint64_t v30 = v29;
      if (v29 <= __s[0]) {
        break;
      }
      --v29;
    }

    while (*(v30 - 1) == 10);
    int *v30 = 0;
    if (ReportCriticalError_sInitOnce != -1) {
      dispatch_once(&ReportCriticalError_sInitOnce, &__block_literal_global_217);
    }
    uint64_t v31 = CFStringCreateWithCString(0LL, v24, 0x8000100u);
    if (v31)
    {
      if ((a3 & 0x200000) == 0) {
        goto LABEL_58;
      }
    }

    else
    {
      uint64_t v31 = @"<< No memory for reason >>";
      CFRetain(@"<< No memory for reason >>");
      if ((a3 & 0x200000) == 0)
      {
LABEL_58:
        uint64_t v32 = (void (*)(CFStringRef, void, uint64_t))ReportCriticalError_sWriteStackShot_f;
        if (ReportCriticalError_sWriteStackShot_f)
        {
          dispatch_source_t v33 = getpid();
          v32(v31, 0LL, v33);
        }

        else
        {
          syslog(5, "### WriteStackShot() missing: %s");
        }

  if (a4)
  {
    [(id)v56[5] altIRK];
    int v38 = (void *)objc_claimAutoreleasedReturnValue();
    if (v38) {
      v39 = v38;
    }
    else {
      v39 = 0LL;
    }
    *a4 = v39;
    if (a5) {
      goto LABEL_39;
    }
LABEL_33:
    if (!a6)
    {
LABEL_42:
      uint64_t v40 = v39;
      goto LABEL_43;
    }

    goto LABEL_34;
  }

  v39 = 0LL;
  if (!a5) {
    goto LABEL_33;
  }
LABEL_39:
  [(id)v56[5] publicKey];
  uint64_t v40 = (id)objc_claimAutoreleasedReturnValue();

  if (!v40) {
    goto LABEL_44;
  }
  if ([v40 length] != 32) {
    goto LABEL_45;
  }
  v39 = v40;
  uint64_t v43 = (_OWORD *)[v39 bytes];
  v44 = v43[1];
  *a5 = *v43;
  a5[1] = v44;
  if (!a6) {
    goto LABEL_42;
  }
LABEL_34:
  [(id)v56[5] secretKey];
  uint64_t v40 = (id)objc_claimAutoreleasedReturnValue();

  if (!v40)
  {
LABEL_44:
    __int128 v27 = v62;
    v47 = -6727;
LABEL_46:
    *((_DWORD *)v27 + 6) = v47;
    goto LABEL_43;
  }

  if ([v40 length] != 32)
  {
LABEL_45:
    __int128 v27 = v62;
    v47 = -6743;
    goto LABEL_46;
  }

  uint64_t v40 = v40;
  uint64_t v41 = (_OWORD *)[v40 bytes];
  uint64_t v42 = v41[1];
  *a6 = *v41;
  a6[1] = v42;
LABEL_43:
  int v45 = *((unsigned int *)v62 + 6);

  _Block_object_dispose(&v55, 8);
  _Block_object_dispose(&v61, 8);
  return v45;
}

    uint64_t v24 = v18 - v14;
    a1 = &v22[v23];
    uint64_t v25 = (_BYTE *)(v14 - v18);
    uint64_t v26 = a3;
    while (v25)
    {
      __int128 v27 = *v26;
      ++v26;
      ++v14;
      ++v25;
      if (!v27) {
        goto LABEL_40;
      }
    }

    if (a3[v24]) {
      uint64_t v28 = -1;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v28) {
      continue;
    }
    break;
  }

LABEL_36:
  if (TextToHardwareAddress((char *)v2, v5, 6LL, v57))
  {
    dispatch_source_t v33 = *(int **)(a1 + 144);
    if (*v33 > 90) {
      return 0LL;
    }
    if (*v33 == -1)
    {
      dispatch_source_t v33 = *(int **)(a1 + 144);
    }

    LogPrintF( (uint64_t)v33,  (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)",  0x5Au,  (uint64_t)"### WakeDevice failed: %.*s\n",  v29,  v30,  v31,  v32,  v5);
    return 0LL;
  }

  SNPrintF((uint64_t)name, 32LL, "%.6a@0.0.0.0", v28, v29, v30, v31, v32);
  int v38 = socket(2, 2, 0);
  if ((v38 & 0x80000000) == 0) {
    goto LABEL_47;
  }
  v39 = *(int **)(a1 + 144);
  if (*v39 > 90) {
    goto LABEL_47;
  }
  if (*v39 == -1)
  {
    v39 = *(int **)(a1 + 144);
  }

  LogPrintF( (uint64_t)v39,  (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)",  0x5Au,  (uint64_t)"### WakeDevice: create temp socket failed\n",  v34,  v35,  v36,  v37,  (char)v57);
LABEL_47:
  v56 = 0LL;
  getifaddrs(&v56);
  v44 = v56;
  if (!v56) {
    goto LABEL_76;
  }
  int v45 = 0;
  do
  {
    if ((v44->ifa_flags & 9) != 1) {
      goto LABEL_68;
    }
    ifa_dstaddr = v44->ifa_dstaddr;
    if (!ifa_dstaddr) {
      goto LABEL_68;
    }
    if (ifa_dstaddr->sa_family != 2) {
      goto LABEL_68;
    }
    ifa_name = v44->ifa_name;
    if (!ifa_name) {
      goto LABEL_68;
    }
    unsigned int v48 = if_nametoindex(ifa_name);
    if (!v48) {
      goto LABEL_68;
    }
    uint32_t v49 = v48;
    if (v38 < 0 || (__int128 v62 = 0u, v63 = 0u, __strlcpy_chk(), ioctl(v38, 0xC020699FuLL, &v62), DWORD1(v63) == 2))
    {
      v50 = *(int **)(a1 + 144);
      if (*v50 <= 50)
      {
        if (*v50 == -1)
        {
          v50 = *(int **)(a1 + 144);
        }

        LogPrintF( (uint64_t)v50,  (uint64_t)"OSStatus _AsyncConnection_StartWakeInterface(AsyncConnectionRef, const char *, uint32_t)",  0x32u,  (uint64_t)"WakeDevice interface: %s, %u\n",  v40,  v41,  v42,  v43,  (char)name);
      }

    v46 = self->_advertiseParametersCurrent;
    self->_advertiseParametersdouble Current = v31;
    BOOL v23 = v31;

    self->_changesPending = 0;
    self->_startAdvertisingCalled = 1;
LABEL_43:
    -[CBPeripheralManager startAdvertising:](self->_peripheralManager, "startAdvertising:", v23);
    goto LABEL_44;
  }

  uint64_t v4 = -[CBPeripheralManager state](peripheralManager, "state");
  if (v4 == 5) {
    goto LABEL_9;
  }
  uint64_t v9 = v4;
  uint64_t v10 = self->_ucat;
  if (v10->var0 > 30) {
    return;
  }
  if (v10->var0 == -1)
  {
    uint64_t v10 = self->_ucat;
  }

  if (v9 > 0xA) {
    uint64_t v11 = "?";
  }
  else {
    uint64_t v11 = off_189F30C28[v9];
  }
  LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUBLEAdvertiser _ensureStarted]",  0x1Eu,  (uint64_t)"Deferring until Bluetooth powered: %s\n",  v5,  v6,  v7,  v8,  (char)v11);
}

          ++v14;
        }

        while (v14 < v74);
      }

      v67 = 0u;
      v68 = 0u;
      uint64_t v65 = 0u;
      v66 = 0u;
      v39 = -[NSMutableDictionary allKeys](self->_btPairedDevices, "allKeys");
      uint64_t v40 = [v39 countByEnumeratingWithState:&v65 objects:v75 count:16];
      if (!v40) {
        goto LABEL_56;
      }
      uint64_t v41 = v40;
      uint64_t v42 = *(void *)v66;
LABEL_41:
      uint64_t v43 = 0LL;
      while (1)
      {
        if (*(void *)v66 != v42) {
          objc_enumerationMutation(v39);
        }
        v44 = *(void *)(*((void *)&v65 + 1) + 8 * v43);
        -[NSMutableDictionary objectForKeyedSubscript:](self->_btPairedDevices, "objectForKeyedSubscript:", v44);
        int v45 = (void *)objc_claimAutoreleasedReturnValue();
        if ([v45 present]) {
          goto LABEL_52;
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_btPairedDevices,  "setObject:forKeyedSubscript:",  0LL,  v44);
        v50 = self->_ucat;
        if (v50->var0 <= 30)
        {
          if (v50->var0 == -1)
          {
            v50 = self->_ucat;
          }

          LogPrintF( (uint64_t)v50,  (uint64_t)"-[CUBluetoothClient _handlePairingStatusChanged]",  0x1Eu,  (uint64_t)"Lost %@\n",  v46,  v47,  v48,  v49,  (char)v45);
        }
}

              if (!v23) {
                goto LABEL_46;
              }
              goto LABEL_43;
            }
          }

          else
          {
            self->_primaryIPv6Addr.sa.sa_family = 0;
          }

          if (!a3) {
            goto LABEL_39;
          }
          goto LABEL_36;
        }

  if (v29) {
    CUNANDataSession *v29 = v55;
  }
  v47 = v42;

  return v47;
}

      pthread_mutex_lock(&gCUSystemMonitorLock);
      if ((v29 & 1) == 0) {
        objc_storeStrong((id *)&v47->_regionRoutineCountry, v51);
      }
      if ((v37 & 1) == 0) {
        objc_storeStrong((id *)&v47->_regionRoutineState, v33);
      }
      pthread_mutex_unlock(&gCUSystemMonitorLock);
      if (gLogCategory_CUSystemMonitor <= 30
        && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _regionMonitorUpdateLocationsOfInterest:]",  0x1Eu,  (uint64_t)"Region routine changed: Country %@, State %@",  v42,  v43,  v44,  v45,  (char)v28);
      }

      -[CUSystemMonitorImp _invokeBlock:passingTest:]( v47,  "_invokeBlock:passingTest:",  &__block_literal_global_214,  &__block_literal_global_215_8024);
      goto LABEL_47;
    }
  }

  else
  {
  }

  if (gLogCategory_CUSystemMonitor <= 30
    && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _regionMonitorUpdateLocationsOfInterest:]",  0x1Eu,  (uint64_t)"Region monitor LOI none found",  v18,  v19,  v20,  v21,  v46);
  }

  uint64_t v7 = 0LL;
LABEL_48:
}

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 4096LL);
        if ((v12 & 0x2000) == 0)
        {
LABEL_27:
          if ((v12 & 0x8000) == 0) {
            goto LABEL_28;
          }
          goto LABEL_38;
        }

  getAWDLTrafficRegistrationServiceRemoteCamera[0]();
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v35 = v30;
  uint64_t v36 = v34;
  if (v36 == v35)
  {

    goto LABEL_41;
  }

  uint64_t v37 = v36;
  if ((v59 == 0LL) == (v36 != 0LL))
  {

    goto LABEL_43;
  }

  int v38 = [v35 isEqual:v36];

  if ((v38 & 1) != 0)
  {
LABEL_41:
    uint64_t v13 = 0x4000;
    goto LABEL_58;
  }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x4000LL);
        if ((v16 & 0x10000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }

      ucat = self->_ucat;
    }

    uint64_t v8 = -[NSArray count](self->_trafficPeersCurrent, "count");
    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUWiFiManager _wifiEnsureStopped]",  0x1Eu,  (uint64_t)"Traffic registration stop: %d peers\n",  v9,  v10,  v11,  v12,  v8);
    goto LABEL_7;
  }

  if (v31)
  {
    free(v31);
    uint64_t v31 = 0LL;
  }

  if (v35) {
    free(v35);
  }
  return v7;
}

  uint64_t v9 = 0LL;
LABEL_37:
  if (!a5 || !*v6) {
    goto LABEL_39;
  }
  return v9;
}

LABEL_63:
      v52 = (DNSServiceRef *)calloc(1uLL, 0xB8uLL);
      if (v52)
      {
        v53 = v52;
        ++*(_DWORD *)a1;
        *(_DWORD *)v52 = 1;
        v52[2] = (DNSServiceRef)a1;
        *((_DWORD *)v52 + 15) = -1;
        if (DNSServiceResolve( v52 + 8,  0x40000u,  v49,  name,  "_wake._tcp",  "local.",  (DNSServiceResolveReply)_AsyncConnection_WakeResolveCallback,  v52))
        {
          _AsyncConnection_ReleaseOperation(v53);
        }

        else
        {
          DNSServiceSetDispatchQueue(v53[8], *(dispatch_queue_t *)(a1 + 104));
          v53[1] = *(DNSServiceRef *)(a1 + 80);
          *(void *)(a1 + 80) = v53;
        }
      }

      ++v45;
      goto LABEL_68;
    }

    v51 = *(int **)(a1 + 144);
    if (*v51 > 30) {
      goto LABEL_68;
    }
    if (*v51 != -1) {
      goto LABEL_61;
    }
    if (_LogCategory_Initialize((uint64_t)v51, 0x1Eu))
    {
      v51 = *(int **)(a1 + 144);
LABEL_61:
      LogPrintF( (uint64_t)v51,  (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)",  0x1Eu,  (uint64_t)"WakeDevice: skiping non-Ethernet-style: %s\n",  v40,  v41,  v42,  v43,  (char)v44->ifa_name);
    }

    v53 = 0LL;
    while (v24 != v53)
    {
      if (v14[v53] != aH[v53]) {
        goto LABEL_71;
      }
      if (++v53 == 2) {
        goto LABEL_76;
      }
    }

    if (!aH[v24])
    {
LABEL_76:
      appended = HexToData(v23, -1LL, 22, (uint64_t)v79, 0x100uLL, 0LL, &v76, 0LL);
      if ((_DWORD)appended) {
        goto LABEL_116;
      }
      v51 = (uint64_t)&v13[-v11];
      goto LABEL_78;
    }

    uint64_t v11 = 4294960596LL;
    goto LABEL_64;
  }

  return v11;
}

            v46 = 0LL;
LABEL_64:
            uint64_t v9 = v166;
            goto LABEL_65;
          }
        }

        v46 = 0LL;
        v150 = -6743;
      }

      else
      {
        v46 = 0LL;
        uint64_t v42 = 0LL;
        v150 = -6742;
      }

    v58 = a2;
    do
    {
      if (v58 == v12)
      {
LABEL_184:
        v113 = -6727;
        goto LABEL_203;
      }

      if (v58 >= v12)
      {
        v113 = -6705;
        goto LABEL_203;
      }

      uint64_t v59 = v58 + 2;
      v60 = v58[1];
      if (&v58[v60 + 2] > v12)
      {
        v113 = -6750;
LABEL_203:
        __int128 v27 = 0;
        GroupInfoTLV = v113;
        goto LABEL_82;
      }

      size_t v61 = *v58;
      v58 += v60 + 2;
    }

    while (v61 != 7);
    *(void *)&v171[0] = v60;
    if ((_DWORD)v60 == 1)
    {
      __int128 v62 = *v59;
      if (v62 >= 9)
      {
        if ((_DWORD)v62 == 9) {
          __int128 v63 = -6776;
        }
        else {
          __int128 v63 = -6700;
        }
      }

      else
      {
        __int128 v63 = dword_186B4BE50[v62];
      }

      GroupInfoTLV = v63;
      v64 = *(int **)(a1 + 16);
      if (*v64 <= 50)
      {
        if (*v64 != -1) {
          goto LABEL_77;
        }
        if (_LogCategory_Initialize((uint64_t)v64, 0x32u))
        {
          v64 = *(int **)(a1 + 16);
          LOBYTE(v62) = *v59;
LABEL_77:
          LogPrintF( (uint64_t)v64,  (uint64_t)"OSStatus _VerifyServerM3(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *, Boolean *, Boolean *)",  0x32u,  (uint64_t)"### Pair-verify server M3 bad status: 0x%X, %#m\n",  (uint64_t)a5,  a6,  a7,  a8,  v62);
        }

        __int128 v27 = 1;
        if (GroupInfoTLV)
        {
          uint64_t v65 = 0LL;
          goto LABEL_83;
        }

LABEL_68:
    v44 = v44->ifa_next;
  }

  while (v44);
  if (v56) {
    MEMORY[0x186E42F24]();
  }
  if (!v45)
  {
LABEL_76:
    v54 = *(int **)(a1 + 144);
    if (*v54 <= 90)
    {
      if (*v54 != -1) {
        goto LABEL_78;
      }
      if (_LogCategory_Initialize((uint64_t)v54, 0x5Au))
      {
        v54 = *(int **)(a1 + 144);
LABEL_78:
        LogPrintF( (uint64_t)v54,  (uint64_t)"OSStatus _AsyncConnection_StartWakeAll(AsyncConnectionRef, const char *, size_t)",  0x5Au,  (uint64_t)"### WakeDevice with no interfaces: %.*s\n",  v40,  v41,  v42,  v43,  v5);
      }
    }
  }

  if ((v38 & 0x80000000) == 0 && close(v38))
  {
    if (*__error()) {
      __error();
    }
  }

  return 0LL;
}

        uint64_t v11 = (void *)v30;
        goto LABEL_69;
      }

      uint64_t v36 = 0LL;
      LODWORD(v35) = 0;
LABEL_69:

      if ((_DWORD)v35)
      {
        v66 = 1;
        goto LABEL_74;
      }

      uint64_t v4 = v75 + 1;
      if (v75 + 1 == v72)
      {
        v72 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v89,  v97,  16LL);
        if (v72) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  v66 = 0;
LABEL_74:

  return v66;
}

    v79 = 0LL;
    v56 = 4294960596LL;
    goto LABEL_224;
  }

  v80 = 0LL;
  v60 = 0LL;
  v79 = 0LL;
  v56 = 4294960554LL;
LABEL_130:
  if (v142) {
    CFRelease(v142);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v79) {
    CFRelease(v79);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v80) {
    CFRelease(v80);
  }
  if (v58) {
    CFRelease(v58);
  }
  return v56;
}

uint64_t _AsyncConnection_TimeoutHandler( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(int **)(a1 + 144);
  if (*v9 <= 50)
  {
    if (*v9 == -1)
    {
      uint64_t v9 = *(int **)(a1 + 144);
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"void _AsyncConnection_TimeoutHandler(void *)",  0x32u,  (uint64_t)"### Connect timed out: %s\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 8));
  }

  return _AsyncConnection_Complete(a1, 0LL, 0xFFFFFFFFLL, 4294960574LL);
}

uint64_t _AsyncConnection_ReachabilityStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  memset(&context, 0, sizeof(context));
  uint64_t v10 = (char *)calloc(1uLL, 0xB8uLL);
  if (!v10) {
    return 4294960568LL;
  }
  uint64_t v11 = v10;
  ++*(_DWORD *)a1;
  *(_DWORD *)uint64_t v10 = 1;
  *((void *)v10 + 2) = a1;
  *((_DWORD *)v10 + 15) = -1;
  int v12 = *(unsigned __int8 *)(a3 + 1);
  if (*(_BYTE *)(a3 + 1))
  {
    if (v12 == 30)
    {
      __int128 v13 = *(_OWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 24);
      *((void *)v10 + 5) = v14;
    }

    else
    {
      if (v12 != 2) {
        goto LABEL_9;
      }
      __int128 v13 = *(_OWORD *)a3;
    }

    *(_OWORD *)(v10 + 24) = v13;
  }

  else
  {
    v10[25] = 0;
  }

LABEL_49:
  if (_AsyncConnection_StartConnect(a1, 0LL, a3, a4, a5, v28, v29, v30))
  {
    uint64_t v32 = *(int **)(a1 + 144);
    if (*v32 > 90) {
      goto LABEL_56;
    }
    if (*v32 != -1) {
      goto LABEL_52;
    }
    if (_LogCategory_Initialize((uint64_t)v32, 0x5Au))
    {
      uint64_t v32 = *(int **)(a1 + 144);
LABEL_52:
      LogPrintF( (uint64_t)v32,  (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x5Au,  (uint64_t)"### Connect %##a default port %d failed after reachability said OK\n",  v23,  v24,  v25,  v26,  a3);
    }

        -[CUBluetoothClient updateStatusFlags](self, "updateStatusFlags");
        v51 = _Block_copy(self->_deviceUnpairedHandler);
        v52 = v51;
        if (v51)
        {
          v62[0] = MEMORY[0x1895F87A8];
          v62[1] = 3221225472LL;
          v62[2] = __48__CUBluetoothClient__handlePairingStatusChanged__block_invoke_3;
          v62[3] = &unk_189F33060;
          v64 = v51;
          __int128 v63 = v45;
          -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v62);
        }

LABEL_52:
        if (v41 == ++v43)
        {
          v53 = [v39 countByEnumeratingWithState:&v65 objects:v75 count:16];
          uint64_t v41 = v53;
          if (!v53)
          {
LABEL_56:

            self->_btPairedDevicesInitialized = 1;
            free(v6);
            v54 = 0LL;
            goto LABEL_62;
          }

          goto LABEL_41;
        }
      }
    }

    int v12 = (v7 + 310000);
    __int128 v13 = self->_ucat;
    if (v13->var0 > 60) {
      goto LABEL_8;
    }
    if (v13->var0 != -1) {
      goto LABEL_6;
    }
    if (_LogCategory_Initialize((uint64_t)v13, 0x3Cu))
    {
      __int128 v13 = self->_ucat;
LABEL_6:
      LogPrintF( (uint64_t)v13,  (uint64_t)"-[CUBluetoothClient _handlePairingStatusChanged]",  0x3Cu,  (uint64_t)"### BTLocalDeviceGetPairedDevices failed: %#m\n",  v8,  v9,  v10,  v11,  v12);
    }

            v58 = v47;
            v55 = self->_selfAccessoryMediaSystemRole;
            self->_selfAccessoryMediaSystemRole = v58;
            v83 = 1;
            goto LABEL_50;
          }
        }

        else
        {
        }

        uint64_t v42 = self->_ucat;
        if (v42->var0 <= 30)
        {
          if (v42->var0 == -1)
          {
            uint64_t v42 = self->_ucat;
          }

          LogPrintF( (uint64_t)v42,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaSystem]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystem name updated: '%@' -> '%@'\n",  v37,  v38,  v39,  v40,  (char)v33);
        }

      if (++v28 != v27) {
        continue;
      }
      break;
    }

    uint64_t v43 = [v47 countByEnumeratingWithState:&v55 objects:v68 count:16];
    uint64_t v27 = v43;
    if (v43) {
      continue;
    }
    break;
  }
}

LABEL_56:
    uint64_t v34 = *(int **)(a1 + 144);
    if (*v34 <= 30)
    {
      if (*v34 == -1)
      {
        uint64_t v34 = *(int **)(a1 + 144);
      }

      LogPrintF( (uint64_t)v34,  (uint64_t)"OSStatus _AsyncConnection_ReachabilityStart(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x1Eu,  (uint64_t)"Monitoring reachability of %##a default port %d\n",  v23,  v24,  v25,  v26,  a3);
    }

    uint64_t v36 = *(void (**)(uint64_t, sockaddr *, void))(a1 + 88);
    if (v36) {
      v36(3LL, v12, *(void *)(a1 + 96));
    }
    uint64_t v37 = *((unsigned __int8 *)v11 + 25);
    if (v37 == 30) {
      int v38 = 28;
    }
    else {
      int v38 = 0;
    }
    if (v37 == 2) {
      uint64_t v39 = 16;
    }
    else {
      uint64_t v39 = v38;
    }
    if (connect(v11[15], v12, v39))
    {
      if (!*__error())
      {
        v44 = -6700;
        goto LABEL_73;
      }

      v44 = *__error();
      if (v44)
      {
        if ((v44 - 37) > 0xFFFFFFFD)
        {
          int v45 = dispatch_source_create(MEMORY[0x1895F8B60], (int)v11[15], 0LL, *(dispatch_queue_t *)(a1 + 104));
          *((void *)v11 + 10) = v45;
          if (v45)
          {
            dispatch_set_context(v45, v11);
            dispatch_source_set_event_handler_f( *((dispatch_source_t *)v11 + 10),  (dispatch_function_t)_AsyncConnection_EventHandler);
            dispatch_source_set_cancel_handler_f( *((dispatch_source_t *)v11 + 10),  (dispatch_function_t)_AsyncConnection_CancelHandler);
            dispatch_resume(*((dispatch_object_t *)v11 + 10));
            ++*v11;
            v46 = dispatch_source_create(MEMORY[0x1895F8B90], (int)v11[15], 0LL, *(dispatch_queue_t *)(a1 + 104));
            *((void *)v11 + 11) = v46;
            if (v46)
            {
              dispatch_set_context(v46, v11);
              dispatch_source_set_event_handler_f( *((dispatch_source_t *)v11 + 11),  (dispatch_function_t)_AsyncConnection_EventHandler);
              dispatch_source_set_cancel_handler_f( *((dispatch_source_t *)v11 + 11),  (dispatch_function_t)_AsyncConnection_CancelHandler);
              dispatch_resume(*((dispatch_object_t *)v11 + 11));
              CFIndex v21 = 0LL;
              ++*v11;
              *((void *)v11 + 1) = *(void *)(a1 + 80);
              *(void *)(a1 + 80) = v11;
              return v21;
            }
          }

          goto LABEL_71;
        }

    v52 = 0LL;
    while (v24 != v52)
    {
      if (v14[v52] != aU_0[v52]) {
        goto LABEL_63;
      }
      if (++v52 == 2) {
        goto LABEL_68;
      }
    }

    if (!aU_0[v24])
    {
LABEL_68:
      appended = StringToUUIDEx(v23, 0xFFFFFFFFFFFFFFFFLL, 0, 0LL, v79, v18, v19, v20);
      if ((_DWORD)appended) {
        goto LABEL_116;
      }
      v51 = (uint64_t)&v13[-v11];
      goto LABEL_78;
    }

  uint64_t result = IOAllowPowerChange(v9, *(void *)(v10 + 40));
  if ((_DWORD)result)
  {
    uint64_t result = *(void *)(*(void *)(v10 + 32) + 40LL);
    if (*(int *)result <= 90)
    {
      if (*(_DWORD *)result != -1) {
        return LogPrintF( result,  (uint64_t)"-[CUSleepWakeMonitor _sleepWakeHandlerForService:type:arg:]_block_invoke_2",  0x5Au,  (uint64_t)"### Ack failed (%s): %#m\n",  v14,  v15,  v16,  v17,  (char)v12);
      }
      uint64_t result = _LogCategory_Initialize(result, 0x5Au);
      if ((_DWORD)result)
      {
        uint64_t result = *(void *)(*(void *)(v10 + 32) + 40LL);
        return LogPrintF( result,  (uint64_t)"-[CUSleepWakeMonitor _sleepWakeHandlerForService:type:arg:]_block_invoke_2",  0x5Au,  (uint64_t)"### Ack failed (%s): %#m\n",  v14,  v15,  v16,  v17,  (char)v12);
      }
    }
  }

  return result;
}

  progressHandler = (void (**)(id, void, id))self->_progressHandler;
  if (progressHandler) {
    progressHandler[2](progressHandler, v4, v14);
  }
  if ((_DWORD)v4 == 20)
  {
    __int128 v13 = self->_progressHandler;
    self->_progressHandler = 0LL;
  }
}

  if (v26) {
    MEMORY[0x186E42F24]();
  }
  if ((v6 & 0x80000000) == 0) {
    close(v6);
  }
  return v7;
}

  uint64_t v42 = *(int **)(a1 + 56);
  if (*v42 <= 60)
  {
    if (*v42 != -1) {
      goto LABEL_58;
    }
    if (_LogCategory_Initialize((uint64_t)v42, 0x3Cu))
    {
      uint64_t v42 = *(int **)(a1 + 56);
LABEL_58:
      LogPrintF( (uint64_t)v42,  (uint64_t)"OSStatus NTPClockStartClient(NTPClockRef)",  0x3Cu,  (uint64_t)"### NTP client start failed: %#m\n",  v6,  v7,  v8,  v9,  v10);
    }
  }

  NTPClockStop(a1, v3, v4, v5, v6, v7, v8, v9);
  return v10;
}

        Value = 0LL;
        goto LABEL_57;
      }

      Power = WiFiDeviceClientGetPower();
      uint64_t v35 = (CFTypeRef *)MEMORY[0x189604DE8];
      if (!Power) {
        uint64_t v35 = (CFTypeRef *)MEMORY[0x189604DE0];
      }
      Value = (const __CFString *)*v35;
      CFRetain(*v35);
      goto LABEL_38;
    }

    if (!*(_BYTE *)(v6 + 96) || !*(_BYTE *)(v6 + 103))
    {
      uint64_t v28 = (const __CFDictionary *)WiFiDeviceClientCopyProperty();
      if (v28)
      {
        uint64_t v11 = v28;
        Value = (const __CFString *)CFDictionaryGetValue(v28, @"RSSI_CTL_AGR");
        if (Value) {
          goto LABEL_10;
        }
        uint64_t v29 = -6735;
        goto LABEL_63;
      }

      goto LABEL_56;
    }

    uint64_t v37 = 0LL;
    int v38 = 0LL;
    uint64_t v40 = 0;
    uint64_t v39 = 0LL;
    LOWORD(v37) = *(_WORD *)(v6 + 101);
    uint64_t v24 = *(_DWORD *)(v6 + 97);
    valuePtr[0] = 1;
    valuePtr[1] = v24;
    uint64_t v42 = WiFiManagerDoApple80211(v6, 1, 153, (uint64_t)valuePtr, 36LL, v21, v22, v23);
    if (!v42)
    {
      Value = (const __CFString *)CFNumberCreateInt64((int)v38);
      if (!Value)
      {
        uint64_t v25 = -6727;
        goto LABEL_58;
      }

      goto LABEL_38;
    }
  }

LABEL_60:
    uint64_t v33 = 0LL;
    *((void *)v11 + 1) = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v11;
    return v33;
  }

  uint64_t v33 = 0LL;
LABEL_54:
  _AsyncConnection_ReleaseOperation(v11);
  return v33;
}

  selfAccessoryMediaSystemRole = self->_selfAccessoryMediaSystemRole;
  self->_selfAccessoryMediaSystemRole = 0LL;

  uint64_t v41 = 1;
LABEL_61:

  selfAccessorySiriEnabled = self->_selfAccessorySiriEnabled;
  if (!self->_selfAccessorySiriEnabled) {
    goto LABEL_67;
  }
  v78 = self->_ucat;
  if (v78->var0 <= 30)
  {
    if (v78->var0 == -1)
    {
      v78 = self->_ucat;
    }

    LogPrintF( (uint64_t)v78,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessory SiriAccess per-accessory updated: HK clear",  v73,  v74,  v75,  v76,  v95);
  }

      objc_storeStrong((id *)&self->_selfAccessoryAppData, v53);
      selfAccessoryAppDataChangedHandler = (void (**)(id, id))self->_selfAccessoryAppDataChangedHandler;
      if (selfAccessoryAppDataChangedHandler) {
        selfAccessoryAppDataChangedHandler[2](selfAccessoryAppDataChangedHandler, v55);
      }
      goto LABEL_62;
    }

    __int128 v13 = self->_ucat;
    if (v13->var0 <= 30)
    {
      if (v13->var0 == -1)
      {
        uint64_t v33 = _LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu);
        selfAccessory = self->_selfAccessory;
        if (!v33) {
          goto LABEL_30;
        }
        __int128 v13 = self->_ucat;
      }

      -[HMAccessory name](selfAccessory, "name");
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v13,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryIfNeeded]",  0x1Eu,  (uint64_t)"LostSelfAccessory: %@ (%@)\n",  v14,  v15,  v16,  v17,  (char)v10);

      selfAccessory = self->_selfAccessory;
    }

  memset(&v70[4], 0, 24);
  *(_DWORD *)v70 = -1978786276;
  *(_OWORD *)&v70[8] = *MEMORY[0x1895FB7E8];
  uint64_t v40 = v14;
  uint64_t v41 = 28;
LABEL_61:
  if (bind(v40, (const sockaddr *)v70, v41) && (!*__error() || *__error()))
  {
    v51 = self->_ucat;
    if (v51->var0 <= 90)
    {
      if (v51->var0 != -1)
      {
LABEL_68:
        LogPrintF( (uint64_t)v51,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket bind failed (%s): %#m\n",  v47,  v48,  v49,  v50,  (char)v9);
        goto LABEL_70;
      }

      if (_LogCategory_Initialize((uint64_t)v51, 0x5Au))
      {
        v51 = self->_ucat;
        goto LABEL_68;
      }
    }
  }

  *uint64_t v7 = v23 - v17;
  if (HTTPGetHeaderField( (char *)a1,  *(void *)(a1 + 0x2000),  "Connection",  0LL,  0LL,  (const char **)&v38,  &v39,  0LL))
  {
    uint64_t v30 = *(unsigned __int8 **)(a1 + 8416);
    uint64_t v31 = *(void *)(a1 + 8424);
    uint64_t v32 = "HTTP/1.0";
  }

  else
  {
    uint64_t v30 = (unsigned __int8 *)v38;
    uint64_t v31 = v39;
    uint64_t v32 = "close";
  }

  v3[16] = strnicmpx(v30, v31, v32) != 0;
  HTTPScanFHeaderValue((char *)a1, *(void *)(a1 + 0x2000), "Content-Length", "%llu", v33, v34, v35, v36, v8);
  return 0LL;
}

  if (a2)
  {
    *uint64_t v10 = 37;
    if ((a6 & 1) != 0)
    {
      *(_WORD *)(v10 + 1) = 13618;
      v10 += 3;
    }

    else
    {
      ++v10;
    }

    uint64_t v33 = if_indextoname(a2, v50);
    if (v33 && (uint64_t v34 = *v33) != 0)
    {
      uint64_t v35 = (unsigned __int8 *)(v33 + 1);
      do
      {
        *v10++ = v34;
        uint64_t v36 = *v35++;
        uint64_t v34 = v36;
      }

      while (v36);
    }

    else
    {
      uint64_t v39 = v49;
      do
      {
        *v39++ = (v9 % 0xA) | 0x30;
        uint64_t v32 = v9 > 9;
        v9 /= 0xAu;
      }

      while (v32);
      while (v39 > v49)
      {
        uint64_t v40 = *--v39;
        *v10++ = v40;
      }
    }
  }

  if ((int)v8 < 1)
  {
    if (v8 == -2) {
      *v10++ = 93;
    }
  }

  else
  {
    *(_WORD *)uint64_t v10 = 14941;
    uint64_t v37 = v50;
    do
    {
      *v37++ = (v8 % 0xA) | 0x30;
      uint64_t v32 = v8 > 9;
      v8 /= 0xAu;
    }

    while (v32);
    v10 += 2;
    while (v37 > v50)
    {
      int v38 = *--v37;
      *v10++ = v38;
    }
  }

  if ((a4 & 0x80000000) == 0)
  {
    *uint64_t v10 = 47;
    uint64_t v41 = v50;
    do
    {
      *v41++ = (a4 % 0xA) | 0x30;
      uint64_t v32 = a4 > 9;
      a4 /= 0xAu;
    }

    while (v32);
    ++v10;
    while (v41 > v50)
    {
      uint64_t v42 = *--v41;
      *v10++ = v42;
    }
  }

  *uint64_t v10 = 0;
  return a5;
}

uint64_t _AsyncConnection_StartConnect( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13 = *(_DWORD *)(a1 + 20);
  int v14 = *(unsigned __int8 *)(a3 + 1);
  if ((v13 & 0x80) != 0)
  {
    if (v14 == 30)
    {
      int v14 = 30;
    }

    else if (v14 == 2)
    {
      int v14 = 2;
    }
  }

  if ((v13 & 0x800) != 0)
  {
    if (v14 != 30) {
      goto LABEL_20;
    }
  }

  else if (v14 != 30)
  {
LABEL_20:
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if ((v13 & 0x200) != 0)
  {
    int v16 = *(int **)(a1 + 144);
    if (*v16 <= 30)
    {
      if (*v16 == -1)
      {
        int v16 = *(int **)(a1 + 144);
      }

      LogPrintF( (uint64_t)v16,  (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x1Eu,  (uint64_t)"Skipping IPv6 address with NoIPv6: %##a\n",  a5,  a6,  a7,  a8,  a3);
    }

    return 0LL;
  }

  if ((v13 & 0x40) == 0)
  {
    unint64_t v15 = *(void *)(a1 + 32);
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }

  if ((*(_BYTE *)(a3 + 9) & 0xC0) != 0x80) {
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a3 + 24)) {
    goto LABEL_21;
  }
  if (if_nametoindex("awdl0") != *(_DWORD *)(a3 + 24)) {
    goto LABEL_21;
  }
  char v30 = *(_BYTE *)(a3 + 16) ^ 2;
  __int16 v31 = *(_WORD *)(a3 + 17);
  char v32 = *(_BYTE *)(a3 + 21);
  __int16 v33 = *(_WORD *)(a3 + 22);
  uint64_t v22 = AWDLTrafficRegister((uint64_t)&v30, 1, 1);
  if (!(_DWORD)v22) {
    goto LABEL_21;
  }
  uint64_t v21 = v22;
  uint64_t v26 = *(int **)(a1 + 144);
  if (*v26 <= 90)
  {
    if (*v26 == -1)
    {
      uint64_t v26 = *(int **)(a1 + 144);
    }

    LogPrintF( (uint64_t)v26,  (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x5Au,  (uint64_t)"AWDLTrafficRegister failed: %#m\n",  v23,  v24,  v25,  a8,  v21);
  }

LABEL_52:
  if ((*(_BYTE *)(a1 + 21) & 1) == 0 || (_DWORD)v21 != 13 && (_DWORD)v21 != 35)
  {
    uint64_t v28 = *(int **)(a1 + 144);
    if (*v28 <= 50)
    {
      if (*v28 == -1)
      {
        uint64_t v28 = *(int **)(a1 + 144);
      }

      LogPrintF( (uint64_t)v28,  (uint64_t)"OSStatus _AsyncConnection_StartConnect(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x32u,  (uint64_t)"Skipping %##a (MAC %.6a) due to AWDLTrafficRegister reject: %#m\n",  v23,  v24,  v25,  a8,  a3);
    }

          objc_storeStrong(p_scanParametersCurrent, v23);
          -[CBCentralManager stopScan](self->_centralManager, "stopScan");
          goto LABEL_53;
        }
      }

      v46 = v21->_ucat;
      if (v46->var0 <= 10)
      {
        if (v46->var0 == -1)
        {
          v46 = v21->_ucat;
        }

        LogPrintF( (uint64_t)v46,  (uint64_t)"-[CUBLEScanner _update]",  0xAu,  (uint64_t)"Scanner no changes\n",  v30,  v31,  v32,  v33,  v54);
      }

      uint64_t v29 = 0LL;
      goto LABEL_53;
    }
  }

  if (!self->_pinDialogToken) {
    goto LABEL_9;
  }
  int v14 = self->_ucat;
  if (v14->var0 <= 30)
  {
    if (v14->var0 == -1)
    {
      int v14 = self->_ucat;
    }

    LogPrintF( (uint64_t)v14,  (uint64_t)"-[CUPairingSession _showPINBuiltInUI:useVisualPairing:]",  0x1Eu,  (uint64_t)"Hide old PIN before showing new PIN\n",  v6,  v7,  v8,  v9,  v48);
  }

  wifiStateChangedHandler = self->_wifiStateChangedHandler;
  if (!self->_wifiDeviceSetup)
  {
    if (wifiStateChangedHandler) {
      goto LABEL_80;
    }
    goto LABEL_63;
  }

  if (!wifiStateChangedHandler)
  {
LABEL_63:
    if (!self->_wifiStateMonitorSetup) {
      goto LABEL_80;
    }
    WiFiDeviceClientRegisterAutoJoinNotificationCallback();
    WiFiDeviceClientRegisterHostApStateChangedCallback();
    WiFiDeviceClientRegisterPowerCallback();
    self->_wifiStateMonitorSetup = 0;
    self->_wifiState = 0;
    uint64_t v34 = self->_ucat;
    if (v34->var0 > 30) {
      goto LABEL_80;
    }
    if (v34->var0 == -1)
    {
      uint64_t v34 = self->_ucat;
    }

    uint64_t v36 = "WiFi state monitor stopped\n";
    goto LABEL_79;
  }

  if (self->_wifiStateMonitorSetup) {
    goto LABEL_80;
  }
  WiFiDeviceClientRegisterAutoJoinNotificationCallback();
  WiFiDeviceClientRegisterHostApStateChangedCallback();
  WiFiDeviceClientRegisterPowerCallback();
  self->_wifiStateMonitorSetup = 1;
  self->_wifiFlags = -[CUWiFiManager _wifiFlagsUncached](self, "_wifiFlagsUncached");
  wifiState = -[CUWiFiManager _wifiStateUncached](self, "_wifiStateUncached");
  self->_wifiState = wifiState;
  uint64_t v34 = self->_ucat;
  if (v34->var0 > 30) {
    goto LABEL_80;
  }
  if (v34->var0 == -1)
  {
    uint64_t v34 = self->_ucat;
    wifiState = self->_wifiState;
  }

  if (wifiState <= 19)
  {
    if (!wifiState)
    {
      uint64_t v35 = "Unknown";
      goto LABEL_78;
    }

    if (wifiState == 10)
    {
      uint64_t v35 = "Off";
      goto LABEL_78;
    }

    uint64_t v11 = 0LL;
    char v30 = 0LL;
    uint64_t v21 = 0LL;
    int v38 = 0LL;
    uint64_t v26 = 0LL;
    goto LABEL_47;
  }

  uint64_t v9 = [MEMORY[0x189603F48] dataWithBytes:&v49 length:6];
  uint64_t v10 = -[NSMutableDictionary objectForKeyedSubscript:](self->_devices, "objectForKeyedSubscript:", v9);
  uint64_t v11 = (CUWiFiDevice *)v10;
  if (!v10) {
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___CUWiFiDevice);
  }
  -[CUWiFiDevice setBssid:](v11, "setBssid:", v9);
  -[CUWiFiDevice setRawScanResult:](v11, "setRawScanResult:", v4);
  if (-[CUWiFiDevice present](v11, "present") <= 0) {
    -[CUWiFiDevice setPresent:](v11, "setPresent:", 1LL);
  }
  v53 = 0;
  v52 = 0LL;
  v54 = v49;
  v55 = v50;
  int v12 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:&v52];
  -[CUWiFiDevice setIdentifier:](v11, "setIdentifier:", v12);

  CFTypeID TypeID = CFDataGetTypeID();
  CFDictionaryGetTypedValue(v4, @"ie", TypeID, 0LL);
  int v14 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = (void *)v9;
  if (!v14) {
    goto LABEL_12;
  }
  -[CUWiFiDevice ieData](v11, "ieData");
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  int v16 = v14;
  uint64_t v17 = v15;
  if (v16 == v17)
  {

    goto LABEL_12;
  }

  uint64_t v18 = v17;
  if (v17)
  {
    uint64_t v19 = [v16 isEqual:v17];

    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v20 = 0LL;
    goto LABEL_15;
  }

LABEL_14:
  -[CUWiFiDevice setIeData:](v11, "setIeData:", v16);
  uint64_t v20 = 1LL;
LABEL_15:
  -[__CFDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", @"platformNetwork");
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21) {
    -[CUWiFiDevice setPlatformObject:](v11, "setPlatformObject:", v21);
  }
  Int64Ranged = CFDictionaryGetInt64Ranged(v4, @"rssi", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, &v51);
  if ((Int64Ranged & 0x80000000) != 0 && -[CUWiFiDevice rssi](v11, "rssi") != (_DWORD)Int64Ranged)
  {
    -[CUWiFiDevice setRssi:](v11, "setRssi:", Int64Ranged);
    uint64_t v20 = v20 | 2;
  }

  uint64_t v23 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v4, @"ssid", v23, 0LL);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWiFiDevice ssid](v11, "ssid");
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v26 = v24;
  uint64_t v27 = v25;
  if (v26 == v27)
  {

    goto LABEL_27;
  }

  uint64_t v28 = v27;
  if ((v26 == 0LL) == (v27 != 0LL))
  {

    goto LABEL_26;
  }

  uint64_t v29 = [v26 isEqual:v27];

  if ((v29 & 1) == 0)
  {
LABEL_26:
    -[CUWiFiDevice setSsid:](v11, "setSsid:", v26);
    uint64_t v20 = v20 | 4;
  }

        uint64_t v28 = -6743;
        goto LABEL_26;
      }

      if (v15 == 3) {
        break;
      }
      if (v15 == 2)
      {
        int v16 = *(void *)(a4 + 24);
LABEL_15:
        Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v8, v16, v7);
        if (Data) {
          goto LABEL_37;
        }
        *(void *)(a4 + 32) = 0LL;
        *(_DWORD *)(a4 + 16) = 3;
        break;
      }
    }

    Data = SocketReadData(*(_DWORD *)a4, (uint64_t)v9, 0x10uLL, v7);
    uint64_t v41 = Data;
    if (Data)
    {
LABEL_37:
      uint64_t v28 = Data;
      goto LABEL_26;
    }

    chacha20_poly1305_init_64x64(v10, v39, v11);
    poly1305_update(v38, v40, 2uLL);
    *(void *)(a4 + 16696) += 2LL;
    uint64_t v22 = chacha20_poly1305_decrypt((uint64_t)v10, v8, *(void *)(a4 + 24), v8);
    uint64_t v23 = chacha20_poly1305_verify((unsigned int *)v10, (int8x16_t *)(a4 + v22 + 42), v9, (int *)&v41);
    uint64_t v28 = v41;
    if (v41) {
      break;
    }
    uint64_t v29 = v23 + v22;
    if (v23 + v22 != *(void *)(a4 + 24))
    {
      if (gLogCategory_NetTransportChaCha20Poly1305 <= 60
        && (gLogCategory_NetTransportChaCha20Poly1305 != -1
         || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_NetTransportChaCha20Poly1305,  (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)",  0x3Cu,  (uint64_t)"### NTCP verify len failed: %zu vs %zu\n",  v24,  v25,  v26,  v27,  v29);
      }

      uint64_t v28 = -6762;
      goto LABEL_26;
    }

    char v30 = 0LL;
    do
    {
      __int16 v31 = (*((_BYTE *)v11 + v30))++ + 1;
      if ((v31 & 0x100) == 0) {
        break;
      }
    }

    while (v30++ < 7);
    *(void *)(a4 + 16448) = v8;
    *(void *)(a4 + 16456) = (char *)v8 + v29;
    *(void *)(a4 + 32) = 0LL;
    *(_DWORD *)(a4 + 16) = 1;
    int v12 = v8;
  }

  if (gLogCategory_NetTransportChaCha20Poly1305 <= 60
    && (gLogCategory_NetTransportChaCha20Poly1305 != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_NetTransportChaCha20Poly1305, 0x3Cu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_NetTransportChaCha20Poly1305,  (uint64_t)"OSStatus _NetTransportRead(void *, size_t, size_t *, void *)",  0x3Cu,  (uint64_t)"### NTCP verify failed: %#m\n",  v24,  v25,  v26,  v27,  v28);
  }

    appended = 4294960587LL;
    goto LABEL_104;
  }

  *(_OWORD *)&__src[8] = xmmword_186B49CC0;
  *(void *)__src = v187;
  *(void *)&__src[24] = 0LL;
  if (a3)
  {
LABEL_125:
    appended = 4294960591LL;
  }

  else
  {
    RandomBytes((void *)(a1 + 478), 0x20uLL);
    CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 478,  32LL,  "Pair-Verify-ECDH-Salt",  0x15uLL,  (uint64_t)"Pair-Verify-ECDH-Info",  21LL,  0x20uLL,  a1 + 478);
    cccurve25519_make_pub();
    if ((*(_BYTE *)(a1 + 100) & 1) == 0
      || (__s[0] = 7, appended = TLV8BufferAppend((uint64_t)__src, 0, __s, 1uLL), !(_DWORD)appended))
    {
      appended = TLV8BufferAppend((uint64_t)__src, 6, (char *)v15, 1uLL);
      if (!(_DWORD)appended)
      {
        appended = TLV8BufferAppend((uint64_t)__src, 3, (char *)(a1 + 446), 0x20uLL);
        if (!(_DWORD)appended)
        {
          uint64_t v22 = *(void *)(a1 + 208);
          if (!v22 || (appended = TLV8BufferAppendUInt64((uint64_t)__src, 25, v22), !(_DWORD)appended))
          {
            uint64_t v23 = *(void *)&__src[8];
            uint64_t v24 = *(UInt8 **)&__src[24];
            if (*(void *)&__src[24]) {
              goto LABEL_29;
            }
            if (*(void *)&__src[8] <= 1uLL) {
              uint64_t v25 = 1LL;
            }
            else {
              uint64_t v25 = *(void *)&__src[8];
            }
            uint64_t v26 = (UInt8 *)malloc(v25);
            if (v26)
            {
              uint64_t v24 = v26;
              if (v23) {
                memcpy(v26, *(const void **)__src, v23);
              }
LABEL_29:
              *(void *)__src = v187;
              *(void *)&__src[8] = 0LL;
              *(void *)&__src[24] = 0LL;
              uint64_t v27 = a4;
              *a4 = v24;
              *uint64_t v9 = v23;
              *(_BYTE *)(a1 + 120) = 2;
              uint64_t v28 = *(int **)(a1 + 16);
              uint64_t v29 = *v28;
              if (*v28 > 30) {
                goto LABEL_233;
              }
              if (v29 == -1)
              {
                if (!_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu)) {
                  goto LABEL_233;
                }
                uint64_t v28 = *(int **)(a1 + 16);
                uint64_t v29 = *v28;
              }

              char v30 = v29 > 10 || v29 == -1 && !_LogCategory_Initialize((uint64_t)v28, 0xAu);
              LogPrintF( (uint64_t)v28,  (uint64_t)"OSStatus _VerifyClientM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)",  0x1Eu,  (uint64_t)"Pair-verify client M1 -- start request\n%?{end}%1{tlv8}\n",  a5,  a6,  a7,  a8,  v30);
LABEL_233:
              if (*(void *)&__src[24]) {
                free(*(void **)&__src[24]);
              }
              goto LABEL_74;
            }

            appended = 4294960568LL;
          }
        }
      }
    }

LABEL_59:
    _AsyncConnection_Complete(a1, 0LL, 0xFFFFFFFFLL, v21);
    return v21;
  }

  v66 = *p_btAccessoryManager;
  if (!*p_btAccessoryManager) {
    goto LABEL_82;
  }
  v110 = 0;
  v67 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarDetectionEnable[0])( v66,  (uint64_t)a4,  (uint64_t)&v110);
  if (v67)
  {
    v72 = v67;
    v73 = self->_ucat;
    if (v73->var0 <= 60)
    {
      if (v73->var0 != -1)
      {
LABEL_63:
        LogPrintF( (uint64_t)v73,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetInEarDetectionEnable failed: %#m\n",  v68,  v69,  v70,  v71,  v72 - 16);
        goto LABEL_65;
      }

      if (_LogCategory_Initialize((uint64_t)v73, 0x3Cu))
      {
        v73 = self->_ucat;
        goto LABEL_63;
      }
    }
  }

        -[CUPowerSource chargeLevel](v70, "chargeLevel");
        v44 = 2.22507386e-308;
        if (v45 > 2.22507386e-308)
        {
          -[CUPowerSource maxCapacity](v70, "maxCapacity");
          v44 = v46;
        }

        v47 = self->_subLeft;
        if (v47)
        {
          -[CUPowerSource chargeLevel](v47, "chargeLevel");
          if (v48 > v44)
          {
            -[CUPowerSource maxCapacity](self->_subLeft, "maxCapacity");
            v44 = v49;
          }
        }

        v50 = self->_subRight;
        if (v50)
        {
          -[CUPowerSource chargeLevel](v50, "chargeLevel");
          if (v51 > v44)
          {
            -[CUPowerSource maxCapacity](self->_subRight, "maxCapacity");
            v44 = v52;
          }
        }

        v53 = self->_subCase;
        if (v53)
        {
          -[CUPowerSource chargeLevel](v53, "chargeLevel");
          if (v54 > v44)
          {
            -[CUPowerSource maxCapacity](self->_subCase, "maxCapacity");
            v44 = v55;
          }
        }

        if (v44 != 2.22507386e-308 && v44 != self->_maxCapacity) {
          self->_maxCapacity = v44;
        }
        v56 = -[CUPowerSource name](v70, "name");
        if (!v56) {
          goto LABEL_81;
        }
        name = self->_name;
        v58 = v56;
        uint64_t v59 = name;
        if (v58 == v59)
        {
        }

        else
        {
          v60 = v59;
          if (v59)
          {
            size_t v61 = -[NSString isEqual:](v58, "isEqual:", v59);

            if ((v61 & 1) != 0) {
              goto LABEL_81;
            }
          }

          else
          {
          }

          objc_storeStrong((id *)&self->_name, v56);
        }

  if (v32 != self->_deviceIEFlags)
  {
    self->_deviceIEFlags = v32;
    uint64_t v8 = 1;
  }

  v47 = (unint64_t)v5;
  while ((unint64_t)a4 > v47)
  {
    unsigned int v48 = v47 + 2;
    uint32_t v49 = *(unsigned __int8 *)(v47 + 1);
    v50 = *(unsigned __int8 *)v47;
    v47 += 2 + v49;
    if (v50 == 2)
    {
      if (!v49) {
        break;
      }
      v51 = (void *)[objc_alloc(NSString) initWithBytes:v48 length:v49 encoding:4];
      v52 = v51;
      if (!v51) {
        goto LABEL_75;
      }
      deviceIEManufacturer = self->_deviceIEManufacturer;
      v54 = v51;
      v55 = deviceIEManufacturer;
      if (v54 == v55)
      {
      }

      else
      {
        v56 = v55;
        if (v55)
        {
          v57 = -[NSString isEqual:](v54, "isEqual:", v55);

          if ((v57 & 1) != 0) {
            goto LABEL_75;
          }
        }

        else
        {
        }

        objc_storeStrong((id *)&self->_deviceIEManufacturer, v52);
        uint64_t v8 = 1;
      }

        uint64_t v11 = *v22;
        uint64_t v10 = v22;
        if (!*v22)
        {
          _LogCategory_ApplyActions(0LL);
          if ((a2 & 2) == 0)
          {
            if (v6)
            {
              _LogUtils_ReadCFPreferences(a2 | 4u);
            }

            else if (v8)
            {
              _LogUtils_WriteCFPreferences();
            }
          }

          return 0LL;
        }
      }

      while (v11)
      {
        if (v11 == 58)
        {
          uint64_t v27 = v14 - v10;
          uint64_t v28 = v14 + 1;
          for (j = v14 + 1; *j; ++j)
          {
            if (*j == 61)
            {
              int v45 = j - v28;
              char v30 = j + 1;
              for (k = j + 1; ; ++k)
              {
                char v32 = *k;
                if (!*k || v32 == 44) {
                  break;
                }
              }

              __int16 v33 = k - v30;
              if (v32 == 44) {
                uint64_t v22 = k + 1;
              }
              else {
                uint64_t v22 = k;
              }
              if ((a2 & 1) == 0
                && (!strnicmpx(v28, v45, "output") || !strnicmpx(v28, v45, "output2"))
                && !strnicmp_prefix(v30, v33, "callback"))
              {
                uint64_t v4 = v47;
                goto LABEL_59;
              }

              uint64_t v43 = v33;
              v44 = (char *)v30;
              uint64_t v34 = gLogActionList;
              if (gLogActionList)
              {
                uint64_t v35 = &gLogActionList;
                while (1)
                {
                  uint64_t v36 = (uint64_t *)v34;
                  if (!strnicmpx(v10, v27, *(_BYTE **)(v34 + 8))
                    && !strnicmpx(v28, v45, (_BYTE *)v36[2]))
                  {
                    break;
                  }

                  uint64_t v34 = *v36;
                  uint64_t v35 = v36;
                  if (!*v36) {
                    goto LABEL_83;
                  }
                }

                uint64_t v37 = 0LL;
              }

              else
              {
                uint64_t v36 = &gLogActionList;
LABEL_83:
                uint64_t v37 = (uint64_t *)calloc(1uLL, 0x20uLL);
                uint64_t v35 = v36;
                uint64_t v36 = v37;
                if (!v37) {
                  return 4294960568LL;
                }
              }

              int v38 = ReplaceString((void **)v36 + 1, 0LL, (char *)v10, v27);
              if (!(_DWORD)v38)
              {
                int v38 = ReplaceString((void **)v36 + 2, 0LL, (char *)v28, v45);
                if (!(_DWORD)v38)
                {
                  int v38 = ReplaceString((void **)v36 + 3, 0LL, v44, v43);
                  if (!(_DWORD)v38)
                  {
                    uint64_t v4 = v47;
                    if (v37) {
                      *uint64_t v35 = (uint64_t)v37;
                    }
                    goto LABEL_58;
                  }
                }
              }

              uint64_t v40 = v38;
              if (v37) {
                _LogUtils_FreeAction(v37);
              }
              return v40;
            }
          }

          return 4294960554LL;
        }

        uint64_t v21 = *++v14;
        uint64_t v11 = v21;
      }

      return 4294960554LL;
    }
  }

  else
  {
    uint64_t v6 = 0;
    LODWORD(v8) = 0;
  }

  while (1)
  {
    uint64_t v39 = (void *)gLogActionList;
    if (!gLogActionList) {
      break;
    }
    gLogActionList = *(void *)gLogActionList;
    _LogUtils_FreeAction(v39);
  }

  uint64_t v40 = 0LL;
  if (!v6 && v8)
  {
    if (gLogCFPrefsAppID) {
      uint64_t v41 = (const __CFString *)gLogCFPrefsAppID;
    }
    else {
      uint64_t v41 = (const __CFString *)*MEMORY[0x189605188];
    }
    CFPreferencesSetAppValue(@"logconfig", 0LL, v41);
    CFPreferencesAppSynchronize(v41);
    return 0LL;
  }

  return v40;
}

        if (v81[5]) {
          v60 = 0;
        }
        else {
          v60 = NSErrorToOSStatusEx(v46, 0LL);
        }
LABEL_62:
        *((_DWORD *)v87 + 6) = v60;

        v54 = 0LL;
LABEL_63:
        v58 = 0LL;
        uint64_t v59 = 0LL;
        goto LABEL_64;
      }
      v53 = +[CUPairingDaemon sharedPairingDaemon](&OBJC_CLASS___CUPairingDaemon, "sharedPairingDaemon");
      v54 = v53;
      if (v53)
      {
        v55 = [v53 findPairedPeer:v39 options:v44 error:v87 + 3];
        v56 = (void *)v81[5];
        v81[5] = v55;

        v57 = v87;
        if (*((_DWORD *)v87 + 6))
        {
          v58 = 0LL;
          uint64_t v59 = 0LL;
          goto LABEL_73;
        }

        if (v81[5]) {
          goto LABEL_63;
        }
        v58 = 0LL;
        uint64_t v59 = 0LL;
        goto LABEL_89;
      }

      v58 = objc_alloc_init(&OBJC_CLASS___CUPairingManager);
      size_t v61 = dispatch_queue_create( "OSStatus _PairingSessionFindPeerPairingManager(PairingSessionRef, const void *, size_t, uint8_t *, CFDictionaryRef *)",  0LL);
      -[CUPairingManager setDispatchQueue:](v58, "setDispatchQueue:", v61);

      if ((*(_BYTE *)(a1 + 100) & 0x40) != 0) {
        -[CUPairingManager setTargetUserSession:](v58, "setTargetUserSession:", 1LL);
      }
      __int128 v62 = dispatch_semaphore_create(0LL);
      v76[0] = (id)MEMORY[0x1895F87A8];
      v76[1] = (id)3221225472LL;
      v76[2] = ___PairingSessionFindPeerPairingManager_block_invoke;
      v76[3] = &unk_189F33CA0;
      v78 = &v80;
      v79 = &v86;
      uint64_t v59 = v62;
      v77 = v59;
      -[CUPairingManager findPairedPeer:options:completion:](v58, "findPairedPeer:options:completion:", v39, v44, v76);

      __int128 v63 = dispatch_time(0LL, 120000000000LL);
      v64 = dispatch_semaphore_wait(v59, v63);
      -[CUPairingManager invalidate](v58, "invalidate");
      v57 = v87;
      if (!v64)
      {
        if (*((_DWORD *)v87 + 6))
        {
          v54 = 0LL;
          goto LABEL_73;
        }

        if (v81[5])
        {
          v54 = 0LL;
LABEL_64:
          if (!a4)
          {
LABEL_68:
            if (a5)
            {
              *a5 = [(id)v81[5] acl];
            }

            v70 = *(const void **)(a1 + 264);
            if (v70) {
              CFRelease(v70);
            }
            *(void *)(a1 + 264) = (id)v81[5];
            goto LABEL_73;
          }

          [(id)v81[5] publicKey];
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue();
          v66 = v65;
          if (v65)
          {
            if ([v65 length] == 32)
            {
              v67 = v66;
              v68 = (_OWORD *)[v67 bytes];
              v69 = v68[1];
              *a4 = *v68;
              a4[1] = v69;

              goto LABEL_68;
            }

            v74 = -6743;
          }

          else
          {
            v74 = -6727;
          }

          *((_DWORD *)v87 + 6) = v74;

LABEL_73:
          int v13 = *((unsigned int *)v87 + 6);
          _Block_object_dispose(&v80, 8);

          _Block_object_dispose(&v86, 8);
          return v13;
        }

        v54 = 0LL;
LABEL_89:
        v73 = -6762;
        goto LABEL_90;
      }

      v54 = 0LL;
      v73 = -6722;
    }

    else
    {
      uint64_t v39 = 0LL;
      v54 = 0LL;
      v58 = 0LL;
      uint64_t v59 = 0LL;
      v57 = v87;
      v73 = -6708;
    }

  if (a6) {
    *a6 = v20;
  }
  if (a7) {
    *a7 = v19;
  }
  if (a8) {
    *a8 = v15;
  }
  if (v15 < (char *)v13)
  {
    uint64_t v23 = &v12[v30];
    uint64_t v24 = &v12[v30] - v15;
    do
    {
      uint64_t v25 = *v15;
      if (*v15 < 0)
      {
        if (!__maskrune(v25, 0x4000uLL)) {
          goto LABEL_73;
        }
      }

      else if ((*(_DWORD *)(v14 + 4 * v25 + 60) & 0x4000) == 0)
      {
        goto LABEL_73;
      }

      ++v15;
      --v24;
    }

    while (v24);
    unint64_t v15 = v23;
  }

LABEL_21:
  int v14 = *(unsigned __int8 *)(a3 + 1);
LABEL_22:
  unint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    if (v14 == 30)
    {
LABEL_24:
LABEL_31:
      unint64_t v15 = *(void *)(a1 + 24);
      if (v15) {
        return _AsyncConnection_StartConnectDelayed(a1, a2, 0, (__int128 *)a3, a4, a5, v15, a8);
      }
    }
  }

  else if (v14 == 30)
  {
    goto LABEL_31;
  }

  uint64_t v17 = mach_absolute_time();
  uint64_t v18 = *(void *)(a1 + 40);
  if (!v18) {
    goto LABEL_38;
  }
  if (NanosecondsToUpTicks_sOnce != -1)
  {
    uint64_t v29 = *(void *)(a1 + 40);
    dispatch_once_f( &NanosecondsToUpTicks_sOnce,  &NanosecondsToUpTicks_sMultiplier,  (dispatch_function_t)_NanosecondsToUpTicksInit);
    uint64_t v18 = v29;
  }

  uint64_t v19 = v18 + (unint64_t)(*(double *)&NanosecondsToUpTicks_sMultiplier * 100000000.0);
  if (v19 <= v17)
  {
LABEL_38:
    *(void *)(a1 + 40) = v17;
    return _AsyncConnection_StartConnectNow(a1, (uint64_t)a2, a3, a4, a5);
  }

  *(void *)(a1 + 40) = v19;
  unint64_t v15 = UpTicksToNanoseconds(v19 - v17);
  return _AsyncConnection_StartConnectDelayed(a1, a2, 0, (__int128 *)a3, a4, a5, v15, a8);
}

  CFRelease(v30);
  if (a4) {
    goto LABEL_24;
  }
  return Mutable;
}

  uint64_t v4 = &gTUExitCode;
  gRootOptions = v3;
LABEL_22:
  gOptionPtr = 0LL;
  uint64_t v17 = &gTUExitCode;
  if ((gEndedOptions & 1) == 0)
  {
    uint64_t v18 = gArgI;
    while (v18 < v6[75])
    {
      uint64_t v19 = *(void *)(gArgV + 8LL * v18);
      if (*(_BYTE *)v19 == 45
        && ((uint64_t v20 = (char *)(v19 + 1), v21 = *(unsigned __int8 *)(v19 + 1), *(_BYTE *)(v19 + 1))
          ? (uint64_t v22 = (v21 - 48) > 9)
          : (uint64_t v22 = 0),
            v22))
      {
        if (v21 == 45)
        {
          uint64_t v24 = (const char *)(v19 + 2);
          if (!*(_BYTE *)(v19 + 2))
          {
            v7[74] = v18 + 1;
            *((_BYTE *)v17 + 1808) = 1;
            break;
          }

          v100 = v2;
          uint64_t v25 = strchr((const char *)(v19 + 2), 61);
          if (!v25) {
            uint64_t v25 = (char *)&v24[strlen((const char *)(v19 + 2))];
          }
          v101 = v5;
          v102 = v3;
          uint64_t v26 = v25 - v24;
          if ((unint64_t)(v25 - v24) < 3)
          {
            v99 = 0;
            uint64_t v28 = (const char *)(v19 + 2);
          }

          else
          {
            uint64_t v27 = strncasecmp((const char *)(v19 + 2), "no-", 3uLL);
            if (v27) {
              uint64_t v28 = (const char *)(v19 + 2);
            }
            else {
              uint64_t v28 = (const char *)(v19 + 5);
            }
            if (v27)
            {
              uint64_t v29 = 0;
            }

            else
            {
              uint64_t v26 = v25 - v24 - 3;
              uint64_t v29 = 2;
            }

            v99 = v29;
          }

          uint64_t v37 = 0;
          int v38 = gRootOptions;
          uint64_t v39 = v102;
          while (1)
          {
            uint64_t v40 = *(_DWORD *)v39;
            if (*(_DWORD *)v39) {
              break;
            }
LABEL_71:
            if (v37)
            {
              fprintf((FILE *)*MEMORY[0x1895F89D0], "error: unknown option '%s'.\n", v24);
              int v45 = 129LL;
              uint64_t v6 = (_DWORD *)&unk_18C69F000;
              uint64_t v7 = (_DWORD *)&unk_18C69F000;
              size_t v5 = v101;
              goto LABEL_113;
            }

            v44 = *(void *)(v39 + 80);
            uint64_t v37 = v44 == 0;
            if (v44) {
              uint64_t v39 = *(void *)(v39 + 80);
            }
            else {
              uint64_t v39 = v38;
            }
          }

          uint64_t v41 = v39;
          while (1)
          {
            if ((v40 - 6) <= 9)
            {
              uint64_t v42 = *(void *)(v41 + 8);
              if (v42)
              {
              }
            }

            uint64_t v43 = *(_DWORD *)(v41 + 104);
            v41 += 104LL;
            uint64_t v40 = v43;
            if (!v43) {
              goto LABEL_71;
            }
          }

          if (*v25) {
            gOptionPtr = (uint64_t)(v25 + 1);
          }
          uint64_t v23 = _CLIGetValue(v41, v99);
          uint64_t v6 = (_DWORD *)&unk_18C69F000;
          uint64_t v7 = (_DWORD *)&unk_18C69F000;
          size_t v5 = v101;
          v3 = v102;
          v2 = v100;
          uint64_t v4 = &gTUExitCode;
          uint64_t v17 = &gTUExitCode;
          if ((_DWORD)v23) {
            goto LABEL_106;
          }
        }

        else
        {
          gOptionPtr = v19 + 1;
          while (2)
          {
            char v30 = 0;
            __int16 v31 = v3;
            while (1)
            {
              char v32 = *(_DWORD *)v31;
              if (*(_DWORD *)v31) {
                break;
              }
LABEL_53:
              if (v30)
              {
                fprintf((FILE *)*MEMORY[0x1895F89D0], "error: unknown option '%c'.\n", *v20);
                goto LABEL_80;
              }

              __int16 v31 = *(void *)(v31 + 80);
              char v30 = v31 == 0;
              if (!v31) {
                __int16 v31 = *((void *)v4 + 223);
              }
            }

            __int16 v33 = v31;
            while ((v32 - 6) > 9 || *(_DWORD *)(v33 + 4) != *v20)
            {
              uint64_t v34 = *(_DWORD *)(v33 + 104);
              v33 += 104LL;
              char v32 = v34;
              if (!v34) {
                goto LABEL_53;
              }
            }

            uint64_t v36 = v20[1];
            uint64_t v35 = (uint64_t)(v20 + 1);
            if (!v36) {
              uint64_t v35 = 0LL;
            }
            gOptionPtr = v35;
            uint64_t v23 = _CLIGetValue(v33, 1);
            if ((_DWORD)v23) {
              goto LABEL_106;
            }
            uint64_t v20 = (char *)gOptionPtr;
            if (gOptionPtr) {
              continue;
            }
            break;
          }
        }
      }

      else
      {
        if ((v2 & 1) == 0) {
          break;
        }
        uint64_t v23 = _CLIReorderArg(*(void *)(gArgV + 8LL * v18));
        if ((_DWORD)v23) {
          goto LABEL_106;
        }
      }

      uint64_t v18 = v7[74] + 1;
      v7[74] = v18;
      if ((v17[452] & 1) != 0) {
        break;
      }
    }
  }

  _CLIReorderArg(0LL);
  if ((v2 & 2) != 0) {
    goto LABEL_112;
  }
  v46 = v7[74];
  if ((int)v46 >= v6[75])
  {
    if (_CLIFindOption((unsigned __int8 **)v3, 3, 0, 0LL))
    {
      v58 = *(void *)(v3 + 80);
      if (v58)
      {
        if (!*(void *)(v58 + 64))
        {
          _CLIHelp_PrintCommand(v58, 0, 0);
          goto LABEL_80;
        }
      }

      else if (!gCLIInteractiveMode)
      {
        _CLIHelp_PrintSummary(0);
        goto LABEL_80;
      }
    }

  return v28;
}

    uint64_t v18 = 0LL;
    goto LABEL_15;
  }

  int v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress[0])( (uint64_t)self->_btSession,  (uint64_t)v21,  (uint64_t)&v22);
  if (v13 == -310000) {
    int v14 = 4294960596LL;
  }
  else {
    int v14 = (v13 + 310000);
  }
  if (v13)
  {
    if (a4)
    {
      unint64_t v15 = (void *)*MEMORY[0x189607670];
LABEL_20:
      NSErrorF_safe(v15, (const char *)v14);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    }

    goto LABEL_21;
  }

      *((void *)v9 + 7) = a1;
      *((_BYTE *)v9 + 64) = 0;
      if (!*((_BYTE *)v9 + 66)) {
        [v9 _btEnsureStopped];
      }
      [v9 _run];
      goto LABEL_28;
  }

  uint64_t v23 = (int *)*((void *)v9 + 19);
  if (*v23 <= 40)
  {
    if (*v23 == -1)
    {
      if (!_LogCategory_Initialize(*((void *)v9 + 19), 0x28u)) {
        goto LABEL_28;
      }
      uint64_t v23 = (int *)*((void *)v9 + 19);
    }

    NSPrintF();
    char v30 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)v23,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x28u,  (uint64_t)"BTSession unknown event %d, result %@",  v24,  v25,  v26,  v27,  a2);
  }

      uint64_t v34 = _Block_copy(self->_deviceConnectedHandler);
      uint64_t v35 = v34;
      if (v34)
      {
        v39[0] = MEMORY[0x1895F87A8];
        v39[1] = 3221225472LL;
        v39[2] = __45__CUBluetoothClient__btAccessoryNameChanged___block_invoke;
        v39[3] = &unk_189F33060;
        uint64_t v41 = v34;
        uint64_t v40 = v16;
        -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v39);
      }

      goto LABEL_24;
    }

    uint64_t v36 = v5;
    uint64_t v37 = self->_ucat;
    if (v37->var0 <= 60)
    {
      if (v37->var0 != -1)
      {
LABEL_29:
        LogPrintF( (uint64_t)v37,  (uint64_t)"-[CUBluetoothClient _btAccessoryNameChanged:]",  0x3Cu,  (uint64_t)"### Name state changed: BTDeviceGetAddressString failed: %#m\n",  v6,  v7,  v8,  v9,  v36 - 16);
        return;
      }

      if (_LogCategory_Initialize((uint64_t)v37, 0x3Cu))
      {
        uint64_t v37 = self->_ucat;
        goto LABEL_29;
      }
    }
  }

    uint64_t v18 = 0LL;
    goto LABEL_15;
  }

  int v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress_2035[0])( (uint64_t)self->_btSession,  (uint64_t)v21,  (uint64_t)&v22);
  if (v13 == -310000) {
    int v14 = 4294960596LL;
  }
  else {
    int v14 = (v13 + 310000);
  }
  if (v13)
  {
    if (a4)
    {
      unint64_t v15 = (void *)*MEMORY[0x189607670];
LABEL_20:
      NSErrorF_safe(v15, (const char *)v14);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    }

    goto LABEL_21;
  }

    uint64_t v23 = -44;
    goto LABEL_47;
  }

  if (!os_channel_attr_create())
  {
    ucat = self->_ucat;
    if (ucat->var0 <= 90)
    {
      if (ucat->var0 == -1)
      {
        ucat = self->_ucat;
      }

      uint64_t v22 = "### Create channel attr failed\n";
LABEL_20:
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothScalablePipe _setupPipe]",  0x5Au,  (uint64_t)v22,  v5,  v6,  v7,  v8,  v29);
      goto LABEL_21;
    }

    goto LABEL_21;
  }

  attr = os_channel_read_attr();
  if (attr)
  {
    uint64_t v23 = attr;
    uint64_t v24 = self->_ucat;
    if (v24->var0 <= 90)
    {
      if (v24->var0 == -1)
      {
        uint64_t v24 = self->_ucat;
      }

      LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUBluetoothScalablePipe _setupPipe]",  0x5Au,  (uint64_t)"### Read channel attr failed: %#m\n",  v12,  v13,  v14,  v15,  v23);
    }
  }

  else
  {
    char v30 = 0LL;
    int v16 = os_channel_attr_get();
    if (!v16)
    {
      uint64_t v26 = self->_ucat;
      if (v26->var0 <= 90)
      {
        if (v26->var0 == -1)
        {
          uint64_t v26 = self->_ucat;
          uint64_t v27 = v30;
        }

        else
        {
          uint64_t v27 = 0;
        }

        LogPrintF( (uint64_t)v26,  (uint64_t)"-[CUBluetoothScalablePipe _setupPipe]",  0x5Au,  (uint64_t)"### Bad channel slot size: %llu\n",  v17,  v18,  v19,  v20,  v27);
      }
}
}

      [v3 setDelegate:self];
      char v30 = v3;
      selfAccessoryMediaSystem = self->_selfAccessoryMediaSystem;
      self->_selfAccessoryMediaSystem = v30;
      goto LABEL_22;
    }

    int v13 = self->_selfAccessoryMediaSystem;
    -[HMMediaSystem setDelegate:](v13, "setDelegate:", 0LL);
    int v14 = self->_selfAccessoryMediaSystem;
    self->_selfAccessoryMediaSystem = 0LL;

    selfAccessoryMediaSystemCounterpart = self->_selfAccessoryMediaSystemCounterpart;
    self->_selfAccessoryMediaSystemCounterpart = 0LL;

    int v16 = self->_selfAccessoryMediaSystemName;
    self->_selfAccessoryMediaSystemName = 0LL;

    uint64_t v17 = self->_selfAccessoryMediaSystemRole;
    self->_selfAccessoryMediaSystemRole = 0LL;

    if (!v13)
    {
LABEL_84:

      return;
    }

    uint64_t v22 = self->_ucat;
    if (v22->var0 <= 30)
    {
      if (v22->var0 != -1)
      {
LABEL_11:
        LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaSystem]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystem removed\n",  v18,  v19,  v20,  v21,  v79);
        goto LABEL_18;
      }

      if (_LogCategory_Initialize((uint64_t)v22, 0x1Eu))
      {
        uint64_t v22 = self->_ucat;
        goto LABEL_11;
      }
    }

  return v20;
}

        unint64_t v15 = 0LL;
        goto LABEL_28;
      }

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (a5)
        {
          uint64_t v20 = (objc_class *)objc_opt_class();
          NSStringFromClass(v20);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
          NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }

        goto LABEL_21;
      }

      int v16 = objc_alloc_init(&OBJC_CLASS___CUKeychainItem);
      uint64_t v24 = 0LL;
      uint64_t v17 = -[CUKeychainItem _updateWithAttributesDictionary:flags:error:]( v16,  "_updateWithAttributesDictionary:flags:error:",  v14,  v6,  &v24);
      uint64_t v18 = v24;
      uint64_t v19 = v18;
      if (v17)
      {
        unint64_t v15 = v16;
LABEL_27:

        goto LABEL_28;
      }

      if (a5)
      {
        if (v18)
        {
          unint64_t v15 = 0LL;
          *a5 = v18;
          goto LABEL_27;
        }

        uint64_t v21 = NSErrorWithOSStatusF((const char *)0xFFFFE596LL);
        *a5 = v21;
      }

      unint64_t v15 = 0LL;
      goto LABEL_27;
    }

    if (a5) {
      goto LABEL_13;
    }
LABEL_14:
    unint64_t v15 = 0LL;
    goto LABEL_30;
  }

  if (!a5) {
    goto LABEL_14;
  }
LABEL_13:
  NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
  unint64_t v15 = 0LL;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_30:

  return v15;
}

        [*(id *)(v22 + 40) start];
        goto LABEL_22;
      }

      uint64_t v10 = *(int **)(v8 + 32);
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUNANPublisher publisher:terminatedWithReason:]_block_invoke",  0x1Eu,  (uint64_t)"WFAPublisher terminated: '%@', %s\n",  a5,  a6,  a7,  a8,  *(void *)(v8 + 120));
    uint64_t v8 = *(void *)(a1 + 32);
    goto LABEL_8;
  }

  v51[0] = v6;
  v51[1] = 3221225472LL;
  v51[2] = __51__CUNetInterfaceMonitor__networkInterfacesChanged___block_invoke_2;
  v51[3] = &__block_descriptor_40_e5_v8__0l;
  v51[4] = v52;
  uint64_t v20 = (void (**)(void))_Block_copy(v51);
  uint64_t v21 = objc_alloc_init(MEMORY[0x189603FC8]);
  uint64_t v22 = v52;
  if (v52)
  {
    uint64_t v23 = 0;
    while (1)
    {
      ifa_flags = v22->ifa_flags;
      if ((ifa_flags & 1) != 0 && ((ifa_flags & 8) == 0 || (self->_controlFlags & 2) != 0))
      {
        ifa_addr = (uint64_t)v22->ifa_addr;
        if (ifa_addr)
        {
          uint64_t v26 = *(unsigned __int8 *)(ifa_addr + 1);
          if (v26 == 30 || v26 == 2)
          {
            ifa_name = v22->ifa_name;
            if (ifa_name) {
              break;
            }
          }
        }
      }

        uint64_t v23 = 0;
        goto LABEL_28;
      }
    }

    else
    {
      self->_primaryIPv4Addr.sa.sa_family = 0;
    }

    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }

  unint64_t v15 = PrimaryIPAddress;
  int v16 = self->_ucat;
  if (v16->var0 <= 90)
  {
    if (v16->var0 != -1)
    {
LABEL_5:
      LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChanged:]",  0x5Au,  (uint64_t)"### GetPrimaryIP failed: %#m\n",  v11,  v12,  v13,  v14,  v15);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v16, 0x5Au))
    {
      int v16 = self->_ucat;
      goto LABEL_5;
    }
  }

    goto LABEL_22;
  }

  homeKitManager = v9->_homeKitManager;
  v22[0] = MEMORY[0x1895F87A8];
  v22[1] = 3221225472LL;
  v22[2] = __60__CUPairingDaemon_getIdentityWithOptions_completionHandler___block_invoke;
  v22[3] = &unk_189F31678;
  uint64_t v23 = v8;
  -[CUHomeKitManager getPairingIdentityWithOptions:completion:]( homeKitManager,  "getPairingIdentityWithOptions:completion:",  a3,  v22);

LABEL_22:
  objc_sync_exit(v9);
}

  return v12;
}

  uint64_t v22 = v4;
  (*((void (**)(void))*p_completionHandler + 2))();
  int v13 = *p_completionHandler;
  *p_completionHandler = 0LL;

LABEL_22:
  pathMonitor = self->_pathMonitor;
  if (pathMonitor)
  {
    nw_path_monitor_cancel(pathMonitor);
    unint64_t v15 = self->_pathMonitor;
    self->_pathMonitor = 0LL;
  }

  timeoutTimer = self->_timeoutTimer;
  if (timeoutTimer)
  {
    uint64_t v17 = timeoutTimer;
    dispatch_source_cancel(v17);
    uint64_t v18 = self->_timeoutTimer;
    self->_timeoutTimer = 0LL;
  }

  -[NSURLSession invalidateAndCancel](self->_urlSession, "invalidateAndCancel");
  urlSession = self->_urlSession;
  self->_urlSession = 0LL;
}
}

  return v29;
}

  if ((v10 & 0x80000000) == 0 && !*(_DWORD *)(a3 + 180) && close(v10) && *__error()) {
    __error();
  }
  _HTTPClientErrorHandler(a3, v9, a3, a4, a5, a6, a7, a8);
LABEL_52:
  CFRelease((CFTypeRef)a3);
}

  unint64_t v15 = *(int **)(*(void *)(a1 + 8) + 216LL);
  if (*v15 <= 20)
  {
    if (*v15 == -1)
    {
      unint64_t v15 = *(int **)(*(void *)(a1 + 8) + 216LL);
    }

    LogPrintF( (uint64_t)v15,  (uint64_t)"void __HTTPServer_ReadHandler(void *)",  0x14u,  (uint64_t)"### Connection read error: %#m\n",  v6,  v7,  v8,  v9,  v10);
  }

    if (a3 < 1)
    {
      if (v24[5] == 30) {
        uint64_t v17 = 28;
      }
      else {
        uint64_t v17 = 16 * (v24[5] == 2);
      }
    }

    else if (v24[5] == 30)
    {
      *(_WORD *)&v24[6] = bswap32(a3) >> 16;
      uint64_t v17 = 28;
    }

    else if (v24[5] == 2)
    {
      *(_WORD *)&v24[6] = bswap32(a3) >> 16;
      uint64_t v17 = 16;
    }

    else
    {
      uint64_t v17 = 0;
    }

    if (!connect(v13, (const sockaddr *)&v24[4], v17))
    {
LABEL_56:
      if (!a5)
      {
LABEL_70:
        uint64_t v11 = 0LL;
        *a6 = v13;
        return v11;
      }

      uint64_t v22 = 28;
      if (!getsockname(v13, (sockaddr *)v23, &v22))
      {
LABEL_60:
        if (v23[1] == 30 || v23[1] == 2) {
          uint64_t v19 = bswap32(*(unsigned __int16 *)&v23[2]) >> 16;
        }
        else {
          uint64_t v19 = -1;
        }
        *a5 = v19;
        goto LABEL_70;
      }

      if (*__error())
      {
        uint64_t v11 = *__error();
        if (!(_DWORD)v11) {
          goto LABEL_60;
        }
        goto LABEL_64;
      }

      goto LABEL_63;
    }

    if (*__error())
    {
      uint64_t v11 = *__error();
      if (!(_DWORD)v11) {
        goto LABEL_56;
      }
LABEL_64:
      if ((v13 & 0x80000000) == 0 && close(v13) && *__error()) {
        __error();
      }
      return v11;
    }

  uint64_t v11 = *(_DWORD *)(a1 + 4);
  if ((v11 & 0x80000000) == 0)
  {
    if (close(v11) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 4) = -1;
  }

  return v5;
}

    if (v56[5]) {
      char v30 = 0;
    }
    else {
      char v30 = NSErrorToOSStatusEx(v15, 0LL);
    }
LABEL_24:
    *((_DWORD *)v62 + 6) = v30;

    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
LABEL_25:

    uint64_t v24 = 0LL;
    if (!a3) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }

  +[CUPairingDaemon sharedPairingDaemon](&OBJC_CLASS___CUPairingDaemon, "sharedPairingDaemon");
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v24 = v23;
  if (!v23)
  {
    uint64_t v28 = objc_alloc_init(&OBJC_CLASS___CUPairingManager);
    __int16 v31 = dispatch_queue_create( "OSStatus _PairingSessionCopyIdentityPairingManager(PairingSessionRef, CUPairingOptions, char **, CFDataRef * , uint8_t *, uint8_t *)",  0LL);
    -[CUPairingManager setDispatchQueue:](v28, "setDispatchQueue:", v31);

    if ((*(_BYTE *)(a1 + 100) & 0x40) != 0) {
      -[CUPairingManager setTargetUserSession:](v28, "setTargetUserSession:", 1LL);
    }
    char v32 = dispatch_semaphore_create(0LL);
    v50[0] = MEMORY[0x1895F87A8];
    v50[1] = 3221225472LL;
    v50[2] = ___PairingSessionCopyIdentityPairingManager_block_invoke;
    v50[3] = &unk_189F33CC8;
    v52 = &v55;
    v53 = &v61;
    uint64_t v29 = v32;
    v51 = v29;
    -[CUPairingManager getPairingIdentityWithOptions:completion:]( v28,  "getPairingIdentityWithOptions:completion:",  v11,  v50);
    __int16 v33 = dispatch_time(0LL, 120000000000LL);
    uint64_t v34 = dispatch_semaphore_wait(v29, v33);
    -[CUPairingManager invalidate](v28, "invalidate");
    if (v34)
    {
      uint32_t v49 = -6722;
    }

    else
    {
      if (*((_DWORD *)v62 + 6))
      {
LABEL_55:

        uint64_t v24 = 0LL;
        goto LABEL_56;
      }

      if (v56[5])
      {
        int v13 = v51;
        goto LABEL_25;
      }

      uint32_t v49 = -6762;
    }

    *((_DWORD *)v62 + 6) = v49;
    goto LABEL_55;
  }

  uint64_t v25 = [v23 copyIdentityWithOptions:v11 error:v62 + 3];
  uint64_t v26 = (void *)v56[5];
  v56[5] = v25;

  uint64_t v27 = v62;
  if (*((_DWORD *)v62 + 6))
  {
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    goto LABEL_56;
  }

  if (!v56[5])
  {
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v40 = 0LL;
    v47 = -6762;
    goto LABEL_46;
  }

  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  if (a3)
  {
LABEL_26:
    [(id)v56[5] identifier];
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    [v35 UUIDString];
    uint64_t v36 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v36)
    {
      uint64_t v37 = CFCopyCString(v36, 0LL);
      if (v37)
      {
        *a3 = v37;

        goto LABEL_29;
      }

      unsigned int v48 = -6728;
    }

    else
    {
      unsigned int v48 = -6727;
    }

    *((_DWORD *)v62 + 6) = v48;

LABEL_56:
    uint64_t v40 = 0LL;
    goto LABEL_43;
  }

  _SRPCleanup_corecrypto((uint64_t)a1);
  return v17;
}

      ++v5;
    }

    while (v5 < v8);
  }

  *a3 = v7 - a2;
  return result;
}

uint64_t ParseDestination(const char *a1, void *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int v19 = 0;
  uint64_t v8 = strchr(a1, 37);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = strchr(v8 + 1, 58);
    if (v11)
    {
      int v12 = v11;
      if (sscanf(v11 + 1, "%d", &v19) != 1) {
        return 4294960554LL;
      }
      int v13 = 1;
    }

    else
    {
      int v13 = 0;
      int v12 = &v10[strlen(v9)];
    }

    unint64_t v17 = v12 - v10;
    if (v17 <= 0x10)
    {
      __memcpy_chk();
      v21[v17] = 0;
      unsigned int v20 = if_nametoindex(v21);
      if (v20 || sscanf(v21, "%u", &v20) == 1)
      {
        size_t v16 = v9 - a1;
        goto LABEL_15;
      }
    }

    return 4294960554LL;
  }

  int v14 = strchr(a1, 58);
  if (v14)
  {
    unint64_t v15 = v14;
    if (sscanf(v14 + 1, "%d", &v19) != 1) {
      return 4294960554LL;
    }
    size_t v16 = v15 - a1;
    int v13 = 1;
  }

  else
  {
    size_t v16 = strlen(a1);
    int v13 = 0;
  }

  unsigned int v20 = 0;
LABEL_15:
  if (v16 > 0x3F0) {
    return 4294960553LL;
  }
  memcpy(a2, a1, v16);
  *((_BYTE *)a2 + v16) = 0;
  *a3 = v20;
  uint64_t result = 0LL;
  if (v13) {
    *a4 = v19;
  }
  return result;
}

void _AsyncConnection_SRVCallBack( uint64_t a1, char a2, int a3, uint64_t started, char a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v35[134] = *MEMORY[0x1895F89C0];
  if ((_DWORD)started) {
    goto LABEL_32;
  }
  if ((a2 & 2) != 0)
  {
    if (a8 < 7)
    {
      started = 4294960554LL;
      goto LABEL_32;
    }

    uint64_t v14 = a9 + 6;
    unsigned int v13 = *(unsigned __int8 *)(a9 + 6);
    unsigned int v15 = *(unsigned __int16 *)(a9 + 4);
    if (!*(_BYTE *)(a9 + 6))
    {
      unint64_t v17 = (char *)v35;
      __s[0] = 46;
      goto LABEL_20;
    }

    uint64_t v16 = 0LL;
    unint64_t v17 = __s;
    uint64_t v18 = a9 + 6;
LABEL_6:
    if (v16 + 1 + (unint64_t)v13 <= 0xFE && v13 <= 0x3F)
    {
      unint64_t v19 = v13 + v18 + 1;
      unsigned int v20 = (unsigned __int8 *)(v18 + 1);
      while (1)
      {
        unsigned int v22 = *v20++;
        unsigned int v21 = v22;
        if (v22 == 92 || v21 == 46)
        {
          *v17++ = 92;
        }

        else if (v21 <= 0x20)
        {
          *(_WORD *)unint64_t v17 = 12380;
          unsigned int v24 = (205 * v21) >> 11;
          uint64_t v23 = v17 + 3;
          v17[2] = v24 | 0x30;
          LOBYTE(v21) = (v21 - 10 * v24) | 0x30;
          goto LABEL_13;
        }

        uint64_t v23 = v17;
LABEL_13:
        *uint64_t v23 = v21;
        unint64_t v17 = v23 + 1;
        if ((unint64_t)v20 >= v19)
        {
          v23[1] = 0;
          v16 += 1LL + *(unsigned __int8 *)(v14 + v16);
          unint64_t v17 = v23 + 2;
          v23[1] = 46;
          uint64_t v18 = v14 + v16;
          unsigned int v13 = *(unsigned __int8 *)(v14 + v16);
          if (!*(_BYTE *)(v14 + v16))
          {
LABEL_20:
            *unint64_t v17 = 0;
            break;
          }

          goto LABEL_6;
        }
      }
    }

    unsigned int v25 = __rev16(v15);
    *(CFAbsoluteTime *)(a11 + 136) = CFAbsoluteTimeGetCurrent() - *(double *)(a11 + 128);
    char v30 = *(int **)(*(void *)(a11 + 16) + 144LL);
    if (*v30 <= 30)
    {
      if (*v30 != -1) {
        goto LABEL_23;
      }
      if (_LogCategory_Initialize((uint64_t)v30, 0x1Eu))
      {
        char v30 = *(int **)(*(void *)(a11 + 16) + 144LL);
LABEL_23:
        LogPrintF( (uint64_t)v30,  (uint64_t)"void _AsyncConnection_SRVCallBack(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, cons t char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)",  0x1Eu,  (uint64_t)"SRV resolved %s -> %s port %d, If %u, Flags 0x%X, TTL %u\n",  v26,  v27,  v28,  v29,  a5);
      }
    }

    size_t v31 = strlen(__s);
    snprintf(&__s[v31], 1073 - v31, "%%%u", a3);
    BOOL v32 = *(int *)(a11 + 56) < 0 || v25 == 0;
    int v33 = v32 ? *(_DWORD *)(a11 + 56) : v25;
    started = _AsyncConnection_StartDNSResolve(*(void *)(a11 + 16), a11, __s, v33);
    if ((_DWORD)started) {
LABEL_32:
    }
      _AsyncConnection_ErrorHandler(a11, started);
  }

uint64_t _AsyncConnection_StartDNSResolve(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v8 = calloc(1uLL, 0xB8uLL);
  if (!v8) {
    return 4294960568LL;
  }
  uint64_t v9 = v8;
  ++*(_DWORD *)a1;
  *(_DWORD *)uint64_t v8 = 1;
  v8[2] = a1;
  *((_DWORD *)v8 + 15) = -1;
  *((CFAbsoluteTime *)v8 + 18) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((void *)v9 + 15) = *(void *)(a2 + 120);
    *((void *)v9 + 17) = *(void *)(a2 + 136);
  }

  int v20 = 0;
  uint64_t AddrInfo = ParseDestination(a3, hostname, &interfaceIndex, &v20);
  if ((_DWORD)AddrInfo) {
    goto LABEL_17;
  }
  int v15 = v20;
  if (v20) {
    BOOL v16 = a4 < 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    int v15 = a4;
  }
  v9[14] = v15;
  unint64_t v17 = *(int **)(a1 + 144);
  if (*v17 <= 30)
  {
    if (*v17 != -1)
    {
LABEL_12:
      LogPrintF( (uint64_t)v17,  (uint64_t)"OSStatus _AsyncConnection_StartDNSResolve(AsyncConnectionRef, AsyncConnectionOperationRef, const char *, int)",  0x1Eu,  (uint64_t)"Resolving DNS %s\n",  v10,  v11,  v12,  v13,  (char)a3);
      goto LABEL_14;
    }

    if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
    {
      unint64_t v17 = *(int **)(a1 + 144);
      goto LABEL_12;
    }
  }

LABEL_17:
  _AsyncConnection_ReleaseOperation(v9);
  return AddrInfo;
}

  Value = (const __CFArray *)CFDictionaryGetValue(a1, @"services");
  if (!Value || (v34 = Value, uint64_t v35 = CFArrayGetCount(Value), v35 < 1))
  {
    uint64_t v39 = 0LL;
    int v38 = 0LL;
    goto LABEL_47;
  }

  uint64_t v36 = v35;
  v54 = a4;
  uint64_t v37 = 0LL;
  v56 = 0LL;
  v57 = 0LL;
  int v38 = 0LL;
  uint64_t v39 = 0LL;
  uint64_t v40 = a2 >> 63;
  uint64_t v41 = @"p2p";
  uint64_t v42 = @"domain";
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, v37);
    if ((CFDictionaryGetInt64(ValueAtIndex, v41, 0LL) != 0) == (_DWORD)v40)
    {
      v59[0] = 0;
      CFDictionaryGetCString(ValueAtIndex, v42, v59, 0x100uLL, 0LL);
      if (*(_DWORD *)v59 == 1633906540 && *(_DWORD *)&v59[3] == 3042401)
      {
        int v45 = v41;
        v46 = v42;
        Int64 = CFDictionaryGetInt64(ValueAtIndex, @"transportType", 0LL);
        unsigned int v48 = Int64;
        if (!v57 && Int64 != 32)
        {
          if (CFDictionaryGetInt64(ValueAtIndex, @"wifi", 0LL)) {
            uint32_t v49 = 0LL;
          }
          else {
            uint32_t v49 = ValueAtIndex;
          }
          v57 = v49;
        }

        v50 = v56;
        if (v48 == 32 && v56 == 0LL) {
          v50 = ValueAtIndex;
        }
        v56 = v50;
        if (!v38) {
          int v38 = ValueAtIndex;
        }
        uint64_t v42 = v46;
        uint64_t v41 = v45;
      }

      if (!v39) {
        uint64_t v39 = ValueAtIndex;
      }
    }

    ++v37;
  }

  while (v36 != v37);
  a4 = v54;
  if (!v57)
  {
    v57 = v56;
    if (!v56)
    {
LABEL_47:
      if (v38) {
        v52 = v38;
      }
      else {
        v52 = v39;
      }
      v57 = v52;
      if (!v52) {
        return 4294960569LL;
      }
    }
  }

  if (!v55) {
    return 0LL;
  }
  CFDictionaryGetCString(v57, @"dnsName", v55, a4, (int *)&v58);
  uint64_t result = v58;
  if (!v58) {
    return 0LL;
  }
  return result;
}

    BytePtr = &v28;
LABEL_41:
    uint64_t v10 = a1;
    uint64_t v9 = 1LL;
LABEL_42:
    uint64_t result = _WriteBytes(v10, BytePtr, v9);
    if ((_DWORD)result) {
      return result;
    }
    return 0LL;
  }

  if (!*(void *)(a1 + 272)
    || CFStringGetLength(a2) < 1
    || (uint64_t result = _WriteStreamedUpdateUID(a1, a2, (char *)values), !(_DWORD)result) && !LOBYTE(values[0]))
  {
    uint64_t v28 = 112;
    uint64_t result = _WriteBytes(a1, &v28, 1LL);
    if (!(_DWORD)result)
    {
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      if (CStringPtr)
      {
        uint64_t v8 = (UInt8 *)CStringPtr;
        uint64_t v9 = strlen(CStringPtr) + 1;
        uint64_t v10 = a1;
        BytePtr = v8;
        goto LABEL_42;
      }

      int v15 = CFStringGetLength(a2);
      if (v15 >= 1)
      {
        BOOL v16 = v15;
        unint64_t v17 = 0LL;
        do
        {
          v33.location = v17;
          v33.length = v16;
          Bytes = CFStringGetBytes(a2, v33, 0x8000100u, 0, 0, (UInt8 *)(a1 + 8), 256LL, (CFIndex *)&context);
          if (Bytes < 1) {
            return 4294960561LL;
          }
          unint64_t v19 = Bytes;
          uint64_t result = _WriteBytes(a1, (const UInt8 *)(a1 + 8), context);
          if ((_DWORD)result) {
            return result;
          }
          v17 += v19;
          int v20 = v16 <= v19;
          v16 -= v19;
        }

        while (!v20);
      }

      BytePtr = (UInt8 *)"";
      goto LABEL_41;
    }
  }

  return result;
}

    uint64_t v11 = 0;
    goto LABEL_18;
  }

  uint64_t v11 = -6717;
LABEL_18:
  if (a5) {
    *a5 = v11;
  }
  return v10;
}

  if (a4) {
    *a4 = v20;
  }
  if (a5) {
    *a5 = v16;
  }
  return a2;
}

  uint64_t v39 = 0LL;
  uint64_t v27 = -[CUBLEConnection _startConnectingAndReturnError:](self, "_startConnectingAndReturnError:", &v39);
  writeRequests = (NSMutableArray *)v39;
  if (!v27)
  {
    uint64_t v36 = self->_ucat;
    if (v36->var0 > 90) {
      goto LABEL_26;
    }
    if (v36->var0 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v36, 0x5Au))
      {
LABEL_26:
        if (a3) {
          goto LABEL_24;
        }
        goto LABEL_27;
      }

      uint64_t v36 = self->_ucat;
    }

    LogPrintF( (uint64_t)v36,  (uint64_t)"-[CUBLEConnection activateDirectAndReturnError:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v28,  v29,  v30,  v31,  (char)writeRequests);
    goto LABEL_26;
  }

  uint64_t v39 = 0LL;
  uint64_t v28 = -[CUBluetoothClassicConnection _startConnectingAndReturnError:](self, "_startConnectingAndReturnError:", &v39);
  writeRequests = (NSMutableArray *)v39;
  if (!v28)
  {
    uint64_t v37 = self->_ucat;
    if (v37->var0 > 90) {
      goto LABEL_26;
    }
    if (v37->var0 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v37, 0x5Au))
      {
LABEL_26:
        if (a3) {
          goto LABEL_24;
        }
        goto LABEL_27;
      }

      uint64_t v37 = self->_ucat;
    }

    LogPrintF( (uint64_t)v37,  (uint64_t)"-[CUBluetoothClassicConnection activateDirectAndReturnError:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v29,  v30,  v31,  v32,  (char)writeRequests);
    goto LABEL_26;
  }

  if (a4 != 11) {
    goto LABEL_32;
  }
  __s1[0] = 0;
  uint64_t v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])( a1,  (uint64_t)__s1,  32LL);
  if (v27)
  {
    BOOL v32 = v27 - 16;
    if (v27 != -310000)
    {
      uint64_t v39 = (int *)*((void *)v13 + 19);
      if (*v39 <= 90)
      {
        if (*v39 == -1)
        {
          uint64_t v39 = (int *)*((void *)v13 + 19);
        }

        LogPrintF( (uint64_t)v39,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEven t, BTResult, void * _Nonnull)",  0x5Au,  (uint64_t)"### BTDeviceGetAddressString failed: %#m\n",  v28,  v29,  v30,  v31,  v32);
      }

      goto LABEL_32;
    }
  }

  if (strcmp(__s1, (const char *)v13 + 17))
  {
    int v20 = (int *)*((void *)v13 + 19);
    if (*v20 <= 30)
    {
      if (*v20 == -1)
      {
        int v20 = (int *)*((void *)v13 + 19);
      }

      uint64_t v40 = __s1;
      unint64_t v19 = "BTService connect, ignoring device: %s vs %s\n";
      goto LABEL_6;
    }

    goto LABEL_32;
  }

  if ((_DWORD)v21)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], v21);
    int v33 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 _reportError:v33];

    goto LABEL_32;
  }

  if (!*((_DWORD *)v13 + 41))
  {
LABEL_31:
    *((_BYTE *)v13 + 16) = 1;
    [v13 _run];
    goto LABEL_32;
  }

  uint64_t v41 = 0;
  ConnectedServices = softLinkBTDeviceGetConnectedServices(a1, (uint64_t)&v41);
  if (ConnectedServices)
  {
    uint64_t v35 = ConnectedServices - 16;
    if (ConnectedServices != -310000)
    {
      uint64_t v36 = (int *)*((void *)v13 + 19);
      if (*v36 <= 90)
      {
        if (*v36 == -1)
        {
          uint64_t v36 = (int *)*((void *)v13 + 19);
        }

        LogPrintF( (uint64_t)v36,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEven t, BTResult, void * _Nonnull)",  0x5Au,  (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n",  v15,  v16,  v17,  v18,  v35);
      }
    }
  }
  }

  if ((self->_flags & 0x20) != 0)
  {
    getCBPeripheralManagerOptionShowPowerAlertKey();
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = v22;
    v75 = MEMORY[0x189604A80];
    [MEMORY[0x189603F68] dictionaryWithObjects:&v75 forKeys:&v74 count:1];
    unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();

    uint64_t v23 = objc_alloc((Class)getCBPeripheralManagerClass_2073());
    -[CUBluetoothClient _internalDispatchQueue](self, "_internalDispatchQueue");
    unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
    unsigned int v24 = (CBPeripheralManager *)[v23 initWithDelegate:self queue:v21 options:v19];
    btPeripheralManager = self->_btPeripheralManager;
    self->_btPeripheralManager = v24;
  }

  else
  {
    uint64_t v18 = objc_alloc((Class)getCBPeripheralManagerClass_2073());
    -[CUBluetoothClient _internalDispatchQueue](self, "_internalDispatchQueue");
    unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    int v20 = (CBPeripheralManager *)[v18 initWithDelegate:self queue:v19];
    unsigned int v21 = self->_btPeripheralManager;
    self->_btPeripheralManager = v20;
  }

  if (self->_bluetoothAddressChangedHandler)
  {
    -[CBPeripheralManager addObserver:forKeyPath:options:context:]( self->_btPeripheralManager,  "addObserver:forKeyPath:options:context:",  self,  @"advertisingAddress",  0LL,  0LL);
    -[CUBluetoothClient _handleBluetoothAddressChanged](self, "_handleBluetoothAddressChanged");
  }

    uint64_t v13 = 0;
    goto LABEL_21;
  }

  uint64_t v11 = v10;
  tempFD = self->_tempFD;
  if ((tempFD & 0x80000000) == 0 && close(tempFD) && *__error()) {
    __error();
  }
  self->_tempFD = v11;
  self->_cdb.head = 0LL;
  self->_cdb.hash = 0LL;
  self->_cdb.split = 0LL;
  self->_cdb.numentries = 0;
  self->_cdb.fd = v11;
  self->_cdb.pos = 2048;
  self->_cdb.b.x = self->_cdb.bspace;
  self->_cdb.b.fd = v11;
  self->_cdb.b.op = MEMORY[0x1895FD750];
  *(void *)&self->_cdb.b.p = 0x200000000000LL;
  if (lseek(v11, 2048LL, 0) == -1)
  {
    -[CUKeyValueStoreWriter cancel](self, "cancel");
    if (a4)
    {
      if (!*__error())
      {
        uint64_t v14 = 4294960596LL;
        goto LABEL_20;
      }

    unint64_t v17 = -6745;
    goto LABEL_18;
  }

  uint64_t v11 = ReplaceString( (void **)pairingSession + 48, (size_t *)pairingSession + 49, (char *)[v8 UTF8String], 0xFFFFFFFFFFFFFFFFLL);
  if (!v11)
  {
    -[CUPairingSession _receivedData:flags:](self, "_receivedData:flags:", 0LL, 0LL);
    goto LABEL_8;
  }

  unint64_t v17 = v11;
  uint64_t v18 = self->_ucat;
  if (v18->var0 <= 90)
  {
    if (v18->var0 == -1)
    {
      uint64_t v18 = self->_ucat;
    }

    LogPrintF( (uint64_t)v18,  (uint64_t)"-[CUPairingSession _tryPIN:]",  0x5Au,  (uint64_t)"### Set PIN failed: %#m\n",  v12,  v13,  v14,  v15,  v17);
  }

      -[EasyConfigDevice stop](self->_easyConfigDevice, "stop");
      [(Class)getEasyConfigDeviceClass[0]() deviceWithInfo:v3];
      uint64_t v28 = (EasyConfigDevice *)objc_claimAutoreleasedReturnValue();
      easyConfigDevice = self->_easyConfigDevice;
      self->_easyConfigDevice = v28;

      -[EasyConfigDevice setConfiguration:](self->_easyConfigDevice, "setConfiguration:", v15);
      -[EasyConfigDevice setDispatchQueue:](self->_easyConfigDevice, "setDispatchQueue:", self->_dispatchQueue);
      -[EasyConfigDevice setPausesAfterApply:](self->_easyConfigDevice, "setPausesAfterApply:", 1LL);
      -[EasyConfigDevice setPreConfigMetrics:]( self->_easyConfigDevice,  "setPreConfigMetrics:",  &self->_easyConfigPreConfigMetrics);
      char v30 = MEMORY[0x1895F87A8];
      v42[0] = MEMORY[0x1895F87A8];
      v42[1] = 3221225472LL;
      v42[2] = __44__CUWACSession__runEasyConfigPreConfigStart__block_invoke;
      v42[3] = &unk_189F32EF0;
      v42[4] = self;
      -[EasyConfigDevice setProgressHandler:](self->_easyConfigDevice, "setProgressHandler:", v42);
      if (self->_promptForSetupCodeHandler)
      {
        size_t v31 = self->_easyConfigDevice;
        v41[0] = v30;
        v41[1] = 3221225472LL;
        v41[2] = __44__CUWACSession__runEasyConfigPreConfigStart__block_invoke_2;
        v41[3] = &unk_189F32F18;
        v41[4] = self;
        -[EasyConfigDevice setPromptForSetupCodeHandler:](v31, "setPromptForSetupCodeHandler:", v41);
      }

      -[EasyConfigDevice start](self->_easyConfigDevice, "start");
      goto LABEL_20;
    }

    BOOL v32 = self->_ucat;
    if (v32->var0 <= 90)
    {
      if (v32->var0 == -1)
      {
        BOOL v32 = self->_ucat;
      }

      int v33 = "### No current WiFi info to start EasyConfig\n";
LABEL_27:
      LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUWACSession _runEasyConfigPreConfigStart]",  0x5Au,  (uint64_t)v33,  v4,  v5,  v6,  v7,  v40);
    }
  }

  else
  {
    BOOL v32 = self->_ucat;
    if (v32->var0 <= 90)
    {
      if (v32->var0 == -1)
      {
        BOOL v32 = self->_ucat;
      }

      int v33 = "### No deviceID start EasyConfig\n";
      goto LABEL_27;
    }
  }

    int v15 = (void (**)(void))_Block_copy(self->_wifiStateChangedHandler);
    if (v15)
    {
      BOOL v16 = v15;
      v15[2]();
      int v15 = v16;
    }
  }

  return v17;
}

      ++v8;
    }
  }

  uint64_t v13 = (_BYTE *)(a2 + 4);
LABEL_21:
  *(void *)(a2 + 0x2000) = &v13[-a2];
  uint64_t result = HTTPHeader_Parse(a2);
  if (!(_DWORD)result)
  {
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v10;
  }

  return result;
}

  if (Data) {
    CFRelease(Data);
  }
  pthread_mutex_unlock(&gPairingGlobalLock);
  return v20;
}

  uint64_t v13 = (*a1)(a3, a4, a1);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v15 = (v12 + a4);
  if (!*v10) {
    goto LABEL_21;
  }
  uint64_t v13 = (*a1)(v10, 1LL, a1);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v15 = (v15 + 1);
LABEL_21:
  if (v11 < *(_DWORD *)(a2 + 8))
  {
    while (1)
    {
      uint64_t v13 = (*a1)(" ", 1LL, a1);
      if ((v13 & 0x80000000) != 0) {
        break;
      }
      int v15 = (v15 + 1);
      if (++v11 >= *(_DWORD *)(a2 + 8)) {
        return v15;
      }
    }

    return v13;
  }

  return v15;
}

  if (gTULogLevel > 50)
  {
LABEL_24:
    uint64_t v11 = 0;
    v3 = 0;
    goto LABEL_35;
  }

  uint64_t v9 = fopen(__filename, "r");
  if (v9)
  {
LABEL_21:
    while (1)
    {
      uint64_t v10 = fcopyline(v9, (unint64_t *)&v24, 0LL);
      if ((_DWORD)v10) {
        break;
      }
      TULogF(v10, 50, "Leaks: ");
      free(v24);
    }

    fclose(v9);
    goto LABEL_24;
  }

  if (*__error())
  {
    v3 = *__error();
    if (!v3) {
      goto LABEL_21;
    }
    goto LABEL_108;
  }

  uint64_t v11 = 0;
  v3 = -6700;
LABEL_35:
  remove(__filename);
  mach_absolute_time();
  if ((v11 & 1) == 0) {
    goto LABEL_38;
  }
  if (gTULogLevel <= 50)
  {
    _TUPrintF();
    uint64_t v14 = 1;
    if (gTUUserMode)
    {
LABEL_45:
      if (v3) {
        _TUPrintF();
      }
      _TUPrintF();
      goto LABEL_48;
    }

  if (v27) {
    free(v27);
  }
  return v18;
}

void _AsyncConnection_DNSCallBack( uint64_t a1, char a2, uint64_t a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 2) == 0 || a4) {
    return;
  }
  uint64_t v12 = *(void *)(a8 + 16);
  *(CFAbsoluteTime *)(a8 + 152) = CFAbsoluteTimeGetCurrent() - *(double *)(a8 + 144);
  unint64_t v17 = *(int **)(v12 + 144);
  if (*v17 <= 30)
  {
    if (*v17 == -1)
    {
      unint64_t v17 = *(int **)(v12 + 144);
    }

    LogPrintF( (uint64_t)v17,  (uint64_t)"void _AsyncConnection_DNSCallBack(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const ch ar *, const struct sockaddr *, uint32_t, void *)",  0x1Eu,  (uint64_t)"Resolved DNS %s -> %##a, Flags 0x%X, If %u, TTL %u\n",  v13,  v14,  v15,  v16,  a5);
  }

LABEL_7:
  if ((*(_BYTE *)(v12 + 20) & 4) == 0
    || _AsyncConnection_ReachabilityStart(v12, a8, a6, a3, *(unsigned int *)(a8 + 56)))
  {
    _AsyncConnection_StartConnect(v12, (void *)a8, a6, a3, *(unsigned int *)(a8 + 56), v14, v15, v16);
  }

  unint64_t v19 = 0;
  *(_OWORD *)&v18[12] = *(_OWORD *)(a1 + 36);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 136);
  int v20 = *(void *)(a1 + 120);
  unsigned int v21 = v10;
  unsigned int v22 = *(void *)(a1 + 152);
  uint64_t v23 = v7;
  uint64_t v11 = *(void *)(a1 + 16);
  unsigned int v24 = Current - *(double *)(v11 + 64);
  uint64_t v12 = *(int **)(v11 + 144);
  uint64_t v13 = *v12;
  if ((*(_BYTE *)(v11 + 21) & 0x20) != 0)
  {
    if (v13 <= 50)
    {
      if (v13 == -1)
      {
        uint64_t v12 = *(int **)(*(void *)(a1 + 16) + 144LL);
      }

      LogPrintF( (uint64_t)v12,  (uint64_t)"void _AsyncConnection_ConnectHandler(AsyncConnectionOperationRef)",  0x32u,  (uint64_t)"NoConnect to %##a (Reach=%.2f ms, SRV=%.2f ms, DNS=%.2f ms, Total=%.2f ms)\n",  v2,  v3,  v4,  v5,  (char)v18);
    }
  }

  else if (v13 <= 50)
  {
    if (v13 == -1)
    {
      uint64_t v12 = *(int **)(*(void *)(a1 + 16) + 144LL);
    }

    LogPrintF( (uint64_t)v12,  (uint64_t)"void _AsyncConnection_ConnectHandler(AsyncConnectionOperationRef)",  0x32u,  (uint64_t)"Connected to %##a (Reach=%.2f ms, SRV=%.2f ms, DNS=%.2f ms, Connect=%.2f ms, Total=%.2f ms)\n",  v2,  v3,  v4,  v5,  (char)v18);
  }
}

  uint64_t v10 = self->_readRequestCurrent;
  if (v10)
  {
    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUBLEConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", v10, v8);
  }

  uint64_t v23 = 0u;
  unsigned int v24 = 0u;
  unsigned int v21 = 0u;
  unsigned int v22 = 0u;
  uint64_t v12 = self->_readRequests;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v22;
    do
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v10;
      do
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v10 = (CUReadRequest *)*(id *)(*((void *)&v21 + 1) + 8 * v16);

        -[CUBLEConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", v10, v8);
        ++v16;
        unint64_t v17 = v10;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v14);
  }

  -[NSMutableArray removeAllObjects](self->_readRequests, "removeAllObjects");
  readSource = (dispatch_object_s *)self->_readSource;
  if (readSource && !self->_readSuspended)
  {
    self->_readSuspended = 1;
    dispatch_suspend(readSource);
  }

  unint64_t v19 = (void (**)(void *, id))_Block_copy(self->_errorHandler);
  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  if (v19) {
    v19[2](v19, v8);
  }
  -[CUBLEConnection _invalidated](self, "_invalidated");
}

  uint64_t v10 = self->_writeRequestCurrent;
  if (v10)
  {
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

    -[CUBLEConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v10, v8);
  }

  uint64_t v23 = 0u;
  unsigned int v24 = 0u;
  unsigned int v21 = 0u;
  unsigned int v22 = 0u;
  uint64_t v12 = self->_writeRequests;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v22;
    do
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v10;
      do
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v10 = (CUWriteRequest *)*(id *)(*((void *)&v21 + 1) + 8 * v16);

        -[CUBLEConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v10, v8);
        ++v16;
        unint64_t v17 = v10;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v14);
  }

  -[NSMutableArray removeAllObjects](self->_writeRequests, "removeAllObjects");
  writeSource = (dispatch_object_s *)self->_writeSource;
  if (writeSource && !self->_writeSuspended)
  {
    self->_writeSuspended = 1;
    dispatch_suspend(writeSource);
  }

  unint64_t v19 = (void (**)(void *, id))_Block_copy(self->_errorHandler);
  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  if (v19) {
    v19[2](v19, v8);
  }
  -[CUBLEConnection _invalidated](self, "_invalidated");
}

  uint64_t v10 = self->_readRequestCurrent;
  if (v10)
  {
    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUBluetoothClassicConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", v10, v8);
  }

  uint64_t v23 = 0u;
  unsigned int v24 = 0u;
  unsigned int v21 = 0u;
  unsigned int v22 = 0u;
  uint64_t v12 = self->_readRequests;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v22;
    do
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v10;
      do
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v10 = (CUReadRequest *)*(id *)(*((void *)&v21 + 1) + 8 * v16);

        -[CUBluetoothClassicConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", v10, v8);
        ++v16;
        unint64_t v17 = v10;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v14);
  }

  -[NSMutableArray removeAllObjects](self->_readRequests, "removeAllObjects");
  readSource = (dispatch_object_s *)self->_readSource;
  if (readSource && !self->_readSuspended)
  {
    self->_readSuspended = 1;
    dispatch_suspend(readSource);
  }

  unint64_t v19 = (void (**)(void *, id))_Block_copy(self->_errorHandler);
  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  if (v19) {
    v19[2](v19, v8);
  }
  -[CUBluetoothClassicConnection _invalidated](self, "_invalidated");
}

  uint64_t v10 = self->_writeRequestCurrent;
  if (v10)
  {
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

    -[CUBluetoothClassicConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v10, v8);
  }

  uint64_t v23 = 0u;
  unsigned int v24 = 0u;
  unsigned int v21 = 0u;
  unsigned int v22 = 0u;
  uint64_t v12 = self->_writeRequests;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v22;
    do
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v10;
      do
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v10 = (CUWriteRequest *)*(id *)(*((void *)&v21 + 1) + 8 * v16);

        -[CUBluetoothClassicConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v10, v8);
        ++v16;
        unint64_t v17 = v10;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
    }

    while (v14);
  }

  -[NSMutableArray removeAllObjects](self->_writeRequests, "removeAllObjects");
  writeSource = (dispatch_object_s *)self->_writeSource;
  if (writeSource && !self->_writeSuspended)
  {
    self->_writeSuspended = 1;
    dispatch_suspend(writeSource);
  }

  unint64_t v19 = (void (**)(void *, id))_Block_copy(self->_errorHandler);
  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  if (v19) {
    v19[2](v19, v8);
  }
  -[CUBluetoothClassicConnection _invalidated](self, "_invalidated");
}

    if (self->_btPeripheralManager || self->_btPairingAgent || self->_btSession) {
      return;
    }
    bluetoothAddressChangedHandler = self->_bluetoothAddressChangedHandler;
    self->_bluetoothAddressChangedHandler = 0LL;

    bluetoothStateChangedHandler = self->_bluetoothStateChangedHandler;
    self->_bluetoothStateChangedHandler = 0LL;

    deviceConnectedHandler = self->_deviceConnectedHandler;
    self->_deviceConnectedHandler = 0LL;

    deviceDisconnectedHandler = self->_deviceDisconnectedHandler;
    self->_deviceDisconnectedHandler = 0LL;

    deviceEventHandler = self->_deviceEventHandler;
    self->_deviceEventHandler = 0LL;

    devicePairedHandler = self->_devicePairedHandler;
    self->_devicePairedHandler = 0LL;

    deviceUnpairedHandler = self->_deviceUnpairedHandler;
    self->_deviceUnpairedHandler = 0LL;

    interruptionHandler = self->_interruptionHandler;
    self->_interruptionHandler = 0LL;

    unsigned int v25 = _Block_copy(self->_invalidationHandler);
    invalidationHandler = self->_invalidationHandler;
    self->_invalidationHandler = 0LL;

    unsigned int v21 = v25;
    if (v25)
    {
      -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v25);
      unsigned int v21 = v25;
    }

    self->_invalidateDone = 1;
    unsigned int v22 = self->_ucat;
    if (v22->var0 <= 10)
    {
      if (v22->var0 == -1)
      {
        uint64_t v23 = _LogCategory_Initialize((uint64_t)v22, 0xAu);
        unsigned int v21 = v25;
        if (!v23) {
          goto LABEL_17;
        }
        unsigned int v22 = self->_ucat;
      }

      LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUBluetoothClient _invalidated]",  0xAu,  (uint64_t)"Invalidated\n",  v17,  v18,  v19,  v20,  v24);
      unsigned int v21 = v25;
    }

  if ((self->_flags & 0x20) != 0)
  {
    getCBCentralManagerOptionShowPowerAlertKey();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v12;
    v77[0] = MEMORY[0x189604A80];
    [MEMORY[0x189603F68] dictionaryWithObjects:v77 forKeys:&v76 count:1];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();

    uint64_t v13 = objc_alloc((Class)getCBCentralManagerClass_2069());
    -[CUBluetoothClient _internalDispatchQueue](self, "_internalDispatchQueue");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = (CBCentralManager *)[v13 initWithDelegate:self queue:v14 options:v9];
    btCentralManager = self->_btCentralManager;
    self->_btCentralManager = v15;
  }

  else
  {
    uint64_t v8 = objc_alloc((Class)getCBCentralManagerClass_2069());
    -[CUBluetoothClient _internalDispatchQueue](self, "_internalDispatchQueue");
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = (CBCentralManager *)[v8 initWithDelegate:self queue:v9];
    uint64_t v11 = self->_btCentralManager;
    self->_btCentralManager = v10;
  }

LABEL_11:
  if (!self->_btPeripheralManagerNeeded || self->_btPeripheralManager) {
    goto LABEL_22;
  }
  unint64_t v17 = self->_ucat;
  if (v17->var0 <= 30)
  {
    if (v17->var0 != -1)
    {
LABEL_15:
      LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"CBPeripheralManager start\n",  v2,  v3,  v4,  v5,  v68);
      goto LABEL_17;
    }

    if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
    {
      unint64_t v17 = self->_ucat;
      goto LABEL_15;
    }
  }

    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __47__CUBluetoothClient__handleDeviceEvent_device___block_invoke;
    v14[3] = &unk_189F31390;
    v14[4] = v8;
    v14[5] = v7;
    uint64_t v15 = a3;
    -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v14);
    goto LABEL_8;
  }

  peerHostStateChangedHandler = self->_peerHostStateChangedHandler;
  self->_peerHostStateChangedHandler = 0LL;

  stateChangedHandler = self->_stateChangedHandler;
  self->_stateChangedHandler = 0LL;

  NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUBluetoothScalablePipe _ensureStopped:](self, "_ensureStopped:", v10);

  -[CBScalablePipeManager setDelegate:](self->_btPipeManager, "setDelegate:", 0LL);
  btPipeManager = self->_btPipeManager;
  self->_btPipeManager = 0LL;

  uint64_t v16 = self->_ucat;
  if (v16->var0 <= 30)
  {
    if (v16->var0 == -1)
    {
      uint64_t v16 = self->_ucat;
    }

    LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUBluetoothScalablePipe _invalidate]",  0x1Eu,  (uint64_t)"Invalidated\n",  v12,  v13,  v14,  v15,  v20);
  }

  uint64_t v10 = self->_readRequestCurrent;
  if (v10)
  {
    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUBluetoothScalablePipe _completeReadRequest:error:](self, "_completeReadRequest:error:", v10, v8);
  }

  unsigned int v21 = 0u;
  unsigned int v22 = 0u;
  unint64_t v19 = 0u;
  int v20 = 0u;
  uint64_t v12 = self->_readRequests;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v20;
    do
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v10;
      do
      {
        if (*(void *)v20 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v10 = (CUReadRequest *)*(id *)(*((void *)&v19 + 1) + 8 * v16);

        -[CUBluetoothScalablePipe _completeReadRequest:error:](self, "_completeReadRequest:error:", v10, v8);
        ++v16;
        unint64_t v17 = v10;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
    }

    while (v14);
  }

  -[NSMutableArray removeAllObjects](self->_readRequests, "removeAllObjects");
  readSource = (dispatch_object_s *)self->_readSource;
  if (readSource && !self->_readSuspended)
  {
    self->_readSuspended = 1;
    dispatch_suspend(readSource);
  }
}

  uint64_t v10 = self->_writeRequestCurrent;
  if (v10)
  {
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

    -[CUBluetoothScalablePipe _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v10, v8);
  }

  unsigned int v21 = 0u;
  unsigned int v22 = 0u;
  unint64_t v19 = 0u;
  int v20 = 0u;
  uint64_t v12 = self->_writeRequests;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v20;
    do
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = v10;
      do
      {
        if (*(void *)v20 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v10 = (CUWriteRequest *)*(id *)(*((void *)&v19 + 1) + 8 * v16);

        -[CUBluetoothScalablePipe _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v10, v8);
        ++v16;
        unint64_t v17 = v10;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
    }

    while (v14);
  }

  -[NSMutableArray removeAllObjects](self->_writeRequests, "removeAllObjects");
  writeSource = (dispatch_object_s *)self->_writeSource;
  if (writeSource && !self->_writeSuspended)
  {
    self->_writeSuspended = 1;
    dispatch_suspend(writeSource);
  }
}

  uint64_t v9 = BonjourAdvertiserCreate(p_bonjourAdvertiser);
  if (v9)
  {
    uint64_t v14 = v9;
    uint64_t v15 = self->_ucat;
    if (v15->var0 > 60) {
      return;
    }
    if (v15->var0 == -1)
    {
      uint64_t v15 = self->_ucat;
    }

    LogPrintF( (uint64_t)v15,  (uint64_t)"-[CUBonjourAdvertiser _activateLocked]",  0x3Cu,  (uint64_t)"### Create advertiser failed: %#m\n",  v10,  v11,  v12,  v13,  v14);
    return;
  }

  label = self->_label;
  if (label)
  {
    unint64_t v17 = *p_bonjourAdvertiser;
    -[NSString UTF8String](label, "UTF8String");
    LogCategoryReplaceF((uint64_t *)v17 + 2);
  }

  BonjourAdvertiserSetDispatchQueue((uint64_t)self->_bonjourAdvertiser, (dispatch_object_s *)self->_dispatchQueue);
  -[CUBonjourAdvertiser _updateLocked](self, "_updateLocked");
}

  if (!self->_bonjourBrowser)
  {
    invalidationHandler = (void (**)(void))self->_invalidationHandler;
    if (invalidationHandler) {
      invalidationHandler[2]();
    }
    deviceFoundHandler = self->_deviceFoundHandler;
    self->_deviceFoundHandler = 0LL;

    deviceLostHandler = self->_deviceLostHandler;
    self->_deviceLostHandler = 0LL;

    deviceChangedHandler = self->_deviceChangedHandler;
    self->_deviceChangedHandler = 0LL;

    interruptionHandler = self->_interruptionHandler;
    self->_interruptionHandler = 0LL;

    uint64_t v13 = self->_invalidationHandler;
    self->_invalidationHandler = 0LL;

    self->_invalidateDone = 1;
    uint64_t v18 = self->_ucat;
    if (v18->var0 <= 10)
    {
      if (v18->var0 != -1)
      {
LABEL_12:
        LogPrintF( (uint64_t)v18,  (uint64_t)"-[CUBonjourBrowser _invalidated]",  0xAu,  (uint64_t)"Invalidated\n",  v14,  v15,  v16,  v17,  v20);
        return;
      }

      if (_LogCategory_Initialize((uint64_t)v18, 0xAu))
      {
        uint64_t v18 = self->_ucat;
        goto LABEL_12;
      }
    }
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](self->_sessionMap, "setObject:forKeyedSubscript:", 0LL, v10);
  -[CUFileServer _sessionInvalidate:](self, "_sessionInvalidate:", v15);
  -[CUFileServer _update](self, "_update");
  (*((void (**)(id, void, void, void))v8 + 2))(v8, MEMORY[0x189604A60], 0LL, 0LL);
LABEL_8:

  v9[2](v9);
  _Block_object_dispose(&v23, 8);
}

  [v11 setLastRequestTicks:mach_absolute_time()];
  (*((void (**)(id, void, void, void))v8 + 2))(v8, MEMORY[0x189604A60], 0LL, 0LL);
LABEL_8:

  v9[2](v9);
  _Block_object_dispose(&v24, 8);
}

    unint64_t v17 = (DIR *)[v47 dirStream];
    if (v17) {
      closedir(v17);
    }
    uint64_t v18 = opendir(v12);
    if (!v18)
    {
LABEL_51:
      __error();
      uint64_t v40 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5D0LL);
      goto LABEL_49;
    }

    [v47 setDirStream:v18];
  }

  unint64_t v19 = (DIR *)[v47 dirStream];
  if (!v19)
  {
    unint64_t v19 = opendir(self->_rootPath);
    if (!v19)
    {
      __error();
      uint64_t v42 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5D0LL);
      uint64_t v10 = (id)v57[5];
      v57[5] = v42;
      goto LABEL_44;
    }

    [v47 setDirStream:v19];
    strlcpy(v47 + 8, self->_rootPath, 0x400uLL);
  }

  uint64_t v43 = self;
  uint64_t v10 = 0LL;
  int v20 = 500;
  while (1)
  {
    *__error() = 0;
    unsigned int v21 = readdir(v19);
    if (!v21)
    {
      uint64_t v29 = v43;
      if (*__error())
      {
        __error();
        int v38 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5D4LL);
        goto LABEL_47;
      }

      uint64_t v28 = 1LL;
LABEL_39:
      p_var0 = &v29->_ucat->var0;
      if (*p_var0 <= 30)
      {
        if (*p_var0 == -1)
        {
          p_var0 = &v29->_ucat->var0;
        }

        size_t v31 = [v10 count];
        LogPrintF( (uint64_t)p_var0,  (uint64_t)"-[CUFileServer _handleQuery:session:]",  0x1Eu,  (uint64_t)"Query response: %d item(s)",  v32,  v33,  v34,  v35,  v31);
      }

  [v15 setLastRequestTicks:mach_absolute_time()];
  (*((void (**)(id, void, void, void))v8 + 2))(v8, MEMORY[0x189604A60], 0LL, 0LL);
LABEL_8:

  v9[2](v9);
  _Block_object_dispose(&v23, 8);
}

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

  invalidationHandler = (void (**)(void))self->_invalidationHandler;
  if (invalidationHandler) {
    invalidationHandler[2]();
  }
  selfAccessoryAppDataChangedHandler = self->_selfAccessoryAppDataChangedHandler;
  self->_selfAccessoryAppDataChangedHandler = 0LL;

  selfAccessoryMediaAccessUpdatedHandler = self->_selfAccessoryMediaAccessUpdatedHandler;
  self->_selfAccessoryMediaAccessUpdatedHandler = 0LL;

  selfAccessoryMediaSystemUpdatedHandler = self->_selfAccessoryMediaSystemUpdatedHandler;
  self->_selfAccessoryMediaSystemUpdatedHandler = 0LL;

  selfAccessorySiriAccessUpdatedHandler = self->_selfAccessorySiriAccessUpdatedHandler;
  self->_selfAccessorySiriAccessUpdatedHandler = 0LL;

  selfAccessoryUpdatedHandler = self->_selfAccessoryUpdatedHandler;
  self->_selfAccessoryUpdatedHandler = 0LL;

  interruptionHandler = self->_interruptionHandler;
  self->_interruptionHandler = 0LL;

  uint64_t v15 = self->_invalidationHandler;
  self->_invalidationHandler = 0LL;

  stateChangedHandler = self->_stateChangedHandler;
  self->_stateChangedHandler = 0LL;

  self->_invalidateDone = 1;
  unsigned int v21 = self->_ucat;
  if (v21->var0 <= 10)
  {
    if (v21->var0 != -1)
    {
LABEL_11:
      LogPrintF( (uint64_t)v21,  (uint64_t)"-[CUHomeKitManager _invalidated]",  0xAu,  (uint64_t)"Invalidated\n",  v17,  v18,  v19,  v20,  v23);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v21, 0xAu))
    {
      unsigned int v21 = self->_ucat;
      goto LABEL_11;
    }
  }

    NSErrorWithOSStatusF((const char *)0xFFFFE5B1LL);
    uint64_t v15 = (id)objc_claimAutoreleasedReturnValue();
    v6[2](v6, 0LL, v15);
    goto LABEL_8;
  }

  homeManager = self->_homeManager;
  uint64_t v23 = 0LL;
  -[HMHomeManager allPairingIdentitiesInRankOrderWithError:]( homeManager,  "allPairingIdentitiesInRankOrderWithError:",  &v23);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = v23;
  dispatchQueue = (dispatch_queue_s *)self->_dispatchQueue;
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 3221225472LL;
  v18[2] = __73__CUHomeKitManager_getHomeKitLocalPairingIdentityWithOptions_completion___block_invoke;
  v18[3] = &unk_189F31528;
  v18[4] = self;
  unint64_t v19 = v12;
  unsigned int v22 = a3;
  int v20 = v13;
  unsigned int v21 = v6;
  uint64_t v15 = v13;
  uint64_t v16 = v12;
  dispatch_async(dispatchQueue, v18);

LABEL_8:
}

    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __100__CUHomeKitManager__getPairingIdentityForLegacyWithOptions_user_nonLegacyIdentity_label_completion___block_invoke;
    v24[3] = &unk_189F31190;
    v24[4] = self;
    unsigned int v25 = v13;
    uint64_t v26 = v12;
    uint64_t v29 = a3;
    uint64_t v27 = v14;
    uint64_t v28 = v15;
    [v26 fetchAllPairingIdentitiesWithCompletionHandler:v24];

    goto LABEL_8;
  }

  [v12 name];
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue();
  NSErrorWithOSStatusF((const char *)0xFFFFE5B9LL);
  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();

  -[CUHomeKitManager _getPairingIdentityCompleted:options:error:label:completion:]( self,  "_getPairingIdentityCompleted:options:error:label:completion:",  0LL,  a3,  v21,  v14,  v15,  v22);
LABEL_8:
}

  unint64_t v17 = objc_alloc_init(&OBJC_CLASS___CUHomeKitFindPairedPeerContext);
  uint64_t v40 = v9;
  -[CUHomeKitFindPairedPeerContext setCompletion:](v17, "setCompletion:", v9);
  int v38 = (void *)v14;
  -[CUHomeKitFindPairedPeerContext setIdentifier:](v17, "setIdentifier:", v14);
  -[CUHomeKitFindPairedPeerContext setOptions:](v17, "setOptions:", a4);
  uint64_t v41 = v8;
  -[CUHomeKitFindPairedPeerContext setPairedPeer:](v17, "setPairedPeer:", v8);
  uint64_t v37 = v17;
  -[CUHomeKitFindPairedPeerContext setStartTicks:](v17, "setStartTicks:", mach_absolute_time());
  uint64_t v18 = objc_alloc_init(MEMORY[0x189603FA8]);
  v46 = 0u;
  v47 = 0u;
  unsigned int v48 = 0u;
  uint32_t v49 = 0u;
  uint64_t v39 = self;
  -[HMHomeManager homes](self->_homeManager, "homes");
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  int v20 = [v19 countByEnumeratingWithState:&v46 objects:v51 count:16];
  if (v20)
  {
    unsigned int v21 = v20;
    unsigned int v22 = *(void *)v47;
    do
    {
      for (i = 0LL; i != v21; ++i)
      {
        if (*(void *)v47 != v22) {
          objc_enumerationMutation(v19);
        }
        unsigned int v24 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        [v24 currentUser];
        unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25) {
          [v18 addObject:v25];
        }
        v44 = 0u;
        int v45 = 0u;
        uint64_t v42 = 0u;
        uint64_t v43 = 0u;
        [v24 users];
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v27 = [v26 countByEnumeratingWithState:&v42 objects:v50 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)v43;
          do
          {
            for (j = 0LL; j != v28; ++j)
            {
              if (*(void *)v43 != v29) {
                objc_enumerationMutation(v26);
              }
              [v18 addObject:*(void *)(*((void *)&v42 + 1) + 8 * j)];
            }

            uint64_t v28 = [v26 countByEnumeratingWithState:&v42 objects:v50 count:16];
          }

          while (v28);
        }
      }

      unsigned int v21 = [v19 countByEnumeratingWithState:&v46 objects:v51 count:16];
    }

    while (v21);
  }

  -[CUHomeKitFindPairedPeerContext setUsers:](v37, "setUsers:", v18);
  -[CUHomeKitFindPairedPeerContext setUserIndex:](v37, "setUserIndex:", 0LL);
  -[CUHomeKitFindPairedPeerContext setUserCount:](v37, "setUserCount:", [v18 count]);
  -[CUHomeKitManager _findPairedPeerWithContext:](v39, "_findPairedPeerWithContext:", v37);

  uint64_t v9 = v40;
  uint64_t v8 = v41;
LABEL_24:
}

  [v2 _updateState];
  [a1[4] _updateHomes];
  uint64_t v10 = _Block_copy(*((const void **)a1[4] + 19));
  if (v10)
  {
    uint64_t v12 = v10;
    (*((void (**)(void *, void))v10 + 2))(v10, *((unsigned int *)a1[4] + 28));
    uint64_t v10 = v12;
  }
}

  [v2 _updateState];
  [*(id *)(a1 + 32) _updateHomes];
  uint64_t v10 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 152LL));
  if (v10)
  {
    uint64_t v11 = v10;
    (*((void (**)(void *, void))v10 + 2))(v10, *(unsigned int *)(*(void *)(a1 + 32) + 112LL));
    uint64_t v10 = v11;
  }
}

    [v8 _updateState];
    return [*(id *)(v9 + 32) _updateHomes];
  }

  return result;
}

    *(_BYTE *)(v8 + 24) = 1;
    [*(id *)(v9 + 32) _clearHomeKitState];
    [*(id *)(v9 + 32) _updateState];
    return [*(id *)(v9 + 32) _updateHomes];
  }

  return result;
}

    [v8 _updateState];
    return [*(id *)(v9 + 32) _updateHomes];
  }

  return result;
}

  return v12;
}

  invalidationHandler = (void (**)(void))self->_invalidationHandler;
  if (invalidationHandler) {
    invalidationHandler[2]();
  }
  -[CUMessageSession _cleanup](self, "_cleanup");
  self->_invalidateDone = 1;
  uint64_t v13 = self->_ucat;
  if (v13->var0 <= 30)
  {
    if (v13->var0 != -1)
    {
LABEL_11:
      LogPrintF( (uint64_t)v13,  (uint64_t)"-[CUMessageSession _invalidated]",  0x1Eu,  (uint64_t)"Invalidated\n",  v9,  v10,  v11,  v12,  v15);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v13, 0x1Eu))
    {
      uint64_t v13 = self->_ucat;
      goto LABEL_11;
    }
  }

    (*((void (**)(id, uint64_t, void, void))v9 + 2))(v9, 4294960573LL, 0LL, 0LL);
    goto LABEL_8;
  }

  uint64_t v16 = *(void **)(v10 + 40);
  v20[0] = MEMORY[0x1895F87A8];
  v20[1] = 3221225472LL;
  v20[2] = __65__CUMessageSessionXPCConnection_remoteRegisterRequestID_options___block_invoke_2;
  v20[3] = &unk_189F31318;
  unint64_t v17 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 32);
  unsigned int v21 = v17;
  unsigned int v22 = v18;
  [v16 remoteObjectProxyWithErrorHandler:v20];
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 remoteRequestID:*(void *)(a1 + 40) options:v7 request:v8 responseHandler:v9];

LABEL_8:
}

  uint64_t v18 = (void (**)(id, void *))_Block_copy(*(const void **)(v1 + 96));
  if (v18)
  {
    NSErrorWithOSStatusF(v3);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18[2](v18, v11);
  }

  uint64_t v12 = (void (**)(void *, void *))_Block_copy(*(const void **)(*(void *)(a1 + 32) + 8LL));
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 8);
  *(void *)(v13 + 8) = 0LL;

  if (v12)
  {
    NSErrorWithOSStatusF(v3);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    v12[2](v12, v15);
  }

  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v17 = *(void **)(v16 + 104);
  *(void *)(v16 + 104) = 0LL;

  [*(id *)(a1 + 32) _invalidated];
}

  uint64_t v14 = (void (**)(id, void *))_Block_copy(*(const void **)(v1 + 8));
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 8);
  *(void *)(v11 + 8) = 0LL;

  if (v14)
  {
    NSErrorWithOSStatusF(v3);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14[2](v14, v13);
  }
}

  unint64_t v17 = (void (**)(id, void *))_Block_copy(*(const void **)(v8 + 8));
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 8);
  *(void *)(v12 + 8) = 0LL;

  if (v17)
  {
    NSErrorWithOSStatusF((const char *)*(unsigned int *)(a1 + 40));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17[2](v17, v14);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void **)(v15 + 120);
  *(void *)(v15 + 120) = 0LL;

  [*(id *)(a1 + 32) _invalidated];
}

    v12[2](v12, *(void *)(a1 + 48), v4);

    v3 = v12;
    goto LABEL_8;
  }

  uint64_t v16 = (void (**)(id, void *))_Block_copy(*(const void **)(v8 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 8);
  *(void *)(v13 + 8) = 0LL;

  if (v16)
  {
    NSErrorWithOSStatusF(v10);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16[2](v16, v15);
  }
}

  uint64_t v15 = _Block_copy(*(const void **)(v8 + 8));
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 8);
  *(void *)(v12 + 8) = 0LL;

  uint64_t v14 = v15;
  if (v15)
  {
    (*((void (**)(id, void))v15 + 2))(v15, 0LL);
    uint64_t v14 = v15;
  }
}

    v12[2](v12, *(void *)(a1 + 48), v4);

    v3 = v12;
    goto LABEL_8;
  }

  *((_DWORD *)v6 + 9) = a4;
  ++*((_DWORD *)v6 + 18);
  uint64_t v13 = _Block_copy(*((const void **)v6 + 5));
  uint64_t v14 = v13;
  if (v13) {
    (*((void (**)(void *))v13 + 2))(v13);
  }

  uint64_t v6 = v15;
LABEL_10:
}

  p_powerNotificationPort = &self->_powerNotificationPort;
  uint64_t v9 = IORegisterForSystemPower( self,  &self->_powerNotificationPort,  (IOServiceInterestCallback)_sleepWakeCallback,  &self->_powerNotifier);
  self->_powerCnx = v9;
  if (v9)
  {
    if (*p_powerNotificationPort)
    {
      if (self->_powerNotifier)
      {
        IONotificationPortSetDispatchQueue(*p_powerNotificationPort, (dispatch_queue_t)self->_dispatchQueue);
        return;
      }

      uint64_t v14 = "notifier null";
    }

    else
    {
      uint64_t v14 = "port null";
    }
  }

  else
  {
    uint64_t v14 = "cnx null";
  }

  uint64_t v15 = self->_ucat;
  if (v15->var0 > 90) {
    goto LABEL_18;
  }
  if (v15->var0 == -1)
  {
    unint64_t v19 = (char)v14;
    uint64_t v16 = _LogCategory_Initialize((uint64_t)v15, 0x5Au);
    LOBYTE(v14) = v19;
    if (!v16) {
      goto LABEL_18;
    }
    uint64_t v15 = self->_ucat;
  }

  LogPrintF( (uint64_t)v15,  (uint64_t)"-[CUSleepWakeMonitor _ensureStarted]",  0x5Au,  (uint64_t)"### Monitoring start failed (%s)\n",  v10,  v11,  v12,  v13,  (char)v14);
LABEL_18:
  IODeregisterForSystemPower(&self->_powerNotifier);
  if (*p_powerNotificationPort)
  {
    IONotificationPortDestroy(*p_powerNotificationPort);
    *p_powerNotificationPort = 0LL;
  }

  powerCnx = self->_powerCnx;
  if (powerCnx)
  {
    IOServiceClose(powerCnx);
    self->_powerCnx = 0;
  }

  if (v7 == 3)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 352LL);
    if (v12)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE59ALL);
      uint64_t v13 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, id))(v12 + 16))(v12, v13);
    }
  }

  else if (v7 == 1)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 200);
    *(void *)(v10 + 200) = 0LL;

    [*(id *)(a1 + 32) _invalidated];
  }

  if (!self->_bonjourAdvertiser
    && !self->_listenerSourceV4
    && !self->_listenerSourceV6
    && !-[NSMutableSet count](self->_connections, "count"))
  {
    invalidationHandler = (void (**)(void))self->_invalidationHandler;
    if (invalidationHandler) {
      invalidationHandler[2]();
    }
    connectionAcceptHandler = self->_connectionAcceptHandler;
    self->_connectionAcceptHandler = 0LL;

    connectionStartedHandler = self->_connectionStartedHandler;
    self->_connectionStartedHandler = 0LL;

    connectionEndedHandler = self->_connectionEndedHandler;
    self->_connectionEndedHandler = 0LL;

    connectionPrepareHandler = self->_connectionPrepareHandler;
    self->_connectionPrepareHandler = 0LL;

    uint64_t v13 = self->_invalidationHandler;
    self->_invalidationHandler = 0LL;

    self->_invalidateDone = 1;
    uint64_t v18 = self->_ucat;
    if (v18->var0 <= 30)
    {
      if (v18->var0 != -1)
      {
LABEL_15:
        LogPrintF( (uint64_t)v18,  (uint64_t)"-[CUTCPServer _invalidated]",  0x1Eu,  (uint64_t)"Invalidated\n",  v14,  v15,  v16,  v17,  v20);
        return;
      }

      if (_LogCategory_Initialize((uint64_t)v18, 0x1Eu))
      {
        uint64_t v18 = self->_ucat;
        goto LABEL_15;
      }
    }
  }

  self->_joinSoftAPState = 3;
  unsigned int v21 = @"eo";
  uint64_t v10 = (void *)MEMORY[0x189607870];
  uint64_t v11 = *MEMORY[0x189607670];
  uint64_t v12 = a3;
  unint64_t v19 = *MEMORY[0x1896075E0];
  uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, a3, 0, 0));
  uint64_t v14 = (void *)v13;
  uint64_t v15 = @"?";
  if (v13) {
    uint64_t v15 = (const __CFString *)v13;
  }
  int v20 = v15;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  [v10 errorWithDomain:v11 code:v12 userInfo:v16];
  unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v17;
  [MEMORY[0x189603F68] dictionaryWithObjects:v22 forKeys:&v21 count:1];
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v18);
}

  self->_restoreOriginalWiFiState = 3;
  unsigned int v22 = @"eo";
  uint64_t v11 = (void *)MEMORY[0x189607870];
  uint64_t v12 = *MEMORY[0x189607670];
  uint64_t v13 = a3;
  int v20 = *MEMORY[0x1896075E0];
  uint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, a3, 0, 0));
  uint64_t v15 = (void *)v14;
  uint64_t v16 = @"?";
  if (v14) {
    uint64_t v16 = (const __CFString *)v14;
  }
  unsigned int v21 = v16;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  [v11 errorWithDomain:v12 code:v13 userInfo:v17];
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v18;
  [MEMORY[0x189603F68] dictionaryWithObjects:v23 forKeys:&v22 count:1];
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v19);
}

  self->_finishState = 3;
  unsigned int v22 = @"eo";
  uint64_t v11 = (void *)MEMORY[0x189607870];
  uint64_t v12 = *MEMORY[0x189607670];
  uint64_t v13 = a3;
  int v20 = *MEMORY[0x1896075E0];
  uint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, a3, 0, 0));
  uint64_t v15 = (void *)v14;
  uint64_t v16 = @"?";
  if (v14) {
    uint64_t v16 = (const __CFString *)v14;
  }
  unsigned int v21 = v16;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  [v11 errorWithDomain:v12 code:v13 userInfo:v17];
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v18;
  [MEMORY[0x189603F68] dictionaryWithObjects:v23 forKeys:&v22 count:1];
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v19);
}

  invalidationHandler = (void (**)(void))self->_invalidationHandler;
  if (invalidationHandler) {
    invalidationHandler[2]();
  }
  interruptionHandler = self->_interruptionHandler;
  self->_interruptionHandler = 0LL;

  uint64_t v10 = self->_invalidationHandler;
  self->_invalidationHandler = 0LL;

  trafficFlagsUnavailableUpdatedHandler = self->_trafficFlagsUnavailableUpdatedHandler;
  self->_trafficFlagsUnavailableUpdatedHandler = 0LL;

  wifiStateChangedHandler = self->_wifiStateChangedHandler;
  self->_wifiStateChangedHandler = 0LL;

  self->_invalidateDone = 1;
  unint64_t v17 = self->_ucat;
  if (v17->var0 <= 30)
  {
    if (v17->var0 != -1)
    {
LABEL_11:
      LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUWiFiManager _invalidated]",  0x1Eu,  (uint64_t)"Invalidated\n",  v13,  v14,  v15,  v16,  v19);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
    {
      unint64_t v17 = self->_ucat;
      goto LABEL_11;
    }
  }

  uint64_t v13 = *(void **)(v10 + 32);
  if (v13)
  {
    uint64_t v14 = v13;
    dispatch_source_cancel(v14);
    uint64_t v15 = *(void *)(v9 + 32);
    uint64_t v16 = *(void **)(v15 + 32);
    *(void *)(v15 + 32) = 0LL;

    uint64_t v10 = *(void *)(v9 + 32);
  }

  return [(id)v10 _invalidated];
}

  if (!self->_xpcCnx && !self->_xpcListener)
  {
    invalidationHandler = (void (**)(void))self->_invalidationHandler;
    if (invalidationHandler) {
      invalidationHandler[2]();
    }
    connectionStartedHandler = self->_connectionStartedHandler;
    self->_connectionStartedHandler = 0LL;

    connectionEndedHandler = self->_connectionEndedHandler;
    self->_connectionEndedHandler = 0LL;

    interruptionHandler = self->_interruptionHandler;
    self->_interruptionHandler = 0LL;

    uint64_t v12 = self->_invalidationHandler;
    self->_invalidationHandler = 0LL;

    listenerEndpoint = self->_listenerEndpoint;
    self->_listenerEndpoint = 0LL;

    exportedInterface = self->_exportedInterface;
    self->_exportedInterface = 0LL;

    exportedObject = self->_exportedObject;
    self->_exportedObject = 0LL;

    remoteObjectInterface = self->_remoteObjectInterface;
    self->_remoteObjectInterface = 0LL;

    unint64_t v17 = self->_exportedInterface;
    self->_exportedInterface = 0LL;

    self->_invalidateDone = 1;
  }

  connectionStartedHandler = (void (**)(id, id))self->_connectionStartedHandler;
  if (connectionStartedHandler) {
    connectionStartedHandler[2](connectionStartedHandler, v11);
  }

  return 1;
}

  uint64_t v15 = 5LL;
LABEL_14:

  return v15;
}

  uint64_t v15 = 5LL;
LABEL_14:

  return v15;
}

  return v16;
}

      if (gLogCategory_DACPServer <= 60
        && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)",  0x3Cu,  (uint64_t)"### Bad URL: '%.*s'\n",  v18,  v19,  v20,  v21,  *(void *)(a1 + 8408));
      }

      goto LABEL_15;
    }

    if (HTTPServer_GetNextURLSegment( (void *)a1,  (unint64_t *)&v30,  &v29,  &v31,  v12,  v13,  v14,  v15))
    {
      size_t v31 = HTTPGetHeaderField( (char *)(a1 + 160),  *(void *)(a1 + 8352),  "Active-Remote",  0LL,  0LL,  (const char **)&v30,  &v29,  0LL);
      if (v31)
      {
        if (gLogCategory_DACPServer > 60
          || gLogCategory_DACPServer == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu))
        {
          goto LABEL_40;
        }

        unsigned int v22 = "### No Active-Remote in headers\n";
      }

      else
      {
        if (SNScanF(v30, v29, "%u", v17, v18, v19, v20, v21, (int)&v28) == 1)
        {
          pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 312));
          unsigned int v25 = *(void *)(v9 + 328);
          if (v25)
          {
            uint64_t v26 = 0LL;
            while (*(_DWORD *)(*(void *)(v9 + 320) + 4 * v26) != v28)
            {
              if (v25 == ++v26)
              {
                uint64_t v26 = *(void *)(v9 + 328);
                break;
              }
            }
          }

          else
          {
            uint64_t v26 = 0LL;
          }

          pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 312));
          if (v26 >= *(void *)(v9 + 328))
          {
            if (gLogCategory_DACPServer <= 50
              && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x32u)))
            {
              LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)",  0x32u,  (uint64_t)"### Remote ID %u not authorized\n",  v18,  v19,  v20,  v21,  v28);
            }

            uint64_t v23 = 403LL;
          }

          else
          {
            if (!HTTPServer_GetNextURLSegment( (void *)a1,  (unint64_t *)&v30,  &v29,  &v31,  v18,  v19,  v20,  v21)) {
              return v31;
            }
            uint64_t v29 = *(void *)(a1 + 8400) - (void)v30 + *(void *)(a1 + 8408);
            else {
              uint64_t v23 = 200LL;
            }
          }

          return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
        }

        if (gLogCategory_DACPServer > 60
          || gLogCategory_DACPServer == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x3Cu))
        {
          goto LABEL_40;
        }

        uint64_t v27 = v29;
        unsigned int v22 = "### Bad Active-Remote '%.*s\n";
      }

      LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"OSStatus __DACPServer_ProcessRequest(HTTPServerConnectionRef)",  0x3Cu,  (uint64_t)v22,  v18,  v19,  v20,  v21,  v27);
LABEL_40:
      uint64_t v23 = 400LL;
      return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
    }
  }

  return v31;
}

  pthread_mutex_unlock(&gPrintFUtilsLock);
  return v7;
}

  if (*a1)
  {
    SRP_free(*a1);
    *a1 = 0LL;
  }

  return v14;
}

  v81 = v4;
  cf = 0LL;
  __s1 = (char *)Mutable;
  theDict = 0LL;
  v86 = 0LL;
  theArray = 0LL;
  LODWORD(Mutable) = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = (const CFArrayCallBacks *)MEMORY[0x189605228];
  while (1)
  {
    uint64_t v10 = fcopyline(v5, (unint64_t *)&v88, 0LL);
    if (v10) {
      break;
    }
    if ((_DWORD)Mutable)
    {
      appended = 4294960560LL;
      LODWORD(Mutable) = 1;
    }

    else if (*(_BYTE *)v88 && *((_BYTE *)v88 + 1) == 61)
    {
      LODWORD(Mutable) = 0;
      HIDWORD(v11) = *(char *)v88;
      LODWORD(v11) = HIDWORD(v11) - 84;
      uint64_t v12 = (char *)v88 + 2;
      switch((v11 >> 1))
      {
        case 0u:
          if (theArray) {
            goto LABEL_69;
          }
          LODWORD(Mutable) = 0;
          theArray = CFArrayCreateMutable(0LL, 0LL, v9);
          if (theArray) {
            goto LABEL_60;
          }
          theArray = 0LL;
          goto LABEL_89;
        case 3u:
          if (!theArray) {
            goto LABEL_68;
          }
          if (!theDict)
          {
            theDict = 0LL;
            LODWORD(Mutable) = 1;
            goto LABEL_60;
          }

          LODWORD(Mutable) = 0;
          appended = 4294960560LL;
          break;
        case 8u:
          if (v8)
          {
            LODWORD(Mutable) = 0;
            appended = 4294960566LL;
            uint64_t v8 = 1;
            break;
          }

          if (!theDict)
          {
            LODWORD(Mutable) = 0;
            theDict = 0LL;
            uint64_t v8 = 0;
            goto LABEL_84;
          }

          if (sscanf(v12, "%lfs", v94) != 1)
          {
            LODWORD(Mutable) = 0;
            uint64_t v8 = 0;
            goto LABEL_66;
          }

          if (*(double *)v94 < 0.0)
          {
            LODWORD(Mutable) = 0;
            uint64_t v8 = 0;
            goto LABEL_80;
          }

          uint64_t v13 = CFDictionarySetDouble(theDict, @"duration", *(double *)v94);
          LODWORD(Mutable) = 0;
          if ((_DWORD)v13)
          {
            appended = v13;
            uint64_t v8 = 0;
            break;
          }

          uint64_t v8 = 1;
          goto LABEL_60;
        case 9u:
          if (theDict)
          {
            if (v7)
            {
LABEL_70:
              LODWORD(Mutable) = 0;
              appended = 4294960560LL;
              goto LABEL_77;
            }

            Mutable = cf;
            if (!cf)
            {
              Mutable = CFArrayCreateMutable(0LL, 0LL, v9);
              if (!Mutable)
              {
                cf = 0LL;
                uint64_t v7 = 0;
                goto LABEL_89;
              }

              CFDictionarySetValue(theDict, @"failures", Mutable);
              cf = Mutable;
            }
          }

          else
          {
            Mutable = v86;
            if (!v86)
            {
              unint64_t v19 = CFArrayCreateMutable(0LL, 0LL, v9);
              if (!v19)
              {
                v86 = 0LL;
                goto LABEL_88;
              }

              v86 = v19;
              Mutable = v19;
            }
          }

          int v20 = _TUConvertToJUnitParseAssertion( (unsigned __int8 *)v12,  v94,  (int64_t *)&v93,  &v92,  &v91,  &v90,  &v89);
          if ((_DWORD)v20)
          {
            appended = v20;
            LODWORD(Mutable) = 0;
            break;
          }

          appended = CFPropertyListAppendFormatted( 0LL,  Mutable,  (uint64_t)"{%kO=%.*s%kO=%.*s%kO=%.*s}",  v21,  v22,  v23,  v24,  v25,  (uint64_t)@"type");
          LODWORD(Mutable) = 0;
          if ((_DWORD)appended) {
            break;
          }
          goto LABEL_60;
        case 0xEu:
          if (theDict && v7) {
            goto LABEL_70;
          }
          uint64_t v14 = _TUConvertToJUnitParseAssertion( (unsigned __int8 *)v12,  v94,  (int64_t *)&v93,  &v92,  &v91,  &v90,  &v89);
          LODWORD(Mutable) = 0;
          if (!(_DWORD)v14) {
            goto LABEL_60;
          }
          appended = v14;
          break;
        case 0xFu:
          if (v7)
          {
            LODWORD(Mutable) = 0;
            appended = 4294960566LL;
LABEL_77:
            uint64_t v7 = 1;
            break;
          }

          if (sscanf(v12, "%u/%u", v94, &v93) != 2)
          {
            LODWORD(Mutable) = 0;
            uint64_t v7 = 0;
            goto LABEL_66;
          }

          if (LODWORD(v94[0]) > v93)
          {
            LODWORD(Mutable) = 0;
            uint64_t v7 = 0;
LABEL_80:
            appended = 4294960586LL;
            break;
          }

          if (!theDict)
          {
            LODWORD(Mutable) = 0;
            theDict = 0LL;
            uint64_t v7 = 0;
            goto LABEL_84;
          }

          uint64_t v15 = CFDictionarySetInt64(theDict, @"passes", LODWORD(v94[0]));
          if ((_DWORD)v15)
          {
            appended = v15;
            LODWORD(Mutable) = 0;
            uint64_t v7 = 0;
            break;
          }

          uint64_t v26 = CFDictionarySetInt64(theDict, @"total", v93);
          LODWORD(Mutable) = 0;
          if ((_DWORD)v26)
          {
            appended = v26;
            uint64_t v7 = 0;
            break;
          }

          uint64_t v7 = 1;
          goto LABEL_60;
        case 0x10u:
          if (!theArray) {
            goto LABEL_68;
          }
          if (theDict)
          {
LABEL_69:
            LODWORD(Mutable) = 0;
            appended = 4294960575LL;
          }

          else
          {
            uint64_t v16 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
            if (v16)
            {
              theDict = v16;
              if (*v12)
              {
                unint64_t v17 = v12;
                uint64_t v18 = v16;
                CFDictionarySetCString(v16, @"name", v17, -1LL);
                CFArrayAppendValue(theArray, v18);
                LODWORD(Mutable) = 0;
                goto LABEL_60;
              }

              LODWORD(Mutable) = 0;
              appended = 4294960552LL;
            }

            else
            {
LABEL_88:
              LODWORD(Mutable) = 0;
              theDict = 0LL;
LABEL_89:
              appended = 4294960568LL;
            }
          }

          break;
        case 0x13u:
          if (!theArray)
          {
LABEL_68:
            theArray = 0LL;
            LODWORD(Mutable) = 0;
LABEL_84:
            appended = 4294960551LL;
            break;
          }

          if (!theDict)
          {
            LODWORD(Mutable) = 0;
            theDict = 0LL;
            goto LABEL_84;
          }

          CFRelease(theDict);
          if (cf) {
            CFRelease(cf);
          }
          LODWORD(Mutable) = 0;
          theDict = 0LL;
          cf = 0LL;
          uint64_t v7 = 0;
          uint64_t v8 = 0;
LABEL_60:
          appended = 0LL;
          break;
        default:
          goto LABEL_60;
      }
    }

    else
    {
      LODWORD(Mutable) = 0;
LABEL_66:
      appended = 4294960554LL;
    }

    if (v88)
    {
      free(v88);
      v88 = 0LL;
    }

    if ((_DWORD)appended) {
      goto LABEL_161;
    }
  }

  if (v10 != -6752)
  {
    appended = 4294960550LL;
    goto LABEL_161;
  }

  if (!(_DWORD)Mutable)
  {
    appended = 4294960560LL;
    goto LABEL_161;
  }

  v93 = 0LL;
  v94[0] = 0LL;
  if (!strcmp(__s1, "-"))
  {
    char v30 = 0LL;
    uint64_t v29 = *MEMORY[0x1895F89E0];
    uint64_t v28 = theArray;
    goto LABEL_98;
  }

  uint64_t v27 = fopen(__s1, "w");
  uint64_t v28 = theArray;
  if (v27)
  {
    uint64_t v29 = (uint64_t)v27;
    LODWORD(v92) = 0;
    char v30 = v27;
    goto LABEL_98;
  }

  if (!*__error())
  {
    char v30 = 0LL;
    LODWORD(v92) = -6700;
    goto LABEL_152;
  }

  uint64_t v29 = 0LL;
  char v30 = 0LL;
  LODWORD(v92) = *__error();
  if (!(_DWORD)v92)
  {
LABEL_98:
    FPrintF(v29);
    FPrintF(v29);
    size_t v31 = 0.0;
    v80 = v30;
    if (v28)
    {
      CFIndex Count = CFArrayGetCount(v28);
      if (Count >= 1)
      {
        BOOL v32 = 0LL;
        int v33 = 0;
        uint64_t v34 = 0;
        while (1)
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
          TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v28, v32, TypeID, (int *)&v92);
          if ((_DWORD)v92) {
            goto LABEL_151;
          }
          uint64_t v37 = TypedValueAtIndex;
          Int64Ranged = CFDictionaryGetInt64Ranged(TypedValueAtIndex, @"total", 0LL, 0xFFFFFFFFLL, (int *)&v92);
          if ((_DWORD)v92) {
            goto LABEL_151;
          }
          uint64_t v39 = Int64Ranged;
          if (Int64Ranged) {
            ++v33;
          }
          uint64_t v40 = CFDictionaryGetInt64Ranged(v37, @"passes", 0LL, 0xFFFFFFFFLL, (int *)&v92);
          if ((_DWORD)v92) {
            goto LABEL_151;
          }
          uint64_t v41 = v40;
          Double = CFDictionaryGetDouble(v37, @"duration", &v92);
          if ((_DWORD)v92) {
            goto LABEL_151;
          }
          if (v39 != v41) {
            ++v34;
          }
          size_t v31 = v31 + Double;
          ++v32;
          uint64_t v28 = theArray;
          if (Count == v32)
          {
            uint64_t v43 = 1;
            goto LABEL_113;
          }
        }
      }

      uint64_t v43 = 0;
    }

    else
    {
      uint64_t v43 = 0;
      CFIndex Count = 0LL;
    }

  uint64_t v4 = getpid();
  snprintf(__filename, 0x40uLL, "/tmp/leaks-%d-output", v4);
  size_t v5 = fopen(__filename, "w");
  if (v5) {
    goto LABEL_10;
  }
  if (!*__error())
  {
    size_t v5 = 0LL;
    v3 = -6700;
LABEL_27:
    uint64_t v7 = 1;
LABEL_28:
    if (v2) {
      pclose(v2);
    }
    if (v5)
    {
      fclose(v5);
      if ((v7 & 1) != 0) {
        goto LABEL_32;
      }
    }

    else if (v7)
    {
      goto LABEL_32;
    }

  *a3 = v16;
  *a4 = v31;
  *a5 = v20;
  if (a6) {
    *a6 = v29;
  }
  if (a7) {
    *a7 = v28;
  }
  uint64_t v18 = 0LL;
  if (a8)
  {
    *a8 = v21;
    return v18;
  }

void _AsyncConnection_ErrorHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 80);
  if (v4)
  {
    size_t v5 = (void *)(v3 + 80);
    if (v4 == a1)
    {
LABEL_6:
      *size_t v5 = *(void *)(a1 + 8);
      if (!*(void *)(v3 + 80)) {
        _AsyncConnection_Complete(v3, 0LL, 0xFFFFFFFFLL, a2);
      }
      _AsyncConnection_ReleaseOperation((_DWORD *)a1);
    }

    else
    {
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = *(void *)(v4 + 8);
        if (!v4) {
          break;
        }
        if (v4 == a1)
        {
          size_t v5 = (void *)(v6 + 8);
          goto LABEL_6;
        }
      }
    }
  }

  else
  {
    _AsyncConnection_Complete(v3, 0LL, 0xFFFFFFFFLL, a2);
  }

uint64_t _AsyncConnection_StartConnectDelayed( uint64_t a1, void *a2, int a3, __int128 *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unsigned int v9 = a6;
  int v10 = a5;
  uint64_t v15 = *(int **)(a1 + 144);
  int v16 = *v15;
  if (!a3)
  {
    if (v16 > 30) {
      goto LABEL_11;
    }
    if (v16 == -1)
    {
      uint64_t v15 = *(int **)(a1 + 144);
    }

    LogPrintF( (uint64_t)v15,  (uint64_t)"OSStatus _AsyncConnection_StartConnectDelayed(AsyncConnectionRef, AsyncConnectionOperationRef, uint32_t, const void *, uint32_t, int, uint64_t)",  0x1Eu,  (uint64_t)"Delaying connect to %##a, interface %u by %llu ms\n",  a5,  a6,  a7,  a8,  (char)a4);
    goto LABEL_11;
  }

  if (v16 > 30) {
    goto LABEL_11;
  }
  if (v16 != -1) {
    goto LABEL_4;
  }
  if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
  {
    uint64_t v15 = *(int **)(a1 + 144);
LABEL_4:
    LogPrintF( (uint64_t)v15,  (uint64_t)"OSStatus _AsyncConnection_StartConnectDelayed(AsyncConnectionRef, AsyncConnectionOperationRef, uint32_t, const void *, uint32_t, int, uint64_t)",  0x1Eu,  (uint64_t)"Retrying connect to %##a, interface %u, delay %llu ms, %u of %u\n",  a5,  a6,  a7,  a8,  (char)a4);
  }

LABEL_11:
  unint64_t v17 = (char *)calloc(1uLL, 0xB8uLL);
  if (!v17) {
    return 4294960568LL;
  }
  uint64_t v18 = v17;
  ++*(_DWORD *)a1;
  *(_DWORD *)unint64_t v17 = 1;
  *((void *)v17 + 2) = a1;
  int v19 = *((unsigned __int8 *)a4 + 1);
  if (*((_BYTE *)a4 + 1))
  {
    if (v19 == 30)
    {
      __int128 v20 = *a4;
      uint64_t v21 = *((void *)a4 + 2);
      *((_DWORD *)v17 + 12) = *((_DWORD *)a4 + 6);
      *((void *)v17 + 5) = v21;
    }

    else
    {
      if (v19 != 2) {
        goto LABEL_19;
      }
      __int128 v20 = *a4;
    }

    *(_OWORD *)(v17 + 24) = v20;
  }

  else
  {
    v17[25] = 0;
  }

        int v16 = a1;
        unint64_t v17 = a1;
        if (a1 == (const UInt8 *)v11)
        {
          v79 = 0;
          v80 = theDict;
          __int128 v62 = cf;
          v81 = 0LL;
          goto LABEL_161;
        }

        uint64_t v18 = (unsigned __int8 *)a1;
        if ((unint64_t)a1 < v11)
        {
          a1 = (const UInt8 *)v11;
          int v19 = v13 - v16;
          uint64_t v18 = (unsigned __int8 *)v17;
          while (1)
          {
            __int128 v20 = *v18;
            if (v20 == 10 || v20 == 13) {
              break;
            }
            ++v18;
            if (!--v19)
            {
              uint64_t v18 = (unsigned __int8 *)(&v17[v11] - v16);
              goto LABEL_23;
            }
          }

          if (v20 == 13) {
            a1 = v18 + 1;
          }
          else {
            a1 = v18;
          }
        }

  if (v6)
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5B9LL);
    int v19 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v19);
  }

  switch(v8)
  {
    case 1uLL:
      uint64_t v11 = 4294896145LL;
      goto LABEL_15;
    case 4uLL:
      uint64_t v11 = 4294896144LL;
LABEL_15:
      NSErrorWithOSStatusF((const char *)v11);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUBLEConnection _reportError:](self, "_reportError:", v12);

      break;
    case 5uLL:
    case 0xAuLL:
      -[CUBLEConnection _run](self, "_run");
      break;
    default:
      break;
  }

  int v19 = self->_ucat;
  if (v19->var0 <= 60)
  {
    if (v19->var0 == -1)
    {
      int v19 = self->_ucat;
    }

    [v6 identifier];
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)v19,  (uint64_t)"-[CUBLEConnection centralManager:didConnectPeripheral:]",  0x3Cu,  (uint64_t)"### DidConnectPeripheral wrong peripheral: %@ (not %@)\n",  v21,  v22,  v23,  v24,  (char)v20);
  }

  if (aBlock) {
    aBlock[2]();
  }

LABEL_17:
}

    v57 = 0;
    goto LABEL_12;
  }

  v55 = 3;
  v56 = 3;
  if (v57)
  {
    uint64_t v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarStatus[0])( (uint64_t)a3,  (uint64_t)a4,  (uint64_t)&v56,  (uint64_t)&v55);
    if (v14)
    {
      int v19 = v14;
      __int128 v20 = self->_ucat;
      if (v20->var0 <= 60)
      {
        if (v20->var0 == -1)
        {
          __int128 v20 = self->_ucat;
        }

        LogPrintF( (uint64_t)v20,  (uint64_t)"-[CUBluetoothClient _btAccessoryPlacementChanged:device:]",  0x3Cu,  (uint64_t)"### Placement changed: BTAccessoryManagerGetInEarStatus failed: %#m\n",  v15,  v16,  v17,  v18,  v19 - 16);
      }

    -[CUBluetoothClient _handleBluetoothAddressChanged](self, "_handleBluetoothAddressChanged");
  }

  invalidationHandler = (void (**)(void))self->_invalidationHandler;
  if (invalidationHandler)
  {
    invalidationHandler[2]();
    uint64_t v18 = self->_invalidationHandler;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  self->_invalidationHandler = 0LL;

  int v19 = self->_stateChangedHandler;
  self->_stateChangedHandler = 0LL;

  self->_invalidateDone = 1;
}

      bonjourBrowser = self->_bonjourBrowser;
      if (bonjourBrowser)
      {
        CFRetain(self->_bonjourBrowser);
        dispatch_async_f( *((dispatch_queue_t *)bonjourBrowser + 2),  bonjourBrowser,  (dispatch_function_t)_BonjourBrowser_Stop);
        CFRelease(self->_bonjourBrowser);
        self->_bonjourBrowser = 0LL;
      }

      -[CUBonjourBrowser _invalidated](self, "_invalidated");
      break;
    case 4u:
      uint64_t v12 = self->_ucat;
      if (v12->var0 > 60) {
        goto LABEL_15;
      }
      if (v12->var0 != -1) {
        goto LABEL_9;
      }
      if (_LogCategory_Initialize((uint64_t)v12, 0x3Cu))
      {
        uint64_t v12 = self->_ucat;
LABEL_9:
        LogPrintF( (uint64_t)v12,  (uint64_t)"-[CUBonjourBrowser _bonjourHandleEventType:info:]",  0x3Cu,  (uint64_t)"### Bonjour daemon crashed\n",  v7,  v8,  v9,  v10,  v14);
      }

  (*((void (**)(id, void, void, CUFileServerSession *))v5 + 2))(v5, 0LL, 0LL, v10);
LABEL_14:
}

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

    uint64_t v13 = 0;
    goto LABEL_14;
  }

  [v7 _attributesDictionaryWithFlags:v6 error:a5];
  int v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = (const char *)SecItemAdd(v10, 0LL);
    uint64_t v13 = (_DWORD)v12 == 0;
    if (a5 && (_DWORD)v12)
    {
      NSErrorWithOSStatusF(v12);
      uint64_t v13 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  else
  {
    uint64_t v13 = 0;
  }

LABEL_14:
  return v13;
}

    uint64_t v15 = 0LL;
    return v15;
  }

  -[objc_class createWithBytesNoCopy:length:error:]( a5,  "createWithBytesNoCopy:length:error:",  v13,  v8,  a6);
  int v16 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = v16;
  if (v16) {
    unint64_t v17 = v16;
  }
  else {
    free(v13);
  }

  return v15;
}

    goto LABEL_12;
  }

  uint64_t v11 = v2;
  [v2 updateLinkStatus:*(_DWORD *)(a1 + 40) == 1];
LABEL_12:
}

    goto LABEL_12;
  }

  uint64_t v11 = v2;
  [v2 reportIssue:*(void *)(a1 + 40)];
LABEL_12:
}

        objc_msgSend(*(id *)(v9 + 24), "objectForKeyedSubscript:");
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
        int v19 = *(void **)(a1 + 32);
        if (v18)
        {
          __int128 v20 = v19;
          objc_sync_enter(v20);
          [*(id *)(*(void *)(a1 + 32) + 24) setObject:0 forKeyedSubscript:v33];
          objc_sync_exit(v20);

          uint64_t v21 = *(uint64_t **)(a1 + 32);
          int v22 = (int *)v21[4];
          if (*v22 <= 30)
          {
            if (*v22 == -1)
            {
              uint64_t v29 = _LogCategory_Initialize(v21[4], 0x1Eu);
              uint64_t v21 = *(uint64_t **)(a1 + 32);
              if (!v29) {
                goto LABEL_19;
              }
              int v22 = (int *)v21[4];
            }

            CUDescriptionWithLevel(v18, 50LL);
            unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue();
            LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUNANPublisher publisher:dataTerminatedForHandle:reason:]_block_invoke",  0x1Eu,  (uint64_t)"DataSession ended: %@\n",  v24,  v25,  v26,  v27,  (char)v23);

            uint64_t v21 = *(uint64_t **)(a1 + 32);
          }

  (*(void (**)(void))(a1[7] + 16LL))();
}

  (*(void (**)(void))(a1[7] + 16LL))();
}

  uint64_t v15 = *(void **)(v12 + 8);
  if (!v15)
  {
    int v16 = objc_alloc_init(MEMORY[0x189603FE0]);
    unint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void **)(v17 + 8);
    *(void *)(v17 + 8) = v16;

    uint64_t v15 = *(void **)(*(void *)(a1 + 40) + 8LL);
  }

  [v15 addObject:*(void *)(a1 + 32)];
  ++*(_DWORD *)(*(void *)(a1 + 40) + 16LL);
  [*(id *)(a1 + 40) _update];
  return [*(id *)(a1 + 40) _updateEndpoints];
}

  return v19;
}

  uint64_t v14 = _Block_copy(*((const void **)v5 + 31));
  uint64_t v15 = v14;
  if (v14) {
    (*((void (**)(void *, uint64_t, uint64_t))v14 + 2))(v14, a1, a2);
  }

  return 0LL;
}

  objc_storeStrong((id *)&v6->_peers, v5);
  if (!v6->_peersChanged)
  {
    v6->_peersChanged = 1;
    if (v6->_activateCalled)
    {
      dispatchQueue = (dispatch_queue_s *)v6->_dispatchQueue;
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __29__CURangingSession_setPeers___block_invoke;
      block[3] = &unk_189F34238;
      block[4] = v6;
      dispatch_async(dispatchQueue, block);
    }
  }

  invalidationHandler = (void (**)(void))self->_invalidationHandler;
  if (invalidationHandler)
  {
    invalidationHandler[2]();
    int v10 = self->_invalidationHandler;
  }

  else
  {
    int v10 = 0LL;
  }

  self->_invalidationHandler = 0LL;

  threadInitializeHandler = self->_threadInitializeHandler;
  self->_threadInitializeHandler = 0LL;

  threadFinalizeHandler = self->_threadFinalizeHandler;
  self->_threadFinalizeHandler = 0LL;
}

  return v6;
}

          uint64_t v11 = "Unknown";
LABEL_14:
          LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUTCPConnection _processWrites:]",  rawIOLogLevel,  (uint64_t)"Flow control changed: %s -> %s\n",  v3,  v4,  v5,  v6,  (char)v11);
        }
      }

      self->_flowControlState = 10;
      uint64_t v12 = _Block_copy(self->_flowControlChangedHandler);
      uint64_t v13 = v12;
      if (v12) {
        (*((void (**)(void *))v12 + 2))(v12);
      }
    }
  }

  uint64_t v14 = 4;
  do
  {
    uint64_t v15 = self->_writeRequestCurrent;
    if (!v15)
    {
      unsigned int v23 = -[NSMutableArray firstObject](self->_writeRequests, "firstObject");
      if (!v23)
      {
        if ((!self->_flowControlChangedHandler || self->_flowControlState == 10) && !self->_writeSuspended)
        {
          self->_writeSuspended = 1;
          dispatch_suspend((dispatch_object_t)self->_writeSource);
        }

        uint64_t v15 = 0LL;
        goto LABEL_72;
      }

      uint64_t v15 = (CUWriteRequest *)v23;
      -[NSMutableArray removeObjectAtIndex:](self->_writeRequests, "removeObjectAtIndex:", 0LL);
      uint64_t v41 = 0LL;
      -[CUTCPConnection _prepareWriteRequest:error:](self, "_prepareWriteRequest:error:", v15, &v41);
      dispatch_source_t v24 = v41;
      if (v24)
      {
        unsigned int v25 = v24;
        goto LABEL_41;
      }

      objc_storeStrong((id *)&self->_writeRequestCurrent, v15);
    }

    __int128 v20 = (const char *)SocketWriteData(self->_socketFD, (const iovec **)&v15->_iop, &v15->_ion);
    uint64_t v21 = self->_rawIOLogLevel;
    int v22 = self->_ucat;
    if (v22->var0 <= v21)
    {
      if (v22->var0 != -1) {
        goto LABEL_22;
      }
      if (_LogCategory_Initialize((uint64_t)v22, self->_rawIOLogLevel))
      {
        int v22 = self->_ucat;
        uint64_t v21 = self->_rawIOLogLevel;
LABEL_22:
        LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUTCPConnection _processWrites:]",  v21,  (uint64_t)"Write socket %d, pre-ion %d, post-ion %d, %#m\n",  v16,  v17,  v18,  v19,  self->_socketFD);
      }
    }

    if ((_DWORD)v20)
    {
      if ((_DWORD)v20 != 35)
      {
        NSErrorWithOSStatusF(v20);
        int v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUTCPConnection _abortWritesWithError:](self, "_abortWritesWithError:", v38);

LABEL_72:
        return;
      }

      uint64_t v34 = self->_flowControlState;
      if (v34 == 20)
      {
LABEL_70:
        if (self->_writeSuspended)
        {
          self->_writeSuspended = 0;
          dispatch_resume((dispatch_object_t)self->_writeSource);
        }

        goto LABEL_72;
      }

      uint64_t v35 = self->_rawIOLogLevel;
      uint64_t v36 = self->_ucat;
      if (v36->var0 <= v35)
      {
        if (v36->var0 != -1)
        {
LABEL_49:
          if (v34)
          {
            if (v34 == 20)
            {
              uint64_t v37 = "Closed";
            }

            else if (v34 == 10)
            {
              uint64_t v37 = "Open";
            }

            else
            {
              uint64_t v37 = "?";
            }
          }

          else
          {
            uint64_t v37 = "Unknown";
          }

          LogPrintF( (uint64_t)v36,  (uint64_t)"-[CUTCPConnection _processWrites:]",  v35,  (uint64_t)"Flow control changed: %s -> %s\n",  v16,  v17,  v18,  v19,  (char)v37);
          goto LABEL_67;
        }

        if (_LogCategory_Initialize((uint64_t)v36, self->_rawIOLogLevel))
        {
          uint64_t v36 = self->_ucat;
          uint64_t v35 = self->_rawIOLogLevel;
          uint64_t v34 = self->_flowControlState;
          goto LABEL_49;
        }
      }

    uint64_t v15 = -6705;
    goto LABEL_12;
  }

  self->_easyConfigPreConfigMetrics.rssiOfSWAP = -[CUWiFiDevice rssi](self->_wacDevice, "rssi");
  self->_easyConfigPreConfigMetrics.snrOfSWAP = CFDictionaryGetInt64Ranged(v7, @"SNR", 0LL, 0xFFFFFFFFLL, 0LL);
  self->_easyConfigPreConfigMetrics.channelOfSWAP = CFDictionaryGetInt64Ranged( v7,  @"CHANNEL",  0LL,  0xFFFFFFFFLL,  0LL);
  dispatchQueue = self->_dispatchQueue;
  v27[0] = MEMORY[0x1895F87A8];
  v27[1] = 3221225472LL;
  v27[2] = __35__CUWACSession__runJoinSoftAPStart__block_invoke;
  v27[3] = &unk_189F32EC8;
  v27[4] = self;
  unsigned int v9 = WiFiJoinNetwork_b(v7, dispatchQueue, v27);
  if (!v9) {
    goto LABEL_3;
  }
  uint64_t v15 = v9;
  int v16 = self->_ucat;
  if (v16->var0 <= 60)
  {
    if (v16->var0 == -1)
    {
      int v16 = self->_ucat;
    }

    LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUWACSession _runJoinSoftAPStart]",  0x3Cu,  (uint64_t)"### Join SoftAP start failed: %#m\n",  v10,  v11,  v12,  v13,  v15);
  }

      CFTypeID TypeID = CFStringGetTypeID();
      CFDictionaryGetTypedValue((const __CFDictionary *)v14, @"ssid", TypeID, 0LL);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        [v15 setObject:v8 forKeyedSubscript:@"wifiSSID"];
      }

      else
      {
        uint64_t v27 = self->_ucat;
        if (v27->var0 <= 50)
        {
          if (v27->var0 == -1)
          {
            uint64_t v27 = self->_ucat;
          }

          LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUWACSession _runEasyConfigPreConfigStart]",  0x32u,  (uint64_t)"### No WiFI SSID to configure\n",  v23,  v24,  v25,  v26,  v40);
        }
      }

    int v16 = -6705;
    goto LABEL_12;
  }

  self->_easyConfigPostConfigMetrics.rssiOfDestinationAP = CFDictionaryGetInt64Ranged( (const __CFDictionary *)v3,  @"RSSI",  0xFFFFFFFF80000000LL,  0x7FFFFFFFLL,  0LL);
  self->_easyConfigPostConfigMetrics.snrOfDestinationAP = CFDictionaryGetInt64Ranged( v8,  @"SNR",  0LL,  0xFFFFFFFFLL,  0LL);
  self->_easyConfigPostConfigMetrics.channelOfDestinationAP = CFDictionaryGetInt64Ranged( v8,  @"CHANNEL",  0LL,  0xFFFFFFFFLL,  0LL);
  self->_restoreStartTime = CFAbsoluteTimeGetCurrent();
  dispatchQueue = self->_dispatchQueue;
  v28[0] = MEMORY[0x1895F87A8];
  v28[1] = 3221225472LL;
  v28[2] = __44__CUWACSession__runRestoreOriginalWiFiStart__block_invoke;
  v28[3] = &unk_189F32EC8;
  v28[4] = self;
  int v10 = WiFiRestoreNetwork(v8, dispatchQueue, v28);
  if (!v10) {
    goto LABEL_3;
  }
  int v16 = v10;
  unint64_t v17 = self->_ucat;
  if (v17->var0 <= 60)
  {
    if (v17->var0 == -1)
    {
      unint64_t v17 = self->_ucat;
    }

    LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUWACSession _runRestoreOriginalWiFiStart]",  0x3Cu,  (uint64_t)"### Restore original WiFi start failed: %#m\n",  v11,  v12,  v13,  v14,  v16);
  }

  self->_scanning = 1;
  dispatchQueue = self->_dispatchQueue;
  v23[0] = MEMORY[0x1895F87A8];
  v23[1] = 3221225472LL;
  v23[2] = __31__CUWiFiScanner__scanWiFiStart__block_invoke;
  v23[3] = &unk_189F32FF8;
  v23[4] = self;
  uint64_t v13 = WiFiScan_b((const __CFDictionary *)v8, dispatchQueue, v23);
  if (v13)
  {
    errorHandler = (void (**)(id, void *))self->_errorHandler;
    if (errorHandler)
    {
      uint64_t v15 = (void *)MEMORY[0x189607870];
      int v16 = *MEMORY[0x189607670];
      unint64_t v17 = v13;
      dispatch_source_t v24 = *MEMORY[0x1896075E0];
      uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v13, 0, 0));
      int v19 = (void *)v18;
      __int128 v20 = @"?";
      if (v18) {
        __int128 v20 = (const __CFString *)v18;
      }
      v25[0] = v20;
      [MEMORY[0x189603F68] dictionaryWithObjects:v25 forKeys:&v24 count:1];
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
      [v15 errorWithDomain:v16 code:v17 userInfo:v21];
      int v22 = (void *)objc_claimAutoreleasedReturnValue();
      errorHandler[2](errorHandler, v22);
    }
  }
}

  __int128 v20 = !v18;

  return v20;
}

  if (gLogCategory_NetSocketTLS <= 60
    && (gLogCategory_NetSocketTLS != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketTLS, 0x3Cu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_NetSocketTLS,  (uint64_t)"OSStatus NetSocketTLS_Configure(NetSocketRef, const void *, size_t, const void *, size_t)",  0x3Cu,  (uint64_t)"### Configure TLS failed: %#m\n",  v8,  v9,  v10,  v11,  v13);
  }

  _NetSocketTLSFree((uint64_t)a1);
  return v13;
}

  uint64_t v11 = SSLRead(*(SSLContextRef *)a4, data, dataLength, &processed);
  unsigned int v9 = processed;
  if (processed) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  switch(v12)
  {
    case 0xFFFFD9B3:
      uint64_t result = 4294960543LL;
      break;
    case 0xFFFFD9B5:
      uint64_t v13 = *(unsigned __int8 *)(a4 + 14);
      if (*(_BYTE *)(a4 + 13))
      {
        *(_BYTE *)(a4 + 13) = 0;
        if (!v13)
        {
LABEL_30:
          uint64_t result = 4294960522LL;
          break;
        }

        uint64_t result = 4294960530LL;
      }

      else
      {
        if (!*(_BYTE *)(a4 + 14)) {
          goto LABEL_32;
        }
        uint64_t result = 4294960521LL;
      }

LABEL_19:
  *((_DWORD *)v17 + 13) = v10;
  if ((v9 & 0x80000000) != 0)
  {
    unsigned int v23 = -v9;
    int v22 = v17[25];
    goto LABEL_25;
  }

  int v22 = v17[25];
  if ((v22 == 30 || v22 == 2) && !*((_WORD *)v17 + 13))
  {
    unsigned int v23 = v9;
LABEL_25:
    if (v22 == 30 || v22 == 2) {
      *((_WORD *)v17 + 13) = bswap32(v23) >> 16;
    }
  }

  *((_DWORD *)v17 + 14) = v9;
  *((_DWORD *)v17 + 15) = -1;
  *((CFAbsoluteTime *)v17 + 20) = CFAbsoluteTimeGetCurrent();
  v18[45] = a3;
  if (a2)
  {
    *((void *)v18 + 15) = a2[15];
    *((void *)v18 + 17) = a2[17];
    *((void *)v18 + 19) = a2[19];
  }

  dispatch_source_t v24 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *(dispatch_queue_t *)(a1 + 104));
  *((void *)v18 + 9) = v24;
  if (v24)
  {
    dispatch_set_context(v24, v18);
    dispatch_source_set_event_handler_f( *((dispatch_source_t *)v18 + 9),  (dispatch_function_t)_AsyncConnection_ConnectDelayedHandler);
    unsigned int v25 = (dispatch_source_s *)*((void *)v18 + 9);
    dispatch_time_t v26 = dispatch_time(0LL, a7);
    dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, a7 >> 2);
    dispatch_resume(*((dispatch_object_t *)v18 + 9));
    uint64_t result = 0LL;
    *((void *)v18 + 1) = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v18;
  }

  else
  {
    _AsyncConnection_ReleaseOperation(v18);
    return 4294960596LL;
  }

  return result;
}

  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void (**)(uint64_t, _BYTE *, void))(v14 + 88);
  if (v15) {
    v15(4LL, v18, *(void *)(v14 + 96));
  }
  *(_DWORD *)(a1 + 60) = -1;
  int v16 = *(dispatch_object_s **)(a1 + 80);
  if (v16)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 80));
    dispatch_release(v16);
    *(void *)(a1 + 80) = 0LL;
  }

  unint64_t v17 = *(dispatch_object_s **)(a1 + 88);
  if (v17)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 88));
    dispatch_release(v17);
    *(void *)(a1 + 88) = 0LL;
  }

  _AsyncConnection_Complete(*(void *)(a1 + 16), a1, v8, 0LL);
}

    _AsyncConnection_ErrorHandler(a1, v8);
  }

        return;
      }

      [v17 setStreamState:v4];
      uint64_t v27 = self->_ucat;
      if (v27->var0 <= 30)
      {
        if (v27->var0 != -1) {
          goto LABEL_15;
        }
        if (_LogCategory_Initialize((uint64_t)v27, 0x1Eu))
        {
          uint64_t v27 = self->_ucat;
LABEL_15:
          LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUBluetoothClient _btAccessoryStreamStateChanged:device:]",  0x1Eu,  (uint64_t)"Stream state changed: %@, %s -> %s\n",  v23,  v24,  v25,  v26,  (char)v17);
        }
      }

      uint64_t v28 = _Block_copy(self->_deviceConnectedHandler);
      uint64_t v29 = v28;
      if (v28)
      {
        v33[0] = MEMORY[0x1895F87A8];
        v33[1] = 3221225472LL;
        v33[2] = __59__CUBluetoothClient__btAccessoryStreamStateChanged_device___block_invoke;
        v33[3] = &unk_189F33060;
        uint64_t v35 = v28;
        uint64_t v34 = v17;
        -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v33);
      }

      goto LABEL_19;
    }

    char v30 = v6;
    size_t v31 = self->_ucat;
    if (v31->var0 <= 60)
    {
      if (v31->var0 != -1)
      {
LABEL_23:
        LogPrintF( (uint64_t)v31,  (uint64_t)"-[CUBluetoothClient _btAccessoryStreamStateChanged:device:]",  0x3Cu,  (uint64_t)"### Stream state changed: BTDeviceGetAddressString failed: %#m\n",  v7,  v8,  v9,  v10,  v30 - 16);
        return;
      }

      if (_LogCategory_Initialize((uint64_t)v31, 0x3Cu))
      {
        size_t v31 = self->_ucat;
        goto LABEL_23;
      }
    }
  }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_btConnectedDevices,  "setObject:forKeyedSubscript:",  0LL,  v21);
    -[CUBluetoothClient updateStatusFlags](self, "updateStatusFlags");
    uint64_t v28 = _Block_copy(self->_deviceDisconnectedHandler);
    uint64_t v29 = v28;
    if (v28)
    {
      v30[0] = MEMORY[0x1895F87A8];
      v30[1] = 3221225472LL;
      v30[2] = __54__CUBluetoothClient__handleDeviceDisconnected_reason___block_invoke;
      v30[3] = &unk_189F33060;
      BOOL v32 = v28;
      size_t v31 = v26;
      -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v30);
    }

    goto LABEL_24;
  }

  int v19 = v14;
  __int128 v20 = self->_ucat;
  if (v20->var0 <= 60)
  {
    if (v20->var0 != -1)
    {
LABEL_11:
      LogPrintF( (uint64_t)v20,  (uint64_t)"-[CUBluetoothClient _handleDeviceDisconnected:reason:]",  0x3Cu,  (uint64_t)"### BTDeviceGetAddressString failed: %#m\n",  v15,  v16,  v17,  v18,  v19 - 16);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v20, 0x3Cu))
    {
      __int128 v20 = self->_ucat;
      goto LABEL_11;
    }
  }

      v14[12] = a1;
      *((_BYTE *)v14 + 105) = 0;
      if (*((_BYTE *)v14 + 107)) {
        [v14 _btEnsureStarted];
      }
      else {
        [v14 _btEnsureStopped];
      }
      break;
    case 1:
      unint64_t v17 = v9[28];
      if (*v17 > 30) {
        goto LABEL_25;
      }
      if (*v17 != -1) {
        goto LABEL_10;
      }
      if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
      {
        unint64_t v17 = v14[28];
LABEL_10:
        LogPrintF( (uint64_t)v17,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTSession detached: %#m\n",  v10,  v11,  v12,  v13,  a3 - 16);
      }

      if (*((_BYTE *)v14 + 107))
      {
        *((_BYTE *)v14 + 177) = 1;
        [v14 _btEnsureStarted];
      }

      break;
    case 1:
      unint64_t v17 = v9[28];
      if (*v17 > 30) {
        break;
      }
      if (*v17 != -1) {
        goto LABEL_10;
      }
      if (_LogCategory_Initialize((uint64_t)v17, 0x1Eu))
      {
        unint64_t v17 = v14[28];
LABEL_10:
        LogPrintF( (uint64_t)v17,  (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResu lt, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTPairingAgent stopped: %#m\n",  v10,  v11,  v12,  v13,  a4 - 16);
      }

      break;
    case 2:
      uint64_t v18 = v9[28];
      if (*v18 > 30) {
        break;
      }
      if (*v18 != -1) {
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v18, 0x1Eu))
      {
        uint64_t v18 = v14[28];
LABEL_13:
        LogPrintF( (uint64_t)v18,  (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResu lt, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTPairingAgent attempt started: %#m\n",  v10,  v11,  v12,  v13,  a4 - 16);
      }

      break;
    case 3:
      int v19 = v9[28];
      if (*v19 > 30) {
        break;
      }
      if (*v19 != -1) {
        goto LABEL_16;
      }
      if (_LogCategory_Initialize((uint64_t)v19, 0x1Eu))
      {
        int v19 = v14[28];
LABEL_16:
        LogPrintF( (uint64_t)v19,  (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResu lt, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTPairingAgent attempt complete: %#m\n",  v10,  v11,  v12,  v13,  a4 - 16);
        break;
      }

      break;
    default:
      int v16 = v9[28];
      if (*v16 > 30) {
        break;
      }
      if (*v16 != -1) {
        goto LABEL_7;
      }
      if (_LogCategory_Initialize((uint64_t)v16, 0x1Eu))
      {
        int v16 = v14[28];
LABEL_7:
        LogPrintF( (uint64_t)v16,  (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResu lt, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTPairingAgent unknown event: %d, %#m\n",  v10,  v11,  v12,  v13,  a2);
      }

      break;
  }

  objc_autoreleasePoolPop(v8);
}

      if (self->_channelFD < 0) {
        -[CUBluetoothScalablePipe _setupPipe](self, "_setupPipe");
      }
      if (!self->_btPeerKVORegistered)
      {
        -[CBScalablePipe peer](*p_btPipe, "peer");
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
        int v19 = v18;
        if (v18)
        {
          [v18 addObserver:self forKeyPath:@"hostState" options:0 context:0];
          self->_btPeerKVORegistered = 1;
          -[CUBluetoothScalablePipe _handleBTPeerHostStateChanged](self, "_handleBTPeerHostStateChanged");
        }
      }

      return;
    }

    uint64_t v21 = self->_identifier;
    ucat = self->_ucat;
    var0 = ucat->var0;
    if (v21)
    {
      if (var0 > 30) {
        goto LABEL_53;
      }
      if (var0 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)ucat, 0x1Eu))
        {
LABEL_53:
          unsigned int v23 = 1LL;
          self->_btEndpointRegistering = 1;
          priority = self->_priority;
          if (priority == 3) {
            unsigned int v23 = 2LL;
          }
          if (priority == 1) {
            unsigned int v25 = 0LL;
          }
          else {
            unsigned int v25 = v23;
          }
          dispatch_time_t v26 = self->_btPipeManager;
          getCBScalablePipeOptionTransport();
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v29 = v27;
          v30[0] = &unk_189F52380;
          [MEMORY[0x189603F68] dictionaryWithObjects:v30 forKeys:&v29 count:1];
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
          -[CBScalablePipeManager registerEndpoint:type:priority:options:]( v26,  "registerEndpoint:type:priority:options:",  v21,  0LL,  v25,  v28);

          p_btPipe = &self->_btPipe;
          if (!self->_btPipe) {
            return;
          }
          goto LABEL_19;
        }

        ucat = self->_ucat;
      }

      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothScalablePipe _ensureStarted]",  0x1Eu,  (uint64_t)"Register endpoint '%@'\n",  v5,  v6,  v7,  v8,  (char)v21);
      goto LABEL_53;
    }

    if (var0 > 90) {
      return;
    }
    if (var0 == -1)
    {
      ucat = self->_ucat;
    }

    int v16 = "### No identifier to register endpoint\n";
LABEL_28:
    __int128 v20 = 90;
LABEL_34:
    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothScalablePipe _ensureStarted]",  v20,  (uint64_t)v16,  v5,  v6,  v7,  v8,  v31);
    return;
  }

  uint64_t v4 = -[CBScalablePipeManager state](self->_btPipeManager, "state");
  if (v4 == 5) {
    goto LABEL_11;
  }
  unsigned int v9 = v4;
  int v10 = self->_ucat;
  if (v10->var0 > 20) {
    return;
  }
  if (v10->var0 == -1)
  {
    int v10 = self->_ucat;
  }

  if (v9 > 0xA) {
    uint64_t v11 = "?";
  }
  else {
    uint64_t v11 = off_189F30C28[v9];
  }
  LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUBluetoothScalablePipe _ensureStarted]",  0x14u,  (uint64_t)"Waiting until Bluetooth ready (%s)\n",  v5,  v6,  v7,  v8,  (char)v11);
}

      int v16 = v13;
      NSErrorWithOSStatusF((const char *)0xFFFFE59FLL);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUBluetoothScalablePipe _ensureStopped:](self, "_ensureStopped:", v15, v16);

LABEL_20:
      uint64_t v4 = v17;
      break;
    case 4uLL:
      -[CUBluetoothScalablePipe _ensureStarted](self, "_ensureStarted");
      goto LABEL_20;
    default:
      break;
  }

      objc_storeStrong((id *)&self->_btPipe, a4);
      -[CUBluetoothScalablePipe _ensureStarted](self, "_ensureStarted");
      goto LABEL_20;
    }

    __int128 v20 = self->_ucat;
    uint64_t v6 = v40;
    if (v20->var0 <= 30)
    {
      if (v20->var0 != -1)
      {
LABEL_9:
        [v6 name];
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF( (uint64_t)v20,  (uint64_t)"-[CUBluetoothScalablePipe scalablePipeManager:pipeDidConnect:]",  0x1Eu,  (uint64_t)"Ignoring pipeDidConnect for unknown identifier ('%@' not '%@')\n",  v22,  v23,  v24,  v25,  (char)v21);

LABEL_20:
        uint64_t v6 = v40;
        goto LABEL_21;
      }

      dispatch_time_t v26 = _LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu);
      uint64_t v6 = v40;
      if (v26)
      {
        __int128 v20 = self->_ucat;
        goto LABEL_9;
      }
    }
  }

LABEL_21:
            v2 = v83;
          }

          uint64_t v6 = [v82 countByEnumeratingWithState:&v99 objects:v110 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }

      -[NSMutableDictionary objectForKeyedSubscript:](v2->_resolvableAccessoriesMap, "objectForKeyedSubscript:", v4);
      unint64_t v17 = (id)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2->_resolvableAccessoriesMap,  "setObject:forKeyedSubscript:",  0LL,  v4);
      [v17 accessory];
      v82 = (id)objc_claimAutoreleasedReturnValue();
      [v82 setDelegate:0];
      ucat = v2->_ucat;
      if (ucat->var0 <= 30)
      {
        if (ucat->var0 != -1)
        {
          int v19 = v80;
          goto LABEL_26;
        }

        int v19 = v80;
        if (_LogCategory_Initialize((uint64_t)v2->_ucat, 0x1Eu))
        {
          ucat = v2->_ucat;
LABEL_26:
          [v17 irkData];
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue();
          [v82 name];
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUHomeKitManager _updateAccessories]",  0x1Eu,  (uint64_t)"ResolvableAccessory removed: %@, %{mask}, '%@'\n",  v21,  v22,  v23,  v24,  v4);
        }

        v77 = 1;
        goto LABEL_32;
      }

      v77 = 1;
LABEL_29:
      int v19 = v80;
LABEL_32:

      uint64_t v3 = v19 + 1;
    }

    while (v3 != v78);
    unsigned int v25 = [obj countByEnumeratingWithState:&v103 objects:v111 count:16];
    v78 = v25;
  }

  while (v25);
LABEL_38:

  -[HMHomeManager currentAccessory](v2->_homeManager, "currentAccessory");
  dispatch_time_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  [v26 uniqueIdentifier];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();

  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  -[HMHomeManager homes](v2->_homeManager, "homes");
  v70 = (id)objc_claimAutoreleasedReturnValue();
  v72 = [v70 countByEnumeratingWithState:&v91 objects:v108 count:16];
  if (!v72) {
    goto LABEL_83;
  }
  v71 = *(void *)v92;
  v79 = v27;
  while (2)
  {
    uint64_t v28 = 0LL;
    while (2)
    {
      if (*(void *)v92 != v71) {
        objc_enumerationMutation(v70);
      }
      obja = v28;
      uint64_t v29 = *(void **)(*((void *)&v91 + 1) + 8LL * (void)v28);
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      [v29 accessories];
      char v30 = (void *)objc_claimAutoreleasedReturnValue();
      size_t v31 = [v30 countByEnumeratingWithState:&v87 objects:v107 count:16];
      if (v31)
      {
        BOOL v32 = v31;
        int v33 = *(void *)v88;
        v81 = v30;
        do
        {
          uint64_t v34 = 0LL;
          do
          {
            if (*(void *)v88 != v33) {
              objc_enumerationMutation(v30);
            }
            uint64_t v35 = *(void **)(*((void *)&v87 + 1) + 8 * v34);
            [v35 uniqueIdentifier];
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue();
            uint64_t v37 = v36;
            if (v36 && ([v36 isEqual:v27] & 1) == 0)
            {
              [v35 device];
              int v38 = (void *)objc_claimAutoreleasedReturnValue();
              if (v38)
              {
                if ((objc_opt_respondsToSelector() & 1) != 0)
                {
                  [v38 rapportIRK];
                  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();
                  [v39 data];
                  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();

                  -[NSMutableDictionary objectForKeyedSubscript:]( v2->_resolvableAccessoriesMap,  "objectForKeyedSubscript:",  v37);
                  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue();
                  uint64_t v42 = v41;
                  v85 = v40;
                  if (v41)
                  {
                    [v41 irkData];
                    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
                    v44 = v40;
                    int v45 = v43;
                    if (v44 == v45)
                    {

                      v2 = v83;
                      char v30 = v81;
                    }

                    else
                    {
                      v46 = v45;
                      char v30 = v81;
                      if ((v44 == 0LL) != (v45 != 0LL))
                      {
                        v76 = -[CUHomeKitResolvableAccessory isEqual:](v44, "isEqual:", v45);

                        v2 = v83;
                        if ((v76 & 1) != 0)
                        {
LABEL_74:

                          uint64_t v27 = v79;
                          goto LABEL_75;
                        }
                      }

                      else
                      {

                        v2 = v83;
                      }

                      [v42 setIrkData:v44];
                      p_var0 = &v2->_ucat->var0;
                      if (*p_var0 > 30) {
                        goto LABEL_73;
                      }
                      if (*p_var0 != -1) {
                        goto LABEL_67;
                      }
                      if (!_LogCategory_Initialize((uint64_t)p_var0, 0x1Eu))
                      {
LABEL_73:
                        v77 = 1;
                        v2 = v83;
                        goto LABEL_74;
                      }

                      p_var0 = &v83->_ucat->var0;
LABEL_67:
                      v69 = [v35 name];
                      LogPrintF( (uint64_t)p_var0,  (uint64_t)"-[CUHomeKitManager _updateAccessories]",  0x1Eu,  (uint64_t)"ResolvableAccessory updated: %@, %{mask}, '%@'\n",  v56,  v57,  v58,  v59,  (char)v37);
                      v77 = 1;
                      v44 = (CUHomeKitResolvableAccessory *)v69;
LABEL_70:
                      v2 = v83;
                    }

                    goto LABEL_74;
                  }

                  v44 = objc_alloc_init(&OBJC_CLASS___CUHomeKitResolvableAccessory);
                  -[CUHomeKitResolvableAccessory setAccessory:](v44, "setAccessory:", v35);
                  -[CUHomeKitResolvableAccessory setIrkData:](v44, "setIrkData:", v40);
                  resolvableAccessoriesMap = v2->_resolvableAccessoriesMap;
                  if (!resolvableAccessoriesMap)
                  {
                    unsigned int v48 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
                    uint32_t v49 = v2->_resolvableAccessoriesMap;
                    v2->_resolvableAccessoriesMap = v48;

                    resolvableAccessoriesMap = v2->_resolvableAccessoriesMap;
                  }

                  -[NSMutableDictionary setObject:forKeyedSubscript:]( resolvableAccessoriesMap,  "setObject:forKeyedSubscript:",  v44,  v37);
                  [v35 setDelegate:v2];
                  v50 = v2->_ucat;
                  char v30 = v81;
                  if (v50->var0 <= 30)
                  {
                    if (v50->var0 != -1) {
                      goto LABEL_62;
                    }
                    if (_LogCategory_Initialize((uint64_t)v50, 0x1Eu))
                    {
                      v50 = v83->_ucat;
LABEL_62:
                      [v35 name];
                      v68 = (void *)objc_claimAutoreleasedReturnValue();
                      LogPrintF( (uint64_t)v50,  (uint64_t)"-[CUHomeKitManager _updateAccessories]",  0x1Eu,  (uint64_t)"ResolvableAccessory added: %@, %{mask}, '%@'\n",  v51,  v52,  v53,  v54,  (char)v37);
                    }
                  }

                  v77 = 1;
                  goto LABEL_70;
                }
              }

              else
              {
                [v35 setDelegate:v2];
              }

          char v30 = v21[20];
          if (v30)
          {
            NSErrorWithOSStatusF(v8);
            size_t v31 = (void *)objc_claimAutoreleasedReturnValue();
            (*(void (**)(uint64_t, void *, void *))(v30 + 16))(v30, v18, v31);

            uint64_t v21 = *(uint64_t **)(a1 + 32);
          }

          [v21 _invalidated];
          goto LABEL_22;
        }

        uint64_t v28 = (int *)v19[4];
        if (*v28 <= 60)
        {
          if (*v28 == -1)
          {
            int v19 = *(void **)(a1 + 32);
            uint64_t v28 = (int *)v19[4];
          }

          LogPrintF( (uint64_t)v28,  (uint64_t)"-[CUNANPublisher publisher:dataTerminatedForHandle:reason:]_block_invoke",  0x3Cu,  (uint64_t)"### WFA DataSession terminated untracked: '%@', %@, %#m\n",  v14,  v15,  v16,  v17,  v19[15]);
        }

    goto LABEL_20;
  }

  size_t v31 = self->_ucat;
  if (v31->var0 <= 90)
  {
    if (v31->var0 == -1)
    {
      size_t v31 = self->_ucat;
    }

    LogPrintF( (uint64_t)v31,  (uint64_t)"-[CUNANSubscriber _subscriber:lostDiscoveryResultForPublishID:address:]",  0x5Au,  (uint64_t)"### WFA lost result missing identifier\n",  v16,  v17,  v18,  v19,  v34);
  }
}
}

  a1 = *v12;
  if ((_DWORD)a1) {
    goto LABEL_23;
  }
  uint64_t v11 = *(unsigned __int8 *)(v9 + 112);
LABEL_21:
  if (v11) {
    goto LABEL_22;
  }
LABEL_24:
  *(_DWORD *)(v9 + 304) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = -1;
  objc_storeStrong((id *)(v9 + 392), *(id *)(v8 + 24));
  *(void *)(v8 + 24) = 0LL;
  unsigned int v25 = 0LL;
  [(id)v9 _setupIOAndReturnError:&v25];
  uint64_t v21 = v25;
  if (!v21)
  {
    [(id)v9 _processReads:0];
    [(id)v9 _processWrites:0];
  }

    int v19 = 0LL;
    goto LABEL_10;
  }

  uint64_t v11 = data;
  uint64_t v12 = objc_alloc(MEMORY[0x189603F48]);
  uint64_t v13 = [v12 initWithBytes:v11 length:length];
  uint64_t v14 = *a4;
  *a4 = (void *)v13;

LABEL_9:
  int v19 = 1LL;
LABEL_10:

  return v19;
}

  if (a5) {
    *a5 = v13 - a3;
  }
  if (a6) {
    *a6 = (v26 & 3) + 1LL;
  }
  uint64_t result = 0LL;
  if (a7) {
    *a7 = v12;
  }
  return result;
}

  if (a2) {
LABEL_20:
  }
    *a2 = v4;
  return Mutable;
}

        uint64_t v12 = 0LL;
        uint64_t v13 = -6750;
        break;
      default:
        uint64_t v12 = 0LL;
        uint64_t v13 = -6762;
        break;
    }
  }

  else
  {
    unsigned int v9 = (a4 - 160);
LABEL_3:
    int v10 = *(const __CFDictionary **)(a1 + 24);
    if (v10)
    {
      Value = CFDictionaryGetValue(v10, (const void *)v9);
      uint64_t v12 = Value;
      if (Value)
      {
        CFRetain(Value);
        uint64_t v13 = 0;
      }

      else
      {
        uint64_t v13 = -6708;
      }
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = -6732;
    }
  }

  *a5 = v8;
  *a6 = v13;
  return v12;
}

  uint64_t v21 = calloc(1uLL, 0x58uLL);
  if (v21)
  {
    if (a3)
    {
      int v22 = malloc(a3);
      v21[1] = v22;
      if (v22)
      {
        memcpy(v22, a2, a3);
        v21[2] = a3;
        unsigned int v23 = a5 <= 1 ? 1LL : a5;
        dispatch_source_t v24 = malloc(v23);
        v21[3] = v24;
        if (v24)
        {
          if (a5) {
            memcpy(v24, a4, a5);
          }
          v21[4] = a5;
          unsigned int v25 = a7[1];
          *((_OWORD *)v21 + 3) = *a7;
          *((_OWORD *)v21 + 4) = v25;
          v21[10] = a6;
          v21[5] = *(void *)(a1 + 368) + mach_absolute_time();
          dispatch_time_t v26 = &gPairingResumeStateList;
          do
          {
            uint64_t v27 = v26;
            dispatch_time_t v26 = (uint64_t *)*v26;
          }

          while (v26);
          *uint64_t v21 = 0LL;
          *uint64_t v27 = (uint64_t)v21;
          uint64_t v21 = 0LL;
        }
      }
    }
  }

  pthread_mutex_unlock(&gPairingGlobalLock);
  _PairingFreeResumeState(v21);
}

    if (v27) {
      CFRelease(v27);
    }
    memset_s(__s, 0x84uLL, 0, 0x84uLL);
    int v33 = LODWORD(v88[0]);
    if (LODWORD(v88[0]) == -25293) {
      break;
    }
    if (!LODWORD(v88[0]) || !v8) {
      goto LABEL_72;
    }
    _PairingSessionDeleteIdentity(a1, v30, v31, v32, v15, v16, v17, v18);
    uint64_t v34 = *(char **)(a1 + 248);
    if (!v34 || (uint64_t v35 = *(void *)(a1 + 256)) == 0)
    {
      RandomBytes(bytes, 0x10uLL);
      uint64_t v36 = v92 & 0xF | 0x40;
      v92 = v92 & 0xF | 0x40;
      uint64_t v37 = v94 & 0x3F | 0x80;
      v94 = v94 & 0x3F | 0x80;
      uint64_t v34 = __str;
      snprintf( __str,  0x25uLL,  "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",  bytes[0],  bytes[1],  bytes[2],  bytes[3],  bytes[4],  bytes[5],  v36,  v93,  v37,  v95,  v96,  v97,  v98,  v99,  v100,  v101);
      uint64_t v35 = strlen(__str);
    }

    cced25519_make_key_pair_compat();
    SNPrintF( (uint64_t)__s,  132LL,  "%.3H+%.3H",  v38,  v39,  v40,  v41,  v42,  v89,  32LL,  32LL,  v88,  32LL,  32LL,  v67,  v68,  v69,  v70,  v71,  v72);
    v86 = 0LL;
    ASPrintF(&v86);
    uint64_t v43 = v86;
    if (v86)
    {
      strlen(__s);
      int v33 = KeychainAddFormatted( 0LL,  (uint64_t)"{%kO=%O%kO=%O%kO=%O%kO=%i%kO=%s%kO=%O%kO=%.*s%kO=%O%kO=%D%kO=%O}",  v44,  v45,  v46,  v47,  v48,  v49,  v85);
      free(v43);
      if ((_DWORD)v33)
      {
        uint64_t v6 = (uint64_t)v75;
        uint64_t v7 = v76;
        uint64_t v8 = v74;
      }

      else
      {
        uint64_t v6 = (uint64_t)v75;
        uint64_t v7 = v76;
        uint64_t v8 = v74;
        if (!v76) {
          goto LABEL_32;
        }
        v54 = strndup(v34, v35);
        if (v54)
        {
          *v76 = v54;
LABEL_32:
          if (v75)
          {
            v55 = v89[1];
            *v75 = v89[0];
            v75[1] = v55;
          }

          if (a5)
          {
            v56 = v88[1];
            *(_OWORD *)a5 = v88[0];
            *(_OWORD *)(a5 + 16) = v56;
          }

          v57 = *(int **)(a1 + 16);
          if (*v57 <= 50)
          {
            if (*v57 != -1) {
              goto LABEL_38;
            }
            if (_LogCategory_Initialize((uint64_t)v57, 0x32u))
            {
              v57 = *(int **)(a1 + 16);
LABEL_38:
              LogPrintF( (uint64_t)v57,  (uint64_t)"OSStatus _PairingSessionCreateIdentityKeychain(PairingSessionRef, char **, uint8_t *, uint8_t *)",  0x32u,  (uint64_t)"Created %@: %.*s\n",  v50,  v51,  v52,  v53,  *(void *)(a1 + 760));
            }
          }

          int v33 = 0LL;
          goto LABEL_41;
        }

        int v33 = 4294960568LL;
      }
    }

    else
    {
      int v33 = 4294960568LL;
    }

  CFRelease(v13);
  CFRelease(v15);
  if (v11) {
LABEL_20:
  }
    CFRelease(v11);
LABEL_21:

  return started;
}

uint64_t _AsyncConnection_StartConnectNow(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v10 = (char *)calloc(1uLL, 0xB8uLL);
  if (!v10) {
    return 4294960568LL;
  }
  uint64_t v11 = v10;
  ++*(_DWORD *)a1;
  *(_DWORD *)int v10 = 1;
  *((void *)v10 + 2) = a1;
  uint64_t v12 = (sockaddr *)(v10 + 24);
  int v13 = *(unsigned __int8 *)(a3 + 1);
  if (*(_BYTE *)(a3 + 1))
  {
    if (v13 == 30)
    {
      sockaddr v14 = *(sockaddr *)a3;
      uint64_t v18 = *(void *)(a3 + 16);
      *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 24);
      *((void *)v10 + 5) = v18;
LABEL_16:
      *uint64_t v12 = v14;
      if ((a5 & 0x80000000) != 0) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }

    if (v13 == 2)
    {
      sockaddr v14 = *(sockaddr *)a3;
      goto LABEL_16;
    }
  }

  else
  {
    v10[25] = 0;
  }

  if ((a5 & 0x80000000) != 0)
  {
LABEL_17:
    unsigned int v17 = -a5;
    int v15 = v10[25];
    goto LABEL_18;
  }

LABEL_8:
  int v15 = v10[25];
  BOOL v16 = v15 == 30 || v15 == 2;
  if (!v16 || *((_WORD *)v10 + 13)) {
    goto LABEL_24;
  }
  unsigned int v17 = a5;
LABEL_18:
  if (v15 == 30 || v15 == 2) {
    *((_WORD *)v10 + 13) = bswap32(v17) >> 16;
  }
LABEL_24:
  *((_DWORD *)v10 + 14) = a5;
  *((CFAbsoluteTime *)v10 + 20) = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *((void *)v11 + 13) = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = 0LL;
    *((void *)v11 + 15) = *(void *)(a2 + 120);
    *((void *)v11 + 17) = *(void *)(a2 + 136);
    *((void *)v11 + 19) = *(void *)(a2 + 152);
    v11[45] = *(_DWORD *)(a2 + 180);
  }

  if ((*(_BYTE *)(a1 + 21) & 0x20) != 0)
  {
    v11[15] = -1;
LABEL_37:
    _AsyncConnection_ConnectHandler((uint64_t)v11);
    uint64_t v21 = 0LL;
    goto LABEL_38;
  }

  int v20 = socket(*((unsigned __int8 *)v11 + 25), 1, 6);
  v11[15] = v20;
  if (v20 < 0)
  {
    if (!*__error())
    {
LABEL_71:
      uint64_t v21 = 4294960596LL;
      goto LABEL_38;
    }

    uint64_t v21 = *__error();
    if ((_DWORD)v21) {
      goto LABEL_38;
    }
    int v20 = v11[15];
  }

  uint64_t v21 = SocketSetNonBlocking(v20, 1);
  if (!(_DWORD)v21)
  {
    unsigned int v22 = *(_DWORD *)(a1 + 20);
    if ((v22 & 1) != 0)
    {
      SocketSetP2P(v11[15], 1);
      unsigned int v22 = *(_DWORD *)(a1 + 20);
    }

    if ((v22 & 0x30) != 0)
    {
      int v49 = (v22 >> 2) & 0xC;
      if (setsockopt(v11[15], 0xFFFF, 4225, &v49, 4u))
      {
        uint64_t v27 = *(int **)(a1 + 144);
        if (*v27 <= 90)
        {
          if (*v27 != -1)
          {
LABEL_35:
            LogPrintF( (uint64_t)v27,  (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x5Au,  (uint64_t)"## SO_RESTRICTIONS failed: 0x%X, %#m",  v23,  v24,  v25,  v26,  v49);
            goto LABEL_44;
          }

          if (_LogCategory_Initialize((uint64_t)v27, 0x5Au))
          {
            uint64_t v27 = *(int **)(a1 + 144);
            goto LABEL_35;
          }
        }
      }
    }

  if (a3) {
    *a3 = Parameter;
  }
  return v6;
}

  if (*((void *)&v10 + 1)) {
    CFRelease(*((CFTypeRef *)&v10 + 1));
  }
  if (a3) {
    *a3 = v6;
  }
  return v7;
}

      -[CUAudioRequest audioPlayer](self->_currentRequest, "audioPlayer");
      uint64_t v11 = (id)objc_claimAutoreleasedReturnValue();
      [v11 play];
    }
  }

    self->_startAdvertisingCalled = 0;
    -[CBPeripheralManager stopAdvertising](self->_peripheralManager, "stopAdvertising");
  }

  peripheralManager = self->_peripheralManager;
  if (peripheralManager)
  {
    -[CBPeripheralManager setDelegate:](peripheralManager, "setDelegate:", 0LL);
    uint64_t v11 = self->_peripheralManager;
    self->_peripheralManager = 0LL;
  }

  self->_btAccessoryEventsRegistered = 0;
  int v10 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerRemoveCallbacks[0])( (uint64_t)self->_btAccessoryManager,  (uint64_t)&self->_btAccessoryCallbacks);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = self->_ucat;
    if (v12->var0 <= 60)
    {
      if (v12->var0 != -1)
      {
LABEL_11:
        LogPrintF( (uint64_t)v12,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerRemoveCallbacks failed: %#m\n",  v2,  v3,  v4,  v5,  v11 - 16);
        goto LABEL_13;
      }

      if (_LogCategory_Initialize((uint64_t)v12, 0x3Cu))
      {
        uint64_t v12 = self->_ucat;
        goto LABEL_11;
      }
    }
  }

    free(v6);
    v3 *= 2LL;
    --v4;
  }

  while (v4);
  v55 = v12;
LABEL_57:
  NSErrorWithOSStatusF((const char *)v55);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  if (v54)
  {
    v60 = self->_ucat;
    if (v60->var0 <= 60)
    {
      if (v60->var0 == -1)
      {
        v60 = self->_ucat;
      }

      LogPrintF( (uint64_t)v60,  (uint64_t)"-[CUBluetoothClient _handlePairingStatusChanged]",  0x3Cu,  (uint64_t)"### Handle pairing status change failed: %{error}\n",  v56,  v57,  v58,  v59,  (char)v54);
    }
  }

    if (v14 >= v31) {
      sockaddr v14 = v31;
    }
    if (v14) {
      memcpy(__dst, v5, v14);
    }
    uint64_t v31 = v14;
    v5 += v14;
    os_channel_set_slot_properties();
    if (v5 == v8)
    {
      size_t v5 = v8;
      goto LABEL_16;
    }
  }

  if (!v7) {
    return v5 - a3;
  }
LABEL_16:
  BOOL v16 = os_channel_advance_slot();
  if (v16)
  {
    uint64_t v21 = v16;
    unsigned int v22 = self->_ucat;
    if (v22->var0 <= 60)
    {
      if (v22->var0 != -1) {
        goto LABEL_19;
      }
      if (_LogCategory_Initialize((uint64_t)v22, 0x3Cu))
      {
        unsigned int v22 = self->_ucat;
LABEL_19:
        LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUBluetoothScalablePipe _writeBytes:length:]",  0x3Cu,  (uint64_t)"### Advance tx slot failed: %#m\n",  v17,  v18,  v19,  v20,  v21);
      }
    }
  }

  uint64_t v23 = os_channel_sync();
  if (v23)
  {
    uint64_t v28 = v23;
    int v29 = self->_ucat;
    if (v29->var0 <= 60)
    {
      if (v29->var0 != -1) {
        goto LABEL_24;
      }
      if (_LogCategory_Initialize((uint64_t)v29, 0x3Cu))
      {
        int v29 = self->_ucat;
LABEL_24:
        LogPrintF( (uint64_t)v29,  (uint64_t)"-[CUBluetoothScalablePipe _writeBytes:length:]",  0x3Cu,  (uint64_t)"### Sync tx failed: %#m\n",  v24,  v25,  v26,  v27,  v28);
      }
    }
  }

  return v5 - a3;
}

  sessionTimer = self->_sessionTimer;
  uint64_t v11 = dispatch_time(0LL, (unint64_t)(v8 * 1000000000.0));
  dispatch_source_set_timer((dispatch_source_t)sessionTimer, v11, 0xFFFFFFFFFFFFFFFFLL, 0x37E11D600uLL);
}

    -[CUFileClient _run](self, "_run");
LABEL_9:

    goto LABEL_10;
  }

  unsigned int v9 = v7;
  if (!v7)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5D4LL);
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_storeStrong(v19 + 5, v9);
  if (!v7) {
    goto LABEL_9;
  }
LABEL_10:
  v8[2](v8);

  _Block_object_dispose(&v18, 8);
}

  map = self->_cdb.map;
  if (map)
  {
    munmap(map, self->_cdb.size);
    self->_cdb.map = 0LL;
  }

  uint64_t v11 = self->_fd;
  self->_cdb.loop = 0;
  self->_cdb.fd = v11;
  if (!fstat(v11, &v16) && v16.st_size <= 0xFFFFFFFFLL)
  {
    uint64_t v12 = (char *)mmap(0LL, v16.st_size, 1, 1, v11, 0LL);
    self->_cdb.size = v16.st_size;
    self->_cdb.map = v12;
  }

  return 1;
}

    int v10 = 0;
    goto LABEL_9;
  }

  uint64_t v8 = 0LL;
  unsigned int v9 = v14;
LABEL_3:
  if (HIDWORD(v9) || self->_fd < 0) {
    goto LABEL_8;
  }
  self->_cdb.loop = 0;
  int v10 = (int)cdb_findnext(&self->_cdb, v5, v9) > 0;
LABEL_9:

  return v10;
}
  }

  probeSourceV4 = self->_probeSourceV4;
  if (probeSourceV4) {
    dispatch_source_cancel((dispatch_source_t)probeSourceV4);
  }
  probeSourceV6 = self->_probeSourceV6;
  if (probeSourceV6) {
    dispatch_source_cancel((dispatch_source_t)probeSourceV6);
  }
}

    uint64_t v24 = self->_localeIdentifier;
    if (v24
      || self->_localize
      && ([MEMORY[0x189603F90] autoupdatingCurrentLocale],
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(),
          [v41 localeIdentifier],
          uint64_t v24 = (NSString *)objc_claimAutoreleasedReturnValue(),
          v41,
          v24))
    {
      -[__CFString setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v24, @"_li");
    }

    if (self->_pinType)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v25, @"_pt");
    }

    if (self->_localize)
    {
      uint64_t v26 = (void *)MEMORY[0x189607968];
      peerDeviceClass = self->_peerDeviceClass;
      if ((int)peerDeviceClass <= 0)
      {
        if (GestaltGetDeviceClass_sOnce != -1)
        {
          v53 = (void *)MEMORY[0x189607968];
          dispatch_once(&GestaltGetDeviceClass_sOnce, &__block_literal_global_13042);
          uint64_t v26 = v53;
        }

        peerDeviceClass = GestaltGetDeviceClass_deviceClass;
      }

      [v26 numberWithInt:peerDeviceClass];
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v28, @"_pdc");
    }
  }

  int v29 = OPACKEncoderCreateDataMutable(v22, 0, &v58);
  if (v29)
  {
    int v30 = v29;
    (*((void (**)(void))self->_sendMessageDataHandler + 2))();

    goto LABEL_25;
  }

  if (v58) {
    dispatch_source_t v46 = v58;
  }
  else {
    dispatch_source_t v46 = -6700;
  }
  v58 = v46;
  v47 = self->_ucat;
  if (v47->var0 > 30) {
    goto LABEL_66;
  }
  if (v47->var0 == -1)
  {
    v47 = self->_ucat;
  }

  NSPrintF();
  int v48 = (void *)objc_claimAutoreleasedReturnValue();
  LogPrintF( (uint64_t)v47,  (uint64_t)"-[CUPairingSession _receivedData:flags:]",  0x1Eu,  (uint64_t)"### Encode message failed: %@",  v49,  v50,  v51,  v52,  (char)v48);

LABEL_66:
LABEL_27:
  if (v57) {
    free(v57);
  }
LABEL_29:
  uint64_t v32 = v58;
  if (v58)
  {
    uint64_t v33 = (void *)MEMORY[0x189607870];
    uint64_t v34 = *MEMORY[0x189607670];
    uint64_t v59 = *MEMORY[0x1896075E0];
    uint64_t v35 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v58, 0, 0));
    uint64_t v36 = (void *)v35;
    int v37 = @"?";
    if (v35) {
      int v37 = (const __CFString *)v35;
    }
    v60[0] = v37;
    [MEMORY[0x189603F68] dictionaryWithObjects:v60 forKeys:&v59 count:1];
    int v38 = (void *)objc_claimAutoreleasedReturnValue();
    [v33 errorWithDomain:v34 code:v32 userInfo:v38];
    socklen_t v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUPairingSession _completed:](self, "_completed:", v39);
  }
}

  -[PBSMediaRemoteServiceInterface dismissPinDialogWithToken:]( self->_pbsMediaService,  "dismissPinDialogWithToken:",  self->_pinDialogToken);
  pinDialogToken = self->_pinDialogToken;
  self->_pinDialogToken = 0LL;

LABEL_9:
  BOOL v16 = (char *)getprogname();
  if (!v16)
  {
    if (!v4)
    {
      int v19 = @"PIN_DIALOG_TITLE";
      uint64_t v18 = @"PIN_DIALOG_MESSAGE";
      goto LABEL_27;
    }

    goto LABEL_20;
  }

  unsigned int v17 = stristr(v16, "lockdownd");
  if (v17) {
    uint64_t v18 = @"PIN_DIALOG_MESSAGE_MAC";
  }
  else {
    uint64_t v18 = @"PIN_DIALOG_MESSAGE";
  }
  if (v17) {
    int v19 = @"PIN_DIALOG_TITLE_MAC";
  }
  else {
    int v19 = @"PIN_DIALOG_TITLE";
  }
  if (!v17 && v4)
  {
LABEL_20:
    peerDeviceClass = self->_peerDeviceClass;
    if (peerDeviceClass == 3) {
      uint64_t v18 = @"VISUAL_PAIRING_IPAD_DIALOG_MESSAGE";
    }
    else {
      uint64_t v18 = @"VISUAL_PAIRING_IPHONE_DIALOG_MESSAGE";
    }
    if (peerDeviceClass == 3) {
      int v19 = @"VISUAL_PAIRING_IPAD_DIALOG_TITLE";
    }
    else {
      int v19 = @"VISUAL_PAIRING_IPHONE_DIALOG_TITLE";
    }
  }

  if (!self->_wifiTrafficManager)
  {
    int v10 = objc_alloc_init(&OBJC_CLASS___CUWiFiManager);
    wifiTrafficManager = self->_wifiTrafficManager;
    self->_wifiTrafficManager = v10;

    if (self->_label) {
      -[CUWiFiManager setLabel:](self->_wifiTrafficManager, "setLabel:");
    }
    -[CUWiFiManager activateWithCompletion:](self->_wifiTrafficManager, "activateWithCompletion:", 0LL);
  }

  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___CUWiFiTrafficPeer);
  v14[0] = self->_peerAddr.sa;
  *(in6_addr *)((char *)v14 + 12) = *(in6_addr *)((char *)&self->_peerAddr.v6.sin6_addr + 4);
  -[CUWiFiTrafficPeer setPeerIP:](v12, "setPeerIP:", v14);
  -[CUWiFiTrafficPeer setTrafficFlags:](v12, "setTrafficFlags:", trafficFlags);
  v15[0] = v12;
  [MEMORY[0x189603F18] arrayWithObjects:v15 count:1];
  int v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWiFiManager setTrafficPeers:](self->_wifiTrafficManager, "setTrafficPeers:", v13);

  self->_trafficFlagsApplied = trafficFlags;
}

  uint64_t v8 = *(void *)(a3 + 88);
  if (v8)
  {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v7);
    unsigned int v9 = *(void **)(a3 + 88);
    *(void *)(a3 + 88) = 0LL;
  }

  if (!v7)
  {
    [(id)a3 _processReads:0];
    [(id)a3 _processWrites:0];
  }

  if (*(_BYTE *)(a3 + 112)) {
    [(id)a3 _invalidated];
  }
  if ((a1 & 0x80000000) == 0 && close(a1) && *__error()) {
    __error();
  }
}

  if (!self->_maxConnectionCount
    || -[NSMutableSet count](self->_connections, "count") < (unint64_t)self->_maxConnectionCount)
  {
    uint64_t v11 = _Block_copy(self->_connectionAcceptHandler);
    if (v11)
    {
      uint64_t v12 = v11;
      (*((void (**)(void *, uint64_t))v11 + 2))(v11, v8);

      return;
    }

    int v13 = objc_alloc_init(&OBJC_CLASS___CUTCPConnection);
    -[CUTCPConnection setDispatchQueue:](v13, "setDispatchQueue:", self->_dispatchQueue);
    -[CUTCPConnection setFlags:](v13, "setFlags:", self->_flags);
    if (self->_label) {
      -[CUTCPConnection setLabel:](v13, "setLabel:");
    }
    -[CUTCPConnection setNetLinkManager:](v13, "setNetLinkManager:", self->_netLinkManager);
    -[CUTCPConnection setSocketFD:](v13, "setSocketFD:", v8);
    if ((self->_flags & 0x40) == 0)
    {
      v33[0] = MEMORY[0x1895F87A8];
      v33[1] = 3221225472LL;
      v33[2] = __39__CUTCPServer__handleConnectionAccept___block_invoke;
      v33[3] = &unk_189F32B98;
      v33[4] = self;
      uint64_t v34 = v13;
      v35[0] = *(_OWORD *)v37;
      *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)&v37[12];
      -[CUTCPConnection setServerInvalidationHandler:](v34, "setServerInvalidationHandler:", v33);
    }

    connectionPrepareHandler = (void (**)(id, CUTCPConnection *))self->_connectionPrepareHandler;
    if (connectionPrepareHandler) {
      connectionPrepareHandler[2](connectionPrepareHandler, v13);
    }
    uint64_t v32 = 0LL;
    int v15 = -[CUTCPConnection activateDirectAndReturnError:](v13, "activateDirectAndReturnError:", &v32);
    int v20 = v32;
    if (v15)
    {
      if ((self->_flags & 0x40) == 0)
      {
        connections = self->_connections;
        if (!connections)
        {
          unsigned int v22 = (NSMutableSet *)objc_alloc_init(MEMORY[0x189603FE0]);
          uint64_t v23 = self->_connections;
          self->_connections = v22;

          connections = self->_connections;
        }

        -[NSMutableSet addObject:](connections, "addObject:", v13);
      }

      connectionStartedHandler = (void (**)(id, CUTCPConnection *))self->_connectionStartedHandler;
      if (connectionStartedHandler) {
        connectionStartedHandler[2](connectionStartedHandler, v13);
      }

      int v13 = 0LL;
      goto LABEL_32;
    }

    uint64_t v31 = self->_ucat;
    if (v31->var0 <= 30)
    {
      if (v31->var0 == -1)
      {
        uint64_t v31 = self->_ucat;
      }

      LogPrintF( (uint64_t)v31,  (uint64_t)"-[CUTCPServer _handleConnectionAccept:]",  0x1Eu,  (uint64_t)"### Activate accepted connection failed: %{error}\n",  v16,  v17,  v18,  v19,  (char)v20);
    }

  if (*(_BYTE *)(v9 + 56)) {
    int v13 = 4;
  }
  else {
    int v13 = 3;
  }
  *(_DWORD *)(v8 + 48) = v13;
  objc_storeStrong((id *)(*(void *)(v9 + 40) + 40LL), *(id *)(v9 + 48));
  return [*(id *)(v9 + 40) _run];
}

    [v10 _updateActionCategories];
  }
}

  getAWDLTrafficRegistrationServiceSidecar[0]();
  sockaddr v14 = (void *)objc_claimAutoreleasedReturnValue();
  int v15 = v59;
  BOOL v16 = v14;
  if (v16 == v15)
  {

    goto LABEL_13;
  }

  unsigned int v17 = v16;
  if ((v59 == 0LL) == (v16 != 0LL))
  {

    goto LABEL_15;
  }

  uint64_t v18 = [v15 isEqual:v16];

  if ((v18 & 1) != 0)
  {
LABEL_13:
    int v13 = 512;
    goto LABEL_58;
  }

  int v10 = -[NSMutableSet anyObject](self->_xpcCnxSet, "anyObject");
  uint64_t v11 = (void *)v10;
  if (v10)
  {
    [*(id *)(v10 + 24) remoteObjectProxy];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

  uint64_t v12 = -[NSMutableSet anyObject](self->_xpcCnxSet, "anyObject");
  int v13 = (void *)v12;
  if (v12)
  {
    [*(id *)(v12 + 24) remoteObjectProxyWithErrorHandler:v4];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v6 = 0LL;
  }

LABEL_12:
  return v6;
}

    uint64_t result = _HTTPServerCloseConnection(v7);
    goto LABEL_9;
  }

  return result;
}

    ++v8;
  }

  *a3 = a1;
  *a4 = v8 + 2 - a1;
  int v13 = "\x03\x02";
  if (v8[2] == 1) {
    int v13 = "\x03\x01";
  }
  if (v8[2]) {
    sockaddr v14 = v13;
  }
  else {
    sockaddr v14 = (const char *)&unk_186B4B910;
  }
  *a5 = v14;
  *a6 = 2LL;
  *a7 = v8 + 3;
  return 1LL;
}

  if (CFDictionaryGetCount(v15) < 1)
  {
    CFRelease(v15);
    Data = 0LL;
  }

  else
  {
    Data = CFPropertyListCreateData(0LL, v15, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
    CFRelease(v15);
    if (!Data)
    {
      int v20 = 4294960596LL;
      goto LABEL_23;
    }
  }

  _PairingSessionDeletePeer(a1, a2, a3, v19, v11, v12, v13, v14);
  v28[0] = 0LL;
  ASPrintF(v28);
  uint64_t v21 = v28[0];
  if (!v28[0]) {
    goto LABEL_22;
  }
  for (i = 0LL; i != 64; i += 2LL)
  {
    uint64_t v23 = (char *)&v28[1] + i + 7;
    uint64_t v24 = *a4++;
    *uint64_t v23 = a0123456789abcd[(unint64_t)v24 >> 4];
    v23[1] = a0123456789abcd[v24 & 0xF];
  }

  int v29 = 0;
  uint64_t v25 = KeychainAddFormatted( 0LL,  (uint64_t)"{%kO=%O%kO=%O%kO=%O%kO=%i%kO=%s%kO=%O%kO=%.*s%kO=%O%kO=%O%kO=%D%kO=%O}",  *MEMORY[0x18960B870],  *MEMORY[0x18960BA88],  *MEMORY[0x18960B928],  *(void *)(a1 + 784),  *MEMORY[0x18960BE78],  *MEMORY[0x18960BAA8],  *MEMORY[0x18960BB38]);
  free(v21);
  if (!(_DWORD)v25)
  {
    int v20 = 0LL;
    goto LABEL_17;
  }

  int v20 = v25;
LABEL_23:
  uint64_t v27 = *(int **)(a1 + 16);
  if (*v27 > 60) {
    goto LABEL_17;
  }
  if (*v27 != -1) {
    goto LABEL_25;
  }
  if (_LogCategory_Initialize((uint64_t)v27, 0x3Cu))
  {
    uint64_t v27 = *(int **)(a1 + 16);
LABEL_25:
    LogPrintF( (uint64_t)v27,  (uint64_t)"OSStatus _PairingSessionSavePeerKeychain(PairingSessionRef, const void *, size_t, const uint8_t *, PairingPermissions)",  0x3Cu,  (uint64_t)"### Save %@ %.*s failed: %#m\n",  v11,  v12,  v13,  v14,  *(void *)(a1 + 784));
  }

  if (a1 != a2)
  {
    *a4 = a1;
    *a5 = a2 - a1;
    int v13 = 1LL;
    if (!a6) {
      return v13;
    }
    goto LABEL_14;
  }

  int v13 = 0LL;
  a2 = a1;
  if (a6) {
LABEL_14:
  }
    *a6 = a2;
  return v13;
}

  if (a1) {
    *a1 = v5;
  }
  return v3;
}

LABEL_44:
    int v29 = v11[15];
    int v48 = 1;
    setsockopt(v29, 0xFFFF, 4130, &v48, 4u);
    if (*(_DWORD *)(a1 + 180)) {
      a4 = *(_DWORD *)(a1 + 180);
    }
    if (a4)
    {
      int v30 = *((unsigned __int8 *)v11 + 25);
      if ((*(_BYTE *)(a1 + 20) & 8) != 0
        || v30 == 2 && *((unsigned __int8 *)v11 + 28) == 169 && *((unsigned __int8 *)v11 + 29) == 254)
      {
        SocketSetBoundInterface(v11[15], v30, a4);
      }
    }

    int v50 = 1;
    setsockopt(v11[15], 6, 1, &v50, 4u);
    SocketSetBufferSize(v11[15], 4097, *(_DWORD *)(a1 + 56));
    SocketSetBufferSize(v11[15], 4098, *(_DWORD *)(a1 + 60));
    uint64_t v35 = *(int **)(a1 + 144);
    if (*v35 <= 50)
    {
      if (*v35 != -1)
      {
LABEL_54:
        LogPrintF( (uint64_t)v35,  (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const void *, uint32_t, int)",  0x32u,  (uint64_t)"Connecting to %##a, interface %d\n",  v31,  v32,  v33,  v34,  (char)v12);
        goto LABEL_56;
      }

      if (_LogCategory_Initialize((uint64_t)v35, 0x32u))
      {
        uint64_t v35 = *(int **)(a1 + 144);
        goto LABEL_54;
      }
    }

  if (v41 <= 90 && (v41 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))) {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)",  0x5Au,  (uint64_t)"### Bonjour NAN found failed: %@, %#m\n",  v5,  v6,  v7,  v8,  (char)a2);
  }
}

          uint64_t v11 = (void *)v30;
          uint64_t v26 = v74;
          uint64_t v27 = v68;
        }
      }

      else
      {
        uint64_t v26 = v74;
      }

      CUNormalizePhoneNumber(v26);
      int v49 = (void *)objc_claimAutoreleasedReturnValue();
      if (v49)
      {
        uint64_t v36 = v49;
        int v50 = (const char *)[v36 UTF8String];
        v51 = strlen(v50);
        CC_SHA256(v50, v51, md);
        int v30 = [objc_alloc(MEMORY[0x189603F48]) initWithBytes:md length:32];

        if (gLogCategory_CUAppleIDClient <= 30
          && (gLogCategory_CUAppleIDClient != -1
           || _LogCategory_Initialize((uint64_t)&gLogCategory_CUAppleIDClient, 0x1Eu)))
        {
          LogPrintF( (uint64_t)&gLogCategory_CUAppleIDClient,  (uint64_t)"-[CUAppleIDClient _validatePeerHashes:]",  0x1Eu,  (uint64_t)"Validating peer phone hash: %@\n",  v52,  v53,  v54,  v55,  v30);
        }

        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v56 = CFArrayGetTypeID();
        CFDictionaryGetTypedValue(v73, @"ValidatedPhoneHashes", v56, 0LL);
        int v37 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v35 = [v37 countByEnumeratingWithState:&v77 objects:v93 count:16];
        if (v35)
        {
          v69 = v36;
          v57 = *(void *)v78;
LABEL_54:
          v58 = 0LL;
          while (1)
          {
            if (*(void *)v78 != v57) {
              objc_enumerationMutation(v37);
            }
            uint64_t v59 = *(void **)(*((void *)&v77 + 1) + 8 * v58);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              NSDataWithHex((char *)[v59 UTF8String], -1, 22, 0, 0);
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              if (gLogCategory_CUAppleIDClient <= 30
                && (gLogCategory_CUAppleIDClient != -1
                 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUAppleIDClient, 0x1Eu)))
              {
                LogPrintF( (uint64_t)&gLogCategory_CUAppleIDClient,  (uint64_t)"-[CUAppleIDClient _validatePeerHashes:]",  0x1Eu,  (uint64_t)"Attempting match against: %@\n",  v60,  v61,  v62,  v63,  (char)v64);
              }

              uint64_t v65 = [v64 isEqual:v30];

              if ((v65 & 1) != 0) {
                goto LABEL_66;
              }
            }

            if (v35 == ++v58)
            {
              uint64_t v35 = [v37 countByEnumeratingWithState:&v77 objects:v93 count:16];
              if (v35) {
                goto LABEL_54;
              }
              goto LABEL_67;
            }
          }
        }

      return;
    }

    -[CUBLEAdvertiser _advertiseParameters](self, "_advertiseParameters");
    uint64_t v31 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    uint64_t v32 = self->_ucat;
    if (v32->var0 <= 30)
    {
      if (v32->var0 == -1)
      {
        uint64_t v32 = self->_ucat;
      }

      -[CUBLEAdvertiser _advertiseParametersSummary:](self, "_advertiseParametersSummary:", v31);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUBLEAdvertiser _ensureStarted]",  0x1Eu,  (uint64_t)"Advertiser start: %@\n",  v34,  v35,  v36,  v37,  (char)v33);
    }

  ((void (*)(uint64_t))softLinkBTSessionDetachWithQueue_2062[0])((uint64_t)&self->_btSession);
  self->_btSession = 0LL;
LABEL_45:
  self->_btSessionStarted = 0;
  btLocalDeviceAddr = self->_btLocalDeviceAddr;
  self->_btLocalDevice = 0LL;
  self->_btLocalDeviceAddr = 0LL;

  self->_btAccessoryManager = 0LL;
  if (!self->_btPeripheralManager) {
    goto LABEL_53;
  }
  uint64_t v23 = self->_ucat;
  if (v23->var0 <= 30)
  {
    if (v23->var0 == -1)
    {
      uint64_t v23 = self->_ucat;
    }

    LogPrintF( (uint64_t)v23,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x1Eu,  (uint64_t)"CBPeripheralManager stop\n",  v19,  v20,  v21,  v22,  v28);
  }

  selfAccessoryMediaSystemCounterpart = self->_selfAccessoryMediaSystemCounterpart;
  self->_selfAccessoryMediaSystemCounterpart = 0LL;

  uint64_t v41 = 1;
LABEL_45:

  size_t v61 = self->_selfAccessoryMediaSystemName;
  if (!v61) {
    goto LABEL_51;
  }
  __int128 v62 = self->_ucat;
  if (v62->var0 <= 30)
  {
    if (v62->var0 == -1)
    {
      __int128 v62 = self->_ucat;
    }

    LogPrintF( (uint64_t)v62,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystem name updated: '%@', HK clear",  v57,  v58,  v59,  v60,  (char)v61);
  }

      if (v36)
      {
        selfAccessoryUser = v36;
        int v50 = self;
      }

      else
      {
        selfAccessoryUser = self->_selfAccessoryUser;
        int v50 = 0LL;
      }

      -[HMUser setDelegate:](selfAccessoryUser, "setDelegate:", v50);
      objc_storeStrong((id *)&self->_selfAccessoryUser, v36);
LABEL_48:
      selfAccessoryUpdatedHandler = (void (**)(void))self->_selfAccessoryUpdatedHandler;
      if (selfAccessoryUpdatedHandler) {
        selfAccessoryUpdatedHandler[2]();
      }
LABEL_50:
      v52 = -[HMAccessory applicationData](self->_selfAccessory, "applicationData");
      [v52 dictionary];
      v53 = (void *)objc_claimAutoreleasedReturnValue();

      selfAccessoryAppData = self->_selfAccessoryAppData;
      v55 = v53;
      v56 = selfAccessoryAppData;
      if (v55 == v56)
      {

LABEL_62:
        -[CUHomeKitManager _updateSelfAccessoryMediaAccess](self, "_updateSelfAccessoryMediaAccess");
        -[CUHomeKitManager _updateSelfAccessoryMediaSystem](self, "_updateSelfAccessoryMediaSystem");
        -[CUHomeKitManager _updateSelfAccessorySiriAccess](self, "_updateSelfAccessorySiriAccess");

        return;
      }

      v57 = v56;
      if ((v55 == 0LL) != (v56 != 0LL))
      {
        v58 = -[NSDictionary isEqual:](v55, "isEqual:", v56);

        if ((v58 & 1) != 0) {
          goto LABEL_62;
        }
      }

      else
      {
      }

      __int128 v63 = self->_ucat;
      if (v63->var0 <= 30)
      {
        if (v63->var0 != -1)
        {
LABEL_58:
          LogPrintF( (uint64_t)v63,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryIfNeeded]",  0x1Eu,  (uint64_t)"SelfAccessory AppData changed: %##@",  v59,  v60,  v61,  v62,  (char)v55);
          goto LABEL_60;
        }

        if (_LogCategory_Initialize((uint64_t)v63, 0x1Eu))
        {
          __int128 v63 = self->_ucat;
          goto LABEL_58;
        }
      }

            uint64_t v11 = 0LL;
            goto LABEL_64;
          }

          unsigned int v22 = v21;
          [v8 setObject:v21 forKeyedSubscript:*MEMORY[0x18960BE78]];
        }

        if ((a3 & 0x80000) == 0)
        {
          uint64_t v23 = (void *)MEMORY[0x189604DE0];
          switch(self->_syncType)
          {
            case 0:
              break;
            case 1:
              goto LABEL_48;
            case 2:
              uint64_t v23 = (void *)MEMORY[0x189604DE8];
              goto LABEL_48;
            case 3:
              uint64_t v23 = (void *)MEMORY[0x18960BAB0];
LABEL_48:
              [v8 setObject:*v23 forKeyedSubscript:*MEMORY[0x18960BAA8]];
              break;
            default:
              if (!a4) {
                goto LABEL_44;
              }
              NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
              uint64_t v11 = 0LL;
              *a4 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_64;
          }
        }

        if ((a3 & 0x20) != 0) {
          [v8 setObject:MEMORY[0x189604A88] forKeyedSubscript:*MEMORY[0x18960BE70]];
        }
        type = self->_type;
        if (type) {
          [v8 setObject:type forKeyedSubscript:*MEMORY[0x18960BA88]];
        }
        userDescription = self->_userDescription;
        if (userDescription) {
          [v8 setObject:userDescription forKeyedSubscript:*MEMORY[0x18960B918]];
        }
        if ((a3 & 0x80000) == 0)
        {
          viewHint = self->_viewHint;
        }

        if ((a3 & 0x40000) != 0)
        {
          [v8 setObject:*MEMORY[0x18960BDA8] forKeyedSubscript:*MEMORY[0x18960BDA0]];
          if ((a3 & 8) == 0)
          {
LABEL_60:
            if ((a3 & 0x10000) == 0) {
              goto LABEL_61;
            }
            goto LABEL_69;
          }
        }

        else if ((a3 & 8) == 0)
        {
          goto LABEL_60;
        }

        [v8 setObject:MEMORY[0x189604A88] forKeyedSubscript:*MEMORY[0x18960BE28]];
        if ((a3 & 0x10000) == 0)
        {
LABEL_61:
          if ((a3 & 0x20000) == 0)
          {
LABEL_63:
            uint64_t v11 = v8;
LABEL_64:

            goto LABEL_65;
          }

              uint64_t v24 = 0LL;
              goto LABEL_45;
            }

            if (v15 == ++v17)
            {
              int v15 = [v13 countByEnumeratingWithState:&v35 objects:v40 count:16];
              if (v15) {
                goto LABEL_14;
              }
              break;
            }
          }
        }

        uint64_t v23 = v33;
        uint64_t v24 = (void *)[v33 copy];
        uint64_t v8 = v31;
        uint64_t v7 = v32;
        unsigned int v9 = v30;
LABEL_45:

        goto LABEL_46;
      }

      if (a5)
      {
        uint64_t v25 = (objc_class *)objc_opt_class();
        NSStringFromClass(v25);
        int v29 = (void *)objc_claimAutoreleasedReturnValue();
        NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

    else if (a5)
    {
      if ((_DWORD)v11) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = 4294941996LL;
      }
      NSErrorWithOSStatusF((const char *)v11);
      uint64_t v24 = 0LL;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_46;
    }

    uint64_t v24 = 0LL;
LABEL_46:

    goto LABEL_47;
  }

  if ((v6 & 1) != 0) {
    int v10 = 458752;
  }
  else {
    int v10 = 327680;
  }
  [v7 _attributesDictionaryWithFlags:v10 | (v6 & 8) error:a5];
  unsigned int v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9) {
    goto LABEL_10;
  }
  uint64_t v24 = 0LL;
LABEL_47:

  return v24;
}

          unsigned int v17 = 0;
LABEL_51:

          int v13 = v20;
          goto LABEL_52;
        }

        if (v20)
        {
          if (a5)
          {
            uint64_t v26 = v20;
            goto LABEL_24;
          }
        }

        else
        {
          uint64_t v40 = 0LL;
          [v18 encodedDataAndReturnError:&v40];
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
          socklen_t v39 = v40;
          if (v35)
          {
            uint64_t v21 = v35;
            int v19 = (char *)[v21 bytes];
            unsigned int v22 = [v21 length];
            uint64_t v42 = v22;
            int v20 = v39;
            goto LABEL_15;
          }

          if (!a5)
          {
            uint64_t v21 = 0LL;
            unsigned int v17 = 0;
            int v20 = v39;
            goto LABEL_51;
          }

          uint64_t v26 = v39;
          if (v39)
          {
LABEL_24:
            uint64_t v27 = v26;
            int v20 = v27;
            uint64_t v21 = 0LL;
LABEL_50:
            unsigned int v17 = 0;
            *a5 = v27;
            goto LABEL_51;
          }

          uint64_t v36 = NSErrorWithOSStatusF((const char *)0xFFFFE596LL);
          *a5 = v36;

          int v20 = 0LL;
        }

        uint64_t v21 = 0LL;
        goto LABEL_44;
      }

      if (a5)
      {
        if (v25) {
          goto LABEL_11;
        }
        uint64_t v34 = NSErrorWithOSStatusF((const char *)0xFFFFE596LL);
        *a5 = v34;
      }
    }

    sockaddr v14 = 0LL;
    goto LABEL_37;
  }

  if (a5)
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5A7LL);
    unsigned int v17 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    unsigned int v17 = 0;
  }

      unsigned int v22 = v22->ifa_next;
      if (!v22) {
        goto LABEL_47;
      }
    }

    int v50 = 0;
    SocketGetInterfaceInfo(v5, ifa_name, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, (uint64_t)&v50);
    uint64_t v33 = self->_ucat;
    if (v33->var0 <= 9)
    {
      if (v33->var0 != -1)
      {
LABEL_37:
        LogPrintF( (uint64_t)v33,  (uint64_t)"-[CUNetInterfaceMonitor _networkInterfacesChanged:]",  9u,  (uint64_t)"Network interface: Nm '%s', Type %s\n",  v29,  v30,  v31,  v32,  (char)ifa_name);
        goto LABEL_38;
      }

      if (_LogCategory_Initialize((uint64_t)v33, 9u))
      {
        uint64_t v33 = self->_ucat;
        goto LABEL_37;
      }
    }

    deviceChangedHandler = (void (**)(id, CUWiFiDevice *, uint64_t))self->_deviceChangedHandler;
    if (deviceChangedHandler) {
      deviceChangedHandler[2](deviceChangedHandler, v11, v20);
    }
    goto LABEL_46;
  }

  int v37 = self->_ucat;
  int v38 = v46;
  if (v37->var0 <= 30)
  {
    if (v37->var0 == -1)
    {
      int v37 = self->_ucat;
    }

    LogPrintF( (uint64_t)v37,  (uint64_t)"-[CUWiFiScanner _scanWiFiProcessResult:]",  0x1Eu,  (uint64_t)"WiFi scan found: %@\n",  v31,  v32,  v33,  v34,  (char)v11);
  }

      uint64_t v18 = _LogOutputSysLog_Setup((uint64_t)v4, v10);
      if ((_DWORD)v18) {
        goto LABEL_144;
      }
      goto LABEL_148;
    }

    v4[4] = (uint64_t)_LogOutputFile_Writer;
    *((_DWORD *)v4 + 10) = 2;
    int v19 = (FILE *)v4[7];
    if (v19)
    {
      if (v19 != (FILE *)*MEMORY[0x1895F89D0] && v19 != (FILE *)*MEMORY[0x1895F89E0]) {
        fclose(v19);
      }
    }

    v4[7] = 0LL;
    if (*v10 && strnicmpx(v10, -1LL, "stderr"))
    {
      if (strnicmpx(v10, -1LL, "stdout"))
      {
        uint64_t v21 = *v10;
        if (*v10)
        {
          while (1)
          {
            unsigned int v22 = v10;
            if (!v21) {
              goto LABEL_141;
            }
            while (v21 != 61)
            {
              uint64_t v23 = *++v22;
              uint64_t v21 = v23;
              if (!v23) {
                goto LABEL_141;
              }
            }

            uint64_t v24 = v22 + 1;
            uint64_t v25 = -1LL;
            for (j = 1LL; v22[j] && v22[j] != 59; ++j)
              ++v25;
            uint64_t v27 = &v22[j];
            uint64_t v28 = j - 1;
            int v29 = (uint64_t)(v22[j] ? v27 + 1 : &v22[j]);
            uint64_t v59 = (unsigned __int8 *)v29;
            if (j == 1) {
              goto LABEL_156;
            }
            uint64_t v32 = (char *)malloc(j);
            if (!v32) {
              goto LABEL_152;
            }
            uint64_t v33 = v32;
            memcpy(v32, v22 + 1, j - 1);
            v33[v28] = 0;
            uint64_t v34 = (void *)v4[6];
            if (v34) {
              free(v34);
            }
            v4[6] = (uint64_t)v33;
            uint64_t v35 = strrchr(v33, 47);
            if (v35)
            {
              uint64_t v36 = v35 - v33;
              if ((unint64_t)(v35 - v33) > 0x400)
              {
LABEL_156:
                size_t v5 = 4294960592LL;
                goto LABEL_142;
              }

              __memcpy_chk();
              v61[v36] = 0;
              mkpath(v61, 0x1F8u, 504);
              uint64_t v33 = (const char *)v4[6];
            }

            int v37 = fopen(v33, "a");
            v4[7] = (uint64_t)v37;
            if (!v37)
            {
              size_t v5 = 4294960541LL;
              goto LABEL_142;
            }

            fseeko(v37, 0LL, 2);
            v4[8] = ftello((FILE *)v4[7]);
LABEL_138:
            int v10 = v59;
            uint64_t v21 = *v59;
            if (!*v59) {
              goto LABEL_139;
            }
          }

          if (!strnicmpx(v10, v22 - v10, "roll"))
          {
            if (j < 2)
            {
              int v38 = 0LL;
            }

            else
            {
              int v38 = 0LL;
              while (1)
              {
                socklen_t v39 = *v24;
                uint64_t v40 = (char)v39;
                int v38 = (char)v39 + 10 * v38 - 48;
                if (++v24 >= v27) {
                  goto LABEL_105;
                }
              }

              uint64_t v41 = v38 << 20;
              else {
                uint64_t v42 = v24;
              }
              uint64_t v43 = v39 == 75;
              else {
                int v44 = v42;
              }
              if (v43) {
                v38 <<= 10;
              }
              if (v40 == 77) {
                ++v24;
              }
              else {
                uint64_t v24 = v44;
              }
              if (v40 == 77) {
                int v38 = v41;
              }
            }

    if (!v12) {
      goto LABEL_56;
    }
    uint64_t v18 = v12[1];
    if (v18 == 30)
    {
      if (v12[8] == 255) {
        goto LABEL_56;
      }
    }

    else if (v18 == 2 && (v12[4] & 0xF0) == 0xE0)
    {
      goto LABEL_56;
    }

    Bytes = TLV8GetBytes(a2, &a2[a3], 0, 1uLL, 1uLL, (char *)&__dst, 0LL, 0LL);
    if (!Bytes && __dst == 6)
    {
      UInt64 = TLV8GetUInt64(a2, &a2[a3], 14, (int *)&Bytes, 0LL);
      *(void *)(a1 + 376) = UInt64;
      if (Bytes) {
        goto LABEL_56;
      }
      uint64_t v36 = *(_OWORD *)(a1 + 462);
      __dst = *(_OWORD *)(a1 + 446);
      size_t v61 = v36;
      __int128 v62 = UInt64;
      CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  (char *)&__dst,  0x28uLL,  (uint64_t)"Pair-Resume-Response-Info",  25LL,  0x20uLL,  (uint64_t)__s);
      int v37 = (int8x16_t *)TLV8CopyCoalesced(a2, &a2[a3], 5, v68, (int *)&Bytes);
      uint64_t v24 = v37;
      if (!Bytes)
      {
        int v38 = v68[0];
        if (v68[0] <= 0xF)
        {
          int v29 = 0;
          Bytes = -6743;
LABEL_34:
          *a6 = v29;
          if (v66)
          {
            free(v66);
            v66 = 0LL;
          }

          if (!v24) {
            goto LABEL_58;
          }
LABEL_37:
          free(v24);
          goto LABEL_58;
        }

        socklen_t v39 = a5;
        uint64_t v40 = v68[0] - 16;
        v68[0] -= 16LL;
        Bytes = _chacha20_poly1305_decrypt_all( __s,  "PR-Msg02",  8LL,  0LL,  0LL,  v37,  v38 - 16,  v37,  (uint64_t)v37[-1].i64 + v38,  16LL);
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
        if (!Bytes)
        {
          int v48 = *(uint64_t (**)(int8x16_t *, size_t, void))(a1 + 88);
          if (!v48 || (Bytes = v48(v24, v40, *(void *)(a1 + 24))) == 0)
          {
            CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  (char *)&__dst,  0x28uLL,  (uint64_t)"Pair-Resume-Shared-Secret-Info",  30LL,  0x20uLL,  a1 + 638);
            _PairingSaveResumeState( a1,  *(const void **)(a1 + 296),  *(void *)(a1 + 304),  *(const void **)(a1 + 248),  *(void *)(a1 + 256),  *(void *)(a1 + 376),  (_OWORD *)(a1 + 638));
            *a4 = 0LL;
            int *v39 = 0LL;
            *(_BYTE *)(a1 + 120) = 3;
            int v49 = *(int **)(a1 + 16);
            if (*v49 <= 30)
            {
              if (*v49 == -1)
              {
                int v49 = *(int **)(a1 + 16);
              }

              LogPrintF( (uint64_t)v49,  (uint64_t)"OSStatus _ResumePairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size _t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-resume client done\n",  (uint64_t)a5,  (uint64_t)a6,  a7,  a8,  v57);
            }

  if ((a3 & 8) != 0 || !v18)
  {
    uint64_t v12 = v27;
    a8 = v28;
    a7 = v29;
    if (a4) {
      goto LABEL_56;
    }
  }

  else
  {
    if (a4)
    {
      a7 = v29;
      if (v20 < a5) {
        *(_BYTE *)(a4 + v20++) = v17;
      }
      uint64_t v12 = v27;
      a8 = v28;
    }

    else
    {
      uint64_t v12 = v27;
      a8 = v28;
      a7 = v29;
    }

    ++v19;
    if (a4)
    {
LABEL_56:
      if ((a3 & 1) != 0 && a5 > v20) {
        bzero((void *)(a4 + v20), a5 - v20);
      }
    }
  }

LABEL_73:
        v47 = *(int **)(a1 + 144);
        if (*v47 <= 50)
        {
          if (*v47 == -1)
          {
            v47 = *(int **)(a1 + 144);
          }

          LogPrintF( (uint64_t)v47,  (uint64_t)"OSStatus _AsyncConnection_StartConnectNow(AsyncConnectionRef, AsyncConnectionOperationRef, const vo id *, uint32_t, int)",  0x32u,  (uint64_t)"### Connect failed immediate: %##a, %#m\n",  v40,  v41,  v42,  v43,  (char)v12);
        }

  uint64_t v42 = !v28;

  return v42;
}

  if ((*(_DWORD *)(v14 + 4LL * *v15 + 60) & 0x10000) != 0)
  {
    if (a5 <= v20) {
      return 4294960545LL;
    }
    else {
      return 4294960579LL;
    }
  }

  else if (v19)
  {
    return 0LL;
  }

  else
  {
    return 4294960554LL;
  }

LABEL_77:
        v11[44] = v44;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 104), v11, (dispatch_function_t)_AsyncConnection_StartConnectFailed);
        return 0LL;
      }
    }

    goto LABEL_37;
  }

  v70 = _btSessionEventCallback_2077;
  v47 = self;

  var4 = self->_ucat->var4;
  -[CUBluetoothClient _internalDispatchQueue](v47, "_internalDispatchQueue");
  int v49 = (void *)objc_claimAutoreleasedReturnValue();
  int v50 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))softLinkBTSessionAttachWithQueue_2078[0])( (uint64_t)var4,  (uint64_t)&v70,  (uint64_t)v47,  v49);

  if (v50)
  {
    CFRelease(v47);
    v51 = (v50 + 310000);
    goto LABEL_79;
  }

  self->_btSessionAttaching = 1;
  v47->_btSessionStarted = 1;
LABEL_25:
  btSession = self->_btSession;
  if (!btSession) {
    goto LABEL_39;
  }
  if (self->_btConnectionEventsNeeded && !self->_btSessionAddedServiceCallback)
  {
    uint64_t v27 = self->_ucat;
    if (v27->var0 > 30) {
      goto LABEL_35;
    }
    if (v27->var0 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v27, 0x1Eu))
      {
LABEL_35:
        int v29 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTServiceAddCallbacks_2081[0])( (uint64_t)self->_btSession,  (uint64_t)_btServiceEventHandler_2059,  (uint64_t)self);
        if (!v29)
        {
          self->_btSessionAddedServiceCallback = 1;
          btSession = self->_btSession;
          if (!btSession) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }

        v66 = v29;
        v67 = self->_ucat;
        if (v67->var0 <= 60)
        {
          if (v67->var0 == -1)
          {
            v67 = self->_ucat;
          }

          LogPrintF( (uint64_t)v67,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x3Cu,  (uint64_t)"### BTSession add service callbacks failed: %#m\n",  v2,  v3,  v4,  v5,  v66 - 16);
        }

        return;
      }

      if (v14 == 13)
      {
        BOOL v16 = _Block_copy(self->_sleepWakeHandler);
        if (v16)
        {
          unsigned int v17 = (void (*)(void))v16[2];
          uint64_t v32 = v16;
LABEL_76:
          v17();
          BOOL v16 = v32;
          goto LABEL_77;
        }

        goto LABEL_77;
      }

      return;
    }

    uint64_t v24 = _Block_copy(self->_sleepWakeHandler);
    uint64_t v25 = v24;
    if (v24)
    {
      v33[0] = MEMORY[0x1895F87A8];
      v33[1] = 3221225472LL;
      v33[2] = __59__CUSleepWakeMonitor__sleepWakeHandlerForService_type_arg___block_invoke;
      v33[3] = &unk_189F31B08;
      uint64_t v34 = a4;
      v33[4] = self;
      v33[5] = a5;
      (*((void (**)(void *, uint64_t, void *))v24 + 2))(v24, 10LL, v33);
    }

    else
    {
      powerCnx = self->_powerCnx;
      if (!powerCnx) {
        return;
      }
      if (IOAllowPowerChange(powerCnx, (intptr_t)a5))
      {
        uint64_t v31 = self->_ucat;
        if (v31->var0 <= 90)
        {
          if (v31->var0 == -1)
          {
            uint64_t v31 = self->_ucat;
          }

          LogPrintF( (uint64_t)v31,  (uint64_t)"-[CUSleepWakeMonitor _sleepWakeHandlerForService:type:arg:]",  0x5Au,  (uint64_t)"### Ack failed (%s): %#m\n",  v27,  v28,  v29,  v30,  (char)v12);
        }
      }
    }

    uint64_t v35 = "?";
    goto LABEL_78;
  }

  if (wifiState == 20)
  {
    uint64_t v35 = "NotConnected";
    goto LABEL_78;
  }

  if (wifiState == 30)
  {
    uint64_t v35 = "Connecting";
    goto LABEL_78;
  }

  if (wifiState != 40) {
    goto LABEL_77;
  }
  uint64_t v35 = "Connected";
LABEL_78:
  int v37 = (char)v35;
  uint64_t v36 = "WiFi state monitor started, %s, %#{flags}\n";
LABEL_79:
  LogPrintF((uint64_t)v34, (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]", 0x1Eu, (uint64_t)v36, v29, v30, v31, v32, v37);
LABEL_80:
  if (!self->_wifiDeviceSetup) {
    -[CURetrier failed](self->_wifiRetrier, "failed");
  }
}

                        appended = 0LL;
                        void *v8 = v47;
                        return appended;
                      }

                      goto LABEL_104;
                    }

                    v126 = v128;
                    if (v125) {
                      memcpy(v128, v176, v125);
                    }
                  }

                  v176 = v179;
                  *(void *)&v177 = 0LL;
                  v178 = 0LL;
                  *v169 = v126;
                  *v166 = v125;
                  v173 = 0;
                  _PairingSessionReset(a1);
                }
              }

LABEL_38:
  _AsyncConnection_ReleaseOperation(v11);
  return v21;
}

    uint64_t v43 = v46;
    int v44 = *((_DWORD *)v18 + 60);
    if ((v44 & ~v46) != 0)
    {
      dispatch_source_t v45 = v18[28];
      if (*v45 <= 30)
      {
        if (*v45 == -1)
        {
          dispatch_source_t v45 = v18[28];
          int v44 = *((_DWORD *)v18 + 60);
          uint64_t v43 = v46;
        }

        LogPrintF( (uint64_t)v45,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEven t, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTService connect waiting for more services: %#{flags}\n",  v37,  v38,  v39,  v40,  v44 & ~v43);
      }

      goto LABEL_2;
    }

  *a6 = v9 - v8;
  if (v9 - v8 >= v7) {
    return 0;
  }
  else {
    return 35;
  }
}
}

  selfAccessoryMediaSystem = self->_selfAccessoryMediaSystem;
  self->_selfAccessoryMediaSystem = 0LL;

LABEL_39:
  int v49 = self->_selfAccessoryMediaSystemCounterpart;
  if (!v49) {
    goto LABEL_45;
  }
  int v50 = self->_ucat;
  if (v50->var0 <= 30)
  {
    if (v50->var0 == -1)
    {
      int v50 = self->_ucat;
    }
    v51 = -[HMAccessory uniqueIdentifier](v49, "uniqueIdentifier");
    v98 = -[HMAccessory name](v49, "name");
    LogPrintF( (uint64_t)v50,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystemCounterpart updated: %@ '%@', HK clear\n",  v52,  v53,  v54,  v55,  (char)v51);
  }

    uint64_t v6 = v46;
    goto LABEL_39;
  }

    if ((v50 & 8) != 0) {
      uint64_t v23 = 1;
    }
    uint64_t v34 = objc_alloc_init(&OBJC_CLASS___CUNetInterfaceInfo);
    [NSString stringWithUTF8String:ifa_name];
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUNetInterfaceInfo setInterfaceName:](v34, "setInterfaceName:", v35);
    if (*(_BYTE *)(ifa_addr + 1) == 2)
    {
      v55[0] = 0;
      SockAddrToString(ifa_addr, 1, v55);
      if (v55[0])
      {
        [NSString stringWithUTF8String:v55];
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUNetInterfaceInfo setIpv4String:](v34, "setIpv4String:", v36);
      }
    }

    [v21 setObject:v34 forKeyedSubscript:v35];

    goto LABEL_44;
  }

  uint64_t v23 = 0;
LABEL_47:
  [v21 allValues];
  int v37 = (NSArray *)objc_claimAutoreleasedReturnValue();
  interfaces = self->_interfaces;
  self->_interfaces = v37;

  socklen_t v39 = _Block_copy(self->_interfacesChangedHandler);
  uint64_t v40 = v39;
  if (v39) {
    (*((void (**)(void *))v39 + 2))(v39);
  }

  flags = self->_flags;
  if (v23 == flags) {
    goto LABEL_61;
  }
  if (!v49)
  {
    dispatch_source_t v46 = self->_ucat;
    if (v46->var0 <= 30)
    {
      if (v46->var0 == -1)
      {
        dispatch_source_t v46 = self->_ucat;
        flags = self->_flags;
      }

      LogPrintF( (uint64_t)v46,  (uint64_t)"-[CUNetInterfaceMonitor _networkInterfacesChanged:]",  0x1Eu,  (uint64_t)"Network interface flags changed: %#{flags} -> %#{flags}\n",  v41,  v42,  v43,  v44,  flags);
    }

    uint64_t v27 = v8;
LABEL_39:
    int v13 = v27;
    uint64_t v8 = v27;
    goto LABEL_40;
  }

  int v13 = 0LL;
  if (!v39)
  {
    socklen_t v39 = -6762;
    goto LABEL_40;
  }

  if ((a3 & 1) != 0 && v39 != -25293)
  {
    sockaddr v14 = objc_alloc_init(&OBJC_CLASS___CUPairingIdentity);

    [MEMORY[0x189607AB8] UUID];
    int v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUPairingIdentity setIdentifier:](v14, "setIdentifier:", v15);

    if ((a3 & 4) != 0 && self->_rpSelfIRK)
    {
      -[CUPairingIdentity setAltIRK:](v14, "setAltIRK:");
    }

    else
    {
      RandomBytes(bytes, 0x10uLL);
      CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  (uint64_t)bytes,  16LL,  "AltIRKSalt",  0xAuLL,  (uint64_t)"AltIRKInfo",  10LL,  0x10uLL,  (uint64_t)bytes);
      [MEMORY[0x189603F48] dataWithBytes:bytes length:16];
      BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUPairingIdentity setAltIRK:](v14, "setAltIRK:", v16);
    }

    cced25519_make_key_pair_compat();
    [MEMORY[0x189603F48] dataWithBytes:bytes length:32];
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUPairingIdentity setPublicKey:](v14, "setPublicKey:", v17);

    [MEMORY[0x189603F48] dataWithBytes:__s length:32];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUPairingIdentity setSecretKey:](v14, "setSecretKey:", v18);

    if (gLogCategory_CUPairingDaemon <= 30
      && (gLogCategory_CUPairingDaemon != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingDaemon, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_CUPairingDaemon,  (uint64_t)"-[CUPairingDaemon _copyOrCreateWithOptions:error:]",  0x1Eu,  (uint64_t)"Created %@\n",  v19,  v20,  v21,  v22,  (char)v14);
    }

    socklen_t v39 = -[CUPairingDaemon _saveIdentity:options:](self, "_saveIdentity:options:", v14, a3);
    if (v39)
    {
      int v13 = 0LL;
      uint64_t v8 = v14;
      goto LABEL_40;
    }

    if ((a3 & 2) == 0)
    {
      -[CUPairingIdentity setAltIRK:](v14, "setAltIRK:", 0LL);
      -[CUPairingIdentity setSecretKey:](v14, "setSecretKey:", 0LL);
    }

    uint64_t v27 = v14;
    goto LABEL_39;
  }

  uint64_t v36 = self->_groupID;
  if (v36)
  {
    int v37 = -[NSString UTF8String](v36, "UTF8String");
    if (v37)
    {
      int v38 = v37;
      if (!strcasecmp(v37, "left"))
      {
        socklen_t v39 = 1;
      }

      else if (!strcasecmp(v38, "right"))
      {
        socklen_t v39 = 2;
      }

      else if (!strcasecmp(v38, "case"))
      {
        socklen_t v39 = 4;
      }

      else if (!strcasecmp(v38, "leftRight"))
      {
        socklen_t v39 = 3;
      }

      else if (!strcasecmp(v38, "leftCase"))
      {
        socklen_t v39 = 5;
      }

      else if (!strcasecmp(v38, "rightCase"))
      {
        socklen_t v39 = 6;
      }

      else
      {
        socklen_t v39 = !strcasecmp(v38, "leftRightCase") ? 7 : 0;
      }
    }

    else
    {
      socklen_t v39 = 0;
    }

    if (v39 != self->_expectedComponents)
    {
      self->_expectedComponents = v39;
      self->_aggregate = v39 != 0;
      v14 |= 1u;
    }
  }

  uint64_t v40 = CFArrayGetTypeID();
  CFDictionaryGetTypedValue(v5, @"LEDs", v40, 0LL);
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v41 count])
  {
    LEDs = self->_LEDs;
    uint64_t v43 = v41;
    int v44 = LEDs;
    if (v43 == v44)
    {

      goto LABEL_91;
    }

    dispatch_source_t v45 = v44;
    if ((v43 == 0LL) != (v44 != 0LL))
    {
      dispatch_source_t v46 = -[NSArray isEqual:](v43, "isEqual:", v44);

      if ((v46 & 1) != 0) {
        goto LABEL_91;
      }
    }

    else
    {
    }

    v122 = v30;
    v123 = v14;
    v124 = self;
    v125 = v5;
    v47 = objc_alloc_init(MEMORY[0x189603FA8]);
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v129 = 0u;
    int v48 = v43;
    int v49 = -[NSArray countByEnumeratingWithState:objects:count:]( v48,  "countByEnumeratingWithState:objects:count:",  &v126,  v130,  16LL);
    if (v49)
    {
      int v50 = v49;
      v51 = *(void *)v127;
      do
      {
        for (i = 0LL; i != v50; ++i)
        {
          if (*(void *)v127 != v51) {
            objc_enumerationMutation(v48);
          }
          v53 = *(const __CFDictionary **)(*((void *)&v126 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v54 = objc_alloc_init(&OBJC_CLASS___CUPowerSourceLEDInfo);
            v55 = CFStringGetTypeID();
            v56 = (const char *)-[__CFDictionary UTF8String]( CFDictionaryGetTypedValue(v53, @"Color", v55, 0LL), "UTF8String");
            if (v56)
            {
              v57 = v56;
              if (!strcmp(v56, "Green"))
              {
                v58 = 1LL;
              }

              else if (!strcmp(v57, "Orange"))
              {
                v58 = 2LL;
              }

              else if (!strcmp(v57, "White"))
              {
                v58 = 3LL;
              }

              else
              {
                v58 = 0LL;
              }

              -[CUPowerSourceLEDInfo setLEDColor:](v54, "setLEDColor:", v58);
            }

            uint64_t v59 = CFStringGetTypeID();
            v60 = (const char *)-[__CFDictionary UTF8String]( CFDictionaryGetTypedValue(v53, @"State", v59, 0LL), "UTF8String");
            if (v60)
            {
              size_t v61 = v60;
              if (!strcmp(v60, "Off"))
              {
                __int128 v62 = 0LL;
              }

              else if (!strcmp(v61, "Solid"))
              {
                __int128 v62 = 1LL;
              }

              else
              {
                __int128 v62 = 2 * (strcmp(v61, "Blinking") == 0);
              }

              -[CUPowerSourceLEDInfo setLEDState:](v54, "setLEDState:", v62);
            }

            [v47 addObject:v54];
          }
        }

        int v50 = -[NSArray countByEnumeratingWithState:objects:count:]( v48,  "countByEnumeratingWithState:objects:count:",  &v126,  v130,  16LL);
      }

      while (v50);
    }

    __int128 v63 = [v47 copy];
    self = v124;
    v64 = v124->_LEDs;
    v124->_LEDs = (NSArray *)v63;

    sockaddr v14 = v123 | 1;
    size_t v5 = v125;
    int v30 = v122;
  }

    goto LABEL_26;
  }

  if (a3 <= 59)
  {
    if (a3 == 40)
    {
      -[CUWACSession _progress:info:](self, "_progress:info:", 120LL, v10);
      if (self->_easyConfigPreConfigState == 1)
      {
        self->_easyConfigPreConfigState = 4;
        -[CUWACSession _run](self, "_run");
      }

      goto LABEL_26;
    }

    if (a3 == 50)
    {
      uint64_t v11 = self;
      uint64_t v12 = 150LL;
      goto LABEL_25;
    }
  }

  else
  {
    switch(a3)
    {
      case '<':
        -[CUWACSession _progress:info:](self, "_progress:info:", 170LL, v10);
        uint64_t v11 = self;
        uint64_t v12 = 180LL;
        goto LABEL_25;
      case 'F':
        uint64_t v11 = self;
        uint64_t v12 = 190LL;
        goto LABEL_25;
      case 'd':
        uint64_t v11 = self;
        uint64_t v12 = 200LL;
LABEL_25:
        -[CUWACSession _progress:info:](v11, "_progress:info:", v12, v10);
        goto LABEL_26;
    }
  }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x8000LL);
        if ((v12 & 0x200) == 0)
        {
LABEL_29:
          if ((v12 & 0x4000) == 0) {
            goto LABEL_30;
          }
          goto LABEL_40;
        }

      if ((_DWORD)msg_control == *(_DWORD *)(a1 + 48) && *v10 == 828600425)
      {
        int v19 = v9[44];
        int v20 = v9[45];
        if (v19 < v20 && v20 != 255)
        {
          *((void *)v9 + 185) = v15;
          if (*(void *)(v9 + 28) != *(void *)(a1 + 16) || *(void *)(v9 + 36) != *(void *)(a1 + 24))
          {
            if (v20 == 1)
            {
              unsigned int v22 = CFDataCreate(0LL, v9 + 46, v15);
              if (v22)
              {
                uint64_t v23 = v22;
                uint64_t v24 = CFPropertyListCreateWithData(0LL, v22, 0LL, 0LL, 0LL);
                CFRelease(v23);
                if (v24)
                {
                  uint64_t v25 = CFGetTypeID(v24);
                  if (v25 == CFDictionaryGetTypeID())
                  {
                    uint64_t v26 = *(void (**)(CFPropertyListRef, void))(a1 + 96);
                    if (v26) {
                      v26(v24, *(void *)(a1 + 104));
                    }
                  }

                  CFRelease(v24);
                }
              }

              goto LABEL_53;
            }

            while (1)
            {
              uint64_t v27 = v4;
              uint64_t v4 = (uint64_t *)*v4;
              if (!v4) {
                goto LABEL_64;
              }
              uint64_t v28 = (uint64_t *)v4[2];
              int v29 = bswap64(*(uint64_t *)((char *)v28 + 12));
              int v30 = bswap64(*(void *)(v9 + 12));
              if (v29 == v30)
              {
                int v29 = bswap64(*(uint64_t *)((char *)v28 + 20));
                int v30 = bswap64(*(void *)(v9 + 20));
                if (v29 == v30) {
                  break;
                }
              }

              if (v29 < v30) {
                uint64_t v31 = -1;
              }
              else {
                uint64_t v31 = 1;
              }
              if ((v31 & 0x80000000) == 0) {
                goto LABEL_63;
              }
            }

            uint64_t v31 = 0;
LABEL_63:
            if (!v31)
            {
              uint64_t v34 = (const UInt8 **)(v4 + 2);
              uint64_t v35 = *((unsigned __int8 *)v28 + 44);
              if (v35 >= v19)
              {
                uint64_t v36 = v4 + 2;
LABEL_73:
                if (v35 == v19) {
                  goto LABEL_53;
                }
              }

              else
              {
                while (1)
                {
                  uint64_t v36 = v28;
                  uint64_t v28 = (uint64_t *)*v28;
                  if (!v28) {
                    break;
                  }
                  uint64_t v35 = *((unsigned __int8 *)v28 + 44);
                  if (v35 >= v19) {
                    goto LABEL_73;
                  }
                }
              }

              *(void *)unsigned int v9 = v28;
              *uint64_t v36 = v9;
              int v37 = *((_DWORD *)v4 + 6) + 1;
              *((_DWORD *)v4 + 6) = v37;
              if (v37 == v20)
              {
                --*(_DWORD *)(a1 + 64);
                *uint64_t v27 = *v4;
                Mutable = CFDataCreateMutable(0LL, 0LL);
                if (Mutable)
                {
                  socklen_t v39 = Mutable;
                  for (i = *v34; i; i = *(const UInt8 **)i)
                    CFDataAppendBytes(v39, i + 46, *((void *)i + 185));
                  uint64_t v41 = CFPropertyListCreateWithData(0LL, v39, 0LL, 0LL, 0LL);
                  CFRelease(v39);
                  if (v41)
                  {
                    uint64_t v42 = CFGetTypeID(v41);
                    if (v42 == CFDictionaryGetTypeID())
                    {
                      uint64_t v43 = *(void (**)(CFPropertyListRef, void))(a1 + 96);
                      if (v43) {
                        v43(v41, *(void *)(a1 + 104));
                      }
                    }

                    CFRelease(v41);
                  }
                }

                _IPCAgent_FreeMessage(v4);
              }

              return;
            }

          uint64_t v28 = dispatch_source_create(MEMORY[0x1895F8B60], v10, 0LL, *(dispatch_queue_t *)(a3 + 16));
          *(void *)(a3 + 184) = v28;
          if (!v28) {
            goto LABEL_53;
          }
          ++*(_DWORD *)(a3 + 180);
          CFRetain((CFTypeRef)a3);
          dispatch_set_context(*(dispatch_object_t *)(a3 + 184), (void *)a3);
          dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a3 + 184),  (dispatch_function_t)_HTTPClientReadHandler);
          dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a3 + 184),  (dispatch_function_t)_HTTPClientCancelHandler);
          dispatch_resume(*(dispatch_object_t *)(a3 + 184));
          int v29 = dispatch_source_create(MEMORY[0x1895F8B90], v10, 0LL, *(dispatch_queue_t *)(a3 + 16));
          *(void *)(a3 + 200) = v29;
          if (!v29)
          {
LABEL_53:
            unsigned int v9 = 4294960596LL;
            goto LABEL_5;
          }

          ++*(_DWORD *)(a3 + 180);
          CFRetain((CFTypeRef)a3);
          dispatch_set_context(*(dispatch_object_t *)(a3 + 200), (void *)a3);
          dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a3 + 200),  (dispatch_function_t)_HTTPClientWriteHandler);
          dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a3 + 200),  (dispatch_function_t)_HTTPClientCancelHandler);
          *(_BYTE *)(a3 + 208) = 1;
          uint64_t v34 = (*(_DWORD *)(a3 + 84) >> 5) & 0x100 | (((*(_DWORD *)(a3 + 84) >> 14) & 1u) << 15);
          if (!(_DWORD)v34) {
            goto LABEL_47;
          }
          uint64_t v35 = *(int **)(a3 + 96);
          if (*v35 <= 50)
          {
            if (*v35 != -1)
            {
LABEL_43:
              LogPrintF( (uint64_t)v35,  (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)",  0x32u,  (uint64_t)"Configure socket events: CID 0x%08X, events 0x%X",  v30,  v31,  v32,  v33,  *(_DWORD *)(a3 + 160));
              goto LABEL_45;
            }

            if (_LogCategory_Initialize((uint64_t)v35, 0x32u))
            {
              uint64_t v35 = *(int **)(a3 + 96);
              goto LABEL_43;
            }
          }

      free(v15);
      uint64_t v11 = 4294960596LL;
      goto LABEL_8;
    }

  if (v14) {
    CFRelease(v14);
  }
  if ((_DWORD)v22
    && gLogCategory_WiFiManagerCore <= 90
    && (gLogCategory_WiFiManagerCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_WiFiManagerCore, 0x5Au)))
  {
    uint64_t v23 = "get";
    if (!a2) {
      uint64_t v23 = "set";
    }
    LogPrintF( (uint64_t)&gLogCategory_WiFiManagerCore,  (uint64_t)"OSStatus WiFiManagerDoApple80211(CUWiFiManagerRef, int, int, void *, size_t)",  0x5Au,  (uint64_t)"### WiFiManagerDoApple80211 failed: %s, ioc 0x%X, len %zu, error %#m",  v16,  v17,  v18,  v19,  (char)v23);
  }

  return v22;
}

      uint64_t v42 = 0;
      if (!v7) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }

    if (!CFEqual(a2, @"rssiAggregate"))
    {
      if (!CFEqual(a2, @"powered"))
      {
        if (gLogCategory_WiFiManagerCore <= 60
          && (gLogCategory_WiFiManagerCore != -1
           || _LogCategory_Initialize((uint64_t)&gLogCategory_WiFiManagerCore, 0x3Cu)))
        {
          LogPrintF( (uint64_t)&gLogCategory_WiFiManagerCore,  (uint64_t)"CFTypeRef WiFiManagerCopyProperty(CUWiFiManagerRef, CFStringRef, CFTypeRef, OSStatus *)",  0x3Cu,  (uint64_t)"### Get of unknown property '%@'\n",  v30,  v31,  v32,  v33,  (char)a2);
        }

void _AsyncConnection_ConnectHandler(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v7 = Current - *(double *)(a1 + 160);
  *(double *)(a1 + 168) = v7;
  uint64_t v25 = 4LL;
  uint64_t v8 = *(unsigned int *)(a1 + 60);
  if ((v8 & 0x80000000) == 0)
  {
    if (!*__error())
    {
      uint64_t v9 = 4294960596LL;
      goto LABEL_15;
    }

    uint64_t v9 = *__error();
    if (!(_DWORD)v9)
    {
LABEL_5:
      uint64_t v9 = HIDWORD(v25);
      if (!HIDWORD(v25))
      {
        double v7 = *(double *)(a1 + 168);
        goto LABEL_7;
      }
    }

LABEL_15:
    _AsyncConnection_ErrorHandler(a1, v9);
    return;
  }

  if (gLogCategory_AudioUtils <= 50
    && (gLogCategory_AudioUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_AudioUtils, 0x32u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_AudioUtils,  (uint64_t)"OSStatus AudioStreamPrepare(AudioStreamRef)",  0x32u,  (uint64_t)"### Audio stream prepare failed: %#m\n",  v3,  v4,  v5,  v6,  v7);
  }

  AudioStreamStop(a1);
  return v7;
}

  int v13 = 0LL;
  *a2 = Int64;
  return v13;
}

      NSErrorWithOSStatusF((const char *)v9);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      return *p_myCertificate;
    }

    uint64_t result = SecCertificateCreateWithData(0LL, (CFDataRef)myCertificateData);
    *p_myCertificate = result;
    if (a3 && !result)
    {
      uint64_t v9 = 4294960596LL;
      goto LABEL_15;
    }
  }

  return result;
}

    [v22 setChannelAssignments:0];
  }
}

  self->_peerHostState = v9;
  int v13 = (void (**)(void))_Block_copy(self->_peerHostStateChangedHandler);
  if (v13)
  {
    uint64_t v14 = v13;
    v13[2]();
    int v13 = v14;
  }
}

      -[CUBonjourBrowser _interrupted](self, "_interrupted");
      break;
    default:
      goto LABEL_17;
  }

  uint64_t v6 = v15;
LABEL_17:
}

  uint64_t v40 = 0LL;
  uint64_t v26 = softLink_CTServerConnectionCopyISOForMCC((uint64_t)regionCTServerCnx, (uint64_t)v7, (uint64_t)&v40);
  uint64_t v14 = v40;
  if (gLogCategory_CUSystemMonitor <= 30
    && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
  {
    int v38 = v26;
    socklen_t v39 = HIDWORD(v26);
    int v37 = v14;
    LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _regionMonitorUpdateMCC:]",  0x1Eu,  (uint64_t)"Region monitor CopyISOForMCC: %@, ISO %@, error %d/%d",  v22,  v23,  v24,  v25,  (char)v7);
  }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    return;
  }

  [*(id *)(a1 + 48) notification];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  [v12 request];
  int v13 = (void *)objc_claimAutoreleasedReturnValue();

  [v13 content];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  [v14 categoryIdentifier];
  int v15 = (void *)objc_claimAutoreleasedReturnValue();

  if ([v15 isEqual:*(void *)(*(void *)(a1 + 40) + 120)])
  {
    [v13 identifier];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = [v20 isEqual:*(void *)(*(void *)(a1 + 40) + 176)];
    uint64_t v26 = *(uint64_t **)(a1 + 40);
    if ((v25 & 1) != 0)
    {
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v36 = 0LL;
      [v26 _runResponse:v27 error:&v36];
      uint64_t v32 = v36;
      if (!v32) {
        goto LABEL_24;
      }
      uint64_t v33 = *(int **)(*(void *)(a1 + 40) + 72LL);
      if (*v33 > 90) {
        goto LABEL_24;
      }
      if (*v33 == -1)
      {
        uint64_t v33 = *(int **)(*(void *)(a1 + 40) + 72LL);
      }

      LogPrintF( (uint64_t)v33,  (uint64_t)"-[CUUserNotificationSession userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]_block_invoke",  0x5Au,  (uint64_t)"### Response failed: %{error}\n",  v28,  v29,  v30,  v31,  (char)v32);
LABEL_24:
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

      goto LABEL_25;
    }

    uint64_t v35 = (int *)v26[9];
    if (*v35 <= 30)
    {
      if (*v35 == -1)
      {
        if (!_LogCategory_Initialize(v26[9], 0x1Eu)) {
          goto LABEL_22;
        }
        uint64_t v35 = *(int **)(*(void *)(a1 + 40) + 72LL);
      }

      LogPrintF( (uint64_t)v35,  (uint64_t)"-[CUUserNotificationSession userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]_block_invoke",  0x1Eu,  (uint64_t)"Response wrong ID: %@ vs %@\n",  v21,  v22,  v23,  v24,  (char)v20);
    }

  getAWDLTrafficRegistrationServiceDeviceToDeviceMigration[0]();
  int v19 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v20 = v15;
  uint64_t v21 = v19;
  if (v21 == v20)
  {

    goto LABEL_20;
  }

  uint64_t v22 = v21;
  if ((v59 == 0LL) == (v21 != 0LL))
  {

    goto LABEL_22;
  }

  double v23 = [v20 isEqual:v21];

  if ((v23 & 1) != 0)
  {
LABEL_20:
    int v13 = 1024;
    goto LABEL_58;
  }

    uint64_t v3 = HTTPHeader_Uncommit(*(void *)(a1 + 24));
    if (!(_DWORD)v3) {
      goto LABEL_16;
    }
LABEL_19:
    free(v11);
  }

  else
  {
LABEL_16:
    uint64_t v3 = HTTPHeader_SetField(*(char **)(a1 + 24), "Authorization", (uint64_t)"%s", v6, v7, v8, v9, v10, (uint64_t)v11);
    free(v11);
    if (!(_DWORD)v3) {
      *(_DWORD *)(a1 + 168) = 1;
    }
  }

  return v3;
}

    uint64_t v3 = 4294960596LL;
    goto LABEL_16;
  }

  return v3;
}

  return v12;
}

    ;
  }

  if (a6) {
    *a6 = i;
  }
  return result;
}

void _AsyncConnection_StartConnectFailed(_DWORD *a1)
{
}

void _AsyncConnection_EventHandler(uint64_t a1)
{
  uint64_t v2 = *(_DNSServiceRef_t **)(a1 + 64);
  if (!v2)
  {
    int v10 = *(unsigned __int8 *)(a1 + 25);
    if (v10 == 30) {
      int v11 = 28;
    }
    else {
      int v11 = 0;
    }
    if (v10 == 2) {
      socklen_t v12 = 16;
    }
    else {
      socklen_t v12 = v11;
    }
    if (!connect(*(_DWORD *)(a1 + 60), (const sockaddr *)(a1 + 24), v12)) {
      goto LABEL_17;
    }
    if (*__error())
    {
      uint64_t v17 = *__error();
      if ((_DWORD)v17 == 56)
      {
LABEL_17:
        _AsyncConnection_ConnectHandler(a1);
        return;
      }

      if ((_DWORD)v17 != 22)
      {
        if (!(_DWORD)v17) {
          goto LABEL_17;
        }
LABEL_28:
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v20 = *(int **)(v19 + 144);
        if (*v20 <= 50)
        {
          if (*v20 == -1)
          {
            uint64_t v20 = *(int **)(v19 + 144);
          }

          LogPrintF( (uint64_t)v20,  (uint64_t)"void _AsyncConnection_EventHandler(void *)",  0x32u,  (uint64_t)"### Connect failed: %##a, %#m\n",  v13,  v14,  v15,  v16,  a1 + 24);
        }

void _AsyncConnection_ConnectDelayedHandler(uint64_t a1)
{
  uint64_t started = _AsyncConnection_StartConnectNow( *(void *)(a1 + 16),  a1,  a1 + 24,  *(unsigned int *)(a1 + 52),  *(unsigned int *)(a1 + 56));
  if ((_DWORD)started)
  {
    _AsyncConnection_ErrorHandler(a1, started);
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(v3 + 80);
    uint64_t v5 = (void *)(v3 + 80);
    uint64_t v4 = v6;
    if (v6)
    {
      if (v4 == a1)
      {
LABEL_8:
        *uint64_t v5 = *(void *)(a1 + 8);
        _AsyncConnection_ReleaseOperation((_DWORD *)a1);
      }

      else
      {
        while (1)
        {
          uint64_t v7 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            break;
          }
          if (v4 == a1)
          {
            uint64_t v5 = (void *)(v7 + 8);
            goto LABEL_8;
          }
        }
      }
    }
  }

void _AsyncConnection_ReachabilityHandler( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *(int **)(*(void *)(a3 + 16) + 144LL);
  if (*v10 <= 30)
  {
    if (*v10 == -1)
    {
      int v10 = *(int **)(*(void *)(a3 + 16) + 144LL);
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"void _AsyncConnection_ReachabilityHandler(SCNetworkReachabilityRef, SCNetworkReachabilityFlags, void *)",  0x1Eu,  (uint64_t)"Reachability of %##a, port %d changed: 0x%X\n",  a5,  a6,  a7,  a8,  a3 + 24);
  }

LABEL_5:
  if ((a2 & 2) != 0)
  {
    *(CFAbsoluteTime *)(a3 + 120) = CFAbsoluteTimeGetCurrent() - *(double *)(a3 + 112);
    if (!_AsyncConnection_StartConnect( *(void *)(a3 + 16),  (void *)a3,  a3 + 24,  *(unsigned int *)(a3 + 52),  *(unsigned int *)(a3 + 56),  v11,  v12,  v13))
    {
      uint64_t v14 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(v14 + 80);
      uint64_t v16 = (void *)(v14 + 80);
      uint64_t v15 = v17;
      if (v17)
      {
        if (v15 == a3)
        {
LABEL_13:
          *uint64_t v16 = *(void *)(a3 + 8);
        }

        else
        {
          while (1)
          {
            uint64_t v18 = v15;
            uint64_t v15 = *(void *)(v15 + 8);
            if (!v15) {
              break;
            }
            if (v15 == a3)
            {
              uint64_t v16 = (void *)(v18 + 8);
              goto LABEL_13;
            }
          }
        }
      }

      _AsyncConnection_ReleaseOperation((_DWORD *)a3);
    }
  }

  int v10 = *(dispatch_object_s **)(a1 + 72);
  if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v10);
    *(void *)(a1 + 72) = 0LL;
  }

  *(void *)(a1 + 80) = mach_absolute_time();
  return _BonjourAdvertiserUpdateDirect(a1);
}

  if (a3) {
    *a3 = v11;
  }
  return v7;
}

    uint64_t v6 = 4294960591LL;
    goto LABEL_10;
  }

  uint64_t v5 = (size_t *)ccaes_gcm_decrypt_mode();
LABEL_7:
  *(void *)(a1 + 24) = v5;
  if (!*v5)
  {
    uint64_t v6 = 4294960553LL;
    goto LABEL_10;
  }

  uint64_t v7 = calloc(1uLL, *v5);
  *(void *)(a1 + 32) = v7;
  if (!v7)
  {
    uint64_t v6 = 4294960568LL;
    goto LABEL_10;
  }

  uint64_t v6 = ccgcm_init();
  if ((_DWORD)v6) {
LABEL_10:
  }
    _AESGCMCoreCryptoFinalize(a1);
  return v6;
}

  uint64_t v8 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
  playRequests = self->_playRequests;
  self->_playRequests = v8;

  int v10 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
  preparedRequests = self->_preparedRequests;
  self->_preparedRequests = v10;

  objc_storeStrong((id *)&self->_selfRef, self);
  -[objc_class sharedInstance](getAVAudioSessionClass(), "sharedInstance");
  uint64_t v12 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();
  audioSession = self->_audioSession;
  self->_audioSession = v12;

  [MEMORY[0x189607958] defaultCenter];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  getAVAudioSessionInterruptionNotification();
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  [v14 addObserver:self selector:sel_audioSessionInterrupted_ name:v15 object:self->_audioSession];

  uint64_t v16 = ((unint64_t)self->_flags >> 2) & 1;
  uint64_t v17 = self->_audioSession;
  getAVAudioSessionCategoryAmbient();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v34 = 0LL;
  LOBYTE(v17) = -[AVAudioSession setCategory:withOptions:error:](v17, "setCategory:withOptions:error:", v18, v16, &v34);
  uint64_t v19 = v34;

  if ((v17 & 1) == 0)
  {
    unsigned int v24 = self->_ucat;
    if (v24->var0 <= 90)
    {
      if (v24->var0 == -1)
      {
        unsigned int v24 = self->_ucat;
      }

      LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUAudioPlayer _activate]",  0x5Au,  (uint64_t)"### AudioSession setCategory failed: %{error}\n",  v20,  v21,  v22,  v23,  (char)v19);
    }
  }

  uint64_t v26 = 0LL;
  uint64_t v17 = (void *)[objc_alloc(getAVAudioPlayerClass()) initWithContentsOfURL:v9 error:&v26];

  uint64_t v22 = v26;
  if (v17)
  {
    [v17 setDelegate:self];
    if (v5) {
      [v17 setNumberOfLoops:-1];
    }
    -[CUAudioPlayer _applyChannelAssignments:](self, "_applyChannelAssignments:", v17);
    [v17 prepareToPlay];
    socklen_t v23 = objc_alloc_init(&OBJC_CLASS___CUAudioRequest);
    -[CUAudioRequest setAudioPlayer:](v23, "setAudioPlayer:", v17);
    -[CUAudioRequest setCompletion:](v23, "setCompletion:", v8);
    -[CUAudioRequest setLabel:](v23, "setLabel:", v11);
    -[NSMutableArray addObject:](self->_playRequests, "addObject:", v23);
    -[CUAudioPlayer _processRequests](self, "_processRequests");

    goto LABEL_9;
  }

  unsigned int v24 = self->_ucat;
  if (v24->var0 <= 90)
  {
    if (v24->var0 != -1)
    {
LABEL_12:
      LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUAudioPlayer _playURL:loop:completion:]",  0x5Au,  (uint64_t)"### Create AVAudioPlayer for '%@' failed: %{error}\n",  v18,  v19,  v20,  v21,  (char)v11);
      goto LABEL_14;
    }

    if (_LogCategory_Initialize((uint64_t)v24, 0x5Au))
    {
      unsigned int v24 = self->_ucat;
      goto LABEL_12;
    }
  }

  uint64_t v27 = 0LL;
  uint64_t v18 = (void *)[objc_alloc(getAVAudioPlayerClass()) initWithContentsOfURL:v10 error:&v27];

  socklen_t v23 = v27;
  if (v18)
  {
    [v18 setDelegate:self];
    -[CUAudioPlayer _applyChannelAssignments:](self, "_applyChannelAssignments:", v18);
    [v18 prepareToPlay];
    unsigned int v24 = objc_alloc_init(&OBJC_CLASS___CUAudioRequest);
    -[CUAudioRequest setAudioPlayer:](v24, "setAudioPlayer:", v18);
    -[CUAudioRequest setLabel:](v24, "setLabel:", v12);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_preparedRequests,  "setObject:forKeyedSubscript:",  v24,  v8);

    goto LABEL_7;
  }

  uint64_t v25 = self->_ucat;
  if (v25->var0 <= 90)
  {
    if (v25->var0 != -1)
    {
LABEL_10:
      LogPrintF( (uint64_t)v25,  (uint64_t)"-[CUAudioPlayer _prepareURL:identifier:completion:]",  0x5Au,  (uint64_t)"### Create AVAudioPlayer for '%@' failed: %{error}\n",  v19,  v20,  v21,  v22,  (char)v12);
      goto LABEL_12;
    }

    if (_LogCategory_Initialize((uint64_t)v25, 0x5Au))
    {
      uint64_t v25 = self->_ucat;
      goto LABEL_10;
    }
  }

  uint64_t v16 = v7;
  if (self->_currentRequest == v7)
  {
    self->_currentRequest = 0LL;

    uint64_t v16 = v21;
  }

  -[CUAudioRequest completion](v16, "completion");
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    -[CUAudioRequest completion](v21, "completion");
    uint64_t v18 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    ((void (**)(void, id))v18)[2](v18, v8);
  }

  invalidateFlags = self->_invalidateFlags;
  if ((invalidateFlags & 1) != 0
    || (invalidateFlags & 2) != 0 && !-[NSMutableArray count](self->_playRequests, "count"))
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUAudioPlayer _abortRequestsWithError:](self, "_abortRequestsWithError:", v20);
  }

  else
  {
    -[CUAudioPlayer _processRequests](self, "_processRequests");
  }
}

  NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
  uint64_t v13 = (id)objc_claimAutoreleasedReturnValue();
  [v9 _abortRequestsWithError:v13];
}

  if (v2)
  {
    uint64_t v11 = *(void **)(a1 + 48);
    [v2 audioPlayer];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();

    uint64_t v2 = v13;
    if (v11 == v12)
    {
      [*(id *)(a1 + 32) _completeRequest:v13 error:*(void *)(a1 + 40)];
      uint64_t v2 = v13;
    }
  }
}

  self->_state = 3;
  int v10 = (void (**)(void *, id))_Block_copy(self->_activateCompletion);
  activateCompletion = self->_activateCompletion;
  self->_activateCompletion = 0LL;

  if (v10)
  {
    v10[2](v10, v14);
  }

  else
  {
    uint64_t v12 = (void (**)(void *, id))_Block_copy(self->_errorHandler);
    errorHandler = self->_errorHandler;
    self->_errorHandler = 0LL;

    if (v12) {
      v12[2](v12, v14);
    }
  }

  -[CUBLEConnection _abortReadsWithError:](self, "_abortReadsWithError:", v14);
  -[CUBLEConnection _abortWritesWithError:](self, "_abortWritesWithError:", v14);
}

  uint64_t v14 = (void *)v16[2];
  v16[2] = v6;

  [v16 completion];
  uint64_t v15 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v16 setCompletion:0];
  if (v15) {
    v15[2](v15);
  }
}

  uint64_t v12 = (void *)v14[1];
  v14[1] = v10;

  [v14 completion];
  uint64_t v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v14 setCompletion:0];
  if (v13) {
    v13[2](v13);
  }
}

  if (!self->_listeningPSM && -[CBPeripheralManager state](self->_peripheralManager, "state") == 5) {
    -[CBPeripheralManager publishL2CAPChannel:requiresEncryption:]( self->_peripheralManager,  "publishL2CAPChannel:requiresEncryption:",  self->_listenPSM,  0LL);
  }
}
}

  -[NSMutableSet removeObject:](self->_connections, "removeObject:", v14);
  connectionEndedHandler = (void (**)(id, id, void))self->_connectionEndedHandler;
  if (connectionEndedHandler) {
    connectionEndedHandler[2](connectionEndedHandler, v14, 0LL);
  }
}

  uint64_t v8 = SocketSetNonBlocking(v6, 1);
  if ((_DWORD)v8)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v7 = v8;
    uint64_t v20 = (void *)*MEMORY[0x189607670];
    goto LABEL_13;
  }

  uint64_t v9 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B60],  v6,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  readSource = self->_readSource;
  self->_readSource = v9;

  uint64_t v11 = self->_readSource;
  if (!v11)
  {
    if (a3)
    {
      uint64_t v20 = (void *)*MEMORY[0x189607670];
      uint64_t v7 = 4294960550LL;
      goto LABEL_13;
    }

    return 0;
  }

  uint64_t v12 = MEMORY[0x1895F87A8];
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 3221225472LL;
  handler[2] = __55__CUBluetoothClassicConnection__setupIOAndReturnError___block_invoke;
  handler[3] = &unk_189F34238;
  handler[4] = self;
  dispatch_source_set_event_handler((dispatch_source_t)v11, handler);
  uint64_t v13 = self->_readSource;
  v24[0] = v12;
  v24[1] = 3221225472LL;
  v24[2] = __55__CUBluetoothClassicConnection__setupIOAndReturnError___block_invoke_2;
  v24[3] = &unk_189F34238;
  v24[4] = self;
  dispatch_source_set_cancel_handler((dispatch_source_t)v13, v24);
  dispatch_resume((dispatch_object_t)self->_readSource);
  uint64_t v14 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B90],  v6,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  writeSource = self->_writeSource;
  self->_writeSource = v14;

  uint64_t v16 = self->_writeSource;
  uint64_t v17 = v16 != 0LL;
  if (!v16)
  {
    if (!a3) {
      return v17;
    }
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5A5LL);
    unsigned int v21 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }

  v23[0] = v12;
  v23[1] = 3221225472LL;
  v23[2] = __55__CUBluetoothClassicConnection__setupIOAndReturnError___block_invoke_3;
  v23[3] = &unk_189F34238;
  v23[4] = self;
  dispatch_source_set_event_handler((dispatch_source_t)v16, v23);
  uint64_t v18 = self->_writeSource;
  v22[0] = v12;
  v22[1] = 3221225472LL;
  v22[2] = __55__CUBluetoothClassicConnection__setupIOAndReturnError___block_invoke_4;
  v22[3] = &unk_189F34238;
  v22[4] = self;
  dispatch_source_set_cancel_handler((dispatch_source_t)v18, v22);
  self->_writeSuspended = 1;
  return v17;
}

  self->_state = 3;
  int v10 = (void (**)(void *, id))_Block_copy(self->_activateCompletion);
  activateCompletion = self->_activateCompletion;
  self->_activateCompletion = 0LL;

  if (v10)
  {
    v10[2](v10, v14);
  }

  else
  {
    uint64_t v12 = (void (**)(void *, id))_Block_copy(self->_errorHandler);
    errorHandler = self->_errorHandler;
    self->_errorHandler = 0LL;

    if (v12) {
      v12[2](v12, v14);
    }
  }

  -[CUBluetoothClassicConnection _abortReadsWithError:](self, "_abortReadsWithError:", v14);
  -[CUBluetoothClassicConnection _abortWritesWithError:](self, "_abortWritesWithError:", v14);
}

  uint64_t v14 = (void *)v16[2];
  v16[2] = v6;

  [v16 completion];
  uint64_t v15 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v16 setCompletion:0];
  if (v15) {
    v15[2](v15);
  }
}

  uint64_t v12 = (void *)v14[1];
  v14[1] = v10;

  [v14 completion];
  uint64_t v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v14 setCompletion:0];
  if (v13) {
    v13[2](v13);
  }
}

  v13[2](v13, v11);
}

  int v10 = *(void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __37__CUBluetoothClient__btEnsureStopped__block_invoke_2;
    v12[3] = &unk_189F33060;
    uint64_t v14 = v10;
    uint64_t v13 = v4;
    [v11 _externalInvokeBlock:v12];
  }
}

  if (*(void *)(v9 + 264))
  {
    *(_BYTE *)(v9 + 40) = 1;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  if (*(void *)(v9 + 272))
  {
    *(_BYTE *)(v9 + 24) = 1;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  uint64_t v12 = *(_DWORD *)(v9 + 236);
  if ((v12 & 0x18) != 0 || *(void *)(v9 + 280) || *(void *)(v9 + 288))
  {
    *(_BYTE *)(v9 + 24) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 160LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 106LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 41LL) = 1;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  if (*(void *)(v9 + 304) || *(void *)(v9 + 312))
  {
    *(_BYTE *)(v9 + 160) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 106LL) = 1;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  uint64_t v13 = *(_DWORD *)(v9 + 236);
  if ((v13 & 2) != 0)
  {
    *(_BYTE *)(v9 + 24) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 106LL) = 1;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v13 = *(_DWORD *)(v9 + 236);
    if ((v13 & 4) == 0)
    {
LABEL_18:
      if ((v13 & 0x40) == 0) {
        goto LABEL_19;
      }
LABEL_24:
      *(_BYTE *)(v9 + 80) = 1;
      uint64_t v9 = *(void *)(a1 + 32);
      if ((v12 & 8) == 0) {
        return [(id)v9 _btEnsureStarted];
      }
      goto LABEL_20;
    }
  }

  else if ((v13 & 4) == 0)
  {
    goto LABEL_18;
  }

  *(_BYTE *)(v9 + 24) = 1;
  uint64_t v9 = *(void *)(a1 + 32);
  if ((*(_DWORD *)(v9 + 236) & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_19:
  if ((v12 & 8) != 0)
  {
LABEL_20:
    *(_BYTE *)(v9 + 80) = 1;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  return [(id)v9 _btEnsureStarted];
}

  uint64_t v14 = (void *)v16[2];
  v16[2] = v6;

  [v16 completion];
  uint64_t v15 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v16 setCompletion:0];
  if (v15) {
    v15[2](v15);
  }
}

  uint64_t v12 = (void *)v14[1];
  v14[1] = v10;

  [v14 completion];
  uint64_t v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v14 setCompletion:0];
  if (v13) {
    v13[2](v13);
  }
}

  (*(void (**)(void))(*(void *)(v10 + 120) + 16LL))();
}

  *(_BYTE *)(v9 + 9) = 1;
  return [*(id *)(a1 + 32) _bonjourStart];
}

  self->_state = 3;
  uint64_t v11 = (void (**)(void *, id))_Block_copy(self->_activateCompletion);
  activateCompletion = self->_activateCompletion;
  self->_activateCompletion = 0LL;

  if (v11) {
    v11[2](v11, v13);
  }
}

  serviceType = self->_serviceType;
  NSPrintF();
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  sessionID = self->_sessionID;
  uint64_t v16 = @"sid";
  v17[0] = sessionID;
  objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1, serviceType);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  clinkClient = self->_clinkClient;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 3221225472LL;
  v15[2] = __31__CUFileClient__sendKeepAlive___block_invoke;
  v15[3] = &unk_189F30E40;
  v15[4] = self;
  -[RPCompanionLinkClient sendRequestID:request:options:responseHandler:]( clinkClient,  "sendRequestID:request:options:responseHandler:",  v10,  v12,  0LL,  v15);
  self->_lastRequestTicks = mach_absolute_time();
}

  serviceType = self->_serviceType;
  NSPrintF();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = @"sid";
  v19[0] = self->_sessionID;
  objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1, serviceType);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  getRPOptionTimeoutSeconds[0]();
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = v10;
  uint64_t v17 = &unk_189F52398;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();

  clinkClient = self->_clinkClient;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 3221225472LL;
  v15[2] = __32__CUFileClient__sendSessionStop__block_invoke;
  v15[3] = &unk_189F30E40;
  v15[4] = self;
  -[RPCompanionLinkClient sendRequestID:request:options:responseHandler:]( clinkClient,  "sendRequestID:request:options:responseHandler:",  v8,  v9,  v11,  v15);
  self->_lastRequestTicks = mach_absolute_time();
}

  self->_clinkActivated = 0;
  -[RPCompanionLinkClient invalidate](self->_clinkClient, "invalidate");
  uint64_t v8 = (RPCompanionLinkClient *)objc_alloc_init((Class)getRPCompanionLinkClientClass[0]());
  clinkClient = self->_clinkClient;
  self->_clinkClient = v8;
  int v10 = v8;

  -[RPCompanionLinkClient setDispatchQueue:](v10, "setDispatchQueue:", self->_dispatchQueue);
  uint64_t v11 = objc_alloc_init(getRPCompanionLinkDeviceClass());
  [v11 setIdentifier:self->_destinationID];
  -[RPCompanionLinkClient setDestinationDevice:](v10, "setDestinationDevice:", v11);
  uint64_t v12 = MEMORY[0x1895F87A8];
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 3221225472LL;
  v14[2] = __33__CUFileClient__runCLinkActivate__block_invoke;
  v14[3] = &unk_189F33088;
  v14[4] = v10;
  v14[5] = self;
  -[RPCompanionLinkClient setInvalidationHandler:](v10, "setInvalidationHandler:", v14);
  v13[0] = v12;
  v13[1] = 3221225472LL;
  v13[2] = __33__CUFileClient__runCLinkActivate__block_invoke_2;
  v13[3] = &unk_189F31318;
  v13[4] = v10;
  v13[5] = self;
  -[RPCompanionLinkClient activateWithCompletion:](v10, "activateWithCompletion:", v13);
}

  sessionID = self->_sessionID;
  self->_sessionID = 0LL;

  serviceType = self->_serviceType;
  NSPrintF();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  clinkClient = self->_clinkClient;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  v13[2] = __39__CUFileClient__runSessionStartRequest__block_invoke;
  v13[3] = &unk_189F30E40;
  v13[4] = self;
  -[RPCompanionLinkClient sendRequestID:request:options:responseHandler:]( clinkClient,  "sendRequestID:request:options:responseHandler:",  v9,  MEMORY[0x189604A60],  0LL,  v13,  serviceType);
  self->_lastRequestTicks = mach_absolute_time();
}

  int v10 = objc_alloc_init(MEMORY[0x189603FC8]);
  [v8 encodeWithDictionary:v10];
  serviceType = self->_serviceType;
  NSPrintF();
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = @"fQry";
  v19[1] = @"sid";
  sessionID = self->_sessionID;
  v20[0] = v10;
  v20[1] = sessionID;
  objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v20, v19, 2, serviceType);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  clinkClient = self->_clinkClient;
  v17[0] = MEMORY[0x1895F87A8];
  v17[1] = 3221225472LL;
  v17[2] = __30__CUFileClient__runSendQuery___block_invoke;
  v17[3] = &unk_189F30E68;
  v17[4] = self;
  uint64_t v18 = v8;
  uint64_t v15 = v8;
  -[RPCompanionLinkClient sendRequestID:request:options:responseHandler:]( clinkClient,  "sendRequestID:request:options:responseHandler:",  v11,  v13,  0LL,  v17);
  self->_lastRequestTicks = mach_absolute_time();
}

  uint64_t v16 = *(void **)(v13 + 72);
  *(void *)(v13 + 72) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
  [*(id *)(a1 + 32) _invalidated];
}

  if (v12) {
    [*(id *)(a1 + 32) _reportError:v12 where:"Keep alive response"];
  }
}

  uint64_t v13 = self->_rootDirectoryURL;
  if (!v13)
  {
    uint64_t v20 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5CFLL);
LABEL_11:
    uint64_t v14 = (id)v39[5];
    v39[5] = v20;
    goto LABEL_8;
  }

  *__error() = 0;
  if (!realpath_DARWIN_EXTSN( -[NSURL fileSystemRepresentation](v13, "fileSystemRepresentation"), self->_rootPath))
  {
    __error();
    uint64_t v20 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5D0LL);
    goto LABEL_11;
  }

  -[RPCompanionLinkClient invalidate](self->_clinkClient, "invalidate");
  uint64_t v14 = objc_alloc_init((Class)getRPCompanionLinkClientClass[0]());
  objc_storeStrong((id *)&self->_clinkClient, v14);
  [v14 setDispatchQueue:self->_dispatchQueue];
  v34[0] = v5;
  v34[1] = 3221225472LL;
  v34[2] = __40__CUFileServer__activateWithCompletion___block_invoke_2;
  v34[3] = &unk_189F33088;
  v34[4] = v14;
  v34[5] = self;
  [v14 setInvalidationHandler:v34];
  serviceType = self->_serviceType;
  NSPrintF();
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  v33[0] = v5;
  v33[1] = 3221225472LL;
  v33[2] = __40__CUFileServer__activateWithCompletion___block_invoke_3;
  v33[3] = &unk_189F30E90;
  v33[4] = self;
  objc_msgSend(v14, "registerRequestID:options:handler:", v15, 0, v33, serviceType);

  socklen_t v23 = self->_serviceType;
  NSPrintF();
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = v5;
  v32[1] = 3221225472LL;
  v32[2] = __40__CUFileServer__activateWithCompletion___block_invoke_4;
  v32[3] = &unk_189F30E90;
  v32[4] = self;
  objc_msgSend(v14, "registerRequestID:options:handler:", v16, 0, v32, v23);

  unsigned int v24 = self->_serviceType;
  NSPrintF();
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = v5;
  v31[1] = 3221225472LL;
  v31[2] = __40__CUFileServer__activateWithCompletion___block_invoke_5;
  v31[3] = &unk_189F30E90;
  v31[4] = self;
  objc_msgSend(v14, "registerRequestID:options:handler:", v17, 0, v31, v24);

  uint64_t v25 = self->_serviceType;
  NSPrintF();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v5;
  v30[1] = 3221225472LL;
  v30[2] = __40__CUFileServer__activateWithCompletion___block_invoke_6;
  v30[3] = &unk_189F30E90;
  v30[4] = self;
  objc_msgSend(v14, "registerRequestID:options:handler:", v18, 0, v30, v25);

  uint64_t v26 = self->_serviceType;
  NSPrintF();
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v5;
  v29[1] = 3221225472LL;
  v29[2] = __40__CUFileServer__activateWithCompletion___block_invoke_7;
  v29[3] = &unk_189F30E90;
  v29[4] = self;
  objc_msgSend(v14, "registerRequestID:options:handler:", v19, 0, v29, v26);

  v27[0] = v5;
  v27[1] = 3221225472LL;
  v27[2] = __40__CUFileServer__activateWithCompletion___block_invoke_8;
  v27[3] = &unk_189F30EB8;
  v27[4] = self;
  uint64_t v28 = v6;
  [v14 activateWithCompletion:v27];

LABEL_8:
  v11[2](v11);

  _Block_object_dispose(&v38, 8);
}

  if ((*(void *)(a1 + 48) & 0x10) != 0) {
    return objc_msgSend(v9, "_getPairingIdentityForAccessoryWithOptions:completion:");
  }
  else {
    return objc_msgSend(v9, "_getPairingIdentityForUserWithOptions:completion:");
  }
}

  [v5 setDelegate:0];
}

  if (*(_DWORD *)(v9 + 8) == -1 && getHMHomeManagerPreferencesChangedNotification[0]())
  {
    uint64_t v12 = (const char *)getHMHomeManagerPreferencesChangedNotification[0]();
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(dispatch_queue_s **)(v13 + 120);
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 3221225472LL;
    handler[2] = __28__CUHomeKitManager_activate__block_invoke_2;
    handler[3] = &unk_189F32EC8;
    handler[4] = v13;
    notify_register_dispatch(v12, (int *)(v13 + 8), v14, handler);
  }

  return [*(id *)(a1 + 32) _activateIfNeeded];
}
}
}

  [*(id *)(v8 + 80) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

  -[CUNANEndpoint mockPeerEndpointString](self->_peerEndpoint, "mockPeerEndpointString");
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = v11;
  if (!v11)
  {
    -[CUNANEndpoint discoveryResult](self->_peerEndpoint, "discoveryResult");
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      trafficFlags = self->_trafficFlags;
      if ((trafficFlags & 0x800) != 0) {
        uint64_t v17 = 2LL;
      }
      else {
        uint64_t v17 = (trafficFlags & 0x23300) != 0;
      }
      uint64_t v18 = (WiFiAwareDataSession *)[objc_alloc(getWiFiAwareDataSessionClass()) initWithDiscoveryResult:v15 serviceType:v17 serviceSpecificInfo:0];
      wfaDataSessionClient = self->_wfaDataSessionClient;
      self->_wfaDataSessionClient = v18;

      uint64_t v20 = self->_wfaDataSessionClient;
      if (v20)
      {
        -[WiFiAwareDataSession setDelegate:](v20, "setDelegate:", self);
        if ((self->_controlFlags & 2) == 0)
        {
LABEL_34:
          uint64_t v35 = _Block_copy(aBlock);
          activateCompletion = self->_activateCompletion;
          self->_activateCompletion = v35;

          -[WiFiAwareDataSession start](self->_wfaDataSessionClient, "start");
LABEL_35:

          goto LABEL_36;
        }

        -[objc_class automaticallyProvideInternetToResponders]( getWiFiAwareInternetSharingConfigurationClass(),  "automaticallyProvideInternetToResponders");
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25) {
          -[WiFiAwareDataSession setInternetSharingConfiguration:]( self->_wfaDataSessionClient,  "setInternetSharingConfiguration:",  v25);
        }
        uint64_t v26 = self->_ucat;
        if (v26->var0 <= 30)
        {
          if (v26->var0 != -1)
          {
LABEL_19:
            uint64_t v27 = "success";
            if (!v25) {
              uint64_t v27 = "failed";
            }
            LogPrintF( (uint64_t)v26,  (uint64_t)"-[CUNANDataSession _activateWithCompletion:]",  0x1Eu,  (uint64_t)"AutomaticInfraRelay: %s",  v21,  v22,  v23,  v24,  (char)v27);
            goto LABEL_33;
          }

          if (_LogCategory_Initialize((uint64_t)v26, 0x1Eu))
          {
            uint64_t v26 = self->_ucat;
            goto LABEL_19;
          }
        }

  uint64_t v9 = objc_alloc_init(getWiFiAwarePublishServiceSpecificInfoClass());
  [v9 setInstanceName:self->_name];
  if (self->_customData) {
    objc_msgSend(v9, "setBlob:");
  }
  textInfo = self->_textInfo;
  if (textInfo)
  {
    socklen_t v23 = 0LL;
    uint64_t v12 = (void *)CUTXTDataCreateWithDictionary(textInfo, v10, &v23);
    uint64_t v13 = v23;
    if (v12)
    {
      [v9 setTxtRecordData:v12];
    }

    else
    {
      uint64_t v14 = self->_ucat;
      if (v14->var0 <= 90)
      {
        if (v14->var0 == -1)
        {
          uint64_t v14 = self->_ucat;
        }

        NSPrintF();
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF_safe( (uint64_t)v14,  (uint64_t)"-[CUNANPublisher _updateServiceSpecificInfo]",  0x5Au,  (uint64_t)"### Update textInfo failed: error=%@",  v16,  v17,  v18,  v19,  (char)v15);
      }
    }
}

  uint64_t v9 = self->_serviceType;
  if (-[NSString length](v9, "length"))
  {
    int v10 = self->_mockID;
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = self;
      os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
      [(id)gCUNANMockSubscribers objectForKeyedSubscript:v11];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v13)
      {
        uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1896078B8]) initWithOptions:517 capacity:0];
        uint64_t v14 = (void *)gCUNANMockSubscribers;
        if (!gCUNANMockSubscribers)
        {
          uint64_t v15 = objc_alloc_init(MEMORY[0x189603FC8]);
          uint64_t v16 = (void *)gCUNANMockSubscribers;
          gCUNANMockSubscribers = (uint64_t)v15;

          uint64_t v14 = (void *)gCUNANMockSubscribers;
        }

        [v14 setObject:v13 forKeyedSubscript:v11];
      }

      [v13 addObject:v12];
      dispatch_source_t v45 = 0u;
      dispatch_source_t v46 = 0u;
      uint64_t v43 = 0u;
      int v44 = 0u;
      [(id)gCUNANMockPublishers objectForKeyedSubscript:v11];
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v18 = [v17 countByEnumeratingWithState:&v43 objects:v47 count:16];
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = *(void *)v44;
        do
        {
          for (i = 0LL; i != v19; ++i)
          {
            if (*(void *)v44 != v20) {
              objc_enumerationMutation(v17);
            }
            [*(id *)(*((void *)&v43 + 1) + 8 * i) mockEndpoint];
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
            if (v22) {
              -[CUNANSubscriber reportMockEndpointFound:](v12, "reportMockEndpointFound:", v22);
            }
          }

          uint64_t v19 = [v17 countByEnumeratingWithState:&v43 objects:v47 count:16];
        }

        while (v19);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
      if (aBlock)
      {
        socklen_t v23 = (void (*)(void))aBlock[2];
LABEL_35:
        v23();
        goto LABEL_41;
      }

      goto LABEL_41;
    }

    int v29 = (void *)[objc_alloc(getWiFiAwareSubscribeConfigurationClass()) initWithServiceName:v9];
    int v30 = v29;
    if ((self->_controlFlags & 1) != 0) {
      [v29 setAuthenticationType:0];
    }
    uint64_t v31 = (WiFiAwareSubscriber *)[objc_alloc(getWiFiAwareSubscriberClass()) initWithConfiguration:v30];
    wfaSubscriber = self->_wfaSubscriber;
    self->_wfaSubscriber = v31;

    uint64_t v33 = self->_wfaSubscriber;
    if (v33)
    {
      -[WiFiAwareSubscriber setDelegate:](v33, "setDelegate:", self);
      uint64_t v34 = _Block_copy(aBlock);
      activateCompletion = self->_activateCompletion;
      self->_activateCompletion = v34;

      -[WiFiAwareSubscriber start](self->_wfaSubscriber, "start");
LABEL_40:

      uint64_t v11 = 0LL;
      goto LABEL_41;
    }

    NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v41 = self->_ucat;
    if (v41->var0 <= 90)
    {
      if (v41->var0 == -1)
      {
        uint64_t v41 = self->_ucat;
      }

      LogPrintF( (uint64_t)v41,  (uint64_t)"-[CUNANSubscriber _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v36,  v37,  v38,  v39,  (char)v40);
    }

  [v6 publisherAddress];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 data];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  [v6 publishID];
  _WiFiAwareCreateEndpointIdentifier(v16);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    -[NSMutableDictionary objectForKeyedSubscript:](self->_wfaEndpoints, "objectForKeyedSubscript:", v17);
    uint64_t v22 = (CUNANEndpoint *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      socklen_t v23 = v22;
      unsigned int v24 = -[CUNANEndpoint updateWithDiscoveryResult:](v22, "updateWithDiscoveryResult:", v6);
      changeFlags = self->_changeFlags;
      uint64_t v26 = (v24 | 4) & changeFlags;
      if (((v24 | 4) & changeFlags) == 0)
      {
LABEL_27:

        goto LABEL_28;
      }

      uint64_t v27 = self->_ucat;
      if (v27->var0 <= 10)
      {
        if (v27->var0 != -1)
        {
LABEL_10:
          CUDescriptionWithLevel(v23, 50LL);
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
          LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUNANSubscriber _subscriber:receivedDiscoveryResult:]",  0xAu,  (uint64_t)"Endpoint changed: %@, %#{flags}\n",  v29,  v30,  v31,  v32,  (char)v28);

          goto LABEL_22;
        }

        if (_LogCategory_Initialize((uint64_t)self->_ucat, 0xAu))
        {
          uint64_t v27 = self->_ucat;
          goto LABEL_10;
        }
      }

  [v7 data];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  _WiFiAwareCreateEndpointIdentifier(v14);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    -[NSMutableDictionary objectForKeyedSubscript:](self->_wfaEndpoints, "objectForKeyedSubscript:", v15);
    unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      pthread_mutex_lock(&self->_mutex);
      -[NSMutableDictionary setObject:forKeyedSubscript:](self->_wfaEndpoints, "setObject:forKeyedSubscript:", 0LL, v15);
      pthread_mutex_unlock(&self->_mutex);
      uint64_t v25 = self->_ucat;
      if (v25->var0 > 10) {
        goto LABEL_17;
      }
      if (v25->var0 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)self->_ucat, 0xAu))
        {
LABEL_17:
          endpointLostHandler = (void (**)(id, void *))self->_endpointLostHandler;
          goto LABEL_19;
        }

        uint64_t v25 = self->_ucat;
      }

      CUDescriptionWithLevel(v24, 50LL);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v25,  (uint64_t)"-[CUNANSubscriber _subscriber:lostDiscoveryResultForPublishID:address:]",  0xAu,  (uint64_t)"Endpoint lost: %@\n",  v27,  v28,  v29,  v30,  (char)v26);

      goto LABEL_17;
    }

    uint64_t v32 = self->_ucat;
    if (v32->var0 <= 30)
    {
      if (v32->var0 == -1)
      {
        uint64_t v32 = self->_ucat;
      }

      LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUNANSubscriber _subscriber:lostDiscoveryResultForPublishID:address:]",  0x1Eu,  (uint64_t)"WFA lost result missing not found: %@\n",  v20,  v21,  v22,  v23,  (char)v15);
    }

  (*(void (**)(void))(*(void *)(v6 + 168) + 16LL))();
}

  if ((*(_BYTE *)(v9 + 40) & 4) != 0) {
    [(id)v9 _ensureStartedNW];
  }
  else {
    [(id)v9 _ensureStartedSC];
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

  uint64_t v31 = 0u;
  uint64_t v32 = 0u;
  int v29 = 0u;
  int v30 = 0u;
  uint64_t v8 = self->_endpoints;
  uint64_t v9 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v29,  v34,  16LL);
  if (v9)
  {
    int v10 = v9;
    uint64_t v11 = *(void *)v30;
    do
    {
      for (i = 0LL; i != v10; ++i)
      {
        if (*(void *)v30 != v11) {
          objc_enumerationMutation(v8);
        }
        *(_BYTE *)(*(void *)(*((void *)&v29 + 1) + 8 * i) + 64LL) = 0;
      }

      int v10 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v29,  v34,  16LL);
    }

    while (v10);
  }

  gettimeofday(&v28, 0LL);
  uint64_t v13 = mach_absolute_time();
  tv_sec = v28.tv_sec;
  unsigned int v24 = 0u;
  uint64_t v25 = 0u;
  uint64_t v26 = 0u;
  uint64_t v27 = 0u;
  uint64_t v15 = self->_endpoints;
  uint64_t v16 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v24,  v33,  16LL);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v25;
    do
    {
      for (j = 0LL; j != v17; ++j)
      {
        if (*(void *)v25 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v24 + 1) + 8 * j);
        unsigned int v21 = *(unsigned __int8 *)(v20 + 64);
        if (*(_BYTE *)(v20 + 64)) {
          uint64_t v22 = *(void *)(v20 + 48) - tv_sec < -16;
        }
        else {
          uint64_t v22 = 1;
        }
        if (v22)
        {
          socklen_t v23 = *(void *)(v20 + 56);
          if (!v23)
          {
            *(void *)(v20 + 56) = v13;
            socklen_t v23 = v13;
          }

          if (*(_DWORD *)(v20 + 36) != 3 && (!v21 || UpTicksToSeconds(v13 - v23) >= 0x1F))
          {
            ++self->_unreachableCount;
            -[CUNetLinkManager _updateEndpoint:state:](self, "_updateEndpoint:state:", v20, 3LL, (void)v24);
          }

          -[CUNetLinkManager _monitorSendPacketToEndpoint:](self, "_monitorSendPacketToEndpoint:", v20, (void)v24);
        }

        else
        {
          if (*(_DWORD *)(v20 + 36) == 3) {
            ++self->_reReachableCount;
          }
          *(void *)(v20 + 56) = 0LL;
          -[CUNetLinkManager _updateEndpoint:state:](self, "_updateEndpoint:state:", v20, 2LL, (void)v24);
        }
      }

      uint64_t v17 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v24,  v33,  16LL);
    }

    while (v17);
  }
}

  [*(id *)(v9 + 8) removeObject:*(void *)(a1 + 40)];
  ++*(_DWORD *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v12 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v12 + 36) != 1)
  {
    *(_DWORD *)(v12 + 36) = 1;
    uint64_t v13 = _Block_copy(*(const void **)(*(void *)(a1 + 40) + 40LL));
    uint64_t v14 = v13;
    if (v13) {
      (*((void (**)(void *))v13 + 2))(v13);
    }
  }

  return [*(id *)(a1 + 32) _update];
}

  pairingSession = self->_pairingSession;
  if (!pairingSession)
  {
    uint64_t v16 = self->_ucat;
    if (v16->var0 <= 90)
    {
      if (v16->var0 == -1)
      {
        uint64_t v16 = self->_ucat;
      }

      LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUPairingSession _tryPIN:]",  0x5Au,  (uint64_t)"Try PIN without activate\n",  v4,  v5,  v6,  v7,  v27);
    }

  if (![v12 length])
  {
    uint64_t v18 = 4294960552LL;
    goto LABEL_13;
  }

  -[NSMutableDictionary objectForKeyedSubscript:](self->_pairingStreams, "objectForKeyedSubscript:", v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    uint64_t v18 = 4294960575LL;
    goto LABEL_13;
  }

  if (a4 != 1)
  {
    if (a4 == 2)
    {
      uint64_t v15 = &kCryptoAEADDescriptorAESGCM;
      goto LABEL_11;
    }

    uint64_t v18 = 4294960591LL;
LABEL_13:
    NSErrorWithOSStatusF((const char *)v18);
    uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = 0LL;
    goto LABEL_14;
  }

  uint64_t v15 = kCryptoAEADDescriptorChaCha20Poly1305;
LABEL_11:
  uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))*v15;
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___CUPairingStream);
  -[CUPairingStream setAuthTagLength:](v17, "setAuthTagLength:", 16LL);
  -[CUPairingStream setName:](v17, "setName:", v12);
  ASPrintF((void **)&v37);
  uint64_t v25 = v37;
  if (!v37) {
    goto LABEL_39;
  }
  uint64_t v26 = -[CUPairingSession deriveKeyWithSaltPtr:saltLen:infoPtr:infoLen:keyLen:outputKeyPtr:]( self,  "deriveKeyWithSaltPtr:saltLen:infoPtr:infoLen:keyLen:outputKeyPtr:",  "",  0LL,  v37,  strlen(v37),  32LL,  __s,  v12);
  int v38 = v26;
  free(v25);
  int v37 = 0LL;
  if ((_DWORD)v26)
  {
    int v29 = v26;
LABEL_44:
    NSErrorWithOSStatusF((const char *)v29);
    uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    if (!v19) {
      goto LABEL_30;
    }
    unsigned int v24 = self->_ucat;
    if (v24->var0 <= 60)
    {
      if (v24->var0 != -1)
      {
LABEL_17:
        LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUPairingSession openStreamWithName:type:error:]",  0x3Cu,  (uint64_t)"### Open stream '%@' failed: %{error}\n",  v20,  v21,  v22,  v23,  (char)v12);
        goto LABEL_28;
      }

      if (_LogCategory_Initialize((uint64_t)v24, 0x3Cu))
      {
        unsigned int v24 = self->_ucat;
        goto LABEL_17;
      }
    }

  if (v4)
  {
    -[NSMutableDictionary objectForKeyedSubscript:](self->_pairingStreams, "objectForKeyedSubscript:", v12);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 _cleanup];

    uint64_t v4 = v12;
  }
}

  return v20;
}

  uint64_t v16 = self->_authTagLength;
  socklen_t v23 = 0LL;
  uint64_t v17 = -[CUPairingStream decryptInputBytes:inputLength:inputAADBytes:inputAADLength:inputAuthTagPtr:inputAuthTagLength:outputBytes:error:]( self,  "decryptInputBytes:inputLength:inputAADBytes:inputAADLength:inputAuthTagPtr:inputAuthTagLength:outputBytes:error:",  v13,  v14,  a4,  a5,  v13 + v14,  v16,  v15,  &v23);
  uint64_t v18 = v23;
  if (v17)
  {
    if (v15)
    {
      uint64_t v19 = (id)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v15 length:v14];
      if (!v19)
      {
        uint64_t v20 = NSErrorWithOSStatusF((const char *)0xFFFFE59DLL);

        uint64_t v18 = (id)v20;
LABEL_14:
        free(v15);
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v19 = objc_alloc_init(MEMORY[0x189603F48]);
    }

    uint64_t v18 = 0LL;
    goto LABEL_11;
  }

  if (v15) {
    goto LABEL_14;
  }
LABEL_17:
  uint64_t v19 = 0LL;
  if (a6 && v18)
  {
    uint64_t v18 = v18;
    uint64_t v19 = 0LL;
    *a6 = v18;
  }

  uint64_t v12 = *(const void **)(v9 + 8);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  [*(id *)(v9 + 16) enumerateKeysAndObjectsUsingBlock:&__block_literal_global_6418];
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = (void *)MEMORY[0x189607870];
  uint64_t v15 = *MEMORY[0x189607670];
  int v29 = *MEMORY[0x1896075E0];
  uint64_t v16 = (void *)NSString;
  if (MEMORY[0x18960EFF0] && (uint64_t v17 = CUErrorCodesTableGet(), (v18 = *(const char **)(v17 + 8)) != 0LL))
  {
    if (*(_DWORD *)v17 != -6723)
    {
      uint64_t v19 = (const char **)(v17 + 24);
      uint64_t v18 = "";
      while (1)
      {
        uint64_t v20 = *v19;
        if (!*v19) {
          break;
        }
        unsigned int v21 = *((_DWORD *)v19 - 2);
        v19 += 2;
        if (v21 == -6723)
        {
          uint64_t v18 = v20;
          break;
        }
      }
    }
  }

  else
  {
    uint64_t v18 = "";
  }

  uint64_t v22 = [v16 stringWithUTF8String:v18];
  socklen_t v23 = (void *)v22;
  unsigned int v24 = @"?";
  if (v22) {
    unsigned int v24 = (const __CFString *)v22;
  }
  v30[0] = v24;
  [MEMORY[0x189603F68] dictionaryWithObjects:v30 forKeys:&v29 count:1];
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  [v14 errorWithDomain:v15 code:-6723 userInfo:v25];
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  [v13 _completed:v26];

  return [*(id *)(a1 + 32) _cleanup];
}

  uint64_t v8 = *((_DWORD *)v5 + 13);
  if ((v8 & 0x80) != 0)
  {
    if ((v8 & 0x100) == 0)
    {
      if (v5[5])
      {
        -[dispatch_queue_s dismissPinDialogWithToken:](v5[4], "dismissPinDialogWithToken:");
        int v10 = v13[5];
        v13[5] = 0LL;

        uint64_t v5 = v13;
      }

      uint64_t v11 = v5[4];
      v5[4] = 0LL;

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v9 = v5[34];
    if (v9)
    {
      (*((void (**)(void))v9 + 2))();
LABEL_12:
      uint64_t v5 = v13;
    }
  }
}

  *(_BYTE *)(v9 + 8) = 1;
  return [*(id *)(a1 + 32) _update];
}

  if (*(_BYTE *)(v9 + 9)) {
    return [(id)v9 _scheduleStopThread];
  }
  return result;
}

  *(_BYTE *)(v9 + 40) = 0;
  return [*(id *)(a1 + 32) _invalidated];
}

  obj = v9;
  objc_sync_enter(obj);
  uint64_t v12 = *(__CFRunLoop **)(*(void *)(a1 + 32) + 16LL);
  if (v12) {
    CFRunLoopStop(v12);
  }
  objc_sync_exit(obj);
}

  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 1;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 3221225472LL;
  v14[2] = __27__CURunLoopThread_activate__block_invoke_2;
  v14[3] = &unk_189F34238;
  v14[4] = *(void *)(a1 + 32);
  return [MEMORY[0x189607A40] detachNewThreadWithBlock:v14];
}

  [v9 _ensureStarted];
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

  interfaceName = self->_interfaceName;
  uint64_t v33 = 0LL;
  uint64_t v13 = (void *)[v10 copyConnectionInfoWithFlags:0 interfaceName:interfaceName error:&v33];
  uint64_t v14 = v33;
  uint64_t v15 = v14;
  if (v13)
  {
    if ((self->_flags & 0x10) != 0) {
      uint64_t v16 = 1536;
    }
    else {
      uint64_t v16 = 1024;
    }
    uint64_t v17 = self->_flags & 1 | (4 * ((self->_flags >> 5) & 1)) | v16;
    connectTimeoutSecs = self->_connectTimeoutSecs;
    if (connectTimeoutSecs <= 0.0) {
      uint64_t v19 = -1LL;
    }
    else {
      uint64_t v19 = (unint64_t)(connectTimeoutSecs * 1000000000.0);
    }
    uint64_t v20 = self;
    socklen_t v23 = 0u;
    unsigned int v24 = 0u;
    int v29 = 0u;
    int v30 = 0u;
    uint64_t v32 = 0LL;
    uint64_t v31 = 0u;
    uint64_t v27 = 0u;
    uint64_t v28 = 0u;
    uint64_t v25 = 0u;
    uint64_t v26 = 0u;
    DWORD2(v23) = v20->_defaultPort;
    HIDWORD(v23) = v17;
    *(void *)&unsigned int v24 = v19;
    *((void *)&v24 + 1) = -1LL;
    *((void *)&v29 + 1) = _connectCompletion;
    *(void *)&int v30 = v13;
    dispatchQueue = v20->_dispatchQueue;
    *((void *)&v28 + 1) = 152LL;
    *((void *)&v26 + 1) = v20;
    *(void *)&uint64_t v27 = dispatchQueue;
    *(void *)&int v29 = -[NSString UTF8String](v20->_label, "UTF8String");
  }

  else if (a4)
  {
    *a4 = v14;
  }

  return v13 != 0LL;
}

  if ((self->_flags & 0x10) != 0) {
    uint64_t v12 = 1536;
  }
  else {
    uint64_t v12 = 1024;
  }
  uint64_t v13 = self->_flags & 1 | (4 * ((self->_flags >> 5) & 1)) | v12;
  connectTimeoutSecs = self->_connectTimeoutSecs;
  if (connectTimeoutSecs <= 0.0) {
    uint64_t v15 = -1LL;
  }
  else {
    uint64_t v15 = (unint64_t)(connectTimeoutSecs * 1000000000.0);
  }
  uint64_t v16 = self;
  uint64_t v36 = 0LL;
  uint64_t v35 = 0u;
  uint64_t v34 = 0u;
  uint64_t v33 = 0u;
  uint64_t v31 = 0LL;
  int v30 = 0u;
  int v29 = 0u;
  uint64_t v28 = 0u;
  uint64_t v32 = 152LL;
  uint64_t v17 = v10;
  socklen_t v23 = [v17 UTF8String];
  defaultPort = v16->_defaultPort;
  uint64_t v25 = v13;
  uint64_t v26 = v15;
  uint64_t v27 = -1LL;
  *(void *)&int v29 = _connectHandler;
  *((void *)&v29 + 1) = v16;
  *(void *)&int v30 = v16->_dispatchQueue;
  *(void *)&uint64_t v33 = -[NSString UTF8String](v16->_label, "UTF8String");
  uint64_t v18 = (const char *)AsyncConnection_ConnectEx(&v16->_connector, (uint64_t)&v23);
  if ((_DWORD)v18)
  {
    NSErrorWithOSStatusF(v18);
    uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
    CFRelease(v16);
    uint64_t v19 = v20 != 0LL;
    if (a4 && v20)
    {
      uint64_t v20 = v20;
      *a4 = v20;
      uint64_t v19 = 1;
    }
  }

  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0LL;
  }

  unsigned int v21 = !v19;

  return v21;
}

  uint64_t v15 = (void *)v17[2];
  v17[2] = v6;

  [v17 completion];
  uint64_t v16 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v17 setCompletion:0];
  if (v16) {
    v16[2](v16);
  }
}

  uint64_t v13 = (void *)v15[1];
  v15[1] = v10;

  [v15 completion];
  uint64_t v14 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  [v15 setCompletion:0];
  if (v14) {
    v14[2](v14);
  }
}

  sa_family = self->_interfaceAddress.sa.sa_family;
  if (sa_family == 30)
  {
    p_sin6_addr = &self->_interfaceAddress.v6.sin6_addr;
    sin6_scope_id = self->_interfaceAddress.v6.sin6_scope_id;
    uint64_t v13 = &v49;
LABEL_9:
    uint64_t v14 = ServerSocketOpenEx2( sa_family,  1,  6,  (__int128 *)p_sin6_addr,  sin6_scope_id,  self->_tcpListenPort,  (unsigned int *)&self->_tcpListeningPort,  -1,  0,  v13);
    if ((_DWORD)v14) {
      goto LABEL_53;
    }
    goto LABEL_12;
  }

  if (sa_family == 2)
  {
    sin6_scope_id = 0;
    p_sin6_addr = (in6_addr *)&self->_interfaceAddress.v6.sin6_flowinfo;
    uint64_t v13 = &v50;
    goto LABEL_9;
  }

  uint64_t v14 = ServerSocketPairOpen(1, 6, self->_tcpListenPort, &self->_tcpListeningPort, -1, &v50, &v49);
  if ((_DWORD)v14)
  {
LABEL_53:
    NSErrorWithOSStatusF((const char *)v14);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_33;
  }

  -[NSMutableSet removeObject:](self->_connections, "removeObject:", v6);
  connectionEndedHandler = (void (**)(id, id, void))self->_connectionEndedHandler;
  if (connectionEndedHandler) {
    connectionEndedHandler[2](connectionEndedHandler, v14, 0LL);
  }
}

  uint64_t v8 = _Block_copy(self->_actionHandler);
  uint64_t v9 = v8;
  if (v8) {
    (*((void (**)(void *, uint64_t, void))v8 + 2))(v8, 5LL, 0LL);
  }

  -[CUUserNotificationSession _invalidate](self, "_invalidate");
}

  stepError = self->_stepError;
  self->_stepError = 0LL;

  self->_stepState = 1;
  unCenter = self->_unCenter;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3221225472LL;
  v11[2] = __52__CUUserNotificationSession__runAuthorizeCheckStart__block_invoke;
  v11[3] = &unk_189F32C88;
  v11[4] = self;
  v11[5] = unCenter;
  int v10 = unCenter;
  -[UNUserNotificationCenter getNotificationSettingsWithCompletionHandler:]( v10,  "getNotificationSettingsWithCompletionHandler:",  v11);
}

  stepError = self->_stepError;
  self->_stepError = 0LL;

  self->_stepState = 1;
  unCenter = self->_unCenter;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3221225472LL;
  v11[2] = __54__CUUserNotificationSession__runAuthorizeRequestStart__block_invoke;
  v11[3] = &unk_189F32CD8;
  v11[4] = self;
  v11[5] = unCenter;
  int v10 = unCenter;
  -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]( v10,  "requestAuthorizationWithOptions:completionHandler:",  6LL,  v11);
}

  [*(id *)(v2 + 8) removeAllObjects];
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 1;
  uint64_t result = *(void **)(a1 + 32);
  if (result[8]) {
    return (void *)[result _updateActionCategories];
  }
  return result;
}

  if (v2[8]) {
    [v2 _updateActionCategories];
  }
}

  [*(id *)(v7 + 8) speechRequest];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = a1[4];
  if ((void *)a1[6] != v14)
  {
    uint64_t v16 = *(int **)(v15 + 40);
    if (*v16 <= 60)
    {
      if (*v16 != -1)
      {
LABEL_8:
        LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUVoiceSession _processQueuedRequests]_block_invoke_2",  0x3Cu,  (uint64_t)"### Finished speaking non-current request?\n",  v10,  v11,  v12,  v13,  v23);
        uint64_t v15 = a1[4];
        goto LABEL_10;
      }

      uint64_t v17 = _LogCategory_Initialize((uint64_t)v16, 0x3Cu);
      uint64_t v15 = a1[4];
      if (v17)
      {
        uint64_t v16 = *(int **)(v15 + 40);
        goto LABEL_8;
      }
    }
  }

  *(_BYTE *)(v9 + 8) = 1;
  *(CFAbsoluteTime *)(*(void *)(a1 + 32) + 72LL) = CFAbsoluteTimeGetCurrent();
  [*(id *)(a1 + 32) _progress:10 info:0];
  return [*(id *)(a1 + 32) _run];
}

  *(_BYTE *)(v9 + 9) = 1;
  [*(id *)(a1 + 32) _update];
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

  if (self->_invalidateCalled)
  {
    -[CUWiFiScanner _invalidated](self, "_invalidated");
    goto LABEL_39;
  }

  if (self->_suspended) {
    goto LABEL_39;
  }
  if (a4)
  {
    errorHandler = (void (**)(id, void *))self->_errorHandler;
    if (errorHandler)
    {
      uint64_t v14 = (void *)MEMORY[0x189607870];
      uint64_t v15 = *MEMORY[0x189607670];
      uint64_t v16 = a4;
      v60 = *MEMORY[0x1896075E0];
      uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, a4, 0, 0));
      uint64_t v18 = (void *)v17;
      uint64_t v19 = @"?";
      if (v17) {
        uint64_t v19 = (const __CFString *)v17;
      }
      v61[0] = v19;
      [MEMORY[0x189603F68] dictionaryWithObjects:v61 forKeys:&v60 count:1];
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      [v14 errorWithDomain:v15 code:v16 userInfo:v20];
      unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
      errorHandler[2](errorHandler, v21);
    }
  }

  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( self->_devices,  "enumerateKeysAndObjectsUsingBlock:",  &__block_literal_global_9917);
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  uint64_t v22 = v6;
  socklen_t v23 = [v22 countByEnumeratingWithState:&v54 objects:v59 count:16];
  if (v23)
  {
    unsigned int v24 = v23;
    uint64_t v25 = *(void *)v55;
    do
    {
      for (i = 0LL; i != v24; ++i)
      {
        if (*(void *)v55 != v25) {
          objc_enumerationMutation(v22);
        }
        -[CUWiFiScanner _scanWiFiProcessResult:]( self,  "_scanWiFiProcessResult:",  *(void *)(*((void *)&v54 + 1) + 8 * i));
      }

      unsigned int v24 = [v22 countByEnumeratingWithState:&v54 objects:v59 count:16];
    }

    while (v24);
  }

  v52 = 0u;
  v53 = 0u;
  int v50 = 0u;
  v51 = 0u;
  -[NSMutableDictionary allKeys](self->_devices, "allKeys");
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v28 = [v27 countByEnumeratingWithState:&v50 objects:v58 count:16];
  if (v28)
  {
    int v29 = v28;
    int v30 = *(void *)v51;
    do
    {
      uint64_t v31 = 0LL;
      do
      {
        if (*(void *)v51 != v30) {
          objc_enumerationMutation(v27);
        }
        uint64_t v32 = *(void *)(*((void *)&v50 + 1) + 8 * v31);
        -[NSMutableDictionary objectForKeyedSubscript:](self->_devices, "objectForKeyedSubscript:", v32);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
        if ((int)[v33 present] <= -2)
        {
          int v38 = self->_ucat;
          if (v38->var0 <= 30)
          {
            if (v38->var0 != -1) {
              goto LABEL_28;
            }
            if (_LogCategory_Initialize((uint64_t)v38, 0x1Eu))
            {
              int v38 = self->_ucat;
LABEL_28:
              LogPrintF( (uint64_t)v38,  (uint64_t)"-[CUWiFiScanner _scanWiFiFinished:status:]",  0x1Eu,  (uint64_t)"WiFi scan lost: %@\n",  v34,  v35,  v36,  v37,  (char)v33);
            }
          }

          -[NSMutableDictionary removeObjectForKey:](self->_devices, "removeObjectForKey:", v32);
          deviceLostHandler = (void (**)(id, void *))self->_deviceLostHandler;
          if (deviceLostHandler) {
            deviceLostHandler[2](deviceLostHandler, v33);
          }
        }

        ++v31;
      }

      while (v29 != v31);
      uint64_t v40 = [v27 countByEnumeratingWithState:&v50 objects:v58 count:16];
      int v29 = v40;
    }

    while (v40);
  }

  scanTimer = self->_scanTimer;
  if (scanTimer)
  {
    uint64_t v42 = scanTimer;
    dispatch_source_cancel(v42);
    uint64_t v43 = self->_scanTimer;
    self->_scanTimer = 0LL;
  }

  int v44 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B78],  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  dispatch_source_t v45 = self->_scanTimer;
  self->_scanTimer = v44;

  dispatch_source_t v46 = self->_scanTimer;
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 3221225472LL;
  handler[2] = __42__CUWiFiScanner__scanWiFiFinished_status___block_invoke_2;
  handler[3] = &unk_189F34238;
  handler[4] = self;
  dispatch_source_set_event_handler((dispatch_source_t)v46, handler);
  v47 = self->_scanTimer;
  int v48 = dispatch_time(0LL, 5000000000LL);
  dispatch_source_set_timer((dispatch_source_t)v47, v48, 0xFFFFFFFFFFFFFFFFLL, 0x4A817C80uLL);
  dispatch_resume((dispatch_object_t)self->_scanTimer);
LABEL_39:
}

  *(_BYTE *)(v9 + 40) = 0;
  uint64_t result = *(void *)(a1 + 32);
  if (*(_BYTE *)(result + 8) && !*(_BYTE *)(result + 26) && !*(void *)(result + 32)) {
    return [(id)result _scanWiFiStart];
  }
  return result;
}

  uint64_t v12 = *(void **)(v9 + 32);
  if (v12)
  {
    uint64_t v13 = v12;
    dispatch_source_cancel(v13);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 32);
    *(void *)(v14 + 32) = 0LL;

    uint64_t v9 = *(void *)(a1 + 32);
  }

  *(_BYTE *)(v9 + 40) = 1;
}

  *(_BYTE *)(v9 + 8) = 1;
  return [*(id *)(a1 + 32) _scanWiFiStart];
}

  dispatch_assert_queue_V2((dispatch_queue_t)self->_dispatchQueue);
  int v10 = self->_listenerEndpoint;
  if (v10)
  {
    if (!self->_xpcCnx)
    {
      uint64_t v11 = (NSXPCConnection *)[objc_alloc(MEMORY[0x189607B30]) initWithListenerEndpoint:v10];
      xpcCnx = self->_xpcCnx;
      self->_xpcCnx = v11;

      -[NSXPCConnection _setQueue:](self->_xpcCnx, "_setQueue:", self->_dispatchQueue);
      -[NSXPCConnection setExportedInterface:](self->_xpcCnx, "setExportedInterface:", self->_exportedInterface);
      -[NSXPCConnection setExportedObject:](self->_xpcCnx, "setExportedObject:", self->_exportedObject);
      -[NSXPCConnection setRemoteObjectInterface:]( self->_xpcCnx,  "setRemoteObjectInterface:",  self->_remoteObjectInterface);
      uint64_t v13 = MEMORY[0x1895F87A8];
      v24[0] = MEMORY[0x1895F87A8];
      v24[1] = 3221225472LL;
      v24[2] = __43__CUXPCAgent_activateDirectAndReturnError___block_invoke;
      v24[3] = &unk_189F34238;
      v24[4] = self;
      -[NSXPCConnection setInterruptionHandler:](self->_xpcCnx, "setInterruptionHandler:", v24);
      v23[0] = v13;
      v23[1] = 3221225472LL;
      v23[2] = __43__CUXPCAgent_activateDirectAndReturnError___block_invoke_2;
      v23[3] = &unk_189F34238;
      v23[4] = self;
      -[NSXPCConnection setInvalidationHandler:](self->_xpcCnx, "setInvalidationHandler:", v23);
      -[NSXPCConnection resume](self->_xpcCnx, "resume");
LABEL_10:
      uint64_t v18 = 0;
      uint64_t v19 = 0LL;
      goto LABEL_11;
    }
  }

  else if (!self->_xpcListener)
  {
    [MEMORY[0x189607B50] anonymousListener];
    uint64_t v14 = (NSXPCListener *)objc_claimAutoreleasedReturnValue();
    xpcListener = self->_xpcListener;
    self->_xpcListener = v14;

    -[NSXPCListener _setQueue:](self->_xpcListener, "_setQueue:", self->_dispatchQueue);
    -[NSXPCListener setDelegate:](self->_xpcListener, "setDelegate:", self);
    -[NSXPCListener resume](self->_xpcListener, "resume");
    -[NSXPCListener endpoint](self->_xpcListener, "endpoint");
    uint64_t v16 = (NSXPCListenerEndpoint *)objc_claimAutoreleasedReturnValue();
    listenerEndpoint = self->_listenerEndpoint;
    self->_listenerEndpoint = v16;

    goto LABEL_10;
  }

  NSErrorWithOSStatusF((const char *)0xFFFFE5BFLL);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = v22;
  uint64_t v18 = v22 != 0LL;
  if (a3 && v22)
  {
    uint64_t v19 = v22;
    *a3 = v19;
    uint64_t v18 = 1;
  }

  interruptionHandler = (void (**)(void))self->_interruptionHandler;
}

  uint64_t v12 = *(void **)(v9 + 24);
  *(void *)(v9 + 24) = 0LL;

  return [*(id *)(a1 + 32) _invalidated];
}

  return v7;
}

  string = xpc_dictionary_get_string(v15, a3);
  if (!string)
  {
    uint64_t v20 = (id)*MEMORY[0x189607670];
LABEL_10:
    uint64_t v22 = xpc_dictionary_get_string(v15, a4);
    if (v22)
    {
      socklen_t v23 = [objc_alloc(NSString) initWithUTF8String:v22];
      if (!v23)
      {
        if (a9)
        {
          NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5AALL);
          unsigned int v21 = 0LL;
          *a9 = (id)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          unsigned int v21 = 0LL;
        }

        goto LABEL_26;
      }

      unsigned int v24 = (void *)v23;
      uint64_t v25 = objc_alloc_init(MEMORY[0x189603FC8]);
      [v25 setObject:v24 forKeyedSubscript:@"cuErrorMsg"];
    }

    else
    {
      uint64_t v25 = 0LL;
    }

    uint64_t v26 = xpc_dictionary_get_value(v15, a5);
    uint64_t v27 = (void *)v26;
    if (v26 && (uint64_t v28 = MEMORY[0x186E43C98](v26), a6 <= 3) && v28 == MEMORY[0x1895F9250])
    {
      int v37 = 0LL;
      int v29 = _CUXPCDecodeNSError(v27, a2, a3, a4, a5, a6 + 1, 1LL, &v37, a9);
      int v30 = v37;
      if (!v29)
      {
        unsigned int v21 = 0LL;
LABEL_25:

LABEL_26:
        goto LABEL_27;
      }

      uint64_t v31 = a8;
      if (!v25) {
        uint64_t v25 = objc_alloc_init(MEMORY[0x189603FC8]);
      }
      [v25 setObject:v30 forKeyedSubscript:*MEMORY[0x189607798]];
    }

    else
    {
      uint64_t v31 = a8;
    }

    uint64_t v32 = (void *)[objc_alloc(MEMORY[0x189607870]) initWithDomain:v20 code:int64 userInfo:v25];
    int v30 = v32;
    if (v31)
    {
      int v30 = v32;
      int *v31 = v30;
    }

    unsigned int v21 = 1LL;
    goto LABEL_25;
  }

  uint64_t v20 = (id)[objc_alloc(NSString) initWithUTF8String:string];
  if (v20) {
    goto LABEL_10;
  }
  if (a9)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5AALL);
    unsigned int v21 = 0LL;
    *a9 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    unsigned int v21 = 0LL;
  }

  if (v5) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  uint64_t v9 = v8;

  return v9;
}

  return v7;
}

  uint64_t v12 = *(int **)(a3 + 96);
  if (*v12 > 90) {
    goto LABEL_21;
  }
  if (*v12 != -1) {
    goto LABEL_7;
  }
  if (_LogCategory_Initialize((uint64_t)v12, 0x5Au))
  {
    uint64_t v12 = *(int **)(a3 + 96);
LABEL_7:
    LogPrintF( (uint64_t)v12,  (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)",  0x5Au,  (uint64_t)"Connect failed: CID 0x%08X, Peer %s, %#m\n",  a5,  a6,  a7,  a8,  *(_DWORD *)(a3 + 160));
  }

  CFRelease(cf);
}

  uint64_t v11 = accept(*(_DWORD *)(a1 + 8), 0LL, 0LL);
  if (v11 < 0)
  {
    if (!*__error())
    {
      LOBYTE(v18) = -44;
      goto LABEL_19;
    }

    uint64_t v18 = *__error();
    if (v18) {
      goto LABEL_19;
    }
  }

  *(_OWORD *)&v27[16] = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  uint64_t v12 = *(void *)(v9 + 120);
  v24[0] = *(void *)(v9 + 176);
  v24[1] = v12;
  uint64_t v25 = *(_OWORD *)(v9 + 184);
  uint64_t v26 = *(void *)(v9 + 200);
  *(_OWORD *)&v27[8] = *(_OWORD *)(v9 + 208);
  *(void *)&v27[24] = *(void *)(v9 + 224);
  uint64_t v28 = 0LL;
  uint64_t v13 = HTTPConnectionCreate(&v23, (uint64_t)v24, v11, (void *)v9);
  if (!v13)
  {
    uint64_t v19 = v23;
    *(void *)(v23 + 112) = _HTTPServerCloseConnection;
    HTTPConnectionSetDispatchQueue(v19, *(dispatch_object_s **)(v9 + 16));
    *(void *)(v19 + 16) = *(void *)(v9 + 56);
    *(void *)(v9 + 56) = v19;
    uint64_t v20 = HTTPConnectionStart(v19);
    LOBYTE(v18) = v20;
    if (v20) {
      goto LABEL_19;
    }
    unsigned int v21 = *(int **)(v9 + 24);
    if (*v21 <= 30)
    {
      if (*v21 == -1)
      {
        unsigned int v21 = *(int **)(v9 + 24);
      }

      LogPrintF( (uint64_t)v21,  (uint64_t)"void _HTTPServerAcceptConnection(void *)",  0x1Eu,  (uint64_t)"Accepted connection from %##a to %##a\n",  v14,  v15,  v16,  v17,  v19);
    }

  uint64_t v6 = v8;
  uint64_t v5 = v9;
  *((_DWORD *)v3 + 3) = v9;
  *((_DWORD *)v3 + 4) = v6;
  SocketSetNonBlocking(v5, 1);
  SocketSetNonBlocking(*((_DWORD *)v3 + 4), 1);
  uint64_t v4 = 0LL;
  v3[3] = NetSocket_ReadInternal;
  v3[4] = NetSocket_WriteInternal;
  v3[5] = NetSocket_WriteVInternal;
  v3[6] = NetSocket_WriteFileSlow;
  *a1 = v3;
  return v4;
}

  uint64_t v7 = (const __CFString *)*MEMORY[0x18960C548];
  uint64_t v8 = (const __CFString *)*MEMORY[0x18960C588];
  NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity( 0LL,  (CFStringRef)*MEMORY[0x18960C548],  (CFStringRef)*MEMORY[0x18960C588]);
  int v10 = (CFStringRef *)MEMORY[0x18960C590];
  if (NetworkGlobalEntity)
  {
    uint64_t v11 = NetworkGlobalEntity;
    uint64_t v12 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, NetworkGlobalEntity);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = CFGetTypeID(v12);
      if (v14 == CFDictionaryGetTypeID())
      {
        uint64_t v15 = (const void *)*MEMORY[0x18960C558];
        CFTypeID TypeID = CFStringGetTypeID();
        TypedValue = CFDictionaryGetTypedValue(v13, v15, TypeID, 0LL);
        uint64_t v18 = (const __CFString *)TypedValue;
        if (TypedValue) {
          CFRetain(TypedValue);
        }
      }

      else
      {
        uint64_t v18 = 0LL;
      }

      CFRelease(v13);
      CFRelease(v11);
      if (v18) {
        goto LABEL_25;
      }
    }

    else
    {
      CFRelease(v11);
    }
  }

  uint64_t v19 = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, v7, *v10);
  if (v19)
  {
    uint64_t v20 = v19;
    unsigned int v21 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, v19);
    if (v21)
    {
      uint64_t v22 = v21;
      socklen_t v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID())
      {
        unsigned int v24 = (const void *)*MEMORY[0x18960C558];
        uint64_t v25 = CFStringGetTypeID();
        uint64_t v26 = CFDictionaryGetTypedValue(v22, v24, v25, 0LL);
        uint64_t v18 = (const __CFString *)v26;
        if (v26) {
          CFRetain(v26);
        }
      }

      else
      {
        uint64_t v18 = 0LL;
      }

      CFRelease(v22);
      CFRelease(v20);
      if (v18) {
        goto LABEL_25;
      }
    }

    else
    {
      CFRelease(v20);
    }
  }

  uint64_t v18 = @"en0";
  CFRetain(@"en0");
LABEL_25:
  if (a2)
  {
    *(_BYTE *)(a2 + 1) = 0;
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, v7, v18, v8);
    if (NetworkInterfaceEntity)
    {
      int v29 = NetworkInterfaceEntity;
      int v30 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, NetworkInterfaceEntity);
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = CFGetTypeID(v30);
        if (v32 == CFDictionaryGetTypeID())
        {
          uint64_t v33 = (const void *)*MEMORY[0x18960C6C0];
          uint64_t v34 = CFArrayGetTypeID();
          uint64_t v35 = CFDictionaryGetTypedValue(v31, v33, v34, 0LL);
          if (v35)
          {
            uint64_t v36 = v35;
            if (CFArrayGetCount(v35) >= 1)
            {
              int v37 = CFStringGetTypeID();
              TypedValueAtIndex = (const __CFString *)CFArrayGetTypedValueAtIndex(v36, 0LL, v37, 0LL);
              if (TypedValueAtIndex)
              {
                buffer[0] = 0;
                CFStringGetCString(TypedValueAtIndex, buffer, 128LL, 0x8000100u);
                StringToSockAddr((unsigned __int8 *)buffer, a2, 0x1CuLL, 0LL);
                if (*(_BYTE *)(a2 + 1) != 2) {
                  *(_BYTE *)(a2 + 1) = 0;
                }
              }
            }
          }
        }

        CFRelease(v31);
      }

      CFRelease(v29);
    }
  }

  if (a3)
  {
    *(_BYTE *)(a3 + 1) = 0;
    socklen_t v39 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, v7, v18, *v10);
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = (const __CFDictionary *)SCDynamicStoreCopyValue(v5, v39);
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = CFGetTypeID(v41);
        if (v43 == CFDictionaryGetTypeID())
        {
          int v44 = (const void *)*MEMORY[0x18960C730];
          dispatch_source_t v45 = CFArrayGetTypeID();
          dispatch_source_t v46 = CFDictionaryGetTypedValue(v42, v44, v45, 0LL);
          if (v46)
          {
            v47 = v46;
            if (CFArrayGetCount(v46) >= 1)
            {
              int v48 = CFStringGetTypeID();
              int v49 = (const __CFString *)CFArrayGetTypedValueAtIndex(v47, 0LL, v48, 0LL);
              if (v49)
              {
                buffer[0] = 0;
                CFStringGetCString(v49, buffer, 128LL, 0x8000100u);
                StringToSockAddr((unsigned __int8 *)buffer, a3, 0x1CuLL, 0LL);
                if (*(_BYTE *)(a3 + 1) == 30)
                {
                  if (*(unsigned __int8 *)(a3 + 8) == 254 && (*(_BYTE *)(a3 + 9) & 0xC0) == 0x80)
                  {
                    buffer[0] = 0;
                    CFStringGetCString(v18, buffer, 128LL, 0x8000100u);
                    *(_DWORD *)(a3 + 24) = if_nametoindex(buffer);
                  }
                }

                else
                {
                  *(_BYTE *)(a3 + 1) = 0;
                }
              }
            }
          }
        }

        CFRelease(v42);
      }

      CFRelease(v40);
    }
  }

  if (v18) {
    CFRelease(v18);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0LL;
}

  uint64_t v4 = 0LL;
LABEL_10:
  a3[2] = v5 + v4;
  return v4;
}

  uint64_t v7 = CFGetTypeID(v5);
  if (v7 == CFStringGetTypeID()) {
    goto LABEL_8;
  }
  CFRelease(v5);
LABEL_7:
  uint64_t v5 = &stru_189F34A78;
  CFRetain(&stru_189F34A78);
LABEL_8:
  if (a2)
  {
    *a1 = 0;
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = "";
  }

  CFStringGetCString(v5, a1, a2, 0x8000100u);
  CFRelease(v5);
  return v8;
}

void _AsyncConnection_WakeResolveCallback( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    if (gLogCategory_AsyncCnx <= 90)
    {
      char v8 = a5;
      if (gLogCategory_AsyncCnx != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_AsyncCnx, 0x5Au)) {
        LogPrintF( (uint64_t)&gLogCategory_AsyncCnx,  (uint64_t)"void _AsyncConnection_WakeResolveCallback(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorTy pe, const char *, const char *, uint16_t, uint16_t, const unsigned char *, void *)",  0x5Au,  (uint64_t)"### WakeResolve failed: '%s', ifindex %u, %#m\n",  a5,  a6,  a7,  a8,  v8);
      }
    }
  }

void AsyncConnection_Release(dispatch_queue_t *context)
{
}

void _AsyncConnection_UserRelease(void *a1)
{
}

uint64_t AsyncConnection_ConnectSync( const char *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  return AsyncConnection_ConnectSyncEx(a1, a2, a3, a4, a5, a6, a7, a8, 0LL, 0LL, a9);
}

uint64_t AsyncConnection_ConnectSyncEx( const char *a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t a10, _DWORD *a11)
{
  dispatch_semaphore_t dsema = 0LL;
  if (!*a1) {
    return 4294960591LL;
  }
  dispatch_queue_t v19 = dispatch_queue_create(a1, 0LL);
  dispatch_object_t object = v19;
  if (!v19)
  {
    uint64_t v21 = 4294960596LL;
LABEL_22:
    if (dsema) {
      dispatch_release(dsema);
    }
    goto LABEL_24;
  }

  dispatch_queue_t v20 = v19;
  dispatch_semaphore_t dsema = dispatch_semaphore_create(0LL);
  if (dsema)
  {
    uint64_t v36 = -6700LL;
    uint64_t v54 = 0LL;
    __int128 v53 = 0u;
    __int128 v52 = 0u;
    uint64_t v49 = 0LL;
    __int128 v51 = 0u;
    uint64_t v50 = 152LL;
    int v37 = a1;
    int v38 = a2;
    int v39 = a3;
    uint64_t v40 = a4;
    int v41 = a5;
    int v42 = a6;
    uint64_t v43 = a7;
    uint64_t v44 = a8;
    dispatch_source_t v45 = _AsyncConnection_ConnectSyncHandler;
    p_dispatch_object_t object = &object;
    dispatch_queue_t v47 = v20;
    uint64_t v48 = 0LL;
    uint64_t v21 = AsyncConnection_ConnectEx(&v33, (uint64_t)&v37);
    if (!(_DWORD)v21)
    {
      if (a9)
      {
        char v22 = 1;
        uint64_t v23 = v33;
        while (1)
        {
          while (1)
          {
            char v24 = v22;
            dispatch_time_t v25 = dispatch_time(0LL, 250000000LL);
            if (!dispatch_semaphore_wait(dsema, v25))
            {
              if ((v24 & 1) == 0) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }

            char v22 = 0;
            if ((v24 & 1) != 0)
            {
              int v26 = a9(a10);
              char v22 = 1;
              if (v26) {
                break;
              }
            }
          }

          uint64_t v31 = *(int **)(v23 + 144);
          if (*v31 <= 50)
          {
            if (*v31 != -1) {
              goto LABEL_12;
            }
          }

uint64_t _AsyncConnection_ConnectSyncHandler(int a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) = a2;
  if (!a2) {
    *(_DWORD *)(a3 + 20) = a1;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a3 + 8));
}

uint64_t SineTable_Create(void *a1, int a2, int a3)
{
  uint64_t v6 = malloc(2LL * a2 + 12);
  if (!v6) {
    return 4294960568LL;
  }
  uint64_t v7 = v6;
  *uint64_t v6 = a2;
  v6[1] = a3;
  v6[2] = 0;
  if (a2 >= 1)
  {
    unint64_t v8 = 0LL;
    double v16 = 6.28318531 / (double)a2;
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    uint64x2_t v9 = (uint64x2_t)xmmword_186B49B80;
    int64x2_t v14 = vdupq_n_s64(2uLL);
    uint64_t v10 = (a2 + 1LL) & 0x1FFFFFFFELL;
    do
    {
      int64x2_t v20 = (int64x2_t)v9;
      int32x2_t v19 = vmovn_s64((int64x2_t)vcgeq_u64(v15, v9));
      v11.i64[0] = (int)v8;
      v11.i64[1] = (int)v8 + 1;
      float64x2_t v17 = vmulq_n_f64(vcvtq_f64_s64(v11), v16);
      double v18 = sin(v17.f64[1]);
      v12.f64[0] = sin(v17.f64[0]);
      v12.f64[1] = v18;
      if ((v19.i8[0] & 1) != 0) {
        LOWORD(v7[v8 / 2 + 3]) = (int)(32767.0 * v12.f64[0]);
      }
      if ((v19.i8[4] & 1) != 0) {
        HIWORD(v7[v8 / 2 + 3]) = (int)vmuld_lane_f64(32767.0, v12, 1);
      }
      v8 += 2LL;
      uint64x2_t v9 = (uint64x2_t)vaddq_s64(v20, v14);
    }

    while (v10 != v8);
  }

  uint64_t result = 0LL;
  *a1 = v7;
  return result;
}

_DWORD *SineTable_GetSamples(_DWORD *result, int a2, int a3, _WORD *a4)
{
  int v4 = result[2];
  if (a3 >= 1)
  {
    int v5 = *result;
    int v6 = result[1];
    uint64_t v7 = &a4[2 * a3];
    do
    {
      __int16 v8 = *((_WORD *)result + v4 + 6);
      int v9 = v4 + v6;
      if (v9 <= v5) {
        int v10 = 0;
      }
      else {
        int v10 = v5;
      }
      int v4 = v9 - v10;
      if (a2 >= 1) {
        __int16 v11 = 0;
      }
      else {
        __int16 v11 = v8;
      }
      if (a2 < 0) {
        __int16 v8 = 0;
      }
      *a4 = v11;
      a4[1] = v8;
      a4 += 2;
    }

    while (a4 < v7);
  }

  result[2] = v4;
  return result;
}

uint64_t AudioStreamGetTypeID()
{
  if (gAudioStreamInitOnce != -1) {
    dispatch_once_f(&gAudioStreamInitOnce, 0LL, (dispatch_function_t)_AudioStreamGetTypeID);
  }
  return gAudioStreamTypeID;
}

uint64_t _AudioStreamGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gAudioStreamCFTypeID TypeID = result;
  return result;
}

void _AudioStreamFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 176) = 0LL;
  }

uint64_t AudioStreamCreate(uint64_t *a1)
{
  if (gAudioStreamInitOnce != -1) {
    dispatch_once_f(&gAudioStreamInitOnce, 0LL, (dispatch_function_t)_AudioStreamGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v3 = Instance;
  uint64_t result = 0LL;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_DWORD *)(v3 + 132) = 1065353216;
  *(void *)(v3 + 224) = 0LL;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3;
  return result;
}

uint64_t AudioStreamSetInputCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 144) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

uint64_t AudioStreamSetOutputCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 160) = a2;
  *(void *)(result + 168) = a3;
  return result;
}

CFNumberRef _AudioStreamCopyProperty(uint64_t a1, CFTypeRef cf1, int *a3)
{
  if (CFEqual(cf1, @"audioType"))
  {
    CFNumberRef v6 = *(CFNumberRef *)(a1 + 176);
    if (v6)
    {
LABEL_3:
      CFRetain(v6);
LABEL_7:
      int Parameter = 0;
      goto LABEL_8;
    }

    int Parameter = -6727;
    goto LABEL_8;
  }

  if (CFEqual(cf1, @"format"))
  {
    CFDataRef Int64 = CFDataCreate(0LL, (const UInt8 *)(a1 + 184), 40LL);
LABEL_6:
    CFNumberRef v6 = Int64;
    if (Int64) {
      goto LABEL_7;
    }
    int Parameter = -6728;
    goto LABEL_8;
  }

  if (CFEqual(cf1, @"input"))
  {
    int v10 = (CFNumberRef *)MEMORY[0x189604DE8];
    int v11 = *(unsigned __int8 *)(a1 + 97);
LABEL_13:
    if (!v11) {
      int v10 = (CFNumberRef *)MEMORY[0x189604DE0];
    }
    CFNumberRef v6 = *v10;
    goto LABEL_3;
  }

  if (CFEqual(cf1, @"latency"))
  {
    uint64_t v12 = *(void *)(a1 + 24);
    if (!v12)
    {
      CFNumberRef v6 = 0LL;
      int Parameter = -6745;
      goto LABEL_8;
    }

    unsigned int v38 = 0;
    unsigned int v13 = 0;
    if (!softLinkAUGraphGetNodeCount(v12, (uint64_t)&v38) && v38)
    {
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      p_cache = &OBJC_CLASS___CUAppleIDClient.cache;
      double v16 = &OBJC_CLASS___CUAppleIDClient.cache;
      do
      {
        if (!((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphGetIndNode)( *(void *)(a1 + 24),  v14,  (uint64_t)&v37)
          && !((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))p_cache[420])( *(void *)(a1 + 24),  v37,  (uint64_t)valuePtr,  (uint64_t)&__size[1]))
        {
          __size[0] = 8;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[424])( *(uint64_t *)&__size[1],  2LL,  0LL,  0LL,  (uint64_t)&v34,  (uint64_t)__size)
            || v34 <= 0.0)
          {
            double v34 = 44100.0;
          }

          __size[0] = 8;
          int v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[424])( *(uint64_t *)&__size[1],  12LL,  0LL,  0LL,  (uint64_t)&v33,  (uint64_t)__size);
          unsigned int v18 = (v33 * 1000000.0);
          if (v17) {
            unsigned int v18 = 0;
          }
          v13 += v18;
          if (LODWORD(valuePtr[0]) == 1635086197)
          {
            HIDWORD(v32) = 0;
            __size[0] = 4;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[424])( *(uint64_t *)&__size[1],  1819569763LL,  2LL,  0LL,  (uint64_t)&v32 + 4,  (uint64_t)__size))
            {
              LODWORD(v19) = HIDWORD(v32);
              v13 += ((double)v19 * 1000000.0 / v34);
            }

            HIDWORD(v32) = 0;
            __size[0] = 4;
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[424])( *(uint64_t *)&__size[1],  1935763060LL,  2LL,  0LL,  (uint64_t)&v32 + 4,  (uint64_t)__size))
            {
              LODWORD(v20) = HIDWORD(v32);
              v13 += ((double)v20 * 1000000.0 / v34);
            }

            __size[0] = 0;
            unsigned int v21 = 0;
            if (!softLinkAudioUnitGetPropertyInfo( *(uint64_t *)&__size[1],  1937009955LL,  2LL,  0LL,  (uint64_t)__size,  0LL)
              && __size[0] >= 4u)
            {
              char v22 = (unsigned int *)malloc(__size[0]);
              if (v22)
              {
                uint64_t v23 = v22;
                unsigned int v21 = 0;
                if (!softLinkAudioUnitGetProperty( *(uint64_t *)&__size[1],  1937009955LL,  2LL,  0LL,  (uint64_t)v22,  (uint64_t)__size)
                  && __size[0] >= 4u)
                {
                  unsigned int v21 = 0;
                  unint64_t v24 = (unint64_t)__size[0] >> 2;
                  dispatch_time_t v25 = v23;
                  do
                  {
                    uint64_t v31 = *(void *)"cntlbolg";
                    uint64_t v32 = 0LL;
                    __size[0] = 4;
                    unsigned int v26 = *v25++;
                    if (!softLinkAudioObjectGetPropertyData( v26,  (uint64_t)&v31,  0LL,  0LL,  (uint64_t)__size,  (uint64_t)&v32 + 4))
                    {
                      LODWORD(v27) = HIDWORD(v32);
                    }

                    --v24;
                  }

                  while (v24);
                }

                free(v23);
                p_cache = (void **)(&OBJC_CLASS___CUAppleIDClient + 16);
              }

              else
              {
                unsigned int v21 = 0;
              }

              double v16 = (void **)(&OBJC_CLASS___CUAppleIDClient + 16);
            }

            v13 += v21;
          }
        }

        uint64_t v14 = (v14 + 1);
      }

      while (v14 < v38);
    }

    uint64_t v28 = v13;
    goto LABEL_51;
  }

  if (CFEqual(cf1, @"preferredLatency"))
  {
    uint64_t v28 = *(unsigned int *)(a1 + 224);
LABEL_51:
    CFDataRef Int64 = CFNumberCreateInt64(v28);
    goto LABEL_6;
  }

  if (CFEqual(cf1, @"varispeedEnabled"))
  {
    int v10 = (CFNumberRef *)MEMORY[0x189604DE8];
    int v11 = *(unsigned __int8 *)(a1 + 64);
    goto LABEL_13;
  }

  if (CFEqual(cf1, @"volume"))
  {
    LODWORD(v31) = 1065353216;
    uint64_t v29 = *(void *)(a1 + 56);
    if (v29)
    {
      int Parameter = softLinkAudioUnitGetParameter(v29, 0LL, 2LL, 0LL, (uint64_t)&v31);
      if (Parameter)
      {
        CFNumberRef v6 = 0LL;
        goto LABEL_8;
      }

      double v30 = *(float *)&v31;
    }

    else
    {
      double v30 = 1.0;
    }

    *(double *)valuePtr = v30;
    CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberDoubleType, valuePtr);
    if (v6) {
      goto LABEL_7;
    }
    int Parameter = -6700;
  }

  else
  {
    CFNumberRef v6 = 0LL;
    int Parameter = -6714;
  }

uint64_t initAudioUnitGetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAudioUnitGetint Parameter = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AudioUnitGetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter)( a1,  a2,  a3,  a4,  a5);
}

void *__AudioToolboxLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
  AudioToolboxLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initAudioObjectGetPropertyData( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce, &__block_literal_global_36);
  }
  softLinkAudioObjectGetPropertyData = (uint64_t (*)())dlsym( (void *)CoreAudioLibrary_sLib,  "AudioObjectGetPropertyData");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyData)( a1,  a2,  a3,  a4,  a5,  a6);
}

void *__CoreAudioLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreAudio.framework/CoreAudio", 2);
  CoreAudioLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initAudioUnitGetPropertyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAudioUnitGetPropertyInfo = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AudioUnitGetPropertyInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetPropertyInfo)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t initAudioUnitGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAudioUnitGetProperty = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AudioUnitGetProperty");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetProperty)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t initAUGraphNodeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphNodeInfo = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphNodeInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphNodeInfo)(a1, a2, a3, a4);
}

uint64_t initAUGraphGetIndNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphGetIndNode = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphGetIndNode");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphGetIndNode)(a1, a2, a3);
}

uint64_t initAUGraphGetNodeCount(uint64_t a1, uint64_t a2)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphGetNodeCFIndex Count = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphGetNodeCount");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkAUGraphGetNodeCount)(a1, a2);
}

uint64_t _AudioStreamSetProperty(uint64_t a1, CFTypeRef cf1, __CFString *a3)
{
  if (CFEqual(cf1, @"audioType"))
  {
    if (!a3) {
      return 4294960540LL;
    }
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    uint64_t v7 = *(const void **)(a1 + 176);
    CFRetain(a3);
    *(void *)(a1 + 176) = a3;
    if (v7) {
      CFRelease(v7);
    }
    return 0LL;
  }

  if (!CFEqual(cf1, @"format"))
  {
    if (CFEqual(cf1, @"input"))
    {
      *(_BYTE *)(a1 + 97) = CFGetInt64(a3, 0LL) != 0;
      return 0LL;
    }

    if (CFEqual(cf1, @"preferredLatency"))
    {
      unint64_t v9 = CFGetInt64(a3, (int *)&v16);
      uint64_t result = v16;
      if (!v16)
      {
        if (!HIDWORD(v9))
        {
          *(_DWORD *)(a1 + 224) = v9;
          return 0LL;
        }

        uint64_t result = 4294960586LL;
      }

      *(_DWORD *)(a1 + 224) = v9;
      return result;
    }

    if (CFEqual(cf1, @"threadName") || CFEqual(cf1, @"threadPriority")) {
      return 0LL;
    }
    if (CFEqual(cf1, @"varispeedEnabled"))
    {
      *(_BYTE *)(a1 + 64) = CFGetInt64(a3, 0LL) != 0;
      return 0LL;
    }

    if (CFEqual(cf1, @"varispeedRate"))
    {
      if (!*(void *)(a1 + 72)) {
        return 4294960551LL;
      }
      double v10 = CFGetDouble(a3, &v15);
      uint64_t result = v15;
      if (v15) {
        return result;
      }
      float v11 = v10 / *(double *)(a1 + 184);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter)( *(void *)(a1 + 72),  0LL,  0LL,  0LL,  0LL,  v11);
    }

    else
    {
      if (CFEqual(cf1, @"voice"))
      {
        *(_BYTE *)(a1 + 80) = CFGetInt64(a3, 0LL) != 0;
        return 0LL;
      }

      if (!CFEqual(cf1, @"volume")) {
        return 4294960582LL;
      }
      double v12 = CFGetDouble(a3, &v15);
      uint64_t result = v15;
      if (v15) {
        return result;
      }
      float v13 = v12;
      *(float *)(a1 + 132) = v13;
      uint64_t v14 = *(void *)(a1 + 56);
      if (!v14) {
        return 0LL;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter)( v14,  0LL,  2LL,  0LL,  0LL,  v13);
    }

    if ((_DWORD)result) {
      return result;
    }
    return 0LL;
  }

  CFGetData(a3, (const char *)(a1 + 184), 0x28uLL, 0LL, (int *)&v15);
  uint64_t result = v15;
  if (!v15) {
    return 0LL;
  }
  return result;
}

uint64_t initAudioUnitSetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAudioUnitSetint Parameter = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AudioUnitSetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t AudioStreamRampVolume(uint64_t a1, dispatch_queue_s *a2, double a3, double a4)
{
  __int16 v8 = (dispatch_source_s **)(a1 + 136);
  unint64_t v9 = *(dispatch_object_s **)(a1 + 136);
  if (v9)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v9);
    void *v8 = 0LL;
  }

  uint64_t v10 = *(void *)(a1 + 56);
  float v11 = a3;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 0x40000000LL;
  v13[2] = __AudioStreamRampVolume_block_invoke;
  v13[3] = &__block_descriptor_tmp;
  v13[4] = a1;
  CoreAudioRampParameterStart(v8, v10, 0LL, 1LL, 0LL, 16, a2, (uint64_t)v13, v11, a4);
  return 0LL;
}

void __AudioStreamRampVolume_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_object_s **)(v1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 136));
    dispatch_release(v2);
    *(void *)(*(void *)(a1 + 32) + 136LL) = 0LL;
  }

uint64_t AudioStreamPrepare(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  uint64_t v7 = softLinkNewAUGraph(a1 + 24);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v7 = softLinkAUGraphOpen(*v2);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  *(_BYTE *)(a1 + 32) = 1;
  int v8 = *(_BYTE *)(a1 + 80) ? 1987078511 : 1919512419;
  LODWORD(v32) = 1635086197;
  DWORD1(v32) = v8;
  *((void *)&v32 + 1) = 1634758764LL;
  int v33 = 0;
  uint64_t v7 = softLinkAUGraphAddNode(*(void *)(a1 + 24), (uint64_t)&v32, a1 + 84);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v7 = softLinkAUGraphNodeInfo(*(void *)(a1 + 24), *(unsigned int *)(a1 + 84), 0LL, a1 + 88);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  __int128 v32 = xmmword_186B49B90;
  int v33 = 0;
  unint64_t v9 = (unsigned int *)(a1 + 48);
  uint64_t v7 = softLinkAUGraphAddNode(*(void *)(a1 + 24), (uint64_t)&v32, a1 + 48);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v10 = (uint64_t *)(a1 + 56);
  uint64_t v7 = softLinkAUGraphNodeInfo(*(void *)(a1 + 24), *(unsigned int *)(a1 + 48), 0LL, a1 + 56);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  unsigned int v29 = 1;
  uint64_t v7 = softLinkAudioUnitSetProperty(*v10, 11LL, 1LL, 0LL, (uint64_t)&v29, 4LL);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v23 = 0x40E7700000000000LL;
  __int128 v24 = xmmword_186B49BA0;
  int v11 = *(_DWORD *)(a1 + 212);
  int v25 = 4;
  int v26 = v11;
  uint64_t v27 = 32LL;
  uint64_t v7 = softLinkAudioUnitSetProperty(*(void *)(a1 + 56), 8LL, 2LL, 0LL, (uint64_t)&v23, 40LL);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v7 = softLinkAudioUnitSetParameter(*v10, 0LL, 1LL, 0LL, 0LL, 1.0);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v7 = softLinkAudioUnitSetParameter(*(void *)(a1 + 56), 0LL, 2LL, 0LL, 0LL, *(float *)(a1 + 132));
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v7 = softLinkAUGraphConnectNodeInput(*v2, *v9, 0LL, *(unsigned int *)(a1 + 84), 0LL);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    __int128 v32 = xmmword_186B49BB0;
    int v33 = 0;
    uint64_t v7 = softLinkAUGraphAddNode(*(void *)(a1 + 24), (uint64_t)&v32, a1 + 68);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
    uint64_t v7 = softLinkAUGraphNodeInfo(*(void *)(a1 + 24), *(unsigned int *)(a1 + 68), 0LL, a1 + 72);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
    uint64_t v23 = 0x40E7700000000000LL;
    __int128 v24 = xmmword_186B49BA0;
    int v13 = *(_DWORD *)(a1 + 212);
    int v25 = 4;
    int v26 = v13;
    uint64_t v27 = 32LL;
    uint64_t v7 = softLinkAudioUnitSetProperty(*(void *)(a1 + 72), 8LL, 2LL, 0LL, (uint64_t)&v23, 40LL);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
    unsigned int v29 = 127;
    uint64_t v7 = softLinkAudioUnitSetProperty(*(void *)(a1 + 72), 26LL, 0LL, 0LL, (uint64_t)&v29, 4LL);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
    uint64_t v7 = softLinkAUGraphConnectNodeInput(*v2, *(unsigned int *)(a1 + 68), 0LL, *v9, 0LL);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
  }

  __int128 v32 = xmmword_186B49BC0;
  int v33 = 0;
  uint64_t v7 = softLinkAUGraphAddNode(*(void *)(a1 + 24), (uint64_t)&v32, a1 + 36);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v14 = (uint64_t *)(a1 + 40);
  uint64_t v7 = softLinkAUGraphNodeInfo(*(void *)(a1 + 24), *(unsigned int *)(a1 + 36), 0LL, a1 + 40);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v7 = softLinkAudioUnitSetProperty(*v14, 8LL, 1LL, 0LL, a1 + 184, 40LL);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v23 = 0x40E7700000000000LL;
  __int128 v24 = xmmword_186B49BA0;
  int v15 = *(_DWORD *)(a1 + 212);
  int v25 = 4;
  int v26 = v15;
  uint64_t v27 = 32LL;
  if (*(_BYTE *)(a1 + 64)) {
    uint64_t v23 = *(void *)(a1 + 184);
  }
  uint64_t v7 = softLinkAudioUnitSetProperty(*v14, 8LL, 2LL, 0LL, (uint64_t)&v23, 40LL);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  double v30 = _AudioStreamOutputCallBack;
  uint64_t v31 = a1;
  uint64_t v7 = softLinkAUGraphSetNodeInputCallback(*(void *)(a1 + 24), *(unsigned int *)(a1 + 36), 0LL, (uint64_t)&v30);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 68);
  if (!(_DWORD)v16) {
    uint64_t v16 = *v9;
  }
  uint64_t v7 = softLinkAUGraphConnectNodeInput(*(void *)(a1 + 24), *(unsigned int *)(a1 + 36), 0LL, v16, 0LL);
  if ((_DWORD)v7) {
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 97))
  {
    uint64_t v17 = *(void *)(a1 + 88);
    *(void *)(a1 + 104) = v17;
    unsigned int v29 = 1;
    uint64_t v7 = softLinkAudioUnitSetProperty(v17, 2003LL, 1LL, 1LL, (uint64_t)&v29, 4LL);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
    uint64_t v7 = softLinkAudioUnitSetProperty(*(void *)(a1 + 104), 8LL, 2LL, 1LL, a1 + 184, 40LL);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
    int v28 = 4;
    unsigned int v29 = 0;
    int Property = softLinkAudioUnitGetProperty(*(void *)(a1 + 104), 14LL, 0LL, 0LL, (uint64_t)&v29, (uint64_t)&v28);
    int v19 = v29;
    if (v29 < 0x1000 || Property != 0) {
      int v19 = 4096;
    }
    size_t v21 = (v19 * v25);
    unsigned int v29 = v19 * v25;
    *(void *)(a1 + 120) = v21;
    char v22 = malloc(v21);
    *(void *)(a1 + 112) = v22;
    if (!v22)
    {
      uint64_t v7 = 4294960568LL;
      goto LABEL_15;
    }

    double v30 = _AudioStreamInputCallBack;
    uint64_t v31 = a1;
    uint64_t v7 = softLinkAudioUnitSetProperty(*(void *)(a1 + 104), 2005LL, 0LL, 0LL, (uint64_t)&v30, 16LL);
    if ((_DWORD)v7) {
      goto LABEL_15;
    }
  }

  uint64_t v7 = softLinkAUGraphInitialize(*v2);
  if (!(_DWORD)v7)
  {
    *(_BYTE *)(a1 + 33) = 1;
    return v7;
  }

uint64_t _AudioStreamOutputCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  double v10 = fmod(*(double *)a3, 4294967300.0);
  (*(void (**)(void, void, void, void, void))(a1 + 160))( v10,  *(void *)(a3 + 8),  *(void *)(a6 + 16),  (*(_DWORD *)(a1 + 208) * a5),  *(void *)(a1 + 168));
  return 0LL;
}

uint64_t _AudioStreamInputCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (*(_DWORD *)(a1 + 208) * a5);
  if (*(void *)(a1 + 120) < v5) {
    return 4294960545LL;
  }
  int v8 = *(_DWORD *)(a1 + 212);
  v13[0] = 1;
  v13[2] = v8;
  v13[3] = v5;
  uint64_t v10 = a1 + 104;
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(v10 + 8);
  uint64_t result = softLinkAudioUnitRender(v9, a2, a3, a4, a5, (uint64_t)v13);
  if (!(_DWORD)result)
  {
    double v12 = fmod(*(double *)a3, 4294967300.0);
    (*(void (**)(void, void, void, unint64_t, void))(a1 + 144))( v12,  *(void *)(a3 + 8),  *(void *)(a1 + 112),  v5,  *(void *)(a1 + 152));
    return 0LL;
  }

  return result;
}

void AudioStreamStop(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v2);
    *(void *)(a1 + 136) = 0LL;
  }

  if (*(_BYTE *)(a1 + 34))
  {
    softLinkAUGraphStop(*(void *)(a1 + 24));
    *(_BYTE *)(a1 + 34) = 0;
  }

  if (*(_BYTE *)(a1 + 33))
  {
    softLinkAUGraphUninitialize(*(void *)(a1 + 24));
    *(_BYTE *)(a1 + 33) = 0;
  }

  if (*(_BYTE *)(a1 + 32))
  {
    softLinkAUGraphClose(*(void *)(a1 + 24));
    *(_BYTE *)(a1 + 32) = 0;
  }

  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    softLinkDisposeAUGraph(v3);
    *(void *)(a1 + 24) = 0LL;
  }

  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0LL;
  *(_BYTE *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 44) = 0LL;
  *(void *)(a1 + 36) = 0LL;
  uint64_t v4 = *(void **)(a1 + 112);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 112) = 0LL;
  }

  *(_BYTE *)(a1 + 128) = 0;
}

uint64_t initDisposeAUGraph(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkDisposeAUGraph = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "DisposeAUGraph");
  return ((uint64_t (*)(uint64_t))softLinkDisposeAUGraph)(a1);
}

uint64_t initAUGraphClose(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphClose = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphClose");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphClose)(a1);
}

uint64_t initAUGraphUninitialize(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphUninitialize = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphUninitialize");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphUninitialize)(a1);
}

uint64_t initAUGraphStop(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphStop = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphStop");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphStop)(a1);
}

uint64_t initAUGraphInitialize(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphInitialize = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphInitialize");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphInitialize)(a1);
}

uint64_t initAudioUnitRender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAudioUnitRender = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AudioUnitRender");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitRender)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t initAUGraphSetNodeInputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphSetNodeInputCallback = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AUGraphSetNodeInputCallback");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphSetNodeInputCallback)( a1,  a2,  a3,  a4);
}

uint64_t initAUGraphConnectNodeInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphConnectNodeInput = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AUGraphConnectNodeInput");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAUGraphConnectNodeInput)( a1,  a2,  a3,  a4,  a5);
}

uint64_t initAudioUnitSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAudioUnitSetint Property = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib,  "AudioUnitSetProperty");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitSetProperty)( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t initAUGraphAddNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphAddNode = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphAddNode");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkAUGraphAddNode)(a1, a2, a3);
}

uint64_t initAUGraphOpen(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphOpen = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphOpen");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphOpen)(a1);
}

uint64_t initNewAUGraph(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkNewAUGraph = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "NewAUGraph");
  return ((uint64_t (*)(uint64_t))softLinkNewAUGraph)(a1);
}

uint64_t AudioStreamStart(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    uint64_t result = AudioStreamPrepare(a1);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t v2 = *(void *)(a1 + 24);
    if (!v2) {
      goto LABEL_6;
    }
  }

  if (*(_BYTE *)(a1 + 96))
  {
    softLinkAUGraphStop(v2);
    uint64_t v2 = *(void *)(a1 + 24);
  }

  uint64_t result = softLinkAUGraphStart(v2);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 96) = 1;
LABEL_6:
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 128) = 1;
  }

  return result;
}

uint64_t initAUGraphStart(uint64_t a1)
{
  if (AudioToolboxLibrary_sOnce != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce, &__block_literal_global);
  }
  softLinkAUGraphStart = (uint64_t (*)())dlsym((void *)AudioToolboxLibrary_sLib, "AUGraphStart");
  return ((uint64_t (*)(uint64_t))softLinkAUGraphStart)(a1);
}

uint64_t AudioStreamTest(int a1)
{
  double v12 = 0LL;
  int v13 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v2 = SineTable_Create(&v13, 44100, 800);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = AudioStreamCreate((uint64_t *)&v12);
    uint64_t v4 = v12;
    if ((_DWORD)v3)
    {
      uint64_t v2 = v3;
      if (!v12) {
        goto LABEL_14;
      }
    }

    else
    {
      if (a1)
      {
        v12[18] = _AudioStreamTestInput;
        v4[19] = &v8;
        _AudioStreamSetProperty((uint64_t)v4, @"input", (__CFString *)*MEMORY[0x189604DE8]);
      }

      unint64_t v5 = v13;
      v4[20] = _AudioStreamTestOutput;
      v4[21] = v5;
      *(void *)bytes = 0x40E5888000000000LL;
      __int128 v10 = xmmword_186B49BD0;
      __int128 v11 = xmmword_186B49BE0;
      uint64_t v2 = CFObjectSetBytes( (uint64_t)v4,  (uint64_t (*)(uint64_t, uint64_t, CFDataRef))_AudioStreamSetProperty,  (uint64_t)@"format",  bytes,  40LL);
      if (!(_DWORD)v2)
      {
        uint64_t v2 = CFObjectSetInt64( (uint64_t)v4,  (uint64_t (*)(uint64_t, uint64_t, CFNumberRef))_AudioStreamSetProperty,  (uint64_t)@"preferredLatency",  100000LL);
        if (!(_DWORD)v2)
        {
          uint64_t v2 = AudioStreamStart((uint64_t)v4);
          if (!(_DWORD)v2)
          {
            sleep(5u);
            if (a1)
            {
              if (!v8) {
                uint64_t v2 = 4294960550LL;
              }
            }
          }
        }
      }
    }

    AudioStreamStop((uint64_t)v4);
    CFRelease(v4);
  }

void _AudioStreamTestInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 += a4;
}

void _AudioStreamTestOutput(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4, _DWORD *a5)
{
  int v5 = a5[2];
  if ((int)(a4 >> 2) >= 1)
  {
    int v6 = *a5;
    int v7 = a5[1];
    uint64_t v8 = &a3[(int)(2 * (a4 >> 2))];
    do
    {
      __int16 v9 = *((_WORD *)a5 + v5 + 6);
      int v10 = v5 + v7;
      if (v10 <= v6) {
        int v11 = 0;
      }
      else {
        int v11 = v6;
      }
      int v5 = v10 - v11;
      *a3 = v9;
      a3[1] = v9;
      a3 += 2;
    }

    while (a3 < v8);
  }

  a5[2] = v5;
}

uint64_t Base64EncodeEx(char *__s, int64_t a2, char a3, _BYTE *a4, unint64_t a5, void *a6)
{
  int v10 = __s;
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  int v11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  if ((a3 & 2) != 0) {
    int v11 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  }
  unint64_t v12 = (2 * (((unint64_t)(a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  if (v12 < a2)
  {
    uint64_t result = 4294960553LL;
    goto LABEL_25;
  }

  if (v12 > a5)
  {
    uint64_t result = 4294960545LL;
LABEL_25:
    int v13 = a4;
    if (!a6) {
      return result;
    }
    goto LABEL_21;
  }

  int v13 = a4;
  if (a2 >= 3)
  {
    do
    {
      *int v13 = v11[(unint64_t)*v10 >> 2];
      v13[1] = v11[((unint64_t)v10[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16LL * (*v10 & 3))];
      v13[2] = v11[((unint64_t)v10[2] >> 6) & 0xFFFFFFFFFFFFFFC3LL | (4LL * (v10[1] & 0xF))];
      v13[3] = v11[v10[2] & 0x3F];
      v10 += 3;
      v13 += 4;
      a2 -= 3LL;
    }

    while (a2 > 2);
  }

  if (a2 == 2)
  {
    *int v13 = v11[(unint64_t)*v10 >> 2];
    v13[1] = v11[((unint64_t)v10[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16LL * (*v10 & 3))];
    v13[2] = v11[4 * (v10[1] & 0xF)];
    if ((a3 & 1) != 0)
    {
      uint64_t result = 0LL;
      v13 += 3;
      if (!a6) {
        return result;
      }
      goto LABEL_21;
    }
  }

  else
  {
    if (a2 != 1)
    {
      uint64_t result = 0LL;
      if (!a6) {
        return result;
      }
      goto LABEL_21;
    }

    *int v13 = v11[(unint64_t)*v10 >> 2];
    v13[1] = v11[16 * (*v10 & 3)];
    if ((a3 & 1) != 0)
    {
      uint64_t result = 0LL;
      v13 += 2;
      if (!a6) {
        return result;
      }
      goto LABEL_21;
    }

    v13[2] = 61;
  }

  uint64_t result = 0LL;
  v13[3] = 61;
  v13 += 4;
  if (!a6) {
    return result;
  }
LABEL_21:
  *a6 = v13 - a4;
  return result;
}

uint64_t Base64EncodeCopyEx(char *__s, size_t a2, char a3, void *a4, unint64_t *a5)
{
  size_t v8 = a2;
  if (a2 == -1LL) {
    size_t v8 = strlen(__s);
  }
  unint64_t v10 = (2 * (((v8 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v10;
  if (v10 < v8) {
    return 4294960553LL;
  }
  int v11 = malloc(v10 | 1);
  if (!v11) {
    return 4294960568LL;
  }
  unint64_t v12 = v11;
  uint64_t v13 = Base64EncodeEx(__s, v8, a3, v11, v10, &v17);
  if ((_DWORD)v13)
  {
    uint64_t v14 = v13;
    free(v12);
  }

  else
  {
    unint64_t v15 = v17;
    *((_BYTE *)v12 + v17) = 0;
    *a4 = v12;
    uint64_t v14 = 0LL;
    if (a5) {
      *a5 = v15;
    }
  }

  return v14;
}

uint64_t Base64EncodeLinesCopyEx( char *__s, int64_t a2, size_t a3, _BYTE *a4, char a5, char **a6, void *a7)
{
  int64_t v12 = a2;
  uint64_t v13 = __s;
  if (a2 == -1) {
    int64_t v12 = strlen(__s);
  }
  uint64_t v14 = a4 - 1;
  unint64_t v15 = a4 - 1;
  while (*++v15)
    ;
  unint64_t v17 = (2 * (((unint64_t)(v12 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v18 = v17 / 0x48;
  if (v17 % 0x48) {
    ++v18;
  }
  unint64_t v19 = v17 + (void)&v15[a3 - (void)a4] * v18;
  if (v19 < v12 || v19 == -1LL) {
    return 4294960553LL;
  }
  dispatch_source_t v46 = a6;
  size_t v21 = (char *)malloc(v19 + 1);
  if (!v21) {
    return 4294960568LL;
  }
  char v22 = v21;
  if (v12 == -1) {
    int64_t v12 = strlen(v13);
  }
  dispatch_source_t v45 = a7;
  while (*++v14)
    ;
  if ((a5 & 2) != 0) {
    __int128 v24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  }
  else {
    __int128 v24 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  }
  unint64_t v25 = (2 * (((unint64_t)(v12 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = v25 / 0x48;
  if (v25 % 0x48) {
    ++v26;
  }
  unint64_t v27 = v25 + (void)&v14[a3 - (void)a4] * v26;
  if (v27 < v12)
  {
    uint64_t v43 = 4294960553LL;
LABEL_64:
    free(v22);
    return v43;
  }

  if (v27 > v19)
  {
    uint64_t v43 = 4294960545LL;
    goto LABEL_64;
  }

  int v28 = v22;
  if (a3)
  {
    memset(v22, 9, a3);
    int v28 = &v22[a3];
  }

  if (v12 >= 3)
  {
    unint64_t v29 = 0LL;
    double v30 = &v13[v12];
    do
    {
      if (v29 < 0x48)
      {
        unint64_t v34 = v29;
      }

      else
      {
        char v31 = *a4;
        __int128 v32 = a4 + 1;
        if (*a4)
        {
          do
          {
            *v28++ = v31;
            int v33 = *v32++;
            char v31 = v33;
          }

          while (v33);
        }

        if (a3)
        {
          memset(v28, 9, a3);
          unint64_t v34 = 0LL;
          v28 += a3;
        }

        else
        {
          unint64_t v34 = 0LL;
        }
      }

      *int v28 = v24[(unint64_t)*v13 >> 2];
      v28[1] = v24[((unint64_t)v13[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16LL * (*v13 & 3))];
      v28[2] = v24[((unint64_t)v13[2] >> 6) & 0xFFFFFFFFFFFFFFC3LL | (4LL * (v13[1] & 0xF))];
      v28[3] = v24[v13[2] & 0x3F];
      v13 += 3;
      v28 += 4;
      unint64_t v29 = v34 + 4;
      int64_t v12 = v30 - v13;
    }

    while (v30 - v13 > 2);
    if (v12 >= 1 && v34 >= 0x44)
    {
      char v35 = *a4;
      if (*a4)
      {
        uint64_t v36 = a4 + 1;
        do
        {
          *v28++ = v35;
          int v37 = *v36++;
          char v35 = v37;
        }

        while (v37);
      }

      if (a3)
      {
        memset(v28, 9, a3);
        v28 += a3;
      }
    }
  }

  if (v12 == 2)
  {
    *int v28 = v24[(unint64_t)*v13 >> 2];
    v28[1] = v24[((unint64_t)v13[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16LL * (*v13 & 3))];
    v28[2] = v24[4 * (v13[1] & 0xF)];
    unsigned int v38 = v45;
    if ((a5 & 1) != 0)
    {
      v28 += 3;
      goto LABEL_51;
    }

    goto LABEL_47;
  }

  if (v12 != 1)
  {
LABEL_49:
    unsigned int v38 = v45;
    goto LABEL_51;
  }

  *int v28 = v24[(unint64_t)*v13 >> 2];
  v28[1] = v24[16 * (*v13 & 3)];
  if ((a5 & 1) != 0)
  {
    v28 += 2;
    goto LABEL_49;
  }

  v28[2] = 61;
  unsigned int v38 = v45;
LABEL_47:
  v28[3] = 61;
  v28 += 4;
LABEL_51:
  int v39 = v22;
  if (v28 != v22)
  {
    char v40 = *a4;
    if (*a4)
    {
      int v41 = a4 + 1;
      int v39 = v28;
      do
      {
        *v39++ = v40;
        int v42 = *v41++;
        char v40 = v42;
      }

      while (v42);
    }

    else
    {
      int v39 = v28;
    }
  }

  char *v39 = 0;
  *dispatch_source_t v46 = v22;
  uint64_t v43 = 0LL;
  if (v38) {
    *unsigned int v38 = v39 - v22;
  }
  return v43;
}

uint64_t Base64Decode(char *__s, size_t a2, _BYTE *a3, uint64_t a4, void *a5)
{
  size_t v8 = __s;
  if (a2 == -1LL) {
    a2 = strlen(__s);
  }
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  int64_t v12 = &v8[a2];
  uint64_t v13 = &a3[a4];
  uint64_t v14 = a3;
LABEL_4:
  unsigned int v15 = 0;
  while (v8 < v12)
  {
    unsigned int v17 = *v8++;
    unsigned int v16 = v17;
    unsigned int v18 = kBase64DecodeTable[v17];
    if (v18 != 128)
    {
      if (v18 == 255)
      {
        uint64_t result = 4294960563LL;
        goto LABEL_24;
      }

      if (v16 == 61) {
        break;
      }
      if (v15)
      {
        if (v15 == 1)
        {
          int v10 = 16 * v18;
          unsigned int v15 = 2;
          v11 |= v18 >> 4;
        }

        else
        {
          if (v15 != 2)
          {
            if (v13 - v14 >= 3)
            {
              v9 |= v18;
              *uint64_t v14 = v11;
              v14[1] = v10;
              v14[2] = v9;
              v14 += 3;
              goto LABEL_4;
            }

            goto LABEL_28;
          }

          int v9 = v18 << 6;
          unsigned int v15 = 3;
          v10 |= v18 >> 2;
        }
      }

      else
      {
        int v11 = 4 * v18;
        unsigned int v15 = 1;
      }
    }
  }

  if (v15 < 2)
  {
    uint64_t result = 0LL;
    goto LABEL_24;
  }

  if (v15 == 3)
  {
    if (v13 - v14 >= 2)
    {
      uint64_t result = 0LL;
      *uint64_t v14 = v11;
      v14[1] = v10;
      v14 += 2;
      goto LABEL_24;
    }
  }

  else if (v13 - v14 >= 1)
  {
    uint64_t result = 0LL;
    *v14++ = v11;
    goto LABEL_24;
  }

LABEL_28:
  uint64_t result = 4294960545LL;
LABEL_24:
  if (a5) {
    *a5 = v14 - a3;
  }
  return result;
}

      __int128 v24 = -6728;
      goto LABEL_24;
    }

    if (gLogCategory_BonjourBrowser <= 90
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"OSStatus _BonjourBrowser_PostEvent(BonjourBrowserRef, BonjourBrowserEventType, BonjourDeviceRef, BonjourServiceRef)",  0x5Au,  (uint64_t)"### CreateDictionary failed: %#m",  v9,  v10,  v11,  v12,  v25);
    }
  }

      if (!a2) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }

    goto LABEL_33;
  }

  if (v6 == CFStringGetTypeID())
  {
    int v10 = CFStringGetOrCopyCStringUTF8((const __CFString *)v5, (const char **)&v17, (UInt8 **)&v16, (size_t *)&v18);
    if (v10)
    {
      LODWORD(v5) = v10;
      if (a2) {
        goto LABEL_29;
      }
    }

    else
    {
      LODWORD(v5) = HexToDataCopy(v17, v18, 22, &v20, &v19, 0LL);
      if (!v16) {
        goto LABEL_28;
      }
      free(v16);
      if (a2) {
        goto LABEL_29;
      }
    }

    goto LABEL_30;
  }

  if (v6 == CFNullGetTypeID())
  {
    unint64_t v20 = malloc(1uLL);
    if (v20)
    {
      LODWORD(v5) = 0;
      unint64_t v19 = 0LL;
      if (a2) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }

  return v10;
}
}

          -[CUBLEConnection invalidate](v28, "invalidate");
LABEL_29:

          goto LABEL_30;
        }

        ucat = self->_ucat;
      }

      size_t v21 = [v18 PSM];
      [v18 peer];
      char v22 = (void *)objc_claimAutoreleasedReturnValue();
      [v22 identifier];
      int v41 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEServer peripheralManager:didOpenL2CAPChannel:error:]",  0x1Eu,  (uint64_t)"L2CAP channel opened PSM 0x%04X, peer %@: %{error}\n",  v23,  v24,  v25,  v26,  v21);

      goto LABEL_15;
    }

    if (var0 <= 90)
    {
      if (var0 == -1)
      {
        ucat = self->_ucat;
      }

      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEServer peripheralManager:didOpenL2CAPChannel:error:]",  0x5Au,  (uint64_t)"### L2CAP open channel null\n",  v14,  v15,  v16,  v17,  v40);
    }

  return v11;
}

  objc_autoreleasePoolPop(v8);
}

  return v10;
}

        [v60 pairedPeer];
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        [v57 setPublicKey:v38];

        [v60 completion];
        v58 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
        [v60 pairedPeer];
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(void, void *, void))v58)[2](v58, v59, 0LL);

LABEL_31:
        goto LABEL_32;
      }

      dispatch_queue_t v47 = self->_ucat;
      if (v47->var0 <= 90)
      {
        uint64_t v48 = v60;
        if (v47->var0 == -1)
        {
          dispatch_queue_t v47 = self->_ucat;
          uint64_t v48 = v60;
        }

        [v48 identifier];
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF( (uint64_t)v47,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:label:pairingIdentity:error:]",  0x5Au,  (uint64_t)"### FindPairedPeer: '%@', %@, no PK\n",  v50,  v51,  v52,  v53,  (char)v49);
      }
}

    if (a5)
    {
      unint64_t v19 = v19;
      unint64_t v34 = 0LL;
      *a5 = v19;
      goto LABEL_31;
    }

  int64_t v12 = self->_screenState;
  pthread_mutex_lock(&gCUSystemMonitorLock);
  self->_screenState = v9;
  pthread_mutex_unlock(&gCUSystemMonitorLock);
  if (v9 != v12) {
    -[CUSystemMonitorImp _invokeBlock:passingTest:]( self,  "_invokeBlock:passingTest:",  &__block_literal_global_274,  &__block_literal_global_275);
  }
}

  return v10;
}

          if (self->_state == state) {
            return;
          }
          continue;
        default:
          goto LABEL_28;
      }
    }

    break;
  }

  self->_wifiFlags = v3;
  self->_wifiState = v8;
  uint64_t v14 = (void (**)(void))_Block_copy(self->_wifiStateChangedHandler);
  if (v14)
  {
    unsigned int v15 = v14;
    v14[2]();
    uint64_t v14 = v15;
  }
}

    _NetPerfServerSessionTearDown((CFTypeRef)a1);
    return v10;
  }

  if (CFStringCompare(theString1, @"tearDownServerSession", 0LL) == kCFCompareEqualTo)
  {
    _NetPerfServerSessionTearDown((CFTypeRef)a1);
    return 0LL;
  }

  if (CFStringCompare(theString1, @"startServerSession", 0LL) == kCFCompareEqualTo)
  {
    if (!*(_BYTE *)(a1 + 128)) {
      return 4294960551LL;
    }
    if (!*(_BYTE *)(a1 + 129))
    {
      *(_BYTE *)(a1 + 129) = 1;
      return 0LL;
    }

    return 4294960575LL;
  }

  return 4294960582LL;
}

      *(_BYTE *)(a4 + 14) = 0;
      break;
    case 0xFFFFD9B2:
      uint64_t result = 4294960543LL;
      break;
    default:
      uint64_t result = v12;
      break;
  }

  if (a5) {
    *a5 = v16;
  }
  return result;
}

      ++*(_DWORD *)(a1 + 3804);
      double v30 = *(int **)(a1 + 56);
      if (*v30 <= 50)
      {
        if (*v30 == -1)
        {
          double v30 = *(int **)(a1 + 56);
        }

        LogPrintF( (uint64_t)v30,  (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)",  0x32u,  (uint64_t)"### NTP client received unexpected response: originated 0x%016llX, received 0x%016llX (%u total)\n",  v21,  v22,  v23,  v24,  v9);
      }

      return 4294960560LL;
    }

    int v7 = 4294960553LL;
  }

  ++*(_DWORD *)(a1 + 3796);
  uint64_t v14 = *(void *)(a1 + 216);
  if (v14) {
    unsigned int v15 = 40;
  }
  else {
    unsigned int v15 = 50;
  }
  unsigned int v16 = *(int **)(a1 + 56);
  if (v15 >= *v16)
  {
    if (*v16 == -1)
    {
      unsigned int v16 = *(int **)(a1 + 56);
      uint64_t v14 = *(void *)(a1 + 216);
    }

    if (v14) {
      unsigned int v17 = 40;
    }
    else {
      unsigned int v17 = 50;
    }
    LogPrintF( (uint64_t)v16,  (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)",  v17,  (uint64_t)"### NTP client received bad response from %##a (%u total): %#m\n",  v3,  v4,  v5,  v6,  a1 + 20);
  }

  return v7;
}

    LODWORD(v28) = NSErrorToOSStatusEx(v29, 0LL);
    goto LABEL_29;
  }

  +[CUPairingDaemon sharedPairingDaemon](&OBJC_CLASS___CUPairingDaemon, "sharedPairingDaemon");
  char v35 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v36 = v35;
  if (!v35)
  {
    unsigned int v38 = objc_alloc_init(&OBJC_CLASS___CUPairingManager);
    char v40 = dispatch_queue_create( "OSStatus _PairingSessionSavePeerPairingManager(PairingSessionRef, const void *, size_t, const uint8_t *)",  0LL);
    -[CUPairingManager setDispatchQueue:](v38, "setDispatchQueue:", v40);

    if ((*(_BYTE *)(a1 + 100) & 0x40) != 0) {
      -[CUPairingManager setTargetUserSession:](v38, "setTargetUserSession:", 1LL);
    }
    int v41 = dispatch_semaphore_create(0LL);
    v46[0] = (id)MEMORY[0x1895F87A8];
    v46[1] = (id)3221225472LL;
    v46[2] = ___PairingSessionSavePeerPairingManager_block_invoke;
    v46[3] = &unk_189F33CF0;
    uint64_t v48 = &v49;
    int v39 = v41;
    dispatch_queue_t v47 = v39;
    -[CUPairingManager savePairedPeer:options:completion:](v38, "savePairedPeer:options:completion:", v17, v27, v46);

    int v42 = dispatch_time(0LL, 120000000000LL);
    uint64_t v36 = (void *)dispatch_semaphore_wait(v39, v42);
    -[CUPairingManager invalidate](v38, "invalidate");
    uint64_t v43 = v50;
    if (!v36)
    {
      int v37 = *((unsigned int *)v50 + 6);
      if ((_DWORD)v37) {
        goto LABEL_33;
      }
LABEL_30:
      uint64_t v44 = *(const void **)(a1 + 264);
      if (v44) {
        CFRelease(v44);
      }
      unsigned int v17 = v17;
      *(void *)(a1 + 264) = v17;
      int v37 = *((unsigned int *)v50 + 6);
      goto LABEL_33;
    }

    uint64_t v36 = 0LL;
    int v37 = 4294960574LL;
LABEL_35:
    *((_DWORD *)v43 + 6) = v37;
    goto LABEL_33;
  }

  int v37 = [v35 savePairedPeer:v17 options:(v24 >> 1) & 4];
  unsigned int v38 = 0LL;
  *((_DWORD *)v50 + 6) = v37;
  int v39 = 0LL;
  if (!(_DWORD)v37) {
    goto LABEL_30;
  }
  int v39 = 0LL;
LABEL_33:

  _Block_object_dispose(&v49, 8);
  return v37;
}

        unint64_t v20 = *__s;
        if (*__s)
        {
          size_t v21 = 1004LL;
          if (a2 > 1004) {
            size_t v21 = a2;
          }
          char v22 = __s + 1;
          while (v21 != a2)
          {
            uint64_t v23 = a2 + 1;
            a1[a2] = v20;
            __int128 v24 = *v22++;
            unint64_t v20 = v24;
            ++a2;
            if (!v24)
            {
              unint64_t v25 = &a1[v23];
              a2 = v23;
              goto LABEL_36;
            }
          }

          goto LABEL_46;
        }

        unint64_t v25 = &a1[a2];
LABEL_36:
        if (!DomainEndsInDot((unsigned __int8 *)__s))
        {
          if (a2 > 1003) {
            goto LABEL_53;
          }
          ++a2;
          *unint64_t v25 = 46;
        }

        unint64_t v26 = *a4;
        if (*a4)
        {
          unint64_t v27 = 1004LL;
          if (a2 > 1004) {
            unint64_t v27 = a2;
          }
          int v28 = a4 + 1;
          while (v27 != a2)
          {
            unint64_t v29 = a2 + 1;
            a1[a2] = v26;
            double v30 = *v28++;
            unint64_t v26 = v30;
            ++a2;
            if (!v30)
            {
              unint64_t v25 = &a1[v29];
              a2 = v29;
              goto LABEL_49;
            }
          }

uint64_t Base64DecodeCopy(char *__s, size_t a2, void *a3, unint64_t *a4)
{
  size_t v6 = a2;
  if (a2 == -1LL) {
    size_t v6 = strlen(__s);
  }
  if (v6 > 0xFFFFFFFFFFFFFFFCLL) {
    return 4294960553LL;
  }
  unint64_t v14 = 3 * ((v6 + 3) >> 2);
  size_t v8 = malloc(v14 + 1);
  if (!v8) {
    return 4294960568LL;
  }
  int v9 = v8;
  uint64_t v10 = Base64Decode(__s, v6, v8, 3 * ((v6 + 3) >> 2), &v14);
  if ((_DWORD)v10)
  {
    uint64_t v11 = v10;
    free(v9);
  }

  else
  {
    unint64_t v12 = v14;
    *((_BYTE *)v9 + v14) = 0;
    *a3 = v9;
    uint64_t v11 = 0LL;
    if (a4) {
      *a4 = v12;
    }
  }

  return v11;
}

uint64_t _BonjourAdvertiserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gBonjourAdvertiserCFTypeID TypeID = result;
  return result;
}

_BYTE *_BonjourAdvertiserFinalize(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 24);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 48) = 0LL;
  }

  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    _Block_release(v4);
    *(void *)(a1 + 56) = 0LL;
  }

  *(void *)(a1 + 64) = 0LL;
  int v5 = *(void **)(a1 + 96);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 96) = 0LL;
  }

  size_t v6 = *(void **)(a1 + 136);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 136) = 0LL;
  }

  int v7 = *(void **)(a1 + 152);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 152) = 0LL;
  }

  size_t v8 = *(void **)(a1 + 160);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 160) = 0LL;
  }

  uint64_t result = *(_BYTE **)(a1 + 16);
  if (result)
  {
    if ((result[18] & 4) != 0)
    {
      uint64_t result = (_BYTE *)LogCategory_Remove(result);
      *(void *)(a1 + 16) = 0LL;
    }
  }

  return result;
}

uint64_t BonjourAdvertiserCreate(void *a1)
{
  if (gBonjourAdvertiserInitOnce != -1) {
    dispatch_once_f(&gBonjourAdvertiserInitOnce, 0LL, (dispatch_function_t)_BonjourAdvertiserGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v3 = Instance;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  dispatch_queue_t v4 = dispatch_queue_create("BonjourAdvertiser", 0LL);
  v3[3] = v4;
  if (v4)
  {
    uint64_t result = 0LL;
    v3[2] = &gLogCategory_BonjourAdvertiser;
    *a1 = v3;
  }

  else
  {
    CFRelease(v3);
    return 4294960596LL;
  }

  return result;
}

void BonjourAdvertiserGenerateStatisticsNAN(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __BonjourAdvertiserGenerateStatisticsNAN_block_invoke;
  v3[3] = &unk_189F302E0;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserGenerateStatisticsNAN_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 64LL);
  if (v2) {
    return [v2 generateStatisticsReportWithCompletionHandler:v1];
  }
  id v4 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5CFLL);
  return (*(uint64_t (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v4);
}

void BonjourAdvertiserReportNANIssue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __BonjourAdvertiserReportNANIssue_block_invoke;
  v3[3] = &unk_189F317F8;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserReportNANIssue_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 40) + 64LL)) {
    return [*(id *)(*(void *)(result + 40) + 64) reportIssue:*(void *)(result + 32)];
  }
  return result;
}

void BonjourAdvertiserSetNANControlFlags(uint64_t a1, int a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __BonjourAdvertiserSetNANControlFlags_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserSetNANControlFlags_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 40) = *(_DWORD *)(a1 + 40);
  return [*(id *)(v1 + 64) setControlFlags:*(unsigned int *)(a1 + 40)];
}

void BonjourAdvertiserSetNANCustomData(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v4 = *(dispatch_queue_s **)(a1 + 24);
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  v5[2] = __BonjourAdvertiserSetNANCustomData_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a1;
  v5[5] = cf;
  dispatch_async(v4, v5);
}

uint64_t __BonjourAdvertiserSetNANCustomData_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 48);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  *(void *)(v2 + 48) = *(void *)(a1 + 40);
  return [*(id *)(*(void *)(a1 + 32) + 64) setCustomData:*(void *)(a1 + 40)];
}

void BonjourAdvertiserSetNANInterruptionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __BonjourAdvertiserSetNANInterruptionHandler_block_invoke;
  v3[3] = &unk_189F302E0;
  v3[4] = a2;
  void v3[5] = a1;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserSetNANInterruptionHandler_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    uint64_t v3 = _Block_copy(v2);
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(const void **)(v4 + 56);
  if (v5)
  {
    _Block_release(v5);
    uint64_t v4 = *(void *)(a1 + 40);
  }

  *(void *)(v4 + 56) = v3;
  return [*(id *)(v4 + 64) setInterruptionHandler:v3];
}

void BonjourAdvertiserUpdateLinkStatusNAN(uint64_t a1, int a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 24);
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  v3[2] = __BonjourAdvertiserUpdateLinkStatusNAN_block_invoke;
  v3[3] = &__block_descriptor_44_e5_v8__0l;
  v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t __BonjourAdvertiserUpdateLinkStatusNAN_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 64LL)) {
    return [*(id *)(*(void *)(result + 32) + 64) updateLinkStatus:*(unsigned int *)(result + 40)];
  }
  return result;
}

void BonjourAdvertiserSetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  int v4 = *(dispatch_object_s **)(a1 + 24);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 24) = v3;
}

uint64_t BonjourAdvertiserSetFlags(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetInterfaceIndex(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetInterfaceName()
{
  return __strlcpy_chk();
}

uint64_t BonjourAdvertiserSetLabel(uint64_t a1)
{
  return LogCategoryReplaceF((uint64_t *)(a1 + 16));
}

uint64_t BonjourAdvertiserSetName(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 136), a2);
}

uint64_t BonjourAdvertiserSetServiceType(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 152), a2);
}

uint64_t BonjourAdvertiserSetDomain(uint64_t a1, char *a2)
{
  return ReplaceDifferentString((void **)(a1 + 96), a2);
}

uint64_t BonjourAdvertiserSetP2P(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetPort(uint64_t result, int a2)
{
  *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t BonjourAdvertiserSetTXTRecord(uint64_t a1, const void *a2, size_t __size)
{
  if (__size)
  {
    size_t v6 = malloc(__size);
    if (!v6) {
      return 4294960568LL;
    }
    int v7 = v6;
    memcpy(v6, a2, __size);
  }

  else
  {
    int v7 = 0LL;
  }

  size_t v8 = *(void **)(a1 + 160);
  if (v8) {
    free(v8);
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 160) = v7;
  *(_WORD *)(a1 + 168) = __size;
  *(_BYTE *)(a1 + 170) = 1;
  return result;
}

uint64_t BonjourAdvertiserSetTrafficFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t BonjourAdvertiserStart(dispatch_queue_t *a1)
{
  return 0LL;
}

void _BonjourAdvertiserStart(_BYTE *cf)
{
  if (!cf[88])
  {
    cf[88] = 1;
    CFRetain(cf);
  }

  *((void *)cf + 10) = mach_absolute_time();
  _BonjourAdvertiserUpdateDirect((uint64_t)cf);
  CFRelease(cf);
}

void _BonjourAdvertiserUpdateDirect(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    uint64_t v3 = a1 + 32;
    uint64_t v2 = *(_DNSServiceRef_t **)(a1 + 32);
    if ((*(_BYTE *)(v3 + 78) & 0x80) != 0)
    {
      if (v2)
      {
        DNSServiceRefDeallocate(v2);
        int v8 = 0;
        *(void *)uint64_t v3 = 0LL;
        goto LABEL_27;
      }

      goto LABEL_26;
    }

    if (!v2)
    {
LABEL_14:
      if (*(_BYTE *)(a1 + 144)) {
        DNSServiceFlags v10 = *(_DWORD *)(a1 + 104) | 0x100000;
      }
      else {
        DNSServiceFlags v10 = *(_DWORD *)(a1 + 104);
      }
      if (*(_BYTE *)(a1 + 116))
      {
        uint32_t v11 = if_nametoindex((const char *)(a1 + 116));
        if (!v11)
        {
          int v8 = -6727;
          goto LABEL_27;
        }
      }

      else
      {
        uint32_t v11 = *(_DWORD *)(a1 + 112);
      }

      DNSServiceErrorType v12 = DNSServiceRegister( (DNSServiceRef *)v3,  v10,  v11,  *(const char **)(a1 + 136),  *(const char **)(a1 + 152),  *(const char **)(a1 + 96),  0LL,  bswap32(*(unsigned __int16 *)(a1 + 148)) >> 16,  *(_WORD *)(a1 + 168),  *(const void **)(a1 + 160),  (DNSServiceRegisterReply)_BonjourAdvertiserRegistrationHandler,  (void *)a1);
      if (v12)
      {
        int v8 = v12;
LABEL_27:
        uint64_t v18 = *(void *)(a1 + 64);
        if ((*(_BYTE *)(a1 + 111) & 2) == 0)
        {
          [*(id *)(a1 + 64) invalidate];

          int v19 = 0;
          *(void *)(a1 + 64) = 0LL;
          if (!v8) {
            goto LABEL_42;
          }
LABEL_43:
          if (!*(void *)(a1 + 72))
          {
            uint64_t v25 = mach_absolute_time();
            unint64_t v26 = UpTicksToMilliseconds(v25 - *(void *)(a1 + 80));
            if (v26 >= 0x2B69) {
              uint64_t v31 = 1LL;
            }
            else {
              uint64_t v31 = 11113 - v26;
            }
            __int128 v32 = *(int **)(a1 + 16);
            if (*v32 > 50) {
              goto LABEL_51;
            }
            if (*v32 == -1)
            {
              if (!_LogCategory_Initialize((uint64_t)v32, 0x32u))
              {
LABEL_51:
                dispatch_source_t v33 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *(dispatch_queue_t *)(a1 + 24));
                *(void *)(a1 + 72) = v33;
                if (v33)
                {
                  dispatch_set_context(v33, (void *)a1);
                  dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 72),  (dispatch_function_t)_BonjourAdvertiserRetryTimer);
                  unint64_t v34 = *(dispatch_source_s **)(a1 + 72);
                  dispatch_time_t v35 = dispatch_time(0LL, 1000000 * v31);
                  dispatch_source_set_timer(v34, v35, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
                  dispatch_resume(*(dispatch_object_t *)(a1 + 72));
                }

                goto LABEL_53;
              }

              __int128 v32 = *(int **)(a1 + 16);
            }

            LogPrintF( (uint64_t)v32,  (uint64_t)"void _BonjourAdvertiserHandleError(BonjourAdvertiserRef, OSStatus)",  0x32u,  (uint64_t)"### Bonjour register for %s failed, retrying in %llu ms: %#m\n",  v27,  v28,  v29,  v30,  *(void *)(a1 + 152));
            goto LABEL_51;
          }

LABEL_53:
          *(_BYTE *)(a1 + 170) = 0;
          return;
        }

        unint64_t v20 = *(CUNANPublisher **)(a1 + 64);
        if (!v18)
        {
          unint64_t v20 = objc_alloc_init(&OBJC_CLASS___CUNANPublisher);
          -[CUNANPublisher setControlFlags:](v20, "setControlFlags:", *(unsigned int *)(a1 + 40));
          -[CUNANPublisher setCustomData:](v20, "setCustomData:", *(void *)(a1 + 48));
          -[CUNANPublisher setDispatchQueue:](v20, "setDispatchQueue:", *(void *)(a1 + 24));
          -[CUNANPublisher setInterruptionHandler:](v20, "setInterruptionHandler:", *(void *)(a1 + 56));
          uint64_t v21 = *(void *)(a1 + 152);
          if (v21) {
            uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:");
          }
          -[CUNANPublisher setServiceType:](v20, "setServiceType:", v21);
          -[CUNANPublisher setTrafficFlags:](v20, "setTrafficFlags:", *(unsigned int *)(a1 + 172));
          *(void *)(a1 + 64) = v20;
        }

        uint64_t v22 = *(void *)(a1 + 136);
        if (v22)
        {
          uint64_t v22 = objc_msgSend(NSString, "stringWithUTF8String:");
          unint64_t v20 = *(CUNANPublisher **)(a1 + 64);
        }

        -[CUNANPublisher setName:](v20, "setName:", v22);
        [*(id *)(a1 + 64) setPort:*(unsigned int *)(a1 + 148)];
        if (*(_BYTE *)(a1 + 170))
        {
          uint64_t v23 = CFDictionaryCreateWithTXTRecordBytes(*(const char **)(a1 + 160), *(unsigned __int16 *)(a1 + 168), &v36);
          if (!v23)
          {
            int v19 = v36;
            if (v8) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }

          __int128 v24 = v23;
          [*(id *)(a1 + 64) setTextInfo:v23];
          CFRelease(v24);
        }

        if (!v18) {
          [*(id *)(a1 + 64) activateWithCompletion:0];
        }
        int v19 = 0;
        if (v8) {
          goto LABEL_43;
        }
LABEL_42:
        if (!v19) {
          goto LABEL_53;
        }
        goto LABEL_43;
      }

      DNSServiceSetDispatchQueue(*(DNSServiceRef *)(a1 + 32), *(dispatch_queue_t *)(a1 + 24));
      unsigned int v17 = *(int **)(a1 + 16);
      if (*v17 <= 50)
      {
        if (*v17 == -1)
        {
          unsigned int v17 = *(int **)(a1 + 16);
        }

        LogPrintF( (uint64_t)v17,  (uint64_t)"OSStatus _BonjourAdvertiserUpdateDNSService(BonjourAdvertiserRef)",  0x32u,  (uint64_t)"Registering Bonjour %s port %d\n",  v13,  v14,  v15,  v16,  *(void *)(a1 + 152));
      }

  LOBYTE(v121[0]) = 0;
  v58 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName[0])( (uint64_t)a4,  (uint64_t)v121,  256LL);
  if (v58)
  {
    __int128 v63 = v58;
    v64 = self->_ucat;
    if (v64->var0 > 60) {
      goto LABEL_59;
    }
    if (v64->var0 != -1) {
      goto LABEL_56;
    }
    if (_LogCategory_Initialize((uint64_t)v64, 0x3Cu))
    {
      v64 = self->_ucat;
LABEL_56:
      LogPrintF( (uint64_t)v64,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTDeviceGetName failed: %#m\n",  v59,  v60,  v61,  v62,  v63 - 16);
    }
  }

  else
  {
    [NSString stringWithUTF8String:v121];
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setName:v65];
  }

  if ((v48 & 1) != 0 && self->_state == 1)
  {
    stateChangedHandler = (void (**)(id, uint64_t))self->_stateChangedHandler;
    if (stateChangedHandler) {
      stateChangedHandler[2](stateChangedHandler, 1LL);
    }
  }
}

  return v17;
}

  if (v37)
  {
    primaryIPChangedHandler = (void (**)(void))self->_primaryIPChangedHandler;
    if (primaryIPChangedHandler) {
      primaryIPChangedHandler[2]();
    }
  }
}

    uint64_t v44 = -6700;
    goto LABEL_41;
  }

  uint64_t v44 = 0;
LABEL_41:

  return v44;
}

    __int128 v32 = 0;
  }

  else
  {
    int v36 = v33[1];
    int v37 = (v36 & 3) << 16;
    if (*v33 < 0) {
      int v37 = ((v36 & 3) << 16) | 0x80000000;
    }
    unsigned int v38 = v37 | 0x800000;
    if (v36 >= 0) {
      unsigned int v38 = v37;
    }
    if (v34 == 2)
    {
      int v39 = v38 | ((v36 & 0x60) << 16);
LABEL_48:
      __int128 v32 = v39 | ((*v33 & 0x60) << 24);
      goto LABEL_59;
    }

    char v40 = v33[2];
    int v41 = ((v36 & 0x20) << 16) | ((((v40 & 0x70) >> 4) & 7) << 12) | v38;
    int v42 = (v36 & 0x40) << 16;
    if (v34 < 4)
    {
      uint64_t v43 = v42 | v41;
    }

    else
    {
      uint64_t v43 = v42 | v33[3] & 0x40 | v41;
      if (v33[3] < 0) {
        v43 |= 0x80u;
      }
    }

    uint64_t v44 = v43 | ((v40 & 1) << 8) | ((*v33 & 0x20) << 24);
    dispatch_source_t v45 = v33[2];
    dispatch_source_t v46 = v44 | ((v45 & 6) << 8);
    if (v34 != 3) {
      v46 |= v33[3] & 0x20;
    }
    __int128 v32 = v46 | ((v45 & 8) << 8) | ((*v33 & 0x40) << 24);
    if (v34 >= 4) {
      v32 |= v33[3] & 0x10;
    }
  }

    free(v9);
  }

      if (v29) {
        free(v29);
      }
      if (v187) {
        free(v187);
      }
      if ((_DWORD)v18 != -6771 && (_DWORD)v18) {
        _PairingSessionReset(a1);
      }
      return v18;
    case 10:
    case 12:
    case 14:
      __int128 v53 = &a2[v182];
      uint64_t v54 = a2;
      v55 = __s;
      do
      {
        if (v54 == v53)
        {
LABEL_220:
          uint64_t v18 = 4294960569LL;
          goto LABEL_210;
        }

        if (v54 >= v53)
        {
          uint64_t v18 = 4294960591LL;
          goto LABEL_210;
        }

        v56 = v54 + 2;
        v57 = v54[1];
        if (&v54[v57 + 2] > v53)
        {
          uint64_t v18 = 4294960546LL;
          goto LABEL_210;
        }

        v58 = *v54;
        v54 += v57 + 2;
      }

      while (v58 != 6);
      if ((_DWORD)v57 != 1)
      {
        uint64_t v18 = 4294960553LL;
        goto LABEL_210;
      }

      if (*v56 == 1) {
        _PairingSessionReset(a1);
      }
      uint64_t v59 = *__s;
      if (*__s)
      {
        if (v59 != 1)
        {
          v60 = *(int **)(a1 + 16);
          if (*v60 <= 60)
          {
            if (*v60 != -1) {
              goto LABEL_96;
            }
            if (_LogCategory_Initialize((uint64_t)v60, 0x3Cu))
            {
              v60 = *(int **)(a1 + 16);
              LOBYTE(v59) = *(_BYTE *)(a1 + 120);
LABEL_96:
              LogPrintF( (uint64_t)v60,  (uint64_t)"OSStatus _AdminPairingServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x3Cu,  (uint64_t)"### AdminPairing server bad state: %d\n",  v20,  v21,  (uint64_t)v22,  v23,  v59);
            }
          }

LABEL_26:
      int v8 = 0;
      goto LABEL_27;
    }

    if (DNSServiceUpdateRecord(v2, 0LL, 0, *(_WORD *)(a1 + 168), *(const void **)(a1 + 160), 0))
    {
      if (*(void *)v3)
      {
        DNSServiceRefDeallocate(*(DNSServiceRef *)v3);
        *(void *)uint64_t v3 = 0LL;
      }

      goto LABEL_14;
    }

    int v9 = *(int **)(a1 + 16);
    if (*v9 <= 50)
    {
      if (*v9 != -1)
      {
LABEL_11:
        LogPrintF( (uint64_t)v9,  (uint64_t)"OSStatus _BonjourAdvertiserUpdateDNSService(BonjourAdvertiserRef)",  0x32u,  (uint64_t)"Updated Bonjour TXT for %s\n",  v4,  v5,  v6,  v7,  *(void *)(a1 + 152));
        goto LABEL_13;
      }

      if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
      {
        int v9 = *(int **)(a1 + 16);
        goto LABEL_11;
      }
    }

    DNSServiceFlags v10 = 0;
    if (!a4) {
      return valuePtr;
    }
    goto LABEL_38;
  }

  if (v8 != CFDataGetTypeID())
  {
    DNSServiceFlags v10 = -6756;
    goto LABEL_30;
  }

  if (CFDataGetLength((CFDataRef)a1) != a3) {
    goto LABEL_41;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  if (a2) {
    memcpy(a2, BytePtr, a3);
  }
  if (a3 != 8)
  {
    if (a3 == 6)
    {
      DNSServiceFlags v10 = 0;
      uint32_t v11 = ((unint64_t)*BytePtr << 40) | ((unint64_t)BytePtr[1] << 32) | ((unint64_t)BytePtr[2] << 24) | ((unint64_t)BytePtr[3] << 16) | ((unint64_t)BytePtr[4] << 8);
      DNSServiceErrorType v12 = BytePtr[5];
LABEL_24:
      valuePtr = v11 | v12;
      if (!a4) {
        return valuePtr;
      }
      goto LABEL_38;
    }

    goto LABEL_26;
  }

  DNSServiceFlags v10 = 0;
  uint64_t v15 = *(void *)BytePtr;
LABEL_36:
  valuePtr = bswap64(v15);
LABEL_37:
  if (a4) {
LABEL_38:
  }
    *a4 = v10;
  return valuePtr;
}

        [v28 setDesiredConnectionLatency:v26 forPeripheral:v6];
        goto LABEL_27;
      }

      ucat = self->_ucat;
    }

    [v6 identifier];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEConnection centralManager:didConnectPeripheral:]",  0x1Eu,  (uint64_t)"DidConnectPeripheral %@\n",  v15,  v16,  v17,  v18,  (char)v14);

    goto LABEL_15;
  }

        dispatch_source_t v33 = v53;
        requiredServices = self->_requiredServices;
        if ((requiredServices & ~v53) == 0) {
          goto LABEL_27;
        }
        int v41 = self->_ucat;
        if (v41->var0 <= 30)
        {
          if (v41->var0 == -1)
          {
            int v41 = self->_ucat;
            requiredServices = self->_requiredServices;
            dispatch_source_t v33 = v53;
          }

          LogPrintF( (uint64_t)v41,  (uint64_t)"-[CUBluetoothClient _handleConnectedDevicesInit]",  0x1Eu,  (uint64_t)"BTService connect ignoring due to missing services: %#{flags}\n",  v26,  v27,  v28,  v29,  requiredServices & ~v33);
        }

  dispatch_source_t v33 = *p_btAccessoryManager;
  if (!*p_btAccessoryManager) {
    goto LABEL_33;
  }
  LODWORD(v121[0]) = 0;
  unint64_t v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetDeviceColor[0])( v33,  (uint64_t)a4,  (uint64_t)v121);
  if (v34)
  {
    int v39 = v34;
    char v40 = self->_ucat;
    if (v40->var0 > 60) {
      goto LABEL_33;
    }
    if (v40->var0 != -1) {
      goto LABEL_30;
    }
    if (_LogCategory_Initialize((uint64_t)v40, 0x3Cu))
    {
      char v40 = self->_ucat;
LABEL_30:
      LogPrintF( (uint64_t)v40,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetDeviceColor failed: %#m\n",  v35,  v36,  v37,  v38,  v39 - 16);
    }
  }

  else
  {
    [v6 setColorCode:LODWORD(v121[0])];
  }

    goto LABEL_27;
  }

  int v9 = self->_ucat;
  if (v9->var0 <= 90)
  {
    if (v9->var0 == -1)
    {
      int v9 = self->_ucat;
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"-[CUBonjourBrowser _bonjourHandleRemoveDevice:]",  0x5Au,  (uint64_t)"### Bonjour device found without identifier: %@\n",  v5,  v6,  v7,  v8,  (char)v4);
  }

  self->_selfAccessoryMediaAccessFlags = 0;
LABEL_27:
  if (!self->_selfAccessoryMediaAccessPassword) {
    goto LABEL_33;
  }
  unsigned int v38 = self->_ucat;
  if (v38->var0 <= 30)
  {
    if (v38->var0 == -1)
    {
      unsigned int v38 = self->_ucat;
    }

    LogPrintF( (uint64_t)v38,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessory MediaAccess password updated: HK clear",  v31,  v32,  v33,  v34,  v95);
  }

    self->_selfAccessorySiriEnabled = v11;
    selfAccessorySiriAccessUpdatedHandler = (void (**)(void))self->_selfAccessorySiriAccessUpdatedHandler;
    if (selfAccessorySiriAccessUpdatedHandler) {
      selfAccessorySiriAccessUpdatedHandler[2]();
    }
    goto LABEL_28;
  }

    uint64_t v16 = 0LL;
    goto LABEL_27;
  }

  uint64_t v16 = v23;
  uint64_t v13 = (unsigned __int8 *)[v16 bytes];
  unsigned int v17 = [v16 length];
  uint64_t v30 = v17;
LABEL_3:
  if (!HIDWORD(v17))
  {
    if ((self->_fd & 0x80000000) == 0)
    {
      self->_cdb.loop = 0;
      if ((int)cdb_findnext(&self->_cdb, v13, v17) >= 1)
      {
        uint64_t v21 = -[CUKeyValueStoreReader _readObjectAtOffset:length:type:error:]( self,  "_readObjectAtOffset:length:type:error:",  self->_cdb.dpos,  self->_cdb.dlen,  a4,  a5);
        if (!v21) {
          goto LABEL_27;
        }
        uint64_t v22 = (void *)v21;
        while (1)
        {
          uint64_t v27 = 0;
          v11[2](v11, v22, &v27);

          -[CUKeyValueStoreReader _readObjectAtOffset:length:type:error:]( self,  "_readObjectAtOffset:length:type:error:",  self->_cdb.dpos,  self->_cdb.dlen,  a4,  a5);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v22) {
            goto LABEL_27;
          }
        }
      }

      unint64_t v20 = 1;
      goto LABEL_28;
    }

    if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5A7LL);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }

    memset(v53, 0, 28);
    memset(v52, 0, 28);
    goto LABEL_27;
  }

  uint64_t v25 = (char)name;
  memset(v53, 0, 28);
  memset(v52, 0, 28);
  if (CUGetInterfaceAddresses((self->_controlFlags >> 2) & 2, name, v53, (uint64_t)v52, 0LL))
  {
    unint64_t v26 = self->_ucat;
    if (v26->var0 <= 90)
    {
      if (v26->var0 != -1)
      {
LABEL_8:
        NSPrintF();
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF_safe( (uint64_t)v26,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChangedNW:]",  0x5Au,  (uint64_t)"### Get interface addresses failed: interface=%s, error=%@",  v27,  v28,  v29,  v30,  v25);

        goto LABEL_27;
      }

      if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x5Au))
      {
        unint64_t v26 = self->_ucat;
        goto LABEL_8;
      }
    }
  }

  free(v25);
}

  free(v25);
}

LABEL_27:
        int v42 = 0LL;
        uint64_t v43 = -25300;
      }

      else
      {
        int v42 = 0LL;
        uint64_t v43 = -6762;
      }
    }

    else
    {
      int v42 = 0LL;
      dispatch_source_t v33 = 0LL;
      uint64_t v43 = -6708;
    }

    v66 = v43;
LABEL_44:

    uint64_t v16 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v18 = 0LL;
    dispatch_source_t v46 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v48 = 0LL;
    int v19 = v42;
    goto LABEL_48;
  }

  int v9 = v8;
  [v8 UUIDString];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    unsigned int v17 = (const __CFDictionary *)KeychainCopyMatchingFormatted( &v66,  (uint64_t)"{%kO=%O%kO=%O%kO=%O%kO=%O%kO=%O%kO=%O%kO=%O}",  v10,  v11,  v12,  v13,  v14,  v15,  *MEMORY[0x18960BB38]);
    uint64_t v18 = v17;
    if (v66)
    {
      int v42 = 0LL;
      uint64_t v29 = 0LL;
      int v19 = 0LL;
      dispatch_source_t v46 = 0LL;
      uint64_t v50 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v48 = 0LL;
      goto LABEL_48;
    }

    if (!v17)
    {
      int v42 = 0LL;
      uint64_t v29 = 0LL;
      int v19 = 0LL;
      dispatch_source_t v46 = 0LL;
      uint64_t v50 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v48 = 0LL;
LABEL_65:
      v57 = -6762;
      goto LABEL_66;
    }

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      int v42 = 0LL;
      uint64_t v29 = 0LL;
      int v19 = 0LL;
      dispatch_source_t v46 = 0LL;
      uint64_t v50 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v48 = 0LL;
LABEL_61:
      v58 = -6756;
      goto LABEL_62;
    }

    int v19 = objc_alloc_init(&OBJC_CLASS___CUPairedPeer);
    -[CUPairedPeer setIdentifier:](v19, "setIdentifier:", v9);
    unint64_t v20 = (const void *)*MEMORY[0x18960B9F8];
    CFTypeID TypeID = CFStringGetTypeID();
    CFDictionaryGetTypedValue(v18, v20, TypeID, 0LL);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22) {
      -[CUPairedPeer setName:](v19, "setName:", v22);
    }
    uint64_t v23 = (const void *)*MEMORY[0x18960B928];
    __int128 v24 = CFDataGetTypeID();
    CFDictionaryGetTypedValue(v18, v23, v24, 0LL);
    uint64_t v25 = (const __CFData *)objc_claimAutoreleasedReturnValue();
    unint64_t v26 = v25;
    if (v25)
    {
      uint64_t v27 = (__CFString *)OPACKDecodeData(v25, 0, 0LL);
      if (v27)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          uint64_t v28 = CFStringGetTypeID();
          CFDictionaryGetTypedValue((const __CFDictionary *)v27, @"model", v28, 0LL);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();

          if (v29) {
            -[CUPairedPeer setModel:](v19, "setModel:", v29);
          }
          uint64_t v30 = (void *)[objc_alloc(MEMORY[0x189603FC8]) initWithDictionary:v27];
          [v30 removeObjectForKey:@"model"];
          -[CUPairedPeer setInfo:](v19, "setInfo:", v30);

LABEL_31:
          uint64_t v44 = (const void *)*MEMORY[0x18960BE78];
          dispatch_source_t v45 = CFDataGetTypeID();
          CFDictionaryGetTypedValue(v18, v44, v45, &v66);
          dispatch_source_t v46 = (const __CFData *)objc_claimAutoreleasedReturnValue();

          if (v66)
          {
            int v42 = 0LL;
            uint64_t v50 = 0LL;
            uint64_t v48 = 0LL;
            goto LABEL_48;
          }

          if (v46)
          {
            dispatch_queue_t v47 = OPACKDecodeData(v46, 0, &v66);
            uint64_t v48 = (const __CFDictionary *)v47;
            if (v66)
            {
              int v42 = 0LL;
              uint64_t v50 = 0LL;
              goto LABEL_48;
            }

            if (v47)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                uint64_t v49 = CFDictionaryGetTypeID();
                CFDictionaryGetTypedValue(v48, @"acl", v49, 0LL);
                uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue();
                if (v50) {
                  -[CUPairedPeer setAcl:](v19, "setAcl:", v50);
                }
                __int128 v51 = CFDataGetTypeID();
                CFDictionaryGetTypedValue(v48, @"pk", v51, &v66);
                __int128 v52 = (const __CFData *)objc_claimAutoreleasedReturnValue();

                if (v66)
                {
                  int v42 = 0LL;
LABEL_47:
                  dispatch_source_t v46 = v52;
                  goto LABEL_48;
                }

                if (v52)
                {
                  -[CUPairedPeer setPublicKey:](v19, "setPublicKey:", v52);
                  if ((a4 & 2) != 0)
                  {
                    __int128 v53 = CFDataGetTypeID();
                    uint64_t v54 = CFDictionaryGetTypedValue(v48, @"altIRK", v53, 0LL);

                    if (v54)
                    {
                      -[CUPairedPeer setAltIRK:](v19, "setAltIRK:", v54);
                      __int128 v52 = (const __CFData *)v54;
                    }

                    else
                    {
                      __int128 v52 = 0LL;
                    }
                  }

                  int v42 = v19;
                  int v19 = v42;
                  goto LABEL_47;
                }

                int v42 = 0LL;
                dispatch_source_t v46 = 0LL;
                goto LABEL_65;
              }

              int v42 = 0LL;
              uint64_t v50 = 0LL;
              goto LABEL_61;
            }

            int v42 = 0LL;
            uint64_t v50 = 0LL;
          }

          else
          {
            int v42 = 0LL;
            uint64_t v50 = 0LL;
            uint64_t v48 = 0LL;
          }

          v58 = -6762;
LABEL_62:
          v66 = v58;
          goto LABEL_48;
        }
      }
    }

    else
    {
      uint64_t v27 = 0LL;
    }

    uint64_t v29 = v22;
    goto LABEL_31;
  }

  int v42 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v18 = 0LL;
  int v19 = 0LL;
  dispatch_source_t v46 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v48 = 0LL;
  v57 = -6708;
LABEL_66:
  v66 = v57;
LABEL_48:
  if (a5) {
    *a5 = v66;
  }
  v55 = v42;

  return v55;
}

    unint64_t v20 = 0;
    goto LABEL_8;
  }

  memset_s(v25, 0x20uLL, 0, 0x20uLL);
  unint64_t v20 = 1;
LABEL_8:

  return v20;
}
}

  pthread_mutex_lock(&gCUSystemMonitorLock);
  objc_storeStrong((id *)&self->_regionISOCountryCode, v14);
  objc_storeStrong((id *)&self->_regionMobileCountryCode, a3);
  pthread_mutex_unlock(&gCUSystemMonitorLock);
  if (!v10)
  {
LABEL_36:
    if (gLogCategory_CUSystemMonitor <= 30
      && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _regionMonitorUpdateMCC:]",  0x1Eu,  (uint64_t)"Region changed: MCC %@, ISO %@",  v27,  v28,  v29,  v30,  (char)v7);
      -[CUSystemMonitorImp _invokeBlock:passingTest:]( self,  "_invokeBlock:passingTest:",  &__block_literal_global_221,  &__block_literal_global_222,  v36,  v14,  v38,  v39);
    }

    else
    {
      -[CUSystemMonitorImp _invokeBlock:passingTest:]( self,  "_invokeBlock:passingTest:",  &__block_literal_global_221,  &__block_literal_global_222,  v35,  v37,  v38,  v39);
    }

    goto LABEL_41;
  }

  uint64_t v31 = v14;
  __int128 v32 = v12;
  dispatch_source_t v33 = v32;
  if (v31 == v32)
  {

    goto LABEL_32;
  }

  if ((v32 != 0LL) == (v31 == 0LL))
  {

    goto LABEL_36;
  }

  unint64_t v34 = -[NSString isEqual:](v31, "isEqual:", v32);

  if ((v34 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_32:
  if (gLogCategory_CUSystemMonitor <= 10
    && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0xAu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _regionMonitorUpdateMCC:]",  0xAu,  (uint64_t)"Region unchanged: MCC %@, ISO %@",  v27,  v28,  v29,  v30,  (char)v7);
  }

    uint64_t v15 = CUBonjourDeviceReconfirm(*(void **)(a3 + 328));
    if (v15)
    {
      unint64_t v20 = v15;
      uint64_t v21 = *(int **)(a3 + 216);
      if (*v21 <= 60)
      {
        if (*v21 == -1)
        {
          uint64_t v21 = *(int **)(a3 + 216);
        }

        LogPrintF( (uint64_t)v21,  (uint64_t)"void _connectHandler(SocketRef, OSStatus, void * _Nonnull)",  0x3Cu,  (uint64_t)"### Reconfirming with Bonjour failed: %#m\n",  v16,  v17,  v18,  v19,  v20);
      }
    }
  }

  uint64_t v22 = *(void *)(v9 + 88);
  if (v22)
  {
    (*(void (**)(uint64_t, id))(v22 + 16))(v22, v21);
    uint64_t v23 = *(void **)(v9 + 88);
    *(void *)(v9 + 88) = 0LL;
  }

  if (*(_BYTE *)(v9 + 112)) {
    [(id)v9 _invalidated];
  }
  __int128 v24 = *(_DWORD *)(v8 + 8);
  if ((v24 & 0x80000000) == 0)
  {
    if (close(v24) && *__error()) {
      __error();
    }
    *(_DWORD *)(v8 + 8) = -1;
  }
}

  bonjourAdvertiser = self->_bonjourAdvertiser;
  if (bonjourAdvertiser)
  {
    -[CUBonjourAdvertiser label](bonjourAdvertiser, "label");
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (v30)
    {
    }

    else if (self->_label)
    {
      -[CUBonjourAdvertiser setLabel:](self->_bonjourAdvertiser, "setLabel:");
    }

    -[CUBonjourAdvertiser setPort:](self->_bonjourAdvertiser, "setPort:", self->_tcpListeningPort);
    -[CUBonjourAdvertiser activate](self->_bonjourAdvertiser, "activate");
  }

  uint64_t v31 = 0LL;
LABEL_33:
  if ((v50 & 0x80000000) == 0 && close(v50) && *__error()) {
    __error();
  }
  if ((v49 & 0x80000000) == 0 && close(v49) && *__error()) {
    __error();
  }
  if (v31)
  {
    __int128 v32 = self->_ucat;
    if (v32->var0 > 60) {
      goto LABEL_46;
    }
    if (v32->var0 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v32, 0x3Cu))
      {
LABEL_46:
        dispatch_source_t v33 = self->_listenerSourceV4;
        if (v33)
        {
          unint64_t v34 = v33;
          dispatch_source_cancel(v34);
          dispatch_time_t v35 = self->_listenerSourceV4;
          self->_listenerSourceV4 = 0LL;

          int v36 = self->_listenerSourceV4;
          if (v36)
          {
            int v37 = v36;
            dispatch_source_cancel(v37);
            unsigned int v38 = self->_listenerSourceV4;
            self->_listenerSourceV4 = 0LL;
          }
        }

        if (a3) {
          *a3 = v31;
        }
        goto LABEL_51;
      }

      __int128 v32 = self->_ucat;
    }

    LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUTCPServer activateDirectAndReturnError:]",  0x3Cu,  (uint64_t)"### Activate failed: %{error}\n",  v15,  v16,  v17,  v18,  (char)v31);
    goto LABEL_46;
  }
}

  if (!self->_wifiCriticalSetup) {
    goto LABEL_42;
  }
  uint64_t v21 = self->_ucat;
  if (v21->var0 <= 30)
  {
    if (v21->var0 == -1)
    {
      uint64_t v21 = self->_ucat;
    }

    LogPrintF( (uint64_t)v21,  (uint64_t)"-[CUWiFiManager _wifiEnsureStopped]",  0x1Eu,  (uint64_t)"WiFiDeviceClient critical monitor stopped\n",  v2,  v3,  v4,  v5,  v31);
  }

        _LULevelToString(a3, (uint64_t)v39);
        unsigned int v17 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)&v40);
        v14 += v17 & ~(v17 >> 31);
        goto LABEL_27;
      }

  if (a3) {
    *a3 = v6 - __dst;
  }
  if (v28 != -6753 && v28 != 35 || v6 == __dst) {
    return v28;
  }
  else {
    return 0LL;
  }
}

  if (v27) {
    *uint64_t v27 = v6 - v26;
  }
  if (v25 != -6753 && v25 != 35 || v6 == v26) {
    return v25;
  }
  else {
    return 0LL;
  }
}

      uint64_t v25 = 0LL;
      unint64_t v26 = 0;
      uint64_t v27 = -6709;
LABEL_27:
      Bytes = v27;
      goto LABEL_35;
    }
  }

  else
  {
    *unint64_t v20 = 1;
    if (*v16 != 1) {
      goto LABEL_26;
    }
  }

  uint64_t v22 = *(int **)(a1 + 16);
  uint64_t v23 = *v22;
  if (*v22 <= 30)
  {
    if (v23 != -1)
    {
LABEL_19:
      __int128 v24 = v23 <= 10 && (v23 != -1 || _LogCategory_Initialize((uint64_t)v22, 0xAu));
      LogPrintF( (uint64_t)v22,  (uint64_t)"OSStatus _ResumePairingServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-resume server M1 -- resume request\n%?{end}%1{tlv8}\n",  a5,  (uint64_t)a6,  a7,  a8,  !v24);
      goto LABEL_30;
    }

    if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
    {
      uint64_t v22 = *(int **)(a1 + 16);
      uint64_t v23 = *v22;
      goto LABEL_19;
    }
  }

      if (a3) {
        *a3 = v16;
      }
      return result;
    }

    uint64_t v6 = gGestaltCacheR1Capability;
    if (gGestaltCacheR1Capability)
    {
LABEL_21:
      if (v6 == 6) {
        uint64_t v15 = (uint64_t *)MEMORY[0x189604DE8];
      }
      else {
        uint64_t v15 = (uint64_t *)MEMORY[0x189604DE0];
      }
      uint64_t result = *v15;
      goto LABEL_25;
    }

    uint64_t v7 = *MEMORY[0x1896086A8];
    int v8 = IOServiceNameMatching("rose");
    MatchingService = IOServiceGetMatchingService(v7, v8);
    if (MatchingService)
    {
      DNSServiceFlags v10 = MatchingService;
      CFint Property = (const __CFString *)IORegistryEntryCreateCFProperty(MatchingService, @"ChipID", 0LL, 0);
      DNSServiceErrorType v12 = CFGetInt64(CFProperty, 0LL);
      if (CFProperty) {
        CFRelease(CFProperty);
      }
      if (v12)
      {
        uint64_t v13 = (const __CFString *)IORegistryEntryCreateCFProperty(v10, @"ECID", 0LL, 0);
        uint64_t v14 = CFGetInt64(v13, 0LL);
        if (v13) {
          CFRelease(v13);
        }
        IOObjectRelease(v10);
        if (v14) {
          uint64_t v6 = 6;
        }
        else {
          uint64_t v6 = 5;
        }
        goto LABEL_20;
      }

      IOObjectRelease(v10);
    }

    uint64_t v6 = 5;
LABEL_20:
    gGestaltCacheR1Capability = v6;
    goto LABEL_21;
  }

  return result;
}

LABEL_13:
    if (*(void *)v3) {
      goto LABEL_26;
    }
    goto LABEL_14;
  }

  uint64_t v13 = *(_DNSServiceRef_t **)(cf + 32);
  if (v13)
  {
    DNSServiceRefDeallocate(v13);
    *(void *)(cf + 32) = 0LL;
  }

  CFRetain((CFTypeRef)cf);
  dispatch_async_f(*(dispatch_queue_t *)(cf + 24), (void *)cf, (dispatch_function_t)_BonjourAdvertiserUpdate);
}

    uint64_t v25 = 0LL;
    while (v24 != v25)
    {
      if (v14[v25] != aF[v25]) {
        goto LABEL_32;
      }
      if (++v25 == 2) {
        goto LABEL_37;
      }
    }

    if (!aF[v24])
    {
LABEL_37:
      if (sscanf(v23, "%lf", v79) != 1) {
        goto LABEL_123;
      }
      appended = CFPropertyListAppendFormatted( v7,  v9,  (uint64_t)"%.*ks=%f",  v34,  v35,  v36,  v37,  v38,  (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }

  return v28;
}
}

  if (!self->_btLocalDeviceCallbacksRegistered) {
    goto LABEL_19;
  }
  uint64_t v13 = self->_ucat;
  if (v13->var0 <= 30)
  {
    if (v13->var0 == -1)
    {
      uint64_t v13 = self->_ucat;
    }

    LogPrintF( (uint64_t)v13,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x1Eu,  (uint64_t)"BTLocalDeviceRemoveCallbacks\n",  v2,  v3,  v4,  v5,  v28);
  }

    goto LABEL_14;
  }

  uint32_t v11 = v6;
  DNSServiceErrorType v12 = self->_ucat;
  if (v12->var0 <= 60)
  {
    if (v12->var0 == -1)
    {
      DNSServiceErrorType v12 = self->_ucat;
    }

    LogPrintF( (uint64_t)v12,  (uint64_t)"-[CUBluetoothClient _createCUBluetoothDeviceWithBTDevice:]",  0x3Cu,  (uint64_t)"### BTDeviceGetAddressString failed: %#m\n",  v7,  v8,  v9,  v10,  v11 - 16);
  }

    [v12 _handlePairingStatusChanged];
    goto LABEL_14;
  }

  if (a2 == 4)
  {
    uint64_t v13 = (int *)v7[28];
    if (*v13 <= 30)
    {
      if (*v13 == -1)
      {
        uint64_t v13 = (int *)v12[28];
      }

      uint64_t v14 = "Pairing status changed\n";
      goto LABEL_9;
    }

    goto LABEL_13;
  }

    if (v10 >= v42) {
      uint64_t v23 = v42;
    }
    else {
      uint64_t v23 = v10;
    }
    if (v23)
    {
      memcpy(v9, __src, v23);
      v9 += v23;
      if (v10 == v23)
      {
        if (v10 < v42)
        {
          if (v42 - v23 > self->_btReadLeftoverMaxLen) {
            FatalErrorF("Slot too big (%zu > %zu bytes)");
          }
          if (self->_btReadLeftoverPtr != self->_btReadLeftoverEnd) {
            FatalErrorF("Extra leftover data");
          }
          memcpy(self->_btReadLeftoverBuf, &__src[v23], v42 - v23);
          btReadLeftoverBuf = self->_btReadLeftoverBuf;
          self->_btReadLeftoverPtr = btReadLeftoverBuf;
          self->_btReadLeftoverEnd = &btReadLeftoverBuf[v42 - v23];
        }

        int v8 = a3;
        uint64_t v7 = a4;
        goto LABEL_28;
      }

      v10 -= v23;
    }
  }

  int v8 = a3;
  uint64_t v7 = a4;
  if (!i) {
    goto LABEL_38;
  }
LABEL_28:
  uint64_t v25 = os_channel_advance_slot();
  if (v25)
  {
    uint64_t v30 = v25;
    uint64_t v31 = self->_ucat;
    if (v31->var0 <= 90)
    {
      if (v31->var0 != -1) {
        goto LABEL_31;
      }
      if (_LogCategory_Initialize((uint64_t)v31, 0x5Au))
      {
        uint64_t v31 = self->_ucat;
LABEL_31:
        LogPrintF( (uint64_t)v31,  (uint64_t)"-[CUBluetoothScalablePipe _readBytes:minLen:maxLen:offset:]",  0x5Au,  (uint64_t)"### Advance rx slot failed: %#m\n",  v26,  v27,  v28,  v29,  v30);
      }
    }
  }

  __int128 v32 = os_channel_sync();
  if (v32)
  {
    int v37 = v32;
    unsigned int v38 = self->_ucat;
    if (v38->var0 <= 90)
    {
      if (v38->var0 != -1) {
        goto LABEL_36;
      }
      if (_LogCategory_Initialize((uint64_t)v38, 0x5Au))
      {
        unsigned int v38 = self->_ucat;
LABEL_36:
        LogPrintF( (uint64_t)v38,  (uint64_t)"-[CUBluetoothScalablePipe _readBytes:minLen:maxLen:offset:]",  0x5Au,  (uint64_t)"### Sync rx failed: %#m\n",  v33,  v34,  v35,  v36,  v37);
      }
    }
  }

      NSErrorWithOSStatusF((const char *)0xFFFFE59FLL);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUBluetoothScalablePipe _abortReadsWithError:](self, "_abortReadsWithError:", v27);
      -[CUBluetoothScalablePipe _abortWritesWithError:](self, "_abortWritesWithError:", v27);
      -[CUBluetoothScalablePipe _tearDownPipe](self, "_tearDownPipe");
      uint64_t v28 = self->_btPipe;
      self->_btPipe = 0LL;

      peerIdentifier = self->_peerIdentifier;
      self->_peerIdentifier = 0LL;

LABEL_14:
      [v40 peer];
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
      [v30 identifier];
      uint64_t v31 = (NSUUID *)objc_claimAutoreleasedReturnValue();
      __int128 v32 = self->_peerIdentifier;
      self->_peerIdentifier = v31;

      dispatch_source_t v33 = self->_ucat;
      if (v33->var0 <= 30)
      {
        if (v33->var0 == -1)
        {
          dispatch_source_t v33 = self->_ucat;
        }

        [v40 name];
        unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
        [v40 type];
        [v40 priority];
        LogPrintF( (uint64_t)v33,  (uint64_t)"-[CUBluetoothScalablePipe scalablePipeManager:pipeDidConnect:]",  0x1Eu,  (uint64_t)"Pipe connected: ID '%@', Peer %@, Type %s, Priority %s\n",  v35,  v36,  v37,  v38,  (char)v34);
      }

    uint64_t v16 = self->_selfAccessoryMediaAccessFlags & 0xFFFFFFFD;
    if (v12) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = 0;
    }
    LOBYTE(v15) = v16 | v17;
    self->_selfAccessoryMediaAccessFlags = v16 | v17;
LABEL_17:
    uint64_t v18 = [v40 minimumMediaUserPrivilege];
    if (((v15 & 1) == 0) != (v18 != 0)) {
      goto LABEL_26;
    }
    uint64_t v23 = v18;
    __int128 v24 = self->_ucat;
    if (v24->var0 <= 30)
    {
      if (v24->var0 != -1)
      {
LABEL_20:
        if ((v15 & 1) != 0) {
          uint64_t v25 = "yes";
        }
        else {
          uint64_t v25 = "no";
        }
        LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaAccess]",  0x1Eu,  (uint64_t)"SelfAccessory MediaAccess HomeOnly updated: %s -> %s\n",  v19,  v20,  v21,  v22,  (char)v25);
        goto LABEL_25;
      }

      if (_LogCategory_Initialize((uint64_t)v24, 0x1Eu))
      {
        __int128 v24 = self->_ucat;
        goto LABEL_20;
      }
    }

      uint64_t v14 = *__error();
      goto LABEL_20;
    }

    goto LABEL_17;
  }

  uint64_t v13 = 1;
  self->_cdbStarted = 1;
LABEL_21:

  return v13;
}

    goto LABEL_14;
  }

  uint64_t v25 = self->_ucat;
  if (v25->var0 <= 60)
  {
    if (v25->var0 == -1)
    {
      uint64_t v25 = self->_ucat;
    }

    LogPrintF( (uint64_t)v25,  (uint64_t)"-[CUMessageSession remoteRequestID:options:request:responseHandler:]",  0x3Cu,  (uint64_t)"### No entry for request ID '%@'\n",  v14,  v15,  v16,  v17,  (char)v27);
  }

    nw_path_evaluator_cancel();
    nwPathEvaluator = self->_nwPathEvaluator;
    self->_nwPathEvaluator = 0LL;
  }

    if (a4) {
      *a4 = v24;
    }
    uint32_t v11 = v19;

    return v11;
  }

  return -[CUPairingDaemon _copyHomeKitWithOptionsKeychain:error:]( self,  "_copyHomeKitWithOptionsKeychain:error:",  a3,  a4);
}

LABEL_20:
  if (gLogCategory_CUPairingDaemon <= 30
    && (gLogCategory_CUPairingDaemon != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingDaemon, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUPairingDaemon,  (uint64_t)"-[CUPairingDaemon _rpIdentityUpdate]_block_invoke",  0x1Eu,  (uint64_t)"Self RPIdentity get failed: no self identity\n",  v17,  v18,  v19,  v20,  v33);
  }

  if (-[CUPowerSource isAggregateComponent](v10, "isAggregateComponent"))
  {
    -[CUPowerSourceMonitor _aggregatePowerSourceFound:](self, "_aggregatePowerSourceFound:", v10);
  }

  else
  {
    powerSourceFoundHandler = (void (**)(id, CUPowerSource *))self->_powerSourceFoundHandler;
    if (powerSourceFoundHandler) {
      powerSourceFoundHandler[2](powerSourceFoundHandler, v10);
    }
  }
}

  uint64_t v15 = self->_readRequestCurrent;
  if (v15)
  {
    readRequestdouble Current = self->_readRequestCurrent;
    self->_readRequestdouble Current = 0LL;

    -[CUTCPConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", v15, v5);
  }

  uint64_t v29 = 0u;
  uint64_t v30 = 0u;
  uint64_t v27 = 0u;
  uint64_t v28 = 0u;
  unsigned int v17 = self->_readRequests;
  uint64_t v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v27,  v31,  16LL);
  if (v18)
  {
    int v19 = v18;
    unint64_t v20 = *(void *)v28;
    do
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = v15;
      do
      {
        if (*(void *)v28 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v15 = (CUReadRequest *)*(id *)(*((void *)&v27 + 1) + 8 * v21);

        -[CUTCPConnection _completeReadRequest:error:](self, "_completeReadRequest:error:", v15, v5);
        ++v21;
        uint64_t v22 = v15;
      }

      while (v19 != v21);
      int v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v27,  v31,  16LL);
    }

    while (v19);
  }

  -[NSMutableArray removeAllObjects](self->_readRequests, "removeAllObjects");
  readSource = (dispatch_object_s *)self->_readSource;
  if (readSource && !self->_readSuspended)
  {
    self->_readSuspended = 1;
    dispatch_suspend(readSource);
  }

  errorHandler = (void (**)(id, id))self->_errorHandler;
  if (errorHandler)
  {
    errorHandler[2](errorHandler, v5);
    uint64_t v25 = self->_errorHandler;
  }

  else
  {
    uint64_t v25 = 0LL;
  }

  self->_errorHandler = 0LL;

  -[CUTCPConnection _invalidated](self, "_invalidated");
}

  int v8 = 0LL;
LABEL_14:
  self->_errorHandler = 0LL;

  return 1;
}

  uint64_t v15 = self->_writeRequestCurrent;
  if (v15)
  {
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

    -[CUTCPConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v15, v5);
  }

  uint64_t v29 = 0u;
  uint64_t v30 = 0u;
  uint64_t v27 = 0u;
  uint64_t v28 = 0u;
  unsigned int v17 = self->_writeRequests;
  uint64_t v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v27,  v31,  16LL);
  if (v18)
  {
    int v19 = v18;
    unint64_t v20 = *(void *)v28;
    do
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = v15;
      do
      {
        if (*(void *)v28 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v15 = (CUWriteRequest *)*(id *)(*((void *)&v27 + 1) + 8 * v21);

        -[CUTCPConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v15, v5);
        ++v21;
        uint64_t v22 = v15;
      }

      while (v19 != v21);
      int v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v27,  v31,  16LL);
    }

    while (v19);
  }

  -[NSMutableArray removeAllObjects](self->_writeRequests, "removeAllObjects");
  writeSource = (dispatch_object_s *)self->_writeSource;
  if (writeSource && !self->_writeSuspended)
  {
    self->_writeSuspended = 1;
    dispatch_suspend(writeSource);
  }

  errorHandler = (void (**)(id, id))self->_errorHandler;
  if (errorHandler)
  {
    errorHandler[2](errorHandler, v5);
    uint64_t v25 = self->_errorHandler;
  }

  else
  {
    uint64_t v25 = 0LL;
  }

  self->_errorHandler = 0LL;

  -[CUTCPConnection _invalidated](self, "_invalidated");
}

  -[CUVoiceSession _invalidated](self, "_invalidated");
}

    DNSServiceErrorType v12 = MEMORY[0x1895F87A8];
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 3221225472LL;
    v17[2] = __40__CUVoiceSession__processQueuedRequests__block_invoke;
    v17[3] = &unk_189F33088;
    v17[4] = self;
    v17[5] = v10;
    [v9 setDidStartSpeaking:v17];
    [(Class)getAVAudioSessionClass_9207[0]() sharedInstance];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 setCategory:@"AVAudioSessionCategoryPlayback" mode:@"AVAudioSessionModeDefault" routeSharingPolicy:1 options:0 error:0];

    speechSynthesizer = self->_speechSynthesizer;
    v15[0] = v12;
    v15[1] = 3221225472LL;
    v15[2] = __40__CUVoiceSession__processQueuedRequests__block_invoke_2;
    v15[3] = &unk_189F32E40;
    v15[4] = self;
    v15[5] = v10;
    uint64_t v16 = v9;
    -[SiriTTSDaemonSession speakWithSpeechRequest:didFinish:]( speechSynthesizer,  "speakWithSpeechRequest:didFinish:",  v16,  v15);

    goto LABEL_14;
  }

  if (!self->_wifiManager) {
    goto LABEL_24;
  }
LABEL_14:
  if (self->_wifiDevice) {
    goto LABEL_24;
  }
  DNSServiceErrorType v12 = (const __CFArray *)WiFiManagerClientCopyDevices();
  uint64_t v13 = v12;
  if (!v12 || CFArrayGetCount(v12) < 1)
  {
    uint64_t v15 = self->_ucat;
    if (v15->var0 > 60) {
      goto LABEL_22;
    }
    if (v15->var0 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v15, 0x3Cu))
      {
LABEL_22:
        if (!v13) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }

      uint64_t v15 = self->_ucat;
    }

    LogPrintF( (uint64_t)v15,  (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]",  0x3Cu,  (uint64_t)"### WiFiManagerClientCopyDevices failed: %@\n",  v2,  v3,  v4,  v5,  (char)v13);
    goto LABEL_22;
  }

  ValueAtIndex = (__WiFiDeviceClient *)CFArrayGetValueAtIndex(v13, 0LL);
  self->_wifiDevice = ValueAtIndex;
  CFRetain(ValueAtIndex);
LABEL_23:
  CFRelease(v13);
LABEL_24:
  if ((self->_controlFlags & 0x100) != 0)
  {
    if (!self->_wifiDevice || self->_wifiCriticalSetup) {
      goto LABEL_40;
    }
    unsigned int v17 = self->_ucat;
    if (v17->var0 <= 30)
    {
      if (v17->var0 == -1)
      {
        unsigned int v17 = self->_ucat;
      }

      LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]",  0x1Eu,  (uint64_t)"WiFiDeviceClient critical monitor started\n",  v2,  v3,  v4,  v5,  v37);
    }

  CFRelease(v7);
  return v12;
}

  _HTTPServerUpdateTimeoutTimer(v2);
  CFRelease((CFTypeRef)a1);
}

    uint64_t v4 = v22;
  }

  if (SNScanF(v19, v18, "%lld", v6, v7, v8, v9, v10, (int)&v17) == 1)
  {
    *(void *)(a3 + 8) = v17;
    goto LABEL_13;
  }

  return 4294960559LL;
}

    *uint64_t v7 = 47;
  }

  if (a2 < 0x200 || v9)
  {
    if (!v9) {
      return 0LL;
    }
    goto LABEL_13;
  }

  if (chmod(v16, a2) != -1) {
    return 0LL;
  }
  uint64_t v14 = *__error();
  if (v14) {
    return v14;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

  if (a4) {
    *a4 = v9;
  }
  return result;
}

  uint64_t v21 = (void *)v26[3];
  if (v21) {
    xpc_release(v21);
  }
  _Block_object_dispose(&v25, 8);
  return v19;
}

void _BonjourAdvertiserRegistrationHandler( int a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t cf, uint64_t a8)
{
  if (!a3)
  {
    DNSServiceFlags v10 = *(int **)(cf + 16);
    if (*v10 > 50) {
      return;
    }
    if (*v10 == -1)
    {
      DNSServiceFlags v10 = *(int **)(cf + 16);
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const cha r *, const char *, const char *, void *)",  0x32u,  (uint64_t)"Registered Bonjour %s.%s%s\n",  a5,  a6,  cf,  a8,  a4);
    return;
  }

  if (a3 != -65563)
  {
    DNSServiceErrorType v12 = *(int **)(cf + 16);
    if (*v12 > 50) {
      return;
    }
    if (*v12 == -1)
    {
      DNSServiceErrorType v12 = *(int **)(cf + 16);
    }

    LogPrintF( (uint64_t)v12,  (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const cha r *, const char *, const char *, void *)",  0x32u,  (uint64_t)"### Bonjour registration error for %s: %#m\n",  a5,  a6,  cf,  a8,  *(void *)(cf + 152));
    return;
  }

  int v9 = *(int **)(cf + 16);
  if (*v9 <= 50)
  {
    if (*v9 == -1)
    {
      int v9 = *(int **)(cf + 16);
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"void _BonjourAdvertiserRegistrationHandler(DNSServiceRef, DNSServiceFlags, DNSServiceErrorType, const cha r *, const char *, const char *, void *)",  0x32u,  (uint64_t)"### Bonjour server crashed for %s\n",  a5,  a6,  cf,  a8,  *(void *)(cf + 152));
  }

uint64_t _BonjourAdvertiserRetryTimer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(int **)(a1 + 16);
  if (*v9 <= 50)
  {
    if (*v9 != -1)
    {
LABEL_3:
      LogPrintF( (uint64_t)v9,  (uint64_t)"void _BonjourAdvertiserRetryTimer(void *)",  0x32u,  (uint64_t)"Retrying Bonjour register for %s after failure\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 152));
      goto LABEL_5;
    }

    if (_LogCategory_Initialize((uint64_t)v9, 0x32u))
    {
      int v9 = *(int **)(a1 + 16);
      goto LABEL_3;
    }
  }

void _BonjourAdvertiserUpdate(const void *a1)
{
}

void BonjourAdvertiserStop(dispatch_queue_t *a1)
{
}

void _BonjourAdvertiserStop(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v2);
    *(void *)(a1 + 72) = 0LL;
  }

  uint64_t v3 = *(_DNSServiceRef_t **)(a1 + 32);
  if (v3)
  {
    DNSServiceRefDeallocate(v3);
    *(void *)(a1 + 32) = 0LL;
  }

  [*(id *)(a1 + 64) invalidate];

  *(void *)(a1 + 64) = 0LL;
  if (*(_BYTE *)(a1 + 88))
  {
    int v8 = *(int **)(a1 + 16);
    if (*v8 <= 50)
    {
      if (*v8 == -1)
      {
        int v8 = *(int **)(a1 + 16);
      }

      LogPrintF( (uint64_t)v8,  (uint64_t)"void _BonjourAdvertiserStop(void *)",  0x32u,  (uint64_t)"Deregistered Bonjour %s\n",  v4,  v5,  v6,  v7,  *(void *)(a1 + 152));
    }

LABEL_10:
    CFRelease((CFTypeRef)a1);
  }

  *(_BYTE *)(a1 + 88) = 0;
  CFRelease((CFTypeRef)a1);
}

  if (a2) {
    *a2 = v5;
  }
  return v9;
}

  *a3 = v18;
  *a4 = v13;
  if (a5) {
    *a5 = v14;
  }
  return BytePtr;
}

  uint64_t v25 = self->_audioSession;
  dispatch_source_t v33 = v19;
  unint64_t v26 = -[AVAudioSession setActive:error:](v25, "setActive:error:", 1LL, &v33);
  uint64_t v27 = v33;

  if (!v26)
  {
    __int128 v32 = self->_ucat;
    if (v32->var0 <= 90)
    {
      if (v32->var0 == -1)
      {
        __int128 v32 = self->_ucat;
      }

      LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUAudioPlayer _activate]",  0x5Au,  (uint64_t)"### AudioSession setActive failed: %{error}\n",  v28,  v29,  v30,  v31,  (char)v27);
    }
  }

  btConnectedDevices = self->_btConnectedDevices;
  if (!btConnectedDevices)
  {
    uint64_t v15 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
    uint64_t v16 = self->_btConnectedDevices;
    self->_btConnectedDevices = v15;

    btConnectedDevices = self->_btConnectedDevices;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](btConnectedDevices, "setObject:forKeyedSubscript:", v4, v5);
  -[CUBluetoothClient updateStatusFlags](self, "updateStatusFlags");
  unsigned int v17 = _Block_copy(self->_deviceConnectedHandler);
  uint64_t v18 = v17;
  if (v17)
  {
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    v19[2] = __44__CUBluetoothClient__handleDeviceConnected___block_invoke;
    v19[3] = &unk_189F33060;
    uint64_t v21 = v17;
    unint64_t v20 = v4;
    -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v19);
  }

LABEL_15:
}

  DNSServiceErrorType v12 = v9 - 1;
  uint64_t v4 = v17;
  uint64_t v13 = "Resetting";
  switch(v12)
  {
    case 0uLL:
      goto LABEL_14;
    case 1uLL:
      uint64_t v13 = "Unsupported";
      goto LABEL_14;
    case 2uLL:
      uint64_t v13 = "Unauthorized";
      goto LABEL_14;
    case 3uLL:
      uint64_t v13 = "PoweredOff";
LABEL_14:
      uint64_t v14 = self->_ucat;
      if (v14->var0 > 50) {
        goto LABEL_19;
      }
      if (v14->var0 != -1) {
        goto LABEL_16;
      }
      if (_LogCategory_Initialize((uint64_t)v14, 0x32u))
      {
        uint64_t v14 = self->_ucat;
LABEL_16:
        LogPrintF( (uint64_t)v14,  (uint64_t)"-[CUBluetoothScalablePipe scalablePipeManagerDidUpdateState:]",  0x32u,  (uint64_t)"Tear down due to %s state\n",  v5,  v6,  v7,  v8,  (char)v13);
      }

      *(_WORD *)&self->_btEndpointRegistering = 0;
      NSErrorWithOSStatusF((const char *)0xFFFFE59FLL);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUBluetoothScalablePipe _ensureStopped:](self, "_ensureStopped:", v13);

LABEL_11:
      uint64_t v5 = v15;
      goto LABEL_12;
    }

    uint64_t v5 = v15;
    if (var0 <= 30)
    {
      if (var0 == -1)
      {
        uint64_t v14 = _LogCategory_Initialize((uint64_t)ucat, 0x1Eu);
        uint64_t v5 = v15;
        if (!v14) {
          goto LABEL_12;
        }
        ucat = self->_ucat;
      }

      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothScalablePipe scalablePipeManager:didUnregisterEndpoint:]",  0x1Eu,  (uint64_t)"Ignoring didRegisterEndpoint for unknown identifier ('%@' not '%@')\n",  v6,  v7,  v8,  v9,  (char)v5);
      goto LABEL_11;
    }
  }

      int v19 = v7;
      if (!v19)
      {
        NSErrorWithOSStatusF((const char *)0xFFFFE59FLL);
        int v19 = (id)objc_claimAutoreleasedReturnValue();
      }

      -[CUBluetoothScalablePipe _abortReadsWithError:](self, "_abortReadsWithError:", v19);
      -[CUBluetoothScalablePipe _abortWritesWithError:](self, "_abortWritesWithError:", v19);
      -[CUBluetoothScalablePipe _tearDownPipe](self, "_tearDownPipe");
      btPipe = self->_btPipe;
      self->_btPipe = 0LL;

      peerIdentifier = self->_peerIdentifier;
      self->_peerIdentifier = 0LL;

LABEL_13:
      goto LABEL_14;
    }

    if (var0 <= 30)
    {
      if (var0 == -1)
      {
        ucat = self->_ucat;
      }

      [v27 name];
      int v19 = (id)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothScalablePipe scalablePipeManager:pipeDidDisconnect:error:]",  0x1Eu,  (uint64_t)"Ignoring pipeDidDisconnect for unknown identifier ('%@' not '%@'): %{error}\n",  v20,  v21,  v22,  v23,  (char)v19);
      goto LABEL_13;
    }
  }

    self->_domainChanged = 0;
    advertiseFlagsChanged = 1;
    goto LABEL_11;
  }

      [(id)v9 _reportError:v8 where:"CLink activate"];
LABEL_13:

      uint64_t v3 = v16;
      goto LABEL_14;
    }

    *(_BYTE *)(v9 + 24) = 1;
    uint32_t v11 = *(void **)(a1 + 40);
    DNSServiceErrorType v12 = (int *)v11[12];
    if (*v12 <= 30)
    {
      if (*v12 == -1)
      {
        uint64_t v14 = _LogCategory_Initialize((uint64_t)v12, 0x1Eu);
        uint32_t v11 = *(void **)(a1 + 40);
        if (!v14) {
          goto LABEL_12;
        }
        DNSServiceErrorType v12 = (int *)v11[12];
      }

      LogPrintF( (uint64_t)v12,  (uint64_t)"-[CUFileClient _runCLinkActivate]_block_invoke_2",  0x1Eu,  (uint64_t)"CLink activated",  v4,  v5,  v6,  v7,  v15);
      uint32_t v11 = *(void **)(a1 + 40);
    }
}

    int v8 = 0LL;
    goto LABEL_4;
  }

  if (MEMORY[0x186E43C98](v6) != MEMORY[0x1895F9250])
  {
    if (a4)
    {
      DNSServiceFlags v10 = (void *)*MEMORY[0x189607670];
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  int v8 = v7;
LABEL_4:

  return v8;
}

  v21[0] = v2;
  v21[1] = 3221225472LL;
  v21[2] = __61__CUNANPublisher_sendMessageData_endpoint_completionHandler___block_invoke_3;
  v21[3] = &unk_189F31550;
  v21[4] = v14;
  unsigned int v17 = *(void *)(a1 + 48);
  uint64_t v22 = *(id *)(a1 + 40);
  uint64_t v23 = *(id *)(a1 + 48);
  __int128 v24 = *(id *)(a1 + 56);
  [v5 sendMessage:v17 toPeerAddress:v13 withInstanceID:v8 completionHandler:v21];

LABEL_11:
LABEL_12:

  v4[2](v4);
  _Block_object_dispose(&v28, 8);
}

  v21[0] = v2;
  v21[1] = 3221225472LL;
  v21[2] = __62__CUNANSubscriber_sendMessageData_endpoint_completionHandler___block_invoke_3;
  v21[3] = &unk_189F31550;
  v21[4] = v14;
  unsigned int v17 = *(void *)(a1 + 48);
  uint64_t v22 = *(id *)(a1 + 40);
  uint64_t v23 = *(id *)(a1 + 48);
  __int128 v24 = *(id *)(a1 + 56);
  [v5 sendMessage:v17 toPeerAddress:v13 withInstanceID:v8 completionHandler:v21];

LABEL_11:
LABEL_12:

  v4[2](v4);
  _Block_object_dispose(&v28, 8);
}

  int v19 = !v17;

  return v19;
}

  int v19 = !v17;

  return v19;
}

  if (!self->_speechSynthesizer)
  {
    unsigned int v17 = (SiriTTSDaemonSession *)objc_alloc_init((Class)getSiriTTSDaemonSessionClass[0]());
    speechSynthesizer = self->_speechSynthesizer;
    self->_speechSynthesizer = v17;
  }

  int v19 = -[CUVoiceRequest speechRequest](self->_currentRequest, "speechRequest");
  __int128 v24 = (void *)v19;
  if ((v8 & 1) == 0 && v19)
  {
    uint64_t v25 = self->_ucat;
    if (v25->var0 <= 30)
    {
      if (v25->var0 == -1)
      {
        uint64_t v25 = self->_ucat;
      }

      LogPrintF( (uint64_t)v25,  (uint64_t)"-[CUVoiceSession _speakText:flags:volume:completion:]",  0x1Eu,  (uint64_t)"Stop speaking for new request\n",  v20,  v21,  v22,  v23,  v38);
    }

  [*(id *)(v15 + 8) completion];
  uint64_t v18 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    [*(id *)(a1[4] + 8) setCompletion:0];
    ((void (**)(void, id))v18)[2](v18, v24);
  }

  int v19 = a1[4];
  unint64_t v20 = *(void **)(v19 + 8);
  *(void *)(v19 + 8) = 0LL;

  uint64_t v21 = (_BYTE *)a1[4];
  if (v21[16])
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    [v21 _completeAllRequestsWithError:v22];
  }

  else
  {
    [v21 _processQueuedRequests];
  }
}

  if (infraDisabled)
  {
    WiFiManagerClientDisable();
    self->_wifiAutoJoinDisabled = 1;
    if (self->_wifiDevice)
    {
      DNSServiceFlags v10 = WiFiDeviceClientCopyCurrentNetwork();
      if (v10)
      {
        uint32_t v11 = (__WiFiNetwork *)v10;
        WiFiManagerClientTemporarilyDisableNetwork();
        wifiNetworkDisabled = self->_wifiNetworkDisabled;
        if (wifiNetworkDisabled) {
          CFRelease(wifiNetworkDisabled);
        }
        self->_wifiNetworkDisabled = v11;
      }
    }
  }

  else
  {
    if (self->_wifiAutoJoinDisabled)
    {
      WiFiManagerClientEnable();
      self->_wifiAutoJoinDisabled = 0;
    }

    if (self->_wifiNetworkDisabled)
    {
      WiFiManagerClientEnableNetwork();
      uint64_t v13 = self->_wifiNetworkDisabled;
      if (v13)
      {
        CFRelease(v13);
        self->_wifiNetworkDisabled = 0LL;
      }
    }
  }

  self->_infraDisabledChanged = 0;
}

    WiFiManagerClientSetWoWState();
    self->_wakeOnWirelessEnabledChanged = 0;
  }

  appended = SimpleArrayAppendItem((void **)(a1 + 320), (uint64_t *)(a1 + 328), 4uLL, &bytes);
  if (!(_DWORD)appended)
  {
    if (gLogCategory_DACPServer <= 40
      && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
    {
      LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"OSStatus DACPServer_AddRemote(DACPServerRef, Boolean, uint32_t *)",  0x28u,  (uint64_t)"Added remote %u\n",  v11,  v12,  v13,  v14,  bytes);
    }

    appended = 0LL;
    *a3 = bytes;
  }

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  return appended;
}

  int v8 = malloc(0x5D0uLL);
  if (v8)
  {
    int v9 = (unsigned __int8 *)v8;
    DNSServiceFlags v10 = v8 + 2;
    v46[0] = v8 + 2;
    v46[1] = 1472LL;
    v45.msg_name = &v44;
    v45.msg_namelen = 28;
    v45.msg_iov = (iovec *)v46;
    v45.msg_iovlen = 1;
    v45.msg_control = &v49;
    *(void *)&v45.msg_controllen = 256LL;
    while (1)
    {
      uint32_t v11 = recvmsg(*(_DWORD *)(a1 + 32), &v45, 0);
      if ((v11 & 0x8000000000000000LL) == 0) {
        break;
      }
      if (!*__error()) {
        goto LABEL_16;
      }
      DNSServiceErrorType v12 = *__error();
      if (v12 != 4)
      {
        if (v12)
        {
LABEL_16:
          uint64_t v13 = *(_DWORD *)(a1 + 32);
          dispatch_queue_t v47 = 4;
          uint64_t v48 = 0;
          if (getsockopt(v13, 0xFFFF, 4353, &v48, &v47) && *__error()) {
            __error();
          }
          if (v48)
          {
            uint64_t v14 = *(dispatch_source_s **)(a1 + 40);
            if (v14)
            {
              dispatch_source_cancel(v14);
              dispatch_release(*(dispatch_object_t *)(a1 + 40));
            }

            else
            {
              uint64_t v18 = *(_DWORD *)(a1 + 32);
              if ((v18 & 0x80000000) == 0)
              {
                if (close(v18))
                {
                  if (*__error()) {
                    __error();
                  }
                }

                *(_DWORD *)(a1 + 32) = -1;
              }
            }
          }
        }

        goto LABEL_53;
      }
    }

    uint64_t v15 = v11 - 38;
    if (v11 >= 0x26 && v45.msg_controllen >= 0xC)
    {
      msg_control = (unsigned int *)v45.msg_control;
      if (v45.msg_control)
      {
        while (msg_control[1] || msg_control[2] != 20)
        {
          msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3LL) & 0x1FFFFFFFCLL));
          if ((char *)(msg_control + 3) > (char *)v45.msg_control + v45.msg_controllen)
          {
            LODWORD(msg_control) = 0;
            goto LABEL_38;
          }
        }

        LODWORD(msg_control) = *((unsigned __int16 *)msg_control + 7);
      }

    *(void *)(a1 + 48) = v7;
    *uint64_t v5 = a1;
    if ((*(_BYTE *)(a1 + 18) & 2) != 0) {
      *(void *)(a1 + 104) = calloc(1uLL, 0x10uLL);
    }
    int v8 = *(void *)(a1 + 8);
    if (v8) {
      _LogControlLocked(v8, 0LL);
    }
    _LogCategory_ApplyActions(a1);
    int v9 = a1 + 56;
    if (!*(void *)(a1 + 56))
    {
      _LogOutputCreate("console", a1 + 56);
      if (*(void *)v9) {
        ++*(_DWORD *)(*(void *)v9 + 8LL);
      }
      _LogCategory_ApplyActions(a1);
    }
  }

  DNSServiceFlags v10 = *(_DWORD *)a1;
  pthread_mutex_unlock(&gLogUtilsLock);
  return v10 <= a2;
}

  if (v10 - v12 >= 1)
  {
    unint64_t v20 = *v12++;
    int v19 = v20;
    if (v20)
    {
      while (v10 - v12 >= 2)
      {
        uint64_t v22 = *(unsigned __int16 *)v12;
        uint64_t v21 = v12 + 2;
        uint64_t v23 = __rev16(v22);
        if (v10 - v21 < v23) {
          break;
        }
        if (a3)
        {
          __int128 v24 = v23 + 4;
          if (v11 - v13 < v23 + 4) {
            return 4294960545LL;
          }
          *(_DWORD *)uint64_t v13 = 0x1000000;
          memcpy(v13 + 4, v21, v23);
        }

        else
        {
          __int128 v24 = v23 + 4;
        }

        DNSServiceErrorType v12 = &v21[v23];
        v13 += v24;
        if (!--v19) {
          goto LABEL_19;
        }
      }

      return 4294960546LL;
    }
  }

  unsigned int v17 = *(int **)(a1 + 16);
  if (*v17 <= 90)
  {
    if (*v17 != -1)
    {
LABEL_12:
      LogPrintF( (uint64_t)v17,  (uint64_t)"OSStatus _ServerEncryptExtra(PairingSessionRef, const uint8_t *, TLV8Buffer *)",  0x5Au,  (uint64_t)"### ServerEncryptExtra failed: %#m\n",  v10,  v11,  v12,  v13,  (char)v14);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v17, 0x5Au))
    {
      unsigned int v17 = *(int **)(a1 + 16);
      goto LABEL_12;
    }
  }

  if (v22) {
    CFRelease(v22);
  }
  pthread_mutex_unlock(&gPairingGlobalLock);
  return Formatted;
}

    if (v14 == a2)
    {
      uint64_t v29 = 4294960569LL;
      uint64_t result = 4294960569LL;
      if (!a6) {
        return result;
      }
      goto LABEL_45;
    }

    if (v14 >= a2)
    {
      unsigned int v17 = 0;
      goto LABEL_15;
    }

    if (*v14 == 61)
    {
      unsigned int v17 = 1;
LABEL_15:
      uint64_t v18 = v14;
      goto LABEL_22;
    }

    int v19 = v12 - v14;
    uint64_t v18 = v14;
    while (v19)
    {
      unint64_t v20 = *++v18;
      --v19;
      if (v20 == 61) {
        goto LABEL_21;
      }
    }

    uint64_t v18 = a2;
LABEL_21:
    unsigned int v17 = v18 < a2;
LABEL_22:
    uint64_t v21 = &v18[v17];
    if (v21 >= a2)
    {
      uint64_t v23 = 0LL;
      uint64_t v22 = v21;
    }

    else
    {
      uint64_t v22 = v21;
      while (*v22 != 59)
      {
        if (++v22 >= a2)
        {
          uint64_t v23 = 0LL;
          uint64_t v22 = a2;
          goto LABEL_29;
        }
      }

      uint64_t v23 = 1LL;
    }

  while (1)
  {
    uint64_t v6 = fread(__ptr, 1uLL, 0x80uLL, v2);
    if (!v6) {
      break;
    }
    if (fwrite(__ptr, 1uLL, v6, v5) != v6)
    {
      uint64_t v7 = 0;
      uint64_t v3 = -6747;
      goto LABEL_28;
    }
  }

  fclose(v5);
  int v8 = pclose(v2);
  uint64_t v3 = v8;
  if (!v8) {
    goto LABEL_34;
  }
  if (v8 == -1)
  {
    __error();
    goto LABEL_17;
  }

  if ((v8 & 0xFF00) == 0)
  {
    uint64_t v3 = 0;
LABEL_34:
    uint32_t v11 = 1;
    goto LABEL_35;
  }

uint64_t BonjourAdvertiserUpdate(dispatch_queue_t *a1)
{
  return 0LL;
}

uint64_t _BonjourBrowserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gBonjourBrowserCFTypeID TypeID = result;
  return result;
}

void _BonjourBrowser_Finalize( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  DNSServiceFlags v10 = (dispatch_object_s *)a1[2];
  if (v10)
  {
    dispatch_release(v10);
    a1[2] = 0LL;
  }

  uint32_t v11 = (dispatch_object_s *)a1[20];
  if (v11)
  {
    dispatch_release(v11);
    a1[20] = 0LL;
  }

  DNSServiceErrorType v12 = (const void *)a1[23];
  if (v12)
  {
    _Block_release(v12);
    a1[23] = 0LL;
  }

  if (gLogCategory_BonjourBrowser <= 20
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_Finalize(CFTypeRef)",  0x14u,  (uint64_t)"Finalized browser\n",  a5,  a6,  a7,  a8,  a9);
  }

uint64_t BonjourBrowser_Create( void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return BonjourBrowser_CreateEx(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t BonjourBrowser_CreateEx( void *a1, const char *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gLogCategory_BonjourBrowser <= 30
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"OSStatus BonjourBrowser_CreateEx(BonjourBrowserRef *, const char *, CUBonjourBrowserFlags)",  0x1Eu,  (uint64_t)"Create '%s', %#{flags}\n",  a5,  a6,  a7,  a8,  (char)a2);
  }

  if (gBonjourBrowserInitOnce != -1) {
    dispatch_once_f(&gBonjourBrowserInitOnce, 0LL, (dispatch_function_t)_BonjourBrowserGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  DNSServiceErrorType v12 = Instance;
  Instance[1] = 0u;
  uint64_t v13 = (dispatch_queue_t *)(Instance + 1);
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  if ((a3 & 2) != 0)
  {
    dispatch_qos_class_t v16 = QOS_CLASS_USER_INITIATED;
  }

  else
  {
    if ((a3 & 1) == 0)
    {
      if (a2) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = "BonjourBrowser";
      }
      uint64_t v15 = 0LL;
      goto LABEL_19;
    }

    dispatch_qos_class_t v16 = QOS_CLASS_UTILITY;
  }

  uint64_t v15 = dispatch_queue_attr_make_with_qos_class(0LL, v16, 0);
  if (a2) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = "BonjourBrowser";
  }
LABEL_19:
  dispatch_queue_t v17 = dispatch_queue_create(v14, v15);
  *uint64_t v13 = v17;
  if (v17)
  {
    uint64_t v18 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
    v12[20] = MEMORY[0x1895F8AE0];
    dispatch_retain(v18);
    uint64_t result = 0LL;
    *a1 = v12;
  }

  else
  {
    CFRelease(v12);
    return 4294960596LL;
  }

  return result;
}

void BonjourBrowser_SetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(dispatch_object_s **)(a1 + 160);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 160) = v3;
}

uint64_t BonjourBrowser_SetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 168) = a2;
  *(void *)(result + 176) = a3;
  return result;
}

void BonjourBrowser_SetEventHandlerBlock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    uint64_t v3 = _Block_copy(aBlock);
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  if (v4) {
    _Block_release(v4);
  }
  *(void *)(a1 + 184) = v3;
}

uint64_t BonjourBrowser_SetNANControlFlags(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return [*(id *)(a1 + 64) setControlFlags:a2];
}

uint64_t BonjourBrowser_Start( dispatch_queue_t *a1, const char *a2, const char *a3, const char *a4, uint64_t a5)
{
  DNSServiceFlags v10 = calloc(1uLL, 0x28uLL);
  if (v10)
  {
    uint32_t v11 = v10;
    *DNSServiceFlags v10 = a1;
    v10[4] = a5;
    DNSServiceErrorType v12 = strdup(a2);
    v11[1] = v12;
    if (v12)
    {
      uint64_t v13 = v12;
      if (a3) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = "";
      }
      uint64_t v15 = strdup(v14);
      v11[2] = v15;
      if (v15)
      {
        if (!a4 || !*a4 || (dispatch_qos_class_t v16 = strdup(a4), (v11[3] = v16) != 0LL))
        {
          CFRetain(a1);
          dispatch_async_f(a1[2], v11, (dispatch_function_t)_BonjourBrowser_Start);
          return 0LL;
        }
      }

      free(v13);
    }

    else
    {
      uint64_t v15 = (char *)v11[2];
    }

    if (v15) {
      free(v15);
    }
    uint64_t v18 = (void *)v11[3];
    if (v18) {
      free(v18);
    }
    free(v11);
  }

  return 4294960568LL;
}

void _BonjourBrowser_Start( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  DNSServiceFlags v10 = *(void **)(*a1 + 128LL);
  if (v10) {
    free(v10);
  }
  *(void *)(v9 + 128) = a1[1];
  uint32_t v11 = *(void **)(v9 + 136);
  if (v11) {
    free(v11);
  }
  *(void *)(v9 + 136) = a1[2];
  DNSServiceErrorType v12 = *(void **)(v9 + 144);
  if (v12) {
    free(v12);
  }
  uint64_t v13 = a1[4];
  *(void *)(v9 + 144) = a1[3];
  *(void *)(v9 + 152) = v13;
  if (!*(_BYTE *)(v9 + 96))
  {
    CFRetain((CFTypeRef)v9);
    *(_BYTE *)(v9 + 96) = 1;
    *(void *)(v9 + 104) = mach_absolute_time();
  }

  _BonjourBrowser_EnsureStarted((DNSServiceRef *)v9, a2, a3, a4, a5, a6, a7, a8);
  free(a1);
  CFRelease((CFTypeRef)v9);
}

void _BonjourBrowser_EnsureStarted( DNSServiceRef *sdRef, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = (unint64_t)sdRef[19];
  if ((v9 & 0x80000000000000LL) != 0)
  {
    _BonjourBrowser_EnsureStoppedDNSSD(sdRef);
    goto LABEL_66;
  }

  DNSServiceFlags v10 = sdRef + 3;
  if (!sdRef[3])
  {
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x1Eu,  (uint64_t)"Creating shared connection to browse for %s\n",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
    }

    DNSServiceErrorType Connection = DNSServiceCreateConnection(sdRef + 3);
    if (Connection)
    {
      DNSServiceErrorType v22 = Connection;
      goto LABEL_31;
    }

    DNSServiceSetDispatchQueue(sdRef[3], (dispatch_queue_t)sdRef[2]);
  }

  if (!sdRef[5])
  {
    unsigned int v19 = v9 | 0x2000000;
    if ((v9 & 0x1000000000000000LL) != 0) {
      unsigned int v19 = v9 & 0xFDEFFFFF | 0x2000000;
    }
    if ((v9 & 0x2000000000000000LL) != 0) {
      int v20 = v19;
    }
    else {
      int v20 = v9;
    }
    uint64_t v21 = (const char *)sdRef[18];
    if (v21)
    {
      else {
        LODWORD(v21) = if_nametoindex(v21);
      }
    }

    sdRefa[0] = *v10;
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x1Eu,  (uint64_t)"Starting browse for %s on if %s, flagsAlt 0x%X, flags %#ll{flags}",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
    }

    DNSServiceErrorType v22 = DNSServiceBrowse( sdRefa,  v20 | 0x4000,  (uint32_t)v21,  (const char *)sdRef[16],  (const char *)sdRef[17],  (DNSServiceBrowseReply)_BonjourBrowser_BrowseHandler,  sdRef);
    if (!v22)
    {
      sdRef[5] = sdRefa[0];
      if ((v9 & 0x4000000000000000LL) == 0) {
        goto LABEL_12;
      }
LABEL_35:
      uint64_t v23 = sdRef[6];
      if (v23)
      {
        if (gLogCategory_BonjourBrowser > 40) {
          goto LABEL_41;
        }
        if (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)) {
          LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x28u,  (uint64_t)"Stopping detail browse for %s, if %s, flags 0x%X\n",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
        }
        uint64_t v23 = sdRef[6];
        if (v23)
        {
LABEL_41:
          DNSServiceRefDeallocate(v23);
          sdRef[6] = 0LL;
        }

        if ((v9 & 0x1000000000000000LL) != 0 && (v9 & 0x2000000000000000LL) != 0) {
          _BonjourBrowser_RemoveAWDLServices((uint64_t)sdRef);
        }
      }

      goto LABEL_45;
    }

LABEL_31:
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x3Cu,  (uint64_t)"### Start browse for %s on if %s, flags 0x%llX failed: %#m\n",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
    }

    _BonjourBrowser_NANEnsureStopped((uint64_t)sdRef, 1, a3, a4, a5, a6, a7, a8);
    _BonjourBrowser_EnsureStoppedDNSSD(sdRef);
    goto LABEL_65;
  }

  if ((v9 & 0x4000000000000000LL) != 0) {
    goto LABEL_35;
  }
LABEL_12:
  if ((v9 & 0x2000000000000000LL) == 0 || sdRef[6])
  {
LABEL_45:
    unsigned int v24 = v9;
    goto LABEL_46;
  }

  uint64_t v18 = (const char *)sdRef[18];
  if (v18)
  {
    else {
      LODWORD(v18) = if_nametoindex(v18);
    }
  }

  unsigned int v24 = v9 & 0xFDFFFFFF;
  sdRefa[0] = *v10;
  if (gLogCategory_BonjourBrowser <= 40
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x28u,  (uint64_t)"Starting detail browse for %s, if %s, flags 0x%X\n",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
  }

  if (!DNSServiceBrowse( sdRefa,  v9 & 0xFDFFBFFF | 0x4000,  (uint32_t)v18,  (const char *)sdRef[16],  (const char *)sdRef[17],  (DNSServiceBrowseReply)_BonjourBrowser_IgnoredBrowseHandler,  sdRef)) {
    sdRef[6] = sdRefa[0];
  }
LABEL_46:
  DNSServiceRef v25 = sdRef[4];
  if ((v9 & 0x400000000000000LL) != 0)
  {
    if (!v25)
    {
      if (gLogCategory_BonjourBrowser <= 40
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
      {
        LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x28u,  (uint64_t)"Starting AWDL browse for %s, flags 0x%llX\n",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
      }

      LODWORD(a3) = *((_DWORD *)sdRef + 30);
      if ((_DWORD)a3 || (a3 = if_nametoindex("awdl0"), (*((_DWORD *)sdRef + 30) = a3) != 0))
      {
        sdRefa[0] = sdRef[3];
        if (!DNSServiceBrowse( sdRefa,  v24 | 0x4000,  a3,  (const char *)sdRef[16],  (const char *)sdRef[17],  (DNSServiceBrowseReply)_BonjourBrowser_BrowseHandler,  sdRef))
        {
          DNSServiceErrorType v22 = 0;
          sdRef[4] = sdRefa[0];
          goto LABEL_65;
        }
      }
    }

    goto LABEL_64;
  }

  if (!v25) {
    goto LABEL_64;
  }
  if (gLogCategory_BonjourBrowser <= 40
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_EnsureStartedDNSSD(BonjourBrowserRef)",  0x28u,  (uint64_t)"Stopping AWDL browse for %s, flags 0x%llX\n",  a5,  a6,  a7,  a8,  (char)sdRef[16]);
  }

  _BonjourBrowser_RemoveAWDLServices((uint64_t)sdRef);
  unint64_t v26 = sdRef[4];
  if (!v26)
  {
LABEL_64:
    DNSServiceErrorType v22 = 0;
    goto LABEL_65;
  }

  DNSServiceRefDeallocate(v26);
  DNSServiceErrorType v22 = 0;
  sdRef[4] = 0LL;
LABEL_65:
  _BonjourBrowser_HandleError((uint64_t)sdRef, v22, a3, a4, a5, a6, a7, a8, v29);
LABEL_66:
  if ((*((_BYTE *)sdRef + 159) & 2) != 0)
  {
    if (!sdRef[8])
    {
      if (gLogCategory_BonjourBrowser <= 30
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEnsureStarted(BonjourBrowserRef)",  0x1Eu,  (uint64_t)"NAN subscriber start: %s\n",  v13,  v14,  v15,  v16,  (char)sdRef[16]);
      }

      uint64_t v27 = objc_alloc_init(&OBJC_CLASS___CUNANSubscriber);
      sdRef[8] = (DNSServiceRef)v27;
      -[CUNANSubscriber setChangeFlags:](v27, "setChangeFlags:", 4294967291LL);
      -[CUNANSubscriber setControlFlags:](v27, "setControlFlags:", *((unsigned int *)sdRef + 14));
      -[CUNANSubscriber setDispatchQueue:](v27, "setDispatchQueue:", sdRef[2]);
      -[CUNANSubscriber setServiceType:]( v27,  "setServiceType:",  [NSString stringWithUTF8String:sdRef[16]]);
      uint64_t v28 = MEMORY[0x1895F87A8];
      sdRefa[0] = (DNSServiceRef)MEMORY[0x1895F87A8];
      sdRefa[1] = (DNSServiceRef)3221225472LL;
      sdRefa[2] = (DNSServiceRef)___BonjourBrowser_NANEnsureStarted_block_invoke;
      sdRefa[3] = (DNSServiceRef)&unk_189F2FF00;
      sdRefa[4] = (DNSServiceRef)v27;
      sdRefa[5] = (DNSServiceRef)sdRef;
      -[CUNANSubscriber setEndpointFoundHandler:](v27, "setEndpointFoundHandler:", sdRefa);
      v32[0] = v28;
      v32[1] = 3221225472LL;
      v32[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_2;
      v32[3] = &unk_189F2FF00;
      v32[4] = v27;
      v32[5] = sdRef;
      -[CUNANSubscriber setEndpointLostHandler:](v27, "setEndpointLostHandler:", v32);
      v31[0] = v28;
      v31[1] = 3221225472LL;
      v31[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_3;
      v31[3] = &unk_189F2FF28;
      v31[4] = v27;
      v31[5] = sdRef;
      -[CUNANSubscriber setEndpointChangedHandler:](v27, "setEndpointChangedHandler:", v31);
      v30[0] = v28;
      v30[1] = 3221225472LL;
      v30[2] = ___BonjourBrowser_NANEnsureStarted_block_invoke_4;
      v30[3] = &unk_189F2FF50;
      v30[4] = v27;
      v30[5] = sdRef;
      -[CUNANSubscriber activateWithCompletion:](v27, "activateWithCompletion:", v30);
    }
  }

  else
  {
    _BonjourBrowser_NANEnsureStopped((uint64_t)sdRef, 0, v11, v12, v13, v14, v15, v16);
  }
}

  LOBYTE(v41) = v55;
  if (!v55) {
    goto LABEL_36;
  }
LABEL_32:
  if (gLogCategory_CUPairingDaemon > 90) {
    goto LABEL_36;
  }
  if (gLogCategory_CUPairingDaemon != -1) {
    goto LABEL_34;
  }
  if (_LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingDaemon, 0x5Au))
  {
    LOBYTE(v41) = v55;
LABEL_34:
    LogPrintF( (uint64_t)&gLogCategory_CUPairingDaemon,  (uint64_t)"-[CUPairingDaemon _copyHomeKitWithOptionsKeychain:error:]",  0x5Au,  (uint64_t)"### Get HomeKit key failed: %#m",  v22,  v23,  v24,  v25,  v41);
  }

  v3[2](v3);
}

    uint64_t v13 = 0LL;
    int v20 = 0LL;
    goto LABEL_32;
  }

  self->_easyConfigPreConfigState = 3;
  dispatch_source_t v45 = @"eo";
  unint64_t v34 = (void *)MEMORY[0x189607870];
  dispatch_time_t v35 = *MEMORY[0x189607670];
  uint64_t v43 = *MEMORY[0x1896075E0];
  int v36 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, -6705, 0, 0));
  uint64_t v14 = (void *)v36;
  int v37 = @"?";
  if (v36) {
    int v37 = (const __CFString *)v36;
  }
  uint64_t v44 = v37;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v44 forKeys:&v43 count:1];
  uint64_t v15 = (id)objc_claimAutoreleasedReturnValue();
  [v34 errorWithDomain:v35 code:-6705 userInfo:v15];
  unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue();
  v46[0] = v38;
  [MEMORY[0x189603F68] dictionaryWithObjects:v46 forKeys:&v45 count:1];
  int v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v39);

LABEL_20:
}

    if (self->_easyConfigPreConfigState == 1)
    {
      if (v19)
      {
        self->_easyConfigPreConfigState = 3;
        uint64_t v28 = @"eo";
        v29[0] = v19;
        DNSServiceErrorType v22 = (void *)MEMORY[0x189603F68];
        uint64_t v23 = (void **)v29;
        unsigned int v24 = &v28;
LABEL_37:
        [v22 dictionaryWithObjects:v23 forKeys:v24 count:1];
        DNSServiceRef v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v25);
      }
    }

    else if (self->_easyConfigPostConfigState == 1)
    {
      if (!v19)
      {
        self->_easyConfigPostConfigState = 4;
        -[CUWACSession _run](self, "_run");
        goto LABEL_38;
      }

      self->_easyConfigPostConfigState = 3;
      unint64_t v26 = @"eo";
      uint64_t v27 = v19;
      DNSServiceErrorType v22 = (void *)MEMORY[0x189603F68];
      uint64_t v23 = &v27;
      unsigned int v24 = &v26;
      goto LABEL_37;
    }

          -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x10000LL);
          goto LABEL_32;
        }

  self->_wifiFlags = v7;
  self->_wifiState = v14;
  wifiStateChangedHandler = (void (**)(void))self->_wifiStateChangedHandler;
  if (wifiStateChangedHandler) {
    wifiStateChangedHandler[2]();
  }

LABEL_34:
}

void _BonjourBrowser_BrowseHandler( int a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, uint64_t a8, char a9)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if ((_DWORD)a4)
  {
    if ((_DWORD)a4 == -65563)
    {
      if (gLogCategory_BonjourBrowser <= 60
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, con st char *, const char *, const char *, void *)",  0x3Cu,  (uint64_t)"### Browser for %s server crashed\n",  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  *(void *)(a8 + 128));
      }

      _BonjourBrowser_HandleError(a8, -65563, a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a9);
    }

    else if (gLogCategory_BonjourBrowser <= 60 {
           && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize( (uint64_t)&gLogCategory_BonjourBrowser,  0x3Cu)))
    }
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)",  0x3Cu,  (uint64_t)"### Browser for %s browse error: %#m\n",  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  *(void *)(a8 + 128));
    }

    return;
  }

  if (*(_BYTE *)(a8 + 96))
  {
    unsigned int v13 = a3;
    unsigned int v14 = a2;
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      uint64_t v15 = "Add";
      if (((v14 >> 1) & 1) == 0) {
        uint64_t v15 = "Rmv";
      }
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, const char *, const char *, void *)",  0x14u,  (uint64_t)"Bonjour PTR %s %s.%s%s on %u\n",  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  (char)v15);
    }

    cStr[0] = 0;
    int v31 = 0;
    if ((v14 & 2) != 0 && (*(_BYTE *)(a8 + 158) & 0x7B) != 0)
    {
      if_indextoname(v13, cStr);
      SocketGetInterfaceInfo(-1, cStr, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, (uint64_t)&v31);
      uint64_t v20 = *(void *)(a8 + 152);
      if ((v20 & 0x8000000000000LL) != 0 && (v31 & 3) != 0
        || (v20 & 0x20000000000000LL) != 0 && v31 == 2
        || (v20 & 0x10000000000000LL) != 0 && v31 == 4
        || (v20 & 0x40000000000000LL) != 0 && v31 == 8
        || (v20 & 0x1000000000000LL) != 0 && v31 == 16)
      {
LABEL_32:
        if (gLogCategory_BonjourBrowser <= 20
          && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
        {
          LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, c onst char *, const char *, const char *, void *)",  0x14u,  (uint64_t)"Ignoring interface: Nm '%s', ST '%s', IFI %u (%s), %#ll{flags}\n",  v16,  v17,  v18,  v19,  (char)a5);
        }

        return;
      }

      if ((v20 & 0x2000000000000LL) != 0)
      {
        CFStringRef v21 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
        if (v21)
        {
          CFStringRef v22 = v21;
          uint64_t v23 = _SCNetworkInterfaceCreateWithBSDName();
          if (v23)
          {
            unsigned int v24 = (const void *)v23;
            int IsThunderbolt = _SCNetworkInterfaceIsThunderbolt();
            CFRelease(v24);
            CFRelease(v22);
            if (IsThunderbolt) {
              goto LABEL_32;
            }
          }

          else
          {
            CFRelease(v22);
          }
        }
      }
    }

    uint64_t v27 = a8 + 80;
    uint64_t v26 = *(void *)(a8 + 80);
    if (!v26)
    {
LABEL_49:
      uint64_t v32 = 0LL;
      uint64_t v29 = v32;
      if (!_BonjourService_StartTXTQuery(v32))
      {
        *(void *)uint64_t v27 = v29;
        return;
      }

      uint64_t v30 = v29;
LABEL_53:
      _BonjourService_Free(v30);
      return;
    }

    while (1)
    {
      uint64_t v28 = (void *)v27;
      uint64_t v27 = v26;
      if (*(_DWORD *)(v26 + 48) == v13
        && !strcasecmp(*(const char **)(v26 + 24), a5)
        && !strcasecmp(*(const char **)(v27 + 32), a6)
        && !strcasecmp(*(const char **)(v27 + 40), a7))
      {
        break;
      }

      uint64_t v26 = *(void *)v27;
      if (!*(void *)v27) {
        goto LABEL_49;
      }
    }

    if ((v14 & 2) == 0)
    {
      *uint64_t v28 = *(void *)v27;
      _BonjourBrowser_RemoveService(a8, v27, 1);
      uint64_t v30 = v27;
      goto LABEL_53;
    }
  }

  else if (gLogCategory_BonjourBrowser <= 60 {
         && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
  }
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_BrowseHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const c har *, const char *, const char *, void *)",  0x3Cu,  (uint64_t)"### Browse response after stop\n",  (uint64_t)a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  a9);
  }

void _BonjourBrowser_RemoveAWDLServices(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 120))
  {
    uint64_t v3 = a1 + 80;
    uint64_t v2 = *(void *)(a1 + 80);
    while (v2)
    {
      uint64_t v4 = (uint64_t *)v3;
      uint64_t v3 = v2;
      while (1)
      {
        uint64_t v2 = *(void *)v3;
        if (*(_DWORD *)(v3 + 48) != *(_DWORD *)(a1 + 120)) {
          break;
        }
        *uint64_t v4 = v2;
        _BonjourBrowser_RemoveService(a1, v3, 1);
        _BonjourService_Free(v3);
        uint64_t v3 = *v4;
        if (!*v4) {
          return;
        }
      }
    }
  }

void _BonjourBrowser_IgnoredBrowseHandler( int a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char *a5, const char *a6, const char *a7, uint64_t a8, char a9)
{
  if ((~*(void *)(a8 + 152) & 0x3000000000000000LL) == 0)
  {
    unsigned int v16 = *(_DWORD *)(a8 + 120);
    if (!v16)
    {
      unsigned int v16 = if_nametoindex("awdl0");
      *(_DWORD *)(a8 + 120) = v16;
    }

    if ((_DWORD)a3)
    {
      if (v16 == (_DWORD)a3) {
        _BonjourBrowser_BrowseHandler(v16, a2, a3, a4, a5, a6, a7, a8, a9);
      }
    }
  }

void _BonjourBrowser_NANEnsureStopped( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*(void *)(a1 + 64))
  {
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEnsureStopped(BonjourBrowserRef, Boolean)",  0x1Eu,  (uint64_t)"NAN subscriber stop: %s\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 128));
    }

    if (!a2)
    {
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      DNSServiceFlags v10 = (void *)[*(id *)(a1 + 64) discoveredEndpoints];
      uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v16;
        do
        {
          for (uint64_t i = 0LL; i != v12; ++i)
          {
            if (*(void *)v16 != v13) {
              objc_enumerationMutation(v10);
            }
            _BonjourBrowser_NANEndpointLost(a1, *(void **)(*((void *)&v15 + 1) + 8 * i));
          }

          uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v12);
      }
    }

    [*(id *)(a1 + 64) invalidate];

    *(void *)(a1 + 64) = 0LL;
  }

void *_BonjourBrowser_EnsureStoppedDNSSD(void *a1)
{
  uint64_t v2 = (_DNSServiceRef_t *)a1[3];
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    a1[3] = 0LL;
  }

  a1[4] = 0LL;
  a1[5] = 0LL;
  a1[6] = 0LL;
  while (1)
  {
    uint64_t v3 = (void *)a1[11];
    if (!v3) {
      break;
    }
    a1[11] = *v3;
    _BonjourDevice_Free(v3);
  }

  while (1)
  {
    uint64_t result = (void *)a1[10];
    if (!result) {
      break;
    }
    a1[10] = *result;
    result[11] = 0LL;
    _BonjourService_Free((uint64_t)result);
  }

  return result;
}

void _BonjourBrowser_HandleError( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  DNSServiceFlags v10 = *(dispatch_object_s **)(a1 + 112);
  if (a2)
  {
    if (!v10) {
      _BonjourBrowser_PostEvent(a1, 4, 0LL, 0LL);
    }
    while (1)
    {
      uint64_t v11 = *(void **)(a1 + 80);
      if (!v11) {
        break;
      }
      *(void *)(a1 + 80) = *v11;
      _BonjourBrowser_RemoveService(a1, (uint64_t)v11, 0);
      _BonjourService_Free((uint64_t)v11);
    }

    _BonjourBrowser_NANEnsureStopped(a1, 1, a3, a4, a5, a6, a7, a8);
    _BonjourBrowser_EnsureStoppedDNSSD((void *)a1);
    if (!*(void *)(a1 + 112))
    {
      uint64_t v12 = mach_absolute_time();
      unint64_t v13 = UpTicksToMilliseconds(v12 - *(void *)(a1 + 104));
      if (v13 >= 0x2911) {
        uint64_t v18 = 100LL;
      }
      else {
        uint64_t v18 = 10513 - v13;
      }
      if (gLogCategory_BonjourBrowser <= 50
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
      {
        LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_HandleError(BonjourBrowserRef, OSStatus)",  0x32u,  (uint64_t)"### Browse for %s failed, retrying in %llu ms: %#m\n",  v14,  v15,  v16,  v17,  *(void *)(a1 + 128));
      }

      dispatch_source_t v19 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *(dispatch_queue_t *)(a1 + 16));
      *(void *)(a1 + 112) = v19;
      if (v19)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 112), (void *)a1);
        dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 112),  (dispatch_function_t)_BonjourBrowser_RetryTimerFired);
        dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a1 + 112),  (dispatch_function_t)_BonjourBrowser_RetryTimerCanceled);
        unsigned int v24 = *(dispatch_source_s **)(a1 + 112);
        dispatch_time_t v25 = dispatch_time(0LL, 1000000 * v18);
        dispatch_source_set_timer(v24, v25, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 112));
      }

      else if (gLogCategory_BonjourBrowser <= 60 {
             && (gLogCategory_BonjourBrowser != -1
      }
              || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_HandleError(BonjourBrowserRef, OSStatus)",  0x3Cu,  (uint64_t)"### Bonjour retry timer failed\n",  v20,  v21,  v22,  v23,  a9);
      }
    }
  }

  else if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v10);
    *(void *)(a1 + 112) = 0LL;
  }

void _BonjourBrowser_NANEndpointFound(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "serviceType"), "UTF8String");
  if (v4)
  {
    unint64_t v9 = (const char *)v4;
    uint64_t v10 = objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String");
    if (v10) {
      uint64_t v15 = (const char *)v10;
    }
    else {
      uint64_t v15 = "";
    }
    unsigned int v16 = *(_DWORD *)(a1 + 72);
    if (!v16)
    {
      unsigned int v16 = if_nametoindex("nan0");
      *(_DWORD *)(a1 + 72) = v16;
    }

    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)",  0x14u,  (uint64_t)"Bonjour NAN found: %s.%s%s on %u\n",  v11,  v12,  v13,  v14,  (char)v15);
    }

    uint64_t v18 = a1 + 80;
    uint64_t v17 = *(void *)(a1 + 80);
    if (v17)
    {
      while (1)
      {
        uint64_t v18 = v17;
        if (*(_DWORD *)(v17 + 48) == v16
          && !strcasecmp(*(const char **)(v17 + 24), v15)
          && !strcasecmp(*(const char **)(v18 + 32), v9)
          && !strcasecmp(*(const char **)(v18 + 40), "local."))
        {
          break;
        }

        uint64_t v17 = *(void *)v18;
        if (!*(void *)v18) {
          goto LABEL_17;
        }
      }

      uint64_t v46 = v18;
    }

    else
    {
LABEL_17:
      uint64_t v46 = 0LL;
      int v19 = _BonjourService_Create(a1, v15, v9, "local.", v16, 0LL, 0, &v46);
      int v47 = v19;
      if (v19)
      {
        if (gLogCategory_BonjourBrowser > 90) {
          return;
        }
        char v43 = v19;
        char v44 = v43;
        int v42 = "### BonjourService_Create failed: %#m";
        goto LABEL_63;
      }

      uint64_t v20 = v46;
      *(_BYTE *)(v46 + 80) = 1;
      *(_DWORD *)(v20 + 84) = 128;
      *(void *)uint64_t v18 = v20;
      uint64_t v18 = v46;
    }

    uint64_t v21 = *(void **)(v18 + 72);
    id v22 = a2;
    *(void *)(v18 + 72) = a2;

    uint64_t v23 = (const __CFDictionary *)[a2 textInfo];
    if (!v23) {
      uint64_t v23 = (const __CFDictionary *)MEMORY[0x189604A60];
    }
    size_t __n = 0LL;
    unsigned int v24 = TXTRecordCreateWithDictionary(v23, &__n, &v47);
    if (v24)
    {
      dispatch_time_t v25 = v24;
      uint64_t v26 = calloc(1uLL, __n + 16);
      if (!v26)
      {
LABEL_50:
        int v47 = -6728;
        goto LABEL_41;
      }

      uint64_t v27 = v26;
      size_t v28 = __n;
      v26[1] = __n;
      memcpy(v26 + 2, v25, v28);
      uint64_t v29 = *(void **)(v18 + 96);
      if (v29) {
        free(v29);
      }
      *(void *)(v18 + 96) = v27;
      int DeviceID = _BonjourService_GetDeviceID(v18, v48);
      int v47 = DeviceID;
      if (DeviceID)
      {
        if (gLogCategory_BonjourBrowser <= 90)
        {
          if (gLogCategory_BonjourBrowser == -1)
          {
            LOBYTE(DeviceID) = v47;
          }

          LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)",  0x5Au,  (uint64_t)"### GetDeviceID failed: %#m",  v31,  v32,  v33,  v34,  DeviceID);
        }

LABEL_41:
        free(v25);
LABEL_42:
        if (!v47) {
          return;
        }
        int v41 = gLogCategory_BonjourBrowser;
        goto LABEL_44;
      }

      uint64_t v35 = *(void *)(v18 + 104);
      if (v35)
      {
        if (!strcasecmp((const char *)(v35 + 16), v48))
        {
LABEL_40:
          _BonjourDevice_UpdateTXTQueries(v35);
          _BonjourBrowser_PostEvent(a1, 1, v35, 0LL);
          goto LABEL_41;
        }

        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF( (uint64_t)&gLogCategory_BonjourIssues,  (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)",  0x28u,  (uint64_t)"Removing and re-adding %s.%s%s for NAN device ID update (%s -> %s)\n",  v36,  v37,  v38,  v39,  *(_OWORD *)(v18 + 24));
        }

        _BonjourBrowser_RemoveService(a1, v18, 1);
        *(void *)(v18 + 104) = 0LL;
      }

      uint64_t v35 = a1 + 88;
      while (1)
      {
        uint64_t v35 = *(void *)v35;
        if (!v35) {
          break;
        }
      }

      char v40 = calloc(1uLL, 0x68uLL);
      if (!v40) {
        goto LABEL_50;
      }
      uint64_t v35 = (uint64_t)v40;
      v40[1] = a1;
      __strlcpy_chk();
      *(void *)uint64_t v35 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = v35;
LABEL_39:
      *(void *)(v18 + 104) = v35;
      *(void *)(v18 + 8) = *(void *)(v35 + 88);
      *(void *)(v35 + 88) = v18;
      goto LABEL_40;
    }

    if (gLogCategory_BonjourBrowser > 90
      || gLogCategory_BonjourBrowser == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x5Au))
    {
      goto LABEL_42;
    }

    char v44 = v47;
    int v42 = "### TXTRecordCreate failed: %#m";
LABEL_63:
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)",  0x5Au,  (uint64_t)v42,  v5,  v6,  v7,  v8,  v44);
    goto LABEL_42;
  }

  int v47 = -6700;
  int v41 = gLogCategory_BonjourBrowser;
  if (gLogCategory_BonjourBrowser <= 60)
  {
    if (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)) {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointFound(BonjourBrowserRef, CUNANEndpoint *)",  0x3Cu,  (uint64_t)"### Bonjour NAN found without service type: %@\n",  v5,  v6,  v7,  v8,  (char)a2);
    }
    goto LABEL_42;
  }

    a3 = 0LL;
LABEL_43:
    uint64_t v13 = -6700;
    goto LABEL_46;
  }

  id v22 = CFStringGetOrCopyCStringUTF8(cf, (const char **)&__ptr, (UInt8 **)&v20, &__nitems);
  if (v22)
  {
    a3 = 0LL;
    Data = 0LL;
    goto LABEL_47;
  }

  if (!a3)
  {
LABEL_54:
    Data = 0LL;
    goto LABEL_55;
  }

  a3 = fopen((const char *)a3, "wb");
  if (a3) {
    goto LABEL_27;
  }
  if (!*__error()) {
    goto LABEL_42;
  }
  a3 = 0LL;
  Data = 0LL;
  id v22 = *__error();
  if (v22) {
    goto LABEL_47;
  }
LABEL_27:
  uint64_t v17 = fwrite(__ptr, 1uLL, __nitems, a3);
  if (v17 != __nitems)
  {
LABEL_28:
    if (*__error()) {
      uint64_t v13 = *__error();
    }
    else {
      uint64_t v13 = -6700;
    }
    goto LABEL_45;
  }

    uint64_t v10 = -6743;
LABEL_30:
    if (!a2) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }

  if (v8 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &valuePtr);
    if (a2)
    {
      if (a3 == 8)
      {
        uint64_t v10 = 0;
        *(void *)a2 = bswap64(valuePtr);
        if (!a4) {
          return valuePtr;
        }
        goto LABEL_38;
      }

      if (a3 == 6)
      {
        uint64_t v10 = 0;
        uint64_t v13 = valuePtr;
        *a2 = BYTE5(valuePtr);
        a2[1] = BYTE4(v13);
        a2[2] = BYTE3(v13);
        a2[3] = BYTE2(v13);
        a2[4] = BYTE1(v13);
        a2[5] = v13;
        if (!a4) {
          return valuePtr;
        }
        goto LABEL_38;
      }
    }

      return;
    }

    [v32 setPrimaryPlacement:v34];
    [v32 setSecondaryPlacement:v40];
    -[CUBluetoothClient updateStatusFlags](self, "updateStatusFlags");
    uint64_t v46 = self->_ucat;
    if (v46->var0 <= 30)
    {
      if (v46->var0 != -1) {
        goto LABEL_37;
      }
      if (_LogCategory_Initialize((uint64_t)v46, 0x1Eu))
      {
        uint64_t v46 = self->_ucat;
LABEL_37:
        LogPrintF( (uint64_t)v46,  (uint64_t)"-[CUBluetoothClient _btAccessoryPlacementChanged:device:]",  0x1Eu,  (uint64_t)"Placement changed: %@, P %s -> %s, S %s -> %s\n",  v42,  v43,  v44,  v45,  (char)v32);
      }
    }

    int v47 = _Block_copy(self->_deviceConnectedHandler);
    uint64_t v48 = v47;
    if (v47)
    {
      v52[0] = MEMORY[0x1895F87A8];
      v52[1] = 3221225472LL;
      v52[2] = __57__CUBluetoothClient__btAccessoryPlacementChanged_device___block_invoke;
      v52[3] = &unk_189F33060;
      uint64_t v54 = v47;
      __int128 v53 = v32;
      -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v52);
    }

    goto LABEL_41;
  }

  uint64_t v49 = v21;
  uint64_t v50 = self->_ucat;
  if (v50->var0 <= 60)
  {
    if (v50->var0 != -1)
    {
LABEL_47:
      LogPrintF( (uint64_t)v50,  (uint64_t)"-[CUBluetoothClient _btAccessoryPlacementChanged:device:]",  0x3Cu,  (uint64_t)"### Placement changed: BTDeviceGetAddressString failed: %#m\n",  v22,  v23,  v24,  v25,  v49 - 16);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v50, 0x3Cu))
    {
      uint64_t v50 = self->_ucat;
      goto LABEL_47;
    }
  }

    selfAccessoryMediaAccessUpdatedHandler = (void (**)(void))self->_selfAccessoryMediaAccessUpdatedHandler;
    if (selfAccessoryMediaAccessUpdatedHandler) {
      selfAccessoryMediaAccessUpdatedHandler[2]();
    }
    goto LABEL_43;
  }
}
}

    uint64_t v11 = *v17;
    uint64_t v10 = v17;
    if (!*v17) {
      goto LABEL_42;
    }
  }

  if (v16 <= 0x3F)
  {
    __memcpy_chk();
    v61[v16] = 0;
    if (sscanf(v61, "%p", &v60) != 1) {
      goto LABEL_141;
    }
    v4[6] = v60;
    goto LABEL_41;
  }

      uint64_t v27 = pthread_self();
      pthread_getname_np(v27, v39, 0x40uLL);
      if (!v39[0]) {
        dispatch_queue_get_label(0LL);
      }
      size_t v28 = CPrintF((uint64_t)_LogPrintFCallBack, (uint64_t)&v40);
      v14 += v28 & ~(v28 >> 31);
      if ((v9 & 0x10) == 0) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }

    uint64_t v8 = 0;
  }

                  if (trust) {
                    CFRelease(trust);
                  }
                  goto LABEL_43;
                }

                goto LABEL_171;
              }

              if (gLogCategory_MFiClientCore > 90
                || gLogCategory_MFiClientCore == -1
                && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              {
                goto LABEL_41;
              }

              v137 = "### Create BAA root cert failed";
            }

            else
            {
              v144 = -6700;
              if (gLogCategory_MFiClientCore > 90
                || gLogCategory_MFiClientCore == -1
                && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
              {
                goto LABEL_41;
              }

              v137 = "### Get BAA policy failed";
            }
          }

          else
          {
            v144 = -6742;
            if (gLogCategory_MFiClientCore > 90
              || gLogCategory_MFiClientCore == -1
              && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
            {
              goto LABEL_41;
            }

            v137 = "### Bad BAA intermediate cert";
          }
        }

        else
        {
          if (gLogCategory_MFiClientCore > 90
            || gLogCategory_MFiClientCore == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
          {
            goto LABEL_41;
          }

          v137 = "### No BAA intermediate cert";
        }
      }

      else
      {
        v144 = -71155;
        if (gLogCategory_MFiClientCore > 90
          || gLogCategory_MFiClientCore == -1 && !_LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au))
        {
          goto LABEL_41;
        }

        v137 = "### No BAA leaf public key";
      }

    uint64_t result = 0LL;
    goto LABEL_42;
  }

  if (!v10) {
    goto LABEL_41;
  }
LABEL_24:
  uint64_t v21 = v11 + 48;
  while (1)
  {
    uint64_t result = NetSocket_ReadInternal(a1, 4uLL, 4LL, (char *)&__dsta, 0LL, 0, a7);
    if ((_DWORD)result) {
      break;
    }
    uint64_t v23 = bswap32(__dsta);
    if (v23 > 0x40000)
    {
      uint64_t result = 4294960553LL;
      break;
    }

    uint64_t result = NetSocket_ReadInternal(a1, v23, v23, (char *)(v11 + 48), 0LL, 0, a7);
    if ((_DWORD)result) {
      break;
    }
    uint64_t result = NetSocket_ReadInternal(a1, 0x10uLL, 16LL, v30, 0LL, 0, a7);
    if ((_DWORD)result) {
      break;
    }
    uint64_t result = AES_GCM_InitMessage(v11, 0LL);
    if ((_DWORD)result) {
      break;
    }
    uint64_t result = CCCryptorGCMAddAAD();
    if ((_DWORD)result) {
      break;
    }
    unsigned int v24 = *(void *)v11;
    dispatch_time_t v25 = v11 + 48;
    uint64_t v26 = v10 - v23;
    if (v10 >= v23)
    {
      uint64_t result = MEMORY[0x186E41AE4](v24, v25, v23, v9);
      if ((_DWORD)result) {
        break;
      }
      v14 += v23;
    }

    else
    {
      uint64_t result = MEMORY[0x186E41AE4](v24, v25, v10, v9);
      if ((_DWORD)result) {
        break;
      }
      uint64_t result = MEMORY[0x186E41AE4](*(void *)v11, v21 + v10, v23 - v10, v21 + v10);
      if ((_DWORD)result)
      {
        v14 += v10;
        break;
      }

      uint64_t v26 = 0LL;
      *unsigned int v16 = v21 + v10;
      *(void *)(v11 + 262200) = v21 + v23;
      uint64_t v23 = v10;
      v14 += v10;
    }

    uint64_t result = CCCryptorGCMFinalize();
    if (!(_DWORD)result && v14 < a2)
    {
      v9 += v23;
      uint64_t v10 = v26;
      if (v26) {
        continue;
      }
    }

    break;
  }

    memset_s(v88, 0x20uLL, 0, 0x20uLL);
    memset_s(__s, 0x84uLL, 0, 0x84uLL);
    if (!(_DWORD)v33) {
      goto LABEL_72;
    }
    v58 = *(int **)(a1 + 16);
    if (*v58 > 40) {
      goto LABEL_46;
    }
    if (*v58 == -1)
    {
      v58 = *(int **)(a1 + 16);
    }

    LogPrintF( (uint64_t)v58,  (uint64_t)"OSStatus _PairingSessionGetOrCreateIdentityKeychain(PairingSessionRef, Boolean, char **, uint8_t *, uint8_t *)",  0x28u,  (uint64_t)"### Create %@ failed (try %d of %d): %#m\n",  v15,  v16,  v17,  v18,  *(void *)(a1 + 760));
LABEL_46:
    ++v20;
  }

  while (v20 != 11);
  v66 = *(int **)(a1 + 16);
  if (*v66 <= 60)
  {
    if (*v66 != -1) {
      goto LABEL_70;
    }
    if (_LogCategory_Initialize((uint64_t)v66, 0x3Cu))
    {
      v66 = *(int **)(a1 + 16);
LABEL_70:
      LogPrintF( (uint64_t)v66,  (uint64_t)"OSStatus _PairingSessionGetOrCreateIdentityKeychain(PairingSessionRef, Boolean, char **, uint8_t *, uint8_t *)",  0x3Cu,  (uint64_t)"### Failed to create %@ after %d tries: %#m\n",  v15,  v16,  v17,  v18,  *(void *)(a1 + 760));
    }
  }

  if ((a3 & 4) != 0
    && (v21 - 44) <= 0x33
    && ((1LL << (v21 - 44)) & 0x8000000004003LL) != 0)
  {
    goto LABEL_31;
  }

uint64_t _BonjourService_Create( uint64_t a1, const char *a2, const char *a3, const char *a4, unsigned int a5, _BYTE *a6, int a7, uint64_t *a8)
{
  int v9 = a7;
  int v22 = a7;
  unsigned int v16 = calloc(1uLL, 0x70uLL);
  if (!v16) {
    return 4294960568LL;
  }
  uint64_t v17 = (uint64_t)v16;
  v16[2] = a1;
  uint64_t v18 = strdup(a2);
  *(void *)(v17 + 24) = v18;
  if (v18)
  {
    int v19 = strdup(a3);
    *(void *)(v17 + 32) = v19;
    if (v19)
    {
      uint64_t v20 = strdup(a4);
      *(void *)(v17 + 40) = v20;
      if (v20)
      {
        *(_DWORD *)(v17 + 48) = a5;
        if (a6 && *a6)
        {
          __strlcpy_chk();
          if (v9) {
            goto LABEL_11;
          }
        }

        else
        {
          if_indextoname(a5, (char *)(v17 + 52));
          if (v9) {
            goto LABEL_11;
          }
        }

        SocketGetInterfaceInfo(-1, (char *)(v17 + 52), 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, (uint64_t)&v22);
        int v9 = v22;
LABEL_11:
        *(_DWORD *)(v17 + 84) = v9;
        if (v9 > 63)
        {
          if (v9 != 128 && v9 != 64) {
            goto LABEL_19;
          }
        }

        else
        {
          if (v9 == 2)
          {
LABEL_18:
            *(_BYTE *)(v17 + 70) = 1;
LABEL_19:
            uint64_t result = 0LL;
            *a8 = v17;
            return result;
          }

          if (v9 != 4) {
            goto LABEL_19;
          }
        }

        *(_BYTE *)(v17 + 69) = 1;
        goto LABEL_18;
      }
    }
  }

  _BonjourService_Free(v17);
  return 4294901757LL;
}

uint64_t _BonjourService_GetDeviceID(uint64_t a1, void *a2)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 152LL);
  if ((v5 & 0x800000000000LL) != 0
    || (uint64_t v7 = *(const char **)(a1 + 32), !strcasecmp(v7, "_airplay._tcp."))
    || !strcasecmp(v7, "_airplay-alt._tcp.")
    || !strcasecmp(v7, "_mfi-config._tcp."))
  {
    ValuePtr = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "deviceid", &valueLen);
    if (ValuePtr)
    {
      uint64_t result = TextToHardwareAddress(ValuePtr, valueLen, 6LL, v63);
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v19 = 0LL;
      uint64_t v13 = __s;
      do
      {
        if (v13 == __s)
        {
          uint64_t v20 = __s;
        }

        else
        {
          *uint64_t v13 = 58;
          uint64_t v20 = v13 + 1;
        }

        unint64_t v21 = v63[v19];
        uint64_t v22 = v19 + 1;
        *uint64_t v20 = a0123456789abcd_0[v21 >> 4];
        char v23 = a0123456789abcd_0[v21 & 0xF];
        uint64_t v13 = v20 + 2;
        v20[1] = v23;
        uint64_t v19 = v22;
      }

      while (v22 != 6);
      goto LABEL_28;
    }

    return 4294960569LL;
  }

  if ((v5 & 0x800000000000000LL) != 0 || !strcasecmp(v7, "_hap._tcp."))
  {
    uint64_t v26 = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "id", &valueLen);
    if (!v26) {
      return 4294960569LL;
    }
    uint64_t result = TextToHardwareAddress(v26, valueLen, 6LL, v63);
    if (!(_DWORD)result)
    {
      uint64_t v27 = 0LL;
      uint64_t v13 = __s;
      do
      {
        if (v13 == __s)
        {
          size_t v28 = __s;
        }

        else
        {
          *uint64_t v13 = 58;
          size_t v28 = v13 + 1;
        }

        unint64_t v29 = v63[v27];
        uint64_t v30 = v27 + 1;
        *size_t v28 = a0123456789abcd_0[v29 >> 4];
        char v31 = a0123456789abcd_0[v29 & 0xF];
        uint64_t v13 = v28 + 2;
        v28[1] = v31;
        uint64_t v27 = v30;
      }

      while (v30 != 6);
      goto LABEL_28;
    }
  }

  else
  {
    if (!strcasecmp(v7, "_airport._tcp."))
    {
      if (!(_WORD)v4) {
        return 4294960553LL;
      }
      uint8_t valueLen = 0;
      __int128 v62 = (unsigned __int8 *)(v3 + 17);
      while (!ParseCommaSeparatedNameValuePair( v62,  v3 + 17 + (unsigned __int16)v4 - 1,  v65,  8LL,  &v61,  __s,  &v60,  &v62))
      {
        if (!strnicmpx(v65, v61, "waMA"))
        {
          uint8_t valueLen = v60;
          uint64_t result = TextToHardwareAddress(__s, v60, 6LL, v63);
          if ((_DWORD)result) {
            return result;
          }
          uint64_t v39 = 0LL;
          uint64_t v13 = __s;
          do
          {
            if (v13 == __s)
            {
              char v40 = __s;
            }

            else
            {
              *uint64_t v13 = 58;
              char v40 = v13 + 1;
            }

            unint64_t v41 = v63[v39];
            uint64_t v42 = v39 + 1;
            *char v40 = a0123456789abcd_0[v41 >> 4];
            char v43 = a0123456789abcd_0[v41 & 0xF];
            uint64_t v13 = v40 + 2;
            v40[1] = v43;
            uint64_t v39 = v42;
          }

          while (v42 != 6);
          goto LABEL_28;
        }
      }

      return 4294960569LL;
    }

    if (!strcasecmp(v7, "_raop._tcp.") || !strcasecmp(v7, "_airplay-p2p._tcp."))
    {
      uint64_t v32 = *(char **)(a1 + 24);
      uint64_t v33 = strchr(v32, 64);
      if (!v33) {
        return 4294960554LL;
      }
      uint8_t valueLen = (_BYTE)v33 - (_BYTE)v32;
      uint64_t result = TextToHardwareAddress(v32, ((_BYTE)v33 - (_BYTE)v32), 6LL, v63);
      if (!(_DWORD)result)
      {
        uint64_t v34 = 0LL;
        uint64_t v13 = __s;
        do
        {
          if (v13 == __s)
          {
            uint64_t v35 = __s;
          }

          else
          {
            *uint64_t v13 = 58;
            uint64_t v35 = v13 + 1;
          }

          unint64_t v36 = v63[v34];
          uint64_t v37 = v34 + 1;
          *uint64_t v35 = a0123456789abcd_0[v36 >> 4];
          char v38 = a0123456789abcd_0[v36 & 0xF];
          uint64_t v13 = v35 + 2;
          v35[1] = v38;
          uint64_t v34 = v37;
        }

        while (v37 != 6);
        goto LABEL_28;
      }
    }

    else
    {
      if (strcasecmp(v7, "_airdrop._tcp."))
      {
        if (!strcasecmp(v7, "_googlecast._tcp."))
        {
          uint64_t v49 = (unsigned __int8 *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "id", &valueLen);
          if (v49)
          {
            uint64_t v50 = SipHash(qword_186B4A7CB, v49, valueLen);
            uint64_t v51 = 0LL;
            LOBYTE(v62) = BYTE5(v50);
            BYTE1(v62) = BYTE4(v50);
            BYTE2(v62) = BYTE3(v50);
            BYTE3(v62) = BYTE2(v50);
            BYTE4(v62) = BYTE1(v50);
            BYTE5(v62) = v50;
            __int128 v52 = __s;
            do
            {
              if (v52 == __s)
              {
                __int128 v53 = __s;
              }

              else
              {
                char *v52 = 58;
                __int128 v53 = v52 + 1;
              }

              unint64_t v54 = v63[v51 - 7];
              uint64_t v55 = v51 + 1;
              char *v53 = a0123456789abcd_0[v54 >> 4];
              char v56 = a0123456789abcd_0[v54 & 0xF];
              __int128 v52 = v53 + 2;
              v53[1] = v56;
              uint64_t v51 = v55;
            }

            while (v55 != 6);
            char *v52 = 0;
LABEL_29:
            unsigned __int8 v24 = strlen(__s);
            if ((v24 & 0xC0) == 0)
            {
              uint64_t v25 = v24;
              memcpy(a2, __s, v24);
              uint64_t result = 0LL;
              *((_BYTE *)a2 + v25) = 0;
              return result;
            }

            return 4294960553LL;
          }
        }

        else
        {
          uint64_t v8 = (char *)TXTRecordGetValuePtr(v4, (const void *)(v3 + 16), "rpBA", &valueLen);
          if (v8)
          {
            int v9 = v8;
            uint8_t v10 = valueLen;
LABEL_14:
            uint64_t result = TextToHardwareAddress(v9, v10, 6LL, v63);
            if ((_DWORD)result) {
              return result;
            }
            uint64_t v12 = 0LL;
            uint64_t v13 = __s;
            do
            {
              if (v13 == __s)
              {
                uint64_t v14 = __s;
              }

              else
              {
                *uint64_t v13 = 58;
                uint64_t v14 = v13 + 1;
              }

              unint64_t v15 = v63[v12];
              uint64_t v16 = v12 + 1;
              *uint64_t v14 = a0123456789abcd_0[v15 >> 4];
              char v17 = a0123456789abcd_0[v15 & 0xF];
              uint64_t v13 = v14 + 2;
              v14[1] = v17;
              uint64_t v12 = v16;
            }

            while (v16 != 6);
            goto LABEL_28;
          }

          v57 = *(void **)(a1 + 72);
          if (v57)
          {
            v58 = (const char *)objc_msgSend((id)objc_msgSend(v57, "identifier"), "UTF8String");
            if (v58)
            {
              int v9 = (char *)v58;
              size_t v59 = strlen(v58);
              uint8_t v10 = TruncatedUTF8Length(v9, v59, 0xFFuLL);
              uint8_t valueLen = v10;
              goto LABEL_14;
            }
          }
        }

        return 4294960569LL;
      }

      uint64_t result = TextToHardwareAddress(*(char **)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL, 6LL, v63);
      if (!(_DWORD)result)
      {
        uint64_t v44 = 0LL;
        uint64_t v13 = __s;
        do
        {
          if (v13 == __s)
          {
            dispatch_source_t v45 = __s;
          }

          else
          {
            *uint64_t v13 = 58;
            dispatch_source_t v45 = v13 + 1;
          }

          unint64_t v46 = v63[v44];
          uint64_t v47 = v44 + 1;
          *dispatch_source_t v45 = a0123456789abcd_0[v46 >> 4];
          char v48 = a0123456789abcd_0[v46 & 0xF];
          uint64_t v13 = v45 + 2;
          v45[1] = v48;
          uint64_t v44 = v47;
        }

        while (v47 != 6);
LABEL_28:
        *uint64_t v13 = 0;
        goto LABEL_29;
      }
    }
  }

  return result;
}

void _BonjourBrowser_RemoveService(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a2 + 104);
  if (v3)
  {
    uint64_t v4 = v3[11];
    if (v4)
    {
      uint64_t v6 = v3 + 11;
      if (v4 != a2)
      {
        while (1)
        {
          uint64_t v7 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            goto LABEL_8;
          }
          if (v4 == a2)
          {
            uint64_t v6 = (void *)(v7 + 8);
            break;
          }
        }
      }

      *uint64_t v6 = *(void *)(a2 + 8);
      if (v3[11])
      {
LABEL_8:
        _BonjourBrowser_PostEvent(a1, 1, (uint64_t)v3, a2);
        if (a3) {
          _BonjourDevice_UpdateTXTQueries((uint64_t)v3);
        }
        return;
      }
    }

    uint64_t v8 = (void *)(a1 + 88);
    while (1)
    {
      int v9 = v8;
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        break;
      }
      if (v8 == v3)
      {
        *int v9 = *v3;
        break;
      }
    }

    _BonjourBrowser_PostEvent(a1, 2, (uint64_t)v3, a2);
    _BonjourDevice_Free(v3);
  }

void _BonjourDevice_UpdateTXTQueries(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t BestService = _BonjourDevice_GetBestService(v2);
  if (BestService)
  {
    uint64_t v4 = BestService;
    if ((*(_DWORD *)(a1 + 96) & 0x80000000) != 0)
    {
      uint64_t v5 = *(void *)(BestService + 96);
      if (v5)
      {
        BOOL v6 = 0;
        if (!strcasecmp(*(const char **)(BestService + 32), "_raop._tcp."))
        {
          if ((uint64_t v8 = (const void *)(v5 + 16),
                uint16_t v9 = *(_WORD *)(v5 + 8),
                (ValuePtr = (char *)TXTRecordGetValuePtr(v9, v8, "ft", &valueLen)) != 0LL)
            && SNScanF(ValuePtr, valueLen, "%llx", v11, v12, v13, v14, v15, (int)v17) == 1
            && (v17[3] & 0x40) != 0
            || (uint64_t v16 = (unsigned __int8 *)TXTRecordGetValuePtr(v9, v8, "am", &valueLen)) != 0LL
            && !strnicmp_prefix(v16, valueLen, "AppleTV"))
          {
            BOOL v6 = 1;
          }
        }

        *(_DWORD *)(a1 + 96) = v6;
        uint64_t v2 = *(void *)(a1 + 88);
      }
    }

    for (; v2; uint64_t v2 = *(void *)(v2 + 8))
    {
      if (v2 != v4 || *(int *)(a1 + 96) >= 1)
      {
        uint64_t v7 = *(_DNSServiceRef_t **)(v2 + 88);
        if (v7)
        {
          DNSServiceRefDeallocate(v7);
          *(void *)(v2 + 88) = 0LL;
        }
      }
    }
  }

void _BonjourBrowser_PostEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  CFMutableDictionaryRef MutableCopy = (CFMutableDictionaryRef)a3;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (*(void *)(a1 + 168) || *(void *)(a1 + 184))
  {
    if (!a3)
    {
      uint64_t v13 = 0LL;
      goto LABEL_14;
    }

    uint64_t v8 = _BonjourDevice_CreateDictionary(a3, &v25);
    if (v8)
    {
      uint64_t v13 = v8;
      uint64_t v14 = (const void *)*((void *)MutableCopy + 10);
      if (v14) {
        CFRelease(v14);
      }
      *((void *)MutableCopy + 10) = v13;
      if (a4)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v13);
        if (!MutableCopy) {
          goto LABEL_28;
        }
        uint64_t v15 = _BonjourService_CreateDictionary(a4, &v25);
        if (!v15) {
          goto LABEL_25;
        }
        uint64_t v16 = v15;
        values[0] = v15;
        CFArrayRef v17 = CFArrayCreate(0LL, (const void **)values, 1LL, MEMORY[0x189605228]);
        CFRelease(v16);
        if (!v17) {
          goto LABEL_28;
        }
        CFDictionarySetValue(MutableCopy, @"removedServices", v17);
        CFRelease(v17);
        uint64_t v13 = MutableCopy;
      }

      else
      {
        CFMutableDictionaryRef MutableCopy = 0LL;
      }

__CFDictionary *_BonjourDevice_CreateDictionary(uint64_t a1, _DWORD *a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  uint64_t BestService = _BonjourDevice_GetBestService(*(void *)(a1 + 88));
  if (!BestService || (uint64_t v5 = BestService, (v6 = *(void *)(BestService + 96)) == 0))
  {
    uint64_t v14 = *(const __CFDictionary **)(a1 + 80);
    if (!v14)
    {
      Mutable = 0LL;
      int v34 = -6745;
      goto LABEL_49;
    }

    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v14);
    Mutable = MutableCopy;
    if (MutableCopy)
    {
      CFDictionaryRemoveValue(MutableCopy, @"services");
      goto LABEL_35;
    }

LABEL_47:
    int v34 = -6728;
LABEL_49:
    int v38 = v34;
    goto LABEL_36;
  }

  CFIndex v7 = *(void *)(v6 + 8);
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable) {
    goto LABEL_47;
  }
  uint64_t v9 = *(const char **)(v5 + 32);
  if (!strcasecmp(v9, "_raop._tcp.") || !strcasecmp(v9, "_airplay-p2p._tcp."))
  {
    uint64_t v11 = *(char **)(v5 + 24);
    uint64_t v16 = strchr(v11, 64);
    if (v16) {
      uint64_t v11 = v16 + 1;
    }
  }

  else
  {
    int v10 = strcasecmp(v9, "_airplay._tcp.");
    uint64_t v11 = *(char **)(v5 + 24);
    if (!v10)
    {
      uint64_t v12 = strchr(*(const char **)(v5 + 24), 64);
      if (v12)
      {
        uint64_t v13 = v12;
        else {
          uint64_t v11 = v13 + 1;
        }
      }
    }
  }

  size_t v17 = strlen(v11);
  CFDictionarySetCString(Mutable, @"name", v11, v17);
  CFDictionarySetCString(Mutable, @"deviceID", (const char *)(a1 + 16), -1LL);
  int v38 = DNSServiceConstructFullNameEx(__s, *(void *)(v5 + 24), *(char **)(v5 + 32), *(unsigned __int8 **)(v5 + 40));
  if (!v38)
  {
    size_t v18 = strlen(__s);
    snprintf(&__s[v18], 1073 - v18, "%%%u", *(_DWORD *)(v5 + 48));
    CFDictionarySetCString(Mutable, @"dnsName", __s, -1LL);
  }

  double Current = CFAbsoluteTimeGetCurrent();
  CFDictionarySetDouble(Mutable, @"lastSeen", Current);
  CFDictionarySetCString(Mutable, @"serviceType", *(const char **)(v5 + 32), -1LL);
  if (strcasecmp(*(const char **)(v5 + 32), "_airport._tcp."))
  {
    CFDictionarySetData(Mutable, @"txt", (UInt8 *)(v6 + 16), v7);
LABEL_24:
    uint64_t v24 = *(void *)(a1 + 88);
    if (v24)
    {
      unsigned int v25 = 0;
      CFMutableArrayRef v26 = 0LL;
      char v27 = 1;
      uint64_t v28 = (const CFArrayCallBacks *)MEMORY[0x189605228];
      do
      {
        if (!*(_BYTE *)(v24 + 69)) {
          char v27 = 0;
        }
        int v29 = *(_DWORD *)(v24 + 84);
        if (!v26)
        {
          CFMutableArrayRef v26 = CFArrayCreateMutable(0LL, 0LL, v28);
          if (!v26)
          {
            int v33 = -6728;
            goto LABEL_45;
          }
        }

        uint64_t v30 = _BonjourService_CreateDictionary(v24, &v38);
        if (!v30)
        {
          CFRelease(v26);
          goto LABEL_46;
        }

        char v31 = v30;
        v25 |= v29;
        CFArrayAppendValue(v26, v30);
        CFRelease(v31);
        uint64_t v24 = *(void *)(v24 + 8);
      }

      while (v24);
      CFDictionarySetValue(Mutable, @"services", v26);
      CFRelease(v26);
      if (v27) {
        goto LABEL_40;
      }
      if (!v25) {
        goto LABEL_35;
      }
    }

    else
    {
      unsigned int v25 = 0;
LABEL_40:
      CFDictionarySetValue(Mutable, @"p2pOnly", (const void *)*MEMORY[0x189604DE8]);
      if (!v25) {
        goto LABEL_35;
      }
    }

    CFDictionarySetInt64(Mutable, @"TrTy", v25);
LABEL_35:
    int v38 = 0;
    goto LABEL_36;
  }

  if (v7)
  {
    TXTRecordCreate(&txtRecord, 0x100u, buffer);
    uint64_t v20 = (unsigned __int8 *)(v6 + 17);
    uint64_t v37 = (unsigned __int8 *)(v6 + 17);
    unint64_t v21 = v6 + v7 + 16;
    while (!ParseCommaSeparatedNameValuePair(v20, v21, key, 7LL, &v36, value, &valueSize, &v37))
    {
      key[v36] = 0;
      TXTRecordSetValue(&txtRecord, key, valueSize, value);
      uint64_t v20 = v37;
    }

    BytesPtr = (UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
    unsigned int Length = TXTRecordGetLength(&txtRecord);
    CFDictionarySetData(Mutable, @"txt", BytesPtr, Length);
    TXTRecordDeallocate(&txtRecord);
    goto LABEL_24;
  }

  int v33 = -6743;
LABEL_45:
  int v38 = v33;
LABEL_46:
  CFRelease(Mutable);
  Mutable = 0LL;
LABEL_36:
  if (a2) {
    *a2 = v38;
  }
  return Mutable;
}

    unint64_t v21 = *(_DWORD *)(v6 + 104);
    v6 += 104LL;
    uint64_t v13 = v21;
  }

  while (v21);
  if (!v7) {
    return v14;
  }
LABEL_52:
  fputc(10, *v9);
  return v14;
}

  v113 = 0;
  uint64_t v51 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetMagicPairingStatus[0])( (uint64_t)a4,  (uint64_t)&v113);
  if (v51)
  {
    char v56 = v51;
    v57 = self->_ucat;
    if (v57->var0 > 60) {
      goto LABEL_53;
    }
    if (v57->var0 != -1) {
      goto LABEL_50;
    }
    if (_LogCategory_Initialize((uint64_t)v57, 0x3Cu))
    {
      v57 = self->_ucat;
LABEL_50:
      LogPrintF( (uint64_t)v57,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTDeviceGetMagicPairingStatus failed: %#m\n",  v52,  v53,  v54,  v55,  v56 - 16);
    }
  }

  else
  {
    [v6 setMagicPaired:v113 != 0];
  }

        goto LABEL_48;
      }

    if (v18 < a2)
    {
      CFMutableArrayRef v26 = a2 - v18;
      do
      {
        char v27 = *v18;
        if (*v18 < 0)
        {
          if (!__maskrune(v27, 0x4000uLL)) {
            goto LABEL_55;
          }
        }

        else if ((*(_DWORD *)(v13 + 4 * v27 + 60) & 0x4000) == 0)
        {
          goto LABEL_55;
        }

        ++v18;
        --v26;
      }

      while (v26);
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
    size_t v17 = 0LL;
  }

  uint64_t v15 = 4294960596LL;
LABEL_48:
  if (!*(_DWORD *)(a1 + 28))
  {
    char v23 = *(_DWORD *)(a1 + 24);
    if ((v23 & 0x80000000) == 0)
    {
      if (close(v23) && *__error()) {
        __error();
      }
      *(_DWORD *)(a1 + 24) = -1;
    }
  }

  _SerialStreamErrorHandler(a1, v15);
  return v15;
}

              CFRelease(v19);
              uint64_t v19 = theDict;
              CFDictionarySetValue(theDict, @"SCAN_CHANNELS", theArray);
              CFRelease(theArray);
              uint64_t v14 = v73;
              CFIndex v7 = v74;
              p_cache = &OBJC_CLASS___CUAppleIDClient.cache;
              size_t v17 = v72;
LABEL_48:
              v57 = CFDictionaryGetInt64Ranged( v77,  @"scanRSSIThreshold",  0xFFFFFFFF80000000LL,  0x7FFFFFFFLL,  (int *)&v79);
              if (v79) {
                __int128 v62 = -80;
              }
              else {
                __int128 v62 = v57;
              }
              if (v62 < 0) {
                CFDictionarySetInt64(v19, @"SCAN_RSSI_THRESHOLD", v62);
              }
              __int128 v63 = *((_DWORD *)p_cache + 448);
              if (v63 <= 30 && (v63 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_WiFiManagerCore, 0x1Eu))) {
                LogPrintF( (uint64_t)&gLogCategory_WiFiManagerCore,  (uint64_t)"OSStatus WiFiScan(CFDictionaryRef, __strong dispatch_queue_t, WiFiScanCompletion_f, void *)",  0x1Eu,  (uint64_t)"WiFi scan starting\n",  v58,  v59,  v60,  v61,  v70);
              }
              v79 = WiFiDeviceClientScanAsync();
              if (!v79)
              {
                CFRelease(v17);
                uint64_t v14 = v19;
                goto LABEL_59;
              }

              theDict = v19;
              uint64_t v19 = 0LL;
              v68 = 0LL;
              goto LABEL_74;
            }
          }

          else
          {
            uint64_t v19 = 0LL;
          }

          v79 = -6700;
LABEL_73:
          v68 = theArray;
LABEL_74:
          CFRunLoopGetMain();
          WiFiManagerClientUnscheduleFromRunLoop();
          if (v68) {
            CFRelease(v68);
          }
          if (v19) {
            CFRelease(v19);
          }
          if (theDict) {
            CFRelease(theDict);
          }
          CFRelease(v17);
LABEL_59:
          CFRelease(v14);
          v64 = v79;
          if (!v79) {
            goto LABEL_64;
          }
          goto LABEL_60;
        }

        uint64_t v19 = 0LL;
        goto LABEL_82;
      }

      theDict = v19;
      uint64_t v19 = 0LL;
      v68 = 0LL;
      v69 = -6705;
    }

    else
    {
      theDict = 0LL;
      v68 = 0LL;
      v69 = -6727;
    }

__CFDictionary *_BonjourService_CreateDictionary(uint64_t a1, int *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable)
  {
    int v8 = -6728;
    if (!a2) {
      return Mutable;
    }
    goto LABEL_11;
  }

  if (!DNSServiceConstructFullNameEx( __s,  *(void *)(a1 + 24),  *(char **)(a1 + 32),  *(unsigned __int8 **)(a1 + 40)))
  {
    size_t v5 = strlen(__s);
    snprintf(&__s[v5], 1073 - v5, "%%%u", *(_DWORD *)(a1 + 48));
    CFDictionarySetCString(Mutable, @"dnsName", __s, -1LL);
  }

  CFDictionarySetCString(Mutable, @"domain", *(const char **)(a1 + 40), -1LL);
  CFDictionarySetInt64(Mutable, @"ifindex", *(unsigned int *)(a1 + 48));
  CFDictionarySetCString(Mutable, @"ifname", (const char *)(a1 + 52), -1LL);
  uint64_t v6 = *(const void **)(a1 + 72);
  if (v6) {
    CFDictionarySetValue(Mutable, @"nanEP", v6);
  }
  CFIndex v7 = (const void **)MEMORY[0x189604DE8];
  if (*(_BYTE *)(a1 + 69)) {
    CFDictionarySetValue(Mutable, @"p2p", (const void *)*MEMORY[0x189604DE8]);
  }
  CFDictionarySetCString(Mutable, @"rawName", *(const char **)(a1 + 24), -1LL);
  CFDictionarySetInt64(Mutable, @"transportType", *(unsigned int *)(a1 + 84));
  int v8 = *(unsigned __int8 *)(a1 + 70);
  if (*(_BYTE *)(a1 + 70))
  {
    CFDictionarySetValue(Mutable, @"wifi", *v7);
    int v8 = 0;
  }

  if (a2) {
LABEL_11:
  }
    *a2 = v8;
  return Mutable;
}

void _BonjourBrowser_PostEventOnEventQueue(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

uint64_t _BonjourDevice_GetBestService(uint64_t a1)
{
  if (!a1) {
    return a1;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  uint64_t v4 = a1;
  do
  {
    if (!strcmp(*(const char **)(v4 + 40), "local."))
    {
      if (!*(_BYTE *)(v4 + 70)) {
        return v4;
      }
      if (!v3)
      {
        if (*(_BYTE *)(v4 + 69)) {
          uint64_t v3 = 0LL;
        }
        else {
          uint64_t v3 = v4;
        }
      }

      if (!v2) {
        uint64_t v2 = v4;
      }
    }

    uint64_t v4 = *(void *)(v4 + 8);
  }

  while (v4);
  if (!v3)
  {
    uint64_t v3 = v2;
    if (!v2) {
      return a1;
    }
  }

  return v3;
}

uint64_t _BonjourService_StartTXTQuery(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  uint64_t result = DNSServiceConstructFullName( fullName,  *(const char *const *)(a1 + 24),  *(const char *const *)(a1 + 32),  *(const char *const *)(a1 + 40));
  if (!(_DWORD)result)
  {
    DNSServiceRef sdRef = *(DNSServiceRef *)(*(void *)(a1 + 16) + 24LL);
    uint64_t result = DNSServiceQueryRecord( &sdRef,  0x404000u,  *(_DWORD *)(a1 + 48),  fullName,  0x10u,  1u,  (DNSServiceQueryRecordReply)_BonjourService_TXTHandler,  (void *)a1);
    if (!(_DWORD)result) {
      *(void *)(a1 + 88) = sdRef;
    }
  }

  return result;
}

void _BonjourService_TXTHandler( int a1, unsigned __int8 a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t __n, void *__s1, uint64_t a10, uint64_t a11)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v11 = *(void *)(a11 + 16);
  if (a4)
  {
    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const ch ar *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)",  0x3Cu,  (uint64_t)"### Browser for %s TXT error: %#m\n",  a5,  a6,  a7,  __n,  *(void *)(v11 + 128));
    }
  }

  else
  {
    if (*(_BYTE *)(v11 + 96))
    {
      unsigned int v12 = __n;
      unsigned int v13 = a2;
      if (gLogCategory_BonjourBrowser <= 20
        && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
      {
        uint64_t v14 = "Add";
        if (((v13 >> 1) & 1) == 0) {
          uint64_t v14 = "Rmv";
        }
        LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)",  0x14u,  (uint64_t)"Bonjour TXT %s %s on %u\n",  a5,  a6,  a7,  __n,  (char)v14);
      }

      uint64_t v16 = (void **)(a11 + 96);
      uint64_t v15 = *(void **)(a11 + 96);
      if ((v13 & 2) == 0)
      {
        if (v15)
        {
          size_t v17 = (void *)(a11 + 96);
          while (1)
          {
            size_t v18 = v15;
            if (v15[1] == v12 && !memcmp(__s1, v15 + 2, v12)) {
              break;
            }
            uint64_t v15 = (void *)*v15;
            size_t v17 = v18;
            if (!*v18) {
              goto LABEL_15;
            }
          }

          *size_t v17 = *v15;
          free(v15);
        }

        else
        {
LABEL_15:
          if (gLogCategory_BonjourBrowser <= 40
            && (gLogCategory_BonjourBrowser != -1
             || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x28u)))
          {
            LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourService_RemoveRData(BonjourServiceRef, const void *, size_t)",  0x28u,  (uint64_t)"Removed RData missing for %s.%s%s %%%u\n%1.1H\n",  a5,  a6,  a7,  __n,  *(_OWORD *)(a11 + 24));
          }
        }

        goto LABEL_25;
      }

      if (!v15) {
        goto LABEL_42;
      }
      int v19 = gLogCategory_BonjourIssues;
      if (gLogCategory_BonjourIssues > 40)
      {
LABEL_39:
        while (v15[1] != v12 || memcmp(__s1, v15 + 2, v12))
        {
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            goto LABEL_42;
          }
        }

        goto LABEL_25;
      }

      if (gLogCategory_BonjourIssues != -1) {
        goto LABEL_73;
      }
      int v19 = gLogCategory_BonjourIssues;
      if (gLogCategory_BonjourIssues <= 40)
      {
LABEL_73:
        if (v19 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)) {
          LogPrintF( (uint64_t)&gLogCategory_BonjourIssues,  (uint64_t)"OSStatus _BonjourService_AddRData(BonjourServiceRef, const void *, size_t)",  0x28u,  (uint64_t)"Add without remove new:   %s.%s%s%%%u: %#{txt}\n",  a5,  a6,  a7,  __n,  *(_OWORD *)(a11 + 24));
        }
      }

      uint64_t v20 = *v16;
      if (!*v16) {
        goto LABEL_42;
      }
      char v21 = 1;
      do
      {
        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF( (uint64_t)&gLogCategory_BonjourIssues,  (uint64_t)"OSStatus _BonjourService_AddRData(BonjourServiceRef, const void *, size_t)",  0x28u,  (uint64_t)"Add without remove old %d: %s.%s%s%%%u: %#{txt}\n",  a5,  a6,  a7,  __n,  v21);
        }

        ++v21;
        uint64_t v20 = (void *)*v20;
      }

      while (v20);
LABEL_38:
      uint64_t v15 = *v16;
      if (*v16) {
        goto LABEL_39;
      }
LABEL_42:
      uint64_t v22 = calloc(1uLL, v12 + 16LL);
      if (v22)
      {
        char v23 = v22;
        *uint64_t v22 = *v16;
        v22[1] = v12;
        memcpy(v22 + 2, __s1, v12);
        *uint64_t v16 = v23;
        goto LABEL_44;
      }

LABEL_25:
      if (!*v16) {
        return;
      }
LABEL_44:
      uint64_t v24 = *(void *)(a11 + 104);
      if (v24)
      {
        if (!strcasecmp((const char *)(v24 + 16), v30))
        {
LABEL_59:
          _BonjourDevice_UpdateTXTQueries(v24);
          _BonjourBrowser_PostEvent(v11, 1, v24, 0LL);
          return;
        }

        if (gLogCategory_BonjourIssues <= 40
          && (gLogCategory_BonjourIssues != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourIssues, 0x28u)))
        {
          LogPrintF( (uint64_t)&gLogCategory_BonjourIssues,  (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, cons t char *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)",  0x28u,  (uint64_t)"Removing and re-adding %s.%s%s for TXT device ID update (%s -> %s)\n",  v25,  v26,  v27,  v28,  *(_OWORD *)(a11 + 24));
        }

        _BonjourBrowser_RemoveService(v11, a11, 1LL);
        *(void *)(a11 + 104) = 0LL;
      }

      uint64_t v24 = v11 + 88;
      while (1)
      {
        uint64_t v24 = *(void *)v24;
        if (!v24) {
          break;
        }
      }

      int v29 = calloc(1uLL, 0x68uLL);
      if (!v29) {
        return;
      }
      uint64_t v24 = (uint64_t)v29;
      v29[24] = -1;
      *((void *)v29 + 1) = v11;
      __strlcpy_chk();
      *(void *)uint64_t v24 = *(void *)(v11 + 88);
      *(void *)(v11 + 88) = v24;
LABEL_58:
      *(void *)(a11 + 104) = v24;
      *(void *)(a11 + 8) = *(void *)(v24 + 88);
      *(void *)(v24 + 88) = a11;
      goto LABEL_59;
    }

    if (gLogCategory_BonjourBrowser <= 60
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourService_TXTHandler(DNSServiceRef, DNSServiceFlags, uint32_t, DNSServiceErrorType, const ch ar *, uint16_t, uint16_t, uint16_t, const void *, uint32_t, void *)",  0x3Cu,  (uint64_t)"### TXT response after stop\n",  a5,  a6,  a7,  __n,  (char)__s1);
    }
  }

        return;
      }

      [v11 name];
      size_t v17 = (id)objc_claimAutoreleasedReturnValue();
      v42[0] = 0;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName[0])( (uint64_t)a3,  (uint64_t)v42,  256LL))
      {
        size_t v18 = v17;
LABEL_6:

        char v23 = v17;
        goto LABEL_7;
      }

      [NSString stringWithUTF8String:v42];
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();

      char v23 = v25;
      uint64_t v26 = v17;
      if (v23 == v26) {
        goto LABEL_6;
      }
      uint64_t v27 = v26;
      if ((v26 != 0LL) != (v23 == 0LL))
      {
        uint64_t v28 = [v23 isEqual:v26];

        if ((v28 & 1) != 0)
        {
LABEL_7:
          uint64_t v24 = self->_ucat;
          if (v24->var0 <= 10)
          {
            if (v24->var0 == -1)
            {
              uint64_t v24 = self->_ucat;
            }

            LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUBluetoothClient _btAccessoryNameChanged:]",  0xAu,  (uint64_t)"Name unchanged: %@\n",  v19,  v20,  v21,  v22,  (char)v16);
          }

    if (a5) {
      uint64_t v35 = (a5 + 310000);
    }
    else {
      uint64_t v35 = 0LL;
    }
    [v18 _handleDeviceDisconnected:a1 reason:v35];
    goto LABEL_2;
  }

  if (a3) {
    goto LABEL_2;
  }
  int v19 = v13[28];
  if (*v19 <= 10)
  {
    if (*v19 != -1)
    {
LABEL_8:
      BTServiceSpecificEventToString_2016(a4);
      LogPrintF( (uint64_t)v19,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)",  0xAu,  (uint64_t)"BTService connect: %#{flags}, %d %s, %#m\n",  v20,  v21,  v22,  v23,  a2);
      goto LABEL_16;
    }

    if (_LogCategory_Initialize((uint64_t)v13[28], 0xAu))
    {
      int v19 = v18[28];
      goto LABEL_8;
    }
  }

      v14[12] = 0LL;
      *((_BYTE *)v14 + 105) = 0;
      [v14 _btEnsureStopped];
      goto LABEL_29;
    case 2:
      size_t v18 = v9[28];
      if (*v18 > 60) {
        goto LABEL_27;
      }
      if (*v18 != -1) {
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v18, 0x3Cu))
      {
        size_t v18 = v14[28];
LABEL_13:
        LogPrintF( (uint64_t)v18,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x3Cu,  (uint64_t)"### BTSession terminated (bluetoothd crash)...re-attaching\n",  v10,  v11,  v12,  v13,  v21);
      }

      return;
    }

    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

    -[CUBluetoothScalablePipe _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v5, 0LL);
    uint64_t v15 = 0LL;
LABEL_12:

    --v4;
  }

  while (v4);
  if (self->_writeSuspended)
  {
    self->_writeSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_writeSource);
  }

    self->_selfAccessoryMediaAccessFlags = self->_selfAccessoryMediaAccessFlags & 0xFFFFFFFE | (v23 != 0);
    uint64_t v11 = 1;
LABEL_26:
    [v40 mediaPassword];
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    selfAccessoryMediaAccessPassword = self->_selfAccessoryMediaAccessPassword;
    uint64_t v28 = v26;
    int v29 = selfAccessoryMediaAccessPassword;
    if (v28 == v29)
    {
    }

    else
    {
      uint64_t v30 = v29;
      if ((v28 == 0LL) == (v29 != 0LL))
      {

        goto LABEL_34;
      }

      uint64_t v31 = -[NSString isEqual:](v28, "isEqual:", v29);

      if ((v31 & 1) == 0)
      {
LABEL_34:
        uint64_t v32 = self->_ucat;
        if (v32->var0 <= 30)
        {
          if (v32->var0 != -1)
          {
LABEL_36:
            int v33 = -[NSString length](v28, "length");
            int v38 = "set";
            if (!v33) {
              int v38 = "not set";
            }
            LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaAccess]",  0x1Eu,  (uint64_t)"SelfAccessory MediaAccess password updated: %s\n",  v34,  v35,  v36,  v37,  (char)v38);
            goto LABEL_40;
          }

          if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu))
          {
            uint64_t v32 = self->_ucat;
            goto LABEL_36;
          }
        }

    unint64_t v54 = self;
    uint64_t v55 = v31;
    goto LABEL_26;
  }

  char v23 = self->_ucat;
  if (v23->var0 <= 20)
  {
    uint64_t v24 = v60;
    if (v23->var0 == -1)
    {
      char v23 = self->_ucat;
      uint64_t v24 = v60;
    }

    [v24 identifier];
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)v23,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:label:pairingIdentity:error:]",  0x14u,  (uint64_t)"FindPairedPeer: '%@', %@, no identity, %{error}\n",  v26,  v27,  v28,  v29,  (char)v25);
  }

  uint64_t v30 = 0;
LABEL_34:

  return v30;
}
}

    endpointFoundHandler = (void (**)(id, CUNANEndpoint *))self->_endpointFoundHandler;
    goto LABEL_27;
  }

  int v33 = self->_ucat;
  if (v33->var0 <= 90)
  {
    if (v33->var0 == -1)
    {
      int v33 = self->_ucat;
    }

    LogPrintF( (uint64_t)v33,  (uint64_t)"-[CUNANSubscriber _subscriber:receivedDiscoveryResult:]",  0x5Au,  (uint64_t)"### WFA discovery result missing identifier\n",  v18,  v19,  v20,  v21,  v45);
  }

    int v19 = 0LL;
    uint64_t v9 = 0LL;
    goto LABEL_26;
  }

  uint64_t v9 = v4;
  if (nw_path_get_status(v4) != nw_path_status_satisfied)
  {
    uint64_t v32 = self->_ucat;
    if (v32->var0 <= 30)
    {
      if (v32->var0 == -1)
      {
        uint64_t v32 = self->_ucat;
      }

      LogPrintF_safe( (uint64_t)v32,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChangedNW:]",  0x1Eu,  (uint64_t)"Path not satisfied",  v10,  v11,  v12,  v13,  v48);
    }

      goto LABEL_26;
    }

    if (gLogCategory_CUPowerSourceMonitor <= 60
      && (gLogCategory_CUPowerSourceMonitor != -1
       || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPowerSourceMonitor, 0x3Cu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_CUPowerSourceMonitor,  (uint64_t)"-[CUPowerSourceMonitor _aggregatePowerSourceLost:]",  0x3Cu,  (uint64_t)"### No aggregate found for lost power source: %@",  v15,  v16,  v17,  v18,  (char)v24);
    }
  }

  else if (gLogCategory_CUPowerSourceMonitor <= 60 {
         && (gLogCategory_CUPowerSourceMonitor != -1
  }
          || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPowerSourceMonitor, 0x3Cu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUPowerSourceMonitor,  (uint64_t)"-[CUPowerSourceMonitor _aggregatePowerSourceLost:]",  0x3Cu,  (uint64_t)"### No accessoryID for aggregate lost: %@",  v8,  v9,  v10,  v11,  (char)v24);
  }

        uint64_t v22 = -[CUPowerSource adapterSharedSource](v70, "adapterSharedSource");
        if (self->_adapterSharedSource != v22) {
          self->_adapterSharedSource = v22;
        }
        char v23 = -[CUPowerSource adapterSourceID](v70, "adapterSourceID");
        if (v23 != self->_adapterSourceID) {
          self->_adapterSourceID = v23;
        }
        uint64_t v24 = 1;
        self->_aggregate = 1;
        if (!-[CUPowerSource charging](v70, "charging")) {
          uint64_t v24 = -[CUPowerSource adapterSourceID](v70, "adapterSourceID") >= 1
        }
             && -[CUPowerSource adapterSourceID](v70, "adapterSourceID") != 0xFFFF;
        -[CUPowerSource chargeLevel](v70, "chargeLevel");
        uint64_t v25 = 1.79769313e308;
        if (v26 < 1.79769313e308)
        {
          -[CUPowerSource chargeLevel](v70, "chargeLevel");
          uint64_t v25 = v27;
        }

        uint64_t v28 = self->_subLeft;
        if (v28)
        {
          -[CUPowerSource chargeLevel](v28, "chargeLevel");
          if (v29 < v25)
          {
            -[CUPowerSource chargeLevel](self->_subLeft, "chargeLevel");
            uint64_t v25 = v30;
          }
        }

        subRight = self->_subRight;
        if (subRight)
        {
          -[CUPowerSource chargeLevel](subRight, "chargeLevel");
          if (v32 < v25)
          {
            -[CUPowerSource chargeLevel](self->_subRight, "chargeLevel");
            uint64_t v25 = v33;
          }
        }

        subCase = self->_subCase;
        if (subCase)
        {
          -[CUPowerSource chargeLevel](subCase, "chargeLevel");
          if (v35 < v25)
          {
            -[CUPowerSource chargeLevel](self->_subCase, "chargeLevel");
            uint64_t v25 = v36;
          }
        }

        uint64_t v37 = -[CUPowerSource expectedComponents](v70, "expectedComponents");
        if (v37 != self->_expectedComponents) {
          self->_expectedComponents = v37;
        }
        -[CUPowerSource groupID](v70, "groupID");
        int v38 = (void *)objc_claimAutoreleasedReturnValue();

        if (v38)
        {
          groupID = self->_groupID;
          char v40 = v38;
          unint64_t v41 = groupID;
          if (v40 == v41)
          {

            goto LABEL_59;
          }

          uint64_t v42 = v41;
          if (v41)
          {
            char v43 = -[NSString isEqual:](v40, "isEqual:", v41);

            if ((v43 & 1) != 0) {
              goto LABEL_59;
            }
          }

          else
          {
          }

          objc_storeStrong((id *)&self->_groupID, v38);
        }
}

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 152));
}

  NTPClockStop(a1, v4, v5, v6, v7, v8, v9, v10);
  return v11;
}

              size_t v18 = (*a1)(v9, v12, a1);
              if ((v18 & 0x80000000) != 0)
              {
                unsigned int v13 = 0LL;
                goto LABEL_110;
              }

              unsigned int v13 = v18;
              uint64_t v14 = (char *)&v9[v12];
              char v40 = v14;
LABEL_27:
              if (stricmp_prefix((unsigned __int8 *)v14, "www."))
              {
                if (stricmp_prefix((unsigned __int8 *)v14, "+1-"))
                {
                  if (stricmp_prefix((unsigned __int8 *)v14, "1-")
                    && stricmp_prefix((unsigned __int8 *)v14, "+1"))
                  {
                    if (*v14 != 49) {
                      goto LABEL_38;
                    }
                    int v19 = 1LL;
                  }

                  else
                  {
                    int v19 = 2LL;
                  }
                }

                else
                {
                  int v19 = 3LL;
                }
              }

              else
              {
                int v19 = 4LL;
              }

              uint64_t v20 = (*a1)((unsigned __int8 *)v14, v19, a1);
              if (v20 < 0) {
                goto LABEL_110;
              }
              unsigned int v13 = (v20 + v13);
              v14 += v19;
              char v40 = v14;
LABEL_38:
              char v21 = &v9[v10];
              else {
                uint64_t v22 = v21 - (unsigned __int8 *)v14;
              }
              char v23 = (*a1)((unsigned __int8 *)v14, v22, a1);
              if (v23 < 0) {
                goto LABEL_110;
              }
              unsigned int v13 = (v23 + v13);
              uint64_t v24 = &v40[v22];
              v40 += v22;
              uint64_t v25 = (*a1)("*", 1LL, a1);
              if (v25 < 0) {
                goto LABEL_110;
              }
              unsigned int v13 = (v25 + v13);
              uint64_t v26 = strchr(v24, 64);
              uint64_t v27 = v26;
              if (v26)
              {
                uint64_t v28 = (*a1)((unsigned __int8 *)v26, 1LL, a1);
                if (v28 < 0) {
                  goto LABEL_110;
                }
                unsigned int v13 = (v28 + v13);
                uint64_t v24 = v27 + 1;
                char v40 = v27 + 1;
              }

              int v29 = v21 - (unsigned __int8 *)v24;
              uint64_t v39 = v21 - (unsigned __int8 *)v24;
              uint64_t v30 = v21 - (unsigned __int8 *)v24;
              if ((unint64_t)(v21 - (unsigned __int8 *)v24) >= 9)
              {
                uint64_t v31 = 9LL;
                uint64_t v30 = v39;
                if (v39 >= 0xA)
                {
                  uint64_t v31 = 10LL;
                  uint64_t v30 = v39;
                }

                if (v30 >= 9)
                {
                  uint64_t v31 = 9LL;
                  uint64_t v30 = v39;
                }
              }

              if (v30 >= 7)
              {
                uint64_t v31 = 7LL;
                uint64_t v30 = v39;
              }

              if (v30 >= 6)
              {
                uint64_t v31 = 6LL;
                uint64_t v30 = v39;
                if (v39 >= 9)
                {
                  uint64_t v31 = 9LL;
                  uint64_t v30 = v39;
                  if (v39 >= 0xF)
                  {
                    uint64_t v31 = 15LL;
                    uint64_t v30 = v39;
                  }

                  if (v30 >= 0xB)
                  {
                    uint64_t v31 = 11LL;
                    uint64_t v30 = v39;
                  }

                  if (v30 >= 0xA)
                  {
                    uint64_t v31 = 10LL;
                    uint64_t v30 = v39;
                  }
                }
              }

              if (v30 >= 5)
              {
                uint64_t v31 = 5LL;
                uint64_t v30 = v39;
                if (v39 >= 5)
                {
                  uint64_t v31 = 5LL;
                  uint64_t v30 = v39;
                }
              }

              if (v30 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 4) {
                goto LABEL_83;
              }
              uint64_t v31 = 4LL;
              if (v39 < 5)
              {
LABEL_83:
                uint64_t v31 = 0LL;
                uint64_t v32 = 0;
LABEL_99:
                if (v29 >= 2) {
                  uint64_t v35 = 2LL;
                }
                else {
                  uint64_t v35 = v29;
                }
                if (!v35)
                {
LABEL_108:
                  if (v32)
                  {
                    int v38 = (*a1)(v21, v31, a1);
                    unsigned int v13 = (v38 & ~(v38 >> 31)) + v13;
                  }

                  goto LABEL_110;
                }

                if (v27)
                {
                  uint64_t v36 = (*a1)("*", 1LL, a1);
                  if (v36 < 0) {
                    goto LABEL_110;
                  }
                  unsigned int v13 = (v36 + v13);
                }

                uint64_t v37 = (*a1)(&v21[-v35], v35, a1);
                if ((v37 & 0x80000000) == 0)
                {
                  unsigned int v13 = (v37 + v13);
                  goto LABEL_108;
                }

  if ((v11 | v12) != 1)
  {
LABEL_28:
    unsigned int v13 = 0LL;
    uint64_t v14 = v51;
    while (1)
    {
      uint64_t v15 = v13 | 1;
      uint64_t v16 = a1[v13];
      if (v16 >= 0x10)
      {
        *uint64_t v14 = a0123456789abcd[v16 >> 4];
        LODWORD(v16) = v16 & 0xF;
        size_t v17 = 1LL;
      }

      else
      {
        if (!a1[v13])
        {
          int v19 = 0LL;
          char v21 = 0LL;
          v13 += 2LL;
          uint64_t v20 = a1[v15];
          if (v20 < 0x10) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }

        size_t v17 = 0LL;
      }

      size_t v18 = a0123456789abcd[v16];
      int v19 = v17 + 1;
      v14[v17] = v18;
      v13 += 2LL;
      uint64_t v20 = a1[v15];
LABEL_34:
      char v21 = v19 + 1;
      v14[v19] = a0123456789abcd[(unint64_t)v20 >> 4];
LABEL_35:
      *(_WORD *)&v14[v21] = a0123456789abcd[v20 & 0xF];
      v14 += 5;
      if (v13 >= 0x10)
      {
        uint64_t v22 = 0;
        char v23 = a1 + 15;
        for (uint64_t i = 28LL; i != -4; i -= 4LL)
        {
          if (*(v23 - 1))
          {
            uint64_t v22 = 0;
          }

          else if (*v23)
          {
            uint64_t v22 = 0;
          }

          else
          {
            ++v22;
          }

          *(_DWORD *)&v50[i + 64] = v22;
          v23 -= 2;
        }

        uint64_t v25 = 0LL;
        uint64_t v26 = 1;
        uint64_t v27 = -1;
        do
        {
          if (*(_DWORD *)&v50[4 * v25 + 64] > v26)
          {
            uint64_t v26 = *(_DWORD *)&v50[4 * v25 + 64];
            uint64_t v27 = v25;
          }

          ++v25;
        }

        while (v25 != 8);
        uint64_t v28 = 0;
        while (1)
        {
          if (v28 == v27)
          {
            if (!v27) {
              *v10++ = 58;
            }
            *int v10 = 58;
            uint64_t v28 = v27 - 1 + *(_DWORD *)&v50[4 * v27 + 64];
          }

          else
          {
            int v29 = v51[5 * v28];
            if (v29)
            {
              uint64_t v30 = &v51[5 * v28 + 1];
              do
              {
                *v10++ = v29;
                uint64_t v31 = *v30++;
                int v29 = v31;
              }

              while (v31);
            }

            if (v28 == 7) {
              goto LABEL_60;
            }
            *int v10 = 58;
          }

          ++v10;
          uint64_t v32 = v28++ < 7;
          if (!v32) {
            goto LABEL_60;
          }
        }
      }
    }
  }

  *(_WORD *)int v10 = 14906;
  if (v11)
  {
    *(_DWORD *)(v10 + 2) = 1717986918;
    v10[6] = 58;
    v10 += 7;
  }

  else
  {
    v10 += 2;
  }

  for (j = 12LL; ; ++j)
  {
    dispatch_source_t v45 = a1[j];
    unint64_t v46 = v50;
    do
    {
      *v46++ = (v45 % 0xA) | 0x30;
      uint64_t v32 = v45 > 9;
      v45 /= 0xAu;
    }

    while (v32);
    while (v46 > v50)
    {
      uint64_t v47 = *--v46;
      *v10++ = v47;
    }

    if (j == 15) {
      break;
    }
    *v10++ = 46;
  }

  if (v12 && !*(_DWORD *)(a1 + 24))
  {
    *(_DWORD *)(a1 + 24) = NSErrorToOSStatusEx(v12, 0LL);
    if ((a3 & 1) != 0) {
      goto LABEL_32;
    }
  }

  else if ((a3 & 1) != 0)
  {
    goto LABEL_32;
  }

  if ((*(_BYTE *)(a1 + 28) & 8) == 0 && gTUXCTestFailer) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(gTUXCTestFailer + 16))(gTUXCTestFailer, v9, v10, v11);
  }
LABEL_32:

  return v16;
}

void _BonjourDevice_Free(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void _BonjourService_Free(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 32) = 0LL;
  }

  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 40) = 0LL;
  }

  *(void *)(a1 + 72) = 0LL;
  uint64_t v5 = *(_DNSServiceRef_t **)(a1 + 88);
  if (v5)
  {
    DNSServiceRefDeallocate(v5);
    *(void *)(a1 + 88) = 0LL;
  }

  while (1)
  {
    uint64_t v6 = *(void **)(a1 + 96);
    if (!v6) {
      break;
    }
    *(void *)(a1 + 96) = *v6;
    free(v6);
  }

  free((void *)a1);
}

void _BonjourBrowser_NANEndpointLost(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "serviceType"), "UTF8String");
  if (v4)
  {
    uint64_t v9 = (const char *)v4;
    uint64_t v10 = objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String");
    if (v10) {
      uint64_t v15 = (const char *)v10;
    }
    else {
      uint64_t v15 = "";
    }
    int v16 = *(_DWORD *)(a1 + 72);
    if (gLogCategory_BonjourBrowser <= 20
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x14u)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointLost(BonjourBrowserRef, CUNANEndpoint *)",  0x14u,  (uint64_t)"Bonjour NAN lost: %s.%s%s on %u\n",  v11,  v12,  v13,  v14,  (char)v15);
    }

    uint64_t v18 = a1 + 80;
    uint64_t v17 = *(void *)(a1 + 80);
    if (v17)
    {
      while (1)
      {
        int v19 = (void *)v18;
        uint64_t v18 = v17;
        if (*(_DWORD *)(v17 + 48) == v16
          && !strcasecmp(*(const char **)(v17 + 24), v15)
          && !strcasecmp(*(const char **)(v18 + 32), v9)
          && !strcasecmp(*(const char **)(v18 + 40), "local."))
        {
          break;
        }

        uint64_t v17 = *(void *)v18;
        if (!*(void *)v18) {
          return;
        }
      }

      *int v19 = *(void *)v18;
      _BonjourBrowser_RemoveService(a1, v18, 1);
      _BonjourService_Free(v18);
    }
  }

  else if (gLogCategory_BonjourBrowser <= 60 {
         && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x3Cu)))
  }
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_NANEndpointLost(BonjourBrowserRef, CUNANEndpoint *)",  0x3Cu,  (uint64_t)"### Bonjour NAN lost without service type: %@\n",  v5,  v6,  v7,  v8,  (char)a2);
  }

uint64_t _BonjourBrowser_RetryTimerFired( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gLogCategory_BonjourBrowser <= 50
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_RetryTimerFired(void *)",  0x32u,  (uint64_t)"Retrying Bonjour start for %s after failure\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 128));
  }

  uint64_t v9 = *(dispatch_object_s **)(a1 + 112);
  if (v9)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v9);
    *(void *)(a1 + 112) = 0LL;
  }

  *(void *)(a1 + 104) = mach_absolute_time();
  return _BonjourBrowser_EnsureStarted((DNSServiceRef *)a1);
}

void BonjourBrowser_Stop(dispatch_queue_t *a1)
{
}

void _BonjourBrowser_Stop( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(unsigned __int8 *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = 0;
  if (v9
    && gLogCategory_BonjourBrowser <= 30
    && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_Stop(void *)",  0x1Eu,  (uint64_t)"Stopping browse for %s\n",  a5,  a6,  a7,  a8,  *(void *)(a1 + 128));
  }

  uint64_t v10 = *(dispatch_object_s **)(a1 + 112);
  if (v10)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    dispatch_release(v10);
    *(void *)(a1 + 112) = 0LL;
  }

  _BonjourBrowser_NANEnsureStopped(a1, 1, a3, a4, a5, a6, a7, a8);
  _BonjourBrowser_EnsureStoppedDNSSD((void *)a1);
  if (v9)
  {
    _BonjourBrowser_PostEvent(a1, 3, 0LL, 0LL);
    if (gLogCategory_BonjourBrowser <= 30
      && (gLogCategory_BonjourBrowser != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_Stop(void *)",  0x1Eu,  (uint64_t)"Stopped browse for %s\n",  v11,  v12,  v13,  v14,  *(void *)(a1 + 128));
    }

    CFRelease((CFTypeRef)a1);
  }

  uint64_t v15 = *(void **)(a1 + 128);
  if (v15)
  {
    free(v15);
    *(void *)(a1 + 128) = 0LL;
  }

  int v16 = *(void **)(a1 + 136);
  if (v16)
  {
    free(v16);
    *(void *)(a1 + 136) = 0LL;
  }

  uint64_t v17 = *(void **)(a1 + 144);
  if (v17)
  {
    free(v17);
    *(void *)(a1 + 144) = 0LL;
  }

  CFRelease((CFTypeRef)a1);
}

uint64_t BonjourBrowser_CopyDevices(uint64_t a1, int *a2)
{
  uint64_t context = a1;
  uint64_t v5 = 0LL;
  int v6 = 1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)_BonjourBrowser_CopyDevices);
  if (a2) {
    *a2 = v6;
  }
  return v5;
}

void _BonjourBrowser_CopyDevices(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    for (uint64_t i = *(void **)(*(void *)a1 + 88LL); i; uint64_t i = (void *)*i)
    {
      uint64_t v5 = _BonjourDevice_CreateDictionary((uint64_t)i, &v8);
      if (v5)
      {
        int v6 = v5;
        CFArrayAppendValue(v3, v5);
        CFRelease(v6);
      }
    }

    int v7 = 0;
    *(void *)(a1 + 8) = v3;
  }

  else
  {
    int v7 = -6728;
  }

  *(_DWORD *)(a1 + 16) = v7;
}

void BonjourBrowser_ReconfirmDevice(dispatch_queue_t *a1, const void *a2)
{
}

void BonjourBrowser_ReconfirmDeviceEx(dispatch_queue_t *a1, const void *a2, const char *a3)
{
  int v6 = malloc(0x18uLL);
  if (v6)
  {
    int v7 = v6;
    *int v6 = a1;
    v6[1] = a2;
    if (a3) {
      int v8 = strdup(a3);
    }
    else {
      int v8 = 0LL;
    }
    v7[2] = v8;
    CFRetain(a2);
    CFRetain(a1);
    dispatch_async_f(a1[2], v7, (dispatch_function_t)_BonjourBrowser_ReconfirmDevice);
  }

void _BonjourBrowser_ReconfirmDevice(void *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  v15[0] = 0;
  uint64_t v2 = *(const __CFDictionary **)a1;
  CFDictionaryGetCString(*((const __CFDictionary **)a1 + 1), @"deviceID", v15, 0x40uLL, 0LL);
  if (v15[0])
  {
    uint64_t v3 = (char *)v2 + 88;
    while (1)
    {
      uint64_t v3 = *(char **)v3;
      if (!v3) {
        break;
      }
      if (!strcasecmp(v3 + 16, v15))
      {
        for (uint64_t i = *((void *)v3 + 11); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v5 = (const char *)*((void *)a1 + 2);
          if ((!v5 || !strcasecmp(v5, (const char *)(i + 52)))
            && !DNSServiceConstructFullName( fullName,  *(const char *const *)(i + 24),  *(const char *const *)(i + 32),  *(const char *const *)(i + 40)))
          {
            DomainNameFromDNSNameString = MakeDomainNameFromDNSNameString(rdata, fullName);
            if (DomainNameFromDNSNameString)
            {
              __int16 v7 = (__int16)DomainNameFromDNSNameString;
              snprintf(fullName, 0x3F1uLL, "%s%s", *(const char **)(i + 32), *(const char **)(i + 40));
              if (gLogCategory_BonjourBrowser <= 50
                && (gLogCategory_BonjourBrowser != -1
                 || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
              {
                LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"void _BonjourBrowser_ReconfirmDevice(void *)",  0x32u,  (uint64_t)"Reconfirming PTR for %s.%s%s on %s\n",  v8,  v9,  v10,  v11,  *(_OWORD *)(i + 24));
              }

              DNSServiceReconfirmRecord(0, *(_DWORD *)(i + 48), fullName, 0xCu, 1u, v7 - (unsigned __int16)rdata, rdata);
            }
          }
        }

        break;
      }
    }
  }

  uint64_t v12 = (void *)*((void *)a1 + 2);
  if (v12) {
    free(v12);
  }
  CFRelease(*((CFTypeRef *)a1 + 1));
  free(a1);
  CFRelease(v2);
}

uint64_t BonjourDevice_Reconfirm(const __CFDictionary *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  regtype[0] = 0;
  CFDictionaryGetCString(a1, @"serviceType", regtype, 0x80uLL, 0LL);
  CFTypeID TypeID = CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(a1, @"services", TypeID, 0LL);
  if (!TypedValue) {
    return 0LL;
  }
  uint64_t v4 = TypedValue;
  CFIndex Count = CFArrayGetCount(TypedValue);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v6 = Count;
  uint64_t v7 = 0LL;
  for (CFIndex i = 0LL; i != v6; ++i)
  {
    CFTypeID v9 = CFDictionaryGetTypeID();
    TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v4, i, v9, 0LL);
    if (TypedValueAtIndex)
    {
      uint64_t v11 = TypedValueAtIndex;
      service[0] = 0;
      Value = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, @"rawName");
      if (Value)
      {
        CFGetCString(Value, service, 0x80uLL);
        domain[0] = 0;
        uint64_t v13 = (const __CFString *)CFDictionaryGetValue(v11, @"domain");
        if (v13) {
          CFGetCString(v13, domain, 0x3F1uLL);
        }
        else {
          domain[0] = 0;
        }
        uint64_t v14 = (const __CFString *)CFDictionaryGetValue(v11, @"ifindex");
        if (v14) {
          uint32_t v15 = CFGetInt64(v14, 0LL);
        }
        else {
          uint32_t v15 = 0;
        }
        if (!DNSServiceConstructFullName(fullName, service, regtype, domain))
        {
          DomainNameFromDNSNameString = MakeDomainNameFromDNSNameString(rdata, fullName);
          if (DomainNameFromDNSNameString)
          {
            __int16 v17 = (__int16)DomainNameFromDNSNameString;
            snprintf(fullName, 0x3F1uLL, "%s%s", regtype, domain);
            unsigned int v18 = DNSServiceReconfirmRecord(0, v15, fullName, 0xCu, 1u, v17 - (unsigned __int16)rdata, rdata);
            if ((_DWORD)v7) {
              BOOL v23 = 1;
            }
            else {
              BOOL v23 = v18 == 0;
            }
            if (v23) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = v18;
            }
            if (gLogCategory_BonjourBrowser <= 50
              && (gLogCategory_BonjourBrowser != -1
               || _LogCategory_Initialize((uint64_t)&gLogCategory_BonjourBrowser, 0x32u)))
            {
              LogPrintF( (uint64_t)&gLogCategory_BonjourBrowser,  (uint64_t)"OSStatus BonjourDevice_Reconfirm(CFDictionaryRef)",  0x32u,  (uint64_t)"Reconfirm PTR for %s.%s%s%%%u: %#m\n",  v19,  v20,  v21,  v22,  (char)service);
            }
          }
        }
      }

      else
      {
        service[0] = 0;
      }
    }
  }

  return v7;
}

CFDataRef BonjourDevice_CopyCFString(const __CFDictionary *a1, const char *a2, int *a3)
{
  uint64_t result = (const __CFData *)CFDictionaryGetValue(a1, @"txt");
  if (result)
  {
    CFIndex v6 = result;
    BytePtr = CFDataGetBytePtr(result);
    uint16_t Length = CFDataGetLength(v6);
    uint64_t result = (const __CFData *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
    if (result)
    {
      if (valueLen)
      {
        uint64_t v9 = 0LL;
        while (*((_BYTE *)result + v9))
        {
          if (valueLen == ++v9)
          {
            LOBYTE(v9) = valueLen;
            break;
          }
        }
      }

      else
      {
        LOBYTE(v9) = 0;
      }

      uint8_t valueLen = v9;
      uint64_t result = (const __CFData *)CFStringCreateWithBytes(0LL, (const UInt8 *)result, v9, 0x8000100u, 0);
      if (result) {
        int v10 = 0;
      }
      else {
        int v10 = -6742;
      }
    }

    else
    {
      int v10 = -6727;
    }
  }

  else
  {
    int v10 = -6762;
  }

  if (a3) {
    *a3 = v10;
  }
  return result;
}

uint64_t BonjourDevice_GetBitListValue(const __CFDictionary *a1, const char *a2, int *a3)
{
  unsigned int v13 = 0;
  Value = (const __CFData *)CFDictionaryGetValue(a1, @"txt");
  if (Value)
  {
    CFIndex v6 = Value;
    BytePtr = CFDataGetBytePtr(Value);
    uint16_t Length = CFDataGetLength(v6);
    ValuePtr = (char *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
    if (ValuePtr) {
      int v10 = BitListString_Parse(ValuePtr, valueLen, &v13);
    }
    else {
      int v10 = -6727;
    }
  }

  else
  {
    int v10 = -6762;
  }

  if (a3) {
    *a3 = v10;
  }
  return v13;
}

unint64_t BonjourDevice_GetDeviceID(const __CFDictionary *a1, char *a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  Value = (const __CFString *)CFDictionaryGetValue(a1, @"deviceID");
  if (Value)
  {
    if (CFStringGetCString(Value, buffer, 64LL, 0x600u))
    {
      if (!a2) {
        a2 = &v9;
      }
      int v6 = TextToHardwareAddress(buffer, 0xFFFFFFFFFFFFFFFFLL, 6LL, a2);
      if (v6) {
        unint64_t v7 = 0LL;
      }
      else {
        unint64_t v7 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5];
      }
    }

    else
    {
      unint64_t v7 = 0LL;
      int v6 = -6742;
    }
  }

  else
  {
    unint64_t v7 = 0LL;
    int v6 = -6762;
  }

  if (a3) {
    *a3 = v6;
  }
  return v7;
}

__CFArray *BonjourDevice_CopyConnectionInfo(const __CFDictionary *a1, uint64_t a2, const void *a3, int *a4)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t context = a2;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (!Mutable)
  {
    int v38 = -6728;
    if (!a4) {
      return Mutable;
    }
    goto LABEL_24;
  }

  CFTypeID TypeID = CFArrayGetTypeID();
  char v40 = a1;
  TypedValue = CFDictionaryGetTypedValue(a1, @"wakeArray", TypeID, 0LL);
  if (TypedValue)
  {
    int v10 = TypedValue;
    CFIndex Count = CFArrayGetCount(TypedValue);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      CFIndex v13 = 0LL;
      uint64_t v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
      uint32_t v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
      do
      {
        CFTypeID v16 = CFDataGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v16, 0LL);
        if (TypedValueAtIndex)
        {
          unsigned int v18 = TypedValueAtIndex;
          if (CFDataGetLength(TypedValueAtIndex) == 6)
          {
            BytePtr = CFDataGetBytePtr(v18);
            SNPrintF( (uint64_t)v42,  32LL,  "wake://%02X-%02X-%02X-%02X-%02X-%02X",  v20,  v21,  v22,  v23,  v24,  *BytePtr,  BytePtr[1],  BytePtr[2],  BytePtr[3],  BytePtr[4],  BytePtr[5],  v40);
            uint64_t v25 = CFDictionaryCreateMutable(0LL, 0LL, v14, v15);
            if (!v25)
            {
              int v38 = -6728;
              uint64_t v30 = Mutable;
              CFMutableArrayRef Mutable = 0LL;
              goto LABEL_21;
            }

            uint64_t v26 = v25;
            CFDictionarySetCString(v25, @"dnsName", v42, -1LL);
            CFArrayAppendValue(Mutable, v26);
            CFRelease(v26);
          }
        }

        ++v13;
      }

      while (v12 != v13);
    }
  }

  CFTypeID v27 = CFArrayGetTypeID();
  uint64_t v28 = CFDictionaryGetTypedValue(v40, @"services", v27, 0LL);
  if (!v28)
  {
    int v38 = 0;
    if (!a4) {
      return Mutable;
    }
LABEL_24:
    *a4 = v38;
    return Mutable;
  }

  CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, v28);
  if (MutableCopy)
  {
    uint64_t v30 = MutableCopy;
    v44.length = CFArrayGetCount(MutableCopy);
    v44.location = 0LL;
    CFArraySortValues(v30, v44, (CFComparatorFunction)_BonjourService_Comparator, &context);
    CFIndex v31 = CFArrayGetCount(v30);
    if (v31 >= 1)
    {
      CFIndex v32 = v31;
      for (CFIndex i = 0LL; i != v32; ++i)
      {
        CFTypeID v34 = CFDictionaryGetTypeID();
        uint64_t v35 = CFArrayGetTypedValueAtIndex(v30, i, v34, 0LL);
        if (v35)
        {
          uint64_t v36 = v35;
          if (!a3 || (Value = CFDictionaryGetValue(v35, @"ifname")) != 0LL && CFEqual(Value, a3)) {
            CFArrayAppendValue(Mutable, v36);
          }
        }
      }
    }

    int v38 = 0;
  }

  else
  {
    int v38 = -6728;
    uint64_t v30 = Mutable;
    CFMutableArrayRef Mutable = 0LL;
  }

unint64_t _BonjourService_Comparator( const __CFDictionary *a1, const __CFDictionary *a2, unint64_t *a3)
{
  unint64_t v5 = *a3;
  CFTypeID TypeID = CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(a1, @"domain", TypeID, 0LL);
  if (TypedValue)
  {
    if (CFEqual(TypedValue, @"local.")) {
      uint64_t v8 = -1LL;
    }
    else {
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  CFTypeID v9 = CFStringGetTypeID();
  int v10 = CFDictionaryGetTypedValue(a2, @"domain", v9, 0LL);
  if (v10) {
    BOOL v11 = CFEqual(v10, @"local.") != 0;
  }
  else {
    BOOL v11 = 0LL;
  }
  unint64_t v12 = v11 + v8;
  if (!v12)
  {
    int Int64 = CFDictionaryGetInt64(a1, @"transportType", 0LL);
    unsigned int v14 = CFDictionaryGetInt64(a2, @"transportType", 0LL);
    LODWORD(v12) = ((v14 >> 4) & 1) + (Int64 << 27 >> 31);
    if ((_DWORD)v12) {
      return (int)v12;
    }
    LODWORD(v12) = ((v14 >> 3) & 1) + (Int64 << 28 >> 31);
    if ((_DWORD)v12)
    {
      return (int)v12;
    }

    else
    {
      uint64_t v15 = 1LL;
      if (Int64 != 4 && Int64 != 64) {
        uint64_t v15 = Int64 == 128;
      }
      BOOL v16 = 1;
      if (v14 != 4 && v14 != 64) {
        BOOL v16 = v14 == 128;
      }
      uint64_t v17 = v15 << 63 >> 63;
      if ((v5 & 0x8000000000000000LL) == 0 || (unint64_t v12 = v17 + v16) == 0)
      {
        BOOL v18 = 1LL;
        if (v14 != 1 && v14 != 8) {
          BOOL v18 = v14 == 16;
        }
        uint64_t v19 = -1LL;
        if (Int64 != 1 && Int64 != 8)
        {
          if (Int64 == 16) {
            uint64_t v19 = -1LL;
          }
          else {
            uint64_t v19 = 0LL;
          }
        }

        unint64_t v12 = v19 + v18;
        if (!v12 && ((v5 & 0x8000000000000000LL) != 0 || (unint64_t v12 = !v16 - (unint64_t)((v17 & 1) == 0)) == 0))
        {
          else {
            return 0LL;
          }
        }
      }
    }
  }

  return v12;
}

void *BonjourDevice_CopyDNSNames(const __CFDictionary *a1, uint64_t a2, int *a3)
{
  unint64_t v46 = 0LL;
  uint64_t context = a2;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, @"services");
  if (Value) {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }
  unint64_t v7 = MutableCopy;
  if (MutableCopy)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(a1, @"wakeArray", TypeID, 0LL);
    if (TypedValue && (int v10 = TypedValue, v11 = CFArrayGetCount(TypedValue), v11 >= 1))
    {
      CFIndex v12 = v11;
      CFIndex v13 = 0LL;
      while (1)
      {
        CFTypeID v14 = CFDataGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v14, 0LL);
        if (TypedValueAtIndex)
        {
          BOOL v16 = TypedValueAtIndex;
          if (CFDataGetLength(TypedValueAtIndex) == 6)
          {
            CFDataGetBytePtr(v16);
            uint64_t v23 = v46 ? "\x1E" : "";
            if ((int)AppendPrintF( &v46,  (uint64_t)"%swake://%02X-%02X-%02X-%02X-%02X-%02X",  v17,  v18,  v19,  v20,  v21,  v22,  (uint64_t)v23) < 1) {
              break;
            }
          }
        }

        if (v12 == ++v13)
        {
          if (v46) {
            goto LABEL_18;
          }
          goto LABEL_16;
        }
      }
    }

    else
    {
LABEL_16:
      CFDataOfuint16_t Length = CFDictionaryGetCFDataOfLength(a1, @"wakeAddr", 6LL, 0LL);
      if (!CFDataOfLength
        || (CFDataGetBytePtr(CFDataOfLength),
            (int)AppendPrintF( &v46,  (uint64_t)"%swake://%02X-%02X-%02X-%02X-%02X-%02X",  v25,  v26,  v27,  v28,  v29,  v30,  (uint64_t)"") >= 1))
      {
LABEL_18:
        v48.length = CFArrayGetCount(v7);
        v48.location = 0LL;
        CFArraySortValues(v7, v48, (CFComparatorFunction)_BonjourService_Comparator, &context);
        CFIndex Count = CFArrayGetCount(v7);
        if (Count < 1)
        {
LABEL_26:
          uint64_t v43 = v46;
          if (v46) {
            int v44 = 0;
          }
          else {
            int v44 = -6727;
          }
          if (!v7) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }

        CFIndex v32 = Count;
        CFIndex v33 = 0LL;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v33);
          CFTypeID v35 = CFStringGetTypeID();
          if (CFDictionaryGetTypedValue(ValueAtIndex, @"dnsName", v35, 0LL))
          {
            uint64_t v42 = v46 ? "\x1E" : "";
          }

          if (v32 == ++v33) {
            goto LABEL_26;
          }
        }
      }
    }

    int v44 = -6700;
  }

  else
  {
    int v44 = -6728;
  }

  if (v46) {
    free(v46);
  }
  uint64_t v43 = 0LL;
  if (v7) {
LABEL_30:
  }
    CFRelease(v7);
LABEL_31:
  if (a3) {
    *a3 = v44;
  }
  return v43;
}

uint64_t BonjourDevice_GetDNSName(const __CFDictionary *a1, unint64_t a2, char *a3, size_t a4)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(a1, @"wakeArray", TypeID, 0LL);
    uint64_t v55 = a3;
    if (!TypedValue) {
      goto LABEL_59;
    }
    int v10 = TypedValue;
    CFIndex Count = CFArrayGetCount(TypedValue);
    if (Count < 1) {
      goto LABEL_59;
    }
    CFIndex v12 = Count;
    CFIndex v13 = 0LL;
    char v14 = 1;
    do
    {
      while (1)
      {
        CFTypeID v15 = CFDataGetTypeID();
        TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v10, v13, v15, 0LL);
        if (!TypedValueAtIndex) {
          break;
        }
        uint64_t v17 = TypedValueAtIndex;
        if (CFDataGetLength(TypedValueAtIndex) != 6) {
          break;
        }
        BytePtr = CFDataGetBytePtr(v17);
        int v24 = SNPrintF( (uint64_t)v55,  a4,  "wake://%02X-%02X-%02X-%02X-%02X-%02X%s",  v19,  v20,  v21,  v22,  v23,  *BytePtr,  BytePtr[1],  BytePtr[2],  BytePtr[3],  BytePtr[4],  BytePtr[5],  "\x1E");
        if (v24 < 1) {
          return 4294960596LL;
        }
        char v14 = 0;
        v55 += v24;
        a4 -= v24;
        if (++v13 == v12) {
          goto LABEL_17;
        }
      }

      ++v13;
    }

    while (v12 != v13);
    if ((v14 & 1) != 0)
    {
LABEL_59:
      CFDataOfuint16_t Length = CFDictionaryGetCFDataOfLength(a1, @"wakeAddr", 6LL, 0LL);
      if (CFDataOfLength)
      {
        uint64_t v26 = CFDataGetBytePtr(CFDataOfLength);
        int v32 = SNPrintF( (uint64_t)v55,  a4,  "wake://%02X-%02X-%02X-%02X-%02X-%02X%s",  v27,  v28,  v29,  v30,  v31,  *v26,  v26[1],  v26[2],  v26[3],  v26[4],  v26[5],  "\x1E");
        if (v32 < 1) {
          return 4294960596LL;
        }
        v55 += v32;
        a4 -= v32;
      }
    }
  }

  else
  {
    uint64_t v55 = 0LL;
  }

uint64_t BonjourDevice_GetInt64(const __CFDictionary *a1, const char *a2, int a3, int *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v35 = 0LL;
  Value = (const __CFData *)CFDictionaryGetValue(a1, @"txt");
  if (!Value)
  {
    int v30 = -6762;
    goto LABEL_36;
  }

  uint64_t v8 = Value;
  BytePtr = CFDataGetBytePtr(Value);
  uint16_t Length = CFDataGetLength(v8);
  ValuePtr = (char *)TXTRecordGetValuePtr(Length, BytePtr, a2, &valueLen);
  if (!ValuePtr)
  {
    int v30 = -6727;
    goto LABEL_36;
  }

  uint64_t v12 = valueLen;
  if (valueLen > 0x3FuLL)
  {
    int v30 = -6743;
    goto LABEL_36;
  }

  CFIndex v13 = ValuePtr;
  __memcpy_chk();
  __s[v12] = 0;
  if (strnicmpx((unsigned __int8 *)v13, v12, "true")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "yes")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "y")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "on")
    && strnicmpx((unsigned __int8 *)v13, valueLen, "1"))
  {
    if (strnicmpx((unsigned __int8 *)v13, valueLen, "false")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "no")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "n")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "off")
      && strnicmpx((unsigned __int8 *)v13, valueLen, "0"))
    {
      HIDWORD(v20) = a3;
      LODWORD(v20) = a3;
      unsigned int v19 = v20 >> 1;
      if (v19 > 8 || ((0x131u >> v19) & 1) == 0) {
        goto LABEL_32;
      }
      if (SNScanF( v13,  valueLen,  (unsigned __int8 *)off_189F2FF70[v19],  v14,  v15,  v16,  v17,  v18,  (int)&v35) != 1) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v35 = 0LL;
    }
  }

  else
  {
    uint64_t v35 = 1LL;
  }

  uint64_t v21 = strchr(__s, 44);
  if (!v21)
  {
    int v30 = 0;
    goto LABEL_36;
  }

  uint64_t v34 = 0LL;
  uint64_t v22 = (unsigned __int8 *)(v21 + 1);
  if (!strnicmpx((unsigned __int8 *)v21 + 1, -1LL, "true")
    || !strnicmpx(v22, -1LL, "yes")
    || !strnicmpx(v22, -1LL, "y")
    || !strnicmpx(v22, -1LL, "on")
    || !strnicmpx(v22, -1LL, "1"))
  {
    uint64_t v31 = 0x100000000LL;
LABEL_34:
    int v30 = 0;
    v35 |= v31;
    goto LABEL_36;
  }

  if (!strnicmpx(v22, -1LL, "false")
    || !strnicmpx(v22, -1LL, "no")
    || !strnicmpx(v22, -1LL, "n")
    || !strnicmpx(v22, -1LL, "off")
    || !strnicmpx(v22, -1LL, "0"))
  {
    uint64_t v31 = 0LL;
    goto LABEL_34;
  }

  HIDWORD(v29) = a3;
  LODWORD(v29) = a3;
  unsigned int v28 = v29 >> 1;
  if (v28 > 8 || ((0x131u >> v28) & 1) == 0)
  {
LABEL_32:
    int v30 = -6705;
    goto LABEL_36;
  }

  if (SNScanF( (char *)v22,  0xFFFFFFFFFFFFFFFFLL,  (unsigned __int8 *)off_189F2FF70[v28],  v23,  v24,  v25,  v26,  v27,  (int)&v34) == 1)
  {
    uint64_t v31 = v34 << 32;
    goto LABEL_34;
  }

LABEL_46:
  int v30 = -6742;
LABEL_36:
  if (a4) {
    *a4 = v30;
  }
  return v35;
}

  os_channel_attr_destroy();
LABEL_47:
  unsigned int v28 = self->_ucat;
  if (v28->var0 <= 90)
  {
    if (v28->var0 == -1)
    {
      unsigned int v28 = self->_ucat;
    }

    LogPrintF( (uint64_t)v28,  (uint64_t)"-[CUBluetoothScalablePipe _setupPipe]",  0x5Au,  (uint64_t)"### Setup pipe failed: %#m\n",  v5,  v6,  v7,  v8,  v23);
  }

        [v4 pairedPeer];
        __int128 v63 = (void *)objc_claimAutoreleasedReturnValue();
        [v63 setPublicKey:v12];

        [v4 completion];
        v64 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
        [v4 pairedPeer];
        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(void, void *, void))v64)[2](v64, v65, 0LL);

        goto LABEL_38;
      }

      __int128 v62 = self->_ucat;
      if (v62->var0 > 90) {
        goto LABEL_14;
      }
      if (v62->var0 == -1)
      {
        __int128 v62 = self->_ucat;
      }

      LogPrintF( (uint64_t)v62,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:]",  0x5Au,  (uint64_t)"### FindPairedPeer: '%@', no HAP public key\n",  v13,  v14,  v15,  v16,  (char)v8);
    }

    else
    {
      int v30 = self->_ucat;
      if (v30->var0 > 90)
      {
LABEL_15:

        goto LABEL_16;
      }

      if (v30->var0 == -1)
      {
        int v30 = self->_ucat;
      }

      [v4 identifier];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v30,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:]",  0x5Au,  (uint64_t)"### FindPairedPeer: '%@', no HAP identity, %{error}\n",  v31,  v32,  v33,  v34,  (char)v8);
    }

  if (a3 == 2)
  {
    *(void *)&v70[8] = 0LL;
    *(void *)v70 = 2316173840LL;
    unint64_t v40 = v14;
    uint64_t v41 = 16;
    goto LABEL_61;
  }

  v66 = 1;
  if (setsockopt(v14, 41, 27, &v66, 4u) && (!*__error() || *__error()))
  {
    unint64_t v46 = self->_ucat;
    if (v46->var0 <= 90)
    {
      if (v46->var0 == -1)
      {
        unint64_t v46 = self->_ucat;
      }

      LogPrintF( (uint64_t)v46,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket IPV6_V6ONLY failed (%s): %#m\n",  v42,  v43,  v44,  v45,  (char)v9);
    }
  }

  if (a4) {
    *a4 = v39;
  }

  return v13;
}

  if (self->_wifiDevice)
  {
    if (!self->_wifiDeviceSetup)
    {
      WiFiDeviceClientRegisterRemovalCallback();
      self->_wifiDeviceSetup = 1;
      uint64_t v27 = self->_ucat;
      if (v27->var0 <= 30)
      {
        if (v27->var0 != -1)
        {
LABEL_50:
          LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]",  0x1Eu,  (uint64_t)"WiFiDeviceClient started\n",  v23,  v24,  v25,  v26,  v37);
          goto LABEL_52;
        }

        if (_LogCategory_Initialize((uint64_t)v27, 0x1Eu))
        {
          uint64_t v27 = self->_ucat;
          goto LABEL_50;
        }
      }
    }
  }

    uint64_t result = 4294960568LL;
    goto LABEL_36;
  }

  uint64_t result = 4294960587LL;
LABEL_36:
  *a1 = 0;
  return result;
}

        unsigned int v28 = v22;
        uint64_t v22 = *v19;
        break;
      default:
        break;
    }

    v121 = v28;
    if (!v22) {
      return v120;
    }
    a3 = v19 + 1;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    CFIndex v36 = 0;
    uint64_t v37 = 10LL;
    switch(v22)
    {
      case '[':
        if (v28) {
          return v120;
        }
        uint64_t v38 = v19[1];
        uint64_t v39 = v19 + 2;
        if (v38 == 94) {
          unint64_t v40 = 2LL;
        }
        else {
          unint64_t v40 = 1LL;
        }
        if (v38 == 94) {
          uint64_t v41 = v19 + 2;
        }
        else {
          uint64_t v41 = v19 + 1;
        }
        uint64_t v42 = v19[v40];
        uint64_t v43 = v42 == 93;
        if (v42 == 93) {
          int v44 = v41 + 1;
        }
        else {
          int v44 = v41;
        }
        while (2)
        {
          if (!*v44) {
            return v120;
          }
          if (*v44 != 93)
          {
            ++v44;
            ++v43;
            continue;
          }

          break;
        }

        unint64_t v5 = v13;
        if (v38 == 94)
        {
          if (v13 >= v122) {
            goto LABEL_285;
          }
          unint64_t v5 = v13;
          while (*v5)
          {
            __int128 v62 = __OFSUB__(v24--, 1);
            if (v24 < 0 != v62) {
              break;
            }
            if (v39 < v44)
            {
              v75 = 0LL;
              do
              {
                ++v75;
              }

              while (v43 != v75);
            }

            if (++v5 == v122)
            {
              unint64_t v5 = v122;
              break;
            }
          }
        }

        else
        {
          if (v13 >= v122) {
            goto LABEL_285;
          }
          unint64_t v5 = v13;
          while (*v5)
          {
            __int128 v62 = __OFSUB__(v24, 1);
            if (--v24 < 0 != v62) {
              break;
            }
            v90 = v43;
            v91 = v41;
            if (a3 >= v44) {
              break;
            }
            while (*v91 != *v5)
            {
              ++v91;
              if (!--v90) {
                goto LABEL_285;
              }
            }

            if (++v5 == v122)
            {
              unint64_t v5 = v122;
              break;
            }
          }
        }

          uint64_t v25 = &a1[a2];
          goto LABEL_53;
        }

        uint64_t v25 = &a1[a2];
LABEL_49:
        if (DomainEndsInDot(a4))
        {
          uint64_t result = 0LL;
        }

        else if (a2 > 1003)
        {
LABEL_53:
          uint64_t result = 4294960591LL;
        }

        else
        {
          uint64_t result = 0LL;
          *v25++ = 46;
        }

        *uint64_t v25 = 0;
      }
    }
  }

  return result;
}

uint64_t BonjourDevice_MergeInfo(uint64_t *a1, CFTypeRef cf)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    CFRetain(cf);
    *a1 = (uint64_t)cf;
    return v4;
  }

  CFTypeID TypeID = CFArrayGetTypeID();
  TypedValue = CFDictionaryGetTypedValue((const __CFDictionary *)v4, @"services", TypeID, 0LL);
  unint64_t v7 = TypedValue;
  if (TypedValue) {
    CFRetain(TypedValue);
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)v4);
  if (!MutableCopy)
  {
    uint64_t v4 = 4294960568LL;
    if (!v7) {
      return v4;
    }
    goto LABEL_56;
  }

  CFTypeID v9 = MutableCopy;
  CFDictionaryApplyFunction( (CFDictionaryRef)cf,  (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier,  MutableCopy);
  CFDictionaryRemoveValue(v9, @"removedServices");
  CFTypeID v10 = CFArrayGetTypeID();
  CFIndex v11 = CFDictionaryGetTypedValue((const __CFDictionary *)cf, @"services", v10, 0LL);
  if (v11)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(0LL, 0LL, v11);
    if (Mutable) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v4 = 4294960568LL;
    uint64_t v17 = v9;
    goto LABEL_55;
  }

  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (!Mutable) {
    goto LABEL_11;
  }
LABEL_7:
  theArray = Mutable;
  CFTypeID v13 = CFArrayGetTypeID();
  uint64_t v14 = CFDictionaryGetTypedValue((const __CFDictionary *)cf, @"removedServices", v13, 0LL);
  uint64_t v15 = v14;
  if (v14) {
    CFIndex Count = CFArrayGetCount(v14);
  }
  else {
    CFIndex Count = 0LL;
  }
  CFTypeRef cfa = (CFTypeRef)v4;
  int v44 = a1;
  uint64_t v42 = v9;
  if (v11)
  {
    CFIndex v18 = CFArrayGetCount(v11);
    if (!v7) {
      goto LABEL_46;
    }
LABEL_17:
    CFIndex v47 = CFArrayGetCount(v7);
    if (v47 >= 1)
    {
      CFIndex v19 = 0LL;
      unint64_t v46 = v7;
      do
      {
        CFTypeID v20 = CFDictionaryGetTypeID();
        theDict = CFArrayGetTypedValueAtIndex(v7, v19, v20, 0LL);
        if (theDict)
        {
          Value = CFDictionaryGetValue(theDict, @"domain");
          uint64_t v22 = CFDictionaryGetValue(theDict, @"ifname");
          if (v18 < 1)
          {
LABEL_32:
            if (Count < 1)
            {
LABEL_44:
              CFArrayAppendValue(theArray, theDict);
            }

            else
            {
              CFIndex v29 = 0LL;
              while (1)
              {
                CFTypeID v30 = CFDictionaryGetTypeID();
                TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v15, v29, v30, 0LL);
                if (TypedValueAtIndex)
                {
                  int v32 = TypedValueAtIndex;
                  CFIndex v33 = CFDictionaryGetValue(TypedValueAtIndex, @"domain");
                  uint64_t v34 = CFDictionaryGetValue(v32, @"ifname");
                  if ((Value == v33 || Value && v33 && CFEqual(Value, v33))
                    && (v22 == v34 || v22 && v34 && CFEqual(v22, v34)))
                  {
                    break;
                  }
                }

                if (Count == ++v29) {
                  goto LABEL_44;
                }
              }
            }
          }

          else
          {
            CFIndex v23 = 0LL;
            while (1)
            {
              CFTypeID v24 = CFDictionaryGetTypeID();
              uint64_t v25 = CFArrayGetTypedValueAtIndex(v11, v23, v24, 0LL);
              if (v25)
              {
                uint64_t v26 = v25;
                uint64_t v27 = CFDictionaryGetValue(v25, @"domain");
                unsigned int v28 = CFDictionaryGetValue(v26, @"ifname");
                if ((Value == v27 || Value && v27 && CFEqual(Value, v27))
                  && (v22 == v28 || v22 && v28 && CFEqual(v22, v28)))
                {
                  break;
                }
              }

              if (v18 == ++v23) {
                goto LABEL_32;
              }
            }
          }
        }

        ++v19;
        unint64_t v7 = v46;
      }

      while (v19 != v47);
    }

    goto LABEL_46;
  }

  CFIndex v18 = 0LL;
  if (v7) {
    goto LABEL_17;
  }
LABEL_46:
  uint64_t v17 = theArray;
  CFDictionarySetValue(v42, @"services", theArray);
  CFIndex v35 = CFArrayGetCount(theArray);
  if (v35 >= 1)
  {
    CFIndex v36 = v35;
    CFIndex v37 = 0LL;
    while (1)
    {
      CFTypeID v38 = CFDictionaryGetTypeID();
      uint64_t v39 = CFArrayGetTypedValueAtIndex(theArray, v37, v38, 0LL);
      if (v39)
      {
        unint64_t v40 = (const __CFString *)CFDictionaryGetValue(v39, @"p2p");
        if (!v40 || !CFGetInt64(v40, 0LL)) {
          break;
        }
      }

      if (v36 == ++v37)
      {
        CFDictionarySetValue(v42, @"p2pOnly", (const void *)*MEMORY[0x189604DE8]);
        goto LABEL_54;
      }
    }
  }

  CFDictionaryRemoveValue(v42, @"p2pOnly");
LABEL_54:
  CFRelease(cfa);
  uint64_t v4 = 0LL;
  void *v44 = v42;
LABEL_55:
  CFRelease(v17);
  if (v7) {
LABEL_56:
  }
    CFRelease(v7);
  return v4;
}

CFDictionaryRef BonjourDevice_RemoveInterfaceInfo(CFDictionaryRef *a1, const char *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a1;
  if (*a1)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    uint64_t result = CFDictionaryGetTypedValue(v3, @"services", TypeID, 0LL);
    if (!result) {
      return result;
    }
    CFTypeID v9 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, *a1);
      if (MutableCopy)
      {
        CFTypeID v13 = MutableCopy;
        CFMutableArrayRef v14 = CFArrayCreateMutableCopy(0LL, 0LL, v9);
        if (v14)
        {
          uint64_t v15 = v14;
          unint64_t v16 = v11 + 1;
          do
          {
            CFTypeID v17 = CFDictionaryGetTypeID();
            TypedValueAtIndex = CFArrayGetTypedValueAtIndex(v15, v16 - 2, v17, 0LL);
            if (TypedValueAtIndex)
            {
              __s1[0] = 0;
              Value = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, @"ifname");
              if (Value) {
                CFGetCString(Value, __s1, 0x11uLL);
              }
              else {
                __s1[0] = 0;
              }
              if ((a3 == 0) != (strcmp(__s1, a2) != 0)) {
                CFArrayRemoveValueAtIndex(v15, v16 - 2);
              }
            }

            --v16;
          }

          while (v16 > 1);
          if (CFArrayGetCount(v15) < 1) {
            CFDictionaryRemoveValue(v13, @"services");
          }
          else {
            CFDictionarySetValue(v13, @"services", v15);
          }
          CFRelease(*a1);
          *a1 = v13;
          CFRelease(v15);
          return 0LL;
        }

        CFRelease(v13);
      }

      return (const __CFDictionary *)4294960568LL;
    }
  }

  return 0LL;
}

void FadeInLayerThruBlack(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
}

void _FadeLayerThruBlack(void *a1, char a2, void *a3, void *a4, double a5, double a6, double a7)
{
  id v13 = a1;
  id v14 = a3;
  id v15 = a4;
  unint64_t v16 = (void *)MEMORY[0x186E432B4]();
  if (!v14 && v15)
  {
    id v14 = (id)MEMORY[0x1895F8AE0];
    id v17 = MEMORY[0x1895F8AE0];
  }

  [(Class)getCALayerClass[0]() layer];
  CFIndex v18 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = MEMORY[0x1895F87A8];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___FadeLayerThruBlack_block_invoke;
  block[3] = &unk_189F2FFC0;
  id v20 = v18;
  id v36 = v20;
  id v21 = v13;
  id v37 = v21;
  char v39 = a2;
  double v38 = a5;
  uint64_t v22 = (dispatch_queue_s *)MEMORY[0x1895F8AE0];
  dispatch_async(MEMORY[0x1895F8AE0], block);
  dispatch_time_t v23 = dispatch_time(0LL, (uint64_t)(a6 * 1000000000.0));
  v28[0] = v19;
  v28[1] = 3221225472LL;
  v28[2] = ___FadeLayerThruBlack_block_invoke_2;
  v28[3] = &unk_189F30010;
  char v34 = a2;
  id v24 = v21;
  id v29 = v24;
  id v30 = v20;
  double v33 = a7;
  id v25 = v15;
  id v32 = v25;
  id v26 = v14;
  id v31 = v26;
  id v27 = v20;
  dispatch_after(v23, v22, v28);

  objc_autoreleasePoolPop(v16);
}

id CALayerFunction()
{
  return (id)classCALayer;
}

Class initCALayer()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CALayer");
  classCALayer = (uint64_t)result;
  getCALayerClass[0] = (uint64_t (*)())CALayerFunction;
  return result;
}

id CATransactionFunction()
{
  return (id)classCATransaction;
}

Class initCATransaction()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CATransaction");
  classCATransaction = (uint64_t)result;
  getCATransactionClass[0] = (uint64_t (*)())CATransactionFunction;
  return result;
}

id CABasicAnimationFunction()
{
  return (id)classCABasicAnimation;
}

Class initCABasicAnimation()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CABasicAnimation");
  classCABasicAnimation = (uint64_t)result;
  getCABasicAnimationClass[0] = (uint64_t (*)())CABasicAnimationFunction;
  return result;
}

id CAMediaTimingFunctionFunction()
{
  return (id)classCAMediaTimingFunction;
}

Class initCAMediaTimingFunction()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CAMediaTimingFunction");
  classCAMediaTimingFunction = (uint64_t)result;
  getCAMediaTimingFunctionClass[0] = (uint64_t (*)())CAMediaTimingFunctionFunction;
  return result;
}

id initValkCAMediaTimingFunctionEaseIn()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAMediaTimingFunctionEaseIn");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAMediaTimingFunctionEaseIn, *v0);
  }
  getkCAMediaTimingFunctionEaseIn[0] = (uint64_t (*)())kCAMediaTimingFunctionEaseInFunction;
  return (id)constantValkCAMediaTimingFunctionEaseIn;
}

id kCAMediaTimingFunctionEaseInFunction()
{
  return (id)constantValkCAMediaTimingFunctionEaseIn;
}

void *__QuartzCoreLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 2);
  QuartzCoreLibrary_sLib = (uint64_t)result;
  return result;
}

id initValkCAMediaTimingFunctionEaseOut()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAMediaTimingFunctionEaseOut");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAMediaTimingFunctionEaseOut, *v0);
  }
  getkCAMediaTimingFunctionEaseOut[0] = (uint64_t (*)())kCAMediaTimingFunctionEaseOutFunction;
  return (id)constantValkCAMediaTimingFunctionEaseOut;
}

id kCAMediaTimingFunctionEaseOutFunction()
{
  return (id)constantValkCAMediaTimingFunctionEaseOut;
}

void FadeOutLayerThruBlack(void *a1, void *a2, void *a3, double a4, double a5, double a6)
{
}

void *CreateCAContextForRemoteHosting()
{
  v0 = (void *)MEMORY[0x186E432B4]();
  [(Class)getCATransactionClass[0]() begin];
  [(Class)getCATransactionClass[0]() setDisableActions:1];
  uint64_t v1 = CFUUIDCreate(0LL);
  CFStringRef v2 = CFUUIDCreateString(0LL, v1);
  CFRelease(v1);
  [NSString stringWithFormat:@"%s-%@", getprogname(), v2];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  CFRelease(v2);
  uint64_t v4 = (void *)MEMORY[0x189603F68];
  getkCAContextDisplayName[0]();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = *MEMORY[0x189604DE8];
  getkCAContextIgnoresHitTest[0]();
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v3, v5, v6, v7, 0);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();

  [(Class)getCAContextClass[0]() remoteContextWithOptions:v8];
  CFTypeID v9 = (void *)objc_claimAutoreleasedReturnValue();
  [(Class)getCALayerClass[0]() layer];
  CFTypeID v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v10 setGeometryFlipped:1];
  [v9 setLayer:v10];
  [(Class)getCATransactionClass[0]() commit];

  objc_autoreleasePoolPop(v0);
  return v9;
}

id initValkCAContextDisplayName()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAContextDisplayName");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAContextDisplayName, *v0);
  }
  getkCAContextDisplayName[0] = (uint64_t (*)())kCAContextDisplayNameFunction;
  return (id)constantValkCAContextDisplayName;
}

id kCAContextDisplayNameFunction()
{
  return (id)constantValkCAContextDisplayName;
}

id initValkCAContextIgnoresHitTest()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  v0 = (id *)dlsym((void *)QuartzCoreLibrary_sLib, "kCAContextIgnoresHitTest");
  if (v0) {
    objc_storeStrong((id *)&constantValkCAContextIgnoresHitTest, *v0);
  }
  getkCAContextIgnoresHitTest[0] = (uint64_t (*)())kCAContextIgnoresHitTestFunction;
  return (id)constantValkCAContextIgnoresHitTest;
}

id kCAContextIgnoresHitTestFunction()
{
  return (id)constantValkCAContextIgnoresHitTest;
}

id CAContextFunction()
{
  return (id)classCAContext;
}

Class initCAContext()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CAContext");
  classCAContext = (uint64_t)result;
  getCAContextClass[0] = (uint64_t (*)())CAContextFunction;
  return result;
}

id CreateCALayerForRemoteDrawing(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)MEMORY[0x186E432B4]();
  [(Class)getCATransactionClass[0]() begin];
  [(Class)getCATransactionClass[0]() setDisableActions:1];
  id v5 = objc_alloc_init((Class)getCALayerHostClass[0]());
  [v5 setContextId:a1];
  [v3 frame];
  objc_msgSend(v5, "setFrame:");
  [v3 addSublayer:v5];
  [(Class)getCATransactionClass[0]() commit];
  objc_autoreleasePoolPop(v4);

  return v5;
}

id CALayerHostFunction()
{
  return (id)classCALayerHost;
}

Class initCALayerHost()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CALayerHost");
  classCALayerHost = (uint64_t)result;
  getCALayerHostClass[0] = (uint64_t (*)())CALayerHostFunction;
  return result;
}

void CAGetStats(_DWORD *a1)
{
  if (a1)
  {
    *(void *)&__int128 v2 = -1LL;
    *((void *)&v2 + 1) = -1LL;
    *((_OWORD *)a1 + 1) = v2;
    id v3 = a1 + 4;
    *(_OWORD *)a1 = v2;
    uint64_t v4 = a1 + 7;
    a1[8] = -1;
    id v5 = a1 + 8;
    if ((CAGetStats_sInitialized & 1) != 0)
    {
      uint64_t v6 = CAGetStats_sServerPort;
      if (!CAGetStats_sServerPort) {
        return;
      }
    }

    else
    {
      uint64_t v6 = ((uint64_t (*)(uint64_t))softLinkCARenderServerGetServerPort[0])(0LL);
      CAGetStats_sServerPort = v6;
      CAGetStats_sInitialized = 1;
      if (!(_DWORD)v6) {
        return;
      }
    }

    unint64_t v7 = (char *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCARenderServerGetInfo[0])(v6, 1LL, 0LL);
    if (v7)
    {
      id v15 = v3;
      unint64_t v16 = 0LL;
      uint64_t v8 = 0LL;
      CFTypeID v9 = 0LL;
      id v14 = v7;
      __lasts = v7;
      while (1)
      {
        CFTypeID v10 = strtok_r(__lasts, "\n", &__lasts);
        if (!v10) {
          break;
        }
        CFIndex v11 = v10;
        if (strstr(v10, "LCD display:"))
        {
          uint64_t v8 = a1;
          CFTypeID v9 = a1 + 1;
          unint64_t v16 = a1 + 2;
        }

        else if (strstr(v11, "TVOut display:"))
        {
          uint64_t v8 = a1 + 3;
          CFTypeID v9 = v15;
          unint64_t v16 = a1 + 5;
        }

        else
        {
          uint64_t v12 = strstr(v11, "Wireless display:");
          if (v12 || !v8)
          {
            if (v12) {
              uint64_t v8 = a1 + 6;
            }
            else {
              uint64_t v8 = 0LL;
            }
            if (v12) {
              CFTypeID v9 = v4;
            }
            id v13 = v16;
            if (v12) {
              id v13 = v5;
            }
            unint64_t v16 = v13;
          }

          else if (sscanf(v11, " Total Frames: %d", &v17) == 1)
          {
            _DWORD *v8 = v17;
          }

          else if (sscanf(v11, " Total Cloned Frames: %d", &v17) == 1)
          {
            *CFTypeID v9 = v17;
          }

          else if (sscanf(v11, " Skipped Cloned Frames: %d", &v17) == 1)
          {
            *unint64_t v16 = v17;
          }
        }
      }

      free(v14);
    }
  }

  else
  {
    if (CAGetStats_sServerPort)
    {
      mach_port_deallocate(*MEMORY[0x1895FBBE0], CAGetStats_sServerPort);
      CAGetStats_sServerPort = 0;
    }

    CAGetStats_sInitialized = 0;
  }

uint64_t initCARenderServerGetInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  softLinkCARenderServerGetInfo[0] = (uint64_t (*)())dlsym( (void *)QuartzCoreLibrary_sLib,  "CARenderServerGetInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCARenderServerGetInfo[0])(a1, a2, a3);
}

uint64_t initCARenderServerGetServerPort(uint64_t a1)
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  softLinkCARenderServerGetServerPort[0] = (uint64_t (*)())dlsym( (void *)QuartzCoreLibrary_sLib,  "CARenderServerGetServerPort");
  return ((uint64_t (*)(uint64_t))softLinkCARenderServerGetServerPort[0])(a1);
}

int32x4_t CADiffStats(int32x4_t *a1, int32x4_t *a2, int32x4_t *a3)
{
  *a1 = vsubq_s32(*a3, *a2);
  int32x4_t result = vsubq_s32(a3[1], a2[1]);
  a1[1] = result;
  a1[2].i32[0] = a3[2].i32[0] - a2[2].i32[0];
  return result;
}

uint64_t SaveScreenshot(char *a1)
{
  __int128 v2 = (void *)MEMORY[0x186E432B4]();
  [(Class)getCADisplayClass[0]() mainDisplay];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v37 = 4294960596LL;
    goto LABEL_11;
  }

  __s = a1;
  uint64_t v50 = v2;
  [v3 bounds];
  double v6 = v5;
  double v8 = v7;
  unint64_t v11 = (unint64_t)v10;
  uint64_t v12 = (4 * (unint64_t)v9 + 63) & 0xFFFFFFC0;
  uint64_t v13 = ((_DWORD)v12 * (unint64_t)v10 + 4095) & 0xFFFFF000;
  unint64_t v48 = (void *)MEMORY[0x189603F68];
  unint64_t v42 = (unint64_t)v9;
  objc_msgSend(MEMORY[0x189607968], "numberWithInt:");
  CFIndex v47 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v46 = getkIOSurfaceWidth[0]();
  int v41 = v11;
  [MEMORY[0x189607968] numberWithInt:v11];
  dispatch_source_t v45 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v44 = getkIOSurfaceHeight[0]();
  [MEMORY[0x189607968] numberWithInt:1111970369];
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v49 = v4;
  uint64_t v15 = getkIOSurfacePixelFormat[0]();
  [MEMORY[0x189607968] numberWithInt:4];
  unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v17 = getkIOSurfaceBytesPerElement[0]();
  int v40 = v12;
  [MEMORY[0x189607968] numberWithInt:v12];
  CFIndex v18 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = getkIOSurfaceBytesPerRow[0]();
  uint64_t v43 = v13;
  [MEMORY[0x189607968] numberWithInt:v13];
  id v20 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v21 = getkIOSurfaceAllocSize[0]();
  [MEMORY[0x189607968] numberWithBool:1];
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v23 = getkIOSurfaceIsGlobal[0]();
  uint64_t v24 = objc_msgSend( v48,  "dictionaryWithObjectsAndKeys:",  v47,  v46,  v45,  v44,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  @"PurpleGfxMem",  getkIOSurfaceMemoryRegion[0](),  0);
  uint64_t v25 = ((uint64_t (*)(uint64_t))softLinkIOSurfaceCreate[0])(v24);

  if (!v25)
  {
    uint64_t v37 = 4294960596LL;
    uint64_t v4 = v49;
    __int128 v2 = v50;
    goto LABEL_11;
  }

  uint64_t v4 = v49;
  uint64_t v26 = [v49 name];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCARenderServerRenderDisplay[0])( 0LL,  v26,  v25,  (int)v6,  (int)v8);
  ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock[0])(v25, 1LL, 0LL);
  uint64_t v27 = ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress[0])(v25);
  uint64_t v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGDataProviderCreateWithData[0])( v25,  v27,  v43,  (uint64_t)_SaveScreenshotReleaseSurfaceData);
  if (v28)
  {
    id v29 = (const void *)v28;
    uint64_t DeviceRGB = softLinkCGColorSpaceCreateDeviceRGB();
    if (DeviceRGB)
    {
      id v31 = (const void *)DeviceRGB;
      id v32 = (const void *)softLinkCGImageCreate(v42, v41, 8, 32, v40, DeviceRGB, 8194, (int)v29, 0LL, 1, 0);
      CFRelease(v31);
      if (v32)
      {
        size_t v33 = strlen(__s);
        CFURLRef v34 = CFURLCreateFromFileSystemRepresentation(0LL, (const UInt8 *)__s, v33, 0);
        if (v34
          && (CFURLRef v35 = v34,
              id v36 = (const void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithURL[0])( (uint64_t)v34,  (uint64_t)@"public.png",  1LL,  0LL),  CFRelease(v35),  v36))
        {
          ((void (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage[0])( (uint64_t)v36,  (uint64_t)v32,  0LL);
          ((void (*)(uint64_t))softLinkCGImageDestinationFinalize[0])((uint64_t)v36);
          CFRelease(v36);
          uint64_t v37 = 0LL;
        }

        else
        {
          uint64_t v37 = 4294960596LL;
        }

        __int128 v2 = v50;
        CFRelease(v32);
        goto LABEL_10;
      }
    }

    uint64_t v37 = 4294960596LL;
  }

  else
  {
    uint64_t v37 = 4294960596LL;
    id v29 = (const void *)v25;
  }

  __int128 v2 = v50;
LABEL_10:
  CFRelease(v29);
LABEL_11:
  objc_autoreleasePoolPop(v2);

  return v37;
}

id CADisplayFunction()
{
  return (id)classCADisplay;
}

Class initCADisplay()
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  Class result = objc_getClass("CADisplay");
  classCADisplay = (uint64_t)result;
  getCADisplayClass[0] = (uint64_t (*)())CADisplayFunction;
  return result;
}

uint64_t initValkIOSurfaceWidth()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceWidth");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceWidth = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceWidth;
  }

  getkIOSurfaceWidth[0] = kIOSurfaceWidthFunction;
  return result;
}

uint64_t kIOSurfaceWidthFunction()
{
  return constantValkIOSurfaceWidth;
}

uint64_t initValkIOSurfaceHeight()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceHeight");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceHeight = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceHeight;
  }

  getkIOSurfaceHeight[0] = kIOSurfaceHeightFunction;
  return result;
}

uint64_t kIOSurfaceHeightFunction()
{
  return constantValkIOSurfaceHeight;
}

uint64_t initValkIOSurfacePixelFormat()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfacePixelFormat");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfacePixelFormat = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfacePixelFormat;
  }

  getkIOSurfacePixelFormat[0] = kIOSurfacePixelFormatFunction;
  return result;
}

uint64_t kIOSurfacePixelFormatFunction()
{
  return constantValkIOSurfacePixelFormat;
}

uint64_t initValkIOSurfaceBytesPerElement()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceBytesPerElement");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceBytesPerElement = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceBytesPerElement;
  }

  getkIOSurfaceBytesPerElement[0] = kIOSurfaceBytesPerElementFunction;
  return result;
}

uint64_t kIOSurfaceBytesPerElementFunction()
{
  return constantValkIOSurfaceBytesPerElement;
}

uint64_t initValkIOSurfaceBytesPerRow()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceBytesPerRow");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceBytesPerRow = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceBytesPerRow;
  }

  getkIOSurfaceBytesPerRow[0] = kIOSurfaceBytesPerRowFunction;
  return result;
}

uint64_t kIOSurfaceBytesPerRowFunction()
{
  return constantValkIOSurfaceBytesPerRow;
}

uint64_t initValkIOSurfaceAllocSize()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceAllocSize");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceAllocSize = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceAllocSize;
  }

  getkIOSurfaceAllocSize[0] = kIOSurfaceAllocSizeFunction;
  return result;
}

uint64_t kIOSurfaceAllocSizeFunction()
{
  return constantValkIOSurfaceAllocSize;
}

uint64_t initValkIOSurfaceIsGlobal()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceIsGlobal");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceIsGlobal = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceIsGlobal;
  }

  getkIOSurfaceIsGlobal[0] = kIOSurfaceIsGlobalFunction;
  return result;
}

uint64_t kIOSurfaceIsGlobalFunction()
{
  return constantValkIOSurfaceIsGlobal;
}

uint64_t initValkIOSurfaceMemoryRegion()
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  v0 = (uint64_t *)dlsym((void *)IOSurfaceLibrary_sLib, "kIOSurfaceMemoryRegion");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkIOSurfaceMemoryRegion = result;
  }

  else
  {
    uint64_t result = constantValkIOSurfaceMemoryRegion;
  }

  getkIOSurfaceMemoryRegion[0] = kIOSurfaceMemoryRegionFunction;
  return result;
}

uint64_t kIOSurfaceMemoryRegionFunction()
{
  return constantValkIOSurfaceMemoryRegion;
}

void _SaveScreenshotReleaseSurfaceData(const void *a1)
{
}

uint64_t initCGImageDestinationFinalize(uint64_t a1)
{
  if (ImageIOLibrary_sOnce != -1) {
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_123);
  }
  softLinkCGImageDestinationFinalize[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib,  "CGImageDestinationFinalize");
  return ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize[0])(a1);
}

void *__ImageIOLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/ImageIO.framework/ImageIO", 2);
  ImageIOLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCGImageDestinationAddImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce != -1) {
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_123);
  }
  softLinkCGImageDestinationAddImage[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib,  "CGImageDestinationAddImage");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage[0])(a1, a2, a3);
}

uint64_t initCGImageDestinationCreateWithURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (ImageIOLibrary_sOnce != -1) {
    dispatch_once(&ImageIOLibrary_sOnce, &__block_literal_global_123);
  }
  softLinkCGImageDestinationCreateWithURL[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib,  "CGImageDestinationCreateWithURL");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithURL[0])( a1,  a2,  a3,  a4);
}

uint64_t initCGImageCreate( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (CoreGraphicsLibrary_sOnce != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_117);
  }
  softLinkCGImageCreate = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, char, int))dlsym((void *)CoreGraphicsLibrary_sLib, "CGImageCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageCreate)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
}

void *__CoreGraphicsLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics", 2);
  CoreGraphicsLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceRGB()
{
  if (CoreGraphicsLibrary_sOnce != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_117);
  }
  softLinkCGColorSpaceCreateuint64_t DeviceRGB = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib,  "CGColorSpaceCreateDeviceRGB");
  return softLinkCGColorSpaceCreateDeviceRGB();
}

uint64_t initCGDataProviderCreateWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreGraphicsLibrary_sOnce != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce, &__block_literal_global_117);
  }
  softLinkCGDataProviderCreateWithData[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib,  "CGDataProviderCreateWithData");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGDataProviderCreateWithData[0])( a1,  a2,  a3,  a4);
}

uint64_t initIOSurfaceUnlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  softLinkIOSurfaceUnlock = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceUnlock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock)(a1, a2, a3);
}

void *__IOSurfaceLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/IOSurface.framework/IOSurface", 2);
  IOSurfaceLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initIOSurfaceGetBaseAddress(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  softLinkIOSurfaceGetBaseAddress[0] = (uint64_t (*)())dlsym( (void *)IOSurfaceLibrary_sLib,  "IOSurfaceGetBaseAddress");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress[0])(a1);
}

uint64_t initIOSurfaceLock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  softLinkIOSurfaceLock[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceLock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock[0])(a1, a2, a3);
}

uint64_t initCARenderServerRenderDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (QuartzCoreLibrary_sOnce != -1) {
    dispatch_once(&QuartzCoreLibrary_sOnce, &__block_literal_global_215);
  }
  softLinkCARenderServerRenderDisplay[0] = (uint64_t (*)())dlsym( (void *)QuartzCoreLibrary_sLib,  "CARenderServerRenderDisplay");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCARenderServerRenderDisplay[0])( a1,  a2,  a3,  a4,  a5);
}

uint64_t initIOSurfaceCreate(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce, &__block_literal_global_104);
  }
  softLinkIOSurfaceCreate[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib, "IOSurfaceCreate");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceCreate[0])(a1);
}

uint64_t cdb_read(uint64_t a1, char *__dst, size_t __n, unsigned int a4)
{
  unsigned int v4 = __n;
  double v5 = __dst;
  if (*(void *)a1)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    BOOL v9 = v7 >= a4;
    unsigned int v8 = v7 - a4;
    BOOL v9 = v9 && v8 >= __n;
    if (!v9)
    {
LABEL_6:
      *__error() = 100;
      return 0xFFFFFFFFLL;
    }

    memcpy(__dst, (const void *)(*(void *)a1 + a4), __n);
  }

  else
  {
    if (lseek(*(_DWORD *)(a1 + 8), a4, 0) == -1) {
      return 0xFFFFFFFFLL;
    }
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          ssize_t v10 = read(*(_DWORD *)(a1 + 8), v5, v4);
          if (v10 != -1) {
            break;
          }
          if (*__error() != 4) {
            return 0xFFFFFFFFLL;
          }
        }

        ssize_t v11 = v10;
        if (!v10) {
          break;
        }
        uint64_t result = 0LL;
        v5 += v11;
        v4 -= v11;
        if (!v4) {
          return result;
        }
      }

      goto LABEL_6;
    }
  }

  return 0LL;
}

uint64_t cdb_findnext(_DWORD *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unsigned int v6 = a1[4];
  if (v6)
  {
    unsigned int v7 = a1[8];
  }

  else
  {
    unsigned int v17 = 5381;
    if (a3)
    {
      int v18 = a3;
      uint64_t v19 = a2;
      do
      {
        int v20 = *v19++;
        unsigned int v17 = (33 * v17) ^ v20;
        --v18;
      }

      while (v18);
    }

    uint64_t result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, 8 * v17);
    if ((_DWORD)result == -1) {
      return result;
    }
    unsigned int v7 = __dst;
    a1[8] = __dst;
    if (!v7) {
      return 0LL;
    }
    int v21 = v23;
    a1[7] = v23;
    a1[5] = v17;
    a1[6] = v21 + 8 * ((v17 >> 8) % v7);
    unsigned int v6 = a1[4];
  }

  if (v6 >= v7) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, a1[6]);
    if ((_DWORD)result == -1) {
      return result;
    }
    unsigned int v9 = __dst;
    if (!__dst) {
      return 0LL;
    }
    int v10 = a1[5];
    ++a1[4];
    int v11 = a1[6] + 8;
    if (v11 == a1[7] + 8 * a1[8]) {
      int v11 = a1[7];
    }
    a1[6] = v11;
    if (v23 == v10)
    {
      uint64_t result = cdb_read((uint64_t)a1, (char *)&v23, 8uLL, v9);
      if ((_DWORD)result == -1) {
        return result;
      }
      if (v23 == a3)
      {
        unsigned int v12 = v9 + 8;
        if (a3)
        {
          unsigned int v13 = v9 + 8;
          int v14 = a3;
          uint64_t v15 = (char *)a2;
          while (1)
          {
            size_t v16 = v14 >= 32 ? 32LL : v14;
            uint64_t result = cdb_read((uint64_t)a1, __dst_4, v16, v13);
            if ((_DWORD)result == -1) {
              break;
            }
            if (memcmp(__dst_4, v15, v16)) {
              goto LABEL_20;
            }
            v13 += v16;
            v15 += (int)v16;
            v14 -= v16;
            if (!v14) {
              goto LABEL_30;
            }
          }
        }

        else
        {
LABEL_30:
          unsigned int v22 = __dst;
          a1[9] = v12 + a3;
          a1[10] = v22;
          return 1LL;
        }

        return result;
      }
    }

LABEL_20:
    if (a1[4] >= a1[8]) {
      return 0LL;
    }
  }

      __int128 v2 = -6752;
    }
  }

    int v14 = 0LL;
LABEL_23:
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

LABEL_24:
    -[CUBLEConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v5, v14);

    --v4;
  }

  while (v4);
  if (self->_writeSuspended)
  {
    self->_writeSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_writeSource);
  }

      id v36 = _Block_copy(self->_deviceFoundHandler);
      CFURLRef v35 = v36;
      if (v36) {
        (*((void (**)(void *, CUBLEDevice *))v36 + 2))(v36, v16);
      }
      goto LABEL_22;
    }
  }

    uint64_t v15 = 0LL;
LABEL_23:
    writeRequestdouble Current = self->_writeRequestCurrent;
    self->_writeRequestdouble Current = 0LL;

LABEL_24:
    -[CUBluetoothClassicConnection _completeWriteRequest:error:](self, "_completeWriteRequest:error:", v6, v15);

    --v4;
  }

  while (v4);
  if (self->_writeSuspended)
  {
    self->_writeSuspended = 0;
    dispatch_resume((dispatch_object_t)self->_writeSource);
  }

    self->_btEndpointRegistered = 1;
    -[CUBluetoothScalablePipe _ensureStarted](self, "_ensureStarted");
    goto LABEL_2;
  }

  int v14 = self->_ucat;
  if (v14->var0 <= 30)
  {
    if (v14->var0 == -1)
    {
      int v14 = self->_ucat;
    }

    LogPrintF( (uint64_t)v14,  (uint64_t)"-[CUBluetoothScalablePipe scalablePipeManager:didRegisterEndpoint:error:]",  0x1Eu,  (uint64_t)"Ignoring didRegisterEndpoint for unknown identifier ('%@' not '%@'): %{error}\n",  v8,  v9,  v10,  v11,  (char)v16);
  }

  selfAccessoryAppData = self->_selfAccessoryAppData;
  self->_selfAccessoryAppData = 0LL;

LABEL_21:
  selfAccessoryMediaAccessFlags = self->_selfAccessoryMediaAccessFlags;
  id v36 = selfAccessoryMediaAccessFlags != 0;
  if (!selfAccessoryMediaAccessFlags) {
    goto LABEL_27;
  }
  uint64_t v37 = self->_ucat;
  if (v37->var0 <= 30)
  {
    if (v37->var0 == -1)
    {
      uint64_t v37 = self->_ucat;
    }

    LogPrintF( (uint64_t)v37,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessory MediaAccess changed: HK clear",  v31,  v32,  v33,  v34,  v95);
  }

    NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
    CFURLRef v35 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *, void *))v15)[2](v15, 0LL, v35);

    goto LABEL_21;
  }

  size_t v33 = self->_ucat;
  if (v33->var0 <= 90)
  {
    if (v33->var0 != -1)
    {
LABEL_9:
      LogPrintF( (uint64_t)v33,  (uint64_t)"-[CUHomeKitManager _getPairingIdentityCompleted:options:error:label:completion:]",  0x5Au,  (uint64_t)"### GetPairingIdentity failed: %{error}\n",  v16,  v17,  v18,  v19,  (char)v13);
      goto LABEL_14;
    }

    if (_LogCategory_Initialize((uint64_t)v33, 0x5Au))
    {
      size_t v33 = self->_ucat;
      goto LABEL_9;
    }
  }
}

  uint64_t v27 = [v5 rssi];
  uint64_t v46 = v6;
  if (v27 != self->_rssi)
  {
    self->_rssCFIndex i = v27;
    v13 |= 0x10u;
  }

  [v5 serviceName];
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
  serviceType = self->_serviceType;
  id v30 = v28;
  id v31 = serviceType;
  if (v30 == v31)
  {

    goto LABEL_29;
  }

  id v32 = v31;
  if ((v30 == 0LL) == (v31 != 0LL))
  {

    unsigned int v6 = v46;
    goto LABEL_28;
  }

  size_t v33 = -[NSString isEqual:](v30, "isEqual:", v31);

  unsigned int v6 = v46;
  if ((v33 & 1) == 0)
  {
LABEL_28:
    objc_storeStrong((id *)&self->_serviceType, v28);
    v13 |= 1u;
  }
}

  return v31;
}
}

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_26:
}

    *(void *)(a1 + 32) = a2;
    if (a3)
    {
      uint64_t result = 0LL;
      int v14 = *(void *)(a1 + 24) + v7;
LABEL_24:
      *a3 = v14;
      return result;
    }

    return 0LL;
  }

  return result;
}

    int v14 = -6756;
    goto LABEL_13;
  }

  unsigned int v7 = CFStringGetOrCopyCStringUTF8(a2, &v17, (UInt8 **)&v16, &v15);
  int v10 = v17;
  if (v17)
  {
    if (v15 > 0xFF)
    {
      int v14 = -6743;
      goto LABEL_13;
    }

    int v11 = v15;
    unsigned int v12 = (TXTRecordRef *)a3;
    unsigned int v13 = v8;
    goto LABEL_11;
  }

      *a5 = v8;
      *a6 = v12;
      return v11;
    default:
      int v11 = 0LL;
      goto LABEL_5;
  }

  if (gLogCategory_SerialUtils <= 50
    && (gLogCategory_SerialUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_SerialUtils, 0x32u)))
  {
    uint64_t v25 = v9;
    LogPrintF( (uint64_t)&gLogCategory_SerialUtils,  (uint64_t)"OSStatus _SerialStreamEnsureSetUp(SerialStreamRef)",  0x32u,  (uint64_t)"Opened '%s' after %d attempts\n",  v11,  v12,  v13,  v14,  a1 + 0x80);
  }

  if (*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 88) = 0;
    dispatch_resume(*(dispatch_object_t *)(a1 + 80));
  }

      unsigned int v13 = v5;
      int v14 = *a3;
      if (v14 != 37)
      {
        if (*a3)
        {
          if (v5 < v122)
          {
            ++a3;
            uint64_t v15 = *v5++;
            if (v14 == v15) {
              continue;
            }
          }
        }

        return v120;
      }

      break;
    }

    size_t v16 = 0;
    unsigned int v17 = 0LL;
    int v18 = 1;
    uint64_t v19 = a3;
    while (1)
    {
      while (1)
      {
        do
        {
          int v20 = v19;
          int v21 = v17;
          int v23 = *++v19;
          unsigned int v22 = v23;
          unsigned int v17 = 1LL;
        }

        while (v23 == 42);
        if (v22 != 38) {
          break;
        }
        int v18 = 0;
        unsigned int v17 = v21;
      }

      if (v22 != 35) {
        break;
      }
      ++v16;
      unsigned int v17 = v21;
    }

    if ((v22 - 48) > 9)
    {
      if (v22 == 46)
      {
        uint64_t v27 = v124;
        v124 += 2;
        uint64_t v24 = *v27;
        if (*v27 < 0) {
          return v120;
        }
        unsigned int v22 = v20[2];
        uint64_t v19 = v20 + 2;
      }

      else
      {
        uint64_t v24 = 0x7FFFFFFF;
      }
    }

    else
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = v22 + 10 * v24;
        uint64_t v26 = *++v19;
        unsigned int v22 = v26;
        uint64_t v24 = v25 - 48;
      }

      while ((v26 - 48) < 0xA);
      if (v24 < 0) {
        return v120;
      }
    }

    uint64_t v28 = 0;
    HIDWORD(v29) = v22;
    LODWORD(v29) = v22 - 104;
    switch((v29 >> 1))
    {
      case 0u:
        id v30 = *++v19;
        id v31 = v30 == 104;
        unsigned int v22 = 104;
        id v32 = 72;
        goto LABEL_44;
      case 1u:
      case 6u:
      case 9u:
        ++v19;
        goto LABEL_46;
      case 2u:
        size_t v33 = *++v19;
        id v31 = v33 == 108;
        unsigned int v22 = 108;
        id v32 = 76;
LABEL_44:
        if (v31)
        {
          unsigned int v22 = v32;
          ++v19;
        }

uint64_t cdb_make_addend(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v8 = *(_DWORD **)(a1 + 12288);
  if (!v8 || (int v9 = v8[2002], v9 >= 1000))
  {
    int v10 = malloc(0x1F50uLL);
    if (!v10) {
      return 0xFFFFFFFFLL;
    }
    int v9 = 0;
    v10[2002] = 0;
    *((void *)v10 + 1000) = v8;
    unsigned int v8 = v10;
    *(void *)(a1 + 12288) = v10;
  }

  int v11 = &v8[2 * v9];
  unsigned int v12 = *(_DWORD *)(a1 + 12352);
  *int v11 = a4;
  v11[1] = v12;
  v8[2002] = v9 + 1;
  ++*(_DWORD *)(a1 + 12312);
  if (v12 < 0xFFFFFFF8)
  {
    *(_DWORD *)(a1 + 12352) = v12 + 8;
    int v13 = v12 + 8 + a2;
    if (!__CFADD__(v12 + 8, a2))
    {
      *(_DWORD *)(a1 + 12352) = v13;
      BOOL v14 = __CFADD__(v13, a3);
      int v15 = v13 + a3;
      if (!v14)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 12352) = v15;
        return result;
      }
    }
  }

  *__error() = 12;
  return 0xFFFFFFFFLL;
}

uint64_t buffer_putalign(uint64_t a1, char *__src, size_t __n)
{
  unsigned int v3 = __n;
  while (1)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 12) - v6;
    unsigned int v8 = (void *)(*(void *)a1 + v6);
    if (v3 <= v7) {
      break;
    }
    memcpy(v8, __src, (*(_DWORD *)(a1 + 12) - v6));
    *(_DWORD *)(a1 + 8) += v7;
    __src += v7;
    uint64_t result = buffer_flush((uint64_t *)a1);
    v3 -= v7;
    if ((_DWORD)result == -1) {
      return result;
    }
  }

  memcpy(v8, __src, v3);
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 8) += v3;
  return result;
}

uint64_t buffer_flush(uint64_t *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 2);
  if (v1)
  {
    *((_DWORD *)a1 + 2) = 0;
    __int128 v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[3];
    uint64_t v3 = *((unsigned int *)a1 + 4);
    uint64_t v4 = *a1;
    do
    {
      uint64_t v5 = v1;
      while (1)
      {
        uint64_t v6 = v2(v3, v4, v5);
        if (v6 != -1) {
          break;
        }
        if (*__error() != 4) {
          return 0xFFFFFFFFLL;
        }
      }

      v4 += v6;
      unsigned int v1 = v5 - v6;
    }

    while ((_DWORD)v5 != (_DWORD)v6);
  }

  return 0LL;
}

uint64_t buffer_putflush(uint64_t a1, uint64_t a2)
{
  uint64_t result = buffer_flush((uint64_t *)a1);
  if ((_DWORD)result != -1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    uint64_t v7 = 2048LL;
    do
    {
      while (1)
      {
        uint64_t v8 = v5(v6, a2, v7);
        if (v8 != -1) {
          break;
        }
        if (*__error() != 4) {
          return 0xFFFFFFFFLL;
        }
      }

      a2 += v8;
      uint64_t v7 = (v7 - v8);
    }

    while ((_DWORD)v7);
    return 0LL;
  }

  return result;
}

CFTypeRef CFBinaryPlistStreamedCreateData(const __CFString *a1, int *a2)
{
  return CFBinaryPlistStreamedCreateDataEx(a1, 31, a2);
}

CFTypeRef CFBinaryPlistStreamedCreateDataEx(const __CFString *a1, int a2, int *a3)
{
  uint64_t v13 = 0LL;
  int v14 = 0;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int16 v12 = 0;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  int v17 = 0;
  cf[0] = CFDataCreateMutable(0LL, 0LL);
  if (!cf[0])
  {
    CFTypeRef v7 = 0LL;
    int v6 = -6728;
    goto LABEL_8;
  }

  int v14 = a2;
  int v6 = _WriteStreamed((uint64_t)cf, a1);
  CFTypeRef v7 = cf[0];
  if (v6)
  {
    if (!cf[0]) {
      goto LABEL_6;
    }
    CFRelease(cf[0]);
    CFTypeRef v7 = 0LL;
  }

  cf[0] = 0LL;
LABEL_6:
  if ((void)v10)
  {
    CFRelease((CFTypeRef)v10);
    *(void *)&__int128 v10 = 0LL;
  }

void _GlobalEnsureInitialized()
{
  if (gCFStringType == -1)
  {
    gCFArrayType = CFArrayGetTypeID();
    gCFBooleanType = CFBooleanGetTypeID();
    gCFDataType = CFDataGetTypeID();
    gCFDateType = CFDateGetTypeID();
    gCFDictionaryType = CFDictionaryGetTypeID();
    gCFNumberType = CFNumberGetTypeID();
    gCFStringType = CFStringGetTypeID();
  }

uint64_t _WriteStreamed(uint64_t a1, const __CFString *a2)
{
  int v4 = *(_DWORD *)(a1 + 312);
  if ((v4 & 0x40) != 0)
  {
    __int128 v5 = *(_OWORD *)(MEMORY[0x189605240] + 32LL);
    __int128 v6 = *MEMORY[0x189605240];
    v9.copyDescription = *(CFDictionaryCopyDescriptionCallBack *)(MEMORY[0x189605240] + 24LL);
    v9.hash = (CFDictionaryHashCallBack)*((void *)&v5 + 1);
    *(_OWORD *)&v9.version = (unint64_t)v6;
    v9.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    v9.release = 0LL;
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(0LL, 0LL, &v9, 0LL);
    *(void *)(a1 + 272) = v7;
    if (!v7) {
      return 4294960568LL;
    }
  }

  if ((v4 & 1) == 0 || (uint64_t result = _WriteBytes(a1, (const UInt8 *)"CFB1", 4LL), !(_DWORD)result))
  {
    if ((v4 & 0x1C) == 0 || (uint64_t result = _WriteStreamedObject(a1, a2), !(_DWORD)result))
    {
      if ((v4 & 2) == 0) {
        return 0LL;
      }
      uint64_t result = _WriteBytes(a1, (const UInt8 *)"END!", 4LL);
      if (!(_DWORD)result) {
        return 0LL;
      }
    }
  }

  return result;
}

BOOL _ObjectsExactlyEqual(const void *a1, const __CFNumber *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  BOOL result = 0;
  if (v4 == CFGetTypeID(a2))
  {
    if (CFEqual(a1, a2))
    {
      if (v4 != gCFNumberType) {
        return 1;
      }
      int IsFloatType = CFNumberIsFloatType((CFNumberRef)a1);
      if (IsFloatType == CFNumberIsFloatType(a2)) {
        return 1;
      }
    }
  }

  return result;
}

uint64_t _WriteBytes(uint64_t a1, const UInt8 *a2, CFIndex length)
{
  __int128 v5 = *(__CFData **)a1;
  if (v5)
  {
    CFDataAppendBytes(v5, a2, length);
LABEL_5:
    uint64_t result = 0LL;
    *(void *)(a1 + 288) += length;
    return result;
  }

  __int128 v6 = *(uint64_t (**)(const UInt8 *, CFIndex, void))(a1 + 320);
  if (!v6) {
    return 4294960551LL;
  }
  uint64_t result = v6(a2, length, *(void *)(a1 + 328));
  if (!(_DWORD)result) {
    goto LABEL_5;
  }
  return result;
}

uint64_t _WriteStreamedObject(uint64_t a1, const __CFString *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  int v4 = *(_DWORD *)(a1 + 312);
  CFTypeID v5 = CFGetTypeID(a2);
  if (v5 != gCFStringType)
  {
    if (v5 == gCFNumberType)
    {
      uint64_t result = _WriteNumber(a1, (CFNumberRef)a2, 1, 1);
      if ((_DWORD)result) {
        return result;
      }
      return 0LL;
    }

    if (v5 == gCFBooleanType)
    {
      if ((const __CFString *)*MEMORY[0x189604DE8] == a2) {
        UInt8 v12 = 9;
      }
      else {
        UInt8 v12 = 8;
      }
      UInt8 v28 = v12;
    }

    else
    {
      if (v5 == gCFDataType)
      {
        CFIndex Length = CFDataGetLength((CFDataRef)a2);
        if (Length < 2
          || !*(void *)(a1 + 272)
          || (uint64_t result = _WriteStreamedUpdateUID(a1, a2, (char *)values), !(_DWORD)result) && !LOBYTE(values[0]))
        {
          UInt8 v14 = Length | 0x40;
          if (Length >= 15) {
            UInt8 v14 = 79;
          }
          UInt8 v28 = v14;
          uint64_t result = _WriteBytes(a1, &v28, 1LL);
          if (!(_DWORD)result)
          {
            if (Length < 15 || (uint64_t result = _WriteInteger(a1, Length, 1, 1), !(_DWORD)result))
            {
              BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)a2);
              uint64_t v10 = a1;
              CFIndex v9 = Length;
              goto LABEL_42;
            }
          }
        }

        return result;
      }

      if (v5 == gCFDateType)
      {
        if (!*(void *)(a1 + 272)
          || (uint64_t result = _WriteStreamedUpdateUID(a1, a2, (char *)values), !(_DWORD)result) && !LOBYTE(values[0]))
        {
          LOBYTE(context) = 51;
          *(void *)((char *)&context + 1) = MEMORY[0x186E41D84](a2);
          BytePtr = (UInt8 *)&context;
          uint64_t v10 = a1;
          CFIndex v9 = 9LL;
          goto LABEL_42;
        }

        return result;
      }

      if (v5 == gCFDictionaryType)
      {
        if ((v4 & 4) != 0)
        {
          UInt8 v28 = -48;
          uint64_t result = _WriteBytes(a1, &v28, 1LL);
          if ((_DWORD)result) {
            return result;
          }
        }

        if ((v4 & 0x10) != 0)
        {
          CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
          if (Count > 16)
          {
            *(void *)&__int128 context = a1;
            *((void *)&context + 1) = a2;
            unsigned int v31 = 0;
            CFDictionaryApplyFunction( (CFDictionaryRef)a2,  (CFDictionaryApplierFunction)_WriteStreamedDictionaryApplier,  &context);
            uint64_t result = v31;
            if (v31) {
              return result;
            }
          }

          else
          {
            uint64_t v22 = Count;
            CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)&context, (const void **)values);
            if (v22 >= 1)
            {
              uint64_t v23 = 0LL;
              do
              {
                uint64_t result = _WriteStreamedObject(a1, *((void *)&context + v23));
                if ((_DWORD)result) {
                  return result;
                }
                uint64_t result = _WriteStreamedObject(a1, values[v23]);
                if ((_DWORD)result) {
                  return result;
                }
              }

              while (v22 != ++v23);
            }
          }
        }
      }

      else
      {
        if (v5 != gCFArrayType)
        {
          if ((const __CFString *)*MEMORY[0x189605018] != a2) {
            return 4294960561LL;
          }
          UInt8 v28 = 0;
          goto LABEL_17;
        }

        if ((v4 & 4) != 0)
        {
          UInt8 v28 = -96;
          uint64_t result = _WriteBytes(a1, &v28, 1LL);
          if ((_DWORD)result) {
            return result;
          }
        }

        if ((v4 & 0x10) != 0)
        {
          CFIndex v24 = CFArrayGetCount((CFArrayRef)a2);
          if (v24 >= 1)
          {
            CFIndex v25 = v24;
            CFIndex v26 = 0LL;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v26);
              uint64_t result = _WriteStreamedObject(a1, ValueAtIndex);
              if ((_DWORD)result) {
                return result;
              }
            }

            while (v25 != ++v26);
          }
        }
      }

      if ((v4 & 8) == 0) {
        return 0LL;
      }
      UInt8 v28 = 1;
    }

uint64_t _WriteStreamedUpdateUID(uint64_t a1, const void *a2, char *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), a2);
  if (!Value)
  {
    uint64_t v10 = *(__CFDictionary **)(a1 + 272);
    __int128 v11 = (const void *)(*(void *)(a1 + 280) + 1LL);
    *(void *)(a1 + 280) = v11;
    CFDictionaryAddValue(v10, a2, v11);
    char v12 = 0;
LABEL_13:
    uint64_t result = 0LL;
    *a3 = v12;
    return result;
  }

  unint64_t v7 = (unint64_t)(Value - 1);
  if ((unint64_t)Value > 0x100)
  {
    if ((unint64_t)Value > 0x10000)
    {
      if ((unint64_t)Value >= 0x1000001)
      {
        UInt8 v14 = -125;
        __int16 v15 = (_WORD)Value - 1;
        char v16 = ((_DWORD)Value - 1) >> 16;
        v7 >>= 24;
        CFIndex v8 = 5LL;
        uint64_t v9 = 4LL;
      }

      else
      {
        UInt8 v14 = -126;
        __int16 v15 = (_WORD)Value - 1;
        v7 >>= 16;
        CFIndex v8 = 4LL;
        uint64_t v9 = 3LL;
      }
    }

    else
    {
      UInt8 v14 = -127;
      LOBYTE(v15) = (_BYTE)Value - 1;
      v7 >>= 8;
      CFIndex v8 = 3LL;
      uint64_t v9 = 2LL;
    }
  }

  else
  {
    UInt8 v14 = 0x80;
    CFIndex v8 = 2LL;
    uint64_t v9 = 1LL;
  }

  *(&v14 + v9) = v7;
  uint64_t result = _WriteBytes(a1, &v14, v8);
  if (!(_DWORD)result)
  {
    char v12 = 1;
    goto LABEL_13;
  }

  return result;
}

uint64_t _WriteNumber(uint64_t a1, CFNumberRef number, int a3, int a4)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (CFNumberIsFloatType(number))
  {
    if ((*(_BYTE *)(a1 + 312) & 0x40) == 0
      || (uint64_t result = _WriteStreamedUpdateUID(a1, number, &v23), !(_DWORD)result) && !v23)
    {
      if (CFNumberGetByteSize(number) > 4)
      {
        CFNumberGetValue(number, kCFNumberFloat64Type, &v21);
        UInt8 v24 = 35;
        unint64_t v18 = v21;
        if (!a4) {
          unint64_t v18 = bswap64(v21);
        }
        unint64_t v25 = v18;
        CFIndex v10 = 9LL;
      }

      else
      {
        CFNumberGetValue(number, kCFNumberFloat32Type, &v21);
        UInt8 v24 = 34;
        unsigned int v9 = v21;
        if (!a4) {
          unsigned int v9 = bswap32(v21);
        }
        LODWORD(v25) = v9;
        CFIndex v10 = 5LL;
      }

      uint64_t v19 = a1;
      return _WriteBytes(v19, &v24, v10);
    }
  }

  else
  {
    if (CFNumberGetType(number) != (kCFNumberMaxType|kCFNumberSInt8Type))
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v21);
      unint64_t v20 = v21;
      if ((*(_BYTE *)(a1 + 312) & 0x40) != 0 && v21 >= 0x100)
      {
        uint64_t result = _WriteStreamedUpdateUID(a1, number, &v23);
        if ((_DWORD)result || v23) {
          return result;
        }
        unint64_t v20 = v21;
      }

      return _WriteInteger(a1, v20, a3, a4);
    }

    if ((*(_BYTE *)(a1 + 312) & 0x40) == 0
      || (uint64_t result = _WriteStreamedUpdateUID(a1, number, &v23), !(_DWORD)result) && !v23)
    {
      CFNumberGetValue(number, kCFNumberMaxType|kCFNumberSInt8Type, &v21);
      UInt8 v24 = 20;
      if (a4)
      {
        unint64_t v11 = v22 >> 8;
        unint64_t v25 = v21;
        unint64_t v12 = v22 >> 16;
        char v26 = v22;
        unint64_t v13 = v22 >> 24;
        unint64_t v14 = HIDWORD(v22);
        unint64_t v15 = v22 >> 40;
        unint64_t v16 = HIWORD(v22);
        unint64_t v17 = HIBYTE(v22);
      }

      else
      {
        LOBYTE(v17) = v22;
        unint64_t v25 = bswap64(v21);
        unint64_t v11 = HIWORD(v22);
        char v26 = HIBYTE(v22);
        unint64_t v12 = v22 >> 40;
        unint64_t v13 = HIDWORD(v22);
        unint64_t v14 = v22 >> 24;
        unint64_t v15 = v22 >> 16;
        unint64_t v16 = v22 >> 8;
      }

      char v27 = v11;
      char v28 = v12;
      char v29 = v13;
      char v30 = v14;
      char v31 = v15;
      char v32 = v16;
      char v33 = v17;
      uint64_t v19 = a1;
      CFIndex v10 = 17LL;
      return _WriteBytes(v19, &v24, v10);
    }
  }

  return result;
}

uint64_t _WriteInteger(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (a2 <= 0xF && a3)
  {
    UInt8 v6 = a2 | 0x90;
    CFIndex v4 = 1LL;
  }

  else if (a2 > 0xFF)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        UInt8 v6 = 19;
        if (a4) {
          unint64_t v7 = a2;
        }
        else {
          unint64_t v7 = bswap64(a2);
        }
        CFIndex v4 = 9LL;
      }

      else
      {
        UInt8 v6 = 18;
        if (a4) {
          LODWORD(v7) = a2;
        }
        else {
          LODWORD(v7) = bswap32(a2);
        }
        CFIndex v4 = 5LL;
      }
    }

    else
    {
      UInt8 v6 = 17;
      if (a4) {
        LOWORD(v7) = a2;
      }
      else {
        LOWORD(v7) = bswap32(a2) >> 16;
      }
      CFIndex v4 = 3LL;
    }
  }

  else
  {
    UInt8 v6 = 16;
    LOBYTE(v7) = a2;
    CFIndex v4 = 2LL;
  }

  return _WriteBytes(a1, &v6, v4);
}

uint64_t _WriteStreamedDictionaryApplier(uint64_t result, uint64_t a2, void *a3)
{
  if (!*((_DWORD *)a3 + 4))
  {
    uint64_t result = _WriteStreamedObject(*a3, result);
    if ((_DWORD)result || (uint64_t result = _WriteStreamedObject(*a3, a2), (_DWORD)result)) {
      *((_DWORD *)a3 + 4) = result;
    }
  }

  return result;
}

uint64_t CFBinaryPlistStreamedWriteBytes(const UInt8 *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  cf[0] = 0LL;
  uint64_t v16 = 0LL;
  int v17 = 0;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int16 v15 = 0;
  int v20 = 0;
  UInt8 v8 = a2 | 0x40;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  if (a2 >= 0xF) {
    UInt8 v8 = 79;
  }
  UInt8 v11 = v8;
  uint64_t v9 = _WriteBytes((uint64_t)cf, &v11, 1LL);
  if (!(_DWORD)v9)
  {
  }

  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if ((void)v13) {
    CFRelease((CFTypeRef)v13);
  }
  if (*((void *)&v13 + 1)) {
    CFRelease(*((CFTypeRef *)&v13 + 1));
  }
  return v9;
}

uint64_t CFBinaryPlistStreamedWriteObject(const __CFString *a1, int a2, uint64_t a3, uint64_t a4)
{
  cf[0] = 0LL;
  uint64_t v14 = 0LL;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int16 v13 = 0;
  int v18 = 0;
  int v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v8 = _WriteStreamed((uint64_t)cf, a1);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0LL;
  }

  if ((void)v11)
  {
    CFRelease((CFTypeRef)v11);
    *(void *)&__int128 v11 = 0LL;
  }

  if (*((void *)&v11 + 1)) {
    CFRelease(*((CFTypeRef *)&v11 + 1));
  }
  return v8;
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytes(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  int v4 = 19;
  uint64_t v5 = 0LL;
  UInt8 v6 = a1;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  int v9 = 0;
  return _ReadStreamed((uint64_t)&v4, a1, (unint64_t)&a1[a2], 0LL, a3);
}

CFTypeRef _ReadStreamed(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4, int *a5)
{
  CFTypeRef cf = 0LL;
  int v20 = a2;
  _GlobalEnsureInitialized();
  int v10 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x40) != 0)
  {
    __int128 v11 = *(_OWORD *)(MEMORY[0x189605250] + 16LL);
    *(_OWORD *)&v18.version = (unint64_t)*MEMORY[0x189605250];
    v18.copyDescription = (CFDictionaryCopyDescriptionCallBack)*((void *)&v11 + 1);
    v18.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    v18.release = 0LL;
    CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(0LL, 0LL, 0LL, &v18);
    *(void *)(a1 + 24) = v12;
    if (!v12)
    {
      CFTypeRef v13 = 0LL;
      int v14 = -6728;
      goto LABEL_18;
    }

    int v10 = *(_DWORD *)a1;
  }

  if ((v10 & 1) != 0)
  {
    if ((uint64_t)(a3 - (void)a2) < 4)
    {
      CFTypeRef v13 = 0LL;
      int v14 = -6743;
      goto LABEL_18;
    }

    if (*(_DWORD *)a2 != 826426947)
    {
      CFTypeRef v13 = 0LL;
      int v14 = -6716;
      goto LABEL_18;
    }

    int v20 = a2 + 4;
  }

  if ((v10 & 0x10) == 0)
  {
    CFTypeRef v13 = 0LL;
    if ((v10 & 2) == 0)
    {
LABEL_10:
      int v14 = 0;
      goto LABEL_18;
    }

uint64_t _ReadStreamedObject(uint64_t a1, unsigned __int8 **a2, unint64_t a3, void *a4)
{
  value = 0LL;
  char v56 = 0LL;
  int v4 = *a2;
  if ((unint64_t)*a2 < a3)
  {
    UInt8 v6 = (CFAbsoluteTime *)(v4 + 1);
    unsigned int v5 = *v4;
    v57 = v4 + 1;
    switch(v5 >> 4)
    {
      case 0u:
        switch(v5)
        {
          case 0u:
            __int128 v11 = (void *)MEMORY[0x189605018];
            break;
          case 1u:
            *a4 = 0LL;
            goto LABEL_95;
          case 8u:
            __int128 v11 = (void *)MEMORY[0x189604DE0];
            break;
          case 9u:
            __int128 v11 = (void *)MEMORY[0x189604DE8];
            break;
          default:
            goto LABEL_72;
        }

        *a4 = *v11;
        goto LABEL_95;
      case 1u:
        unsigned int v12 = v5 & 0xF;
        if (v12 > 3)
        {
          if (v12 != 4)
          {
            CFMutableArrayRef Mutable = 0LL;
            UInt8 v24 = 0LL;
            unsigned int v25 = -6764;
            goto LABEL_79;
          }

          if ((uint64_t)(a3 - (void)v6) < 16)
          {
LABEL_113:
            unsigned int v25 = -6743;
          }

          else
          {
            __int128 v54 = *(_OWORD *)(v4 + 1);
            v57 = v4 + 17;
            CFNumberRef v40 = CFNumberCreate(0LL, kCFNumberMaxType|kCFNumberSInt8Type, &v54);
            if (v40)
            {
              CFNumberRef v18 = v40;
              *a4 = v40;
              goto LABEL_93;
            }

            unsigned int v25 = -6728;
          }

          goto LABEL_78;
        }

        uint64_t v13 = 1LL << v12;
        if (a3 - (unint64_t)v6 < 1LL << v12)
        {
          unsigned int v14 = -6743;
LABEL_118:
          CFMutableArrayRef Mutable = 0LL;
          UInt8 v24 = 0LL;
          unsigned int v58 = v14;
          goto LABEL_96;
        }

        unsigned int v14 = -6764;
        switch((int)v13)
        {
          case 1:
            *(void *)&CFAbsoluteTime v15 = *(unsigned __int8 *)v6;
            break;
          case 2:
            *(void *)&CFAbsoluteTime v15 = *(unsigned __int16 *)(v4 + 1);
            break;
          case 4:
            *(void *)&CFAbsoluteTime v15 = *(unsigned int *)v6;
            break;
          case 8:
            CFAbsoluteTime v15 = *v6;
            break;
          default:
            goto LABEL_118;
        }

        *(CFAbsoluteTime *)&__int128 v54 = v15;
        v57 = (unsigned __int8 *)v6 + v13;
        CFNumberRef v50 = CFNumberCreate(0LL, kCFNumberSInt64Type, &v54);
        if (!v50) {
          goto LABEL_110;
        }
        CFNumberRef v18 = v50;
        *a4 = v50;
        if (!v12) {
          goto LABEL_95;
        }
        goto LABEL_93;
      case 2u:
        int v16 = v5 & 0xF;
        if (v16 == 3)
        {
          *(CFAbsoluteTime *)&__int128 v54 = *v6;
          CFNumberRef v41 = CFNumberCreate(0LL, kCFNumberFloat64Type, &v54);
          if (v41)
          {
            CFNumberRef v18 = v41;
            uint64_t v17 = 9LL;
LABEL_59:
            int v20 = &v4[v17];
            goto LABEL_60;
          }

LABEL_110:
          CFMutableArrayRef Mutable = 0LL;
LABEL_111:
          UInt8 v24 = 0LL;
LABEL_112:
          unsigned int v25 = -6728;
        }

        else
        {
          if (v16 == 2 && (uint64_t)(a3 - (void)v6) > 3)
          {
            LODWORD(v54) = *(_DWORD *)v6;
            uint64_t v17 = 5LL;
            CFNumberRef v18 = CFNumberCreate(0LL, kCFNumberFloat32Type, &v54);
            if (!v18) {
              goto LABEL_110;
            }
            goto LABEL_59;
          }

            v74 = (void (*)(uint64_t, void, void, void, void))*((void *)cf + 55);
            if (v74) {
              v74( v21 + 24,  *(void *)(v21 + 8216),  *(void *)(v21 + 8520),  *(void *)(v21 + 8528),  *((void *)cf + 54));
            }
            v75 = *(void *)(v21 + 8216);
            if (v75 == 4)
            {
              if (*(_BYTE *)(v21 + 24) == 36) {
                v76 = 6;
              }
              else {
                v76 = 4;
              }
            }

            else
            {
              v76 = 4;
            }

            *((_DWORD *)cf + 41) = v76;
            if (!*((_DWORD *)cf + 6) || !*((void *)cf + 19) || !*((void *)cf + 16)) {
              goto LABEL_159;
            }
            v77 = *(void **)(v21 + 9560);
            if (v77) {
              goto LABEL_123;
            }
            v77 = calloc(1uLL, 0x2120uLL);
            *(void *)(v21 + 9560) = v77;
            if (!v77) {
              goto LABEL_233;
            }
            v75 = *(void *)(v21 + 8216);
LABEL_123:
            memcpy(v77, (const void *)(v21 + 24), v75);
            *(void *)(*(void *)(v21 + 9560) + 0x2000LL) = *(void *)(v21 + 8216);
            v78 = *(void **)(v21 + 9568);
            if (v78)
            {
              free(v78);
              *(void *)(v21 + 9568) = 0LL;
            }

            *(void *)(v21 + 9576) = 0LL;
            v79 = *(void *)(v21 + 8528);
            if (!v79) {
              goto LABEL_159;
            }
            v80 = *(const void **)(v21 + 8520);
            if (v80 == *(const void **)(v21 + 9552))
            {
              *(void *)(v21 + 9568) = v80;
              *(void *)(v21 + 8520) = 0LL;
              *(void *)(v21 + 9552) = 0LL;
            }

            else
            {
              v81 = malloc(*(void *)(v21 + 8528));
              *(void *)(v21 + 9568) = v81;
              if (!v81)
              {
LABEL_233:
                UInt8 v24 = 4294960568LL;
                goto LABEL_207;
              }

              memcpy(v81, v80, v79);
            }

            *(void *)(v21 + 9576) = v79;
            uint64_t v8 = &jpt_186AEEC84;
LABEL_159:
            HTTPMessageReset(v21);
            uint64_t v13 = v25;
            goto LABEL_2;
          case 4:
            CFNumberRef v31 = *v10;
            if (!*v10) {
              goto LABEL_206;
            }
            int v32 = v8;
            *(void *)(v31 + 8224) = *((void *)cf + 29);
            *(void *)(v31 + 8232) = *((void *)cf + 30);
            Message = HTTPMessageReadMessageEx( v31,  *((uint64_t (**)(void *, size_t, unint64_t *, uint64_t))cf + 60),  *((void *)cf + 57));
            uint64_t v34 = _HTTPUpdateExtraData((uint64_t)cf, *(void **)(v31 + 8224), *(void *)(v31 + 8232));
            if ((_DWORD)v34) {
              goto LABEL_227;
            }
            *(void *)(v31 + 8232) = 0LL;
            int v35 = _HTTPClientHandleIOError((uint64_t)cf, Message, 1);
            if ((_DWORD)v35 == 35) {
              return;
            }
            UInt8 v24 = v35;
            if ((_DWORD)v35) {
              goto LABEL_207;
            }
            unsigned int v36 = v13;
            int v37 = (_BYTE *)(v31 + 24);
            LogHTTP( *((void *)cf + 12),  *((int **)cf + 12),  (unsigned __int8 *)(v31 + 24),  *(void *)(v31 + 8216),  *(void *)(v31 + 8520),  *(void *)(v31 + 8528),  a7,  a8);
            unsigned int v38 = (void (*)(uint64_t, void, void, void, void))*((void *)cf + 56);
            if (v38) {
              v38( v31 + 24,  *(void *)(v31 + 8216),  *(void *)(v31 + 8520),  *(void *)(v31 + 8528),  *((void *)cf + 54));
            }
            if (*(void *)(v31 + 8216) == 4LL && *v37 == 36)
            {
              char v39 = (int *)*((void *)cf + 12);
              uint64_t v13 = v36;
              uint64_t v8 = v32;
              if (*v39 > 50) {
                goto LABEL_161;
              }
              if (*v39 == -1)
              {
                if (!_LogCategory_Initialize((uint64_t)v39, 0x32u))
                {
LABEL_161:
                  v96 = (void (*)(void, void, void, void))*((void *)cf + 6);
                  if (v96) {
                    v96( *(unsigned __int8 *)(v31 + 8480),  *(void *)(v31 + 8520),  *(void *)(v31 + 8528),  *((void *)cf + 4));
                  }
LABEL_169:
                  HTTPMessageReset(v31);
                  goto LABEL_2;
                }

                char v39 = (int *)*((void *)cf + 12);
              }

              LogPrintF( (uint64_t)v39,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Binary received 1: CID 0x%08X, Header %zu bytes, Body %zu bytes\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
              goto LABEL_161;
            }

            if ((cf[84] & 0x10) != 0)
            {
              v66 = 0LL;
              uint64_t v67 = *(void *)(v31 + 8448);
              while (v67 != v66)
              {
                if (++v66 == 10) {
                  goto LABEL_137;
                }
              }

              if (!aEvent10[v67])
              {
LABEL_137:
                v91 = (int *)*((void *)cf + 12);
                uint64_t v13 = v36;
                uint64_t v8 = v32;
                if (*v91 <= 50)
                {
                  if (*v91 != -1) {
                    goto LABEL_139;
                  }
                  if (_LogCategory_Initialize((uint64_t)v91, 0x32u))
                  {
                    v91 = (int *)*((void *)cf + 12);
LABEL_139:
                    LogPrintF( (uint64_t)v91,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Event received 1: CID 0x%08X, Header %zu bytes, Body %zu bytes\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
                  }
                }

                v98 = (void (*)(uint64_t, void))*((void *)cf + 7);
                if (v98) {
                  v98(v31, *((void *)cf + 4));
                }
                goto LABEL_169;
              }
            }

    appended = 4294960561LL;
    goto LABEL_111;
  }

      int v20 = PrintFCore(v42);
      goto LABEL_59;
    }

    uint64_t v49 = CFURLGetString(v4);
    if (!v49) {
      return 4294960596LL;
    }
    a2 = (const __CFArray *)v49;
    a1 = v5;
    a3 = v3;
  }

  if (v7 == 2)
  {
    LODWORD(v12) = 0;
  }

  else
  {
    unsigned int v12 = PrintFCore((uint64_t)*v5);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
  }

  __int128 v11 = ((uint64_t (*)(const char *, uint64_t))**v5)("", 1LL);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  LODWORD(v12) = v11 + v12;
  CFStringRef v43 = CFStringGetLength((CFStringRef)v4);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v43, 0x8000100u);
  __int128 v63 = MaximumSizeForEncoding;
  if (!MaximumSizeForEncoding) {
    goto LABEL_127;
  }
  dispatch_source_t v45 = MaximumSizeForEncoding;
  uint64_t v46 = (UInt8 *)malloc(MaximumSizeForEncoding);
  if (!v46) {
    return 4294960568LL;
  }
  CFIndex v47 = (CFUUIDBytes *)v46;
  unsigned int v58 = 0LL;
  v69.location = 0LL;
  v69.length = v43;
  CFStringGetBytes((CFStringRef)v4, v69, 0x8000100u, 0x5Eu, 0, v46, v45, &v58);
  if (*(_BYTE *)(v6 + 27))
  {
    p___int128 context = &context;
    _PrintFObfuscateString((unint64_t)v47, v58, &context, &v63);
    unsigned int v58 = v63;
  }

  else
  {
    p___int128 context = v47;
  }

  CFNumberRef v50 = (**v5)(p_context);
  free(v47);
  unsigned int v12 = (v12 & ~(v50 >> 31)) + v50;
  if ((v50 & 0x80000000) == 0)
  {
LABEL_127:
    __int128 v11 = ((uint64_t (*)(const char *, uint64_t))**v5)("", 1LL);
    goto LABEL_51;
  }

  return v12;
}

                if (v41) {
                  free(v41);
                }
                return v13;
              }

              CFNumberRef v31 = 5LL;
              if (memicmp((unsigned __int8 *)&v24[v39 - 5], " iPad", 5LL))
              {
                if (v39 < 7) {
                  goto LABEL_83;
                }
                CFNumberRef v31 = 7LL;
                uint64_t v34 = -7LL;
LABEL_98:
                v21 += v34;
                unint64_t v29 = v21 - (unsigned __int8 *)v24;
                int v32 = 1;
                goto LABEL_99;
              }

LABEL_61:
          CFMutableArrayRef Mutable = 0LL;
          UInt8 v24 = 0LL;
          unsigned int v25 = -6743;
        }

        goto LABEL_79;
      case 3u:
        if (v5 != 51)
        {
LABEL_72:
          CFMutableArrayRef Mutable = 0LL;
          UInt8 v24 = 0LL;
          unsigned int v25 = -6756;
          goto LABEL_79;
        }

        CFDateRef v19 = CFDateCreate(0LL, *v6);
        if (!v19) {
          goto LABEL_110;
        }
        CFNumberRef v18 = v19;
        int v20 = v4 + 9;
LABEL_60:
        v57 = v20;
        *a4 = v18;
        goto LABEL_93;
      case 4u:
        uint64_t v21 = v5 & 0xF;
        *(void *)&__int128 v54 = v21;
        if ((v5 & 0xF) != 0xF) {
          goto LABEL_22;
        }
        unsigned int v58 = _ReadInteger(&v57, a3, (unint64_t *)&v54, 1, 1);
        if (v58) {
          goto LABEL_86;
        }
        uint64_t v21 = v54;
        if ((unint64_t)v54 >> 31)
        {
          CFMutableArrayRef Mutable = 0LL;
          UInt8 v24 = 0LL;
          unsigned int v25 = -6710;
          goto LABEL_79;
        }

        UInt8 v6 = (CFAbsoluteTime *)v57;
LABEL_22:
        uint64_t v22 = *(void *)(a1 + 8);
        if (v22 && (*(_BYTE *)a1 & 0x20) != 0)
        {
          SubdataWithRangeNoCopy = CFDataCreateSubdataWithRangeNoCopy( v22,  (uint64_t)v6 - *(void *)(a1 + 16),  v21,  (int *)&v58);
          if (!SubdataWithRangeNoCopy)
          {
LABEL_86:
            CFMutableArrayRef Mutable = 0LL;
            goto LABEL_87;
          }

          CFNumberRef v18 = (CFNumberRef)SubdataWithRangeNoCopy;
          uint64_t v21 = v54;
        }

        else
        {
          CFNumberRef v18 = CFDataCreate(0LL, (const UInt8 *)v6, v21);
          if (!v18) {
            goto LABEL_110;
          }
        }

        v57 = (unsigned __int8 *)v6 + v21;
        *a4 = v18;
        if ((unint64_t)v21 >= 2)
        {
LABEL_93:
          uint64_t v51 = *(__CFDictionary **)(a1 + 24);
          if (v51)
          {
            __int128 v52 = *(char **)(a1 + 32);
            *(void *)(a1 + 32) = v52 + 1;
            CFDictionaryAddValue(v51, v52, v18);
          }
        }

        goto LABEL_95;
      case 7u:
        unint64_t v26 = ~(unint64_t)v4 + a3;
        char v27 = v4 + 1;
        while (*v27)
        {
          ++v27;
          if (!--v26) {
            goto LABEL_32;
          }
        }

        CFStringRef v43 = CFStringCreateWithCString(0LL, (const char *)v6, 0x8000100u);
        if (!v43)
        {
          CFMutableArrayRef Mutable = 0LL;
          UInt8 v24 = 0LL;
          unsigned int v25 = -6742;
          goto LABEL_79;
        }

        CFStringRef v44 = v43;
        *a4 = v43;
        if (*(_BYTE *)v6)
        {
          dispatch_source_t v45 = *(__CFDictionary **)(a1 + 24);
          if (v45)
          {
            uint64_t v46 = *(char **)(a1 + 32);
            *(void *)(a1 + 32) = v46 + 1;
            CFDictionaryAddValue(v45, v46, v44);
          }
        }

        v57 = v27 + 1;
        goto LABEL_95;
      case 8u:
        int64_t v28 = v5 & 0xF;
        switch((int)v28)
        {
          case 0:
            unint64_t v29 = *(unsigned __int8 *)v6;
            uint64_t v30 = 1LL;
            break;
          case 1:
            unint64_t v29 = *(unsigned __int16 *)(v4 + 1);
            uint64_t v30 = 2LL;
            break;
          case 2:
            unint64_t v29 = *(unsigned __int16 *)(v4 + 1) | ((unint64_t)v4[3] << 16);
            uint64_t v30 = 3LL;
            break;
          case 3:
            unint64_t v29 = *(unsigned int *)v6;
            uint64_t v30 = 4LL;
            break;
          default:
            unsigned int v25 = -6710;
            goto LABEL_78;
        }

        CFIndex v47 = *(const __CFDictionary **)(a1 + 24);
        if (v47)
        {
          unint64_t v48 = CFDictionaryGetValue(v47, (const void *)v29);
          if (v48)
          {
            uint64_t v49 = v48;
            CFRetain(v48);
            v57 = (unsigned __int8 *)v6 + v30;
            *a4 = v49;
            unsigned int v58 = 0;
LABEL_95:
            CFMutableArrayRef Mutable = 0LL;
            UInt8 v24 = 0LL;
            *a2 = v57;
            unsigned int v58 = 0;
            goto LABEL_96;
          }

          unsigned int v25 = -6708;
        }

        else
        {
          unsigned int v25 = -6732;
        }

  v73 = 0LL;
  v71 = 0u;
  v72 = 0u;
  v70 = _btPairingAgentStatusCallback;
  char v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTPairingAgentCreate[0])( (uint64_t)self->_btSession,  (uint64_t)&v70,  (uint64_t)self,  (uint64_t)&self->_btPairingAgent);
  if (!v39)
  {
    char v39 = ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStart[0])((uint64_t)self->_btPairingAgent);
    if (!v39) {
      goto LABEL_63;
    }
  }

  uint64_t v51 = (v39 + 310000);
LABEL_79:
  NSErrorWithOSStatusF((const char *)v51);
  char v56 = (void *)objc_claimAutoreleasedReturnValue();
  if (v56)
  {
    v57 = self->_ucat;
    if (v57->var0 <= 60)
    {
      if (v57->var0 == -1)
      {
        v57 = self->_ucat;
      }

      LogPrintF( (uint64_t)v57,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x3Cu,  (uint64_t)"### BTSession start failed: %{error}\n",  v52,  v53,  v54,  v55,  (char)v56);
    }
  }
}

  if (self->_wifiRetrier)
  {
    char v27 = self->_ucat;
    if (v27->var0 <= 30)
    {
      if (v27->var0 == -1)
      {
        char v27 = self->_ucat;
      }

      LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUWiFiManager _wifiEnsureStopped]",  0x1Eu,  (uint64_t)"WiFi monitoring stopped\n",  v2,  v3,  v4,  v5,  v31);
    }

LABEL_78:
        CFMutableArrayRef Mutable = 0LL;
        UInt8 v24 = 0LL;
        goto LABEL_79;
      case 9u:
        LOBYTE(v54) = v5 & 0xF;
        CFNumberRef v31 = CFNumberCreate(0LL, kCFNumberSInt8Type, &v54);
        if (!v31) {
          goto LABEL_110;
        }
        *a4 = v31;
        goto LABEL_95;
      case 0xAu:
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
        if (!Mutable) {
          goto LABEL_111;
        }
        while (2)
        {
          int v32 = *(_DWORD *)(a1 + 40);
          if (v32 > 31)
          {
            UInt8 v24 = 0LL;
            goto LABEL_105;
          }

          *(_DWORD *)(a1 + 40) = v32 + 1;
          unsigned int v33 = _ReadStreamedObject(a1, &v57, a3, &value);
          unsigned int v58 = v33;
          --*(_DWORD *)(a1 + 40);
          if (v33)
          {
LABEL_87:
            UInt8 v24 = 0LL;
            goto LABEL_96;
          }

          uint64_t v34 = value;
          if (value)
          {
            CFArrayAppendValue(Mutable, value);
            CFRelease(v34);
            value = 0LL;
            continue;
          }

          break;
        }

        *a4 = Mutable;
        goto LABEL_95;
      case 0xDu:
        UInt8 v24 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        if (!v24)
        {
          CFMutableArrayRef Mutable = 0LL;
          goto LABEL_112;
        }

        while (1)
        {
          int v35 = *(_DWORD *)(a1 + 40);
          if (v35 > 31) {
            break;
          }
          *(_DWORD *)(a1 + 40) = v35 + 1;
          unsigned int v36 = _ReadStreamedObject(a1, &v57, a3, &v56);
          unsigned int v58 = v36;
          int v37 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v37 - 1;
          CFMutableArrayRef Mutable = v56;
          if (v36)
          {
            if (!v56) {
              goto LABEL_96;
            }
            goto LABEL_109;
          }

          if (!v56)
          {
            *a4 = v24;
            goto LABEL_95;
          }

          *(_DWORD *)(a1 + 40) = v37;
          unsigned int v38 = _ReadStreamedObject(a1, &v57, a3, &value);
          unsigned int v58 = v38;
          --*(_DWORD *)(a1 + 40);
          if (v38) {
            goto LABEL_109;
          }
          char v39 = value;
          if (!value)
          {
            unsigned int v58 = -6750;
LABEL_109:
            CFRelease(Mutable);
            CFMutableArrayRef Mutable = 0LL;
            goto LABEL_96;
          }

          CFDictionarySetValue(v24, Mutable, value);
          CFRelease(Mutable);
          char v56 = 0LL;
          CFRelease(v39);
          value = 0LL;
        }

        CFMutableArrayRef Mutable = 0LL;
LABEL_105:
        unsigned int v25 = -6751;
        goto LABEL_79;
      default:
        CFMutableArrayRef Mutable = 0LL;
        UInt8 v24 = 0LL;
        unsigned int v25 = -6735;
        goto LABEL_79;
    }
  }

  if ((v14 & 0x80000000) == 0 && close(v14))
  {
    if (*__error()) {
      __error();
    }
  }

    p_wifiP2PStateMonitor = (void **)&v42->_wifiP2PStateMonitor;
    -[WiFiP2PAWDLStateMonitor endMonitoring](v42->_wifiP2PStateMonitor, "endMonitoring");
    uint64_t v60 = *p_wifiP2PStateMonitor;
    *p_wifiP2PStateMonitor = 0LL;

    uint64_t v61 = self->_wifiP2PStateServices;
    self->_wifiP2PStateServices = 0LL;

    unint64_t v42 = self;
    self->_trafficFlagsUnavailable = 0;
    trafficFlagsUnavailableUpdatedHandler = (void (**)(void))self->_trafficFlagsUnavailableUpdatedHandler;
    if (trafficFlagsUnavailableUpdatedHandler)
    {
      trafficFlagsUnavailableUpdatedHandler[2]();
      goto LABEL_80;
    }

    goto LABEL_81;
  }

            uint64_t v61 = (int *)*((void *)cf + 12);
            if (*v61 > 50) {
              goto LABEL_173;
            }
            if (*v61 != -1) {
              goto LABEL_80;
            }
            if (_LogCategory_Initialize((uint64_t)v61, 0x32u))
            {
              uint64_t v61 = (int *)*((void *)cf + 12);
LABEL_80:
              LogPrintF( (uint64_t)v61,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Event received 3: CID 0x%08X, Header %zu bytes, Body %zu bytes, ignored\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
            }

    CFIndex v47 = (int8x16_t *)TLV8CopyCoalesced(a2, v14, 5, &__dst, (int *)&appended);
    CFNumberRef v31 = (unsigned __int8 *)v47;
    if (appended) {
      goto LABEL_81;
    }
    unint64_t v48 = __dst;
    if (__dst <= 0xF) {
      goto LABEL_399;
    }
    __dst -= 16LL;
    uint64_t v49 = &v47[-1].u8[v48];
    appended = _chacha20_poly1305_decrypt_all( (_DWORD *)(a1 + 414),  "PS-Msg05",  8LL,  0LL,  0LL,  v47,  __dst,  v47,  (uint64_t)v49,  16LL);
    if (appended) {
      goto LABEL_81;
    }
    CFNumberRef v50 = *(const void **)(a1 + 280);
    if (v50)
    {
      CFRelease(v50);
      *(void *)(a1 + 280) = 0LL;
    }

    uint64_t v51 = TLV8CopyCoalesced(v31, v49, 18, (size_t *)&length, 0LL);
    v186 = v8;
    if (v51)
    {
      __int128 v52 = v51;
      __int128 v53 = _OPACKDecodeBytes(0LL, v51, length, 0, &appended);
      free(v52);
      if (!v53) {
        goto LABEL_165;
      }
      __int128 v54 = CFGetTypeID(v53);
      if (v54 != CFDictionaryGetTypeID())
      {
        appended = -6756;
        CFRelease(v53);
        goto LABEL_165;
      }

      *(void *)(a1 + 280) = _PairingSessionIntersectACL(a1, (CFDictionaryRef)v53, (int *)&appended);
      size_t v59 = appended;
      if (appended)
      {
        uint64_t v60 = *(int **)(a1 + 16);
        int v10 = a4;
        if (*v60 > 50) {
          goto LABEL_221;
        }
        if (*v60 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v60, 0x32u))
          {
LABEL_221:
            CFRelease(v53);
            if ((int)appended > -6761)
            {
              uint64_t v8 = v186;
              if ((int)appended > -6728)
              {
                if (appended == -6727)
                {
                  v109 = 4LL;
                  goto LABEL_246;
                }

                if (appended == -6700)
                {
                  v109 = 1LL;
                  goto LABEL_246;
                }
              }

              else
              {
                if (appended == -6760)
                {
                  v109 = 3LL;
                  goto LABEL_246;
                }

                if (appended == -6754)
                {
                  v109 = 2LL;
                  goto LABEL_246;
                }
              }
            }

            else
            {
              uint64_t v8 = v186;
              if ((int)appended > -6765)
              {
                if (appended == -6764)
                {
                  v109 = 6LL;
                  goto LABEL_246;
                }

                if (appended == -6763)
                {
                  v109 = 5LL;
                  goto LABEL_246;
                }
              }

              else
              {
                if (appended == -71144)
                {
                  v109 = 8LL;
                  goto LABEL_246;
                }

                if (appended == -6773)
                {
                  v109 = 7LL;
                  goto LABEL_246;
                }
              }
            }

            if (appended == -6776) {
              v109 = 9LL;
            }
            else {
              v109 = 1LL;
            }
LABEL_246:
            appended = TLV8BufferAppendUInt64((uint64_t)&__src, 7, v109);
            if (appended) {
              goto LABEL_267;
            }
            __s[0] = 6;
            appended = TLV8BufferAppend((uint64_t)&__src, 6, __s, 1uLL);
            if (appended) {
              goto LABEL_267;
            }
            goto LABEL_248;
          }

          uint64_t v60 = *(int **)(a1 + 16);
          size_t v59 = appended;
        }

        LogPrintF( (uint64_t)v60,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"### Pair-verify server M5 requested ACL not allowed: %#m, %@\n",  v55,  v56,  v57,  v58,  v59);
        goto LABEL_221;
      }

      CFRelease(v53);
      uint64_t v8 = v186;
    }

    v76 = *(void **)(a1 + 232);
    if (v76) {
      free(v76);
    }
    *(void *)(a1 + 240) = 0LL;
    *(void *)(a1 + 232) = TLV8CopyCoalesced(v31, v49, 16, (size_t *)(a1 + 240), 0LL);
    v77 = *(const void **)(a1 + 312);
    if (v77)
    {
      CFRelease(v77);
      *(void *)(a1 + 312) = 0LL;
    }

    v78 = TLV8CopyCoalesced(v31, v49, 17, (size_t *)&length, 0LL);
    if (v78)
    {
      v79 = v78;
      *(void *)(a1 + 312) = _OPACKDecodeBytes(0LL, v78, length, 0, &appended);
      free(v79);
      v80 = *(const void **)(a1 + 312);
      if (!v80) {
        goto LABEL_81;
      }
      v81 = CFGetTypeID(v80);
      if (v81 != CFDictionaryGetTypeID())
      {
        appended = -6756;
        v176 = *(const void **)(a1 + 312);
        if (v176)
        {
          CFRelease(v176);
          int v32 = 0LL;
          LOBYTE(v33) = 0;
          *(void *)(a1 + 312) = 0LL;
          goto LABEL_82;
        }

        goto LABEL_81;
      }

      v82 = *(const __CFDictionary **)(a1 + 312);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      TypedValue = CFDictionaryGetTypedValue(v82, @"groupInfo", TypeID, 0LL);
    }

    else
    {
      TypedValue = 0LL;
    }

    PairingSessionSetProperty(a1, @"groupInfoPeer", TypedValue);
    v85 = TLV8CopyCoalesced(v31, v49, 26, (size_t *)&length, 0LL);
    if (!v85) {
      goto LABEL_159;
    }
    v86 = v85;
    unsigned int v33 = CFDataCreate(0LL, v85, length);
    free(v86);
    if (!v33)
    {
      int v32 = 0LL;
LABEL_396:
      v177 = -6728;
LABEL_405:
      appended = v177;
      goto LABEL_167;
    }

    appended = PairingSessionSetProperty(a1, @"ownershipProof", v33);
    CFRelease(v33);
    if (!appended)
    {
LABEL_159:
      v87 = *(void **)(a1 + 296);
      if (v87)
      {
        free(v87);
        *(void *)(a1 + 296) = 0LL;
      }

      v88 = (void *)(a1 + 304);
      *(void *)(a1 + 304) = 0LL;
      *(void *)(a1 + 296) = TLV8CopyCoalesced(v31, v49, 1, (size_t *)(a1 + 304), (int *)&appended);
      if (appended) {
        goto LABEL_165;
      }
      if (!*v88)
      {
        int v32 = 0LL;
        LOBYTE(v33) = 0;
        v177 = -6743;
        goto LABEL_405;
      }

      appended = TLV8GetBytes(v31, v49, 3, 0x20uLL, 0x20uLL, (char *)(a1 + 606), 0LL, 0LL);
      if (appended) {
        goto LABEL_165;
      }
      appended = TLV8GetBytes(v31, v49, 10, 0x40uLL, 0x40uLL, __s, 0LL, 0LL);
      if (appended) {
        goto LABEL_165;
      }
      length = *v88 + 64LL;
      v184 = (unsigned __int8 *)(a1 + 606);
      v116 = (char *)malloc(length);
      int v32 = v116;
      if (!v116) {
        goto LABEL_420;
      }
      CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  *(void *)(a1 + 736),  *(void *)(a1 + 744),  "Pair-Setup-Controller-Sign-Salt",  0x1FuLL,  (uint64_t)"Pair-Setup-Controller-Sign-Info",  31LL,  0x20uLL,  (uint64_t)v116);
      v117 = *(void *)(a1 + 304);
      memcpy(v32 + 32, *(const void **)(a1 + 296), v117);
      v118 = &v32[v117 + 32];
      v119 = *(_OWORD *)(a1 + 622);
      *(_OWORD *)v118 = *(_OWORD *)v184;
      *((_OWORD *)v118 + 1) = v119;
      ccsha512_di();
      v120 = cced25519_verify();
      appended = v120;
      if (v120)
      {
        v125 = v120;
        v126 = *(int **)(a1 + 16);
        uint64_t v8 = v186;
        int v10 = a4;
        if (*v126 > 50) {
          goto LABEL_293;
        }
        if (*v126 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v126, 0x32u))
          {
LABEL_293:
            v199[0] = 2;
            appended = TLV8BufferAppend((uint64_t)&__src, 7, v199, 1uLL);
            if (appended) {
              goto LABEL_268;
            }
            v199[0] = 6;
            appended = TLV8BufferAppend((uint64_t)&__src, 6, v199, 1uLL);
            if (appended) {
              goto LABEL_268;
            }
            v144 = v206;
            v145 = (UInt8 *)v207;
            if (v207)
            {
LABEL_302:
              __src = v208;
              *(void *)&v206 = 0LL;
              v207 = 0LL;
              *a4 = v145;
              *a5 = v144;
              int v10 = a4;
              appended = 0;
              _PairingSessionReset(a1);
              LOBYTE(v33) = 0;
              uint64_t v8 = v186;
              goto LABEL_115;
            }

            else {
              v146 = v206;
            }
            v147 = (UInt8 *)malloc(v146);
            if (v147)
            {
              v145 = v147;
              if (v144) {
                memcpy(v147, __src, v144);
              }
              goto LABEL_302;
            }

            goto LABEL_420;
          }

          v126 = *(int **)(a1 + 16);
          v125 = appended;
        }

        LogPrintF( (uint64_t)v126,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"### Pair-setup server bad signature: %#m\n",  v121,  v122,  v123,  v124,  v125);
        goto LABEL_293;
      }

      free(v32);
      v131 = _PairingSessionVerifyAllowed(a1);
      appended = v131;
      uint64_t v8 = v186;
      if (v131)
      {
        v136 = v131;
        v137 = *(int **)(a1 + 16);
        int v10 = a4;
        if (*v137 > 50) {
          goto LABEL_325;
        }
        if (*v137 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v137, 0x32u))
          {
LABEL_325:
            v199[0] = 9;
            appended = TLV8BufferAppend((uint64_t)&__src, 7, v199, 1uLL);
            if (appended) {
              goto LABEL_267;
            }
            v199[0] = 6;
            appended = TLV8BufferAppend((uint64_t)&__src, 6, v199, 1uLL);
            if (!appended)
            {
              v158 = v206;
              int v32 = (char *)v207;
              if (!v207)
              {
                else {
                  v159 = v206;
                }
                v160 = (char *)malloc(v159);
                int v32 = v160;
                if (!v160) {
                  goto LABEL_392;
                }
                if (v158) {
                  memcpy(v160, __src, v158);
                }
              }

              __src = v208;
              *(void *)&v206 = 0LL;
              v207 = 0LL;
              *a4 = (UInt8 *)v32;
              *a5 = v158;
              int v10 = a4;
              appended = 0;
              _PairingSessionReset(a1);
              goto LABEL_267;
            }

uint64_t _ReadInteger(unsigned __int8 **a1, unint64_t a2, unint64_t *a3, int a4, int a5)
{
  unsigned int v5 = *a1;
  unsigned __int8 v9 = *v5;
  uint64_t v7 = v5 + 1;
  unsigned __int8 v8 = v9;
  unsigned int v12 = v7;
  int v10 = v9 & 0xF0;
  if (a4 && v10 == 144)
  {
    *a3 = v8 & 0xF;
LABEL_8:
    uint64_t result = 0LL;
    *a1 = v7;
    return result;
  }

  if (v10 != 16) {
    return 4294960540LL;
  }
  uint64_t result = _ReadSizedInteger(&v12, a2, 1LL << (v8 & 0xF), a3, a5);
  if (!(_DWORD)result)
  {
    uint64_t v7 = v12;
    goto LABEL_8;
  }

  return result;
}

uint64_t _ReadSizedInteger( unsigned __int8 **a1, uint64_t a2, unint64_t a3, unint64_t *a4, int a5)
{
  unsigned int v5 = *a1;
  uint64_t v6 = 4294960532LL;
  switch(a3)
  {
    case 1uLL:
      unint64_t v7 = *v5;
      goto LABEL_13;
    case 2uLL:
      uint64_t v8 = *v5;
      if (a5) {
        unint64_t v7 = v8 | ((unint64_t)v5[1] << 8);
      }
      else {
        unint64_t v7 = v5[1] | (unint64_t)(v8 << 8);
      }
      goto LABEL_13;
    case 4uLL:
      if (a5) {
        unint64_t v7 = *(unsigned int *)v5;
      }
      else {
        unint64_t v7 = bswap32(*(_DWORD *)v5);
      }
      goto LABEL_13;
    case 8uLL:
      if (a5) {
        unint64_t v7 = *(void *)v5;
      }
      else {
        unint64_t v7 = bswap64(*(void *)v5);
      }
LABEL_13:
      uint64_t v6 = 0LL;
      *a4 = v7;
      *a1 = &v5[a3];
      break;
    default:
      return v6;
  }

  return v6;
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytesEx(unsigned __int8 *a1, uint64_t a2, int a3, int *a4)
{
  int v5 = a3;
  uint64_t v6 = 0LL;
  unint64_t v7 = a1;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int v10 = 0;
  return _ReadStreamed((uint64_t)&v5, a1, (unint64_t)&a1[a2], 0LL, a4);
}

CFTypeRef CFBinaryPlistStreamedCreateWithBytesEx2( unsigned __int8 *a1, uint64_t a2, int a3, void *a4, int *a5)
{
  int v6 = a3;
  uint64_t v7 = 0LL;
  uint64_t v8 = a1;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  int v11 = 0;
  return _ReadStreamed((uint64_t)&v6, a1, (unint64_t)&a1[a2], a4, a5);
}

CFTypeRef CFBinaryPlistStreamedCreateWithData(const __CFData *a1, int a2, int *a3)
{
  int v7 = a2;
  uint64_t v8 = a1;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(a1);
  int v12 = 0;
  CFIndex Length = CFDataGetLength(a1);
  return _ReadStreamed((uint64_t)&v7, BytePtr, (unint64_t)&BytePtr[Length], 0LL, a3);
}

CFMutableDataRef CFBinaryPlistV0CreateData(const void *a1, int *a2)
{
  return CFBinaryPlistV0CreateDataEx(a1, 0, a2);
}

CFMutableDataRef CFBinaryPlistV0CreateDataEx(const void *a1, int a2, int *a3)
{
  usedBufLen[1] = *MEMORY[0x1895F89C0];
  _GlobalEnsureInitialized();
  uint64_t v64 = 0LL;
  __int128 theArray = 0u;
  __int128 v62 = 0u;
  __int16 v63 = 0;
  uint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  int v68 = 0;
  int v65 = a2;
  CFMutableDataRef context = CFDataCreateMutable(0LL, 0LL);
  if (!context)
  {
    CFMutableDataRef v9 = 0LL;
    int v8 = -6728;
    goto LABEL_113;
  }

  *(void *)&__int128 theArray = CFArrayCreateMutable(0LL, 0LL, 0LL);
  if ((void)theArray)
  {
    __int128 v6 = *(_OWORD *)(MEMORY[0x189605240] + 32LL);
    *(_OWORD *)&keyCallBacks.release = *(_OWORD *)(MEMORY[0x189605240] + 16LL);
    *(_OWORD *)&keyCallBacks.equal = v6;
    keyCallBacks.version = *MEMORY[0x189605240];
    keyCallBacks.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    keyCallBacks.retain = 0LL;
    keyCallBacks.release = 0LL;
    *((void *)&theArray + 1) = CFDictionaryCreateMutable(0LL, 0LL, &keyCallBacks, 0LL);
    if (*((void *)&theArray + 1))
    {
      _FlattenPlist((uint64_t)&context, a1);
      int v7 = _WriteBytes((uint64_t)&context, (const UInt8 *)"bplist00", 8LL);
      if (v7)
      {
        int v8 = v7;
        CFMutableDataRef v9 = 0LL;
        goto LABEL_111;
      }

      v56[0] = 0LL;
      __int128 v57 = 0u;
      uint64_t v10 = v62;
      v56[1] = bswap64(v62);
      if (DWORD1(v62))
      {
        char v11 = 8;
      }

      else if ((v62 & 0xFFFF0000) != 0)
      {
        char v11 = 4;
      }

      else
      {
        char v11 = (v62 & 0xFF00) != 0 ? 2 : 1;
      }

      HIBYTE(v56[0]) = v11;
      LOBYTE(v63) = v11;
      int v12 = malloc(8 * v62);
      if (v12)
      {
        uint64_t v13 = v12;
        if (v10 < 1)
        {
LABEL_94:
          *((void *)&v57 + 1) = bswap64(*((unint64_t *)&v62 + 1));
          if ((WORD4(v62) & 0xFF00) != 0) {
            char v48 = 2;
          }
          else {
            char v48 = 1;
          }
          if ((DWORD2(v62) & 0xFFFF0000) != 0) {
            unsigned __int8 v49 = 4;
          }
          else {
            unsigned __int8 v49 = v48;
          }
          if (HIDWORD(*((void *)&v62 + 1))) {
            unsigned __int8 v49 = 8;
          }
          BYTE6(v56[0]) = v49;
          if (v10 < 1)
          {
LABEL_106:
            int v8 = _WriteBytes((uint64_t)&context, (const UInt8 *)v56, 32LL);
            if (v8) {
              goto LABEL_109;
            }
            CFMutableDataRef v9 = context;
            CFMutableDataRef context = 0LL;
          }

          else
          {
            uint64_t v50 = 0LL;
            CFIndex v51 = v49;
            __int128 v52 = (const UInt8 *)&usedBufLen[1] - v49;
            while (1)
            {
              usedBufLen[0] = bswap64(v13[v50]);
              int v32 = _WriteBytes((uint64_t)&context, v52, v51);
              if (v32) {
                break;
              }
            }

LABEL_108:
            int v8 = v32;
LABEL_109:
            CFMutableDataRef v9 = 0LL;
          }

          free(v13);
          goto LABEL_111;
        }

        CFIndex v14 = 0LL;
        __int128 v54 = (const __CFString *)*MEMORY[0x189605018];
        uint64_t v55 = (const __CFString *)*MEMORY[0x189604DE8];
        while (1)
        {
          CFAbsoluteTime v15 = (const __CFArray *)theArray;
          v13[v14] = *((void *)&v62 + 1);
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, v14);
          CFTypeID v17 = CFGetTypeID(ValueAtIndex);
          if (v17 == gCFStringType) {
            break;
          }
          if (v17 == gCFNumberType)
          {
            int v22 = _WriteNumber((uint64_t)&context, (CFNumberRef)ValueAtIndex, 0, 0);
            goto LABEL_37;
          }

          if (v17 == gCFBooleanType)
          {
            if (v55 == ValueAtIndex) {
              UInt8 v23 = 9;
            }
            else {
              UInt8 v23 = 8;
            }
            UInt8 v70 = v23;
            goto LABEL_26;
          }

          if (v17 == gCFDataType)
          {
            CFIndex Length = CFDataGetLength((CFDataRef)ValueAtIndex);
            int64_t v30 = Length;
            char v31 = 15;
            if (Length < 15) {
              char v31 = Length;
            }
            UInt8 v70 = v31 | 0x40;
            int v32 = _WriteBytes((uint64_t)&context, &v70, 1LL);
            if (v32) {
              goto LABEL_108;
            }
            if (v30 >= 15)
            {
              int v32 = _WriteInteger((uint64_t)&context, v30, 0, 0);
              if (v32) {
                goto LABEL_108;
              }
            }

            BytePtr = (UInt8 *)CFDataGetBytePtr((CFDataRef)ValueAtIndex);
            CFIndex v25 = v30;
LABEL_36:
            int v22 = _WriteBytes((uint64_t)&context, BytePtr, v25);
LABEL_37:
            int v8 = v22;
            if (v22) {
              goto LABEL_109;
            }
            goto LABEL_66;
          }

          if (v17 == gCFDictionaryType)
          {
            CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
            int64_t v43 = Count;
            char v44 = 15;
            if (Count < 15) {
              char v44 = Count;
            }
            UInt8 v70 = v44 | 0xD0;
            int v32 = _WriteBytes((uint64_t)&context, &v70, 1LL);
            if (v32) {
              goto LABEL_108;
            }
            if (v43 >= 15)
            {
              int v32 = _WriteInteger((uint64_t)&context, v43, 0, 0);
              if (v32) {
                goto LABEL_108;
              }
            }

            CFDictionaryApplyFunction( (CFDictionaryRef)ValueAtIndex,  (CFDictionaryApplierFunction)_WriteV0DictionaryKey,  &context);
            CFDictionaryApplyFunction( (CFDictionaryRef)ValueAtIndex,  (CFDictionaryApplierFunction)_WriteV0DictionaryValue,  &context);
          }

          else
          {
            if (v17 != gCFArrayType)
            {
              if (v17 == gCFDateType)
              {
                UInt8 v70 = 51;
                int v32 = _WriteBytes((uint64_t)&context, &v70, 1LL);
                if (v32) {
                  goto LABEL_108;
                }
                unint64_t v69 = bswap64(COERCE_UNSIGNED_INT64(MEMORY[0x186E41D84](ValueAtIndex)));
                BytePtr = (UInt8 *)&v69;
                CFIndex v25 = 8LL;
                goto LABEL_36;
              }

              if (v54 != ValueAtIndex)
              {
                int v8 = -6732;
                goto LABEL_109;
              }

              UInt8 v70 = 0;
LABEL_26:
              BytePtr = &v70;
              CFIndex v25 = 1LL;
              goto LABEL_36;
            }

            CFIndex v45 = CFArrayGetCount((CFArrayRef)ValueAtIndex);
            uint64_t v46 = v45;
            char v47 = 15;
            if (v45 < 15) {
              char v47 = v45;
            }
            UInt8 v70 = v47 | 0xA0;
            int v32 = _WriteBytes((uint64_t)&context, &v70, 1LL);
            if (v32) {
              goto LABEL_108;
            }
            if (v46 >= 15)
            {
              int v32 = _WriteInteger((uint64_t)&context, v46, 0, 0);
              if (v32) {
                goto LABEL_108;
              }
            }

            v75.location = 0LL;
            v75.length = v46;
            CFArrayApplyFunction((CFArrayRef)ValueAtIndex, v75, (CFArrayApplierFunction)_WriteV0ArrayValue, &context);
          }

            CFRelease(v101);
            CFRelease(v106);
            v101 = trust;
            if (!trust) {
              goto LABEL_110;
            }
            goto LABEL_109;
          }
        }

        CFRelease(v99);
        char v56 = 4294960568LL;
        goto LABEL_129;
      }

      if (gLogCategory_MFiClientCore <= 90)
      {
        v80 = v139;
        if (gLogCategory_MFiClientCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_MFiClientCore, 0x5Au)) {
          LogPrintF( (uint64_t)&gLogCategory_MFiClientCore,  (uint64_t)"OSStatus MFiPlatform_VerifySignatureEx(const void *, size_t, const void *, size_t, const void *, si ze_t, CFDictionaryRef)",  0x5Au,  (uint64_t)"### MFi create trust failed: %#m\n",  v64,  v65,  v66,  v67,  v56);
        }
        v79 = 0LL;
        goto LABEL_130;
      }

      v79 = 0LL;
LABEL_224:
      v80 = v139;
      goto LABEL_130;
    }

          v84 = v44[708];
          if (v84 <= 40 && (v84 != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockRaw, 0x28u))) {
            LogPrintF( (uint64_t)&gLogCategory_NTPClockRaw,  (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)",  0x28u,  (uint64_t)"NTP Raw: %zu\t%llu\t%llu\t%llu\t%llu\t%.9f\t%.9f\t%.9f\t%.9f\t%.9f\t%.3f\t%.3f\t%.3f\t%.3f\t%.3f\t%s\n",  v21,  v22,  v23,  v24,  v32 + 1);
          }
LABEL_112:
          if (v33 % v39) {
            goto LABEL_141;
          }
          v85 = *(void *)(a1 + 3592);
          v86 = v85 + 1;
          v87 = a1 + 1032 + 40 * (v85 & 0x3F);
          v88 = a1 + 40 * v34;
          v89 = *(_OWORD *)(v88 + 384);
          v90 = *(_OWORD *)(v88 + 400);
          *(void *)(v87 + 32) = *(void *)(v88 + 416);
          *(_OWORD *)v87 = v89;
          *(_OWORD *)(v87 + 16) = v90;
          *(void *)(a1 + 3592) = v85 + 1;
          v91 = (unint64_t)(v85 + 1) < 0x40 ? v85 + 1 : 64LL;
          v92 = v86 % v91;
          v93 = *(void *)(v88 + 384);
          v94 = *(void *)(a1 + 1032 + 40 * v92);
          uint64_t v55 = v93 >= v94;
          v95 = v93 - v94;
          if (v95 == 0 || !v55) {
            goto LABEL_141;
          }
          v96 = *(void *)(a1 + 40 * v34 + 392);
          v97 = *(void *)(a1 + 40 * v92 + 1040);
          uint64_t v55 = v96 >= v97;
          v98 = v96 - v97;
          if (v98 == 0 || !v55) {
            goto LABEL_141;
          }
          v99 = *(void *)(a1 + 40 * v34 + 400);
          v100 = *(void *)(a1 + 40 * v92 + 1048);
          uint64_t v55 = v99 >= v100;
          v101 = v99 - v100;
          if (v101 == 0
            || !v55
            || (v102 = *(void *)(a1 + 40 * v34 + 408),
                v103 = *(void *)(a1 + 40 * v92 + 1056),
                uint64_t v55 = v102 >= v103,
                v104 = v102 - v103,
                v104 == 0 || !v55))
          {
LABEL_141:
            if (v32 == 31)
            {
              *(void *)(a1 + 68) = 0x834000007D0LL;
            }

            else if (v32)
            {
              return 0LL;
            }

            v113 = *(int **)(a1 + 56);
            if (*v113 <= 20)
            {
              if (*v113 == -1)
              {
                v113 = *(int **)(a1 + 56);
              }

              LogPrintF( (uint64_t)v113,  (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)",  0x14u,  (uint64_t)"NTP client poll updated: %u-%u ms\n",  v21,  v22,  v23,  v24,  *(_DWORD *)(a1 + 68));
            }

            return 0LL;
          }

          v105 = ((double)v98 / (double)v95 + (double)v101 / (double)v104) * 0.5;
          v106 = *(double *)(a1 + 3696);
          *(double *)(a1 + 3720) = vabdd_f64(v105, v106) * 0.125 + *(double *)(a1 + 3720) * 0.875;
          v107 = v105 * 0.25 + v106 * 0.75;
          *(double *)(a1 + 3696) = v107;
          v108 = *(double *)(a1 + 3704);
          if (v105 < v108) {
            *(double *)(a1 + 3704) = v105;
          }
          v109 = v107 * (double)*(unint64_t *)(a1 + 96);
          *(void *)(a1 + 3760) = (unint64_t)v109;
          *(void *)(a1 + 3752) = 0xFFFFFFFFFFFFFFFFLL / (unint64_t)v109;
          if (!*(_DWORD *)(a1 + 3688))
          {
            v110 = *(int **)(a1 + 56);
            if (*v110 <= 20)
            {
              if (*v110 != -1)
              {
LABEL_131:
                LogPrintF( (uint64_t)v110,  (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)",  0x14u,  (uint64_t)"NTP client update: #\tRTT ms\tRTT ! \tRateNew    \tRateAvg    \tRateHz    \tJitHz\tOffset ms\t Offset Avg\tFlags\n",  v21,  v22,  v23,  v24,  v114);
                goto LABEL_136;
              }

              if (_LogCategory_Initialize((uint64_t)v110, 0x14u))
              {
                v110 = *(int **)(a1 + 56);
                goto LABEL_131;
              }
            }
          }

    char v11 = 0;
    goto LABEL_35;
  }

  uint64_t v3 = *__error();
  if (v3)
  {
    int v5 = 0LL;
    goto LABEL_27;
  }

LABEL_66:
          ++v14;
          uint64_t v10 = v62;
        }

        CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
        if (CStringPtr)
        {
          CFDateRef v19 = (UInt8 *)CStringPtr;
          size_t v20 = strlen(CStringPtr);
          uint64_t v21 = 0LL;
        }

        else
        {
          CFIndex v26 = CFStringGetLength(ValueAtIndex);
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v26, 0x8000100u);
          CFIndex v28 = MaximumSizeForEncoding;
          usedBufLen[0] = MaximumSizeForEncoding;
          if (MaximumSizeForEncoding >= 256)
          {
            uint64_t v21 = (UInt8 *)malloc(MaximumSizeForEncoding + 1);
            CFDateRef v19 = v21;
            if (!v21) {
              goto LABEL_92;
            }
          }

          else
          {
            uint64_t v21 = 0LL;
            CFDateRef v19 = v60;
          }

          v73.location = 0LL;
          v73.length = v26;
          if (CFStringGetBytes(ValueAtIndex, v73, 0x8000100u, 0, 0, v19, v28, usedBufLen) != v26)
          {
            uint64_t v34 = 0LL;
            int v8 = -6700;
            if (v21) {
LABEL_62:
            }
              free(v21);
LABEL_63:
            if (v34) {
              free(v34);
            }
            if (v8) {
              goto LABEL_109;
            }
            goto LABEL_66;
          }

          size_t v20 = usedBufLen[0];
          v19[usedBufLen[0]] = 0;
        }

        uint64_t v33 = 0LL;
        if (v20)
        {
          while (((char)v19[v33] & 0x80000000) == 0)
          {
            if (v20 == ++v33) {
              goto LABEL_47;
            }
          }
        }

        if (v33 == v20)
        {
LABEL_47:
          uint64_t v34 = 0LL;
          char v35 = 80;
        }

        else
        {
          if ((v65 & 1) == 0)
          {
            if (v21) {
              free(v21);
            }
            CFIndex v36 = CFStringGetLength(ValueAtIndex);
            int64_t v37 = CFStringGetMaximumSizeForEncoding(v36, 0x10000100u);
            CFIndex v38 = v37;
            usedBufLen[0] = v37;
            if (v37 >= 257)
            {
              uint64_t v34 = malloc(v37);
              CFDateRef v19 = (UInt8 *)v34;
              if (!v34)
              {
LABEL_92:
                int v8 = -6728;
                goto LABEL_109;
              }
            }

            else
            {
              uint64_t v34 = 0LL;
              CFDateRef v19 = v60;
            }

            v74.location = 0LL;
            v74.length = v36;
            if (CFStringGetBytes(ValueAtIndex, v74, 0x10000100u, 0, 0, v19, v38, usedBufLen) != v36)
            {
              int v8 = -6700;
              goto LABEL_63;
            }

            uint64_t v21 = 0LL;
            CFIndex v39 = usedBufLen[0];
            size_t v20 = (unint64_t)usedBufLen[0] >> 1;
            char v35 = 96;
            goto LABEL_55;
          }

          uint64_t v34 = 0LL;
          char v35 = 112;
        }

        CFIndex v39 = v20;
LABEL_55:
        char v40 = 15;
        if (v20 < 0xF) {
          char v40 = v20;
        }
        UInt8 v71 = v35 | v40;
        int v41 = _WriteBytes((uint64_t)&context, &v71, 1LL);
        int v8 = v41;
        if (v21) {
          goto LABEL_62;
        }
        goto LABEL_63;
      }
    }
  }

  CFMutableDataRef v9 = 0LL;
  int v8 = -6728;
LABEL_111:
  if (context)
  {
    CFRelease(context);
    CFMutableDataRef context = 0LL;
  }

            LODWORD(v35) = 1;
LABEL_67:
            CFIndex v36 = v69;
            goto LABEL_68;
          }

  self->_selfAccessorySiriEnabled = 0;
LABEL_67:
  resolvableAccessories = self->_resolvableAccessories;
  if (!resolvableAccessories) {
    goto LABEL_73;
  }
  v80 = self->_ucat;
  if (v80->var0 <= 30)
  {
    if (v80->var0 == -1)
    {
      v80 = self->_ucat;
    }

    LogPrintF( (uint64_t)v80,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"ResolvableAccessory updated: HK clear",  v73,  v74,  v75,  v76,  v95);
  }

    -[CURetrier invalidateDirect](self->_wifiRetrier, "invalidateDirect");
    wifiRetrier = self->_wifiRetrier;
    self->_wifiRetrier = 0LL;
  }

  -[WiFiP2PAWDLStateMonitor endMonitoring](self->_wifiP2PStateMonitor, "endMonitoring");
  wifiP2PStateMonitor = self->_wifiP2PStateMonitor;
  self->_wifiP2PStateMonitor = 0LL;

  wifiP2PStateServices = self->_wifiP2PStateServices;
  self->_wifiP2PStateServices = 0LL;
}

  if (v24) {
    free(v24);
  }
  return v23;
}

      CFDateRef v19 = 4294960596LL;
      goto LABEL_8;
    }

    if (!*__error()) {
      goto LABEL_66;
    }
    CFDateRef v19 = *__error();
LABEL_49:
    if ((_DWORD)v19) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }

  return v19;
}

      appended = TLV8GetOrCopyCoalesced(a2, v14, 3, (unsigned __int8 **)v199, &__dst, (unsigned __int8 **)&v193, 0LL);
      if (appended) {
        goto LABEL_68;
      }
      appended = TLV8GetOrCopyCoalesced(a2, v14, 4, &v192, (size_t *)&v191, (unsigned __int8 **)&v190, 0LL);
      if (appended) {
        goto LABEL_68;
      }
      char v40 = *(void **)(a1 + 736);
      if (v40)
      {
        memset_s(v40, *(void *)(a1 + 744), 0, *(void *)(a1 + 744));
        int v41 = *(void **)(a1 + 736);
        if (v41)
        {
          free(v41);
          *(void *)(a1 + 736) = 0LL;
        }
      }

      *(void *)(a1 + 744) = 0LL;
      appended = SRPServerVerify_libsrp( *(void ***)(a1 + 696),  *(uint64_t *)v199,  __dst,  (uint64_t)v192,  v191,  (void *)(a1 + 736),  (void *)(a1 + 744),  &v189,  &v188);
      if (appended)
      {
        uint64_t v46 = *(int **)(a1 + 16);
        uint64_t v10 = a4;
        if (*v46 > 30) {
          goto LABEL_202;
        }
        if (*v46 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v46, 0x1Eu))
          {
LABEL_202:
            __s[0] = 2;
            appended = TLV8BufferAppend((uint64_t)&__src, 7, __s, 1uLL);
            if (appended) {
              goto LABEL_266;
            }
            __s[0] = 4;
            appended = TLV8BufferAppend((uint64_t)&__src, 6, __s, 1uLL);
            if (appended) {
              goto LABEL_266;
            }
            v102 = mach_absolute_time();
            v103 = gPairingThrottleNextTicks - v102;
            if (gPairingThrottleNextTicks > v102)
            {
              if (UpTicksPerSecond_sOnce != -1) {
                dispatch_once_f( &UpTicksPerSecond_sOnce,  &UpTicksPerSecond_sTicksPerSecond,  (dispatch_function_t)_UpTicksPerSecondInit);
              }
              v104 = v103 == v103 / UpTicksPerSecond_sTicksPerSecond * UpTicksPerSecond_sTicksPerSecond
                   ? v103 / UpTicksPerSecond_sTicksPerSecond
                   : v103 / UpTicksPerSecond_sTicksPerSecond + 1;
              if ((int)v104 >= 1)
              {
                appended = TLV8BufferAppendUInt64((uint64_t)&__src, 8, v104);
                if (appended) {
                  goto LABEL_266;
                }
              }
            }

            v105 = v206;
            v106 = (UInt8 *)v207;
            if (!v207)
            {
              else {
                v107 = v206;
              }
              v108 = (UInt8 *)malloc(v107);
              if (!v108) {
                goto LABEL_391;
              }
              v106 = v108;
              if (v105) {
                memcpy(v108, __src, v105);
              }
            }

            __src = v208;
            *(void *)&v206 = 0LL;
            v207 = 0LL;
            *a4 = v106;
            uint64_t v10 = a4;
            *a5 = v105;
            appended = 0;
            _PairingSessionReset(a1);
            goto LABEL_266;
          }

          uint64_t v46 = *(int **)(a1 + 16);
        }

        LogPrintF( (uint64_t)v46,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"### Pair-setup server wrong setup code\n",  v42,  v43,  v44,  v45,  v180);
        goto LABEL_202;
      }

      uint64_t v61 = *(void (**)(void))(a1 + 40);
      if (v61) {
        v61(*(void *)(a1 + 24));
      }
      *(_BYTE *)(a1 + 413) = 0;
      __int128 v62 = *(void **)(a1 + 384);
      if (v62)
      {
        free(v62);
        *(void *)(a1 + 384) = 0LL;
      }

      *(void *)(a1 + 392) = 0LL;
      PairingResetThrottle();
      *(_BYTE *)(a1 + 120) = 4;
      appended = TLV8BufferAppend((uint64_t)&__src, 6, (char *)(a1 + 120), 1uLL);
      if (appended) {
        goto LABEL_68;
      }
      appended = TLV8BufferAppend((uint64_t)&__src, 4, (char *)v189, v188);
      if (appended) {
        goto LABEL_68;
      }
      __int16 v63 = *(void **)(a1 + 696);
      if (v63)
      {
        SRPDelete_libsrp(v63);
        *(void *)(a1 + 696) = 0LL;
      }

      CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  *(void *)(a1 + 736),  *(void *)(a1 + 744),  "Pair-Setup-Encrypt-Salt",  0x17uLL,  (uint64_t)"Pair-Setup-Encrypt-Info",  23LL,  0x20uLL,  a1 + 414);
      _ServerEncryptExtra(a1, (uint64_t)&__src);
      uint64_t v64 = v206;
      int v32 = (char *)v207;
      if (!v207)
      {
        else {
          int v65 = v206;
        }
        uint64_t v66 = (char *)malloc(v65);
        int v32 = v66;
        if (!v66)
        {
          char v31 = 0LL;
          goto LABEL_392;
        }

        if (v64) {
          memcpy(v66, __src, v64);
        }
      }

      __src = v208;
      *(void *)&v206 = 0LL;
      v207 = 0LL;
      *a4 = (UInt8 *)v32;
      *a5 = v64;
      appended = 0;
      uint64_t v67 = *(int **)(a1 + 16);
      int v68 = *v67;
      if (*v67 <= 30)
      {
        if (v68 == -1)
        {
          if (!_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu)) {
            goto LABEL_305;
          }
          uint64_t v67 = *(int **)(a1 + 16);
          int v68 = *v67;
        }

        unint64_t v69 = v68 <= 10 && (v68 != -1 || _LogCategory_Initialize((uint64_t)v67, 0xAu));
        LogPrintF( (uint64_t)v67,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup server M4 -- verify response\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  a7,  a8,  !v69);
      }

LABEL_113:
  if ((void)theArray)
  {
    CFRelease((CFTypeRef)theArray);
    *(void *)&__int128 theArray = 0LL;
  }

  if (*((void *)&theArray + 1)) {
    CFRelease(*((CFTypeRef *)&theArray + 1));
  }
  if (a3) {
    *a3 = v8;
  }
  return v9;
}
}

    if (v86) {
      CFArrayGetCount(v86);
    }
    FPrintF(v29);
    if (v43)
    {
      char v44 = 0LL;
      while (1)
      {
        CFIndex v45 = CFDictionaryGetTypeID();
        uint64_t v46 = CFArrayGetTypedValueAtIndex(v28, v44, v45, (int *)&v92);
        if ((_DWORD)v92) {
          break;
        }
        char v47 = v46;
        char v48 = CFStringGetTypeID();
        CFDictionaryGetTypedValue(v47, @"name", v48, (int *)&v92);
        if ((_DWORD)v92) {
          break;
        }
        unsigned __int8 v49 = CFDictionaryGetInt64Ranged(v47, @"total", 0LL, 0xFFFFFFFFLL, (int *)&v92);
        if ((_DWORD)v92) {
          break;
        }
        uint64_t v50 = v49;
        CFIndex v51 = CFDictionaryGetInt64Ranged(v47, @"passes", 0LL, 0xFFFFFFFFLL, (int *)&v92);
        if ((_DWORD)v92) {
          break;
        }
        __int128 v52 = v51;
        CFDictionaryGetDouble(v47, @"duration", &v92);
        if ((_DWORD)v92) {
          break;
        }
        FPrintF(v29);
        __int128 v53 = CFArrayGetTypeID();
        TypedValue = CFDictionaryGetTypedValue(v47, @"failures", v53, 0LL);
        if ((v50 != v52) != (TypedValue != 0LL))
        {
          LODWORD(v92) = -6762;
          break;
        }

        uint64_t v55 = TypedValue;
        if (TypedValue)
        {
          char v56 = CFArrayGetCount(TypedValue);
          if (v56 >= 1)
          {
            __int128 v57 = v56;
            unsigned int v58 = 0LL;
            do
            {
              size_t v59 = CFDictionaryGetTypeID();
              uint64_t v60 = CFArrayGetTypedValueAtIndex(v55, v58, v59, (int *)&v92);
              if ((_DWORD)v92) {
                goto LABEL_151;
              }
              uint64_t v61 = v60;
              __int128 v62 = CFStringGetTypeID();
              CFDictionaryGetTypedValue(v61, @"type", v62, (int *)&v92);
              if ((_DWORD)v92) {
                goto LABEL_151;
              }
              __int16 v63 = CFDictionaryCopyCString(v61, @"message", &v92);
              if ((_DWORD)v92) {
                goto LABEL_151;
              }
              uint64_t v64 = v63;
              LODWORD(v92) = XMLEscapeCopy(v63, (char **)v94);
              free(v64);
              if ((_DWORD)v92) {
                goto LABEL_151;
              }
              int v65 = CFDictionaryCopyCString(v61, @"detail", &v92);
              if ((_DWORD)v92) {
                goto LABEL_151;
              }
              uint64_t v66 = v65;
              LODWORD(v92) = XMLEscapeCopy(v65, &v93);
              free(v66);
              if ((_DWORD)v92) {
                goto LABEL_151;
              }
              uint64_t v67 = v93;
              int v68 = v94[0];
              FPrintF(v29);
              if (v68)
              {
                free(v68);
                v94[0] = 0LL;
              }

              if (v67)
              {
                free(v67);
                v93 = 0LL;
              }
            }

            while (v57 != ++v58);
          }
        }

        CFIndex v28 = theArray;
        if (v50 != v52) {
          FPrintF(v29);
        }
        if (++v44 == Count) {
          goto LABEL_140;
        }
      }
    }

    else
    {
LABEL_140:
      if (v86 && (unint64_t v69 = CFArrayGetCount(v86), v69 >= 1))
      {
        UInt8 v70 = v69;
        UInt8 v71 = 0LL;
        while (1)
        {
          v72 = CFDictionaryGetTypeID();
          CFRange v73 = CFArrayGetTypedValueAtIndex(v86, v71, v72, (int *)&v92);
          if ((_DWORD)v92) {
            break;
          }
          CFRange v74 = v73;
          CFRange v75 = CFStringGetTypeID();
          CFDictionaryGetTypedValue(v74, @"type", v75, (int *)&v92);
          if ((_DWORD)v92) {
            break;
          }
          v76 = CFDictionaryCopyCString(v74, @"message", &v92);
          if ((_DWORD)v92) {
            break;
          }
          v77 = v76;
          LODWORD(v92) = XMLEscapeCopy(v76, (char **)v94);
          free(v77);
          if ((_DWORD)v92) {
            break;
          }
          FPrintF(v29);
          v78 = v94[0];
          FPrintF(v29);
          FPrintF(v29);
          if (v78)
          {
            free(v78);
            v94[0] = 0LL;
          }

          if (v70 == ++v71) {
            goto LABEL_150;
          }
        }
      }

      else
      {
LABEL_150:
        FPrintF(v29);
        FPrintF(v29);
        LODWORD(v92) = 0;
      }
    }

void _FlattenPlist(uint64_t a1, const void *a2)
{
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 272));
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 272), a2, *(const void **)(a1 + 280));
  CFTypeID v5 = CFGetTypeID(a2);
  CFTypeID v6 = v5;
  BOOL v10 = v5 == gCFStringType || v5 == gCFNumberType || v5 == gCFBooleanType || v5 == gCFDataType || v5 == gCFDateType;
  if (!v10 || CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 272)) != Count)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), a2);
    ++*(void *)(a1 + 280);
    if (v6 == gCFDictionaryType)
    {
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_FlattenDictionaryKey, (void *)a1);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_FlattenDictionaryValue, (void *)a1);
    }

    else if (v6 == gCFArrayType)
    {
      v11.length = CFArrayGetCount((CFArrayRef)a2);
      v11.location = 0LL;
      CFArrayApplyFunction((CFArrayRef)a2, v11, (CFArrayApplierFunction)_FlattenArray, (void *)a1);
    }
  }

uint64_t _WriteV0DictionaryKey(void *key, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 272), key));
  return _WriteBytes(a3, (const UInt8 *)&v5 - *(unsigned __int8 *)(a3 + 296) + 4, *(unsigned __int8 *)(a3 + 296));
}

uint64_t _WriteV0DictionaryValue(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned int v5 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 272), a2));
  return _WriteBytes(a3, (const UInt8 *)&v5 - *(unsigned __int8 *)(a3 + 296) + 4, *(unsigned __int8 *)(a3 + 296));
}

uint64_t _WriteV0ArrayValue(void *key, uint64_t a2)
{
  unsigned int v4 = bswap32(CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 272), key));
  return _WriteBytes(a2, (const UInt8 *)&v4 - *(unsigned __int8 *)(a2 + 296) + 4, *(unsigned __int8 *)(a2 + 296));
}

uint64_t _FlattenDictionaryKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlattenPlist(a3, a1);
}

uint64_t _FlattenDictionaryValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _FlattenPlist(a3, a2);
}

uint64_t _FlattenArray(uint64_t a1, uint64_t a2)
{
  return _FlattenPlist(a2, a1);
}

__CFDictionary *CFBinaryPlistV0CreateWithData(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  cf[0] = 0LL;
  unint64_t v26 = 0LL;
  int v27 = 0;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int16 v25 = 0;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  int v30 = 0;
  if (a2 <= 0)
  {
    CFAbsoluteTime v15 = 0LL;
    int SizedInteger = -6743;
    goto LABEL_22;
  }

  if ((unint64_t)a2 <= 0x28)
  {
    CFAbsoluteTime v15 = 0LL;
    int v16 = -6743;
    goto LABEL_19;
  }

  if (*(void *)a1 != 0x30307473696C7062LL)
  {
    CFAbsoluteTime v15 = 0LL;
    int v16 = -6717;
    goto LABEL_19;
  }

  unsigned int v5 = (char *)(a1 + a2);
  unint64_t v6 = *(unsigned __int8 *)(a1 + a2 - 26);
  if (((1 << v6) & 0x116) == 0) {
    goto LABEL_18;
  }
  unsigned int v7 = *(v5 - 25);
  if (v7 > 8 || ((1 << v7) & 0x116) == 0) {
    goto LABEL_18;
  }
  unint64_t v8 = *((void *)v5 - 3);
  if (!v8)
  {
LABEL_27:
    CFAbsoluteTime v15 = 0LL;
    int v16 = -6764;
    goto LABEL_19;
  }

  unint64_t v9 = bswap64(v8);
  unint64_t v10 = bswap64(*((void *)v5 - 2));
  if (v10 >= v9)
  {
LABEL_28:
    CFAbsoluteTime v15 = 0LL;
    int v16 = -6710;
    goto LABEL_19;
  }

  unint64_t v11 = bswap64(*((void *)v5 - 1));
  if (v11 <= 8 || v11 >= a2 - 32)
  {
LABEL_18:
    CFAbsoluteTime v15 = 0LL;
    int v16 = -6742;
LABEL_19:
    int SizedInteger = v16;
    goto LABEL_20;
  }

  unint64_t v12 = (unint64_t)(v5 - 32);
  if (v9 > (a2 - 32 - v11) / v6) {
    goto LABEL_27;
  }
  uint64_t v13 = (char *)(v11 + v10 * v6);
  CFDateRef v19 = v13;
  CFNumberRef v18 = &v13[a1];
  int SizedInteger = _ReadSizedInteger((unsigned __int8 **)&v18, v12, v6, (unint64_t *)&v19, 0);
  if (!SizedInteger)
  {
    _GlobalEnsureInitialized();
    *(void *)&__int128 v24 = v9;
    HIBYTE(v25) = v6;
    LOBYTE(v25) = v7;
    unint64_t v26 = v11;
    __int128 v14 = *(_OWORD *)(MEMORY[0x189605250] + 16LL);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x189605250];
    *(_OWORD *)&valueCallBacks.release = v14;
    valueCallBacks.equal = (CFDictionaryEqualCallBack)_ObjectsExactlyEqual;
    *((void *)&v23 + 1) = CFDictionaryCreateMutable(0LL, 0LL, 0LL, &valueCallBacks);
    if (*((void *)&v23 + 1))
    {
      CFAbsoluteTime v15 = _ReadV0Object((uint64_t)cf, a1, v12, v19, &SizedInteger);
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0LL;
      }

      goto LABEL_20;
    }

    CFAbsoluteTime v15 = 0LL;
    int v16 = -6728;
    goto LABEL_19;
  }

  CFAbsoluteTime v15 = 0LL;
LABEL_20:
  if ((void)v23)
  {
    CFRelease((CFTypeRef)v23);
    *(void *)&__int128 v23 = 0LL;
  }

LABEL_22:
  if (*((void *)&v23 + 1)) {
    CFRelease(*((CFTypeRef *)&v23 + 1));
  }
  if (a3) {
    *a3 = SizedInteger;
  }
  return v15;
}

      uint64_t v13 = 1LL;
LABEL_37:
      size_t v20 = v13;
      goto LABEL_38;
    }

    goto LABEL_45;
  }

  if (v4 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)a1);
    CFIndex Length = CFDataGetLength((CFDataRef)a1);
    if (Length <= 8)
    {
      if (Length >= 1)
      {
        int v16 = 0LL;
        CFTypeID v17 = &BytePtr[Length];
        do
        {
          CFNumberRef v18 = *BytePtr++;
          int v16 = v18 | (v16 << 8);
          size_t v20 = v16;
        }

        while (BytePtr < v17);
      }

      goto LABEL_38;
    }

    if (v9)
    {
      NSErrorNestedF((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59DLL, v9);
      int v32 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUBLEConnection _reportError:](self, "_reportError:", v32);
      goto LABEL_24;
    }

    uint64_t v33 = v8;
    int v32 = v33;
    if (!v33)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
      int v41 = (void *)objc_claimAutoreleasedReturnValue();
      -[CUBLEConnection _reportError:](self, "_reportError:", v41);

      goto LABEL_24;
    }

    if ([v33 PSM] != self->_destinationPSM)
    {
      unint64_t v42 = self->_ucat;
      if (v42->var0 <= 60)
      {
        if (v42->var0 == -1)
        {
          unint64_t v42 = self->_ucat;
        }

        int64_t v43 = [v32 PSM];
        LogPrintF( (uint64_t)v42,  (uint64_t)"-[CUBLEConnection peripheral:didOpenL2CAPChannel:error:]",  0x3Cu,  (uint64_t)"### DidOpenL2CAPChannel wrong PSM: 0x%04X (not 0x%04X)\n",  v44,  v45,  v46,  v47,  v43);
      }

    int v16 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceConnectServices[0])((uint64_t)v4, 4294956991LL);
LABEL_23:
    if (!v16 || (unint64_t v12 = (v16 + 310000), v16 == -310000))
    {
      timeoutTimer = self->_timeoutTimer;
      if (timeoutTimer)
      {
        __int128 v23 = timeoutTimer;
        dispatch_source_cancel(v23);
        __int128 v24 = self->_timeoutTimer;
        self->_timeoutTimer = 0LL;
      }

      __int16 v25 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B78],  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
      unint64_t v26 = self->_timeoutTimer;
      self->_timeoutTimer = v25;
      int v27 = v25;

      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 3221225472LL;
      handler[2] = __48__CUBluetoothClassicConnection__runConnectStart__block_invoke;
      handler[3] = &unk_189F33088;
      handler[4] = v27;
      handler[5] = self;
      dispatch_source_set_event_handler(v27, handler);
      uint64_t v28 = dispatch_time(0LL, 15000000000LL);
      dispatch_source_set_timer(v27, v28, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      dispatch_activate(v27);

      uint64_t v29 = 1;
      goto LABEL_28;
    }

    int v32 = (void *)*MEMORY[0x189607670];
    goto LABEL_36;
  }

  if (!v5)
  {
    int v32 = (void *)*MEMORY[0x189607670];
    unint64_t v12 = 4294960596LL;
    goto LABEL_36;
  }

  -[CUBluetoothClassicConnection _reportError:](self, "_reportError:", v5);
LABEL_37:
  uint64_t v29 = 0;
LABEL_28:

LABEL_29:
  return v29;
}

  if (!self->_btSessionNeeded || self->_btSessionAttaching || self->_btSession) {
    goto LABEL_25;
  }
  uint64_t v28 = self->_ucat;
  if (v28->var0 <= 30)
  {
    if (v28->var0 == -1)
    {
      uint64_t v28 = self->_ucat;
    }

    LogPrintF( (uint64_t)v28,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"BTSession attach\n",  v2,  v3,  v4,  v5,  v68);
  }
}

  return v7;
}

  return v15;
}

        goto LABEL_23;
      }
    }

    unint64_t v11 = (void *)v33;
    if (!v33) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

      endpointChangedHandler = (void (**)(id, CUNANEndpoint *, void))self->_endpointChangedHandler;
      goto LABEL_27;
    }

    __int128 v23 = objc_alloc_init(&OBJC_CLASS___CUNANEndpoint);
    -[CUNANEndpoint setIdentifier:](v23, "setIdentifier:", v17);
    -[CUNANEndpoint updateWithDiscoveryResult:](v23, "updateWithDiscoveryResult:", v6);
    pthread_mutex_lock(&self->_mutex);
    wfaEndpoints = self->_wfaEndpoints;
    if (!wfaEndpoints)
    {
      char v35 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
      CFIndex v36 = self->_wfaEndpoints;
      self->_wfaEndpoints = v35;

      wfaEndpoints = self->_wfaEndpoints;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](wfaEndpoints, "setObject:forKeyedSubscript:", v23, v17);
    pthread_mutex_unlock(&self->_mutex);
    int64_t v37 = self->_ucat;
    if (v37->var0 <= 10)
    {
      if (v37->var0 != -1)
      {
LABEL_18:
        CUDescriptionWithLevel(v23, 50LL);
        CFIndex v38 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF( (uint64_t)v37,  (uint64_t)"-[CUNANSubscriber _subscriber:receivedDiscoveryResult:]",  0xAu,  (uint64_t)"Endpoint found: %@\n",  v39,  v40,  v41,  v42,  (char)v38);

        goto LABEL_25;
      }

      if (_LogCategory_Initialize((uint64_t)self->_ucat, 0xAu))
      {
        int64_t v37 = self->_ucat;
        goto LABEL_18;
      }
    }

    usleep(0x4E20u);
    objc_autoreleasePoolPop(v22);
  }

  objc_autoreleasePoolPop(v22);
  uint64_t v34 = self->_ucat;
  if (v34->var0 <= 30)
  {
    if (v34->var0 != -1) {
      goto LABEL_26;
    }
    if (_LogCategory_Initialize((uint64_t)v34, 0x1Eu))
    {
      uint64_t v34 = self->_ucat;
LABEL_26:
      LogPrintF( (uint64_t)v34,  (uint64_t)"-[CURunLoopThread _threadMain]",  0x1Eu,  (uint64_t)"RunLoop thread stopping\n",  v30,  v31,  v32,  v33,  v38);
    }
  }

  threadFinalizeHandler = (void (**)(void))v11->_threadFinalizeHandler;
  if (threadFinalizeHandler) {
    threadFinalizeHandler[2]();
  }
  if (v9)
  {
    CFRunLoopRemoveSource(v8->_runLoop, v9, (CFRunLoopMode)*MEMORY[0x1896051A8]);
    CFRelease(v9);
  }

  CFIndex v36 = v11;
  objc_sync_enter(v36);
  v8->_runLoop = 0LL;
  objc_sync_exit(v36);

  int64_t v37 = (dispatch_queue_s *)v11->_dispatchQueue;
  v40[0] = MEMORY[0x1895F87A8];
  v40[1] = 3221225472LL;
  v40[2] = __30__CURunLoopThread__threadMain__block_invoke_2;
  v40[3] = &unk_189F34238;
  v40[4] = v36;
  dispatch_async(v37, v40);
}

LABEL_27:
            char v35 = 1;
LABEL_28:

            goto LABEL_29;
          }

          uint64_t v21 = self->_ucat;
        }

        LogPrintF( (uint64_t)v21,  (uint64_t)"-[CUUserNotificationSession _runResponse:error:]",  0x1Eu,  (uint64_t)"Request action dismiss: %@\n",  v17,  v18,  v19,  v20,  (char)v7);
        goto LABEL_19;
      }

      int v22 = -[NSMutableDictionary objectForKeyedSubscript:](self->_actions, "objectForKeyedSubscript:", v6);
      if (v22)
      {
        int v27 = (void *)v22;
        uint64_t v28 = self->_ucat;
        if (v28->var0 <= 30)
        {
          if (v28->var0 == -1)
          {
            uint64_t v28 = self->_ucat;
          }

          LogPrintF( (uint64_t)v28,  (uint64_t)"-[CUUserNotificationSession _runResponse:error:]",  0x1Eu,  (uint64_t)"Request action: %@, %@\n",  v23,  v24,  v25,  v26,  (char)v7);
        }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_25:

    goto LABEL_26;
  }

  uint64_t v34 = *(int **)(*(void *)(a1 + 40) + 72LL);
  if (*v34 <= 30)
  {
    if (*v34 == -1)
    {
      uint64_t v34 = *(int **)(*(void *)(a1 + 40) + 72LL);
    }

    LogPrintF( (uint64_t)v34,  (uint64_t)"-[CUUserNotificationSession userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]_block_invoke",  0x1Eu,  (uint64_t)"Response wrong category: %@ vs %@\n",  v16,  v17,  v18,  v19,  (char)v15);
  }

  getAWDLTrafficRegistrationServiceUniversalControl[0]();
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue();
  __int16 v25 = v20;
  unint64_t v26 = v24;
  if (v26 == v25)
  {

    goto LABEL_27;
  }

  int v27 = v26;
  if ((v59 == 0LL) == (v26 != 0LL))
  {

    goto LABEL_29;
  }

  uint64_t v28 = [v25 isEqual:v26];

  if ((v28 & 1) != 0)
  {
LABEL_27:
    uint64_t v13 = 4096;
    goto LABEL_58;
  }

  return v17;
}

      __int128 v14 = 0;
      goto LABEL_23;
    }

    __int128 v14 = -6717;
  }

  else
  {
    uint64_t v13 = 0LL;
    __int128 v14 = -6728;
  }

      size_t v20 = 4294960568LL;
      goto LABEL_23;
    }
  }

    int v16 = v9 - v8;
    CFAbsoluteTime v15 = (*a1)(v8, v16, a1);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    unint64_t v6 = (v6 + v16);
LABEL_24:
    if (v11)
    {
      CFAbsoluteTime v15 = (*a1)("\n", 1LL, a1);
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      unint64_t v6 = (v6 + 1);
    }
  }

  LODWORD(v6) = v6 + 4 * v14;
  while (1)
  {
    CFAbsoluteTime v15 = (*a1)("    ", 4LL, a1);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    if (!--v14) {
      goto LABEL_22;
    }
  }

      if (v5 >= v8) {
        return v7;
      }
    }
  }

  return 0LL;
}

    CFNumberRef v18 = (const void *)WiFiNetworkGetProperty();
    if (v18) {
      CFDictionarySetValue(v14, @"ie", v18);
    }
    CFDictionarySetValue(v14, @"platformNetwork", ValueAtIndex);
    CFDateRef v19 = (const void *)WiFiNetworkGetProperty();
    if (v19) {
      CFDictionarySetValue(v14, @"rssi", v19);
    }
    SSID = WiFiNetworkGetSSID();
    if (SSID) {
      uint64_t v21 = (const __CFString *)SSID;
    }
    else {
      uint64_t v21 = &stru_189F34A78;
    }
    CFDictionarySetValue(v14, @"ssid", v21);
    CFArrayAppendValue(v7, v14);
    CFRelease(v14);
    if (v9 == ++v10)
    {
      int v22 = 0LL;
      goto LABEL_33;
    }
  }

  int v22 = 4294960568LL;
LABEL_33:
  unsigned int v1 = v26;
  v25(v22, v7, v24);
LABEL_35:
  CFRelease(v7);
LABEL_36:
  __int128 v23 = (const void *)v1[4];
  if (v23) {
    CFRelease(v23);
  }
}

__CFDictionary *_ReadV0Object(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, int *a5)
{
  if (a3 - a2 <= (unint64_t)a4)
  {
    unint64_t v11 = 0LL;
    int v27 = -6710;
LABEL_81:
    int RefOffset = v27;
    goto LABEL_77;
  }

  Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), a4);
  if (!Value)
  {
    unint64_t v12 = &a4[a2];
    __int128 v14 = (unsigned __int8 *)&a4[a2 + 1];
    unsigned int v13 = a4[a2];
    CFIndex v45 = v14;
    switch(v13 >> 4)
    {
      case 0u:
        if (v13 == 9)
        {
          CFNumberRef v18 = (CFTypeRef *)MEMORY[0x189604DE8];
        }

        else if (v13 == 8)
        {
          CFNumberRef v18 = (CFTypeRef *)MEMORY[0x189604DE0];
        }

        else
        {
          if (v13) {
            goto LABEL_32;
          }
          CFNumberRef v18 = (CFTypeRef *)MEMORY[0x189605018];
        }

        unint64_t v11 = (__CFDictionary *)CFRetain(*v18);
        goto LABEL_76;
      case 1u:
        unsigned int v19 = v13 & 0xF;
        if (v19 >= 5) {
          goto LABEL_99;
        }
        uint64_t v20 = 1LL << v19;
        if (v19 <= 3)
        {
          CFIndex v37 = 0LL;
          do
          {
            unsigned int v38 = *v14++;
            CFIndex v37 = v38 | (unint64_t)(v37 << 8);
            LODWORD(v20) = v20 - 1;
          }

          while ((_DWORD)v20);
          length[0] = v37;
          CFNumberType v25 = kCFNumberSInt64Type;
        }

        else
        {
          CFIndex v21 = 0LL;
          do
          {
            unsigned int v22 = *v14++;
            CFIndex v21 = v22 | (unint64_t)(v21 << 8);
            LODWORD(v20) = v20 - 1;
          }

          while (v20 > 8);
          uint64_t v23 = 0LL;
          CFIndex v24 = 0LL;
          length[0] = v21;
          CFIndex v45 = v14;
          do
            CFIndex v24 = v14[v23++] | (unint64_t)(v24 << 8);
          while ((_DWORD)v23 != 8);
          length[1] = v24;
          CFNumberType v25 = kCFNumberMaxType|kCFNumberSInt8Type;
        }

        goto LABEL_73;
      case 2u:
        if ((v13 & 0xF) == 3)
        {
          if ((uint64_t)(a3 - (void)v14) > 7)
          {
            length[0] = bswap64(*(void *)(v12 + 1));
            CFNumberType v25 = kCFNumberFloat64Type;
LABEL_73:
            unint64_t v26 = CFNumberCreate(0LL, v25, length);
LABEL_74:
            unint64_t v11 = v26;
            if (v26)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 272), a4, v26);
              goto LABEL_76;
            }

LABEL_101:
            int v27 = -6728;
            goto LABEL_81;
          }
        }

        else if ((v13 & 0xF) == 2 && (uint64_t)(a3 - (void)v14) > 3)
        {
          LODWORD(length[0]) = bswap32(*(_DWORD *)(v12 + 1));
          CFNumberType v25 = kCFNumberFloat32Type;
          goto LABEL_73;
        }

  appended = CFPropertyListAppendFormatted(0LL, v9, (uint64_t)"%.*ks=[%@]", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
  if ((_DWORD)appended) {
    goto LABEL_116;
  }
  int v68 = &__s[strlen(__s)];
  while (2)
  {
    unint64_t v69 = __s;
    if (__s >= v68) {
      goto LABEL_80;
    }
    UInt8 v70 = 0LL;
    while (1)
    {
      UInt8 v71 = *v69;
      if (v71 == 92)
      {
        if (v69 + 1 >= v68)
        {
          __s = v69 + 1;
          CFRange v73 = 4294960546LL;
          goto LABEL_117;
        }

        LOBYTE(v71) = v69[1];
        v69 += 2;
        goto LABEL_110;
      }

      if (v71 == 44) {
        break;
      }
      ++v69;
LABEL_110:
      if (v70 <= 254) {
        v80[v70++] = v71;
      }
      if (v69 >= v68)
      {
        v72 = &v80[v70];
        goto LABEL_115;
      }
    }

    v72 = &v80[v70];
    ++v69;
LABEL_115:
    *v72 = 0;
    __s = v69;
    appended = CFPropertyListAppendFormatted( 0LL,  *(void **)&v79[0],  (uint64_t)"%s",  v63,  v64,  v65,  v66,  v67,  (uint64_t)v80);
    if (!(_DWORD)appended) {
      continue;
    }
    break;
  }

  v72 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Part Identifier", v72, 0LL);
  CFRange v73 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v73) {
    goto LABEL_109;
  }
  partID = self->_partID;
  CFRange v75 = v73;
  v76 = partID;
  if (v75 == v76)
  {

    goto LABEL_109;
  }

  v77 = v76;
  if (!v76)
  {

    goto LABEL_108;
  }

  v78 = -[NSString isEqual:](v75, "isEqual:", v76);

  if ((v78 & 1) == 0)
  {
LABEL_108:
    objc_storeStrong((id *)&self->_partID, v73);
    v14 |= 1u;
  }

LABEL_80:
        unint64_t v11 = 0LL;
        int v27 = -6743;
        goto LABEL_81;
      case 3u:
        if (v13 != 51) {
          goto LABEL_32;
        }
        unint64_t v26 = CFDateCreate(0LL, COERCE_CFABSOLUTETIME(bswap64(*(void *)(v12 + 1))));
        goto LABEL_74;
      case 4u:
        unint64_t v28 = v13 & 0xF;
        length[0] = v28;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_36;
        }
        int RefOffset = _ReadInteger(&v45, a3, (unint64_t *)length, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v28 = length[0];
        __int128 v14 = v45;
LABEL_36:
        unint64_t v26 = CFDataCreate(0LL, v14, v28);
        goto LABEL_74;
      case 5u:
      case 7u:
        unint64_t v15 = v13 & 0xF;
        length[0] = v15;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_8;
        }
        int RefOffset = _ReadInteger(&v45, a3, (unint64_t *)length, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v15 = length[0];
        __int128 v14 = v45;
LABEL_8:
        if ((v13 & 0xF0) == 0x50) {
          CFStringEncoding v16 = 1536;
        }
        else {
          CFStringEncoding v16 = 134217984;
        }
        CFTypeID v17 = v14;
        goto LABEL_43;
      case 6u:
        CFIndex v29 = v13 & 0xF;
        length[0] = v29;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_41;
        }
        int RefOffset = _ReadInteger(&v45, a3, (unint64_t *)length, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        CFIndex v29 = length[0];
        __int128 v14 = v45;
LABEL_41:
        unint64_t v15 = 2 * v29;
        CFTypeID v17 = v14;
        CFStringEncoding v16 = 268435712;
LABEL_43:
        unint64_t v26 = (__CFDictionary *)CFStringCreateWithBytes(0LL, v17, v15, v16, 0);
        goto LABEL_74;
      case 0xAu:
        length[0] = v13 & 0xF;
        if ((v13 & 0xF) == 0xF)
        {
          int RefOffset = _ReadInteger(&v45, a3, (unint64_t *)length, 0, 0);
          if (RefOffset) {
            goto LABEL_98;
          }
        }

        CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
        if (Mutable)
        {
          char v31 = Mutable;
          if (!length[0])
          {
LABEL_53:
            unint64_t v11 = v31;
            goto LABEL_76;
          }

          CFIndex v32 = length[0] - 1;
          while (1)
          {
            int RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v45, (unint64_t *)&key);
            if (RefOffset) {
              break;
            }
            int v33 = *(_DWORD *)(a1 + 336);
            if (v33 >= 32)
            {
              uint64_t v34 = 0LL;
              length[0] = v32;
              int RefOffset = -6751;
LABEL_92:
              CFRelease(v31);
              goto LABEL_93;
            }

            *(_DWORD *)(a1 + 336) = v33 + 1;
            uint64_t v34 = (void *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
            --*(_DWORD *)(a1 + 336);
            if (RefOffset) {
              goto LABEL_90;
            }
            CFArrayAppendValue(v31, v34);
            CFRelease(v34);
            if (--v32 == -1) {
              goto LABEL_53;
            }
          }

          uint64_t v34 = 0LL;
LABEL_90:
          length[0] = v32;
          goto LABEL_92;
        }

        unint64_t v11 = 0LL;
        goto LABEL_101;
      case 0xDu:
        unint64_t v35 = v13 & 0xF;
        length[0] = v35;
        if ((v13 & 0xF) != 0xF) {
          goto LABEL_57;
        }
        int RefOffset = _ReadInteger(&v45, a3, (unint64_t *)length, 0, 0);
        if (RefOffset) {
          goto LABEL_98;
        }
        unint64_t v35 = length[0];
        __int128 v14 = v45;
LABEL_57:
        if (v35 > (a3 - (unint64_t)v14) / *(unsigned __int8 *)(a1 + 296))
        {
LABEL_99:
          unint64_t v11 = 0LL;
          int v27 = -6764;
          goto LABEL_81;
        }

        unint64_t v11 = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
        if (!v11) {
          goto LABEL_101;
        }
        int v41 = &v14[v35 * *(unsigned __int8 *)(a1 + 296)];
        unint64_t v42 = v14;
        if (!v35) {
          goto LABEL_76;
        }
        CFIndex v36 = v35 - 1;
        while (2)
        {
          if (*(int *)(a1 + 336) >= 32)
          {
            int RefOffset = -6751;
LABEL_96:
            char v40 = v11;
            goto LABEL_97;
          }

          int RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v42, (unint64_t *)&key);
          if (RefOffset) {
            goto LABEL_96;
          }
          ++*(_DWORD *)(a1 + 336);
          char v31 = (__CFDictionary *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
          --*(_DWORD *)(a1 + 336);
          if (RefOffset
            || (int RefOffset = _ReadRefOffset(a1, a2, a3, (unsigned int **)&v41, (unint64_t *)&key)) != 0)
          {
            uint64_t v34 = 0LL;
          }

          else
          {
            ++*(_DWORD *)(a1 + 336);
            uint64_t v34 = (void *)_ReadV0Object(a1, a2, a3, key, &RefOffset);
            --*(_DWORD *)(a1 + 336);
            if (!RefOffset)
            {
              CFDictionarySetValue(v11, v31, v34);
              CFRelease(v31);
              CFRelease(v34);
              if (--v36 == -1) {
                goto LABEL_76;
              }
              continue;
            }
          }

          break;
        }

        length[0] = v36;
        CFRelease(v11);
        if (v31) {
          goto LABEL_92;
        }
LABEL_93:
        if (v34)
        {
          char v40 = (__CFDictionary *)v34;
LABEL_97:
          CFRelease(v40);
        }

    CFIndex v45 = 129LL;
    goto LABEL_113;
  }

                    objc_storeStrong((id *)&self->_selfAccessoryMediaSystemCounterpart, v61);
                    goto LABEL_81;
                  }
                }

                if (!v83)
                {
LABEL_83:

                  unsigned int v5 = v87;
                  goto LABEL_84;
                }

    v64->_lastTrafficRegistrationErrorCode = v55;
    -[CUWiFiManager _updateWiFiState](v64, "_updateWiFiState");

    goto LABEL_81;
  }

  unint64_t v9 = self->_ucat;
  if (v9->var0 <= 90)
  {
    if (v9->var0 == -1)
    {
      unint64_t v9 = self->_ucat;
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"-[CUWiFiManager _updateTrafficPeersWithService:]",  0x5Au,  (uint64_t)"### Bad service flag: 0x%X\n",  v5,  v6,  v7,  v8,  a3);
  }

LABEL_98:
        unint64_t v11 = 0LL;
        goto LABEL_77;
      default:
LABEL_32:
        unint64_t v11 = 0LL;
        int v27 = -6756;
        goto LABEL_81;
    }
  }

  unint64_t v11 = Value;
  CFRetain(Value);
LABEL_76:
  int RefOffset = 0;
LABEL_77:
  if (a5) {
    *a5 = RefOffset;
  }
  return v11;
}

    unint64_t v12 = 0LL;
    CFNumberRef v18 = -6750;
    goto LABEL_19;
  }

  unint64_t v15 = v9 - 7;
  if ((v9 - 7) > 0x28)
  {
    if ((v9 - 97) <= 0xE)
    {
      switch(v9)
      {
        case 'a':
          CFStringEncoding v16 = 0LL;
          CFTypeID v17 = bytes[1];
          unint64_t v10 = bytes + 2;
          goto LABEL_73;
        case 'b':
          CFStringEncoding v16 = 0LL;
          CFTypeID v17 = *(unsigned __int16 *)(bytes + 1);
          unint64_t v10 = bytes + 3;
          goto LABEL_73;
        case 'c':
          CFStringEncoding v16 = 0LL;
          CFTypeID v17 = *(unsigned int *)(bytes + 1);
          unint64_t v10 = bytes + 5;
          goto LABEL_73;
        case 'd':
          CFTypeID v17 = *(void *)(bytes + 1);
          if ((v17 & 0x8000000000000000LL) != 0) {
            goto LABEL_77;
          }
          CFStringEncoding v16 = 0LL;
          unint64_t v10 = bytes + 9;
          goto LABEL_73;
        default:
          if (v9 != 111)
          {
            unint64_t v12 = 0LL;
            goto LABEL_42;
          }

          CFIndex v24 = a3 - (void)v10;
          CFNumberType v25 = bytes + 1;
          unint64_t v12 = 0LL;
          while (*v25)
          {
            ++v25;
            CFNumberRef v18 = -6750;
            if (!--v24) {
              goto LABEL_19;
            }
          }

          CFTypeID v17 = v25 - v10;
          if (v25 - v10 < 0)
          {
LABEL_77:
            unint64_t v12 = 0LL;
            CFNumberRef v18 = -6743;
            goto LABEL_19;
          }

          CFStringEncoding v16 = 1LL;
LABEL_73:
          unint64_t v12 = CFStringCreateWithBytes(0LL, v10, v17, 0x8000100u, 0);
          if (!v12) {
            goto LABEL_106;
          }
          v10 += v16 + v17;
          if (!v17) {
            goto LABEL_17;
          }
          goto LABEL_7;
      }
    }

    if ((v9 - 48) <= 6)
    {
      switch(v9)
      {
        case '0':
          unint64_t v10 = bytes + 2;
          LOBYTE(valuePtr) = bytes[1];
          uint64_t v20 = (valuePtr + 1) < 0x29u;
          p_valuePtr = &valuePtr;
          unsigned int v22 = kCFNumberSInt8Type;
          goto LABEL_64;
        case '1':
          LOWORD(valuePtr) = *(_WORD *)(bytes + 1);
          unint64_t v10 = bytes + 3;
          uint64_t v20 = (unsigned __int16)(valuePtr + 1) < 0x29u;
          p_valuePtr = &valuePtr;
          unsigned int v22 = kCFNumberSInt16Type;
          goto LABEL_64;
        case '2':
          LODWORD(valuePtr) = *(_DWORD *)(bytes + 1);
          unint64_t v10 = bytes + 5;
          uint64_t v20 = (valuePtr + 1) < 0x29;
          p_valuePtr = &valuePtr;
          unsigned int v22 = kCFNumberSInt32Type;
          goto LABEL_64;
        case '3':
          valuePtr = *(void *)(bytes + 1);
          unint64_t v10 = bytes + 9;
          uint64_t v20 = (unint64_t)(valuePtr + 1) < 0x29;
          p_valuePtr = &valuePtr;
          unsigned int v22 = kCFNumberSInt64Type;
          goto LABEL_64;
        case '4':
          int v27 = *(void *)(bytes + 1);
          unint64_t v28 = *(void *)(bytes + 9);
          unint64_t v10 = bytes + 17;
          v38[0] = v28;
          v38[1] = v27;
          CFIndex v29 = __CFADD__(v27, 1LL);
          int v30 = v27 + 1;
          if (v29) {
            ++v28;
          }
          uint64_t v20 = __PAIR128__(v28, v30) < 0x29;
          p_valuePtr = v38;
          unsigned int v22 = kCFNumberMaxType|kCFNumberSInt8Type;
          goto LABEL_64;
        case '5':
          uint64_t v20 = 0;
          LODWORD(valuePtr) = *(_DWORD *)(bytes + 1);
          unint64_t v10 = bytes + 5;
          p_valuePtr = &valuePtr;
          unsigned int v22 = kCFNumberFloat32Type;
          goto LABEL_64;
        case '6':
          if ((uint64_t)(a3 - (void)v10) < 8)
          {
LABEL_107:
            CFNumberRef v18 = -6750;
LABEL_49:
            unint64_t v12 = 0LL;
            goto LABEL_19;
          }

          uint64_t v20 = 0;
          valuePtr = *(void *)(bytes + 1);
          unint64_t v10 = bytes + 9;
          p_valuePtr = &valuePtr;
          unsigned int v22 = kCFNumberFloat64Type;
LABEL_64:
          char v31 = CFNumberCreate(0LL, v22, p_valuePtr);
          unint64_t v12 = (const __CFString *)v31;
          if (v31 && !v20) {
            goto LABEL_7;
          }
          CFIndex v37 = v10;
          if (v31) {
            goto LABEL_18;
          }
          break;
        default:
          CFNumberRef v18 = -6762;
          goto LABEL_49;
      }

uint64_t _ReadRefOffset(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, unint64_t *a5)
{
  unsigned int v5 = *a4;
  unint64_t v6 = *(unsigned __int8 *)(a1 + 296);
  uint64_t v7 = 4294960534LL;
  switch(*(_BYTE *)(a1 + 296))
  {
    case 1:
      unint64_t v8 = *(unsigned __int8 *)v5;
      goto LABEL_7;
    case 2:
      unint64_t v8 = __rev16(*(unsigned __int16 *)v5);
      goto LABEL_7;
    case 4:
      unint64_t v8 = bswap32(*v5);
      goto LABEL_7;
    case 8:
      unint64_t v8 = bswap64(*(void *)v5);
LABEL_7:
      *a4 = (unsigned int *)((char *)v5 + v6);
      if (v8 >= *(void *)(a1 + 280))
      {
        uint64_t v7 = 4294960586LL;
      }

      else
      {
        uint64_t v9 = *(unsigned __int8 *)(a1 + 297);
        uint64_t v7 = 4294960534LL;
        int v10 = v9 - 1;
        unint64_t v11 = (unsigned int *)(a2 + *(void *)(a1 + 304) + v8 * v9);
        switch(v10)
        {
          case 0:
            unint64_t v12 = *(unsigned __int8 *)v11;
            goto LABEL_13;
          case 1:
            unint64_t v12 = __rev16(*(unsigned __int16 *)v11);
            goto LABEL_13;
          case 3:
            unint64_t v12 = bswap32(*v11);
            goto LABEL_13;
          case 7:
            unint64_t v12 = bswap64(*(void *)v11);
LABEL_13:
            uint64_t v7 = 0LL;
            *a5 = v12;
            break;
          default:
            return v7;
        }
      }

      break;
    default:
      return v7;
  }

  return v7;
}

CFArrayRef CFPrefs_CopyKeys(const __CFString *a1, int *a2)
{
  if (!a1) {
    a1 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFArrayRef result = CFPreferencesCopyKeyList(a1, (CFStringRef)*MEMORY[0x189605198], (CFStringRef)*MEMORY[0x189605178]);
  if (result)
  {
    if (!a2) {
      return result;
    }
  }

  else
  {
    CFArrayRef result = CFArrayCreate(0LL, 0LL, 0LL, MEMORY[0x189605228]);
    if (!a2) {
      return result;
    }
  }

  if (result) {
    int v4 = 0;
  }
  else {
    int v4 = -6700;
  }
  *a2 = v4;
  return result;
}

const void *CFPrefs_CopyTypedValue(const __CFString *a1, CFStringRef key, uint64_t a3, int *a4)
{
  if (a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFPropertyListRef v8 = CFPreferencesCopyAppValue(key, v7);
  uint64_t v9 = v8;
  if (!v8)
  {
    int v10 = -6727;
    if (!a4) {
      return v9;
    }
    goto LABEL_10;
  }

  if (!a3 || CFGetTypeID(v8) == a3)
  {
    int v10 = 0;
    if (!a4) {
      return v9;
    }
    goto LABEL_10;
  }

  CFRelease(v9);
  uint64_t v9 = 0LL;
  int v10 = -6756;
  if (a4) {
LABEL_10:
  }
    *a4 = v10;
  return v9;
}

uint64_t CFPrefs_RemoveValue(const __CFString *a1, CFStringRef key)
{
  if (a1) {
    __int128 v2 = a1;
  }
  else {
    __int128 v2 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFPreferencesSetAppValue(key, 0LL, v2);
  return 0LL;
}

uint64_t CFPrefs_SetValue(const __CFString *a1, CFStringRef key, CFPropertyListRef value)
{
  if (a1) {
    int v4 = a1;
  }
  else {
    int v4 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFPreferencesSetAppValue(key, value, v4);
  return 0LL;
}

const char *CFPrefs_GetCString(const __CFString *a1, CFStringRef key, char *a3, size_t a4, int *a5)
{
  if (a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = (const __CFString *)*MEMORY[0x189605188];
  }
  int v10 = (const __CFString *)CFPreferencesCopyAppValue(key, v9);
  unint64_t v11 = v10;
  if (a5)
  {
    if (v10) {
      int v12 = 0;
    }
    else {
      int v12 = -6727;
    }
    *a5 = v12;
  }

  if (v10)
  {
    a3 = (char *)CFGetCString(v10, a3, a4);
    CFRelease(v11);
  }

  else if (a4)
  {
    *a3 = 0;
  }

  else
  {
    return "";
  }

  return a3;
}

uint64_t CFPrefs_SetCString(const __CFString *a1, const __CFString *a2, char *cStr, CFIndex numBytes)
{
  if (numBytes == -1) {
    CFStringRef v6 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  }
  else {
    CFStringRef v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  }
  CFStringRef v7 = v6;
  if (!v6) {
    return 4294960579LL;
  }
  if (a1) {
    CFPropertyListRef v8 = a1;
  }
  else {
    CFPropertyListRef v8 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFPreferencesSetAppValue(a2, v6, v8);
  CFRelease(v7);
  return 0LL;
}

const char *CFPrefs_GetData( const __CFString *a1, CFStringRef key, const char *a3, unint64_t a4, void *a5, int *a6)
{
  if (a1) {
    unint64_t v11 = a1;
  }
  else {
    unint64_t v11 = (const __CFString *)*MEMORY[0x189605188];
  }
  int v12 = (__CFString *)CFPreferencesCopyAppValue(key, v11);
  unsigned int v13 = v12;
  if (a6)
  {
    if (v12) {
      int v14 = 0;
    }
    else {
      int v14 = -6727;
    }
    *a6 = v14;
  }

  if (v12)
  {
    unint64_t v15 = CFGetData(v12, a3, a4, a5, a6);
    CFRelease(v13);
    return v15;
  }

  else
  {
    if (a5) {
      *a5 = 0LL;
    }
    return a3;
  }

void CFPrefs_GetDouble(const __CFString *a1, CFStringRef key, int *a3)
{
  if (a1) {
    unsigned int v5 = a1;
  }
  else {
    unsigned int v5 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFStringRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, v5);
  CFStringRef v7 = v6;
  if (a3)
  {
    if (v6) {
      int v8 = 0;
    }
    else {
      int v8 = -6727;
    }
    *a3 = v8;
  }

  if (v6)
  {
    CFGetDouble(v6, a3);
    CFRelease(v7);
  }

uint64_t CFPrefs_SetDouble(const __CFString *a1, const __CFString *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  if (!v5) {
    return 4294960596LL;
  }
  CFNumberRef v6 = v5;
  if (a1) {
    CFStringRef v7 = a1;
  }
  else {
    CFStringRef v7 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFPreferencesSetAppValue(a2, v5, v7);
  CFRelease(v6);
  return 0LL;
}

unint64_t CFPrefs_GetInt64(const __CFString *a1, CFStringRef key, int *a3)
{
  if (a1) {
    CFNumberRef v5 = a1;
  }
  else {
    CFNumberRef v5 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFNumberRef v6 = (const __CFString *)CFPreferencesCopyAppValue(key, v5);
  CFStringRef v7 = v6;
  if (a3)
  {
    if (v6) {
      int v8 = 0;
    }
    else {
      int v8 = -6727;
    }
    *a3 = v8;
  }

  if (!v6) {
    return 0LL;
  }
  unint64_t v9 = CFGetInt64(v6, a3);
  CFRelease(v7);
  return v9;
}

uint64_t CFPrefs_SetInt64(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a3);
  if (!Int64) {
    return 4294960596LL;
  }
  CFNumberRef v6 = Int64;
  if (a1) {
    CFStringRef v7 = a1;
  }
  else {
    CFStringRef v7 = (const __CFString *)*MEMORY[0x189605188];
  }
  CFPreferencesSetAppValue(a2, Int64, v7);
  CFRelease(v6);
  return 0LL;
}

uint64_t CFRuntimeCreateObject(uint64_t a1, unint64_t a2, int *a3)
{
  size_t v4 = a2 - 16;
  if (a2 < 0x10)
  {
    uint64_t v6 = 0LL;
    int v7 = -6743;
  }

  else
  {
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v6 = Instance;
    if (Instance)
    {
      bzero((void *)(Instance + 16), v4);
      int v7 = 0;
    }

    else
    {
      int v7 = -6728;
    }
  }

  if (a3) {
    *a3 = v7;
  }
  return v6;
}

CFTypeRef CFCreateF( _DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef v12 = 0LL;
  int v10 = CFPropertyListBuildFormatted(0LL, 0LL, &v12, a2, (uint64_t)&a9, a6, a7, a8);
  if (a1) {
    *a1 = v10;
  }
  return v12;
}

uint64_t CFPropertyListBuildFormatted( const __CFAllocator *TypeID, void *cf, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v102 = *MEMORY[0x1895F89C0];
  CFTypeRef cfa = 0LL;
  v100 = (unsigned int *)a5;
  CFTypeRef v98 = 0LL;
  if (!a4)
  {
    int v14 = 0LL;
LABEL_205:
    uint64_t v22 = 4294960591LL;
    goto LABEL_189;
  }

  int v8 = (const UInt8 *)a4;
  unint64_t v11 = TypeID;
  if (cf)
  {
    CFTypeID v12 = CFGetTypeID(cf);
    CFTypeID TypeID = (const __CFAllocator *)CFArrayGetTypeID();
    if ((const __CFAllocator *)v12 == TypeID)
    {
      v95 = a3;
      unsigned int v13 = 0LL;
      int v14 = (__CFArray *)cf;
    }

    else
    {
      CFTypeID TypeID = (const __CFAllocator *)CFDictionaryGetTypeID();
      int v14 = 0LL;
      if ((const __CFAllocator *)v12 != TypeID)
      {
LABEL_188:
        uint64_t v22 = 4294960540LL;
        goto LABEL_189;
      }

      v95 = a3;
      unsigned int v13 = (__CFDictionary *)cf;
    }
  }

  else
  {
    v95 = a3;
    int v14 = 0LL;
    unsigned int v13 = 0LL;
  }

  v94 = (const void *)*MEMORY[0x189604DE8];
  v93 = (const void *)*MEMORY[0x189604DE0];
  unint64_t v15 = v14;
  int v14 = 0LL;
  while (1)
  {
    unsigned int v16 = *v8;
    if (v16 <= 0x5C) {
      break;
    }
    if (v16 == 93) {
      goto LABEL_13;
    }
    if (v16 == 123)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      if (!Mutable) {
        goto LABEL_198;
      }
      CFMutableDictionaryRef v20 = Mutable;
      uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, Mutable, &v98);
      CFRelease(v20);
      if ((_DWORD)v22) {
        goto LABEL_189;
      }
      CFTypeID TypeID = (const __CFAllocator *)calloc(1uLL, 0x18uLL);
      if (!TypeID) {
        goto LABEL_198;
      }
      unsigned int v19 = 0LL;
      goto LABEL_25;
    }

    CFTypeID v17 = v8;
    if (v16 == 125)
    {
LABEL_13:
      if (v14)
      {
        CFNumberRef v18 = *(__CFArray **)v14;
        unsigned int v19 = (__CFArray *)*((void *)v14 + 1);
        CFMutableDictionaryRef v20 = (CFMutableDictionaryRef)*((void *)v14 + 2);
        free(v14);
        int v14 = v18;
        goto LABEL_180;
      }

      uint64_t v22 = 4294960554LL;
      goto LABEL_189;
    }

LABEL_35:
    if (*v8)
    {
      while (1)
      {
        if (v16 == 59) {
          goto LABEL_39;
        }
        if (v16 == 61) {
          break;
        }
        unsigned int v30 = *++v17;
        unsigned int v16 = v30;
        if (!v30) {
          goto LABEL_39;
        }
      }

      CFTypeRef v35 = cfa;
      uint64_t v22 = 4294960554LL;
      if (cfa || !v13) {
        goto LABEL_190;
      }
      CFTypeID TypeID = (const __CFAllocator *)CFStringCreateWithBytes(v11, v8, v17 - v8, 0x8000100u, 0);
      CFTypeRef cfa = TypeID;
      if (!TypeID) {
        goto LABEL_201;
      }
    }

    else
    {
LABEL_39:
      CFStringRef v31 = CFStringCreateWithBytes(v11, v8, v17 - v8, 0x8000100u, 0);
      if (!v31) {
        goto LABEL_198;
      }
      CFStringRef v32 = v31;
      uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, v31, &v98);
      CFRelease(v32);
      if ((_DWORD)v22) {
        goto LABEL_189;
      }
      if (!v16)
      {
LABEL_186:
        uint64_t v22 = 0LL;
        if (v95)
        {
          CFTypeRef *v95 = v98;
          CFTypeRef v98 = 0LL;
        }

        goto LABEL_189;
      }
    }

    unsigned int v19 = v15;
    CFMutableDictionaryRef v20 = v13;
    int v8 = v17;
LABEL_180:
    ++v8;
    unint64_t v15 = v19;
    unsigned int v13 = v20;
  }

  if (v16 != 37)
  {
    if (v16 == 91)
    {
      CFMutableArrayRef v21 = CFArrayCreateMutable(v11, 0LL, MEMORY[0x189605228]);
      if (!v21) {
        goto LABEL_198;
      }
      unsigned int v19 = v21;
      uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, v21, &v98);
      CFRelease(v19);
      if ((_DWORD)v22) {
        goto LABEL_189;
      }
      CFTypeID TypeID = (const __CFAllocator *)calloc(1uLL, 0x18uLL);
      if (!TypeID) {
        goto LABEL_198;
      }
      CFMutableDictionaryRef v20 = 0LL;
LABEL_25:
      *(void *)CFTypeID TypeID = v14;
      *((void *)TypeID + 1) = v15;
      int v14 = TypeID;
      *((void *)TypeID + 2) = v13;
      goto LABEL_180;
    }

    CFTypeID v17 = v8;
    if (!*v8) {
      goto LABEL_186;
    }
    goto LABEL_35;
  }

  BOOL v24 = 0;
  int v25 = 0;
  int v26 = 0;
  while (1)
  {
    while (1)
    {
      unint64_t v28 = (unsigned __int8 *)v8++;
      int v27 = *v8;
      if (v27 != 35) {
        break;
      }
      ++v26;
    }

    if (v27 == 46) {
      break;
    }
    if (v27 == 63)
    {
      CFIndex v29 = v100;
      v100 += 2;
      BOOL v24 = *v29 == 0;
    }

    else
    {
      if (v27 != 108)
      {
        uint64_t v34 = 0xFFFFFFFFLL;
        goto LABEL_57;
      }

      ++v25;
    }
  }

  ++v8;
  int v27 = v28[2];
  if (v27 == 42)
  {
    int v33 = v100;
    v100 += 2;
    uint64_t v34 = *v33;
    if ((v34 & 0x80000000) == 0)
    {
      int v27 = v28[3];
      int v8 = v28 + 3;
      goto LABEL_57;
    }

    if (!--v20)
    {
      unint64_t v28 = 0LL;
      CFIndex v29 = v43;
      goto LABEL_39;
    }
  }

  if (*__error())
  {
    uint64_t v23 = *__error();
    free(v52);
    if (v23) {
      goto LABEL_46;
    }
    goto LABEL_24;
  }

  free(v52);
LABEL_46:
  unsigned int v38 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5D4LL);
LABEL_47:
  uint64_t v39 = (void *)v57[5];
  v57[5] = v38;

LABEL_44:
  v45[2](v45);

  _Block_object_dispose(&v56, 8);
}

    NSAppendPrintF(v31);
    int v37 = (__CFString *)*v30;

    int v8 = v37;
LABEL_36:

    goto LABEL_37;
  }

  uint64_t v22 = self->_metadata;
  if (v22)
  {
    uint64_t v50 = v8;
    uint64_t v23 = v22;
    -[NSDictionary count](v23, "count", identifier);
    NSAppendPrintF(&v50);
    BOOL v24 = v50;

    int v8 = v24;
  }

  int v25 = self->_persistentRef;
  if (v25)
  {
    unsigned __int8 v49 = v8;
    int v26 = v25;
    -[NSData length](v26, "length");
    NSAppendPrintF(&v49);
    int v27 = v49;

    int v8 = v27;
  }

  secrets = self->_secrets;
  if (secrets)
  {
    char v48 = v8;
    CFIndex v29 = secrets;
    -[NSDictionary count](v29, "count");
    unsigned int v30 = (id *)&v48;
    CFStringRef v31 = &v48;
    goto LABEL_35;
  }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 512LL);
        if ((v16 & 0x4000) == 0)
        {
LABEL_23:
          if ((v16 & 0x10000) == 0)
          {
LABEL_25:
            trafficPeersdouble Current = self->_trafficPeersCurrent;
            self->_trafficPeersdouble Current = 0LL;

            goto LABEL_26;
          }

  return v25;
}

  if ((v15 & 1) == 0)
  {
    if (v10 > 0xE) {
      return 4294960545LL;
    }
    BOOL v24 = v10 | 1;
    v58[v10 - 16] = BYTE1(v12);
    v10 += 2LL;
    v58[v24 - 16] = v12;
  }

  if (v11) {
    goto LABEL_39;
  }
LABEL_53:
  if (v10 != 16) {
    return 4294960546LL;
  }
LABEL_54:
  __int128 v54 = a4;
  CFStringRef v31 = 0;
  CFStringRef v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  CFTypeRef v35 = 0;
  int v36 = 0;
  int v37 = 0;
  unsigned int v38 = v8 - 1;
LABEL_55:
  while (2)
  {
    uint64_t v39 = (char)*v38;
    while (1)
    {
      while (v39 == 47)
      {
        if (v35) {
          return 4294960554LL;
        }
        BOOL v40 = (char)*++v38;
        uint64_t v39 = v40;
        if ((v40 - 48) <= 9)
        {
          do
          {
            int v36 = v39 + 10 * v36 - 48;
            int v41 = (char)*++v38;
            uint64_t v39 = v41;
          }

          while ((v41 - 48) < 0xA);
        }

        CFTypeRef v35 = 1;
        if (v36 > 0x80) {
          return 4294960586LL;
        }
      }

      if (v39 == 93)
      {
        if (v37) {
          return 4294960554LL;
        }
        ++v38;
        int v37 = 1;
        goto LABEL_55;
      }

      if (v39 != 58) {
        break;
      }
      if (v33) {
        return 4294960554LL;
      }
      unint64_t v42 = (char)*++v38;
      uint64_t v39 = v42;
      if ((v42 - 48) <= 9)
      {
        do
        {
          uint64_t v34 = v39 + 10 * v34 - 48;
          int64_t v43 = (char)*++v38;
          uint64_t v39 = v43;
        }

        while ((v43 - 48) < 0xA);
      }

      int v33 = 1;
      if (v34 >= 0x10000) {
        return 4294960586LL;
      }
    }

    if (v39 == 37)
    {
      if (!v32)
      {
        for (CFIndex i = 0LL; ; ++i)
        {
          CFStringEncoding v45 = v38[i + 1];
          uint64_t v46 = (v45 - 47) > 0x2E || ((1LL << (v45 - 47)) & 0x400000000801LL) == 0;
          char v47 = !v46 || v45 == 0;
          if (v47 || i == 63) {
            break;
          }
          v58[i] = v45;
        }

        v38 += i + 1;
        v58[i] = 0;
        CFStringRef v31 = if_nametoindex(v58);
        if (v31) {
          goto LABEL_92;
        }
        char v48 = v58[0];
        if (v58[0] - 48 > 9)
        {
          CFStringRef v31 = 0;
          unsigned __int8 v49 = v58;
        }

        else
        {
          CFStringRef v31 = 0;
          unsigned __int8 v49 = v58;
          do
          {
            CFStringRef v31 = v48 + 10 * v31 - 48;
            uint64_t v50 = *++v49;
            char v48 = v50;
          }

          while ((v50 - 48) < 0xA);
        }

        if (!v48 && v49 != v58 && (int)((_DWORD)v49 - v58) < 11)
        {
LABEL_92:
          CFStringRef v32 = 1;
          continue;
        }
      }

      return 4294960554LL;
    }

    break;
  }

  CFIndex v51 = v57;
  *(_OWORD *)unsigned int v58 = v57;
  if (v32) {
    __int128 v52 = v31;
  }
  else {
    __int128 v52 = 0;
  }
  __int128 v53 = (unsigned __int16)v55;
  *(_DWORD *)(a2 + 4) = 0;
  *(_WORD *)a2 = 7708;
  if (v33) {
    __int128 v53 = v34;
  }
  *(_WORD *)(a2 + 2) = bswap32(v53) >> 16;
  *(_OWORD *)(a2 + 8) = v51;
  *(_DWORD *)(a2 + 24) = v52;
  if (!v54) {
    return 0LL;
  }
  CFArrayRef result = 0LL;
  CFDataRef v54 = 28LL;
  return result;
}

      int v7 = 0LL;
      goto LABEL_36;
    }

    goto LABEL_42;
  }

LABEL_200:
    uint64_t v22 = 4294960553LL;
    goto LABEL_189;
  }

  int v36 = v27 - 48;
  if ((v27 - 48) > 9)
  {
    uint64_t v34 = 0LL;
  }

  else
  {
    LODWORD(v34) = 0;
    do
    {
      uint64_t v34 = (v36 + 10 * v34);
      int v37 = *++v8;
      int v27 = v37;
      int v36 = v37 - 48;
    }

    while ((v37 - 48) < 0xA);
    if ((v34 & 0x80000000) != 0) {
      goto LABEL_200;
    }
  }

LABEL_57:
  uint64_t v22 = 4294960579LL;
  if (v27 <= 83)
  {
    if (v27 <= 67)
    {
      if (v27 == 64)
      {
        if ((_DWORD)v34 != -1) {
          goto LABEL_189;
        }
        uint64_t v55 = v100;
        v100 += 2;
        char v56 = *(__CFArray ***)v55;
        if (!v56) {
          goto LABEL_205;
        }
        if (v15) {
          __int128 v57 = v15;
        }
        else {
          __int128 v57 = v13;
        }
        __CFArray *v56 = v57;
        goto LABEL_179;
      }

      if (v27 != 67 || (_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      unint64_t v42 = v100;
      v100 += 2;
      if (v24) {
        goto LABEL_147;
      }
      *(_DWORD *)bytes = bswap32(*v42);
      int64_t v43 = v11;
      CFIndex v44 = 4LL;
      CFStringEncoding v45 = 0;
LABEL_166:
      DeepCopy = (const __CFData *)CFStringCreateWithBytes(v43, bytes, v44, v45, 0);
      if (!DeepCopy) {
        goto LABEL_198;
      }
      goto LABEL_167;
    }

    if (v27 == 68)
    {
LABEL_81:
      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      unsigned __int8 v49 = (const UInt8 **)v100;
      v100 += 2;
      uint64_t v50 = *v49;
      if (!v26)
      {
        unsigned int v58 = v100;
        v100 += 2;
        if (!v24)
        {
          unsigned int v59 = *v58;
          if (!v50 && v59) {
            goto LABEL_205;
          }
          __int128 v54 = CFDataCreate(v11, v50, (int)v59);
LABEL_177:
          CFDataRef Data = v54;
          if (!v54)
          {
LABEL_198:
            uint64_t v22 = 4294960568LL;
            goto LABEL_189;
          }

          goto LABEL_178;
        }

      CFIndex v29 = 0LL;
      goto LABEL_65;
    }

    [MEMORY[0x1896079E8] propertyListWithData:v15 options:0 format:0 error:0];
    unint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      if ((v6 & 0x10) != 0)
      {
        uint64_t v46 = v42;
        goto LABEL_60;
      }

      unsigned int v67 = @"_legacyPlist";
      int v68 = v42;
      int64_t v43 = (void *)MEMORY[0x189603F68];
      CFIndex v44 = &v68;
      CFStringEncoding v45 = &v67;
    }

    else
    {
      int v65 = @"_legacyData";
      uint64_t v66 = v15;
      int64_t v43 = (void *)MEMORY[0x189603F68];
      CFIndex v44 = &v66;
      CFStringEncoding v45 = &v65;
    }

    [v43 dictionaryWithObjects:v44 forKeys:v45 count:1];
    uint64_t v46 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
LABEL_60:
    CFIndex v29 = v46;

    goto LABEL_61;
  }

  -[CUKeyValueStoreWriter cancel](self, "cancel");
  if (a3 && v43)
  {
    if (*__error()) {
      char v47 = *__error();
    }
    else {
      char v47 = 4294960596LL;
    }
    NSErrorWithOSStatusF((const char *)v47);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v43 == 0;
}

    uint64_t v46 = 0;
    unint64_t v42 = v39;
    goto LABEL_58;
  }

  unint64_t v42 = 0LL;
LABEL_58:

  objc_sync_exit(v49);
  return v46;
}

  NSErrorWithOSStatusF((const char *)InterfaceInfo);
  int v27 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v28 = v27 != 0LL;
  if (a3 && v27)
  {
    int v27 = v27;
    *a3 = v27;
    unint64_t v28 = 1;
  }

          *(_DWORD *)(a1 + 8508) = v17;
LABEL_58:
          int v8 = *(_DWORD *)(a1 + 8508);
          break;
        case 2:
          CFNumberRef v18 = *(_DWORD *)(a1 + 9752);
          unsigned int v19 = *(void *)(a1 + 8232);
          if (v18 < 0)
          {
            int v26 = *(void *)(a1 + 8544);
            int v27 = *(void *)(a1 + 8528);
            if (v19)
            {
              unint64_t v28 = v27 - v26;
              if (v28 >= v19) {
                CFIndex v29 = *(void *)(a1 + 8232);
              }
              else {
                CFIndex v29 = v28;
              }
              __nbyte = v29;
              memmove((void *)(*(void *)(a1 + 8520) + v26), *(const void **)(a1 + 8224), v29);
              unsigned int v30 = __nbyte;
              *(void *)(a1 + 8224) += __nbyte;
              *(void *)(a1 + 8232) -= v30;
              int v26 = *(void *)(a1 + 8544) + v30;
              *(void *)(a1 + 8544) = v26;
              int v27 = *(void *)(a1 + 8528);
            }

            __nbyte = v26;
            if (v27 > v26)
            {
              CFArrayRef result = a2((void *)(*(void *)(a1 + 8520) + v26), v27 - v26, &__nbyte, a3);
              if ((_DWORD)result) {
                return result;
              }
              int v26 = *(void *)(a1 + 8544) + __nbyte;
              *(void *)(a1 + 8544) = v26;
              int v27 = *(void *)(a1 + 8528);
            }

            if (v26 == v27) {
              goto LABEL_46;
            }
          }

          else
          {
            CFMutableDictionaryRef v20 = *(void *)(a1 + 9760);
            if (v19)
            {
              if (!v20) {
                goto LABEL_46;
              }
              if (v19 >= v20) {
                CFMutableArrayRef v21 = *(void *)(a1 + 9760);
              }
              else {
                CFMutableArrayRef v21 = *(void *)(a1 + 8232);
              }
              __nbyte = v21;
              CFArrayRef result = FDWriteAll(v18, *(char **)(a1 + 8224), v21);
              if ((_DWORD)result) {
                return result;
              }
              uint64_t v22 = __nbyte;
              *(void *)(a1 + 8224) += __nbyte;
              *(void *)(a1 + 8232) -= v22;
              CFMutableDictionaryRef v20 = *(void *)(a1 + 9760) - v22;
              *(void *)(a1 + 9760) = v20;
            }

            if (!v20) {
              goto LABEL_46;
            }
            if (*(void *)(a1 + 8536) >= v20) {
              uint64_t v23 = v20;
            }
            else {
              uint64_t v23 = *(void *)(a1 + 8536);
            }
            __nbyte = v23;
            CFArrayRef result = ((uint64_t (*)(void))a2)(*(void *)(a1 + 8520));
            if ((_DWORD)result) {
              return result;
            }
            CFArrayRef result = FDWriteAll(*(_DWORD *)(a1 + 9752), *(char **)(a1 + 8520), __nbyte);
            if ((_DWORD)result) {
              return result;
            }
            BOOL v24 = *(void *)(a1 + 9760);
            int v25 = v24 == __nbyte;
            *(void *)(a1 + 9760) = v24 - __nbyte;
            if (v25)
            {
LABEL_46:
              CFTypeID v17 = 3;
              goto LABEL_57;
            }
          }

          goto LABEL_58;
        case 3:
          CFArrayRef result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if ((_DWORD)result) {
            return result;
          }
          if (v66) {
            return 4294960554LL;
          }
          *(_DWORD *)(a1 + 8508) = 1;
          goto LABEL_58;
        case 4:
          CFArrayRef result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if ((_DWORD)result) {
            return result;
          }
          if (v66) {
            goto LABEL_58;
          }
          CFTypeID v17 = 5;
          goto LABEL_57;
        case 5:
          goto LABEL_134;
        default:
          return 4294960587LL;
      }
    }
  }

  __int128 v53 = *(_DWORD *)(a1 + 9752);
  __int128 v54 = *(void *)(a1 + 8232);
  if (v53 < 0)
  {
    if (v54)
    {
      if (v54 >= *(void *)(a1 + 8528)) {
        uint64_t v60 = *(void *)(a1 + 8528);
      }
      else {
        uint64_t v60 = *(void *)(a1 + 8232);
      }
      memmove(*(void **)(a1 + 8520), *(const void **)(a1 + 8224), v60);
      *(void *)(a1 + 8224) += v60;
      *(void *)(a1 + 8232) -= v60;
      CFTypeRef v61 = *(void *)(a1 + 8544) + v60;
      *(void *)(a1 + 8544) = v61;
    }

    else
    {
      CFTypeRef v61 = *(void *)(a1 + 8544);
    }

    __int16 v63 = v61;
    __int128 v62 = *(void *)(a1 + 8528);
    if (v62 > v61)
    {
      CFArrayRef result = a2((void *)(*(void *)(a1 + 8520) + v61), v62 - v61, &v63, a3);
      if ((_DWORD)result) {
        return result;
      }
      CFTypeRef v61 = *(void *)(a1 + 8544) + v63;
      *(void *)(a1 + 8544) = v61;
      __int128 v62 = *(void *)(a1 + 8528);
    }

    if (v61 == v62) {
      return 0LL;
    }
    else {
      return 35LL;
    }
  }

  else
  {
    uint64_t v55 = *(void *)(a1 + 9760);
    if (!v54) {
      goto LABEL_126;
    }
    if (!v55) {
      goto LABEL_134;
    }
    if (v54 >= v55) {
      char v56 = *(void *)(a1 + 9760);
    }
    else {
      char v56 = *(void *)(a1 + 8232);
    }
    __int16 v63 = v56;
    CFArrayRef result = FDWriteAll(v53, *(char **)(a1 + 8224), v56);
    if ((_DWORD)result) {
      return result;
    }
    *(void *)(a1 + 8224) += v56;
    *(void *)(a1 + 8232) -= v56;
    uint64_t v55 = *(void *)(a1 + 9760) - v56;
    *(void *)(a1 + 9760) = v55;
LABEL_126:
    if (v55)
    {
      if (*(void *)(a1 + 8536) >= v55) {
        __int128 v57 = v55;
      }
      else {
        __int128 v57 = *(void *)(a1 + 8536);
      }
      __int16 v63 = v57;
      CFArrayRef result = ((uint64_t (*)(void))a2)(*(void *)(a1 + 8520));
      if (!(_DWORD)result)
      {
        CFArrayRef result = FDWriteAll(*(_DWORD *)(a1 + 9752), *(char **)(a1 + 8520), v63);
        if (!(_DWORD)result)
        {
          unsigned int v58 = *(void *)(a1 + 9760);
          int v25 = v58 == v63;
          *(void *)(a1 + 9760) = v58 - v63;
          if (!v25) {
            return 35LL;
          }
          goto LABEL_134;
        }
      }
    }

    else
    {
LABEL_134:
      unsigned int v59 = *(_DWORD *)(a1 + 9752);
      if (v59 < 0)
      {
        return 0LL;
      }

      else
      {
        if (close(v59) && *__error()) {
          __error();
        }
        CFArrayRef result = 0LL;
        *(_DWORD *)(a1 + 9752) = -1;
      }
    }
  }

  return result;
}

    int v7 = *v14;
    a2 = v14;
  }

  while (*v14);
  BOOL v24 = *(const char **)(a1 + 72);
  if (v24)
  {
    int v25 = *(const char **)(a1 + 48);
    if (v25)
    {
      int v26 = os_log_create(v24, v25);
      *(void *)(a1 + 56) = v26;
      if (!v26) {
        return 4294960568LL;
      }
    }
  }

  return 0LL;
}

  unint64_t v15 = v41;
LABEL_42:
  if (a5) {
    *a5 = v15;
  }
  return v32;
}

LABEL_147:
        CFTypeID TypeID = (const __CFAllocator *)cfa;
        if (cfa)
        {
          CFRelease(cfa);
          CFTypeRef cfa = 0LL;
        }

        goto LABEL_179;
      }

      if (!v50 || v24) {
        goto LABEL_147;
      }
      CFDataRef Data = CFPropertyListCreateData(0LL, v50, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
      if (Data)
      {
LABEL_178:
        uint64_t v22 = _CFPropertyListAssociateObject(v15, v13, &cfa, Data, &v98);
        CFRelease(Data);
        if ((_DWORD)v22) {
          goto LABEL_189;
        }
        goto LABEL_179;
      }

      uint64_t v22 = 4294960564LL;
    }

    else
    {
      if (v27 != 79) {
        goto LABEL_189;
      }
LABEL_74:
      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      uint64_t v46 = (CFTypeRef *)v100;
      v100 += 2;
      char v47 = (const __CFDictionary *)*v46;
      if (!*v46 || v24) {
        goto LABEL_147;
      }
      if (v26 == 2)
      {
        CFTypeRef v35 = cfa;
        uint64_t v22 = 4294960591LL;
        if (cfa || !v13) {
          goto LABEL_190;
        }
        CFTypeID v82 = CFGetTypeID(*v46);
        if (v82 != CFDictionaryGetTypeID()) {
          goto LABEL_188;
        }
        CFDictionaryApplyFunction(v47, (CFDictionaryApplierFunction)_CFDictionaryMergeDictionaryApplier, v13);
        goto LABEL_179;
      }

      if (v26 == 1)
      {
        DeepCopy = (const __CFData *)CFPropertyListCreateDeepCopy(v11, *v46, 2uLL);
        if (!DeepCopy) {
          goto LABEL_198;
        }
LABEL_167:
        CFDataRef Data = DeepCopy;
        goto LABEL_178;
      }

      __int128 v62 = v15;
      __int16 v63 = v13;
      CFTypeRef v61 = *v46;
LABEL_154:
      CFTypeID TypeID = (const __CFAllocator *)_CFPropertyListAssociateObject(v62, v63, &cfa, v61, &v98);
      if (!(_DWORD)TypeID) {
        goto LABEL_179;
      }
      uint64_t v22 = (uint64_t)TypeID;
    }

LABEL_189:
    CFTypeRef v35 = cfa;
LABEL_190:
    if (v35) {
      CFRelease(v35);
    }
    if (cf) {
      goto LABEL_195;
    }
LABEL_193:
    if (v98) {
      CFRelease(v98);
    }
    goto LABEL_195;
  }

  switch(v27)
  {
    case 'a':
      unsigned int v38 = v100;
      v100 += 2;
      uint64_t v39 = *(void *)v38;
      if (v39) {
        BOOL v40 = !v24;
      }
      else {
        BOOL v40 = 0;
      }
      if (!v40) {
        goto LABEL_147;
      }
      if (v26 == 2) {
        int v41 = SNPrintF((uint64_t)bytes, 64LL, "%##a", a4, a5, a6, a7, a8, v39, v92);
      }
      else {
        int v41 = SNPrintF((uint64_t)bytes, 64LL, "%.*a", a4, a5, a6, a7, a8, v34, v39);
      }
      if (v41 >= 1)
      {
        CFIndex v44 = v41;
        int64_t v43 = v11;
        CFStringEncoding v45 = 134217984;
        goto LABEL_166;
      }

      uint64_t v22 = 4294960596LL;
      goto LABEL_189;
    case 'b':
      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      uint64_t v60 = v100;
      v100 += 2;
      if (v24) {
        goto LABEL_147;
      }
      if (*v60) {
        CFTypeRef v61 = v94;
      }
      else {
        CFTypeRef v61 = v93;
      }
      __int128 v62 = v15;
      __int16 v63 = v13;
      goto LABEL_154;
    case 'c':
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'l':
    case 'm':
    case 'n':
    case 'p':
    case 'q':
    case 'r':
      goto LABEL_189;
    case 'd':
      goto LABEL_81;
    case 'f':
      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      uint64_t v64 = v100;
      v100 += 2;
      uint64_t valuePtr = *(void *)v64;
      if (v24) {
        goto LABEL_147;
      }
      DeepCopy = CFNumberCreate(v11, kCFNumberDoubleType, &valuePtr);
      if (!DeepCopy) {
        goto LABEL_198;
      }
      goto LABEL_167;
    case 'i':
      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      if (v25 == 2)
      {
        int v65 = (uint64_t *)v100;
        v100 += 2;
        uint64_t v66 = *v65;
        if (v24) {
          goto LABEL_147;
        }
      }

      else
      {
        v81 = v100;
        v100 += 2;
        uint64_t v66 = (int)*v81;
        if (v24) {
          goto LABEL_147;
        }
      }

      DeepCopy = CFNumberCreateInt64(v66);
      if (!DeepCopy) {
        goto LABEL_198;
      }
      goto LABEL_167;
    case 'k':
      CFTypeRef v35 = cfa;
      uint64_t v22 = 4294960554LL;
      if (cfa || !v13) {
        goto LABEL_190;
      }
      if (v24)
      {
        uint64_t v22 = 4294960561LL;
        goto LABEL_189;
      }

      unsigned int v67 = v8[1];
      uint64_t v22 = 4294960579LL;
      if (v67 <= 0x54)
      {
        if (v67 == 67)
        {
          if ((_DWORD)v34 != -1) {
            goto LABEL_189;
          }
          v87 = v100;
          v100 += 2;
          *(_DWORD *)bytes = bswap32(*v87);
          unint64_t v69 = bytes;
          v72 = v11;
          CFIndex v71 = 4LL;
          CFStringEncoding v73 = 0;
          goto LABEL_173;
        }

        if (v67 != 79) {
          goto LABEL_189;
        }
      }

      else
      {
        if (v67 == 85)
        {
          if ((_DWORD)v34 != -1) {
            goto LABEL_189;
          }
          v85 = v100;
          v100 += 2;
          if (!*(void *)v85) {
            goto LABEL_205;
          }
          UUIDtoCStringFlags(*(_BYTE **)v85, 16LL, 0LL, 0, (char *)bytes, 0LL);
          unint64_t v69 = bytes;
          v86 = 0LL;
          goto LABEL_182;
        }

        if (v67 != 111)
        {
          if (v67 != 115) {
            goto LABEL_189;
          }
          int v68 = (UInt8 **)v100;
          v100 += 2;
          unint64_t v69 = *v68;
          if (!*v68) {
            goto LABEL_205;
          }
          if ((v34 & 0x80000000) == 0)
          {
            uint64_t v70 = 0LL;
            if ((_DWORD)v34)
            {
              while (v69[v70])
              {
                if (v34 == ++v70)
                {
                  LODWORD(v70) = v34;
                  break;
                }
              }
            }

            CFIndex v71 = (int)v70;
            v72 = v11;
            CFStringEncoding v73 = 134217984;
LABEL_173:
            CFTypeID TypeID = (const __CFAllocator *)CFStringCreateWithBytes(v72, v69, v71, v73, 0);
            goto LABEL_183;
          }

          v86 = v11;
LABEL_182:
          CFTypeID TypeID = (const __CFAllocator *)CFStringCreateWithCString(v86, (const char *)v69, 0x8000100u);
LABEL_183:
          CFTypeRef cfa = TypeID;
          if (!TypeID)
          {
LABEL_201:
            uint64_t v22 = 4294960568LL;
            goto LABEL_202;
          }

LABEL_184:
          int v89 = v8[2];
          v8 += 2;
          if (v89 != 61)
          {
            uint64_t v22 = 4294960579LL;
            goto LABEL_189;
          }

LABEL_179:
          unsigned int v19 = v15;
          CFMutableDictionaryRef v20 = v13;
          goto LABEL_180;
        }
      }

      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      v83 = (const void **)v100;
      v100 += 2;
      v84 = *v83;
      CFTypeRef cfa = v84;
      if (v84)
      {
        CFTypeID TypeID = (const __CFAllocator *)CFRetain(v84);
        goto LABEL_184;
      }

      uint64_t v22 = 4294960591LL;
LABEL_202:
      if (!cf) {
        goto LABEL_193;
      }
LABEL_195:
      if (v14)
      {
        do
        {
          v90 = *(__CFArray **)v14;
          free(v14);
          int v14 = v90;
        }

        while (v90);
      }

      return v22;
    case 'o':
      goto LABEL_74;
    case 's':
      CFRange v74 = (UInt8 **)v100;
      v100 += 2;
      CFRange v75 = *v74;
      if (*v74) {
        BOOL v76 = !v24;
      }
      else {
        BOOL v76 = 0;
      }
      if (!v76) {
        goto LABEL_147;
      }
      if ((v34 & 0x80000000) == 0)
      {
        uint64_t v77 = 0LL;
        if ((_DWORD)v34)
        {
          do
          {
            if (!v75[v77]) {
              goto LABEL_141;
            }
            ++v77;
          }

          while (v34 != v77);
          LODWORD(v77) = v34;
        }

              __src[0] = 7;
              v173 = TLV8BufferAppend((uint64_t)&v176, 7, __src, 1uLL);
              if (!v173)
              {
                __src[0] = 3;
                v173 = TLV8BufferAppend((uint64_t)&v176, 6, __src, 1uLL);
                if (!v173)
                {
                  v125 = v177;
                  v126 = (UInt8 *)v178;
                  if (!v178)
                  {
                    else {
                      v127 = v177;
                    }
                    v128 = (UInt8 *)malloc(v127);
                    if (!v128)
                    {
                      uint64_t v46 = 0LL;
                      v173 = -6728;
LABEL_65:
                      if (cf) {
                        CFRelease(cf);
                      }
                      if (v46) {
                        free(v46);
                      }
                      if (v42) {
                        free(v42);
                      }
                      int v27 = v169;
                      if (v178) {
                        free(v178);
                      }
                      appended = v173;
                      if (!v173)
                      {
LABEL_74:
                        char v47 = 0;
                        if (v27)
                        {
LABEL_75:
                          if (v9) {
                            _PairingSessionUpdateTranscript(a1, a2, a3, *v27, *v9);
                          }
                        }

LABEL_141:
        __int128 v54 = (const __CFData *)CFStringCreateWithBytes(v11, v75, (int)v77, 0x8000100u, 0);
        goto LABEL_177;
      }

      v88 = v11;
      goto LABEL_176;
    default:
      if (v27 != 84)
      {
        if (v27 != 85) {
          goto LABEL_189;
        }
        __int128 v52 = (CFUUIDBytes **)v100;
        v100 += 2;
        __int128 v53 = *v52;
        if (*v52 && !v24)
        {
          if (v26)
          {
            __int128 v54 = CFUUIDCreateFromUUIDBytes(0LL, *v53);
          }

          else
          {
            UUIDtoCStringFlags(v53, 16LL, 0LL, 0, (char *)bytes, 0LL);
            CFRange v75 = bytes;
            v88 = 0LL;
LABEL_176:
            __int128 v54 = (const __CFData *)CFStringCreateWithCString(v88, (const char *)v75, 0x8000100u);
          }

          goto LABEL_177;
        }

        goto LABEL_147;
      }

      if ((_DWORD)v34 != -1) {
        goto LABEL_189;
      }
      v78 = v100;
      v100 += 2;
      uint64_t v79 = *v78;
      v100 = v78 + 4;
      uint64_t v80 = v78[2];
      v100 = v78 + 6;
      a4 = v78[4];
      v100 = v78 + 8;
      a5 = v78[6];
      v100 = v78 + 10;
      a6 = v78[8];
      v100 = v78 + 12;
      if (v24) {
        goto LABEL_147;
      }
      DeepCopy = CFDateCreateWithComponents((uint64_t)TypeID, v79, v80, a4, a5, a6, v78[10]);
      if (!DeepCopy) {
        goto LABEL_198;
      }
      break;
  }

  goto LABEL_167;
}

uint64_t _CFPropertyListAssociateObject( __CFArray *a1, CFMutableDictionaryRef theDict, const void **a3, CFTypeRef cf, void *a5)
{
  if (a1)
  {
    CFArrayAppendValue(a1, cf);
  }

  else if (theDict)
  {
    if (!*a3) {
      return 4294960554LL;
    }
    CFDictionarySetValue(theDict, *a3, cf);
    CFRelease(*a3);
    *a3 = 0LL;
  }

  else
  {
    CFRetain(cf);
  }

  uint64_t result = 0LL;
  if (!*a5) {
    *a5 = cf;
  }
  return result;
}

CFNumberRef CFNumberCreateInt64(uint64_t a1)
{
  uint64_t valuePtr = a1;
  if (a1 == (char)a1)
  {
    char v4 = a1;
    p_uint64_t valuePtr = (uint64_t *)&v4;
    CFNumberType v2 = kCFNumberSInt8Type;
  }

  else
  {
    p_uint64_t valuePtr = &valuePtr;
    CFNumberType v2 = kCFNumberSInt64Type;
  }

  return CFNumberCreate(0LL, v2, p_valuePtr);
}

void _CFDictionaryMergeDictionaryApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

CFDateRef CFDateCreateWithComponents( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFCalendarRef v13 = CFCalendarCopyCurrent();
  if (!v13) {
    return 0LL;
  }
  int v14 = v13;
  unint64_t v15 = CFTimeZoneCreateWithName(0LL, @"GMT", 0);
  if (v15
    && (unsigned int v16 = v15,
        CFCalendarSetTimeZone(v14, v15),
        CFRelease(v16),
        CFCalendarComposeAbsoluteTime(v14, &at, "yMdHms", a2, a3, a4, a5, a6, a7)))
  {
    CFDateRef v17 = CFDateCreate(0LL, at);
  }

  else
  {
    CFDateRef v17 = 0LL;
  }

  CFRelease(v14);
  return v17;
}

CFTypeRef CFCreateV( _DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v11 = 0LL;
  int v9 = CFPropertyListBuildFormatted(0LL, 0LL, &v11, a2, a3, a6, a7, a8);
  if (a1) {
    *a1 = v9;
  }
  return v11;
}

uint64_t CFPropertyListCreateFormatted( const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFPropertyListBuildFormatted(a1, 0LL, a2, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t CFPropertyListCreateFormattedVAList( const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CFPropertyListBuildFormatted(a1, 0LL, a2, a3, a4, a6, a7, a8);
}

uint64_t CFPropertyListAppendFormatted( const __CFAllocator *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CFPropertyListBuildFormatted(a1, a2, 0LL, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t CFDictionaryMergeDictionary(void *context, CFDictionaryRef theDict)
{
  return 0LL;
}

uint64_t CFPropertyListExtractFormatted( const __CFString *cf, uint64_t a2, UInt8 *bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v159 = *MEMORY[0x1895F89C0];
  v155 = (unsigned int *)&a9;
  unsigned int v9 = *bytes;
  if (!*bytes) {
    return 4294960569LL;
  }
  int v10 = bytes;
  CFTypeID v12 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  while (1)
  {
    unsigned int v13 = v9;
    int v14 = v10;
    while (v13 > 0x3A || ((1LL << v13) & 0x400400000000001LL) == 0)
    {
      unsigned int v15 = *++v14;
      unsigned int v13 = v15;
    }

    unsigned int v16 = v14;
    if (v13)
    {
      do
      {
        if (v13 == 46) {
          break;
        }
        unsigned int v17 = *++v16;
        unsigned int v13 = v17;
      }

      while (v17);
    }

    if (v9 == 91)
    {
      int v20 = v10[1];
      if (v20 == 42)
      {
        if (v10[2] != 93) {
          return 4294960579LL;
        }
        CFMutableArrayRef v21 = v155;
        v155 += 2;
        uint64_t v22 = *v21;
        if ((v22 & 0x80000000) != 0) {
          return 4294960586LL;
        }
        int v14 = v10 + 3;
      }

      else
      {
        unsigned int v24 = v20 - 48;
        if (v24 > 9) {
          return 4294960579LL;
        }
        uint64_t v22 = 0LL;
        do
        {
          uint64_t v22 = 10 * v22 + v24;
          int v25 = v10[2];
          unsigned int v24 = v25 - 48;
          ++v10;
        }

        while ((v25 - 48) < 0xA);
        if (v22 < 0) {
          return 4294960586LL;
        }
        if (v25 != 93) {
          return 4294960579LL;
        }
        int v14 = v10 + 2;
      }

      CFTypeID v26 = CFGetTypeID(cf);
      if (v26 != CFArrayGetTypeID()) {
        return 4294960540LL;
      }
      if (v22 >= CFArrayGetCount((CFArrayRef)cf)) {
        return 4294960586LL;
      }
      CFTypeRef cf = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v22);
      goto LABEL_54;
    }

    if (v9 != 37)
    {
      if (v10 >= v14)
      {
        int v14 = v10;
        goto LABEL_54;
      }

      CFStringRef v23 = CFStringCreateWithBytes(v12, v10, v14 - v10, 0x8000100u, 0);
      if (!v23) {
        return 4294960568LL;
      }
      goto LABEL_52;
    }

    if (v10[1] != 107) {
      return 4294960579LL;
    }
    unsigned int v18 = v10[2];
    uint64_t result = 4294960579LL;
    if (v18 > 0x68)
    {
      if (v10[2] > 0x72u)
      {
        if (v18 == 116)
        {
          unsigned int v38 = (UInt8 **)v155;
          v155 += 2;
          unint64_t v28 = *v38;
          if (!*v38) {
            return 4294960591LL;
          }
          uint64_t v39 = v155;
          v155 += 2;
          CFIndex v30 = (int)*v39;
          CFIndex v29 = v12;
          CFStringEncoding v31 = 134217984;
          goto LABEL_49;
        }

        if (v18 != 115) {
          return result;
        }
        CFStringRef v32 = (char **)v155;
        v155 += 2;
        int v33 = *v32;
        if (!*v32) {
          return 4294960591LL;
        }
        uint64_t v34 = v12;
      }

      else
      {
        if (v18 != 105)
        {
          if (v18 != 111) {
            return result;
          }
          goto LABEL_43;
        }

        int v36 = v155;
        v155 += 2;
        SNPrintF((uint64_t)cStr, 64LL, "%llu", a4, a5, a6, a7, a8, *(void *)v36);
        int v33 = (char *)cStr;
        uint64_t v34 = 0LL;
      }

      CFStringRef v37 = CFStringCreateWithCString(v34, v33, 0x8000100u);
      goto LABEL_50;
    }

    if (v18 == 67) {
      goto LABEL_38;
    }
    if (v18 != 79)
    {
      if (v18 != 99) {
        return result;
      }
LABEL_38:
      int v27 = v155;
      v155 += 2;
      *(_DWORD *)v158 = bswap32(*v27);
      unint64_t v28 = v158;
      CFIndex v29 = v12;
      CFIndex v30 = 4LL;
      CFStringEncoding v31 = 0;
LABEL_49:
      CFStringRef v37 = CFStringCreateWithBytes(v29, v28, v30, v31, 0);
LABEL_50:
      CFStringRef v23 = v37;
      if (!v37) {
        return 4294960568LL;
      }
      goto LABEL_51;
    }

LABEL_43:
    CFTypeRef v35 = (CFTypeRef *)v155;
    v155 += 2;
    CFStringRef v23 = (CFStringRef)*v35;
    if (!*v35) {
      return 4294960591LL;
    }
    CFRetain(*v35);
LABEL_51:
    int v14 = v10 + 3;
LABEL_52:
    CFTypeID v40 = CFGetTypeID(cf);
    if (v40 != CFDictionaryGetTypeID())
    {
      CFRelease(v23);
      return 4294960540LL;
    }

    CFTypeRef cf = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, v23);
    CFRelease(v23);
    if (!cf) {
      return 4294960569LL;
    }
LABEL_54:
    if (*v14 == 58) {
      break;
    }
    if (*v16) {
      int v10 = v16 + 1;
    }
    else {
      int v10 = v16;
    }
    unsigned int v9 = *v10;
    if (!*v10)
    {
      if (!cf) {
        return 4294960569LL;
      }
LABEL_60:
      if (a2) {
LABEL_61:
      }
        *(void *)a2 = cf;
      return 0LL;
    }
  }

  int v41 = v14 + 1;
  for (CFIndex i = v14 + 1; *i; ++i)
  {
    if (*i == 46) {
      return 4294960579LL;
    }
  }

  if (!cf) {
    return 4294960569LL;
  }
  if (!strcmp((const char *)v14 + 1, "err") || !strcmp((const char *)v14 + 1, "int"))
  {
    LODWORD(v48) = CFGetInt64(cf, (int *)usedBufLen);
    uint64_t result = LODWORD(usedBufLen[0]);
    if (!LODWORD(usedBufLen[0]))
    {
      if (a2) {
LABEL_97:
      }
        *(_DWORD *)a2 = v48;
      return 0LL;
    }

    return result;
  }

  if (!strcmp((const char *)v14 + 1, "int8"))
  {
    LOBYTE(v48) = CFGetInt64(cf, (int *)usedBufLen);
    uint64_t result = LODWORD(usedBufLen[0]);
    if (!LODWORD(usedBufLen[0]))
    {
      if (a2) {
LABEL_100:
      }
        *(_BYTE *)a2 = v48;
      return 0LL;
    }

    return result;
  }

  if (!strcmp((const char *)v14 + 1, "int16"))
  {
    LOWORD(v48) = CFGetInt64(cf, (int *)usedBufLen);
    uint64_t result = LODWORD(usedBufLen[0]);
    if (!LODWORD(usedBufLen[0]))
    {
      if (a2) {
LABEL_103:
      }
        *(_WORD *)a2 = v48;
      return 0LL;
    }

    return result;
  }

  if (!strcmp((const char *)v14 + 1, "int64"))
  {
    unint64_t v48 = CFGetInt64(cf, (int *)usedBufLen);
    uint64_t result = LODWORD(usedBufLen[0]);
    if (!LODWORD(usedBufLen[0]))
    {
      if (a2) {
LABEL_106:
      }
        *(void *)a2 = v48;
      return 0LL;
    }

    return result;
  }

  if (!strcmp((const char *)v14 + 1, "int*"))
  {
    unint64_t v48 = CFGetInt64(cf, (int *)usedBufLen);
    uint64_t result = LODWORD(usedBufLen[0]);
    if (!LODWORD(usedBufLen[0]))
    {
      unsigned __int8 v49 = v155;
      v155 += 2;
      uint64_t result = 4294960553LL;
      switch(*(void *)v49)
      {
        case 1LL:
          goto LABEL_100;
        case 2LL:
          goto LABEL_103;
        case 4LL:
          goto LABEL_97;
        case 8LL:
          goto LABEL_106;
        default:
          return result;
      }
    }

    return result;
  }

  if (!strcmp((const char *)v14 + 1, "utf8"))
  {
    CFTypeID v50 = CFGetTypeID(cf);
    if (v50 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    CFIndex Length = CFStringGetLength(cf);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    usedBufLen[0] = MaximumSizeForEncoding;
    __int128 v53 = (UInt8 *)malloc(MaximumSizeForEncoding + 1);
    if (!v53) {
      return 4294960568LL;
    }
    __int128 v54 = v53;
    v160.location = 0LL;
    v160.length = Length;
    if (CFStringGetBytes(cf, v160, 0x8000100u, 0, 0, v53, MaximumSizeForEncoding, usedBufLen) == Length)
    {
      v54[usedBufLen[0]] = 0;
      if (a2) {
        *(void *)a2 = v54;
      }
      else {
        free(v54);
      }
      return 0LL;
    }

    free(v54);
    return 4294960560LL;
  }

  if (!strcmp((const char *)v14 + 1, "*utf8"))
  {
    CFTypeID v55 = CFGetTypeID(cf);
    if (v55 == CFStringGetTypeID())
    {
      char v56 = (CFIndex *)v155;
      v155 += 2;
      return 4294960553LL;
    }

    return 4294960540LL;
  }

  if (!strcmp((const char *)v14 + 1, "obj"))
  {
    if (a2)
    {
      CFRetain(cf);
      goto LABEL_61;
    }

    return 0LL;
  }

  if (!strcmp((const char *)v14 + 1, "BOOL"))
  {
    CFTypeID v57 = CFGetTypeID(cf);
    if (v57 == CFBooleanGetTypeID())
    {
      if (a2) {
        *(_BYTE *)a2 = CFBooleanGetValue((CFBooleanRef)cf);
      }
      return 0LL;
    }

    return 4294960540LL;
  }

  if (!strcmp((const char *)v14 + 1, "mac"))
  {
    CFTypeID v58 = CFGetTypeID(cf);
    if (v58 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 6)
      {
        if (a2)
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)cf);
          __int16 v60 = *((_WORD *)BytePtr + 2);
          *(_DWORD *)a2 = *(_DWORD *)BytePtr;
          *(_WORD *)(a2 + 4) = v60;
        }

        return 0LL;
      }

      return 4294960553LL;
    }

    CFTypeID v69 = CFGetTypeID(cf);
    if (v69 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    uint64_t result = TextToHardwareAddress((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 6LL, (_BYTE *)a2);
    if (!(_DWORD)result) {
      return 0LL;
    }
    return result;
  }

  if (!strcmp((const char *)v14 + 1, "macStr"))
  {
    CFTypeID v61 = CFGetTypeID(cf);
    if (v61 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) != 6) {
        return 4294960553LL;
      }
      __int128 v62 = CFDataGetBytePtr((CFDataRef)cf);
      uint64_t v63 = 0LL;
      uint64_t v64 = (_BYTE *)a2;
      do
      {
        int v65 = (_BYTE *)a2;
        if (v64 != (_BYTE *)a2)
        {
          *uint64_t v64 = 58;
          int v65 = v64 + 1;
        }

        unint64_t v66 = v62[v63];
        uint64_t v67 = v63 + 1;
        *int v65 = a0123456789abcd_0[v66 >> 4];
        char v68 = a0123456789abcd_0[v66 & 0xF];
        uint64_t v64 = v65 + 2;
        v65[1] = v68;
        uint64_t v63 = v67;
      }

      while (v67 != 6);
    }

    else
    {
      CFTypeID v75 = CFGetTypeID(cf);
      if (v75 != CFStringGetTypeID()) {
        return 4294960540LL;
      }
      uint64_t result = TextToHardwareAddress((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 6LL, v158);
      LODWORD(usedBufLen[0]) = result;
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v76 = 0LL;
      uint64_t v64 = (_BYTE *)a2;
      do
      {
        uint64_t v77 = (_BYTE *)a2;
        if (v64 != (_BYTE *)a2)
        {
          *uint64_t v64 = 58;
          uint64_t v77 = v64 + 1;
        }

        unint64_t v78 = v158[v76];
        uint64_t v79 = v76 + 1;
        *uint64_t v77 = a0123456789abcd_0[v78 >> 4];
        char v80 = a0123456789abcd_0[v78 & 0xF];
        uint64_t v64 = v77 + 2;
        v77[1] = v80;
        uint64_t v76 = v79;
      }

      while (v79 != 6);
    }

    *uint64_t v64 = 0;
    return 0LL;
  }

  if (!strcmp((const char *)v14 + 1, "code"))
  {
    CFTypeID v70 = CFGetTypeID(cf);
    if (v70 == CFStringGetTypeID())
    {
      if (CFStringGetLength(cf) != 4) {
        return 4294960553LL;
      }
      usedBufLen[0] = 0LL;
      v161.location = 0LL;
      v161.length = 4LL;
      CFStringGetBytes(cf, v161, 0x8000100u, 0, 0, v158, 4LL, usedBufLen);
      if (usedBufLen[0] != 4) {
        return 4294960579LL;
      }
      int v71 = v158[0] << 8;
      if (!v158[0]) {
        int v71 = 0x2000;
      }
      int v72 = v158[1];
      if (!v158[1]) {
        int v72 = 32;
      }
      if (v158[2]) {
        int v73 = v158[2] << 8;
      }
      else {
        int v73 = 0x2000;
      }
      if (v158[3]) {
        int v74 = v158[3];
      }
      else {
        int v74 = 32;
      }
      int valuePtr = v73 | v74 | ((v71 | v72) << 16);
    }

    else
    {
      CFTypeID v82 = CFGetTypeID(cf);
      if (v82 != CFNumberGetTypeID()) {
        return 4294960540LL;
      }
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
    }

    v83 = (int *)a2;
    if (!a2) {
      return 0LL;
    }
    int v84 = valuePtr;
LABEL_286:
    int *v83 = v84;
    return 0LL;
  }

  if (!strcmp((const char *)v14 + 1, "ipv4"))
  {
    CFTypeID v81 = CFGetTypeID(cf);
    if (v81 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    uint64_t result = StringToIPv4Address(cStr, (_DWORD *)a2, 0LL);
    if (!(_DWORD)result) {
      return 0LL;
    }
    return result;
  }

  if (!strcmp((const char *)v14 + 1, "vers"))
  {
    CFTypeID v85 = CFGetTypeID(cf);
    if (v85 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    v162.length = CFStringGetLength(cf);
    usedBufLen[0] = 0LL;
    v86 = (char *)cStr;
    v162.location = 0LL;
    CFStringGetBytes(cf, v162, 0x8000100u, 0, 0, cStr, 63LL, usedBufLen);
    int64_t v87 = usedBufLen[0];
    if (usedBufLen[0] == -1) {
      int64_t v87 = strlen((const char *)cStr);
    }
    v88 = (char *)&cStr[v87];
    if (v87 >= 1)
    {
      v86 = (char *)cStr;
      uint64_t v89 = MEMORY[0x1895F8770];
      do
      {
        uint64_t v90 = *v86;
        if (*v86 < 0) {
          int v91 = __maskrune(v90, 0x4000uLL);
        }
        else {
          int v91 = *(_DWORD *)(v89 + 4 * v90 + 60) & 0x4000;
        }
        if (!v91) {
          break;
        }
        ++v86;
      }

      while (v86 < v88);
    }

    if (v86 >= v88)
    {
      BOOL v97 = 0;
    }

    else
    {
      if (*v86 - 48 <= 9)
      {
        uint64_t v92 = (char *)&cStr[v87 + ~(unint64_t)v86];
        v93 = v86;
        while (v92)
        {
          int v94 = *++v93;
          --v92;
        }

        v93 = (char *)&cStr[v87];
LABEL_212:
        BOOL v97 = v93 < v88;
LABEL_213:
        if (v86 == v93) {
          return 4294960554LL;
        }
        unsigned int v109 = TextToInt32(v86, v93 - v86, 10);
        if (v109 <= 0xFF)
        {
          unsigned int v110 = v109;
          v111 = &v93[v97];
          if (v111 >= v88)
          {
            BOOL v114 = 1;
            v112 = &v93[v97];
          }

          else
          {
            v112 = &v93[v97];
            while (1)
            {
              unsigned int v113 = *v112 - 48;
              BOOL v114 = v113 < 0xA;
              if (v113 > 9) {
                break;
              }
              if (++v112 >= v88)
              {
                BOOL v114 = 1;
                v112 = (char *)&cStr[v87];
                break;
              }
            }
          }

          unsigned int v115 = TextToInt32(v111, v112 - v111, 10);
          if (v115 <= 0xF)
          {
            unsigned int v116 = v115;
            char v117 = v111 == v112 || v114;
            if ((v117 & 1) != 0)
            {
              unsigned int v118 = 0;
              unsigned int v119 = 0;
              int v120 = 0x8000;
LABEL_284:
              if (!a2) {
                return 0LL;
              }
              int v84 = (v116 << 20) | (v110 << 24) | (v118 << 16) | v120 | v119;
              v83 = (int *)a2;
              goto LABEL_286;
            }

            v121 = v112 + 1;
            __darwin_ct_rune_t v122 = __tolower(*v112);
            if (v122 != 46)
            {
              unsigned int v118 = 0;
              v123 = v112 + 1;
              goto LABEL_256;
            }

            if (v121 >= v88)
            {
              uint64_t v124 = 1LL;
              v123 = v112 + 1;
              BOOL v128 = 1;
            }

            else if (v112[1] - 48 > 9)
            {
              BOOL v128 = 0;
              uint64_t v124 = 1LL;
              v123 = v121;
            }

            else
            {
              v123 = (char *)&cStr[v87];
              uint64_t v124 = &cStr[v87] - (UInt8 *)v112;
              uint64_t v125 = 2LL;
              while (v124 != v125)
              {
                uint64_t v126 = v125;
                unsigned int v127 = v112[v125++] - 48;
                if (v127 > 9)
                {
                  v123 = &v112[v126];
                  uint64_t v124 = v126;
                  break;
                }
              }

              BOOL v128 = v123 >= v88;
            }

            unsigned int v134 = TextToInt32(v121, v124 - 1, 10);
            if (v134 <= 0xF)
            {
              unsigned int v118 = v134;
              char v135 = v124 == 1 || v128;
              if ((v135 & 1) != 0)
              {
                int v136 = 0x8000;
LABEL_264:
                v139 = v123;
                if (v123 < v88)
                {
                  v140 = (char *)(&cStr[v87] - (UInt8 *)v123);
                  v139 = v123;
                  while (*v139 - 48 <= 9)
                  {
                    ++v139;
                    if (!--v140)
                    {
                      v139 = (char *)&cStr[v87];
                      break;
                    }
                  }
                }

                if (v123 >= v139) {
                  unsigned int v141 = 0;
                }
                else {
                  unsigned int v141 = TextToInt32(v123, v139 - v123, 10);
                }
                BOOL v143 = v123 == v139 || v141 > 0xFF;
                BOOL v144 = !v143;
                if (v143) {
                  int v120 = 0x8000;
                }
                else {
                  int v120 = v136;
                }
                if (v144) {
                  unsigned int v119 = v141;
                }
                else {
                  unsigned int v119 = 0;
                }
                goto LABEL_284;
              }

              __darwin_ct_rune_t v137 = *v123++;
              __darwin_ct_rune_t v122 = __tolower(v137);
LABEL_256:
              if (v122 == 100) {
                int v138 = 0x2000;
              }
              else {
                int v138 = 0x8000;
              }
              if (v122 == 98) {
                int v138 = 24576;
              }
              if (v122 == 97) {
                int v136 = 0x4000;
              }
              else {
                int v136 = v138;
              }
              goto LABEL_264;
            }
          }
        }

        return 4294960586LL;
      }

      BOOL v97 = 1;
    }

    v93 = v86;
    goto LABEL_213;
  }

  if (!strcmp((const char *)v14 + 1, "svers"))
  {
    CFTypeID v95 = CFGetTypeID(cf);
    if (v95 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    v163.length = CFStringGetLength(cf);
    usedBufLen[0] = 0LL;
    v163.location = 0LL;
    CFStringGetBytes(cf, v163, 0x8000100u, 0, 0, cStr, 63LL, usedBufLen);
    int v96 = TextToSourceVersion((char *)cStr, usedBufLen[0]);
    if (v96)
    {
      *(_DWORD *)a2 = v96;
      return 0LL;
    }

    return 4294960554LL;
  }

  if (!strcmp((const char *)v14 + 1, "uuid"))
  {
    CFTypeID v98 = CFGetTypeID(cf);
    if (v98 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 16)
      {
        if (a2) {
          *(_OWORD *)a2 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)cf);
        }
        return 0LL;
      }

      return 4294960553LL;
    }

    CFTypeID v103 = CFGetTypeID(cf);
    if (v103 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    uint64_t result = StringToUUIDEx((char *)usedBufLen, 0xFFFFFFFFFFFFFFFFLL, 0, 0LL, (_OWORD *)a2, v104, v105, v106);
    if (!(_DWORD)result) {
      return 0LL;
    }
  }

  else
  {
    if (strcmp((const char *)v14 + 1, "CFStringUUID"))
    {
      if (!strncmp((const char *)v14 + 1, "CF", 2uLL))
      {
        v107 = strchr((const char *)v14 + 1, 33);
        if (v107) {
          size_t v108 = v107 - v41;
        }
        else {
          size_t v108 = strlen((const char *)v14 + 1);
        }
        uint64_t v145 = 0LL;
        while (v108 != v145)
        {
          if (v41[v145] != aCfarray[v145]) {
            goto LABEL_294;
          }
          if (++v145 == 8) {
            goto LABEL_299;
          }
        }

        if (!aCfarray[v108])
        {
LABEL_299:
          CFTypeID TypeID = CFArrayGetTypeID();
          goto LABEL_338;
        }

        if (++v23 >= v54) {
          goto LABEL_49;
        }
      }

      CFStringRef v32 = self->_ucat;
LABEL_24:
      LogPrintF( (uint64_t)v32,  (uint64_t)"-[CUBluetoothClient _handleConnectedDevicesInit]",  0x5Au,  (uint64_t)"### BTDeviceGetConnectedServices failed: initial, %#m\n",  v26,  v27,  v28,  v29,  v30);
      goto LABEL_26;
    }

    unsigned int v16 = v11;
    unsigned int v17 = self->_ucat;
    if (v17->var0 > 60) {
      goto LABEL_9;
    }
    if (v17->var0 != -1) {
      goto LABEL_7;
    }
    if (_LogCategory_Initialize((uint64_t)v17, 0x3Cu))
    {
      unsigned int v17 = self->_ucat;
LABEL_7:
      LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUBluetoothClient _handleConnectedDevicesInit]",  0x3Cu,  (uint64_t)"### BTLocalDeviceGetPairedDevices failed: %#m\n",  v12,  v13,  v14,  v15,  v16 - 16);
    }

      int v36 = objc_alloc_init(&OBJC_CLASS___CUFileResponse);
      -[CUFileResponse setFileItems:](v36, "setFileItems:", v10);
      -[CUFileResponse setFlags:](v36, "setFlags:", v28);
      dispatchQueue = (dispatch_queue_s *)v29->_dispatchQueue;
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __37__CUFileServer__handleQuery_session___block_invoke_3;
      block[3] = &unk_189F33088;
      unsigned __int8 v49 = v46;
      CFTypeID v50 = v36;
      dispatch_async(dispatchQueue, block);

      goto LABEL_44;
    }

    d_name = v21->d_name;
    if (!strcmp(v21->d_name, ".") || !strcmp(d_name, "..")) {
      goto LABEL_35;
    }
    __int128 v52 = 0LL;
    asprintf(&v52, "%s/%s", v47 + 8, d_name);
    if (!v52) {
      goto LABEL_46;
    }
    if (lstat(v52, &v51)) {
      break;
    }
    free(v52);
LABEL_24:
    unsigned int v24 = v51.st_mode & 0xF000;
    switch(v24)
    {
      case 40960:
        int v25 = 3LL;
        goto LABEL_30;
      case 32768:
        int v25 = 1LL;
        goto LABEL_30;
      case 16384:
        int v25 = 2LL;
LABEL_30:
        CFTypeID v26 = objc_alloc_init(&OBJC_CLASS___CUFileItem);
        [NSString stringWithUTF8String:d_name];
        int v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUFileItem setName:](v26, "setName:", v27);

        -[CUFileItem setType:](v26, "setType:", v25);
        if ((v51.st_mode & 0xF000) == 0x8000) {
          -[CUFileItem setSize:](v26, "setSize:", v51.st_size);
        }
        if (!v10) {
          int v10 = objc_alloc_init(MEMORY[0x189603FA8]);
        }
        [v10 addObject:v26];

        break;
    }

  tempFD = self->_tempFD;
  if ((tempFD & 0x80000000) == 0)
  {
    if (close(tempFD) && *__error()) {
      __error();
    }
    self->_tempFD = -1;
  }

  if (v18)
  {
    unsigned int v43 = -1;
  }

  else
  {
    size_t v44 = -[NSString UTF8String](self->_finalPath, "UTF8String");
    if (v44 && (v46 = p_cdbStarted[20], CFStringEncoding v45 = (const char *)(p_cdbStarted + 20), v46))
    {
      if (!rename(v45, v44)) {
        goto LABEL_55;
      }
      if (!*__error())
      {
        unsigned int v43 = -6700;
        goto LABEL_57;
      }

      unsigned int v43 = *__error();
      if (!v43)
      {
LABEL_55:
        unsigned int v43 = 0;
        *CFStringEncoding v45 = 0;
      }
    }

    else
    {
      unsigned int v43 = -6704;
    }
  }

                CFStringEncoding v31 = _Block_copy(self->_primaryIPChangedHandler);
                CFStringRef v32 = v31;
                if (v31) {
                  (*((void (**)(void *))v31 + 2))(v31);
                }

LABEL_46:
                if (!self->_primaryNetworkChangedHandler) {
                  return;
                }
                active = (void *)SCNetworkSignatureCopyActiveIdentifiers();
                [active firstObject];
                uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
                primaryNetworkSignature = self->_primaryNetworkSignature;
                int v36 = v34;
                CFStringRef v37 = primaryNetworkSignature;
                if (v36 == v37)
                {

                  CFTypeID v40 = v36;
LABEL_60:

                  goto LABEL_61;
                }

                unsigned int v38 = v37;
                if ((v36 == 0LL) != (v37 != 0LL))
                {
                  uint64_t v39 = -[NSString isEqual:](v36, "isEqual:", v37);

                  if ((v39 & 1) != 0) {
                    goto LABEL_61;
                  }
                }

                else
                {
                }

                objc_storeStrong((id *)&self->_primaryNetworkSignature, v34);
                if (a3)
                {
LABEL_61:

                  return;
                }

                CFStringEncoding v45 = self->_ucat;
                if (v45->var0 <= 30)
                {
                  if (v45->var0 != -1)
                  {
LABEL_56:
                    LogPrintF( (uint64_t)v45,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChanged:]",  0x1Eu,  (uint64_t)"PrimaryNetwork changed: %@\n",  v41,  v42,  v43,  v44,  (char)v36);
                    goto LABEL_58;
                  }

                  if (_LogCategory_Initialize((uint64_t)v45, 0x1Eu))
                  {
                    CFStringEncoding v45 = self->_ucat;
                    goto LABEL_56;
                  }
                }

  getAWDLTrafficRegistrationServiceTVRemoteCamera[0]();
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();
  CFTypeID v40 = v35;
  int v41 = v39;
  if (v41 == v40)
  {

    goto LABEL_48;
  }

  unint64_t v42 = v41;
  if ((v59 == 0LL) == (v41 != 0LL))
  {

    goto LABEL_50;
  }

  unsigned int v43 = [v40 isEqual:v41];

  if ((v43 & 1) != 0)
  {
LABEL_48:
    unsigned int v13 = 0x8000;
    goto LABEL_58;
  }

  pthread_mutex_unlock(&gLogUtilsLock);
  uint64_t v39 = v43;
  if (v43)
  {
    if (a1)
    {
      *a1 = v43;
    }

    else
    {
      if (gLogCategory_LogUtils <= 254
        && (gLogCategory_LogUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_LogUtils, 0xFEu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_LogUtils,  (uint64_t)"OSStatus LogShow(char **)",  0xFEu,  (uint64_t)"%s",  v35,  v36,  v37,  v38,  (char)v39);
      }

      free(v39);
    }
  }

  else if (!a1 {
         && gLogCategory_LogUtils <= 90
  }
         && (gLogCategory_LogUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_LogUtils, 0x5Au)))
  {
    LogPrintF( (uint64_t)&gLogCategory_LogUtils,  (uint64_t)"OSStatus LogShow(char **)",  0x5Au,  (uint64_t)"### ERROR: %#m\n",  v35,  v36,  v37,  v38,  v26);
  }

  return v26;
}

    unsigned int v17 = 2;
LABEL_44:
    unsigned int v15 = a4 != 0;
    unsigned int v16 = 2LL;
    if (a4) {
      unsigned int v16 = 4LL;
    }
    if (v8 && a4)
    {
      do
      {
        if (__s[v8 - 1] != 32) {
          break;
        }
        --v8;
      }

      while (v8);
      unsigned int v15 = 1;
    }

    goto LABEL_51;
  }

  unsigned int v15 = a4 != 0;
  unsigned int v17 = 2;
  unsigned int v16 = 4LL;
  if (!a4) {
    unsigned int v16 = 2LL;
  }
LABEL_51:
  uint64_t v22 = v17;
  CFStringRef v23 = v16 - 1;
  unsigned int v24 = 1LL;
  do
  {
    int v25 = v24;
    v24 *= 10LL;
    ++v23;
  }

  while (v24 <= v22);
  uint64_t result = TruncatedUTF8Length(__s, v8, a3 - v23);
  if (v15)
  {
    int v27 = result + 1;
    __s[result + 1] = 40;
    unint64_t v28 = 32;
  }

  else
  {
    unint64_t v28 = 45;
    int v27 = result;
  }

  __s[result] = v28;
  if (v25)
  {
    do
    {
      __s[v27 + 1] = v22 / v25 + 48;
      v22 %= v25;
      ++v27;
      CFIndex v29 = v25 > 9;
      v25 /= 0xAuLL;
    }

    while (v29);
  }

  CFIndex v30 = v27 + 1;
  if (v15)
  {
    __s[v30] = 41;
    CFIndex v30 = v27 + 2;
  }

  *a5 = v30;
  return result;
}

LABEL_294:
        uint64_t v146 = 0LL;
        while (v108 != v146)
        {
          if (v41[v146] != aCfBOOLean[v146]) {
            goto LABEL_301;
          }
          if (++v146 == 10) {
            goto LABEL_306;
          }
        }

        if (!aCfBOOLean[v108])
        {
LABEL_306:
          CFTypeID TypeID = CFBooleanGetTypeID();
          goto LABEL_338;
        }

LABEL_301:
        uint64_t v148 = 0LL;
        while (v108 != v148)
        {
          if (v41[v148] != aCfdata[v148]) {
            goto LABEL_308;
          }
          if (++v148 == 7) {
            goto LABEL_313;
          }
        }

        if (!aCfdata[v108])
        {
LABEL_313:
          CFTypeID TypeID = CFDataGetTypeID();
          goto LABEL_338;
        }

LABEL_308:
        uint64_t v149 = 0LL;
        while (v108 != v149)
        {
          if (v41[v149] != aCfdate[v149]) {
            goto LABEL_315;
          }
          if (++v149 == 7) {
            goto LABEL_320;
          }
        }

        if (!aCfdate[v108])
        {
LABEL_320:
          CFTypeID TypeID = CFDateGetTypeID();
          goto LABEL_338;
        }

LABEL_315:
        uint64_t v150 = 0LL;
        while (v108 != v150)
        {
          if (v41[v150] != aCfdictionary[v150]) {
            goto LABEL_322;
          }
          if (++v150 == 13) {
            goto LABEL_327;
          }
        }

        if (!aCfdictionary[v108])
        {
LABEL_327:
          CFTypeID TypeID = CFDictionaryGetTypeID();
          goto LABEL_338;
        }

LABEL_322:
        uint64_t v151 = 0LL;
        while (v108 != v151)
        {
          if (v41[v151] != aCfnumber[v151]) {
            goto LABEL_329;
          }
          if (++v151 == 9) {
            goto LABEL_334;
          }
        }

        if (!aCfnumber[v108])
        {
LABEL_334:
          CFTypeID TypeID = CFNumberGetTypeID();
          goto LABEL_338;
        }

LABEL_329:
        uint64_t v152 = 0LL;
        while (v108 != v152)
        {
          if (v41[v152] != aCfstring[v152]) {
            return 4294960561LL;
          }
          if (++v152 == 9) {
            goto LABEL_337;
          }
        }

        if (aCfstring[v108]) {
          return 4294960561LL;
        }
LABEL_337:
        CFTypeID TypeID = CFStringGetTypeID();
LABEL_338:
        if (CFGetTypeID(cf) == TypeID) {
          goto LABEL_60;
        }
        return 4294960540LL;
      }

      if (!strcmp((const char *)v14 + 1, "data*"))
      {
        CFTypeID v129 = CFGetTypeID(cf);
        if (v129 == CFDataGetTypeID())
        {
          v130 = v155;
          v155 += 2;
          uint64_t v131 = *(void *)v130;
          if (CFDataGetLength((CFDataRef)cf) == v131)
          {
            if (a2) {
              *(void *)a2 = CFDataGetBytePtr((CFDataRef)cf);
            }
            return 0LL;
          }
        }

        return 4294960553LL;
      }

      unsigned int v43 = *v41 - 48;
      if (v43 > 9)
      {
        if (!*v41)
        {
          size_t v44 = 0LL;
          goto LABEL_243;
        }
      }

      else
      {
        size_t v44 = 0LL;
        CFStringEncoding v45 = v14 + 2;
        do
        {
          size_t v44 = 10 * v44 + v43;
          int v47 = *v45++;
          int v46 = v47;
          unsigned int v43 = v47 - 48;
        }

        while ((v47 - 48) < 0xA);
        if (!v46)
        {
          if ((v44 & 0x8000000000000000LL) != 0) {
            return 4294960586LL;
          }
LABEL_243:
          CFTypeID v132 = CFGetTypeID(cf);
          if (v132 == CFDataGetTypeID())
          {
            if (CFDataGetLength((CFDataRef)cf) == v44)
            {
              if (a2)
              {
                v133 = CFDataGetBytePtr((CFDataRef)cf);
                memcpy((void *)a2, v133, v44);
              }

              return 0LL;
            }

            return 4294960553LL;
          }

          return 4294960540LL;
        }
      }

      return 4294960560LL;
    }

    CFTypeID v99 = CFGetTypeID(cf);
    if (v99 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    uint64_t result = StringToUUIDEx((char *)cStr, 0xFFFFFFFFFFFFFFFFLL, 0, 0LL, 0LL, v100, v101, v102);
    if (!(_DWORD)result) {
      goto LABEL_60;
    }
  }

  return result;
}

unint64_t CFGetInt64(const __CFString *a1, int *a2)
{
  valuePtr[16] = *(double *)MEMORY[0x1895F89C0];
  unint64_t v20 = 0LL;
  if (!a1)
  {
    int v12 = -6705;
    goto LABEL_39;
  }

  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)a1))
    {
      valuePtr[0] = 0.0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, valuePtr);
      double v5 = valuePtr[0];
      if (valuePtr[0] < -9.22337204e18)
      {
        unint64_t v6 = 0x8000000000000000LL;
LABEL_26:
        unint64_t v20 = v6;
        int v12 = -6710;
        goto LABEL_39;
      }

      if (valuePtr[0] >= 9.22337204e18)
      {
        unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_26;
      }

      goto LABEL_36;
    }

    CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &v20);
LABEL_38:
    int v12 = 0;
    goto LABEL_39;
  }

  if ((const __CFString *)*MEMORY[0x189604DE8] == a1) {
    goto LABEL_22;
  }
  if ((const __CFString *)*MEMORY[0x189604DE0] == a1)
  {
LABEL_27:
    unint64_t v20 = 0LL;
    goto LABEL_38;
  }

  if (v4 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, (char *)valuePtr, 128LL, 0x600u))
    {
      if (strnicmpx((unsigned __int8 *)valuePtr, -1LL, "true")
        && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "yes")
        && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "y")
        && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "on")
        && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "1"))
      {
        if (strnicmpx((unsigned __int8 *)valuePtr, -1LL, "false")
          && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "no")
          && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "n")
          && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "off")
          && strnicmpx((unsigned __int8 *)valuePtr, -1LL, "0"))
        {
          if (SNScanF((char *)valuePtr, 0xFFFFFFFFFFFFFFFFLL, "%lli", v7, v8, v9, v10, v11, (int)&v20) != 1)
          {
            int v12 = -6717;
            goto LABEL_39;
          }

          goto LABEL_38;
        }

        goto LABEL_27;
      }

LABEL_45:
    int v12 = -6743;
    goto LABEL_39;
  }

  if (v4 == CFDateGetTypeID())
  {
    double v5 = MEMORY[0x186E41D84](a1);
LABEL_36:
    uint64_t v13 = (uint64_t)v5;
    goto LABEL_37;
  }

  if (v4 == CFNullGetTypeID()) {
    goto LABEL_38;
  }
  int v12 = -6756;
LABEL_39:
  if (a2) {
    *a2 = v12;
  }
  return v20;
}

      CFStringRef v23 = -87;
      goto LABEL_46;
    }

    CFStringRef v23 = v16;
    int v25 = self->_ucat;
    if (v25->var0 <= 90)
    {
      if (v25->var0 == -1)
      {
        int v25 = self->_ucat;
      }

      LogPrintF( (uint64_t)v25,  (uint64_t)"-[CUBluetoothScalablePipe _setupPipe]",  0x5Au,  (uint64_t)"### Get channel slot size failed: %#m\n",  v17,  v18,  v19,  v20,  v23);
    }
  }

    uint64_t v10 = 0LL;
    goto LABEL_20;
  }

  if (v2 != MEMORY[0x1895F9250]) {
    goto LABEL_45;
  }
  uint64_t v3 = xpc_dictionary_get_count(v1);
  if (v3 >> 62) {
    goto LABEL_45;
  }
  CFTypeID v4 = v3;
  double v5 = 2 * v3;
  if (v3 < 0x81)
  {
    unint64_t v6 = (const void **)valuePtr;
    goto LABEL_43;
  }

  unint64_t v6 = (const void **)calloc(2 * v3, 8uLL);
  if (!v6) {
    goto LABEL_45;
  }
LABEL_43:
  int v27 = 0LL;
  unint64_t v28 = &v27;
  CFIndex v29 = 0x2020000000LL;
  CFIndex v30 = 0LL;
  v25[0] = MEMORY[0x1895F87A8];
  v25[1] = 3221225472LL;
  v25[2] = __CUXPCCreateCFObjectFromXPCObject_block_invoke_2;
  v25[3] = &unk_189F33170;
  v25[4] = &v27;
  v25[5] = v6;
  v25[6] = v4;
  xpc_dictionary_apply(v1, v25);
  if (v28[3] == v4) {
    uint64_t v10 = CFDictionaryCreate(0LL, v6, &v6[v4], v4, MEMORY[0x189605240], MEMORY[0x189605250]);
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (v4)
  {
    if (v5 <= 1) {
      CFStringRef v23 = 1LL;
    }
    else {
      CFStringRef v23 = v5;
    }
    unsigned int v24 = v6;
    do
    {
      if (*v24) {
        CFRelease(*v24);
      }
      ++v24;
      --v23;
    }

    while (v23);
  }

          int v36 = dispatch_source_create(MEMORY[0x1895F8B70], v10, v34, *(dispatch_queue_t *)(a3 + 16));
          *(void *)(a3 + 216) = v36;
          if (v36)
          {
            ++*(_DWORD *)(a3 + 180);
            CFRetain((CFTypeRef)a3);
            dispatch_set_context(*(dispatch_object_t *)(a3 + 216), (void *)a3);
            dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a3 + 216),  (dispatch_function_t)_HTTPClientSocketEventsHandler);
            dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a3 + 216),  (dispatch_function_t)_HTTPClientCancelHandler);
            dispatch_activate(*(dispatch_object_t *)(a3 + 216));
LABEL_47:
            CFStringRef v37 = *(int **)(a3 + 96);
            if (*v37 <= 50)
            {
              if (*v37 == -1)
              {
                CFStringRef v37 = *(int **)(a3 + 96);
              }

              LogPrintF( (uint64_t)v37,  (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)",  0x32u,  (uint64_t)"Connect success: CID 0x%08X, Peer %s\n",  v30,  v31,  v32,  v33,  *(_DWORD *)(a3 + 160));
            }

CFPropertyListRef CFCreateWithPlistBytes(UInt8 *bytes, CFIndex length, unsigned int a3, uint64_t a4, int *a5)
{
  if (!length)
  {
    int v12 = a3 & 3;
    if (CFDictionaryGetTypeID() == a4)
    {
      if (v12) {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }
      else {
        CFMutableDictionaryRef Mutable = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }
    }

    else
    {
      if (CFArrayGetTypeID() != a4)
      {
        CFPropertyListRef v10 = 0LL;
        int v11 = -6732;
        goto LABEL_18;
      }

      if (v12) {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      }
      else {
        CFMutableDictionaryRef Mutable = CFArrayCreate(0LL, 0LL, 0LL, MEMORY[0x189605228]);
      }
    }

    CFPropertyListRef v10 = Mutable;
    if (Mutable) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }

  uint64_t v8 = CFDataCreate(0LL, bytes, length);
  if (!v8)
  {
    CFPropertyListRef v10 = 0LL;
LABEL_22:
    int v11 = -6728;
    goto LABEL_18;
  }

  uint64_t v9 = v8;
  CFPropertyListRef v10 = CFPropertyListCreateWithData(0LL, v8, a3, 0LL, 0LL);
  CFRelease(v9);
  if (v10)
  {
    if (a4 && CFGetTypeID(v10) != a4)
    {
      CFRelease(v10);
      CFPropertyListRef v10 = 0LL;
      int v11 = -6756;
      goto LABEL_18;
    }

uint64_t CFCreateObjectFromString(char *a1, void *a2)
{
  if (!strcasecmp(a1, "true") || !strcasecmp(a1, "yes") || !strcasecmp(a1, "y") || !strcasecmp(a1, "on"))
  {
    int v12 = (void **)MEMORY[0x189604DE8];
LABEL_14:
    CFNumberRef Int64 = *v12;
    goto LABEL_15;
  }

  if (!strcasecmp(a1, "false") || !strcasecmp(a1, "no") || !strcasecmp(a1, "n") || !strcasecmp(a1, "off"))
  {
    int v12 = (void **)MEMORY[0x189604DE0];
    goto LABEL_14;
  }

  size_t v4 = strlen(a1);
  int v5 = v4;
  if (SNScanF(a1, v4, "%lli %n", v6, v7, v8, v9, v10, (int)&v15) == 1 && v5 == -1)
  {
    CFNumberRef Int64 = CFNumberCreateInt64(v15);
    if (!Int64) {
      return 4294960596LL;
    }
  }

  else if (!strcmp(a1, "[]"))
  {
    CFNumberRef Int64 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (!Int64) {
      return 4294960596LL;
    }
  }

  else if (!strcmp(a1, "{}"))
  {
    CFNumberRef Int64 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!Int64) {
      return 4294960596LL;
    }
  }

  else
  {
    CFNumberRef Int64 = (void *)CFStringCreateWithCString(0LL, a1, 0x8000100u);
    if (!Int64) {
      return 4294960596LL;
    }
  }

CFDictionaryRef CFDictionaryCreateWithINIBytes( const UInt8 *a1, uint64_t a2, char a3, const void *a4, int *a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!Mutable)
  {
    char v80 = 0LL;
    int v79 = -6728;
    goto LABEL_165;
  }

  v83 = a4;
  CFTypeID v85 = a5;
  theDict = Mutable;
  CFMutableDictionaryRef cf = 0LL;
  unint64_t v11 = (unint64_t)&a1[a2];
  uint64_t v12 = MEMORY[0x1895F8770];
  uint64_t v13 = &a1[a2];
  int v84 = a3 & 1;
  v88 = &a1[a2];
  do
  {
    while (1)
    {
      do
      {
        if ((unint64_t)a1 < v11)
        {
          int64_t v14 = v13 - a1;
          do
          {
            uint64_t v15 = *a1;
            if (*(char *)a1 < 0)
            {
              if (!__maskrune(v15, 0x4000uLL)) {
                goto LABEL_11;
              }
            }

            else if ((*(_DWORD *)(v12 + 4 * v15 + 60) & 0x4000) == 0)
            {
              goto LABEL_11;
            }

            ++a1;
            --v14;
          }

          while (v14);
          a1 = (const UInt8 *)v11;
        }

LABEL_23:
        int v22 = *v17;
      }

      while (v22 == 35 || v22 == 59);
      if (v22 != 91) {
        break;
      }
      CFStringRef v23 = v17 + 1;
      do
      {
        unsigned int v24 = v23;
        if (v23 >= v18)
        {
          int v27 = v23;
          goto LABEL_58;
        }

        uint64_t v25 = *v23;
        else {
          int v26 = *(_DWORD *)(v12 + 4 * v25 + 60) & 0x4000;
        }
        CFStringRef v23 = v24 + 1;
      }

      while (v26);
      int v27 = v24;
      do
      {
        uint64_t v28 = *v27;
        if (v28 == 93) {
          break;
        }
        if ((v28 & 0x80) != 0)
        {
          if (__maskrune(v28, 0x4000uLL)) {
            break;
          }
        }

        else if ((*(_DWORD *)(v12 + 4 * v28 + 60) & 0x4000) != 0)
        {
          break;
        }

        ++v27;
      }

      while (v27 < v18);
LABEL_58:
      if (v27 != v18)
      {
        uint64_t v34 = (unsigned __int8 *)v27;
        if (v27 < v18)
        {
          int64_t v35 = v18 - v27;
          uint64_t v34 = (unsigned __int8 *)v27;
          do
          {
            uint64_t v36 = *v34;
            if ((char)*v34 < 0)
            {
              if (!__maskrune(v36, 0x4000uLL)) {
                goto LABEL_67;
              }
            }

            else if ((*(_DWORD *)(v12 + 4 * v36 + 60) & 0x4000) == 0)
            {
              goto LABEL_67;
            }

            ++v34;
            --v35;
          }

          while (v35);
          uint64_t v34 = v18;
        }

    int64_t v19 = v30++;
    uint64_t v12 = *v19;
    if (!*v19) {
      goto LABEL_24;
    }
  }

  if (strcasecmp(v12, "<any-false-ish>"))
  {
    if (!strcasecmp(v12, "<any-int>"))
    {
    }

    else
    {
      unsigned int v18 = (unsigned int *)v30++;
      int64_t v29 = *v18;
    }

    goto LABEL_23;
  }

  if (strnicmpx(v10, -1LL, "false")
    && strnicmpx(v10, -1LL, "no")
    && strnicmpx(v10, -1LL, "n")
    && strnicmpx(v10, -1LL, "off")
    && strnicmpx(v10, -1LL, "0"))
  {
    goto LABEL_23;
  }

  int64_t v29 = 0;
LABEL_27:
  if (a3) {
    *a3 = 0;
  }
  return v29;
}

      unint64_t v11 = 0;
      goto LABEL_51;
    }

    objc_storeStrong((id *)&self->_peerValidationDict, v19);
    int v20 = (const __CFDictionary *)v38[5];
    CFTypeID TypeID = CFStringGetTypeID();
    CFDictionaryGetTypedValue(v20, @"encDsID", TypeID, 0LL);
    int v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      CFStringRef v23 = -[CUAppleIDClient _getPeerCertificateAndReturnError:](self, "_getPeerCertificateAndReturnError:", a4);
      if (v23)
      {
        uint64_t v28 = 0LL;
        LODWORD(v24) = SecCertificateCopyCommonName(v23, (CFStringRef *)&v28);
        uint64_t v25 = v28;
        if ((_DWORD)v24 || !v28)
        {
          if (a4)
          {
            if ((_DWORD)v24) {
              unsigned int v24 = v24;
            }
            else {
              unsigned int v24 = 4294960596LL;
            }
            NSErrorWithOSStatusF((const char *)v24);
            int v26 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_44;
          }
        }

        else if ((-[__CFString hasSuffix:](v28, "hasSuffix:", v22) & 1) != 0)
        {
          if ((v9 & 1) != 0)
          {
            unint64_t v11 = 1;
            goto LABEL_49;
          }

          if (-[CUAppleIDClient _validatePeerHashes:](self, "_validatePeerHashes:", v38[5]))
          {
            unint64_t v11 = 1;
            self->_peerValidated = 1;
LABEL_49:

            goto LABEL_50;
          }

          if (a4)
          {
            NSErrorWithOSStatusF((const char *)0xFFFFE5CCLL);
            int v26 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_44;
          }
        }

        else if (a4)
        {
          NSErrorWithOSStatusF((const char *)0xFFFFE5A8LL);
          int v26 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_44:
          unint64_t v11 = 0;
          *a4 = v26;
          goto LABEL_49;
        }

        unint64_t v11 = 0;
        goto LABEL_49;
      }
    }

    else if (a4)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
      unint64_t v11 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_50:

      goto LABEL_51;
    }

    unint64_t v11 = 0;
    goto LABEL_50;
  }

  if (!a4) {
    return 0;
  }
  NSErrorWithOSStatusF((const char *)0xFFFFE5A7LL);
  unint64_t v11 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
  return v11;
}

        if (a3)
        {
LABEL_24:
          writeRequests = writeRequests;
          int64_t v35 = 0;
          *a3 = writeRequests;
          goto LABEL_28;
        }
}

        if (a3)
        {
LABEL_24:
          writeRequests = writeRequests;
          uint64_t v36 = 0;
          *a3 = writeRequests;
          goto LABEL_28;
        }

    [v18 _handleDeviceEvent:a4 device:a1];
    goto LABEL_2;
  }

  if (a3 == 1)
  {
    int64_t v29 = v13[28];
    if (*v29 <= 10)
    {
      if (*v29 == -1)
      {
        int64_t v29 = v18[28];
      }

      BTServiceSpecificEventToString_2016(a4);
      LogPrintF( (uint64_t)v29,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)",  0xAu,  (uint64_t)"BTService disconnect: %#{flags}, %d %s, %#m\n",  v30,  v31,  v32,  v33,  a2);
    }

      unsigned int v43 = [v4 userIndex];
      if (v43 < [v4 userCount])
      {
        do
        {
          [v4 users];
          int v44 = (void *)objc_claimAutoreleasedReturnValue();
          CFStringEncoding v45 = [v4 userIndex];
          [v4 setUserIndex:v45 + 1];
          [v44 objectAtIndexedSubscript:v45];
          int v46 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            v67[0] = MEMORY[0x1895F87A8];
            v67[1] = 3221225472LL;
            v67[2] = __47__CUHomeKitManager__findPairedPeerWithContext___block_invoke_4;
            v67[3] = &unk_189F31208;
            v67[4] = self;
            v67[5] = v46;
            uint64_t v68 = v4;
            [v46 pairingIdentityWithCompletionHandler:v67];

            goto LABEL_39;
          }

          uint64_t v47 = self->_ucat;
          if (v47->var0 <= 90)
          {
            if (v47->var0 == -1)
            {
              uint64_t v47 = self->_ucat;
            }

            [v4 identifier];
            uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue();
            [v46 name];
            unint64_t v66 = (void *)objc_claimAutoreleasedReturnValue();
            LogPrintF( (uint64_t)v47,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:]",  0x5Au,  (uint64_t)"### FindPairedPeer: '%@', no user identity SPI '%@'\n",  v49,  v50,  v51,  v52,  (char)v48);
          }

        uint64_t v54 = self;
        CFTypeID v55 = v60;
LABEL_26:
        -[CUHomeKitManager _findPairedPeerWithContext:](v54, "_findPairedPeerWithContext:", v55);
LABEL_32:

        goto LABEL_33;
      }

      [v11 publicKey];
      int v37 = (void *)objc_claimAutoreleasedReturnValue();
      [v37 data];
      unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        uint64_t v39 = mach_absolute_time();
        UpTicksToMilliseconds(v39 - [v60 startTicks]);
        CFTypeID v40 = self->_ucat;
        if (v40->var0 <= 30)
        {
          int64_t v41 = v60;
          if (v40->var0 == -1)
          {
            CFTypeID v40 = self->_ucat;
            int64_t v41 = v60;
          }

          [v41 identifier];
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
          LogPrintF( (uint64_t)v40,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:label:pairingIdentity:error:]",  0x1Eu,  (uint64_t)"FindPairedPeer found: '%@', %@, %llu ms\n",  v43,  v44,  v45,  v46,  (char)v42);
        }

        [*(id *)(v23 + 112) start];
        goto LABEL_16;
      }

      uint64_t v10 = *(int **)(v8 + 96);
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUNANSubscriber subscriber:terminatedWithReason:]_block_invoke",  0x1Eu,  (uint64_t)"WFASubscriber terminated: '%@', %s\n",  a5,  a6,  a7,  a8,  *(void *)(v8 + 152));
    uint64_t v8 = *(void *)(a1 + 32);
    goto LABEL_8;
  }

  uint64_t v69 = 1;
  if (setsockopt(v14, 0xFFFF, 4130, &v69, 4u) && (!*__error() || *__error()))
  {
    int64_t v29 = self->_ucat;
    if (v29->var0 <= 90)
    {
      if (v29->var0 != -1)
      {
LABEL_28:
        LogPrintF( (uint64_t)v29,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket SO_NOSIGPIPE failed (%s): %#m\n",  v25,  v26,  v27,  v28,  (char)v9);
        goto LABEL_30;
      }

      if (_LogCategory_Initialize((uint64_t)v29, 0x5Au))
      {
        int64_t v29 = self->_ucat;
        goto LABEL_28;
      }
    }
  }

    pthread_mutex_lock(&gCUSystemMonitorLock);
    objc_storeStrong((id *)&self->_systemName, obj);
    pthread_mutex_unlock(&gCUSystemMonitorLock);
    if (!a3) {
      -[CUSystemMonitorImp _invokeBlock:passingTest:]( self,  "_invokeBlock:passingTest:",  &__block_literal_global_294,  &__block_literal_global_295);
    }
    goto LABEL_25;
  }

  systemName = self->_systemName;
  unint64_t v11 = v5;
  uint64_t v12 = systemName;
  if (v11 == (__CFString *)v12)
  {
  }

  else
  {
    uint64_t v13 = v12;
    if ((v11 == 0LL) == (v12 != 0LL))
    {

LABEL_14:
      if (gLogCategory_CUSystemMonitor <= 30
        && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _systemConfigSystemNameChanged:]",  0x1Eu,  (uint64_t)"SystemName changed: '%@' -> '%@'\n",  v15,  v16,  v17,  v18,  (char)self->_systemName);
      }

      goto LABEL_23;
    }

    int64_t v14 = -[__CFString isEqual:](v11, "isEqual:", v12);

    if ((v14 & 1) == 0) {
      goto LABEL_14;
    }
  }

  if (gLogCategory_CUSystemMonitor <= 10
    && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0xAu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _systemConfigSystemNameChanged:]",  0xAu,  (uint64_t)"SystemName unchanged '%@'\n",  v15,  v16,  v17,  v18,  (char)v11);
  }

  if (a5) {
    *a5 = v14;
  }

  return v13;
}

  *a1 = v4;
  a1[1] = _NetTransportInitialize_11571;
  a1[2] = _NetTransportFinalize_11572;
  a1[3] = _NetTransportRead_11573;
  a1[4] = _NetTransportWriteV_11574;
  uint64_t v12 = (const void *)*((void *)v4 + 4);
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v6 = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 9) = 0LL;
  return v6;
}

      uint64_t result = 0LL;
    }
  }

  else
  {
    unint64_t v16 = 0LL;
    uint64_t result = 4294960556LL;
  }

  if (!(_DWORD)result) {
    return result;
  }
  if (*__error()) {
    return *__error();
  }
  return 4294960596LL;
}

        unsigned int v17 = 4294960568LL;
        goto LABEL_17;
      }
    }

    unsigned int v17 = 4294960542LL;
    goto LABEL_17;
  }

LABEL_67:
        if (v34 != v18)
        {
          int v37 = *v34;
          if (v37 == 34)
          {
            unsigned int v38 = (const char *)(v34 + 1);
            uint64_t v39 = v34 + 1;
            if (v34 + 1 < v18)
            {
              uint64_t v54 = v18 - v34 - 1;
              uint64_t v39 = v34 + 1;
              while (*v39 != 34)
              {
                ++v39;
                if (!--v54)
                {
                  uint64_t v39 = v18;
                  break;
                }
              }
            }

            if (v39 != v18)
            {
              CFTypeID v55 = v39 + 1;
              do
              {
                char v56 = v55;
                if (v55 >= v18) {
                  break;
                }
                uint64_t v57 = *v55;
                int v58 = (char)*v55 < 0 ? __maskrune(v57, 0x4000uLL) : *(_DWORD *)(v12 + 4 * v57 + 60) & 0x4000;
                CFTypeID v55 = v56 + 1;
              }

              while (v58);
              if (v56 != v18 && *v56 == 93)
              {
LABEL_111:
                if (cf) {
                  CFRelease(cf);
                }
                CFMutableDictionaryRef cf = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
                if (!cf)
                {
LABEL_170:
                  char v80 = 0LL;
                  int v79 = -6728;
                  a5 = v85;
                  CFTypeID v81 = theDict;
                  goto LABEL_164;
                }

                CFIndex v59 = v39 - (unsigned __int8 *)v38;
                if (v38)
                {
                  if (v83 == (const void *)-1LL)
                  {
                    CFStringRef v61 = CFStringCreateWithFormat(0LL, 0LL, @"%.*s.%.*s", v27 - v24, v24, v59, v38);
                    CFMutableDictionaryRef v62 = cf;
                    if (!v61)
                    {
                      char v80 = 0LL;
                      int v79 = -6700;
                      a5 = v85;
                      CFTypeID v81 = theDict;
                      goto LABEL_162;
                    }

      if (v4) {
        ((void (**)(id, void *))v4)[2](v4, v56);
      }

      goto LABEL_70;
    }

    -[objc_class automaticallyRequestInternetFromInitiators]( getWiFiAwareInternetSharingConfigurationClass_4869(),  "automaticallyRequestInternetFromInitiators");
    unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (v43) {
      [v37 setInternetSharingConfiguration:v43];
    }
    int v44 = self->_ucat;
    if (v44->var0 <= 30)
    {
      if (v44->var0 != -1)
      {
LABEL_35:
        CFStringEncoding v45 = "success";
        if (!v43) {
          CFStringEncoding v45 = "failed";
        }
        LogPrintF( (uint64_t)v44,  (uint64_t)"-[CUNANPublisher _activateWithCompletion:]",  0x1Eu,  (uint64_t)"AutomaticInfraRelay: %s",  v39,  v40,  v41,  v42,  (char)v45);
        goto LABEL_42;
      }

      if (_LogCategory_Initialize((uint64_t)v44, 0x1Eu))
      {
        int v44 = self->_ucat;
        goto LABEL_35;
      }
    }

      self->_flowControlState = 20;
      uint64_t v39 = _Block_copy(self->_flowControlChangedHandler);
      CFTypeID v40 = v39;
      if (v39) {
        (*((void (**)(void *))v39 + 2))(v39);
      }

      goto LABEL_70;
    }

    if (!-[CUWriteRequest endOfData](v15, "endOfData")) {
      goto LABEL_37;
    }
    CFIndex v30 = self->_rawIOLogLevel;
    uint64_t v31 = self->_ucat;
    if (v31->var0 <= v30)
    {
      if (v31->var0 != -1) {
        goto LABEL_31;
      }
      if (_LogCategory_Initialize((uint64_t)v31, self->_rawIOLogLevel))
      {
        uint64_t v31 = self->_ucat;
        CFIndex v30 = self->_rawIOLogLevel;
LABEL_31:
        LogPrintF( (uint64_t)v31,  (uint64_t)"-[CUTCPConnection _processWrites:]",  v30,  (uint64_t)"Shutdown socket %d\n",  v26,  v27,  v28,  v29,  self->_socketFD);
      }
    }

    if (shutdown(self->_socketFD, 1))
    {
      if (!*__error())
      {
        CFStringRef v32 = 4294960596LL;
LABEL_39:
        NSErrorWithOSStatusF((const char *)v32);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_40;
      }

      CFStringRef v32 = *__error();
      if ((_DWORD)v32) {
        goto LABEL_39;
      }
    }

LABEL_156:
                    int v74 = theDict;
                    CFStringRef v75 = v61;
                    CFMutableDictionaryRef v76 = v62;
LABEL_157:
                    CFDictionarySetValue(v74, v75, v76);
                    goto LABEL_134;
                  }
                }

                CFStringRef v60 = CFStringCreateWithBytes(0LL, v24, v27 - v24, 0x8000100u, 0);
                if (!v60) {
                  goto LABEL_171;
                }
                CFStringRef v61 = v60;
                CFMutableDictionaryRef v62 = cf;
                if (v83 == (const void *)-2LL)
                {
                  Value = (void *)CFDictionaryGetValue(theDict, v60);
                  if (!Value)
                  {
                    CFMutableDictionaryRef v72 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
                    if (!v72) {
                      goto LABEL_174;
                    }
                    Value = v72;
                    CFDictionarySetValue(theDict, v61, v72);
                    CFRelease(Value);
                  }

                  CFRelease(v61);
                  CFStringRef v73 = CFStringCreateWithBytes(0LL, (const UInt8 *)v38, v59, 0x8000100u, 0);
                  if (!v73)
                  {
LABEL_171:
                    char v80 = 0LL;
                    int v79 = -6700;
LABEL_172:
                    a5 = v85;
                    CFTypeID v81 = theDict;
                    CFMutableDictionaryRef v62 = cf;
                    goto LABEL_162;
                  }

                  CFStringRef v61 = v73;
                  int v74 = (__CFDictionary *)Value;
                  CFStringRef v75 = v61;
                  CFMutableDictionaryRef v76 = cf;
                  goto LABEL_157;
                }

                uint64_t v63 = (__CFArray *)CFDictionaryGetValue(theDict, v60);
                if (v63)
                {
                  CFArrayAppendValue(v63, cf);
                }

                else
                {
                  uint64_t v77 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
                  if (!v77)
                  {
LABEL_174:
                    CFRelease(v61);
                    char v80 = 0LL;
                    int v79 = -6728;
                    goto LABEL_172;
                  }

                  unint64_t v78 = v77;
                  CFArrayAppendValue(v77, cf);
                  CFDictionarySetValue(theDict, v61, v78);
                  CFRelease(v78);
                }

        if ((unint64_t)v5 >= v58)
        {
          CFStringRef v60 = 0LL;
        }

        else
        {
          CFStringRef v60 = 0LL;
          CFStringRef v61 = v58 - (void)v5;
          while (1)
          {
            CFMutableDictionaryRef v62 = __OFSUB__(v24, 1);
            if (--v24 < 0 != v62) {
              break;
            }
            uint64_t v63 = *v5;
            CFMutableDictionaryRef v64 = v63 - 48;
            if ((v63 - 48) >= 0xA)
            {
              CFMutableDictionaryRef v64 = __tolower(v63) - 87;
            }

            CFStringRef v60 = v60 * v37 + v64;
            ++v5;
            if (!--v61)
            {
              int v5 = v122;
              break;
            }
          }
        }

        if (v5 != v13)
        {
          if ((_DWORD)v21) {
            continue;
          }
          CFStringRef v65 = v56 ? v60 : -v60;
          unint64_t v66 = v124;
          v124 += 2;
          uint64_t v67 = *(_BYTE **)v66;
          if (v67)
          {
            if (v121 <= 103)
            {
              if (v121)
              {
                if (v121 == 72)
                {
                  *uint64_t v67 = v65;
                }

                else
                {
                  if (v121 != 76) {
                    return v120;
                  }
LABEL_210:
                  *(void *)uint64_t v67 = v65;
                }
              }

              else
              {
                *(_DWORD *)uint64_t v67 = v65;
              }

LABEL_134:
                CFRelease(v61);
              }
            }
          }

          else if (v37 == 93)
          {
            unsigned int v38 = 0LL;
            uint64_t v39 = 0LL;
            goto LABEL_111;
          }
        }
      }
    }

    if (v17 >= v18)
    {
      int v33 = v17;
    }

    else
    {
      int64_t v29 = v18 - v16;
      CFIndex v30 = &v17[v18 - v16];
      unint64_t v16 = v17;
      while (1)
      {
        uint64_t v31 = *v16;
        if ((v31 & 0x80) != 0)
        {
          if (__maskrune(v31, 0x4000uLL)) {
            break;
          }
        }

        else if ((*(_DWORD *)(v12 + 4 * v31 + 60) & 0x4000) != 0)
        {
          break;
        }

        ++v16;
        if (!--v29)
        {
          unint64_t v16 = v30;
          break;
        }
      }

      int v33 = v16;
    }

    CFTypeID v40 = v33;
    if (v33 < v18)
    {
      int64_t v41 = v18 - v16;
      CFTypeID v40 = v33;
      do
      {
        uint64_t v42 = *v40;
        if (*(char *)v40 < 0)
        {
          if (!__maskrune(v42, 0x4000uLL)) {
            goto LABEL_80;
          }
        }

        else if ((*(_DWORD *)(v12 + 4 * v42 + 60) & 0x4000) == 0)
        {
          goto LABEL_80;
        }

        ++v40;
        --v41;
      }

      while (v41);
      CFTypeID v40 = &v33[v18 - v16];
LABEL_80:
      uint64_t v13 = v88;
    }

    if (v40 == v18)
    {
      unsigned int v43 = 0LL;
      CFStringEncoding v45 = 0LL;
      goto LABEL_125;
    }

    unsigned int v43 = 0LL;
    int v44 = *v40;
    CFStringEncoding v45 = 0LL;
    if (v44 == 35 || v44 == 59) {
      goto LABEL_125;
    }
  }

  while (v44 != 61);
  int v46 = (const char *)(v40 + 1);
  uint64_t v47 = v18 - v40 - 2;
  do
  {
    unsigned int v43 = v46;
    uint64_t v48 = v47;
    unsigned __int8 v49 = (unsigned __int8 *)v40;
    uint64_t v50 = *(unsigned __int8 *)v46;
    if (*v46 < 0) {
      int v51 = __maskrune(v50, 0x4000uLL);
    }
    else {
      int v51 = *(_DWORD *)(v12 + 4 * v50 + 60) & 0x4000;
    }
    int v46 = v43 + 1;
    uint64_t v47 = v48 - 1;
    ++v40;
  }

  while (v51);
  __int128 v52 = v43 - 1;
  int v53 = *(unsigned __int8 *)v43;
  if (v53 == 34)
  {
    ++v43;
    if (v52 + 2 >= (const char *)v18)
    {
LABEL_124:
      CFStringEncoding v45 = v43;
      uint64_t v13 = v88;
      goto LABEL_125;
    }

    CFStringEncoding v45 = v52 + 2;
    uint64_t v13 = v88;
    while (*v45 != 34)
    {
      if (++v45 >= (const char *)v18)
      {
        CFStringEncoding v45 = (const char *)v18;
        break;
      }
    }
  }

  else
  {
    uint64_t v67 = 0LL;
    uint64_t v68 = v18 - (unsigned __int8 *)v52;
    while (v53 != 35 && v53 != 59)
    {
      if (!v48) {
        goto LABEL_141;
      }
      int v53 = v46[v67++];
      --v48;
    }

    uint64_t v68 = v67 + 1;
LABEL_141:
    uint64_t v13 = v88;
    if (v68 < 2)
    {
      CFStringEncoding v45 = &v52[v68];
    }

    else
    {
      CFStringEncoding v45 = (const char *)&v49[v68];
      uint64_t v69 = v68 + 1;
      do
      {
        uint64_t v70 = *((unsigned __int8 *)v45 - 1);
        if (*(v45 - 1) < 0)
        {
          if (!__maskrune(v70, 0x4000uLL)) {
            break;
          }
        }

        else if ((*(_DWORD *)(v12 + 4 * v70 + 60) & 0x4000) == 0)
        {
          break;
        }

        --v45;
        --v69;
      }

      while (v69 >= 3);
    }
  }

LABEL_125:
  CFMutableDictionaryRef v62 = cf;
  if (!cf && !v84)
  {
    CFMutableDictionaryRef v64 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!v64) {
      goto LABEL_170;
    }
    CFMutableDictionaryRef v62 = v64;
    CFDictionarySetValue(theDict, &stru_189F34A78, v64);
  }

  CFStringRef v65 = CFStringCreateWithBytes(0LL, v17, v33 - v17, 0x8000100u, 0);
  if (v65)
  {
    CFStringRef v61 = v65;
    CFMutableDictionaryRef cf = v62;
    if (v62) {
      unint64_t v66 = v62;
    }
    else {
      unint64_t v66 = theDict;
    }
    CFDictionarySetCString(v66, v61, v43, v45 - v43);
    goto LABEL_134;
  }

  char v80 = 0LL;
  int v79 = -6700;
  CFTypeID v81 = theDict;
LABEL_161:
  a5 = v85;
  if (!v62) {
    goto LABEL_163;
  }
LABEL_162:
  CFRelease(v62);
LABEL_163:
  if (!v81) {
    goto LABEL_165;
  }
LABEL_164:
  CFRelease(v81);
LABEL_165:
  if (a5) {
    *a5 = v79;
  }
  return v80;
}

  _LogOutputDeleteUnused();
}

uint64_t CFDictionarySetCString(__CFDictionary *a1, const void *a2, const char *a3, CFIndex numBytes)
{
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = "";
  }
  if (numBytes == -1) {
    CFStringRef v7 = CFStringCreateWithCString(0LL, v6, 0x8000100u);
  }
  else {
    CFStringRef v7 = CFStringCreateWithBytes(0LL, (const UInt8 *)v6, numBytes, 0x8000100u, 0);
  }
  CFStringRef v8 = v7;
  if (!v7) {
    return 4294960596LL;
  }
  CFDictionarySetValue(a1, a2, v7);
  CFRelease(v8);
  return 0LL;
}

uint64_t CFPropertyListCreateBytes( CFPropertyListRef propertyList, CFPropertyListFormat format, void *a3, size_t *a4)
{
  CFDataRef Data = CFPropertyListCreateData(0LL, propertyList, format, 0LL, 0LL);
  if (!Data) {
    return 4294960596LL;
  }
  CFStringRef v7 = Data;
  size_t Length = CFDataGetLength(Data);
  uint64_t v9 = malloc(Length);
  if (v9)
  {
    uint64_t v10 = v9;
    BytePtr = CFDataGetBytePtr(v7);
    memcpy(v10, BytePtr, Length);
    uint64_t v12 = 0LL;
    *a3 = v10;
    *a4 = Length;
  }

  else
  {
    uint64_t v12 = 4294960596LL;
  }

  CFRelease(v7);
  return v12;
}

CFMutableDataRef CFDataCreateWithANSIFile(FILE *a1, int *a2)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0LL, 0LL);
  if (!Mutable)
  {
LABEL_10:
    int v8 = -6728;
    if (!a2) {
      return Mutable;
    }
    goto LABEL_7;
  }

  int v5 = (UInt8 *)malloc(0x20000uLL);
  if (!v5)
  {
    CFRelease(Mutable);
    CFMutableDataRef Mutable = 0LL;
    goto LABEL_10;
  }

  for (CFIndex i = v5; ; CFDataAppendBytes(Mutable, i, v7))
  {
    size_t v7 = fread(i, 1uLL, 0x20000uLL, a1);
    if (!v7) {
      break;
    }
  }

  free(i);
  int v8 = 0;
  if (a2) {
LABEL_7:
  }
    *a2 = v8;
  return Mutable;
}

CFPropertyListRef CFPropertyListCreateFromFilePath(const char *a1, CFOptionFlags a2, int *a3)
{
  int v5 = CFDataCreateWithFilePath(a1, &v9);
  if (v5)
  {
    uint64_t v6 = v5;
    CFPropertyListRef v7 = CFPropertyListCreateWithData(0LL, v5, a2, 0LL, 0LL);
    CFRelease(v6);
    if (!v7) {
      int v9 = -6717;
    }
  }

  else
  {
    CFPropertyListRef v7 = 0LL;
  }

  if (a3) {
    *a3 = v9;
  }
  return v7;
}

CFMutableDataRef CFDataCreateWithFilePath(const char *a1, _DWORD *a2)
{
  uint64_t v3 = fopen(a1, "rb");
  if (v3)
  {
    size_t v4 = v3;
    int v7 = 0;
    CFMutableDataRef v5 = CFDataCreateWithANSIFile(v3, &v7);
    fclose(v4);
    if (!a2) {
      return v5;
    }
    goto LABEL_9;
  }

  if (*__error())
  {
    int v7 = *__error();
    if (v7)
    {
      CFMutableDataRef v5 = 0LL;
      if (!a2) {
        return v5;
      }
    }

    else
    {
      CFMutableDataRef v5 = CFDataCreateWithANSIFile(0LL, &v7);
      if (!a2) {
        return v5;
      }
    }

    goto LABEL_9;
  }

  CFMutableDataRef v5 = 0LL;
  int v7 = -6700;
  if (a2) {
LABEL_9:
  }
    *a2 = v7;
  return v5;
}

uint64_t CFPropertyListWriteToFilePath(const __CFString *cf, char *__s1, FILE *a3)
{
  size_t v4 = __s1;
  uint64_t v6 = 0LL;
  int v20 = 0LL;
  while (v6 != 4)
  {
    int v7 = aRaw[v6];
    int v8 = __s1[v6++];
    if (v8 != v7) {
      goto LABEL_14;
    }
  }

  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFStringGetTypeID())
  {
    if (v9 == CFDataGetTypeID())
    {
      if (a3)
      {
        a3 = fopen((const char *)a3, "wb");
        if (!a3)
        {
          if (!*__error())
          {
LABEL_42:
            a3 = 0LL;
            CFDataRef Data = 0LL;
            goto LABEL_43;
          }

          a3 = 0LL;
          CFDataRef Data = 0LL;
          unsigned int v22 = *__error();
          if (v22) {
            goto LABEL_47;
          }
        }

        size_t Length = CFDataGetLength((CFDataRef)cf);
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        if (fwrite(BytePtr, 1uLL, Length, a3) != Length) {
          goto LABEL_28;
        }
        goto LABEL_12;
      }

      goto LABEL_54;
    }

    v4 += 4;
LABEL_14:
    if (!strcmp(v4, "streamed"))
    {
      CFDataRef Data = (const __CFData *)CFBinaryPlistStreamedCreateDataEx(cf, 31, (int *)&v22);
      if (v22)
      {
        a3 = 0LL;
        goto LABEL_47;
      }
    }

    else
    {
      if (strcmp(v4, "binary1"))
      {
        a3 = 0LL;
        CFDataRef Data = 0LL;
        int v13 = -6735;
        goto LABEL_46;
      }

      CFDataRef Data = CFPropertyListCreateData(0LL, cf, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
      if (!Data) {
        goto LABEL_41;
      }
    }

    if (!a3)
    {
LABEL_55:
      int v13 = -6704;
      goto LABEL_46;
    }

    int64_t v14 = fopen((const char *)a3, "wb");
    if (v14)
    {
      a3 = v14;
      unsigned int v22 = 0;
      goto LABEL_23;
    }

    if (*__error())
    {
      a3 = 0LL;
      unsigned int v22 = *__error();
      if (v22) {
        goto LABEL_47;
      }
LABEL_23:
      size_t v15 = CFDataGetLength(Data);
      unint64_t v16 = CFDataGetBytePtr(Data);
      if (fwrite(v16, 1uLL, v15, a3) == v15)
      {
        int v13 = 0;
        goto LABEL_46;
      }

      if (*__error())
      {
        int v13 = *__error();
        goto LABEL_46;
      }

      goto LABEL_43;
    }

LABEL_12:
  int v13 = 0;
LABEL_45:
  CFDataRef Data = 0LL;
LABEL_46:
  unsigned int v22 = v13;
LABEL_47:
  if (v20) {
    free(v20);
  }
  if (Data) {
    CFRelease(Data);
  }
  if (a3) {
    fclose(a3);
  }
  return v22;
}

      unint64_t v11 = v8 - v7;
      uint64_t v12 = strnicmp_prefix(v7, v8 - v7, "+");
      if (v12)
      {
        int v13 = strnicmp_prefix(v7, v11, "-");
        if (v13) {
          int64_t v14 = v7;
        }
        else {
          int64_t v14 = v7 + 1;
        }
        if (v13) {
          size_t v15 = v11;
        }
        else {
          size_t v15 = v11 - 1;
        }
        unint64_t v16 = v13 == 0;
      }

      else
      {
        unint64_t v16 = 0;
        int64_t v14 = v7 + 1;
        size_t v15 = v11 - 1;
      }

      int v7 = (unsigned __int8 *)v5;
    }

    while (!v15);
    size_t v17 = *(unsigned __int8 *)v4;
    if (v17 > 0x3F) {
      goto LABEL_55;
    }
    unsigned int v18 = 0;
    int64_t v19 = 0LL;
    int v20 = v4;
LABEL_24:
    CFTypeID v40 = v18;
    int64_t v41 = v17;
    CFMutableArrayRef v21 = (unsigned __int8 *)(v20 + 1);
    uint64_t v42 = strlen(v20 + 1);
    if (v42)
    {
      unsigned int v22 = strnicmpx(v14, v15, "all");
      unsigned int v18 = v22 == 0;
      if (!v22)
      {
        v19 |= 1LL << v41;
        goto LABEL_40;
      }

      uint64_t v39 = v19;
      CFStringRef v23 = &v21[v42];
      unsigned int v24 = v21;
      while (1)
      {
        uint64_t v25 = v24;
        if (v24 >= v23)
        {
LABEL_31:
          int v27 = &v21[v42];
          unsigned int v24 = &v21[v42];
          if (v25 == v23)
          {
            size_t v4 = a3;
            int64_t v19 = v39;
            unsigned int v18 = 0;
            if (v40) {
              goto LABEL_42;
            }
LABEL_40:
            int v20 = (const char *)&v21[v42 + 1];
            LOBYTE(v17) = *v20;
            if (*(unsigned __int8 *)v20 > 0x3Fu)
            {
LABEL_55:
              FPrintF(*MEMORY[0x1895F89D0]);
              uint64_t result = 0LL;
              CFIndex v30 = a4;
              if (a4)
              {
                uint64_t v31 = -6710;
                goto LABEL_53;
              }

              return result;
            }

            goto LABEL_24;
          }
        }

        else
        {
          int v26 = v23 - v24;
          int v27 = v24;
          while (*v27 != 47)
          {
            ++v27;
            if (!--v26) {
              goto LABEL_31;
            }
          }

          unsigned int v24 = v27 + 1;
        }

        if (v27 - v25 == v15 && !memicmp(v25, v14, v15))
        {
          int64_t v19 = (1LL << v41) | v39;
          size_t v4 = a3;
          goto LABEL_42;
        }
      }
    }

    if (v40)
    {
LABEL_42:
      if (v12)
      {
        if (v16) {
          v34 |= v19;
        }
        else {
          v38 |= v19;
        }
      }

      else
      {
        v35 |= v19;
      }

      continue;
    }

    break;
  }

  CFStringRef v32 = (uint64_t *)MEMORY[0x1895F89D0];
  FPrintF(*MEMORY[0x1895F89D0]);
  _CLIPrintFlagDescriptors((uint64_t)v4, *v32);
  uint64_t result = 0LL;
  CFIndex v30 = a4;
  if (a4)
  {
    uint64_t v31 = -6735;
LABEL_53:
    const UInt8 *v30 = v31;
  }

  return result;
}

  if (v9)
  {
    if (v23)
    {
      v9[2](v9, v23);
    }

    else
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
      int v26 = (void *)objc_claimAutoreleasedReturnValue();
      v9[2](v9, v26);
    }
  }
}
}
}

  CFMutableArrayRef v21 = self->_ucat;
  if (v21->var0 <= 60)
  {
    if (v21->var0 == -1)
    {
      CFMutableArrayRef v21 = self->_ucat;
    }

    [v28 identifier];
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)v21,  (uint64_t)"-[CUBLEConnection centralManager:didFailToConnectPeripheral:error:]",  0x3Cu,  (uint64_t)"### DidFailToConnectPeripheral wrong peripheral: %@ (not %@), error %{error}\n",  v23,  v24,  v25,  v26,  (char)v22);
  }

  if (v29)
  {
    devices = self->_devices;
    if (!devices)
    {
      CFStringRef v32 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
      int v33 = self->_devices;
      self->_devices = v32;

      devices = self->_devices;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](devices, "setObject:forKeyedSubscript:", v16, v37);
    if (!v15) {
      goto LABEL_20;
    }
    if ((self->_changeFlags & v19) != 0)
    {
      if ((scanFlags & 0x100) == 0)
      {
        uint64_t v34 = _Block_copy(self->_deviceChangedHandler);
        int64_t v35 = v34;
        if (v34) {
          (*((void (**)(void *, CUBLEDevice *, uint64_t))v34 + 2))(v34, v16, v19);
        }
LABEL_22:

        goto LABEL_23;
      }

  if (self->_deviceFlags)
  {
    __int128 v52 = v9;
    NSAppendPrintF(&v52);
    unint64_t v16 = v52;

    CFTypeID v9 = v16;
  }

  lgint DeviceID = self->_lgDeviceID;
  if (lgDeviceID)
  {
    int v51 = v9;
    unsigned int v18 = lgDeviceID;
    -[NSData bytes](v18, "bytes");
    -[NSData length](v18, "length");
    NSAppendPrintF(&v51);
    int64_t v19 = v51;

    CFTypeID v9 = v19;
  }

  if (self->_lgFlags)
  {
    uint64_t v50 = v9;
    NSAppendPrintF(&v50);
    int v20 = v50;

    CFTypeID v9 = v20;
  }

  if (self->_nearbyActivityLevel)
  {
    unsigned __int8 v49 = v9;
    NSAppendPrintF(&v49);
    CFMutableArrayRef v21 = v49;

    CFTypeID v9 = v21;
  }

  if (self->_nearbyFlags)
  {
    uint64_t v48 = v9;
    NSAppendPrintF(&v48);
    unsigned int v22 = v48;

    CFTypeID v9 = v22;
  }

  nearbyAuthTag = self->_nearbyAuthTag;
  if (nearbyAuthTag)
  {
    uint64_t v47 = v9;
    uint64_t v36 = nearbyAuthTag;
    NSAppendPrintF(&v47);
    unsigned int v24 = v47;

    CFTypeID v9 = v24;
  }

  if (self->_objectDiscoveryMode)
  {
    int v46 = v9;
    NSAppendPrintF(&v46);
    uint64_t v25 = v46;

    CFStringEncoding v45 = v25;
    NSAppendPrintF(&v45);
    int v26 = v45;

    int v44 = v26;
    NSAppendPrintF(&v44);
    CFTypeID v9 = v44;

    objectDiscoveryPublicKeyCFDataRef Data = self->_objectDiscoveryPublicKeyData;
    if (objectDiscoveryPublicKeyData)
    {
      unsigned int v43 = v9;
      int v37 = objectDiscoveryPublicKeyData;
      NSAppendPrintF(&v43);
      uint64_t v28 = v43;

      CFTypeID v9 = v28;
    }
  }

  if (self->_proximityPairingProductID)
  {
    uint64_t v42 = v9;
    NSAppendPrintF(&v42);
    int64_t v29 = v42;

    CFTypeID v9 = v29;
  }

  if (self->_proximityPairingSubType == 1)
  {
    int64_t v41 = v9;
    NSAppendPrintF(&v41);
    CFIndex v30 = v41;

    CFTypeID v40 = v30;
    NSAppendPrintF(&v40);
    CFTypeID v9 = v40;
  }

  if (self->_changeFlags)
  {
    uint64_t v39 = v9;
    NSAppendPrintF(&v39);
    uint64_t v31 = v39;

    CFTypeID v9 = v31;
  }

  if (a3 < 21)
  {
    unsigned int v38 = v9;
    NSAppendPrintF(&v38);
    CFStringRef v32 = v38;

    CFTypeID v9 = v32;
  }

  return v9;
}

  self->_listeningPSM = a4;
  int v13 = (void (**)(void *, id))_Block_copy(self->_activateCompletion);
  activateCompletion = self->_activateCompletion;
  self->_activateCompletion = 0LL;

  if (v13) {
    v13[2](v13, v15);
  }
}
}

      CFTypeID v55 = 3;
      char v56 = 3;
    }
  }

  v58[0] = 0;
  CFMutableArrayRef v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_1985[0])( (uint64_t)a4,  (uint64_t)v58,  32LL);
  if (!v21)
  {
    [NSString stringWithUTF8String:v58];
    int v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKeyedSubscript:](self->_btConnectedDevices, "objectForKeyedSubscript:", v26);
    int v27 = (void *)objc_claimAutoreleasedReturnValue();
    CFStringRef v32 = v27;
    if (!v27)
    {
      int v51 = self->_ucat;
      if (v51->var0 <= 30)
      {
        if (v51->var0 == -1)
        {
          int v51 = self->_ucat;
        }

        LogPrintF( (uint64_t)v51,  (uint64_t)"-[CUBluetoothClient _btAccessoryPlacementChanged:device:]",  0x1Eu,  (uint64_t)"Placement changed: Lookup device failed: %@\n",  v28,  v29,  v30,  v31,  (char)v26);
      }

      goto LABEL_41;
    }

    int v33 = [v27 primaryPlacement];
    if (v57)
    {
      if (v56 > 0xD) {
        uint64_t v34 = 0LL;
      }
      else {
        uint64_t v34 = dword_186B4A86C[v56];
      }
    }

    else
    {
      uint64_t v34 = 7LL;
    }

    int64_t v35 = [v32 secondaryPlacement];
    if (v57)
    {
      if (v55 > 0xD) {
        CFTypeID v40 = 0LL;
      }
      else {
        CFTypeID v40 = dword_186B4A86C[v55];
      }
    }

    else
    {
      CFTypeID v40 = 7LL;
    }

    if ((_DWORD)v34 == v33 && (_DWORD)v40 == v35)
    {
      int64_t v41 = self->_ucat;
      if (v41->var0 <= 10)
      {
        if (v41->var0 == -1)
        {
          int64_t v41 = self->_ucat;
        }

        LogPrintF( (uint64_t)v41,  (uint64_t)"-[CUBluetoothClient _btAccessoryPlacementChanged:device:]",  0xAu,  (uint64_t)"Placement unchanged: %@\n",  v36,  v37,  v38,  v39,  (char)v32);
      }

  self->_bluetoothState = v9;
  uint64_t v12 = _Block_copy(self->_bluetoothStateChangedHandler);
  int v13 = v12;
  if (v12)
  {
    -[CUBluetoothClient _externalInvokeBlock:](self, "_externalInvokeBlock:", v12);
    uint64_t v12 = v13;
  }

  if (self->_btSessionStarted)
  {
    -[CUBluetoothClient _btEnsureStarted](self, "_btEnsureStarted");
    uint64_t v12 = v13;
  }
}
}
}

  int v20 = *(void *)(a1 + 40);
  if (v20) {
    (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v11);
  }

LABEL_15:
}

  -[CUFileQuery completionHandler](v19, "completionHandler");
  unsigned int v18 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    -[CUFileQuery setCompletionHandler:](v19, "setCompletionHandler:", 0LL);
    ((void (**)(void, id, id))v18)[2](v18, v8, v13);
  }

  if (self->_currentQuery == v19)
  {
    self->_currentQuery = 0LL;

    -[CUFileClient _run](self, "_run");
  }
}

  fileItems = v7->_fileItems;
  v7->_fileItems = v10;

  CFTypeID v9 = v25;
LABEL_13:
  Int64Ranged = CFDictionaryGetInt64Ranged(v6, &unk_189F523B0, 0LL, 0xFFFFFFFFLL, &v26);
  if (!v26) {
    v7->_flags = Int64Ranged;
  }
  CFStringRef v23 = v7;
LABEL_16:

LABEL_17:
  return v23;
}

    [v11 _run];
    goto LABEL_13;
  }

LABEL_13:
LABEL_14:

  v10[2](v10);
  _Block_object_dispose(&v45, 8);
}

    int v8 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B78],  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
    pollTimer = self->_pollTimer;
    self->_pollTimer = v8;

    uint64_t v10 = self->_pollTimer;
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 3221225472LL;
    handler[2] = __41__CUNetLinkManager__monitorEnsureStarted__block_invoke;
    handler[3] = &unk_189F34238;
    handler[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)v10, handler);
    unint64_t v11 = self->_pollTimer;
    uint64_t v12 = dispatch_time(0LL, 13000000000LL);
    dispatch_source_set_timer((dispatch_source_t)v11, v12, 0x306DC4200uLL, 0xB2D05E00uLL);
    dispatch_activate((dispatch_object_t)self->_pollTimer);
  }

  int64_t v14 = socket(a3, 2, 17);
  if (v14 < 0 && (!*__error() || *__error()))
  {
    unsigned int v24 = self->_ucat;
    if (v24->var0 > 90) {
      return;
    }
    if (v24->var0 == -1)
    {
      unsigned int v24 = self->_ucat;
    }

    LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket create failed (%s): %#m\n",  v15,  v16,  v17,  v18,  (char)v9);
    return;
  }

  if (SocketSetNonBlocking(v14, 1))
  {
    CFStringRef v23 = self->_ucat;
    if (v23->var0 <= 90)
    {
      if (v23->var0 != -1)
      {
LABEL_18:
        LogPrintF( (uint64_t)v23,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket NonBlock failed (%s): %#m\n",  v19,  v20,  v21,  v22,  (char)v9);
        goto LABEL_23;
      }

      if (_LogCategory_Initialize((uint64_t)v23, 0x5Au))
      {
        CFStringRef v23 = self->_ucat;
        goto LABEL_18;
      }
    }
  }

  -[NSMutableDictionary removeObjectForKey:](self->_powerSources, "removeObjectForKey:", v6);
  if ([v15 isAggregateComponent])
  {
    -[CUPowerSourceMonitor _aggregatePowerSourceLost:](self, "_aggregatePowerSourceLost:", v15);
  }

  else
  {
    powerSourceLostHandler = (void (**)(id, id))self->_powerSourceLostHandler;
    if (powerSourceLostHandler) {
      powerSourceLostHandler[2](powerSourceLostHandler, v15);
    }
  }
}

  size_t v17 = CFDictionaryGetInt64(v5, @"SharedSource", 0LL) != 0;
  if (self->_adapterSharedSource != v17)
  {
    self->_adapterSharedSource = v17;
    int v7 = 256;
  }

  unsigned int v18 = CFDictionaryGetInt64Ranged(v5, @"Source", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
  if (v18 != self->_adapterSourceID)
  {
    self->_adapterSourceID = v18;
    int v7 = 256;
  }

  int64_t v19 = CFDictionaryGetInt64Ranged(v5, @"ErrorFlags", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
  if (v19 != self->_adapterErrorFlags)
  {
    self->_adapterErrorFlags = v19;
    v7 |= 0x100u;
  }

  return v7;
}

    runLoop = v2->_runLoop;
    uint64_t v12 = (const void *)*MEMORY[0x1896051B0];
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __38__CURunLoopThread__scheduleStopThread__block_invoke;
    block[3] = &unk_189F34238;
    void block[4] = v2;
    CFRunLoopPerformBlock(runLoop, v12, block);
    CFRunLoopWakeUp(v2->_runLoop);
  }

  objc_sync_exit(v2);

  return v9;
}
}

  int64_t v19 = v50;
  int v20 = MEMORY[0x1895F87A8];
  if ((v50 & 0x80000000) == 0)
  {
    if ((self->_flags & 1) != 0) {
      SocketSetP2P(v50, 1);
    }
    CFMutableArrayRef v21 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B60],  v19,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
    if (!v21)
    {
LABEL_52:
      int64_t v14 = 4294960596LL;
      goto LABEL_53;
    }

    listenerSourceV4 = self->_listenerSourceV4;
    self->_listenerSourceV4 = v21;
    CFStringRef v23 = v21;

    handler[0] = v20;
    handler[1] = 3221225472LL;
    handler[2] = __44__CUTCPServer_activateDirectAndReturnError___block_invoke;
    handler[3] = &unk_189F32F60;
    handler[4] = self;
    uint64_t v48 = v19;
    dispatch_source_set_event_handler(v23, handler);
    v45[0] = v20;
    v45[1] = 3221225472LL;
    v45[2] = __44__CUTCPServer_activateDirectAndReturnError___block_invoke_2;
    v45[3] = &unk_189F32F60;
    int v46 = v19;
    v45[4] = self;
    dispatch_source_set_cancel_handler(v23, v45);
    dispatch_activate(v23);
    uint64_t v50 = -1;
  }

  unsigned int v24 = v49;
  if (v49 < 0) {
    goto LABEL_22;
  }
  if ((self->_flags & 1) != 0) {
    SocketSetP2P(v49, 1);
  }
  uint64_t v25 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B60],  v24,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  if (!v25) {
    goto LABEL_52;
  }
  listenerSourceV6 = self->_listenerSourceV6;
  self->_listenerSourceV6 = v25;
  int v27 = v25;

  v43[0] = v20;
  v43[1] = 3221225472LL;
  v43[2] = __44__CUTCPServer_activateDirectAndReturnError___block_invoke_3;
  v43[3] = &unk_189F32F60;
  v43[4] = self;
  int v44 = v24;
  dispatch_source_set_event_handler(v27, v43);
  v41[0] = v20;
  v41[1] = 3221225472LL;
  v41[2] = __44__CUTCPServer_activateDirectAndReturnError___block_invoke_4;
  v41[3] = &unk_189F32F60;
  uint64_t v42 = v24;
  v41[4] = self;
  dispatch_source_set_cancel_handler(v27, v41);
  dispatch_activate(v27);
  unsigned __int8 v49 = -1;

LABEL_22:
  uint64_t v28 = self->_ucat;
  if (v28->var0 <= 30)
  {
    if (v28->var0 == -1)
    {
      uint64_t v28 = self->_ucat;
    }

    LogPrintF( (uint64_t)v28,  (uint64_t)"-[CUTCPServer activateDirectAndReturnError:]",  0x1Eu,  (uint64_t)"Activated on port %d\n",  v15,  v16,  v17,  v18,  self->_tcpListeningPort);
  }

    -[SiriTTSDaemonSession cancelWithRequest:](self->_speechSynthesizer, "cancelWithRequest:", v8);
    goto LABEL_13;
  }

  CFTypeID v9 = self->_ucat;
  if (v9->var0 <= 30)
  {
    if (v9->var0 == -1)
    {
      CFTypeID v9 = self->_ucat;
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"-[CUVoiceSession _invalidate]",  0x1Eu,  (uint64_t)"Waiting until current request finishes before invalidating\n",  v4,  v5,  v6,  v7,  v13);
  }

  self->_joinSoftAPState = 3;
  CFIndex v30 = @"eo";
  size_t v17 = (void *)MEMORY[0x189607870];
  unsigned int v18 = *MEMORY[0x189607670];
  int64_t v19 = v15;
  uint64_t v28 = *MEMORY[0x1896075E0];
  int v20 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v15, 0, 0));
  CFMutableArrayRef v21 = (void *)v20;
  unsigned int v22 = @"?";
  if (v20) {
    unsigned int v22 = (const __CFString *)v20;
  }
  int64_t v29 = v22;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
  CFStringRef v23 = (void *)objc_claimAutoreleasedReturnValue();
  [v17 errorWithDomain:v18 code:v19 userInfo:v23];
  unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = v24;
  [MEMORY[0x189603F68] dictionaryWithObjects:v31 forKeys:&v30 count:1];
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v25);

LABEL_3:
}

  self->_restoreOriginalWiFiState = 3;
  uint64_t v31 = @"eo";
  unsigned int v18 = (void *)MEMORY[0x189607870];
  int64_t v19 = *MEMORY[0x189607670];
  int v20 = v16;
  int64_t v29 = *MEMORY[0x1896075E0];
  CFMutableArrayRef v21 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v16, 0, 0));
  unsigned int v22 = (void *)v21;
  CFStringRef v23 = @"?";
  if (v21) {
    CFStringRef v23 = (const __CFString *)v21;
  }
  CFIndex v30 = v23;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue();
  [v18 errorWithDomain:v19 code:v20 userInfo:v24];
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = v25;
  [MEMORY[0x189603F68] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  int v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v26);

LABEL_3:
}

    int v8 = 0LL;
    goto LABEL_13;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (a5)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      int v8 = 0LL;
      *a5 = v10;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  free(a3);
  int v8 = v7;
LABEL_13:

  return v8;
}

    int v8 = 0LL;
    goto LABEL_13;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (a5)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      int v8 = 0LL;
      *a5 = v10;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  free(a3);
  int v8 = v7;
LABEL_13:

  return v8;
}

    int v8 = 0LL;
    goto LABEL_13;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (a5)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      int v8 = 0LL;
      *a5 = v10;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  free(a3);
  int v8 = v7;
LABEL_13:

  return v8;
}

    if (*(_BYTE *)(a1 + 208))
    {
      *(_BYTE *)(a1 + 208) = 0;
      size_t v4 = (dispatch_object_t *)(a1 + 200);
      goto LABEL_14;
    }

    return 35LL;
  }

  if ((_DWORD)a2 == -6766)
  {
    if (*(_BYTE *)(a1 + 192))
    {
      *(_BYTE *)(a1 + 192) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    }

    goto LABEL_12;
  }

  if ((_DWORD)a2 == 35)
  {
    if (a3) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }

  return a2;
}

    if (*(_BYTE *)(a1 + 224))
    {
      *(_BYTE *)(a1 + 224) = 0;
      size_t v4 = (dispatch_object_t *)(a1 + 216);
      goto LABEL_14;
    }

    return 35LL;
  }

  if ((_DWORD)a2 == -6766)
  {
    if (*(_BYTE *)(a1 + 208))
    {
      *(_BYTE *)(a1 + 208) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 200));
    }

    goto LABEL_12;
  }

  if ((_DWORD)a2 == 35)
  {
    if (a3) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }

  return a2;
}

  int64_t v14 = v7;
LABEL_13:
  if (v18) {
    free(v18);
  }
  if (v16) {
    free(v16);
  }
  if (v14) {
    *(_DWORD *)(a3 + 16) = v14;
  }
}

      if (a1 != (__int128 *)a2)
      {
        uint64_t v3 = 0LL;
        size_t v4 = *a1;
        uint64_t v10 = *((void *)a1 + 2);
        *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 6);
        *(void *)(a2 + 16) = v10;
        goto LABEL_14;
      }

      return 0LL;
    }

    if (*((_DWORD *)a1 + 3)) {
      goto LABEL_12;
    }
    uint64_t v12 = *((_DWORD *)a1 + 4);
    if (v12)
    {
      if (v12 != -65536) {
        goto LABEL_12;
      }
      int v13 = *((_DWORD *)a1 + 5);
    }

    else
    {
      int v13 = *((_DWORD *)a1 + 5);
      if ((v13 | 0x1000000) == 0x1000000) {
        goto LABEL_12;
      }
    }

    uint64_t v3 = 0LL;
    int64_t v14 = *((_WORD *)a1 + 1);
    *(void *)(a2 + 8) = 0LL;
    *(_WORD *)a2 = 528;
    *(_WORD *)(a2 + 2) = v14;
    *(_DWORD *)(a2 + 4) = v13;
    return v3;
  }

  if (v2 == 2)
  {
    if (a1 != (__int128 *)a2)
    {
      uint64_t v3 = 0LL;
      size_t v4 = *a1;
LABEL_14:
      *(_OWORD *)a2 = v4;
      return v3;
    }

    return 0LL;
  }

  return 4294960561LL;
}

  __s = v14;
  v183 = a4;
  v185 = (char *)a6;
  *(void *)v199 = 0LL;
  v195 = v198;
  v196 = xmmword_186B49CC0;
  v197 = 0LL;
  int64_t v19 = TLV8GetOrCopyCoalesced( a2,  &a2[a3],  12,  (unsigned __int8 **)&__src,  (size_t *)&bytes,  (unsigned __int8 **)v199,  0LL);
  unsigned int v24 = v19;
  unsigned int v18 = v19;
  if ((_DWORD)v19 == -6727) {
    unsigned int v18 = TLV8GetOrCopyCoalesced( a2,  &a2[a3],  13,  (unsigned __int8 **)&__src,  (size_t *)&bytes,  (unsigned __int8 **)v199,  0LL);
  }
  v184 = (void *)a5;
  if ((_DWORD)v18)
  {
    v182 = a3;
    if ((_DWORD)v18 == -6727)
    {
      CFIndex v30 = 0LL;
      uint64_t v31 = 0LL;
      unsigned int v18 = 0LL;
      goto LABEL_43;
    }

  switch(v14)
  {
    case 1:
      if (a3) {
        goto LABEL_363;
      }
      appended = TLV8BufferAppendUInt64((uint64_t)&__src, 0, *(_DWORD *)(a1 + 100) & 1LL);
      if (appended) {
        goto LABEL_52;
      }
      appended = TLV8BufferAppend((uint64_t)&__src, 6, v15, 1uLL);
      if (appended) {
        goto LABEL_52;
      }
      CFMutableArrayRef v21 = *(_DWORD *)(a1 + 100);
      if ((v21 & 0x5770FF34) != 0 && (v21 & 0x7770FF10) != 0)
      {
        appended = TLV8BufferAppendUInt64((uint64_t)&__src, 19, v21 & 0x7770FF10);
        if (appended) {
          goto LABEL_52;
        }
      }

      unsigned int v22 = v190;
      CFStringRef v23 = (UInt8 *)v191;
      if (!v191)
      {
        else {
          unsigned int v24 = v190;
        }
        uint64_t v25 = (UInt8 *)malloc(v24);
        CFStringRef v23 = v25;
        if (!v25) {
          goto LABEL_371;
        }
        if (v22) {
          memcpy(v25, __src, v22);
        }
      }

      __src = v192;
      *(void *)&v190 = 0LL;
      v191 = 0LL;
      *a4 = v23;
      *CFTypeID v9 = v22;
      appended = 0;
      *(_BYTE *)(a1 + 120) = 2;
      int v26 = *(int **)(a1 + 16);
      int v27 = *v26;
      if (*v26 > 30) {
        goto LABEL_299;
      }
      if (v27 == -1)
      {
        if (!_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu)) {
          goto LABEL_299;
        }
        int v26 = *(int **)(a1 + 16);
        int v27 = *v26;
      }

      uint64_t v28 = v27 > 10 || v27 == -1 && !_LogCategory_Initialize((uint64_t)v26, 0xAu);
      LogPrintF( (uint64_t)v26,  (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup client M1 -- start request\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  (uint64_t)a7,  a8,  v28);
      goto LABEL_299;
    case 2:
      uint64_t v36 = *(int **)(a1 + 16);
      int v37 = *v36;
      if (*v36 > 30) {
        goto LABEL_91;
      }
      if (v37 != -1) {
        goto LABEL_55;
      }
      if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
      {
        uint64_t v36 = *(int **)(a1 + 16);
        int v37 = *v36;
LABEL_55:
        unsigned int v38 = v37 <= 10 && (v37 != -1 || _LogCategory_Initialize((uint64_t)v36, 0xAu));
        LogPrintF( (uint64_t)v36,  (uint64_t)"OSStatus _SetupClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup client M2 -- start response\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  (uint64_t)a7,  a8,  !v38);
      }

  if (v14 == 2)
  {
    int v26 = *(int **)(a1 + 16);
    int v27 = *v26;
    if (*v26 <= 30)
    {
      if (v27 == -1)
      {
        if (!_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu)) {
          goto LABEL_44;
        }
        int v26 = *(int **)(a1 + 16);
        int v27 = *v26;
      }

      uint64_t v28 = v27 > 10 || v27 == -1 && !_LogCategory_Initialize((uint64_t)v26, 0xAu);
      LogPrintF( (uint64_t)v26,  (uint64_t)"OSStatus _ResumePairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-resume client M2 -- resume response\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  (uint64_t)a6,  a7,  a8,  v28);
    }

  pthread_mutex_unlock(&gPairingGlobalLock);
  return v13;
}

    free(v4);
    goto LABEL_13;
  }

  return result;
}

uint64_t CFStringGetOrCopyCStringUTF8(const __CFString *a1, const char **a2, UInt8 **a3, size_t *a4)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    CFTypeID v9 = CStringPtr;
    if (!a4)
    {
      unint64_t v11 = 0LL;
      goto LABEL_9;
    }

    size_t v10 = strlen(CStringPtr);
    unint64_t v11 = 0LL;
    goto LABEL_7;
  }

  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = MaximumSizeForEncoding;
  int64_t v14 = (UInt8 *)malloc(MaximumSizeForEncoding + 1);
  if (!v14) {
    return 4294960568LL;
  }
  unint64_t v11 = v14;
  v17.location = 0LL;
  v17.length = Length;
  if (CFStringGetBytes(a1, v17, 0x8000100u, 0, 0, v14, MaximumSizeForEncoding, &usedBufLen) != Length)
  {
    free(v11);
    return 4294960596LL;
  }

  size_t v10 = usedBufLen;
  v11[usedBufLen] = 0;
  CFTypeID v9 = (const char *)v11;
  if (a4) {
LABEL_7:
  }
    *a4 = v10;
LABEL_9:
  uint64_t result = 0LL;
  *a2 = v9;
  *a3 = v11;
  return result;
}

uint64_t CFObjectControlAsync( const void *a1, dispatch_queue_s *a2, uint64_t a3, int a4, const void *a5, const void *a6, const void *a7, dispatch_object_s *a8, uint64_t a9, uint64_t a10)
{
  unsigned int v18 = malloc(0x58uLL);
  if (!v18) {
    return 4294960568LL;
  }
  int64_t v19 = v18;
  CFRetain(a1);
  *int64_t v19 = a1;
  v19[1] = a3;
  *((_DWORD *)v19 + 4) = a4;
  CFRetain(a5);
  v19[3] = a5;
  if (a6) {
    CFRetain(a6);
  }
  v19[4] = a6;
  if (a7) {
    CFRetain(a7);
  }
  v19[5] = a7;
  v19[7] = 0LL;
  if (a8) {
    dispatch_retain(a8);
  }
  v19[8] = a8;
  v19[9] = a9;
  v19[10] = a10;
  dispatch_async_f(a2, v19, (dispatch_function_t)_CFObjectControlAsync);
  return 0LL;
}

void _CFObjectControlAsync(uint64_t a1)
{
  CFNumberType v2 = (CFTypeRef *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(void, void, void, void, void, uint64_t))(a1 + 8))( *(void *)a1,  *(unsigned int *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a1 + 56);
  CFRelease(*(CFTypeRef *)a1);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  size_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  CFMutableDataRef v5 = *(void (**)(void, void, void))(a1 + 72);
  if (v5)
  {
    uint64_t v6 = *(dispatch_queue_s **)(a1 + 64);
    if (v6)
    {
      dispatch_async_f(v6, (void *)a1, (dispatch_function_t)_CFObjectControlResponse);
      return;
    }

    v5(*(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 80));
  }

  if (*v2) {
    CFRelease(*v2);
  }
  int v7 = *(dispatch_object_s **)(a1 + 64);
  if (v7) {
    dispatch_release(v7);
  }
  free((void *)a1);
}

void _CFObjectControlResponse(uint64_t a1)
{
  CFNumberType v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
  free((void *)a1);
}

uint64_t CFObjectControlAsyncF( const void *a1, dispatch_queue_s *a2, uint64_t a3, int a4, const void *a5, const void *a6, dispatch_object_s *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  CFTypeRef cf = 0LL;
  uint64_t v18 = CFPropertyListBuildFormatted(0LL, 0LL, &cf, a10, (uint64_t)va, (uint64_t)a6, (uint64_t)a7, a8);
  if (!(_DWORD)v18)
  {
    uint64_t v18 = CFObjectControlAsync(a1, a2, a3, a4, a5, a6, cf, a7, a8, a9);
    if (cf) {
      CFRelease(cf);
    }
  }

  return v18;
}

uint64_t CFObjectControlSync( uint64_t a1, dispatch_queue_t queue, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a4 & 1) != 0) {
    return a3(a1, a4, a5, a6, a7, a8);
  }
  v9[0] = a1;
  v9[1] = a3;
  int v10 = a4;
  uint64_t v11 = a5;
  uint64_t v12 = a6;
  uint64_t v13 = a7;
  uint64_t v14 = a8;
  unsigned int v15 = -6700;
  dispatch_sync_f(queue, v9, (dispatch_function_t)_CFObjectControlSync);
  return v15;
}

uint64_t _CFObjectControlSync(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void))(a1 + 8))( *(void *)a1,  *(unsigned int *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  *(_DWORD *)(a1 + 56) = result;
  return result;
}

uint64_t CFObjectControlSyncF( uint64_t a1, dispatch_queue_s *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef cf = 0LL;
  uint64_t v16 = CFPropertyListBuildFormatted(0LL, 0LL, &cf, a8, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v16)
  {
    uint64_t v16 = CFObjectControlSync(a1, a2, a3, a4, a5, a6, (uint64_t)cf, a7);
    CFRelease(cf);
  }

  return v16;
}

uint64_t CFObjectCopyProperty( uint64_t a1, dispatch_queue_t queue, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a4 & 1) != 0) {
    return a3(a1, a4, a5, a6, a7);
  }
  context[0] = a1;
  context[1] = a3;
  int v9 = a4;
  uint64_t v10 = a5;
  uint64_t v11 = a6;
  uint64_t v12 = 0LL;
  uint64_t v13 = a7;
  dispatch_sync_f(queue, context, (dispatch_function_t)_CFObjectCopyProperty);
  return v12;
}

uint64_t _CFObjectCopyProperty(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(a1 + 8))( *(void *)a1,  *(unsigned int *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 48));
  *(void *)(a1 + 40) = result;
  return result;
}

CFStringRef CFObjectGetPropertyCStringSync( uint64_t a1, dispatch_queue_s *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, char *a7, size_t a8, uint64_t a9)
{
  uint64_t result = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, a9);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = CFGetCString(result, a7, a8);
    CFRelease(v12);
    return (const __CFString *)v13;
  }

  return result;
}

const char *CFGetCString(const __CFString *cf, char *a2, size_t a3)
{
  if (!a3) {
    return "";
  }
  if (!cf)
  {
LABEL_29:
    *a2 = 0;
    return a2;
  }

  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    *a2 = 0;
    CFStringGetCString(cf, a2, a3, 0x8000100u);
    return a2;
  }

  if (v6 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      uint64_t valuePtr = 0LL;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
      snprintf(a2, a3, "%f");
    }

    else
    {
      uint64_t v28 = 0LL;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &v28);
      SNPrintF((uint64_t)a2, a3, "%lld", v16, v17, v18, v19, v20, v28);
    }

    return a2;
  }

  if ((const __CFString *)*MEMORY[0x189604DE8] == cf)
  {
    CFMutableArrayRef v21 = "true";
LABEL_22:
    strlcpy(a2, v21, a3);
    return a2;
  }

  if ((const __CFString *)*MEMORY[0x189604DE0] == cf)
  {
    CFMutableArrayRef v21 = "false";
    goto LABEL_22;
  }

  if (v6 != CFDataGetTypeID())
  {
    if (v6 == CFDateGetTypeID())
    {
      CFDateGetComponents((uint64_t)cf, &valuePtr, &v28, &v27, &v26, &v25, &v24, &v23);
      snprintf(a2, a3, "%04d-%02d-%02d %02d:%02d:%02d.%06d %s", valuePtr, v28);
      return a2;
    }

    if (v6 == CFDictionaryGetTypeID())
    {
      snprintf(a2, a3, "{}");
      return a2;
    }

    if (v6 == CFArrayGetTypeID())
    {
      snprintf(a2, a3, "[]");
      return a2;
    }

    goto LABEL_29;
  }

  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex Length = CFDataGetLength((CFDataRef)cf);
  int v9 = a2;
  if (Length >= 1)
  {
    int v9 = a2;
    if ((uint64_t)(a3 - 1) >= 2)
    {
      uint64_t v10 = a3 - 3;
      uint64_t v11 = BytePtr + 1;
      uint64_t v12 = a2;
      do
      {
        unint64_t v13 = *(v11 - 1);
        *uint64_t v12 = a0123456789abcd[v13 >> 4];
        char v14 = a0123456789abcd[v13 & 0xF];
        int v9 = v12 + 2;
        v12[1] = v14;
        if (v11 >= &BytePtr[Length]) {
          break;
        }
        ++v11;
        v12 += 2;
        BOOL v15 = v10 <= 1;
        v10 -= 2LL;
      }

      while (!v15);
    }
  }

  *int v9 = 0;
  return a2;
}

uint64_t CFDateGetComponents( uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  CFCalendarRef v16 = CFCalendarCopyCurrent();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = CFTimeZoneCreateWithName(0LL, @"GMT", 0);
    if (v18)
    {
      uint64_t v19 = v18;
      CFCalendarSetTimeZone(v17, v18);
      CFRelease(v19);
      double v20 = MEMORY[0x186E41D84](a1);
      if (CFCalendarDecomposeAbsoluteTime(v17, v20, "yMdHms", a2, a3, a4, a5, a6, a7))
      {
        if (a8) {
          *a8 = (int)(modf(v20, &v22) * 1000000.0);
        }
        CFRelease(v17);
        return 0LL;
      }
    }

    CFRelease(v17);
  }

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  if (a8) {
    *a8 = 0;
  }
  return 4294960596LL;
}

void CFObjectGetPropertyDoubleSync( uint64_t a1, dispatch_queue_s *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  int v8 = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (v8)
  {
    int v9 = v8;
    CFGetDouble(v8, a7);
    CFRelease(v9);
  }

double CFGetDouble(const __CFString *a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  double valuePtr = 0.0;
  if (!a1)
  {
    int v12 = -6705;
LABEL_31:
    int v14 = v12;
    goto LABEL_24;
  }

  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
    goto LABEL_23;
  }

  if (v4 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, buffer, 128LL, 0x600u))
    {
      if (!strnicmpx((unsigned __int8 *)buffer, -1LL, "true")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "yes")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "y")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "on")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "1"))
      {
        double valuePtr = 1.0;
        goto LABEL_23;
      }

      if (!strnicmpx((unsigned __int8 *)buffer, -1LL, "false")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "no")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "n")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "off")
        || !strnicmpx((unsigned __int8 *)buffer, -1LL, "0"))
      {
        double valuePtr = 0.0;
        goto LABEL_23;
      }

      if (sscanf(buffer, "%lf", &valuePtr) == 1)
      {
LABEL_23:
        int v14 = 0;
        goto LABEL_24;
      }

      if (SNScanF(buffer, 0xFFFFFFFFFFFFFFFFLL, "%lli", v5, v6, v7, v8, v9, (int)&v13) == 1)
      {
        double v10 = (double)v13;
LABEL_21:
        double valuePtr = v10;
        goto LABEL_23;
      }

      int v12 = -6717;
    }

    else
    {
      int v12 = -6743;
    }

    goto LABEL_31;
  }

  if (v4 == CFDateGetTypeID())
  {
    double v10 = MEMORY[0x186E41D84](a1);
    goto LABEL_21;
  }

  double valuePtr = (double)(uint64_t)CFGetInt64(a1, &v14);
LABEL_24:
  if (a2) {
    *a2 = v14;
  }
  return valuePtr;
}

CFStringRef CFObjectGetPropertyInt64Sync( uint64_t a1, dispatch_queue_s *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t result = (const __CFString *)CFObjectCopyProperty(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
  if (result)
  {
    uint64_t v9 = result;
    unint64_t v10 = CFGetInt64(result, a7);
    CFRelease(v9);
    return (const __CFString *)v10;
  }

  return result;
}

uint64_t CFObjectSetProperty( const void *a1, dispatch_queue_t queue, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, const void *a7)
{
  int v10 = a4;
  if ((a4 & 1) != 0) {
    return a3(a1, a4, a5, a6, a7);
  }
  if ((a4 & 8) != 0)
  {
    int v14 = malloc(0x38uLL);
    if (v14)
    {
      BOOL v15 = v14;
      CFRetain(a1);
      *BOOL v15 = a1;
      v15[1] = a3;
      *((_DWORD *)v15 + 4) = v10;
      CFRetain(a5);
      v15[3] = a5;
      if (a6) {
        CFRetain(a6);
      }
      v15[4] = a6;
      if (a7) {
        CFRetain(a7);
      }
      v15[5] = a7;
      dispatch_async_f(queue, v15, (dispatch_function_t)_CFObjectSetProperty);
      return 0LL;
    }

    else
    {
      return 4294960568LL;
    }
  }

  else
  {
    context[0] = a1;
    context[1] = a3;
    int v18 = a4;
    uint64_t v19 = a5;
    double v20 = a6;
    CFMutableArrayRef v21 = a7;
    unsigned int v22 = -6700;
    dispatch_sync_f(queue, context, (dispatch_function_t)_CFObjectSetProperty);
    return v22;
  }

void _CFObjectSetProperty(uint64_t a1)
{
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(void, void, void, void, void))(a1 + 8))( *(void *)a1,  *(unsigned int *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 16) & 8) != 0)
  {
    CFRelease(*(CFTypeRef *)a1);
    CFRelease(*(CFTypeRef *)(a1 + 24));
    CFNumberType v2 = *(const void **)(a1 + 32);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = *(const void **)(a1 + 40);
    if (v3) {
      CFRelease(v3);
    }
    free((void *)a1);
  }

uint64_t CFObjectSetPropertyF( const void *a1, dispatch_queue_s *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef cf = 0LL;
  uint64_t v15 = CFPropertyListBuildFormatted(0LL, 0LL, &cf, a7, (uint64_t)&a9, (uint64_t)a6, a7, a8);
  if (!(_DWORD)v15)
  {
    uint64_t v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, cf);
    if (cf) {
      CFRelease(cf);
    }
  }

  return v15;
}

uint64_t CFObjectSetPropertyCString( const void *a1, dispatch_queue_s *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, char *cStr, CFIndex numBytes)
{
  if (numBytes == -1) {
    CFStringRef v14 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  }
  else {
    CFStringRef v14 = CFStringCreateWithBytes(0LL, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  }
  CFStringRef v15 = v14;
  if (!v14) {
    return 4294960596LL;
  }
  uint64_t v16 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v14);
  CFRelease(v15);
  return v16;
}

uint64_t CFObjectSetPropertyData( const void *a1, dispatch_queue_s *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, UInt8 *bytes, CFIndex length)
{
  CFDataRef v14 = CFDataCreate(0LL, bytes, length);
  if (!v14) {
    return 4294960596LL;
  }
  CFDataRef v15 = v14;
  uint64_t v16 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v14);
  CFRelease(v15);
  return v16;
}

uint64_t CFObjectSetPropertyDouble( const void *a1, dispatch_queue_s *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, double a7)
{
  double valuePtr = a7;
  CFNumberRef v13 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  if (!v13) {
    return 4294960568LL;
  }
  CFNumberRef v14 = v13;
  uint64_t v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, v13);
  CFRelease(v14);
  return v15;
}

uint64_t CFObjectSetPropertyInt64( const void *a1, dispatch_queue_s *a2, uint64_t (*a3)(const void *, uint64_t, const void *, const void *, const void *), uint64_t a4, const void *a5, const void *a6, uint64_t a7)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a7);
  if (!Int64) {
    return 4294960568LL;
  }
  CFNumberRef v14 = Int64;
  uint64_t v15 = CFObjectSetProperty(a1, a2, a3, a4, a5, a6, Int64);
  CFRelease(v14);
  return v15;
}

const void *CFObjectCopyTypedValue( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7 = (const void *)a2(a1, a3, &v10);
  uint64_t v8 = v7;
  if (a4 && !v10 && CFGetTypeID(v7) != a4)
  {
    CFRelease(v8);
    uint64_t v8 = 0LL;
    int v10 = -6756;
  }

  if (a5) {
    *a5 = v10;
  }
  return v8;
}

uint64_t CFObjectSetValue( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  return a2(a1, a3, a4);
}

void *CFObjectCopyBytes( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, size_t *a4, int *a5)
{
  uint64_t v7 = (const __CFData *)a2(a1, a3, &v11);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = CFCopyData(v7, a4, &v11);
    CFRelease(v8);
    if (a5) {
LABEL_3:
    }
      *a5 = v11;
  }

  else
  {
    if (a4) {
      *a4 = 0LL;
    }
    uint64_t v9 = 0LL;
    int v11 = -6727;
    if (a5) {
      goto LABEL_3;
    }
  }

  return v9;
}

void *CFCopyData(const __CFData *a1, size_t *a2, _DWORD *a3)
{
  uint64_t v5 = a1;
  size_t v19 = 0LL;
  double v20 = 0LL;
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr(v5);
    size_t Length = CFDataGetLength(v5);
    uint64_t v5 = (const __CFData *)Length;
    size_t v19 = Length;
    if (Length <= 1) {
      size_t Length = 1LL;
    }
    uint64_t v9 = malloc(Length);
    double v20 = v9;
    if (v9)
    {
      if (v5)
      {
        memcpy(v9, BytePtr, (size_t)v5);
        goto LABEL_7;
      }

LABEL_33:
    LODWORD(v5) = -6728;
    if (a2) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    size_t v19 = 16LL;
    int v11 = malloc(0x10uLL);
    double v20 = v11;
    if (v11)
    {
      -[__CFData getUUIDBytes:](v5, "getUUIDBytes:", v11);
LABEL_7:
      LODWORD(v5) = 0;
      if (!a2) {
        goto LABEL_30;
      }
LABEL_29:
      *a2 = v19;
      goto LABEL_30;
    }

    goto LABEL_33;
  }

  if (v6 != CFUUIDGetTypeID())
  {
    LODWORD(v5) = -6735;
    goto LABEL_28;
  }

  size_t v19 = 16LL;
  int v12 = (CFUUIDBytes *)malloc(0x10uLL);
  double v20 = v12;
  if (!v12) {
    goto LABEL_33;
  }
  CFNumberRef v13 = v12;
  CFUUIDBytes v14 = CFUUIDGetUUIDBytes(v5);
  LODWORD(v5) = 0;
  *CFNumberRef v13 = v14;
  if (a2) {
    goto LABEL_29;
  }
LABEL_30:
  if (a3) {
    *a3 = (_DWORD)v5;
  }
  return v20;
}

  if (*(void *)(v4 + 96)) {
    return (const char **)fprintf(*v7, "%s\n");
  }
  return result;
}

  v111 = 0;
  ((void (*)(uint64_t, uint64_t))softLinkBTDeviceGetDeviceType[0])((uint64_t)a4, (uint64_t)&v111);
  [v6 setDeviceType:v111];
  if (v111 == 17 || v111 == 22) {
    uint64_t v42 = 4;
  }
  else {
    uint64_t v42 = 0;
  }
  unsigned int v43 = *p_btAccessoryManager;
  if (*p_btAccessoryManager)
  {
    unsigned int v113 = 0;
    int v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])( v43,  (uint64_t)a4,  1LL,  (uint64_t)&v113);
    if (v44)
    {
      unsigned __int8 v49 = v44;
      uint64_t v50 = self->_ucat;
      if (v50->var0 > 60) {
        goto LABEL_47;
      }
      if (v50->var0 != -1) {
        goto LABEL_43;
      }
      if (_LogCategory_Initialize((uint64_t)v50, 0x3Cu))
      {
        uint64_t v50 = self->_ucat;
LABEL_43:
        LogPrintF( (uint64_t)v50,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetFeatureCapability in-ear detect failed: %#m\n",  v45,  v46,  v47,  v48,  v49 - 16);
      }
    }

    else if (v113)
    {
      v42 |= 0x80u;
    }
  }

        unsigned int v43 = v35;
        selfAccessoryMediaSystemName = self->_selfAccessoryMediaSystemName;
        self->_selfAccessoryMediaSystemName = v43;
        int v10 = 1;
        goto LABEL_34;
      }

      int v11 = v9;
      if ((v8 == 0LL) != (v9 != 0LL))
      {
        int v12 = [v8 isEqual:v9];

        if ((v12 & 1) != 0)
        {
          int v10 = 0;
          goto LABEL_23;
        }
      }

      else
      {
      }

      int v24 = self->_ucat;
      if (v24->var0 <= 30)
      {
        if (v24->var0 == -1)
        {
          int v24 = self->_ucat;
        }

        [v3 name];
        char v80 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaSystem]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystem ID updated: %@ '%@'\n",  v25,  v26,  v27,  v28,  (char)v8);
      }

        goto LABEL_34;
      }

      uint64_t v28 = 4294960596LL;
    }

    else
    {
      uint64_t v28 = 4294960591LL;
    }

    NSErrorWithOSStatusF((const char *)v28);
    int v33 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v34 = self->_ucat;
    if (v34->var0 <= 90)
    {
      if (v34->var0 == -1)
      {
        uint64_t v34 = self->_ucat;
      }

      LogPrintF( (uint64_t)v34,  (uint64_t)"-[CUNANDataSession _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v29,  v30,  v31,  v32,  (char)v33);
    }

  if (aBlock)
  {
    int v23 = (void (*)(void))aBlock[2];
    goto LABEL_35;
  }

    int v33 = v11;
    goto LABEL_34;
  }

  if (gLogCategory_CUPairingManager <= 30
    && (gLogCategory_CUPairingManager != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingManager, 0x1Eu)))
  {
    NSPrintF();
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)&gLogCategory_CUPairingManager,  (uint64_t)"+[CUPairingManager copySystemPairingIdentifierAndReturnError:]",  0x1Eu,  (uint64_t)"CopySystemPairingIdentifier: direct failed (error=%@), trying XPC",  v17,  v18,  v19,  v20,  (char)v16);
  }

  int v37 = 0LL;
  PairingSessionCreate((uint64_t *)&v37, 0LL, 0);
  CFMutableArrayRef v21 = v37;
  if (v37)
  {
    v37[25] = 12;
    uint64_t v36 = 0LL;
    unsigned int v38 = PairingSessionCopyIdentity((uint64_t)v21, 1LL, (char **)&v36, 0LL, 0LL);
    if (v36)
    {
      unsigned int v22 = objc_alloc(NSString);
      int v11 = (void *)[v22 initWithUTF8String:v36];
      free(v36);
      CFRelease(v21);
      if (v11)
      {
        if (gLogCategory_CUPairingManager <= 30
          && (gLogCategory_CUPairingManager != -1
           || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingManager, 0x1Eu)))
        {
          LogPrintF( (uint64_t)&gLogCategory_CUPairingManager,  (uint64_t)"+[CUPairingManager copySystemPairingIdentifierAndReturnError:]",  0x1Eu,  (uint64_t)"CopySystemPairingIdentifier: XPC: %@",  v23,  v24,  v25,  v26,  (char)v11);
        }

        goto LABEL_33;
      }
    }

    else
    {
      CFRelease(v21);
    }
  }

  if (gLogCategory_CUPairingManager <= 90
    && (gLogCategory_CUPairingManager != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingManager, 0x5Au)))
  {
    NSPrintF();
    int v27 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)&gLogCategory_CUPairingManager,  (uint64_t)"+[CUPairingManager copySystemPairingIdentifierAndReturnError:]",  0x5Au,  (uint64_t)"### CopySystemPairingIdentifier failed: error=%@",  v28,  v29,  v30,  v31,  (char)v27);
  }

  if (a3)
  {
    if (v38) {
      CFStringRef v32 = v38;
    }
    else {
      CFStringRef v32 = 4294960596LL;
    }
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)v32);
    int v33 = 0LL;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    int v33 = 0LL;
  }

      int64_t v18 = 0LL;
LABEL_21:

      return;
    }

    obja = (id)v7;
    -[NSMutableArray removeObjectAtIndex:](self->_readRequests, "removeObjectAtIndex:", 0LL);
    -[CUTCPConnection _prepareReadRequest:](self, "_prepareReadRequest:", obja);
    objc_storeStrong((id *)p_readRequestCurrent, obja);
    CFTypeID v6 = (uint64_t *)obja;
LABEL_5:
    obj = v6;
    CFDataRef Data = (const char *)SocketReadDataEx( self->_socketFD,  v6[1],  [v6 minLength],  objc_msgSend(v6, "maxLength"),  v6 + 3);
    rawIOLogLevel = self->_rawIOLogLevel;
    ucCFAbsoluteTime at = self->_ucat;
    if (ucat->var0 != -1) {
      goto LABEL_7;
    }
    if (_LogCategory_Initialize((uint64_t)self->_ucat, self->_rawIOLogLevel))
    {
      ucCFAbsoluteTime at = self->_ucat;
      rawIOLogLevel = self->_rawIOLogLevel;
LABEL_7:
      socketFD = self->_socketFD;
      [obj minLength];
      [obj maxLength];
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUTCPConnection _processReads:]",  rawIOLogLevel,  (uint64_t)"Read socket %d, %zu min, %zu max, %zu offset, %zu nread, %#m\n",  v12,  v13,  v14,  v15,  socketFD);
    }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x2000LL);
        if ((v16 & 0x8000) == 0)
        {
LABEL_21:
          if ((v16 & 0x200) == 0) {
            goto LABEL_22;
          }
          goto LABEL_35;
        }

    __debugbreak();
    JUMPOUT(0x186AE45D4LL);
  }

  if (gLogCategory_DebugServicesBreak <= 70)
  {
    if (gLogCategory_DebugServicesBreak != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesBreak, 0x46u), (_DWORD)result))
    {
      uint64_t result = DebugIsDebuggerPresent();
      if ((_DWORD)result)
      {
        uint64_t result = (uint64_t)getenv("USERBREAK");
        if (result)
        {
          if (*(_BYTE *)result == 49) {
            goto LABEL_33;
          }
        }
      }
    }
  }

  return result;
}

  *a3 = v9;
  return result;
}

    int v26 = 0;
    int v27 = 0;
    appended = 4294960587LL;
    goto LABEL_112;
  }

  size_t v19 = *(int **)(a1 + 16);
  double v20 = *v19;
  if (*v19 <= 30)
  {
    if (v20 != -1) {
      goto LABEL_17;
    }
    if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
    {
      size_t v19 = *(int **)(a1 + 16);
      double v20 = *v19;
LABEL_17:
      CFMutableArrayRef v21 = v20 > 10 || v20 == -1 && !_LogCategory_Initialize((uint64_t)v19, 0xAu);
      LogPrintF( (uint64_t)v19,  (uint64_t)"OSStatus _VerifyServerM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)",  0x1Eu,  (uint64_t)"Pair-verify server M1 -- start request\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  a7,  a8,  v21);
    }
  }

  if (TLV8GetBytes(a2, v12, 0, 1uLL, 1uLL, (char *)&cf, 0LL, 0LL))
  {
    LOBYTE(cf) = 2;
    goto LABEL_42;
  }

  int64_t v29 = (char)cf;
  if (cf != 2)
  {
    char v56 = *(int **)(a1 + 16);
    if (*v56 <= 50)
    {
      if (*v56 == -1)
      {
        char v56 = *(int **)(a1 + 16);
        int64_t v29 = (char)cf;
      }

      LogPrintF( (uint64_t)v56,  (uint64_t)"OSStatus _VerifyServerM1(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t **, size_t *)",  0x32u,  (uint64_t)"### Pair-verify server unsupported method: %u\n",  (uint64_t)a5,  a6,  a7,  a8,  v29);
    }

  CFRunLoopGetMain();
  WiFiManagerClientUnscheduleFromRunLoop();
  CFRelease(theDict);
}

const char *CFObjectGetBytes( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, const char *a4, unint64_t a5, void *a6, int *a7)
{
  int v11 = (__CFString *)a2(a1, a3, &v14);
  int v12 = v11;
  if (a7) {
    *a7 = v14;
  }
  if (v11)
  {
    a4 = CFGetData(v11, a4, a5, a6, a7);
    CFRelease(v12);
  }

  else if (a6)
  {
    *a6 = 0LL;
  }

  return a4;
}

const char *CFGetData(__CFString *a1, const char *a2, unint64_t a3, void *a4, int *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v20 = 0LL;
  if (a1)
  {
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      unint64_t Length = CFDataGetLength((CFDataRef)a1);
      unint64_t v20 = Length;
      if (a2)
      {
        size_t v13 = Length;
        if (Length > a3)
        {
          unint64_t v20 = a3;
          size_t v13 = a3;
        }

        if (!v13) {
          goto LABEL_9;
        }
        int v14 = (char *)a2;
        uint64_t v15 = (CFUUIDBytes *)BytePtr;
        goto LABEL_8;
      }

      int v16 = 0;
      a2 = (const char *)BytePtr;
    }

    else
    {
      if (v10 != CFStringGetTypeID())
      {
        if (v10 == CFNullGetTypeID())
        {
          int v16 = 0;
          unint64_t v20 = 0LL;
          a2 = "";
          goto LABEL_17;
        }

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[__CFString getUUIDBytes:](a1, "getUUIDBytes:", &v21);
        }

        else
        {
          if (v10 != CFUUIDGetTypeID())
          {
            int v16 = -6735;
            goto LABEL_17;
          }

          CFUUIDBytes v21 = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
        }

        unint64_t v20 = 16LL;
        if (!a2)
        {
          a2 = "";
          goto LABEL_9;
        }

        if (a3 > 0xF)
        {
          a3 = 16LL;
        }

        else
        {
          unint64_t v20 = a3;
          if (!a3) {
            goto LABEL_9;
          }
        }

        uint64_t v15 = &v21;
        int v14 = (char *)a2;
        size_t v13 = a3;
LABEL_8:
        memcpy(v14, v15, v13);
LABEL_9:
        int v16 = 0;
        goto LABEL_17;
      }

      int v16 = CFStringGetOrCopyCStringUTF8(a1, (const char **)&__s, (UInt8 **)&v18, (size_t *)&v21.byte0);
      if (!v16)
      {
        HexToData(__s, *(int64_t *)&v21.byte0, 22, (uint64_t)a2, a3, &v20, 0LL, 0LL);
        if (v18) {
          free(v18);
        }
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v16 = -6705;
  }

uint64_t CFObjectSetBytes( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFDataRef), uint64_t a3, UInt8 *bytes, CFIndex length)
{
  CFDataRef v8 = CFDataCreate(0LL, bytes, length);
  if (!v8) {
    return 4294960596LL;
  }
  CFDataRef v9 = v8;
  uint64_t v10 = a2(a1, a3, v8);
  CFRelease(v9);
  return v10;
}

char *CFObjectCopyCString( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, _DWORD *a4)
{
  uint64_t v5 = (const __CFString *)a2(a1, a3, &v9);
  if (!v5)
  {
    uint64_t v7 = 0LL;
    int v9 = -6727;
    if (!a4) {
      return v7;
    }
    goto LABEL_3;
  }

  CFTypeID v6 = v5;
  uint64_t v7 = CFCopyCString(v5, &v9);
  CFRelease(v6);
  if (a4) {
LABEL_3:
  }
    *a4 = v9;
  return v7;
}

char *CFCopyCString(const __CFString *a1, int *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v9 = 0LL;
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      int v5 = CFStringCopyUTF8CString(a1, &v9);
      if (v5) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }

    if (v4 == CFDataGetTypeID())
    {
      size_t v6 = (2 * CFDataGetLength((CFDataRef)a1)) | 1;
      uint64_t v7 = (char *)malloc(v6);
      int v9 = v7;
      if (v7)
      {
        CFGetCString(a1, v7, v6);
LABEL_9:
        int v5 = 0;
        goto LABEL_10;
      }
    }

    else
    {
      CFGetCString(a1, __s1, 0x40uLL);
      int v9 = strdup(__s1);
      if (v9) {
        goto LABEL_9;
      }
    }

    int v5 = -6728;
  }

  else
  {
    int v5 = -6705;
  }

uint64_t CFStringCopyUTF8CString(const __CFString *a1, char **a2)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    int v5 = strdup(CStringPtr);
    if (!v5) {
      return 4294960568LL;
    }
LABEL_7:
    uint64_t result = 0LL;
    *a2 = v5;
    return result;
  }

  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = MaximumSizeForEncoding;
  CFDataRef v8 = (UInt8 *)malloc(MaximumSizeForEncoding + 1);
  if (!v8) {
    return 4294960568LL;
  }
  int v5 = (char *)v8;
  v11.location = 0LL;
  v11.length = Length;
  if (CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen) == Length)
  {
    v5[usedBufLen] = 0;
    goto LABEL_7;
  }

  free(v5);
  return 4294960596LL;
}

const char *CFObjectGetCString( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, char *a4, size_t a5, _DWORD *a6)
{
  int v9 = (const __CFString *)a2(a1, a3, &v12);
  uint64_t v10 = v9;
  if (a6) {
    *a6 = v12;
  }
  if (v9)
  {
    a4 = (char *)CFGetCString(v9, a4, a5);
    CFRelease(v10);
  }

  else if (a5)
  {
    *a4 = 0;
  }

  else
  {
    return "";
  }

  return a4;
}

uint64_t CFObjectSetCString( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, char *cStr, CFIndex numBytes)
{
  if (numBytes == -1) {
    CFStringRef v8 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  }
  else {
    CFStringRef v8 = CFStringCreateWithBytes(0LL, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  }
  CFStringRef v9 = v8;
  if (!v8) {
    return 4294960579LL;
  }
  uint64_t v10 = a2(a1, a3, v8);
  CFRelease(v9);
  return v10;
}

double CFObjectGetDouble( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, _DWORD *a4)
{
  int v5 = (const __CFString *)a2(a1, a3, &v9);
  size_t v6 = v5;
  if (a4) {
    *a4 = v9;
  }
  if (!v5) {
    return 0.0;
  }
  double v7 = CFGetDouble(v5, a4);
  CFRelease(v6);
  return v7;
}

uint64_t CFObjectSetDouble( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFNumberRef), uint64_t a3, double a4)
{
  double valuePtr = a4;
  CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  if (!v7) {
    return 4294960596LL;
  }
  CFNumberRef v8 = v7;
  uint64_t v9 = a2(a1, a3, v7);
  CFRelease(v8);
  return v9;
}

unint64_t CFObjectGetHardwareAddress( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, char *a4, size_t a5, int *a6)
{
  uint64_t v9 = (const __CFString *)a2(a1, a3, &v13);
  uint64_t v10 = v9;
  if (a6) {
    *a6 = v13;
  }
  if (v9)
  {
    unint64_t v11 = CFGetHardwareAddress(v9, a4, a5, a6);
    CFRelease(v10);
  }

  else
  {
    if (a4) {
      bzero(a4, a5);
    }
    unint64_t v11 = 0LL;
    if (a6) {
      *a6 = -6727;
    }
  }

  return v11;
}

unint64_t CFGetHardwareAddress(const __CFString *a1, char *a2, size_t a3, int *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t valuePtr = 0LL;
  if (!a1)
  {
    int v10 = -6705;
    goto LABEL_30;
  }

  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 == CFStringGetTypeID())
  {
    if (CFStringGetCString(a1, buffer, 64LL, 0x600u))
    {
      if (!a2)
      {
        if (a3 > 8)
        {
          int v10 = -6743;
          if (!a4) {
            return valuePtr;
          }
          goto LABEL_38;
        }

        a2 = &v18;
      }

      int v9 = TextToHardwareAddress(buffer, 0xFFFFFFFFFFFFFFFFLL, a3, a2);
      if (!v9)
      {
        if (a3 != 8)
        {
          if (a3 == 6)
          {
            int v10 = 0;
            unint64_t v11 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8);
            uint64_t v12 = a2[5];
            goto LABEL_24;
          }

          goto LABEL_26;
        }

        int v10 = 0;
        unint64_t v15 = *(void *)a2;
        goto LABEL_36;
      }

      int v10 = v9;
LABEL_31:
      bzero(a2, a3);
      if (!a4) {
        return valuePtr;
      }
      goto LABEL_38;
    }

uint64_t CFObjectSetHardwareAddress( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (a5 != 8 && a5 != 6) {
    return 4294960553LL;
  }
  int v5 = &a4[a5];
  size_t v6 = cStr;
  do
  {
    if (v6 == cStr)
    {
      CFNumberRef v7 = cStr;
    }

    else
    {
      *size_t v6 = 58;
      CFNumberRef v7 = v6 + 1;
    }

    unsigned int v8 = *a4++;
    *CFNumberRef v7 = a0123456789abcd_0[(unint64_t)v8 >> 4];
    size_t v6 = v7 + 2;
    v7[1] = a0123456789abcd_0[v8 & 0xF];
  }

  while (a4 < v5);
  *size_t v6 = 0;
  return CFObjectSetCString(a1, a2, a3, cStr, -1LL);
}

unint64_t CFObjectGetInt64( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, int *a4)
{
  int v5 = (const __CFString *)a2(a1, a3, &v9);
  size_t v6 = v5;
  if (a4) {
    *a4 = v9;
  }
  if (!v5) {
    return 0LL;
  }
  unint64_t v7 = CFGetInt64(v5, a4);
  CFRelease(v6);
  return v7;
}

int64_t CFObjectGetInt64Ranged( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *), uint64_t a3, int64_t a4, int64_t a5, int *a6)
{
  int v9 = (const __CFString *)a2(a1, a3, &v15);
  int v10 = v9;
  if (a6) {
    *a6 = v15;
  }
  if (!v9) {
    return 0LL;
  }
  int64_t v11 = CFGetInt64(v9, &v16);
  int64_t v12 = v11;
  int v13 = v16;
  if (!v16)
  {
    if (v11 < a4 || v11 > a5)
    {
      int v13 = -6710;
      if (!a6) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }

    int v13 = 0;
  }

  if (a6) {
LABEL_9:
  }
    *a6 = v13;
LABEL_10:
  CFRelease(v10);
  return v12;
}

int64_t CFGetInt64Ranged(const __CFString *a1, int64_t a2, int64_t a3, int *a4)
{
  int64_t result = CFGetInt64(a1, &v9);
  int v8 = v9;
  if (v9)
  {
LABEL_5:
    if (!a4) {
      return result;
    }
    goto LABEL_6;
  }

  if (result >= a2 && result <= a3)
  {
    int v8 = 0;
    goto LABEL_5;
  }

  int v8 = -6710;
  if (!a4) {
    return result;
  }
LABEL_6:
  *a4 = v8;
  return result;
}

uint64_t CFObjectSetInt64( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFNumberRef), uint64_t a3, uint64_t a4)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a4);
  if (!Int64) {
    return 4294960596LL;
  }
  CFNumberRef v8 = Int64;
  uint64_t v9 = a2(a1, a3, Int64);
  CFRelease(v8);
  return v9;
}

uint64_t CFObjectGetUUID( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unsigned int *), uint64_t a3, _OWORD *a4, uint64_t a5)
{
  unint64_t v7 = (__CFString *)a2(a1, a3, &v11);
  uint64_t v8 = v11;
  if (!v11)
  {
    uint64_t v9 = v7;
    uint64_t v8 = CFGetUUIDEx(v7, a4, a5);
    CFRelease(v9);
  }

  return v8;
}

uint64_t CFGetUUIDEx(__CFString *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 4294960591LL;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
  {
    if (v6 != CFDataGetTypeID())
    {
      if (a2 && v6 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, buffer);
        unsigned int v12 = *(_DWORD *)buffer;
        if (*(_DWORD *)&buffer[4]) {
          return 4294960586LL;
        }
        if (a3)
        {
          *(_OWORD *)a3 = *a2;
          *(_DWORD *)a3 = bswap32(v12);
        }
      }

      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (a3) {
            -[__CFString getUUIDBytes:](a1, "getUUIDBytes:", a3);
          }
        }

        else
        {
          if (v6 != CFUUIDGetTypeID()) {
            return 4294960540LL;
          }
          if (a3) {
            *(CFUUIDBytes *)a3 = CFUUIDGetUUIDBytes((CFUUIDRef)a1);
          }
        }
      }

      return 0LL;
    }

    CFIndex Length = CFDataGetLength((CFDataRef)a1);
    if (Length == 16)
    {
      if (a3) {
        *(_OWORD *)a3 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)a1);
      }
      return 0LL;
    }

    CFIndex v13 = Length;
    if (a2 && Length == 1)
    {
      if (a3)
      {
        *(_OWORD *)a3 = *a2;
        v19.location = 0LL;
        v19.length = 1LL;
        CFDataGetBytes((CFDataRef)a1, v19, (UInt8 *)(a3 + 3));
      }

      return 0LL;
    }

    if (a2 && Length == 2)
    {
      if (a3)
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)a1);
        *(_OWORD *)a3 = *a2;
        *(_BYTE *)(a3 + 2) = *BytePtr;
        UInt8 v15 = BytePtr[1];
LABEL_35:
        *(_BYTE *)(a3 + 3) = v15;
      }
    }

    else
    {
      uint64_t result = 4294960553LL;
      if (!a2 || v13 != 4) {
        return result;
      }
      if (a3)
      {
        int v16 = CFDataGetBytePtr((CFDataRef)a1);
        *(_OWORD *)a3 = *a2;
        *(_BYTE *)a3 = *v16;
        *(_BYTE *)(a3 + 1) = v16[1];
        *(_BYTE *)(a3 + 2) = v16[2];
        UInt8 v15 = v16[3];
        goto LABEL_35;
      }
    }

    return 0LL;
  }

  if (!CFStringGetCString(a1, buffer, 64LL, 0x600u)) {
    return 4294960553LL;
  }
  uint64_t result = StringToUUIDEx(buffer, 0xFFFFFFFFFFFFFFFFLL, 0, a2, (_OWORD *)a3, v7, v8, v9);
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t CFObjectSetUUID( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFUUIDRef), uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  if (!a4)
  {
    if (a6 == 16)
    {
      uint64_t v9 = *a5;
      unint64_t v10 = (unint64_t)*a5 >> 8;
      unint64_t v11 = (unint64_t)*a5 >> 16;
      unint64_t v12 = (unint64_t)*a5 >> 24;
      uint64_t v13 = *a5;
      a4 = a5;
      goto LABEL_12;
    }

    return 4294960553LL;
  }

  if (a6 == 4)
  {
    uint64_t v9 = *a4;
    LOBYTE(v13) = *(_BYTE *)a5;
    LOBYTE(v10) = *((_BYTE *)a5 + 1);
    LOBYTE(v11) = *((_BYTE *)a5 + 2);
    LOBYTE(v12) = *((_BYTE *)a5 + 3);
    goto LABEL_12;
  }

  if (a6 == 2)
  {
    uint64_t v9 = *a4;
    unint64_t v10 = (unint64_t)*a4 >> 8;
    LOBYTE(v11) = *(_BYTE *)a5;
    LOBYTE(v12) = *((_BYTE *)a5 + 1);
    goto LABEL_11;
  }

  if (a6 != 1) {
    return 4294960553LL;
  }
  uint64_t v9 = *a4;
  unint64_t v10 = (unint64_t)*a4 >> 8;
  unint64_t v11 = (unint64_t)*a4 >> 16;
  LOBYTE(v12) = *(_BYTE *)a5;
LABEL_11:
  LOBYTE(v13) = v9;
LABEL_12:
  *(void *)&v18.byte8 = a4[1];
  *(void *)&v18.byte0 = v9 & 0xFFFFFFFF00000000LL | ((unint64_t)v12 << 24) | ((unint64_t)v11 << 16) | ((unint64_t)v10 << 8) | v13;
  CFUUIDRef v15 = CFUUIDCreateFromUUIDBytes(0LL, v18);
  if (!v15) {
    return 4294960568LL;
  }
  CFUUIDRef v16 = v15;
  uint64_t v17 = a2(a1, a3, v15);
  CFRelease(v16);
  return v17;
}

uint64_t CFObjectSetUUIDString( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, CFStringRef), uint64_t a3, _BYTE *a4, uint64_t a5, __int128 *a6, char a7)
{
  CFStringRef v10 = CFCreateUUIDString(a4, a5, a6, a7, &v13);
  if (v10)
  {
    CFStringRef v11 = v10;
    unsigned int v13 = a2(a1, a3, v10);
    CFRelease(v11);
  }

  return v13;
}

CFStringRef CFCreateUUIDString(_BYTE *a1, uint64_t a2, __int128 *a3, char a4, _DWORD *a5)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  UUIDtoCStringFlags(a1, a2, a3, a4, cStr, &v7);
  if (v7)
  {
    CFStringRef result = 0LL;
    if (!a5) {
      return result;
    }
  }

  else
  {
    CFStringRef result = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
    if (result)
    {
      if (!a5) {
        return result;
      }
    }

    else
    {
      int v7 = -6700;
      if (!a5) {
        return result;
      }
    }
  }

  *a5 = v7;
  return result;
}

const void *CFGetTypedObject(const void *result, uint64_t a2, int *a3)
{
  if (!result)
  {
    int v8 = -6705;
    if (!a3) {
      return result;
    }
    goto LABEL_9;
  }

  int v5 = result;
  CFTypeID v6 = CFGetTypeID(result);
  BOOL v7 = v6 == a2;
  if (v6 == a2) {
    CFStringRef result = v5;
  }
  else {
    CFStringRef result = 0LL;
  }
  if (v7) {
    int v8 = 0;
  }
  else {
    int v8 = -6756;
  }
  if (a3) {
LABEL_9:
  }
    *a3 = v8;
  return result;
}

uint64_t CFSetObjectAtPath( void *cf, _BYTE *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = -1;
  unint64_t v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
  unsigned int v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
  while (1)
  {
    for (CFIndex i = a2; *i && *i != 46; ++i)
      ;
    CFIndex v15 = i - a2;
    if (!*i) {
      break;
    }
    CFUUIDRef v16 = i + 1;
    if (*a2 == 91)
    {
      CFTypeID v17 = CFGetTypeID(cf);
      if (v17 != CFArrayGetTypeID()) {
        return 4294960540LL;
      }
      CFIndex v18 = idx;
      if ((idx & 0x80000000) != 0 || CFArrayGetCount((CFArrayRef)cf) <= v18) {
        return 4294960586LL;
      }
      CFTypeRef cf = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf, (int)idx);
      unsigned int v11 = idx;
      a2 = v16;
    }

    else
    {
      CFTypeID v19 = CFGetTypeID(cf);
      if (v19 != CFDictionaryGetTypeID()) {
        return 4294960540LL;
      }
      CFStringRef v20 = CFStringCreateWithBytes(0LL, a2, v15, 0x8000100u, 0);
      if (!v20) {
        return 4294960596LL;
      }
      CFStringRef v21 = v20;
      Value = CFDictionaryGetValue((CFDictionaryRef)cf, v20);
      if (!Value)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, v12, v13);
        if (!Mutable)
        {
          CFRelease(v21);
          return 4294960568LL;
        }

        Value = Mutable;
        CFDictionarySetValue((CFMutableDictionaryRef)cf, v21, Mutable);
        CFRelease(Value);
      }

      CFRelease(v21);
      unsigned int v11 = -1;
      CFTypeRef cf = (void *)Value;
      a2 = v16;
    }
  }

  CFTypeID v24 = CFGetTypeID(cf);
  if (v24 != CFDictionaryGetTypeID())
  {
    CFTypeID v27 = CFGetTypeID(cf);
    if (v27 != CFArrayGetTypeID()) {
      return 4294960540LL;
    }
    if (i != a2) {
      return 4294960579LL;
    }
    if (a3)
    {
      CFArrayAppendValue((CFMutableArrayRef)cf, a3);
    }

    else
    {
      if ((v11 & 0x80000000) != 0) {
        return 4294960579LL;
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, v11);
    }

    return 0LL;
  }

  if (i == a2) {
    return 4294960579LL;
  }
  CFStringRef v25 = CFStringCreateWithBytes(0LL, a2, i - a2, 0x8000100u, 0);
  if (v25)
  {
    CFStringRef v26 = v25;
    if (a3) {
      CFDictionarySetValue((CFMutableDictionaryRef)cf, v25, a3);
    }
    else {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v25);
    }
    CFRelease(v26);
    return 0LL;
  }

  return 4294960596LL;
}

void CFArrayApplyBlock(const __CFArray *a1, CFRange a2, void *context)
{
}

uint64_t _CFArrayApplyBlockApplier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t CFArrayAppendInt64(__CFArray *a1, uint64_t a2)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a2);
  if (!Int64) {
    return 4294960568LL;
  }
  CFNumberRef v4 = Int64;
  CFArrayAppendValue(a1, Int64);
  CFRelease(v4);
  return 0LL;
}

uint64_t CFArrayAppendBytes(__CFArray *a1, const UInt8 *a2, CFIndex a3)
{
  CFDataRef v4 = CFDataCreate(0LL, a2, a3);
  if (!v4) {
    return 4294960568LL;
  }
  CFDataRef v5 = v4;
  CFArrayAppendValue(a1, v4);
  CFRelease(v5);
  return 0LL;
}

CFComparisonResult CFSortCompareKeyPath( const __CFString *a1, const __CFString *a2, UInt8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex v15 = v23;
  CFTypeID v17 = v23;
  CFTypeID v18 = CFGetTypeID(v15);
  if (v18 != CFGetTypeID(v17)) {
    return -1LL;
  }
  if (v18 != CFNumberGetTypeID())
  {
    if (v18 == CFStringGetTypeID()) {
      return CFStringCompare(v15, v17, 0x361uLL);
    }
    if (v18 == CFDateGetTypeID()) {
      return CFDateCompare((CFDateRef)v15, (CFDateRef)v17, 0LL);
    }
    return -1LL;
  }

  CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt64Type, &valuePtr);
  CFNumberGetValue((CFNumberRef)v17, kCFNumberSInt64Type, &v21);
  if (valuePtr < v21) {
    return -1LL;
  }
  else {
    return (unint64_t)(valuePtr > v21);
  }
}

uint64_t CFArrayEnsureCreatedAndAppend(__CFArray **a1, void *value)
{
  CFMutableDictionaryRef Mutable = *a1;
  if (Mutable) {
    goto LABEL_4;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (Mutable)
  {
    *a1 = Mutable;
LABEL_4:
    CFArrayAppendValue(Mutable, value);
    return 0LL;
  }

  return 4294960568LL;
}

uint64_t CFArrayEnsureCreatedAndAppendCString(__CFArray **a1, const char *a2, CFIndex a3)
{
  if (a3 == -1) {
    CFDataRef v4 = (__CFString *)CFStringCreateWithCString(0LL, a2, 0x8000100u);
  }
  else {
    CFDataRef v4 = (__CFString *)CFStringCreateWithBytes(0LL, (const UInt8 *)a2, a3, 0x8000100u, 0);
  }
  CFDataRef v5 = v4;
  if (!v4) {
    return 4294960596LL;
  }
  uint64_t v6 = CFArrayEnsureCreatedAndAppend(a1, v4);
  CFRelease(v5);
  return v6;
}

CFArrayRef CFArrayGetTypedValueAtIndex(const __CFArray *result, CFIndex a2, uint64_t a3, int *a4)
{
  if (result)
  {
    CFStringRef result = (const __CFArray *)CFArrayGetValueAtIndex(result, a2);
    if (result)
    {
      uint64_t v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      BOOL v8 = v7 == a3;
      if (v7 == a3) {
        CFStringRef result = v6;
      }
      else {
        CFStringRef result = 0LL;
      }
      if (v8) {
        int v9 = 0;
      }
      else {
        int v9 = -6756;
      }
    }

    else
    {
      int v9 = -6727;
    }
  }

  else
  {
    int v9 = -6705;
  }

  if (a4) {
    *a4 = v9;
  }
  return result;
}

uint64_t CFDataGetEmpty()
{
  if (gCFDataGetEmptyOnce != -1) {
    dispatch_once_f(&gCFDataGetEmptyOnce, 0LL, (dispatch_function_t)_CFDataGetEmptyOnce);
  }
  return gCFDataEmpty;
}

CFDataRef _CFDataGetEmptyOnce()
{
  CFDataRef result = CFDataCreate(0LL, (const UInt8 *)"", 0LL);
  gCFDataEmpty = (uint64_t)result;
  return result;
}

void CFDictionaryApplyBlock(const __CFDictionary *a1, void *context)
{
}

uint64_t _CFDictionaryApplyBlockApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

CFArrayRef CFDictionaryCopyKeys(const __CFDictionary *a1, int *a2)
{
  uint64_t Count = CFDictionaryGetCount(a1);
  CFIndex v5 = Count;
  if (Count <= 0)
  {
    CFArrayRef v8 = CFArrayCreate(0LL, 0LL, Count, MEMORY[0x189605228]);
  }

  else
  {
    uint64_t v6 = (const void **)malloc(8 * Count);
    if (!v6)
    {
      CFArrayRef v8 = 0LL;
      int v9 = -6728;
      if (!a2) {
        return v8;
      }
      goto LABEL_9;
    }

    CFTypeID v7 = v6;
    CFDictionaryGetKeysAndValues(a1, v6, 0LL);
    CFArrayRef v8 = CFArrayCreate(0LL, v7, v5, MEMORY[0x189605228]);
    free(v7);
  }

  if (v8) {
    int v9 = 0;
  }
  else {
    int v9 = -6728;
  }
  if (a2) {
LABEL_9:
  }
    *a2 = v9;
  return v8;
}

uint64_t CFDictionaryCreateFromNameTypeValueArgList(CFMutableDictionaryRef *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v82 = *MEMORY[0x1895F89C0];
  CFTypeID v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!Mutable) {
    return 4294960568LL;
  }
  CFMutableDictionaryRef v9 = Mutable;
  if (a2 >= a3)
  {
LABEL_118:
    uint64_t v73 = 0LL;
    *a1 = v9;
    return v73;
  }

  uint64_t v10 = a2;
  while (1)
  {
    uint64_t v11 = *(void *)(a4 + 8 * v10);
    if (!v11)
    {
      uint64_t v73 = 4294960591LL;
      goto LABEL_117;
    }

    uint64_t v12 = strchr(*(const char **)(a4 + 8 * v10), 58);
    if (!v12 || (uint64_t v13 = v12, v14 = v12 + 1, (v15 = strchr(v12 + 1, 58)) == 0LL))
    {
      uint64_t v73 = 4294960554LL;
      goto LABEL_117;
    }

    uint64_t v21 = v15;
    uint64_t v22 = 0LL;
    ++v10;
    int v23 = v15 + 1;
    __s = v23;
    int64_t v24 = v21 - v14;
    while (v24 != v22)
    {
      if (v14[v22] != aB[v22]) {
        goto LABEL_13;
      }
      if (++v22 == 2) {
        goto LABEL_18;
      }
    }

    if (!aB[v24])
    {
LABEL_18:
      if (strnicmpx((unsigned __int8 *)v23, -1LL, "true")
        && strnicmpx((unsigned __int8 *)__s, -1LL, "yes")
        && strnicmpx((unsigned __int8 *)__s, -1LL, "y")
        && strnicmpx((unsigned __int8 *)__s, -1LL, "on")
        && strnicmpx((unsigned __int8 *)__s, -1LL, "1"))
      {
        if (strnicmpx((unsigned __int8 *)__s, -1LL, "false")
          && strnicmpx((unsigned __int8 *)__s, -1LL, "no")
          && strnicmpx((unsigned __int8 *)__s, -1LL, "n")
          && strnicmpx((unsigned __int8 *)__s, -1LL, "off")
          && strnicmpx((unsigned __int8 *)__s, -1LL, "0"))
        {
LABEL_123:
          uint64_t v73 = 4294960559LL;
          goto LABEL_117;
        }

        int v31 = 0;
      }

      else
      {
        int v31 = 1;
      }

      int v77 = v31;
      uint64_t appended = CFPropertyListAppendFormatted( v7,  v9,  (uint64_t)"%.*ks=%b",  v26,  v27,  v28,  v29,  v30,  (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }

LABEL_40:
    uint64_t v39 = 0LL;
    while (v24 != v39)
    {
      if (v14[v39] != aM[v39]) {
        goto LABEL_48;
      }
      if (++v39 == 2) {
        goto LABEL_53;
      }
    }

    if (!aM[v24])
    {
LABEL_53:
      uint64_t appended = TextToHardwareAddress(v23, 0xFFFFFFFFFFFFFFFFLL, 6LL, v79);
      if ((_DWORD)appended) {
        goto LABEL_116;
      }
      uint64_t v51 = (uint64_t)&v13[-v11];
LABEL_78:
      uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=%D", v46, v47, v48, v49, v50, v51);
      goto LABEL_79;
    }

        objc_storeStrong((id *)&self->_selfAccessoryMediaAccessPassword, v26);
        goto LABEL_41;
      }
    }

    if (!v11)
    {
LABEL_43:

      uint64_t v3 = v40;
      goto LABEL_44;
    }

  return v13;
}

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  uint64_t v37 = v39;
  if (v39 != -25300 && v39 && gLogCategory_CUPairingDaemon <= 60)
  {
    if (gLogCategory_CUPairingDaemon != -1)
    {
LABEL_44:
      LogPrintF( (uint64_t)&gLogCategory_CUPairingDaemon,  (uint64_t)"-[CUPairingDaemon _copyOrCreateWithOptions:error:]",  0x3Cu,  (uint64_t)"### CopyIdentity failed: %#m\n",  v33,  v34,  v35,  v36,  v37);
      goto LABEL_46;
    }

    if (_LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingDaemon, 0x3Cu))
    {
      uint64_t v37 = v39;
      goto LABEL_44;
    }
  }
}

  uint64_t v57 = 28;
  if (!getsockname(self->_socketFD, &self->_selfAddr.sa, &v57)) {
    goto LABEL_83;
  }
  if (!*__error())
  {
    InterfaceInfo = 4294960596LL;
    goto LABEL_57;
  }

  InterfaceInfo = *__error();
  if (!(_DWORD)InterfaceInfo)
  {
LABEL_83:
    uint64_t v57 = 28;
    if (!getpeername(self->_socketFD, &self->_peerAddr.sa, &v57)) {
      goto LABEL_46;
    }
    if (!*__error())
    {
      InterfaceInfo = 4294960596LL;
      goto LABEL_57;
    }

    InterfaceInfo = *__error();
    if (!(_DWORD)InterfaceInfo)
    {
LABEL_46:
      p_netTransportType = &self->_netTransportType;
      InterfaceInfo = SocketGetInterfaceInfo( self->_socketFD,  0LL,  self->_ifName,  &self->_ifIndex,  0LL,  &self->_ifMedia,  (int *)&self->_ifFlags,  &self->_ifExtendedFlags,  0LL,  (uint64_t)&self->_netTransportType);
      if ((_DWORD)InterfaceInfo) {
        goto LABEL_57;
      }
      uint64_t v25 = *p_netTransportType;
      if (*p_netTransportType != 4 && v25 != 64 && v25 != 128) {
        SocketSetP2P(self->_socketFD, 0);
      }
      uint64_t v26 = self->_ucat;
      if (v26->var0 > 30) {
        goto LABEL_62;
      }
      if (v26->var0 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v26, 0x1Eu))
        {
LABEL_62:
          -[CUTCPConnection _updateTrafficRegistration](self, "_updateTrafficRegistration");
          uint64_t v29 = MEMORY[0x1895F87A8];
          if ((self->_flags & 4) != 0 && self->_netLinkManager && (self->_ifExtendedFlags & 0x40000) == 0)
          {
            uint64_t v30 = objc_alloc_init(&OBJC_CLASS___CUNetLinkEndpoint);
            netLinkEndpoint = self->_netLinkEndpoint;
            self->_netLinkEndpoint = v30;

            v51[0] = self->_peerAddr.sa;
            *(in6_addr *)((char *)v51 + 12) = *(in6_addr *)((char *)&self->_peerAddr.v6.sin6_addr + 4);
            -[CUNetLinkEndpoint setIpAddr:](self->_netLinkEndpoint, "setIpAddr:", v51);
            v50[0] = v29;
            v50[1] = 3221225472LL;
            v50[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke;
            v50[3] = &unk_189F34238;
            v50[4] = self;
            -[CUNetLinkEndpoint setStateChangedHandler:](self->_netLinkEndpoint, "setStateChangedHandler:", v50);
            -[CUNetLinkManager addEndpoint:](self->_netLinkManager, "addEndpoint:", self->_netLinkEndpoint);
          }

          CFStringRef v32 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B60],  self->_socketFD,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
          readSource = self->_readSource;
          self->_readSource = v32;

          uint64_t v34 = self->_readSource;
          if (v34)
          {
            handler[0] = v29;
            handler[1] = 3221225472LL;
            handler[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke_2;
            handler[3] = &unk_189F34238;
            handler[4] = self;
            dispatch_source_set_event_handler((dispatch_source_t)v34, handler);
            uint64_t v35 = self->_readSource;
            v48[0] = v29;
            v48[1] = 3221225472LL;
            v48[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke_3;
            v48[3] = &unk_189F34238;
            v48[4] = self;
            dispatch_source_set_cancel_handler((dispatch_source_t)v35, v48);
            dispatch_resume((dispatch_object_t)self->_readSource);
            uint64_t v36 = (OS_dispatch_source *)dispatch_source_create( MEMORY[0x1895F8B90],  self->_socketFD,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
            writeSource = self->_writeSource;
            self->_writeSource = v36;

            uint64_t v38 = self->_writeSource;
            if (v38)
            {
              v47[0] = v29;
              v47[1] = 3221225472LL;
              v47[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke_4;
              v47[3] = &unk_189F34238;
              v47[4] = self;
              dispatch_source_set_event_handler((dispatch_source_t)v38, v47);
              uint64_t v39 = self->_writeSource;
              v46[0] = v29;
              v46[1] = 3221225472LL;
              v46[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke_5;
              v46[3] = &unk_189F34238;
              v46[4] = self;
              dispatch_source_set_cancel_handler((dispatch_source_t)v39, v46);
              self->_writeSuspended = 1;
              self->_flowControlState = 10;
              uint64_t v40 = (self->_flags >> 2) & 0x100 | (((self->_flags >> 11) & 1) << 15);
              if ((_DWORD)v40)
              {
                uint64_t v41 = dispatch_source_create( MEMORY[0x1895F8B70],  self->_socketFD,  v40,  (dispatch_queue_t)self->_dispatchQueue);
                objc_storeStrong((id *)&self->_socketEventsSource, v41);
                if (v41)
                {
                  v45[0] = v29;
                  v45[1] = 3221225472LL;
                  v45[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke_6;
                  v45[3] = &unk_189F34238;
                  v45[4] = self;
                  dispatch_source_set_event_handler(v41, v45);
                  v44[0] = v29;
                  v44[1] = 3221225472LL;
                  v44[2] = __42__CUTCPConnection__setupIOAndReturnError___block_invoke_7;
                  v44[3] = &unk_189F34238;
                  v44[4] = self;
                  dispatch_source_set_cancel_handler(v41, v44);
                  dispatch_activate(v41);
                }
              }

              uint64_t v28 = 0;
              uint64_t v27 = 0LL;
              goto LABEL_73;
            }
          }

          InterfaceInfo = 4294960596LL;
          goto LABEL_57;
        }

        uint64_t v26 = self->_ucat;
      }

      LogPrintF( (uint64_t)v26,  (uint64_t)"-[CUTCPConnection _setupIOAndReturnError:]",  0x1Eu,  (uint64_t)"Connected to %##a from %##a, %s\n",  v21,  v22,  v23,  v24,  (_BYTE)self - 88);
      goto LABEL_62;
    }
  }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x4000LL);
        if ((v12 & 0x10000) == 0) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }

      ucCFAbsoluteTime at = self->_ucat;
    }

    CFDataRef v4 = -[NSArray count](self->_trafficPeersCurrent, "count");
    -[NSArray count](self->_trafficPeers, "count");
    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUWiFiManager _updateTrafficPeers]",  0x1Eu,  (uint64_t)"Traffic registration update: %d -> %d peers\n",  v5,  v6,  v7,  v8,  v4);
    goto LABEL_7;
  }

    CFStringRef v32 = 0LL;
    goto LABEL_42;
  }

  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v38 = (void *)(v11 + 33384);
  uint64_t v22 = a7;
LABEL_25:
  int v23 = v11 + 288;
  while (1)
  {
    uint64_t v41 = v15;
    Internal = NetSocket_ReadInternal(a1, 2uLL, 2LL, (char *)&__dsta, 0LL, 0, v22);
    if ((_DWORD)Internal)
    {
LABEL_45:
      CFStringRef v32 = Internal;
      goto LABEL_57;
    }

    uint64_t v25 = __dsta;
    if (__dsta > 0x4000u)
    {
      CFStringRef v32 = 4294960553LL;
      goto LABEL_57;
    }

    Internal = NetSocket_ReadInternal(a1, __dsta, __dsta, (char *)(v11 + 296), 0LL, 0, v22);
    if ((_DWORD)Internal) {
      goto LABEL_45;
    }
    Internal = NetSocket_ReadInternal(a1, 0x10uLL, 16LL, v44.i8, 0LL, 0, v22);
    uint64_t v43 = Internal;
    if ((_DWORD)Internal) {
      goto LABEL_45;
    }
    chacha20_poly1305_init_64x64((int32x4_t *)v11, (_DWORD *)(v11 + 256), (_DWORD *)(v11 + 288));
    poly1305_update((unsigned int *)(v11 + 136), (unsigned int *)&__dsta, 2uLL);
    *(void *)(v11 + 232) += 2LL;
    uint64_t v26 = chacha20_poly1305_decrypt(v11, (int8x16_t *)(v11 + 296), v25, (int8x16_t *)(v11 + 296));
    uint64_t v27 = chacha20_poly1305_verify((unsigned int *)v11, (int8x16_t *)(v11 + v26 + 296), &v44, (int *)&v43);
    CFStringRef v32 = v43;
    if (v43) {
      break;
    }
    uint64_t v33 = v27 + v26;
    if (v33 != v25)
    {
      if (gLogCategory_NetSocketChaCha20Poly1305 <= 60
        && (gLogCategory_NetSocketChaCha20Poly1305 != -1
         || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, 0x3Cu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_NetSocketChaCha20Poly1305,  (uint64_t)"OSStatus _NetSocketTransportRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)",  0x3Cu,  (uint64_t)"### NSTCP verify len failed: %zu vs %zu\n",  v28,  v29,  v30,  v31,  v33);
      }

      CFStringRef v32 = 4294960534LL;
      goto LABEL_57;
    }

    uint64_t v34 = 0LL;
    do
    {
      uint64_t v35 = (*(_BYTE *)(v23 + v34))++ + 1;
      if ((v35 & 0x100) == 0) {
        break;
      }
      uint64_t v21 = v34++ >= 7;
    }

    while (!v21);
    uint64_t v36 = v10 - v25;
    if (v10 < v25)
    {
      memcpy(v9, (const void *)(v11 + 296), v10);
      CFStringRef v32 = 0LL;
      *uint64_t v38 = v11 + 296 + v10;
      v38[1] = v11 + 296 + v25;
      CFIndex v15 = v10 + v41;
      goto LABEL_42;
    }

    memcpy(v9, (const void *)(v11 + 296), v25);
    CFStringRef v32 = 0LL;
    CFIndex v15 = v41 + v25;
    if (v41 + v25 < a2)
    {
      v9 += v25;
      v10 -= v25;
      if (v36) {
        continue;
      }
    }

    goto LABEL_42;
  }

  if (gLogCategory_NetSocketChaCha20Poly1305 <= 60
    && (gLogCategory_NetSocketChaCha20Poly1305 != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_NetSocketChaCha20Poly1305, 0x3Cu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_NetSocketChaCha20Poly1305,  (uint64_t)"OSStatus _NetSocketTransportRead(NetSocketRef, size_t, size_t, void *, size_t *, int, int32_t)",  0x3Cu,  (uint64_t)"### NSTCP verify failed: %#m\n",  v28,  v29,  v30,  v31,  v32);
  }

    int v31 = 0LL;
    CFStringRef v32 = 0LL;
    LOBYTE(v33) = 0;
    uint64_t v34 = -6709;
    goto LABEL_114;
  }

  uint64_t v21 = *(int **)(a1 + 16);
  uint64_t v22 = *v21;
  if (*v21 <= 30)
  {
    if (v22 != -1) {
      goto LABEL_18;
    }
    if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
    {
      uint64_t v21 = *(int **)(a1 + 16);
      uint64_t v22 = *v21;
LABEL_18:
      int v23 = v22 <= 10 && (v22 != -1 || _LogCategory_Initialize((uint64_t)v21, 0xAu));
      LogPrintF( (uint64_t)v21,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup server M1 -- start request\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  a7,  a8,  !v23);
    }
  }

  uint64_t appended = TLV8GetBytes(a2, v14, 0, 1uLL, 1uLL, (char *)&__dst, 0LL, 0LL);
  if (appended) {
    goto LABEL_68;
  }
  uint64_t v35 = __dst;
  if (!(_BYTE)__dst)
  {
    *(_BYTE *)(a1 + 688) = 0;
    *(_DWORD *)(a1 + 684) = TLV8GetUInt64(a2, v14, 19, 0LL, 0LL) & 0x7770FF10;
    if ((*(_BYTE *)(a1 + 103) & 8) == 0)
    {
      uint64_t v37 = _PairingThrottle();
      uint64_t v38 = v37;
      if ((v37 & 0x80000000) == 0)
      {
        uint64_t v39 = *(int **)(a1 + 16);
        uint64_t v10 = a4;
        if (*v39 > 50) {
          goto LABEL_237;
        }
        if (*v39 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v39, 0x32u))
          {
LABEL_237:
            __s[0] = 3;
            uint64_t appended = TLV8BufferAppend((uint64_t)&__src, 7, __s, 1uLL);
            if (!appended)
            {
              unsigned int v110 = TLV8BufferAppendUInt64((uint64_t)&__src, 8, v38);
              goto LABEL_264;
            }

  if (a4) {
    *a4 = v21;
  }
  if (a5) {
    *a5 = v22 - v21;
  }
  uint64_t v29 = 0LL;
  CFDataRef result = 0LL;
  if (a6)
  {
LABEL_45:
    *a6 = a1;
    return v29;
  }

  return result;
}

    if (v18)
    {
      if (v18 > 9) {
        uint64_t v17 = v18 + (arc4random() & 0x7F) + 1;
      }
      else {
        uint64_t v17 = v18 + 1;
      }
      goto LABEL_44;
    }

    for (CFIndex i = "Library/Caches/com.apple.xbs/Sources/CoreUtils/CoreUtils/TestUtils.c"; *(i - 1) == 47 || *(i - 1); ++i)
      ;
    _TUPrintF();
    goto LABEL_45;
  }

  uint64_t v14 = 1;
LABEL_48:
  if (gTUBATSMode == 1)
  {
    if (sUpTicksToSecondsOnce != -1) {
      dispatch_once_f(&sUpTicksToSecondsOnce, &sUpTicksToSecondsMultiplier, (dispatch_function_t)_UpTicksToSecondsInit);
    }
    _TUPrintF();
    _TUPrintF();
  }

  if (gTUXCTestFailer) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = 1;
  }
  if ((v17 & 1) == 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(gTUXCTestFailer + 16))(gTUXCTestFailer, v12, v13);
  }
LABEL_60:
  if (gTUBATSMode == 1)
  {
    _TUPrintF();
    uint64_t v18 = gTUBATSMode;
  }

  else
  {
    uint64_t v18 = 0;
  }

  if (gTUUserMode) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18 == 0;
  }
  if (!v19)
  {
    if (!gTUTotalFailures && gTUTotalPasses >= gTUTotalExpectedTests)
    {
      if (gTUUserMode) {
        _TUPrintF();
      }
      mach_absolute_time();
      if (sUpTicksToSecondsOnce != -1) {
        dispatch_once_f( &sUpTicksToSecondsOnce,  &sUpTicksToSecondsMultiplier,  (dispatch_function_t)_UpTicksToSecondsInit);
      }
    }

    _TUPrintF();
  }

  if (gTUTotalFailures + gTUTotalPasses
    && (!gTUTotalExpectedTests || gTUTotalFailures + gTUTotalPasses == gTUTotalExpectedTests))
  {
    if (gTULogLevel <= 30)
    {
      if (gTUUserMode || gTUBATSMode) {
        _TUPrintF();
      }
      _TUPrintF();
    }
  }

  else
  {
    _TUPrintF();
    do
      uint64_t v20 = __ldaxr((unsigned int *)&gTUTotalFailures);
    while (__stlxr(v20 + 1, (unsigned int *)&gTUTotalFailures));
  }

  if (!gTUUserMode && (gTUBATSMode & 1) == 0) {
    _TUPrintF();
  }
  if (gTUOutputFilePtr) {
    fflush((FILE *)gTUOutputFilePtr);
  }
  fflush((FILE *)*MEMORY[0x1895F89D0]);
  fflush((FILE *)*MEMORY[0x1895F89E0]);
  if (gTUOutputFile)
  {
    if (fclose((FILE *)gTUOutputFile) && *__error()) {
      __error();
    }
    gTUOutputFile = 0LL;
  }

  gTUOutputFilePtr = 0LL;
  if (gTUOutputPath && gTUJUnitXMLOutputPath) {
    TUConvertToJUnit((const char *)gTUOutputPath, (CFMutableArrayRef)gTUJUnitXMLOutputPath);
  }
  uint64_t v21 = (void *)gTUXCTestFailer;
  gTUXCTestFailer = 0LL;

  int v23 = gTUTotalPasses < 1 || gTUTotalFailures != 0;
  gTUExitCode = v23;
}

LABEL_48:
    uint64_t v45 = 0LL;
    while (v24 != v45)
    {
      if (v14[v45] != aS_1[v45]) {
        goto LABEL_56;
      }
      if (++v45 == 2) {
        goto LABEL_61;
      }
    }

    if (!aS_1[v24])
    {
LABEL_61:
      uint64_t appended = CFPropertyListAppendFormatted( v7,  v9,  (uint64_t)"%.*ks=%s",  v16,  v17,  v18,  v19,  v20,  (uint64_t)&v13[-v11]);
      goto LABEL_79;
    }

    uint64_t v53 = v21->_scanParametersCurrent;
    v21->_scanParametersdouble Current = v39;
    uint64_t v26 = v39;

    v21->_scannerStartCalled = 1;
LABEL_53:
    -[CBCentralManager scanForPeripheralsWithServices:options:]( self->_centralManager,  "scanForPeripheralsWithServices:options:",  0LL,  v26);
    goto LABEL_54;
  }

  if (!self->_btLocalDeviceCallbacksNeeded || self->_btLocalDeviceCallbacksRegistered || !self->_btLocalDevice) {
    goto LABEL_50;
  }
  uint64_t v38 = self->_ucat;
  if (v38->var0 <= 30)
  {
    if (v38->var0 != -1)
    {
LABEL_59:
      LogPrintF( (uint64_t)v38,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"BTLocalDeviceAddCallbacks\n",  v2,  v3,  v4,  v5,  v68);
      goto LABEL_71;
    }

    if (_LogCategory_Initialize((uint64_t)v38, 0x1Eu))
    {
      uint64_t v38 = self->_ucat;
      goto LABEL_59;
    }
  }

        [v30 setDelegate:0];
        -[NSMutableDictionary setObject:forKeyedSubscript:](self->_users, "setObject:forKeyedSubscript:", 0LL, v29);
        uint64_t v48 = 1;
        goto LABEL_49;
      }

      CFStringRef v32 = v31;
      uint64_t v33 = *(void *)v52;
LABEL_38:
      uint64_t v34 = 0LL;
      while (1)
      {
        if (*(void *)v52 != v33) {
          objc_enumerationMutation(v30);
        }
        [*(id *)(*((void *)&v51 + 1) + 8 * v34) uniqueIdentifier];
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v36 = [v35 isEqual:v29];

        if ((v36 & 1) != 0) {
          break;
        }
        if (v32 == ++v34)
        {
          CFStringRef v32 = [v30 countByEnumeratingWithState:&v51 objects:v67 count:16];
          if (v32) {
            goto LABEL_38;
          }
          goto LABEL_44;
        }
      }

        if (!SCPreferencesSetHostName())
        {
          if (gLogCategory_CUMisc <= 60
            && (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x3Cu)))
          {
            SCError();
            LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x3Cu,  (uint64_t)"### Set hostname %@' failed: %#m\n",  v40,  v41,  v42,  v43,  (char)a2);
          }

          if (!(_DWORD)v12) {
            uint64_t v12 = SCError();
          }
        }

        if (!SCPreferencesSetLocalHostName(v7, a2))
        {
          if (gLogCategory_CUMisc <= 60
            && (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x3Cu)))
          {
            SCError();
            LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x3Cu,  (uint64_t)"### Set locale hostname %@' failed: %#m\n",  v44,  v45,  v46,  v47,  (char)a2);
          }

          if (!(_DWORD)v12) {
            uint64_t v12 = SCError();
          }
        }

        goto LABEL_62;
      }

      if (gLogCategory_CUMisc > 60)
      {
        CFMutableDictionaryRef MutableCopy = 0LL;
        uint64_t v13 = 0LL;
LABEL_66:
        if (!SCPreferencesCommitChanges(v7))
        {
          if (gLogCategory_CUMisc <= 60
            && (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x3Cu)))
          {
            uint64_t v48 = SCError();
            LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x3Cu,  (uint64_t)"### Commit name changes failed: %#m\n",  v49,  v50,  v51,  v52,  v48);
          }

          if (!(_DWORD)v12) {
            uint64_t v12 = SCError();
          }
        }

        if (!SCPreferencesApplyChanges(v7))
        {
          if (gLogCategory_CUMisc <= 60
            && (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x3Cu)))
          {
            uint64_t v53 = SCError();
            LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x3Cu,  (uint64_t)"### Apply name changes failed: %#m\n",  v54,  v55,  v56,  v57,  v53);
          }

          if (!(_DWORD)v12) {
            uint64_t v12 = SCError();
          }
        }

        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v13) {
          CFRelease(v13);
        }
        CFRelease(v7);
        return v12;
      }

      if (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x3Cu)) {
        LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x3Cu,  (uint64_t)"### Convert name to local hostname failed %@'\n",  v8,  v9,  v10,  v11,  (char)a1);
      }
    }

    uint64_t v13 = 0LL;
    CFMutableDictionaryRef MutableCopy = 0LL;
LABEL_62:
    if (gLogCategory_CUMisc <= 30
      && (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x1Eu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x1Eu,  (uint64_t)"Setting system name '%@', hostname '%@', flags %#{flags}",  v8,  v9,  v10,  v11,  (char)a1);
    }

    goto LABEL_66;
  }

  if (SCError()) {
    uint64_t v12 = SCError();
  }
  else {
    uint64_t v12 = 4294960596LL;
  }
  if (gLogCategory_CUMisc <= 30
    && (gLogCategory_CUMisc != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUMisc, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUMisc,  (uint64_t)"OSStatus CUSetSystemName(CFStringRef, CFStringRef _Nullable, CUSystemNameFlags)",  0x1Eu,  (uint64_t)"### Create prefs to set name failed: %#m\n",  v15,  v16,  v17,  v18,  v12);
  }

  return v12;
}

LABEL_71:
    uint64_t v54 = 0LL;
    while (v24 != v54)
    {
      if (v14[v54] != asc_186B56A46[v54]) {
        goto LABEL_83;
      }
      if (++v54 == 3) {
        goto LABEL_88;
      }
    }

    if (!asc_186B56A46[v24])
    {
LABEL_88:
      uint64_t appended = CFPropertyListAppendFormatted( v7,  v9,  (uint64_t)"%.*ks={%@}",  v16,  v17,  v18,  v19,  v20,  (uint64_t)&v13[-v11]);
      if ((_DWORD)appended) {
        goto LABEL_116;
      }
      char v56 = &__s[strlen(__s)];
      while (!ParseCommaSeparatedNameValuePair( (unsigned __int8 *)__s,  (unint64_t)v56,  v81,  256LL,  0LL,  v80,  0LL,  &__s))
      {
        uint64_t appended = CFPropertyListAppendFormatted( 0LL,  *(void **)&v79[0],  (uint64_t)"%ks=%s",  v57,  v58,  v59,  v60,  v61,  (uint64_t)v81);
        if ((_DWORD)appended) {
          goto LABEL_116;
        }
      }

      goto LABEL_80;
    }

  self->_btLocalDeviceCallbacks.statusEvent = _btLocalDeviceStatusCallback;
  uint64_t v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceAddCallbacks[0])( (uint64_t)self->_btLocalDevice,  (uint64_t)&self->_btLocalDeviceCallbacks,  (uint64_t)self);
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = self->_ucat;
    if (v46->var0 <= 60)
    {
      if (v46->var0 == -1)
      {
        uint64_t v46 = self->_ucat;
      }

      LogPrintF( (uint64_t)v46,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x3Cu,  (uint64_t)"### BTLocalDeviceAddCallbacks failed: %#m\n",  v2,  v3,  v4,  v5,  v45 - 16);
    }
  }

  else
  {
    self->_btLocalDeviceCallbacksRegistered = 1;
    -[CUBluetoothClient _handlePairingStatusChanged](self, "_handlePairingStatusChanged");
  }

  if (!v110) {
    goto LABEL_74;
  }
  if (HIDWORD(v109) > 0xD) {
    CFTypeID v81 = 0LL;
  }
  else {
    CFTypeID v81 = dword_186B4A86C[HIDWORD(v109)];
  }
LABEL_76:
  [v6 setPrimaryPlacement:v81];
  if (v110)
  {
    else {
      uint64_t v82 = dword_186B4A86C[v109];
    }
  }

  else
  {
    uint64_t v82 = 7LL;
  }

  [v6 setSecondaryPlacement:v82];
LABEL_82:
  unsigned int v110 = 0;
  unsigned int v109 = 0LL;
  size_t v108 = 0;
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetDeviceId[0])( (uint64_t)a4,  (uint64_t)&v110,  (uint64_t)&v109 + 4,  (uint64_t)&v109,  (uint64_t)&v108))
  {
    [v6 setProductIdentifier:v109];
    [v6 setVersionID:v108];
  }

  v83 = *p_btAccessoryManager;
  if (*p_btAccessoryManager)
  {
    unsigned int v113 = 0;
    int v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])( v83,  (uint64_t)a4,  26LL,  (uint64_t)&v113);
    if (v84)
    {
      uint64_t v89 = v84;
      uint64_t v90 = self->_ucat;
      if (v90->var0 <= 60)
      {
        if (v90->var0 == -1)
        {
          uint64_t v90 = self->_ucat;
        }

        LogPrintF( (uint64_t)v90,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetFeatureCapability software volume failed: %#m\n",  v85,  v86,  v87,  v88,  v89 - 16);
      }

LABEL_83:
    uint64_t v55 = 0LL;
    while (v24 != v55)
    {
      if (v14[v55] != asc_186B6E130[v55]) {
        goto LABEL_94;
      }
      if (++v55 == 3) {
        goto LABEL_99;
      }
    }

    if (asc_186B6E130[v24]) {
      break;
    }
LABEL_99:
    uint64_t appended = CFPropertyListAppendFormatted(v7, v9, (uint64_t)"%.*ks=[]", v16, v17, v18, v19, v20, (uint64_t)&v13[-v11]);
LABEL_79:
    if ((_DWORD)appended) {
      goto LABEL_116;
    }
LABEL_80:
    if ((_DWORD)v10 == a3) {
      goto LABEL_118;
    }
  }

  if ((v77 & 1) != 0)
  {
    uint64_t v61 = objc_alloc_init(MEMORY[0x189603FA8]);
    uint64_t v62 = v2->_resolvableAccessoriesMap;
    v86[0] = MEMORY[0x1895F87A8];
    v86[1] = 3221225472LL;
    v86[2] = __38__CUHomeKitManager__updateAccessories__block_invoke;
    v86[3] = &unk_189F310C8;
    v86[4] = v61;
    -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v62, "enumerateKeysAndObjectsUsingBlock:", v86);
    uint64_t v63 = [v61 copy];
    resolvableAccessories = v2->_resolvableAccessories;
    v2->_resolvableAccessories = (NSArray *)v63;

    uint64_t v65 = _Block_copy(v2->_resolvableAccessoriesChangedHandler);
    uint64_t v66 = v65;
    if (v65) {
      (*((void (**)(void *))v65 + 2))(v65);
    }
  }
}

            uint64_t v26 = 0;
LABEL_84:
            if (cf) {
              CFRelease(cf);
            }
            uint64_t v67 = a4;
            if (v65) {
              free(v65);
            }
            if (v179) {
              free(v179);
            }
            uint64_t appended = GroupInfoTLV;
            if (!GroupInfoTLV)
            {
              uint64_t v68 = (CFIndex *)a5;
              goto LABEL_223;
            }

            v164 = v8;
LABEL_112:
            CFTypeID v85 = *(int **)(a1 + 16);
            v86 = *v85;
            if (*v85 <= 50)
            {
              if (v86 != -1) {
                goto LABEL_114;
              }
              if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x32u))
              {
                CFTypeID v85 = *(int **)(a1 + 16);
                v86 = *v85;
LABEL_114:
                int64_t v87 = *(_BYTE *)(a1 + 120);
                if (v86 == -1) {
                  _LogCategory_Initialize((uint64_t)v85, 0x28u);
                }
                LogPrintF( (uint64_t)v85,  (uint64_t)"OSStatus _VerifyServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"### Pair-verify server state %d failed: %#m\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  a7,  a8,  v87);
                if (v27) {
                  goto LABEL_153;
                }
                goto LABEL_121;
              }
            }

            if (v27) {
              goto LABEL_153;
            }
LABEL_121:
            v178 = xmmword_186B49CC0;
            __src = v180;
            v179 = 0LL;
            if ((int)appended > -6761)
            {
              if ((int)appended > -6728)
              {
                if ((_DWORD)appended == -6727)
                {
                  v88 = 4LL;
                }

                else
                {
                  if ((_DWORD)appended != -6700) {
                    goto LABEL_140;
                  }
                  v88 = 1LL;
                }
              }

              else if ((_DWORD)appended == -6760)
              {
                v88 = 3LL;
              }

              else
              {
                if ((_DWORD)appended != -6754) {
                  goto LABEL_140;
                }
                v88 = 2LL;
              }
            }

            else if ((int)appended > -6765)
            {
              if ((_DWORD)appended == -6764)
              {
                v88 = 6LL;
              }

              else
              {
                if ((_DWORD)appended != -6763) {
                  goto LABEL_140;
                }
                v88 = 5LL;
              }
            }

            else
            {
              if ((_DWORD)appended != -71144)
              {
                if ((_DWORD)appended == -6773)
                {
                  v88 = 7LL;
                  goto LABEL_143;
                }

    int v79 = v69;
    goto LABEL_74;
  }

  uint64_t v64 = 4294960568LL;
  int v79 = -6728;
LABEL_60:
  uint64_t v65 = *((_DWORD *)p_cache + 448);
  if (v65 <= 60)
  {
    if (v65 != -1 || (v66 = _LogCategory_Initialize((uint64_t)&gLogCategory_WiFiManagerCore, 0x3Cu), uint64_t v64 = v79, v66))
    {
      LogPrintF( (uint64_t)&gLogCategory_WiFiManagerCore,  (uint64_t)"OSStatus WiFiScan(CFDictionaryRef, __strong dispatch_queue_t, WiFiScanCompletion_f, void *)",  0x3Cu,  (uint64_t)"### WiFi scan failed: %#m\n",  v9,  v10,  v11,  v12,  v64);
      uint64_t v64 = v79;
    }
  }

LABEL_94:
  uint64_t v62 = 0LL;
  while (v24 != v62)
  {
    if (v14[v62] != aS_2[v62]) {
      goto LABEL_120;
    }
    if (++v62 == 4) {
      goto LABEL_101;
    }
  }

  if (aS_2[v24])
  {
LABEL_120:
    uint64_t v73 = 4294960540LL;
    goto LABEL_117;
  }
}

LABEL_116:
  uint64_t v73 = appended;
LABEL_117:
  CFRelease(v9);
  return v73;
}

      CFIndex v15 = v40 | 0x49444u;
    }

    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v42 = [v41 isEqualToString:@"CSIdentityErrorDomain"];

  if (v42)
  {
    int v31 = [v4 code];
    uint64_t v35 = v31 + 312115;
    uint64_t v36 = v31 < 0;
    goto LABEL_70;
  }

  [v4 domain];
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v44 = [v43 isEqualToString:@"HMErrorDomain"];

  if (v44)
  {
    CFIndex v15 = [v4 code] + 300200;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v46 = [v45 isEqualToString:@"HMFErrorDomain"];

  if (v46)
  {
    CFIndex v15 = [v4 code] + 312600;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v48 = [v47 isEqualToString:@"com.apple.identityservices.error"];

  if (v48)
  {
    uint64_t v49 = [v4 code];
    if (v49 == 200) {
      CFIndex v15 = 300800LL;
    }
    else {
      CFIndex v15 = (v49 + 300400);
    }
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v51 = [v50 isEqualToString:@"IDSLocalPairingErrorDomain"];

  if (v51
    || ([v4 domain],
        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(),
        uint64_t v53 = [v52 isEqualToString:@"IDSAccountRegistrationErrorDomain"],
        v52,
        v53))
  {
    CFIndex v15 = [v4 code] + 300500;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v55 = [v54 isEqualToString:@"com.apple.ids.idssenderrordomain"];

  if (v55)
  {
    CFIndex v15 = [v4 code] + 300700;
    goto LABEL_23;
  }

  [v4 domain];
  char v56 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v57 = [v56 isEqualToString:@"com.apple.ids.idssessionerrorDomain"];

  if (v57)
  {
    uint64_t v58 = [v4 code];
    if (v58 >= 3) {
      CFIndex v15 = v58;
    }
    else {
      CFIndex v15 = v58 + 300801;
    }
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v60 = [v59 isEqualToString:@"signal"];

  if (v60)
  {
    CFIndex v15 = [v4 code] + 312700;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v61 isEqualToString:@"kAFAssistantErrorDomain"]) {
    goto LABEL_130;
  }
  [v4 domain];
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v62 isEqualToString:@"SiriAceErrorDomain"])
  {
LABEL_129:

LABEL_130:
LABEL_131:
    CFIndex v15 = [v4 code] + 320000;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v63 isEqualToString:@"SiriSpeechErrorDomain"])
  {

    goto LABEL_129;
  }

  [v4 domain];
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v65 = [v64 isEqualToString:@"SiriStructuredDictationErrorDomain"];

  if ((v65 & 1) != 0) {
    goto LABEL_131;
  }
  [v4 domain];
  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v67 = [v66 isEqualToString:@"SBSRemoteAlertHandleInvalidationErrorDomain"];

  if (v67)
  {
    CFIndex v15 = [v4 code] + 300180;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v69 = [v68 isEqualToString:@"SSErrorDomain"];

  if (v69)
  {
    CFIndex v15 = [v4 code] + 312300;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v70 isEqualToString:@"TRNearbyDeviceErrorDomain"])
  {
  }

  else
  {
    [v4 domain];
    int v71 = (void *)objc_claimAutoreleasedReturnValue();
    CFMutableDictionaryRef v72 = [v71 isEqualToString:@"TouchRemote"];

    if (!v72)
    {
      [v4 domain];
      int v74 = (void *)objc_claimAutoreleasedReturnValue();
      CFStringRef v75 = [v74 isEqualToString:@"WPErrorDomain"];

      uint64_t v76 = [v4 code];
      if (v75)
      {
        CFIndex v15 = v76 + 300900;
        goto LABEL_23;
      }

      uint64_t v16 = 0;
      if (v76) {
        CFIndex v15 = v76;
      }
      else {
        CFIndex v15 = 4294960596LL;
      }
      goto LABEL_24;
    }
  }

  uint64_t v73 = [v4 code];
  if (v73 <= -9105)
  {
    if (v73 <= -9402)
    {
      if (v73 > -10002)
      {
        switch(v73)
        {
          case -10001LL:
            CFIndex v15 = 300985LL;
            goto LABEL_23;
          case -10000LL:
            CFIndex v15 = 300984LL;
            goto LABEL_23;
          case -9500LL:
            CFIndex v15 = 300983LL;
            goto LABEL_23;
        }
      }

      else
      {
        switch(v73)
        {
          case -11001LL:
            CFIndex v15 = 300988LL;
            goto LABEL_23;
          case -11000LL:
            CFIndex v15 = 300987LL;
            goto LABEL_23;
          case -10002LL:
            CFIndex v15 = 300986LL;
            goto LABEL_23;
        }
      }
    }

    else if (v73 <= -9301)
    {
      switch(v73)
      {
        case -9401LL:
          CFIndex v15 = 300982LL;
          goto LABEL_23;
        case -9400LL:
          CFIndex v15 = 300981LL;
          goto LABEL_23;
        case -9301LL:
          CFIndex v15 = 300980LL;
          goto LABEL_23;
      }
    }

    else if (v73 > -9202)
    {
      if (v73 == -9201)
      {
        CFIndex v15 = 300977LL;
        goto LABEL_23;
      }

      if (v73 == -9200)
      {
        CFIndex v15 = 300976LL;
        goto LABEL_23;
      }
    }

    else
    {
      if (v73 == -9300)
      {
        CFIndex v15 = 300979LL;
        goto LABEL_23;
      }

      if (v73 == -9202)
      {
        CFIndex v15 = 300978LL;
        goto LABEL_23;
      }
    }

uint64_t CFDictionaryGetEmpty()
{
  if (gCFDictionaryGetEmptyOnce != -1) {
    dispatch_once_f(&gCFDictionaryGetEmptyOnce, 0LL, (dispatch_function_t)_CFDictionaryGetEmptyOnce);
  }
  return gCFDictionaryEmpty;
}

CFDictionaryRef _CFDictionaryGetEmptyOnce()
{
  CFDictionaryRef result = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  gCFDictionaryEmpty = (uint64_t)result;
  return result;
}

const UInt8 *CFDictionaryGetOrCopyBytes( const __CFDictionary *a1, const void *a2, CFIndex *a3, UInt8 **a4, int *a5)
{
  CFIndex v18 = 0LL;
  if (a1 && (Value = (const __CFData *)CFDictionaryGetValue(a1, a2)) != 0LL)
  {
    CFMutableDictionaryRef v9 = Value;
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v9);
      CFIndex Length = CFDataGetLength(v9);
      uint64_t v13 = 0LL;
      CFIndex v18 = Length;
LABEL_5:
      int v14 = 0;
      goto LABEL_10;
    }

    if (v10 == CFStringGetTypeID())
    {
      int v14 = CFStringGetOrCopyCStringUTF8((const __CFString *)v9, (const char **)&v17, &v16, (size_t *)&v18);
      if (!v14)
      {
        uint64_t v13 = v16;
        BytePtr = v17;
        goto LABEL_5;
      }

      BytePtr = 0LL;
      uint64_t v13 = 0LL;
    }

    else
    {
      BytePtr = 0LL;
      uint64_t v13 = 0LL;
      int v14 = -6732;
    }
  }

  else
  {
    BytePtr = 0LL;
    uint64_t v13 = 0LL;
    int v14 = -6727;
  }

char *CFDictionaryCopyCString(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  if (!a1 || (Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) == 0LL)
  {
    CFDictionaryRef result = 0LL;
    int v6 = -6727;
    if (!a3) {
      return result;
    }
    goto LABEL_6;
  }

  CFDictionaryRef result = CFCopyCString(Value, &v6);
  if (a3) {
LABEL_6:
  }
    *a3 = v6;
  return result;
}

char *CFDictionaryGetCString(const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      a3 = (char *)CFGetCString(Value, a3, a4);
      int v9 = 0;
      if (!a5) {
        return a3;
      }
      goto LABEL_9;
    }
  }

  if (a4) {
    *a3 = 0;
  }
  else {
    a3 = "";
  }
  int v9 = -6727;
  if (a5) {
LABEL_9:
  }
    *a5 = v9;
  return a3;
}

CFDictionaryRef CFDictionaryGetCFDataOfLength( const __CFDictionary *result, const void *a2, uint64_t a3, int *a4)
{
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      int v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      if (v7 == CFDataGetTypeID())
      {
        CFIndex Length = CFDataGetLength(v6);
        if (Length == a3) {
          int v9 = 0;
        }
        else {
          int v9 = -6743;
        }
        if (Length == a3) {
          CFDictionaryRef result = v6;
        }
        else {
          CFDictionaryRef result = 0LL;
        }
      }

      else
      {
        CFDictionaryRef result = 0LL;
        int v9 = -6756;
      }
    }

    else
    {
      int v9 = -6727;
    }
  }

  else
  {
    int v9 = -6705;
  }

  if (a4) {
    *a4 = v9;
  }
  return result;
}

const char *CFDictionaryGetData( const __CFDictionary *a1, const void *a2, const char *a3, unint64_t a4, void *a5, int *a6)
{
  if (a1)
  {
    Value = (__CFString *)CFDictionaryGetValue(a1, a2);
    if (Value) {
      return CFGetData(Value, a3, a4, a5, a6);
    }
  }

  if (a5) {
    *a5 = 0LL;
  }
  if (a6) {
    *a6 = -6727;
  }
  return a3;
}

uint64_t CFDictionarySetData(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6 = CFDataCreate(0LL, bytes, length);
  if (!v6) {
    return 4294960596LL;
  }
  CFDataRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0LL;
}

double CFDictionaryGetDouble(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value) {
      return CFGetDouble(Value, a3);
    }
  }

  if (a3) {
    *a3 = -6727;
  }
  return 0.0;
}

uint64_t CFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberDoubleType, &valuePtr);
  if (!v5) {
    return 4294960568LL;
  }
  CFNumberRef v6 = v5;
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v6);
  return 0LL;
}

unint64_t CFDictionaryGetHardwareAddress( const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value) {
      return CFGetHardwareAddress(Value, a3, a4, a5);
    }
  }

  if (a3) {
    bzero(a3, a4);
  }
  if (a5) {
    *a5 = -6727;
  }
  return 0LL;
}

uint64_t CFDictionarySetHardwareAddress(__CFDictionary *a1, const void *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a4 != 8 && a4 != 6) {
    return 4294960553LL;
  }
  CFDataRef v4 = &a3[a4];
  CFNumberRef v5 = v9;
  do
  {
    if (v5 == v9)
    {
      CFNumberRef v6 = v9;
    }

    else
    {
      *CFNumberRef v5 = 58;
      CFNumberRef v6 = v5 + 1;
    }

    unsigned int v7 = *a3++;
    *CFNumberRef v6 = a0123456789abcd_0[(unint64_t)v7 >> 4];
    CFNumberRef v5 = v6 + 2;
    v6[1] = a0123456789abcd_0[v7 & 0xF];
  }

  while (a3 < v4);
  *CFNumberRef v5 = 0;
  return CFDictionarySetCString(a1, a2, v9, -1LL);
}

unint64_t CFDictionaryGetInt64(const __CFDictionary *a1, const void *a2, int *a3)
{
  if (a1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
    if (Value) {
      return CFGetInt64(Value, a3);
    }
  }

  if (a3) {
    *a3 = -6727;
  }
  return 0LL;
}

int64_t CFDictionaryGetInt64Ranged( const __CFDictionary *a1, const void *a2, int64_t a3, int64_t a4, int *a5)
{
  if (!a1 || (Value = (const __CFString *)CFDictionaryGetValue(a1, a2)) == 0LL)
  {
    int64_t result = 0LL;
    if (!a5) {
      return result;
    }
    int v10 = -6727;
    goto LABEL_11;
  }

  int64_t result = CFGetInt64(Value, &v11);
  int v10 = v11;
  if (!v11)
  {
    if (result < a3 || result > a4) {
      int v10 = -6710;
    }
    else {
      int v10 = 0;
    }
  }

  if (a5) {
LABEL_11:
  }
    *a5 = v10;
  return result;
}

uint64_t CFDictionarySetInt64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef Int64 = CFNumberCreateInt64(a3);
  if (!Int64) {
    return 4294960568LL;
  }
  CFNumberRef v6 = Int64;
  CFDictionarySetValue(a1, a2, Int64);
  CFRelease(v6);
  return 0LL;
}

uint64_t CFDictionarySetNumber(__CFDictionary *a1, const void *a2, CFNumberType theType, void *valuePtr)
{
  CFNumberRef v6 = CFNumberCreate(0LL, theType, valuePtr);
  if (!v6) {
    return 4294960596LL;
  }
  CFNumberRef v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0LL;
}

CFDictionaryRef CFDictionaryGetTypedValue( const __CFDictionary *result, const void *a2, uint64_t a3, int *a4)
{
  if (result)
  {
    int64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFNumberRef v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      BOOL v8 = v7 == a3;
      if (v7 == a3) {
        int64_t result = v6;
      }
      else {
        int64_t result = 0LL;
      }
      if (v8) {
        int v9 = 0;
      }
      else {
        int v9 = -6756;
      }
    }

    else
    {
      int v9 = -6727;
    }
  }

  else
  {
    int v9 = -6705;
  }

  if (a4) {
    *a4 = v9;
  }
  return result;
}

uint64_t CFDictionaryGetUUIDEx(const __CFDictionary *a1, const void *a2, _OWORD *a3, uint64_t a4)
{
  if (!a1) {
    return 4294960591LL;
  }
  Value = (__CFString *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    return CFGetUUIDEx(Value, a3, a4);
  }
  else {
    return 4294960569LL;
  }
}

uint64_t CFDictionarySetUUIDString( __CFDictionary *a1, const void *a2, _BYTE *a3, uint64_t a4, __int128 *a5, char a6)
{
  CFStringRef v8 = CFCreateUUIDString(a3, a4, a5, a6, &v11);
  if (v8)
  {
    CFStringRef v9 = v8;
    CFDictionarySetValue(a1, a2, v8);
    CFRelease(v9);
  }

  return v11;
}

CFNumberRef CFNumberGetObject(unsigned int a1)
{
  if (a1 > 0x1F) {
    return 0LL;
  }
  pthread_mutex_lock(&gCFNumberGetObjectLock);
  CFNumberRef v2 = (CFNumberRef)gCFNumberArray[a1];
  if (!v2)
  {
    CFNumberRef Int64 = CFNumberCreateInt64(a1);
    CFNumberRef v2 = Int64;
    if (Int64) {
      gCFNumberArray[a1] = Int64;
    }
  }

  pthread_mutex_unlock(&gCFNumberGetObjectLock);
  return v2;
}

void CFSetApplyBlock(const __CFSet *a1, void *context)
{
}

uint64_t _CFSetApplyBlockApplier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

CFStringRef CFStringCreateF(int *a1)
{
  return CFStringCreateV(a1);
}

CFStringRef CFStringCreateV(int *a1)
{
  cStr = 0LL;
  if ((VASPrintF((void **)&cStr) & 0x80000000) != 0)
  {
    CFStringRef v3 = 0LL;
    int v4 = -6700;
    if (!a1) {
      return v3;
    }
    goto LABEL_6;
  }

  CFNumberRef v2 = cStr;
  CFStringRef v3 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  free(v2);
  if (v3) {
    int v4 = 0;
  }
  else {
    int v4 = -6728;
  }
  if (a1) {
LABEL_6:
  }
    *a1 = v4;
  return v3;
}

uint64_t CFStringAppendF(__CFString *a1)
{
  return CFStringAppendV(a1);
}

uint64_t CFStringAppendV(__CFString *a1)
{
  cStr = 0LL;
  CFNumberRef v2 = cStr;
  CFStringAppendCString(a1, cStr, 0x8000100u);
  free(v2);
  return 0LL;
}

uint64_t CFRunLoopRunEx(CFTimeInterval a1)
{
  double Current = CFRunLoopGetCurrent();
  memset(&v7, 0, sizeof(v7));
  CFStringRef v3 = CFRunLoopSourceCreate(0LL, 0LL, &v7);
  int v4 = (CFRunLoopMode *)MEMORY[0x1896051A8];
  if (v3) {
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1896051A8]);
  }
  if (a1 < 0.0)
  {
    CFRunLoopRun();
    uint64_t v5 = 2LL;
    if (!v3) {
      return v5;
    }
    goto LABEL_7;
  }

  uint64_t v5 = CFRunLoopRunFor(a1);
  if (v3)
  {
LABEL_7:
    CFRunLoopRemoveSource(Current, v3, *v4);
    CFRelease(v3);
  }

  return v5;
}

uint64_t CFRunLoopRunFor(CFTimeInterval a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1896051B0];
  uint64_t result = CFRunLoopRunInMode((CFRunLoopMode)*MEMORY[0x1896051B0], a1, 0);
  if ((_DWORD)result == 1)
  {
    double v5 = Current + a1;
    while (1)
    {
      double v6 = v5 - CFAbsoluteTimeGetCurrent();
      if (v6 < 0.0) {
        break;
      }
      usleep(0x4E20u);
      uint64_t result = CFRunLoopRunInMode(v3, v6, 0);
      if ((_DWORD)result != 1) {
        return result;
      }
    }

    return 3LL;
  }

  return result;
}

CFComparisonResult CFSortLocalizedStandardCompare(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0x361uLL);
}

uint64_t MapCFStringToValue( CFTypeRef cf1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (const void **)&a9;
  while (1)
  {
    unsigned int v11 = v16;
    uint64_t v17 = (unsigned int *)(v16 + 1);
    uint64_t v12 = *v11;
    if (!*v11) {
      break;
    }
    uint64_t v13 = v17;
    uint64_t v16 = (const void **)(v17 + 2);
    uint64_t v14 = *v13;
    if (CFEqual(cf1, v12)) {
      return v14;
    }
  }

  return a2;
}

void *NSArrayGetNSNumberAtIndex(void *result, uint64_t a2, int *a3)
{
  if (result)
  {
    uint64_t result = (void *)[result objectAtIndexedSubscript:a2];
    if (result)
    {
      int v4 = result;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      BOOL v6 = (isKindOfClass & 1) == 0;
      if ((isKindOfClass & 1) != 0) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = 0LL;
      }
      if (v6) {
        int v7 = -6756;
      }
      else {
        int v7 = 0;
      }
    }

    else
    {
      int v7 = -6727;
    }
  }

  else
  {
    int v7 = -6705;
  }

  if (a3) {
    *a3 = v7;
  }
  return result;
}

void *NSDictionaryGetNSNumber(void *result, uint64_t a2, int *a3)
{
  if (result)
  {
    uint64_t result = (void *)[result objectForKeyedSubscript:a2];
    if (result)
    {
      int v4 = result;
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      BOOL v6 = (isKindOfClass & 1) == 0;
      if ((isKindOfClass & 1) != 0) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = 0LL;
      }
      if (v6) {
        int v7 = -6756;
      }
      else {
        int v7 = 0;
      }
    }

    else
    {
      int v7 = -6727;
    }
  }

  else
  {
    int v7 = -6705;
  }

  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t NSGetNSNumber(uint64_t result, int *a2)
{
  if (!result)
  {
    int v6 = -6705;
    if (!a2) {
      return result;
    }
    goto LABEL_9;
  }

  uint64_t v3 = result;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  BOOL v5 = (isKindOfClass & 1) == 0;
  if ((isKindOfClass & 1) != 0) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = 0LL;
  }
  if (v5) {
    int v6 = -6756;
  }
  else {
    int v6 = 0;
  }
  if (a2) {
LABEL_9:
  }
    *a2 = v6;
  return result;
}

double CFDictionaryGetCGSize(const __CFDictionary *a1, const void *a2, int *a3)
{
  v12[0] = ((double (__cdecl *)())getCGSizeZero[0])();
  v12[1] = v6;
  Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    uint64_t v8 = (uint64_t)Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFDictionaryGetTypeID())
    {
      if (((unsigned int (*)(uint64_t, uint64_t))softLinkCGSizeMakeWithDictionaryRepresentation[0])( v8,  (uint64_t)v12))
      {
        int v10 = 0;
      }

      else
      {
        int v10 = -6700;
      }
    }

    else
    {
      int v10 = -6756;
    }
  }

  else
  {
    int v10 = -6727;
  }

  if (a3) {
    *a3 = v10;
  }
  return *(double *)v12;
}

double CGSizeZeroFunction()
{
  return *(double *)&constantValCGSizeZero;
}

double initValCGSizeZero()
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  v0 = (__int128 *)dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGSizeZero");
  if (v0) {
    constantValCGSizeZero = *v0;
  }
  getCGSizeZero[0] = (uint64_t (*)())CGSizeZeroFunction;
  return *(double *)&constantValCGSizeZero;
}

uint64_t initCGSizeMakeWithDictionaryRepresentation(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGSizeMakeWithDictionaryRepresentation[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGSizeMakeWithDictionaryRepresentation");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGSizeMakeWithDictionaryRepresentation[0])(a1, a2);
}

void *__CoreGraphicsLibrary_block_invoke_409()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics", 2);
  CoreGraphicsLibrary_sLib_407 = (uint64_t)result;
  return result;
}

uint64_t CFDictionarySetCGSize(__CFDictionary *a1, const void *a2, double a3, double a4)
{
  uint64_t v6 = (const void *)((uint64_t (*)(double, double))softLinkCGSizeCreateDictionaryRepresentation[0])(a3, a4);
  if (!v6) {
    return 4294960596LL;
  }
  int v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0LL;
}

uint64_t initCGSizeCreateDictionaryRepresentation(double a1, double a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGSizeCreateDictionaryRepresentation[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGSizeCreateDictionaryRepresentation");
  return ((uint64_t (*)(double, double))softLinkCGSizeCreateDictionaryRepresentation[0])(a1, a2);
}

double CFDictionaryGetCGRect(const __CFDictionary *a1, const void *a2, int *a3)
{
  v14[0] = getCGRectZero();
  v14[1] = v6;
  v14[2] = v7;
  v14[3] = v8;
  Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    uint64_t v10 = (uint64_t)Value;
    CFTypeID v11 = CFGetTypeID(Value);
    if (v11 == CFDictionaryGetTypeID())
    {
      if (((unsigned int (*)(uint64_t, uint64_t))softLinkCGRectMakeWithDictionaryRepresentation[0])( v10,  (uint64_t)v14))
      {
        int v12 = 0;
      }

      else
      {
        int v12 = -6700;
      }
    }

    else
    {
      int v12 = -6756;
    }
  }

  else
  {
    int v12 = -6727;
  }

  if (a3) {
    *a3 = v12;
  }
  return *(double *)v14;
}

double CGRectZeroFunction()
{
  return *(double *)&constantValCGRectZero;
}

double initValCGRectZero()
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  v0 = (__int128 *)dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGRectZero");
  if (v0)
  {
    __int128 v1 = v0[1];
    constantValCGRectZero = *v0;
    *(_OWORD *)&qword_18C69E600 = v1;
  }

  getCGRectZero = (uint64_t (*)())CGRectZeroFunction;
  return *(double *)&constantValCGRectZero;
}

uint64_t initCGRectMakeWithDictionaryRepresentation(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGRectMakeWithDictionaryRepresentation[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGRectMakeWithDictionaryRepresentation");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGRectMakeWithDictionaryRepresentation[0])(a1, a2);
}

uint64_t CFDictionarySetCGRect( __CFDictionary *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v8 = (const void *)((uint64_t (*)(double, double, double, double))softLinkCGRectCreateDictionaryRepresentation[0])( a3,  a4,  a5,  a6);
  if (!v8) {
    return 4294960596LL;
  }
  CFTypeID v9 = v8;
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v9);
  return 0LL;
}

uint64_t initCGRectCreateDictionaryRepresentation(double a1, double a2, double a3, double a4)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGRectCreateDictionaryRepresentation[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGRectCreateDictionaryRepresentation");
  return ((uint64_t (*)(double, double, double, double))softLinkCGRectCreateDictionaryRepresentation[0])( a1,  a2,  a3,  a4);
}

uint64_t CGColorSpaceGetGray()
{
  if (CGColorSpaceGetGray_sOnce != -1) {
    dispatch_once_f( &CGColorSpaceGetGray_sOnce,  &CGColorSpaceGetGray_sColorSpace,  (dispatch_function_t)_CGColorSpaceGetGray);
  }
  return CGColorSpaceGetGray_sColorSpace;
}

uint64_t _CGColorSpaceGetGray(uint64_t *a1)
{
  uint64_t result = softLinkCGColorSpaceCreateDeviceGray[0]();
  *a1 = result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceGray()
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGColorSpaceCreateDeviceGray[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGColorSpaceCreateDeviceGray");
  return softLinkCGColorSpaceCreateDeviceGray[0]();
}

uint64_t CGColorSpaceGetRGB()
{
  if (CGColorSpaceGetRGB_sOnce != -1) {
    dispatch_once_f( &CGColorSpaceGetRGB_sOnce,  &CGColorSpaceGetRGB_sColorSpace,  (dispatch_function_t)_CGColorSpaceGetRGB);
  }
  return CGColorSpaceGetRGB_sColorSpace;
}

uint64_t _CGColorSpaceGetRGB(uint64_t *a1)
{
  uint64_t result = softLinkCGColorSpaceCreateDeviceRGB_419[0]();
  *a1 = result;
  return result;
}

uint64_t initCGColorSpaceCreateDeviceRGB_420()
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGColorSpaceCreateDeviceRGB_419[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGColorSpaceCreateDeviceRGB");
  return softLinkCGColorSpaceCreateDeviceRGB_419[0]();
}

uint64_t CGColorCreateWithRGB(float a1, float a2, float a3, float a4)
{
  v5[4] = *(double *)MEMORY[0x1895F89C0];
  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  if (CGColorSpaceGetRGB_sOnce != -1) {
    dispatch_once_f( &CGColorSpaceGetRGB_sOnce,  &CGColorSpaceGetRGB_sColorSpace,  (dispatch_function_t)_CGColorSpaceGetRGB);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGColorCreate[0])( CGColorSpaceGetRGB_sColorSpace,  (uint64_t)v5);
}

uint64_t initCGColorCreate(uint64_t a1, uint64_t a2)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGColorCreate[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGColorCreate");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGColorCreate[0])(a1, a2);
}

uint64_t _CGColorCreateWithRGB(uint64_t a1)
{
  uint64_t result = CGColorCreateWithRGB(*(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
  **(void **)(a1 + 16) = result;
  return result;
}

uint64_t CGColorGetBlack()
{
  if (CGColorGetBlack_sOnce != -1) {
    dispatch_once_f(&CGColorGetBlack_sOnce, &CGColorGetBlack_sContext, (dispatch_function_t)_CGColorCreateWithRGB);
  }
  return CGColorGetBlack_sColor;
}

uint64_t initCGBitmapContextCreateImage(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGBitmapContextCreateImage[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGBitmapContextCreateImage");
  return ((uint64_t (*)(uint64_t))softLinkCGBitmapContextCreateImage[0])(a1);
}

uint64_t initCGContextDrawImage(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGContextDrawImage[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGContextDrawImage");
  return ((uint64_t (*)(uint64_t, uint64_t, double, double, double, double))softLinkCGContextDrawImage[0])( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t initCGBitmapContextCreate( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGBitmapContextCreate[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGBitmapContextCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGBitmapContextCreate[0])( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t initCGImageGetBitmapInfo(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGImageGetBitmapInfo[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGImageGetBitmapInfo");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetBitmapInfo[0])(a1);
}

uint64_t initCGImageGetColorSpace(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGImageGetColorSpace[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGImageGetColorSpace");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetColorSpace[0])(a1);
}

uint64_t initCGImageGetBitsPerComponent(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGImageGetBitsPerComponent[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGImageGetBitsPerComponent");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerComponent[0])(a1);
}

uint64_t initCGBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGBitmapGetAlignedBytesPerRow[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGBitmapGetAlignedBytesPerRow");
  return ((uint64_t (*)(uint64_t))softLinkCGBitmapGetAlignedBytesPerRow[0])(a1);
}

uint64_t initCGImageGetBitsPerPixel(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGImageGetBitsPerPixel[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGImageGetBitsPerPixel");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerPixel[0])(a1);
}

CFMutableDataRef CGImageCreateData(uint64_t a1, uint64_t a2, int *a3)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0LL, 0LL);
  CFMutableDataRef v7 = Mutable;
  if (Mutable)
  {
    uint64_t v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithData[0])( (uint64_t)Mutable,  a2,  1LL,  0LL);
    if (v8)
    {
      CFTypeID v9 = (const void *)v8;
      ((void (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage_433[0])(v8, a1, 0LL);
      char v10 = ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize_434[0])((uint64_t)v9);
      CFRelease(v9);
      if ((v10 & 1) != 0)
      {
        int v11 = 0;
        goto LABEL_5;
      }

      int v11 = -6747;
    }

    else
    {
      int v11 = -6732;
    }

    CFRelease(v7);
    CFMutableDataRef v7 = 0LL;
  }

  else
  {
    int v11 = -6728;
  }

uint64_t initCGImageDestinationFinalize_435(uint64_t a1)
{
  if (ImageIOLibrary_sOnce_436 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  }
  softLinkCGImageDestinationFinalize_434[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib_437,  "CGImageDestinationFinalize");
  return ((uint64_t (*)(uint64_t))softLinkCGImageDestinationFinalize_434[0])(a1);
}

void *__ImageIOLibrary_block_invoke_439()
{
  uint64_t result = dlopen("/System/Library/Frameworks/ImageIO.framework/ImageIO", 2);
  ImageIOLibrary_sLib_437 = (uint64_t)result;
  return result;
}

uint64_t initCGImageDestinationAddImage_441(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce_436 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  }
  softLinkCGImageDestinationAddImage_433[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib_437,  "CGImageDestinationAddImage");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationAddImage_433[0])(a1, a2, a3);
}

uint64_t initCGImageDestinationCreateWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (ImageIOLibrary_sOnce_436 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  }
  softLinkCGImageDestinationCreateWithData[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib_437,  "CGImageDestinationCreateWithData");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGImageDestinationCreateWithData[0])( a1,  a2,  a3,  a4);
}

uint64_t CGImageCreateWithData(uint64_t a1, int *a2)
{
  uint64_t v3 = ((uint64_t (*)(uint64_t, uint64_t))softLinkCGImageSourceCreateWithData[0])(a1, 0LL);
  if (!v3)
  {
    uint64_t v5 = 0LL;
    int v6 = -6700;
    if (!a2) {
      return v5;
    }
    goto LABEL_7;
  }

  int v4 = (const void *)v3;
  if (((uint64_t (*)(uint64_t))softLinkCGImageSourceGetCount[0])(v3))
  {
    uint64_t v5 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageSourceCreateImageAtIndex[0])( (uint64_t)v4,  0LL,  0LL);
    if (v5) {
      int v6 = 0;
    }
    else {
      int v6 = -6700;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    int v6 = -6764;
  }

  CFRelease(v4);
  if (a2) {
LABEL_7:
  }
    *a2 = v6;
  return v5;
}

uint64_t initCGImageSourceCreateImageAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ImageIOLibrary_sOnce_436 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  }
  softLinkCGImageSourceCreateImageAtIndex[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib_437,  "CGImageSourceCreateImageAtIndex");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCGImageSourceCreateImageAtIndex[0])(a1, a2, a3);
}

uint64_t initCGImageSourceGetCount(uint64_t a1)
{
  if (ImageIOLibrary_sOnce_436 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  }
  softLinkCGImageSourceGetCount[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib_437,  "CGImageSourceGetCount");
  return ((uint64_t (*)(uint64_t))softLinkCGImageSourceGetCount[0])(a1);
}

uint64_t initCGImageSourceCreateWithData(uint64_t a1, uint64_t a2)
{
  if (ImageIOLibrary_sOnce_436 != -1) {
    dispatch_once(&ImageIOLibrary_sOnce_436, &__block_literal_global_27);
  }
  softLinkCGImageSourceCreateWithData[0] = (uint64_t (*)())dlsym( (void *)ImageIOLibrary_sLib_437,  "CGImageSourceCreateWithData");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCGImageSourceCreateWithData[0])(a1, a2);
}

CFDictionaryRef CreateScaledImageDataWithData(const void *a1, int *a2, double a3, double a4)
{
  keys[1] = *(void **)MEMORY[0x1895F89C0];
  CFTypeRef v38 = 0LL;
  CFTypeRef cf = 0LL;
  CFTypeRef v36 = 0LL;
  CFTypeRef v37 = 0LL;
  keys[0] = (void *)getkFigJPEGHighSpeedDecode[0]();
  values = (void *)*MEMORY[0x189604DE8];
  CFDictionaryRef Data = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  if (!Data)
  {
LABEL_51:
    int v9 = -6728;
    goto LABEL_18;
  }

  int v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceFromJPEG[0])( (uint64_t)a1,  (uint64_t)Data,  (uint64_t)&cf);
  CFRelease(Data);
  if (v9) {
    goto LABEL_16;
  }
  double v10 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetWidth[0])((uint64_t)cf);
  double v11 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetHeight[0])((uint64_t)cf);
  double v12 = v10;
  double v13 = v11;
  if (a3 < v10)
  {
    double v12 = a3;
    double v13 = a3 * v11 / v10;
  }

  if (v13 > a4)
  {
    double v13 = a4;
    double v12 = a4 * v10 / v11;
  }

  if (v12 == v10 && v13 == v11)
  {
    CFRelease(cf);
    CFRetain(a1);
    int v9 = 0;
    CFDictionaryRef Data = (CFDictionaryRef)a1;
    goto LABEL_18;
  }

  int v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCVPixelBufferCreateWithIOSurface[0])( 0LL,  (uint64_t)cf,  0LL,  (uint64_t)&v38);
  CFRelease(cf);
  if (v9)
  {
LABEL_16:
    CFDictionaryRef Data = 0LL;
    goto LABEL_18;
  }

  int v15 = ((uint64_t (*)(uint64_t, uint64_t))softLinkVTPixelTransferSessionCreate[0])(0LL, (uint64_t)&v36);
  if (v15
    || (int v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0])( (int)v12,  (int)v13,  2037741158LL,  (uint64_t)&v37)) != 0 || (int v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkVTPixelTransferSessionTransferImage[0])( (uint64_t)v36,  (uint64_t)v38,  (uint64_t)v37)) != 0)
  {
    int v9 = v15;
    goto LABEL_16;
  }

  CFRelease(v38);
  CFTypeRef v38 = 0LL;
  CFRelease(v36);
  CFTypeRef v36 = 0LL;
  uint64_t v33 = (uint64_t (*(uint64_t))softLinkCVPixelBufferGetIOSurface[0])((uint64_t)v37);
  CFDictionaryRef Data = v33;
  if (v33)
  {
    CFRetain(v33);
    CFRelease(v37);
    CFTypeRef v37 = 0LL;
    memset(length, 0, sizeof(length));
    int v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigAspenCreateJPEGFromIOSurface[0])( (uint64_t)Data,  0LL,  (uint64_t)&length[1],  (uint64_t)length);
    CFRelease(Data);
    if (v9) {
      goto LABEL_16;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock_447[0])(*(uint64_t *)&length[1], 1LL, 0LL);
    uint64_t v34 = (const UInt8 *)((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress_448[0])(*(uint64_t *)&length[1]);
    CFDictionaryRef Data = CFDataCreate(0LL, v34, length[0]);
    ((void (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock_449[0])(*(uint64_t *)&length[1], 1LL, 0LL);
    CFRelease(*(CFTypeRef *)&length[1]);
    if (Data)
    {
      int v9 = 0;
      goto LABEL_18;
    }

    goto LABEL_51;
  }

  int v9 = -6700;
LABEL_18:
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (a2) {
    *a2 = v9;
  }
  if (!Data)
  {
    uint64_t v16 = CGImageCreateWithData((uint64_t)a1, (int *)&cf);
    CFDictionaryRef Data = (CFDictionaryRef)v16;
    if (v16)
    {
      double v17 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkCGImageGetWidth[0])(v16);
      double v18 = (double)(unint64_t)((uint64_t (*)(uint64_t))softLinkCGImageGetHeight[0])((uint64_t)Data);
      double v19 = v17;
      double v20 = v18;
      if (a3 < v17)
      {
        double v19 = a3;
        double v20 = a3 * v18 / v17;
      }

      if (v20 > a4)
      {
        double v20 = a4;
        double v19 = a4 * v17 / v18;
      }

      if (v19 != v17 || v20 != v18)
      {
        unint64_t v22 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerPixel[0])((uint64_t)Data);
        uint64_t v23 = ((uint64_t (*)(uint64_t))softLinkCGBitmapGetAlignedBytesPerRow[0])((unint64_t)((v19 * (double)v22 + 7.0) * 0.125));
        uint64_t v24 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitsPerComponent[0])((uint64_t)Data);
        uint64_t v25 = ((uint64_t (*)(uint64_t))softLinkCGImageGetColorSpace[0])((uint64_t)Data);
        uint64_t v26 = ((uint64_t (*)(uint64_t))softLinkCGImageGetBitmapInfo[0])((uint64_t)Data);
        uint64_t v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkCGBitmapContextCreate[0])( 0LL,  (unint64_t)v19,  (unint64_t)v20,  v24,  v23,  v25,  v26);
        if (v27)
        {
          uint64_t v28 = (const void *)v27;
          ((void (*)(uint64_t, uint64_t, double, double, double, double))softLinkCGContextDrawImage[0])( v27,  (uint64_t)Data,  0.0,  0.0,  v19,  v20);
          uint64_t v29 = (const void *)((uint64_t (*)(uint64_t))softLinkCGBitmapContextCreateImage[0])((uint64_t)v28);
          CFRelease(v28);
          if (v29) {
            int v30 = 0;
          }
          else {
            int v30 = -6700;
          }
          LODWORD(cf) = v30;
          CFRelease(Data);
          if (v29)
          {
            uint64_t v31 = getkUTTypeJPEG[0]();
            CFDictionaryRef Data = CGImageCreateData((uint64_t)v29, v31, (int *)&cf);
            CFRelease(v29);
            if (!a2) {
              return Data;
            }
            goto LABEL_45;
          }
        }

        else
        {
          LODWORD(cf) = -6700;
          CFRelease(Data);
        }

        CFDictionaryRef Data = 0LL;
        if (!a2) {
          return Data;
        }
LABEL_45:
        *a2 = (int)cf;
        return Data;
      }

      CFRelease(Data);
      CFRetain(a1);
      LODWORD(cf) = 0;
      CFDictionaryRef Data = (CFDictionaryRef)a1;
    }

    if (a2) {
      goto LABEL_45;
    }
  }

  return Data;
}

uint64_t initValkFigJPEGHighSpeedDecode()
{
  if (CelestialLibrary_sOnce != -1) {
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_42);
  }
  v0 = (uint64_t *)dlsym((void *)CelestialLibrary_sLib, "kFigJPEGHighSpeedDecode");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkFigJPEGHighSpeedDecode = result;
  }

  else
  {
    uint64_t result = constantValkFigJPEGHighSpeedDecode;
  }

  getkFigJPEGHighSpeedDecode[0] = kFigJPEGHighSpeedDecodeFunction;
  return result;
}

uint64_t kFigJPEGHighSpeedDecodeFunction()
{
  return constantValkFigJPEGHighSpeedDecode;
}

uint64_t initValkUTTypeJPEG()
{
  if (MobileCoreServicesLibrary_sOnce != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce, &__block_literal_global_38);
  }
  v0 = (uint64_t *)dlsym((void *)MobileCoreServicesLibrary_sLib, "kUTTypeJPEG");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkUTTypeJPEG = result;
  }

  else
  {
    uint64_t result = constantValkUTTypeJPEG;
  }

  getkUTTypeJPEG[0] = kUTTypeJPEGFunction;
  return result;
}

uint64_t kUTTypeJPEGFunction()
{
  return constantValkUTTypeJPEG;
}

void *__MobileCoreServicesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
  MobileCoreServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCGImageGetHeight(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGImageGetHeight[0] = (uint64_t (*)())dlsym( (void *)CoreGraphicsLibrary_sLib_407,  "CGImageGetHeight");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetHeight[0])(a1);
}

uint64_t initCGImageGetWidth(uint64_t a1)
{
  if (CoreGraphicsLibrary_sOnce_405 != -1) {
    dispatch_once(&CoreGraphicsLibrary_sOnce_405, &__block_literal_global_406);
  }
  softLinkCGImageGetWidth[0] = (uint64_t (*)())dlsym((void *)CoreGraphicsLibrary_sLib_407, "CGImageGetWidth");
  return ((uint64_t (*)(uint64_t))softLinkCGImageGetWidth[0])(a1);
}

uint64_t initIOSurfaceUnlock_454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  }
  softLinkIOSurfaceUnlock_449[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceUnlock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceUnlock_449[0])(a1, a2, a3);
}

void *__IOSurfaceLibrary_block_invoke_458()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/IOSurface.framework/IOSurface", 2);
  IOSurfaceLibrary_sLib_456 = (uint64_t)result;
  return result;
}

uint64_t initIOSurfaceGetBaseAddress_460(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  }
  softLinkIOSurfaceGetBaseAddress_448[0] = (uint64_t (*)())dlsym( (void *)IOSurfaceLibrary_sLib_456,  "IOSurfaceGetBaseAddress");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetBaseAddress_448[0])(a1);
}

uint64_t initIOSurfaceLock_462(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  }
  softLinkIOSurfaceLock_447[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceLock");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkIOSurfaceLock_447[0])(a1, a2, a3);
}

uint64_t initFigAspenCreateJPEGFromIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CelestialLibrary_sOnce != -1) {
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_42);
  }
  softLinkFigAspenCreateJPEGFromIOSurface[0] = (uint64_t (*)())dlsym( (void *)CelestialLibrary_sLib,  "FigAspenCreateJPEGFromIOSurface");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigAspenCreateJPEGFromIOSurface[0])( a1,  a2,  a3,  a4);
}

void *__CelestialLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
  CelestialLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCVPixelBufferGetIOSurface(uint64_t a1)
{
  if (CoreVideoLibrary_sOnce != -1) {
    dispatch_once(&CoreVideoLibrary_sOnce, &__block_literal_global_52);
  }
  softLinkCVPixelBufferGetIOSurface[0] = (uint64_t (*)())dlsym( (void *)CoreVideoLibrary_sLib,  "CVPixelBufferGetIOSurface");
  return ((uint64_t (*)(uint64_t))softLinkCVPixelBufferGetIOSurface[0])(a1);
}

void *__CoreVideoLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreVideo.framework/CoreVideo", 2);
  CoreVideoLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initVTPixelTransferSessionTransferImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (VideoToolboxLibrary_sOnce != -1) {
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_56);
  }
  softLinkVTPixelTransferSessionTransferImage[0] = (uint64_t (*)())dlsym( (void *)VideoToolboxLibrary_sLib,  "VTPixelTransferSessionTransferImage");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkVTPixelTransferSessionTransferImage[0])(a1, a2, a3);
}

void *__VideoToolboxLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/VideoToolbox.framework/VideoToolbox", 2);
  VideoToolboxLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initFigCreateIOSurfaceBackedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (VideoToolboxLibrary_sOnce != -1) {
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_56);
  }
  softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0] = (uint64_t (*)())dlsym( (void *)VideoToolboxLibrary_sLib,  "FigCreateIOSurfaceBackedCVPixelBuffer");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceBackedCVPixelBuffer[0])( a1,  a2,  a3,  a4);
}

uint64_t initVTPixelTransferSessionCreate(uint64_t a1, uint64_t a2)
{
  if (VideoToolboxLibrary_sOnce != -1) {
    dispatch_once(&VideoToolboxLibrary_sOnce, &__block_literal_global_56);
  }
  softLinkVTPixelTransferSessionCreate[0] = (uint64_t (*)())dlsym( (void *)VideoToolboxLibrary_sLib,  "VTPixelTransferSessionCreate");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkVTPixelTransferSessionCreate[0])(a1, a2);
}

uint64_t initCVPixelBufferCreateWithIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (CoreVideoLibrary_sOnce != -1) {
    dispatch_once(&CoreVideoLibrary_sOnce, &__block_literal_global_52);
  }
  softLinkCVPixelBufferCreateWithIOSurface[0] = (uint64_t (*)())dlsym( (void *)CoreVideoLibrary_sLib,  "CVPixelBufferCreateWithIOSurface");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkCVPixelBufferCreateWithIOSurface[0])( a1,  a2,  a3,  a4);
}

uint64_t initIOSurfaceGetHeight(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  }
  softLinkIOSurfaceGetHeight[0] = (uint64_t (*)())dlsym( (void *)IOSurfaceLibrary_sLib_456,  "IOSurfaceGetHeight");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetHeight[0])(a1);
}

uint64_t initIOSurfaceGetWidth(uint64_t a1)
{
  if (IOSurfaceLibrary_sOnce_455 != -1) {
    dispatch_once(&IOSurfaceLibrary_sOnce_455, &__block_literal_global_47);
  }
  softLinkIOSurfaceGetWidth[0] = (uint64_t (*)())dlsym((void *)IOSurfaceLibrary_sLib_456, "IOSurfaceGetWidth");
  return ((uint64_t (*)(uint64_t))softLinkIOSurfaceGetWidth[0])(a1);
}

uint64_t initFigCreateIOSurfaceFromJPEG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CelestialLibrary_sOnce != -1) {
    dispatch_once(&CelestialLibrary_sOnce, &__block_literal_global_42);
  }
  softLinkFigCreateIOSurfaceFromJPEG[0] = (uint64_t (*)())dlsym( (void *)CelestialLibrary_sLib,  "FigCreateIOSurfaceFromJPEG");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkFigCreateIOSurfaceFromJPEG[0])(a1, a2, a3);
}

uint64_t chacha20_all_64x64( int32x4_t *a1, uint64_t *a2, uint64_t a3, int8x16_t *a4, unint64_t a5, int8x16_t *a6)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  int32x4_t v6 = *a1;
  int32x4_t v7 = a1[1];
  v10[0] = (int32x4_t)xmmword_186B49BF0;
  v10[1] = v6;
  v10[2] = v7;
  uint64_t v11 = a3;
  if (a2) {
    uint64_t v8 = *a2;
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v12 = v8;
  uint64_t v13 = 0LL;
  _chacha20_xor(v10, a6, a4, a5);
  return memset_s(v10, 0x88uLL, 0, 0x88uLL);
}

int32x4_t *_chacha20_xor(int32x4_t *result, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t v201 = *MEMORY[0x1895F89C0];
  int32x4_t v5 = result[1];
  int32x4_t v4 = result[2];
  int32x4_t v6 = result[3];
  if (a4 >= 0xC0)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = a4 / 0xC0;
    do
    {
      int32x4_t v9 = vaddq_s32(v6, (int32x4_t)xmmword_186B49C00);
      __int32 v11 = result[1].i32[0];
      __int32 v10 = result[1].i32[1];
      __int32 v12 = result[1].i32[2];
      __int32 v13 = result[1].i32[3];
      __int32 v14 = result[2].i32[0];
      __int32 v15 = result[2].i32[1];
      __int32 v16 = result[2].i32[2];
      __int32 v17 = result[2].i32[3];
      int v18 = 3 * v7 + 2;
      __int32 v19 = result[3].i32[1];
      int v20 = result[3].i32[0] + v18;
      uint64_t v21 = -10LL;
      int v22 = 1634760805;
      int v23 = 857760878;
      int v24 = 2036477234;
      int v25 = 1797285236;
      int32x4_t v26 = (int32x4_t)xmmword_186B49BF0;
      int32x4_t v27 = v5;
      int32x4_t v28 = v4;
      int32x4_t v29 = v6;
      int32x4_t v30 = (int32x4_t)xmmword_186B49BF0;
      int32x4_t v31 = v5;
      int32x4_t v32 = v4;
      int32x4_t v33 = v9;
      __int32 v35 = result[3].i32[2];
      __int32 v34 = result[3].i32[3];
      do
      {
        int32x4_t v36 = vaddq_s32(v26, v27);
        int32x4_t v37 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v36, (int8x16_t)v29));
        int32x4_t v38 = vaddq_s32(v28, v37);
        int32x4_t v39 = (int32x4_t)veorq_s8((int8x16_t)v38, (int8x16_t)v27);
        int32x4_t v40 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v39, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v39, 0x14uLL));
        int32x4_t v41 = vaddq_s32(v40, v36);
        int32x4_t v42 = (int32x4_t)veorq_s8((int8x16_t)v41, (int8x16_t)v37);
        int32x4_t v43 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v42, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 0x18uLL));
        int8x16_t v44 = (int8x16_t)vaddq_s32(v43, v38);
        int32x4_t v45 = (int32x4_t)veorq_s8(v44, (int8x16_t)v40);
        int8x16_t v46 = vorrq_s8((int8x16_t)vshlq_n_s32(v45, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v45, 0x19uLL));
        int32x4_t v47 = (int32x4_t)vextq_s8(v46, v46, 4uLL);
        int32x4_t v48 = vaddq_s32(v47, v41);
        int32x4_t v49 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8( (int8x16_t)v48,  vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL)));
        int32x4_t v50 = vaddq_s32((int32x4_t)vextq_s8(v44, v44, 8uLL), v49);
        int32x4_t v51 = (int32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)v47);
        int32x4_t v52 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v51, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v51, 0x14uLL));
        int32x4_t v26 = vaddq_s32(v52, v48);
        int32x4_t v53 = (int32x4_t)veorq_s8((int8x16_t)v26, (int8x16_t)v49);
        int32x4_t v54 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v53, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v53, 0x18uLL));
        int8x16_t v55 = (int8x16_t)vaddq_s32(v54, v50);
        int32x4_t v56 = (int32x4_t)veorq_s8(v55, (int8x16_t)v52);
        int8x16_t v57 = vorrq_s8((int8x16_t)vshlq_n_s32(v56, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v56, 0x19uLL));
        int32x4_t v27 = (int32x4_t)vextq_s8(v57, v57, 0xCuLL);
        int32x4_t v28 = (int32x4_t)vextq_s8(v55, v55, 8uLL);
        int32x4_t v29 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
        int32x4_t v58 = vaddq_s32(v30, v31);
        int32x4_t v59 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v58, (int8x16_t)v33));
        int32x4_t v60 = vaddq_s32(v32, v59);
        __int32 v61 = v22 + v11;
        int v62 = (v22 + v11) ^ v20;
        HIDWORD(v63) = v62;
        LODWORD(v63) = v62;
        int v64 = (v63 >> 16) + v14;
        int v65 = v64 ^ v11;
        HIDWORD(v63) = v65;
        LODWORD(v63) = v65;
        int32x4_t v66 = (int32x4_t)veorq_s8((int8x16_t)v60, (int8x16_t)v31);
        int v67 = (v63 >> 20) + v61;
        LODWORD(v63) = v67 ^ __ROR4__(v62, 16);
        int v68 = v63;
        HIDWORD(v63) = v63;
        int v69 = (v63 >> 24) + v64;
        LODWORD(v63) = v69 ^ __ROR4__(v65, 20);
        int v70 = v63;
        HIDWORD(v63) = v63;
        int v71 = v63 >> 25;
        __int32 v72 = v23 + v10;
        int v73 = (v23 + v10) ^ v19;
        HIDWORD(v63) = v73;
        LODWORD(v63) = v73;
        int32x4_t v74 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v66, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v66, 0x14uLL));
        int v75 = (v63 >> 16) + v15;
        int v76 = v75 ^ v10;
        HIDWORD(v63) = v76;
        LODWORD(v63) = v76;
        int32x4_t v77 = vaddq_s32(v74, v58);
        int v78 = (v63 >> 20) + v72;
        LODWORD(v63) = v78 ^ __ROR4__(v73, 16);
        int v79 = v63;
        HIDWORD(v63) = v63;
        int32x4_t v80 = (int32x4_t)veorq_s8((int8x16_t)v77, (int8x16_t)v59);
        int v81 = (v63 >> 24) + v75;
        LODWORD(v63) = v81 ^ __ROR4__(v76, 20);
        int v82 = v63;
        HIDWORD(v63) = v63;
        int v83 = v63 >> 25;
        __int32 v84 = v24 + v12;
        int v85 = (v24 + v12) ^ v35;
        HIDWORD(v63) = v85;
        LODWORD(v63) = v85;
        int v86 = (v63 >> 16) + v16;
        int v87 = v86 ^ v12;
        HIDWORD(v63) = v87;
        LODWORD(v63) = v87;
        int32x4_t v88 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v80, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v80, 0x18uLL));
        int v89 = (v63 >> 20) + v84;
        LODWORD(v63) = v89 ^ __ROR4__(v85, 16);
        int v90 = v63;
        HIDWORD(v63) = v63;
        int8x16_t v91 = (int8x16_t)vaddq_s32(v88, v60);
        int v92 = (v63 >> 24) + v86;
        LODWORD(v63) = v92 ^ __ROR4__(v87, 20);
        int v93 = v63;
        HIDWORD(v63) = v63;
        int v94 = v63 >> 25;
        int32x4_t v95 = (int32x4_t)veorq_s8(v91, (int8x16_t)v74);
        __int32 v96 = v25 + v13;
        int v97 = v96 ^ v34;
        HIDWORD(v63) = v97;
        LODWORD(v63) = v97;
        int8x16_t v98 = vorrq_s8((int8x16_t)vshlq_n_s32(v95, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v95, 0x19uLL));
        int v99 = (v63 >> 16) + v17;
        int v100 = v99 ^ v13;
        HIDWORD(v63) = v99 ^ v13;
        LODWORD(v63) = v99 ^ v13;
        int32x4_t v101 = (int32x4_t)vextq_s8(v98, v98, 4uLL);
        int v102 = (v63 >> 20) + v96;
        int32x4_t v104 = vaddq_s32(v101, v77);
        int32x4_t v105 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8( (int8x16_t)v104,  vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL)));
        LODWORD(v63) = v102 ^ __ROR4__(v97, 16);
        int v103 = v63;
        HIDWORD(v63) = v63;
        int32x4_t v106 = vaddq_s32((int32x4_t)vextq_s8(v91, v91, 8uLL), v105);
        int32x4_t v107 = (int32x4_t)veorq_s8((int8x16_t)v106, (int8x16_t)v101);
        int v108 = (v63 >> 24) + v99;
        int32x4_t v110 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v107, 0xCuLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0x14uLL));
        LODWORD(v63) = v108 ^ __ROR4__(v100, 20);
        int v109 = v63;
        HIDWORD(v63) = v63;
        int v111 = v63 >> 25;
        int32x4_t v30 = vaddq_s32(v110, v104);
        int32x4_t v112 = (int32x4_t)veorq_s8((int8x16_t)v30, (int8x16_t)v105);
        int v113 = v83 + v67;
        int32x4_t v115 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v112, 8uLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v112, 0x18uLL));
        int8x16_t v116 = (int8x16_t)vaddq_s32(v115, v106);
        int32x4_t v117 = (int32x4_t)veorq_s8(v116, (int8x16_t)v110);
        LODWORD(v63) = v113 ^ __ROR4__(v103, 24);
        int v114 = v63;
        HIDWORD(v63) = v63;
        int8x16_t v118 = vorrq_s8((int8x16_t)vshlq_n_s32(v117, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v117, 0x19uLL));
        int v119 = (v63 >> 16) + v92;
        int32x4_t v31 = (int32x4_t)vextq_s8(v118, v118, 0xCuLL);
        int32x4_t v32 = (int32x4_t)vextq_s8(v116, v116, 8uLL);
        LODWORD(v63) = v119 ^ __ROR4__(v82, 25);
        int v120 = v63;
        HIDWORD(v63) = v63;
        int v22 = (v63 >> 20) + v113;
        LODWORD(v63) = v22 ^ __ROR4__(v114, 16);
        HIDWORD(v63) = v63;
        __int32 v34 = v63 >> 24;
        __int32 v16 = v34 + v119;
        LODWORD(v63) = v16 ^ __ROR4__(v120, 20);
        HIDWORD(v63) = v63;
        __int32 v10 = v63 >> 25;
        LODWORD(v63) = (v94 + v78) ^ __ROR4__(v68, 24);
        int v121 = v63;
        HIDWORD(v63) = v63;
        int v122 = (v63 >> 16) + v108;
        LODWORD(v63) = v122 ^ __ROR4__(v93, 25);
        int v123 = v63;
        HIDWORD(v63) = v63;
        int v23 = (v63 >> 20) + v94 + v78;
        LODWORD(v63) = v23 ^ __ROR4__(v121, 16);
        HIDWORD(v63) = v63;
        int v20 = v63 >> 24;
        __int32 v17 = v20 + v122;
        LODWORD(v63) = (v20 + v122) ^ __ROR4__(v123, 20);
        HIDWORD(v63) = v63;
        __int32 v12 = v63 >> 25;
        int v124 = v111 + v89;
        LODWORD(v63) = (v111 + v89) ^ __ROR4__(v79, 24);
        int v125 = v63;
        HIDWORD(v63) = v63;
        int v126 = (v63 >> 16) + v69;
        LODWORD(v63) = v126 ^ __ROR4__(v109, 25);
        int v127 = v63;
        HIDWORD(v63) = v63;
        int v24 = (v63 >> 20) + v124;
        LODWORD(v63) = v24 ^ __ROR4__(v125, 16);
        HIDWORD(v63) = v63;
        __int32 v19 = v63 >> 24;
        __int32 v14 = v19 + v126;
        LODWORD(v63) = (v19 + v126) ^ __ROR4__(v127, 20);
        HIDWORD(v63) = v63;
        __int32 v13 = v63 >> 25;
        int v128 = v71 + v102;
        LODWORD(v63) = v128 ^ __ROR4__(v90, 24);
        int v129 = v63;
        HIDWORD(v63) = v63;
        int v130 = (v63 >> 16) + v81;
        LODWORD(v63) = v130 ^ __ROR4__(v70, 25);
        int v131 = v63;
        HIDWORD(v63) = v63;
        int v25 = (v63 >> 20) + v128;
        LODWORD(v63) = v25 ^ __ROR4__(v129, 16);
        HIDWORD(v63) = v63;
        __int32 v35 = v63 >> 24;
        int32x4_t v33 = (int32x4_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 4uLL);
        __int32 v15 = v35 + v130;
        LODWORD(v63) = (v35 + v130) ^ __ROR4__(v131, 20);
        HIDWORD(v63) = v63;
        __int32 v11 = v63 >> 25;
        BOOL v132 = __CFADD__(v21++, 1LL);
      }

      while (!v132);
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v26, (int32x4_t)xmmword_186B49BF0));
      a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v27, v5));
      a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v28, v4));
      a2[3] = veorq_s8(a3[3], (int8x16_t)vaddq_s32(v29, v6));
      a2[4] = veorq_s8(a3[4], (int8x16_t)vaddq_s32(v30, (int32x4_t)xmmword_186B49BF0));
      a2[5] = veorq_s8(a3[5], (int8x16_t)vaddq_s32(v31, v5));
      a2[6] = veorq_s8(a3[6], (int8x16_t)vaddq_s32(v32, v4));
      a2[7] = veorq_s8(a3[7], (int8x16_t)vaddq_s32(v33, v9));
      a2[8].i32[0] = a3[8].i32[0] ^ (v22 + 1634760805);
      a2[8].i32[1] = a3[8].i32[1] ^ (v23 + 857760878);
      a2[8].i32[2] = a3[8].i32[2] ^ (v24 + 2036477234);
      a2[8].i32[3] = a3[8].i32[3] ^ (v25 + 1797285236);
      a2[9].i32[0] = (result[1].i32[0] + v11) ^ a3[9].i32[0];
      a2[9].i32[1] = (result[1].i32[1] + v10) ^ a3[9].i32[1];
      a2[9].i32[2] = (result[1].i32[2] + v12) ^ a3[9].i32[2];
      a2[9].i32[3] = (result[1].i32[3] + v13) ^ a3[9].i32[3];
      a2[10].i32[0] = (result[2].i32[0] + v14) ^ a3[10].i32[0];
      a2[10].i32[1] = (result[2].i32[1] + v15) ^ a3[10].i32[1];
      a2[10].i32[2] = (result[2].i32[2] + v16) ^ a3[10].i32[2];
      a2[10].i32[3] = (result[2].i32[3] + v17) ^ a3[10].i32[3];
      a2[11].i32[0] = (v20 + v18 + result[3].i32[0]) ^ a3[11].i32[0];
      a2[11].i32[1] = (result[3].i32[1] + v19) ^ a3[11].i32[1];
      a2[11].i32[2] = (result[3].i32[2] + v35) ^ a3[11].i32[2];
      a2[11].i32[3] = (result[3].i32[3] + v34) ^ a3[11].i32[3];
      int32x4_t v6 = vaddq_s32(v6, (int32x4_t)xmmword_186B49C10);
      a3 += 12;
      a2 += 12;
      ++v7;
    }

    while (v7 != v8);
  }

  if (a4 % 0xC0 >= 0x40)
  {
    unint64_t v134 = ((a4 % 0xC0) >> 6) - 1;
    v133 = (int32x4_t *)&off_186B49000;
    do
    {
      unint64_t v135 = v134;
      uint64_t v136 = -10LL;
      int32x4_t v137 = (int32x4_t)xmmword_186B49BF0;
      int32x4_t v138 = v5;
      int32x4_t v139 = v4;
      int32x4_t v140 = v6;
      do
      {
        int32x4_t v141 = vaddq_s32(v137, v138);
        int32x4_t v142 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v141, (int8x16_t)v140));
        int32x4_t v143 = vaddq_s32(v139, v142);
        int32x4_t v144 = (int32x4_t)veorq_s8((int8x16_t)v143, (int8x16_t)v138);
        int32x4_t v145 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v144, 0xCuLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v144, 0x14uLL));
        int32x4_t v146 = vaddq_s32(v145, v141);
        int32x4_t v147 = (int32x4_t)veorq_s8((int8x16_t)v146, (int8x16_t)v142);
        int32x4_t v148 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v147, 8uLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v147, 0x18uLL));
        int8x16_t v149 = (int8x16_t)vaddq_s32(v148, v143);
        int32x4_t v150 = (int32x4_t)veorq_s8(v149, (int8x16_t)v145);
        int8x16_t v151 = vorrq_s8((int8x16_t)vshlq_n_s32(v150, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v150, 0x19uLL));
        int32x4_t v152 = (int32x4_t)vextq_s8(v151, v151, 4uLL);
        int32x4_t v153 = vaddq_s32(v152, v146);
        int32x4_t v154 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8( (int8x16_t)v153,  vextq_s8((int8x16_t)v148, (int8x16_t)v148, 0xCuLL)));
        int32x4_t v155 = vaddq_s32((int32x4_t)vextq_s8(v149, v149, 8uLL), v154);
        int32x4_t v156 = (int32x4_t)veorq_s8((int8x16_t)v155, (int8x16_t)v152);
        int32x4_t v157 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v156, 0xCuLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v156, 0x14uLL));
        int32x4_t v137 = vaddq_s32(v157, v153);
        int32x4_t v158 = (int32x4_t)veorq_s8((int8x16_t)v137, (int8x16_t)v154);
        int32x4_t v159 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v158, 8uLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v158, 0x18uLL));
        int8x16_t v160 = (int8x16_t)vaddq_s32(v159, v155);
        int32x4_t v161 = (int32x4_t)veorq_s8(v160, (int8x16_t)v157);
        int8x16_t v162 = vorrq_s8((int8x16_t)vshlq_n_s32(v161, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v161, 0x19uLL));
        int32x4_t v138 = (int32x4_t)vextq_s8(v162, v162, 0xCuLL);
        int32x4_t v139 = (int32x4_t)vextq_s8(v160, v160, 8uLL);
        int32x4_t v140 = (int32x4_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 4uLL);
        BOOL v132 = __CFADD__(v136++, 1LL);
      }

      while (!v132);
      unint64_t v134 = 0LL;
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v137, (int32x4_t)xmmword_186B49BF0));
      a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v138, v5));
      a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v139, v4));
      a2[3] = veorq_s8(a3[3], (int8x16_t)vaddq_s32(v140, v6));
      int32x4_t v6 = vaddq_s32(v6, (int32x4_t)xmmword_186B49C00);
      a3 += 4;
      a2 += 4;
    }

    while (v135);
  }

  else
  {
    v133 = (int32x4_t *)&off_186B49000;
  }

  unint64_t v163 = a4 & 0x3F;
  if ((a4 & 0x3F) != 0)
  {
    int32x4_t v164 = v133[191];
    uint64_t v165 = -10LL;
    int32x4_t v166 = v5;
    int32x4_t v167 = v4;
    int32x4_t v168 = v6;
    do
    {
      int32x4_t v169 = vaddq_s32(v164, v166);
      int32x4_t v170 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v169, (int8x16_t)v168));
      int32x4_t v171 = vaddq_s32(v167, v170);
      int32x4_t v172 = (int32x4_t)veorq_s8((int8x16_t)v171, (int8x16_t)v166);
      int32x4_t v173 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v172, 0xCuLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v172, 0x14uLL));
      int32x4_t v174 = vaddq_s32(v173, v169);
      int32x4_t v175 = (int32x4_t)veorq_s8((int8x16_t)v174, (int8x16_t)v170);
      int32x4_t v176 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v175, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v175, 0x18uLL));
      int8x16_t v177 = (int8x16_t)vaddq_s32(v176, v171);
      int32x4_t v178 = (int32x4_t)veorq_s8(v177, (int8x16_t)v173);
      int8x16_t v179 = vorrq_s8((int8x16_t)vshlq_n_s32(v178, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v178, 0x19uLL));
      int32x4_t v180 = (int32x4_t)vextq_s8(v179, v179, 4uLL);
      int32x4_t v181 = vaddq_s32(v180, v174);
      int32x4_t v182 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8( (int8x16_t)v181,  vextq_s8((int8x16_t)v176, (int8x16_t)v176, 0xCuLL)));
      int32x4_t v183 = vaddq_s32((int32x4_t)vextq_s8(v177, v177, 8uLL), v182);
      int32x4_t v184 = (int32x4_t)veorq_s8((int8x16_t)v183, (int8x16_t)v180);
      int32x4_t v185 = (int32x4_t)vorrq_s8( (int8x16_t)vshlq_n_s32(v184, 0xCuLL),  (int8x16_t)vshrq_n_u32((uint32x4_t)v184, 0x14uLL));
      int32x4_t v164 = vaddq_s32(v185, v181);
      int32x4_t v186 = (int32x4_t)veorq_s8((int8x16_t)v164, (int8x16_t)v182);
      int32x4_t v187 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v186, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v186, 0x18uLL));
      int8x16_t v188 = (int8x16_t)vaddq_s32(v187, v183);
      int32x4_t v189 = (int32x4_t)veorq_s8(v188, (int8x16_t)v185);
      int8x16_t v190 = vorrq_s8((int8x16_t)vshlq_n_s32(v189, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v189, 0x19uLL));
      int32x4_t v166 = (int32x4_t)vextq_s8(v190, v190, 0xCuLL);
      int32x4_t v167 = (int32x4_t)vextq_s8(v188, v188, 8uLL);
      int32x4_t v168 = (int32x4_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL);
      BOOL v132 = __CFADD__(v165++, 1LL);
    }

    while (!v132);
    if (v163 < 0x10)
    {
      v200[0] = vaddq_s32(v164, v133[191]);
    }

    else
    {
      *a2 = veorq_s8(*a3, (int8x16_t)vaddq_s32(v164, v133[191]));
      if (v163 < 0x20)
      {
        v200[1] = vaddq_s32(v166, v5);
      }

      else
      {
        a2[1] = veorq_s8(a3[1], (int8x16_t)vaddq_s32(v166, v5));
        if (v163 < 0x30)
        {
          v200[2] = vaddq_s32(v167, v4);
        }

        else
        {
          a2[2] = veorq_s8(a3[2], (int8x16_t)vaddq_s32(v167, v4));
          v200[3] = vaddq_s32(v168, v6);
        }
      }
    }

    unint64_t v191 = a4 & 0x30;
    unint64_t v192 = v163 - v191;
    if (v163 > v191)
    {
      v193 = &a2->i8[v191];
      v194 = (char *)v200 + v191;
      v195 = &a3->i8[v191];
      do
      {
        char v197 = *v195++;
        char v196 = v197;
        char v198 = *v194++;
        *v193++ = v198 ^ v196;
        --v192;
      }

      while (v192);
    }
  }

  result[3].i64[0] = v6.i64[0];
  return result;
}

uint64_t chacha20_init_64x64(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  *(_OWORD *)uint64_t result = xmmword_186B49BF0;
  *(_DWORD *)(result + 16) = *a2;
  *(_DWORD *)(result + 20) = a2[1];
  *(_DWORD *)(result + 24) = a2[2];
  *(_DWORD *)(result + 28) = a2[3];
  *(_DWORD *)(result + 32) = a2[4];
  *(_DWORD *)(result + 36) = a2[5];
  *(_DWORD *)(result + 40) = a2[6];
  *(_DWORD *)(result + 44) = a2[7];
  *(void *)(result + 48) = a4;
  if (a3)
  {
    *(_DWORD *)(result + 56) = *a3;
    int v4 = a3[1];
  }

  else
  {
    int v4 = 0;
    *(_DWORD *)(result + 56) = 0;
  }

  *(_DWORD *)(result + 60) = v4;
  *(void *)(result + 128) = 0LL;
  return result;
}

uint64_t chacha20_all_96x32( int32x4_t *a1, uint64_t *a2, int a3, int8x16_t *a4, unint64_t a5, int8x16_t *a6)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int32x4_t v6 = *a1;
  int32x4_t v7 = a1[1];
  v11[0] = (int32x4_t)xmmword_186B49BF0;
  v11[1] = v6;
  v11[2] = v7;
  int v12 = a3;
  if (a2)
  {
    uint64_t v8 = *a2;
    int v9 = *((_DWORD *)a2 + 2);
  }

  else
  {
    int v9 = 0;
    uint64_t v8 = 0LL;
  }

  uint64_t v13 = v8;
  int v14 = v9;
  uint64_t v15 = 0LL;
  _chacha20_xor(v11, a6, a4, a5);
  return memset_s(v11, 0x88uLL, 0, 0x88uLL);
}

int64_t chacha20_update(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  unint64_t v5 = a3;
  int32x4_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 128);
  if (v8)
  {
    if (64 - v8 >= a3) {
      unint64_t v9 = a3;
    }
    else {
      unint64_t v9 = 64 - v8;
    }
    if (v9)
    {
      __int32 v10 = a2;
      unint64_t v11 = v9;
      do
      {
        __int8 v12 = v10->i8[0];
        __int32 v10 = (int8x16_t *)((char *)v10 + 1);
        uint64_t v13 = v8 + 1;
        *(_BYTE *)(a1 + 64 + v8++) = v12;
        --v11;
      }

      while (v11);
    }

    else
    {
      uint64_t v13 = *(void *)(a1 + 128);
    }

    int32x4_t v6 = (int8x16_t *)((char *)a2 + v9);
    unint64_t v5 = a3 - v9;
    int v14 = a4;
    if (v13 == 64)
    {
      _chacha20_xor((int32x4_t *)a1, a4, (int8x16_t *)(a1 + 64), 0x40uLL);
      uint64_t v13 = 0LL;
      int v14 = a4 + 4;
    }

    *(void *)(a1 + 128) = v13;
  }

  else
  {
    int v14 = a4;
  }

  if (v5 >= 0x40)
  {
    _chacha20_xor((int32x4_t *)a1, v14, v6, v5 & 0xFFFFFFFFFFFFFFC0LL);
    int32x4_t v6 = (int8x16_t *)((char *)v6 + (v5 & 0xFFFFFFFFFFFFFFC0LL));
    int v14 = (int8x16_t *)((char *)v14 + (v5 & 0xFFFFFFFFFFFFFFC0LL));
    v5 &= 0x3Fu;
  }

  if (v5)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
      *(_BYTE *)(a1 + 64 + i) = v6->i8[i];
    *(void *)(a1 + 128) = v5;
  }

  return (char *)v14 - (char *)a4;
}

uint64_t chacha20_final(void *__s, int8x16_t *a2)
{
  uint64_t v3 = *((void *)__s + 16);
  if (v3) {
    _chacha20_xor((int32x4_t *)__s, a2, (int8x16_t *)__s + 4, *((void *)__s + 16));
  }
  memset_s(__s, 0x88uLL, 0, 0x88uLL);
  return v3;
}

uint64_t poly1305_init(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2 = 0LL;
  int v3 = *((unsigned __int8 *)a2 + 3);
  int v4 = v3 << 24;
  int v5 = (*((unsigned __int8 *)a2 + 6) << 16) | (*((unsigned __int8 *)a2 + 7) << 24);
  int v6 = *((unsigned __int8 *)a2 + 8) | (*((unsigned __int8 *)a2 + 9) << 8);
  int v7 = (*((unsigned __int8 *)a2 + 11) << 24) | (*((unsigned __int8 *)a2 + 10) << 16) | (*((unsigned __int8 *)a2 + 9) << 8);
  unsigned int v8 = *((unsigned __int8 *)a2 + 12);
  int v9 = *((unsigned __int8 *)a2 + 13);
  int v10 = *((unsigned __int8 *)a2 + 14) << 8;
  unsigned int v11 = (*a2 | (*((unsigned __int8 *)a2 + 2) << 16)) & 0xFCFFFFFF | ((v3 & 3) << 24);
  LOBYTE(v3) = *((_BYTE *)a2 + 15);
  HIDWORD(v12) = a2[2] | (*((unsigned __int8 *)a2 + 6) << 16);
  LODWORD(v12) = v4;
  int v13 = (v12 >> 26) & 0x3FFFF03;
  *(_DWORD *)uint64_t result = v11;
  *(_DWORD *)(result + 4) = v13;
  int v14 = (__PAIR64__(v6, v5) >> 20) & 0x3FFC0FF;
  unint64_t v15 = (__PAIR64__(v8, v7) >> 14) & 0x3F03FFF;
  *(_DWORD *)(result + 8) = v14;
  *(_DWORD *)(result + 12) = v15;
  unsigned int v16 = v10 & 0xFFF0FFFF | ((v3 & 0xF) << 16);
  *(_DWORD *)(result + 16) = v16 | v9;
  *(_DWORD *)(result + 20) = 5 * v13;
  *(_DWORD *)(result + 24) = 5 * v14;
  *(_DWORD *)(result + 28) = 5 * v15;
  *(_DWORD *)(result + 32) = 5 * (v16 | v9);
  *(void *)(result + 72) = 0LL;
  *(void *)(result + 44) = 0LL;
  *(void *)(result + 36) = 0LL;
  *(_DWORD *)(result + 52) = 0;
  do
  {
    *(_BYTE *)(result + 80 + v2) = *((_BYTE *)a2 + v2 + 16);
    ++v2;
  }

  while (v2 != 16);
  return result;
}

unsigned int *poly1305_update(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v4 = a2;
  int v5 = result;
  uint64_t v6 = *((void *)result + 9);
  if (v6)
  {
    unint64_t v7 = 16 - v6;
    if (16 - v6 >= a3) {
      unint64_t v7 = a3;
    }
    if (v7)
    {
      unsigned int v8 = result + 14;
      int v9 = a2;
      unint64_t v10 = v7;
      do
      {
        char v11 = *(_BYTE *)v9;
        int v9 = (unsigned int *)((char *)v9 + 1);
        *((_BYTE *)v8 + *((void *)result + 9)) = v11;
        unsigned int v8 = (unsigned int *)((char *)v8 + 1);
        --v10;
      }

      while (v10);
      uint64_t v6 = *((void *)result + 9);
    }

    uint64_t v12 = v6 + v7;
    *((void *)result + 9) = v12;
    unint64_t v3 = a3 - v7;
    int v4 = (unsigned int *)((char *)a2 + v7);
    if (v12 == 16)
    {
      uint64_t result = _poly1305_update(result, result + 14, 0x10uLL);
      *((void *)v5 + 9) = 0LL;
    }
  }

  if (v3 >= 0x10)
  {
    uint64_t result = _poly1305_update(v5, v4, v3 & 0xFFFFFFFFFFFFFFF0LL);
    int v4 = (unsigned int *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFF0LL));
    v3 &= 0xFu;
  }

  if (v3)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
      *((_BYTE *)v5 + i + 56) = *((_BYTE *)v4 + i);
    *((void *)v5 + 9) = v3;
  }

  return result;
}

unsigned int *_poly1305_update(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  int v4 = result;
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (a3 < 0x10) {
    goto LABEL_5;
  }
  unsigned int v5 = result[9];
  unsigned int v6 = result[10];
  unsigned int v7 = result[11];
LABEL_3:
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = *((unsigned __int16 *)a2 + 4) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 16);
  unint64_t v11 = v10 | ((unint64_t)*((unsigned __int8 *)a2 + 11) << 24);
  uint64_t v12 = a2[3];
  a2 += 4;
  a3 -= 16LL;
  unsigned int v13 = v5 + (v8 & 0x3FFFFFF);
  unsigned int v14 = v6 + (((v8 | (unint64_t)(v9 << 32)) >> 26) & 0x3FFFFFF);
  v4[9] = v13;
  v4[10] = v14;
  unsigned int v15 = v7 + (((v9 | (v10 << 32)) >> 20) & 0x3FFFFFF);
  unsigned int v16 = v4[13];
  unsigned int v17 = (((v11 | (v12 << 32)) >> 14) & 0x3FFFFFF) + v4[12];
  v4[11] = v15;
  v4[12] = v17;
  unsigned int v18 = v16 + (v12 >> 8) + 0x1000000;
  for (v4[13] = v18; ; unsigned int v18 = v4[13] + (v43 >> 8))
  {
    unsigned int v19 = v4[1];
    unsigned int v21 = v4[7];
    unsigned int v20 = v4[8];
    unsigned int v22 = v4[6];
    unsigned int v24 = v4[3];
    unsigned int v23 = v4[4];
    unint64_t v25 = *v4 * (unint64_t)v13
        + v20 * (unint64_t)v14
        + v21 * (unint64_t)v15
        + v22 * (unint64_t)v17
        + v4[5] * (unint64_t)v18;
    unsigned int v26 = v4[2];
    unint64_t v27 = *v4 * (unint64_t)v18;
    int v28 = v25 & 0x3FFFFFF;
    unint64_t v29 = *v4 * (unint64_t)v14
        + v20 * (unint64_t)v15
        + v21 * (unint64_t)v17
        + v22 * (unint64_t)v18
        + v19 * (unint64_t)v13
        + (v25 >> 26);
    unsigned int v6 = v29 & 0x3FFFFFF;
    uint64_t result = (unsigned int *)(*v4 * (unint64_t)v15 + v20 * (unint64_t)v17);
    unint64_t v30 = (unint64_t)result
        + v21 * (unint64_t)v18
        + v19 * (unint64_t)v14
        + v26 * (unint64_t)v13
        + (v29 >> 26);
    unsigned int v7 = v30 & 0x3FFFFFF;
    unint64_t v31 = *v4 * (unint64_t)v17
        + v20 * (unint64_t)v18
        + v19 * (unint64_t)v15
        + v26 * (unint64_t)v14
        + v24 * (unint64_t)v13
        + (v30 >> 26);
    v4[11] = v30 & 0x3FFFFFF;
    v4[12] = v31 & 0x3FFFFFF;
    unint64_t v32 = v27
        + v19 * (unint64_t)v17
        + v26 * (unint64_t)v15
        + v24 * (unint64_t)v14
        + v23 * (unint64_t)v13
        + (v31 >> 26);
    v4[13] = v32 & 0x3FFFFFF;
    unsigned int v5 = 5 * (v32 >> 26) + v28;
    v4[9] = v5;
    v4[10] = v6;
    if (a3 > 0xF) {
      goto LABEL_3;
    }
LABEL_5:
    if (!a3) {
      break;
    }
    for (unint64_t i = 0LL; i != a3; ++i)
    {
      unint64_t v34 = i;
      *((_BYTE *)&v38 + i) = *((_BYTE *)a2 + i);
    }

    *((_BYTE *)&v38 + a3) = 1;
    if (v34 <= 0xD)
    {
      __int32 v35 = (char *)&v38 + v34 + 2;
      unint64_t v36 = 14 - a3;
      if (a3 > 0xE) {
        unint64_t v36 = 0LL;
      }
      bzero(v35, v36 + 1);
    }

    a3 = 0LL;
    unint64_t v37 = v40 | ((unint64_t)v41 << 16);
    unsigned int v13 = v4[9] + (v38 & 0x3FFFFFF);
    unsigned int v14 = v4[10] + (((v38 | ((unint64_t)v39 << 32)) >> 26) & 0x3FFFFFF);
    unsigned int v15 = v4[11] + (((v39 | (v37 << 32)) >> 20) & 0x3FFFFFF);
    unsigned int v17 = (((v37 | ((unint64_t)v42 << 24) | ((unint64_t)v43 << 32)) >> 14) & 0x3FFFFFF) + v4[12];
  }

  return result;
}

uint64_t poly1305_final(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    _poly1305_update((unsigned int *)a1, (unsigned int *)(a1 + 56), v4);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 36);
  int v6 = v5 & 0x3FFFFFF;
  unsigned int v7 = *(_DWORD *)(a1 + 40) + (v5 >> 26);
  int v8 = v7 & 0x3FFFFFF;
  unsigned int v9 = *(_DWORD *)(a1 + 44) + (v7 >> 26);
  int v10 = v9 & 0x3FFFFFF;
  unsigned int v11 = *(_DWORD *)(a1 + 48) + (v9 >> 26);
  int v12 = v11 & 0x3FFFFFF;
  unsigned int v13 = *(_DWORD *)(a1 + 52) + (v11 >> 26);
  unsigned int v14 = 5 * (v13 >> 26) + v6;
  unsigned int v15 = v8 + ((v14 + 5) >> 26);
  unsigned int v16 = v10 + (v15 >> 26);
  unsigned int v17 = v12 + (v16 >> 26);
  signed int v18 = (v13 | 0xFC000000) + (v17 >> 26);
  uint64_t result = (v18 >> 31) - 1;
  int v20 = v14 & (v18 >> 31) | result & 0x3FFFFFF & (v14 + 5);
  unsigned int v21 = v8 & (v18 >> 31) | result & 0x3FFFFFF & v15;
  *(_DWORD *)(a1 + 36) = v20;
  *(_DWORD *)(a1 + 40) = v21;
  unsigned int v22 = v10 & (v18 >> 31) | result & 0x3FFFFFF & v16;
  unsigned int v23 = v12 & (v18 >> 31) | result & 0x3FFFFFF & v17;
  *(_DWORD *)(a1 + 44) = v22;
  *(_DWORD *)(a1 + 48) = v23;
  int v24 = result & v18 | v13 & (v18 >> 31) & 0x3FFFFFF;
  *(_DWORD *)(a1 + 52) = v24;
  int v25 = v20 | (v21 << 26);
  int v26 = *(_DWORD *)(a1 + 80);
  uint64_t v27 = *(unsigned int *)(a1 + 84);
  uint64_t v28 = (v21 >> 6) | (v22 << 20);
  unint64_t v29 = ((v22 >> 12) | (v23 << 14)) + (unint64_t)*(unsigned int *)(a1 + 88);
  unint64_t v30 = ((v23 >> 18) | (v24 << 8)) + (unint64_t)*(unsigned int *)(a1 + 92);
  *(_DWORD *)a2 = v25 + v26;
  unint64_t v31 = v27 + __CFADD__(v25, v26) + v28;
  *(_WORD *)(a2 + 4) = v31;
  *(_BYTE *)(a2 + 6) = BYTE2(v31);
  *(_BYTE *)(a2 + 7) = BYTE3(v31);
  unint64_t v32 = v29 + HIDWORD(v31);
  *(_WORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 10) = BYTE2(v32);
  *(_BYTE *)(a2 + 11) = BYTE3(v32);
  unint64_t v33 = v30 + HIDWORD(v32);
  *(_WORD *)(a2 + 12) = v33;
  *(_BYTE *)(a2 + 14) = BYTE2(v33);
  *(_BYTE *)(a2 + 15) = BYTE3(v33);
  return result;
}

uint64_t poly1305(uint64_t a1, unsigned int *a2, unint64_t a3, unsigned __int16 *a4)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  poly1305_init((uint64_t)v8, a4);
  poly1305_update(v8, a2, a3);
  return poly1305_final((uint64_t)v8, a1);
}

uint64_t chacha20_poly1305_init_64x64(int32x4_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  chacha20_init_64x64((uint64_t)a1, a2, a3, 0LL);
  _chacha20_xor(a1, v5, kZero64, 0x40uLL);
  uint64_t result = poly1305_init((uint64_t)&a1[8].i64[1], (unsigned __int16 *)v5);
  a1[14].i64[1] = 0LL;
  a1[15].i64[0] = 0LL;
  a1[15].i8[8] = 0;
  return result;
}

uint64_t chacha20_poly1305_init_96x32(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(_OWORD *)a1 = xmmword_186B49BF0;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = a2[1];
  *(_DWORD *)(a1 + 24) = a2[2];
  *(_DWORD *)(a1 + 28) = a2[3];
  *(_DWORD *)(a1 + 32) = a2[4];
  *(_DWORD *)(a1 + 36) = a2[5];
  *(_DWORD *)(a1 + 40) = a2[6];
  *(void *)(a1 + 44) = a2[7];
  if (a3)
  {
    *(_DWORD *)(a1 + 52) = *a3;
    *(_DWORD *)(a1 + 56) = a3[1];
    int v4 = a3[2];
  }

  else
  {
    int v4 = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 56) = 0;
  }

  *(_DWORD *)(a1 + 60) = v4;
  *(void *)(a1 + 128) = 0LL;
  _chacha20_xor((int32x4_t *)a1, v6, kZero64, 0x40uLL);
  uint64_t result = poly1305_init(a1 + 136, (unsigned __int16 *)v6);
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(_BYTE *)(a1 + 248) = 0;
  return result;
}

unsigned int *chacha20_poly1305_add_aad(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  uint64_t result = poly1305_update((unsigned int *)(a1 + 136), a2, a3);
  *(void *)(a1 + 232) += a3;
  return result;
}

unint64_t chacha20_poly1305_encrypt(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  if (!*(_BYTE *)(a1 + 248))
  {
    if ((*(void *)(a1 + 232) & 0xFLL) != 0) {
      poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)kZero64, 16 - (*(void *)(a1 + 232) & 0xFLL));
    }
    *(_BYTE *)(a1 + 248) = 1;
  }

  unint64_t v8 = chacha20_update(a1, a2, a3, a4);
  if (v8)
  {
    poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)a4, v8);
    *(void *)(a1 + 240) += v8;
  }

  return v8;
}

int64_t chacha20_poly1305_decrypt(uint64_t a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4)
{
  if (!*(_BYTE *)(a1 + 248))
  {
    if ((*(void *)(a1 + 232) & 0xFLL) != 0) {
      poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)kZero64, 16 - (*(void *)(a1 + 232) & 0xFLL));
    }
    *(_BYTE *)(a1 + 248) = 1;
  }

  poly1305_update((unsigned int *)(a1 + 136), (unsigned int *)a2, a3);
  int64_t result = chacha20_update(a1, a2, a3, a4);
  *(void *)(a1 + 240) += result;
  return result;
}

unint64_t chacha20_poly1305_final(unsigned int *__s, int8x16_t *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!*((_BYTE *)__s + 248) && (*((void *)__s + 29) & 0xFLL) != 0) {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (*((void *)__s + 29) & 0xFLL));
  }
  unint64_t v6 = chacha20_final(__s, a2);
  if (v6)
  {
    poly1305_update(__s + 34, (unsigned int *)a2, v6);
    unint64_t v7 = *((void *)__s + 30) + v6;
    *((void *)__s + 30) = v7;
  }

  else
  {
    unint64_t v7 = *((void *)__s + 30);
  }

  if ((v7 & 0xF) != 0)
  {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (v7 & 0xF));
    unint64_t v7 = *((void *)__s + 30);
  }

  uint64_t v8 = *((void *)__s + 29);
  LOWORD(v11) = v8;
  BYTE2(v11) = BYTE2(v8);
  HIBYTE(v11) = BYTE3(v8);
  char v12 = BYTE4(v8);
  char v13 = BYTE5(v8);
  char v14 = BYTE6(v8);
  char v15 = HIBYTE(v8);
  unint64_t v16 = v7;
  uint64_t v9 = __s + 34;
  poly1305_update(v9, &v11, 0x10uLL);
  poly1305_final((uint64_t)v9, a3);
  return v6;
}

uint64_t chacha20_poly1305_verify(unsigned int *__s, int8x16_t *a2, int8x16_t *a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!*((_BYTE *)__s + 248) && (*((void *)__s + 29) & 0xFLL) != 0) {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (*((void *)__s + 29) & 0xFLL));
  }
  uint64_t v8 = chacha20_final(__s, a2);
  uint64_t v9 = v8;
  uint64_t v10 = *((void *)__s + 30);
  if (v8)
  {
    v10 += v8;
    *((void *)__s + 30) = v10;
  }

  if ((v10 & 0xF) != 0)
  {
    poly1305_update(__s + 34, (unsigned int *)kZero64, 16 - (v10 & 0xF));
    uint64_t v10 = *((void *)__s + 30);
  }

  uint64_t v11 = *((void *)__s + 29);
  v16.i64[0] = v11;
  v16.i64[1] = v10;
  char v12 = __s + 34;
  poly1305_update(v12, (unsigned int *)&v16, 0x10uLL);
  poly1305_final((uint64_t)v12, (uint64_t)&v16);
  int8x16_t v13 = veorq_s8(*a3, v16);
  else {
    int v14 = 0;
  }
  *a4 = v14;
  return v9;
}

uint64_t chacha20_poly1305_encrypt_all_64x64( _DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_encrypt_all(a1, a2, 8LL, a3, a4, a5, a6, a7, a8);
}

uint64_t _chacha20_poly1305_encrypt_all( _DWORD *a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (a3 == 12)
  {
    chacha20_poly1305_init_96x32((uint64_t)__s, a1, a2);
  }

  else
  {
    if (a3 != 8) {
      FatalErrorF("Bad nonce (%zu). Must be 8 or 12.");
    }
    chacha20_poly1305_init_64x64(__s, a1, a2);
  }

  int64_t v14 = chacha20_update((uint64_t)__s, a6, a7, a8);
  chacha20_final(__s, (int8x16_t *)((char *)a8 + v14));
  if (a5)
  {
    poly1305_update(v23, a4, a5);
    if ((a5 & 0xF) != 0) {
      poly1305_update(v23, (unsigned int *)kZero64, 16 - (a5 & 0xF));
    }
  }

  if (a7)
  {
    poly1305_update(v23, (unsigned int *)a8, a7);
    if ((a7 & 0xF) != 0) {
      poly1305_update(v23, (unsigned int *)kZero64, 16 - (a7 & 0xF));
    }
  }

  LOWORD(v16) = a5;
  BYTE2(v16) = BYTE2(a5);
  HIBYTE(v16) = BYTE3(a5);
  char v17 = BYTE4(a5);
  char v18 = BYTE5(a5);
  char v19 = BYTE6(a5);
  char v20 = HIBYTE(a5);
  unint64_t v21 = a7;
  poly1305_update(v23, &v16, 0x10uLL);
  return poly1305_final((uint64_t)v23, a9);
}

uint64_t chacha20_poly1305_encrypt_all_96x32( _DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_encrypt_all(a1, a2, 12LL, a3, a4, a5, a6, a7, a8);
}

uint64_t chacha20_poly1305_decrypt_all_64x64( _DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 8LL, a3, a4, a5, a6, a7, a8, 16LL);
}

uint64_t _chacha20_poly1305_decrypt_all( _DWORD *a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (a3 == 12)
  {
    chacha20_poly1305_init_96x32((uint64_t)__s, a1, a2);
  }

  else
  {
    if (a3 != 8) {
      FatalErrorF("Bad nonce (%zu). Must be 8 or 12.");
    }
    chacha20_poly1305_init_64x64(__s, a1, a2);
  }

  if (a5)
  {
    poly1305_update(v26, a4, a5);
    if ((a5 & 0xF) != 0) {
      poly1305_update(v26, (unsigned int *)kZero64, 16 - (a5 & 0xF));
    }
  }

  if (a7)
  {
    poly1305_update(v26, (unsigned int *)a6, a7);
    if ((a7 & 0xF) != 0) {
      poly1305_update(v26, (unsigned int *)kZero64, 16 - (a7 & 0xF));
    }
  }

  LOWORD(v19) = a5;
  BYTE2(v19) = BYTE2(a5);
  HIBYTE(v19) = BYTE3(a5);
  char v20 = BYTE4(a5);
  char v21 = BYTE5(a5);
  char v22 = BYTE6(a5);
  char v23 = HIBYTE(a5);
  unint64_t v24 = a7;
  poly1305_update(v26, &v19, 0x10uLL);
  poly1305_final((uint64_t)v26, (uint64_t)&v19);
  uint64_t v15 = 0LL;
  int v16 = 0;
  do
  {
    v16 |= *(unsigned __int8 *)(a9 + v15) ^ *((unsigned __int8 *)&v19 + v15);
    ++v15;
  }

  while (a10 != v15);
  if (v16) {
    return 4294960542LL;
  }
  int64_t v17 = chacha20_update((uint64_t)__s, a6, a7, a8);
  chacha20_final(__s, (int8x16_t *)((char *)a8 + v17));
  return 0LL;
}

uint64_t chacha20_poly1305_decrypt_all_64x64_ex( _DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 8LL, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t chacha20_poly1305_decrypt_all_96x32( _DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 12LL, a3, a4, a5, a6, a7, a8, 16LL);
}

uint64_t chacha20_poly1305_decrypt_all_96x32_ex( _DWORD *a1, _DWORD *a2, unsigned int *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, uint64_t a8, uint64_t a9)
{
  return _chacha20_poly1305_decrypt_all(a1, a2, 12LL, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t CRC16_CCITT(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  {
    unsigned int v3 = bswap32(result);
    int v4 = *a2++;
    int v5 = ((v4 ^ BYTE2(v3)) >> 4) ^ v4 ^ HIWORD(v3);
    LODWORD(result) = (32 * v5) ^ (v5 << 12) ^ v5;
  }

  return (unsigned __int16)result;
}

uint64_t Parity32(unsigned int a1)
{
  unsigned int v1 = a1 ^ (a1 >> 1) ^ ((a1 ^ (a1 >> 1)) >> 2);
  unsigned int v2 = v1 ^ (v1 >> 4) ^ ((v1 ^ (v1 >> 4)) >> 8);
  return (v2 ^ HIWORD(v2)) & 1;
}

uint64_t SipHash(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = *a1 ^ 0x736F6D6570736575LL;
  uint64_t v5 = v3 ^ 0x646F72616E646F6DLL;
  uint64_t v6 = *a1 ^ 0x6C7967656E657261LL;
  uint64_t v7 = v3 ^ 0x7465646279746573LL;
  if ((a3 & 0xFFFFFFFFFFFFFFF8LL) != 0)
  {
    uint64_t v8 = &a2[a3 & 0xFFFFFFFFFFFFFFF8LL];
    do
    {
      uint64_t v9 = *(void *)a2;
      a2 += 8;
      uint64_t v10 = v9 ^ v7;
      uint64_t v11 = v5 + v4;
      uint64_t v12 = v11 ^ __ROR8__(v5, 51);
      uint64_t v13 = v10 + v6;
      uint64_t v14 = __ROR8__(v10, 48);
      uint64_t v15 = (v13 ^ v14) + __ROR8__(v11, 32);
      uint64_t v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
      uint64_t v17 = v13 + v12;
      uint64_t v18 = v17 ^ __ROR8__(v12, 47);
      uint64_t v19 = v15 + v18;
      uint64_t v20 = v19 ^ __ROR8__(v18, 51);
      uint64_t v21 = v16 + __ROR8__(v17, 32);
      uint64_t v22 = __ROR8__(v16, 48);
      uint64_t v23 = (v21 ^ v22) + __ROR8__(v19, 32);
      uint64_t v7 = v23 ^ __ROR8__(v21 ^ v22, 43);
      uint64_t v24 = v21 + v20;
      uint64_t v5 = v24 ^ __ROR8__(v20, 47);
      uint64_t v6 = __ROR8__(v24, 32);
      uint64_t v4 = v23 ^ v9;
    }

    while (a2 != v8);
    a2 = v8;
  }

  uint64_t v25 = a3 << 56;
  switch(a3 & 7)
  {
    case 1LL:
      goto LABEL_12;
    case 2LL:
      goto LABEL_11;
    case 3LL:
      goto LABEL_10;
    case 4LL:
      goto LABEL_9;
    case 5LL:
      goto LABEL_8;
    case 6LL:
      goto LABEL_7;
    case 7LL:
      v25 |= (unint64_t)a2[6] << 48;
LABEL_7:
      v25 |= (unint64_t)a2[5] << 40;
LABEL_8:
      v25 |= (unint64_t)a2[4] << 32;
LABEL_9:
      v25 |= (unint64_t)a2[3] << 24;
LABEL_10:
      v25 |= (unint64_t)a2[2] << 16;
LABEL_11:
      v25 |= (unint64_t)a2[1] << 8;
LABEL_12:
      v25 |= *a2;
      break;
    default:
      break;
  }

  uint64_t v26 = v25 ^ v7;
  uint64_t v27 = v5 + v4;
  uint64_t v28 = v27 ^ __ROR8__(v5, 51);
  uint64_t v29 = v26 + v6;
  uint64_t v30 = __ROR8__(v26, 48);
  uint64_t v31 = (v29 ^ v30) + __ROR8__(v27, 32);
  uint64_t v32 = v31 ^ __ROR8__(v29 ^ v30, 43);
  uint64_t v33 = v29 + v28;
  uint64_t v34 = v33 ^ __ROR8__(v28, 47);
  uint64_t v35 = v31 + v34;
  uint64_t v36 = v35 ^ __ROR8__(v34, 51);
  uint64_t v37 = v32 + __ROR8__(v33, 32);
  uint64_t v38 = __ROR8__(v32, 48);
  uint64_t v39 = (v37 ^ v38) + __ROR8__(v35, 32);
  uint64_t v40 = v39 ^ __ROR8__(v37 ^ v38, 43);
  uint64_t v41 = v37 + v36;
  uint64_t v42 = v41 ^ __ROR8__(v36, 47);
  uint64_t v43 = (v39 ^ v25) + v42;
  uint64_t v44 = v43 ^ __ROR8__(v42, 51);
  uint64_t v45 = (__ROR8__(v41, 32) ^ 0xFFLL) + v40;
  uint64_t v46 = __ROR8__(v40, 48);
  uint64_t v47 = __ROR8__(v43, 32) + (v45 ^ v46);
  uint64_t v48 = v47 ^ __ROR8__(v45 ^ v46, 43);
  uint64_t v49 = v44 + v45;
  uint64_t v50 = __ROR8__(v49, 32);
  uint64_t v51 = v49 ^ __ROR8__(v44, 47);
  uint64_t v52 = v51 + v47;
  uint64_t v53 = (v51 + v47) ^ __ROR8__(v51, 51);
  uint64_t v54 = v50 + v48;
  uint64_t v55 = (v50 + v48) ^ __ROR8__(v48, 48);
  uint64_t v56 = __ROR8__(v52, 32) + v55;
  uint64_t v57 = v56 ^ __ROR8__(v55, 43);
  uint64_t v58 = v53 + v54;
  uint64_t v59 = __ROR8__(v53, 47);
  uint64_t v60 = (v58 ^ v59) + v56;
  uint64_t v61 = v60 ^ __ROR8__(v58 ^ v59, 51);
  uint64_t v62 = __ROR8__(v58, 32) + v57;
  uint64_t v63 = v62 ^ __ROR8__(v57, 48);
  uint64_t v64 = __ROR8__(v60, 32) + v63;
  uint64_t v65 = v64 ^ __ROR8__(v63, 43);
  uint64_t v66 = v61 + v62;
  uint64_t v67 = v66 ^ __ROR8__(v61, 47);
  uint64_t v68 = __ROR8__(v66, 32) + v65;
  uint64_t v69 = (v67 + v64) ^ __ROR8__(v67, 51);
  return __ROR8__(v68 ^ __ROR8__(v65, 48), 43) ^ __ROR8__(v69, 47) ^ __ROR8__(v69 + v68, 32) ^ (v69 + v68);
}

uint64_t CocoaTextViewAppendUTF8String(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = a1;
  if (CocoaTextViewAppendUTF8String_sOnce != -1) {
    dispatch_once(&CocoaTextViewAppendUTF8String_sOnce, &__block_literal_global_533);
  }
  id v8 = objc_alloc(NSString);
  if (a3 == -1) {
    uint64_t v9 = [v8 initWithUTF8String:a2];
  }
  else {
    uint64_t v9 = [v8 initWithBytes:a2 length:a3 encoding:4];
  }
  uint64_t v10 = (void *)v9;
  if (v9
    && (id v11 = objc_alloc(MEMORY[0x1896077E0]),
        (uint64_t v12 = [v11 initWithString:v10 attributes:CocoaTextViewAppendUTF8String_sAttributes]) != 0))
  {
    uint64_t v13 = (void *)v12;
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __CocoaTextViewAppendUTF8String_block_invoke_2;
    block[3] = &unk_189F30298;
    int v20 = a4;
    id v18 = v7;
    id v19 = v13;
    id v14 = v13;
    dispatch_async(MEMORY[0x1895F8AE0], block);

    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 4294960596LL;
  }

  return v15;
}

void __CocoaTextViewAppendUTF8String_block_invoke_2(uint64_t a1)
{
  double v3 = v2;
  [*(id *)(a1 + 32) contentInset];
  double v5 = v4;
  [*(id *)(a1 + 32) bounds];
  int v7 = *(_DWORD *)(a1 + 48);
  if ((v7 & 2) != 0 || (v7 & 1) != 0 && (double v8 = v3 + v5 - v6, [*(id *)(a1 + 32) contentOffset], v9 >= v8))
  {
    [*(id *)(a1 + 32) textStorage];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    [v10 appendAttributedString:*(void *)(a1 + 40)];

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __CocoaTextViewAppendUTF8String_block_invoke_3;
    block[3] = &unk_189F34238;
    id v13 = *(id *)(a1 + 32);
    dispatch_async(MEMORY[0x1895F8AE0], block);
  }

  else
  {
    [*(id *)(a1 + 32) textStorage];
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    [v11 appendAttributedString:*(void *)(a1 + 40)];
  }

uint64_t __CocoaTextViewAppendUTF8String_block_invoke_3(uint64_t a1)
{
  double v3 = v2;
  uint64_t result = [*(id *)(a1 + 32) bounds];
  if (v3 > v5)
  {
    [*(id *)(a1 + 32) contentSize];
    double v7 = v6;
    [*(id *)(a1 + 32) contentInset];
    double v9 = v7 + v8;
    [*(id *)(a1 + 32) bounds];
    return objc_msgSend(*(id *)(a1 + 32), "setContentOffset:animated:", 0, 0.0, v9 - v10);
  }

  return result;
}

void __CocoaTextViewAppendUTF8String_block_invoke()
{
  v5[1] = *MEMORY[0x1895F89C0];
  getNSFontAttributeName[0]();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  double v4 = v0;
  -[objc_class systemFontOfSize:](getUIFontClass(), "systemFontOfSize:", 10.0);
  unsigned int v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x189603F68] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  double v3 = (void *)CocoaTextViewAppendUTF8String_sAttributes;
  CocoaTextViewAppendUTF8String_sAttributes = v2;
}

id NSFontAttributeNameFunction()
{
  return (id)constantValNSFontAttributeName;
}

id initValNSFontAttributeName()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_4);
  }
  v0 = (id *)dlsym((void *)UIKitLibrary_sLib, "NSFontAttributeName");
  if (v0) {
    objc_storeStrong((id *)&constantValNSFontAttributeName, *v0);
  }
  getNSFontAttributeName[0] = (uint64_t (*)())NSFontAttributeNameFunction;
  return (id)constantValNSFontAttributeName;
}

id UIFontFunction()
{
  return (id)classUIFont;
}

Class initUIFont()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_4);
  }
  Class result = objc_getClass("UIFont");
  classUIFont = (uint64_t)result;
  getUIFontClass = (uint64_t (*)())UIFontFunction;
  return result;
}

void *__UIKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib = (uint64_t)result;
  return result;
}

char *CLIInit(int a1, const char **a2)
{
  gArgI = 0;
  gArgC = a1;
  gArgV = (uint64_t)a2;
  if (a1 < 1)
  {
    uint64_t v2 = "?";
  }

  else
  {
    gArgI = 1;
    uint64_t v2 = *a2;
  }

  gProgramPath = (uint64_t)v2;
  Class result = strrchr(v2, 47);
  if (result) {
    uint64_t v4 = (uint64_t)(result + 1);
  }
  else {
    uint64_t v4 = (uint64_t)v2;
  }
  gProgramName = v4;
  return result;
}

uint64_t CLIParse(uint64_t a1, int a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  uint64_t v106 = *MEMORY[0x1895F89C0];
  uint64_t v4 = &gTUExitCode;
  uint64_t v5 = gRootOptions;
  double v6 = &unk_18C69F000;
  double v7 = (int *)&unk_18C69F000;
  if (gRootOptions) {
    goto LABEL_22;
  }
  gRootFlags = a2;
  double v8 = (const char *)gProgramName;
  for (uint64_t i = a1; *(_DWORD *)i != 3; i += 104LL)
  {
    if (!*(_DWORD *)i) {
      goto LABEL_21;
    }
LABEL_8:
    ;
  }

  uint64_t v10 = gArgC;
  id v11 = malloc(8LL * (gArgC + 2));
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    if ((int)v10 < 1)
    {
      LODWORD(v13) = 0;
    }

    else
    {
      *id v11 = *(void *)gArgV;
      LODWORD(v13) = 1;
    }

    v11[v13] = v8;
    if ((int)v13 >= (int)v10)
    {
      unsigned int v16 = v13 + 1;
    }

    else
    {
      uint64_t v13 = v13;
      uint64_t v14 = gArgV;
      do
      {
        uint64_t v15 = v13++;
        v11[v15 + 1] = *(void *)(v14 + 8 * v15);
      }

      while (v10 != v13);
      unsigned int v16 = v15 + 2;
    }

    v11[v16] = 0LL;
    gArgI = (int)v10 > 0;
    gArgC = v16;
    gArgV = (uint64_t)v11;
    if (gArgVAlt) {
      free((void *)gArgVAlt);
    }
    gArgVAlt = v12;
  }

LABEL_112:
    uint64_t v45 = 0LL;
    goto LABEL_113;
  }

  uint64_t v47 = *(char **)(gArgV + 8 * v46);
  uint64_t v48 = _CLIFindOption((unsigned __int8 **)v3, 3, 0, v47);
  if (!v48)
  {
    if (_CLIFindOption((unsigned __int8 **)v3, 3, 0, 0LL))
    {
      _CLIPrintCommandNotFound((uint64_t)v47, *(void *)(v3 + 80));
      goto LABEL_80;
    }

    goto LABEL_112;
  }

  uint64_t v49 = (uint64_t)v48;
  gCLICurrentCommand = (uint64_t)v48;
  v48[10] = *(const char **)(v3 + 80);
  ++v7[74];
  uint64_t v50 = (unsigned __int8 **)v48[9];
  if (!v50) {
    goto LABEL_89;
  }
  uint64_t v51 = _CLIFindOption(v50, 3, 0, 0LL);
  *(void *)(*(void *)(v49 + 72) + 80LL) = v49;
  uint64_t v23 = ((uint64_t (*)(void))CLIParse)();
  if ((_DWORD)v23) {
    goto LABEL_106;
  }
  if (v51)
  {
LABEL_90:
    uint64_t v52 = *(_DWORD **)(v49 + 72);
    if (!v52 || !*v52)
    {
LABEL_108:
      gCLICurrentOption = v49;
      uint64_t v59 = *(void (**)(void))(v49 + 64);
      if (v59) {
        v59();
      }
      uint64_t v45 = 133LL;
      goto LABEL_113;
    }

    int v53 = 0;
    char v54 = 1;
    do
    {
      while ((v52[12] & 0x30) == 0x10)
      {
        int v56 = _CLIHelp_PrintOptionName((uint64_t)v52, 0LL);
        char v54 = 0;
        if (v56 > v53) {
          int v53 = v56;
        }
        int v57 = v52[26];
        v52 += 26;
        if (!v57) {
          goto LABEL_161;
        }
      }

      int v55 = v52[26];
      v52 += 26;
    }

    while (v55);
    if ((v54 & 1) != 0) {
      goto LABEL_108;
    }
LABEL_161:
    int32x4_t v95 = *(_DWORD **)(v49 + 72);
    if (v95 && *v95)
    {
      __int32 v96 = (FILE **)MEMORY[0x1895F89D0];
      uint64_t v45 = 129LL;
      do
      {
        if ((v95[12] & 0x30) == 0x10)
        {
          fwrite("error: ", 7uLL, 1uLL, *v96);
          int v97 = _CLIHelp_PrintOptionName((uint64_t)v95, (uint64_t)*v96);
          fprintf(*v96, "%*s not specified\n", v53 - v97, "");
        }

        int v98 = v95[26];
        v95 += 26;
      }

      while (v98);
      goto LABEL_113;
    }

    uint64_t v14 = 0LL;
    goto LABEL_113;
  }

  if (!strcasecmp(v10, "write") || !strcasecmp(v10, "set"))
  {
    if (v7 >= v8)
    {
      FPrintF(*MEMORY[0x1895F89D0]);
      uint64_t v14 = 0LL;
    }

    else
    {
      gArgI = v7 + 1;
      [NSString stringWithUTF8String:*(void *)(gArgV + 8 * v7)];
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
      int v21 = gArgI;
      if (gArgI < gArgC)
      {
        ++gArgI;
        BOOL v22 = *(void *)(gArgV + 8 * v21);
        if (!gCUCLIFilePath)
        {
          unsigned int v61 = (const void *)[NSString stringWithUTF8String:v22];
          if (v5) {
            int v62 = v5;
          }
          else {
            int v62 = (const __CFString *)*MEMORY[0x189605188];
          }
          CFPreferencesSetAppValue(v14, v61, v62);
          CFPreferencesAppSynchronize(v5);
          notify_post(a2);
          int v18 = 0LL;
LABEL_129:
          obj = 0LL;
          uint64_t v15 = 0LL;
          goto LABEL_113;
        }

        uint64_t v23 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0LL);
        if (v23)
        {
          uint64_t v15 = v23;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            FPrintF(*MEMORY[0x1895F89D0]);
LABEL_152:
            obj = 0LL;
            goto LABEL_110;
          }
        }

        else
        {
          [MEMORY[0x189603FC8] dictionary];
          uint64_t v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }

        [NSString stringWithUTF8String:v22];
        uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v63, v14);

        uint64_t v64 = CFPropertyListWriteToFilePath(v15, "binary1", (FILE *)gCUCLIFilePath);
        obj = 0LL;
        goto LABEL_108;
      }

      FPrintF(*MEMORY[0x1895F89D0]);
    }

    obj = 0LL;
    uint64_t v15 = 0LL;
    goto LABEL_110;
  }

  if (strcasecmp(v10, "delete") && strcasecmp(v10, "remove"))
  {
    if (!strcasecmp(v10, "keys"))
    {
      uint64_t v68 = (uint64_t *)MEMORY[0x1895F89E0];
      size_t v69 = fileno((FILE *)*MEMORY[0x1895F89E0]);
      int v70 = isatty(v69);
      uint64_t v102 = 0u;
      int v103 = 0u;
      passwd v104 = 0u;
      int32x4_t v105 = 0u;
      int v71 = v6;
      uid_t v72 = [v71 countByEnumeratingWithState:&v102 objects:v118 count:16];
      if (v72)
      {
        int v73 = v72;
        int v94 = v6;
        int v97 = v5;
        size_t v74 = 0LL;
        int v75 = *(void *)v103;
        if (v70) {
          id v76 = "\x1B[35m";
        }
        else {
          id v76 = "";
        }
        if (v70) {
          int32x4_t v77 = "\x1B[0m";
        }
        else {
          int32x4_t v77 = "";
        }
        do
        {
          int v78 = 0LL;
          dispatch_source_t v79 = v74;
          do
          {
            if (*(void *)v103 != v75) {
              objc_enumerationMutation(v71);
            }
            size_t v74 = *(id *)(*((void *)&v102 + 1) + 8 * v78);

            FPrintF(*v68);
            ++v78;
            dispatch_source_t v79 = v74;
          }

          while (v73 != v78);
          int v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v102, v118, 16, v76, v74, v77);
        }

        while (v73);

        double v6 = v94;
        uint64_t v5 = v97;
      }
    }

    else
    {
      FPrintF(*MEMORY[0x1895F89D0]);
    }

    int v18 = 0LL;
    uint64_t v14 = 0LL;
    goto LABEL_129;
  }

  if (!gCUCLIFilePath)
  {
    uint64_t v15 = 0LL;
    goto LABEL_95;
  }

  uint64_t v15 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0LL);
  if (!v15)
  {
    int v18 = 0LL;
    uint64_t v14 = 0LL;
    obj = 0LL;
    goto LABEL_113;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    FPrintF(*MEMORY[0x1895F89D0]);
    uint64_t v14 = 0LL;
    goto LABEL_152;
  }

  double v7 = gArgI;
  double v8 = gArgC;
LABEL_95:
  if (v7 < v8 && !strcasecmp(*(const char **)(gArgV + 8LL * v7), "*"))
  {
    gArgI = v7 + 1;
    if (v15)
    {
      -[__CFString allKeys](v15, "allKeys");
      int32x4_t v80 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      int32x4_t v80 = CFPrefs_CopyKeys(v5, 0LL);
    }

    int v108 = 0u;
    int v109 = 0u;
    uint64_t v106 = 0u;
    int32x4_t v107 = 0u;
    obj = v80;
    dispatch_source_t v81 = [obj countByEnumeratingWithState:&v106 objects:v119 count:16];
    if (v81)
    {
      int v82 = v81;
      int32x4_t v95 = v6;
      int v83 = 0LL;
      __int32 v84 = *(void *)v107;
      uint64_t v85 = v5;
      if (v5) {
        int v86 = v5;
      }
      else {
        int v86 = (const __CFString *)*MEMORY[0x189605188];
      }
      do
      {
        int v87 = 0LL;
        BOOL v88 = v83;
        do
        {
          if (*(void *)v107 != v84) {
            objc_enumerationMutation(obj);
          }
          int v83 = (__CFString *)*(id *)(*((void *)&v106 + 1) + 8 * v87);

          if (v15) {
            -[__CFString removeObjectForKey:](v15, "removeObjectForKey:", v83);
          }
          else {
            CFPreferencesSetAppValue(v83, 0LL, v86);
          }
          ++v87;
          BOOL v88 = v83;
        }

        while (v82 != v87);
        int v82 = [obj countByEnumeratingWithState:&v106 objects:v119 count:16];
      }

      while (v82);

      uint64_t v5 = v85;
      double v6 = v95;
    }

    double v7 = gArgI;
    double v8 = gArgC;
  }

  else
  {
    obj = 0LL;
  }

  if (v7 < v8)
  {
    if (v5) {
      uint64_t v65 = v5;
    }
    else {
      uint64_t v65 = (const __CFString *)*MEMORY[0x189605188];
    }
    do
    {
      gArgI = v7 + 1;
      [NSString stringWithUTF8String:*(void *)(gArgV + 8 * v7)];
      uint64_t v66 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v67 = (__CFString *)v66;
      if (v15) {
        -[__CFString setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", 0LL, v66);
      }
      else {
        CFPreferencesSetAppValue(v66, 0LL, v65);
      }

      double v7 = gArgI;
    }

    while (gArgI < gArgC);
  }

  if (!gCUCLIFilePath)
  {
    CFPreferencesAppSynchronize(v5);
    notify_post(a2);
    int v18 = 0LL;
    goto LABEL_112;
  }

  uint64_t v64 = CFPropertyListWriteToFilePath(v15, "binary1", (FILE *)gCUCLIFilePath);
  uint64_t v14 = 0LL;
LABEL_108:
  int v18 = 0LL;
  if (v64)
  {
    FPrintF(*MEMORY[0x1895F89D0]);
    goto LABEL_110;
  }

LABEL_89:
  uint64_t v23 = CLIParse(v3, v2 | 3u);
  if (!(_DWORD)v23) {
    goto LABEL_90;
  }
LABEL_106:
  uint64_t v45 = v23;
LABEL_113:
  if (!v5)
  {
    if ((_DWORD)v45 == 133) {
      unsigned int v61 = 0;
    }
    else {
      unsigned int v61 = v45;
    }
    if (!v61)
    {
      int v62 = v7[74];
      if (v62 < v6[75])
      {
        uint64_t v63 = (FILE **)MEMORY[0x1895F89D0];
        do
        {
          fprintf(*v63, "warning: unused argument '%s'.\n", *(const char **)(gArgV + 8LL * v62));
          int v62 = v7[74] + 1;
          v7[74] = v62;
        }

        while (v62 < v6[75]);
      }
    }

    uint64_t v45 = v61 == -6752 ? 0LL : v61;
    if (!(_DWORD)v45)
    {
      if (gCLIInteractivePending)
      {
        uint64_t v45 = 0LL;
        gCLIInteractivePending = 0;
        if (!gCLIInteractiveInputSource)
        {
          uint64_t v64 = signal(2, (void (__cdecl *)(int))1);
          uint64_t v65 = gProgramName;
          *(void *)var_rl_readline_name[0]() = v65;
          *(void *)var_rl_attempted_completion_function[0]() = _CLIInteractiveCompleter;
          __dst[0] = 0;
          uint64_t v66 = getenv("HOME");
          if (v66)
          {
            uint64_t v67 = v66;
            goto LABEL_130;
          }

          uint64_t v68 = sysconf(71);
          if (v68 >= 1) {
            size_t v69 = v68;
          }
          else {
            size_t v69 = 4096LL;
          }
          int v70 = (char *)malloc(v69);
          if (v70)
          {
            int v71 = v70;
            int v103 = 0LL;
            uid_t v72 = getuid();
            if (getpwuid_r(v72, &v104, v71, v69, &v103) || !v103 || (pw_dir = v103->pw_dir) == 0LL)
            {
              if (getuid()) {
                pw_dir = ".";
              }
              else {
                pw_dir = "/root";
              }
            }

            strlcpy(__dst, pw_dir, 0x400uLL);
            free(v71);
          }

          else
          {
            if (getuid()) {
              uint64_t v67 = ".";
            }
            else {
              uint64_t v67 = "/root";
            }
LABEL_130:
            strlcpy(__dst, v67, 0x400uLL);
          }

          size_t v74 = strlen(__dst);
          snprintf(&__dst[v74], 1024 - v74, "/.%s_history", (const char *)gProgramName);
          ((void (*)(uint64_t))softLinkread_history[0])((uint64_t)__dst);
          int v75 = (dispatch_queue_s *)MEMORY[0x1895F8AE0];
          id v76 = MEMORY[0x1895F8AE0];
          int32x4_t v77 = (FILE **)var_rl_instream[0]();
          int v78 = fileno(*v77);
          dispatch_source_t v79 = dispatch_source_create(MEMORY[0x1895F8B60], v78, 0LL, v75);
          int32x4_t v80 = (void *)gCLIInteractiveInputSource;
          gCLIInteractiveInputSource = (uint64_t)v79;

          if (gCLIInteractiveInputSource
            && (dispatch_source_set_event_handler_f( (dispatch_source_t)gCLIInteractiveInputSource,  (dispatch_function_t)_CLIInteractiveHandleInput),  dispatch_resume((dispatch_object_t)gCLIInteractiveInputSource),  v81 = dispatch_source_create(MEMORY[0x1895F8B68], 2uLL, 0LL, MEMORY[0x1895F8AE0]),  int v82 = (void *)gCLIInteractiveSigIntSignalSource,  gCLIInteractiveSigIntSignalSource = (uint64_t)v81,  v82,  gCLIInteractiveSigIntSignalSource))
          {
            dispatch_source_set_event_handler_f( (dispatch_source_t)gCLIInteractiveSigIntSignalSource,  (dispatch_function_t)_CLIInteractiveHandleSigIntDirect);
            dispatch_resume((dispatch_object_t)gCLIInteractiveSigIntSignalSource);
            uint64_t v45 = _CLIInteractiveReset();
            if (!(_DWORD)v45)
            {
              int v83 = (void *)MEMORY[0x186E432B4]();
              [MEMORY[0x189604008] currentRunLoop];
              __int32 v84 = (void *)objc_claimAutoreleasedReturnValue();
              gCLIInteractiveMode = 1;
              uint64_t v85 = *MEMORY[0x189603A40];
              do
              {
                [MEMORY[0x189603F50] distantFuture];
                int v86 = (void *)objc_claimAutoreleasedReturnValue();
                int v87 = [v84 runMode:v85 beforeDate:v86];

                if (v87) {
                  BOOL v88 = gCLIInteractiveMode == 0;
                }
                else {
                  BOOL v88 = 1;
                }
              }

              while (!v88);

              objc_autoreleasePoolPop(v83);
              softLinkrl_callback_handler_remove[0]();
              ((void (*)(uint64_t))softLinkwrite_history[0])((uint64_t)__dst);
              ((void (*)(uint64_t, uint64_t))softLinkhistory_truncate_file[0])((uint64_t)__dst, 512LL);
              uint64_t v45 = 0LL;
            }
          }

          else
          {
            uint64_t v45 = 4294960596LL;
          }

          if (gCLIInteractiveInputSource)
          {
            int v89 = (dispatch_source_s *)(id)gCLIInteractiveInputSource;
            dispatch_source_cancel(v89);
            int v90 = (void *)gCLIInteractiveInputSource;
            gCLIInteractiveInputSource = 0LL;
          }

          if (gCLIInteractiveSigIntSignalSource)
          {
            int8x16_t v91 = (dispatch_source_s *)(id)gCLIInteractiveSigIntSignalSource;
            dispatch_source_cancel(v91);
            int v92 = (void *)gCLIInteractiveSigIntSignalSource;
            gCLIInteractiveSigIntSignalSource = 0LL;
          }

          if (gCLIInteractiveSigIntTimerSource)
          {
            int v93 = (dispatch_source_s *)(id)gCLIInteractiveSigIntTimerSource;
            dispatch_source_cancel(v93);
            int v94 = (void *)gCLIInteractiveSigIntTimerSource;
            gCLIInteractiveSigIntTimerSource = 0LL;
          }
        }
      }
    }
  }

  return v45;
}

    if (self->_btConnectionEventsNeeded
      && !self->_btConnectionDevicesInitialized
      && self->_btLocalDevice
      && -[CBCentralManager state](self->_btCentralManager, "state") == 5)
    {
      -[CUBluetoothClient _handleConnectedDevicesInit](self, "_handleConnectedDevicesInit");
      self->_btConnectionDevicesInitialized = 1;
    }

    if (self->_btSession) {
      -[CUBluetoothClient _processFindDeviceRequests](self, "_processFindDeviceRequests");
    }
    goto LABEL_93;
  }

  BOOL v37 = self->_ucat;
  if (v37->var0 > 30) {
    goto LABEL_61;
  }
  if (v37->var0 != -1) {
    goto LABEL_55;
  }
  if (_LogCategory_Initialize((uint64_t)v37, 0x1Eu))
  {
    BOOL v37 = self->_ucat;
LABEL_55:
    LogPrintF( (uint64_t)v37,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"BTPairingAgent start\n",  v2,  v3,  v4,  v5,  v68);
  }

          if (v30 != j)
          {
            if (*v31 != 35) {
              goto LABEL_20;
            }
            uint64_t v28 = v30 - 1;
            goto LABEL_124;
          }

            char v29 = 1;
            goto LABEL_33;
          }
        }
      }

      char v29 = 0;
      goto LABEL_34;
    }

    uint64_t v41 = *(int **)(a1 + 16);
    if (*v41 <= 50)
    {
      if (*v41 == -1)
      {
        uint64_t v41 = *(int **)(a1 + 16);
      }

      LogPrintF( (uint64_t)v41,  (uint64_t)"OSStatus _ResumePairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"Pair-resume client M2 for ID %llu failed %#m...doing pair-verify\n",  v31,  v32,  v33,  v34,  *(void *)(a1 + 376));
    }

    *(_BYTE *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 96) = 3;
    int v53 = _VerifyClientExchange(a1, a2, a3, a4, a5, (uint64_t)a6, v36, v37);
    uint64_t v25 = 0LL;
    size_t v26 = 0;
    CFIndex Bytes = v53;
    goto LABEL_35;
  }

  CFIndex Bytes = TLV8GetBytes(a2, v14, 3, 0x20uLL, 0x20uLL, (char *)(a1 + 574), 0LL, 0LL);
  if (Bytes)
  {
LABEL_33:
    uint64_t v25 = 0LL;
LABEL_34:
    size_t v26 = 0;
    goto LABEL_35;
  }

  int v40 = *(_OWORD *)(a1 + 590);
  __dst[0] = *(_OWORD *)(a1 + 574);
  __dst[1] = v40;
  uint64_t v64 = *(void *)(a1 + 376);
  CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  (char *)__dst,  0x28uLL,  (uint64_t)"Pair-Resume-Request-Info",  24LL,  0x20uLL,  (uint64_t)__s);
  uint64_t v41 = (int8x16_t *)TLV8CopyCoalesced(a2, v14, 5, &v61, (int *)&Bytes);
  uint64_t v25 = v41;
  if (Bytes) {
    goto LABEL_34;
  }
  if (v61 <= 0xF)
  {
LABEL_91:
    size_t v26 = 0;
    int v27 = -6743;
    goto LABEL_27;
  }

  uint64_t v42 = v61 - 16;
  CFIndex Bytes = _chacha20_poly1305_decrypt_all( __s,  "PR-Msg01",  8LL,  0LL,  0LL,  v41,  v61 - 16,  v41,  (uint64_t)v41[-1].i64 + v61,  16LL);
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  if (Bytes) {
    goto LABEL_34;
  }
  _PairingRemoveResumeSessionID(*(void *)(a1 + 376));
  RandomBytes(&v64, 8uLL);
  CFIndex Bytes = 0;
  CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  (uint64_t)&v64,  8LL,  "Pair-Resume-SessionID-Salt",  0x1AuLL,  (uint64_t)"Pair-Resume-SessionID-Info",  26LL,  8uLL,  (uint64_t)&v64);
  *(void *)(a1 + 376) = v64;
  int v43 = *(uint64_t (**)(void, void, int8x16_t *, size_t, void **, size_t *, void))(a1 + 80);
  if (v43)
  {
    CFIndex Bytes = v43(*(void *)(a1 + 296), *(void *)(a1 + 304), v25, v42, &__src, &v59, *(void *)(a1 + 24));
    if (Bytes) {
      goto LABEL_34;
    }
  }

  if (v25) {
    free(v25);
  }
  *int v20 = 2;
  uint64_t v44 = v59;
  unsigned int v61 = v59 + 16;
  int v57 = v59 + 16;
  uint64_t v45 = (int8x16_t *)malloc(v59 + 16);
  uint64_t v25 = v45;
  if (!v45) {
    goto LABEL_106;
  }
  if (v44) {
    memcpy(v45, __src, v44);
  }
  CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  (char *)__dst,  0x28uLL,  (uint64_t)"Pair-Resume-Response-Info",  25LL,  0x20uLL,  (uint64_t)__s);
  _chacha20_poly1305_encrypt_all(__s, "PR-Msg02", 8LL, 0LL, 0LL, (int8x16_t *)__src, v59, v25, (uint64_t)v25->i64 + v59);
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  (char *)__dst,  0x28uLL,  (uint64_t)"Pair-Resume-Shared-Secret-Info",  30LL,  0x20uLL,  a1 + 638);
  _PairingSaveResumeState( a1,  *(const void **)(a1 + 296),  *(void *)(a1 + 304),  *(const void **)(a1 + 248),  *(void *)(a1 + 256),  *(void *)(a1 + 376),  (_OWORD *)(a1 + 638));
  CFIndex Bytes = TLV8BufferAppend((uint64_t)&v66, 6, (char *)(a1 + 120), 1uLL);
  if (Bytes) {
    goto LABEL_34;
  }
  v70[0] = 6;
  CFIndex Bytes = TLV8BufferAppend((uint64_t)&v66, 0, v70, 1uLL);
  if (Bytes) {
    goto LABEL_34;
  }
  CFIndex Bytes = TLV8BufferAppendUInt64((uint64_t)&v66, 14, *(void *)(a1 + 376));
  if (Bytes) {
    goto LABEL_34;
  }
  CFIndex Bytes = TLV8BufferAppend((uint64_t)&v66, 5, v25->i8, v57);
  if (Bytes) {
    goto LABEL_34;
  }
  uint64_t v46 = v67;
  uint64_t v47 = (UInt8 *)v68;
  if (!v68)
  {
    else {
      uint64_t v48 = v67;
    }
    uint64_t v49 = (UInt8 *)malloc(v48);
    if (v49)
    {
      uint64_t v47 = v49;
      if (v46) {
        memcpy(v49, v66, v46);
      }
      goto LABEL_79;
    }

uint64_t _CLIReorderArg(uint64_t a1)
{
  if (a1)
  {
    int v2 = (void *)gMutableArgV;
    if (gMutableArgV || (int v2 = malloc(8LL * gArgC + 8), (gMutableArgV = (uint64_t)v2) != 0))
    {
      uint64_t result = 0LL;
      uint64_t v4 = gMutableArgC++;
      v2[v4] = a1;
    }

    else
    {
      return 130LL;
    }
  }

  else
  {
    uint64_t v5 = gMutableArgC;
    if (gMutableArgC < 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v6 = gArgC;
      uint64_t v7 = gArgI;
      uint64_t v8 = gMutableArgV;
      if (gArgI < gArgC)
      {
        do
          *(void *)(v8 + 8 * v5++) = *(void *)(gArgV + 8 * v7++);
        while (v6 != v7);
      }

      uint64_t result = 0LL;
      *(void *)(v8 + 8LL * (int)v5) = 0LL;
      gArgI = 0;
      gArgC = v5;
      gArgV = v8;
      gMutableArgC = 0;
    }
  }

  return result;
}

uint64_t _CLIGetValue(uint64_t a1, char a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  if ((a2 & 2) != 0)
  {
    if ((v4 & 4) != 0)
    {
      char v12 = a2 & 0xFD;
      id v11 = "can't be negated";
LABEL_22:
      _CLIOptionError(a1, v11, v12);
      return 129LL;
    }

    char v5 = gOptionPtr;
    if (gOptionPtr)
    {
LABEL_19:
      id v11 = "doesn't take a value";
LABEL_20:
      a1 = v3;
      char v12 = a2;
      goto LABEL_22;
    }
  }

  else
  {
    char v5 = gOptionPtr != 0;
    if ((a2 & 1) == 0 && gOptionPtr && (*(_DWORD *)(a1 + 48) & 1) != 0) {
      goto LABEL_19;
    }
  }

  int v7 = *(_DWORD *)a1;
  switch(*(_DWORD *)a1)
  {
    case 6:
      uint64_t v13 = *(int **)(a1 + 16);
      if ((a2 & 2) != 0)
      {
        int v14 = 0;
      }

      else if (*v13 >= 1)
      {
        int v14 = *v13 + 1;
      }

      else
      {
        int v14 = 1;
      }

      *uint64_t v13 = v14;
      goto LABEL_119;
    case 7:
      if ((a2 & 2) != 0) {
        goto LABEL_86;
      }
      if (((v4 >> 1) & 1) != 0) {
        char v15 = v5;
      }
      else {
        char v15 = 1;
      }
      if ((v15 & 1) != 0)
      {
        uint64_t result = _CLIGetArg(a1, a2, *(void **)(a1 + 16));
        goto LABEL_118;
      }

      **(void **)(a1 + 16) = *(void *)(a1 + 32);
      goto LABEL_119;
    case 8:
      unsigned int v16 = *(CFTypeRef **)(a1 + 16);
      if ((a2 & 2) != 0)
      {
        if (*v16)
        {
          CFRelease(*v16);
          *unsigned int v16 = 0LL;
        }

        goto LABEL_108;
      }

      if (((v4 >> 1) & 1) != 0) {
        char v17 = v5;
      }
      else {
        char v17 = 1;
      }
      if ((v17 & 1) == 0)
      {
        CFTypeRef v31 = *v16;
        int v32 = *(const void **)(a1 + 32);
        if (v32) {
          CFRetain(*(CFTypeRef *)(a1 + 32));
        }
        *unsigned int v16 = v32;
        if (v31) {
          CFRelease(v31);
        }
LABEL_108:
        unsigned int v35 = 0;
        goto LABEL_117;
      }

      uint64_t result = _CLIGetArg(a1, a2, &cStr);
      unsigned int v35 = result;
      if ((_DWORD)result) {
        return result;
      }
      CFStringRef v18 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
      if (!v18) {
        return 130LL;
      }
      CFStringRef v19 = v18;
      if (*v16) {
        CFRelease(*v16);
      }
      *unsigned int v16 = v19;
LABEL_117:
      uint64_t result = v35;
LABEL_118:
      if (!(_DWORD)result)
      {
LABEL_119:
        uint64_t result = 0LL;
        *(_DWORD *)(v3 + 48) |= 0x20u;
      }

      return result;
    case 9:
      if ((a2 & 2) != 0)
      {
        StringArray_Free(**(void ****)(a1 + 16), **(void **)(a1 + 24));
        BOOL v30 = *(void **)(v3 + 24);
        goto LABEL_97;
      }

      if (((v4 >> 1) & 1) != 0) {
        char v20 = v5;
      }
      else {
        char v20 = 1;
      }
      if ((v20 & 1) != 0)
      {
        uint64_t result = _CLIGetArg(a1, a2, &cStr);
        if ((_DWORD)result) {
          return result;
        }
        int v21 = *(const void ***)(v3 + 16);
        BOOL v22 = *(uint64_t **)(v3 + 24);
        uint64_t v23 = cStr;
      }

      else
      {
        int v21 = *(const void ***)(a1 + 16);
        BOOL v22 = *(uint64_t **)(v3 + 24);
        uint64_t v23 = *(char **)(v3 + 32);
      }

      goto LABEL_119;
    case 0xA:
      if ((a2 & 2) != 0)
      {
        **(_DWORD **)(a1 + 16) = 0;
        goto LABEL_119;
      }

      if (((v4 >> 1) & 1) != 0) {
        char v24 = v5;
      }
      else {
        char v24 = 1;
      }
      if ((v24 & 1) == 0)
      {
        **(_DWORD **)(a1 + 16) = *(void *)(a1 + 32);
        goto LABEL_119;
      }

      uint64_t result = _CLIGetArg(a1, a2, &cStr);
      unsigned int v35 = result;
      if ((_DWORD)result) {
        return result;
      }
      **(_DWORD **)(v3 + 16) = strtol(cStr, &__endptr, 0);
      if (*__endptr)
      {
        id v11 = "expects an integer value";
        goto LABEL_20;
      }

      goto LABEL_117;
    case 0xB:
      gCLICurrentOption = a1;
      if ((a2 & 2) != 0)
      {
        size_t v26 = *(uint64_t (**)(void))(a1 + 56);
      }

      else if ((v4 & 1) != 0 || (((v4 >> 1) & 1) == 0 ? (char v25 = 1) : (char v25 = v5), (v25 & 1) == 0))
      {
        size_t v26 = *(uint64_t (**)(void))(a1 + 56);
      }

      else
      {
        uint64_t result = _CLIGetArg(a1, a2, &cStr);
        if ((_DWORD)result) {
          return result;
        }
        size_t v26 = *(uint64_t (**)(void))(v3 + 56);
      }

      uint64_t result = v26();
      goto LABEL_118;
    case 0xC:
      if ((a2 & 2) != 0)
      {
LABEL_86:
        BOOL v30 = *(void **)(a1 + 16);
LABEL_97:
        void *v30 = 0LL;
        goto LABEL_119;
      }

      if (((v4 >> 1) & 1) != 0) {
        char v27 = v5;
      }
      else {
        char v27 = 1;
      }
      if ((v27 & 1) == 0)
      {
        **(double **)(a1 + 16) = (double)*(uint64_t *)(a1 + 32);
        goto LABEL_119;
      }

      uint64_t result = _CLIGetArg(a1, a2, &cStr);
      unsigned int v35 = result;
      if ((_DWORD)result) {
        return result;
      }
      **(double **)(v3 + 16) = strtod(cStr, &__endptr);
      if (*__endptr)
      {
        id v11 = "expects a numeric value";
        goto LABEL_20;
      }

      goto LABEL_117;
    case 0xD:
    case 0xE:
      if ((a2 & 2) != 0)
      {
        unint64_t v10 = 0LL;
        unsigned int v35 = 0;
        if (v7 == 13) {
          goto LABEL_90;
        }
      }

      else
      {
        if (((v4 >> 1) & 1) != 0) {
          char v8 = v5;
        }
        else {
          char v8 = 1;
        }
        if ((v8 & 1) != 0)
        {
          uint64_t result = _CLIGetArg(a1, a2, &cStr);
          unsigned int v35 = result;
          if ((_DWORD)result) {
            return result;
          }
          unint64_t v10 = CLIFlagsToValueEx(0LL, cStr, *(const char **)(v3 + 24), (int *)&v35);
          if (v35) {
            return 129LL;
          }
          int v7 = *(_DWORD *)v3;
        }

        else
        {
          unint64_t v10 = *(void *)(a1 + 32);
          unsigned int v35 = 0;
        }

        if (v7 == 13)
        {
          if (HIDWORD(v10))
          {
            fprintf((FILE *)*MEMORY[0x1895F89D0], "error: flags out-of-range: 0x%llx\n", v10);
            return 129LL;
          }

LABEL_90:
          **(_DWORD **)(v3 + 16) = v10;
          goto LABEL_117;
        }
      }

      **(void **)(v3 + 16) = v10;
      goto LABEL_117;
    case 0xF:
      if ((a2 & 2) != 0)
      {
        int v29 = 0;
      }

      else
      {
        if (((v4 >> 1) & 1) != 0) {
          char v28 = v5;
        }
        else {
          char v28 = 1;
        }
        if ((v28 & 1) != 0)
        {
          uint64_t result = _CLIGetArg(a1, a2, &cStr);
          unsigned int v35 = result;
          if ((_DWORD)result) {
            return result;
          }
          int v29 = CLIArgNameValueParse(*(void *)(v3 + 40), cStr, (int *)&v35, *(const char ***)(v3 + 24));
          if (v35) {
            return 129LL;
          }
LABEL_116:
          **(_DWORD **)(v3 + 16) = v29;
          goto LABEL_117;
        }

        int v29 = *(_DWORD *)(a1 + 32);
      }

      unsigned int v35 = 0;
      goto LABEL_116;
    default:
      fprintf((FILE *)*MEMORY[0x1895F89D0], "BUG: unknown option type %d\n", *(_DWORD *)a1);
      return 128LL;
  }

      break;
    }
  }

  size_t v69 = (unint64_t)v5;
  while ((unint64_t)a4 > v69)
  {
    int v70 = v69 + 2;
    int v71 = *(unsigned __int8 *)(v69 + 1);
    uid_t v72 = *(unsigned __int8 *)v69;
    v69 += 2 + v71;
    if (v72 == 1)
    {
      if (!v71) {
        break;
      }
      int v73 = (void *)[objc_alloc(NSString) initWithBytes:v70 length:v71 encoding:4];
      size_t v74 = v73;
      if (!v73) {
        goto LABEL_105;
      }
      deviceIEName = self->_deviceIEName;
      id v76 = v73;
      int32x4_t v77 = deviceIEName;
      if (v76 == v77)
      {
      }

      else
      {
        int v78 = v77;
        if (v77)
        {
          dispatch_source_t v79 = -[NSString isEqual:](v76, "isEqual:", v77);

          if ((v79 & 1) != 0) {
            goto LABEL_105;
          }
        }

        else
        {
        }

        objc_storeStrong((id *)&self->_deviceIEName, v74);
        char v8 = 1;
      }

        char v12 = v26;
        CFStringRef v18 = v38[0];
        if (!LODWORD(v38[0])) {
          goto LABEL_18;
        }
        goto LABEL_19;
    }
  }

  char v12 = (const __CFString *)gCFNumbers[v15];
  if (v12)
  {
    CFRetain((CFTypeRef)gCFNumbers[v15]);
LABEL_18:
    CFStringRef v18 = 0;
    *a4 = v37;
    goto LABEL_19;
  }

    *((_DWORD *)v57 + 6) = v73;
    goto LABEL_73;
  }

  pthread_mutex_lock(&gPairingGlobalLock);
  if (v9 == -1LL) {
    strlen(__s);
  }
  int v21 = (const __CFDictionary *)KeychainCopyMatchingFormatted( &v80,  (uint64_t)"{%kO=%O%kO=%O%kO=%i%kO=%O%kO=%.*s%kO=%O%kO=%O}",  v15,  v16,  v17,  v18,  v19,  v20,  *MEMORY[0x18960BB38]);
  if ((_DWORD)v80)
  {
LABEL_54:
    if (!v21) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }

  CFTypeID TypeID = CFDataGetTypeID();
  TypedValue = CFDictionaryGetTypedValue(v21, (const void *)*MEMORY[0x18960BE78], TypeID, 0LL);
  char v24 = TypedValue;
  if (TypedValue)
  {
    v76[0] = 0LL;
    BytePtr = (char *)CFDataGetBytePtr(TypedValue);
    CFIndex Length = CFDataGetLength(v24);
    LODWORD(v80) = HexToData(BytePtr, Length, 22, (uint64_t)a4, 0x20uLL, (unint64_t *)v76, 0LL, 0LL);
    if ((_DWORD)v80) {
      goto LABEL_54;
    }
    if (v76[0] == (id)32)
    {
      char v27 = CFDataGetTypeID();
      char v28 = CFDictionaryGetTypedValue(v21, (const void *)*MEMORY[0x18960B928], v27, 0LL);
      if (v28)
      {
        int v29 = OPACKDecodeData(v28, 0, 0LL);
        BOOL v30 = (const __CFDictionary *)v29;
        if (v29)
        {
          CFTypeRef v31 = CFGetTypeID(v29);
          if (v31 == CFDictionaryGetTypeID())
          {
            int v32 = CFDictionaryGetTypeID();
            uint64_t v33 = CFDictionaryGetTypedValue(v30, @"acl", v32, 0LL);
LABEL_48:
            if (a5)
            {
              if (v33) {
                CFRetain(v33);
              }
              *a5 = v33;
            }

            if (v30) {
              CFRelease(v30);
            }
            goto LABEL_54;
          }
        }
      }

      else
      {
        BOOL v30 = 0LL;
      }

      uint64_t v33 = 0LL;
      goto LABEL_48;
    }

    uid_t v72 = -6743;
  }

  else
  {
    uid_t v72 = -6737;
  }

  LODWORD(v80) = v72;
  if (v21) {
LABEL_55:
  }
    CFRelease(v21);
LABEL_56:
  pthread_mutex_unlock(&gPairingGlobalLock);
  if ((_DWORD)v80) {
    return 4294960569LL;
  }
  else {
    return 0LL;
  }
}

const char **_CLIFindOption(unsigned __int8 **a1, int a2, char a3, char *a4)
{
  if (!a1) {
    return 0LL;
  }
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1) {
    return 0LL;
  }
  int v9 = *(_DWORD *)a1;
  unint64_t v10 = (const char **)a1;
  while (v9 != a2 && (a2 != 5 || (v9 - 6) > 9)
       || (a3 & 1) != 0 && ((_BYTE)v10[6] & 0x40) != 0
       || a4 && strcasecmp(v10[1], a4))
  {
    int v11 = *((_DWORD *)v10 + 26);
    v10 += 13;
    int v9 = v11;
    if (!v11)
    {
      if ((gRootFlags & 4) == 0)
      {
        int v12 = 0;
        unint64_t v10 = 0LL;
        do
        {
          if (v5 != a2 && (a2 != 5 || (v5 - 6) > 9)
            || (a3 & 1) != 0 && ((_BYTE)v4[6] & 0x40) != 0
            || a4 && stricmp_prefix(v4[1], (unsigned __int8 *)a4))
          {
            uint64_t v13 = v10;
          }

          else
          {
            ++v12;
            uint64_t v13 = (const char **)v4;
            if (v10) {
              break;
            }
          }

          int v14 = *((_DWORD *)v4 + 26);
          v4 += 13;
          int v5 = v14;
          unint64_t v10 = v13;
        }

        while (v14);
        if (v12 == 1) {
          return v10;
        }
      }

      return 0LL;
    }
  }

  return v10;
}

const char **_CLIHelp_PrintCommand(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = a1;
  if (!a2) {
    goto LABEL_6;
  }
  int v5 = *(const char ***)(a1 + 72);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = gArgI;
  if (gArgI >= gArgC)
  {
LABEL_6:
    int v5 = 0LL;
    goto LABEL_7;
  }

  ++gArgI;
  int v5 = _CLIFindOption((unsigned __int8 **)v5, 3, 0, *(char **)(gArgV + 8 * v6));
  if (!v5) {
    return (const char **)fprintf((FILE *)*MEMORY[0x1895F89D0], "error: unknown %s sub-command '%s'.\n");
  }
  v5[10] = (const char *)v4;
LABEL_7:
  if (v5) {
    uint64_t v4 = (uint64_t)v5;
  }
  int v7 = (FILE **)MEMORY[0x1895F89E0];
  fprintf((FILE *)*MEMORY[0x1895F89E0], "\n%s\n", *(const char **)(v4 + 88));
  _CLIHelp_PrintUsageLine(v4);
  fputc(10, *v7);
  uint64_t v8 = *(void *)(v4 + 80);
  if (v8)
  {
    int v9 = *(int **)(v8 + 72);
    if (v9) {
      _CLIHelp_PrintOptions(v9, "Parent options:", a3 | 1);
    }
  }

  uint64_t result = *(const char ***)(v4 + 72);
  if (result)
  {
    _CLIHelp_PrintOptions((int *)result, "Options:", a3 | 1);
    int v11 = 0;
    uint64_t v12 = *(void *)(v4 + 72);
    for (uint64_t i = (const char **)(v12 + 8); ; i += 13)
    {
      int v14 = *((_DWORD *)i - 2);
      if (v14 == 3)
      {
        int v15 = strlen(*i);
        if (v11 <= v15) {
          int v11 = v15;
        }
      }

      else if (!v14)
      {
        while (1)
        {
          if (*(_DWORD *)v12 == 3)
          {
            if (!v14) {
              fwrite("Commands:\n", 0xAuLL, 1uLL, *v7);
            }
            fprintf(*v7, "%*s%-*s    %s\n", 4, "", v11, *(const char **)(v12 + 8), *(const char **)(v12 + 88));
            ++v14;
          }

          else if (!*(_DWORD *)v12)
          {
            for (j = *(unsigned __int8 ***)(v4 + 72); ; j = (unsigned __int8 **)(v17 + 13))
            {
              uint64_t result = _CLIFindOption(j, 1, 0, 0LL);
              if (!result) {
                break;
              }
              char v17 = result;
              fprintf(*v7, "%s\n", result[11]);
              FPrintF((uint64_t)*v7);
              fputc(10, *v7);
            }

            if (v14) {
              uint64_t result = (const char **)fprintf( *v7,  "\nSee '%s help %s <command>' for more info about a command.\n\n",  (const char *)gProgramName,  *(const char **)(v4 + 8));
            }
            goto LABEL_33;
          }

          v12 += 104LL;
        }
      }
    }
  }

size_t _CLIHelp_PrintSummary(int a1)
{
  BOOL v2 = a1 == 0;
  _CLIHelp_PrintUsageLine(gRootOptions);
  uint64_t v3 = (FILE **)MEMORY[0x1895F89E0];
  fputc(10, (FILE *)*MEMORY[0x1895F89E0]);
  size_t result = _CLIHelp_PrintOptions((int *)gRootOptions, "Global options:", 4 * v2);
  int v5 = result;
  int v6 = 0;
  for (uint64_t i = gRootOptions; *(_DWORD *)i == 3; i += 104LL)
  {
    if (a1 || (*(_BYTE *)(i + 49) & 1) == 0)
    {
      size_t result = strlen(*(const char **)(i + 8));
    }

uint64_t _CLIHelp_PrintOptionName(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4))
  {
    uint64_t v4 = FPrintF(a2);
    if (*(void *)(a1 + 8)) {
      uint64_t v4 = FPrintF(a2) + v4;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  if (*(_DWORD *)a1 == 4) {
    return FPrintF(a2) + v4;
  }
  if (*(void *)(a1 + 8)) {
    uint64_t v4 = FPrintF(a2) + v4;
  }
  if ((*(_DWORD *)(a1 + 48) & 1) == 0) {
    return FPrintF(a2) + v4;
  }
  return v4;
}

uint64_t _CLIPrintCommandNotFound(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (FILE *)*MEMORY[0x1895F89D0];
  if (a2) {
    return fprintf(v2, "error: unknown %s command '%s'. See '%s help %s' for a list of commands.\n");
  }
  else {
    return fprintf(v2, "error: unknown command '%s'. See '%s help' for a list of commands.\n");
  }
}

void *initValrl_readline_name()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  size_t result = dlsym((void *)editLibrary_sLib, "rl_readline_name");
  variableValrl_readline_name = (uint64_t)result;
  var_rl_readline_name[0] = rl_readline_nameFunction;
  return result;
}

uint64_t rl_readline_nameFunction()
{
  return variableValrl_readline_name;
}

void *initValrl_attempted_completion_function()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  size_t result = dlsym((void *)editLibrary_sLib, "rl_attempted_completion_function");
  variableValrl_attempted_completion_function = (uint64_t)result;
  var_rl_attempted_completion_function[0] = rl_attempted_completion_functionFunction;
  return result;
}

uint64_t rl_attempted_completion_functionFunction()
{
  return variableValrl_attempted_completion_function;
}

uint64_t _CLIInteractiveCompleter(uint64_t a1, int a2)
{
  if (a2) {
    return 0LL;
  }
  else {
    return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_completion_matches[0])( a1,  (uint64_t)_CLIInteractiveGenerator);
  }
}

void *initValrl_instream()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  size_t result = dlsym((void *)editLibrary_sLib, "rl_instream");
  variableValrl_instream = (uint64_t)result;
  var_rl_instream[0] = rl_instreamFunction;
  return result;
}

uint64_t rl_instreamFunction()
{
  return variableValrl_instream;
}

uint64_t _CLIInteractiveHandleInput()
{
  gCLIInteractiveSigIntuint64_t Count = 0;
  return softLinkrl_callback_read_char[0]();
}

void _CLIInteractiveHandleSigIntDirect()
{
  if (!gCLIInteractiveSigIntTimerSource)
  {
    dispatch_source_t v0 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, MEMORY[0x1895F8AE0]);
    unsigned int v1 = (void *)gCLIInteractiveSigIntTimerSource;
    gCLIInteractiveSigIntTimerSource = (uint64_t)v0;

    if (gCLIInteractiveSigIntTimerSource)
    {
      dispatch_source_set_event_handler_f( (dispatch_source_t)gCLIInteractiveSigIntTimerSource,  (dispatch_function_t)_CLIInteractiveHandleSigIntDeferred);
      BOOL v2 = (dispatch_source_s *)gCLIInteractiveSigIntTimerSource;
      dispatch_time_t v3 = dispatch_time(0LL, 50000000LL);
      dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
      dispatch_resume((dispatch_object_t)gCLIInteractiveSigIntTimerSource);
    }

    else
    {
      _CLIInteractiveHandleSigIntDeferred();
    }
  }

uint64_t _CLIInteractiveReset()
{
  if (gCLIInteractivePrompt)
  {
    softLinkrl_callback_handler_remove[0]();
    ((void (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])( gCLIInteractivePrompt,  (uint64_t)_CLIInteractiveHandleLine);
  }

  else
  {
    BOOL v2 = 0LL;
    ASPrintF(&v2);
    dispatch_source_t v0 = v2;
    if (!v2)
    {
      gCLIInteractiveMode = 0;
      return 4294960568LL;
    }

    softLinkrl_callback_handler_remove[0]();
    ((void (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])( (uint64_t)v0,  (uint64_t)_CLIInteractiveHandleLine);
    free(v0);
  }

  return 0LL;
}

uint64_t inithistory_truncate_file(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkhistory_truncate_file[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_truncate_file");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_truncate_file[0])(a1, a2);
}

void *__editLibrary_block_invoke()
{
  size_t result = dlopen("/usr/lib/libedit.dylib", 2);
  editLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initwrite_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkwrite_history[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "write_history");
  return ((uint64_t (*)(uint64_t))softLinkwrite_history[0])(a1);
}

uint64_t initrl_callback_handler_remove()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkrl_callback_handler_remove[0] = (uint64_t (*)())dlsym( (void *)editLibrary_sLib,  "rl_callback_handler_remove");
  return softLinkrl_callback_handler_remove[0]();
}

void _CLIInteractiveHandleLine(void *a1)
{
  __s2 = 0LL;
  int v16 = 0;
  int v15 = 0LL;
  if (!a1) {
    goto LABEL_20;
  }
  int v2 = 0;
  if (!_CLIInteractiveLineHook((uint64_t)a1, 0LL))
  {
    int v4 = ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_expand[0])((uint64_t)a1, (uint64_t)&__s2);
    if (v4 && *__s2) {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", __s2);
    }
    int v2 = 0;
    if ((v4 & 0x80000000) == 0 && v4 != 2)
    {
      dispatch_time_t v3 = __s2;
      if (!__s2)
      {
        int v2 = 0;
        goto LABEL_23;
      }

      if (!strcasecmp(__s2, "q"))
      {
        int v2 = -6752;
LABEL_22:
        free(v3);
        if (!a1) {
          goto LABEL_5;
        }
LABEL_23:
        free(a1);
        if (!v2) {
          goto LABEL_24;
        }
LABEL_27:
        gCLIInteractiveMode = 0;
        return;
      }

      if (strcasecmp(v3, "quit") && strcasecmp(v3, "exit"))
      {
        int v2 = strcasecmp(v3, "history");
        if (v2)
        {
          if (!strcasecmp(v3, "?"))
          {
            free(v3);
            __s2 = strdup("help");
            if (!__s2)
            {
              int v2 = -6728;
              goto LABEL_23;
            }
          }
        }

        else if (*(int *)var_history_length[0]() >= 1)
        {
          int v5 = 0;
          int v6 = (FILE **)MEMORY[0x1895F89D0];
          do
          {
            int v7 = (_DWORD *)var_history_base[0]();
            int v8 = (const char **)((uint64_t (*)(uint64_t))softLinkhistory_get[0])((*v7 + v5++));
            if (v8) {
              fprintf(*v6, "%d: %s\n", v5, *v8);
            }
          }

          while (v5 < *(_DWORD *)var_history_length[0]());
        }

        if (*(int *)var_history_length[0]() <= 0)
        {
          int v12 = __s2;
        }

        else
        {
          int v9 = *(_DWORD *)var_history_base[0]();
          int v10 = (_DWORD *)var_history_length[0]();
          int v11 = (const char **)((uint64_t (*)(uint64_t))softLinkhistory_get[0])((v9 + *v10 - 1));
          int v12 = __s2;
          if (v11 && !strcmp(*v11, __s2))
          {
LABEL_40:
            if (v2)
            {
              int v2 = ParseCommandLineIntoArgV(__s2, (unsigned int *)&v16, &v15);
              if (!v2)
              {
                gArgC = 0;
                if (gArgVAlt)
                {
                  free((void *)gArgVAlt);
                  gArgVAlt = 0LL;
                }

                gMutableArgC = 0;
                if (gMutableArgV)
                {
                  free((void *)gMutableArgV);
                  gMutableArgV = 0LL;
                }

                if (gCLIInteractivePrompt)
                {
                  free((void *)gCLIInteractivePrompt);
                  gCLIInteractivePrompt = 0LL;
                }

                gArgI = 0;
                gArgC = v16;
                int v13 = (void **)v15;
                gArgV = (uint64_t)v15;
                int v14 = gRootOptions;
                if (gRootOptions) {
                  int v14 = CLIParse(gRootOptions, 0);
                }
                FreeCommandLineArgV(v14, v13);
                int v2 = 0;
              }
            }

            goto LABEL_3;
          }
        }

        ((void (*)(uint64_t))softLinkadd_history[0])((uint64_t)v12);
        goto LABEL_40;
      }

LABEL_3:
  dispatch_time_t v3 = __s2;
  if (__s2) {
    goto LABEL_22;
  }
  if (a1) {
    goto LABEL_23;
  }
LABEL_5:
  if (v2) {
    goto LABEL_27;
  }
LABEL_24:
  if (gCLIInteractiveBeginning == 1)
  {
    gCLIInteractiveBeginning = 0;
    return;
  }

uint64_t initrl_callback_handler_install(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkrl_callback_handler_install[0] = (uint64_t (*)())dlsym( (void *)editLibrary_sLib,  "rl_callback_handler_install");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_callback_handler_install[0])(a1, a2);
}

uint64_t _CLIInteractiveLineHook(uint64_t a1, uint64_t a2)
{
  int v4 = (void (*)(uint64_t, uint64_t, uint64_t))gCLIInteractiveLineHandler_f;
  if (gCLIInteractiveLineHandler_f)
  {
    uint64_t v5 = gCLIInteractiveLineHandler_ctx;
    gCLIInteractiveLineHandler_f = 0LL;
    gCLIInteractiveLineHandler_ctx = 0LL;
    if (gCLIInteractivePrompt)
    {
      free((void *)gCLIInteractivePrompt);
      gCLIInteractivePrompt = 0LL;
    }

    v4(a1, a2, v5);
  }

  else
  {
    uint64_t result = gCLIInteractiveLineHandler_b;
    if (!gCLIInteractiveLineHandler_b) {
      return result;
    }
    int v7 = (void (**)(void *, uint64_t, uint64_t))_Block_copy((const void *)gCLIInteractiveLineHandler_b);
    int v8 = (void *)gCLIInteractiveLineHandler_b;
    gCLIInteractiveLineHandler_b = 0LL;

    if (gCLIInteractivePrompt)
    {
      free((void *)gCLIInteractivePrompt);
      gCLIInteractivePrompt = 0LL;
    }

    v7[2](v7, a1, a2);
  }

  return 1LL;
}

uint64_t history_lengthFunction()
{
  return variableValhistory_length;
}

void *initValhistory_length()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "history_length");
  variableValhistory_length = (uint64_t)result;
  var_history_length[0] = history_lengthFunction;
  return result;
}

uint64_t history_baseFunction()
{
  return variableValhistory_base;
}

void *initValhistory_base()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "history_base");
  variableValhistory_base = (uint64_t)result;
  var_history_base[0] = history_baseFunction;
  return result;
}

uint64_t initadd_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkadd_history[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "add_history");
  return ((uint64_t (*)(uint64_t))softLinkadd_history[0])(a1);
}

uint64_t inithistory_get(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkhistory_get[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_get");
  return ((uint64_t (*)(uint64_t))softLinkhistory_get[0])(a1);
}

uint64_t inithistory_expand(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkhistory_expand[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "history_expand");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkhistory_expand[0])(a1, a2);
}

uint64_t _CLIInteractiveHandleSigIntDeferred()
{
  if (gCLIInteractiveSigIntTimerSource)
  {
    dispatch_source_t v0 = (dispatch_source_s *)(id)gCLIInteractiveSigIntTimerSource;
    dispatch_source_cancel(v0);
    unsigned int v1 = (void *)gCLIInteractiveSigIntTimerSource;
    gCLIInteractiveSigIntTimerSource = 0LL;
  }

  int v2 = (FILE **)MEMORY[0x1895F89D0];
  fputc(10, (FILE *)*MEMORY[0x1895F89D0]);
  if (!_CLIInteractiveLineHook(0LL, 1LL))
  {
    int v3 = gCLIInteractiveSigIntCount++;
    if (v3 >= 1)
    {
      fwrite("Enter 'q', 'quit', or 'exit' to exit interactive mode.\n", 0x37uLL, 1uLL, *v2);
      gCLIInteractiveSigIntuint64_t Count = 0;
    }
  }

  **(_BYTE **)var_rl_line_buffer[0]() = 0;
  return _CLIInteractiveReset();
}

void *initValrl_line_buffer()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  uint64_t result = dlsym((void *)editLibrary_sLib, "rl_line_buffer");
  variableValrl_line_buffer = (uint64_t)result;
  var_rl_line_buffer[0] = rl_line_bufferFunction;
  return result;
}

uint64_t rl_line_bufferFunction()
{
  return variableValrl_line_buffer;
}

uint64_t initrl_callback_read_char()
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkrl_callback_read_char[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_callback_read_char");
  return softLinkrl_callback_read_char[0]();
}

uint64_t initread_history(uint64_t a1)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkread_history[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "read_history");
  return ((uint64_t (*)(uint64_t))softLinkread_history[0])(a1);
}

char *_CLIInteractiveGenerator(const char *a1, int a2)
{
  size_t v4 = strlen(a1);
  uint64_t v5 = &gRootOptions;
  if (a2) {
    uint64_t v5 = &gCLIInteractiveNextCommand;
  }
  int v6 = (_DWORD *)*v5;
  int v7 = *(_DWORD *)*v5;
  if (!v7) {
    return 0LL;
  }
  size_t v8 = v4;
  for (uint64_t i = v6 + 26; ; i += 26)
  {
    gCLIInteractiveNextCommand = (uint64_t)i;
    if (v7 == 3)
    {
      int v10 = (const char *)*((void *)i - 12);
      if (!strncasecmp(v10, a1, v8)) {
        break;
      }
    }

    int v11 = *i;
    int v7 = v11;
    if (!v11) {
      return 0LL;
    }
  }

  return strdup(v10);
}

uint64_t initrl_completion_matches(uint64_t a1, uint64_t a2)
{
  if (editLibrary_sOnce != -1) {
    dispatch_once(&editLibrary_sOnce, &__block_literal_global_553);
  }
  softLinkrl_completion_matches[0] = (uint64_t (*)())dlsym((void *)editLibrary_sLib, "rl_completion_matches");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkrl_completion_matches[0])(a1, a2);
}

uint64_t _CLIHelp_PrintUsageLine(uint64_t a1)
{
  uint64_t v2 = gRootOptions;
  char v3 = gRootOptions != a1;
  size_t v4 = (FILE **)MEMORY[0x1895F89E0];
  fprintf((FILE *)*MEMORY[0x1895F89E0], "%s%*s%s", "\nUsage: ", 0, "", (const char *)gProgramName);
  if (v2 == a1)
  {
    if (_CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, 0LL))
    {
      size_t v8 = *v4;
      int v9 = " <command> [options] [args]";
      size_t v10 = 27LL;
LABEL_13:
      fwrite(v9, v10, 1uLL, v8);
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5)
    {
      fprintf(*v4, " %s", *(const char **)(v5 + 8));
      int v6 = *(unsigned __int8 ***)(*(void *)(a1 + 80) + 72LL);
      if (v6)
      {
        if (_CLIFindOption(v6, 5, 0, 0LL)) {
          fwrite(" [parent options]", 0x11uLL, 1uLL, *v4);
        }
      }
    }

    fprintf(*v4, " %s", *(const char **)(a1 + 8));
    int v7 = *(unsigned __int8 ***)(a1 + 72);
    if (v7)
    {
      if (!_CLIFindOption(v7, 3, 0, 0LL))
      {
        for (uint64_t i = *(void *)(a1 + 72); ; i += 104LL)
        {
          if (*(_DWORD *)i == 4)
          {
            if ((*(_DWORD *)(i + 48) & 2) != 0) {
              uint64_t v13 = 93LL;
            }
            else {
              uint64_t v13 = 62LL;
            }
            uint64_t v15 = v13;
            if ((*(_DWORD *)(i + 48) & 2) != 0) {
              uint64_t v14 = 91LL;
            }
            else {
              uint64_t v14 = 60LL;
            }
            fprintf(*v4, " %c%s%c", v14, *(const char **)(i + 8), v15);
          }

          else if (!*(_DWORD *)i)
          {
            return fputc(10, *v4);
          }
        }
      }

      size_t v8 = *v4;
      int v9 = " [options] <command> [sub-options] [args]";
      size_t v10 = 41LL;
      goto LABEL_13;
    }
  }

  return fputc(10, *v4);
}

uint64_t _CLIHelp_PrintOptions(int *a1, char *a2, char a3)
{
  int v3 = *a1;
  if (!*a1) {
    return 0LL;
  }
  uint64_t v6 = (uint64_t)a1;
  int v7 = 0;
  int v8 = 0;
  int v9 = (FILE **)MEMORY[0x1895F89E0];
  uint64_t v10 = (uint64_t)a1;
  do
  {
    if ((v3 == 4 || (v3 - 6) <= 9)
      && ((a3 & 2) == 0 || (*(_BYTE *)(v10 + 48) & 0x40) == 0)
      && ((a3 & 4) == 0 || (*(_BYTE *)(v10 + 49) & 1) == 0))
    {
      if (a2 && !v7)
      {
        fputs(a2, *v9);
        int v7 = 1;
      }

      int v11 = _CLIHelp_PrintOptionName(v10, 0LL);
      if (v11 > v8) {
        int v8 = v11;
      }
    }

    int v12 = *(_DWORD *)(v10 + 104);
    v10 += 104LL;
    int v3 = v12;
  }

  while (v12);
  int v13 = *(_DWORD *)v6;
  if (!*(_DWORD *)v6)
  {
    uint64_t v14 = 0LL;
    if (v7) {
      goto LABEL_52;
    }
    return v14;
  }

  uint64_t v14 = 0LL;
  do
  {
    if (((a3 & 2) == 0 || (*(_BYTE *)(v6 + 48) & 0x40) == 0) && ((a3 & 4) == 0 || (*(_BYTE *)(v6 + 49) & 1) == 0))
    {
      if (v13 == 2)
      {
        fputc(10, *v9);
        uint64_t v15 = *(const char **)(v6 + 88);
        if (*v15) {
          fprintf(*v9, "%*s%s\n", 4, "", v15);
        }
        goto LABEL_46;
      }

      if (v13 == 4 || (v13 - 6) <= 9)
      {
        if (!(_DWORD)v14) {
          fputc(10, *v9);
        }
        fprintf(*v9, "%*s", 4, "");
        int v16 = _CLIHelp_PrintOptionName(v6, (uint64_t)*v9);
        if ((*(_DWORD *)v6 - 13) >= 2)
        {
          if (*(_DWORD *)v6 == 15)
          {
            fprintf(*v9, "%*s    %s: ", v8 - v16, "", *(const char **)(v6 + 88));
            if ((a3 & 8) == 0)
            {
              int v18 = *v9;
              CFStringRef v19 = "Use help <command> to see all values.\n";
              size_t v20 = 38LL;
              goto LABEL_39;
            }

            _CLIPrintNameValueDescriptors(*(void **)(v6 + 24), (uint64_t)*v9);
            if ((a3 & 1) == 0)
            {
LABEL_46:
              uint64_t v14 = (v14 + 1);
              goto LABEL_47;
            }
          }

          else
          {
            fprintf(*v9, "%*s    %s\n", v8 - v16, "", *(const char **)(v6 + 88));
            if ((a3 & 1) == 0) {
              goto LABEL_46;
            }
          }
        }

        else
        {
          int v17 = *v9;
          if (*(void *)(v6 + 88)) {
            fprintf(v17, "%*s    %s: ");
          }
          else {
            fprintf(v17, "%*s    ");
          }
          if ((a3 & 8) != 0)
          {
            _CLIPrintFlagDescriptors(*(void *)(v6 + 24), (uint64_t)*v9);
            if ((a3 & 1) == 0) {
              goto LABEL_46;
            }
          }

          else
          {
            int v18 = *v9;
            CFStringRef v19 = "Use help <command> to see all flags.\n";
            size_t v20 = 37LL;
LABEL_39:
            fwrite(v19, v20, 1uLL, v18);
            if ((a3 & 1) == 0) {
              goto LABEL_46;
            }
          }
        }

        if (*(void *)(v6 + 96)) {
          FPrintF((uint64_t)*v9);
        }
        goto LABEL_46;
      }
    }

uint64_t _CLIPrintFlagDescriptors(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    size_t v4 = strlen((const char *)(a1 + 1));
    if (!v4) {
      break;
    }
    size_t v5 = v4;
    FPrintF(a2);
    a1 += v5 + 1 + 1;
  }

  return FPrintF(a2);
}

uint64_t _CLIPrintNameValueDescriptors(void *a1, uint64_t a2)
{
  if (*a1)
  {
    int v3 = a1 + 2;
    int v4 = -1;
    do
    {
      uint64_t v5 = *v3;
      v3 += 2;
      ++v4;
    }

    while (v5);
    int v6 = 0;
    int v7 = a1 + 2;
    do
    {
      int v8 = v6 + 1;
      FPrintF(a2);
      uint64_t v9 = *v7;
      v7 += 2;
      int v6 = v8;
    }

    while (v9);
  }

  return FPrintF(a2);
}

uint64_t _CLIOptionError(uint64_t a1, const char *a2, char a3)
{
  uint64_t v5 = (FILE **)MEMORY[0x1895F89D0];
  fwrite("error: option ", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
  if ((a3 & 1) != 0)
  {
    fprintf(*v5, "'%c' ");
  }

  else
  {
    int v6 = *v5;
    if ((a3 & 2) != 0) {
      fprintf(v6, "'no-%s' ");
    }
    else {
      fprintf(v6, "'%s' ");
    }
  }

  return fprintf(*v5, "%s.\n", a2);
}

uint64_t _CLIGetArg(uint64_t a1, char a2, void *a3)
{
  if (gOptionPtr)
  {
    uint64_t result = 0LL;
    *a3 = gOptionPtr;
    gOptionPtr = 0LL;
  }

  else
  {
    uint64_t v4 = gArgI + 1LL;
    if ((int)v4 >= gArgC)
    {
      _CLIOptionError(a1, "requires a value", a2);
      return 129LL;
    }

    else
    {
      uint64_t result = 0LL;
      ++gArgI;
      *a3 = *(void *)(gArgV + 8 * v4);
    }
  }

  return result;
}

uint64_t CLIFlagsToValueEx(uint64_t a1, char *__s, const char *a3, int *a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = __s;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v38 = 0LL;
  int v6 = &__s[strlen(__s)];
  while (2)
  {
    int v7 = (unsigned __int8 *)v5;
    do
    {
      if (v7 < (unsigned __int8 *)v6)
      {
        int v8 = v7;
        while (2)
        {
          uint64_t v9 = 0LL;
          unsigned __int8 v10 = 44;
          do
          {
            if (*v8 == v10)
            {
              uint64_t v5 = (char *)(v8 + 1);
              goto LABEL_12;
            }

            unsigned __int8 v10 = asc_186B67F6F[++v9];
          }

          while (v9 != 2);
          break;
        }
      }

      int v8 = (unsigned __int8 *)v6;
      uint64_t v5 = v6;
      if (v7 == (unsigned __int8 *)v6)
      {
        uint64_t v28 = a1;
        if (v38) {
          uint64_t v28 = v38;
        }
        uint64_t result = (v28 | v35) & ~v34;
        BOOL v30 = a4;
        if (a4)
        {
          int v31 = 0;
          goto LABEL_53;
        }

        return result;
      }

uint64_t CLIArgNameValueParse(int a1, char *a2, int *a3, const char **a4)
{
  int v6 = a2;
  if (!a2)
  {
    uint64_t v7 = gArgI;
    if (gArgI >= gArgC || (++gArgI, (int v6 = *(const char **)(gArgV + 8 * v7)) == 0LL))
    {
      uint64_t v11 = *MEMORY[0x1895F89D0];
      goto LABEL_12;
    }
  }

  int v8 = *a4;
  if (!*a4)
  {
LABEL_8:
    uint64_t v11 = *MEMORY[0x1895F89D0];
LABEL_12:
    FPrintF(v11);
    _CLIPrintNameValueDescriptors(a4, *MEMORY[0x1895F89D0]);
    uint64_t result = 0LL;
    if (!a3) {
      return result;
    }
    int v13 = -6705;
    goto LABEL_14;
  }

  uint64_t v9 = a4;
  while (strcasecmp(v6, v8))
  {
    unsigned __int8 v10 = v9[2];
    v9 += 2;
    int v8 = v10;
    if (!v10) {
      goto LABEL_8;
    }
  }

  uint64_t result = *((unsigned int *)v9 + 2);
  if (a3)
  {
    int v13 = 0;
LABEL_14:
    *a3 = v13;
  }

  return result;
}

const char **CLIHelpCommand(char *a1)
{
  if (!a1) {
    return (const char **)_CLIHelp_PrintSummary(1);
  }
  uint64_t v2 = _CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, a1);
  if (v2) {
    return _CLIHelp_PrintCommand((uint64_t)v2, 1, 8);
  }
  else {
    return (const char **)_CLIPrintCommandNotFound((uint64_t)a1, *(void *)(gRootOptions + 80));
  }
}

const char **_CLIHelpCommand()
{
  uint64_t v0 = gArgI;
  if (gArgI >= gArgC) {
    return CLIHelpCommand(0LL);
  }
  ++gArgI;
  return CLIHelpCommand(*(char **)(gArgV + 8 * v0));
}

uint64_t _CLIHelpOption(int a1, char *a2)
{
  uint64_t v2 = a2;
  if (a2 || (uint64_t v4 = gArgI + 1LL, (int)v4 < gArgC) && (++gArgI, (v2 = *(char **)(gArgV + 8 * v4)) != 0LL))
  {
    int v3 = _CLIFindOption((unsigned __int8 **)gRootOptions, 3, 0, v2);
    if (!v3)
    {
      _CLIPrintCommandNotFound((uint64_t)v2, *(void *)(gRootOptions + 80));
      return 4294960544LL;
    }
  }

  else
  {
    int v3 = (const char **)gCLICurrentCommand;
    if (!gCLICurrentCommand || *(const char **(**)())(gCLICurrentCommand + 64) == _CLIHelpCommand)
    {
      _CLIHelp_PrintSummary(1);
      return 4294960544LL;
    }
  }

  _CLIHelp_PrintCommand((uint64_t)v3, 0, 0);
  return 4294960544LL;
}

uint64_t _CLIVersionOption(uint64_t a1)
{
  unsigned int v1 = *(const char **)(a1 + 24);
  if (*(void *)(a1 + 16)) {
    BOOL v2 = v1 == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  else {
    fprintf((FILE *)*MEMORY[0x1895F89E0], "%s version %s (%s)\n");
  }
  return 4294960544LL;
}

uint64_t _CLIVersionCommand()
{
  return _CLIVersionOption(gCLICurrentOption);
}

uint64_t _CLIInteractiveOption()
{
  if (!gCLIInteractiveMode)
  {
    gCLIInteractiveMode = 1;
    gCLIInteractivePending = 1;
  }

  return 0LL;
}

uint64_t CLIInteractiveReadLine(const char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!a1)
  {
LABEL_6:
    gCLIInteractiveLineHandler_f = a3;
    gCLIInteractiveLineHandler_ctx = a4;
    return _CLIInteractiveReset();
  }

  int v6 = strdup(a1);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    if (gCLIInteractivePrompt) {
      free((void *)gCLIInteractivePrompt);
    }
    gCLIInteractivePrompt = v7;
    goto LABEL_6;
  }

  return 4294960568LL;
}

uint64_t CLIInteractiveReadLine_b(const char *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    uint64_t v5 = strdup(a1);
    if (!v5)
    {
      uint64_t v9 = 4294960568LL;
      goto LABEL_7;
    }

    uint64_t v6 = (uint64_t)v5;
    if (gCLIInteractivePrompt) {
      free((void *)gCLIInteractivePrompt);
    }
    gCLIInteractivePrompt = v6;
  }

  uint64_t v7 = _Block_copy(v4);
  int v8 = (void *)gCLIInteractiveLineHandler_b;
  gCLIInteractiveLineHandler_b = (uint64_t)v7;

  uint64_t v9 = _CLIInteractiveReset();
LABEL_7:

  return v9;
}

uint64_t CLIArgToValue( int a1, unsigned __int8 *a2, _DWORD *a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10)
{
  unsigned __int8 v10 = a2;
  if (!a2)
  {
    uint64_t v11 = gArgI;
    if (gArgI >= gArgC || (++gArgI, (unsigned __int8 v10 = *(unsigned __int8 **)(gArgV + 8 * v11)) == 0LL))
    {
      uint64_t v20 = *MEMORY[0x1895F89D0];
      goto LABEL_31;
    }
  }

  BOOL v30 = (const char **)&a10;
  int v12 = a9;
  if (!a9)
  {
LABEL_24:
    uint64_t v20 = *MEMORY[0x1895F89D0];
LABEL_31:
    FPrintF(v20);
    BOOL v30 = (const char **)&a10;
    int v22 = 0;
    uint64_t v23 = a9;
    if (a9)
    {
      char v24 = a9;
      do
      {
        ++v22;
        char v25 = v30++;
        char v24 = *v25;
      }

      while (*v25);
    }

    BOOL v30 = (const char **)&a10;
    if (a9)
    {
      int v26 = 0;
      do
      {
        FPrintF(*MEMORY[0x1895F89D0]);
        char v27 = v30++;
        uint64_t v23 = *v27;
        ++v26;
      }

      while (*v27);
    }

    FPrintF(*MEMORY[0x1895F89D0]);
    uint64_t result = 0LL;
    if (a3) {
      *a3 = -6705;
    }
    return result;
  }

  while (!strcasecmp(v12, "<any-true-ish>"))
  {
    if (!strnicmpx(v10, -1LL, "true")
      || !strnicmpx(v10, -1LL, "yes")
      || !strnicmpx(v10, -1LL, "y")
      || !strnicmpx(v10, -1LL, "on")
      || !strnicmpx(v10, -1LL, "1"))
    {
      unsigned int v29 = 1;
      goto LABEL_27;
    }

uint64_t CLIFlagsToValue(char *__s, const char *a2, int *a3)
{
  return CLIFlagsToValueEx(0LL, __s, a2, a3);
}

void CLIOutputBegin()
{
  if (gCLIInteractiveMode) {
    gCLIInteractiveBeginning = 1;
  }
}

uint64_t CLIOutputEnd()
{
  gCLIInteractiveBeginning = 0;
  if (gCLIInteractiveMode) {
    return _CLIInteractiveReset();
  }
  return result;
}

uint64_t CLIProgressClear()
{
  if (gCLIProgressMax >= 1)
  {
    uint64_t result = FPrintF(*MEMORY[0x1895F89D0]);
    gCLIProgressMax = 0;
  }

  return result;
}

uint64_t CLIProgressUpdate()
{
  uint64_t v0 = (uint64_t *)MEMORY[0x1895F89D0];
  FPrintF(*MEMORY[0x1895F89D0]);
  int v1 = FPrintF(*v0);
  uint64_t result = FPrintF(*v0);
  gCLIProgressMax = v1;
  return result;
}

void CLIPromptForPIN(int a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (uint64_t *)MEMORY[0x1895F89D0];
  if ((a1 & 0x10000) != 0) {
    FPrintF(*MEMORY[0x1895F89D0]);
  }
  uint64_t v7 = MEMORY[0x1895F87A8];
  if (a2 >= 1)
  {
    uint64_t v8 = mach_absolute_time();
    if (SecondsToUpTicks_sOnce != -1) {
      dispatch_once_f( &SecondsToUpTicks_sOnce,  &SecondsToUpTicks_sMultiplier,  (dispatch_function_t)_SecondsToUpTicksInit);
    }
    uint64_t v9 = v8 + SecondsToUpTicks_sMultiplier * a2;
    if (gCLIPINTimer)
    {
      unsigned __int8 v10 = (dispatch_source_s *)(id)gCLIPINTimer;
      dispatch_source_cancel(v10);
      uint64_t v11 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0LL;
    }

    dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, MEMORY[0x1895F8AE0]);
    uint64_t v13 = (void *)gCLIPINTimer;
    gCLIPINTimer = (uint64_t)v12;

    uint64_t v14 = (dispatch_source_s *)gCLIPINTimer;
    handler[0] = v7;
    handler[1] = 3221225472LL;
    handler[2] = __CLIPromptForPIN_block_invoke;
    handler[3] = &unk_189F302E0;
    uint64_t v23 = v9;
    id v22 = v5;
    dispatch_source_set_event_handler(v14, handler);
    uint64_t v15 = (dispatch_source_s *)gCLIPINTimer;
    dispatch_time_t v16 = dispatch_time(0LL, 1000000000LL);
    dispatch_source_set_timer(v15, v16, 0x3B9ACA00uLL, 0x5F5E100uLL);
    dispatch_resume((dispatch_object_t)gCLIPINTimer);
  }

  if (gCLIProgressMax >= 1)
  {
    FPrintF(*v6);
    gCLIProgressMax = 0;
  }

  v19[0] = v7;
  v19[1] = 3221225472LL;
  v19[2] = __CLIPromptForPIN_block_invoke_2;
  v19[3] = &unk_189F30308;
  id v20 = v5;
  id v17 = v5;
  CLIInteractiveReadLine_b("Enter PIN: ", v18, v19);
}

uint64_t __CLIPromptForPIN_block_invoke(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (v5 != 0 && v4)
  {
    UpTicksToSeconds(v5);
    return CLIProgressUpdate();
  }

  else
  {
    if (gCLIPINTimer)
    {
      uint64_t v7 = (dispatch_source_s *)(id)gCLIPINTimer;
      dispatch_source_cancel(v7);
      uint64_t v8 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0LL;
    }

    return CLIPromptForPIN(0LL, 0xFFFFFFFFLL, *(void *)(a1 + 32));
  }

void __CLIPromptForPIN_block_invoke_2(uint64_t a1, uint64_t a2, char a3)
{
  if (!a2 || (a3 & 1) != 0)
  {
    FPrintF(*MEMORY[0x1895F89D0]);
    if (gCLIPINTimer)
    {
      unint64_t v5 = (dispatch_source_s *)(id)gCLIPINTimer;
      dispatch_source_cancel(v5);
      uint64_t v6 = (void *)gCLIPINTimer;
      gCLIPINTimer = 0LL;
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    [NSString stringWithUTF8String:a2];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v7);
  }

uint64_t CLIScheduleExit(uint64_t result)
{
  if (!gCLIInteractiveMode) {
    exit(result);
  }
  gExitCode = result;
  gCLIInteractiveMode = 0;
  return result;
}

void CUCLIPrefs(void *a1, const char *a2, void *a3)
{
  uint64_t v122 = *MEMORY[0x1895F89C0];
  unint64_t v5 = a1;
  id v6 = a3;
  SwitchToMobileUser();
  int v7 = gArgI;
  int v8 = gArgC;
  if (gArgI >= gArgC)
  {
    unsigned __int8 v10 = "";
  }

  else
  {
    uint64_t v9 = gArgI;
    int v7 = ++gArgI;
    unsigned __int8 v10 = *(const char **)(gArgV + 8 * v9);
  }

  if (!*v10 || !strcasecmp(v10, "read") || !strcasecmp(v10, "get"))
  {
    if (gCUCLIFilePath)
    {
      uint64_t v11 = (__CFString *)CFPropertyListCreateFromFilePath((const char *)gCUCLIFilePath, 1uLL, 0LL);
      dispatch_source_t v12 = &unk_18C69F000;
      if (v11)
      {
        uint64_t v13 = v11;
        objc_opt_class();
        int v98 = v13;
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          FPrintF(*MEMORY[0x1895F89D0]);
          uint64_t v14 = 0LL;
          id obj = 0LL;
          uint64_t v15 = v13;
LABEL_110:
          id v18 = 0LL;
          gExitCode = 1;
          goto LABEL_113;
        }
      }

      else
      {
        [MEMORY[0x189603FC8] dictionary];
        int v98 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
    }

    else
    {
      int v98 = 0LL;
      dispatch_source_t v12 = (_DWORD *)&unk_18C69F000;
    }

    int v16 = fileno((FILE *)*MEMORY[0x1895F89E0]);
    int v17 = isatty(v16);
    __int32 v96 = v5;
    if (v12[74] >= gArgC)
    {
      int v19 = v17;
      if (v98)
      {
        -[__CFString allKeys](v98, "allKeys");
        id v20 = (void *)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        id v20 = CFPrefs_CopyKeys(v5, 0LL);
      }

      char v24 = v20;
      [v20 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];
      char v25 = (void *)objc_claimAutoreleasedReturnValue();

      __int128 v116 = 0u;
      __int128 v117 = 0u;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
      id v26 = v25;
      uint64_t v27 = [v26 countByEnumeratingWithState:&v114 objects:v121 count:16];
      if (v27)
      {
        uint64_t v28 = v27;
        id v29 = v6;
        id v30 = 0LL;
        LODWORD(v31) = 0;
        uint64_t v32 = *(void *)v115;
        do
        {
          uint64_t v33 = 0LL;
          uint64_t v34 = v30;
          do
          {
            if (*(void *)v115 != v32) {
              objc_enumerationMutation(v26);
            }
            id v30 = *(id *)(*((void *)&v114 + 1) + 8 * v33);

            int v35 = [v30 length];
            else {
              uint64_t v31 = v31;
            }
            ++v33;
            uint64_t v34 = v30;
          }

          while (v28 != v33);
          uint64_t v28 = [v26 countByEnumeratingWithState:&v114 objects:v121 count:16];
        }

        while (v28);

        id v6 = v29;
        dispatch_source_t v12 = (_DWORD *)&unk_18C69F000;
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      __int128 v112 = 0u;
      __int128 v113 = 0u;
      __int128 v110 = 0u;
      __int128 v111 = 0u;
      id obj = v26;
      uint64_t v36 = [obj countByEnumeratingWithState:&v110 objects:v120 count:16];
      if (v36)
      {
        uint64_t v37 = v36;
        id v92 = v6;
        id v18 = 0LL;
        uint64_t v38 = 0LL;
        uint64_t v101 = *(void *)v111;
        if (v19) {
          uint64_t v39 = "\x1B[35m";
        }
        else {
          uint64_t v39 = "";
        }
        if (v19) {
          BOOL v40 = "\x1B[0m";
        }
        else {
          BOOL v40 = "";
        }
        char v41 = (const __CFString *)*MEMORY[0x189605188];
        uint64_t v15 = v98;
        if (v96) {
          char v41 = v96;
        }
        applicationID = v41;
        do
        {
          uint64_t v42 = 0LL;
          int v43 = v18;
          uint64_t v44 = v38;
          do
          {
            if (*(void *)v111 != v101) {
              objc_enumerationMutation(obj);
            }
            uint64_t v38 = (__CFString *)*(id *)(*((void *)&v110 + 1) + 8 * v42);

            if (v15)
            {
              uint64_t v45 = -[__CFString objectForKeyedSubscript:](v15, "objectForKeyedSubscript:", v38);
            }

            else
            {
              uint64_t v45 = (uint64_t)CFPreferencesCopyAppValue(v38, applicationID);
            }

            id v18 = (id)v45;
            uint64_t v46 = (uint64_t *)MEMORY[0x1895F89E0];

            uint64_t v90 = (uint64_t)v38;
            uint64_t v91 = (uint64_t)v39;
            FPrintF(*v46);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && (unint64_t)objc_msgSend(v18, "length", v31, v38, v39) <= 0x80)
            {
              uint64_t v47 = *v46;
              id v48 = v18;
              [v48 bytes];
              uint64_t v49 = v48;
              uint64_t v46 = (uint64_t *)MEMORY[0x1895F89E0];
              uint64_t v90 = [v49 length];
              uint64_t v91 = 128LL;
              uint64_t v50 = v47;
              uint64_t v15 = v98;
            }

            else
            {
              uint64_t v50 = *v46;
            }

            FPrintF(v50);
            FPrintF(*v46);
            ++v42;
            int v43 = v18;
            uint64_t v44 = v38;
          }

          while (v37 != v42);
          uint64_t v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v110, v120, 16, v40);
        }

        while (v37);

        id v6 = v92;
        dispatch_source_t v12 = (_DWORD *)&unk_18C69F000;
      }

      else
      {
        id v18 = 0LL;
        uint64_t v15 = v98;
      }

      unint64_t v5 = v96;
      if (![obj count]) {
        FPrintF(*MEMORY[0x1895F89D0]);
      }
    }

    else
    {
      id v18 = 0LL;
      id obj = 0LL;
      uint64_t v15 = v98;
    }

    int v51 = v12[74];
    if (v51 < gArgC)
    {
      id v93 = v6;
      if (v5) {
        uint64_t v52 = v5;
      }
      else {
        uint64_t v52 = (const __CFString *)*MEMORY[0x189605188];
      }
      do
      {
        uint64_t v53 = gArgV;
        v12[74] = v51 + 1;
        char v54 = *(void **)(v53 + 8LL * v51);
        objc_msgSend(NSString, "stringWithUTF8String:", v54, v89, v90, v91);
        int v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v98)
        {
          uint64_t v56 = -[__CFString objectForKeyedSubscript:](v98, "objectForKeyedSubscript:", v55);
        }

        else
        {
          uint64_t v56 = (uint64_t)CFPreferencesCopyAppValue(v55, v52);
        }

        int v57 = (void *)v56;

        id v18 = v57;
        if (v57)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)[v57 length] <= 0x80)
          {
            uint64_t v58 = *MEMORY[0x1895F89E0];
            id v18 = v18;
            uint64_t v59 = [v18 bytes];
            uint64_t v90 = [v18 length];
            uint64_t v91 = 128LL;
            int v89 = (void *)v59;
            dispatch_source_t v12 = (_DWORD *)&unk_18C69F000;
            uint64_t v60 = v58;
          }

          else
          {
            uint64_t v60 = *MEMORY[0x1895F89E0];
            int v89 = v57;
          }

          FPrintF(v60);
        }

        else
        {
          int v89 = v54;
          FPrintF(*MEMORY[0x1895F89D0]);
          id v18 = 0LL;
        }

        int v51 = v12[74];
      }

      while (v51 < gArgC);
      uint64_t v14 = 0LL;
      id v6 = v93;
      unint64_t v5 = v96;
      uint64_t v15 = v98;
      goto LABEL_113;
    }

void ErrQuit(int a1)
{
}

uint64_t CoreAudioCopyDataSourceName(uint64_t a1, int a2, uint64_t a3)
{
  int v10 = 0;
  int v11 = a2;
  uint64_t v9 = 0x6F7574706C73636ELL;
  unint64_t v5 = &v11;
  int v6 = 4;
  uint64_t v7 = a3;
  int v8 = 8;
  int v4 = 32;
  return softLinkAudioObjectGetPropertyData_685(a1, &v9, 0LL, 0LL, &v4, &v5);
}

uint64_t initAudioObjectGetPropertyData_686( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce_687 != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce_687, &__block_literal_global_688);
  }
  softLinkAudioObjectGetPropertyData_685 = (uint64_t (*)(void, void, void, void, void, void))dlsym((void *)CoreAudioLibrary_sLib_689, "AudioObjectGetPropertyData");
  return softLinkAudioObjectGetPropertyData_685(a1, a2, a3, a4, a5, a6);
}

void *__CoreAudioLibrary_block_invoke_691()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreAudio.framework/CoreAudio", 2);
  CoreAudioLibrary_sLib_689 = (uint64_t)result;
  return result;
}

uint64_t CoreAudioCopyPropertyData( uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v13 = 0LL;
  __size_4[0] = a2;
  __size_4[1] = a3;
  __size_4[2] = a4;
  unsigned int __size = 0;
  int v14 = 100;
  while (1)
  {
    uint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyDataSize[0])( a1,  (uint64_t)__size_4,  a6,  a5,  (uint64_t)&__size);
    if ((_DWORD)v15)
    {
      uint64_t v18 = v15;
      goto LABEL_16;
    }

    if (!__size)
    {
      if (v13)
      {
        free(v13);
        uint64_t v19 = 0LL;
        uint64_t v13 = 0LL;
      }

      else
      {
        uint64_t v19 = 0LL;
      }

      goto LABEL_12;
    }

    int v16 = realloc(v13, __size);
    if (!v16) {
      break;
    }
    uint64_t v13 = v16;
    uint64_t PropertyData_685 = softLinkAudioObjectGetPropertyData_685(a1, __size_4, a6, a5, &__size, v16);
    if (!(_DWORD)PropertyData_685)
    {
      uint64_t v19 = __size;
LABEL_12:
      uint64_t v18 = 0LL;
      *a7 = v13;
      *a8 = v19;
      return v18;
    }

    uint64_t v18 = PropertyData_685;
    if (!--v14) {
      goto LABEL_7;
    }
  }

  uint64_t v18 = 4294960568LL;
LABEL_16:
  if (v13) {
LABEL_7:
  }
    free(v13);
  return v18;
}

uint64_t initAudioObjectGetPropertyDataSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (CoreAudioLibrary_sOnce_687 != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce_687, &__block_literal_global_688);
  }
  softLinkAudioObjectGetPropertyDataSize[0] = (uint64_t (*)())dlsym( (void *)CoreAudioLibrary_sLib_689,  "AudioObjectGetPropertyDataSize");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioObjectGetPropertyDataSize[0])( a1,  a2,  a3,  a4,  a5);
}

uint64_t CoreAudioGetPropertyData( uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, void *a9)
{
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  unsigned int v11 = a8;
  uint64_t result = softLinkAudioObjectGetPropertyData_685(a1, v12, a6, a5, &v11, a7);
  if (a9) {
    BOOL v10 = (_DWORD)result == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    *a9 = v11;
  }
  return result;
}

uint64_t CoreAudioSetPropertyData( uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[0] = a2;
  v9[1] = a3;
  void v9[2] = a4;
  return softLinkAudioObjectSetPropertyData(a1, v9, a6, a5, a8, a7);
}

uint64_t initAudioObjectSetPropertyData( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (CoreAudioLibrary_sOnce_687 != -1) {
    dispatch_once(&CoreAudioLibrary_sOnce_687, &__block_literal_global_688);
  }
  softLinkAudioObjectSetPropertyCFDictionaryRef Data = (uint64_t (*)(void, void, void, void, void, void))dlsym((void *)CoreAudioLibrary_sLib_689, "AudioObjectSetPropertyData");
  return softLinkAudioObjectSetPropertyData(a1, a2, a3, a4, a5, a6);
}

uint64_t CoreAudioFindDeviceByUID(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v4 = 0x676C6F6272756964LL;
  int v5 = 0;
  int v3 = 4;
  return softLinkAudioObjectGetPropertyData_685(1LL, &v4, 8LL, &v6, &v3, a2);
}

uint64_t CoreAudioGetDefaultAudioDevice(uint64_t a1)
{
  uint64_t v3 = 0x676C6F62644F7574LL;
  int v4 = 0;
  int v2 = 4;
  return softLinkAudioObjectGetPropertyData_685(1LL, &v3, 0LL, 0LL, &v2, a1);
}

uint64_t CoreAudioSetDefaultAudioDevice(int a1, int a2, _DWORD *a3)
{
  int v12 = a1;
  uint64_t v10 = 0x676C6F62644F7574LL;
  int v11 = 0;
  if (a3)
  {
    int v9 = 4;
  }

  if (a2)
  {
    int v8 = 1;
    uint64_t v5 = 4LL;
    uint64_t v6 = &v8;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  int v9 = 4;
  return softLinkAudioObjectSetPropertyData(1LL, &v10, v5, v6, 4LL, &v12);
}

uint64_t CoreAudioRampParameterStart( dispatch_source_s **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, dispatch_queue_s *a7, uint64_t a8, float a9, double a10)
{
  int v13 = a5;
  int v14 = a4;
  int v15 = a3;
  uint64_t v37 = 0LL;
  uint64_t v38 = (float *)&v37;
  uint64_t v39 = 0x2000000000LL;
  v35[0] = 0LL;
  v35[1] = v35;
  v35[2] = 0x2000000000LL;
  int v36 = 0;
  uint64_t v20 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter_698[0])( a2,  a3,  a4,  a5,  (uint64_t)&v40);
  if (!(_DWORD)v20)
  {
    float v21 = v38[6];
    if (a7) {
      uint64_t v22 = a7;
    }
    else {
      uint64_t v22 = (dispatch_queue_s *)MEMORY[0x1895F8AE0];
    }
    uint64_t v23 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, v22);
    if (v23)
    {
      char v24 = v23;
      unint64_t v25 = (unint64_t)(a10 * 1000000000.0 / (double)a6);
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 0x40000000LL;
      handler[2] = __CoreAudioRampParameterStart_block_invoke;
      handler[3] = &unk_189F30350;
      float v29 = (float)(a9 - v21) / (float)a6;
      int v30 = v15;
      int v31 = v14;
      handler[6] = v35;
      handler[7] = a2;
      int v32 = v13;
      int v33 = a6;
      float v34 = a9;
      void handler[4] = a8;
      handler[5] = &v37;
      handler[8] = v23;
      handler[9] = a1;
      dispatch_source_set_event_handler(v23, handler);
      dispatch_time_t v26 = dispatch_time(0LL, v25);
      dispatch_source_set_timer(v24, v26, v25, 0x4C4B40uLL);
      if (a1) {
        *a1 = v24;
      }
      dispatch_resume(v24);
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v20 = 4294960596LL;
    }
  }

  _Block_object_dispose(v35, 8);
  _Block_object_dispose(&v37, 8);
  return v20;
}

void __CoreAudioRampParameterStart_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v3 = *(_DWORD *)(v2 + 24) + 1;
  *(_DWORD *)(v2 + 24) = v3;
  if (v3 >= *(_DWORD *)(a1 + 96) || *(float *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) == *(float *)(a1 + 100))
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
    float v4 = *(float *)(a1 + 100);
    if (*(float *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != v4) {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter_700[0])( *(void *)(a1 + 56),  *(unsigned int *)(a1 + 84),  *(unsigned int *)(a1 + 88),  *(unsigned int *)(a1 + 92),  0LL,  v4);
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
    if (!*(void *)(a1 + 72)) {
      dispatch_release(*(dispatch_object_t *)(a1 + 64));
    }
  }

uint64_t initAudioUnitSetParameter_701(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AudioToolboxLibrary_sOnce_702 != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce_702, &__block_literal_global_8);
  }
  softLinkAudioUnitSetParameter_700[0] = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib_703,  "AudioUnitSetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))softLinkAudioUnitSetParameter_700[0])( a1,  a2,  a3,  a4,  a5,  a6);
}

void *__AudioToolboxLibrary_block_invoke_705()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
  AudioToolboxLibrary_sLib_703 = (uint64_t)result;
  return result;
}

uint64_t initAudioUnitGetParameter_707(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AudioToolboxLibrary_sOnce_702 != -1) {
    dispatch_once(&AudioToolboxLibrary_sOnce_702, &__block_literal_global_8);
  }
  softLinkAudioUnitGetParameter_698[0] = (uint64_t (*)())dlsym( (void *)AudioToolboxLibrary_sLib_703,  "AudioUnitGetParameter");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioUnitGetParameter_698[0])( a1,  a2,  a3,  a4,  a5);
}

uint64_t _AESGCMCoreCryptoInitialize(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 32) {
    goto LABEL_5;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v5 = (size_t *)ccaes_gcm_encrypt_mode();
      goto LABEL_7;
    }

void _AESGCMCoreCryptoFinalize(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  int v1 = *(void **)(a1 + 32);
  int v3 = (rsize_t **)(v2 - 1);
  if (!v1)
  {
    --v2;
LABEL_8:
    char *v2 = 0LL;
    return;
  }

  if (!*v3)
  {
    uint64_t *v3 = 0LL;
    goto LABEL_7;
  }

  memset_s(v1, **v3, 0, **v3);
  int v1 = *v2;
  uint64_t *v3 = 0LL;
  if (v1)
  {
LABEL_7:
    free(v1);
    goto LABEL_8;
  }

uint64_t _AESGCMCoreCryptoEncryptMessage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294960591LL;
  if (a3 == 12 && a10 == 16)
  {
    uint64_t result = ccgcm_reset();
    if (!(_DWORD)result)
    {
      uint64_t result = ccgcm_set_iv();
      if (!(_DWORD)result)
      {
        if (!a5 || (uint64_t result = ccgcm_aad(), !(_DWORD)result))
        {
          if (!a7) {
            return ccgcm_finalize();
          }
          uint64_t result = ccgcm_update();
          if (!(_DWORD)result) {
            return ccgcm_finalize();
          }
        }
      }
    }
  }

  return result;
}

uint64_t _AESGCMCoreCryptoDecryptMessage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294960591LL;
  if (a3 == 12 && a10 == 16)
  {
    uint64_t result = ccgcm_reset();
    if (!(_DWORD)result)
    {
      uint64_t result = ccgcm_set_iv();
      if (!(_DWORD)result)
      {
        if (!a5 || (uint64_t result = ccgcm_aad(), !(_DWORD)result))
        {
          if (!a7) {
            return ccgcm_finalize();
          }
          uint64_t result = ccgcm_update();
          if (!(_DWORD)result) {
            return ccgcm_finalize();
          }
        }
      }
    }
  }

  return result;
}

uint64_t _AESGCMCoreCryptoEncryptMessageOneShot( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a3 != 32 || a5 != 12 || a12 != 16) {
    return 4294960591LL;
  }
  ccaes_gcm_encrypt_mode();
  return ccgcm_one_shot();
}

uint64_t _AESGCMCoreCryptoDecryptMessageOneShot( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = 4294960591LL;
  if (a3 == 32 && a5 == 12 && a12 == 16)
  {
    ccaes_gcm_decrypt_mode();
    return ccgcm_one_shot();
  }

  return result;
}

uint64_t _ChaCha20Poly1305Initialize(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  if (a4 != 32) {
    return 4294960591LL;
  }
  uint64_t result = 0LL;
  __int128 v6 = *a3;
  *(_OWORD *)(a1 + 40) = a3[1];
  *(_OWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t _ChaCha20Poly1305Finalize(uint64_t a1)
{
  return memset_s((void *)(a1 + 24), 0x20uLL, 0, 0x20uLL);
}

uint64_t _ChaCha20Poly1305EncryptMessage( uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294960591LL;
  if (a3 == 12 && a10 == 16)
  {
    _chacha20_poly1305_encrypt_all((_DWORD *)(a1 + 24), a2, 12LL, a4, a5, a6, a7, a8, a9);
    return 0LL;
  }

  return result;
}

uint64_t _ChaCha20Poly1305DecryptMessage( uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, unint64_t a5, int8x16_t *a6, unint64_t a7, int8x16_t *a8, uint64_t a9, uint64_t a10)
{
  if (a3 == 12 && a10 == 16) {
    return _chacha20_poly1305_decrypt_all((_DWORD *)(a1 + 24), a2, 12LL, a4, a5, a6, a7, a8, a9, 16LL);
  }
  else {
    return 4294960591LL;
  }
}

uint64_t _ChaCha20Poly1305EncryptMessageOneShot( uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, uint64_t a11, uint64_t a12)
{
  uint64_t result = 4294960591LL;
  if (a3 == 32 && a5 == 12 && a12 == 16)
  {
    _chacha20_poly1305_encrypt_all(a2, a4, 12LL, a6, a7, a8, a9, a10, a11);
    return 0LL;
  }

  return result;
}

uint64_t _ChaCha20Poly1305DecryptMessageOneShot( uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, uint64_t a11, uint64_t a12)
{
  if (a3 == 32 && a5 == 12 && a12 == 16) {
    return _chacha20_poly1305_decrypt_all(a2, a4, 12LL, a6, a7, a8, a9, a10, a11, 16LL);
  }
  else {
    return 4294960591LL;
  }
}

const void *CryptoAEADCreate( uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (gCryptoAEADInitOnce != -1) {
    dispatch_once_f(&gCryptoAEADInitOnce, 0LL, (dispatch_function_t)_CryptoAEADGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  int v11 = (const void *)Instance;
  if (!Instance)
  {
    int v12 = -6728;
    if (!a5) {
      return v11;
    }
    goto LABEL_7;
  }

  *(_OWORD *)(Instance + 248) = 0u;
  *(_OWORD *)(Instance + 232) = 0u;
  *(_OWORD *)(Instance + 216) = 0u;
  *(_OWORD *)(Instance + 200) = 0u;
  *(_OWORD *)(Instance + 184) = 0u;
  *(_OWORD *)(Instance + 168) = 0u;
  *(_OWORD *)(Instance + 152) = 0u;
  *(_OWORD *)(Instance + 136) = 0u;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 280) = 0u;
  *(_OWORD *)(Instance + 296) = 0u;
  *(_OWORD *)(Instance + 264) = 0u;
  *(void *)(Instance + 16) = a1;
  int v12 = (*a1)(Instance, a2, a3, a4);
  if (v12)
  {
    CFRelease(v11);
    int v11 = 0LL;
  }

  if (a5) {
LABEL_7:
  }
    *a5 = v12;
  return v11;
}

uint64_t _CryptoAEADGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gCryptoAEADCFTypeID TypeID = result;
  return result;
}

uint64_t _CryptoAEADFinalize(uint64_t result)
{
  int v1 = *(uint64_t (**)(void))(*(void *)(result + 16) + 8LL);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t CryptoAEADEncryptMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16LL))();
}

uint64_t CryptoAEADDecryptMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24LL))();
}

uint64_t CryptoAEADEncryptMessageOneShot( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17 = *(uint64_t (**)(void))(a1 + 32);
  if (v17) {
    return v17();
  }
  uint64_t v19 = CryptoAEADCreate((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1, 1LL, a2, a3, (int *)&v20);
  uint64_t result = v20;
  if (!v20)
  {
    if (!v19) {
      return 4294960534LL;
    }
    unsigned int v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19[2] + 16LL))( v19,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12);
LABEL_8:
    CFRelease(v19);
    return v20;
  }

  if (v19) {
    goto LABEL_8;
  }
  return result;
}

uint64_t CryptoAEADDecryptMessageOneShot( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17 = *(uint64_t (**)(void))(a1 + 40);
  if (v17) {
    return v17();
  }
  uint64_t v19 = CryptoAEADCreate((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1, 2LL, a2, a3, (int *)&v20);
  uint64_t result = v20;
  if (!v20)
  {
    if (!v19) {
      return 4294960534LL;
    }
    unsigned int v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19[2] + 24LL))( v19,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12);
LABEL_8:
    CFRelease(v19);
    return v20;
  }

  if (v19) {
    goto LABEL_8;
  }
  return result;
}

uint64_t _MD5Init(uint64_t a1)
{
  return CC_MD5_Init((CC_MD5_CTX *)(a1 + 8));
}

uint64_t _MD5Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_MD5_Update((CC_MD5_CTX *)(a1 + 8), a2, a3);
}

uint64_t _MD5Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_MD5_Final(md, (CC_MD5_CTX *)(a1 + 8));
}

uint64_t _SHA1Init(uint64_t a1)
{
  return CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 8));
}

uint64_t _SHA1Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA1_Update((CC_SHA1_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA1Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA1_Final(md, (CC_SHA1_CTX *)(a1 + 8));
}

uint64_t _SHA256Init(uint64_t a1)
{
  return CC_SHA256_Init((CC_SHA256_CTX *)(a1 + 8));
}

uint64_t _SHA256Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA256_Update((CC_SHA256_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA256Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA256_Final(md, (CC_SHA256_CTX *)(a1 + 8));
}

uint64_t _SHA512Init(uint64_t a1)
{
  return CC_SHA512_Init((CC_SHA512_CTX *)(a1 + 8));
}

uint64_t _SHA512Update(uint64_t a1, const void *a2, CC_LONG a3)
{
  return CC_SHA512_Update((CC_SHA512_CTX *)(a1 + 8), a2, a3);
}

uint64_t _SHA512Final(uint64_t a1, unsigned __int8 *md)
{
  return CC_SHA512_Final(md, (CC_SHA512_CTX *)(a1 + 8));
}

uint64_t _SHA3Init(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t result = a1 + 8;
  *(void *)(result + 272) = 0LL;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  return result;
}

uint64_t *_SHA3Update(uint64_t *result, void *__src, size_t __n)
{
  size_t v3 = __n;
  float v4 = __src;
  uint64_t v5 = result;
  __int128 v6 = result + 1;
  uint64_t v7 = result[26];
  if (v7)
  {
    if (72 - v7 >= __n) {
      size_t v8 = __n;
    }
    else {
      size_t v8 = 72 - v7;
    }
    uint64_t result = (uint64_t *)memcpy((char *)result + v7 + 216, __src, v8);
    unint64_t v9 = v5[26] + v8;
    v5[26] = v9;
    if (v9 < 0x48) {
      return result;
    }
    float v4 = (void *)((char *)v4 + v8);
    v3 -= v8;
    uint64_t result = (uint64_t *)_SHA3_Block(v6, v5 + 27);
  }

  if (v3 >= 0x48)
  {
    do
    {
      uint64_t result = (uint64_t *)_SHA3_Block(v6, v4);
      v4 += 9;
      v3 -= 72LL;
    }

    while (v3 > 0x47);
  }

  v5[26] = v3;
  if (v3) {
    return (uint64_t *)memcpy(v5 + 27, v4, v3);
  }
  return result;
}

uint64_t _SHA3Final(uint64_t a1, uint64_t a2)
{
  float v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 216);
  uint64_t v6 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v6 + 1;
  *(_BYTE *)(a1 + 216 + v6) = 6;
  bzero((void *)(a1 + 216 + *(void *)(a1 + 208)), 72LL - *(void *)(a1 + 208));
  *(_BYTE *)(a1 + 287) |= 0x80u;
  _SHA3_Block(v4, v5);
  unint64_t v7 = 0LL;
  do
    *(void *)(a2 + v7 * 8) = v4[v7];
  while (v7++ < 7);
  return memset_s(v4, 0x118uLL, 0, 0x118uLL);
}

uint64_t CryptoHashDescriptorGetDigestSize(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t CryptoHashInit(uint64_t (***a1)(void), uint64_t (**a2)(void))
{
  *a1 = a2;
  return (*a2)();
}

uint64_t CryptoHashUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
}

uint64_t CryptoHashFinal(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
}

uint64_t CryptoHashOneShot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[36] = *MEMORY[0x1895F89C0];
  v9[0] = a1;
  (*(void (**)(void *))a1)(v9);
  (*(void (**)(void *, uint64_t, uint64_t))(a1 + 8))(v9, a2, a3);
  return (*(uint64_t (**)(void *, uint64_t))(a1 + 16))(v9, a4);
}

uint64_t CryptoHMACInit(_BYTE *a1, uint64_t a2, char *a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*(void *)(a2 + 32) < a4)
  {
    *(void *)a1 = a2;
    (*(void (**)(_BYTE *))a2)(a1);
    (*(void (**)(_BYTE *, char *, unint64_t))(*(void *)a1 + 8LL))(a1, a3, v4);
    a3 = v13;
    (*(void (**)(_BYTE *, _BYTE *))(*(void *)a1 + 16LL))(a1, v13);
    unint64_t v4 = *(void *)(a2 + 24);
  }

  if (v4)
  {
    size_t v8 = a1 + 288;
    unint64_t v9 = v14;
    unint64_t v10 = v4;
    do
    {
      char v11 = *a3++;
      *v9++ = v11 ^ 0x36;
      *v8++ = v11 ^ 0x5C;
      --v10;
    }

    while (v10);
  }

  for (; v4 < *(void *)(a2 + 32); ++v4)
  {
    v14[v4] = 54;
    a1[v4 + 288] = 92;
  }

  *(void *)a1 = a2;
  (*(void (**)(_BYTE *))a2)(a1);
  return (*(uint64_t (**)(_BYTE *, _BYTE *, void))(*(void *)a1 + 8LL))(a1, v14, *(void *)(a2 + 32));
}

uint64_t CryptoHMACUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
}

uint64_t CryptoHMACFinal(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  *a1 = v4;
  (*(void (**)(uint64_t *))v4)(a1);
  (*(void (**)(uint64_t *, uint64_t *, void))(*a1 + 8))(a1, a1 + 36, *(void *)(v4 + 32));
  (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 8))(a1, a2, *(void *)(v4 + 24));
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, a2);
}

uint64_t CryptoHMACOneShot(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[52] = *MEMORY[0x1895F89C0];
  CryptoHMACInit(v10, a1, a2, a3);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10[0] + 8))(v10, a4, a5);
  return CryptoHMACFinal(v10, a6);
}

uint64_t CryptoHKDF( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v12 = a5;
  v28[52] = *MEMORY[0x1895F89C0];
  if (!a5)
  {
    unint64_t v12 = *(void *)(a1 + 24);
    a4 = &v27;
    __memset_chk();
  }

  CryptoHMACInit(v28, a1, a4, v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28[0] + 8))(v28, a2, a3);
  uint64_t result = CryptoHMACFinal(v28, (uint64_t)v26);
  unint64_t v18 = *(void *)(a1 + 24);
  if (a8 / v18 * v18 == a8) {
    unint64_t v19 = a8 / v18;
  }
  else {
    unint64_t v19 = a8 / v18 + 1;
  }
  if (v19)
  {
    unint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    for (unint64_t i = 1LL; i <= v19; ++i)
    {
      CryptoHMACInit(v28, a1, v26, v18);
      (*(void (**)(uint64_t *, _BYTE *, unint64_t))(v28[0] + 8))(v28, __src, v20);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28[0] + 8))(v28, a6, a7);
      char v24 = i;
      (*(void (**)(uint64_t *, char *, uint64_t))(v28[0] + 8))(v28, &v24, 1LL);
      CryptoHMACFinal(v28, (uint64_t)__src);
      if (v19 == i) {
        size_t v23 = a8 - v21;
      }
      else {
        size_t v23 = *(void *)(a1 + 24);
      }
      uint64_t result = (uint64_t)memcpy((void *)(a9 + v21), __src, v23);
      unint64_t v18 = *(void *)(a1 + 24);
      v21 += v18;
      unint64_t v20 = v18;
    }
  }

  return result;
}

uint64_t cstr_new()
{
  uint64_t v0 = (uint64_t (**)())default_alloc;
  if (!default_alloc)
  {
    uint64_t v0 = malloc_allocator;
    default_alloc = (uint64_t)malloc_allocator;
  }

  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t (*)()))*v0)(32LL, v0[2]);
  if (result)
  {
    *(void *)uint64_t result = &cstr_empty_string;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)(result + 16) = 1;
    *(void *)(result + 24) = v0;
  }

  return result;
}

uint64_t cstr_setn(uint64_t a1, const void *a2, int a3)
{
  uint64_t result = cstr_alloc(a1, a3 + 1);
  if ((result & 0x80000000) == 0)
  {
    *(_BYTE *)(*(void *)a1 + a3) = 0;
    if (a2)
    {
      if (a3 >= 1) {
        uint64_t result = (uint64_t)memmove(*(void **)a1, a2, a3);
      }
    }

    *(_DWORD *)(a1 + 8) = a3;
  }

  return result;
}

uint64_t cstr_alloc(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= a2) {
    return 0LL;
  }
  int v4 = 2 * v2;
  if (v4 <= a2) {
    int v4 = a2;
  }
  if (v4 <= 4) {
    uint64_t v5 = 4LL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (_BYTE *)(**(uint64_t (***)(uint64_t, void))(a1 + 24))(v5, *(void *)(*(void *)(a1 + 24) + 16LL));
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = v6;
  if (*(void *)a1)
  {
    v6[*(int *)(a1 + 8)] = 0;
    if (*(int *)(a1 + 12) >= 1)
    {
      size_t v8 = *(unsigned int *)(a1 + 8);
      free(*(void **)a1);
    }
  }

  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return 1LL;
}

uint64_t cstr_clear_free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v1;
  if (!v1)
  {
    int v2 = (void *)result;
    size_t v3 = *(unsigned int *)(result + 12);
    if ((int)v3 >= 1)
    {
      bzero(*(void **)result, v3);
      (*(void (**)(void, void))(v2[3] + 8LL))(*v2, *(void *)(v2[3] + 16LL));
    }

    return (*(uint64_t (**)(void *, void))(v2[3] + 8LL))(v2, *(void *)(v2[3] + 16LL));
  }

  return result;
}

uint64_t cstr_free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16) - 1;
  *(_DWORD *)(result + 16) = v1;
  if (!v1)
  {
    uint64_t v2 = result;
    if (*(int *)(result + 12) >= 1) {
      (*(void (**)(void, void))(*(void *)(result + 24) + 8LL))( *(void *)result,  *(void *)(*(void *)(result + 24) + 16LL));
    }
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 + 24) + 8LL))( v2,  *(void *)(*(void *)(v2 + 24) + 16LL));
  }

  return result;
}

uint64_t cstr_set_length(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 > a2)
  {
    *(_BYTE *)(*(void *)a1 + a2) = 0;
LABEL_7:
    *(_DWORD *)(a1 + 8) = a2;
    return 1LL;
  }

  if (v4 >= a2) {
    return 0LL;
  }
  int v5 = a2 + 1;
  if ((cstr_alloc(a1, a2 + 1) & 0x80000000) == 0)
  {
    bzero((void *)(*(void *)a1 + *(int *)(a1 + 8)), v5 - *(_DWORD *)(a1 + 8));
    goto LABEL_7;
  }

  return 0xFFFFFFFFLL;
}

void sub_186A6192C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id ACAccountStoreFunction()
{
  return (id)classACAccountStore;
}

Class initACAccountStore()
{
  if (AccountsLibrary_sOnce != -1) {
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_152);
  }
  Class result = objc_getClass("ACAccountStore");
  classACAccountStore = (uint64_t)result;
  getACAccountStoreClass[0] = (uint64_t (*)())ACAccountStoreFunction;
  return result;
}

id AKAccountManagerFunction()
{
  return (id)classAKAccountManager;
}

Class initAKAccountManager()
{
  if (AuthKitLibrary_sOnce != -1) {
    dispatch_once(&AuthKitLibrary_sOnce, &__block_literal_global_160);
  }
  Class result = objc_getClass("AKAccountManager");
  classAKAccountManager = (uint64_t)result;
  getAKAccountManagerClass[0] = (uint64_t (*)())AKAccountManagerFunction;
  return result;
}

void *__AuthKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AuthKit.framework/AuthKit", 2);
  AuthKitLibrary_sLib = (uint64_t)result;
  return result;
}

void *__AccountsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
  AccountsLibrary_sLib = (uint64_t)result;
  return result;
}

void *__AppleAccountLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount", 2);
  AppleAccountLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initValkAppleIDValidatedItemsRecordDataCertificateType()
{
  if (MobileCoreServicesLibrary_sOnce_876 != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce_876, &__block_literal_global_155);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)MobileCoreServicesLibrary_sLib_877, "kAppleIDValidatedItemsRecordDataCertificateType");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkAppleIDValidatedItemsRecordDataCertificateType = result;
  }

  else
  {
    uint64_t result = constantValkAppleIDValidatedItemsRecordDataCertificateType;
  }

  getkAppleIDValidatedItemsRecordDataCertificateType[0] = kAppleIDValidatedItemsRecordDataCertificateTypeFunction;
  return result;
}

uint64_t kAppleIDValidatedItemsRecordDataCertificateTypeFunction()
{
  return constantValkAppleIDValidatedItemsRecordDataCertificateType;
}

uint64_t init_AppleIDAuthenticationCopyCertificateInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileCoreServicesLibrary_sOnce_876 != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce_876, &__block_literal_global_155);
  }
  softLink_AppleIDAuthenticationCopyCertificateInfo = (uint64_t (*)())dlsym( (void *)MobileCoreServicesLibrary_sLib_877,  "_AppleIDAuthenticationCopyCertificateInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLink_AppleIDAuthenticationCopyCertificateInfo)( a1,  a2,  a3,  a4);
}

void *__MobileCoreServicesLibrary_block_invoke_879()
{
  uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
  MobileCoreServicesLibrary_sLib_877 = (uint64_t)result;
  return result;
}

uint64_t init_AppleIDCopySecIdentityForAppleIDAccount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileCoreServicesLibrary_sOnce_876 != -1) {
    dispatch_once(&MobileCoreServicesLibrary_sOnce_876, &__block_literal_global_155);
  }
  softLink_AppleIDCopySecIdentityForAppleIDAccount[0] = (uint64_t (*)())dlsym( (void *)MobileCoreServicesLibrary_sLib_877,  "_AppleIDCopySecIdentityForAppleIDAccount");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLink_AppleIDCopySecIdentityForAppleIDAccount[0])( a1,  a2,  a3);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void initSFAppleIDParseValidationRecordData(void *a1, void *a2, void *a3)
{
  uint64_t v5 = SharingLibrary_sOnce;
  id v6 = a3;
  id v7 = a2;
  id v8 = a1;
  if (v5 != -1) {
    dispatch_once(&SharingLibrary_sOnce, &__block_literal_global_914);
  }
  softLinkSFAppleIDParseValidationRecordData[0] = (uint64_t (*)())dlsym( (void *)SharingLibrary_sLib,  "SFAppleIDParseValidationRecordData");
  ((void (*)(id, id, id))softLinkSFAppleIDParseValidationRecordData[0])(v8, v7, v6);
}

void *__SharingLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
  SharingLibrary_sLib = (uint64_t)result;
  return result;
}

id CUAltDSIDPrimary()
{
  if (AppleAccountLibrary_sOnce != -1) {
    dispatch_once(&AppleAccountLibrary_sOnce, &__block_literal_global_149);
  }
  id v0 = objc_alloc_init((Class)getACAccountStoreClass[0]());
  objc_msgSend(v0, "aa_primaryAppleAccount");
  int v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "aa_altDSID");
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

LABEL_16:
}

    unint64_t v18 = _Block_copy(aBlock);
    activateCompletion = self->_activateCompletion;
    self->_activateCompletion = v18;

    -[CUBLEServer _startIfNeeded](self, "_startIfNeeded");
    goto LABEL_17;
  }

  int v4 = 4294960596LL;
LABEL_3:
  NSErrorWithOSStatusF((const char *)v4);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = self->_ucat;
  if (v10->var0 <= 90)
  {
    if (v10->var0 == -1)
    {
      uint64_t v10 = self->_ucat;
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUBLEServer _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v5,  v6,  v7,  v8,  (char)v9);
  }

  if ((_DWORD)a4 != 11) {
    goto LABEL_2;
  }
  if (!a5)
  {
    if (!*((_DWORD *)v18 + 60)) {
      goto LABEL_39;
    }
    uint64_t v46 = 0;
    ConnectedServices_1961 = softLinkBTDeviceGetConnectedServices_1961(a1, &v46);
    if (ConnectedServices_1961)
    {
      char v41 = ConnectedServices_1961 - 16;
      if (ConnectedServices_1961 != -310000)
      {
        uint64_t v42 = v18[28];
        if (*v42 <= 90)
        {
          if (*v42 != -1)
          {
LABEL_34:
            LogPrintF( (uint64_t)v42,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecific Event, BTResult, void * _Nonnull)",  0x5Au,  (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n",  v37,  v38,  v39,  v40,  v41);
            goto LABEL_38;
          }

          if (_LogCategory_Initialize((uint64_t)v42, 0x5Au))
          {
            uint64_t v42 = v18[28];
            goto LABEL_34;
          }
        }
      }
    }

  char v24 = self->_bonjourAdvertiser;
  unint64_t v25 = (void *)*((void *)v24 + 20);
  if (v25) {
    free(v25);
  }
  *((void *)v24 + 20) = 0LL;
  *((_WORD *)v24 + 84) = 0;
  *((_BYTE *)v24 + 170) = 1;
}

        id v7 = v24;
        selfAccessorySiriEnabled = v23;
      }
    }

    else
    {
      LODWORD(v11) = 0;
    }

    if (selfAccessorySiriEnabled == (_DWORD)v11)
    {
LABEL_28:

      goto LABEL_29;
    }

    ucCFAbsoluteTime at = self->_ucat;
    if (ucat->var0 <= 30)
    {
      if (ucat->var0 != -1)
      {
LABEL_21:
        if (selfAccessorySiriEnabled) {
          int v17 = "yes";
        }
        else {
          int v17 = "no";
        }
        [v7 isEnabled];
        LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessorySiriAccess]",  0x1Eu,  (uint64_t)"SelfAccessory SiriAccess per-accessory updated: %s -> %s (global %s)\n",  v18,  v19,  v20,  v21,  (char)v17);
        goto LABEL_26;
      }

      if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu))
      {
        ucCFAbsoluteTime at = self->_ucat;
        goto LABEL_21;
      }
    }

  if (v9)
  {
    uint64_t v21 = v30;
    if (v30)
    {
      uint64_t v22 = (void *)MEMORY[0x189607870];
      size_t v23 = *MEMORY[0x189607670];
      int v31 = *MEMORY[0x1896075E0];
      char v24 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v30, 0, 0));
      unint64_t v25 = (void *)v24;
      dispatch_time_t v26 = @"?";
      if (v24) {
        dispatch_time_t v26 = (const __CFString *)v24;
      }
      v32[0] = v26;
      [MEMORY[0x189603F68] dictionaryWithObjects:v32 forKeys:&v31 count:1];
      char v27 = (void *)objc_claimAutoreleasedReturnValue();
      [v22 errorWithDomain:v23 code:v21 userInfo:v27];
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      v9[2](v9, v15, v28);
    }

    else
    {
      v9[2](v9, v15, 0LL);
    }
  }
}

  unint64_t v9 = -6700;
  if (a3) {
    goto LABEL_11;
  }
LABEL_12:
  if (v5) {
    return v5;
  }
  else {
    return "";
  }
}

  if (a3) {
    *a3 = v14;
  }
  return Mutable;
}

    uint64_t v15 = 0LL;
    goto LABEL_35;
  }

  int v16 = getenv("HOME");
  if (!v16)
  {
LABEL_15:
    unint64_t v9 = 0LL;
    goto LABEL_16;
  }

  pw_dir = v16;
  unint64_t v18 = strlen(v16);
  unint64_t v9 = 0LL;
LABEL_28:
  if (pw_dir >= &pw_dir[v18])
  {
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 0LL;
    do
    {
      size_t v23 = v15;
      char v24 = (unint64_t)&pw_dir[v15 + 1];
      v34[v15] = pw_dir[v15];
      ++v15;
    }

    while (v23 <= 0x3FD && v24 < (unint64_t)&pw_dir[v18]);
  }

  id v8 = v14;
LABEL_35:
  unint64_t v25 = &v34[v15];
  if (v15 <= 0x3FE && v8 < v10)
  {
    dispatch_time_t v26 = v8 + 1;
    do
    {
      char v27 = v15 + 1;
      v34[v15] = *(v26 - 1);
      if (v15 > 0x3FD) {
        break;
      }
      ++v15;
    }

    while (v26++ < v10);
    unint64_t v25 = &v34[v27];
  }

  *unint64_t v25 = 0;
  if ((a5 & 2) != 0)
  {
    float v29 = v34;
  }

  else
  {
    float v29 = v34;
    if (a4 < 0x400)
    {
      if (realpath_DARWIN_EXTSN(v34, v33)) {
        float v29 = v33;
      }
    }

    else if (realpath_DARWIN_EXTSN(v34, a3))
    {
      if (!v9) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
  }

  strlcpy(a3, v29, a4);
  if (v9) {
LABEL_46:
  }
    free(v9);
LABEL_47:
  if (a4) {
    return a3;
  }
  else {
    return "";
  }
}

      if ((v2 & 0x80000000) == 0 && close(v2) && *__error()) {
        __error();
      }
      return v3;
    }

          uint64_t v10 = mach_absolute_time();
          if (UpTicksToMicroseconds(v10) > v7)
          {
            uint64_t v5 = 4294960574LL;
            break;
          }
        }
      }
    }
  }

  else
  {
LABEL_18:
    uint64_t v5 = 4294960596LL;
  }

    uint64_t v5 = v8 - v6;
    if (v8 <= v6) {
      return 0LL;
    }
  }

      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }

    char v11 = (a4 - 224);
    if (a4 == 224)
    {
LABEL_9:
      unint64_t v18 = 0;
    }

    else
    {
      while (1)
      {
        uint64_t v12 = *(_DWORD *)(a1 + 40);
        if (v12 >= 32) {
          break;
        }
        *(_DWORD *)(a1 + 40) = v12 + 1;
        uint64_t v13 = _OPACKDecodeObject(a1, a2);
        uint64_t v14 = (const void *)v13;
        uint64_t v15 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = v15 - 1;
        if (v26) {
          goto LABEL_16;
        }
        if (!v13)
        {
          unint64_t v25 = -6742;
          goto LABEL_22;
        }

        *(_DWORD *)(a1 + 40) = v15;
        int v16 = (const void *)_OPACKDecodeObject(a1, a2);
        int v17 = v16;
        --*(_DWORD *)(a1 + 40);
        if (!v16) {
          goto LABEL_19;
        }
        CFDictionaryAddValue(Mutable, v14, v16);
        CFRelease(v14);
        CFRelease(v17);
        if (!--v11) {
          goto LABEL_9;
        }
      }

  if (v37) {
    free(v37);
  }
LABEL_18:
  if (v40) {
    free(v40);
  }
  if (v22) {
    free(v22);
  }
  uint64_t result = GroupInfoTLV;
  if (GroupInfoTLV)
  {
    int v31 = *(int **)(a1 + 16);
    if (*v31 <= 90)
    {
      if (*v31 != -1)
      {
LABEL_25:
        LogPrintF( (uint64_t)v31,  (uint64_t)"OSStatus _MFiClientVerify(PairingSessionRef, const void *, size_t, const uint8_t *, const void *, siz e_t, const void *, size_t, const void *, size_t, Boolean)",  0x5Au,  (uint64_t)"### MFi verify failed: %#m\n",  v18,  v19,  v20,  v21,  result);
        return GroupInfoTLV;
      }

      int v32 = _LogCategory_Initialize(*(void *)(a1 + 16), 0x5Au);
      uint64_t result = GroupInfoTLV;
      if (v32)
      {
        int v31 = *(int **)(a1 + 16);
        goto LABEL_25;
      }
    }
  }

  return result;
}

    ;
  }

  if ((*(_BYTE *)a1 & 0x10) == 0) {
    goto LABEL_16;
  }
  if (v19 < *(_DWORD *)(a1 + 36))
  {
    unint64_t v20 = *(char **)(a1 + 40);
    goto LABEL_24;
  }

  int v16 = 32 * v19 + 32;
  uint64_t v22 = (char *)realloc(*(void **)(a1 + 304), v16);
  if (v22)
  {
    unint64_t v20 = v22;
    if (!*(void *)(a1 + 304)) {
      memcpy(v22, __src, 32 * v19);
    }
    size_t v23 = &v20[32 * v19];
    *(_OWORD *)size_t v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    *(void *)(a1 + 304) = v20;
    *(void *)(a1 + 40) = v20;
    char v11 = v25;
    goto LABEL_24;
  }

  return 4294960568LL;
}

LABEL_6:
  self->_invalidateCalled = 1;
  self->_invalidateFlags = a3;
  if ((a3 & 3) == 0)
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CUAudioPlayer _abortRequestsWithError:](self, "_abortRequestsWithError:", v10);
  }

  -[CUAudioPlayer _invalidated](self, "_invalidated");
}

  if (self->_peripheral)
  {
    self->_guardConnected = 0;
    -[CBCentralManager cancelPeripheralConnection:](self->_centralManager, "cancelPeripheralConnection:");
  }

  -[CBCentralManager setDelegate:](self->_centralManager, "setDelegate:", 0LL);
  centralManager = self->_centralManager;
  self->_centralManager = 0LL;

  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  -[CBPeripheral setDelegate:](self->_peripheral, "setDelegate:", 0LL);
  peripheral = self->_peripheral;
  self->_peripheral = 0LL;

  NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
  char v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUBLEConnection _reportError:](self, "_reportError:", v11);

  readSource = self->_readSource;
  if (readSource)
  {
    dispatch_source_cancel((dispatch_source_t)readSource);
    if (self->_readSuspended)
    {
      self->_readSuspended = 0;
      dispatch_resume((dispatch_object_t)self->_readSource);
    }
  }

  writeSource = self->_writeSource;
  if (writeSource)
  {
    dispatch_source_cancel((dispatch_source_t)writeSource);
    if (self->_writeSuspended)
    {
      self->_writeSuspended = 0;
      dispatch_resume((dispatch_object_t)self->_writeSource);
    }
  }

  -[CUBLEConnection _invalidated](self, "_invalidated");
}

    -[CUSystemMonitor invalidate](self->_systemMonitor, "invalidate");
    systemMonitor = self->_systemMonitor;
    self->_systemMonitor = 0LL;

    -[CUBLEScanner _stopScanIfNeededWithReason:](self, "_stopScanIfNeededWithReason:", "invalidate");
    -[CBCentralManager setDelegate:](self->_centralManager, "setDelegate:", 0LL);
    centralManager = self->_centralManager;
    self->_centralManager = 0LL;

    -[CUBLEScanner _invalidated](self, "_invalidated");
  }

    self->_scannerStartCalled = 0;
    -[CBCentralManager stopScan](self->_centralManager, "stopScan");
  }

  if (!self->_invalidateCalled)
  {
    uint64_t v10 = _Block_copy(self->_deviceLostHandler);
    if (v10)
    {
      devices = self->_devices;
      v12[0] = MEMORY[0x1895F87A8];
      v12[1] = 3221225472LL;
      void v12[2] = __44__CUBLEScanner__stopScanIfNeededWithReason___block_invoke;
      _DWORD v12[3] = &unk_189F307A0;
      v12[4] = v10;
      -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](devices, "enumerateKeysAndObjectsUsingBlock:", v12);
    }
  }

  -[NSMutableDictionary removeAllObjects](self->_devices, "removeAllObjects", a3);
}

  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  timeoutTimer = self->_timeoutTimer;
  if (timeoutTimer)
  {
    uint64_t v10 = timeoutTimer;
    dispatch_source_cancel(v10);
    char v11 = self->_timeoutTimer;
    self->_timeoutTimer = 0LL;
  }

  NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5BDLL);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUBluetoothClassicConnection _reportError:](self, "_reportError:", v12);

  readSource = self->_readSource;
  if (readSource)
  {
    dispatch_source_cancel((dispatch_source_t)readSource);
    if (self->_readSuspended)
    {
      self->_readSuspended = 0;
      dispatch_resume((dispatch_object_t)self->_readSource);
    }
  }

  writeSource = self->_writeSource;
  if (writeSource)
  {
    dispatch_source_cancel((dispatch_source_t)writeSource);
    if (self->_writeSuspended)
    {
      self->_writeSuspended = 0;
      dispatch_resume((dispatch_object_t)self->_writeSource);
    }
  }

  -[CUBluetoothClassicConnection _btEnsureStopped](self, "_btEnsureStopped");
  -[CUBluetoothClassicConnection _invalidated](self, "_invalidated");
}

  if (v33) {
    return;
  }
  v34[0] = 0;
  uint64_t v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_1985[0])( (uint64_t)a3,  (uint64_t)v34,  32LL);
  if (!v14)
  {
    [NSString stringWithUTF8String:v34];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary objectForKeyedSubscript:](self->_btConnectedDevices, "objectForKeyedSubscript:", v21);
    dispatch_time_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v26)
    {
LABEL_24:

      return;
    }

    char v27 = self->_ucat;
    if (v27->var0 <= 30)
    {
      if (v27->var0 == -1)
      {
        char v27 = self->_ucat;
      }

      LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUBluetoothClient _handleDeviceDisconnected:reason:]",  0x1Eu,  (uint64_t)"Device disconnected: %@, reason %#m\n",  v22,  v23,  v24,  v25,  (char)v26);
    }

    [v10 _processFindDeviceRequests];
    [*(id *)(v9 + 32) _btEnsureStopped];
    return [*(id *)(v9 + 32) _invalidated];
  }

  return result;
}

  readSource = self->_readSource;
  if (readSource)
  {
    dispatch_source_cancel((dispatch_source_t)readSource);
    if (self->_readSuspended)
    {
      dispatch_resume((dispatch_object_t)self->_readSource);
      self->_readSuspended = 0;
    }

    unint64_t v9 = self->_readSource;
    self->_readSource = 0LL;
  }

  writeSource = self->_writeSource;
  if (writeSource)
  {
    dispatch_source_cancel((dispatch_source_t)writeSource);
    if (self->_writeSuspended)
    {
      dispatch_resume((dispatch_object_t)self->_writeSource);
      self->_writeSuspended = 0;
    }

    char v11 = self->_writeSource;
    self->_writeSource = 0LL;
  }

  self->_btChannel = 0LL;
  self->_channelFD = -1;
  self->_btReadRing = 0LL;
  btReadLeftoverBuf = self->_btReadLeftoverBuf;
  if (btReadLeftoverBuf)
  {
    free(btReadLeftoverBuf);
    self->_btReadLeftoverBuf = 0LL;
  }

  self->_btReadLeftoverMaxLen = 0LL;
  self->_btWriteRing = 0LL;
  if (self->_btPeerKVORegistered)
  {
    self->_btPeerKVORegistered = 0;
    -[CBScalablePipe peer](self->_btPipe, "peer");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 removeObserver:self forKeyPath:@"hostState" context:0];

    -[CUBluetoothScalablePipe _handleBTPeerHostStateChanged](self, "_handleBTPeerHostStateChanged");
  }

  if (self->_state != 2)
  {
    self->_state = 2;
    uint64_t v14 = (void (**)(void))_Block_copy(self->_stateChangedHandler);
    if (v14)
    {
      int v16 = v14;
      v14[2]();
      uint64_t v14 = v16;
    }
  }

  uint64_t v13 = *(dispatch_queue_t **)(v10 + 16);
  if (v13)
  {
    CFRetain(*(CFTypeRef *)(v10 + 16));
    dispatch_async_f(v13[2], v13, (dispatch_function_t)_BonjourBrowser_Stop);
    uint64_t v10 = *(void *)(v9 + 32);
  }

  return [(id)v10 _invalidated];
}

  if (self->_sessionID) {
    -[CUFileClient _sendSessionStop](self, "_sendSessionStop");
  }
  else {
    -[RPCompanionLinkClient invalidate](self->_clinkClient, "invalidate");
  }
  uint64_t v22 = 0u;
  size_t v23 = 0u;
  unint64_t v20 = 0u;
  uint64_t v21 = 0u;
  id v8 = self->_queryArray;
  unint64_t v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v20,  v24,  16LL);
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = *(void *)v21;
    uint64_t v12 = (void *)*MEMORY[0x189607670];
    do
    {
      for (unint64_t i = 0LL; i != v10; ++i)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        NSErrorF_safe(v12, (const char *)0xFFFEEA14LL);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUFileClient _completeQuery:response:error:]( self,  "_completeQuery:response:error:",  v14,  0LL,  v15,  (void)v20);
      }

      uint64_t v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v20,  v24,  16LL);
    }

    while (v10);
  }

  -[NSMutableArray removeAllObjects](self->_queryArray, "removeAllObjects");
  queryArray = self->_queryArray;
  self->_queryArray = 0LL;

  sessionTimer = self->_sessionTimer;
  if (sessionTimer)
  {
    unint64_t v18 = sessionTimer;
    dispatch_source_cancel(v18);
    unint64_t v19 = self->_sessionTimer;
    self->_sessionTimer = 0LL;
  }

  -[CUFileClient _invalidated](self, "_invalidated", (void)v20);
}

  -[RPCompanionLinkClient invalidate](self->_clinkClient, "invalidate");
  sessionTimer = self->_sessionTimer;
  if (sessionTimer)
  {
    unint64_t v9 = sessionTimer;
    dispatch_source_cancel(v9);
    uint64_t v10 = self->_sessionTimer;
    self->_sessionTimer = 0LL;
  }

  sessionMap = self->_sessionMap;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 3221225472LL;
  v14[2] = __27__CUFileServer__invalidate__block_invoke;
  v14[3] = &unk_189F30EE0;
  void v14[4] = self;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](sessionMap, "enumerateKeysAndObjectsUsingBlock:", v14);
  -[NSMutableDictionary removeAllObjects](self->_sessionMap, "removeAllObjects");
  uint64_t v12 = self->_sessionMap;
  self->_sessionMap = 0LL;

  -[CUFileServer _invalidated](self, "_invalidated");
}

    uint64_t v13 = *(dispatch_queue_s **)(v10 + 1096);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = __37__CUFileServer__handleQuery_session___block_invoke_2;
    block[3] = &unk_189F30F30;
    uint64_t v14 = *(id *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    int v17 = v14;
    unint64_t v18 = v15;
    dispatch_async(v13, block);
  }

    selfAccessory = self->_selfAccessory;
    self->_selfAccessory = 0LL;
  }

  selfAccessoryRoomID = self->_selfAccessoryRoomID;
  if (selfAccessoryRoomID)
  {
    self->_selfAccessoryRoomID = 0LL;

    id v7 = 1;
  }

  int v16 = self->_selfAccessoryUser;
  if (v16)
  {
    int v17 = self->_ucat;
    if (v17->var0 <= 30)
    {
      if (v17->var0 == -1)
      {
        int v17 = self->_ucat;
      }

      -[HMUser userID](v16, "userID");
      unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v17,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessory user updated: %{mask}, HK clear",  v19,  v20,  v21,  v22,  (char)v18);
    }

  uint64_t v13 = *(_DWORD *)(v10 + 8);
  if (v13 != -1)
  {
    notify_cancel(v13);
    *(_DWORD *)(*(void *)(v9 + 32) + 8LL) = -1;
    uint64_t v10 = *(void *)(v9 + 32);
  }

  [*(id *)(v10 + 16) setDelegate:0];
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = *(void **)(v14 + 16);
  *(void *)(v14 + 16) = 0LL;

  [*(id *)(*(void *)(v9 + 32) + 32) enumerateKeysAndObjectsUsingBlock:&__block_literal_global_3418];
  [*(id *)(*(void *)(v9 + 32) + 32) removeAllObjects];
  int v16 = *(void *)(v9 + 32);
  int v17 = *(void **)(v16 + 32);
  *(void *)(v16 + 32) = 0LL;

  [*(id *)(*(void *)(v9 + 32) + 40) removeAllObjects];
  [*(id *)(*(void *)(v9 + 32) + 176) setDelegate:0];
  unint64_t v18 = *(void *)(v9 + 32);
  unint64_t v19 = *(void **)(v18 + 176);
  *(void *)(v18 + 176) = 0LL;

  [*(id *)(*(void *)(v9 + 32) + 224) setDelegate:0];
  unint64_t v20 = *(void *)(v9 + 32);
  uint64_t v21 = *(void **)(v20 + 224);
  *(void *)(v20 + 224) = 0LL;

  uint64_t v22 = *(void *)(v9 + 32);
  size_t v23 = *(void **)(v22 + 232);
  *(void *)(v22 + 232) = 0LL;

  char v24 = *(void *)(v9 + 32);
  unint64_t v25 = *(void **)(v24 + 240);
  *(void *)(v24 + 240) = 0LL;

  dispatch_time_t v26 = *(void *)(v9 + 32);
  char v27 = *(void **)(v26 + 248);
  *(void *)(v26 + 248) = 0LL;

  [*(id *)(*(void *)(v9 + 32) + 72) setDelegate:0];
  uint64_t v28 = *(void *)(v9 + 32);
  float v29 = *(void **)(v28 + 72);
  *(void *)(v28 + 72) = 0LL;

  [*(id *)(*(void *)(v9 + 32) + 80) enumerateKeysAndObjectsUsingBlock:&__block_literal_global_105];
  [*(id *)(*(void *)(v9 + 32) + 80) removeAllObjects];
  int v30 = *(void *)(v9 + 32);
  int v31 = *(void **)(v30 + 80);
  *(void *)(v30 + 80) = 0LL;

  return [*(id *)(v9 + 32) _invalidated];
}

  uint64_t v13 = *(void *)(v10 + 24);
  if (v13)
  {
    (*(void (**)(void))(v13 + 16))();
    uint64_t v10 = *(void *)(a1 + 32);
  }

  [*(id *)(v10 + 80) removeAllObjects];
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 80);
  *(void *)(v14 + 80) = 0LL;

  int v16 = *(void **)(*(void *)(a1 + 32) + 88LL);
  if (v16)
  {
    [v16 invalidate];
    int v17 = *(void *)(a1 + 32);
    unint64_t v18 = *(void **)(v17 + 88);
    *(void *)(v17 + 88) = 0LL;
  }

  else
  {
    [*(id *)(a1 + 32) _invalidated];
  }

    -[WiFiAwareDataSession stop](self->_wfaDataSessionClient, "stop");
    -[CUNANDataSession _terminateServerDataSession](self, "_terminateServerDataSession");
    -[CUNANDataSession _invalidated](self, "_invalidated");
  }

    publisher = self->_publisher;
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __47__CUNANDataSession__terminateServerDataSession__block_invoke;
    int32x4_t v11[3] = &unk_189F31468;
    v11[4] = self;
    -[WiFiAwarePublisher terminateDataSession:completionHandler:]( publisher,  "terminateDataSession:completionHandler:",  v7,  v11);
  }
}

  char v11 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 40);
  int v17 = 0LL;
  [(id)v2 _dataSession:v10 confirmedForPeerDataAddress:v12 serviceSpecificInfo:v11 error:&v17];
  uint64_t v13 = v17;
  uint64_t v14 = (void (**)(void *, id))_Block_copy(*(const void **)(*(void *)(a1 + 32) + 8LL));
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(void **)(v15 + 8);
  *(void *)(v15 + 8) = 0LL;

  if (v14) {
    v14[2](v14, v13);
  }
}

  uint64_t v12 = self->_serviceType;
  if (-[NSString length](v12, "length"))
  {
    uint64_t v13 = self->_mockID;
    if (v13)
    {
      if (!self->_mockEndpoint)
      {
        uint64_t v14 = objc_alloc_init(&OBJC_CLASS___CUNANEndpoint);
        mockEndpoint = self->_mockEndpoint;
        self->_mockEndpoint = v14;

        -[CUNANEndpoint setCustomData:](self->_mockEndpoint, "setCustomData:", self->_customData);
        int v16 = (void *)objc_msgSend(objc_alloc(NSString), "initWithFormat:", @"%llu", CUNextID64());
        -[CUNANEndpoint setIdentifier:](self->_mockEndpoint, "setIdentifier:", v16);

        -[CUNANEndpoint setMockPeerEndpointString:]( self->_mockEndpoint,  "setMockPeerEndpointString:",  self->_mockPeerEndpointString);
        -[CUNANEndpoint setName:](self->_mockEndpoint, "setName:", self->_name);
        -[CUNANEndpoint setPort:](self->_mockEndpoint, "setPort:", self->_port);
        -[CUNANEndpoint setServiceType:](self->_mockEndpoint, "setServiceType:", self->_serviceType);
        -[CUNANEndpoint setTextInfo:](self->_mockEndpoint, "setTextInfo:", self->_textInfo);
      }

      int v17 = v13;
      unint64_t v18 = self;
      os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
      [(id)gCUNANMockPublishers objectForKeyedSubscript:v17];
      unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v19)
      {
        unint64_t v19 = (void *)[objc_alloc(MEMORY[0x1896078B8]) initWithOptions:517 capacity:0];
        unint64_t v20 = (void *)gCUNANMockPublishers;
        if (!gCUNANMockPublishers)
        {
          uint64_t v21 = objc_alloc_init(MEMORY[0x189603FC8]);
          uint64_t v22 = (void *)gCUNANMockPublishers;
          gCUNANMockPublishers = (uint64_t)v21;

          unint64_t v20 = (void *)gCUNANMockPublishers;
        }

        [v20 setObject:v19 forKeyedSubscript:v17];
      }

      [v19 addObject:v18];
      -[CUNANPublisher mockEndpoint](v18, "mockEndpoint");
      size_t v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (v23)
      {
        uint64_t v73 = v4;
        char v24 = v12;
        unint64_t v25 = v13;
        int32x4_t v77 = 0u;
        uint64_t v78 = 0u;
        uint64_t v75 = 0u;
        id v76 = 0u;
        [(id)gCUNANMockSubscribers objectForKeyedSubscript:v17];
        dispatch_time_t v26 = (void *)objc_claimAutoreleasedReturnValue();
        char v27 = [v26 countByEnumeratingWithState:&v75 objects:v79 count:16];
        if (v27)
        {
          uint64_t v28 = v27;
          float v29 = *(void *)v76;
          do
          {
            for (unint64_t i = 0LL; i != v28; ++i)
            {
              if (*(void *)v76 != v29) {
                objc_enumerationMutation(v26);
              }
              [*(id *)(*((void *)&v75 + 1) + 8 * i) reportMockEndpointFound:v23];
            }

            uint64_t v28 = [v26 countByEnumeratingWithState:&v75 objects:v79 count:16];
          }

          while (v28);
        }

        uint64_t v13 = v25;
        uint64_t v12 = v24;
        int v4 = v73;
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);

      if (v4) {
        v4[2](v4, 0LL);
      }
      goto LABEL_72;
    }

    int v36 = (void *)[objc_alloc(getWiFiAwarePublishConfigurationClass()) initWithServiceName:v12];
    uint64_t v37 = v36;
    controlFlags = self->_controlFlags;
    if ((controlFlags & 1) != 0)
    {
      [v36 setAuthenticationType:0];
      controlFlags = self->_controlFlags;
    }

    if ((controlFlags & 2) == 0)
    {
LABEL_43:
      uint64_t v46 = objc_alloc_init(getWiFiAwarePublishServiceSpecificInfoClass());
      [v46 setInstanceName:self->_name];
      if (self->_customData) {
        objc_msgSend(v46, "setBlob:");
      }
      uint64_t v47 = self->_textInfo;
      uint64_t v49 = v47;
      if (!v47)
      {
LABEL_48:

        [v37 setServiceSpecificInfo:v46];
        if (self->_dataPathEnabled)
        {
          trafficFlags = self->_trafficFlags;
          if ((trafficFlags & 0x800) != 0) {
            uint64_t v58 = 2LL;
          }
          else {
            uint64_t v58 = (trafficFlags & 0x23300) != 0;
          }
          uint64_t v59 = (void *)[objc_alloc(getWiFiAwarePublishDatapathConfigurationClass()) initWithServiceType:v58 securityConfiguration:0];
          uint64_t v60 = (void *)[objc_alloc(getWiFiAwarePublishDatapathServiceSpecificInfoClass()) initWithProtocolType:0 servicePort:LOWORD(self->_port)];
          [v59 setServiceSpecificInfo:v60];
          [v37 setDatapathConfiguration:v59];
        }

        unsigned int v61 = (WiFiAwarePublisher *)[objc_alloc(getWiFiAwarePublisherClass()) initWithConfiguration:v37];
        wfaPublisher = self->_wfaPublisher;
        self->_wfaPublisher = v61;

        uint64_t v63 = self->_wfaPublisher;
        if (v63)
        {
          -[WiFiAwarePublisher setDelegate:](v63, "setDelegate:", self);
          int v64 = _Block_copy(v4);
          activateCompletion = self->_activateCompletion;
          self->_activateCompletion = v64;

          -[WiFiAwarePublisher start](self->_wfaPublisher, "start");
LABEL_71:

          goto LABEL_72;
        }

        NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue();
        int v70 = self->_ucat;
        if (v70->var0 > 90) {
          goto LABEL_64;
        }
        if (v70->var0 == -1)
        {
          if (!_LogCategory_Initialize((uint64_t)v70, 0x5Au))
          {
LABEL_64:
            if (v4) {
              ((void (**)(id, void *))v4)[2](v4, v49);
            }
LABEL_70:

            goto LABEL_71;
          }

          int v70 = self->_ucat;
        }

        LogPrintF( (uint64_t)v70,  (uint64_t)"-[CUNANPublisher _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v66,  v67,  v68,  v69,  (char)v49);
        goto LABEL_64;
      }

      id v74 = 0LL;
      uint64_t v50 = (void *)CUTXTDataCreateWithDictionary(v47, v48, &v74);
      int v51 = v74;
      uint64_t v56 = v51;
      if (v50)
      {
        [v46 setTxtRecordData:v50];

        goto LABEL_48;
      }

      if (!v51)
      {
        NSErrorWithOSStatusF((const char *)0xFFFFE5D4LL);
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue();
      }

      id v71 = self->_ucat;
      if (v71->var0 <= 90)
      {
        if (v71->var0 == -1)
        {
          id v71 = self->_ucat;
        }

        LogPrintF( (uint64_t)v71,  (uint64_t)"-[CUNANPublisher _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v52,  v53,  v54,  v55,  (char)v56);
      }

  unint64_t v9 = self->_mockID;
  if (v9) {
    CUNANMockRemovePublisher(v9, self);
  }
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( self->_sessions,  "enumerateKeysAndObjectsUsingBlock:",  &__block_literal_global_4862);
  -[WiFiAwarePublisher stop](self->_wfaPublisher, "stop");
  -[CUNANPublisher _invalidated](self, "_invalidated");
}

    uint64_t v10 = 0LL;
    goto LABEL_7;
  }

  v6->_instanceID = v12;
  id v7 = objc_alloc(getWiFiMACAddressClass());
  id v8 = [v7 initWithAddress:v13 | ((unint64_t)v14 << 32)];
  macAddress = v6->_macAddress;
  v6->_macAddress = (WiFiMACAddress *)v8;

  uint64_t v10 = v6;
LABEL_7:

  return v10;
}

    self->_invalidateCalled = 1;
    -[CUNetInterfaceMonitor _ensureStopped](self, "_ensureStopped");
    -[CUNetInterfaceMonitor _invalidated](self, "_invalidated");
  }

    SCDynamicStoreSetDispatchQueue(self->_scStore, 0LL);
    CFRelease(self->_scStore);
    self->_scStore = 0LL;
  }

  if (self->_nwPathEvaluator)
  {
    id v8 = self->_ucat;
    if (v8->var0 <= 30)
    {
      if (v8->var0 == -1)
      {
        id v8 = self->_ucat;
      }

      LogPrintF_safe( (uint64_t)v8,  (uint64_t)"-[CUNetInterfaceMonitor _ensureStopped]",  0x1Eu,  (uint64_t)"Monitoring stop NW",  v2,  v3,  v4,  v5,  v10);
    }

    [v10 _networkInterfacesChanged:0];
    [v10 _primaryIPChanged:0];
    int v4 = v10;
  }
}

  self->_invalidateCalled = 1;
  -[CUNetLinkManager _monitorEnsureStopped](self, "_monitorEnsureStopped");
  unint64_t v18 = 0u;
  unint64_t v19 = 0u;
  int v16 = 0u;
  int v17 = 0u;
  id v8 = self->_endpoints;
  unint64_t v9 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v16,  v20,  16LL);
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = *(void *)v17;
    do
    {
      for (unint64_t i = 0LL; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        *(_DWORD *)(v13 + 36) = 1;
        uint64_t v14 = _Block_copy(*(const void **)(v13 + 40));
        uint64_t v15 = v14;
        if (*(void *)(v13 + 40)) {
          (*((void (**)(void *))v14 + 2))(v14);
        }
      }

      uint64_t v10 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v16,  v20,  16LL);
    }

    while (v10);
  }

  -[CUNetLinkManager _invalidated](self, "_invalidated", (void)v16);
}

  pollTimer = self->_pollTimer;
  if (pollTimer)
  {
    unint64_t v9 = pollTimer;
    dispatch_source_cancel(v9);
    uint64_t v10 = self->_pollTimer;
    self->_pollTimer = 0LL;
  }

  if (self->_threadRunning) {
    return;
  }
  id v8 = self->_ucat;
  if (v8->var0 <= 30)
  {
    if (v8->var0 == -1)
    {
      id v8 = self->_ucat;
    }

    LogPrintF( (uint64_t)v8,  (uint64_t)"-[CURunLoopThread _invalidated]",  0x1Eu,  (uint64_t)"Invalidated\n",  v3,  v4,  v5,  v6,  v13);
  }

  *(_BYTE *)(v9 + 9) = 1;
  uint64_t result = [*(id *)(v10 + 32) _scheduleStopThread];
  if ((result & 1) == 0)
  {
    int v17 = *(void *)(v10 + 32);
    if (*(_BYTE *)(v17 + 8))
    {
      uint64_t result = *(void *)(v17 + 48);
      if (*(int *)result <= 30)
      {
        if (*(_DWORD *)result != -1) {
          return LogPrintF( result,  (uint64_t)"-[CURunLoopThread invalidate]_block_invoke",  0x1Eu,  (uint64_t)"Deferring stop of RunLoop thread until it finishes starting\n",  v13,  v14,  v15,  v16,  a9);
        }
        uint64_t result = _LogCategory_Initialize(result, 0x1Eu);
        if ((_DWORD)result)
        {
          uint64_t result = *(void *)(*(void *)(v10 + 32) + 48LL);
          return LogPrintF( result,  (uint64_t)"-[CURunLoopThread invalidate]_block_invoke",  0x1Eu,  (uint64_t)"Deferring stop of RunLoop thread until it finishes starting\n",  v13,  v14,  v15,  v16,  a9);
        }
      }
    }

    else
    {
      return [(id)v17 _invalidated];
    }
  }

  return result;
}

    self->_invalidateCalled = 1;
    -[CUSleepWakeMonitor _ensureStopped](self, "_ensureStopped");
    -[CUSleepWakeMonitor _invalidated](self, "_invalidated");
  }

  IODeregisterForSystemPower(&self->_powerNotifier);
  powerNotificationPort = self->_powerNotificationPort;
  if (powerNotificationPort)
  {
    IONotificationPortDestroy(powerNotificationPort);
    self->_powerNotificationPort = 0LL;
  }

  powerCnx = self->_powerCnx;
  if (powerCnx)
  {
    IOServiceClose(powerCnx);
    self->_powerCnx = 0;
  }

  -[CUTCPConnection _logMetrics](self, "_logMetrics");
  -[CUNANDataSession invalidate](self->_nanDataSession, "invalidate");
  nanDataSession = self->_nanDataSession;
  self->_nanDataSession = 0LL;

  netLinkManager = self->_netLinkManager;
  if (netLinkManager && self->_netLinkEndpoint)
  {
    -[CUNetLinkManager removeEndpoint:](netLinkManager, "removeEndpoint:");
    char v11 = self->_netLinkManager;
    self->_netLinkManager = 0LL;
  }

  errorHandler = self->_errorHandler;
  self->_errorHandler = 0LL;

  NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
  unint64_t v18 = (id)objc_claimAutoreleasedReturnValue();
  -[CUTCPConnection _abortReadsWithError:](self, "_abortReadsWithError:", v18);
  -[CUTCPConnection _abortWritesWithError:](self, "_abortWritesWithError:", v18);
  connector = self->_connector;
  if (connector) {
    dispatch_async_f( *((dispatch_queue_t *)connector + 13),  connector,  (dispatch_function_t)_AsyncConnection_UserRelease);
  }
  readSource = self->_readSource;
  if (readSource)
  {
    dispatch_source_cancel((dispatch_source_t)readSource);
    if (self->_readSuspended)
    {
      self->_readSuspended = 0;
      dispatch_resume((dispatch_object_t)self->_readSource);
    }
  }

  writeSource = self->_writeSource;
  if (writeSource)
  {
    dispatch_source_cancel((dispatch_source_t)writeSource);
    if (self->_writeSuspended)
    {
      self->_writeSuspended = 0;
      dispatch_resume((dispatch_object_t)self->_writeSource);
    }
  }

  socketEventsSource = self->_socketEventsSource;
  if (socketEventsSource) {
    dispatch_source_cancel((dispatch_source_t)socketEventsSource);
  }
  -[CUTCPConnection _invalidated](self, "_invalidated");
}

  if ((_DWORD)v6)
  {
    uint64_t v12 = _Block_copy(self->_socketEventHandler);
    if (v12)
    {
      uint64_t v14 = v12;
      (*((void (**)(void *, uint64_t))v12 + 2))(v12, v6);
      uint64_t v12 = v14;
    }
  }

  [*(id *)(v10 + 64) invalidate];
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = 0LL;

  uint64_t v15 = *(void *)(v9 + 32);
  int v16 = *(dispatch_source_s **)(v15 + 24);
  if (v16)
  {
    dispatch_source_cancel(v16);
    uint64_t v15 = *(void *)(v9 + 32);
  }

  int v17 = *(dispatch_source_s **)(v15 + 32);
  if (v17)
  {
    dispatch_source_cancel(v17);
    uint64_t v15 = *(void *)(v9 + 32);
  }

  unint64_t v25 = 0u;
  dispatch_time_t v26 = 0u;
  size_t v23 = 0u;
  char v24 = 0u;
  unint64_t v18 = *(id *)(v15 + 8);
  unint64_t v19 = [v18 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v19)
  {
    unint64_t v20 = v19;
    uint64_t v21 = *(void *)v24;
    do
    {
      for (unint64_t i = 0LL; i != v20; ++i)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(v18);
        }
        objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * i), "invalidate", (void)v23);
      }

      unint64_t v20 = [v18 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v20);
  }

  [*(id *)(*(void *)(v9 + 32) + 8) removeAllObjects];
  return [*(id *)(v9 + 32) _invalidated];
}

    v16[0] = v8;
    [MEMORY[0x189603F18] arrayWithObjects:v16 count:1];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]( v3,  "removePendingNotificationRequestsWithIdentifiers:",  v10);
    -[UNUserNotificationCenter removeDeliveredNotificationsWithIdentifiers:]( v3,  "removeDeliveredNotificationsWithIdentifiers:",  v10);
    requestIdentifier = self->_requestIdentifier;
    self->_requestIdentifier = 0LL;
  }

  timer = self->_timer;
  if (timer)
  {
    uint64_t v13 = timer;
    dispatch_source_cancel(v13);
    uint64_t v14 = self->_timer;
    self->_timer = 0LL;
  }

  -[UNUserNotificationCenter setDelegate:](self->_unCenter, "setDelegate:", 0LL);
  unCenter = self->_unCenter;
  self->_unCenter = 0LL;

  -[CUUserNotificationSession _invalidated](self, "_invalidated");
}

  if (*(void *)(v9 + 56)) {
    uint64_t v12 = 3;
  }
  else {
    uint64_t v12 = 4;
  }
  *(_DWORD *)(v8 + 48) = v12;
  objc_storeStrong((id *)(*(void *)(v9 + 40) + 40LL), *(id *)(v9 + 56));
  return [*(id *)(v9 + 40) _run];
}

    [*(id *)(v7 + 32) cancelWithRequest:v11];
    uint64_t v2 = v11;
  }
}

    *(_DWORD *)(v10 + 20) = *(_DWORD *)(v9 + 40);
    return [*(id *)(v9 + 32) _invalidate];
  }

  return result;
}

  unint64_t v9 = (NSDictionary *)WiFiCopyCurrentNetworkInfoEx(1, &v28);
  originalWiFiInfo = self->_originalWiFiInfo;
  self->_originalWiFiInfo = v9;

  uint64_t v15 = v28;
  if (self->_originalWiFiInfo && !v28)
  {
    uint64_t result = 4;
    self->_saveOriginalWiFiState = 4;
    return result;
  }

  int v16 = self->_ucat;
  if (v16->var0 > 60) {
    goto LABEL_13;
  }
  if (v16->var0 == -1)
  {
    int v17 = _LogCategory_Initialize((uint64_t)v16, 0x3Cu);
    uint64_t v15 = v28;
    if (!v17) {
      goto LABEL_13;
    }
    int v16 = self->_ucat;
  }

  LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUWACSession _runSaveOriginalWiFi]",  0x3Cu,  (uint64_t)"### Saving off current WiFi info failed: %#m\n",  v11,  v12,  v13,  v14,  v15);
  uint64_t v15 = v28;
LABEL_13:
  self->_saveOriginalWiFiState = 3;
  if (!v15)
  {
    uint64_t v15 = -6762;
    uint64_t v28 = -6762;
  }

  int v31 = @"eo";
  unint64_t v18 = (void *)MEMORY[0x189607870];
  unint64_t v19 = *MEMORY[0x189607670];
  unint64_t v20 = v15;
  float v29 = *MEMORY[0x1896075E0];
  uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v15, 0, 0));
  uint64_t v22 = (void *)v21;
  size_t v23 = @"?";
  if (v21) {
    size_t v23 = (const __CFString *)v21;
  }
  int v30 = v23;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  char v24 = (void *)objc_claimAutoreleasedReturnValue();
  [v18 errorWithDomain:v19 code:v20 userInfo:v24];
  unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = v25;
  [MEMORY[0x189603F68] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  dispatch_time_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUWACSession _progress:info:](self, "_progress:info:", 30LL, v26);

  return self->_saveOriginalWiFiState;
}

    [v10 _runFinish];
    return [*(id *)(v9 + 32) _cleanup];
  }

  return result;
}

    id v8 = objc_alloc_init(&OBJC_CLASS___CURetrier);
    wifiRetrier = self->_wifiRetrier;
    self->_wifiRetrier = v8;

    -[CURetrier setDispatchQueue:](self->_wifiRetrier, "setDispatchQueue:", self->_dispatchQueue);
    v38[0] = MEMORY[0x1895F87A8];
    v38[1] = 3221225472LL;
    v38[2] = __35__CUWiFiManager__wifiEnsureStarted__block_invoke;
    v38[3] = &unk_189F34238;
    v38[4] = self;
    -[CURetrier setActionHandler:](self->_wifiRetrier, "setActionHandler:", v38);
    -[CURetrier setStartTime:](self->_wifiRetrier, "setStartTime:", CFAbsoluteTimeGetCurrent());
  }

  if (self->_wifiManager) {
    goto LABEL_14;
  }
  uint64_t v10 = (__WiFiManagerClient *)WiFiManagerClientCreate();
  self->_wifiManager = v10;
  if (v10) {
    goto LABEL_14;
  }
  char v11 = self->_ucat;
  if (v11->var0 <= 60)
  {
    if (v11->var0 != -1)
    {
LABEL_11:
      LogPrintF( (uint64_t)v11,  (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]",  0x3Cu,  (uint64_t)"### WiFiManagerClientCreate failed\n",  v2,  v3,  v4,  v5,  v37);
      goto LABEL_13;
    }

    if (_LogCategory_Initialize((uint64_t)v11, 0x3Cu))
    {
      char v11 = self->_ucat;
      goto LABEL_11;
    }
  }

    *(_BYTE *)(v8 + 96) = 0;
    *(_BYTE *)(*(void *)(v9 + 32) + 72LL) = 0;
    *(void *)(*(void *)(v9 + 32) + 64LL) = 0LL;
    return [*(id *)(v9 + 32) _update];
  }

  return result;
}

  if (*(_BYTE *)(result + 128))
  {
    *(_BYTE *)(result + 125) = 1;
    uint64_t result = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(result + 130))
  {
    *(_BYTE *)(result + 127) = 1;
    uint64_t result = *(void *)(a1 + 32);
  }

  if (*(void *)(result + 184))
  {
    uint64_t v12 = *(void **)(result + 32);
    *(void *)(result + 32) = 0LL;

    *(_BYTE *)(*(void *)(a1 + 32) + 126LL) = 1;
    uint64_t result = *(void *)(a1 + 32);
  }

  [(id)result _update];
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 160LL);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

    [v10 _wifiEnsureStopped];
    return [*(id *)(v9 + 32) _invalidated];
  }

  return result;
}

  -[NSXPCListener invalidate](self->_xpcListener, "invalidate");
  xpcListener = self->_xpcListener;
  self->_xpcListener = 0LL;

  int v17 = 0u;
  unint64_t v18 = 0u;
  uint64_t v15 = 0u;
  int v16 = 0u;
  unint64_t v9 = (void *)-[NSMutableSet copy](self->_xpcCnxSet, "copy", 0LL);
  uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    char v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      for (unint64_t i = 0LL; i != v11; ++i)
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        -[CUXPCAgent _connectionInvalidated:]( self,  "_connectionInvalidated:",  *(void *)(*((void *)&v15 + 1) + 8 * i));
      }

      char v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v11);
  }

  -[NSMutableSet removeAllObjects](self->_xpcCnxSet, "removeAllObjects");
  xpcCnxSet = self->_xpcCnxSet;
  self->_xpcCnxSet = 0LL;

  -[NSXPCConnection invalidate](self->_xpcCnx, "invalidate");
  -[CUXPCAgent _invalidated](self, "_invalidated");
}

  return v12;
}

  return v12;
}

  *(_DWORD *)(a1 + 164) = 9;
  char v11 = *(dispatch_queue_t **)(a1 + 168);
  if (v11)
  {
    dispatch_async_f(v11[13], v11, (dispatch_function_t)_AsyncConnection_UserRelease);
    *(void *)(a1 + 168) = 0LL;
  }

  uint64_t v12 = *(dispatch_source_s **)(a1 + 184);
  if (v12)
  {
    dispatch_source_cancel(v12);
    if (*(_BYTE *)(a1 + 192))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
      *(_BYTE *)(a1 + 192) = 0;
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 184));
    *(void *)(a1 + 184) = 0LL;
  }

  uint64_t v13 = *(dispatch_source_s **)(a1 + 200);
  if (v13)
  {
    dispatch_source_cancel(v13);
    if (*(_BYTE *)(a1 + 208))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 200));
      *(_BYTE *)(a1 + 208) = 0;
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 200));
    *(void *)(a1 + 200) = 0LL;
  }

  uint64_t v14 = *(dispatch_object_s **)(a1 + 216);
  if (v14)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 216));
    dispatch_release(v14);
    *(void *)(a1 + 216) = 0LL;
  }

  uint64_t v15 = *(dispatch_object_s **)(a1 + 224);
  if (v15)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 224));
    dispatch_release(v15);
    *(void *)(a1 + 224) = 0LL;
  }

  int v16 = *(const void **)(a1 + 424);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 424) = 0LL;
  }

  int v17 = *(void *)(a1 + 536);
  if (v17)
  {
    unint64_t v18 = (uint64_t *)(a1 + 536);
    do
    {
      unint64_t v19 = *(void *)(v17 + 16);
      *unint64_t v18 = v19;
      if (!v19) {
        *(void *)(a1 + 544) = v18;
      }
      *(_DWORD *)(v17 + 9648) = a2;
      unint64_t v20 = *(void (**)(uint64_t))(v17 + 9712);
      if (v20) {
        v20(v17);
      }
      CFRelease((CFTypeRef)v17);
      int v17 = *v18;
    }

    while (*v18);
  }

  uint64_t v21 = *(void (**)(uint64_t, void))(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v21) {
    v21(a2, *(void *)(a1 + 32));
  }
}

  if ((_DWORD)v9)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, void))a1[8];
    if (v10) {
      return v10(v9, a1[4]);
    }
  }

  return result;
}

  HTTPConnectionStop((uint64_t)a1);
  CFRelease(a1);
}

  char v11 = *(void **)(a1 + 24);
  if (v11)
  {
    NetSocket_Delete(v11);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v12 = *(void (**)(uint64_t))(v9 + 48);
  if (v12 && *(_BYTE *)(a1 + 20)) {
    v12(a1);
  }
  dispatch_release(*(dispatch_object_t *)(v9 + 112));
  free((void *)a1);
}

  msg_namelen = v45.msg_namelen;
  PacketUpTicks = SocketGetPacketUpTicks((unsigned int *)v45.msg_control, v45.msg_controllen);
  if (v45.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v45.msg_control;
    if (v45.msg_control)
    {
      do
      {
        uint64_t v14 = msg_control[1];
        if (v14 == 41)
        {
          if (msg_control[2] == 46)
          {
            int v31 = 0;
            int v36 = msg_control[4];
            float v34 = msg_control[3];
            int v35 = msg_control[5];
            int v30 = 30;
            int v33 = *((void *)msg_control + 3);
            goto LABEL_20;
          }
        }

        else if (!v14 && msg_control[2] == 26)
        {
          int v36 = msg_control[4];
          int v30 = 2;
          int v31 = 1;
          float v34 = msg_control[3];
          int v35 = msg_control[5];
          goto LABEL_20;
        }

        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3LL) & 0x1FFFFFFFCLL));
      }

      while ((char *)(msg_control + 3) <= (char *)v45.msg_control + v45.msg_controllen);
    }
  }

  if (gLogCategory_NTPClockCore <= 90
    && (gLogCategory_NTPClockCore != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_NTPClockCore, 0x5Au)))
  {
    LogPrintF( (uint64_t)&gLogCategory_NTPClockCore,  (uint64_t)"OSStatus SocketGetPacketReceiveInfo(struct msghdr *, CUIPPacketInfo *)",  0x5Au,  (uint64_t)"### Receive address not found. Did you enable it with setsockopt?",  v6,  v7,  v8,  v9,  v32);
  }

  int v31 = 0;
  int v30 = 0;
LABEL_20:
  int v16 = *(uint64_t (**)(unint64_t, void))(a1 + 104);
  if (v16) {
    PacketUpTicks = v16(PacketUpTicks, *(void *)(a1 + 112));
  }
  if (v5 == 48)
  {
    uint64_t v37 = v31;
    uint64_t v38 = 0;
    v40[0] = v40[0] & 0x38 | 4;
    v40[1] = 1;
    v40[3] = *(_BYTE *)(a1 + 76);
    *(_OWORD *)&v40[4] = xmmword_186B49C90;
    char v41 = 0;
    int v17 = &v44;
    unint64_t v18 = (char *)&v44 + 4;
    uint64_t v42 = v44;
    unint64_t v19 = &v43;
    unint64_t v20 = (int *)&v43 + 1;
    goto LABEL_28;
  }

  if (v5 != 32)
  {
    uint64_t v15 = 0;
    goto LABEL_49;
  }

  if ((v40[0] & 0xC0) != 0x80 || (uint64_t v37 = v31, v40[1] != 210))
  {
    uint64_t v15 = 1;
    goto LABEL_49;
  }

  *(void *)uint64_t v40 = 117494656LL;
  int v17 = &v42;
  unint64_t v18 = (char *)&v42 + 4;
  *(void *)&v40[8] = v42;
  unint64_t v19 = (uint64_t *)&v40[16];
  unint64_t v20 = &v41;
  uint64_t v38 = 1;
LABEL_28:
  *(_DWORD *)unint64_t v19 = bswap32(*(_DWORD *)(a1 + 16) + PacketUpTicks / v4);
  *unint64_t v20 = bswap32(((unint64_t)(PacketUpTicks % v4) << 32) / v4);
  uint64_t v21 = *(uint64_t (**)(uint64_t, void))(a1 + 104);
  uint64_t v22 = mach_absolute_time();
  if (v21) {
    uint64_t v22 = v21(v22, *(void *)(a1 + 112));
  }
  *(_DWORD *)int v17 = bswap32(*(_DWORD *)(a1 + 16) + v22 / v4);
  *(_DWORD *)unint64_t v18 = bswap32(((unint64_t)(v22 % v4) << 32) / v4);
  if (v30 == 30 || v30 == 2)
  {
    uint64_t v46 = v40;
    uint64_t v47 = v5;
    v45.msg_name = &v39;
    v45.msg_namelen = msg_namelen;
    v45.msg_iov = (iovec *)&v46;
    v45.msg_iovlen = 1;
    v45.msg_control = &v48;
    v45.msg_flags = 0;
    if (v37)
    {
      size_t v23 = v36;
      char v24 = v34;
      if (v36 || (size_t v23 = v35) != 0) {
        char v24 = 0;
      }
      id v48 = 24LL;
      uint64_t v49 = 26;
      uint64_t v50 = v24;
      int v51 = v23;
      uint64_t v52 = v35;
      unint64_t v25 = 24;
    }

    else
    {
      id v48 = 0x2900000020LL;
      uint64_t v49 = 46;
      uint64_t v50 = v34;
      int v51 = v36;
      uint64_t v52 = v35;
      uint64_t v53 = v33;
      unint64_t v25 = 32;
    }

    v45.msg_controllen = v25;
    dispatch_time_t v26 = sendmsg(a2, &v45, 0);
  }

  else
  {
    dispatch_time_t v26 = sendto(a2, v40, v5, 0, &v39, msg_namelen);
  }

  uint64_t v15 = v38;
  if (v26 != v5 && (!*__error() || *__error())) {
    goto LABEL_49;
  }
  uint64_t result = *(void *)(a1 + 56);
  if (*(_DWORD *)result == -1)
  {
    uint64_t result = _LogCategory_Initialize(result, 0xAu);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = *(void *)(a1 + 56);
  }

  uint64_t v28 = "RTCP ";
  if (v5 == 48) {
    uint64_t v28 = "";
  }
  return LogPrintF( result,  (uint64_t)"void _NTPClockServerProcessPacket(NTPClockRef, SocketRef)",  0xAu,  (uint64_t)"NTP server sent %sresponse to %##a, RAF %d",  v6,  v7,  v8,  v9,  (char)v28);
}

    if (a2 == a3) {
      break;
    }
    int v35 = a2;
    int v16 = a3;
    a2 = a3;
LABEL_9:
    int v17 = v16 - v14;
    switch(v13)
    {
      case 1:
        int v30 = 0.0;
        unint64_t v18 = (double)(3600 * v34 + 60 * v33 + v32[1]) + 0.0;
        *(double *)(a1 + 16) = v18;
        goto LABEL_29;
      case 2:
        if (v16 == v14) {
          unint64_t v19 = 63;
        }
        else {
          unint64_t v19 = *v14;
        }
        *(_BYTE *)(a1 + 24) = v19;
        goto LABEL_46;
      case 3:
        LODWORD(v20) = v32[0];
        *(double *)(a1 + 32) = v30 / 60.0 + (double)v20;
        goto LABEL_46;
      case 4:
        if (v16 == v14) {
          uint64_t v21 = 63;
        }
        else {
          uint64_t v21 = *v14;
        }
        *(_BYTE *)(a1 + 40) = v21;
        goto LABEL_46;
      case 5:
        LODWORD(v22) = v32[0];
        *(double *)(a1 + 48) = v30 / 60.0 + (double)v22;
        goto LABEL_46;
      case 6:
        if (v16 == v14) {
          size_t v23 = 63;
        }
        else {
          size_t v23 = *v14;
        }
        *(_BYTE *)(a1 + 56) = v23;
        goto LABEL_46;
      case 7:
        SNScanF(v14, v17, "%lf", a4, a5, a6, a7, a8, v12);
        goto LABEL_46;
      case 8:
        SNScanF(v14, v17, "%lf", a4, a5, a6, a7, a8, v11);
        goto LABEL_46;
      case 9:
        if (v31 >= 0x3C) {
          char v24 = 1900;
        }
        else {
          char v24 = 2000;
        }
        unint64_t v25 = YMD_HMStoSeconds(v24 + v31, v33, v32[0], 0, 0, 0, 0);
        *(_DWORD *)(a1 + 80) = (int)v25 / 86400;
        unint64_t v18 = (double)(v25 - 0xEB1E31100LL);
LABEL_29:
        *(double *)(a1 + 104) = *(double *)(a1 + 104) + v18;
LABEL_46:
        ++v13;
        break;
      case 10:
        SNScanF(v14, v17, "%lf", a4, a5, a6, a7, a8, v29);
        goto LABEL_46;
      case 11:
        if (v16 == v14) {
          dispatch_time_t v26 = 63;
        }
        else {
          dispatch_time_t v26 = *v14;
        }
        *(_BYTE *)(a1 + 96) = v26;
        goto LABEL_46;
      case 12:
        if (v16 == v14) {
          char v27 = 63;
        }
        else {
          char v27 = *v14;
        }
        *(_BYTE *)(a1 + 97) = v27;
        goto LABEL_46;
      default:
        goto LABEL_46;
    }
  }

  uint64_t result = 0LL;
  *(_DWORD *)a1 |= 4u;
  return result;
}

  unint64_t v18 = a3;
  a2 = a3;
  if (result != a3) {
    goto LABEL_9;
  }
  *(_DWORD *)a1 |= 4u;
  return result;
}

  int v16 = a3;
  a2 = a3;
  if (v14 != a3) {
    goto LABEL_9;
  }
  unint64_t v19 = YMD_HMStoSeconds( *(_DWORD *)(a1 + 40),  *(_DWORD *)(a1 + 36),  *(_DWORD *)(a1 + 32),  *(_DWORD *)(a1 + 16),  *(_DWORD *)(a1 + 20),  0,  730486);
  uint64_t result = 0LL;
  *(double *)(a1 + 56) = *(double *)(a1 + 24)
                       + (double)v19
  *(_DWORD *)a1 |= 4u;
  return result;
}

  int v17 = a3;
  unint64_t v18 = a3;
  if (a2 != a3) {
    goto LABEL_9;
  }
  *v20 |= 4u;
  return result;
}

id AVAudioPlayerFunction()
{
  return (id)classAVAudioPlayer;
}

Class initAVAudioPlayer()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_976);
  }
  Class result = objc_getClass("AVAudioPlayer");
  classAVAudioPlayer = (uint64_t)result;
  getAVAudioPlayerClass = (uint64_t (*)())AVAudioPlayerFunction;
  return result;
}

void *__AVFoundationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
  AVFoundationLibrary_sLib = (uint64_t)result;
  return result;
}

id AVAudioSessionInterruptionNotificationFunction()
{
  return (id)constantValAVAudioSessionInterruptionNotification;
}

id initValAVAudioSessionInterruptionNotification()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_976);
  }
  id v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVAudioSessionInterruptionNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValAVAudioSessionInterruptionNotification, *v0);
  }
  getAVAudioSessionInterruptionNotification = (uint64_t (*)())AVAudioSessionInterruptionNotificationFunction;
  return (id)constantValAVAudioSessionInterruptionNotification;
}

id AVAudioSessionFunction()
{
  return (id)classAVAudioSession;
}

Class initAVAudioSession()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_976);
  }
  Class result = objc_getClass("AVAudioSession");
  classAVAudioSession = (uint64_t)result;
  getAVAudioSessionClass = (uint64_t (*)())AVAudioSessionFunction;
  return result;
}

id AVAudioSessionCategoryAmbientFunction()
{
  return (id)constantValAVAudioSessionCategoryAmbient;
}

id initValAVAudioSessionCategoryAmbient()
{
  if (AVFoundationLibrary_sOnce != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_976);
  }
  id v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVAudioSessionCategoryAmbient");
  if (v0) {
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryAmbient, *v0);
  }
  getAVAudioSessionCategoryAmbient = (uint64_t (*)())AVAudioSessionCategoryAmbientFunction;
  return (id)constantValAVAudioSessionCategoryAmbient;
}

void sub_186A653B8(_Unwind_Exception *a1)
{
}

void sub_186A6555C(_Unwind_Exception *a1)
{
}

void sub_186A65698(_Unwind_Exception *a1)
{
}

LABEL_42:
          objc_storeStrong((id *)&self->_advertiseParametersCurrent, v21);
          -[CBPeripheralManager stopAdvertising](self->_peripheralManager, "stopAdvertising");
          goto LABEL_43;
        }
      }

      uint64_t v39 = self->_ucat;
      if (v39->var0 <= 10)
      {
        if (v39->var0 == -1)
        {
          uint64_t v39 = self->_ucat;
        }

        LogPrintF( (uint64_t)v39,  (uint64_t)"-[CUBLEAdvertiser _ensureStarted]",  0xAu,  (uint64_t)"Advertiser no changes\n",  v27,  v28,  v29,  v30,  v47);
      }

    unint64_t v18 = -1;
  }

  else
  {
    unint64_t v18 = 0;
  }

    goto LABEL_43;
  }

  NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
  uint64_t v13 = (NSString *)objc_claimAutoreleasedReturnValue();
  int v35 = self->_ucat;
  if (v35->var0 <= 90)
  {
    if (v35->var0 != -1)
    {
LABEL_27:
      LogPrintF( (uint64_t)v35,  (uint64_t)"-[CUNANPublisher _activateWithCompletion:]",  0x5Au,  (uint64_t)"### Activate failed: %{error}\n",  v31,  v32,  v33,  v34,  (char)v13);
      goto LABEL_39;
    }

    if (_LogCategory_Initialize((uint64_t)v35, 0x5Au))
    {
      int v35 = self->_ucat;
      goto LABEL_27;
    }
  }

  [0 invalidate];
  if ((v8 & 0x80000000) == 0 && close(v8) && *__error()) {
    __error();
  }
}

    char v11 = 4294960568LL;
LABEL_8:
    if ((DWORD2(v29) & 0x80000000) == 0 && close(SDWORD2(v29)) && *__error()) {
      __error();
    }
    if ((DWORD1(v29) & 0x80000000) == 0 && close(SDWORD1(v29)) && *__error()) {
      __error();
    }
    if ((_DWORD)v11) {
      _HTTPServerStop((CFTypeRef)a1);
    }
    return v11;
  }

  if (CFEqual(cf1, @"stopServer"))
  {
    _HTTPServerStop((CFTypeRef)a1);
    return 0LL;
  }

  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, void))(a1 + 144);
  if (!v28) {
    return 4294960582LL;
  }
  return v28(a1, a2, cf1, a4, a5, *(void *)(a1 + 120));
}

  if (a5) {
    *a5 = v14;
  }
  return result;
}

  unint64_t v18 = -6762;
LABEL_19:
  if (a5) {
    *a5 = v18;
  }
  return v12;
}

    int v30 = 0LL;
    int v31 = 0LL;
LABEL_43:
    int v32 = 0;
    float v29 = 0LL;
    goto LABEL_44;
  }

  unint64_t v25 = bytes;
  if (!bytes)
  {
    float v34 = *(void *)(a1 + 152);
    int v33 = *(void *)(a1 + 160);
    else {
      int v35 = v34 - v33;
    }
    int32x4_t v182 = a3;
    if (!v35)
    {
      int v30 = 0LL;
      int v31 = 0LL;
      int v32 = 0;
      float v29 = 0LL;
      unint64_t v18 = 4294960534LL;
      goto LABEL_44;
    }

    int v36 = v35 + v33;
    if (v35 + v33 == v34) {
      uint64_t v37 = 13;
    }
    else {
      uint64_t v37 = 12;
    }
    uint64_t v38 = TLV8BufferAppend((uint64_t)&v195, v37, (char *)(*(void *)(a1 + 144) + v33), v35);
    if ((_DWORD)v38)
    {
LABEL_41:
      unint64_t v18 = v38;
      goto LABEL_42;
    }

    int v31 = v196;
    int v30 = (char *)v197;
    if (!v197)
    {
      else {
        uint64_t v39 = v196;
      }
      uint64_t v40 = (char *)malloc(v39);
      int v30 = v40;
      if (!v40)
      {
        int v31 = 0LL;
        int v32 = 0;
        float v29 = 0LL;
        goto LABEL_392;
      }

      if (v31) {
        memcpy(v40, v195, v31);
      }
    }

    v195 = v198;
    *(void *)&char v196 = 0LL;
    char v197 = 0LL;
    if (v36 == v34)
    {
      int v32 = *(_BYTE *)(a1 + 168);
      free(*(void **)(a1 + 144));
      unint64_t v18 = 0LL;
      float v29 = 0LL;
      *(void *)(a1 + 144) = 0LL;
      *(void *)(a1 + 152) = 0LL;
      *(_BYTE *)(a1 + 168) = 0;
      *(void *)(a1 + 160) = 0LL;
    }

    else
    {
      unint64_t v18 = 0LL;
      int v32 = 0;
      float v29 = 0LL;
      *(void *)(a1 + 160) += v35;
    }

    goto LABEL_44;
  }

  dispatch_time_t v26 = *(void *)(a1 + 136);
  char v27 = &bytes[v26];
  if ((unint64_t)&bytes[v26] <= v26)
  {
    int32x4_t v182 = a3;
    int v30 = 0LL;
    int v31 = 0LL;
    int v32 = 0;
    float v29 = 0LL;
    unint64_t v18 = 4294960545LL;
    goto LABEL_44;
  }

  if ((unint64_t)v27 > 0x3E80)
  {
    int32x4_t v182 = a3;
    int v30 = 0LL;
    int v31 = 0LL;
    int v32 = 0;
    float v29 = 0LL;
    unint64_t v18 = 4294960553LL;
    goto LABEL_44;
  }

  uint64_t v28 = (unsigned __int8 *)realloc(*(void **)(a1 + 128), (size_t)v27);
  float v29 = v28;
  if (!v28)
  {
    int32x4_t v182 = a3;
    int v30 = 0LL;
    int v31 = 0LL;
    int v32 = 0;
LABEL_392:
    unint64_t v18 = 4294960568LL;
    goto LABEL_44;
  }

  memcpy(&v28[*(void *)(a1 + 136)], __src, (size_t)v25);
  if (*(void *)v199)
  {
    free(*(void **)v199);
    *(void *)v199 = 0LL;
  }

  if (v24 == -6727)
  {
    int v30 = 0LL;
    int v31 = 0LL;
    unint64_t v18 = 0LL;
    int v32 = 0;
    *(void *)(a1 + 128) = 0LL;
    *(void *)(a1 + 136) = 0LL;
    int32x4_t v182 = (CFIndex)v27;
    a2 = v29;
LABEL_44:
    char v41 = (char *)a6;
    goto LABEL_45;
  }

  int32x4_t v182 = a3;
  *(void *)(a1 + 128) = v29;
  *(void *)(a1 + 136) = v27;
  uint64_t v38 = TLV8BufferAppend((uint64_t)&v195, 12, 0LL, 0LL);
  if ((_DWORD)v38) {
    goto LABEL_41;
  }
  int v31 = v196;
  int v30 = (char *)v197;
  char v41 = (char *)a6;
  if (v197) {
    goto LABEL_81;
  }
  else {
    int v51 = v196;
  }
  uint64_t v52 = (char *)malloc(v51);
  int v30 = v52;
  if (v52)
  {
    if (v31) {
      memcpy(v52, v195, v31);
    }
LABEL_81:
    unint64_t v18 = 0LL;
    int v32 = 0;
    float v29 = 0LL;
    v195 = v198;
    *(void *)&char v196 = 0LL;
    char v197 = 0LL;
    goto LABEL_45;
  }

  int v31 = 0LL;
  int v32 = 0;
  float v29 = 0LL;
  unint64_t v18 = 4294960568LL;
LABEL_45:
  if (v197)
  {
    free(v197);
    char v197 = 0LL;
  }

  if (*(void *)v199) {
    free(*(void **)v199);
  }
  int32x4_t v186 = v31;
  int32x4_t v187 = v30;
  *char v41 = v32;
  if ((_DWORD)v18) {
    goto LABEL_53;
  }
  if (v30)
  {
    unint64_t v18 = 0LL;
    *a4 = v30;
    *int32x4_t v184 = v31;
LABEL_52:
    int32x4_t v187 = 0LL;
    goto LABEL_53;
  }

  int v43 = *(_DWORD *)(a1 + 96);
  switch(v43)
  {
    case 1:
      int v62 = _SetupClientExchange(a1, a2, v182, (UInt8 **)&v187, (const char *)&v186, (uint64_t)v41, v22, v23);
      goto LABEL_125;
    case 2:
      int v62 = _SetupServerExchange(a1, a2, v182, (UInt8 **)&v187, (CFIndex *)&v186, (uint64_t)v41, (uint64_t)v22, v23);
      goto LABEL_125;
    case 3:
      int v62 = _VerifyClientExchange(a1, a2, v182, (UInt8 **)&v187, (uint64_t)&v186, (uint64_t)v41, (uint64_t)v22, v23);
      goto LABEL_125;
    case 4:
      int v62 = _VerifyServerExchange(a1, a2, v182, (UInt8 **)&v187, &v186, (uint64_t)v41, (uint64_t)v22, v23);
      goto LABEL_125;
    case 5:
      int v62 = _ResumePairingClientExchange(a1, a2, v182, (UInt8 **)&v187, &v186, v41, (uint64_t)v22, v23);
      goto LABEL_125;
    case 6:
      int v62 = _ResumePairingServerExchange(a1, a2, v182, (UInt8 **)&v187, (uint64_t)&v186, v41, (uint64_t)v22, v23);
LABEL_125:
      unint64_t v18 = v62;
      goto LABEL_126;
    case 9:
    case 11:
    case 13:
      uint64_t v44 = *__s;
      if (!*__s)
      {
        uint64_t v44 = 1;
        char *__s = 1;
      }

      uint64_t v45 = (unint64_t)&a2[v182];
      if (v182)
      {
        uint64_t v46 = a2;
        do
        {
          if ((unint64_t)v46 >= v45)
          {
            unint64_t v18 = 4294960591LL;
            goto LABEL_289;
          }

          if (v45 - (unint64_t)v46 < 2)
          {
LABEL_271:
            unint64_t v18 = 4294960569LL;
            goto LABEL_289;
          }

          uint64_t v47 = v46 + 2;
          id v48 = v46[1];
          uint64_t v49 = &v46[v48 + 2];
          if ((unint64_t)v49 > v45)
          {
            unint64_t v18 = 4294960546LL;
            goto LABEL_289;
          }

          uint64_t v50 = *v46;
          v46 += v48 + 2;
        }

        while (v50 != 6);
        if ((_DWORD)v48 != 1) {
          goto LABEL_406;
        }
        if (*v47 != v44) {
          goto LABEL_207;
        }
      }

      else
      {
        uint64_t v49 = 0LL;
      }

      if (v44 == 2)
      {
        uint64_t v72 = *(int **)(a1 + 16);
        uint64_t v73 = *v72;
        if (*v72 <= 30)
        {
          if (v73 != -1)
          {
LABEL_147:
            id v74 = v73 > 10 || v73 == -1 && !_LogCategory_Initialize((uint64_t)v72, 0xAu);
            LogPrintF( (uint64_t)v72,  (uint64_t)"OSStatus _AdminPairingClientM2(PairingSessionRef, const uint8_t *const, const uint8_t *const, con st uint8_t *const)",  0x1Eu,  (uint64_t)"AdminPairing client M2 -- response\n%?{end}%1{tlv8}\n",  v20,  v21,  (uint64_t)v22,  v23,  v74);
            goto LABEL_274;
          }

          if (_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
          {
            uint64_t v72 = *(int **)(a1 + 16);
            uint64_t v73 = *v72;
            goto LABEL_147;
          }
        }

  *(_BYTE *)(a1 + 688) = 2;
  RandomBytes((void *)(a1 + 478), 0x20uLL);
  CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 478,  32LL,  "Pair-Verify-ECDH-Salt",  0x15uLL,  (uint64_t)"Pair-Verify-ECDH-Info",  21LL,  0x20uLL,  a1 + 478);
  int v30 = (_OWORD *)(a1 + 446);
  cccurve25519_make_pub();
  int v31 = (_OWORD *)(a1 + 574);
  uint64_t appended = TLV8GetBytes(a2, v12, 3, 0x20uLL, 0x20uLL, (char *)(a1 + 574), 0LL, 0LL);
  if ((_DWORD)appended)
  {
LABEL_111:
    dispatch_time_t v26 = 0;
    char v27 = 0;
    goto LABEL_112;
  }

  cccurve25519();
  int v32 = vorrq_s8(v11[1], *v11);
  if (!*(void *)&vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)))
  {
    uint64_t appended = 4294960554LL;
    goto LABEL_111;
  }

  *(void *)(a1 + 200) = TLV8GetUInt64(a2, v12, 25, 0LL, 0LL);
  *(_BYTE *)(a1 + 120) = 2;
  int32x4_t v178 = xmmword_186B49CC0;
  __src = v180;
  int8x16_t v179 = 0LL;
  unsigned int __dst = (int8x16_t *)&v175;
  int32x4_t v173 = xmmword_186B49CC0;
  int32x4_t v174 = 0LL;
  int v33 = *(_DWORD *)(a1 + 100);
  if ((v33 & 0x1000) == 0)
  {
    float v34 = *(const void **)(a1 + 944);
    if (!v34) {
      goto LABEL_49;
    }
    int v35 = _Block_copy(v34);
    int v36 = *(_OWORD *)(a1 + 462);
    v171[0] = *v30;
    v171[1] = v36;
    uint64_t v37 = *(_OWORD *)(a1 + 590);
    v171[2] = *v31;
    v171[3] = v37;
    uint64_t v38 = (*((uint64_t (**)(void *, void, _OWORD *, uint64_t, _OWORD *))v35 + 2))( v35,  *(unsigned int *)(a1 + 100),  v171,  64LL,  __s);
    LODWORD(v169) = v38;
    if (!v38)
    {
      __int128 v111 = TLV8BufferAppend((uint64_t)&__dst, 10, (char *)__s, 0x40uLL);
      LODWORD(v169) = v111;

      id v8 = v164;
      if (!v111) {
        goto LABEL_158;
      }
      goto LABEL_217;
    }

    int v43 = v38;
    if (v38 == -6714)
    {

LABEL_49:
      uint64_t v44 = *(void **)(a1 + 184);
      if (v44)
      {
        free(v44);
        *(void *)(a1 + 184) = 0LL;
      }

      *(void *)(a1 + 192) = 0LL;
      uint64_t v45 = PairingSessionCopyIdentity(a1, 0LL, (char **)(a1 + 184), (_OWORD *)(a1 + 510), a1 + 542);
      LODWORD(v169) = v45;
      if (v45)
      {
        int32x4_t v157 = v45;
        int32x4_t v158 = *(int **)(a1 + 16);
        id v8 = v164;
        if (*v158 > 90) {
          goto LABEL_217;
        }
        if (*v158 == -1)
        {
          id v8 = v164;
          int32x4_t v158 = *(int **)(a1 + 16);
        }

        LogPrintF( (uint64_t)v158,  (uint64_t)"OSStatus _VerifyServerM2(PairingSessionRef, uint8_t **, size_t *)",  0x5Au,  (uint64_t)"### Pair-verify server M2 failed: copy identity, %#m\n",  (uint64_t)a5,  a6,  a7,  a8,  v157);
      }

      else
      {
        uint64_t v46 = *(const char **)(a1 + 184);
        uint64_t v47 = strlen(v46);
        *(void *)(a1 + 192) = v47;
        if (v47)
        {
          id v48 = v47;
          int8x16_t v162 = v47 + 64;
          uint64_t v49 = malloc(v47 + 64);
          if (v49)
          {
            uint64_t v50 = v49;
            int v51 = *(_OWORD *)(a1 + 462);
            *uint64_t v49 = *v30;
            v49[1] = v51;
            uint64_t v52 = v49 + 2;
            memcpy(v49 + 2, v46, v48);
            uint64_t v53 = (_OWORD *)((char *)v52 + v48);
            char v54 = *(_OWORD *)(a1 + 590);
            UInt8 *v53 = *v31;
            v53[1] = v54;
            int v55 = *(void (**)(void, void *, size_t, _OWORD *, void))(a1 + 928);
            if (v55)
            {
              v55(*(unsigned int *)(a1 + 100), v50, v162, __s, *(void *)(a1 + 936));
            }

            else
            {
              ccsha512_di();
              cced25519_sign();
            }

            id v8 = v164;
            free(v50);
            LODWORD(v169) = TLV8BufferAppend((uint64_t)&__dst, 1, *(char **)(a1 + 184), *(void *)(a1 + 192));
            if (!(_DWORD)v169)
            {
              int v57 = TLV8BufferAppend((uint64_t)&__dst, 10, (char *)__s, 0x40uLL);
LABEL_157:
              LODWORD(v169) = v57;
              if (!v57) {
                goto LABEL_158;
              }
            }

            goto LABEL_217;
          }

          int32x4_t v159 = -6728;
        }

        else
        {
          int32x4_t v159 = -6708;
        }

        LODWORD(v169) = v159;
      }

      id v8 = v164;
      goto LABEL_217;
    }

    __int128 v112 = *(int **)(a1 + 16);
    id v8 = v164;
    if (*v112 <= 90)
    {
      if (*v112 != -1) {
        goto LABEL_183;
      }
      if (_LogCategory_Initialize((uint64_t)v112, 0x5Au))
      {
        __int128 v112 = *(int **)(a1 + 16);
LABEL_183:
        LogPrintF( (uint64_t)v112,  (uint64_t)"OSStatus _VerifyServerM2(PairingSessionRef, uint8_t **, size_t *)",  0x5Au,  (uint64_t)"### Pair-verify server M2 sign failed: %#m\n",  v39,  v40,  v41,  v42,  v43);
      }
    }

    goto LABEL_217;
  }

  id v8 = v164;
  if ((v33 & 0x20100000) == 0)
  {
    int v57 = _PairingSessionAppleIDProveSelf(a1, (uint64_t)&__dst);
    goto LABEL_157;
  }

void sub_186A65EE4(_Unwind_Exception *a1)
{
}

id CBAdvertisementDataAppleMfgDataFunction()
{
  return (id)constantValCBAdvertisementDataAppleMfgData;
}

id initValCBAdvertisementDataAppleMfgData()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1094);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBAdvertisementDataAppleMfgData");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataAppleMfgData, *v0);
  }
  getCBAdvertisementDataAppleMfgCFDictionaryRef Data = (uint64_t (*)())CBAdvertisementDataAppleMfgDataFunction;
  return (id)constantValCBAdvertisementDataAppleMfgData;
}

id CBAdvertisementDataIsConnectableFunction()
{
  return (id)constantValCBAdvertisementDataIsConnectable;
}

id initValCBAdvertisementDataIsConnectable()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1094);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBAdvertisementDataIsConnectable");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataIsConnectable, *v0);
  }
  getCBAdvertisementDataIsConnectable = (uint64_t (*)())CBAdvertisementDataIsConnectableFunction;
  return (id)constantValCBAdvertisementDataIsConnectable;
}

void *__CoreBluetoothLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib = (uint64_t)result;
  return result;
}

id CBManagerIsPrivilegedDaemonKeyFunction()
{
  return (id)constantValCBManagerIsPrivilegedDaemonKey;
}

id initValCBManagerIsPrivilegedDaemonKey()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1094);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib, "CBManagerIsPrivilegedDaemonKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerIsPrivilegedDaemonKey, *v0);
  }
  getCBManagerIsPrivilegedDaemonKey = (uint64_t (*)())CBManagerIsPrivilegedDaemonKeyFunction;
  return (id)constantValCBManagerIsPrivilegedDaemonKey;
}

id CBPeripheralManagerFunction()
{
  return (id)classCBPeripheralManager;
}

Class initCBPeripheralManager()
{
  if (CoreBluetoothLibrary_sOnce != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce, &__block_literal_global_1094);
  }
  Class result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager = (uint64_t)result;
  getCBPeripheralManagerClass = (uint64_t (*)())CBPeripheralManagerFunction;
  return result;
}

LABEL_27:
        int v35 = 0;
        goto LABEL_28;
      }

      ucCFAbsoluteTime at = self->_ucat;
      l2capChannel = self->_l2capChannel;
    }

    uint64_t v12 = -[CBL2CAPChannel PSM](l2capChannel, "PSM");
    -[CBL2CAPChannel peer](self->_l2capChannel, "peer");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 identifier];
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEConnection activateDirectAndReturnError:]",  0x1Eu,  (uint64_t)"Activate incoming PSM 0x%04X, peer %@\n",  v14,  v15,  v16,  v17,  v12);

    goto LABEL_9;
  }

  if (var0 <= 30)
  {
    if (var0 != -1)
    {
LABEL_7:
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEConnection activateDirectAndReturnError:]",  0x1Eu,  (uint64_t)"Activate outgoing PSM 0x%04X, peer %@\n",  v3,  v4,  v5,  v6,  self->_destinationPSM);
      goto LABEL_17;
    }

    if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu))
    {
      ucCFAbsoluteTime at = self->_ucat;
      goto LABEL_7;
    }
  }

        int v36 = 0;
        goto LABEL_28;
      }

      ucCFAbsoluteTime at = self->_ucat;
      l2capChannel = self->_l2capChannel;
    }

    uint64_t v12 = -[CBL2CAPChannel PSM](l2capChannel, "PSM");
    -[CBL2CAPChannel peer](self->_l2capChannel, "peer");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 identifier];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothClassicConnection activateDirectAndReturnError:]",  0x1Eu,  (uint64_t)"Activate incoming PSM 0x%04X, peer %@, CF %#{flags}\n",  v15,  v16,  v17,  v18,  v12);

    goto LABEL_9;
  }

  if (var0 <= 30)
  {
    if (var0 != -1)
    {
LABEL_7:
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothClassicConnection activateDirectAndReturnError:]",  0x1Eu,  (uint64_t)"Activate outgoing peer %@, service %@, CF %#{flags}, RS %#{flags}\n",  v3,  v4,  v5,  v6,  (char)self->_destinationPeer);
      goto LABEL_17;
    }

    if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu))
    {
      ucCFAbsoluteTime at = self->_ucat;
      goto LABEL_7;
    }
  }

        [v9 _invalidated];
        goto LABEL_28;
      }

      int v16 = (void *)*MEMORY[0x189607670];
      NSPrintF();
      int v17 = (void *)objc_claimAutoreleasedReturnValue();
      float v29 = v17;
LABEL_19:
      NSErrorF_safe(v16, (const char *)0xFFFFE5B0LL);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_reportError:", v28, v29);

      goto LABEL_28;
    case 0:
      uint64_t v15 = (int *)*((void *)v9 + 19);
      if (*v15 <= 30)
      {
        if (*v15 == -1)
        {
          uint64_t v15 = (int *)*((void *)v9 + 19);
        }

        LogPrintF( (uint64_t)v15,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTSession attached: %#m\n",  v10,  v11,  v12,  v13,  v14);
      }

      v14[12] = 0LL;
      *((_BYTE *)v14 + 105) = 0;
      unint64_t v20 = *((unsigned __int8 *)v14 + 107);
      [v14 _btEnsureStopped];
      if (v20) {
        [v14 _btEnsureStarted];
      }
LABEL_29:
      CFRelease(v14);
      break;
    case 3:
      unint64_t v19 = v9[28];
      if (*v19 > 60) {
        break;
      }
      if (*v19 != -1) {
        goto LABEL_16;
      }
      if (_LogCategory_Initialize((uint64_t)v19, 0x3Cu))
      {
        unint64_t v19 = v14[28];
LABEL_16:
        LogPrintF( (uint64_t)v19,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x3Cu,  (uint64_t)"### BTSession failed: %#m\n",  v10,  v11,  v12,  v13,  a3 - 16);
      }

      break;
    default:
      int v16 = v9[28];
      if (*v16 > 40) {
        break;
      }
      if (*v16 != -1) {
        goto LABEL_7;
      }
      if (_LogCategory_Initialize((uint64_t)v16, 0x28u))
      {
        int v16 = v14[28];
LABEL_7:
        LogPrintF( (uint64_t)v16,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x28u,  (uint64_t)"BTSession unknown event %d, result %#m\n",  v10,  v11,  v12,  v13,  a2);
      }

      break;
  }

  objc_autoreleasePoolPop(v8);
}
}

          objc_storeStrong((id *)&self->_selfAccessory, obj);
          -[HMAccessory setDelegate:](self->_selfAccessory, "setDelegate:", self);
          unint64_t v25 = 1;
          goto LABEL_28;
        }
      }

      [obj room];
      unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      [v18 uniqueIdentifier];
      unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();

      selfAccessoryRoomID = self->_selfAccessoryRoomID;
      uint64_t v21 = v19;
      uint64_t v22 = selfAccessoryRoomID;
      if (v21 == v22)
      {

        unint64_t v25 = 0;
        int v31 = v21;
      }

      else
      {
        size_t v23 = v22;
        if ((v21 == 0LL) != (v22 != 0LL))
        {
          char v24 = -[NSUUID isEqual:](v21, "isEqual:", v22);

          if ((v24 & 1) != 0)
          {
            unint64_t v25 = 0;
LABEL_25:

LABEL_28:
            uint64_t v12 = v25 != 0;
            goto LABEL_32;
          }
        }

        else
        {
        }

        int v32 = v21;
        int v31 = self->_selfAccessoryRoomID;
        self->_selfAccessoryRoomID = v32;
        unint64_t v25 = 1;
      }

      goto LABEL_25;
    }

    -[HMAccessory uniqueIdentifier](self->_selfAccessory, "uniqueIdentifier");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    selfAccessory = self->_selfAccessory;
    uint64_t v12 = selfAccessory != 0LL;
    if (!selfAccessory)
    {
LABEL_31:

LABEL_32:
      [obj home];
      int v35 = (void *)objc_claimAutoreleasedReturnValue();
      [v35 currentUser];
      int v36 = (HMUser *)objc_claimAutoreleasedReturnValue();

      -[HMUser uniqueIdentifier](v36, "uniqueIdentifier");
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMUser uniqueIdentifier](self->_selfAccessoryUser, "uniqueIdentifier");
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      if (v39 == v40)
      {

        if (!v12) {
          goto LABEL_50;
        }
        goto LABEL_48;
      }

      char v41 = v40;
      if ((v39 == 0LL) == (v40 != 0LL))
      {
      }

      else
      {
        uint64_t v42 = [v39 isEqual:v40];

        if ((v42 & 1) != 0)
        {
          if (!v12) {
            goto LABEL_50;
          }
          goto LABEL_48;
        }
      }

      int v43 = self->_ucat;
      if (v43->var0 <= 30)
      {
        if (v43->var0 == -1)
        {
          int v43 = self->_ucat;
        }

        -[HMUser userID](v36, "userID");
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
        LogPrintF( (uint64_t)v43,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryIfNeeded]",  0x1Eu,  (uint64_t)"SelfAccessory user updated: %{mask}",  v45,  v46,  v47,  v48,  (char)v44);
      }

    unint64_t v20 = 0;
    goto LABEL_28;
  }

  if (!a5) {
    goto LABEL_27;
  }
  NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_6:
  unint64_t v19 = v18;
LABEL_10:
  unint64_t v20 = 0;
  *a5 = v19;
LABEL_28:

  return v20;
}

          size_t v23 = 1;
LABEL_28:
          p_primaryIPv6Addr = &self->_primaryIPv6Addr;
          if (v47[1])
          {
            if (v47[1] == 30)
            {
              p_primaryIPv6Addr->sa = *(sockaddr *)v47;
              *(in6_addr *)((char *)&self->_primaryIPv6Addr.v6.sin6_addr + 4) = *(in6_addr *)&v47[12];
              if (!a3) {
                goto LABEL_39;
              }
              goto LABEL_36;
            }

            if (v47[1] == 2)
            {
              p_primaryIPv6Addr->sa = *(sockaddr *)v47;
              if (!a3)
              {
LABEL_39:
                int v30 = self->_ucat;
                if (v30->var0 <= 30)
                {
                  if (v30->var0 == -1)
                  {
                    int v30 = self->_ucat;
                  }

                  LogPrintF( (uint64_t)v30,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChanged:]",  0x1Eu,  (uint64_t)"PrimaryIPv6 changed: %##a\n",  v26,  v27,  v28,  v29,  (char)v47);
                }

  p_primaryIPv4Addr = &self->_primaryIPv4Addr;
  if (SockAddrCompareAddrEx(v53, (uint64_t)&self->_primaryIPv4Addr, 1))
  {
    if (v53[0].sa_family)
    {
      if (v53[0].sa_family == 30)
      {
        p_primaryIPv4Addr->sa = v53[0];
        *(sockaddr *)((char *)&self->_primaryIPv4Addr.v6.sin6_addr + 4) = *(sockaddr *)&v53[0].sa_data[10];
      }

      else if (v53[0].sa_family == 2)
      {
        p_primaryIPv4Addr->sa = v53[0];
      }
    }

    else
    {
      self->_primaryIPv4Addr.sa.sa_family = 0;
    }

    p_primaryIPv6Addr = &self->_primaryIPv6Addr;
    uint64_t v37 = 1;
    if (!SockAddrCompareAddrEx(v52, (uint64_t)&self->_primaryIPv6Addr, 1))
    {
      uint64_t v38 = 30;
      goto LABEL_45;
    }
  }

  else
  {
    p_primaryIPv6Addr = &self->_primaryIPv6Addr;
    if (!SockAddrCompareAddrEx(v52, (uint64_t)&self->_primaryIPv6Addr, 1))
    {
      uint64_t v37 = 0;
      uint64_t v38 = 20;
      goto LABEL_45;
    }
  }

  if (BYTE1(v52[0]))
  {
    if (BYTE1(v52[0]) == 30)
    {
      p_primaryIPv6Addr->sa = (sockaddr)v52[0];
      *(in6_addr *)((char *)&p_primaryIPv6Addr->v6.sin6_addr + 4) = *(in6_addr *)((char *)v52 + 12);
    }

    else if (BYTE1(v52[0]) == 2)
    {
      p_primaryIPv6Addr->sa = (sockaddr)v52[0];
    }
  }

  else
  {
    self->_primaryIPv6Addr.sa.sa_family = 0;
  }

  uint64_t v38 = 30;
  uint64_t v37 = 1;
LABEL_45:
  uint64_t v39 = self->_ucat;
  if (v38 >= v39->var0)
  {
    if (v39->var0 != -1)
    {
      uint64_t v50 = v9;
      int v51 = v19;
LABEL_48:
      if (v37) {
        uint64_t v40 = "changed";
      }
      else {
        uint64_t v40 = "unchanged";
      }
      NSPrintF();
      char v41 = (void *)objc_claimAutoreleasedReturnValue();
      NSPrintF();
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF_safe( (uint64_t)v39,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChangedNW:]",  v38,  (uint64_t)"Primary IPs %s: interface=%s, IPv4=%@, IPv6=%@ %s",  v43,  v44,  v45,  v46,  (char)v40);

      unint64_t v9 = v50;
      unint64_t v19 = v51;
      goto LABEL_53;
    }

    if (_LogCategory_Initialize((uint64_t)self->_ucat, v38))
    {
      uint64_t v50 = v9;
      int v51 = v19;
      uint64_t v39 = self->_ucat;
      goto LABEL_48;
    }
  }

  CFNumberRef Int64 = CFPrefs_GetInt64(@"com.apple.rapportd", @"pairingPINTimeoutSeconds", 0LL);
  if (Int64 >= 1) {
    dispatch_time_t v26 = Int64;
  }
  else {
    dispatch_time_t v26 = 480LL;
  }
  char v27 = self->_ucat;
  if (v27->var0 <= 30)
  {
    if (v27->var0 == -1)
    {
      char v27 = self->_ucat;
    }

    if (IsAppleInternalBuild_sOnce != -1) {
      dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
    }
    if (IsAppleInternalBuild_sIsInternal) {
      LOBYTE(v28) = (_BYTE)v10;
    }
    else {
      uint64_t v28 = @"*";
    }
    LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUPairingSession _showPINBuiltInUI:useVisualPairing:]",  0x1Eu,  (uint64_t)"Show PIN dialog: PIN='%@', timeout=%lld seconds, visual=%s",  v22,  v23,  v24,  v25,  (char)v28);
  }

    [v9 setShouldShowSubordinateIcon:1];
    goto LABEL_28;
  }

  if (a3)
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
    char v11 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    char v11 = 0;
  }

  uint64_t v21 = self->_ucat;
  if (v21->var0 <= 30)
  {
    if (v21->var0 == -1)
    {
      uint64_t v21 = self->_ucat;
    }

    LogPrintF( (uint64_t)v21,  (uint64_t)"-[CUWACSession _runEasyConfigProgress:info:]",  0x1Eu,  (uint64_t)"EasyConfig unknown event %d %@\n",  v6,  v7,  v8,  v9,  a3);
  }

  int v30 = v14;
  uint64_t v47 = 0LL;
  id v48 = (unsigned __int8 *)[v30 bytes];
  IEGetVendorSpecific(v48, (unint64_t)&v48[[v30 length]], 10502144, &v48, &v47, 0);
  if (v47) {
    unint64_t v20 = -[CUWiFiDevice _updateWithDeviceIE:end:](v11, "_updateWithDeviceIE:end:", v48, &v48[v47]) | v20;
  }
  if (v10)
  {
    changeFlags = self->_changeFlags;
    if (changeFlags != -1 && (changeFlags & v20) == 0)
    {
LABEL_46:
      uint64_t v38 = v46;
      goto LABEL_47;
    }

    int v36 = self->_ucat;
    if (v36->var0 <= 30)
    {
      if (v36->var0 != -1)
      {
LABEL_34:
        LogPrintF( (uint64_t)v36,  (uint64_t)"-[CUWiFiScanner _scanWiFiProcessResult:]",  0x1Eu,  (uint64_t)"WiFi scan changed: %@, %#{flags}\n",  v31,  v32,  v33,  v34,  (char)v11);
        goto LABEL_44;
      }

      if (_LogCategory_Initialize((uint64_t)v36, 0x1Eu))
      {
        int v36 = self->_ucat;
        goto LABEL_34;
      }
    }

  return v21;
}

    int v17 = 0LL;
  }

  else
  {
LABEL_16:
    int v17 = [v7 copy];
  }

      int v4 = 0LL;
      if (!a4) {
        uint64_t v5 = 0;
      }
      *a1 = v5;
    }

    else
    {
      switch(a3)
      {
        case 176:
          goto LABEL_17;
        case 177:
          goto LABEL_7;
        case 178:
          goto LABEL_15;
        case 179:
          uint64_t v5 = 7;
          goto LABEL_27;
        case 180:
          uint64_t v5 = 8;
          goto LABEL_27;
        case 181:
          uint64_t v5 = 9;
          goto LABEL_27;
        case 182:
          uint64_t v5 = 10;
          goto LABEL_27;
        case 183:
          uint64_t v5 = 11;
          goto LABEL_27;
        case 184:
          uint64_t v5 = 12;
          goto LABEL_27;
        case 185:
          uint64_t v5 = 13;
          goto LABEL_27;
        case 186:
          uint64_t v5 = 14;
          goto LABEL_27;
        case 187:
          uint64_t v5 = 15;
          goto LABEL_27;
        default:
          return v4;
      }
    }
  }

  return v4;
}

    _HTTPServerUpdateTimeoutTimer(v9);
    return;
  }

  LOBYTE(v18) = v13;
  if ((v11 & 0x80000000) == 0 && close(v11) && *__error()) {
    __error();
  }
LABEL_19:
  if (v23) {
    _HTTPServerCloseConnection(v23);
  }
  uint64_t v22 = *(int **)(v9 + 24);
  if (*v22 <= 60)
  {
    if (*v22 != -1)
    {
LABEL_23:
      LogPrintF( (uint64_t)v22,  (uint64_t)"void _HTTPServerAcceptConnection(void *)",  0x3Cu,  (uint64_t)"### Accept connection failed: %#m\n",  v14,  v15,  v16,  v17,  v18);
      return;
    }

    if (_LogCategory_Initialize((uint64_t)v22, 0x3Cu))
    {
      uint64_t v22 = *(int **)(v9 + 24);
      goto LABEL_23;
    }
  }

  if (*(void *)(a1 + 88) > 0x100000uLL)
  {
    uint64_t v21 = *(void **)(a1 + 80);
    if (v21)
    {
      free(v21);
      *(void *)(a1 + 80) = 0LL;
    }

    *(void *)(a1 + 88) = 0LL;
  }

  return v20;
}

  uint64_t v28 = v45;

  return v28;
}

  if (v10) {
    CFRelease(v10);
  }
  if (v4) {
    CFRelease(v4);
  }
LABEL_31:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 80));
  return v2;
}

LABEL_30:
      int v17 = 0LL;
LABEL_18:

      return;
    }

    obja = (id)v7;
    -[NSMutableArray removeObjectAtIndex:](self->_readRequests, "removeObjectAtIndex:", 0LL);
    -[CUBLEConnection _prepareReadRequest:](self, "_prepareReadRequest:", obja);
    objc_storeStrong((id *)p_readRequestCurrent, obja);
    id v6 = (uint64_t *)obja;
LABEL_5:
    id obj = v6;
    CFDictionaryRef Data = (const char *)SocketReadDataEx( self->_socketFD,  v6[1],  [v6 minLength],  objc_msgSend(v6, "maxLength"),  v6 + 3);
    ucCFAbsoluteTime at = self->_ucat;
    if (ucat->var0 > 20) {
      goto LABEL_9;
    }
    if (ucat->var0 != -1) {
      goto LABEL_7;
    }
    if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x14u))
    {
      ucCFAbsoluteTime at = self->_ucat;
LABEL_7:
      socketFD = self->_socketFD;
      [obj minLength];
      [obj maxLength];
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBLEConnection _processReads:]",  0x14u,  (uint64_t)"Read socket %d, %zu min, %zu max, %zu offset, %zu nread, %#m\n",  v11,  v12,  v13,  v14,  socketFD);
    }

    goto LABEL_31;
  }

  uint64_t v13 = self->_ucat;
  if (v13->var0 <= 90)
  {
    if (v13->var0 == -1)
    {
      uint64_t v13 = self->_ucat;
    }

    LogPrintF( (uint64_t)v13,  (uint64_t)"-[CUBLEServer peripheralManager:didOpenL2CAPChannel:error:]",  0x5Au,  (uint64_t)"### L2CAP open channel failed: %{error}\n",  v9,  v10,  v11,  v12,  (char)v8);
  }

      int v17 = 0LL;
LABEL_18:

      return;
    }

    obja = (id)v7;
    -[NSMutableArray removeObjectAtIndex:](self->_readRequests, "removeObjectAtIndex:", 0LL);
    -[CUBluetoothClassicConnection _prepareReadRequest:](self, "_prepareReadRequest:", obja);
    objc_storeStrong((id *)p_readRequestCurrent, obja);
    id v6 = (uint64_t *)obja;
LABEL_5:
    id obj = v6;
    CFDictionaryRef Data = (const char *)SocketReadDataEx( self->_socketFD,  v6[1],  [v6 minLength],  objc_msgSend(v6, "maxLength"),  v6 + 3);
    ucCFAbsoluteTime at = self->_ucat;
    if (ucat->var0 > 9) {
      goto LABEL_9;
    }
    if (ucat->var0 != -1) {
      goto LABEL_7;
    }
    if (_LogCategory_Initialize((uint64_t)self->_ucat, 9u))
    {
      ucCFAbsoluteTime at = self->_ucat;
LABEL_7:
      socketFD = self->_socketFD;
      [obj minLength];
      [obj maxLength];
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUBluetoothClassicConnection _processReads:]",  9u,  (uint64_t)"Read socket %d, %zu min, %zu max, %zu offset, %zu nread, %#m\n",  v11,  v12,  v13,  v14,  socketFD);
    }

  uint64_t v37 = v41;
  uint64_t v38 = *((_DWORD *)v13 + 41);
  if ((v38 & ~v41) == 0) {
    goto LABEL_31;
  }
  unint64_t v20 = (int *)*((void *)v13 + 19);
  if (*v20 <= 30)
  {
    if (*v20 == -1)
    {
      unint64_t v20 = (int *)*((void *)v13 + 19);
      uint64_t v38 = *((_DWORD *)v13 + 41);
      uint64_t v37 = v41;
    }

    LOBYTE(v40) = v38 & ~v37;
    unint64_t v19 = "BTService connect waiting for more services: %#{flags}\n";
    goto LABEL_6;
  }

  ((void (*)(uint64_t))softLinkBTPairingAgentDestroy[0])((uint64_t)&self->_btPairingAgent);
  self->_btPairingAgent = 0LL;
LABEL_31:
  if (!self->_btSessionAddedServiceCallback) {
    goto LABEL_39;
  }
  if (self->_btSession)
  {
    int v16 = self->_ucat;
    if (v16->var0 <= 30)
    {
      if (v16->var0 == -1)
      {
        int v16 = self->_ucat;
      }

      LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x1Eu,  (uint64_t)"BTServiceRemoveCallbacks\n",  v2,  v3,  v4,  v5,  v28);
    }

      deviceChangedHandler = (void (**)(id, CUBonjourDevice *, uint64_t))self->_deviceChangedHandler;
      if (deviceChangedHandler) {
        deviceChangedHandler[2](deviceChangedHandler, v12, v13);
      }
LABEL_37:

      goto LABEL_38;
    }

    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___CUBonjourDevice);
    int v17 = v42;
    *(_WORD *)&v12->_deviceIDBytes[4] = v43;
    *(_DWORD *)v12->_deviceIDCFIndex Bytes = v17;
    unint64_t v18 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:&v40];
    -[CUBonjourDevice setIdentifier:](v12, "setIdentifier:", v18);
    -[CUBonjourDevice setIdentifierUUID:](v12, "setIdentifierUUID:", v18);
    -[CUBonjourDevice setIdentifierStr:](v12, "setIdentifierStr:", v10);
    -[CUBonjourDevice updateWithBonjourDeviceInfo:](v12, "updateWithBonjourDeviceInfo:", v4);
    unint64_t v19 = self;
    objc_sync_enter(v19);
    deviceMap = self->_deviceMap;
    if (!deviceMap)
    {
      uint64_t v21 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
      size_t v23 = self->_deviceMap;
      p_deviceMap = &self->_deviceMap;
      *p_deviceMap = v21;

      deviceMap = *p_deviceMap;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](deviceMap, "setObject:forKeyedSubscript:", v12, v10);
    objc_sync_exit(v19);

    char v24 = v19->_ucat;
    if (v24->var0 <= 30)
    {
      if (v24->var0 != -1)
      {
LABEL_14:
        unint64_t v25 = v12;
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          dispatch_time_t v26 = -[CUBonjourDevice shortDescription](v25, "shortDescription");
        }

        else
        {
          if ((objc_opt_respondsToSelector() & 1) != 0) {
            -[CUBonjourDevice descriptionWithLevel:](v25, "descriptionWithLevel:", 50LL);
          }
          else {
          dispatch_time_t v26 = -[CUBonjourDevice description](v25, "description");
          }
        }

        int v33 = (void *)v26;

        LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUBonjourBrowser _bonjourHandleAddOrUpdateDevice:]",  0x1Eu,  (uint64_t)"Found %@\n",  v34,  v35,  v36,  v37,  (char)v33);
        goto LABEL_34;
      }

      if (_LogCategory_Initialize((uint64_t)v19->_ucat, 0x1Eu))
      {
        char v24 = v19->_ucat;
        goto LABEL_14;
      }
    }

    -[HMAccessory setDelegate:](selfAccessory, "setDelegate:", self);
    float v34 = self->_selfAccessory;
    self->_selfAccessory = 0LL;

    goto LABEL_31;
  }

      -[CUHomeKitManager _findPairedPeerWithContext:](self, "_findPairedPeerWithContext:", v60);
      goto LABEL_31;
    }

    int v30 = self->_ucat;
    int v31 = v60;
    if (v30->var0 <= 90)
    {
      if (v30->var0 == -1)
      {
        uint64_t v56 = _LogCategory_Initialize((uint64_t)self->_ucat, 0x5Au);
        int v31 = v60;
        if (!v56) {
          goto LABEL_25;
        }
        int v30 = self->_ucat;
      }

      [v31 identifier];
      int v32 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v30,  (uint64_t)"-[CUHomeKitManager _findPairedPeerWithContext:label:pairingIdentity:error:]",  0x5Au,  (uint64_t)"### FindPairedPeer: '%@', %@, no identifier for identity\n",  v33,  v34,  v35,  v36,  (char)v32);

      int v31 = v60;
    }

  return v29;
}

          int v17 = 0LL;
          goto LABEL_31;
        }

        -[objc_class createWithBytesNoCopy:length:error:](a4, "createWithBytesNoCopy:length:error:", v20, dlen, a5);
        int v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          goto LABEL_35;
        }
        unint64_t v25 = v20;
        goto LABEL_39;
      }

      if (!a5) {
        goto LABEL_30;
      }
    }

    else
    {
      size_t v23 = (char *)malloc(1uLL);
      if (v23)
      {
        char v24 = v23;
        -[objc_class createWithBytesNoCopy:length:error:](a4, "createWithBytesNoCopy:length:error:", v23, 0LL, a5);
        int v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
        {
LABEL_35:
          uint64_t v28 = v17;
LABEL_40:

          goto LABEL_31;
        }

        unint64_t v25 = v24;
LABEL_39:
        free(v25);
        goto LABEL_40;
      }

      if (!a5) {
        goto LABEL_30;
      }
    }

    uint64_t v14 = 4294960568LL;
    goto LABEL_6;
  }

  if (!a5) {
    goto LABEL_30;
  }
  uint64_t v14 = 4294960591LL;
LABEL_6:
  NSErrorWithOSStatusF((const char *)v14);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:
  int v16 = v15;
LABEL_11:
  int v17 = 0LL;
  *a5 = v16;
LABEL_31:

  return v17;
}

  uint64_t v68 = 1;
  if (setsockopt(v14, 0xFFFF, 0x10000, &v68, 4u) && (!*__error() || *__error()))
  {
    float v34 = self->_ucat;
    if (v34->var0 <= 90)
    {
      if (v34->var0 != -1)
      {
LABEL_35:
        LogPrintF( (uint64_t)v34,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket SO_NOWAKEFROMSLEEP failed (%s): %#m\n",  v30,  v31,  v32,  v33,  (char)v9);
        goto LABEL_37;
      }

      if (_LogCategory_Initialize((uint64_t)v34, 0x5Au))
      {
        float v34 = self->_ucat;
        goto LABEL_35;
      }
    }
  }

        RandomBytes(bytes, 0x10uLL);
        CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  (uint64_t)bytes,  16LL,  "AltIRKSalt",  0xAuLL,  (uint64_t)"AltIRKInfo",  10LL,  0x10uLL,  (uint64_t)bytes);
        [MEMORY[0x189603F48] dataWithBytes:bytes length:16];
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
        -[CUPairingIdentity setAltIRK:](v8, "setAltIRK:", v28);

        if (gLogCategory_CUPairingDaemon <= 30
          && (gLogCategory_CUPairingDaemon != -1
           || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPairingDaemon, 0x1Eu)))
        {
          LogPrintF( (uint64_t)&gLogCategory_CUPairingDaemon,  (uint64_t)"-[CUPairingDaemon _copyOrCreateWithOptions:error:]",  0x1Eu,  (uint64_t)"Updating identity for missing IRK: %@\n",  v29,  v30,  v31,  v32,  (char)v8);
        }

    float v34 = 0LL;
    goto LABEL_31;
  }

  char v27 = (CryptoAEADPrivate *)CryptoAEADCreate(v16, 1LL, (uint64_t)__s, 32LL, (int *)&v38);
  v17->_encryptAEAD = v27;
  if (!v27)
  {
    if (v38) {
      float v29 = v38;
    }
    else {
      float v29 = 4294960596LL;
    }
    goto LABEL_44;
  }

  ASPrintF((void **)&v37);
  uint64_t v28 = v37;
  if (!v37)
  {
LABEL_39:
    float v29 = 4294960568LL;
    goto LABEL_44;
  }

  uint64_t v38 = -[CUPairingSession deriveKeyWithSaltPtr:saltLen:infoPtr:infoLen:keyLen:outputKeyPtr:]( self,  "deriveKeyWithSaltPtr:saltLen:infoPtr:infoLen:keyLen:outputKeyPtr:",  "",  0LL,  v37,  strlen(v37),  32LL,  __s,  v12);
  free(v28);
  uint64_t v37 = 0LL;
  float v29 = v38;
  if (v38) {
    goto LABEL_44;
  }
  int v30 = (CryptoAEADPrivate *)CryptoAEADCreate(v16, 2LL, (uint64_t)__s, 32LL, (int *)&v38);
  v17->_decryptAEAD = v30;
  if (!v30)
  {
    if (v38) {
      float v29 = v38;
    }
    else {
      float v29 = 4294960596LL;
    }
    goto LABEL_44;
  }

  pairingStreams = self->_pairingStreams;
  if (!pairingStreams)
  {
    int v32 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
    int v33 = self->_pairingStreams;
    self->_pairingStreams = v32;

    pairingStreams = self->_pairingStreams;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](pairingStreams, "setObject:forKeyedSubscript:", v17, v12);
  int v17 = v17;
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  unint64_t v19 = 0LL;
  float v34 = v17;
LABEL_31:
  int v35 = v34;

  return v35;
}

  if (a3)
  {
    uint64_t v15 = v15;
    float v29 = 0;
    *a3 = v15;
  }

  else
  {
    float v29 = 0;
  }

  CFIndex Bytes = TLV8GetBytes(a2, v14, 0, 1uLL, 1uLL, (char *)__dst, 0LL, 0LL);
  if (Bytes) {
    goto LABEL_33;
  }
  if (LOBYTE(__dst[0]) != 6)
  {
    unint64_t v25 = 0LL;
    dispatch_time_t v26 = 0;
    char v27 = -6707;
    goto LABEL_27;
  }

  UCFNumberRef Int64 = TLV8GetUInt64(a2, v14, 14, (int *)&Bytes, 0LL);
  *(void *)(a1 + 376) = UInt64;
  if (Bytes) {
    goto LABEL_33;
  }
  uint64_t v58 = (void *)a5;
  if (*(void *)(a1 + 296))
  {
    free(*(void **)(a1 + 296));
    *(void *)(a1 + 296) = 0LL;
    UCFNumberRef Int64 = *(void *)(a1 + 376);
  }

  *(void *)(a1 + 304) = 0LL;
  CFIndex Bytes = _PairingFindResumeState(UInt64, (void *)(a1 + 296), (size_t *)(a1 + 304), (_OWORD *)(a1 + 638));
  if (Bytes)
  {
    uint64_t v38 = *(int **)(a1 + 16);
    if (*v38 <= 50)
    {
      if (*v38 == -1)
      {
        uint64_t v38 = *(int **)(a1 + 16);
      }

      LogPrintF( (uint64_t)v38,  (uint64_t)"OSStatus _ResumePairingServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"Pair-resume server M1 for ID %llu failed %#m...doing pair-verify\n",  v34,  v35,  v36,  v37,  *(void *)(a1 + 376));
    }

  if (a3)
  {
    *(void *)a3 = (int)YMD_HMStoSeconds(v11, v15, v23, v18, v19, v20, 719163);
    *(_DWORD *)(a3 + 8) = v21;
  }

  Class result = 0LL;
  if (a4) {
    *a4 = v10;
  }
  return result;
}

LABEL_2:
}
}
}

  id v8 = [v6 address];
  if (!softLinkBTAccessoryManagerReadDeviceVersionInfo( v8,  (int)&v120,  32,  (int)&v119,  128,  (int)v118,  128,  (int)v117,  128LL,  (uint64_t)v116,  128LL,  (uint64_t)v115,  128LL,  (uint64_t)v114,  128LL))
  {
    [NSString stringWithUTF8String:v118];
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setManufacturer:v9];

    [NSString stringWithUTF8String:v117];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 setModelNumber:v10];
  }

  if (*p_btAccessoryManager)
  {
    char v11 = (void *)[objc_alloc(MEMORY[0x189603FB8]) initWithLength:8000];
    v121[0] = 0LL;
    uint64_t v12 = *p_btAccessoryManager;
    uint64_t v13 = v11;
    uint64_t v14 = [v13 mutableBytes];
    uint64_t v15 = [v13 length];
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetAccessoryInfo[0])( v12,  (uint64_t)a4,  v14,  (uint64_t)v121,  v15)
      && v121[0])
    {
      objc_msgSend(v13, "setLength:");
      [MEMORY[0x1896078D8] JSONObjectWithData:v13 options:0 error:0];
      int v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        [v16 objectForKeyedSubscript:@"AACPVersionInfo"];
        int v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)[v17 count] >= 0xB)
        {
          [v17 objectAtIndexedSubscript:10];
          unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0) {
            [v6 setFirmwareVersion:v18];
          }
        }
      }
    }
  }

  ConnectedServices_1961 = softLinkBTDeviceGetConnectedServices_1961(a4, &v112);
  if (ConnectedServices_1961)
  {
    char v24 = ConnectedServices_1961;
    unint64_t v25 = self->_ucat;
    if (v25->var0 > 60) {
      goto LABEL_26;
    }
    if (v25->var0 != -1) {
      goto LABEL_19;
    }
    if (_LogCategory_Initialize((uint64_t)v25, 0x3Cu))
    {
      unint64_t v25 = self->_ucat;
LABEL_19:
      LogPrintF( (uint64_t)v25,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTDeviceGetConnectedServices failed: %#m\n",  v20,  v21,  v22,  v23,  v24 - 16);
    }
  }

  else
  {
    [v6 setConnectedServices:v112];
  }

  objc_autoreleasePoolPop(v12);
}
}

  uint64_t v49 = v3;
  id v6 = MEMORY[0x1895F87A8];
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __51__CUNetInterfaceMonitor__networkInterfacesChanged___block_invoke;
  aBlock[3] = &__block_descriptor_36_e5_v8__0l;
  char v54 = v5;
  id v7 = (void (**)(void))_Block_copy(aBlock);
  uint64_t v52 = 0LL;
  if (!getifaddrs(&v52))
  {
    LOBYTE(v12) = 0;
LABEL_10:
    if (v52) {
      goto LABEL_21;
    }
    goto LABEL_13;
  }

  if (!*__error())
  {
    LOBYTE(v12) = -44;
    goto LABEL_13;
  }

  uint64_t v12 = *__error();
  if (!v12) {
    goto LABEL_10;
  }
LABEL_13:
  unint64_t v18 = self->_ucat;
  if (v18->var0 > 90) {
    goto LABEL_21;
  }
  if (v18->var0 != -1) {
    goto LABEL_15;
  }
  if (_LogCategory_Initialize((uint64_t)v18, 0x5Au))
  {
    unint64_t v18 = self->_ucat;
LABEL_15:
    LogPrintF( (uint64_t)v18,  (uint64_t)"-[CUNetInterfaceMonitor _networkInterfacesChanged:]",  0x5Au,  (uint64_t)"### Get interface list failed: %#m\n",  v8,  v9,  v10,  v11,  v12);
  }

      id v7 = 0LL;
      break;
    default:
      id v7 = 0LL;
      id v6 = -6735;
      break;
  }

  if (a2) {
    *a2 = v6;
  }
  return v7;
}

LABEL_24:
      goto LABEL_2;
    }

    objc_storeStrong((id *)&self->_l2capChannel, a4);
    float v34 = self->_ucat;
    if (v34->var0 <= 30)
    {
      if (v34->var0 == -1)
      {
        float v34 = self->_ucat;
      }

      int v35 = [v32 PSM];
      [v32 peer];
      int v36 = (void *)objc_claimAutoreleasedReturnValue();
      [v36 identifier];
      id v48 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v34,  (uint64_t)"-[CUBLEConnection peripheral:didOpenL2CAPChannel:error:]",  0x1Eu,  (uint64_t)"Connection started PSM 0x%04X, peer %@\n",  v37,  v38,  v39,  v40,  v35);
    }

  ((void (*)(uint64_t))softLinkBTPairingAgentStop[0])((uint64_t)self->_btPairingAgent);
  self->_btPairingAgentStarted = 0;
LABEL_25:
  if (!self->_btPairingAgent) {
    goto LABEL_31;
  }
  uint64_t v15 = self->_ucat;
  if (v15->var0 <= 30)
  {
    if (v15->var0 == -1)
    {
      uint64_t v15 = self->_ucat;
    }

    LogPrintF( (uint64_t)v15,  (uint64_t)"-[CUBluetoothClient _btEnsureStopped]",  0x1Eu,  (uint64_t)"BTPairingAgentDestroy\n",  v2,  v3,  v4,  v5,  v28);
  }

          goto LABEL_25;
        }
      }

      else
      {
      }

      [v16 setName:v23];
      int v33 = self->_ucat;
      if (v33->var0 <= 30)
      {
        if (v33->var0 == -1)
        {
          int v33 = self->_ucat;
        }

        LogPrintF( (uint64_t)v33,  (uint64_t)"-[CUBluetoothClient _btAccessoryNameChanged:]",  0x1Eu,  (uint64_t)"Name changed: %@, %@ -> %@\n",  v29,  v30,  v31,  v32,  (char)v16);
      }
}

      deviceLostHandler = (void (**)(id, void *))v16->_deviceLostHandler;
      if (deviceLostHandler) {
        deviceLostHandler[2](deviceLostHandler, v15);
      }
      goto LABEL_26;
    }

    unint64_t v20 = self->_ucat;
    if (v20->var0 <= 30)
    {
      if (v20->var0 == -1)
      {
        unint64_t v20 = self->_ucat;
      }

      LogPrintF( (uint64_t)v20,  (uint64_t)"-[CUBonjourBrowser _bonjourHandleRemoveDevice:]",  0x1Eu,  (uint64_t)"### Bonjour lost untracked device\n",  v11,  v12,  v13,  v14,  v27);
    }

    goto LABEL_25;
  }

  uint64_t v14 = (nw_interface *)nw_path_copy_interface();
  if (!v14)
  {
    int v33 = self->_ucat;
    if (v33->var0 <= 90)
    {
      if (v33->var0 == -1)
      {
        int v33 = self->_ucat;
      }

      LogPrintF_safe( (uint64_t)v33,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChangedNW:]",  0x5Au,  (uint64_t)"### No primary interface",  v15,  v16,  v17,  v18,  v48);
    }

            char v24 = 0LL;
            goto LABEL_21;
          }

          char v24 = 0LL;
          goto LABEL_36;
        }

        char v24 = 0LL;
LABEL_34:
        unint64_t v18 = 0LL;
        goto LABEL_39;
      }

      char v24 = 0LL;
LABEL_32:
      unint64_t v18 = 0LL;
      goto LABEL_21;
    }

    char v24 = 0LL;
LABEL_27:
    int v17 = 0LL;
    goto LABEL_32;
  }

  char v24 = 0LL;
  int v17 = 0LL;
  unint64_t v18 = 0LL;
  char v11 = -6727;
LABEL_40:
  char v27 = v11;
LABEL_21:
  if (a4) {
    *a4 = v11;
  }
  unint64_t v25 = v24;

  return v25;
}

    (*((void (**)(void))self->_completionHandler + 2))();
    completionHandler = self->_completionHandler;
    self->_completionHandler = 0LL;

    id v8 = v24;
  }
}

        int v33 = [v27 handler];
        float v34 = (void *)v33;
        if (v33) {
          (*(void (**)(uint64_t))(v33 + 16))(v33);
        }

        goto LABEL_27;
      }

      if (a4)
      {
        uint64_t v37 = 4294960584LL;
        goto LABEL_34;
      }
    }

    else if (a4)
    {
      uint64_t v37 = 4294960588LL;
LABEL_34:
      NSErrorWithOSStatusF((const char *)v37);
      int v35 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_28;
    }

    int v35 = 0;
    goto LABEL_28;
  }

  if (a4)
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
    int v35 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    int v35 = 0;
  }

          -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x10000LL);
          goto LABEL_25;
        }

  if (a2) {
    *a2 = v16;
  }

  return v15;
}

          if ((v21 - 48) > 9)
          {
            size_t v23 = 0LL;
          }

          else
          {
            LODWORD(v23) = 0;
            do
            {
              size_t v23 = 10 * (_DWORD)v23 + v21 - 48;
              DWORD2(v346) = v23;
              char v24 = *++v11;
              uint64_t v21 = v24;
            }

            while ((v24 - 48) < 0xA);
          }

            uint64_t v12 = 8LL;
            goto LABEL_25;
          }
        }

        uint64_t v12 = 7LL;
        goto LABEL_25;
      }

      uint64_t v5 = PrintFCore((uint64_t)a1);
    }

    uint64_t v13 = v5;
    goto LABEL_110;
  }

  if (TypeID == CFDataGetTypeID())
  {
    CFIndex Length = CFDataGetLength(v2);
    int v16 = Length >= 0x80 ? 128LL : Length;
    if (v16)
    {
      BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v2);
      SipHash(qword_186B4BE76, BytePtr, v16);
    }
  }

  return PrintFCore((uint64_t)a1);
}

  if (ioctl(*(_DWORD *)(a1 + 24), 0x2000740DuLL))
  {
    if (!*__error()) {
      goto LABEL_47;
    }
    uint64_t v15 = *__error();
    if ((_DWORD)v15) {
      goto LABEL_48;
    }
  }

  int v16 = *(_DWORD *)(a1 + 24);
  int v17 = fcntl(v16, 3, 0LL, v25, v26);
  if (fcntl(v16, 4, v17 | 4u) == -1)
  {
    if (!*__error()) {
      goto LABEL_47;
    }
    uint64_t v15 = *__error();
    if ((_DWORD)v15) {
      goto LABEL_48;
    }
  }

  memset(&v28, 0, sizeof(v28));
  if (tcgetattr(*(_DWORD *)(a1 + 24), &v28))
  {
    if (!*__error()) {
      goto LABEL_47;
    }
    uint64_t v15 = *__error();
    if ((_DWORD)v15) {
      goto LABEL_48;
    }
  }

  unint64_t v18 = vandq_s8(*(int8x16_t *)&v28.c_iflag, (int8x16_t)xmmword_186B49CE0);
  *(int8x16_t *)&v28.c_iflag = v18;
  unint64_t v19 = *(_DWORD *)(a1 + 1160);
  if (v19 == 2)
  {
    unint64_t v20 = v28.c_cflag | 0x38800;
  }

  else
  {
    unint64_t v20 = v28.c_cflag & 0xFFFFFFFFFFFC77FFLL | 0x8800;
    if (v19 == 1) {
      v28.c_iflag = v18.i64[0] | 0xE00;
    }
  }

  v28.c_cflag = v20 & 0xFFFFFFFFFFFF88FFLL | 0x4300;
  v28.c_lflag &= 0xFFFFFFFFFFFFFE75LL;
  *(_WORD *)&v28.c_cc[16] = 0;
  if (tcsetattr(*(_DWORD *)(a1 + 24), 0, &v28))
  {
    if (!*__error()) {
      goto LABEL_47;
    }
    uint64_t v15 = *__error();
    if ((_DWORD)v15) {
      goto LABEL_48;
    }
  }

  char v27 = *(int *)(a1 + 1156);
  if (!ioctl(*(_DWORD *)(a1 + 24), 0x80085402uLL, &v27))
  {
LABEL_44:
    uint64_t v21 = dispatch_source_create(MEMORY[0x1895F8B60], *(int *)(a1 + 24), 0LL, *(dispatch_queue_t *)(a1 + 16));
    *(void *)(a1 + 32) = v21;
    if (v21)
    {
      ++*(_DWORD *)(a1 + 28);
      CFRetain((CFTypeRef)a1);
      dispatch_set_context(*(dispatch_object_t *)(a1 + 32), (void *)a1);
      dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 32),  (dispatch_function_t)_SerialStreamReadHandler);
      dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a1 + 32),  (dispatch_function_t)_SerialStreamCancelHandler);
      *(_BYTE *)(a1 + 40) = 1;
      uint64_t v22 = dispatch_source_create(MEMORY[0x1895F8B90], *(int *)(a1 + 24), 0LL, *(dispatch_queue_t *)(a1 + 16));
      *(void *)(a1 + 80) = v22;
      if (v22)
      {
        ++*(_DWORD *)(a1 + 28);
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 80), (void *)a1);
        dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 80),  (dispatch_function_t)_SerialStreamWriteHandler);
        dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a1 + 80),  (dispatch_function_t)_SerialStreamCancelHandler);
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 88) = 1;
        return v15;
      }
    }

    goto LABEL_47;
  }

  if (*__error())
  {
    uint64_t v15 = *__error();
    if ((_DWORD)v15) {
      goto LABEL_48;
    }
    goto LABEL_44;
  }

id CBConnectPeripheralOptionClientBundleIDFunction()
{
  return (id)constantValCBConnectPeripheralOptionClientBundleID;
}

id initValCBConnectPeripheralOptionClientBundleID()
{
  if (CoreBluetoothLibrary_sOnce_1229 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1231, "CBConnectPeripheralOptionClientBundleID");
  if (v0) {
    objc_storeStrong((id *)&constantValCBConnectPeripheralOptionClientBundleID, *v0);
  }
  getCBConnectPeripheralOptionClientBundleID = (uint64_t (*)())CBConnectPeripheralOptionClientBundleIDFunction;
  return (id)constantValCBConnectPeripheralOptionClientBundleID;
}

id CBConnectPeripheralOptionConnectionUseCaseFunction()
{
  return (id)constantValCBConnectPeripheralOptionConnectionUseCase;
}

id initValCBConnectPeripheralOptionConnectionUseCase()
{
  if (CoreBluetoothLibrary_sOnce_1229 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1231, "CBConnectPeripheralOptionConnectionUseCase");
  if (v0) {
    objc_storeStrong((id *)&constantValCBConnectPeripheralOptionConnectionUseCase, *v0);
  }
  getCBConnectPeripheralOptionConnectionUseCase = (uint64_t (*)())CBConnectPeripheralOptionConnectionUseCaseFunction;
  return (id)constantValCBConnectPeripheralOptionConnectionUseCase;
}

void *__CoreBluetoothLibrary_block_invoke_1232()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_1231 = (uint64_t)result;
  return result;
}

id CBCentralManagerFunction()
{
  return (id)classCBCentralManager;
}

Class initCBCentralManager()
{
  if (CoreBluetoothLibrary_sOnce_1229 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  }
  Class result = objc_getClass("CBCentralManager");
  classCBCentralManager = (uint64_t)result;
  getCBCentralManagerClass = (uint64_t (*)())CBCentralManagerFunction;
  return result;
}

id CBManagerNeedsRestrictedStateOperationFunction()
{
  return (id)constantValCBManagerNeedsRestrictedStateOperation;
}

id initValCBManagerNeedsRestrictedStateOperation()
{
  if (CoreBluetoothLibrary_sOnce_1229 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1229, &__block_literal_global_1230);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1231, "CBManagerNeedsRestrictedStateOperation");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerNeedsRestrictedStateOperation, *v0);
  }
  getCBManagerNeedsRestrictedStateOperation = (uint64_t (*)())CBManagerNeedsRestrictedStateOperationFunction;
  return (id)constantValCBManagerNeedsRestrictedStateOperation;
}

void sub_186A6A234(_Unwind_Exception *a1)
{
}

LABEL_54:
      return;
    }

    -[CUBLEScanner _scanParameters](v21, "_scanParameters");
    uint64_t v39 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    uint64_t v40 = v21->_ucat;
    if (v40->var0 <= 30)
    {
      if (v40->var0 == -1)
      {
        uint64_t v40 = v21->_ucat;
      }

      -[CUBLEScanner _scanParametersSummary:](v21, "_scanParametersSummary:", v39);
      char v41 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)v40,  (uint64_t)"-[CUBLEScanner _update]",  0x1Eu,  (uint64_t)"Scanner start: %@\n",  v42,  v43,  v44,  v45,  (char)v41);
    }

  self->_wifiAutoJoinDisabled = 0;
  wifiNetworkDisabled = self->_wifiNetworkDisabled;
  if (wifiNetworkDisabled)
  {
    CFRelease(wifiNetworkDisabled);
    self->_wifiNetworkDisabled = 0LL;
  }

  self->_wifiManagerSetup = 0;
  if (self->_wifiManager)
  {
    WiFiManagerClientRegisterDeviceAttachmentCallback();
    WiFiManagerClientRegisterServerRestartCallback();
    CFRunLoopGetMain();
    WiFiManagerClientUnscheduleFromRunLoop();
    CFRelease(self->_wifiManager);
    self->_wifiManager = 0LL;
    dispatch_time_t v26 = self->_ucat;
    if (v26->var0 <= 30)
    {
      if (v26->var0 != -1)
      {
LABEL_59:
        LogPrintF( (uint64_t)v26,  (uint64_t)"-[CUWiFiManager _wifiEnsureStopped]",  0x1Eu,  (uint64_t)"WiFiManagerClient stopped\n",  v2,  v3,  v4,  v5,  v31);
        goto LABEL_61;
      }

      if (_LogCategory_Initialize((uint64_t)v26, 0x1Eu))
      {
        dispatch_time_t v26 = self->_ucat;
        goto LABEL_59;
      }
    }
  }

id CBAdvertisementDataDeviceAddressFunction()
{
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id initValCBAdvertisementDataDeviceAddress()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBAdvertisementDataDeviceAddress");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataDeviceAddress, *v0);
  }
  getCBAdvertisementDataDeviceAddress[0] = (uint64_t (*)())CBAdvertisementDataDeviceAddressFunction;
  return (id)constantValCBAdvertisementDataDeviceAddress;
}

id CBAdvertisementDataManufacturerDataKeyFunction()
{
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

id initValCBAdvertisementDataManufacturerDataKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBAdvertisementDataManufacturerDataKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBAdvertisementDataManufacturerDataKey, *v0);
  }
  getCBAdvertisementDataManufacturerDataKey = (uint64_t (*)())CBAdvertisementDataManufacturerDataKeyFunction;
  return (id)constantValCBAdvertisementDataManufacturerDataKey;
}

void *__CoreBluetoothLibrary_block_invoke_1399()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_1398 = (uint64_t)result;
  return result;
}

id CBCentralManagerScanOptionMatchingRuleTypeKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleTypeKey;
}

id initValCBCentralManagerScanOptionMatchingRuleTypeKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionMatchingRuleTypeKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleTypeKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleTypeKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleTypeKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleTypeKey;
}

id CBCentralManagerScanOptionMatchingRuleRSSIKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleRSSIKey;
}

id initValCBCentralManagerScanOptionMatchingRuleRSSIKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionMatchingRuleRSSIKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleRSSIKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleRSSIKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleRSSIKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleRSSIKey;
}

id CBCentralManagerScanOptionMatchingRulePayloadKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRulePayloadKey;
}

id initValCBCentralManagerScanOptionMatchingRulePayloadKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionMatchingRulePayloadKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRulePayloadKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRulePayloadKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRulePayloadKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRulePayloadKey;
}

id CBCentralManagerScanOptionMatchingRuleMaskKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleMaskKey;
}

id initValCBCentralManagerScanOptionMatchingRuleMaskKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionMatchingRuleMaskKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleMaskKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleMaskKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleMaskKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleMaskKey;
}

id CBCentralManagerScanOptionScanIntervalFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id initValCBCentralManagerScanOptionScanInterval()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionScanInterval");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanInterval, *v0);
  }
  getCBCentralManagerScanOptionScanInterval[0] = (uint64_t (*)())CBCentralManagerScanOptionScanIntervalFunction;
  return (id)constantValCBCentralManagerScanOptionScanInterval;
}

id CBCentralManagerScanOptionScanWindowFunction()
{
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id initValCBCentralManagerScanOptionScanWindow()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionScanWindow");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionScanWindow, *v0);
  }
  getCBCentralManagerScanOptionScanWindow[0] = (uint64_t (*)())CBCentralManagerScanOptionScanWindowFunction;
  return (id)constantValCBCentralManagerScanOptionScanWindow;
}

id CBCentralManagerScanOptionMatchingRuleKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionMatchingRuleKey;
}

id initValCBCentralManagerScanOptionMatchingRuleKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionMatchingRuleKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionMatchingRuleKey, *v0);
  }
  getCBCentralManagerScanOptionMatchingRuleKey[0] = (uint64_t (*)())CBCentralManagerScanOptionMatchingRuleKeyFunction;
  return (id)constantValCBCentralManagerScanOptionMatchingRuleKey;
}

id CBCentralManagerScanOptionAllowDuplicatesKeyFunction()
{
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id initValCBCentralManagerScanOptionAllowDuplicatesKey()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionAllowDuplicatesKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionAllowDuplicatesKey, *v0);
  }
  getCBCentralManagerScanOptionAllowDuplicatesKey[0] = (uint64_t (*)())CBCentralManagerScanOptionAllowDuplicatesKeyFunction;
  return (id)constantValCBCentralManagerScanOptionAllowDuplicatesKey;
}

id CBCentralManagerScanOptionActiveFunction()
{
  return (id)constantValCBCentralManagerScanOptionActive;
}

id initValCBCentralManagerScanOptionActive()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBCentralManagerScanOptionActive");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerScanOptionActive, *v0);
  }
  getCBCentralManagerScanOptionActive[0] = (uint64_t (*)())CBCentralManagerScanOptionActiveFunction;
  return (id)constantValCBCentralManagerScanOptionActive;
}

id CBManagerIsPrivilegedDaemonKeyFunction_1417()
{
  return (id)constantValCBManagerIsPrivilegedDaemonKey_1419;
}

id initValCBManagerIsPrivilegedDaemonKey_1418()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBManagerIsPrivilegedDaemonKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerIsPrivilegedDaemonKey_1419, *v0);
  }
  getCBManagerIsPrivilegedDaemonKey_1416[0] = (uint64_t (*)())CBManagerIsPrivilegedDaemonKeyFunction_1417;
  return (id)constantValCBManagerIsPrivilegedDaemonKey_1419;
}

id CBCentralManagerFunction_1421()
{
  return (id)classCBCentralManager_1434;
}

Class initCBCentralManager_1422()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  Class result = objc_getClass("CBCentralManager");
  classCBCentralManager_1434 = (uint64_t)result;
  getCBCentralManagerClass_1420[0] = (uint64_t (*)())CBCentralManagerFunction_1421;
  return result;
}

id CBManagerNeedsRestrictedStateOperationFunction_1424()
{
  return (id)constantValCBManagerNeedsRestrictedStateOperation_1433;
}

id initValCBManagerNeedsRestrictedStateOperation_1425()
{
  if (CoreBluetoothLibrary_sOnce_1396 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1396, &__block_literal_global_1397);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_1398, "CBManagerNeedsRestrictedStateOperation");
  if (v0) {
    objc_storeStrong((id *)&constantValCBManagerNeedsRestrictedStateOperation_1433, *v0);
  }
  getCBManagerNeedsRestrictedStateOperation_1423[0] = (uint64_t (*)())CBManagerNeedsRestrictedStateOperationFunction_1424;
  return (id)constantValCBManagerNeedsRestrictedStateOperation_1433;
}

id CBPeripheralManagerFunction_1579()
{
  return (id)classCBPeripheralManager_1586;
}

Class initCBPeripheralManager_1580()
{
  if (CoreBluetoothLibrary_sOnce_1583 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_1583, &__block_literal_global_1584);
  }
  Class result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager_1586 = (uint64_t)result;
  getCBPeripheralManagerClass_1578 = (uint64_t (*)())CBPeripheralManagerFunction_1579;
  return result;
}

void *__CoreBluetoothLibrary_block_invoke_1587()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_1589 = (uint64_t)result;
  return result;
}

void _btServiceEventHandler(uint64_t a1, char a2, int a3, int a4, int a5, void *a6)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v12 = (void *)MEMORY[0x186E432B4]();
  id v13 = a6;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v13 + 23));
  if (!*((_BYTE *)v13 + 67)) {
    goto LABEL_32;
  }
  if (a3)
  {
    uint64_t v14 = (int *)*((void *)v13 + 19);
    if (*v14 <= 30)
    {
      if (*v14 != -1)
      {
LABEL_5:
        BTServiceSpecificEventToString(a4);
        LOBYTE(v40) = a2;
        unint64_t v19 = "BTService event type: %#{flags}, %d, %d %s, %#m\n";
        unint64_t v20 = v14;
LABEL_6:
        LogPrintF( (uint64_t)v20,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEven t, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)v19,  v15,  v16,  v17,  v18,  (char)v40);
        goto LABEL_32;
      }

      if (_LogCategory_Initialize(*((void *)v13 + 19), 0x1Eu))
      {
        uint64_t v14 = (int *)*((void *)v13 + 19);
        goto LABEL_5;
      }
    }

    goto LABEL_32;
  }

  if (a5) {
    uint64_t v21 = (const char *)(a5 + 310000);
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v22 = (int *)*((void *)v13 + 19);
  if (*v22 <= 30)
  {
    if (*v22 != -1)
    {
LABEL_13:
      BTServiceSpecificEventToString(a4);
      LogPrintF( (uint64_t)v22,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTService connect: %#{flags}, %d %s, %#m\n",  v23,  v24,  v25,  v26,  a2);
      goto LABEL_17;
    }

    if (_LogCategory_Initialize(*((void *)v13 + 19), 0x1Eu))
    {
      uint64_t v22 = (int *)*((void *)v13 + 19);
      goto LABEL_13;
    }
  }

uint64_t initBTSessionDetachWithQueue(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTSessionDetachWithQueue[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue[0])(a1);
}

void *__MobileBluetoothLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
  MobileBluetoothLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initBTServiceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTServiceRemoveCallbacks[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTServiceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTServiceRemoveCallbacks[0])(a1, a2);
}

const char *BTServiceSpecificEventToString(int a1)
{
  if (a1 > 500)
  {
    if (a1 <= 600)
    {
      switch(a1)
      {
        case 501:
          Class result = "BT_SERVICE_REMOTE_PLAY";
          break;
        case 502:
          Class result = "BT_SERVICE_REMOTE_PAUSE";
          break;
        case 503:
          Class result = "BT_SERVICE_REMOTE_STOP";
          break;
        case 504:
          Class result = "BT_SERVICE_REMOTE_PREVIOUS";
          break;
        case 505:
          Class result = "BT_SERVICE_REMOTE_NEXT";
          break;
        case 506:
          Class result = "BT_SERVICE_REMOTE_VOL_UP";
          break;
        case 507:
          Class result = "BT_SERVICE_REMOTE_VOL_DOWN";
          break;
        case 508:
          Class result = "BT_SERVICE_REMOTE_MUTE";
          break;
        case 509:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
          break;
        case 510:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
          break;
        case 511:
          Class result = "BT_SERVICE_REMOTE_REWIND_START";
          break;
        case 512:
          Class result = "BT_SERVICE_REMOTE_REWIND_STOP";
          break;
        default:
          return "?";
      }

      return result;
    }

    if (a1 <= 702)
    {
      switch(a1)
      {
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
        case 701:
          return "BT_SERVICE_LMP_NAME_CHANGED";
        case 702:
          return "BT_SERVICE_HIGH_POWER_ENABLED";
      }
    }

    else if (a1 > 801)
    {
      if (a1 == 802) {
        return "BT_SERVICE_LEA_AUDIO_DISCONNECTED";
      }
      if (a1 == 901) {
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
      }
    }

    else
    {
      if (a1 == 703) {
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      }
      if (a1 == 801) {
        return "BT_SERVICE_LEA_AUDIO_CONNECTED";
      }
    }

    return "?";
  }

  if (a1 <= 100)
  {
    if (a1 <= 1)
    {
      if (!a1) {
        return "BT_SERVICE_SDP";
      }
      if (a1 == 1) {
        return "BT_SERVICE_CONNECTION_ATTEMPT";
      }
    }

    else
    {
      switch(a1)
      {
        case 2:
          return "BT_SERVICE_DISCONNECTION_ATTEMPT";
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
      }
    }

    return "?";
  }

  if (a1 > 201)
  {
    if (a1 > 301)
    {
      if (a1 == 302) {
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      }
      if (a1 == 303) {
        return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
      }
    }

    else
    {
      if (a1 == 202) {
        return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
      }
      if (a1 == 301) {
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      }
    }

    return "?";
  }

  switch(a1)
  {
    case 'e':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      break;
    case 'f':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
      break;
    case 'g':
      Class result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
      break;
    case 'h':
      Class result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
      break;
    default:
      if (a1 != 201) {
        return "?";
      }
      Class result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
      break;
  }

  return result;
}

uint64_t initBTDeviceGetConnectedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTDeviceGetint ConnectedServices = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTDeviceGetConnectedServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetConnectedServices)(a1, a2);
}

uint64_t initBTDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTDeviceGetAddressString[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString[0])(a1, a2, a3);
}

uint64_t initBTDeviceFromAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTDeviceFromAddress[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTDeviceFromAddress");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress[0])(a1, a2, a3);
}

uint64_t initBTDeviceFromIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTDeviceFromIdentifier[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTDeviceFromIdentifier");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromIdentifier[0])(a1, a2, a3);
}

uint64_t initBTDeviceConnectServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTDeviceConnectServices[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTDeviceConnectServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceConnectServices[0])(a1, a2);
}

uint64_t initBTDeviceConnectServicesWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTDeviceConnectServicesWithParameters[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTDeviceConnectServicesWithParameters");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceConnectServicesWithParameters[0])( a1,  a2,  a3,  a4);
}

uint64_t initBTServiceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTServiceAddCallbacks[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTServiceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTServiceAddCallbacks[0])(a1, a2, a3);
}

void _btSessionEventCallback(uint64_t a1, int a2, int a3, void *a4)
{
  id v8 = (void *)MEMORY[0x186E432B4]();
  id v9 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v9 + 23));
  if (a3) {
    char v14 = a3 - 16;
  }
  else {
    char v14 = 0;
  }
  switch(a2)
  {
    case 2:
      *((void *)v9 + 7) = 0LL;
      *((_BYTE *)v9 + 64) = 0;
      [v9 _btEnsureStopped];
      CFRelease(v9);
      uint64_t v16 = (void *)*MEMORY[0x189607670];
      NSPrintF();
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = v17;
      goto LABEL_19;
    case 1:
      *((void *)v9 + 7) = 0LL;
      *((_BYTE *)v9 + 64) = 0;
      [v9 _btEnsureStopped];
      CFRelease(v9);
      if (*((_BYTE *)v9 + 68))
      {
        uint64_t v22 = (int *)*((void *)v9 + 19);
        if (*v22 <= 30)
        {
          if (*v22 == -1)
          {
            uint64_t v22 = (int *)*((void *)v9 + 19);
          }

          LogPrintF( (uint64_t)v22,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTSession detached: %#m\n",  v18,  v19,  v20,  v21,  v14);
        }

uint64_t initBTSessionAttachWithQueue(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = MobileBluetoothLibrary_sOnce;
  id v8 = a4;
  if (v7 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce, &__block_literal_global_1785);
  }
  softLinkBTSessionAttachWithQueue[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib,  "BTSessionAttachWithQueue");
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue[0])(a1, a2, a3, v8);

  return v9;
}

LABEL_93:
        uint64_t v56 = 0LL;
        goto LABEL_94;
      }

      uint64_t v27 = self->_ucat;
    }

    LogPrintF( (uint64_t)v27,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"BTServiceAddCallbacks\n",  v2,  v3,  v4,  v5,  v68);
    goto LABEL_35;
  }

  __int128 v107 = 0;
  if (!((unsigned int (*)(uint64_t, uint64_t))softLinkBTDeviceGetSupportedServices[0])( (uint64_t)a4,  (uint64_t)&v107)) {
    [v6 setSupportsAACPService:(v107 >> 19) & 1];
  }
  else {
    LODWORD(v91) = v42;
  }
  __int128 v113 = 0;
  ((void (*)(uint64_t, uint64_t))softLinkBTDeviceIsTemporaryPaired[0])((uint64_t)a4, (uint64_t)&v113);
  if (v113) {
    uint64_t v91 = v91 | 0x10;
  }
  else {
    uint64_t v91 = v91;
  }
  id v92 = *p_btAccessoryManager;
  if (*p_btAccessoryManager)
  {
    __int128 v113 = 0;
    id v93 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])( v92,  (uint64_t)a4,  32LL,  (uint64_t)&v113);
    if (v93)
    {
      int v98 = v93;
      char v99 = self->_ucat;
      if (v99->var0 > 60) {
        goto LABEL_109;
      }
      if (v99->var0 != -1) {
        goto LABEL_105;
      }
      if (_LogCategory_Initialize((uint64_t)v99, 0x3Cu))
      {
        char v99 = self->_ucat;
LABEL_105:
        LogPrintF( (uint64_t)v99,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetFeatureCapability tipi failed: %#m\n",  v94,  v95,  v96,  v97,  v98 - 16);
      }
    }

    else if (v113)
    {
      uint64_t v91 = v91 | 0x20;
    }
  }

LABEL_39:
  if (self->_btLocalDeviceAddrNeeded)
  {
    btLocalDevice = self->_btLocalDevice;
    if (btLocalDevice)
    {
      if (!self->_btLocalDeviceAddr)
      {
        LOBYTE(v70) = 0;
        char v32 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetAddressString[0])( (uint64_t)btLocalDevice,  (uint64_t)&v70,  32LL);
        if (v32)
        {
          int v51 = (v32 + 310000);
          goto LABEL_79;
        }

        int v33 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceAddressFromString[0])( (uint64_t)&v70,  (uint64_t)v69);
        if (v33)
        {
          int v51 = (v33 + 310000);
          goto LABEL_79;
        }

        float v34 = (NSData *)[objc_alloc(MEMORY[0x189603F48]) initWithBytes:v69 length:6];
        btLocalDeviceAddr = self->_btLocalDeviceAddr;
        self->_btLocalDeviceAddr = v34;

        int v36 = self->_ucat;
        if (v36->var0 <= 30)
        {
          if (v36->var0 == -1)
          {
            int v36 = self->_ucat;
          }

          LogPrintF( (uint64_t)v36,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"Bluetooth local address: %.6a\n",  v2,  v3,  v4,  v5,  (char)v69);
        }
      }
    }
  }

    [v18 _handleDeviceConnected:a1];
    goto LABEL_2;
  }

  float v34 = v18[28];
  if (*v34 <= 60)
  {
    if (*v34 == -1)
    {
      float v34 = v18[28];
    }

    LogPrintF( (uint64_t)v34,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, B TResult, void * _Nonnull)",  0x3Cu,  (uint64_t)"### BTService connect failed: %#m\n",  v14,  v15,  v16,  v17,  a5 - 16);
  }

  if (v4) {
    ((void (**)(id, NSString *))v4)[2](v4, v13);
  }
LABEL_72:
}

  if (v62 < 0) {
    -[CUPairingDaemon _removeDups:](v53, "_removeDups:", v63);
  }
  uint64_t v49 = v63;
  int v69 = 0;
  uint64_t v63 = v49;
  uint64_t v11 = v54;
  id v8 = v55;
LABEL_60:
  if (v8) {
    void *v8 = v69;
  }

  return v49;
}

  uint64_t v29 = objc_alloc_init(MEMORY[0x189603FC8]);
  CULocalizedString(v18);
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
  getPBSMediaRemoteServiceDialogOptionMessageKey[0]();
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
  [v29 setObject:v30 forKeyedSubscript:v31];

  getPBSMediaRemoteServiceDialogOptionPINKey[0]();
  char v32 = (void *)objc_claimAutoreleasedReturnValue();
  [v29 setObject:v10 forKeyedSubscript:v32];

  [MEMORY[0x189607968] numberWithLongLong:v26];
  int v33 = (void *)objc_claimAutoreleasedReturnValue();
  getPBSMediaRemoteServiceDialogOptionTimeoutKey[0]();
  float v34 = (void *)objc_claimAutoreleasedReturnValue();
  [v29 setObject:v33 forKeyedSubscript:v34];

  CULocalizedString(v19);
  char v35 = (void *)objc_claimAutoreleasedReturnValue();
  getPBSMediaRemoteServiceDialogOptionTitleKey[0]();
  int v36 = (void *)objc_claimAutoreleasedReturnValue();
  [v29 setObject:v35 forKeyedSubscript:v36];

  char v37 = self->_pbsMediaService;
  v49[0] = MEMORY[0x1895F87A8];
  v49[1] = 3221225472LL;
  v49[2] = __55__CUPairingSession__showPINBuiltInUI_useVisualPairing___block_invoke;
  v49[3] = &unk_189F31888;
  v49[4] = self;
  -[PBSMediaRemoteServiceInterface showPinDialogWithOptions:completion:]( v37,  "showPinDialogWithOptions:completion:",  v29,  v49);
  int v38 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v39 = self->_pinDialogToken;
  self->_pinDialogToken = v38;

  if (!self->_pinDialogToken)
  {
    uint64_t v46 = self->_ucat;
    if (v46->var0 <= 90)
    {
      if (v46->var0 == -1)
      {
        uint64_t v46 = self->_ucat;
      }

      LogPrintF( (uint64_t)v46,  (uint64_t)"-[CUPairingSession _showPINBuiltInUI:useVisualPairing:]",  0x5Au,  (uint64_t)"### Show PIN dialog failed\n",  v40,  v41,  v42,  v43,  v48);
    }

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 512LL);
        if ((v12 & 0x4000) == 0)
        {
LABEL_30:
          if ((v12 & 0x10000) == 0)
          {
LABEL_32:
            objc_storeStrong((id *)&self->_trafficPeersCurrent, self->_trafficPeers);
            trafficPeers = self->_trafficPeers;
            self->_trafficPeers = 0LL;

            self->_trafficPeerChanged = 0;
            -[CUWiFiManager _updateTrafficPeerStatusMonitor](self, "_updateTrafficPeerStatusMonitor");
            return;
          }

    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
    self->_wifiCriticalSetup = 1;
    goto LABEL_40;
  }

  if (!self->_wifiCriticalSetup) {
    goto LABEL_40;
  }
  uint64_t v16 = self->_ucat;
  if (v16->var0 > 30) {
    goto LABEL_35;
  }
  if (v16->var0 == -1)
  {
    uint64_t v16 = self->_ucat;
  }

  LogPrintF( (uint64_t)v16,  (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]",  0x1Eu,  (uint64_t)"WiFiDeviceClient critical monitor stopped\n",  v2,  v3,  v4,  v5,  v37);
LABEL_35:
  if (self->_wifiDevice) {
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
  }
  *(_WORD *)&self->_wifiCriticalSetup = 0;
LABEL_40:
  if (self->_wifiManager)
  {
    if (!self->_wifiManagerSetup)
    {
      CFRunLoopGetMain();
      WiFiManagerClientScheduleWithRunLoop();
      WiFiManagerClientRegisterDeviceAttachmentCallback();
      WiFiManagerClientRegisterServerRestartCallback();
      self->_wifiManagerSetup = 1;
      uint64_t v22 = self->_ucat;
      if (v22->var0 <= 30)
      {
        if (v22->var0 == -1)
        {
          uint64_t v22 = self->_ucat;
        }

        LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUWiFiManager _wifiEnsureStarted]",  0x1Eu,  (uint64_t)"WiFiManagerClient started\n",  v18,  v19,  v20,  v21,  v37);
      }
    }
  }

  if (self->_wifiDevice) {
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
  }
  *(_WORD *)&self->_wifiCriticalSetup = 0;
LABEL_42:
  if (!self->_wifiStateMonitorSetup) {
    goto LABEL_47;
  }
  WiFiDeviceClientRegisterAutoJoinNotificationCallback();
  WiFiDeviceClientRegisterHostApStateChangedCallback();
  WiFiDeviceClientRegisterPowerCallback();
  self->_wifiStateMonitorSetup = 0;
  self->_wifiFlags = 0;
  self->_wifiState = 0;
  uint64_t v22 = self->_ucat;
  if (v22->var0 > 30) {
    goto LABEL_47;
  }
  if (v22->var0 == -1)
  {
    uint64_t v22 = self->_ucat;
  }

  LogPrintF( (uint64_t)v22,  (uint64_t)"-[CUWiFiManager _wifiEnsureStopped]",  0x1Eu,  (uint64_t)"WiFi state monitor stopped\n",  v2,  v3,  v4,  v5,  v31);
LABEL_47:
  if (self->_wifiDeviceSetup)
  {
    WiFiDeviceClientRegisterRemovalCallback();
    wifiDevice = self->_wifiDevice;
    if (wifiDevice) {
      CFRelease(wifiDevice);
    }
    self->_wifiDevice = 0LL;
    self->_wifiDeviceSetup = 0;
    uint64_t v24 = self->_ucat;
    if (v24->var0 <= 30)
    {
      if (v24->var0 != -1)
      {
LABEL_52:
        LogPrintF( (uint64_t)v24,  (uint64_t)"-[CUWiFiManager _wifiEnsureStopped]",  0x1Eu,  (uint64_t)"WiFiDeviceClient stopped\n",  v2,  v3,  v4,  v5,  v31);
        goto LABEL_54;
      }

      if (_LogCategory_Initialize((uint64_t)v24, 0x1Eu))
      {
        uint64_t v24 = self->_ucat;
        goto LABEL_52;
      }
    }
  }

  devices = self->_devices;
  if (!devices)
  {
    uint64_t v40 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x189603FC8]);
    int v41 = self->_devices;
    self->_devices = v40;

    devices = self->_devices;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](devices, "setObject:forKeyedSubscript:", v11, v46);
  deviceFoundHandler = (void (**)(id, CUWiFiDevice *))self->_deviceFoundHandler;
  if (deviceFoundHandler) {
    deviceFoundHandler[2](deviceFoundHandler, v11);
  }
LABEL_47:
}

    id v6 = *v5;
    if (!*v5)
    {
      if ((v9 & 0x80000000) == 0) {
        return 0LL;
      }
      return 4294960543LL;
    }
  }

  while (1)
  {
    uint64_t v9 = socket(v17->ai_family, v17->ai_socktype, v17->ai_protocol);
    if ((v9 & 0x80000000) == 0) {
      break;
    }
LABEL_37:
    uint64_t v17 = v17->ai_next;
    if (!v17)
    {
      freeaddrinfo(v21);
      goto LABEL_39;
    }
  }

  uint64_t v18 = _NetSocket_Connect(a1, v9, v17->ai_addr, a4);
  if (!v18)
  {
    freeaddrinfo(v21);
    return 0LL;
  }

  uint64_t v19 = v18;
  close(v9);
  if (v19 != -6723)
  {
    uint64_t v9 = -1;
    goto LABEL_37;
  }

  freeaddrinfo(v21);
  return 4294960573LL;
}

    uint64_t v22 = PrintFCore(a1);
    if (v22 >= 0) {
      uint64_t v23 = v9;
    }
    else {
      uint64_t v23 = 0;
    }
    return (v23 + v22);
  }

  if (a6) {
    a6(a7);
  }
  if ((_DWORD)v22
    && gLogCategory_ScreenStream <= 90
    && (gLogCategory_ScreenStream != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_ScreenStream, 0x5Au)))
  {
    LogPrintF( (uint64_t)&gLogCategory_ScreenStream,  (uint64_t)"OSStatus ScreenStreamProcessData(ScreenStreamRef, const uint8_t *, size_t, uint64_t, CFDictionaryRef, Scr eenStreamCompletion_f, void *)",  0x5Au,  (uint64_t)"### Screen stream process data failed: %#m\n",  a5,  (uint64_t)a6,  a7,  a8,  v22);
  }

  return v22;
}

LABEL_50:
  if (!self->_btPairingAgentNeeded || self->_btPairingAgent || !self->_btSession)
  {
LABEL_63:
    if (!self->_btAccessoryEventsNeeded) {
      goto LABEL_89;
    }
    uint64_t v40 = self->_btSession;
    if (!v40) {
      goto LABEL_89;
    }
    if (self->_btAccessoryManager) {
      goto LABEL_88;
    }
    int v41 = ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerGetDefault[0])( (uint64_t)v40,  (uint64_t)&self->_btAccessoryManager);
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = self->_ucat;
      if (v43->var0 <= 60)
      {
        if (v43->var0 != -1)
        {
LABEL_69:
          LogPrintF( (uint64_t)v43,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetDefault failed: %#m\n",  v2,  v3,  v4,  v5,  v42 - 16);
          goto LABEL_87;
        }

        if (_LogCategory_Initialize((uint64_t)v43, 0x3Cu))
        {
          uint64_t v43 = self->_ucat;
          goto LABEL_69;
        }
      }
    }

  btPeripheralManager = self->_btPeripheralManager;
  if (self->_bluetoothAddressChangedHandler)
  {
    -[CBPeripheralManager removeObserver:forKeyPath:context:]( btPeripheralManager,  "removeObserver:forKeyPath:context:",  self,  @"advertisingAddress",  0LL);
    btPeripheralManager = self->_btPeripheralManager;
  }

  -[CBPeripheralManager setDelegate:](btPeripheralManager, "setDelegate:", 0LL);
  uint64_t v25 = self->_btPeripheralManager;
  self->_btPeripheralManager = 0LL;

LABEL_53:
  btPairedDevices = self->_btPairedDevices;
  self->_btPairedDevices = 0LL;

  self->_btPairedDevicesInitialized = 0;
  uint64_t v27 = self->_btConnectedDevices;
  self->_btConnectedDevices = 0LL;
}

  selfAccessoryMediaSystemName = self->_selfAccessoryMediaSystemName;
  self->_selfAccessoryMediaSystemName = 0LL;

  int v41 = 1;
LABEL_51:

  int v64 = self->_selfAccessoryMediaSystemRole;
  if (!v64) {
    goto LABEL_61;
  }
  uint64_t v65 = self->_ucat;
  if (v65->var0 <= 30)
  {
    if (v65->var0 != -1)
    {
LABEL_54:
      uint64_t v66 = -[HMMediaSystemRole type](v64, "type");
      if (v66 > 2) {
        id v71 = "?";
      }
      else {
        id v71 = off_189F31268[v66];
      }
      LogPrintF( (uint64_t)v65,  (uint64_t)"-[CUHomeKitManager _clearHomeKitState]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystemRole updated: %s, HK clear",  v67,  v68,  v69,  v70,  (char)v71);
      goto LABEL_60;
    }

    if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu))
    {
      uint64_t v65 = self->_ucat;
      goto LABEL_54;
    }
  }

      uint64_t v28 = 4294960564LL;
      goto LABEL_51;
  }

  if (gLogCategory_CUSystemMonitor <= 30
    && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _systemConfigUpdateNotifications]",  0x1Eu,  (uint64_t)"SystemConfig watch: Keys %##@, Patterns %##@\n",  v37,  v38,  v39,  v40,  (char)v33);
  }

  if (SCDynamicStoreSetNotificationKeys(v16, (CFArrayRef)v33, (CFArrayRef)v6))
  {
    objc_storeStrong((id *)&self->_scNotificationKeys, v11);
    objc_storeStrong((id *)&self->_scNotificationPatterns, v6);
    goto LABEL_57;
  }

  if (gLogCategory_CUSystemMonitor <= 90
    && (gLogCategory_CUSystemMonitor != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_CUSystemMonitor, 0x5Au)))
  {
    uint64_t v47 = SCError();
    LogPrintF( (uint64_t)&gLogCategory_CUSystemMonitor,  (uint64_t)"-[CUSystemMonitorImp _systemConfigUpdateNotifications]",  0x5Au,  (uint64_t)"### SCDynamicStoreSetNotificationKeys failed: %#m\n",  v48,  v49,  v50,  v51,  v47);
  }

  return v11;
}

  getAWDLTrafficRegistrationServiceRemoteScreen[0]();
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v45 = v40;
  uint64_t v46 = v44;
  if (v46 == v45)
  {

    goto LABEL_55;
  }

  uint64_t v47 = v46;
  if ((v59 == 0LL) != (v46 != 0LL))
  {
    id v48 = [v45 isEqual:v46];

    if (!v48) {
      goto LABEL_57;
    }
LABEL_55:
    uint64_t v13 = 0x10000;
    goto LABEL_58;
  }

LABEL_57:
  uint64_t v13 = 0;
LABEL_58:
  trafficFlagsUnavailable = self->_trafficFlagsUnavailable;
  uint64_t v50 = trafficFlagsUnavailable | v13;
  int v51 = trafficFlagsUnavailable & ~v13;
  if (!v6) {
    int v51 = v50;
  }
  self->_trafficFlagsUnavailable = v51;
  ucCFAbsoluteTime at = self->_ucat;
  if (ucat->var0 <= 30)
  {
    if (ucat->var0 != -1)
    {
LABEL_62:
      NSPrintF();
      uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue();
      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUWiFiManager _updateTrafficPeerStatusUpdated:isAvailable:error:]",  0x1Eu,  (uint64_t)"P2P state monitor update: service=%@, isAvailable=%s, error=%@, trafficFlags=0x%X",  v53,  v54,  v55,  v56,  (char)v59);

      goto LABEL_64;
    }

    if (_LogCategory_Initialize((uint64_t)self->_ucat, 0x1Eu))
    {
      ucCFAbsoluteTime at = self->_ucat;
      goto LABEL_62;
    }
  }

    v9 -= v13;
    if (!v9) {
      break;
    }
    v7 += v13;
    uint64_t v11 = v10;
    uint64_t v10 = v38;
  }

  if (v34 < 1)
  {
    uint64_t v26 = (uint64_t (**)(const char *, uint64_t, void))a1;
LABEL_59:
    if (a5 > a6)
    {
      uint64_t v20 = (*v26)("\n", 1LL, v26);
      if ((v20 & 0x80000000) != 0) {
        return v20;
      }
      uint64_t v19 = PrintFCore((uint64_t)v26);
      if ((v19 & 0x80000000) != 0) {
        return v19;
      }
      uint64_t v20 = PrintFCore((uint64_t)v26);
      if ((v20 & 0x80000000) != 0) {
        return v20;
      }
      id v8 = (v8 + v19 + v20 + 1);
    }

    if (a7)
    {
      uint64_t v27 = (*v26)("\n", 1LL, v26);
      if (v27 >= 0) {
        return (v8 + 1);
      }
      else {
        return v27;
      }
    }
  }

  else
  {
    uint64_t v26 = (uint64_t (**)(const char *, uint64_t, void))a1;
    uint64_t v20 = ((uint64_t (*)(const char *, uint64_t, uint64_t (**)(const char *, uint64_t)))*a1)( "\n",  1LL,  a1);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    uint64_t v19 = PrintFCore((uint64_t)a1);
    if ((v19 & 0x80000000) == 0)
    {
      uint64_t v20 = PrintFCore((uint64_t)a1);
      if ((v20 & 0x80000000) == 0)
      {
        id v8 = (v8 + v19 + v20 + 1);
        goto LABEL_59;
      }

      return v20;
    }

    return v19;
  }

  return v8;
}

LABEL_87:
    if (!self->_btAccessoryManager) {
      goto LABEL_89;
    }
LABEL_88:
    if (self->_btAccessoryEventsRegistered) {
      goto LABEL_89;
    }
    uint64_t v58 = self->_ucat;
    if (v58->var0 <= 30)
    {
      if (v58->var0 != -1)
      {
LABEL_100:
        LogPrintF( (uint64_t)v58,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x1Eu,  (uint64_t)"BTAccessoryManagerAddCallbacks\n",  v2,  v3,  v4,  v5,  v68);
        goto LABEL_102;
      }

      if (_LogCategory_Initialize((uint64_t)v58, 0x1Eu))
      {
        uint64_t v58 = self->_ucat;
        goto LABEL_100;
      }
    }

  uint64_t v52 = (void *)MEMORY[0x189607870];
  uint64_t v53 = *MEMORY[0x189607670];
  char v54 = v47;
  uint64_t v68 = *MEMORY[0x1896075E0];
  int v55 = objc_msgSend(NSString, "stringWithUTF8String:", DebugGetErrorStringEx(0, v47, 0, 0));
  uint64_t v56 = (void *)v55;
  int v57 = @"?";
  if (v55) {
    int v57 = (const __CFString *)v55;
  }
  v69[0] = v57;
  [MEMORY[0x189603F68] dictionaryWithObjects:v69 forKeys:&v68 count:1];
  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue();
  [v52 errorWithDomain:v53 code:v54 userInfo:v58];
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUPairingSession _completed:](self, "_completed:", v59);
}

    int v51 = a2;
    while (v16 > (unint64_t)v51)
    {
      uint64_t v52 = v51 + 2;
      uint64_t v53 = v51[1];
      char v54 = *v51;
      v51 += v53 + 2;
      if (v54 == 7)
      {
        if ((_DWORD)v53 == 1)
        {
          int v55 = *v52;
          if (v55 >= 9)
          {
            if ((_DWORD)v55 == 9) {
              uint64_t appended = 4294960520LL;
            }
            else {
              uint64_t appended = 4294960596LL;
            }
          }

          else
          {
            uint64_t appended = dword_186B4BE50[v55];
          }

          uint64_t v56 = *(int **)(a1 + 16);
          if (*v56 <= 50)
          {
            if (*v56 != -1)
            {
LABEL_100:
              LogPrintF( (uint64_t)v56,  (uint64_t)"OSStatus _VerifyClientM4(PairingSessionRef, const uint8_t *const, const uint8_t *const)",  0x32u,  (uint64_t)"### Pair-verify client M4 bad status: 0x%X, %#m\n",  a5,  a6,  a7,  a8,  v55);
              goto LABEL_102;
            }

            if (_LogCategory_Initialize((uint64_t)v56, 0x32u))
            {
              uint64_t v56 = *(int **)(a1 + 16);
              LOBYTE(v55) = *v52;
              goto LABEL_100;
            }
          }
        }

        else
        {
          uint64_t appended = 4294960553LL;
        }

        goto LABEL_102;
      }
    }

    unsigned int v61 = a4;
    int v62 = *(_DWORD *)(a1 + 100);
    if ((v62 & 0x20000000) != 0) {
      uint64_t v63 = "PV-Msg4s";
    }
    else {
      uint64_t v63 = "PV-Msg04";
    }
    if ((v62 & 1) != 0)
    {
      uint64_t v75 = _MFiClientVerify( a1,  a2,  a3,  v63,  a1 + 638,  32LL,  "MFi-Pair-Verify-Salt",  0x14uLL,  (uint64_t)"MFi-Pair-Verify-Info",  20LL,  1);
      if (v75 == -71164 || v75 == 0) {
        uint64_t appended = v75;
      }
      else {
        uint64_t appended = 4294896151LL;
      }
      if ((_DWORD)appended) {
        goto LABEL_102;
      }
      uint64_t v65 = 0LL;
      uint64_t v27 = v61;
LABEL_139:
      if ((*(_BYTE *)(a1 + 100) & 2) != 0)
      {
        CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  "Pair-Verify-ResumeSessionID-Salt",  0x20uLL,  (uint64_t)"Pair-Verify-ResumeSessionID-Info",  32LL,  8uLL,  (uint64_t)__s);
        uint64_t v78 = *(int8x16_t **)__s;
        *(void *)(a1 + 376) = *(void *)__s;
        _PairingSaveResumeState( a1,  *(const void **)(a1 + 296),  *(void *)(a1 + 304),  *(const void **)(a1 + 248),  *(void *)(a1 + 256),  (uint64_t)v78,  (_OWORD *)(a1 + 638));
      }

      *(_BYTE *)(a1 + 120) = 5;
      dispatch_source_t v79 = *(int **)(a1 + 16);
      if (*v79 <= 30)
      {
        if (*v79 != -1)
        {
LABEL_143:
          LogPrintF( (uint64_t)v79,  (uint64_t)"OSStatus _VerifyClientM4(PairingSessionRef, const uint8_t *const, const uint8_t *const)",  0x1Eu,  (uint64_t)"Pair-verify client done\n",  a5,  a6,  a7,  a8,  v161);
          goto LABEL_223;
        }

        if (_LogCategory_Initialize((uint64_t)v79, 0x1Eu))
        {
          dispatch_source_t v79 = *(int **)(a1 + 16);
          goto LABEL_143;
        }
      }

LABEL_102:
    self->_btAccessoryCallbacks.accessorySetupCommand = 0LL;
    self->_btAccessoryCallbacks.accessoryRelayMsgRecv = 0LL;
    self->_btAccessoryCallbacks.accessoryCommandStatus = 0LL;
    self->_btAccessoryCallbacks.accessoryEvent = _btAccessoryEventCallback;
    uint64_t v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerAddCallbacks[0])( (uint64_t)self->_btAccessoryManager,  (uint64_t)&self->_btAccessoryCallbacks,  (uint64_t)self);
    if (v59)
    {
      int v64 = v59;
      uint64_t v65 = self->_ucat;
      if (v65->var0 > 60) {
        goto LABEL_89;
      }
      if (v65->var0 != -1) {
        goto LABEL_105;
      }
      if (_LogCategory_Initialize((uint64_t)v65, 0x3Cu))
      {
        uint64_t v65 = self->_ucat;
LABEL_105:
        LogPrintF( (uint64_t)v65,  (uint64_t)"-[CUBluetoothClient _btEnsureStarted]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerAddCallbacks failed: %#m\n",  v60,  v61,  v62,  v63,  v64 - 16);
      }
    }

    else
    {
      self->_btAccessoryEventsRegistered = 1;
    }

    if (*(void *)&__src[24]) {
      free(*(void **)&__src[24]);
    }
  }

LABEL_62:
}

          [v8 setObject:MEMORY[0x189604A88] forKeyedSubscript:*MEMORY[0x18960BE20]];
          goto LABEL_63;
        }

    uint64_t v31 = v29 == 35;
    if (v29 == 35) {
      char v32 = v41 + 1;
    }
    else {
      char v32 = 0LL;
    }
    if (v29 == 35) {
      uint64_t v39 = a2;
    }
    else {
      uint64_t v39 = v41;
    }
    if (v16)
    {
      char v35 = 0LL;
      int v36 = 0LL;
      char v37 = 0LL;
      int v38 = 0LL;
      goto LABEL_81;
    }

    if (*v6 != 58)
    {
      uint64_t v43 = &a2[~(unint64_t)v6];
      int v36 = v6;
      while (v43)
      {
        uint64_t v44 = *++v36;
        --v43;
        if (v44 == 58) {
          goto LABEL_79;
        }
      }

      int v36 = a2;
LABEL_79:
      uint64_t v42 = v36 < a2;
      goto LABEL_80;
    }

    uint64_t v42 = 1LL;
  }

  int v36 = v6;
LABEL_80:
  char v37 = &v36[v42];
  char v35 = v6;
  int v38 = a2;
LABEL_81:
  *a3 = v10;
  a3[1] = (char *)(v11 - v10);
  a3[2] = v24;
  a3[3] = (char *)(v25 - v24);
  a3[4] = v26;
  a3[5] = (char *)(v27 - v26);
  a3[6] = v16;
  a3[7] = (char *)(v22 - v16);
  a3[8] = v6;
  a3[9] = (char *)(v30 - v6);
  a3[10] = v34;
  a3[11] = (char *)(v33 - v34);
  if (v31) {
    uint64_t v45 = a2;
  }
  else {
    uint64_t v45 = 0LL;
  }
  a3[12] = v32;
  a3[13] = (char *)(v45 - v32);
  if (v6 < v30 && *v6 == 47) {
    ++v6;
  }
  a3[14] = v6;
  a3[15] = v30;
  a3[16] = v35;
  a3[17] = (char *)(v36 - v35);
  a3[18] = v37;
  a3[19] = (char *)(v38 - v37);
  if (a4) {
    *a4 = v39;
  }
  return 0LL;
}

LABEL_65:
  __int128 v109 = 0x300000003LL;
  if (!v110)
  {
LABEL_74:
    uint64_t v81 = 7LL;
    goto LABEL_76;
  }

  id v74 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarStatus[0])( *p_btAccessoryManager,  (uint64_t)a4,  (uint64_t)&v109 + 4,  (uint64_t)&v109);
  if (v74)
  {
    dispatch_source_t v79 = v74;
    int32x4_t v80 = self->_ucat;
    if (v80->var0 <= 60)
    {
      if (v80->var0 != -1)
      {
LABEL_69:
        LogPrintF( (uint64_t)v80,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTAccessoryManagerGetInEarStatus failed: %#m\n",  v75,  v76,  v77,  v78,  v79 - 16);
        goto LABEL_71;
      }

      if (_LogCategory_Initialize((uint64_t)v80, 0x3Cu))
      {
        int32x4_t v80 = self->_ucat;
        goto LABEL_69;
      }
    }
  }

                    size_t v3 = v82;
                  }
                }

                else
                {
                  unsigned int v61 = 0LL;
                }

                -[HMAccessory uniqueIdentifier](self->_selfAccessoryMediaSystemCounterpart, "uniqueIdentifier");
                uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue();
                [v61 uniqueIdentifier];
                int v69 = (id)objc_claimAutoreleasedReturnValue();
                int v70 = v68;
                id v71 = v70;
                if (v69 == v70)
                {
                }

                else
                {
                  if ((v70 != 0LL) == (v69 == 0LL))
                  {

                    goto LABEL_76;
                  }

                  uint64_t v72 = [v69 isEqual:v70];

                  if ((v72 & 1) == 0)
                  {
LABEL_76:
                    ucCFAbsoluteTime at = self->_ucat;
                    if (ucat->var0 <= 30)
                    {
                      if (ucat->var0 == -1)
                      {
                        ucCFAbsoluteTime at = self->_ucat;
                      }

                      [v61 name];
                      uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue();
                      LogPrintF( (uint64_t)ucat,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaSystem]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystemCounterpart updated: %@ '%@'\n",  v74,  v75,  v76,  v77,  (char)v69);
                    }

        CFRelease(v31);
        goto LABEL_66;
      }
    }

    float v34 = (void (*)(uint64_t, void, CFStringRef))ReportCriticalError_sSimulateCrash_f;
    if (ReportCriticalError_sSimulateCrash_f)
    {
      char v35 = getpid();
      v34(v35, 0LL, v31);
    }

    else
    {
      syslog(5, "### SimulateCrash() missing: %s");
    }

    goto LABEL_65;
  }

LABEL_92:
      __int128 v113 = 0;
      goto LABEL_93;
    }

    if (v113) {
      v42 |= 8u;
    }
  }

  uint64_t v91 = _Block_copy(self->_selfAccessorySiriAccessUpdatedHandler);
  id v92 = v91;
  if (v91) {
    (*((void (**)(void *))v91 + 2))(v91);
  }

  if (resolvableAccessories)
  {
LABEL_95:
    id v93 = _Block_copy(self->_resolvableAccessoriesChangedHandler);
    id v94 = v93;
    if (v93) {
      (*((void (**)(void *))v93 + 2))(v93);
    }
  }

LABEL_109:
  __int128 v113 = 0;
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  if (MobileBluetoothLibrary_sLib_1972
    && dlsym((void *)MobileBluetoothLibrary_sLib_1972, "BTDeviceIsWirelessSplitterSupported"))
  {
    IsWirelessSplitterSupported = softLinkBTDeviceIsWirelessSplitterSupported((uint64_t)a4, (uint64_t)&v113);
    if (IsWirelessSplitterSupported)
    {
      __int128 v105 = IsWirelessSplitterSupported;
      __int128 v106 = self->_ucat;
      if (v106->var0 <= 60)
      {
        if (v106->var0 == -1)
        {
          __int128 v106 = self->_ucat;
        }

        LogPrintF( (uint64_t)v106,  (uint64_t)"-[CUBluetoothClient updateDevice:btDevice:]",  0x3Cu,  (uint64_t)"### BTDeviceIsWS failed: %#m\n",  v101,  v102,  v103,  v104,  v105 - 16);
      }
    }

    else
    {
      uint64_t v91 = v91 | (v113 != 0);
    }
  }

  dispatch_source_t v79 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Part Name", v79, 0LL);
  int32x4_t v80 = (void *)objc_claimAutoreleasedReturnValue();

  if (v80)
  {
    partName = self->_partName;
    uint64_t v82 = v80;
    int v83 = partName;
    if (v82 == v83)
    {
    }

    else
    {
      uint64_t v84 = v83;
      if (v83)
      {
        uint64_t v85 = -[NSString isEqual:](v82, "isEqual:", v83);

        if ((v85 & 1) != 0) {
          goto LABEL_117;
        }
      }

      else
      {
      }

      objc_storeStrong((id *)&self->_partName, v80);
      v14 |= 1u;
    }
  }

LABEL_119:
  [v6 setDeviceFlags:v91];
}

uint64_t initBTDeviceIsWirelessSplitterSupported(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceIsWirelessSplitterSupported = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceIsWirelessSplitterSupported");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceIsWirelessSplitterSupported)(a1, a2);
}

void *__MobileBluetoothLibrary_block_invoke_1975()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
  MobileBluetoothLibrary_sLib_1972 = (uint64_t)result;
  return result;
}

uint64_t initBTDeviceIsTemporaryPaired(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceIsTemporaryPaired[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceIsTemporaryPaired");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceIsTemporaryPaired[0])(a1, a2);
}

uint64_t initBTDeviceGetSupportedServices(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetSupportedServices[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetSupportedServices");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetSupportedServices[0])(a1, a2);
}

uint64_t initBTDeviceGetDeviceId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetDeviceId[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetDeviceId");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetDeviceId[0])( a1,  a2,  a3,  a4,  a5);
}

uint64_t initBTAccessoryManagerGetInEarStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerGetInEarStatus[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerGetInEarStatus");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarStatus[0])( a1,  a2,  a3,  a4);
}

uint64_t initBTAccessoryManagerGetInEarDetectionEnable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerGetInEarDetectionEnable[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerGetInEarDetectionEnable");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetInEarDetectionEnable[0])( a1,  a2,  a3);
}

uint64_t initBTDeviceGetName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetName[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetName");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetName[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetMagicPairingStatus(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetMagicPairingStatus[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetMagicPairingStatus");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetMagicPairingStatus[0])(a1, a2);
}

uint64_t initBTAccessoryManagerGetFeatureCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerGetFeatureCapability[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerGetFeatureCapability");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetFeatureCapability[0])( a1,  a2,  a3,  a4);
}

uint64_t initBTDeviceGetDeviceType(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetDeviceType[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetDeviceType");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceGetDeviceType[0])(a1, a2);
}

uint64_t initBTAccessoryManagerGetDeviceColor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerGetDeviceColor[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerGetDeviceColor");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetDeviceColor[0])(a1, a2, a3);
}

uint64_t initBTDeviceGetConnectedServices_1976(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetConnectedServices_1961 = (uint64_t (*)(void, void))dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetConnectedServices");
  return softLinkBTDeviceGetConnectedServices_1961(a1, a2);
}

uint64_t initBTAccessoryManagerGetAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerGetAccessoryInfo[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerGetAccessoryInfo");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerGetAccessoryInfo[0])( a1,  a2,  a3,  a4,  a5);
}

uint64_t initBTAccessoryManagerReadDeviceVersionInfo( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerReadDeviceVersionInfo = (uint64_t (*)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dlsym((void *)MobileBluetoothLibrary_sLib_1972, "BTAccessoryManagerReadDeviceVersionInfo");
  return softLinkBTAccessoryManagerReadDeviceVersionInfo( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15);
}

uint64_t initBTAccessoryManagerGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerGetDefault[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerGetDefault");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerGetDefault[0])(a1, a2);
}

uint64_t initBTDeviceAddressFromString(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceAddressFromString[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceAddressFromString");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTDeviceAddressFromString[0])(a1, a2);
}

uint64_t initBTDeviceGetAddressString_2015(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceGetAddressString_1985[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceGetAddressString_1985[0])(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetPairedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTLocalDeviceGetPairedDevices = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTLocalDeviceGetPairedDevices");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetPairedDevices)( a1,  a2,  a3,  a4);
}

const char *BTServiceSpecificEventToString_2016(int a1)
{
  if (a1 > 500)
  {
    if (a1 <= 600)
    {
      switch(a1)
      {
        case 501:
          Class result = "BT_SERVICE_REMOTE_PLAY";
          break;
        case 502:
          Class result = "BT_SERVICE_REMOTE_PAUSE";
          break;
        case 503:
          Class result = "BT_SERVICE_REMOTE_STOP";
          break;
        case 504:
          Class result = "BT_SERVICE_REMOTE_PREVIOUS";
          break;
        case 505:
          Class result = "BT_SERVICE_REMOTE_NEXT";
          break;
        case 506:
          Class result = "BT_SERVICE_REMOTE_VOL_UP";
          break;
        case 507:
          Class result = "BT_SERVICE_REMOTE_VOL_DOWN";
          break;
        case 508:
          Class result = "BT_SERVICE_REMOTE_MUTE";
          break;
        case 509:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_START";
          break;
        case 510:
          Class result = "BT_SERVICE_REMOTE_FASTFORWARD_STOP";
          break;
        case 511:
          Class result = "BT_SERVICE_REMOTE_REWIND_START";
          break;
        case 512:
          Class result = "BT_SERVICE_REMOTE_REWIND_STOP";
          break;
        default:
          return "?";
      }

      return result;
    }

    if (a1 <= 702)
    {
      switch(a1)
      {
        case 601:
          return "BT_SERVICE_SENSOR_RSSI";
        case 701:
          return "BT_SERVICE_LMP_NAME_CHANGED";
        case 702:
          return "BT_SERVICE_HIGH_POWER_ENABLED";
      }
    }

    else if (a1 > 801)
    {
      if (a1 == 802) {
        return "BT_SERVICE_LEA_AUDIO_DISCONNECTED";
      }
      if (a1 == 901) {
        return "BT_UI_INITIATED_CONNECTION_REQUEST";
      }
    }

    else
    {
      if (a1 == 703) {
        return "BT_SERVICE_HIGH_POWER_DISABLED";
      }
      if (a1 == 801) {
        return "BT_SERVICE_LEA_AUDIO_CONNECTED";
      }
    }

    return "?";
  }

  if (a1 <= 100)
  {
    if (a1 <= 1)
    {
      if (!a1) {
        return "BT_SERVICE_SDP";
      }
      if (a1 == 1) {
        return "BT_SERVICE_CONNECTION_ATTEMPT";
      }
    }

    else
    {
      switch(a1)
      {
        case 2:
          return "BT_SERVICE_DISCONNECTION_ATTEMPT";
        case 11:
          return "BT_SERVICE_CONNECTION_RESULT";
        case 12:
          return "BT_SERVICE_DISCONNECTION_RESULT";
      }
    }

    return "?";
  }

  if (a1 > 201)
  {
    if (a1 > 301)
    {
      if (a1 == 302) {
        return "BT_SERVICE_PHONE_BOOK_SEND_COMPLETE";
      }
      if (a1 == 303) {
        return "BT_SERVICE_PHONE_BOOK_SYNC_SUPPORTED";
      }
    }

    else
    {
      if (a1 == 202) {
        return "BT_SERVICE_A2DP_AUDIO_DISCONNECTED";
      }
      if (a1 == 301) {
        return "BT_SERVICE_PHONE_BOOK_SEND_INITIATED";
      }
    }

    return "?";
  }

  switch(a1)
  {
    case 'e':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_CONNECTED";
      break;
    case 'f':
      Class result = "BT_SERVICE_HANDSFREE_AUDIO_DISCONNECTED";
      break;
    case 'g':
      Class result = "BT_SERVICE_HANDSFREE_START_VOICE_COMMAND";
      break;
    case 'h':
      Class result = "BT_SERVICE_HANDSFREE_END_VOICE_COMMAND";
      break;
    default:
      if (a1 != 201) {
        return "?";
      }
      Class result = "BT_SERVICE_A2DP_AUDIO_CONNECTED";
      break;
  }

  return result;
}

uint64_t initBTLocalDeviceGetConnectedDevices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTLocalDeviceGetConnectedDevices[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTLocalDeviceGetConnectedDevices");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetConnectedDevices[0])( a1,  a2,  a3,  a4);
}

uint64_t initBTDeviceFromAddress_2037(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceFromAddress_2035[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceFromAddress");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromAddress_2035[0])(a1, a2, a3);
}

uint64_t initBTDeviceFromIdentifier_2038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTDeviceFromIdentifier_2032[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTDeviceFromIdentifier");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTDeviceFromIdentifier_2032[0])(a1, a2, a3);
}

void _btServiceEventHandler_2059(uint64_t a1, char a2, int a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v12 = (void *)MEMORY[0x186E432B4]();
  uint64_t v13 = a6;
  uint64_t v18 = v13;
  if (*((_BYTE *)v13 + 216)) {
    goto LABEL_2;
  }
  if (a3 == 3)
  {
    uint64_t v24 = v13[28];
    if (*v24 <= 10)
    {
      if (*v24 == -1)
      {
        uint64_t v24 = v18[28];
      }

      BTServiceSpecificEventToString_2016(a4);
      LogPrintF( (uint64_t)v24,  (uint64_t)"void _btServiceEventHandler(BTDevice _Nonnull, BTServiceID, BTServiceEventType, BTServiceSpecificEvent, BTResult, void * _Nonnull)",  0xAu,  (uint64_t)"BTService independent event: %#{flags}, %d %s, %#m\n",  v25,  v26,  v27,  v28,  a2);
    }

uint64_t initBTSessionDetachWithQueue_2064(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTSessionDetachWithQueue_2062[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTSessionDetachWithQueue");
  return ((uint64_t (*)(uint64_t))softLinkBTSessionDetachWithQueue_2062[0])(a1);
}

uint64_t initBTServiceRemoveCallbacks_2065(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTServiceRemoveCallbacks_2060[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTServiceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTServiceRemoveCallbacks_2060[0])(a1, a2);
}

uint64_t initBTPairingAgentDestroy(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTPairingAgentDestroy[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTPairingAgentDestroy");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentDestroy[0])(a1);
}

uint64_t initBTPairingAgentStop(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTPairingAgentStop[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTPairingAgentStop");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStop[0])(a1);
}

uint64_t initBTLocalDeviceRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTLocalDeviceRemoveCallbacks = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTLocalDeviceRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTLocalDeviceRemoveCallbacks)(a1, a2);
}

uint64_t initBTAccessoryManagerRemoveCallbacks(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerRemoveCallbacks[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerRemoveCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTAccessoryManagerRemoveCallbacks[0])(a1, a2);
}

id CBCentralManagerOptionShowPowerAlertKeyFunction()
{
  return (id)constantValCBCentralManagerOptionShowPowerAlertKey;
}

id initValCBCentralManagerOptionShowPowerAlertKey()
{
  if (CoreBluetoothLibrary_sOnce_2100 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2100, &__block_literal_global_527);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2103, "CBCentralManagerOptionShowPowerAlertKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBCentralManagerOptionShowPowerAlertKey, *v0);
  }
  getCBCentralManagerOptionShowPowerAlertKey = (uint64_t (*)())CBCentralManagerOptionShowPowerAlertKeyFunction;
  return (id)constantValCBCentralManagerOptionShowPowerAlertKey;
}

id CBCentralManagerFunction_2070()
{
  return (id)classCBCentralManager_2104;
}

Class initCBCentralManager_2071()
{
  if (CoreBluetoothLibrary_sOnce_2100 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2100, &__block_literal_global_527);
  }
  Class result = objc_getClass("CBCentralManager");
  classCBCentralManager_2104 = (uint64_t)result;
  getCBCentralManagerClass_2069 = (uint64_t (*)())CBCentralManagerFunction_2070;
  return result;
}

id CBPeripheralManagerOptionShowPowerAlertKeyFunction()
{
  return (id)constantValCBPeripheralManagerOptionShowPowerAlertKey;
}

id initValCBPeripheralManagerOptionShowPowerAlertKey()
{
  if (CoreBluetoothLibrary_sOnce_2100 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2100, &__block_literal_global_527);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2103, "CBPeripheralManagerOptionShowPowerAlertKey");
  if (v0) {
    objc_storeStrong((id *)&constantValCBPeripheralManagerOptionShowPowerAlertKey, *v0);
  }
  getCBPeripheralManagerOptionShowPowerAlertKey = (uint64_t (*)())CBPeripheralManagerOptionShowPowerAlertKeyFunction;
  return (id)constantValCBPeripheralManagerOptionShowPowerAlertKey;
}

id CBPeripheralManagerFunction_2074()
{
  return (id)classCBPeripheralManager_2101;
}

Class initCBPeripheralManager_2075()
{
  if (CoreBluetoothLibrary_sOnce_2100 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2100, &__block_literal_global_527);
  }
  Class result = objc_getClass("CBPeripheralManager");
  classCBPeripheralManager_2101 = (uint64_t)result;
  getCBPeripheralManagerClass_2073 = (uint64_t (*)())CBPeripheralManagerFunction_2074;
  return result;
}

void _btSessionEventCallback_2077(int *a1, int a2, char a3, void *a4)
{
  id v8 = (void *)MEMORY[0x186E432B4]();
  uint64_t v9 = a4;
  uint64_t v14 = v9;
  switch(a2)
  {
    case 0:
      uint64_t v15 = v9[28];
      if (*v15 > 30) {
        goto LABEL_19;
      }
      if (*v15 != -1) {
        goto LABEL_4;
      }
      if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
      {
        uint64_t v15 = v14[28];
LABEL_4:
        LogPrintF( (uint64_t)v15,  (uint64_t)"void _btSessionEventCallback(BTSession _Nonnull, BTSessionEvent, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTSession attached: %#m\n",  v10,  v11,  v12,  v13,  a3 - 16);
      }

void _btLocalDeviceStatusCallback(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = (void *)MEMORY[0x186E432B4]();
  uint64_t v7 = a4;
  uint64_t v12 = v7;
  if (a2 == 11)
  {
    uint64_t v13 = (int *)v7[28];
    if (*v13 <= 30)
    {
      if (*v13 == -1)
      {
        uint64_t v13 = (int *)v12[28];
      }

      uint64_t v14 = "Bluetooth first unlock completed";
LABEL_9:
      LogPrintF( (uint64_t)v13,  (uint64_t)"void _btLocalDeviceStatusCallback(BTLocalDevice _Nonnull, BTLocalDeviceEvent, BTResult, void * _Nonnull)",  0x1Eu,  (uint64_t)v14,  v8,  v9,  v10,  v11,  v15);
    }

void _btPairingAgentStatusCallback(uint64_t a1, int a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = (void *)MEMORY[0x186E432B4]();
  uint64_t v9 = a5;
  uint64_t v14 = v9;
  switch(a2)
  {
    case 0:
      char v15 = v9[28];
      if (*v15 > 30) {
        goto LABEL_19;
      }
      if (*v15 != -1) {
        goto LABEL_4;
      }
      if (_LogCategory_Initialize((uint64_t)v15, 0x1Eu))
      {
        char v15 = v14[28];
LABEL_4:
        LogPrintF( (uint64_t)v15,  (uint64_t)"void _btPairingAgentStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResu lt, void * _Nonnull)",  0x1Eu,  (uint64_t)"BTPairingAgent started: %#m\n",  v10,  v11,  v12,  v13,  a4 - 16);
      }

void _btAccessoryEventCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = (void *)MEMORY[0x186E432B4]();
  id v10 = a5;
  uint64_t v11 = v10;
  switch(a2)
  {
    case 4:
      [v10 _btAccessoryNameChanged:a3];
      break;
    case 6:
    case 12:
      [v10 _btAccessoryPlacementChanged:a1 device:a3];
      break;
    case 9:
      uint64_t v12 = 1LL;
      goto LABEL_7;
    case 10:
      uint64_t v12 = 2LL;
      goto LABEL_7;
    case 11:
      uint64_t v12 = 3LL;
LABEL_7:
      [v10 _btAccessoryStreamStateChanged:v12 device:a3];
      break;
    default:
      break;
  }

  objc_autoreleasePoolPop(v9);
}

uint64_t initBTAccessoryManagerAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTAccessoryManagerAddCallbacks[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTAccessoryManagerAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTAccessoryManagerAddCallbacks[0])(a1, a2, a3);
}

uint64_t initBTPairingAgentStart(uint64_t a1)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTPairingAgentStart[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTPairingAgentStart");
  return ((uint64_t (*)(uint64_t))softLinkBTPairingAgentStart[0])(a1);
}

uint64_t initBTPairingAgentCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTPairingAgentCreate[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTPairingAgentCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkBTPairingAgentCreate[0])(a1, a2, a3, a4);
}

uint64_t initBTLocalDeviceAddCallbacks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTLocalDeviceAddCallbacks[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTLocalDeviceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceAddCallbacks[0])(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetAddressString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTLocalDeviceGetAddressString[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTLocalDeviceGetAddressString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTLocalDeviceGetAddressString[0])(a1, a2, a3);
}

uint64_t initBTLocalDeviceGetDefault(uint64_t a1, uint64_t a2)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTLocalDeviceGetDefault[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTLocalDeviceGetDefault");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkBTLocalDeviceGetDefault[0])(a1, a2);
}

uint64_t initBTServiceAddCallbacks_2097(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MobileBluetoothLibrary_sOnce_1971 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTServiceAddCallbacks_2081[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTServiceAddCallbacks");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkBTServiceAddCallbacks_2081[0])(a1, a2, a3);
}

uint64_t initBTSessionAttachWithQueue_2098(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = MobileBluetoothLibrary_sOnce_1971;
  id v8 = a4;
  if (v7 != -1) {
    dispatch_once(&MobileBluetoothLibrary_sOnce_1971, &__block_literal_global_623);
  }
  softLinkBTSessionAttachWithQueue_2078[0] = (uint64_t (*)())dlsym( (void *)MobileBluetoothLibrary_sLib_1972,  "BTSessionAttachWithQueue");
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))softLinkBTSessionAttachWithQueue_2078[0])(a1, a2, a3, v8);

  return v9;
}

void *__CoreBluetoothLibrary_block_invoke_2102()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_2103 = (uint64_t)result;
  return result;
}

LABEL_51:
  -[CUBluetoothScalablePipe _tearDownPipe](self, "_tearDownPipe");
}

      return v28;
    case 7:
      uint64_t v17 = a3 >= 6;
      uint64_t v18 = 6LL;
      goto LABEL_18;
    case 8:
      uint64_t v17 = a3 >= 0x10;
      uint64_t v18 = 16LL;
LABEL_18:
      if (v17) {
        uint64_t v13 = v18;
      }
      else {
        uint64_t v13 = a3;
      }
      uint64_t v14 = v13;
LABEL_22:
      uint64_t v16 = a2;
      goto LABEL_23;
    default:
      char v15 = (int *)*((void *)v7 + 3);
      if (*v15 > 90) {
        goto LABEL_50;
      }
      if (*v15 != -1) {
        goto LABEL_13;
      }
      if (_LogCategory_Initialize((uint64_t)v15, 0x5Au))
      {
        char v15 = (int *)*((void *)v7 + 3);
LABEL_13:
        LogPrintF( (uint64_t)v15,  (uint64_t)"OSStatus _showPIN(PairingFlags, char * _Nonnull, size_t, void * _Nonnull)",  0x5Au,  (uint64_t)"### Unsupported PIN type %u\n",  v8,  v9,  v10,  v11,  v12);
      }

  return v31 == 0LL;
}

            *(_DWORD *)(a3 + 176) = v10;
            *(_DWORD *)(a3 + 164) = 2;
            _HTTPClientRunStateMachine((CFTypeRef)a3);
            goto LABEL_52;
          }

          goto LABEL_53;
        }

        char v21 = *(int **)(a3 + 96);
      }

      LogPrintF( (uint64_t)v21,  (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)",  0x3Cu,  (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n",  v17,  v18,  v19,  v20,  *(_DWORD *)(a3 + 144));
      goto LABEL_28;
    }

    uint64_t v9 = 4294960572LL;
  }

    uint64_t v35 = (char)v21;
    int v36 = 10;
    uint64_t v37 = "0123456789ABCDEF";
    switch((char)v21)
    {
      case '@':
        uint64_t v50 = (__CFString **)v348[0];
        v348[0] += 8LL;
        if ((v20 & 0x10) != 0) {
          goto LABEL_762;
        }
        int v51 = *v50;
        if (v51) {
          uint64_t v52 = v51;
        }
        else {
          uint64_t v52 = @"NULL";
        }
        if (!v19 || (v20 & 8) == 0) {
          goto LABEL_91;
        }
        if (v28 < 2)
        {
          *(void *)&v347 = 0LL;
          BYTE8(v347) = 0;
        }

        else
        {
          *(void *)&v347 = v28 - 2;
LABEL_91:
          if (v19 == 2)
          {
            uint64_t v53 = 8738;
          }

          else
          {
            if (v19 != 1) {
              goto LABEL_384;
            }
            uint64_t v53 = 10023;
          }

          *(_WORD *)((char *)&v347 + 9) = v53;
        }

      size_t v3 = v30;
      goto LABEL_46;
    }

    char v15 = **(uint64_t (***)(const char *, uint64_t))a3;
    uint64_t v18 = "{},\n";
    uint64_t v19 = "{}, ";
  }

  if (v6 == 2) {
    uint64_t v16 = v19;
  }
  else {
    uint64_t v16 = v18;
  }
  uint64_t v25 = 4LL;
LABEL_40:
  uint64_t v27 = v15(v16, v25);
  uint64_t v7 = v27;
  if (v27 >= 0) {
    uint64_t v28 = v10;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 + v27;
  size_t v3 = v30;
  if (v29 >= 1) {
    *(_DWORD *)(a3 + 20) += v29;
  }
  if (v7 < 0) {
    goto LABEL_46;
  }
LABEL_47:
}

id CBScalablePipeManagerFunction()
{
  return (id)classCBScalablePipeManager;
}

Class initCBScalablePipeManager()
{
  if (CoreBluetoothLibrary_sOnce_2355 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2355, &__block_literal_global_2356);
  }
  Class result = objc_getClass("CBScalablePipeManager");
  classCBScalablePipeManager = (uint64_t)result;
  getCBScalablePipeManagerClass = (uint64_t (*)())CBScalablePipeManagerFunction;
  return result;
}

id CBScalablePipeOptionTransportFunction()
{
  return (id)constantValCBScalablePipeOptionTransport;
}

id initValCBScalablePipeOptionTransport()
{
  if (CoreBluetoothLibrary_sOnce_2355 != -1) {
    dispatch_once(&CoreBluetoothLibrary_sOnce_2355, &__block_literal_global_2356);
  }
  id v0 = (id *)dlsym((void *)CoreBluetoothLibrary_sLib_2357, "CBScalablePipeOptionTransport");
  if (v0) {
    objc_storeStrong((id *)&constantValCBScalablePipeOptionTransport, *v0);
  }
  getCBScalablePipeOptionTransport = (uint64_t (*)())CBScalablePipeOptionTransportFunction;
  return (id)constantValCBScalablePipeOptionTransport;
}

void *__CoreBluetoothLibrary_block_invoke_2358()
{
  Class result = dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
  CoreBluetoothLibrary_sLib_2357 = (uint64_t)result;
  return result;
}

void sub_186A7C780(_Unwind_Exception *a1)
{
}

void sub_186A7CC0C(_Unwind_Exception *a1)
{
}

void sub_186A7D10C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186A7D174( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186A7D928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_186A7DA04(_Unwind_Exception *a1)
{
}

void sub_186A7DBB0(_Unwind_Exception *a1)
{
}

void sub_186A7DE04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_186A7DEC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

LABEL_34:
    deviceFoundHandler = (void (**)(id, CUBonjourDevice *))v19->_deviceFoundHandler;
    if (deviceFoundHandler) {
      deviceFoundHandler[2](deviceFoundHandler, v12);
    }

    goto LABEL_37;
  }

  uint64_t v9 = self->_ucat;
  if (v9->var0 <= 90)
  {
    if (v9->var0 == -1)
    {
      uint64_t v9 = self->_ucat;
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"-[CUBonjourBrowser _bonjourHandleAddOrUpdateDevice:]",  0x5Au,  (uint64_t)"### Bonjour device found without identifier: %@\n",  v5,  v6,  v7,  v8,  (char)v4);
  }

  return v33;
}

        -[CUWiFiManager _updateTrafficPeersWithService:](self, "_updateTrafficPeersWithService:", 0x8000LL);
        if ((v16 & 0x200) == 0)
        {
LABEL_22:
          if ((v16 & 0x4000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_36;
        }

          ++v12;
          continue;
        }

        return 4294960568LL;
    }
  }

              uint64_t v17 = 1;
LABEL_15:
              *v18++ = v21;
              continue;
            }

            uint64_t v16 = 0LL;
            uint64_t v19 = v5 + 2;
LABEL_29:
            uint64_t v17 = 1;
          }
        }

        if ((_DWORD)v21 == 34)
        {
          uint64_t v16 = 0LL;
          goto LABEL_29;
        }

        uint64_t v17 = 0;
        uint64_t v16 = 1LL;
      }

      while ((_DWORD)v21 == 39);
      if ((_DWORD)v21 != 92) {
        break;
      }
      if (v19 >= (const char *)v12)
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = 0;
        LOBYTE(v21) = 92;
        goto LABEL_15;
      }

      uint64_t v16 = 0LL;
      uint64_t v19 = v5 + 2;
      LODWORD(v21) = *((unsigned __int8 *)v5 + 1);
      uint64_t v17 = 0;
      if ((_DWORD)v21 != 10)
      {
        uint64_t v17 = 0;
        goto LABEL_15;
      }
    }

    if ((v21 & 0x80) != 0) {
      uint64_t v22 = __maskrune(*(unsigned __int8 *)v5, 0x4000uLL);
    }
    else {
      uint64_t v22 = *(_DWORD *)(v13 + 4 * v21 + 60) & 0x4000;
    }
    if (!v22)
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = 0;
      goto LABEL_15;
    }

    ++v5;
LABEL_42:
    *uint64_t v18 = 0;
    uint64_t v23 = v18 + 1;
    a2 = v31;
    if (v11 < v32)
    {
      uint64_t v27 = v10;
      goto LABEL_49;
    }

    uint64_t v24 = malloc(8LL * ((2 * v32) | 1));
    if (!v24)
    {
      free(v10);
      goto LABEL_57;
    }

    uint64_t v27 = v24;
    if (v11)
    {
      for (unint64_t i = 0LL; i != v11; ++i)
        v24[i] = *((void *)v10 + i);
    }

    v32 *= 2;
    free(v10);
    uint64_t v10 = v27;
LABEL_49:
    uint64_t v26 = v11 + 1;
    *((void *)v27 + v11++) = v14;
    uint64_t v14 = v23;
    a3 = v30;
  }

  while (v5 < (const char *)v12);
LABEL_50:
  uint64_t v28 = 0LL;
  *((void *)v27 + v26) = 0LL;
  *a2 = v26;
  *a3 = v27;
  if (!v26) {
LABEL_53:
  }
    free(v8);
  return v28;
}

void sub_186A7E608(_Unwind_Exception *a1)
{
}

void sub_186A7E838(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__2732(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2733(uint64_t a1)
{
}

uint64_t CUBonjourDeviceReconfirm(void *a1)
{
  uint64_t v1 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = v1;
  if (v1)
  {
    BonjourDevice_Reconfirm(v1);
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = 4294960554LL;
  }

  return v3;
}

void CUMetricsLog(void *a1, void *a2)
{
}

void CUMetricsLogEx(int *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v9 = a3;
  if (*a1 <= 50 && (*a1 != -1 || _LogCategory_Initialize((uint64_t)a1, 0x32u))) {
    LogPrintF( (uint64_t)a1,  (uint64_t)"void CUMetricsLogEx(LogCategory * _Nonnull, NSString * _Nonnull __strong, NSDictionary<NSString *,NSObjec t *> * _Nonnull __strong)",  0x32u,  (uint64_t)"MetricLog '%@' : %##@\n",  v5,  v6,  v7,  v8,  (char)v10);
  }
  softLinkAnalyticsSendEvent(v10, v9);
}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  uint64_t v3 = CoreAnalyticsLibrary_sOnce;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&CoreAnalyticsLibrary_sOnce, &__block_literal_global_2819);
  }
  softLinkAnalyticsSendEvent = (uint64_t (*)())dlsym((void *)CoreAnalyticsLibrary_sLib, "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent)(v5, v4);
}

void *__CoreAnalyticsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
  CoreAnalyticsLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_186A7FD70(_Unwind_Exception *a1)
{
}

void sub_186A7FE18(_Unwind_Exception *a1)
{
}

void sub_186A80170( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186A81110( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__2979(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2980(uint64_t a1)
{
}

id RPCompanionLinkClientFunction()
{
  return (id)classRPCompanionLinkClient;
}

Class initRPCompanionLinkClient()
{
  if (RapportLibrary_sOnce != -1) {
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_2993);
  }
  Class result = objc_getClass("RPCompanionLinkClient");
  classRPCompanionLinkClient = (uint64_t)result;
  getRPCompanionLinkClientClass[0] = (uint64_t (*)())RPCompanionLinkClientFunction;
  return result;
}

id RPCompanionLinkDeviceFunction()
{
  return (id)classRPCompanionLinkDevice;
}

Class initRPCompanionLinkDevice()
{
  if (RapportLibrary_sOnce != -1) {
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_2993);
  }
  Class result = objc_getClass("RPCompanionLinkDevice");
  classRPCompanionLinkDevice = (uint64_t)result;
  getRPCompanionLinkDeviceClass = (uint64_t (*)())RPCompanionLinkDeviceFunction;
  return result;
}

void *__RapportLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Rapport.framework/Rapport", 2);
  RapportLibrary_sLib = (uint64_t)result;
  return result;
}

id RPOptionTimeoutSecondsFunction()
{
  return (id)constantValRPOptionTimeoutSeconds;
}

id initValRPOptionTimeoutSeconds()
{
  if (RapportLibrary_sOnce != -1) {
    dispatch_once(&RapportLibrary_sOnce, &__block_literal_global_2993);
  }
  id v0 = (id *)dlsym((void *)RapportLibrary_sLib, "RPOptionTimeoutSeconds");
  if (v0) {
    objc_storeStrong((id *)&constantValRPOptionTimeoutSeconds, *v0);
  }
  getRPOptionTimeoutSeconds[0] = (uint64_t (*)())RPOptionTimeoutSecondsFunction;
  return (id)constantValRPOptionTimeoutSeconds;
}

void sub_186A82B64(_Unwind_Exception *a1)
{
}

void sub_186A83600( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186A8386C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_186A83C74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_186A842A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_186A84530( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

LABEL_72:
  uint64_t v81 = self->_resolvableAccessories;
  self->_resolvableAccessories = 0LL;

LABEL_73:
  resolvableAccessoriesMap = self->_resolvableAccessoriesMap;
  self->_resolvableAccessoriesMap = 0LL;

  if (v7)
  {
    int v83 = _Block_copy(self->_selfAccessoryUpdatedHandler);
    uint64_t v84 = v83;
    if (v83) {
      (*((void (**)(void *))v83 + 2))(v83);
    }
  }

  if (v28)
  {
    uint64_t v85 = _Block_copy(self->_selfAccessoryAppDataChangedHandler);
    int v86 = v85;
    if (v85) {
      (*((void (**)(void *, void))v85 + 2))(v85, 0LL);
    }
  }

  if (v36)
  {
    uint64_t v87 = _Block_copy(self->_selfAccessoryMediaAccessUpdatedHandler);
    BOOL v88 = v87;
    if (v87) {
      (*((void (**)(void *))v87 + 2))(v87);
    }

    if (!v41)
    {
LABEL_83:
      if (!selfAccessorySiriEnabled) {
        goto LABEL_84;
      }
      goto LABEL_92;
    }
  }

  else if (!v41)
  {
    goto LABEL_83;
  }

  int v89 = _Block_copy(self->_selfAccessoryMediaSystemUpdatedHandler);
  uint64_t v90 = v89;
  if (v89) {
    (*((void (**)(void *))v89 + 2))(v89);
  }

  if (!selfAccessorySiriEnabled)
  {
LABEL_84:
    if (!resolvableAccessories) {
      return;
    }
    goto LABEL_95;
  }

  pthread_mutex_unlock(&gPairingGlobalLock);
  return v33;
}

LABEL_75:
            }

            ++v34;
          }

          while (v32 != v34);
          uint64_t v60 = [v30 countByEnumeratingWithState:&v87 objects:v107 count:16];
          uint64_t v32 = v60;
        }

        while (v60);
      }

      uint64_t v28 = obja + 1;
      break;
    }

    uint64_t v72 = [v70 countByEnumeratingWithState:&v91 objects:v108 count:16];
    if (v72) {
      continue;
    }
    break;
  }

      break;
    }
  }

  uint64_t v58 = (unint64_t)v5;
  while ((unint64_t)a4 > v58)
  {
    uint64_t v59 = v58 + 2;
    uint64_t v60 = *(unsigned __int8 *)(v58 + 1);
    unsigned int v61 = *(unsigned __int8 *)v58;
    v58 += 2 + v60;
    if (v61 == 3)
    {
      if (!v60) {
        break;
      }
      int v62 = (void *)[objc_alloc(NSString) initWithBytes:v59 length:v60 encoding:4];
      uint64_t v63 = v62;
      if (!v62) {
        goto LABEL_90;
      }
      deviceIEModel = self->_deviceIEModel;
      uint64_t v65 = v62;
      uint64_t v66 = deviceIEModel;
      if (v65 == v66)
      {
      }

      else
      {
        uint64_t v67 = v66;
        if (v66)
        {
          uint64_t v68 = -[NSString isEqual:](v65, "isEqual:", v66);

          if ((v68 & 1) != 0) {
            goto LABEL_90;
          }
        }

        else
        {
        }

        objc_storeStrong((id *)&self->_deviceIEModel, v63);
        uint64_t v8 = 1;
      }

LABEL_81:
                selfAccessoryMediaSystemUpdatedHandler = (void (**)(void))self->_selfAccessoryMediaSystemUpdatedHandler;
                if (selfAccessoryMediaSystemUpdatedHandler) {
                  selfAccessoryMediaSystemUpdatedHandler[2]();
                }
                goto LABEL_83;
              }
            }

            else
            {
            }

            uint64_t v56 = self->_ucat;
            if (v56->var0 <= 30)
            {
              if (v56->var0 != -1)
              {
LABEL_43:
                if (v45 > 2) {
                  int v57 = "?";
                }
                else {
                  int v57 = off_189F31268[v45];
                }
                LogPrintF( (uint64_t)v56,  (uint64_t)"-[CUHomeKitManager _updateSelfAccessoryMediaSystem]",  0x1Eu,  (uint64_t)"SelfAccessoryMediaSystemRole updated: %s\n",  v51,  v52,  v53,  v54,  (char)v57);
                goto LABEL_49;
              }

              if (_LogCategory_Initialize((uint64_t)v56, 0x1Eu))
              {
                uint64_t v56 = self->_ucat;
                goto LABEL_43;
              }
            }

        int v62 = -[CUPowerSource productID](v70, "productID");
        if (v62 != self->_productID) {
          self->_productID = v62;
        }
        uint64_t v63 = -[CUPowerSource vendorID](v70, "vendorID");
        if (v63 != self->_vendorID) {
          self->_vendorID = v63;
        }
        goto LABEL_85;
      }
    }

    else
    {
    }

    objc_storeStrong((id *)&self->_accessoryID, v8);
    goto LABEL_13;
  }

  if (gLogCategory_CUPowerSourceMonitor <= 60
    && (gLogCategory_CUPowerSourceMonitor != -1
     || _LogCategory_Initialize((uint64_t)&gLogCategory_CUPowerSourceMonitor, 0x3Cu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_CUPowerSourceMonitor,  (uint64_t)"-[CUPowerSource handleSubComponentsUpdatedWithBaseSource:]",  0x3Cu,  (uint64_t)"### Updating aggregate without subcomponents?",  v64,  v65,  v66,  v67,  v68);
  }

  int v70 = 0LL;
  uint64_t v56 = 0LL;
LABEL_85:
}
}

            uint64_t v32 = 0LL;
            LOBYTE(v33) = 0;
LABEL_82:
            id v10 = a4;
            goto LABEL_115;
          }

          int32x4_t v137 = *(int **)(a1 + 16);
          uint64_t v136 = appended;
        }

        LogPrintF( (uint64_t)v137,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"### Pair-setup server: client not allowed: %#m\n",  v132,  v133,  v134,  v135,  v136);
        goto LABEL_325;
      }

      int32x4_t v138 = PairingSessionSavePeer(a1, *(char **)(a1 + 296), *(void *)(a1 + 304), v184, v132, v133, v134, v135);
      uint64_t appended = v138;
      if (v138)
      {
        int32x4_t v143 = *(int **)(a1 + 16);
        if (*v143 > 60) {
          goto LABEL_362;
        }
        if (*v143 == -1)
        {
          int32x4_t v174 = _LogCategory_Initialize(*(void *)(a1 + 16), 0x3Cu);
          int32x4_t v138 = appended;
          if (!v174)
          {
LABEL_362:
            if (v138 > -6761)
            {
              if (v138 > -6728)
              {
                if (v138 == -6727)
                {
                  int32x4_t v175 = 4LL;
                  goto LABEL_387;
                }

                if (v138 == -6700)
                {
                  int32x4_t v175 = 1LL;
                  goto LABEL_387;
                }
              }

              else
              {
                if (v138 == -6760)
                {
                  int32x4_t v175 = 3LL;
                  goto LABEL_387;
                }

                if (v138 == -6754)
                {
                  int32x4_t v175 = 2LL;
                  goto LABEL_387;
                }
              }
            }

            else if (v138 > -6765)
            {
              if (v138 == -6764)
              {
                int32x4_t v175 = 6LL;
                goto LABEL_387;
              }

              if (v138 == -6763)
              {
                int32x4_t v175 = 5LL;
                goto LABEL_387;
              }
            }

            else
            {
              if (v138 == -71144)
              {
                int32x4_t v175 = 8LL;
                goto LABEL_387;
              }

              if (v138 == -6773)
              {
                int32x4_t v175 = 7LL;
                goto LABEL_387;
              }
            }

            if (v138 == -6776) {
              int32x4_t v175 = 9LL;
            }
            else {
              int32x4_t v175 = 1LL;
            }
LABEL_387:
            uint64_t appended = TLV8BufferAppendUInt64((uint64_t)&__src, 7, v175);
            if (appended) {
              goto LABEL_81;
            }
            v199[0] = 6;
            uint64_t appended = TLV8BufferAppend((uint64_t)&__src, 6, v199, 1uLL);
            if (appended) {
              goto LABEL_81;
            }
LABEL_248:
            __int128 v111 = v206;
            __int128 v112 = (UInt8 *)v207;
            if (!v207)
            {
              else {
                __int128 v113 = v206;
              }
              __int128 v114 = (UInt8 *)malloc(v113);
              if (!v114)
              {
                __int128 v115 = -6728;
                goto LABEL_256;
              }

              __int128 v112 = v114;
              if (v111) {
                memcpy(v114, __src, v111);
              }
            }

            __int128 v115 = 0;
            __src = v208;
            *(void *)&v206 = 0LL;
            v207 = 0LL;
            *a4 = v112;
            *a5 = v111;
LABEL_256:
            uint64_t v32 = 0LL;
            LOBYTE(v33) = 0;
LABEL_284:
            uint64_t appended = v115;
            goto LABEL_82;
          }

          int32x4_t v143 = *(int **)(a1 + 16);
        }

        LogPrintF( (uint64_t)v143,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x3Cu,  (uint64_t)"### Pair-setup server save peer failed: %#m\n",  v139,  v140,  v141,  v142,  v138);
        int32x4_t v138 = appended;
        goto LABEL_362;
      }

      int32x4_t v150 = *(void **)(a1 + 184);
      *(_BYTE *)(a1 + 120) = 6;
      if (v150)
      {
        free(v150);
        *(void *)(a1 + 184) = 0LL;
      }

      *(void *)(a1 + 192) = 0LL;
      int32x4_t v185 = (char *)(a1 + 510);
      uint64_t appended = PairingSessionCopyIdentity(a1, 1LL, (char **)(a1 + 184), (_OWORD *)(a1 + 510), a1 + 542);
      if (appended) {
        goto LABEL_165;
      }
      int8x16_t v151 = strlen(*(const char **)(a1 + 184));
      *(void *)(a1 + 192) = v151;
      if (!v151)
      {
        uint64_t v32 = 0LL;
        LOBYTE(v33) = 0;
        int8x16_t v177 = -6708;
        goto LABEL_405;
      }

      length = v151 + 64;
      int32x4_t v183 = v151 + 64;
      int32x4_t v152 = (char *)malloc(v151 + 64);
      if (!v152)
      {
        uint64_t v32 = 0LL;
        goto LABEL_420;
      }

      int32x4_t v153 = v152;
      CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  *(void *)(a1 + 736),  *(void *)(a1 + 744),  "Pair-Setup-Accessory-Sign-Salt",  0x1EuLL,  (uint64_t)"Pair-Setup-Accessory-Sign-Info",  30LL,  0x20uLL,  (uint64_t)v152);
      int32x4_t v154 = *(void *)(a1 + 192);
      memcpy(v153 + 32, *(const void **)(a1 + 184), v154);
      int32x4_t v155 = &v153[v154 + 32];
      int32x4_t v156 = *(_OWORD *)(a1 + 526);
      *(_OWORD *)int32x4_t v155 = *(_OWORD *)v185;
      *((_OWORD *)v155 + 1) = v156;
      int32x4_t v157 = *(void (**)(void, char *, size_t, char *, void))(a1 + 928);
      if (v157)
      {
        v157(*(unsigned int *)(a1 + 100), v153, v183, __s, *(void *)(a1 + 936));
      }

      else
      {
        ccsha512_di();
        cced25519_sign();
      }

      free(v153);
      uint64_t appended = TLV8BufferAppend((uint64_t)&v201, 1, *(char **)(a1 + 184), *(void *)(a1 + 192));
      if (!appended)
      {
        uint64_t appended = TLV8BufferAppend((uint64_t)&v201, 3, v185, 0x20uLL);
        if (!appended)
        {
          uint64_t appended = TLV8BufferAppend((uint64_t)&v201, 10, __s, 0x40uLL);
          if (!appended)
          {
            int32x4_t v161 = *(char **)(a1 + 216);
            if (!v161 || (uint64_t appended = TLV8BufferAppend((uint64_t)&v201, 16, v161, *(void *)(a1 + 224))) == 0)
            {
              if ((*(_DWORD *)(a1 + 100) & 0x5770FF34) == 0) {
                goto LABEL_346;
              }
              SelfInfo = _PairingSessionGetSelfInfo(a1);
              if (!SelfInfo) {
                goto LABEL_346;
              }
              DataCFMutableDataRef Mutable = OPACKEncoderCreateDataMutable((const __CFString *)SelfInfo, 0, (int *)&appended);
              uint64_t v32 = (char *)DataMutable;
              if (!DataMutable) {
                goto LABEL_166;
              }
              BytePtr = (char *)CFDataGetBytePtr(DataMutable);
              uint64_t v165 = CFDataGetLength((CFDataRef)v32);
              uint64_t appended = TLV8BufferAppend((uint64_t)&v201, 17, BytePtr, v165);
              CFRelease(v32);
              if (!appended)
              {
LABEL_346:
                int32x4_t v166 = v202;
                int32x4_t v167 = (int8x16_t *)malloc(v202 + 16);
                uint64_t v32 = (char *)v167;
                if (v167)
                {
                  _chacha20_poly1305_encrypt_all( (_DWORD *)(a1 + 414),  "PS-Msg06",  8LL,  0LL,  0LL,  v201,  v166,  v167,  (uint64_t)v167->i64 + v166);
                  uint64_t appended = TLV8BufferAppend((uint64_t)&__src, 5, v32, v202 + 16);
                  if (appended) {
                    goto LABEL_166;
                  }
                  free(v32);
                  uint64_t appended = TLV8BufferAppend((uint64_t)&__src, 6, (char *)(a1 + 120), 1uLL);
                  if (appended) {
                    goto LABEL_165;
                  }
                  int32x4_t v168 = v206;
                  uint64_t v32 = (char *)v207;
                  if (v207)
                  {
LABEL_356:
                    __src = v208;
                    *(void *)&v206 = 0LL;
                    v207 = 0LL;
                    *a4 = (UInt8 *)v32;
                    *a5 = v168;
                    uint64_t appended = 0;
                    *(_BYTE *)(a1 + 120) = 7;
                    int32x4_t v171 = *(int **)(a1 + 16);
                    int32x4_t v172 = *v171;
                    if (*v171 > 30) {
                      goto LABEL_428;
                    }
                    if (v172 == -1)
                    {
                      int32x4_t v178 = _LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu);
                      int32x4_t v171 = *(int **)(a1 + 16);
                      if (!v178) {
                        goto LABEL_424;
                      }
                      int32x4_t v172 = *v171;
                    }

                    int32x4_t v173 = v172 > 10 || v172 == -1 && !_LogCategory_Initialize((uint64_t)v171, 0xAu);
                    LogPrintF( (uint64_t)v171,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup server M6 -- exchange response\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  a7,  a8,  v173);
                    int32x4_t v171 = *(int **)(a1 + 16);
LABEL_424:
                    if (*v171 <= 30)
                    {
                      if (*v171 == -1)
                      {
                        int32x4_t v171 = *(int **)(a1 + 16);
                      }

                      LogPrintF( (uint64_t)v171,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size _t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup server done -- client authenticated\n",  (uint64_t)a5,  a6,  a7,  a8,  v182);
                    }

id HAPSystemKeychainStoreFunction()
{
  return (id)classHAPSystemKeychainStore;
}

Class initHAPSystemKeychainStore()
{
  if (CoreHAPLibrary_sOnce != -1) {
    dispatch_once(&CoreHAPLibrary_sOnce, &__block_literal_global_743);
  }
  Class result = objc_getClass("HAPSystemKeychainStore");
  classHAPSystemKeychainStore = (uint64_t)result;
  getHAPSystemKeychainStoreClass[0] = (uint64_t (*)())HAPSystemKeychainStoreFunction;
  return result;
}

void *__CoreHAPLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP", 2);
  CoreHAPLibrary_sLib = (uint64_t)result;
  return result;
}

id HMClientConnectionFunction()
{
  return (id)classHMClientConnection;
}

Class initHMClientConnection()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_728);
  }
  Class result = objc_getClass("HMClientConnection");
  classHMClientDNSServiceErrorType Connection = (uint64_t)result;
  getHMClientConnectionClass[0] = (uint64_t (*)())HMClientConnectionFunction;
  return result;
}

id HMHomeManagerConfigurationFunction()
{
  return (id)classHMHomeManagerConfiguration;
}

Class initHMHomeManagerConfiguration()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_728);
  }
  Class result = objc_getClass("HMHomeManagerConfiguration");
  classHMHomeManagerConfiguration = (uint64_t)result;
  getHMHomeManagerConfigurationClass[0] = (uint64_t (*)())HMHomeManagerConfigurationFunction;
  return result;
}

id HMHomeManagerFunction()
{
  return (id)classHMHomeManager;
}

Class initHMHomeManager()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_728);
  }
  Class result = objc_getClass("HMHomeManager");
  classHMHomeManager = (uint64_t)result;
  getHMHomeManagerClass[0] = (uint64_t (*)())HMHomeManagerFunction;
  return result;
}

void *__HomeKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
  HomeKitLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t HMHomeManagerPreferencesChangedNotificationFunction()
{
  return constantValHMHomeManagerPreferencesChangedNotification;
}

uint64_t initValHMHomeManagerPreferencesChangedNotification()
{
  if (HomeKitLibrary_sOnce != -1) {
    dispatch_once(&HomeKitLibrary_sOnce, &__block_literal_global_728);
  }
  id v0 = (uint64_t *)dlsym((void *)HomeKitLibrary_sLib, "HMHomeManagerPreferencesChangedNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValHMHomeManagerPreferencesChangedNotification = result;
  }

  else
  {
    uint64_t result = constantValHMHomeManagerPreferencesChangedNotification;
  }

  getHMHomeManagerPreferencesChangedNotification[0] = HMHomeManagerPreferencesChangedNotificationFunction;
  return result;
}

LABEL_69:
        [v8 setObject:MEMORY[0x189604A88] forKeyedSubscript:*MEMORY[0x18960BE18]];
        if ((a3 & 0x20000) == 0) {
          goto LABEL_63;
        }
        goto LABEL_62;
      }

      if (a4)
      {
        if (v31) {
          uint64_t v24 = v31;
        }
        else {
          uint64_t v24 = 4294960596LL;
        }
        NSErrorWithOSStatusF((const char *)v24);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }

      uint64_t v11 = 0LL;
LABEL_65:

LABEL_66:
      return v11;
    default:
      if (a4)
      {
        NSErrorWithOSStatusF((const char *)0xFFFFE5CFLL);
        uint64_t v11 = 0LL;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        uint64_t v11 = 0LL;
      }

      goto LABEL_66;
  }

  uint64_t v52 = (const void *)*MEMORY[0x18960BA88];
  uint64_t v53 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v8, v52, v53, 0LL);
  char v54 = (void *)objc_claimAutoreleasedReturnValue();
  if (v54) {
    objc_storeStrong((id *)&self->_type, v54);
  }

  int v55 = (const void *)*MEMORY[0x18960B918];
  uint64_t v56 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v8, v55, v56, 0LL);
  int v57 = (void *)objc_claimAutoreleasedReturnValue();
  if (v57) {
    objc_storeStrong((id *)&self->_userDescription, v57);
  }

  uint64_t v58 = (const void *)*MEMORY[0x18960BAA0];
  uint64_t v59 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v8, v58, v59, 0LL);
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue();
  if (v60) {
    objc_storeStrong((id *)&self->_viewHint, v60);
  }

  uint64_t v49 = 1;
LABEL_76:

  return v49;
}

  if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a1 + 40) = 0;
    dispatch_resume(*(dispatch_object_t *)(a1 + 32));
  }

LABEL_64:
        uint64_t v47 = (objc_class *)objc_opt_class();
        NSStringFromClass(v47);
        id v48 = (void *)objc_claimAutoreleasedReturnValue();
        NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
        *a5 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_65;
      }

      int v69 = @"_legacyData";
      int v70 = v15;
      uint64_t v31 = [MEMORY[0x189603F68] dictionaryWithObjects:&v70 forKeys:&v69 count:1];

      uint64_t v29 = (NSDictionary *)v31;
    }

    metadata = self->_metadata;
    self->_metadata = v29;
  }

  uint64_t v33 = (const void *)*MEMORY[0x18960B9F8];
  float v34 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v8, v33, v34, 0LL);
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (v35) {
    objc_storeStrong((id *)&self->_name, v35);
  }

  int v36 = (const void *)*MEMORY[0x18960BE80];
  uint64_t v37 = CFDataGetTypeID();
  CFDictionaryGetTypedValue(v8, v36, v37, 0LL);
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (v38) {
    objc_storeStrong((id *)&self->_persistentRef, v38);
  }

  uint64_t v39 = (const void *)*MEMORY[0x18960BE78];
  uint64_t v40 = CFDataGetTypeID();
  CFDictionaryGetTypedValue(v8, v39, v40, 0LL);
  char v41 = (void *)objc_claimAutoreleasedReturnValue();
  char v15 = v41;
  if (v41 && [v41 length])
  {
    uint64_t v29 = (NSDictionary *)OPACKDecodeData((const __CFData *)v15, 8, &v62);
    if (v29)
    {
LABEL_61:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if ((v6 & 4) == 0)
        {
          if (!a5) {
            goto LABEL_65;
          }
          goto LABEL_64;
        }

        uint64_t v63 = @"_legacyData";
        int v64 = v15;
        uint64_t v50 = [MEMORY[0x189603F68] dictionaryWithObjects:&v64 forKeys:&v63 count:1];

        uint64_t v29 = (NSDictionary *)v50;
      }

      secrets = self->_secrets;
      self->_secrets = v29;

      goto LABEL_69;
    }

    if ((v6 & 4) == 0)
    {
      if (a5)
      {
        if (v62) {
          uint64_t v30 = v62;
        }
        else {
          uint64_t v30 = 4294960534LL;
        }
        goto LABEL_52;
      }

  if (self->_trafficFlagsUnavailable != trafficFlagsUnavailable)
  {
    trafficFlagsUnavailableUpdatedHandler = (void (**)(void))self->_trafficFlagsUnavailableUpdatedHandler;
    if (trafficFlagsUnavailableUpdatedHandler) {
      trafficFlagsUnavailableUpdatedHandler[2]();
    }
    -[CUWiFiManager _updateWiFiState](self, "_updateWiFiState");
  }
}

            if (*(int *)(a1 + 64) <= 19)
            {
              uint64_t v32 = malloc(0x20uLL);
              if (v32)
              {
                uint64_t v33 = v32;
                *(void *)uint64_t v9 = 0LL;
                v32[1] = mach_absolute_time();
                v33[2] = v9;
                *((_DWORD *)v33 + 6) = 1;
                *uint64_t v33 = *v27;
                *uint64_t v27 = v33;
                ++*(_DWORD *)(a1 + 64);
                return;
              }
            }
          }
        }
      }
    }

                  if (v12 <= 255) {
                    __src[v12++] = v17;
                  }
                  continue;
                }

                uint64_t v13 = 0LL;
                uint64_t v14 = 0;
LABEL_37:
                LOBYTE(v17) = 92;
                goto LABEL_64;
              }

              break;
            }

            if (v17 != 92)
            {
              uint64_t v13 = 0LL;
              uint64_t v14 = 0;
              if (v17 == 34) {
                continue;
              }
              goto LABEL_63;
            }

            break;
          }

          if (v15 < (const char *)v9)
          {
            uint64_t v17 = *(unsigned __int8 *)v15;
            if (v17 == 10)
            {
              uint64_t v13 = 0LL;
              char v15 = v8 + 2;
              goto LABEL_29;
            }

            if (v17 == 92 || v17 == 34)
            {
              uint64_t v13 = 0LL;
              char v15 = v8 + 2;
LABEL_63:
              uint64_t v14 = 1;
              goto LABEL_64;
            }

            if ((v17 & 0xFFFFFFDF) == 0x58)
            {
              char v15 = v8 + 2;
              if (v9 - (unsigned __int8 *)(v8 + 2) < 2
                || (uint64_t v22 = *(unsigned __int8 *)v15, (*(_DWORD *)(v7 + 4 * v22 + 60) & 0x10000) == 0)
                || (uint64_t v23 = *((unsigned __int8 *)v8 + 3), (*(_DWORD *)(v7 + 4 * v23 + 60) & 0x10000) == 0))
              {
                uint64_t v13 = 0LL;
                goto LABEL_63;
              }

              uint64_t v27 = v22 - 48;
              if ((v22 - 48) >= 0xA)
              {
                if ((v22 - 65) > 5)
                {
                  else {
                    uint64_t v27 = v22 - 87;
                  }
                }

                else
                {
                  uint64_t v27 = v22 - 55;
                }
              }

              uint64_t v31 = v23 - 48;
              if ((v23 - 48) >= 0xA)
              {
                if ((v23 - 65) > 5)
                {
                  uint64_t v32 = v23 - 97;
                  uint64_t v33 = v23 - 87;
                  if (v32 >= 6) {
                    uint64_t v31 = 0;
                  }
                  else {
                    uint64_t v31 = v33;
                  }
                }

                else
                {
                  uint64_t v31 = v23 - 55;
                }
              }

              uint64_t v13 = 0LL;
              LOBYTE(v17) = v31 | (16 * v27);
LABEL_93:
              char v15 = v8 + 4;
              goto LABEL_63;
            }

            uint64_t v13 = 0LL;
            uint64_t v14 = 1;
            uint64_t v24 = v8[2];
            if ((v24 & 0xF8) == 0x30)
            {
              uint64_t v25 = v8[3];
              if ((v25 & 0xF8) == 0x30)
              {
                uint64_t v13 = 0LL;
                LOBYTE(v17) = (8 * v24) ^ 0x80 | ((_BYTE)v17 << 6) | (v25 - 48);
                goto LABEL_93;
              }
            }
          }

          uint64_t v13 = 0LL;
          LOBYTE(v17) = 92;
          goto LABEL_63;
        }
      }

      else if ((*(_DWORD *)(v7 + 4 * v11 + 60) & 0x4000) == 0)
      {
        goto LABEL_11;
      }

      ++v8;
      --v10;
    }

    while (v10);
  }

  int v36 = v45;
  if (v47)
  {
    uint64_t v37 = v44;
  }

  else
  {
    if (v45 <= 1) {
      uint64_t v38 = 1LL;
    }
    else {
      uint64_t v38 = v45;
    }
    uint64_t v39 = malloc(v38);
    if (!v39) {
      return 4294960568LL;
    }
    uint64_t v37 = v39;
    if (v36) {
      memcpy(v39, v44, v36);
    }
  }

  uint64_t v40 = 0LL;
  int v44 = (void *)v43[0];
  *a2 = v37;
  *a3 = v36;
  return v40;
}

  return v64;
}

id WiFiAwareDataSessionFunction()
{
  return (id)classWiFiAwareDataSession;
}

Class initWiFiAwareDataSession()
{
  if (WiFiPeerToPeerLibrary_sOnce != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce, &__block_literal_global_4625);
  }
  Class result = objc_getClass("WiFiAwareDataSession");
  classWiFiAwareDataSession = (uint64_t)result;
  getWiFiAwareDataSessionClass = (uint64_t (*)())WiFiAwareDataSessionFunction;
  return result;
}

id WiFiAwareInternetSharingConfigurationFunction()
{
  return (id)classWiFiAwareInternetSharingConfiguration;
}

Class initWiFiAwareInternetSharingConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce, &__block_literal_global_4625);
  }
  Class result = objc_getClass("WiFiAwareInternetSharingConfiguration");
  classWiFiAwareInternetSharingConfiguration = (uint64_t)result;
  getWiFiAwareInternetSharingConfigurationClass = (uint64_t (*)())WiFiAwareInternetSharingConfigurationFunction;
  return result;
}

void *__WiFiPeerToPeerLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib = (uint64_t)result;
  return result;
}

void CUNANMockRemovePublisher(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
  [(id)gCUNANMockPublishers objectForKeyedSubscript:v3];
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v5 containsObject:v4])
  {
    [v5 removeObject:v4];
    if (![v5 count]) {
      [(id)gCUNANMockPublishers setObject:0 forKeyedSubscript:v3];
    }
    [v4 mockEndpoint];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      objc_msgSend((id)gCUNANMockSubscribers, "objectForKeyedSubscript:", v3, 0);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v13;
        do
        {
          uint64_t v11 = 0LL;
          do
          {
            if (*(void *)v13 != v10) {
              objc_enumerationMutation(v7);
            }
            [*(id *)(*((void *)&v12 + 1) + 8 * v11++) reportMockEndpointLost:v6];
          }

          while (v9 != v11);
          uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }

        while (v9);
      }
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
  }
}

void CUNANMockRemoveSubscriber(void *a1, void *a2)
{
  id v5 = a1;
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&gCUNANMockLock);
  [(id)gCUNANMockSubscribers objectForKeyedSubscript:v5];
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 removeObject:v3];

  if (![v4 count]) {
    [(id)gCUNANMockSubscribers setObject:0 forKeyedSubscript:v5];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&gCUNANMockLock);
}

id _WiFiAwareCreateEndpointIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 length] == 6)
  {
    [v1 bytes];
    NSPrintF();
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

void sub_186A97E3C(_Unwind_Exception *a1)
{
}

void sub_186A993AC(_Unwind_Exception *a1)
{
}

void sub_186A99914(_Unwind_Exception *a1)
{
}

id WiFiAwarePublishServiceSpecificInfoFunction()
{
  return (id)classWiFiAwarePublishServiceSpecificInfo;
}

Class initWiFiAwarePublishServiceSpecificInfo()
{
  if (WiFiPeerToPeerLibrary_sOnce_4841 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4841, &__block_literal_global_250);
  }
  Class result = objc_getClass("WiFiAwarePublishServiceSpecificInfo");
  classWiFiAwarePublishServiceSpecificInfo = (uint64_t)result;
  getWiFiAwarePublishServiceSpecificInfoClass = (uint64_t (*)())WiFiAwarePublishServiceSpecificInfoFunction;
  return result;
}

void *__WiFiPeerToPeerLibrary_block_invoke_4843()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib_4845 = (uint64_t)result;
  return result;
}

void sub_186A9A298(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__4847(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__4848(uint64_t a1)
{
}

id WiFiAwarePublishConfigurationFunction()
{
  return (id)classWiFiAwarePublishConfiguration;
}

Class initWiFiAwarePublishConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce_4841 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4841, &__block_literal_global_250);
  }
  Class result = objc_getClass("WiFiAwarePublishConfiguration");
  classWiFiAwarePublishConfiguration = (uint64_t)result;
  getWiFiAwarePublishConfigurationClass = (uint64_t (*)())WiFiAwarePublishConfigurationFunction;
  return result;
}

id WiFiAwareInternetSharingConfigurationFunction_4870()
{
  return (id)classWiFiAwareInternetSharingConfiguration_4881;
}

Class initWiFiAwareInternetSharingConfiguration_4871()
{
  if (WiFiPeerToPeerLibrary_sOnce_4841 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4841, &__block_literal_global_250);
  }
  Class result = objc_getClass("WiFiAwareInternetSharingConfiguration");
  classWiFiAwareInternetSharingConfiguration_4881 = (uint64_t)result;
  getWiFiAwareInternetSharingConfigurationClass_4869 = (uint64_t (*)())WiFiAwareInternetSharingConfigurationFunction_4870;
  return result;
}

id WiFiAwarePublishDatapathConfigurationFunction()
{
  return (id)classWiFiAwarePublishDatapathConfiguration;
}

Class initWiFiAwarePublishDatapathConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce_4841 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4841, &__block_literal_global_250);
  }
  Class result = objc_getClass("WiFiAwarePublishDatapathConfiguration");
  classWiFiAwarePublishDatapathConfiguration = (uint64_t)result;
  getWiFiAwarePublishDatapathConfigurationClass = (uint64_t (*)())WiFiAwarePublishDatapathConfigurationFunction;
  return result;
}

id WiFiAwarePublishDatapathServiceSpecificInfoFunction()
{
  return (id)classWiFiAwarePublishDatapathServiceSpecificInfo;
}

Class initWiFiAwarePublishDatapathServiceSpecificInfo()
{
  if (WiFiPeerToPeerLibrary_sOnce_4841 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4841, &__block_literal_global_250);
  }
  Class result = objc_getClass("WiFiAwarePublishDatapathServiceSpecificInfo");
  classWiFiAwarePublishDatapathServiceSpecificInfo = (uint64_t)result;
  getWiFiAwarePublishDatapathServiceSpecificInfoClass = (uint64_t (*)())WiFiAwarePublishDatapathServiceSpecificInfoFunction;
  return result;
}

id WiFiAwarePublisherFunction()
{
  return (id)classWiFiAwarePublisher;
}

Class initWiFiAwarePublisher()
{
  if (WiFiPeerToPeerLibrary_sOnce_4841 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_4841, &__block_literal_global_250);
  }
  Class result = objc_getClass("WiFiAwarePublisher");
  classWiFiAwarePublisher = (uint64_t)result;
  getWiFiAwarePublisherClass = (uint64_t (*)())WiFiAwarePublisherFunction;
  return result;
}

void sub_186A9ADA0(_Unwind_Exception *a1)
{
}

id WiFiMACAddressFunction()
{
  return (id)classWiFiMACAddress;
}

Class initWiFiMACAddress()
{
  if (WiFiPeerToPeerLibrary_sOnce_5137 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5137, &__block_literal_global_5138);
  }
  Class result = objc_getClass("WiFiMACAddress");
  classWiFiMACAddress = (uint64_t)result;
  getWiFiMACAddressClass = (uint64_t (*)())WiFiMACAddressFunction;
  return result;
}

void *__WiFiPeerToPeerLibrary_block_invoke_5140()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib_5141 = (uint64_t)result;
  return result;
}

void sub_186A9D2E0(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__5162(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5163(uint64_t a1)
{
}

id WiFiAwareSubscribeConfigurationFunction()
{
  return (id)classWiFiAwareSubscribeConfiguration;
}

Class initWiFiAwareSubscribeConfiguration()
{
  if (WiFiPeerToPeerLibrary_sOnce_5137 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5137, &__block_literal_global_5138);
  }
  Class result = objc_getClass("WiFiAwareSubscribeConfiguration");
  classWiFiAwareSubscribeConfiguration = (uint64_t)result;
  getWiFiAwareSubscribeConfigurationClass = (uint64_t (*)())WiFiAwareSubscribeConfigurationFunction;
  return result;
}

id WiFiAwareSubscriberFunction()
{
  return (id)classWiFiAwareSubscriber;
}

Class initWiFiAwareSubscriber()
{
  if (WiFiPeerToPeerLibrary_sOnce_5137 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_5137, &__block_literal_global_5138);
  }
  Class result = objc_getClass("WiFiAwareSubscriber");
  classWiFiAwareSubscriber = (uint64_t)result;
  getWiFiAwareSubscriberClass = (uint64_t (*)())WiFiAwareSubscriberFunction;
  return result;
}

void sub_186A9E238( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

LABEL_58:
    self->_flags = v23;
    uint64_t v47 = _Block_copy(self->_flagsChangedHandler);
    id v48 = v47;
    if (v47) {
      (*((void (**)(void *))v47 + 2))(v47);
    }

    goto LABEL_61;
  }

  self->_flags = v23;
LABEL_61:

  v20[2](v20);
  v7[2](v7);
}

                int v46 = (NSString *)_Block_copy(self->_primaryNetworkChangedHandler);
                uint64_t v40 = v46;
                if (v46) {
                  ((void (*)(NSString *))v46[2])(v46);
                }
                goto LABEL_60;
              }

    uint64_t v19 = 0LL;
    goto LABEL_26;
  }

  uint64_t v19 = v14;
  name = nw_interface_get_name(v14);
  if (!name)
  {
    float v34 = self->_ucat;
    if (v34->var0 <= 90)
    {
      if (v34->var0 == -1)
      {
        float v34 = self->_ucat;
      }

      LogPrintF_safe( (uint64_t)v34,  (uint64_t)"-[CUNetInterfaceMonitor _primaryIPChangedNW:]",  0x5Au,  (uint64_t)"### No interface name",  v21,  v22,  v23,  v24,  v48);
    }

  uint64_t v42 = Bytes;
  if (Bytes)
  {
    char v43 = *(int **)(a1 + 16);
    int v44 = *v43;
    if (*v43 <= 50)
    {
      if (v44 == -1)
      {
        int v46 = _LogCategory_Initialize(*(void *)(a1 + 16), 0x32u);
        uint64_t v42 = Bytes;
        if (!v46) {
          return v42;
        }
        char v43 = *(int **)(a1 + 16);
        int v44 = *v43;
      }

      uint64_t v45 = *v15;
      if (v44 == -1) {
        _LogCategory_Initialize((uint64_t)v43, 0x28u);
      }
      LogPrintF( (uint64_t)v43,  (uint64_t)"OSStatus _ResumePairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"### Pair-resume client state %d failed: %#m\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  (uint64_t)a6,  a7,  a8,  v45);
      return Bytes;
    }
  }

  return v42;
}

  uint64_t v28 = v31;
  do
  {
    *v28++ = (v18 % 0xA) | 0x30;
    __int128 v12 = v18 > 9;
    v18 /= 0xAu;
  }

  while (v12);
  while (v28 > v31)
  {
    uint64_t v29 = *--v28;
    *v10++ = v29;
  }

  if (!a2) {
    *v10++ = 115;
  }
LABEL_64:
  *uint64_t v10 = 0;
  return ((_DWORD)v10 - (_DWORD)a3);
}

      int v20 = -[__CFString unsignedLongLongValue](v5, "unsignedLongLongValue");
      goto LABEL_68;
    case 's':
      if (strcasecmp(a1, "sa")) {
        goto LABEL_48;
      }
      uint64_t v8 = v5;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0) {
        goto LABEL_44;
      }
      goto LABEL_81;
    case 't':
      if (strcasecmp(a1, "truefalse")) {
        goto LABEL_48;
      }
      uint64_t v10 = CFGetInt64(v5, 0LL);
      uint64_t v11 = "true";
      __int128 v12 = "false";
      goto LABEL_60;
    case 'u':
      if (strcasecmp(a1, "uuid")) {
        goto LABEL_48;
      }
      uint64_t v8 = v5;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_81:
        uint64_t v6 = 0LL;
        goto LABEL_80;
      }

      if (-[__CFString length](v8, "length") != 16) {
        goto LABEL_78;
      }
LABEL_44:
      uint64_t v8 = v8;
      int v20 = -[__CFString bytes](v8, "bytes");
      goto LABEL_54;
    case 'x':
      if (strcasecmp(a1, "xpc")) {
        goto LABEL_48;
      }
      int v20 = (uint64_t)v5;
      goto LABEL_68;
    case 'y':
      if (strcasecmp(a1, "yesno")) {
        goto LABEL_48;
      }
      uint64_t v10 = CFGetInt64(v5, 0LL);
      uint64_t v11 = "yes";
      __int128 v12 = "no";
      goto LABEL_60;
    default:
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      if (*a1 != 52) {
        goto LABEL_74;
      }
      if (strcasecmp(a1, "4cc")) {
        goto LABEL_48;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        uint64_t v8 = v5;
        if (-[__CFString length](v8, "length") != 4)
        {
LABEL_78:
          uint64_t v6 = 0LL;
          uint64_t v9 = 0LL;
          uint64_t v7 = -6743;
          goto LABEL_74;
        }

        uint64_t v8 = v8;
        int v20 = *(unsigned int *)-[__CFString bytes](v8, "bytes");
LABEL_54:
        NSPrintF();
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_70;
      }

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        int v20 = -[__CFString unsignedIntValue](v5, "unsignedIntValue");
LABEL_68:
        NSPrintF();
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_69:
        uint64_t v8 = 0LL;
LABEL_70:
        if (v6)
        {
          uint64_t v9 = (id)objc_msgSend(objc_alloc(MEMORY[0x1896077E0]), "initWithString:", v6, v20);

          if (v9) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = -6700;
          }
        }

        else
        {
LABEL_49:
          uint64_t v9 = 0LL;
          uint64_t v7 = -6717;
        }

        goto LABEL_74;
      }

void sub_186A9E89C(_Unwind_Exception *a1)
{
}

void _networkInterfacesChanged(uint64_t a1, char a2, void *a3)
{
  id v4 = a3;
  if (*((void *)v4 + 3))
  {
    uint64_t v10 = v4;
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v4 + 6));
    uint64_t v9 = (int *)v10[4];
    if (*v9 <= 10)
    {
      if (*v9 == -1)
      {
        uint64_t v9 = (int *)v10[4];
      }

      LogPrintF( (uint64_t)v9,  (uint64_t)"void _networkInterfacesChanged(SCDynamicStoreRef, CFArrayRef, void *)",  0xAu,  (uint64_t)"Network interfaces changed: %##@\n",  v5,  v6,  v7,  v8,  a2);
    }

LABEL_70:
  uint64_t v52 = dispatch_source_create(MEMORY[0x1895F8B60], v14, 0LL, (dispatch_queue_t)self->_dispatchQueue);
  if (v52)
  {
    int v57 = v52;
    uint64_t v58 = (void **)&(&self->super.isa)[v10];
    uint64_t v59 = MEMORY[0x1895F87A8];
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 3221225472LL;
    handler[2] = __40__CUNetLinkManager__monitorSetupSocket___block_invoke;
    handler[3] = &unk_189F32F60;
    void handler[4] = self;
    uint64_t v65 = v14;
    dispatch_source_set_event_handler(v52, handler);
    v63[0] = v59;
    v63[1] = 3221225472LL;
    v63[2] = __40__CUNetLinkManager__monitorSetupSocket___block_invoke_2;
    v63[3] = &unk_189F32BE8;
    v63[5] = (char *)self + v11 * 8;
    uint8_t v63[6] = v58;
    v63[4] = self;
    dispatch_source_set_cancel_handler(v57, v63);
    dispatch_activate(v57);
    LODWORD((&self->super.isa)[v11]) = v14;
    uint64_t v60 = *v58;
    unsigned int *v58 = v57;
    unsigned int v61 = v57;

    return;
  }

  int v62 = self->_ucat;
  if (v62->var0 <= 90)
  {
    if (v62->var0 == -1)
    {
      int v62 = self->_ucat;
    }

    LogPrintF( (uint64_t)v62,  (uint64_t)"-[CUNetLinkManager _monitorSetupSocket:]",  0x5Au,  (uint64_t)"### Probe socket create read source failed (%s): %#m\n",  v53,  v54,  v55,  v56,  (char)v9);
  }

    return;
  }

  if (v14 == 1)
  {
    uint64_t v16 = _Block_copy(self->_sleepWakeHandler);
    if (v16)
    {
      uint64_t v17 = (void (*)(void))v16[2];
      uint64_t v32 = v16;
      goto LABEL_76;
    }

    goto LABEL_77;
  }

  if (v14 == 3)
  {
    uint64_t v18 = self->_powerCnx;
    if (v18)
    {
      if (IOAllowPowerChange(v18, (intptr_t)a5))
      {
        uint64_t v23 = self->_ucat;
        if (v23->var0 <= 90)
        {
          if (v23->var0 == -1)
          {
            uint64_t v23 = self->_ucat;
          }

          LogPrintF( (uint64_t)v23,  (uint64_t)"-[CUSleepWakeMonitor _sleepWakeHandlerForService:type:arg:]",  0x5Au,  (uint64_t)"### Ack failed (%s): %#m\n",  v19,  v20,  v21,  v22,  (char)v12);
        }
      }
    }
  }

  CFIndex Bytes = v30;
LABEL_56:
  *a6 = 0;
  if (v66)
  {
    free(v66);
    uint64_t v66 = 0LL;
  }

void sub_186AA299C(_Unwind_Exception *a1)
{
}

void sub_186AA2C90(_Unwind_Exception *a1)
{
}

void sub_186AA3044( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186AA37FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_186AA4100(_Unwind_Exception *a1)
{
}

void sub_186AA4984(_Unwind_Exception *a1)
{
}

void sub_186AA5338(_Unwind_Exception *a1)
{
}

void sub_186AA55E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186AA5D54(_Unwind_Exception *a1)
{
}

void sub_186AA5DD4(_Unwind_Exception *a1)
{
}

LABEL_96:
  uint64_t v9 = v105;
  uint64_t v35 = v101;
  if (v62) {
    CFRelease(v62);
  }
  uint64_t v7 = v102;
  uint64_t v40 = v94;
  uint64_t v8 = v96;
LABEL_99:
  BOOL v88 = v122;

  return v88;
}

void sub_186AA6968(_Unwind_Exception *a1)
{
}

void sub_186AA69E8(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__5662(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5663(uint64_t a1)
{
}

id HAPSystemKeychainStoreFunction_5696()
{
  return (id)classHAPSystemKeychainStore_5699;
}

Class initHAPSystemKeychainStore_5697()
{
  if (CoreHAPLibrary_sOnce_5698 != -1) {
    dispatch_once(&CoreHAPLibrary_sOnce_5698, &__block_literal_global_335);
  }
  Class result = objc_getClass("HAPSystemKeychainStore");
  classHAPSystemKeychainStore_5699 = (uint64_t)result;
  getHAPSystemKeychainStoreClass_5695 = (uint64_t (*)())HAPSystemKeychainStoreFunction_5696;
  return result;
}

void *__CoreHAPLibrary_block_invoke_5700()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP", 2);
  CoreHAPLibrary_sLib_5701 = (uint64_t)result;
  return result;
}

id RPClientFunction()
{
  return (id)classRPClient;
}

Class initRPClient()
{
  if (RapportLibrary_sOnce_5710 != -1) {
    dispatch_once(&RapportLibrary_sOnce_5710, &__block_literal_global_5711);
  }
  Class result = objc_getClass("RPClient");
  classRPClient = (uint64_t)result;
  getRPClientClass[0] = (uint64_t (*)())RPClientFunction;
  return result;
}

void *__RapportLibrary_block_invoke_5712()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/Rapport.framework/Rapport", 2);
  RapportLibrary_sLib_5713 = (uint64_t)result;
  return result;
}

void sub_186AAB38C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t __Block_byref_object_copy__5984(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5985(uint64_t a1)
{
}

LABEL_86:
    uint64_t v47 = -6745;
    goto LABEL_87;
  }

  if (!self->_sendDataHandler && !self->_sendMessageDataHandler)
  {
    uint64_t v45 = self->_ucat;
    if (v45->var0 <= 90)
    {
      if (v45->var0 == -1)
      {
        uint64_t v45 = self->_ucat;
      }

      int v46 = "### No sendDataHandler\n";
LABEL_76:
      LogPrintF((uint64_t)v45, (uint64_t)"-[CUPairingSession _activate]", 0x5Au, (uint64_t)v46, v2, v3, v4, v5, v60);
      goto LABEL_86;
    }

    goto LABEL_86;
  }

  uint64_t v67 = 0u;
  uint64_t v66 = 0u;
  uint64_t v65 = 0u;
  int v64 = 0u;
  uint64_t v63 = self;
  if (self->_promptForPINHandler) {
    *(void *)&uint64_t v65 = _promptForPIN;
  }
  if ((self->_flags & 0x80) != 0)
  {
    *(void *)&int v64 = _showPIN;
LABEL_21:
    *((void *)&v64 + 1) = _hidePIN;
    goto LABEL_22;
  }

  if (self->_showPINHandler || self->_showPINHandlerEx) {
    *(void *)&int v64 = _showPIN;
  }
  if (self->_hidePINHandler) {
    goto LABEL_21;
  }
LABEL_22:
  p_pairingSession = (uint64_t *)&self->_pairingSession;
  uint64_t v16 = PairingSessionCreate((uint64_t *)&self->_pairingSession, (uint64_t)&v63, self->_sessionType);
  if (v16)
  {
    uint64_t v47 = v16;
    id v48 = self->_ucat;
    if (v48->var0 <= 90)
    {
      if (v48->var0 == -1)
      {
        id v48 = self->_ucat;
      }

      uint64_t v49 = self->_sessionType;
      else {
        uint64_t v50 = off_189F33D10[v49];
      }
      LogPrintF( (uint64_t)v48,  (uint64_t)"-[CUPairingSession _activate]",  0x5Au,  (uint64_t)"### Create pairing session type %s failed: %#m\n",  v17,  v18,  v19,  v20,  (char)v50);
    }
  }

  else
  {
    is_recovery = os_variant_is_recovery();
    pairingSession = self->_pairingSession;
    flags = self->_flags;
    if (!is_recovery) {
      flags |= 4u;
    }
    *((_DWORD *)pairingSession + 25) = flags;
    *((void *)pairingSession + 2) = self->_ucat;
    if (-[NSDictionary count](self->_acl, "count")) {
      PairingSessionSetACL((uint64_t)self->_pairingSession, self->_acl);
    }
    if (!-[NSString length](self->_fixedPIN, "length")
      || (uint64_t v24 = ReplaceString( (void **)self->_pairingSession + 48,  (size_t *)self->_pairingSession + 49,  (char *)-[NSString UTF8String](self->_fixedPIN, "UTF8String"),  0xFFFFFFFFFFFFFFFFLL)) == 0)
    {
      additionalPeerInfo = self->_additionalPeerInfo;
      if (additionalPeerInfo) {
        PairingSessionSetAdditionalPeerInfo(*p_pairingSession, additionalPeerInfo);
      }
      additionalSelfInfo = self->_additionalSelfInfo;
      if (additionalSelfInfo) {
        PairingSessionSetAdditionalSelfInfo(*p_pairingSession, additionalSelfInfo);
      }
      uint64_t v31 = self->_allowedMACAddresses;
      if (v31) {
        PairingSessionSetProperty(*p_pairingSession, @"allowedMACAddresses", v31);
      }

      uint64_t v32 = self->_appInfoSelf;
      if (v32) {
        PairingSessionSetProperty(*p_pairingSession, @"appInfoSelf", v32);
      }

      uint64_t v33 = self->_groupInfoSelf;
      if (v33) {
        PairingSessionSetProperty(*p_pairingSession, @"groupInfoSelf", v33);
      }

      if (self->_pinType) {
        PairingSessionSetProperty( *p_pairingSession,  @"setupCodeType",  (void *)objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:"));
      }
      myAppleID = self->_myAppleID;
      if (myAppleID) {
        PairingSessionSetMyAppleID(*p_pairingSession, myAppleID);
      }
      myAppleIDInfoClient = self->_myAppleIDInfoClient;
      if (myAppleIDInfoClient) {
        PairingSessionSetMyAppleIDInfoClient(*p_pairingSession, myAppleIDInfoClient);
      }
      peerAppleID = self->_peerAppleID;
      if (peerAppleID) {
        PairingSessionSetPeerAppleID(*p_pairingSession, peerAppleID);
      }
      selfAppFlags = self->_selfAppFlags;
      if (selfAppFlags) {
        *(void *)(*p_pairingSession + 20_Block_object_dispose((const void *)(v9 - 96), 8) = selfAppFlags;
      }
      uint64_t v38 = MEMORY[0x1895F87A8];
      if (self->_signDataHandler)
      {
        uint64_t v39 = self->_pairingSession;
        v62[0] = MEMORY[0x1895F87A8];
        v62[1] = 3221225472LL;
        v62[2] = __29__CUPairingSession__activate__block_invoke;
        v62[3] = &unk_189F31820;
        v62[4] = self;
        PairingSessionSetSignBytesHandler_b((uint64_t)v39, v62);
      }

      if (self->_verifySignatureHandler)
      {
        uint64_t v40 = self->_pairingSession;
        v61[0] = v38;
        v61[1] = 3221225472LL;
        v61[2] = __29__CUPairingSession__activate__block_invoke_2;
        v61[3] = &unk_189F31820;
        v61[4] = self;
        PairingSessionSetVerifySignatureHandler_b((uint64_t)v40, v61);
      }

      char v41 = _Block_copy(self->_copyIdentityHandler);
      if (v41) {
        PairingSessionSetCopyIdentityHandler_b(*p_pairingSession, v41);
      }

      uint64_t v42 = _Block_copy(self->_findPeerHandler);
      if (v42) {
        PairingSessionSetFindPeerHandler_b(*p_pairingSession, v42);
      }

      char v43 = _Block_copy(self->_savePeerHandler);
      if (v43) {
        PairingSessionSetSavePeerHandler_b(*p_pairingSession, v43);
      }

      int v44 = self->_sessionType;
      if (v44 <= 0xD && ((1 << v44) & 0x2A2A) != 0) {
        -[CUPairingSession _receivedData:flags:](self, "_receivedData:flags:", 0LL, 1LL);
      }
      return;
    }

    uint64_t v47 = v24;
    int v51 = self->_ucat;
    if (v51->var0 <= 90)
    {
      if (v51->var0 == -1)
      {
        int v51 = self->_ucat;
      }

      LogPrintF( (uint64_t)v51,  (uint64_t)"-[CUPairingSession _activate]",  0x5Au,  (uint64_t)"### Set fixed PIN failed: %#m\n",  v25,  v26,  v27,  v28,  v47);
    }
  }

id PBSSystemServiceConnectionFunction()
{
  return (id)classPBSSystemServiceConnection;
}

Class initPBSSystemServiceConnection()
{
  if (PineBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&PineBoardServicesLibrary_sOnce, &__block_literal_global_535);
  }
  Class result = objc_getClass("PBSSystemServiceConnection");
  classPBSSystemServiceDNSServiceErrorType Connection = (uint64_t)result;
  getPBSSystemServiceConnectionClass[0] = (uint64_t (*)())PBSSystemServiceConnectionFunction;
  return result;
}

id PBSMediaRemoteServiceDialogOptionMessageKeyFunction()
{
  return (id)constantValPBSMediaRemoteServiceDialogOptionMessageKey;
}

id initValPBSMediaRemoteServiceDialogOptionMessageKey()
{
  if (PineBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&PineBoardServicesLibrary_sOnce, &__block_literal_global_535);
  }
  id v0 = (id *)dlsym((void *)PineBoardServicesLibrary_sLib, "PBSMediaRemoteServiceDialogOptionMessageKey");
  if (v0) {
    objc_storeStrong((id *)&constantValPBSMediaRemoteServiceDialogOptionMessageKey, *v0);
  }
  getPBSMediaRemoteServiceDialogOptionMessageKey[0] = (uint64_t (*)())PBSMediaRemoteServiceDialogOptionMessageKeyFunction;
  return (id)constantValPBSMediaRemoteServiceDialogOptionMessageKey;
}

id PBSMediaRemoteServiceDialogOptionPINKeyFunction()
{
  return (id)constantValPBSMediaRemoteServiceDialogOptionPINKey;
}

id initValPBSMediaRemoteServiceDialogOptionPINKey()
{
  if (PineBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&PineBoardServicesLibrary_sOnce, &__block_literal_global_535);
  }
  id v0 = (id *)dlsym((void *)PineBoardServicesLibrary_sLib, "PBSMediaRemoteServiceDialogOptionPINKey");
  if (v0) {
    objc_storeStrong((id *)&constantValPBSMediaRemoteServiceDialogOptionPINKey, *v0);
  }
  getPBSMediaRemoteServiceDialogOptionPINKey[0] = (uint64_t (*)())PBSMediaRemoteServiceDialogOptionPINKeyFunction;
  return (id)constantValPBSMediaRemoteServiceDialogOptionPINKey;
}

id PBSMediaRemoteServiceDialogOptionTimeoutKeyFunction()
{
  return (id)constantValPBSMediaRemoteServiceDialogOptionTimeoutKey;
}

id initValPBSMediaRemoteServiceDialogOptionTimeoutKey()
{
  if (PineBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&PineBoardServicesLibrary_sOnce, &__block_literal_global_535);
  }
  id v0 = (id *)dlsym((void *)PineBoardServicesLibrary_sLib, "PBSMediaRemoteServiceDialogOptionTimeoutKey");
  if (v0) {
    objc_storeStrong((id *)&constantValPBSMediaRemoteServiceDialogOptionTimeoutKey, *v0);
  }
  getPBSMediaRemoteServiceDialogOptionTimeoutKey[0] = (uint64_t (*)())PBSMediaRemoteServiceDialogOptionTimeoutKeyFunction;
  return (id)constantValPBSMediaRemoteServiceDialogOptionTimeoutKey;
}

id PBSMediaRemoteServiceDialogOptionTitleKeyFunction()
{
  return (id)constantValPBSMediaRemoteServiceDialogOptionTitleKey;
}

id initValPBSMediaRemoteServiceDialogOptionTitleKey()
{
  if (PineBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&PineBoardServicesLibrary_sOnce, &__block_literal_global_535);
  }
  id v0 = (id *)dlsym((void *)PineBoardServicesLibrary_sLib, "PBSMediaRemoteServiceDialogOptionTitleKey");
  if (v0) {
    objc_storeStrong((id *)&constantValPBSMediaRemoteServiceDialogOptionTitleKey, *v0);
  }
  getPBSMediaRemoteServiceDialogOptionTitleKey[0] = (uint64_t (*)())PBSMediaRemoteServiceDialogOptionTitleKeyFunction;
  return (id)constantValPBSMediaRemoteServiceDialogOptionTitleKey;
}

void *__PineBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices", 2);
  PineBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t _promptForPIN(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 16));
  uint64_t v6 = (const __CFString *)PairingSessionCopyProperty(*((void *)v5 + 1), @"setupCodeType", 0LL);
  int v7 = CFGetInt64(v6, &v17);
  if (v7) {
    int v12 = v7;
  }
  else {
    int v12 = 2;
  }
  *((_DWORD *)v5 + 16) = v12;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v13 = (int *)*((void *)v5 + 3);
  if (*v13 <= 30)
  {
    if (*v13 == -1)
    {
      uint64_t v13 = (int *)*((void *)v5 + 3);
    }

    LogPrintF( (uint64_t)v13,  (uint64_t)"OSStatus _promptForPIN(PairingFlags, int32_t, void * _Nonnull)",  0x1Eu,  (uint64_t)"Prompt for PIN: %#{flags}, Type %s, %d throttle seconds\n",  v8,  v9,  v10,  v11,  a1);
  }

uint64_t _showPIN(uint64_t a1, _BYTE *a2, unint64_t a3, void *a4)
{
  id v7 = a4;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v7 + 16));
  if (*((_DWORD *)v7 + 15)) {
    int v12 = *((_DWORD *)v7 + 15);
  }
  else {
    int v12 = 2;
  }
  switch(v12)
  {
    case 1:
      if (a3 < 5) {
        goto LABEL_52;
      }
      uint64_t v13 = 4LL;
      uint64_t v14 = 4LL;
      goto LABEL_22;
    case 2:
      if (a3 < 7) {
        goto LABEL_52;
      }
      uint64_t v13 = 6LL;
      uint64_t v14 = 6LL;
      goto LABEL_22;
    case 3:
      if (a3 < 9) {
        goto LABEL_52;
      }
      uint64_t v13 = 8LL;
      uint64_t v14 = 8LL;
      goto LABEL_22;
    case 6:
      if (a3 < 8)
      {
LABEL_52:
        uint64_t v28 = 4294960553LL;
      }

      else
      {
        RandomString((uint64_t)"123456789", 9uLL, 1LL, 1LL, a2);
        uint64_t v16 = a2 + 1;
        uint64_t v13 = 6LL;
        uint64_t v14 = 6LL;
LABEL_23:
        RandomString((uint64_t)"0123456789", 0xAuLL, v13, v14, v16);
        *((_DWORD *)v7 + 16) = v12;
        if ((*((_BYTE *)v7 + 52) & 0x80) == 0)
        {
          uint64_t v23 = (int *)*((void *)v7 + 3);
          if (*v23 > 30) {
            goto LABEL_37;
          }
          if (*v23 == -1)
          {
            uint64_t v23 = (int *)*((void *)v7 + 3);
          }

          if (IsAppleInternalBuild_sOnce != -1)
          {
            uint64_t v37 = v23;
            dispatch_once(&IsAppleInternalBuild_sOnce, &__block_literal_global_85);
            uint64_t v23 = v37;
          }

          if (IsAppleInternalBuild_sIsInternal) {
            LOBYTE(v24) = (_BYTE)a2;
          }
          else {
            uint64_t v24 = "*";
          }
          LogPrintF( (uint64_t)v23,  (uint64_t)"OSStatus _showPIN(PairingFlags, char * _Nonnull, size_t, void * _Nonnull)",  0x1Eu,  (uint64_t)"Show PIN '%s'\n",  v19,  v20,  v21,  v22,  (char)v24);
LABEL_37:
          uint64_t v29 = *((void *)v7 + 32);
          if (v29)
          {
            uint64_t v30 = [NSString stringWithUTF8String:a2];
            uint64_t v31 = (void *)v30;
            if (v30) {
              uint64_t v32 = (const __CFString *)v30;
            }
            else {
              uint64_t v32 = @"?";
            }
            (*(void (**)(uint64_t, uint64_t, const __CFString *))(v29 + 16))(v29, a1, v32);
          }

          else
          {
            uint64_t v33 = *((void *)v7 + 33);
            if (!v33)
            {
LABEL_48:
              uint64_t v28 = 0LL;
              goto LABEL_51;
            }

            uint64_t v34 = [NSString stringWithUTF8String:a2];
            uint64_t v31 = (void *)v34;
            if (v34) {
              uint64_t v35 = (const __CFString *)v34;
            }
            else {
              uint64_t v35 = @"?";
            }
            (*(void (**)(uint64_t, const __CFString *))(v33 + 16))(v33, v35);
          }

          goto LABEL_48;
        }

        uint64_t v25 = [NSString stringWithUTF8String:a2];
        uint64_t v26 = (void *)v25;
        if (v25) {
          uint64_t v27 = (const __CFString *)v25;
        }
        else {
          uint64_t v27 = @"?";
        }
        uint64_t v28 = [v7 _showPINBuiltInUI:v27 useVisualPairing:(*((_DWORD *)v7 + 13) >> 8) & 1];
      }

void _hidePIN(void *a1)
{
  uint64_t v13 = a1;
  dispatch_assert_queue_V2(v13[16]);
  id v5 = v13;
  uint64_t v6 = (int *)v13[3];
  if (*v6 <= 30)
  {
    if (*v6 != -1)
    {
LABEL_3:
      LogPrintF( (uint64_t)v6,  (uint64_t)"void _hidePIN(void * _Nonnull)",  0x1Eu,  (uint64_t)"Hide PIN\n",  v1,  v2,  v3,  v4,  v12);
      id v5 = v13;
      goto LABEL_5;
    }

    BOOL v7 = _LogCategory_Initialize((uint64_t)v6, 0x1Eu);
    id v5 = v13;
    if (v7)
    {
      uint64_t v6 = (int *)v13[3];
      goto LABEL_3;
    }
  }

void sub_186AB3A50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

void sub_186AB3B48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

LABEL_91:
  if (v27 != self->_maxCapacity)
  {
    self->_maxCapacity = v27;
    v14 |= 4u;
  }

  uint64_t v65 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Name", v65, 0LL);
  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue();

  if (v66)
  {
    name = self->_name;
    uint64_t v68 = v66;
    int v69 = name;
    if (v68 == v69)
    {

      goto LABEL_101;
    }

    int v70 = v69;
    if (v69)
    {
      id v71 = -[NSString isEqual:](v68, "isEqual:", v69);

      if ((v71 & 1) != 0) {
        goto LABEL_101;
      }
    }

    else
    {
    }

    objc_storeStrong((id *)&self->_name, v66);
    v14 |= 1u;
  }

      int v46 = a2;
      do
      {
        if (v46 == (unsigned __int8 *)v16)
        {
LABEL_194:
          uint64_t v78 = -6727;
          goto LABEL_229;
        }

        if ((unint64_t)v46 >= v16)
        {
          uint64_t v78 = -6705;
          goto LABEL_229;
        }

        uint64_t v47 = v46 + 2;
        id v48 = v46[1];
        if ((unint64_t)&v46[v48 + 2] > v16)
        {
          uint64_t v78 = -6750;
LABEL_229:
          uint64_t appended = v78;
          id v93 = *(void **)(a1 + 696);
          if (v93)
          {
            SRPDelete_libsrp(v93);
            *(void *)(a1 + 696) = 0LL;
          }

          id v94 = calloc(1uLL, 0x38uLL);
          if (v94)
          {
            *(void *)(a1 + 696) = v94;
            uint64_t appended = 0;
            id v95 = *(void **)(a1 + 720);
            if (v95)
            {
              free(v95);
              *(void *)(a1 + 720) = 0LL;
            }

            *(void *)(a1 + 72_Block_object_dispose((const void *)(v9 - 96), 8) = 0LL;
            *(void *)(a1 + 720) = TLV8CopyCoalesced(a2, &a2[a3], 2, (size_t *)(a1 + 728), (int *)&appended);
            if (appended) {
              goto LABEL_163;
            }
            if (*(void *)(a1 + 728) <= 0xFuLL) {
              goto LABEL_303;
            }
            __int32 v96 = *(void **)(a1 + 704);
            if (v96)
            {
              free(v96);
              *(void *)(a1 + 704) = 0LL;
            }

            *(void *)(a1 + 712) = 0LL;
            *(void *)(a1 + 704) = TLV8CopyCoalesced(a2, &a2[a3], 3, (size_t *)(a1 + 712), (int *)&appended);
            if (appended) {
              goto LABEL_163;
            }
            if (!*(void *)(a1 + 712)) {
              goto LABEL_303;
            }
            *(_DWORD *)(a1 + 28_Block_object_dispose((const void *)(v9 - 96), 8) = TLV8GetUInt64(a2, &a2[a3], 19, 0LL, 0LL);
            UCFNumberRef Int64 = TLV8GetUInt64(a2, &a2[a3], 27, 0LL, 0LL);
            if (UInt64)
            {
              CFNumberRef Int64 = (char *)CFNumberCreateInt64(UInt64);
              if (!Int64) {
                goto LABEL_369;
              }
              PairingSessionSetProperty(a1, @"setupCodeType", Int64);
              CFRelease(Int64);
            }

            *(_BYTE *)(a1 + 120) = 3;
            a5 = *(const char **)(a1 + 384);
            if (!a5 || (a6 = *(void *)(a1 + 392)) == 0)
            {
              int v98 = *(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 48);
              if (!v98)
              {
LABEL_367:
                CFNumberRef Int64 = 0LL;
                LOBYTE(v23) = 0;
                uint64_t v45 = -6745;
                goto LABEL_75;
              }

              char v99 = *(_DWORD *)(a1 + 100);
              if (*(_BYTE *)(a1 + 400)) {
                int v100 = v99 | 0x10000;
              }
              else {
                int v100 = v99;
              }
              uint64_t appended = v98(v100, 0xFFFFFFFFLL, *(void *)(a1 + 24));
              if (appended) {
                goto LABEL_163;
              }
              a5 = *(const char **)(a1 + 384);
              if (!a5 || (a6 = *(void *)(a1 + 392)) == 0)
              {
                CFNumberRef Int64 = 0LL;
                LOBYTE(v23) = 0;
                uint64_t v45 = -6771;
                goto LABEL_75;
              }
            }

LABEL_117:
  int v86 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Power Source State", v86, 0LL);
  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue();

  if (([v87 isEqual:@"AC Power"] & 1) != 0
    || [v87 isEqual:@"UPS Power"])
  {
    if (CFDictionaryGetInt64(v5, @"Is Charged", 0LL)
      || CFDictionaryGetInt64(v5, @"Is Finishing Charge", 0LL))
    {
      BOOL v88 = 3;
    }

    else
    {
      BOOL v88 = 2;
    }
  }

  else
  {
    BOOL v88 = 1;
  }

  if (v88 != self->_powerState)
  {
    self->_powerState = v88;
    v14 |= 4u;
  }

  Int64Ranged = CFDictionaryGetInt64Ranged(v5, @"Product ID", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
  if (Int64Ranged != self->_productID)
  {
    self->_productID = Int64Ranged;
    v14 |= 1u;
  }

  uint64_t v90 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Power Source State", v90, 0LL);
  uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue();

  if (v91)
  {
    state = self->_state;
    id v93 = v91;
    id v94 = state;
    if (v93 == v94)
    {

      goto LABEL_136;
    }

    id v95 = v94;
    if (v94)
    {
      __int32 v96 = -[NSString isEqual:](v93, "isEqual:", v94);

      if ((v96 & 1) != 0) {
        goto LABEL_136;
      }
    }

    else
    {
    }

    objc_storeStrong((id *)&self->_state, v91);
    v14 |= 4u;
  }

LABEL_136:
  int v97 = CFDictionaryGetInt64Ranged(v5, @"Temperature", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
  if (v97 != self->_temperature)
  {
    self->_temperature = v97;
    v14 |= 1u;
  }

  int v98 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Transport Type", v98, 0LL);
  char v99 = (void *)objc_claimAutoreleasedReturnValue();

  if (v99)
  {
    transportType = self->_transportType;
    uint64_t v101 = v99;
    __int128 v102 = transportType;
    if (v101 == v102)
    {

      goto LABEL_146;
    }

    __int128 v103 = v102;
    if (v102)
    {
      __int128 v104 = -[NSString isEqual:](v101, "isEqual:", v102);

      if ((v104 & 1) != 0) {
        goto LABEL_146;
      }
    }

    else
    {
    }

    objc_storeStrong((id *)&self->_transportType, v99);
    v14 |= 1u;
  }

          __int128 v112 = *(int **)(a1 + 56);
          if (*v112 <= 20)
          {
            if (*v112 == -1)
            {
              __int128 v112 = *(int **)(a1 + 56);
            }

            LogPrintF( (uint64_t)v112,  (uint64_t)"OSStatus _NTPClockClientProcessResponse(NTPClockRef)",  0x14u,  (uint64_t)"NTP client update: %zu\t%.3f\t%.3f\t%.9f\t%.9f\t%llu\t%llu\t%+.9f\t%+.9f%s%s%s%s\n",  v21,  v22,  v23,  v24,  v32 + 1);
          }

LABEL_146:
  __int128 v105 = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v5, @"Type", v105, 0LL);
  __int128 v106 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v106) {
    goto LABEL_154;
  }
  type = self->_type;
  __int128 v108 = v106;
  __int128 v109 = type;
  if (v108 == v109)
  {

    goto LABEL_154;
  }

  __int128 v110 = v109;
  if (!v109)
  {

    goto LABEL_153;
  }

  __int128 v111 = -[NSString isEqual:](v108, "isEqual:", v109);

  if ((v111 & 1) == 0)
  {
LABEL_153:
    objc_storeStrong((id *)&self->_type, v106);
    v14 |= 1u;
  }

LABEL_154:
  __int128 v112 = CFDictionaryGetInt64Ranged(v5, @"Vendor ID", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
  if (v112 != self->_vendorID)
  {
    self->_vendorID = v112;
    v14 |= 1u;
  }

  if (-[NSString isEqual:](self->_type, "isEqual:", @"Accessory Source"))
  {
    __int128 v113 = CFDictionaryGetTypeID();
    CFDictionaryGetTypedValue(v5, @"AdapterDetails", v113, 0LL);
    __int128 v114 = (void *)objc_claimAutoreleasedReturnValue();
    __int128 v115 = v114;
    if (v114)
    {
      ioKitAdapterDescription = self->_ioKitAdapterDescription;
      __int128 v117 = v114;
      int8x16_t v118 = ioKitAdapterDescription;
      if (v117 == v118)
      {
      }

      else
      {
        int v119 = v118;
        if (v118)
        {
          int v120 = -[NSDictionary isEqual:](v117, "isEqual:", v118);

          if ((v120 & 1) != 0) {
            goto LABEL_165;
          }
        }

        else
        {
        }

        v14 |= -[CUPowerSource updateWithPowerAdapterDetails:](self, "updateWithPowerAdapterDetails:", v117);
      }
    }

            int32x4_t v173 = _PairingSessionVerifyACL(a1, (uint64_t)cf);
            if (v173)
            {
              id v95 = *(int **)(a1 + 16);
              dispatch_queue_t v9 = v166;
              if (*v95 <= 50)
              {
                if (*v95 == -1)
                {
                  id v95 = *(int **)(a1 + 16);
                }

                LogPrintF( (uint64_t)v95,  (uint64_t)"OSStatus _VerifyClientM2(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8 _t **, size_t *)",  0x32u,  (uint64_t)"### Pair-verify client -- server lacks ACL: %@\n",  v91,  v92,  v93,  v94,  *(void *)(a1 + 176));
              }

LABEL_165:
  }

  return v14;
}

    uint64_t v32 = 0LL;
LABEL_166:
    LOBYTE(v33) = 0;
LABEL_167:
    int v8 = v186;
    dispatch_queue_t v10 = a4;
    goto LABEL_115;
  }

  if (v19 == 3)
  {
    if (*(void *)(a1 + 696))
    {
      uint64_t v24 = *(int **)(a1 + 16);
      uint64_t v25 = *v24;
      if (*v24 <= 30)
      {
        if (v25 == -1)
        {
          if (!_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu)) {
            goto LABEL_66;
          }
          uint64_t v24 = *(int **)(a1 + 16);
          uint64_t v25 = *v24;
        }

        uint64_t v26 = v25 <= 10 && (v25 != -1 || _LogCategory_Initialize((uint64_t)v24, 0xAu));
        LogPrintF( (uint64_t)v24,  (uint64_t)"OSStatus _SetupServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-setup server M3 -- verify request\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  a6,  a7,  a8,  !v26);
      }

void sub_186AB5B24(_Unwind_Exception *a1)
{
}

void sub_186AB6D78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_186AB70CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id logger()
{
  if (sCUOSLogCreateOnce_logger != -1) {
    dispatch_once(&sCUOSLogCreateOnce_logger, &__block_literal_global_7255);
  }
  return (id)sCUOSLogHandle_logger;
}

void __logger_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.CoreUtils", "CUReachability");
  uint64_t v1 = (void *)sCUOSLogHandle_logger;
  sCUOSLogHandle_logger = (uint64_t)v0;
}

void sub_186AB83C0(_Unwind_Exception *a1)
{
}

void sub_186AB87A4(_Unwind_Exception *a1)
{
}

void sub_186AB8A18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186AB8B14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

int8x8_t curve25519_donna(uint64_t a1, __int128 *a2, void *a3)
{
  uint64_t v3 = 0LL;
  v1397[5] = *MEMORY[0x1895F89C0];
  __int128 v4 = a2[1];
  __int128 v1377 = *a2;
  __int128 v1378 = v4;
  id v5 = &kCurve25519BasePoint;
  if (a3) {
    id v5 = a3;
  }
  LOBYTE(v1377) = v1377 & 0xF8;
  HIBYTE(v137_Block_object_dispose((const void *)(v9 - 96), 8) = HIBYTE(v1378) & 0x3F | 0x40;
  uint64_t v6 = *v5 & 0x7FFFFFFFFFFFFLL;
  uint64_t v7 = (*(void *)((char *)v5 + 6) >> 3) & 0x7FFFFFFFFFFFFLL;
  uint64_t v8 = (*(void *)((char *)v5 + 12) >> 6) & 0x7FFFFFFFFFFFFLL;
  uint64_t v9 = (*(void *)((char *)v5 + 19) >> 1) & 0x7FFFFFFFFFFFFLL;
  uint64_t v10 = (v5[3] >> 12) & 0x7FFFFFFFFFFFFLL;
  __int128 v1396 = 0u;
  __int128 v1395 = 0u;
  uint64_t v1394 = 1LL;
  __int128 v1392 = 0u;
  __int128 v1393 = 0u;
  uint64_t v1391 = 1LL;
  uint64_t v1390 = 0LL;
  memset(v1389, 0, sizeof(v1389));
  uint64_t v1388 = 0LL;
  memset(v1387, 0, sizeof(v1387));
  __int128 v1386 = 0u;
  __int128 v1385 = 0u;
  uint64_t v1384 = 1LL;
  uint64_t v1383 = 0LL;
  memset(v1382, 0, sizeof(v1382));
  uint64_t v1207 = 19 * v7;
  uint64_t v1208 = 19 * v10;
  __int128 v1381 = 0u;
  uint64_t v1205 = 19 * v9;
  uint64_t v1206 = 19 * v8;
  dispatch_queue_t v11 = &v1391;
  __int128 v1380 = 0u;
  char v12 = (uint64_t *)v1389;
  uint64_t v13 = &v1394;
  uint64_t v1379 = 1LL;
  uint64_t v14 = (uint64_t *)v1387;
  uint64_t v15 = &v1384;
  uint64_t v16 = (uint64_t *)v1382;
  BOOL v17 = &v1379;
  uint64_t v1212 = v7;
  uint64_t v1213 = v6;
  v1397[0] = v6;
  v1397[1] = v7;
  uint64_t v18 = v1397;
  uint64_t v1210 = v9;
  uint64_t v1211 = v8;
  v1397[2] = v8;
  v1397[3] = v9;
  int8x16_t v19 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  uint64_t v1209 = v10;
  v1397[4] = v10;
  do
  {
    int v20 = 0;
    uint64_t v1204 = v3;
    int v21 = ((unsigned __int8 *)&v1377 - v3)[31];
    uint64_t v22 = v18;
    uint64_t v23 = v17;
    uint64_t v24 = v16;
    uint64_t v25 = v15;
    do
    {
      int v1294 = v20;
      uint64_t v26 = 0LL;
      uint64_t v27 = v11;
      BOOL v17 = v12;
      v1366 = v14;
      uint64_t v28 = v25;
      uint64_t v29 = v24;
      uint64_t v30 = v23;
      uint64_t v31 = v22;
      uint64_t v32 = (uint64_t)(char)v21 >> 7;
      do
      {
        uint64_t v33 = v11[v26];
        uint64_t v34 = v31[v26];
        uint64_t v35 = (v34 ^ v33) & v32;
        v11[v26] = v35 ^ v33;
        v31[v26++] = v35 ^ v34;
      }

      while (v26 != 5);
      int v1289 = v21;
      v1307 = v28;
      v1312 = v30;
      v1320 = v29;
      for (uint64_t i = 0LL; i != 5; ++i)
      {
        uint64_t v37 = v12[i];
        uint64_t v38 = v13[i];
        uint64_t v39 = (v38 ^ v37) & v32;
        v12[i] = v39 ^ v37;
        v13[i] = v39 ^ v38;
      }

      uint64_t v40 = 0LL;
      uint64_t v41 = v11[1];
      uint64_t v42 = *v12;
      uint64_t v43 = v12[1];
      uint64_t v44 = *v11 + 0x3FFFFFFFFFFF68LL - *v12;
      uint64_t v45 = v31[1];
      uint64_t v1341 = *v31;
      uint64_t v46 = v13[1];
      uint64_t v47 = *v13 + *v31;
      unint64_t v48 = v46 + v45;
      uint64_t v1353 = *v13;
      uint64_t v1359 = ((unint64_t)(v46 + v45) * (unsigned __int128)(unint64_t)v44) >> 64;
      uint64_t v1336 = (v46 + v45) * v44;
      uint64_t v49 = v11[3];
      uint64_t v50 = v11[4];
      uint64_t v51 = v12[4];
      uint64_t v52 = v50 - v51 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v53 = 19 * v52;
      uint64_t v54 = v11[2];
      uint64_t v55 = v42 + *v11;
      uint64_t v1229 = v43 + v41;
      uint64_t v56 = v41 - v43 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v58 = v17[2];
      uint64_t v57 = v17[3];
      uint64_t v1347 = v58 + v54;
      uint64_t v1372 = v57 + v49;
      uint64_t v59 = v51 + v50;
      uint64_t v60 = v54 - v58 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v61 = v49 - v57 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v62 = v31[2];
      uint64_t v63 = v31[3];
      uint64_t v64 = v31[4];
      uint64_t v66 = v13[2];
      uint64_t v65 = v13[3];
      unint64_t v67 = v66 + v62;
      uint64_t v1328 = v45 - v46;
      unint64_t v68 = v65 + v63;
      uint64_t v69 = v62 - v66;
      uint64_t v1252 = v69;
      uint64_t v70 = v13[4];
      uint64_t v71 = v63 - v65;
      uint64_t v1237 = v71;
      unint64_t v72 = v70 + v64;
      uint64_t v1258 = v64 - v70;
      uint64_t *v31 = v47;
      v31[1] = v48;
      v31[2] = v67;
      v31[3] = v68;
      v1303 = v31;
      v31[4] = v70 + v64;
      uint64_t v73 = v48 * 19 * v52 + v47 * v44 + v67 * 19 * v61 + v68 * 19 * v60;
      uint64_t v74 = (v70 + v64) * 19 * v56;
      BOOL v75 = __CFADD__(v73, v74);
      uint64_t v1248 = v73 + v74;
      uint64_t v76 = v56;
      unsigned __int128 v78 = __PAIR128__( (((unint64_t)v47 * (unsigned __int128)(unint64_t)v56) >> 64)
            + __CFADD__(v1336, v47 * v76)
            + v1359,
              v1336 + v47 * v76)
          + v67 * (unsigned __int128)(unint64_t)(19 * v52)
      uint64_t v77 = *((void *)&v78 + 1);
      *((void *)&v80 + 1) = (((unint64_t)(v70 + v64) * (unsigned __int128)(unint64_t)(19 * v56)) >> 64)
                            + v75
                            + ((v48 * (unsigned __int128)(unint64_t)(19 * v52)
                              + (unint64_t)v47 * (unsigned __int128)(unint64_t)v44
      *(void *)&__int128 v80 = v1248;
      uint64_t v79 = v80 >> 51;
      uint64_t v1240 = v78 + v79;
      if (__CFADD__((void)v78, v79)) {
        uint64_t v77 = *((void *)&v78 + 1) + 1LL;
      }
      uint64_t v1274 = 19 * v52;
      uint64_t v1283 = 19 * v61;
      unsigned __int128 v81 = v48 * (unsigned __int128)(unint64_t)v76
          + (unint64_t)v47 * (unsigned __int128)(unint64_t)v60
          + v67 * (unsigned __int128)(unint64_t)v44
          + v68 * (unsigned __int128)(unint64_t)v53
          + v72 * (unsigned __int128)(unint64_t)(19 * v61);
      *((void *)&v83 + 1) = v77;
      *(void *)&__int128 v83 = v78 + v79;
      uint64_t v82 = v83 >> 51;
      uint64_t v1360 = v81 + v82;
      if (__CFADD__((void)v81, v82)) {
        uint64_t v84 = *((void *)&v81 + 1) + 1LL;
      }
      else {
        uint64_t v84 = (v48 * (unsigned __int128)(unint64_t)v76
      }
             + (unint64_t)v47 * (unsigned __int128)(unint64_t)v60
             + v67 * (unsigned __int128)(unint64_t)v44
             + v68 * (unsigned __int128)(unint64_t)v53
             + v72 * (unsigned __int128)(unint64_t)(19 * v61)) >> 64;
      unsigned __int128 v85 = v48 * (unsigned __int128)(unint64_t)v60
          + (unint64_t)v47 * (unsigned __int128)(unint64_t)v61
          + v67 * (unsigned __int128)(unint64_t)v76
          + v68 * (unsigned __int128)(unint64_t)v44
          + v72 * (unsigned __int128)(unint64_t)v53;
      uint64_t v1272 = v52;
      uint64_t v86 = v47 * v52;
      *((void *)&v88 + 1) = v84;
      *(void *)&__int128 v88 = v81 + v82;
      uint64_t v87 = v88 >> 51;
      uint64_t v89 = v85 + v87;
      uint64_t v1337 = v85 + v87;
      uint64_t v1278 = v61;
      uint64_t v90 = v48 * v61;
      if (__CFADD__((void)v85, v87)) {
        uint64_t v91 = *((void *)&v85 + 1) + 1LL;
      }
      else {
        uint64_t v91 = (v48 * (unsigned __int128)(unint64_t)v60
      }
             + (unint64_t)v47 * (unsigned __int128)(unint64_t)v61
             + v67 * (unsigned __int128)(unint64_t)v76
             + v68 * (unsigned __int128)(unint64_t)v44
             + v72 * (unsigned __int128)(unint64_t)v53) >> 64;
      BOOL v75 = __CFADD__(v90, v86);
      uint64_t v92 = v90 + v86;
      uint64_t v93 = v1341 + 0x3FFFFFFFFFFF68LL - v1353;
      unint64_t v94 = (((unint64_t)v47 * (unsigned __int128)(unint64_t)v52) >> 64)
          + v75
          + ((v48 * (unsigned __int128)(unint64_t)v61) >> 64);
      uint64_t v95 = v1328 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v1267 = v76;
      uint64_t v1269 = v44;
      uint64_t v96 = v69 + 0x3FFFFFFFFFFFF8LL;
      *((void *)&v98 + 1) = v91;
      *(void *)&__int128 v98 = v89;
      uint64_t v97 = v98 >> 51;
      unsigned __int128 v100 = __PAIR128__(v94, v92)
           + v67 * (unsigned __int128)(unint64_t)v60
           + v68 * (unsigned __int128)(unint64_t)v76
           + v72 * (unsigned __int128)(unint64_t)v44;
      uint64_t v99 = *((void *)&v100 + 1);
      uint64_t v101 = v100 + v97;
      uint64_t v1214 = v100 + v97;
      if (__CFADD__((void)v100, v97)) {
        uint64_t v99 = *((void *)&v100 + 1) + 1LL;
      }
      uint64_t v1255 = v99;
      uint64_t v102 = v71 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v103 = 19 * (v71 + 0x3FFFFFFFFFFFF8LL);
      uint64_t v104 = v1258 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v105 = 19 * (v1258 + 0x3FFFFFFFFFFFF8LL);
      signed __int128 v106 = (unint64_t)(19 * v95) * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v93 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)(19 * v96) * (unsigned __int128)(unint64_t)v1372
           + (unint64_t)v103 * (unsigned __int128)(unint64_t)v1347
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1229;
      unsigned __int128 v107 = (unint64_t)v95 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)v93 * (unsigned __int128)(unint64_t)v1229
           + (unint64_t)(19 * v96) * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v103 * (unsigned __int128)(unint64_t)v1372
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1347;
      uint64_t v108 = v106 >> 51;
      if (__CFADD__((void)v107, v108)) {
        uint64_t v109 = *((void *)&v107 + 1) + 1LL;
      }
      else {
        uint64_t v109 = ((unint64_t)v95 * (unsigned __int128)(unint64_t)v55
      }
              + (unint64_t)v93 * (unsigned __int128)(unint64_t)v1229
              + (unint64_t)(19 * v96) * (unsigned __int128)(unint64_t)v59
              + (unint64_t)v103 * (unsigned __int128)(unint64_t)v1372
              + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1347) >> 64;
      unsigned __int128 v110 = (unint64_t)v95 * (unsigned __int128)(unint64_t)v1229
           + (unint64_t)v93 * (unsigned __int128)(unint64_t)v1347
           + (unint64_t)v96 * (unsigned __int128)(unint64_t)v55
           + (unint64_t)v103 * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1372;
      *((void *)&v111 + 1) = v109;
      *(void *)&__int128 v111 = v107 + v108;
      uint64_t v1264 = v111 >> 51;
      if (__CFADD__((void)v110, v1264)) {
        uint64_t v112 = *((void *)&v110 + 1) + 1LL;
      }
      else {
        uint64_t v112 = ((unint64_t)v95 * (unsigned __int128)(unint64_t)v1229
      }
              + (unint64_t)v93 * (unsigned __int128)(unint64_t)v1347
              + (unint64_t)v96 * (unsigned __int128)(unint64_t)v55
              + (unint64_t)v103 * (unsigned __int128)(unint64_t)v59
              + (unint64_t)v105 * (unsigned __int128)(unint64_t)v1372) >> 64;
      *((void *)&v114 + 1) = v112;
      *(void *)&__int128 v114 = v110 + v1264;
      uint64_t v113 = v114 >> 51;
      uint64_t v116 = ((unint64_t)v95 * (unsigned __int128)(unint64_t)v1347
            + (unint64_t)v93 * (unsigned __int128)(unint64_t)v1372
            + (unint64_t)v96 * (unsigned __int128)(unint64_t)v1229
            + (unint64_t)v102 * (unsigned __int128)(unint64_t)v55
            + (unint64_t)v105 * (unsigned __int128)(unint64_t)v59) >> 64;
      uint64_t v115 = v95 * v1347 + v93 * v1372 + v96 * v1229 + v102 * v55 + v105 * v59;
      uint64_t v117 = v115 + v113;
      if (__CFADD__(v115, v113)) {
        ++v116;
      }
      *uint64_t v13 = v93;
      v13[1] = v95;
      v13[2] = v96;
      v13[3] = v102;
      uint64_t v118 = v55;
      v1298 = v13;
      _DWORD v13[4] = v104;
      unsigned __int128 v120 = (unint64_t)v95 * (unsigned __int128)(unint64_t)v1372
           + (unint64_t)v93 * (unsigned __int128)(unint64_t)v59
           + (unint64_t)v96 * (unsigned __int128)(unint64_t)v1347
           + (unint64_t)v102 * (unsigned __int128)(unint64_t)v1229
           + (unint64_t)v104 * (unsigned __int128)(unint64_t)v55;
      uint64_t v119 = *((void *)&v120 + 1);
      *((void *)&v122 + 1) = v1255;
      *(void *)&__int128 v122 = v101;
      uint64_t v121 = v122 >> 51;
      *((void *)&v122 + 1) = v116;
      *(void *)&__int128 v122 = v117;
      uint64_t v123 = v122 >> 51;
      BOOL v75 = __CFADD__((void)v120, v123);
      uint64_t v124 = v120 + v123;
      uint64_t v125 = v1237 + 0x7FFFFFFFFFFF8LL;
      uint64_t v126 = v1258 + 0x7FFFFFFFFFFF8LL;
      uint64_t v127 = v1252 + 0x7FFFFFFFFFFF8LL;
      uint64_t v128 = v1328 + 0x7FFFFFFFFFFF8LL;
      uint64_t v129 = v1341 - v1353 + 0x7FFFFFFFFFF68LL;
      uint64_t v130 = v129 * v59
           + (v1328 + 0x7FFFFFFFFFFF8LL) * v1372
           + (v1252 + 0x7FFFFFFFFFFF8LL) * v1347
           + (v1237 + 0x7FFFFFFFFFFF8LL) * v1229
           + (v1258 + 0x7FFFFFFFFFFF8LL) * v55
           + v123;
      uint64_t v131 = v129;
      uint64_t v132 = v129 * v118
           + 19
           * ((v1328 + 0x7FFFFFFFFFFF8LL) * v59
            + (v1252 + 0x7FFFFFFFFFFF8LL) * v1372
            + (v1237 + 0x7FFFFFFFFFFF8LL) * v1347
            + (v1258 + 0x7FFFFFFFFFFF8LL) * v1229);
      v121 *= 19LL;
      unint64_t v133 = v121 + (v1248 & 0x7FFFFFFFFFFFFLL);
      uint64_t v134 = v121 + v1248;
      uint64_t v135 = v106 & 0x7FFFFFFFFFFFFLL;
      if (v75) {
        uint64_t v119 = *((void *)&v120 + 1) + 1LL;
      }
      *((void *)&v136 + 1) = v119;
      *(void *)&__int128 v136 = v124;
      uint64_t v137 = 19 * (v136 >> 51);
      unint64_t v138 = v137 + v135;
      uint64_t v1253 = v1341 - v1353 + 0x7FFFFFFFFFF68LL;
      uint64_t v1256 = v1237 + 0x7FFFFFFFFFFF8LL;
      uint64_t v1242 = v118;
      uint64_t v1262 = v59;
      uint64_t v1342 = 19 * v59;
      uint64_t v1234 = v131 * v1372 + v128 * v1347 + v127 * v1229 + v125 * v118 + 19 * v59 * v126 + v113;
      uint64_t v1238 = v137 + v132;
      uint64_t v139 = v131 * v1229 + v128 * v118 + 19 * (v127 * v59 + v125 * v1372 + v126 * v1347) + v108;
      unint64_t v140 = (v1240 & 0x7FFFFFFFFFFFFLL) + (v133 >> 51);
      unint64_t v1245 = ((v107 + v108) & 0x7FFFFFFFFFFFFLL) + ((unint64_t)(v137 + v135) >> 51);
      unint64_t v1249 = v140;
      uint64_t v1218 = ((v110 + v1264) & 0x7FFFFFFFFFFFFLL) + (v1245 >> 51);
      uint64_t v1220 = (v1360 & 0x7FFFFFFFFFFFFLL) + (v140 >> 51);
      uint64_t v1223 = v117 & 0x7FFFFFFFFFFFFLL;
      uint64_t v1226 = v124 & 0x7FFFFFFFFFFFFLL;
      uint64_t v1217 = v140 & 0x7FFFFFFFFFFFFLL;
      uint64_t v141 = (v1245 & 0x7FFFFFFFFFFFFLL) + (v140 & 0x7FFFFFFFFFFFFLL);
      uint64_t v142 = v1218 + v1220;
      uint64_t v143 = (v117 & 0x7FFFFFFFFFFFFLL) + (v1337 & 0x7FFFFFFFFFFFFLL);
      uint64_t v144 = (v124 & 0x7FFFFFFFFFFFFLL) + (v1214 & 0x7FFFFFFFFFFFFLL);
      uint64_t v145 = v1240 + (v133 >> 51);
      uint64_t v1215 = v133 & 0x7FFFFFFFFFFFFLL;
      uint64_t v146 = v139 + (v138 >> 51);
      uint64_t v147 = (v138 & 0x7FFFFFFFFFFFFLL) + (v133 & 0x7FFFFFFFFFFFFLL);
      unint64_t v148 = (__int128)(((unint64_t)(v1218 + v1220) * (unsigned __int128)(unint64_t)v143
                       + (unint64_t)v141 * (unsigned __int128)(unint64_t)v144)
                      * 0x26
                      + (unint64_t)v147 * (unsigned __int128)(unint64_t)v147) >> 51;
      uint64_t v149 = (__int128)((unint64_t)(2 * v147) * (unsigned __int128)(unint64_t)v141
                      + (unint64_t)v143 * (unsigned __int128)(unint64_t)v143 * 0x13
                      + (unint64_t)(38 * v144) * (unsigned __int128)(unint64_t)(v1218 + v1220)
                      + __PAIR128__( (unint64_t)((((unint64_t)(v1218 + v1220)
                                             * (unsigned __int128)(unint64_t)v143
                                             + (unint64_t)v141 * (unsigned __int128)(unint64_t)v144)
                                            * 0x26
                                            + (unint64_t)v147 * (unsigned __int128)(unint64_t)v147) >> 64) >> 51,
                          v148)) >> 51;
      signed __int128 v150 = (unint64_t)v141 * (unsigned __int128)(unint64_t)v141
           + (unint64_t)(38 * v144) * (unsigned __int128)(unint64_t)v143
           + (unint64_t)(2 * v147) * (unsigned __int128)(unint64_t)(v1218 + v1220)
           + (((unint64_t)(2 * v147) * (unsigned __int128)(unint64_t)v141
             + (unint64_t)v143 * (unsigned __int128)(unint64_t)v143 * 0x13
             + (unint64_t)(38 * v144) * (unsigned __int128)(unint64_t)(v1218 + v1220)
             + __PAIR128__( (unint64_t)((((unint64_t)(v1218 + v1220) * (unsigned __int128)(unint64_t)v143 + (unint64_t)v141 * (unsigned __int128)(unint64_t)v144)
                                   * 0x26
                                   + (unint64_t)v147 * (unsigned __int128)(unint64_t)v147) >> 64) >> 51,
                 v148)) >> 51);
      uint64_t v151 = v145;
      signed __int128 v152 = (unint64_t)v144 * (unsigned __int128)(unint64_t)v144 * 0x13
           + ((unint64_t)(v1218 + v1220) * (unsigned __int128)(unint64_t)v141
            + (unint64_t)v147 * (unsigned __int128)(unint64_t)v143)
           * 2
           + ((unsigned __int128)v150 >> 51);
      unsigned __int128 v153 = (unint64_t)v141 * (unsigned __int128)(unint64_t)v143
           + (unint64_t)v147 * (unsigned __int128)(unint64_t)v144;
      uint64_t v154 = v142 * v142 + 2 * ((v1238 + v134) * (v130 + v1214) + (v146 + v145) * (v1234 + v1337));
      uint64_t v155 = 2 * (v1238 + v134);
      uint64_t v156 = 19 * (v1234 + v1337) * (v1234 + v1337) + (v146 + v145) * v155 + 38 * (v130 + v1214) * (v1218 + v1220);
      uint64_t v157 = (v1238 + v134) * (v1238 + v134) + 38 * ((v146 + v145) * (v130 + v1214) + (v1234 + v1337) * (v1218 + v1220));
      uint64_t v158 = 19
           * ((__int128)((unint64_t)v142 * (unsigned __int128)(unint64_t)v142
                       + v153 * 2
                       + ((unsigned __int128)v152 >> 51)) >> 51);
      uint64_t v159 = v158 + v157;
      unint64_t v160 = v158 + (v157 & 0x7FFFFFFFFFFFFLL);
      uint64_t v161 = v156 + v148 + (v160 >> 51);
      unint64_t v162 = ((v156 + v148) & 0x7FFFFFFFFFFFFLL) + (v160 >> 51);
      unint64_t v163 = v1215 + 0x3FFFFFFFFFFF68LL - (v138 & 0x7FFFFFFFFFFFFLL);
      uint64_t v164 = (v1337 & 0x7FFFFFFFFFFFFLL) - v1223;
      uint64_t *v1366 = v159 & 0x7FFFFFFFFFFFFLL;
      v1366[1] = v161 & 0x7FFFFFFFFFFFFLL;
      v1366[2] = ((38 * (v130 + v1214) * (v1234 + v1337) + (v146 + v145) * (v146 + v145) + v155 * (v1218 + v1220) + v149) & 0x7FFFFFFFFFFFFLL)
               + (v162 >> 51);
      v1366[3] = (19 * (v130 + v1214) * (v130 + v1214)
                + 2 * ((v1238 + v134) * (v1234 + v1337) + (v146 + v145) * (v1218 + v1220))
                + (v150 >> 51)) & 0x7FFFFFFFFFFFFLL;
      v1366[4] = (v154 + (v152 >> 51)) & 0x7FFFFFFFFFFFFLL;
      uint64_t v165 = v1217 - (v1245 & 0x7FFFFFFFFFFFFLL) + 0x3FFFFFFFFFFFF8LL;
      uint64_t v166 = v1220 - v1218 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v167 = (v1214 & 0x7FFFFFFFFFFFFLL) - v1226 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v168 = (__int128)(((unint64_t)v166 * (unsigned __int128)(unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL)
                       + (unint64_t)v165 * (unsigned __int128)(unint64_t)v167)
                      * 0x26
                      + v163 * (unsigned __int128)v163) >> 51;
      *((void *)&v136 + 1) = (__PAIR128__(v163 >> 63, 2 * v163) * (unint64_t)v165
                              + (unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL)
                              * (unsigned __int128)(unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL)
                              * 0x13
                              + (unint64_t)v167 * (unsigned __int128)0x26uLL * (unint64_t)v166
                              + ((((unint64_t)v166
                                 * (unsigned __int128)(unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL)
                                 + (unint64_t)v165 * (unsigned __int128)(unint64_t)v167)
                                * 0x26
                                + v163 * (unsigned __int128)v163) >> 51)) >> 64;
      *(void *)&__int128 v136 = 2 * v163 * v165
                       + 19 * (v164 + 0x3FFFFFFFFFFFF8LL) * (v164 + 0x3FFFFFFFFFFFF8LL)
                       + 38 * v167 * v166
                       + v168;
      uint64_t v169 = v136 >> 51;
      *((void *)&v136 + 1) = ((unint64_t)v165 * (unsigned __int128)(unint64_t)v165
                              + (unint64_t)v167
                              * (unsigned __int128)0x26uLL
                              * (unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL)
                              + __PAIR128__(v163 >> 63, 2 * v163) * (unint64_t)v166
                              + ((unsigned __int128)v136 >> 51)) >> 64;
      *(void *)&__int128 v136 = v165 * v165 + 38 * v167 * (v164 + 0x3FFFFFFFFFFFF8LL) + 2 * v163 * v166 + v169;
      unint64_t v170 = ((unint64_t)v167 * (unsigned __int128)(unint64_t)v167 * 0x13
            + ((unint64_t)v166 * (unsigned __int128)(unint64_t)v165
             + v163 * (unsigned __int128)(unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL))
            * 2
            + ((unsigned __int128)v136 >> 51)) >> 64;
      uint64_t v171 = 19 * v167 * v167 + 2 * (v166 * v165 + v163 * (v164 + 0x3FFFFFFFFFFFF8LL)) + ((unsigned __int128)v136 >> 51);
      *uint64_t v27 = v1242;
      v27[1] = v1229;
      v27[2] = v1347;
      v27[3] = v1372;
      v1354 = v27;
      v27[4] = v59;
      *((void *)&v136 + 1) = ((unint64_t)v166 * (unsigned __int128)(unint64_t)v166
                              + ((unint64_t)v165
                               * (unsigned __int128)(unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL)
                               + v163 * (unsigned __int128)(unint64_t)v167)
                              * 2
                              + (((unint64_t)v167 * (unsigned __int128)(unint64_t)v167 * 0x13
                                + ((unint64_t)v166 * (unsigned __int128)(unint64_t)v165
                                 + v163 * (unsigned __int128)(unint64_t)(v164 + 0x3FFFFFFFFFFFF8LL))
                                * 2
                                + ((unsigned __int128)v136 >> 51)) >> 51)) >> 64;
      *(void *)&__int128 v136 = v166 * v166
                       + 2 * (v165 * (v164 + 0x3FFFFFFFFFFFF8LL) + v163 * v167)
                       + ((__int128)__PAIR128__(v170, v171) >> 51);
      uint64_t v172 = v151 - v146 + 0x7FFFFFFFFFFF8LL;
      uint64_t v173 = v1214 - v130 + 0x7FFFFFFFFFFF8LL;
      uint64_t v174 = 0x7FFFFFFFFFFEDLL * (v1256 * v59 + (v1258 + 0x7FFFFFFFFFFF8LL) * v1372)
           - (v1253 * v1347
            + (v1328 + 0x7FFFFFFFFFFF8LL) * v1229
            + v127 * v1242
            + v1264)
           + v1360
           + (v1249 >> 51)
           - (v1245 >> 51)
           + 0x7FFFFFFFFFFF8LL;
      uint64_t v175 = v1337 - v1234 + 0x7FFFFFFFFFFF8LL;
      uint64_t v176 = v134 - v1238 + 0x7FFFFFFFFFF68LL;
      uint64_t v177 = v176 * v176 + 38 * (v172 * v173 + v174 * v175);
      uint64_t v178 = 19 * (v136 >> 51);
      uint64_t v179 = v178 + v177;
      v173 *= 38LL;
      v176 *= 2LL;
      uint64_t v180 = 19 * v175 * v175 + v172 * v176 + v173 * v174 + v168;
      unint64_t v181 = v178 + (v177 & 0x7FFFFFFFFFFFFLL);
      uint64_t v182 = v180 + (v181 >> 51);
      unint64_t v183 = ((v173 * v175 + v172 * v172 + v174 * v176 + v169) & 0x7FFFFFFFFFFFFLL)
           + (((v180 & 0x7FFFFFFFFFFFFLL) + (v181 >> 51)) >> 51);
      uint64_t v184 = v179 & 0x7FFFFFFFFFFFFLL;
      uint64_t v185 = v182 & 0x7FFFFFFFFFFFFLL;
      uint64_t v186 = v171 & 0x7FFFFFFFFFFFFLL;
      uint64_t v187 = v136 & 0x7FFFFFFFFFFFFLL;
      signed __int128 v188 = (v136 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1207
           + (v171 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1206
           + (v179 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1213
           + (v182 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1208
           + v183 * (unsigned __int128)(unint64_t)v1205;
      uint64_t v191 = v188 >> 51;
      uint64_t v190 = ((v136 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1206
            + (v171 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1205
            + (v179 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1212
            + (v182 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1213
            + v183 * (unsigned __int128)(unint64_t)v1208) >> 64;
      uint64_t v189 = (v136 & 0x7FFFFFFFFFFFFLL) * v1206
           + (v171 & 0x7FFFFFFFFFFFFLL) * v1205
           + (v179 & 0x7FFFFFFFFFFFFLL) * v1212
           + (v182 & 0x7FFFFFFFFFFFFLL) * v1213
           + v183 * v1208;
      BOOL v75 = __CFADD__(v189, v191);
      uint64_t v192 = v189 + v191;
      if (v75) {
        ++v190;
      }
      uint64_t v193 = ((unint64_t)v187 * (unsigned __int128)(unint64_t)v1205
            + (unint64_t)v186 * (unsigned __int128)(unint64_t)v1208
            + (v179 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1211
            + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1212
            + v183 * (unsigned __int128)(unint64_t)v1213) >> 64;
      unint64_t v194 = v187 * v1205 + v186 * v1208 + v184 * v1211 + v185 * v1212 + v183 * v1213;
      *((void *)&v196 + 1) = v190;
      *(void *)&__int128 v196 = v192;
      uint64_t v195 = v196 >> 51;
      BOOL v75 = __CFADD__(v194, v195);
      uint64_t v197 = v194 + v195;
      if (v75) {
        ++v193;
      }
      uint64_t v18 = v1366;
      uint64_t v198 = v192 & 0x7FFFFFFFFFFFFLL;
      *((void *)&v200 + 1) = v193;
      *(void *)&__int128 v200 = v197;
      uint64_t v199 = v200 >> 51;
      uint64_t v201 = v197 & 0x7FFFFFFFFFFFFLL;
      unsigned __int128 v202 = (unint64_t)v187 * (unsigned __int128)(unint64_t)v1208
           + (unint64_t)v186 * (unsigned __int128)(unint64_t)v1213
           + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1210
           + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1211
           + v183 * (unsigned __int128)(unint64_t)v1212;
      unsigned __int128 v204 = (unint64_t)v187 * (unsigned __int128)(unint64_t)v1213
           + (unint64_t)v186 * (unsigned __int128)(unint64_t)v1212
           + (unint64_t)v184 * (unsigned __int128)(unint64_t)v1209
           + (unint64_t)v185 * (unsigned __int128)(unint64_t)v1210
           + v183 * (unsigned __int128)(unint64_t)v1211;
      uint64_t v203 = *((void *)&v204 + 1);
      if (__CFADD__((void)v202, v199)) {
        uint64_t v205 = *((void *)&v202 + 1) + 1LL;
      }
      else {
        uint64_t v205 = *((void *)&v202 + 1);
      }
      *((void *)&v207 + 1) = v205;
      *(void *)&__int128 v207 = v202 + v199;
      uint64_t v206 = v207 >> 51;
      v208.i64[0] = v202 + v199;
      v208.i64[1] = v204 + v206;
      if (__CFADD__((void)v204, v206)) {
        uint64_t v203 = *((void *)&v204 + 1) + 1LL;
      }
      *((void *)&v209 + 1) = v203;
      *(void *)&__int128 v209 = v204 + v206;
      unint64_t v210 = (v188 & 0x7FFFFFFFFFFFFLL) + 19 * (v209 >> 51);
      uint64_t v211 = v210 & 0x7FFFFFFFFFFFFLL;
      unint64_t v212 = v198 + (v210 >> 51);
      uint64_t v13 = v1307;
      uint64_t *v1307 = v211;
      v1307[1] = v212 & 0x7FFFFFFFFFFFFLL;
      v1307[2] = v201 + (v212 >> 51);
      uint64_t v213 = 2 * v1242;
      uint64_t v214 = 38 * v59;
      uint64_t v215 = (__int128)((unint64_t)v1372 * (unsigned __int128)(unint64_t)(38 * v1347)
                      + (unint64_t)v1242 * (unsigned __int128)(unint64_t)v1242
                      + (unint64_t)(38 * v59) * (unsigned __int128)(unint64_t)v1229) >> 51;
      unsigned __int128 v216 = (unint64_t)(19 * v1372) * (unsigned __int128)(unint64_t)v1372
           + (unint64_t)v1229 * (unsigned __int128)(unint64_t)(2 * v1242);
      uint64_t v217 = 38 * v59 * v1347;
      uint64_t v218 = (v216 + (unint64_t)(38 * v1262) * (unsigned __int128)(unint64_t)v1347) >> 64;
      if (__CFADD__(v216 + v217, v215)) {
        ++v218;
      }
      *((void *)&v220 + 1) = v218;
      *(void *)&__int128 v220 = v216 + v217 + v215;
      uint64_t v219 = v220 >> 51;
      uint64_t v221 = v1347 * v213;
      unint64_t v222 = ((unint64_t)v214 * (unsigned __int128)(unint64_t)v1372) >> 64;
      uint64_t v223 = v214 * v1372;
      uint64_t v224 = ((unint64_t)v1347 * (unsigned __int128)(unint64_t)(2 * v1242)
            + (unint64_t)v1229 * (unsigned __int128)(unint64_t)v1229
            + __PAIR128__(v222, v223)) >> 64;
      if (__CFADD__(v1347 * v213 + v1229 * v1229 + v223, v219)) {
        ++v224;
      }
      *((void *)&v226 + 1) = v224;
      *(void *)&__int128 v226 = v1347 * v213 + v1229 * v1229 + v223 + v219;
      uint64_t v225 = v226 >> 51;
      unsigned __int128 v227 = (unint64_t)v1372 * (unsigned __int128)(unint64_t)v213
      uint64_t v228 = v227 + v225;
      if (__CFADD__((void)v227, v225)) {
        uint64_t v229 = *((void *)&v227 + 1) + 1LL;
      }
      else {
        uint64_t v229 = ((unint64_t)v1372 * (unsigned __int128)(unint64_t)v213
      }
      uint64_t v1361 = v1342 * v1262 + 2 * (v1347 * v1229 + v1372 * v1242) + v225;
      unsigned __int128 v230 = (unint64_t)v1372 * (unsigned __int128)(unint64_t)(2 * v1229)
           + (unint64_t)v1347 * (unsigned __int128)(unint64_t)v1347
           + (unint64_t)v1262 * (unsigned __int128)(unint64_t)v213;
      *((void *)&v232 + 1) = v229;
      *(void *)&__int128 v232 = v227 + v225;
      uint64_t v231 = v232 >> 51;
      uint64_t v1338 = v230 + v231;
      if (__CFADD__((void)v230, v231)) {
        uint64_t v233 = *((void *)&v230 + 1) + 1LL;
      }
      else {
        uint64_t v233 = ((unint64_t)v1372 * (unsigned __int128)(unint64_t)(2 * v1229)
      }
              + (unint64_t)v1347 * (unsigned __int128)(unint64_t)v1347
              + (unint64_t)v1262 * (unsigned __int128)(unint64_t)v213) >> 64;
      uint64_t v1343 = v1347 * v1347 + 2 * (v1372 * v1229 + v1262 * v1242) + v231;
      *((void *)&v234 + 1) = v233;
      *(void *)&__int128 v234 = v230 + v231;
      uint64_t v235 = 19 * (v234 >> 51);
      uint64_t v236 = v1242 * v1242 + 38 * (v1372 * v1347 + v1262 * v1229);
      uint64_t v1265 = v235 + v236;
      unint64_t v237 = v235 + (v236 & 0x7FFFFFFFFFFFFLL);
      uint64_t v238 = 19 * v1372 * v1372 + v1229 * 2 * v1242 + v217 + v215;
      uint64_t v1373 = v238 + (v237 >> 51);
      unint64_t v1348 = (v238 & 0x7FFFFFFFFFFFFLL) + (v237 >> 51);
      uint64_t v239 = v221 + v1229 * v1229 + v223 + v219;
      uint64_t v240 = 2 * v1269;
      uint64_t v241 = 38 * v1272;
      uint64_t v242 = (__int128)((unint64_t)v1278 * (unsigned __int128)(unint64_t)(38 * v60)
                      + (unint64_t)v1269 * (unsigned __int128)(unint64_t)v1269
                      + (unint64_t)(38 * v1272) * (unsigned __int128)(unint64_t)v1267) >> 51;
      uint64_t v244 = ((unint64_t)v1283 * (unsigned __int128)(unint64_t)v1278
      uint64_t v243 = v1283 * v1278 + v1267 * 2 * v1269 + 38 * v1272 * v60;
      BOOL v75 = __CFADD__(v243, v242);
      uint64_t v245 = v243 + v242;
      if (v75) {
        ++v244;
      }
      *((void *)&v247 + 1) = v244;
      *(void *)&__int128 v247 = v245;
      uint64_t v246 = v247 >> 51;
      uint64_t v248 = v60 * v240;
      unint64_t v249 = ((unint64_t)v241 * (unsigned __int128)(unint64_t)v1278) >> 64;
      uint64_t v250 = v241 * v1278;
      uint64_t v251 = ((unint64_t)v60 * (unsigned __int128)(unint64_t)(2 * v1269)
            + (unint64_t)v1267 * (unsigned __int128)(unint64_t)v1267
            + __PAIR128__(v249, v250)) >> 64;
      if (__CFADD__(v60 * v240 + v1267 * v1267 + v250, v246)) {
        ++v251;
      }
      *((void *)&v253 + 1) = v251;
      *(void *)&__int128 v253 = v60 * v240 + v1267 * v1267 + v250 + v246;
      uint64_t v252 = v253 >> 51;
      uint64_t v255 = ((unint64_t)v1278 * (unsigned __int128)(unint64_t)v240
      uint64_t v254 = v1278 * v240 + v60 * 2 * v1267 + v1274 * v1272;
      BOOL v75 = __CFADD__(v254, v252);
      uint64_t v256 = v254 + v252;
      if (v75) {
        ++v255;
      }
      uint64_t v257 = v1274 * v1272 + 2 * (v60 * v1267 + v1278 * v1269) + v252;
      uint64_t v259 = ((unint64_t)v1278 * (unsigned __int128)(unint64_t)(2 * v1267)
            + (unint64_t)v60 * (unsigned __int128)(unint64_t)v60
            + (unint64_t)v1272 * (unsigned __int128)(unint64_t)v240) >> 64;
      uint64_t v258 = v1278 * 2 * v1267 + v60 * v60 + v1272 * v240;
      *((void *)&v261 + 1) = v255;
      *(void *)&__int128 v261 = v256;
      uint64_t v260 = v261 >> 51;
      BOOL v75 = __CFADD__(v258, v260);
      uint64_t v262 = v258 + v260;
      uint64_t v263 = v60 * v60 + 2 * (v1278 * v1267 + v1272 * v1269) + v260;
      v17[2] = v60;
      v17[3] = v1278;
      *BOOL v17 = v1269;
      v17[1] = v1267;
      if (v75) {
        ++v259;
      }
      *((void *)&v264 + 1) = v259;
      *(void *)&__int128 v264 = v262;
      uint64_t v265 = 19 * (v264 >> 51);
      uint64_t v266 = v1269 * v1269 + 38 * (v1278 * v60 + v1272 * v1267);
      uint64_t v267 = v265 + v266;
      unint64_t v268 = v265 + (v266 & 0x7FFFFFFFFFFFFLL);
      v17[4] = v1272;
      uint64_t v269 = v1283 * v1278 + v1267 * 2 * v1269 + v1272 * 38 * v60 + v242;
      uint64_t v270 = (v248 + v1267 * v1267 + v250 + v246) & 0x7FFFFFFFFFFFFLL;
      uint64_t v271 = (v239 & 0x7FFFFFFFFFFFFLL) + (v1348 >> 51);
      uint64_t v272 = v257 & 0x7FFFFFFFFFFFFLL;
      uint64_t v273 = v263 & 0x7FFFFFFFFFFFFLL;
      uint64_t v274 = (v269 + (v268 >> 51)) & 0x7FFFFFFFFFFFFLL;
      unint64_t v275 = v270 + (((v269 & 0x7FFFFFFFFFFFFLL) + (v268 >> 51)) >> 51);
      uint64_t v276 = (v1373 & 0x7FFFFFFFFFFFFLL) * 19 * (v263 & 0x7FFFFFFFFFFFFLL)
           + (v267 & 0x7FFFFFFFFFFFFLL) * (v1265 & 0x7FFFFFFFFFFFFLL)
           + v271 * 19 * v272
           + (v1338 & 0x7FFFFFFFFFFFFLL) * 19 * v274
           + (v228 & 0x7FFFFFFFFFFFFLL) * 19 * v275;
      unsigned __int128 v279 = (v1373 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v267 & 0x7FFFFFFFFFFFFLL)
           + (v228 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v272)
           + (unint64_t)v274 * (unsigned __int128)(v1265 & 0x7FFFFFFFFFFFFLL)
           + (unint64_t)v271 * (unsigned __int128)(19 * (v263 & 0x7FFFFFFFFFFFFuLL))
           + (v1338 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * v275)
           + (((v1373 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(19 * (v263 & 0x7FFFFFFFFFFFFuLL))
             + (v267 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1265 & 0x7FFFFFFFFFFFFLL)
             + (unint64_t)v271 * (unsigned __int128)(unint64_t)(19 * v272)
      unint64_t v277 = v279 >> 64;
      unint64_t v278 = v279;
      unsigned __int128 v280 = (v228 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v273)
      uint64_t v281 = v256 & 0x7FFFFFFFFFFFFLL;
      unsigned __int128 v282 = v280
           + (unint64_t)v271 * (unsigned __int128)(v267 & 0x7FFFFFFFFFFFFLL)
      unsigned __int128 v283 = (unint64_t)v281 * (unsigned __int128)(v1265 & 0x7FFFFFFFFFFFFLL)
           + (v1338 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v273)
           + (v228 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v267 & 0x7FFFFFFFFFFFFLL)
           + (unint64_t)v271 * (unsigned __int128)(unint64_t)v274
           + v275 * (unsigned __int128)(v1373 & 0x7FFFFFFFFFFFFLL);
      unsigned __int128 v284 = (v1338 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v267 & 0x7FFFFFFFFFFFFLL)
      uint64_t v285 = v1361 & 0x7FFFFFFFFFFFFLL;
      unsigned __int128 v286 = v283 + (v282 >> 51);
      v287.i64[0] = v283 + (v282 >> 51);
      v287.i64[1] = v284 + (v228 & 0x7FFFFFFFFFFFFLL) * v274 + v275 * v271 + (v286 >> 51);
      unint64_t v288 = (v276 & 0x7FFFFFFFFFFFFLL)
           + 19
           * ((__int128)(v284
                       + (v228 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v274
                       + v275 * (unsigned __int128)(unint64_t)v271
                       + (v286 >> 51)) >> 51);
      uint64_t v289 = v288 & 0x7FFFFFFFFFFFFLL;
      unint64_t v290 = (v278 & 0x7FFFFFFFFFFFFLL) + (v288 >> 51);
      uint64_t v291 = v290 & 0x7FFFFFFFFFFFFLL;
      uint64_t v292 = (v282 & 0x7FFFFFFFFFFFFLL) + (v290 >> 51);
      dispatch_queue_t v11 = v1320;
      uint64_t *v1320 = v289;
      v1320[1] = v291;
      uint64_t v293 = (v1265 & 0x7FFFFFFFFFFFFLL) + 0x3FFFFFFFFFFF68LL - (v267 & 0x7FFFFFFFFFFFFLL);
      uint64_t v294 = (v1373 & 0x7FFFFFFFFFFFFLL) - v274 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v295 = v271 - v275 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v296 = (v1361 & 0x7FFFFFFFFFFFFLL) - v272 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v297 = (v1343 & 0x7FFFFFFFFFFFFLL) - v273 + 0x3FFFFFFFFFFFF8LL;
      uint64_t v298 = (__int128)((unint64_t)v293 * (unsigned __int128)0x1DB41uLL) >> 51;
      BOOL v75 = __CFADD__(121665 * v294, v298);
      uint64_t v299 = 121665 * v294 + v298;
      if (v75) {
        uint64_t v300 = (((unint64_t)v294 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v300 = ((unint64_t)v294 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      *((void *)&v302 + 1) = v300;
      *(void *)&__int128 v302 = v299;
      uint64_t v301 = v302 >> 51;
      BOOL v75 = __CFADD__(v301, 121665 * v295);
      uint64_t v303 = v301 + 121665 * v295;
      if (v75) {
        uint64_t v304 = (((unint64_t)v295 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v304 = ((unint64_t)v295 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      *((void *)&v306 + 1) = v304;
      *(void *)&__int128 v306 = v303;
      uint64_t v305 = v306 >> 51;
      BOOL v75 = __CFADD__(v305, 121665 * v296);
      uint64_t v307 = v305 + 121665 * v296;
      if (v75) {
        uint64_t v308 = (((unint64_t)v296 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v308 = ((unint64_t)v296 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      uint64_t v309 = v307 & 0x7FFFFFFFFFFFFLL;
      *((void *)&v311 + 1) = v308;
      *(void *)&__int128 v311 = v307;
      uint64_t v310 = v311 >> 51;
      BOOL v75 = __CFADD__(v310, 121665 * v297);
      uint64_t v312 = v310 + 121665 * v297;
      if (v75) {
        uint64_t v313 = (((unint64_t)v297 * (unsigned __int128)0x1DB41uLL) >> 64) + 1;
      }
      else {
        uint64_t v313 = ((unint64_t)v297 * (unsigned __int128)0x1DB41uLL) >> 64;
      }
      *((void *)&v314 + 1) = v313;
      *(void *)&__int128 v314 = v312;
      unint64_t v315 = ((121665 * v293) & 0x7FFFFFFFFFFFFLL) + (v1265 & 0x7FFFFFFFFFFFFLL) + 19 * (v314 >> 51);
      uint64_t v316 = *((void *)&v282 + 1) + (v1373 & 0x7FFFFFFFFFFFFLL);
      uint64_t v317 = (v312 & 0x7FFFFFFFFFFFFLL) + (v1343 & 0x7FFFFFFFFFFFFLL);
      unsigned __int128 v320 = (unint64_t)(19 * (*((void *)&v280 + 1) + v271)) * (unsigned __int128)(unint64_t)v297
           + (unint64_t)v316 * (unsigned __int128)(unint64_t)v293
           + (unint64_t)(19 * (v309 + v285)) * (unsigned __int128)(unint64_t)v296
           + (unint64_t)(19 * v317) * (unsigned __int128)(unint64_t)v295
           + v315 * (unsigned __int128)(unint64_t)v294
           + (((unint64_t)(19 * (*((void *)&v280 + 1) + v271)) * (unsigned __int128)(unint64_t)v296
             + (unint64_t)(19 * v316) * (unsigned __int128)(unint64_t)v297
             + (unint64_t)(19 * (v309 + v285)) * (unsigned __int128)(unint64_t)v295
             + (unint64_t)(19 * v317) * (unsigned __int128)(unint64_t)v294
             + v315 * (unsigned __int128)(unint64_t)v293) >> 51);
      unint64_t v319 = v320 >> 64;
      unint64_t v318 = v320;
      unsigned __int128 v323 = (unint64_t)(*((void *)&v280 + 1) + v271) * (unsigned __int128)(unint64_t)v293
           + (unint64_t)v316 * (unsigned __int128)(unint64_t)v294
           + (unint64_t)(19 * (v309 + v285)) * (unsigned __int128)(unint64_t)v297
           + (unint64_t)(19 * v317) * (unsigned __int128)(unint64_t)v296
           + v315 * (unsigned __int128)(unint64_t)v295
           + (__PAIR128__(v319, v318) >> 51);
      unint64_t v322 = v323 >> 64;
      unint64_t v321 = v323;
      unsigned __int128 v324 = (unint64_t)(*((void *)&v280 + 1) + v271) * (unsigned __int128)(unint64_t)v294
           + (unint64_t)v316 * (unsigned __int128)(unint64_t)v295
           + (unint64_t)(v309 + v285) * (unsigned __int128)(unint64_t)v293
           + (unint64_t)(19 * v317) * (unsigned __int128)(unint64_t)v297
           + v315 * (unsigned __int128)(unint64_t)v296;
      *((void *)&v314 + 1) = (v324 + (__PAIR128__(v322, v321) >> 51)) >> 64;
      *(void *)&__int128 v314 = v324 + ((__int128)__PAIR128__(v322, v321) >> 51);
      v325.i64[0] = v314;
      v325.i64[1] = (*((void *)&v280 + 1) + v271) * v295
                  + v316 * v296
                  + (v309 + v285) * v294
                  + v317 * v293
                  + v315 * v297
                  + ((unsigned __int128)v314 >> 51);
      v1320[2] = v292;
      unint64_t v326 = ((19 * (*((void *)&v280 + 1) + v271) * v296
             + 19 * v316 * v297
             + 19 * (v309 + v285) * v295
             + 19 * v317 * v294
             + v315 * v293) & 0x7FFFFFFFFFFFFLL)
           + 19
           * ((__int128)((unint64_t)(*((void *)&v280 + 1) + v271) * (unsigned __int128)(unint64_t)v295
                       + (unint64_t)v316 * (unsigned __int128)(unint64_t)v296
                       + (unint64_t)(v309 + v285) * (unsigned __int128)(unint64_t)v294
                       + (unint64_t)v317 * (unsigned __int128)(unint64_t)v293
                       + v315 * (unsigned __int128)(unint64_t)v297
                       + ((unsigned __int128)v314 >> 51)) >> 51);
      unint64_t v327 = (v318 & 0x7FFFFFFFFFFFFLL) + (v326 >> 51);
      char v12 = v1312;
      uint64_t *v1312 = v326 & 0x7FFFFFFFFFFFFLL;
      v1312[1] = v327 & 0x7FFFFFFFFFFFFLL;
      v1312[2] = (v321 & 0x7FFFFFFFFFFFFLL) + (v327 >> 51);
      *(int8x16_t *)(v1307 + 3) = vandq_s8(v208, v19);
      *(int8x16_t *)(v1320 + 3) = vandq_s8((int8x16_t)v287, v19);
      *(int8x16_t *)(v1312 + 3) = vandq_s8(v325, v19);
      do
      {
        uint64_t v328 = v1320[v40];
        uint64_t v329 = v1366[v40];
        uint64_t v330 = (v329 ^ v328) & v32;
        v1320[v40] = v330 ^ v328;
        v1366[v40++] = v330 ^ v329;
      }

      while (v40 != 5);
      for (uint64_t j = 0LL; j != 5; ++j)
      {
        uint64_t v332 = v1312[j];
        uint64_t v333 = v1307[j];
        uint64_t v334 = (v333 ^ v332) & v32;
        v1312[j] = v334 ^ v332;
        v1307[j] = v334 ^ v333;
      }

      int v21 = 2 * v1289;
      int v20 = v1294 + 1;
      uint64_t v22 = v1366;
      uint64_t v23 = v17;
      uint64_t v16 = v1354;
      uint64_t v24 = v1354;
      uint64_t v15 = v1298;
      uint64_t v14 = v1303;
      uint64_t v25 = v1298;
    }

    while (v1294 != 7);
    uint64_t v3 = v1204 + 1;
  }

  while (v1204 != 31);
  unint64_t v336 = v1312[3];
  unint64_t v335 = v1312[4];
  uint64_t v337 = 19 * v335;
  uint64_t v339 = *v1312;
  unint64_t v338 = v1312[1];
  unint64_t v340 = v1312[2];
  uint64_t v1271 = *v1320;
  unint64_t v1273 = v1320[1];
  uint64_t v341 = v340 * 2 * v338;
  uint64_t v342 = 2 * *v1312;
  uint64_t v343 = v336 * v342;
  uint64_t v344 = v338 * v338;
  uint64_t v345 = 38 * v335;
  uint64_t v346 = (__int128)(v336 * (unsigned __int128)(38 * v340)
                  + (unint64_t)v339 * (unsigned __int128)(unint64_t)v339
                  + 38 * v335 * (unsigned __int128)v338) >> 51;
  uint64_t v1239 = 19 * v336;
  uint64_t v347 = (19 * v336 * (unsigned __int128)v336
        + v338 * (unsigned __int128)(unint64_t)v342
        + 38 * v335 * (unsigned __int128)v340) >> 64;
  uint64_t v348 = 19 * v336 * v336 + v338 * v342 + 38 * v335 * v340;
  if (__CFADD__(v348, v346)) {
    ++v347;
  }
  *((void *)&v350 + 1) = v347;
  *(void *)&__int128 v350 = v348 + v346;
  uint64_t v349 = v350 >> 51;
  uint64_t v351 = v342 * v340;
  unint64_t v352 = ((unint64_t)v345 * (unsigned __int128)v336) >> 64;
  uint64_t v353 = v345 * v336;
  uint64_t v354 = (__PAIR128__( ((v338 * (unsigned __int128)v338) >> 64)
          + __CFADD__(v342 * v340, v344)
          + ((v340 * (unsigned __int128)(unint64_t)(2 * v339)) >> 64),
            v342 * v340 + v344)
        + __PAIR128__(v352, v353)) >> 64;
  if (__CFADD__(v342 * v340 + v344 + v353, v349)) {
    ++v354;
  }
  *((void *)&v356 + 1) = v354;
  *(void *)&__int128 v356 = v342 * v340 + v344 + v353 + v349;
  uint64_t v355 = v356 >> 51;
  BOOL v75 = __CFADD__(v343, v341);
  uint64_t v357 = v343 + v341;
  uint64_t v358 = ((v340 * (unsigned __int128)(2 * v338)) >> 64)
       + v75
       + ((v336 * (unsigned __int128)(unint64_t)(2 * v339)) >> 64);
  uint64_t v1295 = 19 * v335;
  BOOL v75 = __CFADD__(v357, v337 * v335);
  uint64_t v359 = v357 + v337 * v335;
  uint64_t v360 = ((19 * v335 * (unsigned __int128)v335) >> 64) + v75 + v358;
  uint64_t v361 = v359 + v355;
  if (__CFADD__(v359, v355)) {
    ++v360;
  }
  unint64_t v1268 = v1320[2];
  unint64_t v1270 = v1320[3];
  *((void *)&v365 + 1) = v360;
  *(void *)&__int128 v365 = v359 + v355;
  uint64_t v364 = v365 >> 51;
  unsigned __int128 v363 = v336 * (unsigned __int128)(2 * v338)
       + v340 * (unsigned __int128)v340
       + v335 * (unsigned __int128)(unint64_t)v342;
  uint64_t v362 = *((void *)&v363 + 1);
  if (__CFADD__((void)v363, v364)) {
    uint64_t v362 = *((void *)&v363 + 1) + 1LL;
  }
  uint64_t v1246 = v363 + v364;
  uint64_t v1250 = v361;
  *((void *)&v366 + 1) = v362;
  *(void *)&__int128 v366 = v363 + v364;
  uint64_t v367 = v339 * v339 + 38 * (v336 * v340 + v335 * v338);
  uint64_t v368 = 19 * (v366 >> 51);
  uint64_t v369 = v368 + v367;
  unint64_t v370 = v368 + (v367 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1329 = v1312[2];
  unint64_t v1339 = v1312[1];
  uint64_t v1254 = v340 * v338 + v336 * v339;
  uint64_t v1263 = v355;
  unint64_t v1299 = v1312[3];
  uint64_t v1284 = v340 * v340;
  unint64_t v1290 = v1312[4];
  uint64_t v1308 = *v1312;
  uint64_t v1243 = v336 * v338 + v335 * v339;
  uint64_t v1279 = v364;
  uint64_t v371 = 19 * v336 * v336 + 2 * v339 * v338 + 38 * v335 * v340 + v346;
  uint64_t v1230 = v351 + v344 + v353 + v349;
  unint64_t v1232 = (v371 & 0x7FFFFFFFFFFFFLL) + (v370 >> 51);
  uint64_t v1257 = v340 * v340 + 2 * v1243 + v364;
  uint64_t v1259 = v337 * v335 + 2 * v1254 + v355;
  uint64_t v372 = v1259 & 0x7FFFFFFFFFFFFLL;
  uint64_t v373 = v1257 & 0x7FFFFFFFFFFFFLL;
  uint64_t v374 = v369 & 0x7FFFFFFFFFFFFLL;
  uint64_t v375 = (v371 + (v370 >> 51)) & 0x7FFFFFFFFFFFFLL;
  uint64_t v376 = (v1230 & 0x7FFFFFFFFFFFFLL) + (v1232 >> 51);
  uint64_t v377 = -2LL;
  unint64_t v1266 = v1320[4];
  uint64_t v1235 = v1257 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1275 = v1259 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1304 = v376;
  uint64_t v1344 = v375;
  uint64_t v1313 = v369 & 0x7FFFFFFFFFFFFLL;
  do
  {
    unint64_t v378 = v374;
    uint64_t v379 = v375;
    uint64_t v380 = v376;
    uint64_t v381 = v372;
    uint64_t v382 = v373;
    uint64_t v383 = 2 * v374;
    uint64_t v384 = 2 * v375;
    uint64_t v385 = 38 * v376;
    uint64_t v386 = 19 * v373;
    uint64_t v387 = 38 * v373;
    unint64_t v388 = ((unint64_t)v385 * (unsigned __int128)(unint64_t)v372) >> 64;
    uint64_t v389 = v385 * v372;
    unsigned __int128 v1367 = (unint64_t)v374 * (unsigned __int128)(unint64_t)v374;
    *(void *)&__int128 v1355 = v389;
    *((void *)&v1355 + 1) = v388;
    uint64_t v391 = v1367 + v389 + v375 * 38 * v373;
    unint64_t v390 = (v1367 + __PAIR128__(v388, v389) + (unint64_t)v375 * (unsigned __int128)(unint64_t)(38 * v373)) >> 64;
    unint64_t v392 = ((unint64_t)(2 * v374) * (unsigned __int128)(unint64_t)v375) >> 64;
    uint64_t v393 = 2 * v374 * v375;
    unint64_t v394 = ((unint64_t)(19 * v372) * (unsigned __int128)(unint64_t)v372) >> 64;
    uint64_t v395 = 19 * v372 * v372;
    unint64_t v396 = ((unint64_t)(2 * v374) * (unsigned __int128)(unint64_t)v380) >> 64;
    uint64_t v397 = 2 * v374 * v380;
    unint64_t v398 = ((unint64_t)v375 * (unsigned __int128)(unint64_t)v375) >> 64;
    uint64_t v399 = v375 * v375;
    uint64_t v400 = ((unint64_t)v387 * (unsigned __int128)(unint64_t)v372) >> 64;
    uint64_t v401 = v387 * v381;
    unint64_t v402 = ((unint64_t)(2 * v374) * (unsigned __int128)(unint64_t)v381) >> 64;
    uint64_t v403 = (__int128)__PAIR128__(v390, v391) >> 51;
    uint64_t v404 = (__PAIR128__(v394, v395)
          + (unint64_t)v380 * (unsigned __int128)(unint64_t)v387
          + __PAIR128__(v392, v393)) >> 64;
    uint64_t v405 = v395 + v380 * v387 + v393;
    BOOL v75 = __CFADD__(v405, v403);
    uint64_t v406 = v405 + v403;
    if (v75) {
      ++v404;
    }
    *((void *)&v408 + 1) = v404;
    *(void *)&__int128 v408 = v406;
    uint64_t v407 = v408 >> 51;
    uint64_t v1349 = v397;
    uint64_t v410 = v399 + v401 + v397;
    uint64_t v409 = (__PAIR128__(v400 + __CFADD__(v399, v401) + v398, v399 + v401) + __PAIR128__(v396, v397)) >> 64;
    if (__CFADD__(v410, v407)) {
      ++v409;
    }
    uint64_t v412 = v384 * v380 + v386 * v382 + v383 * v381;
    uint64_t v411 = ((unint64_t)v384 * (unsigned __int128)(unint64_t)v380
          + (unint64_t)v386 * (unsigned __int128)(unint64_t)v382
          + __PAIR128__(v402, v383 * v381)) >> 64;
    *((void *)&v414 + 1) = v409;
    *(void *)&__int128 v414 = v410 + v407;
    uint64_t v413 = v414 >> 51;
    BOOL v75 = __CFADD__(v412, v413);
    uint64_t v415 = v412 + v413;
    if (v75) {
      ++v411;
    }
    uint64_t v416 = v406 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v418 + 1) = v411;
    *(void *)&__int128 v418 = v415;
    uint64_t v417 = v418 >> 51;
    uint64_t v372 = v415 & 0x7FFFFFFFFFFFFLL;
    uint64_t v419 = ((unint64_t)v384 * (unsigned __int128)(unint64_t)v381
          + (unint64_t)v380 * (unsigned __int128)(unint64_t)v380
          + (unint64_t)v383 * (unsigned __int128)(unint64_t)v382) >> 64;
    uint64_t v420 = v384 * v381 + v380 * v380 + v383 * v382;
    if (__CFADD__(v420, v417)) {
      ++v419;
    }
    uint64_t v373 = (v420 + v417) & 0x7FFFFFFFFFFFFLL;
    *((void *)&v422 + 1) = v419;
    *(void *)&__int128 v422 = v420 + v417;
    uint64_t v421 = v422 >> 51;
    unint64_t v423 = 19 * v421 + (v391 & 0x7FFFFFFFFFFFFLL);
    unint64_t v424 = v416 + (v423 >> 51);
    uint64_t v374 = v423 & 0x7FFFFFFFFFFFFLL;
    uint64_t v376 = ((v410 + v407) & 0x7FFFFFFFFFFFFLL) + (v424 >> 51);
    uint64_t v375 = v424 & 0x7FFFFFFFFFFFFLL;
    BOOL v75 = __CFADD__(v377++, 1LL);
  }

  while (!v75);
  uint64_t v1241 = v1284 + 2 * v1243 + v1279;
  uint64_t v1244 = v1230 + (v1232 >> 51);
  uint64_t v1280 = 19 * v1329;
  uint64_t v1321 = v373 * 19 * v1339 + v372 * 19 * v1329 + v374 * v1308 + v375 * v1295 + v376 * v1239;
  uint64_t v425 = (__int128)((unint64_t)v373 * (unsigned __int128)(19 * v1339)
                  + (unint64_t)v372 * (unsigned __int128)(19 * v1329)
                  + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1308
                  + (unint64_t)v375 * (unsigned __int128)(unint64_t)v1295
                  + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1239) >> 51;
  uint64_t v426 = v373 * 19 * v1329 + v372 * v1239 + v374 * v1339 + v375 * v1308 + v376 * v1295;
  uint64_t v1285 = v426 + v425;
  if (__CFADD__(v426, v425)) {
    uint64_t v427 = (((unint64_t)v373 * (unsigned __int128)(19 * v1329)
  }
           + (unint64_t)v372 * (unsigned __int128)(unint64_t)v1239
           + (unint64_t)v374 * (unsigned __int128)v1339
           + (unint64_t)v375 * (unsigned __int128)(unint64_t)v1308
  else {
    uint64_t v427 = ((unint64_t)v373 * (unsigned __int128)(19 * v1329)
  }
          + (unint64_t)v372 * (unsigned __int128)(unint64_t)v1239
          + (unint64_t)v374 * (unsigned __int128)v1339
          + (unint64_t)v375 * (unsigned __int128)(unint64_t)v1308
          + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1295) >> 64;
  uint64_t v1233 = (__int128)((unint64_t)v373 * (unsigned __int128)(19 * v1339)
                   + (unint64_t)v372 * (unsigned __int128)(19 * v1329)
                   + (unint64_t)v374 * (unsigned __int128)(unint64_t)v1308
                   + (unint64_t)v375 * (unsigned __int128)(unint64_t)v1295
                   + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1239) >> 51;
  unsigned __int128 v428 = (unint64_t)v373 * (unsigned __int128)(unint64_t)v1239
       + (unint64_t)v372 * (unsigned __int128)(unint64_t)v1295
       + (unint64_t)v374 * (unsigned __int128)v1329
       + (unint64_t)v375 * (unsigned __int128)v1339;
  *((void *)&v429 + 1) = v427;
  *(void *)&__int128 v429 = v1285;
  uint64_t v1231 = v429 >> 51;
  uint64_t v430 = v428 + v376 * v1308;
  uint64_t v431 = v430 + v1231;
  if (__CFADD__(v430, v1231)) {
    uint64_t v432 = ((v428 + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1308) >> 64) + 1;
  }
  else {
    uint64_t v432 = (v428 + (unint64_t)v376 * (unsigned __int128)(unint64_t)v1308) >> 64;
  }
  uint64_t v1227 = v431;
  *((void *)&v434 + 1) = v432;
  *(void *)&__int128 v434 = v431;
  uint64_t v1225 = v434 >> 51;
  uint64_t v433 = ((unint64_t)v373 * (unsigned __int128)(unint64_t)v1295
        + (unint64_t)v372 * (unsigned __int128)(unint64_t)v1308
        + (unint64_t)v374 * (unsigned __int128)v1299
        + (unint64_t)v375 * (unsigned __int128)v1329
        + (unint64_t)v376 * (unsigned __int128)v1339) >> 64;
  uint64_t v435 = v373 * v1295 + v372 * v1308 + v374 * v1299 + v375 * v1329 + v376 * v1339;
  BOOL v75 = __CFADD__(v435, v1225);
  uint64_t v436 = v435 + v1225;
  if (v75) {
    ++v433;
  }
  unsigned __int128 v437 = (unint64_t)v373 * (unsigned __int128)(unint64_t)v1308
       + (unint64_t)v372 * (unsigned __int128)v1339
       + (unint64_t)v374 * (unsigned __int128)v1290
       + (unint64_t)v375 * (unsigned __int128)v1299
       + (unint64_t)v376 * (unsigned __int128)v1329;
  *((void *)&v438 + 1) = v433;
  *(void *)&__int128 v438 = v436;
  uint64_t v1224 = v438 >> 51;
  uint64_t v439 = v437 + v1224;
  if (__CFADD__((void)v437, v1224)) {
    uint64_t v440 = *((void *)&v437 + 1) + 1LL;
  }
  else {
    uint64_t v440 = ((unint64_t)v373 * (unsigned __int128)(unint64_t)v1308
  }
          + (unint64_t)v372 * (unsigned __int128)v1339
          + (unint64_t)v374 * (unsigned __int128)v1290
          + (unint64_t)v375 * (unsigned __int128)v1299
          + (unint64_t)v376 * (unsigned __int128)v1329) >> 64;
  *((void *)&v441 + 1) = v440;
  *(void *)&__int128 v441 = v437 + v1224;
  uint64_t v1216 = v441 >> 51;
  uint64_t v1296 = v436 & 0x7FFFFFFFFFFFFLL;
  uint64_t v442 = v439 & 0x7FFFFFFFFFFFFLL;
  unint64_t v443 = (v1321 & 0x7FFFFFFFFFFFFLL) + 19 * v1216;
  uint64_t v1322 = v443 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1222 = v443;
  unsigned __int128 v444 = (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1344)
  uint64_t v445 = 19 * v1235;
  uint64_t v446 = ((v1285 & 0x7FFFFFFFFFFFFLL) + (v443 >> 51)) & 0x7FFFFFFFFFFFFLL;
  unint64_t v1221 = (v1285 & 0x7FFFFFFFFFFFFLL) + (v443 >> 51);
  unsigned __int128 v447 = v444 + (unint64_t)v446 * (unsigned __int128)(unint64_t)(19 * v1235);
  uint64_t v448 = (v1227 & 0x7FFFFFFFFFFFFLL) + (v1221 >> 51);
  uint64_t v449 = 19 * v1275;
  uint64_t v1219 = (__int128)(v447 + (unint64_t)v448 * (unsigned __int128)(unint64_t)(19 * v1275)) >> 51;
  unsigned __int128 v451 = (v439 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1304)
       + (unint64_t)v1296 * (unsigned __int128)(unint64_t)(19 * v1275)
       + (unint64_t)v1322 * (unsigned __int128)(unint64_t)v1344
       + (unint64_t)v446 * (unsigned __int128)(unint64_t)v1313
       + (unint64_t)v448 * (unsigned __int128)(unint64_t)(19 * v1235);
  uint64_t v450 = *((void *)&v451 + 1);
  if (__CFADD__((void)v451, v1219)) {
    uint64_t v450 = *((void *)&v451 + 1) + 1LL;
  }
  uint64_t v1286 = v446;
  uint64_t v452 = v442 * v449 + v1296 * v445 + v1322 * v1304 + v446 * v1344 + v448 * v1313;
  *((void *)&v453 + 1) = v450;
  *(void *)&__int128 v453 = v451 + v1219;
  uint64_t v1228 = v453 >> 51;
  BOOL v75 = __CFADD__(v452, v1228);
  uint64_t v454 = v452 + v1228;
  if (v75) {
    uint64_t v455 = (((unint64_t)v442 * (unsigned __int128)(unint64_t)v449
  }
           + (unint64_t)v1296 * (unsigned __int128)(unint64_t)v445
           + (unint64_t)v1322 * (unsigned __int128)(unint64_t)v1304
           + (unint64_t)v446 * (unsigned __int128)(unint64_t)v1344
  else {
    uint64_t v455 = ((unint64_t)v442 * (unsigned __int128)(unint64_t)v449
  }
          + (unint64_t)v1296 * (unsigned __int128)(unint64_t)v445
          + (unint64_t)v1322 * (unsigned __int128)(unint64_t)v1304
          + (unint64_t)v446 * (unsigned __int128)(unint64_t)v1344
          + (unint64_t)v448 * (unsigned __int128)(unint64_t)v1313) >> 64;
  unsigned __int128 v456 = (unint64_t)v442 * (unsigned __int128)(unint64_t)v445
       + (unint64_t)v1296 * (unsigned __int128)(unint64_t)v1313;
  uint64_t v457 = v1250 & 0x7FFFFFFFFFFFFLL;
  unsigned __int128 v458 = v456
       + (v1250 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1322
       + (unint64_t)v446 * (unsigned __int128)(unint64_t)v1304
       + (unint64_t)v448 * (unsigned __int128)(unint64_t)v1344;
  *((void *)&v459 + 1) = v455;
  *(void *)&__int128 v459 = v454;
  uint64_t v1251 = v459 >> 51;
  if (__CFADD__((void)v458, v1251)) {
    uint64_t v460 = *((void *)&v458 + 1) + 1LL;
  }
  else {
    uint64_t v460 = *((void *)&v458 + 1);
  }
  uint64_t v1236 = v448;
  unsigned __int128 v461 = (unint64_t)v442 * (unsigned __int128)(unint64_t)v1313
       + (unint64_t)v1296 * (unsigned __int128)(unint64_t)v1344
       + (v1246 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1322
       + (unint64_t)v457 * (unsigned __int128)(unint64_t)v446
       + (unint64_t)v448 * (unsigned __int128)(unint64_t)v1304;
  uint64_t v462 = v380 * v380 + v384 * v381 + v383 * v382 + v417;
  uint64_t v463 = 19 * v382 * v382 + v384 * v380;
  uint64_t v1305 = v458 + v1251;
  *((void *)&v465 + 1) = v460;
  *(void *)&__int128 v465 = v458 + v1251;
  uint64_t v464 = v465 >> 51;
  if (__CFADD__((void)v461, v464)) {
    uint64_t v466 = *((void *)&v461 + 1) + 1LL;
  }
  else {
    uint64_t v466 = *((void *)&v461 + 1);
  }
  uint64_t v1247 = v466;
  unint64_t v467 = v396 + (v378 >> 63) * v380;
  unsigned __int128 v468 = (unint64_t)v382 * (unsigned __int128)0x26uLL * (unint64_t)v380
       + (unint64_t)v381 * (unsigned __int128)(unint64_t)v381 * 0x13
       + __PAIR128__(v392 + (v378 >> 63) * v379, v393);
  uint64_t v469 = v395 + v380 * v387;
  uint64_t v470 = v401 + v379 * v379 + v383 * v380;
  uint64_t v471 = v463 + v383 * v381;
  uint64_t v472 = v469 + v383 * v379;
  uint64_t v473 = v1355 + v379 * v387;
  uint64_t v474 = (__int128)((unint64_t)v382 * (unsigned __int128)0x26uLL * (unint64_t)v379 + v1355 + v1367) >> 51;
  if (__CFADD__((void)v468, v474)) {
    uint64_t v475 = *((void *)&v468 + 1) + 1LL;
  }
  else {
    uint64_t v475 = *((void *)&v468 + 1);
  }
  *((void *)&v477 + 1) = v475;
  *(void *)&__int128 v477 = v468 + v474;
  uint64_t v476 = v477 >> 51;
  uint64_t v478 = (__PAIR128__(v398, v399)
        + (unint64_t)v382 * (unsigned __int128)0x26uLL * (unint64_t)v381
        + __PAIR128__(v467, v1349)) >> 64;
  uint64_t v479 = v399 + 38 * v382 * v381 + v1349;
  BOOL v75 = __CFADD__(v479, v476);
  uint64_t v480 = v479 + v476;
  if (v75) {
    ++v478;
  }
  *((void *)&v481 + 1) = v478;
  *(void *)&__int128 v481 = v480;
  uint64_t v482 = v471 + (v481 >> 51);
  uint64_t v483 = v473 + v378 * v378;
  unint64_t v484 = 19 * v421 + (v483 & 0x7FFFFFFFFFFFFLL);
  uint64_t v485 = v472 + v474;
  unint64_t v486 = v470 + v476 + (((v485 & 0x7FFFFFFFFFFFFLL) + (v484 >> 51)) >> 51);
  uint64_t v487 = v485 + (v484 >> 51);
  uint64_t v488 = v483 + 19 * v421;
  uint64_t v489 = v482 * v1280 + v488 * v1308 + v487 * 19 * v1290 + v486 * 19 * v1299 + 19 * (v1216 + v462 * v1339);
  uint64_t v490 = v482 * 19 * v1299 + v462 * v1280 + v488 * v1339 + v487 * v1308;
  uint64_t v491 = v482 * 19 * v1290 + v462 * 19 * v1299 + v488 * v1329 + v487 * v1339 + v486 * v1308;
  uint64_t v492 = v482 * v1308;
  uint64_t v493 = v482 * v1339 + v462 * v1308;
  uint64_t v494 = v492 + v462 * 19 * v1290 + v488 * v1299;
  uint64_t v495 = v493 + v488 * v1290 + v487 * v1299;
  unint64_t v496 = v494 + v487 * v1329 + v486 * v1339;
  unint64_t v497 = v495 + v486 * v1329;
  uint64_t v498 = 19 * v1290 * v1290 + 2 * v1254 + v1263;
  uint64_t v499 = v490 + v486 * 19 * v1290 + v1233 + (v1222 >> 51);
  unint64_t v500 = v491 + v1231 + (v1221 >> 51);
  uint64_t v1356 = v461 + v464;
  *((void *)&v481 + 1) = v1247;
  *(void *)&__int128 v481 = v461 + v464;
  uint64_t v501 = v481 >> 51;
  unint64_t v502 = ((v447 + v448 * 19 * v1275) & 0x7FFFFFFFFFFFFLL) + 19 * v501;
  unint64_t v503 = ((v451 + v1219) & 0x7FFFFFFFFFFFFLL) + (v502 >> 51);
  uint64_t v504 = (v454 & 0x7FFFFFFFFFFFFLL) + (v503 >> 51);
  uint64_t v505 = v496 + v1225;
  uint64_t v506 = (v496 + v1225) * v1344 + (v497 + v1224) * v1313 + v489 * v1241 + v499 * v498 + v500 * v1244 + v464;
  uint64_t v507 = (v496 + v1225) * 19 * v1259
       + (v497 + v1224) * 19 * v1244
       + v489 * v1344
       + v499 * v1313
       + v500 * 19 * v1257
       + v1219;
  uint64_t v508 = (v496 + v1225) * v1313 + (v497 + v1224) * 19 * v1257 + v489 * v498 + v499 * v1244 + v500 * v1344 + v1251;
  uint64_t v509 = v505 * 19 * v1244 + v489 * v1313 + v499 * 19 * v1257 + v500 * 19 * v1259 + 19 * (v501 + (v497 + v1224) * v1344);
  unint64_t v1340 = v502;
  uint64_t v510 = v507 + (v502 >> 51);
  uint64_t v511 = 38 * (v506 & 0x7FFFFFFFFFFFFLL);
  uint64_t v512 = 2 * (v509 & 0x7FFFFFFFFFFFFLL);
  uint64_t v513 = (__int128)((unint64_t)v511 * (unsigned __int128)(v510 & 0x7FFFFFFFFFFFFLL)
  unsigned __int128 v514 = (v510 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v510 & 0x7FFFFFFFFFFFFLL)
  *((void *)&v481 + 1) = ((unint64_t)v512 * (unsigned __int128)(v510 & 0x7FFFFFFFFFFFFLL)
                          + (v508 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v508 & 0x7FFFFFFFFFFFFLL) * 0x13
                          + (unint64_t)v511 * (unsigned __int128)(unint64_t)v504
                          + (((unint64_t)v511 * (unsigned __int128)(v510 & 0x7FFFFFFFFFFFFLL)
  *(void *)&__int128 v481 = v512 * (v510 & 0x7FFFFFFFFFFFFLL)
                   + 19 * (v508 & 0x7FFFFFFFFFFFFLL) * (v508 & 0x7FFFFFFFFFFFFLL)
                   + v511 * v504
                   + v513;
  uint64_t v515 = v481 >> 51;
  uint64_t v516 = 2 * (v508 & 0x7FFFFFFFFFFFFLL);
  *((void *)&v481 + 1) = (v514 + ((unsigned __int128)v481 >> 51)) >> 64;
  *(void *)&__int128 v481 = v514 + v515;
  signed __int128 v517 = (unint64_t)v516 * (unsigned __int128)(v509 & 0x7FFFFFFFFFFFFLL)
       + (v506 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v506 & 0x7FFFFFFFFFFFFLL) * 0x13
       + (v510 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v504 * 2
       + ((unsigned __int128)v481 >> 51);
  signed __int128 v518 = (v506 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v509 & 0x7FFFFFFFFFFFFLL);
  *((void *)&v518 + 1) = ((unint64_t)v516 * (unsigned __int128)(v510 & 0x7FFFFFFFFFFFFLL)
                          + v518 * 2
                          + (unint64_t)v504 * (unsigned __int128)(unint64_t)v504
                          + ((unsigned __int128)v517 >> 51)) >> 64;
  *(void *)&signed __int128 v518 = v516 * (v510 & 0x7FFFFFFFFFFFFLL) + 2 * v518 + v504 * v504 + (v517 >> 51);
  uint64_t v519 = v505 * 19 * v1257 + (v497 + v1224) * 19 * v1259 + v489 * v1244 + v499 * v1344 + v500 * v1313 + v1228;
  unint64_t v1345 = v503;
  uint64_t v1350 = v504;
  uint64_t v520 = v519 + (v503 >> 51);
  uint64_t v521 = 38 * v506;
  uint64_t v522 = v509 * v509 + v510 * 38 * v506 + 38 * v508 * v520;
  uint64_t v523 = 19 * (v518 >> 51);
  uint64_t v524 = v523 + v522;
  uint64_t v525 = 19 * v508 * v508 + v510 * 2 * v509 + v520 * v521 + v513;
  unint64_t v526 = v523 + (v522 & 0x7FFFFFFFFFFFFLL);
  uint64_t v527 = v525 + (v526 >> 51);
  unint64_t v528 = ((v521 * v508 + v510 * v510 + v520 * 2 * v509 + v515) & 0x7FFFFFFFFFFFFLL)
       + (((v525 & 0x7FFFFFFFFFFFFLL) + (v526 >> 51)) >> 51);
  uint64_t v529 = v524 & 0x7FFFFFFFFFFFFLL;
  uint64_t v530 = ((v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1322) >> 64;
  uint64_t v531 = (v524 & 0x7FFFFFFFFFFFFLL) * v1322;
  uint64_t v532 = ((v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1286) >> 64;
  uint64_t v533 = (v524 & 0x7FFFFFFFFFFFFLL) * v1286;
  uint64_t v534 = ((v524 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1236) >> 64;
  uint64_t v535 = v518 & 0x7FFFFFFFFFFFFLL;
  signed __int128 v537 = __PAIR128__( v530 + (unint64_t)__CFADD__((void)v536, v531) + *((void *)&v536 + 1),  (uint64_t)v536 + v531)
  unsigned __int128 v539 = __PAIR128__( (((v527 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1322) >> 64)
         + __CFADD__(v538 + v533, (v527 & 0x7FFFFFFFFFFFFLL) * v1322)
         + v532
         + __CFADD__((void)v538, v533)
         + *((void *)&v538 + 1),
           v538 + v533 + (v527 & 0x7FFFFFFFFFFFFLL) * v1322)
       + v528 * (unsigned __int128)(unint64_t)(19 * v442);
  uint64_t v540 = (v518 & 0x7FFFFFFFFFFFFLL) * 19 * v1296 + (v517 & 0x7FFFFFFFFFFFFLL) * 19 * v442;
  unint64_t v541 = (__PAIR128__( v534 + __CFADD__(v540, v529 * v1236)
          + (((v518 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1296)
            + (v517 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v442)) >> 64),
            v540 + v529 * v1236)
        + (v527 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1286) >> 64;
  *((void *)&v518 + 1) = (v539 + ((unsigned __int128)v537 >> 51)) >> 64;
  *(void *)&signed __int128 v518 = v539 + (v537 >> 51);
  unsigned __int128 v542 = __PAIR128__(v541, v540 + v529 * v1236 + (v527 & 0x7FFFFFFFFFFFFuLL) * v1286)
       + v528 * (unsigned __int128)(unint64_t)v1322
       + ((unsigned __int128)v518 >> 51);
  unsigned __int128 v543 = (unint64_t)v535 * (unsigned __int128)(unint64_t)(19 * v442)
       + (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1322
       + (unint64_t)v1296 * (unsigned __int128)(unint64_t)v529
       + (v527 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1236
       + v528 * (unsigned __int128)(unint64_t)v1286
       + (v542 >> 51);
  uint64_t v544 = v543 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1374 = v535 * 19 * v442
        + (v517 & 0x7FFFFFFFFFFFFLL) * v1322
        + v1296 * v529
        + (v527 & 0x7FFFFFFFFFFFFLL) * v1236
        + v528 * v1286
        + (v542 >> 51);
  signed __int128 v545 = (unint64_t)v535 * (unsigned __int128)(unint64_t)v1322
       + (v517 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1286
       + (unint64_t)v442 * (unsigned __int128)(unint64_t)v529
       + (unint64_t)v1296 * (unsigned __int128)(v527 & 0x7FFFFFFFFFFFFLL)
       + v528 * (unsigned __int128)(unint64_t)v1236
       + (v543 >> 51);
  uint64_t v546 = v545 & 0x7FFFFFFFFFFFFLL;
  unint64_t v547 = (v537 & 0x7FFFFFFFFFFFFLL) + 19 * (v545 >> 51);
  uint64_t v548 = v547 & 0x7FFFFFFFFFFFFLL;
  unint64_t v549 = (v518 & 0x7FFFFFFFFFFFFLL) + (v547 >> 51);
  uint64_t v550 = v549 & 0x7FFFFFFFFFFFFLL;
  uint64_t v551 = (v542 & 0x7FFFFFFFFFFFFLL) + (v549 >> 51);
  uint64_t v552 = -5LL;
  uint64_t v1314 = v545 & 0x7FFFFFFFFFFFFLL;
  uint64_t v553 = v543 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1362 = v551;
  uint64_t v1330 = v549 & 0x7FFFFFFFFFFFFLL;
  uint64_t v554 = v548;
  do
  {
    uint64_t v555 = 2 * v554;
    uint64_t v556 = 2 * v550;
    signed __int128 v557 = (unint64_t)(38 * v551) * (unsigned __int128)(unint64_t)v553
    unint64_t v558 = ((unint64_t)(2 * v554) * (unsigned __int128)(unint64_t)v550) >> 64;
    uint64_t v559 = 2 * v554 * v550;
    unint64_t v560 = ((unint64_t)v550 * (unsigned __int128)(unint64_t)v550) >> 64;
    uint64_t v561 = v550 * v550;
    unint64_t v562 = ((unint64_t)v556 * (unsigned __int128)(unint64_t)v551) >> 64;
    uint64_t v563 = v556 * v551;
    uint64_t v564 = v557 >> 51;
    unsigned __int128 v567 = (unint64_t)(19 * v553) * (unsigned __int128)(unint64_t)v553
    uint64_t v566 = v567 >> 64;
    uint64_t v565 = v567;
    BOOL v75 = __CFADD__(v565, v564);
    uint64_t v568 = v565 + v564;
    if (v75) {
      uint64_t v569 = v566 + 1;
    }
    else {
      uint64_t v569 = v566;
    }
    uint64_t v570 = v568 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v572 + 1) = v569;
    *(void *)&__int128 v572 = v568;
    uint64_t v571 = v572 >> 51;
    unint64_t v573 = ((unint64_t)v556 * (unsigned __int128)(unint64_t)v553) >> 64;
    uint64_t v575 = v561 + 38 * v546 * v553 + v555 * v551;
    uint64_t v574 = (__PAIR128__(v560, v561)
          + (unint64_t)(38 * v546) * (unsigned __int128)(unint64_t)v553
          + (unint64_t)v555 * (unsigned __int128)(unint64_t)v551) >> 64;
    BOOL v75 = __CFADD__(v575, v571);
    uint64_t v576 = v575 + v571;
    if (v75) {
      ++v574;
    }
    uint64_t v577 = v556 * v553;
    *((void *)&v579 + 1) = v574;
    *(void *)&__int128 v579 = v576;
    uint64_t v578 = v579 >> 51;
    uint64_t v581 = v563 + 19 * v546 * v546 + v555 * v553;
    uint64_t v580 = (__PAIR128__(v562, v563)
          + (unint64_t)(19 * v546) * (unsigned __int128)(unint64_t)v546
          + (unint64_t)v555 * (unsigned __int128)(unint64_t)v553) >> 64;
    if (__CFADD__(v581, v578)) {
      ++v580;
    }
    *((void *)&v583 + 1) = v580;
    *(void *)&__int128 v583 = v581 + v578;
    uint64_t v582 = v583 >> 51;
    uint64_t v553 = (v581 + v578) & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v584 = __PAIR128__(v573, v577)
         + (unint64_t)v551 * (unsigned __int128)(unint64_t)v551
         + (unint64_t)v555 * (unsigned __int128)(unint64_t)v546;
    uint64_t v585 = v584 + v582;
    if (__CFADD__((void)v584, v582)) {
      uint64_t v586 = *((void *)&v584 + 1) + 1LL;
    }
    else {
      uint64_t v586 = (__PAIR128__(v573, v577)
    }
            + (unint64_t)v551 * (unsigned __int128)(unint64_t)v551
            + (unint64_t)v555 * (unsigned __int128)(unint64_t)v546) >> 64;
    uint64_t v546 = v585 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v587 + 1) = v586;
    *(void *)&__int128 v587 = v585;
    unint64_t v588 = (v557 & 0x7FFFFFFFFFFFFLL) + 19 * (v587 >> 51);
    uint64_t v554 = v588 & 0x7FFFFFFFFFFFFLL;
    unint64_t v589 = v570 + (v588 >> 51);
    uint64_t v550 = v589 & 0x7FFFFFFFFFFFFLL;
    uint64_t v551 = (v576 & 0x7FFFFFFFFFFFFLL) + (v589 >> 51);
    BOOL v75 = __CFADD__(v552++, 1LL);
  }

  while (!v75);
  signed __int128 v590 = (unint64_t)v546 * (unsigned __int128)(unint64_t)(19 * v1330)
       + (unint64_t)v553 * (unsigned __int128)(unint64_t)(19 * v1362)
       + (unint64_t)v554 * (unsigned __int128)(unint64_t)v548
  uint64_t v592 = ((unint64_t)v546 * (unsigned __int128)(unint64_t)(19 * v1362)
        + (unint64_t)v553 * (unsigned __int128)(unint64_t)(19 * v544)
        + (unint64_t)v554 * (unsigned __int128)(unint64_t)v1330
        + (unint64_t)v550 * (unsigned __int128)(unint64_t)v548
        + (unint64_t)v551 * (unsigned __int128)(unint64_t)(19 * v1314)) >> 64;
  uint64_t v591 = v546 * 19 * v1362 + v553 * 19 * v544 + v554 * v1330 + v550 * v548 + v551 * 19 * v1314;
  uint64_t v593 = v590 >> 51;
  BOOL v75 = __CFADD__(v591, v593);
  uint64_t v594 = v591 + v593;
  if (v75) {
    ++v592;
  }
  uint64_t v596 = ((unint64_t)v546 * (unsigned __int128)(unint64_t)(19 * v544)
        + (unint64_t)v553 * (unsigned __int128)(unint64_t)(19 * v1314)
        + (unint64_t)v554 * (unsigned __int128)(unint64_t)v1362
        + (unint64_t)v550 * (unsigned __int128)(unint64_t)v1330
        + (unint64_t)v551 * (unsigned __int128)(unint64_t)v548) >> 64;
  uint64_t v595 = v546 * 19 * v544 + v553 * 19 * v1314 + v554 * v1362 + v550 * v1330 + v551 * v548;
  *((void *)&v598 + 1) = v592;
  *(void *)&__int128 v598 = v594;
  uint64_t v597 = v598 >> 51;
  BOOL v75 = __CFADD__(v595, v597);
  uint64_t v599 = v595 + v597;
  if (v75) {
    ++v596;
  }
  *((void *)&v601 + 1) = v596;
  *(void *)&__int128 v601 = v599;
  uint64_t v600 = v601 >> 51;
  unsigned __int128 v602 = (unint64_t)v546 * (unsigned __int128)(unint64_t)(19 * v1314)
       + (unint64_t)v553 * (unsigned __int128)(unint64_t)v548
       + (v1374 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v554
       + (unint64_t)v550 * (unsigned __int128)(unint64_t)v1362
       + (unint64_t)v551 * (unsigned __int128)(unint64_t)v1330;
  uint64_t v603 = v602 + v600;
  if (__CFADD__((void)v602, v600)) {
    uint64_t v604 = *((void *)&v602 + 1) + 1LL;
  }
  else {
    uint64_t v604 = ((unint64_t)v546 * (unsigned __int128)(unint64_t)(19 * v1314)
  }
          + (unint64_t)v553 * (unsigned __int128)(unint64_t)v548
          + (v1374 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v554
          + (unint64_t)v550 * (unsigned __int128)(unint64_t)v1362
          + (unint64_t)v551 * (unsigned __int128)(unint64_t)v1330) >> 64;
  uint64_t v605 = v594 & 0x7FFFFFFFFFFFFLL;
  uint64_t v606 = v599 & 0x7FFFFFFFFFFFFLL;
  unsigned __int128 v607 = (unint64_t)v546 * (unsigned __int128)(unint64_t)v548
       + (unint64_t)v553 * (unsigned __int128)(unint64_t)v1330;
  uint64_t v1331 = v603;
  *((void *)&v609 + 1) = v604;
  *(void *)&__int128 v609 = v603;
  uint64_t v608 = v609 >> 51;
  unsigned __int128 v610 = v607
       + (v545 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v554
       + (v1374 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v550
       + (unint64_t)v551 * (unsigned __int128)(unint64_t)v1362;
  uint64_t v611 = v610 + v608;
  if (__CFADD__((void)v610, v608)) {
    uint64_t v612 = *((void *)&v610 + 1) + 1LL;
  }
  else {
    uint64_t v612 = (v607
  }
          + (v545 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v554
          + (v1374 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v550
          + (unint64_t)v551 * (unsigned __int128)(unint64_t)v1362) >> 64;
  uint64_t v613 = v611 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1315 = v610 + v608;
  uint64_t v1323 = v603 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v614 + 1) = v612;
  *(void *)&__int128 v614 = v610 + v608;
  unint64_t v615 = (v590 & 0x7FFFFFFFFFFFFLL) + 19 * (v614 >> 51);
  uint64_t v616 = v615 & 0x7FFFFFFFFFFFFLL;
  unint64_t v617 = v605 + (v615 >> 51);
  uint64_t v618 = v617 & 0x7FFFFFFFFFFFFLL;
  uint64_t v619 = v606 + (v617 >> 51);
  uint64_t v620 = -10LL;
  uint64_t v621 = v611 & 0x7FFFFFFFFFFFFLL;
  uint64_t v622 = v603 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1368 = v616;
  uint64_t v1375 = v619;
  uint64_t v1363 = v618;
  do
  {
    uint64_t v623 = 2 * v616;
    uint64_t v624 = 2 * v618;
    unsigned __int128 v627 = (unint64_t)(38 * v619) * (unsigned __int128)(unint64_t)v622
    unint64_t v626 = v627 >> 64;
    unint64_t v625 = v627;
    unint64_t v628 = ((unint64_t)(2 * v616) * (unsigned __int128)(unint64_t)v618) >> 64;
    uint64_t v629 = v623 * v618;
    uint64_t v630 = ((unint64_t)v618 * (unsigned __int128)(unint64_t)v618) >> 64;
    uint64_t v631 = v618 * v618;
    unint64_t v632 = ((unint64_t)v623 * (unsigned __int128)(unint64_t)v622) >> 64;
    uint64_t v633 = v623 * v622;
    unint64_t v634 = ((unint64_t)v624 * (unsigned __int128)(unint64_t)v619) >> 64;
    uint64_t v635 = v624 * v619;
    uint64_t v636 = v625 & 0x7FFFFFFFFFFFFLL;
    uint64_t v637 = (__int128)__PAIR128__(v626, v625) >> 51;
    unsigned __int128 v640 = (unint64_t)(19 * v622) * (unsigned __int128)(unint64_t)v622
    uint64_t v639 = v640 >> 64;
    uint64_t v638 = v640;
    BOOL v75 = __CFADD__(v638, v637);
    uint64_t v641 = v638 + v637;
    if (v75) {
      uint64_t v642 = v639 + 1;
    }
    else {
      uint64_t v642 = v639;
    }
    uint64_t v643 = v641 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v645 + 1) = v642;
    *(void *)&__int128 v645 = v641;
    uint64_t v644 = v645 >> 51;
    unint64_t v646 = ((unint64_t)v624 * (unsigned __int128)(unint64_t)v622) >> 64;
    uint64_t v648 = (__PAIR128__( (((unint64_t)(38 * v621) * (unsigned __int128)(unint64_t)v622) >> 64)
            + __CFADD__(v631, 38 * v621 * v622)
            + v630,
              v631 + 38 * v621 * v622)
          + (unint64_t)v623 * (unsigned __int128)(unint64_t)v619) >> 64;
    uint64_t v647 = v631 + 38 * v621 * v622 + v623 * v619;
    BOOL v75 = __CFADD__(v647, v644);
    uint64_t v649 = v647 + v644;
    if (v75) {
      ++v648;
    }
    uint64_t v650 = v624 * v622;
    *((void *)&v652 + 1) = v648;
    *(void *)&__int128 v652 = v649;
    uint64_t v651 = v652 >> 51;
    uint64_t v654 = v635 + 19 * v621 * v621 + v633;
    uint64_t v653 = (__PAIR128__(v634, v635)
          + (unint64_t)(19 * v621) * (unsigned __int128)(unint64_t)v621
          + __PAIR128__(v632, v633)) >> 64;
    if (__CFADD__(v654, v651)) {
      ++v653;
    }
    *((void *)&v656 + 1) = v653;
    *(void *)&__int128 v656 = v654 + v651;
    uint64_t v655 = v656 >> 51;
    uint64_t v622 = (v654 + v651) & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v657 = __PAIR128__(v646, v650)
         + (unint64_t)v619 * (unsigned __int128)(unint64_t)v619
         + (unint64_t)v623 * (unsigned __int128)(unint64_t)v621;
    BOOL v75 = __CFADD__((void)v657, v655);
    uint64_t v658 = v657 + v655;
    if (v75) {
      uint64_t v659 = *((void *)&v657 + 1) + 1LL;
    }
    else {
      uint64_t v659 = (__PAIR128__(v646, v650)
    }
            + (unint64_t)v619 * (unsigned __int128)(unint64_t)v619
            + (unint64_t)v623 * (unsigned __int128)(unint64_t)v621) >> 64;
    uint64_t v621 = v658 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v660 + 1) = v659;
    *(void *)&__int128 v660 = v658;
    unint64_t v661 = v636 + 19 * (v660 >> 51);
    uint64_t v616 = v661 & 0x7FFFFFFFFFFFFLL;
    unint64_t v662 = v643 + (v661 >> 51);
    uint64_t v618 = v662 & 0x7FFFFFFFFFFFFLL;
    uint64_t v619 = (v649 & 0x7FFFFFFFFFFFFLL) + (v662 >> 51);
    BOOL v75 = __CFADD__(v620++, 1LL);
  }

  while (!v75);
  uint64_t v663 = 19 * v613;
  uint64_t v664 = 19 * v1323;
  uint64_t v665 = v621 * 19 * v1363 + v622 * 19 * v1375 + v616 * v1368 + v618 * 19 * v613 + v619 * 19 * v1323;
  uint64_t v1309 = 19 * v1375;
  uint64_t v666 = ((unint64_t)v621 * (unsigned __int128)(unint64_t)(19 * v1375)
        + (unint64_t)v622 * (unsigned __int128)(unint64_t)(19 * v1323)
        + (unint64_t)v616 * (unsigned __int128)(unint64_t)v1363
        + (unint64_t)v618 * (unsigned __int128)(unint64_t)v1368
        + (unint64_t)v619 * (unsigned __int128)(unint64_t)(19 * v613)) >> 64;
  uint64_t v667 = v621 * 19 * v1375 + v622 * 19 * v1323 + v616 * v1363 + v618 * v1368 + v619 * 19 * v613;
  uint64_t v668 = (__int128)((unint64_t)v621 * (unsigned __int128)(unint64_t)(19 * v1363)
                  + (unint64_t)v622 * (unsigned __int128)(unint64_t)(19 * v1375)
                  + (unint64_t)v616 * (unsigned __int128)(unint64_t)v1368
  BOOL v75 = __CFADD__(v667, v668);
  uint64_t v669 = v667 + v668;
  uint64_t v670 = v621 * 19 * v1323;
  if (v75) {
    ++v666;
  }
  uint64_t v1324 = 19 * v1323;
  uint64_t v671 = v622 * v1368;
  uint64_t v672 = v1331 & 0x7FFFFFFFFFFFFLL;
  unint64_t v673 = ((v1331 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v616) >> 64;
  uint64_t v675 = (__PAIR128__( (((unint64_t)v622 * (unsigned __int128)(unint64_t)v663) >> 64)
          + __CFADD__(v670, v622 * v663)
          + (((unint64_t)v621 * (unsigned __int128)(unint64_t)v664) >> 64),
            v670 + v622 * v663)
        + (unint64_t)v616 * (unsigned __int128)(unint64_t)v1375
        + (unint64_t)v618 * (unsigned __int128)(unint64_t)v1363
        + (unint64_t)v619 * (unsigned __int128)(unint64_t)v1368) >> 64;
  uint64_t v674 = v670 + v622 * v663 + v616 * v1375 + v618 * v1363 + v619 * v1368;
  uint64_t v676 = (v1331 & 0x7FFFFFFFFFFFFLL) * v616;
  *((void *)&v678 + 1) = v666;
  *(void *)&__int128 v678 = v669;
  uint64_t v677 = v678 >> 51;
  BOOL v75 = __CFADD__(v674, v677);
  uint64_t v679 = v674 + v677;
  uint64_t v680 = v621 * v663;
  if (v75) {
    ++v675;
  }
  uint64_t v1332 = 19 * v613;
  unint64_t v681 = (((unint64_t)v622 * (unsigned __int128)(unint64_t)v1368) >> 64)
       + __CFADD__(v680, v671)
       + (((unint64_t)v621 * (unsigned __int128)(unint64_t)v663) >> 64);
  uint64_t v682 = v1315 & 0x7FFFFFFFFFFFFLL;
  uint64_t v683 = v665 & 0x7FFFFFFFFFFFFLL;
  uint64_t v684 = v676;
  uint64_t v685 = v669 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v687 + 1) = v675;
  *(void *)&__int128 v687 = v679;
  uint64_t v686 = v687 >> 51;
  uint64_t v688 = v679 & 0x7FFFFFFFFFFFFLL;
  uint64_t v689 = (__PAIR128__(v681, v680 + v671)
        + __PAIR128__(v673, v684)
        + (unint64_t)v618 * (unsigned __int128)(unint64_t)v1375
        + (unint64_t)v619 * (unsigned __int128)(unint64_t)v1363) >> 64;
  uint64_t v690 = v680 + v671 + v684 + v618 * v1375 + v619 * v1363;
  BOOL v75 = __CFADD__(v690, v686);
  uint64_t v691 = v690 + v686;
  if (v75) {
    ++v689;
  }
  uint64_t v692 = v691 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1287 = v691;
  *((void *)&v694 + 1) = v689;
  *(void *)&__int128 v694 = v691;
  uint64_t v693 = v694 >> 51;
  uint64_t v1300 = v1315 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1316 = v672;
  unsigned __int128 v696 = (unint64_t)v621 * (unsigned __int128)(unint64_t)v1368
       + (unint64_t)v622 * (unsigned __int128)(unint64_t)v1363
       + (unint64_t)v682 * (unsigned __int128)(unint64_t)v616
       + (unint64_t)v672 * (unsigned __int128)(unint64_t)v618
       + (unint64_t)v619 * (unsigned __int128)(unint64_t)v1375;
  uint64_t v695 = *((void *)&v696 + 1);
  BOOL v75 = __CFADD__((void)v696, v693);
  uint64_t v697 = v696 + v693;
  if (v75) {
    uint64_t v695 = *((void *)&v696 + 1) + 1LL;
  }
  uint64_t v1291 = v697;
  *((void *)&v698 + 1) = v695;
  *(void *)&__int128 v698 = v697;
  unint64_t v699 = v683 + 19 * (v698 >> 51);
  uint64_t v700 = v699 & 0x7FFFFFFFFFFFFLL;
  unint64_t v701 = v685 + (v699 >> 51);
  uint64_t v702 = v701 & 0x7FFFFFFFFFFFFLL;
  uint64_t v703 = v688 + (v701 >> 51);
  uint64_t v704 = -20LL;
  uint64_t v1260 = v697 & 0x7FFFFFFFFFFFFLL;
  uint64_t v705 = v697 & 0x7FFFFFFFFFFFFLL;
  uint64_t v706 = v691 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1276 = v701 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1281 = v703;
  uint64_t v707 = v700;
  do
  {
    uint64_t v708 = 2 * v707;
    uint64_t v709 = 2 * v702;
    signed __int128 v710 = (unint64_t)(38 * v703) * (unsigned __int128)(unint64_t)v706
    unint64_t v711 = ((unint64_t)(2 * v707) * (unsigned __int128)(unint64_t)v702) >> 64;
    uint64_t v712 = 2 * v707 * v702;
    unint64_t v713 = ((unint64_t)v702 * (unsigned __int128)(unint64_t)v702) >> 64;
    uint64_t v714 = v702 * v702;
    unint64_t v715 = ((unint64_t)v709 * (unsigned __int128)(unint64_t)v703) >> 64;
    uint64_t v716 = v709 * v703;
    uint64_t v717 = v710 >> 51;
    unsigned __int128 v720 = (unint64_t)(19 * v706) * (unsigned __int128)(unint64_t)v706
    uint64_t v719 = v720 >> 64;
    uint64_t v718 = v720;
    BOOL v75 = __CFADD__(v718, v717);
    uint64_t v721 = v718 + v717;
    if (v75) {
      uint64_t v722 = v719 + 1;
    }
    else {
      uint64_t v722 = v719;
    }
    uint64_t v723 = v721 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v725 + 1) = v722;
    *(void *)&__int128 v725 = v721;
    uint64_t v724 = v725 >> 51;
    unint64_t v726 = ((unint64_t)v709 * (unsigned __int128)(unint64_t)v706) >> 64;
    unsigned __int128 v729 = __PAIR128__(v713, v714)
         + (unint64_t)(38 * v705) * (unsigned __int128)(unint64_t)v706
         + (unint64_t)v708 * (unsigned __int128)(unint64_t)v703;
    uint64_t v727 = v729 >> 64;
    uint64_t v728 = v729;
    BOOL v75 = __CFADD__(v728, v724);
    uint64_t v730 = v728 + v724;
    if (v75) {
      ++v727;
    }
    uint64_t v731 = v730 & 0x7FFFFFFFFFFFFLL;
    uint64_t v732 = v709 * v706;
    *((void *)&v734 + 1) = v727;
    *(void *)&__int128 v734 = v730;
    uint64_t v733 = v734 >> 51;
    unsigned __int128 v735 = __PAIR128__(v715, v716)
         + (unint64_t)(19 * v705) * (unsigned __int128)(unint64_t)v705
         + (unint64_t)v708 * (unsigned __int128)(unint64_t)v706;
    BOOL v75 = __CFADD__((void)v735, v733);
    uint64_t v736 = v735 + v733;
    if (v75) {
      uint64_t v737 = *((void *)&v735 + 1) + 1LL;
    }
    else {
      uint64_t v737 = (__PAIR128__(v715, v716)
    }
            + (unint64_t)(19 * v705) * (unsigned __int128)(unint64_t)v705
            + (unint64_t)v708 * (unsigned __int128)(unint64_t)v706) >> 64;
    *((void *)&v739 + 1) = v737;
    *(void *)&__int128 v739 = v736;
    uint64_t v738 = v739 >> 51;
    uint64_t v706 = v736 & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v740 = __PAIR128__(v726, v732)
         + (unint64_t)v703 * (unsigned __int128)(unint64_t)v703
         + (unint64_t)v708 * (unsigned __int128)(unint64_t)v705;
    uint64_t v741 = v740 + v738;
    if (__CFADD__((void)v740, v738)) {
      uint64_t v742 = *((void *)&v740 + 1) + 1LL;
    }
    else {
      uint64_t v742 = (__PAIR128__(v726, v732)
    }
            + (unint64_t)v703 * (unsigned __int128)(unint64_t)v703
            + (unint64_t)v708 * (unsigned __int128)(unint64_t)v705) >> 64;
    uint64_t v705 = v741 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v743 + 1) = v742;
    *(void *)&__int128 v743 = v741;
    unint64_t v744 = (v710 & 0x7FFFFFFFFFFFFLL) + 19 * (v743 >> 51);
    uint64_t v707 = v744 & 0x7FFFFFFFFFFFFLL;
    unint64_t v745 = v723 + (v744 >> 51);
    uint64_t v702 = v745 & 0x7FFFFFFFFFFFFLL;
    uint64_t v703 = v731 + (v745 >> 51);
    BOOL v75 = __CFADD__(v704++, 1LL);
  }

  while (!v75);
  uint64_t v746 = v705 * 19 * v1276 + v706 * 19 * v1281 + v707 * v700 + v702 * 19 * v1260 + v703 * 19 * v692;
  uint64_t v747 = ((unint64_t)v705 * (unsigned __int128)(unint64_t)(19 * v1281)
        + (unint64_t)v706 * (unsigned __int128)(unint64_t)(19 * v692)
        + (unint64_t)v707 * (unsigned __int128)(unint64_t)v1276
        + (unint64_t)v702 * (unsigned __int128)(unint64_t)v700
        + (unint64_t)v703 * (unsigned __int128)(unint64_t)(19 * v1260)) >> 64;
  uint64_t v748 = v705 * 19 * v1281 + v706 * 19 * v692 + v707 * v1276 + v702 * v700 + v703 * 19 * v1260;
  uint64_t v749 = (__int128)((unint64_t)v705 * (unsigned __int128)(unint64_t)(19 * v1276)
                  + (unint64_t)v706 * (unsigned __int128)(unint64_t)(19 * v1281)
                  + (unint64_t)v707 * (unsigned __int128)(unint64_t)v700
  BOOL v75 = __CFADD__(v748, v749);
  uint64_t v750 = v748 + v749;
  if (v75) {
    ++v747;
  }
  *((void *)&v752 + 1) = v747;
  *(void *)&__int128 v752 = v750;
  uint64_t v751 = v752 >> 51;
  uint64_t v754 = ((unint64_t)v705 * (unsigned __int128)(unint64_t)(19 * v692)
        + (unint64_t)v706 * (unsigned __int128)(unint64_t)(19 * v1260)
        + (unint64_t)v707 * (unsigned __int128)(unint64_t)v1281
        + (unint64_t)v702 * (unsigned __int128)(unint64_t)v1276
        + (unint64_t)v703 * (unsigned __int128)(unint64_t)v700) >> 64;
  uint64_t v753 = v705 * 19 * v692 + v706 * 19 * v1260 + v707 * v1281 + v702 * v1276 + v703 * v700;
  BOOL v75 = __CFADD__(v753, v751);
  uint64_t v755 = v753 + v751;
  if (v75) {
    ++v754;
  }
  unsigned __int128 v756 = (unint64_t)v705 * (unsigned __int128)(unint64_t)(19 * v1260)
       + (unint64_t)v706 * (unsigned __int128)(unint64_t)v700
       + (v1287 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v707
       + (unint64_t)v702 * (unsigned __int128)(unint64_t)v1281
       + (unint64_t)v703 * (unsigned __int128)(unint64_t)v1276;
  *((void *)&v758 + 1) = v754;
  *(void *)&__int128 v758 = v755;
  uint64_t v757 = v758 >> 51;
  uint64_t v759 = v756 + v757;
  if (__CFADD__((void)v756, v757)) {
    uint64_t v760 = *((void *)&v756 + 1) + 1LL;
  }
  else {
    uint64_t v760 = ((unint64_t)v705 * (unsigned __int128)(unint64_t)(19 * v1260)
  }
          + (unint64_t)v706 * (unsigned __int128)(unint64_t)v700
          + (v1287 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v707
          + (unint64_t)v702 * (unsigned __int128)(unint64_t)v1281
          + (unint64_t)v703 * (unsigned __int128)(unint64_t)v1276) >> 64;
  unsigned __int128 v761 = (unint64_t)v705 * (unsigned __int128)(unint64_t)v700
       + (unint64_t)v706 * (unsigned __int128)(unint64_t)v1276
       + (v1291 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v707
       + (v1287 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v702
       + (unint64_t)v703 * (unsigned __int128)(unint64_t)v1281;
  uint64_t v762 = v750 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v764 + 1) = v760;
  *(void *)&__int128 v764 = v759;
  uint64_t v763 = v764 >> 51;
  uint64_t v765 = v755 & 0x7FFFFFFFFFFFFLL;
  uint64_t v766 = v761 + v763;
  if (__CFADD__((void)v761, v763)) {
    uint64_t v767 = *((void *)&v761 + 1) + 1LL;
  }
  else {
    uint64_t v767 = *((void *)&v761 + 1);
  }
  *((void *)&v768 + 1) = v767;
  *(void *)&__int128 v768 = v761 + v763;
  unint64_t v769 = (v746 & 0x7FFFFFFFFFFFFLL) + 19 * (v768 >> 51);
  uint64_t v770 = v769 & 0x7FFFFFFFFFFFFLL;
  unint64_t v771 = v762 + (v769 >> 51);
  uint64_t v772 = v771 & 0x7FFFFFFFFFFFFLL;
  uint64_t v773 = v765 + (v771 >> 51);
  uint64_t v774 = -10LL;
  do
  {
    uint64_t v775 = v766 & 0x7FFFFFFFFFFFFLL;
    uint64_t v776 = v759 & 0x7FFFFFFFFFFFFLL;
    uint64_t v777 = 2 * v770;
    uint64_t v778 = 2 * v772;
    unint64_t v780 = ((unint64_t)(38 * v773) * (unsigned __int128)(unint64_t)v776
    uint64_t v779 = 38 * v773 * v776 + v772 * 38 * v775 + v770 * v770;
    unint64_t v781 = ((unint64_t)v777 * (unsigned __int128)(unint64_t)v776) >> 64;
    uint64_t v782 = v777 * v776;
    unint64_t v783 = ((unint64_t)(2 * v772) * (unsigned __int128)(unint64_t)v773) >> 64;
    uint64_t v784 = 2 * v772 * v773;
    uint64_t v785 = v779 & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v788 = (unint64_t)(19 * v776) * (unsigned __int128)(unint64_t)v776
         + (unint64_t)(38 * v775) * (unsigned __int128)(unint64_t)v773
         + (unint64_t)v777 * (unsigned __int128)(unint64_t)v772
         + (__PAIR128__(v780, v779) >> 51);
    unint64_t v787 = v788 >> 64;
    unint64_t v786 = v788;
    uint64_t v789 = v786 & 0x7FFFFFFFFFFFFLL;
    unint64_t v790 = v787 >> 51;
    __int128 v791 = __PAIR128__(v787, v786);
    unint64_t v792 = ((unint64_t)(2 * v772) * (unsigned __int128)(unint64_t)v776) >> 64;
    unint64_t v794 = ((unint64_t)v772 * (unsigned __int128)(unint64_t)v772
          + (unint64_t)(38 * v775) * (unsigned __int128)(unint64_t)v776
          + (unint64_t)v777 * (unsigned __int128)(unint64_t)v773
          + __PAIR128__(v790, v791 >> 51)) >> 64;
    unint64_t v793 = v772 * v772 + 38 * v775 * v776 + v777 * v773 + (v791 >> 51);
    uint64_t v795 = v778 * v776;
    uint64_t v796 = v793 & 0x7FFFFFFFFFFFFLL;
    uint64_t v759 = v784 + 19 * v775 * v775 + v777 * v776 + (__PAIR128__(v794, v793) >> 51);
    signed __int128 v797 = __PAIR128__(v792, v795)
         + (unint64_t)v773 * (unsigned __int128)(unint64_t)v773
         + (unint64_t)v777 * (unsigned __int128)(unint64_t)v775
         + ((__PAIR128__(v783, v784)
           + (unint64_t)(19 * v775) * (unsigned __int128)(unint64_t)v775
           + __PAIR128__(v781, v782)
           + (__PAIR128__(v794, v793) >> 51)) >> 51);
    uint64_t v766 = v797;
    unint64_t v798 = v785 + 19 * (v797 >> 51);
    uint64_t v770 = v798 & 0x7FFFFFFFFFFFFLL;
    unint64_t v799 = v789 + (v798 >> 51);
    uint64_t v772 = v799 & 0x7FFFFFFFFFFFFLL;
    uint64_t v773 = v796 + (v799 >> 51);
    BOOL v75 = __CFADD__(v774++, 1LL);
  }

  while (!v75);
  uint64_t v800 = v759 & 0x7FFFFFFFFFFFFLL;
  uint64_t v801 = v797 & 0x7FFFFFFFFFFFFLL;
  signed __int128 v802 = (v797 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1363)
       + (v759 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1309
       + (unint64_t)v770 * (unsigned __int128)(unint64_t)v1368
       + (unint64_t)v772 * (unsigned __int128)(unint64_t)v1332
       + (unint64_t)v773 * (unsigned __int128)(unint64_t)v1324;
  unsigned __int128 v804 = (v797 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1309
       + (v759 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1324
       + (unint64_t)v770 * (unsigned __int128)(unint64_t)v1363
       + (unint64_t)v772 * (unsigned __int128)(unint64_t)v1368
       + (unint64_t)v773 * (unsigned __int128)(unint64_t)v1332;
  uint64_t v803 = *((void *)&v804 + 1);
  uint64_t v805 = v802 >> 51;
  uint64_t v806 = v804 + v805;
  if (__CFADD__((void)v804, v805)) {
    uint64_t v803 = *((void *)&v804 + 1) + 1LL;
  }
  *((void *)&v808 + 1) = v803;
  *(void *)&__int128 v808 = v804 + v805;
  uint64_t v807 = v808 >> 51;
  uint64_t v810 = ((unint64_t)v801 * (unsigned __int128)(unint64_t)v1324
        + (unint64_t)v800 * (unsigned __int128)(unint64_t)v1332
        + (unint64_t)v770 * (unsigned __int128)(unint64_t)v1375
        + (unint64_t)v772 * (unsigned __int128)(unint64_t)v1363
        + (unint64_t)v773 * (unsigned __int128)(unint64_t)v1368) >> 64;
  uint64_t v809 = v801 * v1324 + v800 * v1332 + v770 * v1375 + v772 * v1363 + v773 * v1368;
  BOOL v75 = __CFADD__(v809, v807);
  uint64_t v811 = v809 + v807;
  if (v75) {
    ++v810;
  }
  *((void *)&v813 + 1) = v810;
  *(void *)&__int128 v813 = v811;
  uint64_t v812 = v813 >> 51;
  unsigned __int128 v814 = (unint64_t)v801 * (unsigned __int128)(unint64_t)v1332
       + (unint64_t)v800 * (unsigned __int128)(unint64_t)v1368
       + (unint64_t)v1316 * (unsigned __int128)(unint64_t)v770
       + (unint64_t)v772 * (unsigned __int128)(unint64_t)v1375
       + (unint64_t)v773 * (unsigned __int128)(unint64_t)v1363;
  uint64_t v815 = v814 + v812;
  if (__CFADD__((void)v814, v812)) {
    uint64_t v816 = *((void *)&v814 + 1) + 1LL;
  }
  else {
    uint64_t v816 = ((unint64_t)v801 * (unsigned __int128)(unint64_t)v1332
  }
          + (unint64_t)v800 * (unsigned __int128)(unint64_t)v1368
          + (unint64_t)v1316 * (unsigned __int128)(unint64_t)v770
          + (unint64_t)v772 * (unsigned __int128)(unint64_t)v1375
          + (unint64_t)v773 * (unsigned __int128)(unint64_t)v1363) >> 64;
  BOOL v75 = __CFADD__(v801 * v1368, v800 * v1363);
  uint64_t v817 = v801 * v1368 + v800 * v1363;
  uint64_t v818 = ((unint64_t)v801 * (unsigned __int128)(unint64_t)v1368) >> 64;
  uint64_t v819 = v806 & 0x7FFFFFFFFFFFFLL;
  uint64_t v820 = v811 & 0x7FFFFFFFFFFFFLL;
  uint64_t v821 = v815 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1333 = v815;
  *((void *)&v823 + 1) = v816;
  *(void *)&__int128 v823 = v815;
  uint64_t v822 = v823 >> 51;
  unsigned __int128 v825 = __PAIR128__((((unint64_t)v800 * (unsigned __int128)(unint64_t)v1363) >> 64) + v75 + v818, v817)
       + (unint64_t)v1300 * (unsigned __int128)(unint64_t)v770
       + (unint64_t)v1316 * (unsigned __int128)(unint64_t)v772
       + (unint64_t)v773 * (unsigned __int128)(unint64_t)v1375;
  uint64_t v824 = *((void *)&v825 + 1);
  uint64_t v826 = v825 + v822;
  if (__CFADD__((void)v825, v822)) {
    uint64_t v824 = *((void *)&v825 + 1) + 1LL;
  }
  uint64_t v827 = v826 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1317 = v825 + v822;
  uint64_t v1325 = v821;
  *((void *)&v828 + 1) = v824;
  *(void *)&__int128 v828 = v825 + v822;
  unint64_t v829 = (v802 & 0x7FFFFFFFFFFFFLL) + 19 * (v828 >> 51);
  uint64_t v830 = v829 & 0x7FFFFFFFFFFFFLL;
  unint64_t v831 = v819 + (v829 >> 51);
  uint64_t v832 = v831 & 0x7FFFFFFFFFFFFLL;
  uint64_t v833 = v820 + (v831 >> 51);
  uint64_t v834 = -50LL;
  uint64_t v835 = v826 & 0x7FFFFFFFFFFFFLL;
  uint64_t v836 = v821;
  uint64_t v1369 = v830;
  uint64_t v1376 = v833;
  uint64_t v1364 = v832;
  do
  {
    uint64_t v837 = 2 * v830;
    uint64_t v838 = 2 * v832;
    unsigned __int128 v841 = (unint64_t)(38 * v833) * (unsigned __int128)(unint64_t)v836
    unint64_t v840 = v841 >> 64;
    unint64_t v839 = v841;
    unint64_t v842 = ((unint64_t)(2 * v830) * (unsigned __int128)(unint64_t)v832) >> 64;
    uint64_t v843 = v837 * v832;
    uint64_t v844 = ((unint64_t)v832 * (unsigned __int128)(unint64_t)v832) >> 64;
    uint64_t v845 = v832 * v832;
    unint64_t v846 = ((unint64_t)v837 * (unsigned __int128)(unint64_t)v836) >> 64;
    uint64_t v847 = v837 * v836;
    unint64_t v848 = ((unint64_t)v838 * (unsigned __int128)(unint64_t)v833) >> 64;
    uint64_t v849 = v838 * v833;
    uint64_t v850 = v839 & 0x7FFFFFFFFFFFFLL;
    uint64_t v851 = (__int128)__PAIR128__(v840, v839) >> 51;
    unsigned __int128 v854 = (unint64_t)(19 * v836) * (unsigned __int128)(unint64_t)v836
    uint64_t v853 = v854 >> 64;
    uint64_t v852 = v854;
    BOOL v75 = __CFADD__(v852, v851);
    uint64_t v855 = v852 + v851;
    if (v75) {
      uint64_t v856 = v853 + 1;
    }
    else {
      uint64_t v856 = v853;
    }
    uint64_t v857 = v855 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v859 + 1) = v856;
    *(void *)&__int128 v859 = v855;
    uint64_t v858 = v859 >> 51;
    unint64_t v860 = ((unint64_t)v838 * (unsigned __int128)(unint64_t)v836) >> 64;
    uint64_t v862 = (__PAIR128__( (((unint64_t)(38 * v835) * (unsigned __int128)(unint64_t)v836) >> 64)
            + __CFADD__(v845, 38 * v835 * v836)
            + v844,
              v845 + 38 * v835 * v836)
          + (unint64_t)v837 * (unsigned __int128)(unint64_t)v833) >> 64;
    uint64_t v861 = v845 + 38 * v835 * v836 + v837 * v833;
    BOOL v75 = __CFADD__(v861, v858);
    uint64_t v863 = v861 + v858;
    if (v75) {
      ++v862;
    }
    uint64_t v864 = v838 * v836;
    *((void *)&v866 + 1) = v862;
    *(void *)&__int128 v866 = v863;
    uint64_t v865 = v866 >> 51;
    uint64_t v868 = v849 + 19 * v835 * v835 + v847;
    uint64_t v867 = (__PAIR128__(v848, v849)
          + (unint64_t)(19 * v835) * (unsigned __int128)(unint64_t)v835
          + __PAIR128__(v846, v847)) >> 64;
    if (__CFADD__(v868, v865)) {
      ++v867;
    }
    *((void *)&v870 + 1) = v867;
    *(void *)&__int128 v870 = v868 + v865;
    uint64_t v869 = v870 >> 51;
    uint64_t v836 = (v868 + v865) & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v871 = __PAIR128__(v860, v864)
         + (unint64_t)v833 * (unsigned __int128)(unint64_t)v833
         + (unint64_t)v837 * (unsigned __int128)(unint64_t)v835;
    BOOL v75 = __CFADD__((void)v871, v869);
    uint64_t v872 = v871 + v869;
    if (v75) {
      uint64_t v873 = *((void *)&v871 + 1) + 1LL;
    }
    else {
      uint64_t v873 = (__PAIR128__(v860, v864)
    }
            + (unint64_t)v833 * (unsigned __int128)(unint64_t)v833
            + (unint64_t)v837 * (unsigned __int128)(unint64_t)v835) >> 64;
    uint64_t v835 = v872 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v874 + 1) = v873;
    *(void *)&__int128 v874 = v872;
    unint64_t v875 = v850 + 19 * (v874 >> 51);
    uint64_t v830 = v875 & 0x7FFFFFFFFFFFFLL;
    unint64_t v876 = v857 + (v875 >> 51);
    uint64_t v832 = v876 & 0x7FFFFFFFFFFFFLL;
    uint64_t v833 = (v863 & 0x7FFFFFFFFFFFFLL) + (v876 >> 51);
    BOOL v75 = __CFADD__(v834++, 1LL);
  }

  while (!v75);
  uint64_t v877 = 19 * v827;
  uint64_t v878 = 19 * v1325;
  uint64_t v879 = v835 * 19 * v1364 + v836 * 19 * v1376 + v830 * v1369 + v832 * 19 * v827 + v833 * 19 * v1325;
  uint64_t v1310 = 19 * v1376;
  uint64_t v880 = ((unint64_t)v835 * (unsigned __int128)(unint64_t)(19 * v1376)
        + (unint64_t)v836 * (unsigned __int128)(unint64_t)(19 * v1325)
        + (unint64_t)v830 * (unsigned __int128)(unint64_t)v1364
        + (unint64_t)v832 * (unsigned __int128)(unint64_t)v1369
        + (unint64_t)v833 * (unsigned __int128)(unint64_t)(19 * v827)) >> 64;
  uint64_t v881 = v835 * 19 * v1376 + v836 * 19 * v1325 + v830 * v1364 + v832 * v1369 + v833 * 19 * v827;
  uint64_t v882 = (__int128)((unint64_t)v835 * (unsigned __int128)(unint64_t)(19 * v1364)
                  + (unint64_t)v836 * (unsigned __int128)(unint64_t)(19 * v1376)
                  + (unint64_t)v830 * (unsigned __int128)(unint64_t)v1369
  BOOL v75 = __CFADD__(v881, v882);
  uint64_t v883 = v881 + v882;
  uint64_t v884 = v835 * 19 * v1325;
  if (v75) {
    ++v880;
  }
  uint64_t v1326 = 19 * v1325;
  uint64_t v885 = v836 * v1369;
  uint64_t v886 = v1333 & 0x7FFFFFFFFFFFFLL;
  unint64_t v887 = ((v1333 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v830) >> 64;
  uint64_t v889 = (__PAIR128__( (((unint64_t)v836 * (unsigned __int128)(unint64_t)v877) >> 64)
          + __CFADD__(v884, v836 * v877)
          + (((unint64_t)v835 * (unsigned __int128)(unint64_t)v878) >> 64),
            v884 + v836 * v877)
        + (unint64_t)v830 * (unsigned __int128)(unint64_t)v1376
        + (unint64_t)v832 * (unsigned __int128)(unint64_t)v1364
        + (unint64_t)v833 * (unsigned __int128)(unint64_t)v1369) >> 64;
  uint64_t v888 = v884 + v836 * v877 + v830 * v1376 + v832 * v1364 + v833 * v1369;
  uint64_t v890 = (v1333 & 0x7FFFFFFFFFFFFLL) * v830;
  *((void *)&v892 + 1) = v880;
  *(void *)&__int128 v892 = v883;
  uint64_t v891 = v892 >> 51;
  BOOL v75 = __CFADD__(v888, v891);
  uint64_t v893 = v888 + v891;
  uint64_t v894 = v835 * v877;
  if (v75) {
    ++v889;
  }
  uint64_t v1334 = 19 * v827;
  unint64_t v895 = (((unint64_t)v836 * (unsigned __int128)(unint64_t)v1369) >> 64)
       + __CFADD__(v894, v885)
       + (((unint64_t)v835 * (unsigned __int128)(unint64_t)v877) >> 64);
  uint64_t v896 = v1317 & 0x7FFFFFFFFFFFFLL;
  uint64_t v897 = v879 & 0x7FFFFFFFFFFFFLL;
  uint64_t v898 = v890;
  uint64_t v899 = v883 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v901 + 1) = v889;
  *(void *)&__int128 v901 = v893;
  uint64_t v900 = v901 >> 51;
  uint64_t v902 = v893 & 0x7FFFFFFFFFFFFLL;
  uint64_t v903 = (__PAIR128__(v895, v894 + v885)
        + __PAIR128__(v887, v898)
        + (unint64_t)v832 * (unsigned __int128)(unint64_t)v1376
        + (unint64_t)v833 * (unsigned __int128)(unint64_t)v1364) >> 64;
  uint64_t v904 = v894 + v885 + v898 + v832 * v1376 + v833 * v1364;
  BOOL v75 = __CFADD__(v904, v900);
  uint64_t v905 = v904 + v900;
  if (v75) {
    ++v903;
  }
  uint64_t v906 = v905 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1288 = v905;
  *((void *)&v908 + 1) = v903;
  *(void *)&__int128 v908 = v905;
  uint64_t v907 = v908 >> 51;
  uint64_t v1301 = v1317 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1318 = v886;
  unsigned __int128 v910 = (unint64_t)v835 * (unsigned __int128)(unint64_t)v1369
       + (unint64_t)v836 * (unsigned __int128)(unint64_t)v1364
       + (unint64_t)v896 * (unsigned __int128)(unint64_t)v830
       + (unint64_t)v886 * (unsigned __int128)(unint64_t)v832
       + (unint64_t)v833 * (unsigned __int128)(unint64_t)v1376;
  uint64_t v909 = *((void *)&v910 + 1);
  BOOL v75 = __CFADD__((void)v910, v907);
  uint64_t v911 = v910 + v907;
  if (v75) {
    uint64_t v909 = *((void *)&v910 + 1) + 1LL;
  }
  uint64_t v1292 = v911;
  *((void *)&v912 + 1) = v909;
  *(void *)&__int128 v912 = v911;
  unint64_t v913 = v897 + 19 * (v912 >> 51);
  uint64_t v914 = v913 & 0x7FFFFFFFFFFFFLL;
  unint64_t v915 = v899 + (v913 >> 51);
  uint64_t v916 = v915 & 0x7FFFFFFFFFFFFLL;
  uint64_t v917 = v902 + (v915 >> 51);
  uint64_t v918 = -100LL;
  uint64_t v1261 = v911 & 0x7FFFFFFFFFFFFLL;
  uint64_t v919 = v911 & 0x7FFFFFFFFFFFFLL;
  uint64_t v920 = v905 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1277 = v915 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1282 = v917;
  uint64_t v921 = v914;
  do
  {
    uint64_t v922 = 2 * v921;
    uint64_t v923 = 2 * v916;
    signed __int128 v924 = (unint64_t)(38 * v917) * (unsigned __int128)(unint64_t)v920
    unint64_t v925 = ((unint64_t)(2 * v921) * (unsigned __int128)(unint64_t)v916) >> 64;
    uint64_t v926 = 2 * v921 * v916;
    unint64_t v927 = ((unint64_t)v916 * (unsigned __int128)(unint64_t)v916) >> 64;
    uint64_t v928 = v916 * v916;
    unint64_t v929 = ((unint64_t)v923 * (unsigned __int128)(unint64_t)v917) >> 64;
    uint64_t v930 = v923 * v917;
    uint64_t v931 = v924 >> 51;
    unsigned __int128 v934 = (unint64_t)(19 * v920) * (unsigned __int128)(unint64_t)v920
    uint64_t v933 = v934 >> 64;
    uint64_t v932 = v934;
    BOOL v75 = __CFADD__(v932, v931);
    uint64_t v935 = v932 + v931;
    if (v75) {
      uint64_t v936 = v933 + 1;
    }
    else {
      uint64_t v936 = v933;
    }
    uint64_t v937 = v935 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v939 + 1) = v936;
    *(void *)&__int128 v939 = v935;
    uint64_t v938 = v939 >> 51;
    unint64_t v940 = ((unint64_t)v923 * (unsigned __int128)(unint64_t)v920) >> 64;
    unsigned __int128 v943 = __PAIR128__(v927, v928)
         + (unint64_t)(38 * v919) * (unsigned __int128)(unint64_t)v920
         + (unint64_t)v922 * (unsigned __int128)(unint64_t)v917;
    uint64_t v941 = v943 >> 64;
    uint64_t v942 = v943;
    BOOL v75 = __CFADD__(v942, v938);
    uint64_t v944 = v942 + v938;
    if (v75) {
      ++v941;
    }
    uint64_t v945 = v944 & 0x7FFFFFFFFFFFFLL;
    uint64_t v946 = v923 * v920;
    *((void *)&v948 + 1) = v941;
    *(void *)&__int128 v948 = v944;
    uint64_t v947 = v948 >> 51;
    unsigned __int128 v949 = __PAIR128__(v929, v930)
         + (unint64_t)(19 * v919) * (unsigned __int128)(unint64_t)v919
         + (unint64_t)v922 * (unsigned __int128)(unint64_t)v920;
    BOOL v75 = __CFADD__((void)v949, v947);
    uint64_t v950 = v949 + v947;
    if (v75) {
      uint64_t v951 = *((void *)&v949 + 1) + 1LL;
    }
    else {
      uint64_t v951 = (__PAIR128__(v929, v930)
    }
            + (unint64_t)(19 * v919) * (unsigned __int128)(unint64_t)v919
            + (unint64_t)v922 * (unsigned __int128)(unint64_t)v920) >> 64;
    *((void *)&v953 + 1) = v951;
    *(void *)&__int128 v953 = v950;
    uint64_t v952 = v953 >> 51;
    uint64_t v920 = v950 & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v954 = __PAIR128__(v940, v946)
         + (unint64_t)v917 * (unsigned __int128)(unint64_t)v917
         + (unint64_t)v922 * (unsigned __int128)(unint64_t)v919;
    uint64_t v955 = v954 + v952;
    if (__CFADD__((void)v954, v952)) {
      uint64_t v956 = *((void *)&v954 + 1) + 1LL;
    }
    else {
      uint64_t v956 = (__PAIR128__(v940, v946)
    }
            + (unint64_t)v917 * (unsigned __int128)(unint64_t)v917
            + (unint64_t)v922 * (unsigned __int128)(unint64_t)v919) >> 64;
    uint64_t v919 = v955 & 0x7FFFFFFFFFFFFLL;
    *((void *)&v957 + 1) = v956;
    *(void *)&__int128 v957 = v955;
    unint64_t v958 = (v924 & 0x7FFFFFFFFFFFFLL) + 19 * (v957 >> 51);
    uint64_t v921 = v958 & 0x7FFFFFFFFFFFFLL;
    unint64_t v959 = v937 + (v958 >> 51);
    uint64_t v916 = v959 & 0x7FFFFFFFFFFFFLL;
    uint64_t v917 = v945 + (v959 >> 51);
    BOOL v75 = __CFADD__(v918++, 1LL);
  }

  while (!v75);
  uint64_t v960 = v919 * 19 * v1277 + v920 * 19 * v1282 + v921 * v914 + v916 * 19 * v1261 + v917 * 19 * v906;
  uint64_t v961 = ((unint64_t)v919 * (unsigned __int128)(unint64_t)(19 * v1282)
        + (unint64_t)v920 * (unsigned __int128)(unint64_t)(19 * v906)
        + (unint64_t)v921 * (unsigned __int128)(unint64_t)v1277
        + (unint64_t)v916 * (unsigned __int128)(unint64_t)v914
        + (unint64_t)v917 * (unsigned __int128)(unint64_t)(19 * v1261)) >> 64;
  uint64_t v962 = v919 * 19 * v1282 + v920 * 19 * v906 + v921 * v1277 + v916 * v914 + v917 * 19 * v1261;
  uint64_t v963 = (__int128)((unint64_t)v919 * (unsigned __int128)(unint64_t)(19 * v1277)
                  + (unint64_t)v920 * (unsigned __int128)(unint64_t)(19 * v1282)
                  + (unint64_t)v921 * (unsigned __int128)(unint64_t)v914
  BOOL v75 = __CFADD__(v962, v963);
  uint64_t v964 = v962 + v963;
  if (v75) {
    ++v961;
  }
  *((void *)&v966 + 1) = v961;
  *(void *)&__int128 v966 = v964;
  uint64_t v965 = v966 >> 51;
  uint64_t v968 = ((unint64_t)v919 * (unsigned __int128)(unint64_t)(19 * v906)
        + (unint64_t)v920 * (unsigned __int128)(unint64_t)(19 * v1261)
        + (unint64_t)v921 * (unsigned __int128)(unint64_t)v1282
        + (unint64_t)v916 * (unsigned __int128)(unint64_t)v1277
        + (unint64_t)v917 * (unsigned __int128)(unint64_t)v914) >> 64;
  uint64_t v967 = v919 * 19 * v906 + v920 * 19 * v1261 + v921 * v1282 + v916 * v1277 + v917 * v914;
  BOOL v75 = __CFADD__(v967, v965);
  uint64_t v969 = v967 + v965;
  if (v75) {
    ++v968;
  }
  unsigned __int128 v970 = (unint64_t)v919 * (unsigned __int128)(unint64_t)(19 * v1261)
       + (unint64_t)v920 * (unsigned __int128)(unint64_t)v914
       + (v1288 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v921
       + (unint64_t)v916 * (unsigned __int128)(unint64_t)v1282
       + (unint64_t)v917 * (unsigned __int128)(unint64_t)v1277;
  *((void *)&v972 + 1) = v968;
  *(void *)&__int128 v972 = v969;
  uint64_t v971 = v972 >> 51;
  uint64_t v973 = v970 + v971;
  if (__CFADD__((void)v970, v971)) {
    uint64_t v974 = *((void *)&v970 + 1) + 1LL;
  }
  else {
    uint64_t v974 = ((unint64_t)v919 * (unsigned __int128)(unint64_t)(19 * v1261)
  }
          + (unint64_t)v920 * (unsigned __int128)(unint64_t)v914
          + (v1288 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v921
          + (unint64_t)v916 * (unsigned __int128)(unint64_t)v1282
          + (unint64_t)v917 * (unsigned __int128)(unint64_t)v1277) >> 64;
  unsigned __int128 v975 = (unint64_t)v919 * (unsigned __int128)(unint64_t)v914
       + (unint64_t)v920 * (unsigned __int128)(unint64_t)v1277
       + (v1292 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v921
       + (v1288 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v916
       + (unint64_t)v917 * (unsigned __int128)(unint64_t)v1282;
  uint64_t v976 = v964 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v978 + 1) = v974;
  *(void *)&__int128 v978 = v973;
  uint64_t v977 = v978 >> 51;
  uint64_t v979 = v969 & 0x7FFFFFFFFFFFFLL;
  uint64_t v980 = v975 + v977;
  if (__CFADD__((void)v975, v977)) {
    uint64_t v981 = *((void *)&v975 + 1) + 1LL;
  }
  else {
    uint64_t v981 = *((void *)&v975 + 1);
  }
  *((void *)&v982 + 1) = v981;
  *(void *)&__int128 v982 = v975 + v977;
  unint64_t v983 = (v960 & 0x7FFFFFFFFFFFFLL) + 19 * (v982 >> 51);
  uint64_t v984 = v983 & 0x7FFFFFFFFFFFFLL;
  unint64_t v985 = v976 + (v983 >> 51);
  uint64_t v986 = v985 & 0x7FFFFFFFFFFFFLL;
  uint64_t v987 = v979 + (v985 >> 51);
  uint64_t v988 = -50LL;
  do
  {
    uint64_t v989 = v980 & 0x7FFFFFFFFFFFFLL;
    uint64_t v990 = v973 & 0x7FFFFFFFFFFFFLL;
    uint64_t v991 = 2 * v984;
    uint64_t v992 = 2 * v986;
    unint64_t v994 = ((unint64_t)(38 * v987) * (unsigned __int128)(unint64_t)v990
    uint64_t v993 = 38 * v987 * v990 + v986 * 38 * v989 + v984 * v984;
    unint64_t v995 = ((unint64_t)v991 * (unsigned __int128)(unint64_t)v990) >> 64;
    uint64_t v996 = v991 * v990;
    unint64_t v997 = ((unint64_t)(2 * v986) * (unsigned __int128)(unint64_t)v987) >> 64;
    uint64_t v998 = 2 * v986 * v987;
    uint64_t v999 = v993 & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v1002 = (unint64_t)(19 * v990) * (unsigned __int128)(unint64_t)v990
          + (unint64_t)(38 * v989) * (unsigned __int128)(unint64_t)v987
          + (unint64_t)v991 * (unsigned __int128)(unint64_t)v986
          + (__PAIR128__(v994, v993) >> 51);
    unint64_t v1001 = v1002 >> 64;
    unint64_t v1000 = v1002;
    uint64_t v1003 = v1000 & 0x7FFFFFFFFFFFFLL;
    unint64_t v1004 = v1001 >> 51;
    __int128 v1005 = __PAIR128__(v1001, v1000);
    unint64_t v1006 = ((unint64_t)(2 * v986) * (unsigned __int128)(unint64_t)v990) >> 64;
    unint64_t v1008 = ((unint64_t)v986 * (unsigned __int128)(unint64_t)v986
           + (unint64_t)(38 * v989) * (unsigned __int128)(unint64_t)v990
           + (unint64_t)v991 * (unsigned __int128)(unint64_t)v987
           + __PAIR128__(v1004, v1005 >> 51)) >> 64;
    unint64_t v1007 = v986 * v986 + 38 * v989 * v990 + v991 * v987 + (v1005 >> 51);
    uint64_t v1009 = v992 * v990;
    uint64_t v1010 = v1007 & 0x7FFFFFFFFFFFFLL;
    uint64_t v973 = v998 + 19 * v989 * v989 + v991 * v990 + (__PAIR128__(v1008, v1007) >> 51);
    signed __int128 v1011 = __PAIR128__(v1006, v1009)
          + (unint64_t)v987 * (unsigned __int128)(unint64_t)v987
          + (unint64_t)v991 * (unsigned __int128)(unint64_t)v989
          + ((__PAIR128__(v997, v998)
            + (unint64_t)(19 * v989) * (unsigned __int128)(unint64_t)v989
            + __PAIR128__(v995, v996)
            + (__PAIR128__(v1008, v1007) >> 51)) >> 51);
    uint64_t v980 = v1011;
    unint64_t v1012 = v999 + 19 * (v1011 >> 51);
    uint64_t v984 = v1012 & 0x7FFFFFFFFFFFFLL;
    unint64_t v1013 = v1003 + (v1012 >> 51);
    uint64_t v986 = v1013 & 0x7FFFFFFFFFFFFLL;
    uint64_t v987 = v1010 + (v1013 >> 51);
    BOOL v75 = __CFADD__(v988++, 1LL);
  }

  while (!v75);
  uint64_t v1014 = v973 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1015 = v1011 & 0x7FFFFFFFFFFFFLL;
  signed __int128 v1016 = (v1011 & 0x7FFFFFFFFFFFFLL) * (unint64_t)(19 * v1364)
        + (v973 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1310
        + (unint64_t)v984 * (unsigned __int128)(unint64_t)v1369
        + (unint64_t)v986 * (unsigned __int128)(unint64_t)v1334
        + (unint64_t)v987 * (unsigned __int128)(unint64_t)v1326;
  unsigned __int128 v1018 = (v1011 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v1310
        + (v973 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1326
        + (unint64_t)v984 * (unsigned __int128)(unint64_t)v1364
        + (unint64_t)v986 * (unsigned __int128)(unint64_t)v1369
        + (unint64_t)v987 * (unsigned __int128)(unint64_t)v1334;
  uint64_t v1017 = *((void *)&v1018 + 1);
  uint64_t v1019 = v1016 >> 51;
  uint64_t v1020 = v1018 + v1019;
  if (__CFADD__((void)v1018, v1019)) {
    uint64_t v1017 = *((void *)&v1018 + 1) + 1LL;
  }
  uint64_t v1022 = ((unint64_t)v1015 * (unsigned __int128)(unint64_t)v1326
         + (unint64_t)v1014 * (unsigned __int128)(unint64_t)v1334
         + (unint64_t)v984 * (unsigned __int128)(unint64_t)v1376
         + (unint64_t)v986 * (unsigned __int128)(unint64_t)v1364
         + (unint64_t)v987 * (unsigned __int128)(unint64_t)v1369) >> 64;
  uint64_t v1021 = v1015 * v1326 + v1014 * v1334 + v984 * v1376 + v986 * v1364 + v987 * v1369;
  *((void *)&v1024 + 1) = v1017;
  *(void *)&__int128 v1024 = v1020;
  uint64_t v1023 = v1024 >> 51;
  BOOL v75 = __CFADD__(v1021, v1023);
  uint64_t v1025 = v1021 + v1023;
  if (v75) {
    ++v1022;
  }
  uint64_t v1026 = ((unint64_t)v1015 * (unsigned __int128)(unint64_t)v1334
         + (unint64_t)v1014 * (unsigned __int128)(unint64_t)v1369
         + (unint64_t)v1318 * (unsigned __int128)(unint64_t)v984
         + (unint64_t)v986 * (unsigned __int128)(unint64_t)v1376
         + (unint64_t)v987 * (unsigned __int128)(unint64_t)v1364) >> 64;
  uint64_t v1027 = v1015 * v1334 + v1014 * v1369 + v1318 * v984 + v986 * v1376 + v987 * v1364;
  *((void *)&v1029 + 1) = v1022;
  *(void *)&__int128 v1029 = v1025;
  uint64_t v1028 = v1029 >> 51;
  BOOL v75 = __CFADD__(v1027, v1028);
  uint64_t v1030 = v1027 + v1028;
  if (v75) {
    ++v1026;
  }
  unsigned __int128 v1031 = (unint64_t)v1015 * (unsigned __int128)(unint64_t)v1369
        + (unint64_t)v1014 * (unsigned __int128)(unint64_t)v1364
        + (unint64_t)v1301 * (unsigned __int128)(unint64_t)v984
        + (unint64_t)v1318 * (unsigned __int128)(unint64_t)v986;
  uint64_t v1035 = v1020 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1036 = v1025 & 0x7FFFFFFFFFFFFLL;
  *((void *)&v1038 + 1) = v1026;
  *(void *)&__int128 v1038 = v1030;
  uint64_t v1037 = v1038 >> 51;
  unsigned __int128 v1034 = v1031 + (unint64_t)v987 * (unsigned __int128)(unint64_t)v1376;
  uint64_t v1032 = v1034 >> 64;
  uint64_t v1033 = v1034;
  uint64_t v1039 = v1033 + v1037;
  if (__CFADD__(v1033, v1037)) {
    ++v1032;
  }
  *((void *)&v1040 + 1) = v1032;
  *(void *)&__int128 v1040 = v1033 + v1037;
  unint64_t v1041 = (v1016 & 0x7FFFFFFFFFFFFLL) + 19 * (v1040 >> 51);
  uint64_t v1042 = v1041 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1043 = v1035 + (v1041 >> 51);
  uint64_t v1044 = v1043 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1045 = v1036 + (v1043 >> 51);
  uint64_t v1046 = -5LL;
  do
  {
    uint64_t v1047 = v1039 & 0x7FFFFFFFFFFFFLL;
    uint64_t v1048 = v1030 & 0x7FFFFFFFFFFFFLL;
    uint64_t v1049 = 2 * v1042;
    uint64_t v1050 = 2 * v1044;
    unint64_t v1052 = ((unint64_t)(38 * v1045) * (unsigned __int128)(unint64_t)v1048
    uint64_t v1051 = 38 * v1045 * v1048 + v1044 * 38 * v1047 + v1042 * v1042;
    unint64_t v1053 = ((unint64_t)v1049 * (unsigned __int128)(unint64_t)v1048) >> 64;
    uint64_t v1054 = v1049 * v1048;
    unint64_t v1055 = ((unint64_t)(2 * v1044) * (unsigned __int128)(unint64_t)v1045) >> 64;
    uint64_t v1056 = 2 * v1044 * v1045;
    uint64_t v1057 = v1051 & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v1060 = (unint64_t)(19 * v1048) * (unsigned __int128)(unint64_t)v1048
          + (unint64_t)(38 * v1047) * (unsigned __int128)(unint64_t)v1045
          + (unint64_t)v1049 * (unsigned __int128)(unint64_t)v1044
          + (__PAIR128__(v1052, v1051) >> 51);
    unint64_t v1058 = v1060 >> 64;
    unint64_t v1059 = v1060;
    uint64_t v1061 = v1059 & 0x7FFFFFFFFFFFFLL;
    unsigned __int128 v1062 = __PAIR128__(v1058, v1059);
    unint64_t v1063 = ((unint64_t)(2 * v1044) * (unsigned __int128)(unint64_t)v1048) >> 64;
    unint64_t v1065 = ((unint64_t)v1044 * (unsigned __int128)(unint64_t)v1044
           + (unint64_t)(38 * v1047) * (unsigned __int128)(unint64_t)v1048
           + (unint64_t)v1049 * (unsigned __int128)(unint64_t)v1045
           + (v1062 >> 51)) >> 64;
    uint64_t v1064 = v1044 * v1044 + 38 * v1047 * v1048 + v1049 * v1045 + (v1062 >> 51);
    uint64_t v1066 = v1050 * v1048;
    uint64_t v1067 = v1064 & 0x7FFFFFFFFFFFFLL;
    uint64_t v1030 = v1056 + 19 * v1047 * v1047 + v1049 * v1048 + (__PAIR128__(v1065, v1064) >> 51);
    signed __int128 v1068 = __PAIR128__(v1063, v1066)
          + (unint64_t)v1045 * (unsigned __int128)(unint64_t)v1045
          + (unint64_t)v1049 * (unsigned __int128)(unint64_t)v1047
          + ((__PAIR128__(v1055, v1056)
            + (unint64_t)(19 * v1047) * (unsigned __int128)(unint64_t)v1047
            + __PAIR128__(v1053, v1054)
            + (__PAIR128__(v1065, v1064) >> 51)) >> 51);
    uint64_t v1039 = v1068;
    unint64_t v1069 = v1057 + 19 * (v1068 >> 51);
    uint64_t v1042 = v1069 & 0x7FFFFFFFFFFFFLL;
    unint64_t v1070 = v1061 + (v1069 >> 51);
    uint64_t v1044 = v1070 & 0x7FFFFFFFFFFFFLL;
    uint64_t v1045 = v1067 + (v1070 >> 51);
    BOOL v75 = __CFADD__(v1046++, 1LL);
  }

  while (!v75);
  uint64_t v1071 = v1356 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1072 = v1305 & 0x7FFFFFFFFFFFFLL;
  unsigned __int128 v1327 = (unint64_t)v1042 * (unsigned __int128)(v1345 & 0x7FFFFFFFFFFFFLL);
  unsigned __int128 v1357 = (unint64_t)v1042 * (unsigned __int128)(unint64_t)v1350;
  uint64_t v1073 = v1030 & 0x7FFFFFFFFFFFFLL;
  unsigned __int128 v1370 = (v1305 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1042;
  uint64_t v1074 = 19 * v1350;
  unsigned __int128 v1311 = (unint64_t)v1071 * (unsigned __int128)(unint64_t)v1042;
  v1071 *= 19LL;
  uint64_t v1075 = 19 * (v1305 & 0x7FFFFFFFFFFFFLL);
  signed __int128 v1076 = (v1068 & 0x7FFFFFFFFFFFFLL) * 19 * (v1345 & 0x7FFFFFFFFFFFFLL)
        + (v1030 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(19 * v1350)
        + (unint64_t)v1042 * (unsigned __int128)(v1340 & 0x7FFFFFFFFFFFFLL)
        + (unint64_t)v1044 * (unsigned __int128)(unint64_t)v1071
        + (unint64_t)v1045 * (unsigned __int128)(unint64_t)v1075;
  *((void *)&v1302 + 1) = ((v1305 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1044) >> 64;
  uint64_t v1077 = v1072 * v1044;
  unint64_t v1078 = ((unint64_t)v1044 * (unsigned __int128)(v1345 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1079 = v1044 * (v1345 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1080 = ((unint64_t)v1044 * (unsigned __int128)(unint64_t)v1350) >> 64;
  uint64_t v1081 = v1044 * v1350;
  unint64_t v1082 = ((unint64_t)v1045 * (unsigned __int128)(v1340 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1083 = v1045 * (v1340 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1084 = ((v1030 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1340 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1085 = (v1030 & 0x7FFFFFFFFFFFFLL) * (v1340 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1086 = ((v1068 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1340 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1087 = (v1068 & 0x7FFFFFFFFFFFFLL) * (v1340 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1088 = ((unint64_t)v1045 * (unsigned __int128)(v1345 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1089 = v1045 * (v1345 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1090 = ((v1030 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(v1345 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1091 = (v1030 & 0x7FFFFFFFFFFFFLL) * (v1345 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1297 = ((unint64_t)v1045 * (unsigned __int128)(unint64_t)v1350) >> 64;
  *(void *)&__int128 v1302 = v1077;
  uint64_t v1351 = v1045 * v1350;
  unint64_t v1092 = ((unint64_t)v1045 * (unsigned __int128)(unint64_t)v1071) >> 64;
  uint64_t v1093 = v1045 * v1071;
  uint64_t v1094 = ((v1030 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1075) >> 64;
  uint64_t v1095 = (v1030 & 0x7FFFFFFFFFFFFLL) * v1075;
  unint64_t v1096 = ((v1030 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1071) >> 64;
  uint64_t v1097 = v1073 * v1071;
  unint64_t v1098 = ((v1068 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1075) >> 64;
  uint64_t v1099 = (v1068 & 0x7FFFFFFFFFFFFLL) * v1075;
  unint64_t v1100 = ((v1068 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1071) >> 64;
  uint64_t v1101 = (v1068 & 0x7FFFFFFFFFFFFLL) * v1071;
  unsigned __int128 v1103 = __PAIR128__( v1094 + __CFADD__((v1068 & 0x7FFFFFFFFFFFFLL) * v1074, v1095)
          + (((v1068 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1074) >> 64),
            ((unint64_t)v1068 & 0x7FFFFFFFFFFFFLL) * v1074 + v1095)
        + v1327
  uint64_t v1102 = *((void *)&v1103 + 1);
  uint64_t v1104 = v1076 >> 51;
  uint64_t v1105 = v1103 + v1104;
  if (__CFADD__((void)v1103, v1104)) {
    uint64_t v1102 = *((void *)&v1103 + 1) + 1LL;
  }
  uint64_t v1107 = (__PAIR128__(v1098, v1099)
         + __PAIR128__(v1096, v1097)
         + v1357
         + __PAIR128__(v1078, v1079)
         + __PAIR128__(v1082, v1083)) >> 64;
  uint64_t v1106 = v1099 + v1097 + v1357 + v1079 + v1083;
  *((void *)&v1109 + 1) = v1102;
  *(void *)&__int128 v1109 = v1105;
  uint64_t v1108 = v1109 >> 51;
  BOOL v75 = __CFADD__(v1106, v1108);
  uint64_t v1110 = v1106 + v1108;
  uint64_t v1111 = v1105 & 0x7FFFFFFFFFFFFLL;
  if (v75) {
    ++v1107;
  }
  *((void *)&v1113 + 1) = v1107;
  *(void *)&__int128 v1113 = v1110;
  uint64_t v1112 = v1113 >> 51;
  uint64_t v1114 = v1110 & 0x7FFFFFFFFFFFFLL;
  unsigned __int128 v1115 = __PAIR128__(v1100, v1101)
        + __PAIR128__(v1084, v1085)
        + v1370
        + __PAIR128__(v1080, v1081)
        + __PAIR128__(v1088, v1089);
  BOOL v75 = __CFADD__((void)v1115, v1112);
  uint64_t v1116 = v1115 + v1112;
  if (v75) {
    uint64_t v1117 = *((void *)&v1115 + 1) + 1LL;
  }
  else {
    uint64_t v1117 = (__PAIR128__(v1100, v1101)
  }
           + __PAIR128__(v1084, v1085)
           + v1370
           + __PAIR128__(v1080, v1081)
           + __PAIR128__(v1088, v1089)) >> 64;
  *((void *)&v1119 + 1) = v1117;
  *(void *)&__int128 v1119 = v1116;
  uint64_t v1118 = v1119 >> 51;
  uint64_t v1120 = v1116 & 0x7FFFFFFFFFFFFLL;
  unsigned __int128 v1121 = __PAIR128__(v1086, v1087) + __PAIR128__(v1090, v1091) + v1311 + v1302 + __PAIR128__(v1297, v1351);
  uint64_t v1122 = v1121 + v1118;
  if (__CFADD__((void)v1121, v1118)) {
    uint64_t v1123 = *((void *)&v1121 + 1) + 1LL;
  }
  else {
    uint64_t v1123 = (__PAIR128__(v1086, v1087) + __PAIR128__(v1090, v1091) + v1311 + v1302 + __PAIR128__(v1297, v1351)) >> 64;
  }
  *((void *)&v1124 + 1) = v1123;
  *(void *)&__int128 v1124 = v1122;
  unint64_t v1125 = (v1076 & 0x7FFFFFFFFFFFFLL) + 19 * (v1124 >> 51);
  unint64_t v1126 = v1111 + (v1125 >> 51);
  uint64_t v1127 = v1114 + (v1126 >> 51);
  unsigned __int128 v1306 = v1273 * (unsigned __int128)(v1125 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1358 = (v1268 * (unsigned __int128)(v1125 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1346 = v1268 * (v1125 & 0x7FFFFFFFFFFFFLL);
  unsigned __int128 v1335 = (unint64_t)v1271 * (unsigned __int128)(unint64_t)v1127;
  unsigned __int128 v1319 = v1273 * (unsigned __int128)(v1126 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1365 = ((unint64_t)v1120 * (unsigned __int128)(unint64_t)v1271) >> 64;
  uint64_t v1352 = v1120 * v1271;
  unsigned __int128 v1371 = (v1122 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1271;
  uint64_t v1128 = 19 * (v1122 & 0x7FFFFFFFFFFFFLL);
  uint64_t v1129 = 19 * v1127;
  uint64_t v1130 = 19 * v1120;
  uint64_t v1134 = (v1273 * (unsigned __int128)(unint64_t)v1127) >> 64;
  unsigned __int128 v1133 = v1273 * (unsigned __int128)(unint64_t)v1128
        + (unint64_t)v1271 * (unsigned __int128)(v1125 & 0x7FFFFFFFFFFFFLL)
        + v1268 * (unsigned __int128)(unint64_t)(19 * v1120)
  unint64_t v1132 = v1133 >> 64;
  unint64_t v1131 = v1133;
  unint64_t v1135 = ((unint64_t)v1120 * (unsigned __int128)v1273) >> 64;
  uint64_t v1136 = v1120 * v1273;
  uint64_t v1137 = v1273 * v1127;
  unint64_t v1138 = (v1270 * (unsigned __int128)(v1125 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1139 = v1270 * (v1125 & 0x7FFFFFFFFFFFFLL);
  unsigned __int128 v1293 = v1266 * (unsigned __int128)(v1125 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1140 = (v1268 * (unsigned __int128)(v1126 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1141 = v1268 * (v1126 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1142 = (v1270 * (unsigned __int128)(v1126 & 0x7FFFFFFFFFFFFLL)) >> 64;
  uint64_t v1143 = v1270 * (v1126 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1144 = (v1268 * (unsigned __int128)(unint64_t)v1127) >> 64;
  uint64_t v1145 = v1268 * v1127;
  unint64_t v1146 = (v1268 * (unsigned __int128)(unint64_t)v1128) >> 64;
  uint64_t v1147 = v1268 * v1128;
  unint64_t v1148 = (v1270 * (unsigned __int128)(unint64_t)(19 * v1120)) >> 64;
  uint64_t v1149 = v1270 * 19 * v1120;
  unint64_t v1150 = (v1270 * (unsigned __int128)(unint64_t)v1128) >> 64;
  uint64_t v1151 = v1270 * v1128;
  unint64_t v1152 = (v1266 * (unsigned __int128)(unint64_t)(19 * v1120)) >> 64;
  uint64_t v1153 = v1266 * v1130;
  unint64_t v1154 = (v1266 * (unsigned __int128)(unint64_t)v1128) >> 64;
  uint64_t v1155 = v1266 * v1128;
  unsigned __int128 v1156 = v1306
        + (unint64_t)v1271 * (unsigned __int128)(v1126 & 0x7FFFFFFFFFFFFLL)
        + __PAIR128__(v1146, v1147)
        + __PAIR128__(v1148, v1149);
  uint64_t v1157 = (__int128)__PAIR128__(v1132, v1131) >> 51;
  unsigned __int128 v1159 = v1156 + v1266 * (unsigned __int128)(unint64_t)v1129;
  uint64_t v1158 = *((void *)&v1159 + 1);
  uint64_t v1160 = v1159 + v1157;
  if (__CFADD__((void)v1159, v1157)) {
    uint64_t v1158 = *((void *)&v1159 + 1) + 1LL;
  }
  *((void *)&v1162 + 1) = v1158;
  *(void *)&__int128 v1162 = v1159 + v1157;
  uint64_t v1161 = v1162 >> 51;
  unsigned __int128 v1163 = v1319 + v1335 + __PAIR128__(v1358, v1346) + __PAIR128__(v1150, v1151) + __PAIR128__(v1152, v1153);
  BOOL v75 = __CFADD__((void)v1163, v1161);
  uint64_t v1164 = v1163 + v1161;
  if (v75) {
    uint64_t v1165 = *((void *)&v1163 + 1) + 1LL;
  }
  else {
    uint64_t v1165 = (v1319 + v1335 + __PAIR128__(v1358, v1346) + __PAIR128__(v1150, v1151) + __PAIR128__(v1152, v1153)) >> 64;
  }
  *((void *)&v1167 + 1) = v1165;
  *(void *)&__int128 v1167 = v1164;
  uint64_t v1166 = v1167 >> 51;
  unsigned __int128 v1168 = __PAIR128__(v1365 + (unint64_t)__CFADD__(v1137, v1352) + v1134, v1137 + v1352)
        + __PAIR128__(v1140, v1141)
        + __PAIR128__(v1138, v1139)
        + __PAIR128__(v1154, v1155);
  BOOL v75 = __CFADD__((void)v1168, v1166);
  uint64_t v1169 = v1168 + v1166;
  if (v75) {
    uint64_t v1170 = *((void *)&v1168 + 1) + 1LL;
  }
  else {
    uint64_t v1170 = (__PAIR128__(v1365 + (unint64_t)__CFADD__(v1137, v1352) + v1134, v1137 + v1352)
  }
           + __PAIR128__(v1140, v1141)
           + __PAIR128__(v1138, v1139)
           + __PAIR128__(v1154, v1155)) >> 64;
  *((void *)&v1172 + 1) = v1170;
  *(void *)&__int128 v1172 = v1169;
  uint64_t v1171 = v1172 >> 51;
  uint64_t v1174 = (__PAIR128__(v1135, v1136) + v1371 + __PAIR128__(v1144, v1145) + __PAIR128__(v1142, v1143) + v1293) >> 64;
  uint64_t v1173 = v1136 + v1371 + v1145 + v1143 + v1293;
  BOOL v75 = __CFADD__(v1173, v1171);
  uint64_t v1175 = v1173 + v1171;
  uint64_t v1176 = v1160 & 0x7FFFFFFFFFFFFLL;
  uint64_t v1177 = v1164 & 0x7FFFFFFFFFFFFLL;
  if (v75) {
    ++v1174;
  }
  *((void *)&v1178 + 1) = v1174;
  *(void *)&__int128 v1178 = v1175;
  unint64_t v1179 = (v1131 & 0x7FFFFFFFFFFFFLL) + 19 * (v1178 >> 51);
  uint64_t v1180 = v1179 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1181 = v1176 + (v1179 >> 51);
  uint64_t v1182 = v1181 & 0x7FFFFFFFFFFFFLL;
  unint64_t v1183 = v1177 + (v1181 >> 51);
  uint64_t v1184 = (v1169 & 0x7FFFFFFFFFFFFLL) + (v1183 >> 51);
  unint64_t v1185 = ((__int128)(unint64_t)v1184 >> 51) + (v1175 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1186 = v1180 + 19 * ((__int128)v1185 >> 51);
  unint64_t v1187 = ((__int128)v1186 >> 51) + v1182;
  unint64_t v1188 = ((__int128)v1187 >> 51) + (v1183 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1189 = ((__int128)v1188 >> 51) + (v1184 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1190 = ((__int128)v1189 >> 51) + (v1185 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1191 = (v1186 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)v1190 >> 51) + 19;
  unint64_t v1192 = ((__int128)v1191 >> 51) + (v1187 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1193 = ((__int128)v1192 >> 51) + (v1188 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1194 = ((__int128)v1193 >> 51) + (v1189 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1195 = ((__int128)v1194 >> 51) + (v1190 & 0x7FFFFFFFFFFFFLL);
  unint64_t v1196 = (v1191 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)v1195 >> 51) + 0x7FFFFFFFFFFEDLL;
  unint64_t v1197 = (v1192 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1196 >> 51);
  unint64_t v1198 = (v1193 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1197 >> 51);
  *(void *)&__int128 v1178 = (v1194 & 0x7FFFFFFFFFFFFLL) + 0x7FFFFFFFFFFFFLL + ((__int128)v1198 >> 51);
  unint64_t v1199 = v1195 + 0x7FFFFFFFFFFFFLL + ((__int128)(unint64_t)v1178 >> 51);
  LOWORD(v1200) = v1196;
  BYTE2(v1200) = BYTE2(v1196);
  BYTE3(v1200) = BYTE3(v1196);
  BYTE4(v1200) = BYTE4(v1196);
  BYTE5(v1200) = BYTE5(v1196);
  BYTE6(v1200) = (v1196 & 0x7000000000000LL | (v1197 << 51)) >> 48;
  BYTE7(v1200) = v1197 >> 5;
  BYTE8(v1200) = v1197 >> 13;
  BYTE9(v1200) = v1197 >> 21;
  BYTE10(v1200) = v1197 >> 29;
  BYTE11(v1200) = v1197 >> 37;
  BYTE12(v1200) = ((v1197 >> 13) & 0x3FFFFFFFFFLL | (v1198 << 38)) >> 32;
  BYTE13(v1200) = v1198 >> 2;
  BYTE14(v1200) = v1198 >> 10;
  HIBYTE(v1200) = v1198 >> 18;
  LOBYTE(v1201) = v1198 >> 26;
  BYTE1(v1201) = v1198 >> 34;
  BYTE2(v1201) = v1198 >> 42;
  BYTE3(v1201) = ((v1198 >> 26) & 0x1FFFFFF | (((_DWORD)v1194 - 1 + ((__int128)v1198 >> 51)) << 25)) >> 24;
  BYTE4(v1201) = (unint64_t)v1178 >> 7;
  BYTE5(v1201) = (unint64_t)v1178 >> 15;
  BYTE6(v1201) = (unint64_t)v1178 >> 23;
  HIBYTE(v1201) = (unint64_t)v1178 >> 31;
  v287.i16[0] = ((unint64_t)v1178 >> 39) & 0xFFF;
  v287.i16[1] = (((unint64_t)v1178 >> 39) & 0xFFF | (((_DWORD)v1195
                                                           - 1
                                                           + ((__int128)(unint64_t)v1178 >> 51)) << 12)) >> 8;
  v287.i16[2] = ((_DWORD)v1195 - 1 + ((__int128)(unint64_t)v1178 >> 51)) >> 4;
  v287.i16[3] = ((_DWORD)v1195 - 1 + ((__int128)(unint64_t)v1178 >> 51)) >> 12;
  *(_BYTE *)(a1 + 2_Block_object_dispose((const void *)(v9 - 96), 8) = ((_DWORD)v1195 - 1 + ((__int128)(unint64_t)v1178 >> 51)) >> 20;
  *(_BYTE *)(a1 + 29) = v1199 >> 28;
  *(_BYTE *)(a1 + 30) = v1199 >> 36;
  *(_OWORD *)a1 = v1200;
  *(void *)(a1 + 16) = v1201;
  int8x8_t result = vmovn_s16(v287);
  *(_DWORD *)(a1 + 24) = result.i32[0];
  *(_BYTE *)(a1 + 31) = (v1199 >> 44) & 0x7F;
  return result;
}

LABEL_55:
  HIDWORD(v15) = a4;
  LODWORD(v15) = a4 + 536870336;
  uint64_t v14 = v15 >> 4;
  if (v14 > 3)
  {
    if (v14 != 4)
    {
      if (v14 == 12)
      {
        uint64_t v16 = _Block_copy(self->_sleepWakeHandler);
        if (v16)
        {
          BOOL v17 = (void (*)(void))v16[2];
          uint64_t v32 = v16;
          goto LABEL_76;
        }

  if (v6 != valuePtr) {
    free(v6);
  }
  _Block_object_dispose(&v27, 8);
LABEL_20:

  return v10;
}

  if (v18 < a2 && (uint64_t v28 = *v18, memchr("()<>@,;:\\[]?={} \t", *v18, 0x13uLL)))
  {
    uint64_t v29 = v18 + 1;
    do
    {
      uint64_t v18 = v29;
      if (v29 >= a2) {
        break;
      }
      uint64_t v30 = *v29;
      uint64_t v31 = *v29 < 0 ? __maskrune(v30, 0x4000uLL) : *(_DWORD *)(v13 + 4 * v30 + 60) & 0x4000;
      uint64_t v29 = v18 + 1;
    }

    while (v31);
  }

  else
  {
    uint64_t v28 = 0;
  }

  if (a3) {
    *a3 = v11;
  }
  if (a4) {
    *a4 = v15 - v11;
  }
  if (a5) {
    *a5 = v20;
  }
  if (a6) {
    *a6 = v17 - v20;
  }
  if (a7) {
    *a7 = v28;
  }
  int8x8_t result = 0LL;
  if (a8) {
    *a8 = v18;
  }
  return result;
}

    *(_BYTE *)(a1 + 120) = 2;
    *(_DWORD *)(a1 + 96) = 3;
    CFIndex Bytes = _VerifyClientExchange(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, v33, v34);
    goto LABEL_56;
  }

  if (v14 != 1)
  {
    uint64_t v24 = 0LL;
    uint64_t v29 = 0;
LABEL_33:
    CFIndex Bytes = 0;
    goto LABEL_34;
  }

  if (a3)
  {
LABEL_68:
    uint64_t v30 = -6705;
  }

  else if (*(void *)(a1 + 352))
  {
    int v21 = (void *)(a1 + 296);
    uint64_t v22 = *(void **)(a1 + 296);
    if (v22)
    {
      free(v22);
      *int v21 = 0LL;
    }

    *(void *)(a1 + 304) = 0LL;
    if (_PairingFindResumeState( *(void *)(a1 + 376),  (void *)(a1 + 296),  (size_t *)(a1 + 304),  (_OWORD *)(a1 + 638)))
    {
      uint64_t v30 = -6767;
    }

    else
    {
      RandomBytes((void *)(a1 + 478), 0x20uLL);
      CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 478,  32LL,  "Pair-Verify-ECDH-Salt",  0x15uLL,  (uint64_t)"Pair-Verify-ECDH-Info",  21LL,  0x20uLL,  a1 + 478);
      cccurve25519_make_pub();
      uint64_t v23 = (int8x16_t *)malloc(*(void *)(a1 + 360) + 16LL);
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(_OWORD *)(a1 + 462);
        unsigned int __dst = *(_OWORD *)(a1 + 446);
        uint64_t v61 = v25;
        uint64_t v62 = *(void *)(a1 + 376);
        CryptoHKDF( (uint64_t)_kCryptoHashDescriptor_SHA512,  a1 + 638,  32LL,  (char *)&__dst,  0x28uLL,  (uint64_t)"Pair-Resume-Request-Info",  24LL,  0x20uLL,  (uint64_t)__s);
        _chacha20_poly1305_encrypt_all( __s,  "PR-Msg01",  8LL,  0LL,  0LL,  *(int8x16_t **)(a1 + 352),  *(void *)(a1 + 360),  v24,  (uint64_t)v24->i64 + *(void *)(a1 + 360));
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
        CFIndex Bytes = TLV8BufferAppend((uint64_t)&__src, 6, v15, 1uLL);
        if (Bytes
          || (LOBYTE(v68[0]) = 6, (CFIndex Bytes = TLV8BufferAppend((uint64_t)&__src, 0, (char *)v68, 1uLL)) != 0)
          || (CFIndex Bytes = TLV8BufferAppendUInt64((uint64_t)&__src, 14, *(void *)(a1 + 376))) != 0
          || (CFIndex Bytes = TLV8BufferAppend((uint64_t)&__src, 5, v24->i8, *(void *)(a1 + 360) + 16LL)) != 0
          || (CFIndex Bytes = TLV8BufferAppend((uint64_t)&__src, 3, (char *)(a1 + 446), 0x20uLL)) != 0)
        {
LABEL_25:
          *a6 = 0;
          if (v66)
          {
            free(v66);
            uint64_t v66 = 0LL;
          }

          goto LABEL_37;
        }

        uint64_t v50 = v65;
        uint64_t v51 = (UInt8 *)v66;
        if (!v66)
        {
          else {
            uint64_t v52 = v65;
          }
          uint64_t v53 = (UInt8 *)malloc(v52);
          if (!v53)
          {
            CFIndex Bytes = -6728;
            goto LABEL_25;
          }

          uint64_t v51 = v53;
          if (v50) {
            memcpy(v53, __src, v50);
          }
        }

        __src = v67;
        *(void *)&uint64_t v65 = 0LL;
        uint64_t v66 = 0LL;
        *a4 = v51;
        *a5 = v50;
        uint64_t v54 = *(int **)(a1 + 16);
        uint64_t v55 = *v54;
        if (*v54 > 30) {
          goto LABEL_100;
        }
        if (v55 == -1)
        {
          if (!_LogCategory_Initialize(*(void *)(a1 + 16), 0x1Eu))
          {
LABEL_100:
            uint64_t v29 = 0;
            *uint64_t v15 = 2;
            goto LABEL_33;
          }

          uint64_t v54 = *(int **)(a1 + 16);
          uint64_t v55 = *v54;
        }

        uint64_t v56 = v55 > 10 || v55 == -1 && !_LogCategory_Initialize((uint64_t)v54, 0xAu);
        LogPrintF( (uint64_t)v54,  (uint64_t)"OSStatus _ResumePairingClientExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x1Eu,  (uint64_t)"Pair-resume client M1 -- resume request\n%?{end}%1{tlv8}\n",  (uint64_t)a5,  (uint64_t)a6,  a7,  a8,  v56);
        goto LABEL_100;
      }

      uint64_t v30 = -6728;
    }
  }

  else
  {
    uint64_t v30 = -6745;
  }

  uint64_t v26 = &v8[v5];
  while (1)
  {
    uint64_t v27 = read(*(_DWORD *)(a1 + 24), v26, v22);
    if ((v27 & 0x8000000000000000LL) == 0)
    {
      uint64_t v28 = 0;
      goto LABEL_62;
    }

    if (!*__error()) {
      break;
    }
    uint64_t v28 = *__error();
    if (v28 != 4) {
      goto LABEL_62;
    }
  }

  uint64_t v28 = -6700;
LABEL_62:
  if (v27) {
    uint64_t v24 = v28;
  }
  else {
    uint64_t v24 = 35LL;
  }
  if ((_DWORD)v24 != 35)
  {
    if ((_DWORD)v24) {
      goto LABEL_76;
    }
    *(void *)(a1 + 72) += v27;
    goto LABEL_51;
  }

uint64_t _sleepWakeCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 _sleepWakeHandlerForService:a2 type:a3 arg:a4];
}

id FBSDisplayLayoutElementControlCenterIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementControlCenterIdentifier;
}

id initValFBSDisplayLayoutElementControlCenterIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1039);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementControlCenterIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementControlCenterIdentifier, *v0);
  }
  getFBSDisplayLayoutElementControlCenterIdentifier = (uint64_t (*)())FBSDisplayLayoutElementControlCenterIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementControlCenterIdentifier;
}

id FBSDisplayLayoutElementLockScreenIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementLockScreenIdentifier;
}

id initValFBSDisplayLayoutElementLockScreenIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1039);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementLockScreenIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementLockScreenIdentifier, *v0);
  }
  getFBSDisplayLayoutElementLockScreenIdentifier = (uint64_t (*)())FBSDisplayLayoutElementLockScreenIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementLockScreenIdentifier;
}

id FBSDisplayLayoutElementNotificationCenterIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementNotificationCenterIdentifier;
}

id initValFBSDisplayLayoutElementNotificationCenterIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1039);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementNotificationCenterIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementNotificationCenterIdentifier, *v0);
  }
  getFBSDisplayLayoutElementNotificationCenterIdentifier = (uint64_t (*)())FBSDisplayLayoutElementNotificationCenterIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementNotificationCenterIdentifier;
}

id FBSDisplayLayoutElementSiriIdentifierFunction()
{
  return (id)constantValFBSDisplayLayoutElementSiriIdentifier;
}

id initValFBSDisplayLayoutElementSiriIdentifier()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1039);
  }
  os_log_t v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSDisplayLayoutElementSiriIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValFBSDisplayLayoutElementSiriIdentifier, *v0);
  }
  getFBSDisplayLayoutElementSiriIdentifier = (uint64_t (*)())FBSDisplayLayoutElementSiriIdentifierFunction;
  return (id)constantValFBSDisplayLayoutElementSiriIdentifier;
}

id FBSDisplayLayoutMonitorConfigurationFunction()
{
  return (id)classFBSDisplayLayoutMonitorConfiguration;
}

Class initFBSDisplayLayoutMonitorConfiguration()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1039);
  }
  Class result = objc_getClass("FBSDisplayLayoutMonitorConfiguration");
  classFBSDisplayLayoutMonitorConfiguration = (uint64_t)result;
  getFBSDisplayLayoutMonitorConfigurationClass = (uint64_t (*)())FBSDisplayLayoutMonitorConfigurationFunction;
  return result;
}

id FBSDisplayLayoutMonitorFunction()
{
  return (id)classFBSDisplayLayoutMonitor;
}

Class initFBSDisplayLayoutMonitor()
{
  if (FrontBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_1039);
  }
  Class result = objc_getClass("FBSDisplayLayoutMonitor");
  classFBSDisplayLayoutMonitor = (uint64_t)result;
  getFBSDisplayLayoutMonitorClass = (uint64_t (*)())FBSDisplayLayoutMonitorFunction;
  return result;
}

void *__FrontBoardServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
  FrontBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t _systemConfigChanged(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3[59]) {
    return [a3 _systemConfigChanged:a2 initial:0];
  }
  return result;
}

uint64_t initValkCTCellMonitorMCC()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_993);
  }
  os_log_t v0 = (uint64_t *)dlsym((void *)CoreCDPLibrary_sLib, "kCTCellMonitorMCC");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCTCellMonitorMCC = result;
  }

  else
  {
    uint64_t result = constantValkCTCellMonitorMCC;
  }

  getkCTCellMonitorMCC = kCTCellMonitorMCCFunction;
  return result;
}

uint64_t kCTCellMonitorMCCFunction()
{
  return constantValkCTCellMonitorMCC;
}

void *__CoreCDPLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CoreCDP.framework/CoreCDP", 2);
  CoreCDPLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t init_CTServerConnectionCopyISOForMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1030);
  }
  softLink_CTServerConnectionCopyISOForMCC = (uint64_t (*)())dlsym( (void *)CoreTelephonyLibrary_sLib,  "_CTServerConnectionCopyISOForMCC");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLink_CTServerConnectionCopyISOForMCC)(a1, a2, a3);
}

void *__CoreTelephonyLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony", 2);
  CoreTelephonyLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t init_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = CoreTelephonyLibrary_sOnce;
  id v8 = a4;
  id v9 = a3;
  if (v7 != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1030);
  }
  softLink_CTServerConnectionCreateOnTargetQueue = (uint64_t (*)())dlsym( (void *)CoreTelephonyLibrary_sLib,  "_CTServerConnectionCreateOnTargetQueue");
  uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, id, id))softLink_CTServerConnectionCreateOnTargetQueue)( a1,  a2,  v9,  v8);

  return v10;
}

id CoreTelephonyClientFunction()
{
  return (id)classCoreTelephonyClient;
}

Class initCoreTelephonyClient()
{
  if (CoreTelephonyLibrary_sOnce != -1) {
    dispatch_once(&CoreTelephonyLibrary_sOnce, &__block_literal_global_1030);
  }
  Class result = objc_getClass("CoreTelephonyClient");
  classCoreTelephonyClient = (uint64_t)result;
  getCoreTelephonyClientClass = (uint64_t (*)())CoreTelephonyClientFunction;
  return result;
}

id RTRoutineManagerFunction()
{
  return (id)classRTRoutineManager;
}

Class initRTRoutineManager()
{
  if (CoreRoutineLibrary_sOnce != -1) {
    dispatch_once(&CoreRoutineLibrary_sOnce, &__block_literal_global_1033);
  }
  Class result = objc_getClass("RTRoutineManager");
  classRTRoutineManager = (uint64_t)result;
  getRTRoutineManagerClass = (uint64_t (*)())RTRoutineManagerFunction;
  return result;
}

void *__CoreRoutineLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreRoutine.framework/CoreRoutine", 2);
  CoreRoutineLibrary_sLib = (uint64_t)result;
  return result;
}

id AKAccountManagerFunction_8039()
{
  return (id)classAKAccountManager_8046;
}

Class initAKAccountManager_8040()
{
  if (AuthKitLibrary_sOnce_8045 != -1) {
    dispatch_once(&AuthKitLibrary_sOnce_8045, &__block_literal_global_1027);
  }
  Class result = objc_getClass("AKAccountManager");
  classAKAccountManager_8046 = (uint64_t)result;
  getAKAccountManagerClass_8038 = (uint64_t (*)())AKAccountManagerFunction_8039;
  return result;
}

void *__AuthKitLibrary_block_invoke_8047()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AuthKit.framework/AuthKit", 2);
  AuthKitLibrary_sLib_8048 = (uint64_t)result;
  return result;
}

id ACAccountStoreFunction_8051()
{
  return (id)classACAccountStore_8054;
}

Class initACAccountStore_8052()
{
  if (AccountsLibrary_sOnce_8053 != -1) {
    dispatch_once(&AccountsLibrary_sOnce_8053, &__block_literal_global_1024);
  }
  Class result = objc_getClass("ACAccountStore");
  classACAccountStore_8054 = (uint64_t)result;
  getACAccountStoreClass_8050 = (uint64_t (*)())ACAccountStoreFunction_8051;
  return result;
}

void *__AccountsLibrary_block_invoke_8055()
{
  Class result = dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
  AccountsLibrary_sLib_8056 = (uint64_t)result;
  return result;
}

void *__AppleAccountLibrary_block_invoke_8057()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount", 2);
  AppleAccountLibrary_sLib_8058 = (uint64_t)result;
  return result;
}

id logger_8068()
{
  if (sCUOSLogCreateOnce_logger_8069 != -1) {
    dispatch_once(&sCUOSLogCreateOnce_logger_8069, &__block_literal_global_1020);
  }
  return (id)sCUOSLogHandle_logger_8070;
}

void __logger_block_invoke_8071()
{
  os_log_t v0 = os_log_create("com.apple.CoreUtils", "CUSystemMonitor");
  uint64_t v1 = (void *)sCUOSLogHandle_logger_8070;
  sCUOSLogHandle_logger_8070 = (uint64_t)v0;
}

id CMMotionActivityManagerFunction()
{
  return (id)classCMMotionActivityManager;
}

Class initCMMotionActivityManager()
{
  if (CoreMotionLibrary_sOnce != -1) {
    dispatch_once(&CoreMotionLibrary_sOnce, &__block_literal_global_1008);
  }
  Class result = objc_getClass("CMMotionActivityManager");
  classCMMotionActivityManager = (uint64_t)result;
  getCMMotionActivityManagerClass = (uint64_t (*)())CMMotionActivityManagerFunction;
  return result;
}

id CMDeviceOrientationManagerFunction()
{
  return (id)classCMDeviceOrientationManager;
}

Class initCMDeviceOrientationManager()
{
  if (CoreMotionLibrary_sOnce != -1) {
    dispatch_once(&CoreMotionLibrary_sOnce, &__block_literal_global_1008);
  }
  Class result = objc_getClass("CMDeviceOrientationManager");
  classCMDeviceOrientationManager = (uint64_t)result;
  getCMDeviceOrientationManagerClass = (uint64_t (*)())CMDeviceOrientationManagerFunction;
  return result;
}

void *__CoreMotionLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreMotion.framework/CoreMotion", 2);
  CoreMotionLibrary_sLib = (uint64_t)result;
  return result;
}

id FMFSessionFunction()
{
  return (id)classFMFSession;
}

Class initFMFSession()
{
  if (FMFLibrary_sOnce != -1) {
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1003);
  }
  Class result = objc_getClass("FMFSession");
  classFMFSession = (uint64_t)result;
  getFMFSessionClass[0] = (uint64_t (*)())FMFSessionFunction;
  return result;
}

void *__FMFLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FMF.framework/FMF", 2);
  FMFLibrary_sLib = (uint64_t)result;
  return result;
}

id CUFindMyLocateMeDeviceMonitorFunction()
{
  return (id)classCUFindMyLocateMeDeviceMonitor;
}

Class initCUFindMyLocateMeDeviceMonitor()
{
  if (CoreUtilsUILibrary_sOnce != -1) {
    dispatch_once(&CoreUtilsUILibrary_sOnce, &__block_literal_global_1000);
  }
  Class result = objc_getClass("CUFindMyLocateMeDeviceMonitor");
  classCUFindMyLocateMeDeviceMonitor = (uint64_t)result;
  getCUFindMyLocateMeDeviceMonitorClass[0] = (uint64_t (*)())CUFindMyLocateMeDeviceMonitorFunction;
  return result;
}

id FMFMeDeviceChangedNotificationFunction()
{
  return (id)constantValFMFMeDeviceChangedNotification;
}

id initValFMFMeDeviceChangedNotification()
{
  if (FMFLibrary_sOnce != -1) {
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1003);
  }
  os_log_t v0 = (id *)dlsym((void *)FMFLibrary_sLib, "FMFMeDeviceChangedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValFMFMeDeviceChangedNotification, *v0);
  }
  getFMFMeDeviceChangedNotification[0] = (uint64_t (*)())FMFMeDeviceChangedNotificationFunction;
  return (id)constantValFMFMeDeviceChangedNotification;
}

id FMFDevicesChangedNotificationFunction()
{
  return (id)constantValFMFDevicesChangedNotification;
}

id initValFMFDevicesChangedNotification()
{
  if (FMFLibrary_sOnce != -1) {
    dispatch_once(&FMFLibrary_sOnce, &__block_literal_global_1003);
  }
  os_log_t v0 = (id *)dlsym((void *)FMFLibrary_sLib, "FMFDevicesChangedNotification");
  if (v0) {
    objc_storeStrong((id *)&constantValFMFDevicesChangedNotification, *v0);
  }
  getFMFDevicesChangedNotification[0] = (uint64_t (*)())FMFDevicesChangedNotificationFunction;
  return (id)constantValFMFDevicesChangedNotification;
}

void *__CoreUtilsUILibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/CoreUtilsUI.framework/CoreUtilsUI", 2);
  CoreUtilsUILibrary_sLib = (uint64_t)result;
  return result;
}

id CDPStateControllerFunction()
{
  return (id)classCDPStateController;
}

Class initCDPStateController()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_993);
  }
  Class result = objc_getClass("CDPStateController");
  classCDPStateController = (uint64_t)result;
  getCDPStateControllerClass = (uint64_t (*)())CDPStateControllerFunction;
  return result;
}

id CDPContextFunction()
{
  return (id)classCDPContext;
}

Class initCDPContext()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_993);
  }
  Class result = objc_getClass("CDPContext");
  classCDPContext = (uint64_t)result;
  getCDPContextClass[0] = (uint64_t (*)())CDPContextFunction;
  return result;
}

void sub_186ACA3A4(_Unwind_Exception *a1)
{
}

uint64_t CDPManateeAvailabilityNotificationFunction()
{
  return constantValCDPManateeAvailabilityNotification;
}

uint64_t initValCDPManateeAvailabilityNotification()
{
  if (CoreCDPLibrary_sOnce != -1) {
    dispatch_once(&CoreCDPLibrary_sOnce, &__block_literal_global_993);
  }
  os_log_t v0 = (uint64_t *)dlsym((void *)CoreCDPLibrary_sLib, "CDPManateeAvailabilityNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValCDPManateeAvailabilityNotification = result;
  }

  else
  {
    uint64_t result = constantValCDPManateeAvailabilityNotification;
  }

  getCDPManateeAvailabilityNotification[0] = CDPManateeAvailabilityNotificationFunction;
  return result;
}

uint64_t *initValkCLLocationAccuracyHundredMeters()
{
  if (CoreLocationLibrary_sOnce != -1) {
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_983);
  }
  uint64_t result = (uint64_t *)dlsym((void *)CoreLocationLibrary_sLib, "kCLLocationAccuracyHundredMeters");
  if (result) {
    constantValkCLLocationAccuracyHundredMeters = *result;
  }
  getkCLLocationAccuracyHundredMeters = (uint64_t (*)())kCLLocationAccuracyHundredMetersFunction;
  return result;
}

double kCLLocationAccuracyHundredMetersFunction()
{
  return *(double *)&constantValkCLLocationAccuracyHundredMeters;
}

id CLLocationManagerFunction()
{
  return (id)classCLLocationManager;
}

Class initCLLocationManager()
{
  if (CoreLocationLibrary_sOnce != -1) {
    dispatch_once(&CoreLocationLibrary_sOnce, &__block_literal_global_983);
  }
  Class result = objc_getClass("CLLocationManager");
  classCLLocationManager = (uint64_t)result;
  getCLLocationManagerClass = (uint64_t (*)())CLLocationManagerFunction;
  return result;
}

void *__CoreLocationLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  CoreLocationLibrary_sLib = (uint64_t)result;
  return result;
}

id FAFetchFamilyCircleRequestFunction()
{
  return (id)classFAFetchFamilyCircleRequest;
}

Class initFAFetchFamilyCircleRequest()
{
  if (FamilyCircleLibrary_sOnce != -1) {
    dispatch_once(&FamilyCircleLibrary_sOnce, &__block_literal_global_979);
  }
  Class result = objc_getClass("FAFetchFamilyCircleRequest");
  classFAFetchFamilyCircleRequest = (uint64_t)result;
  getFAFetchFamilyCircleRequestClass[0] = (uint64_t (*)())FAFetchFamilyCircleRequestFunction;
  return result;
}

id FAFamilyMemberFunction()
{
  return (id)classFAFamilyMember;
}

Class initFAFamilyMember()
{
  if (FamilyCircleLibrary_sOnce != -1) {
    dispatch_once(&FamilyCircleLibrary_sOnce, &__block_literal_global_979);
  }
  Class result = objc_getClass("FAFamilyMember");
  classFAFamilyMember = (uint64_t)result;
  getFAFamilyMemberClass = (uint64_t (*)())FAFamilyMemberFunction;
  return result;
}

void *__FamilyCircleLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/FamilyCircle.framework/FamilyCircle", 2);
  FamilyCircleLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initBYSetupAssistantNeedsToRun()
{
  if (SetupAssistantLibrary_sOnce != -1) {
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_976_8131);
  }
  softLinkBYSetupAssistantNeedsToRun = (uint64_t (*)())dlsym( (void *)SetupAssistantLibrary_sLib,  "BYSetupAssistantNeedsToRun");
  return softLinkBYSetupAssistantNeedsToRun();
}

void *__SetupAssistantLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
  SetupAssistantLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t BYSetupAssistantFinishedDarwinNotificationFunction()
{
  return constantValBYSetupAssistantFinishedDarwinNotification;
}

uint64_t initValBYSetupAssistantFinishedDarwinNotification()
{
  if (SetupAssistantLibrary_sOnce != -1) {
    dispatch_once(&SetupAssistantLibrary_sOnce, &__block_literal_global_976_8131);
  }
  os_log_t v0 = (uint64_t *)dlsym((void *)SetupAssistantLibrary_sLib, "BYSetupAssistantFinishedDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    constantValBYSetupAssistantFinishedDarwinNotification = result;
  }

  else
  {
    uint64_t result = constantValBYSetupAssistantFinishedDarwinNotification;
  }

  getBYSetupAssistantFinishedDarwinNotification[0] = BYSetupAssistantFinishedDarwinNotificationFunction;
  return result;
}

void initAnalyticsSendEvent_8456(void *a1, void *a2)
{
  uint64_t v3 = CoreAnalyticsLibrary_sOnce_8444;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&CoreAnalyticsLibrary_sOnce_8444, &__block_literal_global_8445);
  }
  softLinkAnalyticsSendEvent_8455 = (uint64_t (*)())dlsym( (void *)CoreAnalyticsLibrary_sLib_8446,  "AnalyticsSendEvent");
  ((void (*)(id, id))softLinkAnalyticsSendEvent_8455)(v5, v4);
}

void *__CoreAnalyticsLibrary_block_invoke_8467()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
  CoreAnalyticsLibrary_sLib_8446 = (uint64_t)result;
  return result;
}

void _connectHandler(int a1, const char *a2, uint64_t a3)
{
  if (!*(_BYTE *)(a3 + 112))
  {
    uint64_t v6 = *(dispatch_queue_t **)(a3 + 8);
    if (!v6) {
      goto LABEL_5;
    }
    dispatch_async_f(v6[13], v6, (dispatch_function_t)_AsyncConnection_UserRelease);
  }

  *(void *)(a3 + _Block_object_dispose((const void *)(v9 - 96), 8) = 0LL;
LABEL_5:
  if (!(_DWORD)a2)
  {
    if (*(_BYTE *)(a3 + 112))
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE5BDLL);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      *(_DWORD *)(a3 + 304) = a1;
      id v23 = 0LL;
      [(id)a3 _setupIOAndReturnError:&v23];
      id v7 = v23;
      a1 = -1;
    }

    goto LABEL_8;
  }

  NSErrorWithOSStatusF(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a3 + 112) && *(void *)(a3 + 328))
  {
    uint64_t v14 = *(int **)(a3 + 216);
    if (*v14 <= 30)
    {
      if (*v14 == -1)
      {
        uint64_t v14 = *(int **)(a3 + 216);
      }

      LogPrintF( (uint64_t)v14,  (uint64_t)"void _connectHandler(SocketRef, OSStatus, void * _Nonnull)",  0x1Eu,  (uint64_t)"Connect failed. Reconfirming with Bonjour\n",  v10,  v11,  v12,  v13,  v22);
    }

void _connectCompletion( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(_BYTE *)(v9 + 112))
  {
    *(void *)(v9 + _Block_object_dispose((const void *)(v9 - 96), 8) = 0LL;
    a1 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)a1) {
      goto LABEL_23;
    }
LABEL_22:
    a1 = 4294960573LL;
    goto LABEL_23;
  }

  uint64_t v10 = *(dispatch_queue_t **)(v9 + 8);
  if (v10)
  {
    dispatch_async_f(v10[13], v10, (dispatch_function_t)_AsyncConnection_UserRelease);
    *(void *)(v9 + _Block_object_dispose((const void *)(v9 - 96), 8) = 0LL;
    int v11 = *(unsigned __int8 *)(v9 + 112);
    uint64_t v12 = (_DWORD *)(v8 + 12);
    a1 = *(unsigned int *)(v8 + 12);
    if (!(_DWORD)a1) {
      goto LABEL_21;
    }
    if (*(_BYTE *)(v9 + 112))
    {
LABEL_23:
      NSErrorWithOSStatusF((const char *)a1);
      id v21 = (id)objc_claimAutoreleasedReturnValue();
      if (v21) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v12 = (_DWORD *)(a1 + 12);
    LODWORD(a1) = *(_DWORD *)(a1 + 12);
    if (!(_DWORD)a1) {
      goto LABEL_24;
    }
  }

  if (!*(void *)(v9 + 328)) {
    goto LABEL_19;
  }
  uint64_t v13 = *(int **)(v9 + 216);
  if (*v13 <= 30)
  {
    if (*v13 == -1)
    {
      if (!_LogCategory_Initialize(*(void *)(v9 + 216), 0x1Eu)) {
        goto LABEL_14;
      }
      uint64_t v13 = *(int **)(v9 + 216);
      LODWORD(a1) = *v12;
    }

    LogPrintF( (uint64_t)v13,  (uint64_t)"void _connectCompletion(AsyncConnectionCompletionInfo * _Nonnull)",  0x1Eu,  (uint64_t)"Connect failed. Reconfirming with Bonjour: %#m\n",  a5,  a6,  a7,  a8,  a1);
  }

LABEL_4:
  uint64_t v10 = self->_ucat;
  if (v10->var0 <= 30)
  {
    if (v10->var0 == -1)
    {
      uint64_t v10 = self->_ucat;
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"-[CUTCPServer _handleConnectionAccept:]",  0x1Eu,  (uint64_t)"Connection started from %##a\n",  v4,  v5,  v6,  v7,  (char)v37);
  }

  if (a3) {
    *a3 = v7;
  }
  return Mutable;
}

void sub_186AD21CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __Block_byref_object_copy__8771(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__8772(uint64_t a1)
{
}

void _responseCallback(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)gCUUserAlertMap;
  [MEMORY[0x189607968] numberWithLong:a1];
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 objectForKeyedSubscript:v5];
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  pthread_mutex_unlock(&gCUUserAlertMutex);
  [v6 _responseCallback:a1 responseFlags:a2];
}

id UNNotificationDefaultActionIdentifierFunction()
{
  return (id)constantValUNNotificationDefaultActionIdentifier;
}

id initValUNNotificationDefaultActionIdentifier()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  os_log_t v0 = (id *)dlsym((void *)UserNotificationsLibrary_sLib, "UNNotificationDefaultActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValUNNotificationDefaultActionIdentifier, *v0);
  }
  getUNNotificationDefaultActionIdentifier = (uint64_t (*)())UNNotificationDefaultActionIdentifierFunction;
  return (id)constantValUNNotificationDefaultActionIdentifier;
}

id UNNotificationDismissActionIdentifierFunction()
{
  return (id)constantValUNNotificationDismissActionIdentifier;
}

id initValUNNotificationDismissActionIdentifier()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  os_log_t v0 = (id *)dlsym((void *)UserNotificationsLibrary_sLib, "UNNotificationDismissActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&constantValUNNotificationDismissActionIdentifier, *v0);
  }
  getUNNotificationDismissActionIdentifier = (uint64_t (*)())UNNotificationDismissActionIdentifierFunction;
  return (id)constantValUNNotificationDismissActionIdentifier;
}

void *__UserNotificationsLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/UserNotifications.framework/UserNotifications", 2);
  UserNotificationsLibrary_sLib = (uint64_t)result;
  return result;
}

id UNMutableNotificationContentFunction()
{
  return (id)classUNMutableNotificationContent;
}

Class initUNMutableNotificationContent()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNMutableNotificationContent");
  classUNMutableNotificationContent = (uint64_t)result;
  getUNMutableNotificationContentClass = (uint64_t (*)())UNMutableNotificationContentFunction;
  return result;
}

id UNNotificationIconFunction()
{
  return (id)classUNNotificationIcon;
}

Class initUNNotificationIcon()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNNotificationIcon");
  classUNNotificationIcon = (uint64_t)result;
  getUNNotificationIconClass = (uint64_t (*)())UNNotificationIconFunction;
  return result;
}

id UNNotificationSoundFunction()
{
  return (id)classUNNotificationSound;
}

Class initUNNotificationSound()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNNotificationSound");
  classUNNotificationSound = (uint64_t)result;
  getUNNotificationSoundClass = (uint64_t (*)())UNNotificationSoundFunction;
  return result;
}

id UNNotificationRequestFunction()
{
  return (id)classUNNotificationRequest;
}

Class initUNNotificationRequest()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNNotificationRequest");
  classUNNotificationRequest = (uint64_t)result;
  getUNNotificationRequestClass = (uint64_t (*)())UNNotificationRequestFunction;
  return result;
}

id UNUserNotificationCenterFunction()
{
  return (id)classUNUserNotificationCenter;
}

Class initUNUserNotificationCenter()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNUserNotificationCenter");
  classUNUserNotificationCenter = (uint64_t)result;
  getUNUserNotificationCenterClass = (uint64_t (*)())UNUserNotificationCenterFunction;
  return result;
}

id UNNotificationCategoryFunction()
{
  return (id)classUNNotificationCategory;
}

Class initUNNotificationCategory()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNNotificationCategory");
  classUNNotificationCategory = (uint64_t)result;
  getUNNotificationCategoryClass = (uint64_t (*)())UNNotificationCategoryFunction;
  return result;
}

id UNNotificationActionFunction()
{
  return (id)classUNNotificationAction;
}

Class initUNNotificationAction()
{
  if (UserNotificationsLibrary_sOnce != -1) {
    dispatch_once(&UserNotificationsLibrary_sOnce, &__block_literal_global_9016);
  }
  Class result = objc_getClass("UNNotificationAction");
  classUNNotificationAction = (uint64_t)result;
  getUNNotificationActionClass = (uint64_t (*)())UNNotificationActionFunction;
  return result;
}

id AVAudioSessionFunction_9208()
{
  return (id)classAVAudioSession_9221;
}

Class initAVAudioSession_9209()
{
  if (AVFoundationLibrary_sOnce_9219 != -1) {
    dispatch_once(&AVFoundationLibrary_sOnce_9219, &__block_literal_global_118);
  }
  Class result = objc_getClass("AVAudioSession");
  classAVAudioSession_9221 = (uint64_t)result;
  getAVAudioSessionClass_9207[0] = (uint64_t (*)())AVAudioSessionFunction_9208;
  return result;
}

void *__AVFoundationLibrary_block_invoke_9222()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/AVFoundation.framework/AVFoundation", 2);
  AVFoundationLibrary_sLib_9224 = (uint64_t)result;
  return result;
}

id SiriTTSDaemonSessionFunction()
{
  return (id)classSiriTTSDaemonSession;
}

Class initSiriTTSDaemonSession()
{
  if (SiriTTSServiceLibrary_sOnce != -1) {
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9232);
  }
  Class result = objc_getClass("SiriTTSDaemonSession");
  classSiriTTSDaemonSession = (uint64_t)result;
  getSiriTTSDaemonSessionClass[0] = (uint64_t (*)())SiriTTSDaemonSessionFunction;
  return result;
}

id SiriTTSSynthesisVoiceFunction()
{
  return (id)classSiriTTSSynthesisVoice;
}

Class initSiriTTSSynthesisVoice()
{
  if (SiriTTSServiceLibrary_sOnce != -1) {
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9232);
  }
  Class result = objc_getClass("SiriTTSSynthesisVoice");
  classSiriTTSSynthesisVoice = (uint64_t)result;
  getSiriTTSSynthesisVoiceClass[0] = (uint64_t (*)())SiriTTSSynthesisVoiceFunction;
  return result;
}

id SiriTTSSpeechRequestFunction()
{
  return (id)classSiriTTSSpeechRequest;
}

Class initSiriTTSSpeechRequest()
{
  if (SiriTTSServiceLibrary_sOnce != -1) {
    dispatch_once(&SiriTTSServiceLibrary_sOnce, &__block_literal_global_9232);
  }
  Class result = objc_getClass("SiriTTSSpeechRequest");
  classSiriTTSSpeechRequest = (uint64_t)result;
  getSiriTTSSpeechRequestClass[0] = (uint64_t (*)())SiriTTSSpeechRequestFunction;
  return result;
}

void *__SiriTTSServiceLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/SiriTTSService.framework/SiriTTSService", 2);
  SiriTTSServiceLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  if (VoiceServicesLibrary_sOnce != -1) {
    dispatch_once(&VoiceServicesLibrary_sOnce, &__block_literal_global_113);
  }
  softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences = (uint64_t (*)())dlsym((void *)VoiceServicesLibrary_sLib, "VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences");
  return softLinkVSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences();
}

void *__VoiceServicesLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices", 2);
  VoiceServicesLibrary_sLib = (uint64_t)result;
  return result;
}

id EasyConfigKey_ReasonErrorFunction()
{
  return (id)constantValEasyConfigKey_ReasonError;
}

id initValEasyConfigKey_ReasonError()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9366);
  }
  os_log_t v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_ReasonError");
  if (v0) {
    objc_storeStrong((id *)&constantValEasyConfigKey_ReasonError, *v0);
  }
  getEasyConfigKey_ReasonError[0] = (uint64_t (*)())EasyConfigKey_ReasonErrorFunction;
  return (id)constantValEasyConfigKey_ReasonError;
}

void *__EasyConfigLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/EasyConfig.framework/EasyConfig", 2);
  EasyConfigLibrary_sLib = (uint64_t)result;
  return result;
}

id EasyConfigKey_DeviceIDFunction()
{
  return (id)constantValEasyConfigKey_DeviceID;
}

id initValEasyConfigKey_DeviceID()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9366);
  }
  os_log_t v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_DeviceID");
  if (v0) {
    objc_storeStrong((id *)&constantValEasyConfigKey_DeviceID, *v0);
  }
  getEasyConfigKey_DeviceID[0] = (uint64_t (*)())EasyConfigKey_DeviceIDFunction;
  return (id)constantValEasyConfigKey_DeviceID;
}

id EasyConfigKey_FlagsFunction()
{
  return (id)constantValEasyConfigKey_Flags;
}

id initValEasyConfigKey_Flags()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9366);
  }
  os_log_t v0 = (id *)dlsym((void *)EasyConfigLibrary_sLib, "EasyConfigKey_Flags");
  if (v0) {
    objc_storeStrong((id *)&constantValEasyConfigKey_Flags, *v0);
  }
  getEasyConfigKey_Flags[0] = (uint64_t (*)())EasyConfigKey_FlagsFunction;
  return (id)constantValEasyConfigKey_Flags;
}

id EasyConfigDeviceFunction()
{
  return (id)classEasyConfigDevice;
}

Class initEasyConfigDevice()
{
  if (EasyConfigLibrary_sOnce != -1) {
    dispatch_once(&EasyConfigLibrary_sOnce, &__block_literal_global_9366);
  }
  Class result = objc_getClass("EasyConfigDevice");
  classEasyConfigDevice = (uint64_t)result;
  getEasyConfigDeviceClass[0] = (uint64_t (*)())EasyConfigDeviceFunction;
  return result;
}

void sub_186AD91E8(_Unwind_Exception *a1)
{
}

void sub_186AD94BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_186ADA494( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void _wifiCriticalCallback(uint64_t a1, char a2, void *a3)
{
  id v4 = a3;
  id v5 = (dispatch_queue_s *)v4[19];
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = ___wifiCriticalCallback_block_invoke;
  v7[3] = &unk_189F32F88;
  id v8 = v4;
  char v9 = a2;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void _wifiDeviceAttached(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  id v4 = (dispatch_queue_s *)v3[19];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___wifiDeviceAttached_block_invoke;
  block[3] = &unk_189F34238;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void _wifiRestartedCallback(uint64_t a1, void *a2)
{
  uint64_t v2 = (dispatch_queue_s *)a2[19];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___wifiRestartedCallback_block_invoke;
  block[3] = &unk_189F34238;
  void block[4] = a2;
  uint64_t v3 = a2;
  dispatch_async(v2, block);
}

void _wifiDeviceDetached(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (dispatch_queue_s *)v2[19];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___wifiDeviceDetached_block_invoke;
  block[3] = &unk_189F34238;
  id v6 = v2;
  id v4 = v2;
  dispatch_async(v3, block);
}

void _wifiAutoJoinNotification(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = (dispatch_queue_s *)v4[19];
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  void v9[2] = ___wifiAutoJoinNotification_block_invoke;
  _DWORD v9[3] = &unk_189F33088;
  id v10 = v4;
  id v11 = v5;
  id v7 = v5;
  id v8 = v4;
  dispatch_async(v6, v9);
}

void _wifiHostAPStateChangedCallback(uint64_t a1, void *a2, void *a3)
{
  id v4 = (dispatch_queue_s *)a3[19];
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = ___wifiHostAPStateChangedCallback_block_invoke;
  v7[3] = &unk_189F33088;
  void v7[4] = a3;
  v7[5] = a2;
  id v5 = a2;
  id v6 = a3;
  dispatch_async(v4, v7);
}

void _wifiPowerCallback(uint64_t a1, void *a2)
{
  char Power = WiFiDeviceClientGetPower();
  id v4 = (dispatch_queue_s *)a2[19];
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 3221225472LL;
  v6[2] = ___wifiPowerCallback_block_invoke;
  v6[3] = &unk_189F32F88;
  int8x16_t v6[4] = a2;
  char v7 = Power;
  id v5 = a2;
  dispatch_async(v4, v6);
}

uint64_t ___wifiPowerCallback_block_invoke( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    uint64_t v9 = result;
    id v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 != -1)
      {
LABEL_4:
        if (*(_BYTE *)(v9 + 40)) {
          id v11 = "yes";
        }
        else {
          id v11 = "no";
        }
        LogPrintF( (uint64_t)v10,  (uint64_t)"void _wifiPowerCallback(WiFiDeviceClientRef, void *)_block_invoke",  0x1Eu,  (uint64_t)"WiFi power changed: %s",  a5,  a6,  a7,  a8,  (char)v11);
        uint64_t v8 = *(void *)(v9 + 32);
        return [(id)v8 _wifiStateChanged];
      }

      BOOL v12 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
      uint64_t v8 = *(void *)(v9 + 32);
      if (v12)
      {
        id v10 = *(int **)(v8 + 16);
        goto LABEL_4;
      }
    }

    return [(id)v8 _wifiStateChanged];
  }

  return result;
}

uint64_t ___wifiHostAPStateChangedCallback_block_invoke(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 48LL))
  {
    uint64_t v1 = result;
    unint64_t Int64 = CFDictionaryGetInt64(*(const __CFDictionary **)(result + 40), @"HostApEnabled", 0LL);
    char v7 = *(void **)(v1 + 32);
    uint64_t v8 = (int *)v7[2];
    if (*v8 <= 30)
    {
      if (*v8 != -1)
      {
LABEL_4:
        uint64_t v9 = "yes";
        if (!Int64) {
          uint64_t v9 = "no";
        }
        LogPrintF( (uint64_t)v8,  (uint64_t)"void _wifiHostAPStateChangedCallback(WiFiDeviceClientRef, CFDictionaryRef, void *)_block_invoke",  0x1Eu,  (uint64_t)"WiFi HostAP state changed: HostAP %s\n",  v2,  v3,  v4,  v5,  (char)v9);
        char v7 = *(void **)(v1 + 32);
        return [v7 _update];
      }

      BOOL v10 = _LogCategory_Initialize((uint64_t)v8, 0x1Eu);
      char v7 = *(void **)(v1 + 32);
      if (v10)
      {
        uint64_t v8 = (int *)v7[2];
        goto LABEL_4;
      }
    }

    return [v7 _update];
  }

  return result;
}

_BYTE *___wifiAutoJoinNotification_block_invoke(uint64_t a1)
{
  Class result = *(_BYTE **)(a1 + 32);
  if (!result[10]) {
    return (_BYTE *)[result _wifiAutoJoinNotification:*(void *)(a1 + 40)];
  }
  return result;
}

uint64_t ___wifiDeviceDetached_block_invoke( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    uint64_t v9 = result;
    BOOL v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 == -1)
      {
        BOOL v11 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
        uint64_t v8 = *(void *)(v9 + 32);
        if (!v11) {
          goto LABEL_6;
        }
        BOOL v10 = *(int **)(v8 + 16);
      }

      LogPrintF( (uint64_t)v10,  (uint64_t)"void _wifiDeviceDetached(WiFiDeviceClientRef, void *)_block_invoke",  0x1Eu,  (uint64_t)"WiFi Device Detached\n",  a5,  a6,  a7,  a8,  v12);
      uint64_t v8 = *(void *)(v9 + 32);
    }

uint64_t ___wifiRestartedCallback_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!*(void *)(result + 48)) {
    return result;
  }
  BOOL v10 = *(int **)(result + 16);
  if (*v10 <= 60)
  {
    if (*v10 == -1)
    {
      BOOL v11 = _LogCategory_Initialize(*(void *)(result + 16), 0x3Cu);
      uint64_t result = *(void *)(a1 + 32);
      if (!v11) {
        goto LABEL_6;
      }
      BOOL v10 = *(int **)(result + 16);
    }

    LogPrintF( (uint64_t)v10,  (uint64_t)"void _wifiRestartedCallback(WiFiManagerClientRef, void *)_block_invoke",  0x3Cu,  (uint64_t)"### WiFi crashed...retrying\n",  a5,  a6,  a7,  a8,  v13);
    uint64_t result = *(void *)(a1 + 32);
  }

uint64_t ___wifiDeviceAttached_block_invoke( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    uint64_t v9 = result;
    BOOL v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 == -1)
      {
        BOOL v11 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
        uint64_t v8 = *(void *)(v9 + 32);
        if (!v11) {
          return [(id)v8 _update];
        }
        BOOL v10 = *(int **)(v8 + 16);
      }

      LogPrintF( (uint64_t)v10,  (uint64_t)"void _wifiDeviceAttached(WiFiManagerClientRef, WiFiDeviceClientRef, void *)_block_invoke",  0x1Eu,  (uint64_t)"WiFi Device Attached\n",  a5,  a6,  a7,  a8,  v12);
      uint64_t v8 = *(void *)(v9 + 32);
    }

    return [(id)v8 _update];
  }

  return result;
}

uint64_t ___wifiCriticalCallback_block_invoke( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  if (!*(_BYTE *)(v8 + 10))
  {
    uint64_t v9 = result;
    BOOL v10 = *(int **)(v8 + 16);
    if (*v10 <= 30)
    {
      if (*v10 != -1)
      {
LABEL_4:
        if (*(_BYTE *)(v8 + 42)) {
          BOOL v11 = "yes";
        }
        else {
          BOOL v11 = "no";
        }
        LogPrintF( (uint64_t)v10,  (uint64_t)"void _wifiCriticalCallback(WiFiDeviceClientRef, _Bool, void *)_block_invoke",  0x1Eu,  (uint64_t)"WiFi critical changed: %s -> %s\n",  a5,  a6,  a7,  a8,  (char)v11);
        uint64_t v8 = *(void *)(v9 + 32);
        goto LABEL_9;
      }

      BOOL v12 = _LogCategory_Initialize((uint64_t)v10, 0x1Eu);
      uint64_t v8 = *(void *)(v9 + 32);
      if (v12)
      {
        BOOL v10 = *(int **)(v8 + 16);
        goto LABEL_4;
      }
    }

id AWDLTrafficRegistrationServiceAirPlayFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceAirPlay;
}

id initValAWDLTrafficRegistrationServiceAirPlay()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceAirPlay");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceAirPlay, *v0);
  }
  getAWDLTrafficRegistrationServiceAirPlay[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceAirPlayFunction;
  return (id)constantValAWDLTrafficRegistrationServiceAirPlay;
}

id AWDLTrafficRegistrationServiceSidecarFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceSidecar;
}

id initValAWDLTrafficRegistrationServiceSidecar()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceSidecar");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceSidecar, *v0);
  }
  getAWDLTrafficRegistrationServiceSidecar[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceSidecarFunction;
  return (id)constantValAWDLTrafficRegistrationServiceSidecar;
}

id AWDLTrafficRegistrationServiceDeviceToDeviceMigrationFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration;
}

id initValAWDLTrafficRegistrationServiceDeviceToDeviceMigration()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceDeviceToDeviceMigration");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration, *v0);
  }
  getAWDLTrafficRegistrationServiceDeviceToDeviceMigration[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceDeviceToDeviceMigrationFunction;
  return (id)constantValAWDLTrafficRegistrationServiceDeviceToDeviceMigration;
}

id AWDLTrafficRegistrationServiceUniversalControlFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceUniversalControl;
}

id initValAWDLTrafficRegistrationServiceUniversalControl()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceUniversalControl");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceUniversalControl, *v0);
  }
  getAWDLTrafficRegistrationServiceUniversalControl[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceUniversalControlFunction;
  return (id)constantValAWDLTrafficRegistrationServiceUniversalControl;
}

id AWDLTrafficRegistrationServiceMPRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceMPRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceMPRemoteCamera()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceMPRemoteCamera");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceMPRemoteCamera, *v0);
  }
  getAWDLTrafficRegistrationServiceMPRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceMPRemoteCameraFunction;
  return (id)constantValAWDLTrafficRegistrationServiceMPRemoteCamera;
}

id AWDLTrafficRegistrationServiceRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceRemoteCamera()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceRemoteCamera");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceRemoteCamera, *v0);
  }
  getAWDLTrafficRegistrationServiceRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceRemoteCameraFunction;
  return (id)constantValAWDLTrafficRegistrationServiceRemoteCamera;
}

id AWDLTrafficRegistrationServiceTVRemoteCameraFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceTVRemoteCamera;
}

id initValAWDLTrafficRegistrationServiceTVRemoteCamera()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceTVRemoteCamera");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceTVRemoteCamera, *v0);
  }
  getAWDLTrafficRegistrationServiceTVRemoteCamera[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceTVRemoteCameraFunction;
  return (id)constantValAWDLTrafficRegistrationServiceTVRemoteCamera;
}

id AWDLTrafficRegistrationServiceRemoteScreenFunction()
{
  return (id)constantValAWDLTrafficRegistrationServiceRemoteScreen;
}

id initValAWDLTrafficRegistrationServiceRemoteScreen()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  os_log_t v0 = (id *)dlsym((void *)WiFiPeerToPeerLibrary_sLib_9612, "AWDLTrafficRegistrationServiceRemoteScreen");
  if (v0) {
    objc_storeStrong((id *)&constantValAWDLTrafficRegistrationServiceRemoteScreen, *v0);
  }
  getAWDLTrafficRegistrationServiceRemoteScreen[0] = (uint64_t (*)())AWDLTrafficRegistrationServiceRemoteScreenFunction;
  return (id)constantValAWDLTrafficRegistrationServiceRemoteScreen;
}

void *__WiFiPeerToPeerLibrary_block_invoke_9614()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/WiFiPeerToPeer.framework/WiFiPeerToPeer", 2);
  WiFiPeerToPeerLibrary_sLib_9612 = (uint64_t)result;
  return result;
}

id WiFiP2PAWDLStateMonitorFunction()
{
  return (id)classWiFiP2PAWDLStateMonitor;
}

Class initWiFiP2PAWDLStateMonitor()
{
  if (WiFiPeerToPeerLibrary_sOnce_9610 != -1) {
    dispatch_once(&WiFiPeerToPeerLibrary_sOnce_9610, &__block_literal_global_9611);
  }
  Class result = objc_getClass("WiFiP2PAWDLStateMonitor");
  classWiFiP2PAWDLStateMonitor = (uint64_t)result;
  getWiFiP2PAWDLStateMonitorClass = (uint64_t (*)())WiFiP2PAWDLStateMonitorFunction;
  return result;
}

LABEL_105:
      break;
    }
  }

  __int128 v80 = (unint64_t)v5;
  while ((unint64_t)a4 > v80)
  {
    unsigned __int128 v81 = *(unsigned __int8 *)(v80 + 1);
    uint64_t v82 = *(unsigned __int8 *)v80;
    v80 += 2 + v81;
    if (v82 == 4)
    {
      if ((_DWORD)v81 != 3) {
        break;
      }
      objc_msgSend(MEMORY[0x189603F48], "dataWithBytes:length:");
      __int128 v83 = (void *)objc_claimAutoreleasedReturnValue();
      deviceIDOUI = self->_deviceIDOUI;
      unsigned __int128 v85 = v83;
      uint64_t v86 = deviceIDOUI;
      if (v85 == v86)
      {

        uint64_t v89 = v85;
      }

      else
      {
        uint64_t v87 = v86;
        if ((v85 == 0LL) != (v86 != 0LL))
        {
          __int128 v88 = -[NSData isEqual:](v85, "isEqual:", v86);

          if ((v88 & 1) != 0) {
            goto LABEL_120;
          }
        }

        else
        {
        }

        uint64_t v90 = v85;
        uint64_t v89 = self->_deviceIDOUI;
        self->_deviceIDOUI = v90;
        uint64_t v8 = 1;
      }

LABEL_120:
      break;
    }
  }

  while (a4 > (const char *)v5)
  {
    uint64_t v91 = v5[1];
    uint64_t v92 = *v5;
    v5 += v91 + 2;
    if (v92 == 9)
    {
      if ((_DWORD)v91 != 4) {
        return v8;
      }
      objc_msgSend(MEMORY[0x189603F48], "dataWithBytes:length:");
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue();
      deviceIDSetupHash = self->_deviceIDSetupHash;
      uint64_t v95 = v93;
      uint64_t v96 = deviceIDSetupHash;
      if (v95 == v96)
      {

        uint64_t v99 = v95;
      }

      else
      {
        uint64_t v97 = v96;
        if ((v95 == 0LL) != (v96 != 0LL))
        {
          __int128 v98 = -[NSData isEqual:](v95, "isEqual:", v96);

          if ((v98 & 1) != 0) {
            goto LABEL_134;
          }
        }

        else
        {
        }

        unsigned __int128 v100 = v95;
        uint64_t v99 = self->_deviceIDSetupHash;
        self->_deviceIDSetupHash = v100;
        uint64_t v8 = 1;
      }

LABEL_134:
      return v8;
    }
  }

  return v8;
}

            if (v42 == -6753) {
              goto LABEL_130;
            }
            uint64_t v73 = (int *)*((void *)cf + 12);
            if (*v73 > 50) {
              goto LABEL_130;
            }
            if (*v73 != -1) {
              goto LABEL_108;
            }
            if (_LogCategory_Initialize((uint64_t)v73, 0x32u))
            {
              uint64_t v73 = (int *)*((void *)cf + 12);
LABEL_108:
              LogPrintF( (uint64_t)v73,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"### Error on wait for close: %#m\n",  a5,  a6,  a7,  a8,  v42);
            }

            if (v24 != v27 && *v24 != 35) {
              goto LABEL_20;
            }
            v4[9] = v38;
            uint64_t v45 = v24 >= v27 ? v24 : v24 + 1;
            if (v45 >= v27)
            {
              uint64_t v46 = 0;
            }

            else
            {
              uint64_t v46 = 0;
              do
              {
                uint64_t v47 = *v45;
                uint64_t v46 = (char)v47 + 10 * v46 - 48;
                ++v45;
              }

              while (v45 < v27);
            }

            if (v45 != v27) {
              goto LABEL_20;
            }
            *((_DWORD *)v4 + 20) = v46;
            goto LABEL_138;
          }

          if (j < 2)
          {
            LODWORD(v25) = 0;
            uint64_t v30 = 1LL;
            uint64_t v31 = v22 + 1;
          }

          else
          {
            if (*v24 != 35)
            {
              unint64_t v48 = 2LL;
              while (1)
              {
                uint64_t v30 = v48;
                if (!v25) {
                  break;
                }
                uint64_t v31 = &v22[v48];
                uint64_t v49 = v22[v48++];
                --v25;
                if (v49 == 35)
                {
                  LODWORD(v25) = v30 < j;
                  goto LABEL_89;
                }
              }

              uint64_t v31 = &v22[v48];
              goto LABEL_123;
            }

            uint64_t v30 = 1LL;
            uint64_t v31 = v22 + 1;
            LODWORD(v25) = 1;
          }

  CFIndex Bytes = 0;
  uint64_t v26 = 1;
LABEL_35:
  *a6 = v26;
  if (v68)
  {
    free(v68);
    unint64_t v68 = 0LL;
  }

  if (__src)
  {
    free(__src);
    __src = 0LL;
  }

  if (v25) {
    free(v25);
  }
  uint64_t v29 = Bytes;
  if (Bytes)
  {
    uint64_t v30 = *(int **)(a1 + 16);
    uint64_t v31 = *v30;
    if (*v30 <= 50)
    {
      if (v31 == -1)
      {
        uint64_t v33 = _LogCategory_Initialize(*(void *)(a1 + 16), 0x32u);
        uint64_t v29 = Bytes;
        if (!v33) {
          return v29;
        }
        uint64_t v30 = *(int **)(a1 + 16);
        uint64_t v31 = *v30;
      }

      uint64_t v32 = *(_BYTE *)(a1 + 120);
      if (v31 == -1) {
        _LogCategory_Initialize((uint64_t)v30, 0x28u);
      }
      LogPrintF( (uint64_t)v30,  (uint64_t)"OSStatus _ResumePairingServerExchange(PairingSessionRef, const void *, size_t, uint8_t **, size_t *, Boolean *)",  0x32u,  (uint64_t)"### Pair-resume server state %d failed: %#m\n%?{end}%1{tlv8}\n",  a5,  (uint64_t)a6,  a7,  a8,  v32);
      return Bytes;
    }
  }

  return v29;
}

uint64_t CUXPCDecodeBool(void *a1, const char *a2, BOOL *a3, void *a4)
{
  id v7 = a1;
  BOOL v8 = xpc_dictionary_get_BOOL(v7, a2);
  BOOL v9 = v8;
  if (v8)
  {
    *a3 = v8;
LABEL_7:
    uint64_t v12 = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = xpc_dictionary_get_value(v7, a2);
  BOOL v11 = (void *)v10;
  if (!v10)
  {
LABEL_6:

    goto LABEL_7;
  }

  if (MEMORY[0x186E43C98](v10) == MEMORY[0x1895F9228])
  {
    *a3 = v9;
    goto LABEL_6;
  }

  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  uint64_t v12 = 0LL;
LABEL_8:

  return v12;
}

uint64_t CUXPCDecodeDouble(void *a1, const char *a2, double *a3)
{
  id v5 = a1;
  *a3 = xpc_dictionary_get_double(v5, a2);

  return 1LL;
}

BOOL CUXPCDecodeSInt64Ranged( void *a1, const char *a2, int64_t a3, int64_t a4, int64_t *a5, void *a6)
{
  return CUXPCDecodeSInt64RangedEx(a1, a2, a3, a4, a5, a6) != 5;
}

uint64_t CUXPCDecodeSInt64RangedEx( void *a1, const char *a2, int64_t a3, int64_t a4, int64_t *a5, void *a6)
{
  uint64_t v10 = xpc_dictionary_get_value(a1, a2);
  BOOL v11 = (void *)v10;
  if (!v10)
  {
    uint64_t v15 = 2LL;
    goto LABEL_14;
  }

  uint64_t v12 = MEMORY[0x186E43C98](v10);
  if (v12 == MEMORY[0x1895F9280])
  {
    int64_t value = xpc_int64_get_value(v11);
    goto LABEL_11;
  }

  if (v12 == MEMORY[0x1895F92F0])
  {
    int64_t value = xpc_uint64_get_value(v11);
LABEL_11:
    if (value >= a3 && value <= a4)
    {
      *a5 = value;
      uint64_t v15 = 6LL;
      goto LABEL_14;
    }

    if (!a6) {
      goto LABEL_7;
    }
    char v13 = (void *)*MEMORY[0x189607670];
    uint64_t v14 = 4294960586LL;
    goto LABEL_6;
  }

  if (a6)
  {
    char v13 = (void *)*MEMORY[0x189607670];
    uint64_t v14 = 4294960540LL;
LABEL_6:
    NSErrorF_safe(v13, (const char *)v14);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }

BOOL CUXPCDecodeUInt64Ranged(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  return CUXPCDecodeUInt64RangedEx(a1, a2, a3, a4, a5, a6) != 5;
}

uint64_t CUXPCDecodeUInt64RangedEx( void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v10 = xpc_dictionary_get_value(a1, a2);
  BOOL v11 = (void *)v10;
  if (!v10)
  {
    uint64_t v15 = 2LL;
    goto LABEL_14;
  }

  uint64_t v12 = MEMORY[0x186E43C98](v10);
  if (v12 == MEMORY[0x1895F92F0])
  {
    uint64_t value = xpc_uint64_get_value(v11);
    goto LABEL_11;
  }

  if (v12 == MEMORY[0x1895F9280])
  {
    uint64_t value = xpc_int64_get_value(v11);
LABEL_11:
    if (value >= a3 && value <= a4)
    {
      *a5 = value;
      uint64_t v15 = 6LL;
      goto LABEL_14;
    }

    if (!a6) {
      goto LABEL_7;
    }
    char v13 = (void *)*MEMORY[0x189607670];
    uint64_t v14 = 4294960586LL;
    goto LABEL_6;
  }

  if (a6)
  {
    char v13 = (void *)*MEMORY[0x189607670];
    uint64_t v14 = 4294960540LL;
LABEL_6:
    NSErrorF_safe(v13, (const char *)v14);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }

uint64_t CUXPCDecodeNSArrayOfClass(void *a1, const char *a2, uint64_t a3, id *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = xpc_dictionary_get_value(v9, a2);
  BOOL v11 = (void *)v10;
  if (!v10) {
    goto LABEL_9;
  }
  if (MEMORY[0x186E43C98](v10) == MEMORY[0x1895F9220])
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000LL;
    char v20 = __Block_byref_object_copy__10112;
    id v21 = __Block_byref_object_dispose__10113;
    id v22 = 0LL;
    id v13 = objc_alloc_init(MEMORY[0x189603FA8]);
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 3221225472LL;
    applier[2] = __CUXPCDecodeNSArrayOfClass_block_invoke;
    applier[3] = &unk_189F330B0;
    applier[6] = a2;
    applier[7] = a3;
    applier[4] = v13;
    applier[5] = &v17;
    xpc_array_apply(v11, applier);
    uint64_t v14 = (void *)v18[5];
    if (v14)
    {
      if (a5) {
        *a5 = v14;
      }
    }

    else
    {
      objc_storeStrong(a4, v13);
    }

    _Block_object_dispose(&v17, 8);
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v12 = 1LL;
    goto LABEL_10;
  }

  if (!a5)
  {
LABEL_8:
    uint64_t v12 = 0LL;
    goto LABEL_10;
  }

  NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
  uint64_t v12 = 0LL;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v12;
}

void sub_186AE01D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __Block_byref_object_copy__10112(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__10113(uint64_t a1)
{
}

BOOL __CUXPCDecodeNSArrayOfClass_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (MEMORY[0x186E43C98]() == MEMORY[0x1895F9250])
  {
    id v5 = objc_alloc(*(Class *)(a1 + 56));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id obj = *(id *)(v6 + 40);
    id v7 = (void *)[v5 initWithXPCObject:v4 error:&obj];
    objc_storeStrong((id *)(v6 + 40), obj);
    BOOL v8 = v7 != 0LL;
    if (v7) {
      [*(id *)(a1 + 32) addObject:v7];
    }
  }

  else
  {
    uint64_t v10 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    BOOL v8 = 0LL;
  }

  return v8;
}

uint64_t CUXPCDecodeNSArrayOfNSData(void *a1, const char *a2, uint64_t a3, uint64_t a4, id *a5, void *a6)
{
  id v11 = a1;
  uint64_t v12 = xpc_dictionary_get_value(v11, a2);
  id v13 = (void *)v12;
  if (!v12) {
    goto LABEL_9;
  }
  if (MEMORY[0x186E43C98](v12) == MEMORY[0x1895F9220])
  {
    uint64_t v19 = 0LL;
    char v20 = &v19;
    uint64_t v21 = 0x3032000000LL;
    id v22 = __Block_byref_object_copy__10112;
    id v23 = __Block_byref_object_dispose__10113;
    id v24 = 0LL;
    id v15 = objc_alloc_init(MEMORY[0x189603FA8]);
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 3221225472LL;
    applier[2] = __CUXPCDecodeNSArrayOfNSData_block_invoke;
    applier[3] = &unk_189F330D8;
    applier[6] = a2;
    applier[7] = a3;
    void applier[8] = a4;
    applier[4] = v15;
    applier[5] = &v19;
    xpc_array_apply(v13, applier);
    uint64_t v16 = (void *)v20[5];
    if (v16)
    {
      if (a6) {
        *a6 = v16;
      }
    }

    else
    {
      objc_storeStrong(a5, v15);
    }

    _Block_object_dispose(&v19, 8);
    if (v16) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v14 = 1LL;
    goto LABEL_10;
  }

  if (!a6)
  {
LABEL_8:
    uint64_t v14 = 0LL;
    goto LABEL_10;
  }

  NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
  uint64_t v14 = 0LL;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v14;
}

void sub_186AE048C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __CUXPCDecodeNSArrayOfNSData_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (MEMORY[0x186E43C98]() != MEMORY[0x1895F9240])
  {
    id v9 = (void *)*MEMORY[0x189607670];
    uint64_t v10 = 4294960540LL;
LABEL_8:
    uint64_t v11 = NSErrorF_safe(v9, (const char *)v10);
    uint64_t v7 = 0LL;
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
    goto LABEL_5;
  }

  size_t length = xpc_data_get_length(v4);
  if (length < *(void *)(a1 + 56) || length > *(void *)(a1 + 64))
  {
    id v9 = (void *)*MEMORY[0x189607670];
    uint64_t v10 = 4294960553LL;
    goto LABEL_8;
  }

  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytes:xpc_data_get_bytes_ptr(v4) length:length];
  [*(id *)(a1 + 32) addObject:v6];
  uint64_t v7 = 1LL;
LABEL_5:

  return v7;
}

uint64_t CUXPCDecodeNSArrayOfNSString(void *a1, const char *a2, id *a3, void *a4)
{
  id v7 = a1;
  uint64_t v8 = xpc_dictionary_get_value(v7, a2);
  id v9 = (void *)v8;
  if (!v8) {
    goto LABEL_9;
  }
  if (MEMORY[0x186E43C98](v8) == MEMORY[0x1895F9220])
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x3032000000LL;
    uint64_t v18 = __Block_byref_object_copy__10112;
    uint64_t v19 = __Block_byref_object_dispose__10113;
    id v20 = 0LL;
    id v11 = objc_alloc_init(MEMORY[0x189603FA8]);
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 3221225472LL;
    applier[2] = __CUXPCDecodeNSArrayOfNSString_block_invoke;
    applier[3] = &unk_189F33100;
    applier[5] = &v15;
    applier[6] = a2;
    applier[4] = v11;
    xpc_array_apply(v9, applier);
    uint64_t v12 = (void *)v16[5];
    if (v12)
    {
      if (a4) {
        *a4 = v12;
      }
    }

    else
    {
      objc_storeStrong(a3, v11);
    }

    _Block_object_dispose(&v15, 8);
    if (v12) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v10 = 1LL;
    goto LABEL_10;
  }

  if (!a4)
  {
LABEL_8:
    uint64_t v10 = 0LL;
    goto LABEL_10;
  }

  NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
  uint64_t v10 = 0LL;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v10;
}

void sub_186AE0744( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __CUXPCDecodeNSArrayOfNSString_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (MEMORY[0x186E43C98]() != MEMORY[0x1895F92E8])
  {
    id v9 = (void *)*MEMORY[0x189607670];
LABEL_8:
    uint64_t v10 = NSErrorF_safe(v9, (const char *)0xFFFFE59CLL);
    uint64_t v7 = 0LL;
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    goto LABEL_5;
  }

  string_ptr = xpc_string_get_string_ptr(v4);
  if (!string_ptr)
  {
    id v9 = (void *)*MEMORY[0x189607670];
    goto LABEL_8;
  }

  uint64_t v6 = (void *)[objc_alloc(NSString) initWithUTF8String:string_ptr];
  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v12 = NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v7 = 0LL;
  }

uint64_t CUXPCDecodeNSArrayOfInteger(void *a1, const char *a2, uint64_t a3, uint64_t a4, id *a5, void *a6)
{
  id v11 = a1;
  uint64_t v12 = xpc_dictionary_get_value(v11, a2);
  uint64_t v13 = (void *)v12;
  if (!v12) {
    goto LABEL_9;
  }
  if (MEMORY[0x186E43C98](v12) == MEMORY[0x1895F9220])
  {
    uint64_t v19 = 0LL;
    id v20 = &v19;
    uint64_t v21 = 0x3032000000LL;
    id v22 = __Block_byref_object_copy__10112;
    id v23 = __Block_byref_object_dispose__10113;
    id v24 = 0LL;
    id v15 = objc_alloc_init(MEMORY[0x189603FA8]);
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 3221225472LL;
    applier[2] = __CUXPCDecodeNSArrayOfInteger_block_invoke;
    applier[3] = &unk_189F330D8;
    applier[6] = a2;
    void applier[7] = a3;
    void applier[8] = a4;
    applier[4] = v15;
    applier[5] = &v19;
    xpc_array_apply(v13, applier);
    uint64_t v16 = (void *)v20[5];
    if (v16)
    {
      if (a6) {
        *a6 = v16;
      }
    }

    else
    {
      objc_storeStrong(a5, v15);
    }

    _Block_object_dispose(&v19, 8);
    if (v16) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v14 = 1LL;
    goto LABEL_10;
  }

  if (!a6)
  {
LABEL_8:
    uint64_t v14 = 0LL;
    goto LABEL_10;
  }

  NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
  uint64_t v14 = 0LL;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

  return v14;
}

void sub_186AE0A30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __CUXPCDecodeNSArrayOfInteger_block_invoke(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = MEMORY[0x186E43C98]();
  if (v5 == MEMORY[0x1895F9280])
  {
    int64_t value = xpc_int64_get_value(v4);
  }

  else
  {
    if (v5 != MEMORY[0x1895F92F0])
    {
      uint64_t v6 = (void *)*MEMORY[0x189607670];
      uint64_t v7 = 4294960540LL;
      goto LABEL_4;
    }

    int64_t value = xpc_uint64_get_value(v4);
  }

  if (value >= a1[7] && value <= a1[8])
  {
    uint64_t v14 = (void *)a1[4];
    [MEMORY[0x189607968] numberWithLongLong:value];
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v14 addObject:v11];
    uint64_t v9 = 1LL;
    goto LABEL_13;
  }

  uint64_t v6 = (void *)*MEMORY[0x189607670];
  uint64_t v7 = 4294960586LL;
LABEL_4:
  uint64_t v8 = NSErrorF_safe(v6, (const char *)v7);
  uint64_t v9 = 0LL;
  uint64_t v10 = *(void *)(a1[5] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v8;
LABEL_13:

  return v9;
}

uint64_t CUXPCDecodeNSData(void *a1, const char *a2, void **a3, void *a4)
{
  id v7 = a1;
  size_t length = 0LL;
  data = xpc_dictionary_get_data(v7, a2, &length);
  if (data)
  {
    uint64_t v9 = data;
    id v10 = objc_alloc(MEMORY[0x189603F48]);
    uint64_t v11 = [v10 initWithBytes:v9 length:length];
    uint64_t v12 = *a3;
    *a3 = (void *)v11;
LABEL_6:
    uint64_t v16 = 1LL;
    goto LABEL_7;
  }

  uint64_t v13 = xpc_dictionary_get_value(v7, a2);
  uint64_t v12 = (void *)v13;
  if (!v13) {
    goto LABEL_6;
  }
  if (MEMORY[0x186E43C98](v13) == MEMORY[0x1895F9240])
  {
    uint64_t v14 = [MEMORY[0x189603F48] data];
    id v15 = *a3;
    *a3 = (void *)v14;

    goto LABEL_6;
  }

  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
    uint64_t v16 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v16 = 0LL;
  }

uint64_t CUXPCDecodeNSDataOfLength(void *a1, const char *a2, uint64_t a3, void **a4, void *a5)
{
  id v9 = a1;
  size_t length = 0LL;
  data = xpc_dictionary_get_data(v9, a2, &length);
  if (!data)
  {
    uint64_t v15 = xpc_dictionary_get_value(v9, a2);
    uint64_t v16 = (void *)v15;
    if (!v15)
    {
LABEL_8:

      goto LABEL_9;
    }

    if (MEMORY[0x186E43C98](v15) == MEMORY[0x1895F9240])
    {
      if (!a3)
      {
        uint64_t v17 = [MEMORY[0x189603F48] data];
        uint64_t v18 = *a4;
        *a4 = (void *)v17;

        goto LABEL_8;
      }

      if (a5)
      {
        uint64_t v21 = (void *)*MEMORY[0x189607670];
        uint64_t v22 = 4294960553LL;
        goto LABEL_17;
      }
    }

    else if (a5)
    {
      uint64_t v21 = (void *)*MEMORY[0x189607670];
      uint64_t v22 = 4294960540LL;
LABEL_17:
      NSErrorF_safe(v21, (const char *)v22);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_19;
  }

  if (length != a3)
  {
    if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE5A9LL);
      uint64_t v19 = 0LL;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }

uint64_t CUXPCDecodeNSString(void *a1, const char *a2, void **a3, void *a4)
{
  id v7 = a1;
  string = xpc_dictionary_get_string(v7, a2);
  if (string)
  {
    uint64_t v9 = [objc_alloc(NSString) initWithUTF8String:string];
    id v10 = *a3;
    *a3 = (void *)v9;
LABEL_5:
    uint64_t v12 = 1LL;
    goto LABEL_6;
  }

  uint64_t v11 = xpc_dictionary_get_value(v7, a2);
  id v10 = (void *)v11;
  if (!v11 || MEMORY[0x186E43C98](v11) == MEMORY[0x1895F92E8]) {
    goto LABEL_5;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
    uint64_t v12 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v12 = 0LL;
  }

uint64_t CUXPCDecodeNSUUID(void *a1, const char *a2, void **a3, void *a4)
{
  id v7 = a1;
  uuid = xpc_dictionary_get_uuid(v7, a2);
  if (uuid)
  {
    uint64_t v9 = [objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:uuid];
    id v10 = *a3;
    *a3 = (void *)v9;
LABEL_5:
    uint64_t v12 = 1LL;
    goto LABEL_6;
  }

  uint64_t v11 = xpc_dictionary_get_value(v7, a2);
  id v10 = (void *)v11;
  if (!v11 || MEMORY[0x186E43C98](v11) == MEMORY[0x1895F92F8]) {
    goto LABEL_5;
  }
  if (a4)
  {
    NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
    uint64_t v12 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v12 = 0LL;
  }

void CUXPCEncodeNSArrayOfObjects(void *a1, const char *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = xpc_array_create(0LL, 0LL);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        uint64_t v12 = 0LL;
        do
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * v12);
          xpc_object_t v14 = xpc_dictionary_create(0LL, 0LL, 0LL);
          objc_msgSend(v13, "encodeWithXPCObject:", v14, (void)v15);
          xpc_array_append_value(v7, v14);

          ++v12;
        }

        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }
}

void CUXPCEncodeNSArrayOfNSData(void *a1, const char *a2, void *a3, size_t a4, size_t a5)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a3;
  if (v10)
  {
    uint64_t v21 = a2;
    uint64_t v22 = v9;
    xpc_object_t v11 = xpc_array_create(0LL, 0LL);
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v12 = v10;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v14; ++i)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v12);
          }
          __int128 v17 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          size_t v18 = objc_msgSend(v17, "length", v21, v22, (void)v23);
          if (v18 >= a4 && v18 <= a5)
          {
            xpc_object_t v20 = xpc_data_create((const void *)[v17 bytes], v18);
            xpc_array_append_value(v11, v20);
          }
        }

        uint64_t v14 = [v12 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v14);
    }

    id v9 = v22;
    xpc_dictionary_set_value(v22, v21, v11);
  }
}

void CUXPCEncodeNSArrayOfNSNumber(void *a1, const char *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = xpc_array_create(0LL, 0LL);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0LL; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          if (CFNumberIsFloatType((CFNumberRef)v13))
          {
            [v13 doubleValue];
            xpc_array_set_double(v7, 0xFFFFFFFFFFFFFFFFLL, v14);
          }

          else
          {
            xpc_array_set_int64(v7, 0xFFFFFFFFFFFFFFFFLL, objc_msgSend(v13, "longLongValue", (void)v15));
          }
        }

        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }
}

void CUXPCEncodeNSArrayOfNSString(void *a1, const char *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    xpc_object_t v7 = xpc_array_create(0LL, 0LL);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v8 = v6;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        uint64_t v12 = 0LL;
        do
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(id *)(*((void *)&v14 + 1) + 8 * v12);
          xpc_array_set_string(v7, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v13, "UTF8String", (void)v14));
          ++v12;
        }

        while (v10 != v12);
        uint64_t v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }

    xpc_dictionary_set_value(v5, a2, v7);
  }
}

void CUXPCEncodeNSError( void *a1, void *a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  if (a1)
  {
    id v13 = a2;
    _CUXPCEncodeNSError(a1, a4, a5, a6, a7, 1u);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_set_value(v13, a3, v14);
  }

id _CUXPCEncodeNSError( void *a1, const char *a2, const char *a3, const char *a4, const char *a5, unsigned int a6)
{
  id v11 = a1;
  xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v12, a2, [v11 code]);
  [v11 domain];
  id v13 = (void *)objc_claimAutoreleasedReturnValue();
  id v14 = v13;
  if (v13)
  {
    if (([v13 isEqual:*MEMORY[0x189607670]] & 1) == 0)
    {
      __int128 v15 = (const char *)[v14 UTF8String];
      if (v15) {
        xpc_dictionary_set_string(v12, a3, v15);
      }
    }
  }

  [v11 userInfo];
  __int128 v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CFTypeID TypeID = CFStringGetTypeID();
  CFDictionaryGetTypedValue(v16, @"cuErrorMsg", TypeID, 0LL);
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v18 length])
  {
    uint64_t v19 = (const char *)[v18 UTF8String];
    if (v19) {
      xpc_dictionary_set_string(v12, a4, v19);
    }
  }

  if (a6 <= 3)
  {
    __int128 v26 = a5;
    uint64_t v20 = (const void *)*MEMORY[0x189607798];
    CFTypeID v21 = CFErrorGetTypeID();
    uint64_t v22 = CFDictionaryGetTypedValue(v16, v20, v21, 0LL);
    __int128 v23 = (void *)v22;
    if (v22)
    {
      _CUXPCEncodeNSError(v22, a2, a3, a4, v26, a6 + 1);
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24) {
        xpc_dictionary_set_value(v12, v26, v24);
      }
    }
  }

  return v12;
}

uint64_t CUXPCDecodeNSError( void *a1, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, void *a7, void *a8)
{
  uint64_t v14 = xpc_dictionary_get_value(a1, a2);
  __int128 v15 = (void *)v14;
  if (v14)
  {
    if (MEMORY[0x186E43C98](v14) == MEMORY[0x1895F9250])
    {
      uint64_t v16 = _CUXPCDecodeNSError(v15, a3, a4, a5, a6, 1u, 0, a7, a8);
    }

    else if (a8)
    {
      NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
      uint64_t v16 = 0LL;
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      uint64_t v16 = 0LL;
    }
  }

  else
  {
    uint64_t v16 = 1LL;
  }

  return v16;
}

uint64_t _CUXPCDecodeNSError( void *a1, const char *a2, const char *a3, const char *a4, const char *a5, unsigned int a6, int a7, void *a8, void *a9)
{
  id v15 = a1;
  int64_t int64 = xpc_dictionary_get_int64(v15, a2);
  if (!int64)
  {
    uint64_t v17 = xpc_dictionary_get_value(v15, a2);
    __int128 v18 = (void *)v17;
    if (v17)
    {
      if (MEMORY[0x186E43C98](v17) == MEMORY[0x1895F9280])
      {

        goto LABEL_5;
      }

      if (a9)
      {
        uint64_t v34 = (void *)*MEMORY[0x189607670];
        uint64_t v35 = 4294960540LL;
        goto LABEL_31;
      }
    }

    else
    {
      if (!a7)
      {
        uint64_t v21 = 1LL;
        goto LABEL_39;
      }

      if (a9)
      {
        uint64_t v34 = (void *)*MEMORY[0x189607670];
        uint64_t v35 = 4294960569LL;
LABEL_31:
        NSErrorF_safe(v34, (const char *)v35);
        uint64_t v21 = 0LL;
        *a9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

        goto LABEL_27;
      }
    }

    uint64_t v21 = 0LL;
    goto LABEL_39;
  }

id CUXPCDecodeNSErrorIfNeeded(void *a1)
{
  id v1 = a1;
  if (MEMORY[0x186E43C98]() == MEMORY[0x1895F9250])
  {
    id v10 = 0LL;
    id v11 = 0LL;
    CUXPCDecodeNSError(v1, "errO", "errC", "errD", "errM", "errO", &v11, &v10);
    id v4 = v11;
    id v5 = v10;
    id v6 = v5;
    if (v4) {
      xpc_object_t v7 = v4;
    }
    else {
      xpc_object_t v7 = v5;
    }
    id v8 = v7;
  }

  else
  {
    if (v1 == (id)MEMORY[0x1895F9198])
    {
      uint64_t v2 = (void *)*MEMORY[0x189607670];
      uint64_t v3 = 4294896154LL;
    }

    else
    {
      uint64_t v2 = (void *)*MEMORY[0x189607670];
      if (v1 == (id)MEMORY[0x1895F91A0]) {
        uint64_t v3 = 4294896148LL;
      }
      else {
        uint64_t v3 = 4294960540LL;
      }
    }

    NSErrorF_safe(v2, (const char *)v3);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v8;
}

BOOL CUXPCDecodeObject(void *a1, const char *a2, objc_class *a3, id *a4, void *a5)
{
  uint64_t v8 = xpc_dictionary_get_value(a1, a2);
  uint64_t v9 = (void *)v8;
  if (v8)
  {
    if (MEMORY[0x186E43C98](v8) == MEMORY[0x1895F9250])
    {
      id v10 = (void *)[[a3 alloc] initWithXPCObject:v9 error:a5];
      BOOL v11 = v10 != 0LL;
      if (v10) {
        objc_storeStrong(a4, v10);
      }
    }

    else if (a5)
    {
      NSErrorF_safe((void *)*MEMORY[0x189607670], (const char *)0xFFFFE59CLL);
      BOOL v11 = 0LL;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      BOOL v11 = 0LL;
    }
  }

  else
  {
    BOOL v11 = 1LL;
  }

  return v11;
}

uint64_t CUXPCEncodeObject(void *a1, const char *a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    id v6 = a1;
    xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    [v5 encodeWithXPCObject:v7];

    xpc_dictionary_set_value(v6, a2, v7);
  }

  return 1LL;
}

id CUXPCDictionaryCreateReply(void *a1)
{
  id v1 = a1;
  objc_getAssociatedObject(v1, &sCUXPCResponseHandlerKey);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    xpc_object_t reply = xpc_dictionary_create(0LL, 0LL, 0LL);
    objc_setAssociatedObject(reply, &sCUXPCResponseHandlerKey, v2, (void *)0x301);
  }

  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v1);
  }

  return reply;
}

id CUXPCObjectGetResponseHandler(void *a1)
{
  return objc_getAssociatedObject(a1, &sCUXPCResponseHandlerKey);
}

void CUXPCObjectSetResponseHandler(void *a1, id value)
{
}

BOOL CUXPCDictionaryExpectsReply(void *a1)
{
  id v1 = a1;
  if ((xpc_dictionary_expects_reply() & 1) != 0)
  {
    BOOL v2 = 1LL;
  }

  else
  {
    objc_getAssociatedObject(v1, &sCUXPCResponseHandlerKey);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v2 = v3 != 0LL;
  }

  return v2;
}

uint64_t CUXPCGetNextClientID()
{
  if (CUXPCGetNextClientID_sOnce != -1) {
    dispatch_once(&CUXPCGetNextClientID_sOnce, &__block_literal_global_10144);
  }
  do
  {
    unsigned int v0 = __ldaxr((unsigned int *)&CUXPCGetNextClientID_sNext);
    uint64_t result = v0 + 1;
  }

  while (__stlxr(result, (unsigned int *)&CUXPCGetNextClientID_sNext));
  return result;
}

uint64_t __CUXPCGetNextClientID_block_invoke()
{
  uint64_t result = RandomBytes(&CUXPCGetNextClientID_sNext, 4uLL);
  CUXPCGetNextClientID_sNext = (unsigned __int16)word_18C69ED52 << 16;
  return result;
}

CFArrayRef CUXPCCreateCFObjectFromXPCObject(void *a1)
{
  valuePtr[256] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = MEMORY[0x186E43C98]();
  if (v2 == MEMORY[0x1895F92A8])
  {
    xpc_object_t v7 = (CFTypeRef *)MEMORY[0x189605018];
LABEL_18:
    uint64_t v9 = (const __CFArray *)CFRetain(*v7);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F9228])
  {
    BOOL value = xpc_BOOL_get_value(v1);
    xpc_object_t v7 = (CFTypeRef *)MEMORY[0x189604DE8];
    if (!value) {
      xpc_object_t v7 = (CFTypeRef *)MEMORY[0x189604DE0];
    }
    goto LABEL_18;
  }

  if (v2 == MEMORY[0x1895F92E8])
  {
    string_ptr = xpc_string_get_string_ptr(v1);
    uint64_t v9 = (const __CFArray *)CFStringCreateWithCString(0LL, string_ptr, 0x8000100u);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F9240])
  {
    size_t length = xpc_data_get_length(v1);
    if ((length & 0x8000000000000000LL) != 0) {
      goto LABEL_45;
    }
    CFIndex v14 = length;
    bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(v1);
    uint64_t v9 = CFDataCreate(0LL, bytes_ptr, v14);
LABEL_19:
    CFArrayRef v10 = v9;
    goto LABEL_20;
  }

  if (v2 == MEMORY[0x1895F9280])
  {
    valuePtr[0] = xpc_int64_get_value(v1);
    uint64_t v9 = CFNumberCreate(0LL, kCFNumberSInt64Type, valuePtr);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F92F0])
  {
    valuePtr[0] = xpc_uint64_get_value(v1);
    uint64_t v9 = CFNumberCreate(0LL, kCFNumberSInt64Type, valuePtr);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F9258])
  {
    valuePtr[0] = xpc_double_get_value(v1);
    uint64_t v9 = CFNumberCreate(0LL, kCFNumberDoubleType, valuePtr);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F9248])
  {
    int64_t v16 = xpc_date_get_value(v1);
    uint64_t v9 = CFDateCreate(0LL, (double)v16 / 1000000000.0 - *MEMORY[0x189604DA8]);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F92F8])
  {
    CFUUIDBytes v32 = *(CFUUIDBytes *)xpc_uuid_get_bytes(v1);
    uint64_t v9 = CFUUIDCreateFromUUIDBytes(0LL, v32);
    goto LABEL_19;
  }

  if (v2 == MEMORY[0x1895F9220])
  {
    size_t count = xpc_array_get_count(v1);
    if ((count & 0x8000000000000000LL) == 0)
    {
      CFIndex v18 = count;
      if (count >= 0x101)
      {
        id v6 = (const void **)calloc(count, 8uLL);
        if (!v6) {
          goto LABEL_45;
        }
      }

      else
      {
        id v6 = (const void **)valuePtr;
      }

      uint64_t v27 = 0LL;
      uint64_t v28 = &v27;
      uint64_t v29 = 0x2020000000LL;
      uint64_t v30 = 0LL;
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __CUXPCCreateCFObjectFromXPCObject_block_invoke;
      applier[3] = &unk_189F33148;
      applier[4] = &v27;
      applier[5] = v6;
      xpc_array_apply(v1, applier);
      uint64_t v19 = v28;
      uint64_t v20 = v28[3];
      if (v20 == v18)
      {
        CFArrayRef v10 = CFArrayCreate(0LL, v6, v18, MEMORY[0x189605228]);
        uint64_t v19 = v28;
        uint64_t v20 = v28[3];
      }

      else
      {
        CFArrayRef v10 = 0LL;
      }

      if (v20)
      {
        unint64_t v21 = 0LL;
        do
        {
          uint64_t v22 = v6[v21];
          if (v22)
          {
            CFRelease(v22);
            uint64_t v19 = v28;
          }

          ++v21;
        }

        while (v21 < v19[3]);
      }

      goto LABEL_55;
    }

void sub_186AE24C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

BOOL __CUXPCCreateCFObjectFromXPCObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = CUXPCCreateCFObjectFromXPCObject(a3);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v7 = *(void *)(v6 + 24);
    *(void *)(v6 + 24) = v7 + 1;
    *(void *)(v5 + 8 * v7) = v4;
  }

  return v4 != 0;
}

uint64_t __CUXPCCreateCFObjectFromXPCObject_block_invoke_2(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = CUXPCCreateCFObjectFromXPCObject(a3);
  if (result)
  {
    uint64_t v6 = (const void *)result;
    CFStringRef v7 = CFStringCreateWithCString(0LL, a2, 0x8000100u);
    if (v7)
    {
      *(void *)(a1[5] + 8LL * *(void *)(*(void *)(a1[4] + 8LL) + 24LL)) = v7;
      uint64_t v9 = a1[5];
      uint64_t v8 = a1[6];
      uint64_t v10 = *(void *)(a1[4] + 8LL);
      uint64_t v11 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = v11 + 1;
      *(void *)(v9 + 8 * (v11 + v8)) = v6;
      return 1LL;
    }

    else
    {
      CFRelease(v6);
      return 0LL;
    }
  }

  return result;
}

uint8_t *CUXPCObjectGetUUID(void *a1, const char *a2)
{
  uuid = (uint8_t *)xpc_dictionary_get_uuid(a1, a2);
  if (uuid) {
    uuid = (uint8_t *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:uuid];
  }
  return uuid;
}

void CUXPCObjectSetUUID(void *a1, const char *a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  [a3 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v5, a2, uuid);
}

uint64_t DACPServer_Create(void *a1, void *a2)
{
  uint64_t v17 = 0LL;
  if (!*a2) {
    return 4294960591LL;
  }
  *(_OWORD *)&void v14[4] = 0u;
  uint64_t v13 = 0LL;
  __int128 v12 = 0u;
  uint64_t v15 = 4294443008LL;
  uint64_t v16 = 0LL;
  __int128 v8 = xmmword_186B49C60;
  uint64_t v9 = __DACPServer_ServerFree;
  uint64_t v10 = __DACPServer_ServerStart;
  uint64_t v11 = __DACPServer_ServerStop;
  *(void *)CFIndex v14 = __DACPServer_ProcessRequest;
  uint64_t v4 = HTTPServer_Create(&v17, &v8);
  uint64_t v5 = v17;
  if ((_DWORD)v4)
  {
    uint64_t v6 = v4;
    if (!v17) {
      return v6;
    }
  }

  else
  {
    *(_OWORD *)(v17 + 224) = *(_OWORD *)a2;
    RandomBytes((void *)(v5 + 240), 8uLL);
    *(void *)(v5 + 320) = 0LL;
    *(void *)(v5 + 32_Block_object_dispose(va, 8) = 0LL;
    uint64_t v6 = pthread_mutex_init((pthread_mutex_t *)(v5 + 248), 0LL);
    if (!(_DWORD)v6)
    {
      *(void *)(v5 + 312) = v5 + 248;
      *a1 = v5;
      return v6;
    }
  }

  HTTPServer_Delete((void *)v5);
  return v6;
}

uint64_t __DACPServer_ServerFree( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = (_DNSServiceRef_t *)a1[42];
  if (v10)
  {
    DNSServiceRefDeallocate(v10);
    a1[42] = 0LL;
  }

  uint64_t v11 = (void *)a1[40];
  if (v11)
  {
    free(v11);
    a1[40] = 0LL;
  }

  a1[41] = 0LL;
  uint64_t result = a1[39];
  if (result)
  {
    uint64_t result = pthread_mutex_destroy((pthread_mutex_t *)result);
    a1[39] = 0LL;
  }

  if (gLogCategory_DACPServer <= 40)
  {
    if (gLogCategory_DACPServer != -1) {
      return LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"void __DACPServer_ServerFree(HTTPServerOldRef)",  0x28u,  (uint64_t)"Deleted\n",  a5,  a6,  a7,  a8,  a9);
    }
    uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u);
    if ((_DWORD)result) {
      return LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"void __DACPServer_ServerFree(HTTPServerOldRef)",  0x28u,  (uint64_t)"Deleted\n",  a5,  a6,  a7,  a8,  a9);
    }
  }

  return result;
}

uint64_t __DACPServer_ServerStart(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  snprintf(__str, 0x40uLL, "%s%016llX", "iTunes_Ctrl_", *(void *)(a1 + 240));
  uint64_t v6 = DNSServiceRegister( (DNSServiceRef *)(a1 + 336),  0,  0,  __str,  "_dacp._tcp",  "local.",  0LL,  bswap32(*(_DWORD *)(a1 + 128)) >> 16,  0,  0LL,  0LL,  0LL);
  if (!(_DWORD)v6
    && gLogCategory_DACPServer <= 40
    && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"OSStatus __DACPServer_ServerStart(HTTPServerOldRef)",  0x28u,  (uint64_t)"Registered %s.%s port %d\n",  v2,  v3,  v4,  v5,  (char)__str);
  }

  return v6;
}

void __DACPServer_ServerStop( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *(_DNSServiceRef_t **)(a1 + 336);
  if (v10)
  {
    DNSServiceRefDeallocate(v10);
    *(void *)(a1 + 336) = 0LL;
  }

  if (gLogCategory_DACPServer <= 40
    && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"void __DACPServer_ServerStop(HTTPServerOldRef)",  0x28u,  (uint64_t)"Stopped\n",  a5,  a6,  a7,  a8,  a9);
  }

uint64_t __DACPServer_ProcessRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (HTTPServer_GetNextURLSegment((void *)a1, (unint64_t *)&v30, &v29, &v31, a5, a6, a7, a8))
  {
    uint64_t v11 = v29;
    uint64_t v10 = (unsigned __int8 *)v30;
    if (strnicmpx((unsigned __int8 *)v30, v29, "ctrl-int"))
    {
      if (!strnicmpx(v10, v11, "server-info"))
      {
LABEL_15:
        uint64_t v23 = 404LL;
        return HTTPServer_SendStatusResponse(a1, v23, v16, v17, v18, v19, v20, v21);
      }

uint64_t DACPServer_GetRemoteCount(uint64_t a1)
{
  return *(void *)(a1 + 328);
}

uint64_t DACPServer_AddRemote(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 320);
    if (v6)
    {
      free(v6);
      *(void *)(a1 + 320) = 0LL;
    }

    *(void *)(a1 + 32_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v7 = (uint64_t *)(a1 + 328);
  while (1)
  {
    RandomBytes(&bytes, 4uLL);
    uint64_t v8 = *v7;
    if (!*v7) {
      break;
    }
    uint64_t v9 = *(int **)(a1 + 320);
    while (1)
    {
      int v10 = *v9++;
      if (v10 == bytes) {
        break;
      }
      if (!--v8) {
        goto LABEL_10;
      }
    }
  }

uint64_t DACPServer_RemoveRemote(uint64_t a1, int a2)
{
  unint64_t v8 = *(void *)(a1 + 328);
  if (v8)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = *(void *)(a1 + 320);
    while (*(_DWORD *)(v10 + 4 * v9) != a2)
    {
      if (v8 == ++v9) {
        goto LABEL_5;
      }
    }

    if (v8 > v9)
    {
      unint64_t v12 = v8 - 1;
      if (v8 - 1 > v9) {
        memcpy((void *)(v10 + 4 * v9), (const void *)(v10 + 4 * v9 + 4), 4 * v8 - (4 * v9 + 4));
      }
      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v12;
    }

    if (gLogCategory_DACPServer <= 40
      && (gLogCategory_DACPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_DACPServer, 0x28u)))
    {
      LogPrintF( (uint64_t)&gLogCategory_DACPServer,  (uint64_t)"OSStatus DACPServer_RemoveRemote(DACPServerRef, uint32_t)",  0x28u,  (uint64_t)"Removed remote %u\n",  v4,  v5,  v6,  v7,  a2);
    }

    uint64_t v11 = 0LL;
  }

  else
  {
LABEL_5:
    uint64_t v11 = 4294960569LL;
  }

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 312));
  return v11;
}

uint64_t DataBuffer_Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + _Block_object_dispose(va, 8) = a3;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = a3;
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void DataBuffer_Free(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2) {
      free(v2);
    }
  }

  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 24) = *(void *)a1;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 52) = 0;
}

uint64_t DataBuffer_Commit(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 52) = -6721;
    if (a2) {
      *a2 = *(void *)(a1 + 24);
    }
    if (a3) {
      *a3 = *(void *)(a1 + 32);
    }
  }

  return result;
}

uint64_t DataBuffer_Detach(uint64_t a1, void *a2, size_t *a3)
{
  size_t v6 = *(void *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v7 = *(void **)(a1 + 24);
LABEL_9:
    uint64_t result = 0LL;
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 24) = *(void *)a1;
    *(void *)(a1 + 32) = 0LL;
    *(void *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *a2 = v7;
    *a3 = v6;
    return result;
  }

  if (v6 <= 1) {
    size_t v8 = 1LL;
  }
  else {
    size_t v8 = *(void *)(a1 + 32);
  }
  unint64_t v9 = malloc(v8);
  if (v9)
  {
    uint64_t v7 = v9;
    if (v6) {
      memcpy(v9, *(const void **)(a1 + 24), v6);
    }
    goto LABEL_9;
  }

  return 4294960568LL;
}

uint64_t DataBuffer_Append(uint64_t a1, char *__s, size_t a3)
{
  size_t v3 = a3;
  if (a3 == -1LL) {
    size_t v3 = strlen(__s);
  }
  uint64_t v6 = DataBuffer_Resize(a1, *(void *)(a1 + 32) + v3, (size_t *)&__dst);
  if (!(_DWORD)v6) {
    memcpy(__dst, __s, v3);
  }
  return v6;
}

uint64_t DataBuffer_Resize(uint64_t a1, unint64_t a2, size_t *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)result)
  {
    size_t v7 = *(void *)(a1 + 32);
    if (v7 >= a2)
    {
      *(void *)(a1 + 32) = a2;
      if (a3)
      {
        uint64_t result = 0LL;
        size_t v14 = *(void *)(a1 + 24);
        goto LABEL_24;
      }

      return 0LL;
    }

    if (*(void *)(a1 + 40) < a2)
    {
      if (*(void *)(a1 + 16) < a2)
      {
        uint64_t result = 4294960545LL;
      }

      else
      {
        uint64_t v8 = 4096LL;
        if (a2 >> 17) {
          uint64_t v9 = ((_DWORD)a2 + 0x1FFFF) & 0xFFFE0000;
        }
        else {
          uint64_t v9 = ((_DWORD)a2 + 0x3FFF) & 0xFFFFC000;
        }
        if (a2 >= 0x1000) {
          uint64_t v8 = v9;
        }
        if (a2 >= 0x100) {
          size_t v10 = v8;
        }
        else {
          size_t v10 = 256LL;
        }
        uint64_t v11 = malloc(v10);
        if (v11)
        {
          unint64_t v12 = v11;
          if (v7) {
            memcpy(v11, *(const void **)(a1 + 24), v7);
          }
          if (*(_BYTE *)(a1 + 48))
          {
            uint64_t v13 = *(void **)(a1 + 24);
            if (v13) {
              free(v13);
            }
          }

          *(void *)(a1 + 40) = v10;
          *(void *)(a1 + 24) = v12;
          *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 1;
          goto LABEL_20;
        }

        uint64_t result = 4294960568LL;
      }

      *(_DWORD *)(a1 + 52) = result;
      return result;
    }

uint64_t DataBuffer_AppendF(uint64_t a1)
{
  int v1 = VCPrintF((uint64_t)__DataBuffer_PrintFCallBack, a1);
  return v1 & (v1 >> 31);
}

uint64_t __DataBuffer_PrintFCallBack(char *__s, size_t a2, uint64_t a3)
{
  unsigned int v3 = a2;
  LODWORD(result) = DataBuffer_Append(a3, __s, a2);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v3;
  }
}

uint64_t DataBuffer_AppendANSIFile(uint64_t a1, FILE *a2)
{
  uint64_t v4 = malloc(0x8000uLL);
  if (!v4) {
    return 4294960568LL;
  }
  uint64_t v5 = v4;
  while (1)
  {
    size_t v6 = fread(v5, 1uLL, 0x8000uLL, a2);
    if (!v6) {
      break;
    }
    uint64_t v7 = DataBuffer_Append(a1, (char *)v5, v6);
    if ((_DWORD)v7)
    {
      uint64_t v8 = v7;
      goto LABEL_7;
    }
  }

  uint64_t v8 = 0LL;
LABEL_7:
  free(v5);
  return v8;
}

uint64_t DataBuffer_AppendFile(uint64_t a1, char *__filename)
{
  unsigned int v3 = fopen(__filename, "rb");
  if (v3)
  {
    uint64_t v4 = a1;
    uint64_t v5 = v3;
LABEL_6:
    uint64_t appended = DataBuffer_AppendANSIFile(v4, v5);
    fclose(v3);
    return appended;
  }

  if (!*__error()) {
    return 4294960596LL;
  }
  uint64_t appended = *__error();
  if (!(_DWORD)appended)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0LL;
    goto LABEL_6;
  }

  return appended;
}

uint64_t DataBuffer_RunProcessAndAppendOutput(uint64_t a1, char *a2)
{
  unsigned int v3 = popen(a2, "r");
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t appended = DataBuffer_AppendANSIFile(a1, v3);
    pclose(v4);
    return appended;
  }

  else if (*__error())
  {
    uint64_t result = *__error();
    if (!(_DWORD)result) {
      return DataBuffer_AppendANSIFile(a1, 0LL);
    }
  }

  else
  {
    return 4294960596LL;
  }

  return result;
}

uint64_t IPCAgent_Create(void *a1)
{
  uint64_t v2 = (char *)calloc(1uLL, 0x70uLL);
  if (v2)
  {
    unsigned int v3 = v2;
    *((_DWORD *)v2 + _Block_object_dispose(va, 8) = -1;
    RandomBytes(v2 + 16, 0x10uLL);
    v3[22] = v3[22] & 0xF | 0x40;
    v3[24] = v3[24] & 0x3F | 0x80;
    dispatch_queue_t v4 = dispatch_queue_create("IPCAgent", 0LL);
    *(void *)unsigned int v3 = v4;
    if (v4)
    {
      dispatch_set_context(v4, v3);
      dispatch_set_finalizer_f(*(dispatch_object_t *)v3, (dispatch_function_t)_IPCAgent_Finalize);
      uint64_t result = 0LL;
      *a1 = v3;
      return result;
    }

    _IPCAgent_Finalize(v3);
  }

  return 4294960568LL;
}

void _IPCAgent_Finalize(void *a1)
{
  *a1 = 0LL;
  uint64_t v2 = (dispatch_semaphore_s *)a1[1];
  if (v2) {
    dispatch_semaphore_signal(v2);
  }
  free(a1);
}

void _IPCAgent_Delete(uint64_t a1)
{
  *(void *)(a1 + 96) = 0LL;
  uint64_t v2 = *(dispatch_source_s **)(a1 + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
  }

  else
  {
    int v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 0x80000000) == 0)
    {
      if (close(v3) && *__error()) {
        __error();
      }
      *(_DWORD *)(a1 + 32) = -1;
    }
  }

  while (1)
  {
    dispatch_queue_t v4 = *(void **)(a1 + 56);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 56) = *v4;
    _IPCAgent_FreeMessage(v4);
  }

  dispatch_release(*(dispatch_object_t *)a1);
}

void _IPCAgent_FreeMessage(void *a1)
{
  for (uint64_t i = (void *)a1[2]; i; uint64_t i = (void *)a1[2])
  {
    a1[2] = *i;
    free(i);
  }

  free(a1);
}

void IPCAgent_DeleteSync(uint64_t a1)
{
  uint64_t v2 = dispatch_semaphore_create(0LL);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
  dispatch_async_f(*(dispatch_queue_t *)a1, (void *)a1, (dispatch_function_t)_IPCAgent_Delete);
  if (v2)
  {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v2);
  }

void _IPCAgent_Start(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v8 = -1;
  int v2 = ServerSocketOpenEx2(2, 2, 17, 0LL, 0, 3721, 0LL, -1, 0, &v8);
  int v3 = v8;
  if (!v2)
  {
    *(_DWORD *)unsigned int __dst = 1;
    if ((!setsockopt(v8, 0, 20, __dst, 4u) || *__error() && !*__error()) && !getifaddrs(&v9))
    {
      if (v9)
      {
        dispatch_queue_t v4 = v9;
        while (1)
        {
          ifa_name = v4->ifa_name;
          if (ifa_name)
          {
            if ((v4->ifa_flags & 8) != 0) {
              break;
            }
          }

          dispatch_queue_t v4 = v4->ifa_next;
          if (!v4) {
            goto LABEL_16;
          }
        }

        strlcpy(__dst, ifa_name, 0x11uLL);
        *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = if_nametoindex(v4->ifa_name);
        MEMORY[0x186E42F24](v9);
        if (!SocketSetMulticastInterface(v3, __dst, *(_DWORD *)(a1 + 48))
          && !SocketSetMulticastLoop(v3))
        {
          *(void *)(a1 + 6_Block_object_dispose(va, 8) = 0x490F05E8890E0210LL;
          *(void *)(a1 + 76) = 0LL;
          if (!_SocketJoinOrLeaveMulticast(v3, a1 + 68, __dst, *(_DWORD *)(a1 + 48), 1))
          {
            dispatch_source_t v6 = dispatch_source_create(MEMORY[0x1895F8B60], v3, 0LL, *(dispatch_queue_t *)a1);
            if (v6)
            {
              uint64_t v7 = v6;
              dispatch_set_context(v6, (void *)a1);
              dispatch_source_set_event_handler_f(v7, (dispatch_function_t)_IPCAgent_ReadHandler);
              dispatch_source_set_cancel_handler_f(v7, (dispatch_function_t)_IPCAgent_CancelHandler);
              dispatch_resume(v7);
              *(_DWORD *)(a1 + 32) = v3;
              *(void *)(a1 + 40) = v7;
              return;
            }
          }
        }
      }

      else
      {
LABEL_16:
        MEMORY[0x186E42F24]();
      }
    }
  }

  if ((v3 & 0x80000000) == 0 && close(v3))
  {
    if (*__error()) {
      __error();
    }
  }

void _IPCAgent_ReadHandler(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  uint64_t v2 = mach_absolute_time();
  if (UpTicksPerSecond_sOnce != -1) {
    dispatch_once_f( &UpTicksPerSecond_sOnce,  &UpTicksPerSecond_sTicksPerSecond,  (dispatch_function_t)_UpTicksPerSecondInit);
  }
  dispatch_queue_t v4 = (uint64_t *)(a1 + 56);
  int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    unint64_t v5 = 5 * UpTicksPerSecond_sTicksPerSecond;
    dispatch_source_t v6 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = v6;
      dispatch_source_t v6 = v3;
      while (v2 - v6[1] > v5)
      {
        --*(_DWORD *)(a1 + 64);
        *uint64_t v7 = *v6;
        _IPCAgent_FreeMessage(v6);
        dispatch_source_t v6 = (void *)*v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      int v3 = (void *)*v6;
    }

    while (*v6);
  }

int *_IPCAgent_CancelHandler(uint64_t a1)
{
  uint64_t result = (int *)*(unsigned int *)(a1 + 32);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }

    *(_DWORD *)(a1 + 32) = -1;
  }

  *(void *)(a1 + 40) = 0LL;
  return result;
}

uint64_t IPCAgent_SendMessage(dispatch_queue_t *a1, const void *a2)
{
  dispatch_queue_t v4 = malloc(0x10uLL);
  if (!v4) {
    return 4294960568LL;
  }
  unint64_t v5 = v4;
  *dispatch_queue_t v4 = a1;
  v4[1] = a2;
  CFRetain(a2);
  dispatch_async_f(*a1, v5, (dispatch_function_t)_IPCAgent_SendMessage);
  return 0LL;
}

void _IPCAgent_SendMessage(CFPropertyListRef *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (char *)*a1;
  CFDictionaryRef Data = CFPropertyListCreateData(0LL, a1[1], kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  if (Data)
  {
    dispatch_queue_t v4 = Data;
    BytePtr = CFDataGetBytePtr(Data);
    unint64_t Length = CFDataGetLength(v4);
    int v8 = 828600425;
    RandomBytes(&v9, 0x10uLL);
    char v10 = v10 & 0xF | 0x40;
    char v11 = v11 & 0x3F | 0x80;
    __int128 v12 = *((_OWORD *)v2 + 1);
    unsigned __int8 v13 = 0;
    unsigned __int8 v14 = (Length + 1433) / 0x59A;
    do
    {
      if (Length >= 0x59A) {
        uint64_t v7 = 1434LL;
      }
      else {
        uint64_t v7 = Length;
      }
      __memcpy_chk();
      if (sendto(*((_DWORD *)v2 + 8), &v8, v7 + 38, 0, (const sockaddr *)(v2 + 68), 0x10u) != v7 + 38
        && (!*__error() || *__error()))
      {
        break;
      }

      BytePtr += v7;
      Length -= v7;
      ++v13;
    }

    while (v14 > v13);
    CFRelease(v4);
  }

  CFRelease(a1[1]);
  free(a1);
}

uint64_t _IPCAgent_PerformHandler(const void *a1, uint64_t a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 24));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), a1);
  uint64_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 8));
  if (!Count) {
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a2 + 16));
  }
  return result;
}

uint64_t DebugIPC_EnsureInitialized(uint64_t (*a1)(void, void, void), uint64_t a2)
{
  gDebugIPCHandlerFunc = a1;
  gDebugIPCHandlerContext = a2;
  if (gDebugIPCAgent) {
    return 0LL;
  }
  uint64_t result = IPCAgent_Create(&gDebugIPCAgent);
  if (!(_DWORD)result)
  {
    uint64_t v3 = gDebugIPCAgent;
    *(void *)(gDebugIPCAgent + 96) = _DebugIPC_MessageHandler;
    *(void *)(v3 + 104) = v3;
    dispatch_async_f(*(dispatch_queue_t *)v3, (void *)v3, (dispatch_function_t)_IPCAgent_Start);
    return 0LL;
  }

  return result;
}

void _DebugIPC_MessageHandler(CFDictionaryRef theDict, dispatch_queue_t *a2)
{
  CFMutableDictionaryRef theDicta = 0LL;
  CFTypeRef cf = 0LL;
  if (!gDebugIPCHandlerFunc) {
    goto LABEL_4;
  }
  int v4 = gDebugIPCHandlerFunc(theDict, &cf, gDebugIPCHandlerContext);
  if (!v4)
  {
LABEL_7:
    if (!cf) {
      return;
    }
    IPCAgent_SendMessage(a2, cf);
    goto LABEL_9;
  }

  if (v4 == -6714)
  {
LABEL_4:
    Value = (const __CFString *)CFDictionaryGetValue(theDict, @"command");
    if (Value)
    {
      dispatch_source_t v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFStringGetTypeID())
      {
        if (CFStringCompare(v6, @"logging", 0LL)) {
          goto LABEL_7;
        }
        int v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"value");
        if (!v8 || (int v9 = v8, v10 = CFGetTypeID(v8), v10 == CFStringGetTypeID()) && !LogControlCF(v9))
        {
          uint64_t v17 = 0LL;
          if (!LogShow(&v17))
          {
            int Formatted = CFPropertyListCreateFormatted( 0LL,  (CFTypeRef *)&theDicta,  (uint64_t)"{%kO=%s}",  v11,  v12,  v13,  v14,  v15,  (uint64_t)@"value");
            free(v17);
            if (!Formatted)
            {
              CFTypeRef cf = theDicta;
              if (!theDicta) {
                return;
              }
              CFDictionarySetValue(theDicta, @"responseType", v6);
              goto LABEL_7;
            }
          }
        }
      }
    }
  }

void DebugIPC_EnsureFinalized()
{
  if (gDebugIPCAgent)
  {
    IPCAgent_DeleteSync(gDebugIPCAgent);
    gDebugIPCAgent = 0LL;
  }

uint64_t DebugIPC_LogControl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DebugIPC_PerformF( _DebugIPC_ShowHandler,  0LL,  (uint64_t)"{%kO=%O%kO=%s}",  a4,  a5,  a6,  a7,  a8,  (uint64_t)@"command");
}

uint64_t _DebugIPC_ShowHandler(const __CFDictionary *a1)
{
  uint64_t v1 = *MEMORY[0x1895F89E0];
  CFDictionaryGetValue(a1, @"value");
  return FPrintF(v1);
}

uint64_t DebugIPC_PerformF( uint64_t (*a1)(const __CFDictionary *a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = CFPropertyListBuildFormatted(0LL, 0LL, &cf, a3, (uint64_t)&a9, a6, a7, a8);
  if (!(_DWORD)v11)
  {
    CFTypeRef v12 = cf;
    dispatch_object_t object = 0LL;
    CFArrayRef theArray = 0LL;
    if (!a1) {
      a1 = _DebugIPC_ShowHandler;
    }
    CFMutableDataRef context = 0LL;
    dispatch_semaphore_t dsema = dispatch_semaphore_create(1LL);
    if (dsema && (dispatch_object_t object = dispatch_semaphore_create(0LL)) != 0LL)
    {
      CFArrayRef theArray = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      if (theArray)
      {
        uint64_t v11 = IPCAgent_Create(&context);
        if (!(_DWORD)v11)
        {
          uint64_t v13 = (dispatch_queue_t *)context;
          *((void *)context + 12) = _IPCAgent_PerformHandler;
          v13[13] = (dispatch_queue_t)&context;
          dispatch_async_f(*v13, v13, (dispatch_function_t)_IPCAgent_Start);
          uint64_t v11 = IPCAgent_SendMessage((dispatch_queue_t *)context, v12);
          if (!(_DWORD)v11)
          {
            while (1)
            {
              uint64_t v15 = (dispatch_semaphore_s *)object;
              dispatch_time_t v16 = dispatch_time(0LL, 300000000LL);
              while (1)
              {
                dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
                if (!CFArrayGetCount(theArray)) {
                  break;
                }
                ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0LL);
                CFRetain(ValueAtIndex);
                CFArrayRemoveValueAtIndex(theArray, 0LL);
                dispatch_semaphore_signal(dsema);
                ((void (*)(const void *, uint64_t))a1)(ValueAtIndex, a2);
                CFRelease(ValueAtIndex);
              }

              dispatch_semaphore_signal(dsema);
            }

            uint64_t v11 = 0LL;
          }
        }
      }

      else
      {
        uint64_t v11 = 4294960568LL;
      }
    }

    else
    {
      uint64_t v11 = 4294960596LL;
    }

    if (context) {
      IPCAgent_DeleteSync((uint64_t)context);
    }
    if (dsema) {
      dispatch_release(dsema);
    }
    if (object) {
      dispatch_release(object);
    }
    if (theArray) {
      CFRelease(theArray);
    }
    CFRelease(cf);
  }

  return v11;
}

uint64_t DebugPrintAssert( uint64_t result, int a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (gLogCategory_DebugServicesAssert > 70) {
    return result;
  }
  char v10 = result;
  if (gLogCategory_DebugServicesAssert == -1)
  {
    uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesAssert, 0x46u);
    if (!(_DWORD)result) {
      return result;
    }
  }

  if (a4)
  {
    for (uint64_t i = a4 + 1; ; ++i)
    {
      int v12 = *((unsigned __int8 *)i - 1);
      if (v12 == 47 || v12 == 92)
      {
        a4 = i;
      }

      else if (!*(i - 1))
      {
        break;
      }
    }
  }

  if (!a4) {
    a4 = "";
  }
  if (a2)
  {
    if (gLogCategory_DebugServicesLogging <= 70)
    {
      if (gLogCategory_DebugServicesLogging != -1
        || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x46u), (_DWORD)result))
      {
        uint64_t result = LogPrintF( (uint64_t)&gLogCategory_DebugServicesLogging,  (uint64_t)"void DebugPrintAssert(DebugAssertFlags, OSStatus, const char *, const char *, long, const ch ar *, const char *, ...)",  0x46u,  (uint64_t)"### [ASSERT] %s:%ld %###s, %#m %V\n%s",  a5,  a6,  a7,  a8,  (char)a4);
      }
    }
  }

  else if (gLogCategory_DebugServicesLogging <= 70)
  {
    if (gLogCategory_DebugServicesLogging != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_DebugServicesLogging, 0x46u), (_DWORD)result))
    {
      uint64_t result = LogPrintF( (uint64_t)&gLogCategory_DebugServicesLogging,  (uint64_t)"void DebugPrintAssert(DebugAssertFlags, OSStatus, const char *, const char *, long, const char *, const char *, ...)",  0x46u,  (uint64_t)"### [ASSERT] %s:%ld %###s, %s %V\n%s",  a5,  a6,  a7,  a8,  (char)a4);
    }
  }

  if ((v10 & 1) != 0)
  {
    if (!DebugIsDebuggerPresent())
    {
      while (1)
        ;
    }

uint64_t DebugIsDebuggerPresent()
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(void *)int v4 = 0xE00000001LL;
  int v5 = 1;
  pid_t v6 = getpid();
  size_t v1 = 648LL;
  unsigned int v3 = 0;
  sysctl(v4, 4u, v2, &v1, 0LL, 0LL);
  return (v3 >> 11) & 1;
}

const char *DebugGetErrorString(int a1, char *a2, uint64_t a3)
{
  return DebugGetErrorStringEx(0LL, a1, a2, a3);
}

const char *DebugGetErrorStringEx(const __CFString *a1, int a2, char *a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v7 = (const char *)CUErrorDomainCodeToString(a1, a2);
    if (v7) {
      goto LABEL_22;
    }
  }

  if (a2 == 999 || (a2 - 100) <= 0x1F3)
  {
    if (a2 == 102)
    {
      uint64_t v7 = "EOPNOTSUPP / kA11AuthFatalErr / HTTP Processing";
      goto LABEL_22;
    }

    int v8 = a2;
    goto LABEL_12;
  }

  if (a2 == 200999 || (a2 - 200100) <= 0x1F3)
  {
    int v8 = a2 - 200000;
LABEL_12:
    uint64_t v7 = HTTPGetReasonPhrase(v8);
    if (*v7) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }

  uint64_t v7 = 0LL;
LABEL_13:
  if (MEMORY[0x18960EFF0])
  {
    uint64_t v9 = CUErrorCodesTableGet();
    uint64_t v7 = *(const char **)(v9 + 8);
    if (v7)
    {
      if (*(_DWORD *)v9 == a2) {
        goto LABEL_22;
      }
      char v10 = (const char **)(v9 + 24);
      while (1)
      {
        uint64_t v7 = *v10;
        if (!*v10) {
          break;
        }
        int v11 = *((_DWORD *)v10 - 2);
        v10 += 2;
        if (v11 == a2) {
          goto LABEL_22;
        }
      }
    }
  }

  if (!v7) {
    uint64_t v7 = "";
  }
LABEL_22:
  if (!a3 || !a4) {
    return v7;
  }
  uint64_t v12 = a4 - 1;
  uint64_t v13 = a3;
  if (a4 - 1 >= 1)
  {
    uint64_t v13 = a3;
    do
    {
      char v14 = *v7;
      if (!*v7) {
        break;
      }
      ++v7;
      *v13++ = v14;
      --v12;
    }

    while (v12 > 0);
  }

  *uint64_t v13 = 0;
  return a3;
}

uint64_t CUErrorDomainCodeToString(const __CFString *a1, int a2)
{
  int v11 = 0LL;
  uint64_t v12 = 0LL;
  CFStringGetOrCopyCStringUTF8(a1, &v12, (UInt8 **)&v11, 0LL);
  unsigned int v3 = v12;
  if (!v12) {
    return 0LL;
  }
  if (MEMORY[0x18960EFF8] && (v4 = CUErrorDomainTableGet(), (int v5 = *(const char **)v4) != 0LL))
  {
    while (1)
    {
      if (!strcasecmp(v5, v3))
      {
        uint64_t v6 = *(void *)(v4 + 8);
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          uint64_t v8 = 0LL;
          do
          {
            if (*(_DWORD *)v6 == a2) {
              uint64_t v8 = v7;
            }
            uint64_t v7 = *(void *)(v6 + 24);
            v6 += 16LL;
          }

          while (v7);
          if (v8) {
            break;
          }
        }
      }

      uint64_t v9 = *(const char **)(v4 + 16);
      v4 += 16LL;
      int v5 = v9;
      if (!v9) {
        goto LABEL_12;
      }
    }
  }

  else
  {
LABEL_12:
    uint64_t v8 = 0LL;
  }

  if (v11) {
    free(v11);
  }
  return v8;
}

const char *HTTPGetReasonPhrase(int a1)
{
  if (a1 <= 299)
  {
    switch(a1)
    {
      case 200:
        uint64_t result = "OK";
        break;
      case 201:
        uint64_t result = "Created";
        break;
      case 202:
        uint64_t result = "Accepted";
        break;
      case 203:
        uint64_t result = "Non-Authoritative Information";
        break;
      case 204:
        uint64_t result = "No Content";
        break;
      case 205:
        uint64_t result = "Reset Content";
        break;
      case 206:
        uint64_t result = "Partial Content";
        break;
      case 207:
        uint64_t result = "Multi-Status";
        break;
      case 208:
        uint64_t result = "Already Reported";
        break;
      case 209:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
        return "";
      case 210:
        uint64_t result = "Content Different";
        break;
      case 226:
        uint64_t result = "IM Used";
        break;
      default:
        int v2 = a1 - 100;
        uint64_t result = "Continue";
        switch(v2)
        {
          case 0:
            return result;
          case 1:
            uint64_t result = "Switching Protocols";
            break;
          case 2:
            uint64_t result = "Processing";
            break;
          case 3:
            uint64_t result = "Checkpoint";
            break;
          default:
            uint64_t result = "Low on Storage Space";
            break;
        }

        break;
    }
  }

  else if (a1 > 550)
  {
    if (a1 <= 597)
    {
      if (a1 == 551) {
        return "Option Not Supported";
      }
      if (a1 == 553) {
        return "Proxy Unavailable";
      }
    }

    else
    {
      switch(a1)
      {
        case 598:
          return "Network Read Timeout";
        case 599:
          return "Network Connect Timeout";
        case 999:
          return "Request Denied";
      }
    }

    return "";
  }

  else
  {
    switch(a1)
    {
      case 300:
        uint64_t result = "Multiple Choices";
        break;
      case 301:
        uint64_t result = "Moved Permanently";
        break;
      case 302:
        uint64_t result = "Found";
        break;
      case 303:
        uint64_t result = "See Other";
        break;
      case 304:
        uint64_t result = "Not Modified";
        break;
      case 305:
        uint64_t result = "Use Proxy";
        break;
      case 306:
        uint64_t result = "Switch Proxy";
        break;
      case 307:
        uint64_t result = "Temporary Redirect";
        break;
      case 308:
        uint64_t result = "Permanent Redirect";
        break;
      case 330:
        uint64_t result = "Moved Location";
        break;
      case 350:
        uint64_t result = "Going Away";
        break;
      case 351:
        uint64_t result = "Load Balancing";
        break;
      case 400:
        uint64_t result = "Bad Request";
        break;
      case 401:
        uint64_t result = "Unauthorized";
        break;
      case 402:
        uint64_t result = "Payment Required";
        break;
      case 403:
        uint64_t result = "Forbidden";
        break;
      case 404:
        uint64_t result = "Not Found";
        break;
      case 405:
        uint64_t result = "Method Not Allowed";
        break;
      case 406:
        uint64_t result = "Not Acceptable";
        break;
      case 407:
        uint64_t result = "Proxy Authentication Required";
        break;
      case 408:
        uint64_t result = "Request Timeout";
        break;
      case 409:
        uint64_t result = "Conflict";
        break;
      case 410:
        uint64_t result = "Gone";
        break;
      case 411:
        uint64_t result = "Length Required";
        break;
      case 412:
        uint64_t result = "Precondition Failed";
        break;
      case 413:
        uint64_t result = "Request Entity Too Large";
        break;
      case 414:
        uint64_t result = "Request URI Too Long";
        break;
      case 415:
        uint64_t result = "Unsupported Media Type";
        break;
      case 416:
        uint64_t result = "Requested Range Not Satisfiable";
        break;
      case 417:
      case 423:
        uint64_t result = "Expectation Failed";
        break;
      case 418:
        uint64_t result = "I'm a teapot";
        break;
      case 419:
        uint64_t result = "Authentication Timeout";
        break;
      case 420:
        uint64_t result = "Enhance Your Calm";
        break;
      case 421:
        uint64_t result = "Not Authoritative";
        break;
      case 422:
        uint64_t result = "Unprocessable Entity";
        break;
      case 424:
        uint64_t result = "Failed Dependency";
        break;
      case 425:
        uint64_t result = "Unordered Collection";
        break;
      case 426:
        uint64_t result = "Upgrade Required";
        break;
      case 428:
        uint64_t result = "Precondition Required";
        break;
      case 429:
        uint64_t result = "Too Many Requests";
        break;
      case 431:
        uint64_t result = "Request Header Fields Too Large";
        break;
      case 440:
        uint64_t result = "Login Timeout";
        break;
      case 444:
        uint64_t result = "No Response";
        break;
      case 449:
        uint64_t result = "Retry With";
        break;
      case 450:
        uint64_t result = "Blocked by Parental Controls";
        break;
      case 451:
        uint64_t result = "Parameter Not Understood";
        break;
      case 452:
        uint64_t result = "Conference Not Found";
        break;
      case 453:
        uint64_t result = "Not Enough Bandwidth";
        break;
      case 454:
        uint64_t result = "Session Not Found";
        break;
      case 455:
        uint64_t result = "Method Not Valid In This State";
        break;
      case 456:
        uint64_t result = "Header Field Not Valid";
        break;
      case 457:
        uint64_t result = "Invalid Range";
        break;
      case 458:
        uint64_t result = "Parameter Is Read-Only";
        break;
      case 459:
        uint64_t result = "Aggregate Operation Not Allowed";
        break;
      case 460:
        uint64_t result = "Only Aggregate Operation Allowed";
        break;
      case 461:
        uint64_t result = "Unsupported Transport";
        break;
      case 462:
        uint64_t result = "Destination Unreachable";
        break;
      case 463:
        uint64_t result = "Destination Prohibited";
        break;
      case 464:
        uint64_t result = "Data Transport Not Ready Yet";
        break;
      case 465:
        uint64_t result = "Notification Reason Unknown";
        break;
      case 466:
        uint64_t result = "Key Management Error";
        break;
      case 470:
        uint64_t result = "Connection Authorization Required";
        break;
      case 471:
        uint64_t result = "Connection Credentials not accepted";
        break;
      case 472:
        uint64_t result = "Failure to establish secure connection";
        break;
      case 475:
        uint64_t result = "Invalid collblob";
        break;
      case 494:
        uint64_t result = "Request Header Too Large";
        break;
      case 495:
        uint64_t result = "Cert Error";
        break;
      case 496:
        uint64_t result = "No Cert";
        break;
      case 497:
        uint64_t result = "HTTP to HTTPS";
        break;
      case 498:
        uint64_t result = "Token expired/invalid";
        break;
      case 499:
        uint64_t result = "Client Closed Request";
        break;
      case 500:
        uint64_t result = "Internal Server Error";
        break;
      case 501:
        uint64_t result = "Not Implemented";
        break;
      case 502:
        uint64_t result = "Bad Gateway";
        break;
      case 503:
        uint64_t result = "Service Unavailable";
        break;
      case 504:
        uint64_t result = "Gateway Timeout";
        break;
      case 505:
        uint64_t result = "Version Not Supported";
        break;
      case 506:
        uint64_t result = "Variant Also Negotiates";
        break;
      case 507:
        uint64_t result = "Insufficient Storage";
        break;
      case 508:
        uint64_t result = "Loop Detected";
        break;
      case 509:
        uint64_t result = "Bandwidth Limit Exceeded";
        break;
      case 510:
        uint64_t result = "Not Extended";
        break;
      case 511:
        uint64_t result = "Network Authentication Required";
        break;
      case 520:
        uint64_t result = "Origin Error";
        break;
      case 521:
        uint64_t result = "Web Server Is Down";
        break;
      case 522:
        uint64_t result = "Connection timed out";
        break;
      case 523:
        uint64_t result = "Proxy Declined Request";
        break;
      case 524:
        uint64_t result = "Timeout occurred";
        break;
      case 525:
        uint64_t result = "SSL Handshake Failed";
        break;
      case 526:
        uint64_t result = "Invalid SSL Certificate";
        break;
      default:
        return "";
    }
  }

  return result;
}

BOOL DebugIsCurrentDispatchQueue(void *a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v3 = v2 == a1;

  return v3;
}

__CFError *CUErrorCFErrorToString(__CFError *result)
{
  if (result)
  {
    size_t v1 = result;
    Domain = CFErrorGetDomain(result);
    int Code = CFErrorGetCode(v1);
    return (__CFError *)CUErrorDomainCodeToString(Domain, Code);
  }

  return result;
}

void CUFatalErrorF(int *a1, char a2)
{
}

void CUFatalErrorV(int *a1, char a2)
{
  uint64_t v8 = 0LL;
  VASPrintF(&v8);
  if (v8) {
    a2 = (char)v8;
  }
  if (*a1 <= 90 && (*a1 != -1 || _LogCategory_Initialize((uint64_t)a1, 0x5Au))) {
    LogPrintF( (uint64_t)a1,  (uint64_t)"void CUFatalErrorV(LogCategory *, const char *, va_list)",  0x5Au,  (uint64_t)"### Fatal Error: %s",  v4,  v5,  v6,  v7,  a2);
  }
  _os_crash();
  __break(1u);
}

void FatalErrorF(const char *a1)
{
}

void FatalErrorV(const char *a1)
{
  int v2 = 0LL;
  VASPrintF((void **)&v2);
  if (v2) {
    a1 = v2;
  }
  syslog(3, "### Fatal error: %s", a1);
  fprintf((FILE *)*MEMORY[0x1895F89D0], "### Fatal error: %s\n", a1);
  _os_crash();
  __break(1u);
}

uint64_t NSErrorToOSStatus(void *a1)
{
  return NSErrorToOSStatusEx(a1, 0LL);
}

uint64_t NSErrorToOSStatusEx(void *a1, char *a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v15 = 0LL;
    goto LABEL_23;
  }

  [v3 domain];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v5 isEqualToString:*MEMORY[0x189607670]]) {
    goto LABEL_21;
  }
  [v4 domain];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v6 isEqualToString:*MEMORY[0x189607688]])
  {
LABEL_20:

LABEL_21:
LABEL_22:
    uint64_t v15 = [v4 code];
LABEL_23:
    char v16 = 1;
    goto LABEL_24;
  }

  [v4 domain];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v7 isEqualToString:*MEMORY[0x189607630]])
  {
LABEL_19:

    goto LABEL_20;
  }

  [v4 domain];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v8 isEqualToString:@"AKAnisetteError"])
  {
LABEL_18:

    goto LABEL_19;
  }

  [v4 domain];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v9 isEqualToString:@"AKAuthenticationError"])
  {
LABEL_17:

    goto LABEL_18;
  }

  [v4 domain];
  char v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v10 isEqualToString:@"AVFoundationErrorDomain"])
  {
LABEL_16:

    goto LABEL_17;
  }

  [v4 domain];
  int v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v11 isEqualToString:@"com.apple.accounts.keychain"])
  {
LABEL_15:

    goto LABEL_16;
  }

  [v4 domain];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v12 isEqualToString:@"com.apple.wifi.apple80211API.error"])
  {
LABEL_14:

    goto LABEL_15;
  }

  uint64_t v86 = v12;
  [v4 domain];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v13 isEqualToString:@"CDPStateError"])
  {
LABEL_13:

    uint64_t v12 = v86;
    goto LABEL_14;
  }

  unsigned __int128 v85 = v13;
  [v4 domain];
  char v14 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v14 isEqualToString:@"NSCocoaErrorDomain"])
  {

    uint64_t v13 = v85;
    goto LABEL_13;
  }

  uint64_t v84 = v14;
  [v4 domain];
  __int128 v83 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v83 isEqualToString:@"NSURLErrorDomain"])
  {
    char v18 = 1;
  }

  else
  {
    [v4 domain];
    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v82 isEqualToString:@"RPErrorDomain"])
    {
      char v18 = 1;
    }

    else
    {
      [v4 domain];
      unsigned __int128 v81 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v81 isEqualToString:@"SFAppleIDErrorDomain"])
      {
        char v18 = 1;
      }

      else
      {
        [v4 domain];
        __int128 v80 = (void *)objc_claimAutoreleasedReturnValue();
        if ([v80 isEqualToString:@"UserErrorDomain"])
        {
          char v18 = 1;
        }

        else
        {
          [v4 domain];
          uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue();
          if ([v79 isEqualToString:@"WCErrorDomain"])
          {
            char v18 = 1;
          }

          else
          {
            [v4 domain];
            unsigned __int128 v78 = (void *)objc_claimAutoreleasedReturnValue();
            char v18 = [v78 isEqualToString:@"WCInternalErrorDomain"];
          }
        }
      }
    }
  }

  if ((v18 & 1) != 0) {
    goto LABEL_22;
  }
  [v4 domain];
  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue();
  int v20 = [v19 isEqualToString:@"com.apple.accounts"];

  if (v20)
  {
    uint64_t v15 = [v4 code] + 312200;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  int v22 = [v21 isEqualToString:@"com.apple.AppleIDAuthSupport"];

  if (v22)
  {
    uint64_t v15 = [v4 code] + 312250;
    goto LABEL_23;
  }

  [v4 domain];
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v23 isEqualToString:@"AppleKeyStore"])
  {

LABEL_51:
    uint64_t v15 = 300940 - [v4 code];
    goto LABEL_23;
  }

  [v4 domain];
  CFPropertyListRef v24 = (void *)objc_claimAutoreleasedReturnValue();
  int v25 = [v24 isEqualToString:@"AKS"];

  if (v25) {
    goto LABEL_51;
  }
  [v4 domain];
  unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  int v27 = [v26 isEqualToString:@"CBErrorDomain"];

  if (v27)
  {
    uint64_t v28 = [v4 code];
    else {
      uint64_t v15 = [v4 code] + 300100;
    }
    goto LABEL_23;
  }

  [v4 domain];
  unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
  int v30 = [v29 isEqualToString:@"CBATTErrorDomain"];

  if (v30)
  {
    int v31 = [v4 code];
    if (v31 <= 0x11)
    {
      uint64_t v15 = (v31 + 300120);
      goto LABEL_23;
    }

    unsigned int v35 = v31 + 311000;
    BOOL v36 = v31 < 300100;
LABEL_70:
    if (v36) {
      uint64_t v15 = v35;
    }
    else {
      uint64_t v15 = v31;
    }
    goto LABEL_23;
  }

  [v4 domain];
  CFUUIDBytes v32 = (void *)objc_claimAutoreleasedReturnValue();
  int v33 = [v32 isEqualToString:@"CBInternalErrorDomain"];

  if (v33)
  {
    uint64_t v34 = [v4 code];
    if ((_DWORD)v34 == 12)
    {
      uint64_t v15 = 300112LL;
    }

    else
    {
      uint64_t v15 = v34;
      if ((_DWORD)v34 == 13)
      {
        uint64_t v15 = 300113LL;
      }

      else if ((int)v34 < 300100)
      {
        uint64_t v15 = [v4 code] + 312800;
      }
    }

    goto LABEL_23;
  }

  [v4 domain];
  int v37 = (void *)objc_claimAutoreleasedReturnValue();
  int v38 = [v37 isEqualToString:@"kCFErrorDomainCFNetwork"];

  if (v38)
  {
    uint64_t v39 = [v4 code];
    uint64_t v15 = v39;
    char v16 = 1;
    if ((int)v39 > 199)
    {
      switch((int)v39)
      {
        case 300:
          uint64_t v15 = 300155LL;
          goto LABEL_23;
        case 301:
          uint64_t v15 = 300156LL;
          goto LABEL_23;
        case 302:
          int v40 = 57;
          goto LABEL_116;
        case 303:
          int v40 = 58;
          goto LABEL_116;
        case 304:
          int v40 = 59;
          goto LABEL_116;
        case 305:
          uint64_t v15 = 300160LL;
          goto LABEL_23;
        case 306:
          uint64_t v15 = 300161LL;
          goto LABEL_23;
        case 307:
          uint64_t v15 = 300162LL;
          goto LABEL_23;
        case 308:
          uint64_t v15 = 300163LL;
          goto LABEL_23;
        case 309:
          uint64_t v15 = 300164LL;
          goto LABEL_23;
        case 310:
          uint64_t v15 = 300165LL;
          goto LABEL_23;
        case 311:
          uint64_t v15 = 300166LL;
          goto LABEL_23;
        default:
          if ((_DWORD)v39 != 200) {
            goto LABEL_24;
          }
          uint64_t v15 = 300154LL;
          break;
      }
    }

    else
    {
      switch((int)v39)
      {
        case 'd':
          int v40 = 43;
          break;
        case 'e':
          uint64_t v15 = 300144LL;
          goto LABEL_23;
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
          goto LABEL_24;
        case 'n':
          uint64_t v15 = 300145LL;
          goto LABEL_23;
        case 'o':
          uint64_t v15 = 300146LL;
          goto LABEL_23;
        case 'p':
          uint64_t v15 = 300147LL;
          goto LABEL_23;
        case 'q':
          uint64_t v15 = 300148LL;
          goto LABEL_23;
        case 'x':
          int v40 = 49;
          break;
        case 'y':
          int v40 = 50;
          break;
        case 'z':
          int v40 = 51;
          break;
        case '{':
          uint64_t v15 = 300152LL;
          goto LABEL_23;
        case '|':
          uint64_t v15 = 300153LL;
          goto LABEL_23;
        default:
          if ((_DWORD)v39 == 1)
          {
            int v40 = 41;
          }

          else
          {
            if ((_DWORD)v39 != 2) {
              goto LABEL_24;
            }
            int v40 = 42;
          }

          break;
      }

LABEL_195:
    unsigned int v77 = [v4 code];
    if (v77) {
      uint64_t v15 = v77;
    }
    else {
      uint64_t v15 = 300960LL;
    }
    goto LABEL_23;
  }

  if (v73 <= -8008)
  {
    switch(v73)
    {
      case -9104LL:
        uint64_t v15 = 300975LL;
        break;
      case -9103LL:
        uint64_t v15 = 300974LL;
        break;
      case -9102LL:
        uint64_t v15 = 300973LL;
        break;
      case -9101LL:
        uint64_t v15 = 300972LL;
        break;
      case -9100LL:
        uint64_t v15 = 300971LL;
        break;
      default:
        if (v73 == -9001)
        {
          uint64_t v15 = 300970LL;
        }

        else
        {
          if (v73 != -9000) {
            goto LABEL_195;
          }
          uint64_t v15 = 300969LL;
        }

        break;
    }

    goto LABEL_23;
  }

  uint64_t v15 = 300961LL;
  char v16 = 1;
  switch(v73)
  {
    case -8007LL:
      uint64_t v15 = 300968LL;
      break;
    case -8006LL:
      uint64_t v15 = 300967LL;
      break;
    case -8005LL:
      uint64_t v15 = 300966LL;
      break;
    case -8004LL:
      uint64_t v15 = 300965LL;
      break;
    case -8003LL:
      uint64_t v15 = 300964LL;
      break;
    case -8002LL:
      uint64_t v15 = 300963LL;
      break;
    case -8001LL:
      uint64_t v15 = 300962LL;
      break;
    case -8000LL:
      break;
    default:
      goto LABEL_195;
  }

void *__ReportCriticalError_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 5);
  ReportCriticalError_sCrashReporterLib = (uint64_t)result;
  if (result)
  {
    ReportCriticalError_sSimulateCrash_f = dlsym(result, "SimulateCrash");
    uint64_t result = dlsym((void *)ReportCriticalError_sCrashReporterLib, "WriteStackshotReportWithPID");
    ReportCriticalError_sWriteStackShot_f = result;
  }

  return result;
}

const char *DMAPFindEntryByContentCode(int a1)
{
  uint64_t result = "hsac";
  int v3 = 1667330920;
  while (v3 != a1)
  {
    int v4 = *((_DWORD *)result + 6);
    result += 24;
    int v3 = v4;
    if (!v4) {
      return 0LL;
    }
  }

  return result;
}

uint64_t DMAPContentBlock_Init(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + _Block_object_dispose(va, 8) = a3;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = 0LL;
  *(_BYTE *)(result + 40) = 0;
  *(void *)(result + 176) = 0LL;
  return result;
}

void DMAPContentBlock_Free(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40)) {
    free(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)a1;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 0;
  *(void *)(a1 + 176) = 0LL;
}

uint64_t DMAPContentBlock_Commit(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 176))
    {
      return 4294960587LL;
    }

    else
    {
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 180) = -6721;
      *a2 = *(void *)(a1 + 16);
      *a3 = *(void *)(a1 + 32);
    }
  }

  return result;
}

uint64_t DMAPContentBlock_OpenContainer(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 176) > 0xFu) {
    return 4294960567LL;
  }
  v6[0] = HIBYTE(a2);
  v6[1] = BYTE2(a2);
  v6[2] = BYTE1(a2);
  v6[3] = a2;
  int v7 = 0;
  uint64_t result = DMAPContentBlock_AddData(a1, v6, 8uLL);
  if (!(_DWORD)result)
  {
    uint64_t v4 = *(void *)(a1 + 32) - 4LL;
    uint64_t v5 = *(unsigned int *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v5 + 1;
    *(void *)(a1 + 8 * v5 + 4_Block_object_dispose(va, 8) = v4;
  }

  return result;
}

uint64_t DMAPContentBlock_AddData(uint64_t a1, void *__src, size_t __n)
{
  uint64_t result = *(unsigned int *)(a1 + 180);
  if (!(_DWORD)result)
  {
    size_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = v7 + __n;
    if (v7 + __n > *(void *)(a1 + 24))
    {
      if (v8 >= 0x800) {
        size_t v9 = 2 * v8;
      }
      else {
        size_t v9 = 4096LL;
      }
      char v10 = malloc(v9);
      if (!v10)
      {
        uint64_t result = 4294960568LL;
        *(_DWORD *)(a1 + 180) = -6728;
        return result;
      }

      int v11 = v10;
      if (v7) {
        memcpy(v10, *(const void **)(a1 + 16), v7);
      }
      if (*(_BYTE *)(a1 + 40))
      {
        free(*(void **)(a1 + 16));
        size_t v7 = *(void *)(a1 + 32);
      }

      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v9;
      *(_BYTE *)(a1 + 40) = 1;
    }

    if (__src)
    {
      memcpy((void *)(*(void *)(a1 + 16) + v7), __src, __n);
      size_t v7 = *(void *)(a1 + 32);
    }

    uint64_t result = 0LL;
    *(void *)(a1 + 32) = v7 + __n;
  }

  return result;
}

uint64_t DMAPContentBlock_CloseContainer(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 176);
  if (!v1) {
    return 4294960576LL;
  }
  unsigned int v3 = v1 - 1;
  *(_DWORD *)(a1 + 176) = v3;
  uint64_t v4 = *(void *)(a1 + 8LL * v3 + 48);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 < v4 + 4) {
    return 4294960534LL;
  }
  uint64_t result = 0LL;
  *(_DWORD *)(*(void *)(a1 + 16) + v4) = bswap32(v5 - (v4 + 4));
  return result;
}

uint64_t DMAPContentBlock_AddInt8(uint64_t a1, int a2, char a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  __src[0] = HIBYTE(a2);
  __src[1] = BYTE2(a2);
  __src[2] = BYTE1(a2);
  __src[3] = a2;
  int v5 = 0x1000000;
  char v6 = a3;
  return DMAPContentBlock_AddData(a1, __src, 9uLL);
}

uint64_t DMAPContentBlock_AddInt32(uint64_t a1, int a2, int a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  __src[0] = HIBYTE(a2);
  __src[1] = BYTE2(a2);
  __src[2] = BYTE1(a2);
  __src[3] = a2;
  int v5 = 0x4000000;
  char v6 = HIBYTE(a3);
  char v7 = BYTE2(a3);
  char v8 = BYTE1(a3);
  char v9 = a3;
  return DMAPContentBlock_AddData(a1, __src, 0xCuLL);
}

uint64_t DMAPContentBlock_AddCFObjectByKey( uint64_t a1, unsigned int a2, int a3, CFDictionaryRef theDict, void *key)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, key);
  if (result)
  {
    uint64_t v9 = result;
    if (!a3)
    {
      uint64_t v10 = "hsac";
      int v11 = 1667330920;
      while (v11 != a2)
      {
        int v12 = *((_DWORD *)v10 + 6);
        v10 += 24;
        int v11 = v12;
        if (!v12) {
          return 4294960540LL;
        }
      }

      a3 = *((unsigned __int8 *)v10 + 16);
    }

    switch(a3)
    {
      case 1:
      case 2:
        char v13 = CFGetInt64((const __CFString *)result, (int *)&v24);
        uint64_t result = v24;
        if (!v24)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          unsigned int v26 = 0x1000000;
          char v27 = v13;
          uint64_t v14 = a1;
          size_t v15 = 9LL;
          goto LABEL_17;
        }

        break;
      case 3:
      case 4:
        __int16 v16 = CFGetInt64((const __CFString *)result, (int *)&v24);
        uint64_t result = v24;
        if (!v24)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          unsigned int v26 = 0x2000000;
          char v27 = HIBYTE(v16);
          char v28 = v16;
          uint64_t v14 = a1;
          size_t v15 = 10LL;
          goto LABEL_17;
        }

        break;
      case 5:
      case 6:
        int v17 = CFGetInt64((const __CFString *)result, (int *)&v24);
        uint64_t result = v24;
        if (!v24) {
          uint64_t result = DMAPContentBlock_AddInt32(a1, a2, v17);
        }
        break;
      case 7:
      case 8:
        unint64_t v18 = CFGetInt64((const __CFString *)result, (int *)&v24);
        uint64_t result = v24;
        if (!v24)
        {
          LOBYTE(__src) = HIBYTE(a2);
          BYTE1(__src) = BYTE2(a2);
          BYTE2(__src) = BYTE1(a2);
          HIBYTE(__src) = a2;
          unsigned int v26 = 0x8000000;
          char v27 = HIBYTE(v18);
          char v28 = BYTE6(v18);
          char v29 = BYTE5(v18);
          char v30 = BYTE4(v18);
          char v31 = BYTE3(v18);
          char v32 = BYTE2(v18);
          char v33 = BYTE1(v18);
          char v34 = v18;
          uint64_t v14 = a1;
          size_t v15 = 16LL;
LABEL_17:
          uint64_t result = DMAPContentBlock_AddData(v14, &__src, v15);
        }

        break;
      case 9:
        unsigned int v19 = CFCopyCString((const __CFString *)result, (int *)&v24);
        uint64_t result = v24;
        if (!v24)
        {
          unsigned int __src = bswap32(a2);
          size_t v20 = strlen(v19);
          unsigned int v26 = bswap32(v20);
          unsigned int v21 = DMAPContentBlock_AddData(a1, &__src, 8uLL);
          if (!v21) {
            unsigned int v21 = DMAPContentBlock_AddData(a1, v19, v20);
          }
          unsigned int v24 = v21;
          free(v19);
          uint64_t result = v24;
        }

        break;
      case 10:
        CFTypeID v22 = CFGetTypeID((CFTypeRef)result);
        if (v22 != CFDateGetTypeID()) {
          return 4294960540LL;
        }
        MEMORY[0x186E41D84](v9);
        uint64_t result = DMAPContentBlock_AddInt32(a1, a2, (*MEMORY[0x189604DA8] + v23));
        break;
      default:
        uint64_t result = 4294960561LL;
        break;
    }
  }

  return result;
}

uint64_t DMAPContentBlock_GetNextChunk( unsigned int *a1, unint64_t a2, _DWORD *a3, unint64_t *a4, unsigned int **a5, void *a6)
{
  unint64_t v6 = bswap32(a1[1]);
  char v7 = a1 + 2;
  *a3 = bswap32(*a1);
  *a4 = v6;
  *a5 = v7;
  uint64_t result = 0LL;
  if (a6) {
    *a6 = (char *)v7 + v6;
  }
  return result;
}

uint64_t GetFairPlayHWInfo(_DWORD *a1)
{
  return GetFairPlayHWInfoEx(a1, 0LL, 0LL);
}

uint64_t GetFairPlayHWInfoEx(_DWORD *a1, char *a2, size_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unint64_t v6 = (const __CFString *)MGCopyAnswer();
  if (!v6) {
    return 4294960569LL;
  }
  char v7 = v6;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == CFStringGetTypeID())
  {
    if (CFStringGetCString(v7, buffer, 64LL, 0x600u))
    {
      LODWORD(v9) = (_DWORD)a1 + 4;
      if (buffer[0])
      {
        uint64_t v10 = buffer;
        unint64_t v9 = (unint64_t)(a1 + 1);
        while (v10[1])
        {
          if (v9 >= (unint64_t)(a1 + 6))
          {
            uint64_t v12 = 4294960553LL;
            goto LABEL_13;
          }

          if (sscanf(v10, "%2hhx", v9) != 1)
          {
            uint64_t v12 = 4294960554LL;
            goto LABEL_13;
          }

          ++v9;
          int v11 = v10[2];
          v10 += 2;
          if (!v11) {
            break;
          }
        }
      }

      *a1 = v9 - ((_DWORD)a1 + 4);
      if (a2) {
        strlcpy(a2, buffer, a3);
      }
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = 4294960596LL;
    }
  }

  else
  {
    uint64_t v12 = 4294960540LL;
  }

void sub_186AE672C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE682C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE6A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE6B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE6BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE6C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE6D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE6E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorWithOSStatusF(const char *a1)
{
  if (!(_DWORD)a1) {
    return 0LL;
  }
  NSErrorV((void *)*MEMORY[0x189607670], a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id NSErrorV(void *a1, const char *a2)
{
  v19[3] = *MEMORY[0x1895F89C0];
  unsigned int v3 = a1;
  uint64_t v4 = (__CFString *)v3;
  if ((_DWORD)a2)
  {
    ErrorString = DebugGetErrorStringEx(v3, (int)a2, 0LL, 0LL);
    uint64_t v6 = NSPrintV();
    char v7 = (__CFString *)v6;
    if (*ErrorString)
    {
      __int16 v16 = ErrorString;
      uint64_t v17 = v6;
      uint64_t v8 = NSPrintF();
    }

    else
    {
      __int16 v16 = a2;
      uint64_t v17 = v6;
      uint64_t v8 = NSPrintF();
    }

    uint64_t v10 = (void *)v8;
    id v11 = objc_alloc(MEMORY[0x189607870]);
    v18[0] = @"cuErrorDesc";
    v18[1] = @"cuErrorMsg";
    if (v7) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = &stru_189F34A78;
    }
    v19[0] = v10;
    v19[1] = v12;
    v18[2] = *MEMORY[0x1896075E0];
    v19[2] = v10;
    objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v19, v18, 3, v16, v17);
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = (__CFString *)*MEMORY[0x189607670];
    }
    unint64_t v9 = (void *)[v11 initWithDomain:v14 code:(int)a2 userInfo:v13];
  }

  else
  {
    unint64_t v9 = 0LL;
  }

  return v9;
}

void sub_186AE70D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE7368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE7438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE76DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE7884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE7970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186AE7A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUAddSuffixForCurrentDeviceClass(void *a1)
{
  id v1 = a1;
  if (GestaltGetDeviceClass_sOnce != -1) {
    dispatch_once(&GestaltGetDeviceClass_sOnce, &__block_literal_global_13042);
  }
  CUAddSuffixForDeviceClass(v1, GestaltGetDeviceClass_deviceClass);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_186AE7B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUAddSuffixForDeviceClass(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  int v5 = @"_APPLETV";
  switch(a2)
  {
    case 1:
    case 5:
      goto LABEL_5;
    case 2:
      int v5 = @"_IPOD";
      break;
    case 3:
      int v5 = @"_IPAD";
      break;
    case 4:
      break;
    case 6:
      int v5 = @"_WATCH";
      break;
    case 7:
      int v5 = @"_HOMEPOD";
      break;
    default:
      if (a2 == 100) {
        int v5 = @"_MAC";
      }
      else {
LABEL_5:
      }
        int v5 = @"_IPHONE";
      break;
  }

  [v3 stringByAppendingString:v5];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_186AE7BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CoreUtilsNSSubrangeData *CFDataCreateSubdataWithRangeNoCopy(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v5 = -[CoreUtilsNSSubrangeData initWithData:range:]( objc_alloc(&OBJC_CLASS___CoreUtilsNSSubrangeData),  "initWithData:range:",  a1,  a2,  a3);
  uint64_t v6 = v5;
  if (!v5)
  {
    int v8 = -6728;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  char v7 = v5;
  int v8 = 0;
  if (a4) {
LABEL_3:
  }
    *a4 = v8;
LABEL_4:

  return v6;
}

id CUDescriptionWithLevel(void *a1, uint64_t a2)
{
  id v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a2 > 0x14u)
    {
      if (a2 >= 0x32u && (objc_opt_respondsToSelector() & 1) != 0)
      {
        uint64_t v4 = [v3 shortDescription];
        goto LABEL_10;
      }
    }

    else if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      uint64_t v4 = [v3 detailedDescription];
      goto LABEL_10;
    }

    uint64_t v4 = NSPrintF();
    goto LABEL_10;
  }

  uint64_t v4 = [v3 descriptionWithLevel:a2];
LABEL_10:
  int v5 = (void *)v4;

  return v5;
}

void sub_186AE7D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CUEncodeNSErrorDictionary(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v31 = a2;
  id v12 = a3;
  id v29 = a4;
  id v30 = a5;
  id v13 = a6;
  if (v11)
  {
    uint64_t v14 = *MEMORY[0x189607670];
    uint64_t v15 = (const void *)*MEMORY[0x189607798];
    for (int i = 3; ; --i)
    {
      uint64_t v17 = (void *)MEMORY[0x189607968];
      uint64_t v18 = [v11 code];
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = -6700LL;
      }
      [v17 numberWithInteger:v19];
      size_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      [v31 setObject:v20 forKeyedSubscript:v12];

      [v11 domain];
      unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
      CFTypeID v22 = v21;
      if (v21 && ([v21 isEqual:v14] & 1) == 0) {
        [v31 setObject:v22 forKeyedSubscript:v29];
      }
      [v11 userInfo];
      double v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      CFTypeID TypeID = CFStringGetTypeID();
      CFDictionaryGetTypedValue(v23, @"cuErrorMsg", TypeID, 0LL);
      int v25 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v25 length]) {
        [v31 setObject:v25 forKeyedSubscript:v30];
      }
      if (!i) {
        break;
      }
      CFTypeID v26 = CFErrorGetTypeID();
      uint64_t v27 = CFDictionaryGetTypedValue(v23, v15, v26, 0LL);

      if (!v27)
      {
        id v11 = 0LL;
        break;
      }

      id v28 = objc_alloc_init(MEMORY[0x189603FC8]);
      [v31 setObject:v28 forKeyedSubscript:v13];

      id v31 = v28;
      id v11 = (id)v27;
    }
  }
}

void sub_186AE7F3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

id CUDecodeNSErrorDictionary(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v60[1] = *(id *)MEMORY[0x1895F89C0];
  unint64_t v9 = a1;
  id v10 = a2;
  id v46 = a3;
  id v45 = a4;
  id v11 = a5;
  int v40 = v9;
  socklen_t v47 = v10;
  CFDictionaryGetInt64Ranged(v9, v10, 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, &v50);
  if (v50)
  {
    id v12 = 0LL;
  }

  else
  {
    uint64_t v39 = v11;
    unsigned int v58 = 0LL;
    uint64_t v59 = 0LL;
    v60[0] = 0LL;
    int v57 = v9;
    id v13 = v57;
    if (v57)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      TypedValue = CFDictionaryGetTypedValue(v13, v39, TypeID, 0LL);
    }

    else
    {
      TypedValue = 0LL;
    }

    objc_storeStrong((id *)&v58, TypedValue);
    __int16 v16 = v58;
    if (v58)
    {
      CFTypeID v17 = CFDictionaryGetTypeID();
      uint64_t v18 = CFDictionaryGetTypedValue(v16, v39, v17, 0LL);
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    objc_storeStrong((id *)&v59, v18);
    uint64_t v19 = v59;
    if (v59)
    {
      CFTypeID v20 = CFDictionaryGetTypeID();
      unsigned int v21 = CFDictionaryGetTypedValue(v19, v39, v20, 0LL);
    }

    else
    {
      unsigned int v21 = 0LL;
    }

    objc_storeStrong(v60, v21);
    id v12 = 0LL;
    int v44 = (void *)*MEMORY[0x189607670];
    uint64_t v41 = *MEMORY[0x189607798];
    for (uint64_t i = 24LL; i != -8; i -= 8LL)
    {
      double v23 = *(const __CFDictionary **)((char *)&v57 + i);
      unsigned int v24 = v23;
      if (v23)
      {
        int v49 = v12;
        int Int64Ranged = CFDictionaryGetInt64Ranged(v23, v47, 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
        CFTypeID v26 = CFStringGetTypeID();
        CFDictionaryGetTypedValue(v24, v46, v26, 0LL);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
        CFTypeID v28 = CFStringGetTypeID();
        CFDictionaryGetTypedValue(v24, v45, v28, 0LL);
        id v29 = (void *)objc_claimAutoreleasedReturnValue();
        id v30 = objc_alloc(MEMORY[0x189607870]);
        if (v27) {
          id v31 = v27;
        }
        else {
          id v31 = v44;
        }
        if (v12)
        {
          if ([v29 length])
          {
            v55[0] = v41;
            v55[1] = @"cuErrorMsg";
            v56[0] = v12;
            v56[1] = v29;
            [MEMORY[0x189603F68] dictionaryWithObjects:v56 forKeys:v55 count:2];
            int v48 = (void *)objc_claimAutoreleasedReturnValue();
            int v32 = 0;
            int v33 = 0;
            int v34 = 1;
            uint64_t v35 = v48;
          }

          else
          {
            uint64_t v53 = v41;
            uint64_t v54 = v12;
            int v32 = 1;
            [MEMORY[0x189603F68] dictionaryWithObjects:&v54 forKeys:&v53 count:1];
            int v34 = 0;
            int v33 = 0;
            int v42 = (void *)objc_claimAutoreleasedReturnValue();
            uint64_t v35 = v42;
          }
        }

        else if ([v29 length])
        {
          int v51 = @"cuErrorMsg";
          uint64_t v52 = v29;
          int v33 = 1;
          [MEMORY[0x189603F68] dictionaryWithObjects:&v52 forKeys:&v51 count:1];
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
          int v34 = 0;
          int v32 = 0;
          uint64_t v35 = v43;
        }

        else
        {
          int v34 = 0;
          int v32 = 0;
          int v33 = 0;
          uint64_t v35 = 0LL;
        }

        uint64_t v36 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, Int64Ranged, v35, v39);

        if (v33) {
        if (v32)
        }

        if (v34) {
        id v12 = (void *)v36;
        }
      }
    }

    for (uint64_t j = 24LL; j != -8; j -= 8LL)

    id v11 = (id)v39;
  }

  return v12;
}

void sub_186AE83A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

id CULocalizedString(void *a1)
{
  id v1 = a1;
  if (CULocalizedString_sOnce != -1) {
    dispatch_once(&CULocalizedString_sOnce, &__block_literal_global_10597);
  }
  if (!CULocalizedString_bundle)
  {
    id v13 = v1;
    goto LABEL_27;
  }

  [(id)CULocalizedString_bundle localizations];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  id v3 = (void *)CFPreferencesCopyValue( @"AppleLanguages",  (CFStringRef)*MEMORY[0x189605170],  @"mobile",  (CFStringRef)*MEMORY[0x189605178]);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }

  else
  {
    [MEMORY[0x189603F90] preferredLanguages];
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }

  uint64_t v6 = v5;

  char v7 = &gTUExitCode;
  if (v2)
  {
    if (v6)
    {
      [MEMORY[0x1896077F8] preferredLocalizationsFromArray:v2 forPreferences:v6];
      int v8 = (void *)objc_claimAutoreleasedReturnValue();
      [v8 firstObject];
      unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();

      char v7 = &gTUExitCode;
      if (v9)
      {
        [(id)CULocalizedString_bundle pathForResource:@"Localizable" ofType:@"strings" inDirectory:@"." forLocalization:v9];
        id v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          id v11 = (void *)[objc_alloc(MEMORY[0x189603F68]) initWithContentsOfFile:v10];
          if (CUIsGreenTeaDevice_sOnce != -1) {
            dispatch_once(&CUIsGreenTeaDevice_sOnce, &__block_literal_global_57);
          }
          if (!CUIsGreenTeaDevice_sResult
            || ([v1 stringByAppendingString:@"_GT"],
                id v12 = (void *)objc_claimAutoreleasedReturnValue(),
                [v11 objectForKeyedSubscript:v12],
                id v13 = (id)objc_claimAutoreleasedReturnValue(),
                v12,
                !v13))
          {
            [v11 objectForKeyedSubscript:v1];
            id v13 = (id)objc_claimAutoreleasedReturnValue();
          }

          char v7 = &gTUExitCode;
          if (v13) {
            goto LABEL_26;
          }
        }

        else
        {

          char v7 = &gTUExitCode;
        }
      }
    }
  }

  if (CUIsGreenTeaDevice_sOnce != -1) {
    dispatch_once(&CUIsGreenTeaDevice_sOnce, &__block_literal_global_57);
  }
  if (!*((_BYTE *)v7 + 3932)) {
    goto LABEL_25;
  }
  [v1 stringByAppendingString:@"_GT"];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  [(id)CULocalizedString_bundle localizedStringForKey:v14 value:@"_GT" table:@"Localizable"];
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  if ([v13 isEqual:@"_GT"])
  {

LABEL_25:
    [(id)CULocalizedString_bundle localizedStringForKey:v1 value:&stru_189F34A78 table:@"Localizable"];
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_26;
  }

  if (!v13) {
    goto LABEL_25;
  }
LABEL_26:

LABEL_27:
  return v13;
}

void sub_186AE874C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __CULocalizedString_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1896077F8] bundleWithIdentifier:@"com.apple.CoreUtils"];
  id v1 = (void *)CULocalizedString_bundle;
  CULocalizedString_bundle = v0;
}

id CULocalizedStringEx(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (CUIsGreenTeaDevice_sOnce != -1) {
    dispatch_once(&CUIsGreenTeaDevice_sOnce, &__block_literal_global_57);
  }
  if (!CUIsGreenTeaDevice_sResult) {
    goto LABEL_6;
  }
  [v7 stringByAppendingString:@"_GT"];
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  [v5 localizedStringForKey:v8 value:@"_GT" table:v6];
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ([v9 isEqual:@"_GT"])
  {

LABEL_6:
    id v10 = 0LL;
    goto LABEL_8;
  }

  id v10 = v9;
LABEL_8:
  if (![v10 length])
  {
    uint64_t v11 = [v5 localizedStringForKey:v7 value:&stru_189F34A78 table:v6];

    id v10 = (void *)v11;
  }

  if (v10) {
    id v12 = v10;
  }
  else {
    id v12 = v7;
  }
  id v13 = v12;

  return v13;
}

void sub_186AE893C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUNormalizeEmailAddress(void *a1, int a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = v3;
  if (a2
    && (([v3 hasSuffix:@"@me.com"] & 1) != 0
     || [v4 hasSuffix:@"@mac.com"]))
  {
    [v4 componentsSeparatedByString:@"@"];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v5 count])
    {
      id v6 = (void *)NSString;
      [v5 objectAtIndexedSubscript:0];
      id v7 = (void *)objc_claimAutoreleasedReturnValue();
      [v6 stringWithFormat:@"%@@icloud.com", v7];
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      id v8 = v4;
    }
  }

  else
  {
    id v8 = v4;
  }

  return v8;
}

void sub_186AE8A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CUNormalizePhoneNumber(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)softLinkCPPhoneNumberCopyActiveCountryCode[0]();
  id v3 = (void *)((uint64_t (*)(uint64_t, uint64_t))softLinkPNCopyBestGuessNormalizedNumberForCountry[0])( (uint64_t)v1,  (uint64_t)v2);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = [NSString stringWithUTF8String:v3];
  id v5 = (void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreate[0])(0LL, v4, (uint64_t)v2);
  free(v3);
  if (!v5) {
    goto LABEL_5;
  }
  String = (void *)softLinkCFPhoneNumberCreateString(0LL, (uint64_t)v5, 2LL);
  CFRelease(v5);
  if (String)
  {
    [MEMORY[0x189607810] characterSetWithCharactersInString:@"+"];
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    [String stringByTrimmingCharactersInSet:v7];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
LABEL_9:
    id v5 = 0LL;
  }

void sub_186AE8B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initCFPhoneNumberCreateString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CorePhoneNumbersLibrary_sOnce != -1) {
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_218);
  }
  softLinkCFPhoneNumberCreateString = (uint64_t (*)())dlsym( (void *)CorePhoneNumbersLibrary_sLib,  "CFPhoneNumberCreateString");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreateString)(a1, a2, a3);
}

void *__CorePhoneNumbersLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CorePhoneNumbers.framework/CorePhoneNumbers", 2);
  CorePhoneNumbersLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initCFPhoneNumberCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CorePhoneNumbersLibrary_sOnce != -1) {
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_218);
  }
  softLinkCFPhoneNumberCreate[0] = (uint64_t (*)())dlsym( (void *)CorePhoneNumbersLibrary_sLib,  "CFPhoneNumberCreate");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))softLinkCFPhoneNumberCreate[0])(a1, a2, a3);
}

uint64_t initPNCopyBestGuessNormalizedNumberForCountry(uint64_t a1, uint64_t a2)
{
  if (CorePhoneNumbersLibrary_sOnce != -1) {
    dispatch_once(&CorePhoneNumbersLibrary_sOnce, &__block_literal_global_218);
  }
  softLinkPNCopyBestGuessNormalizedNumberForCountry[0] = (uint64_t (*)())dlsym( (void *)CorePhoneNumbersLibrary_sLib,  "PNCopyBestGuessNormalizedNumberForCountry");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkPNCopyBestGuessNormalizedNumberForCountry[0])(a1, a2);
}

uint64_t initCPPhoneNumberCopyActiveCountryCode()
{
  if (AppSupportLibrary_sOnce != -1) {
    dispatch_once(&AppSupportLibrary_sOnce, &__block_literal_global_215_10628);
  }
  softLinkCPPhoneNumberCopyActiveCountryCode[0] = (uint64_t (*)())dlsym( (void *)AppSupportLibrary_sLib,  "CPPhoneNumberCopyActiveCountryCode");
  return softLinkCPPhoneNumberCopyActiveCountryCode[0]();
}

void *__AppSupportLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AppSupport.framework/AppSupport", 2);
  AppSupportLibrary_sLib = (uint64_t)result;
  return result;
}

id CURandomString()
{
  v6[1] = *MEMORY[0x1895F89C0];
  uint64_t v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = (char *)v6 - ((v1 + 16) & 0xFFFFFFFFFFFFFFF0LL);
  char *v2 = 0;
  RandomString(v0, v3, v4, v1, v2);
  return (id)[objc_alloc(NSString) initWithUTF8String:v2];
}

CFMutableStringRef CUStateDumpWithObject(uint64_t a1, void *a2, int *a3)
{
  id v9 = a2;
  if (a3 && *a3 <= 50 && (*a3 != -1 || _LogCategory_Initialize((uint64_t)a3, 0x32u))) {
    LogPrintF( (uint64_t)a3,  (uint64_t)"struct os_state_data_s *CUStateDumpWithObject(const char *, __strong id, LogCategory *)",  0x32u,  (uint64_t)"State dump: %s\n",  v5,  v6,  v7,  v8,  a1);
  }
  CFMutableStringRef v35 = 0LL;
  NSAppendPrintF(&v35);
  id v10 = v35;
  uint64_t v11 = CUDescriptionWithLevel(v9, 0LL);
  id v12 = (void *)v11;
  if (v11)
  {
    CFMutableStringRef v34 = v10;
    uint64_t v31 = v11;
    NSAppendPrintF(&v34);
    CFMutableStringRef v13 = v34;

    if (!v13) {
      goto LABEL_21;
    }
  }

  else
  {
    CFMutableStringRef v13 = v10;
    if (!v10) {
      goto LABEL_21;
    }
  }

  unint64_t v18 = -[__CFString length](v13, "length", v31);
  if (v18 >= 0x7C19)
  {
    if (a3 && *a3 <= 90 && (*a3 != -1 || _LogCategory_Initialize((uint64_t)a3, 0x5Au))) {
      LogPrintF( (uint64_t)a3,  (uint64_t)"struct os_state_data_s *CUStateDumpWithObject(const char *, __strong id, LogCategory *)",  0x5Au,  (uint64_t)"### Statedump truncate: %s, %zu -> %zu\n",  v14,  v15,  v16,  v17,  a1);
    }
    v36.size_t length = v18 - 31768;
    v36.location = 31768LL;
    CFStringDelete(v13, v36);
    CFMutableStringRef v33 = v13;
    NSAppendPrintF(&v33);
    uint64_t v19 = v33;

    CFMutableStringRef v13 = v19;
  }

  CFMutableStringRef v32 = v13;
  NSAppendPrintF(&v32);
  CFTypeID v20 = v32;

  objc_msgSend(MEMORY[0x1896079E8], "dataWithPropertyList:format:options:error:", v20, 100, 0, 0, a1);
  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue();
  CFTypeID v22 = v21;
  if (v21)
  {
    size_t v23 = [v21 length];
    unsigned int v24 = (__CFString *)calloc(1uLL, v23 + 200);
    CFMutableStringRef v13 = v24;
    if (v24)
    {
      LODWORD(v24->isa) = 1;
      HIDWORD(v24->isa) = v23;
      SNPrintF((uint64_t)&v24[4].info, 64LL, "%s State", v25, v26, v27, v28, v29, a1);
      memcpy(&v13[6].info, (const void *)[v22 bytes], v23);
    }
  }

  else
  {
    CFMutableStringRef v13 = 0LL;
  }

LABEL_21:
  return v13;
}

void sub_186AE90EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CUTXTDataCreateWithDictionary(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = objc_alloc_init(MEMORY[0x189603FB8]);
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x3032000000LL;
  CFMutableStringRef v13 = __Block_byref_object_copy__10642;
  uint64_t v14 = __Block_byref_object_dispose__10643;
  id v15 = 0LL;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 3221225472LL;
  void v9[2] = __CUTXTDataCreateWithDictionary_block_invoke;
  _DWORD v9[3] = &unk_189F33460;
  void v9[4] = v5;
  v9[5] = &v10;
  [v4 enumerateKeysAndObjectsUsingBlock:v9];
  uint64_t v6 = (void *)v11[5];
  if (a3 && v6)
  {
    *a3 = v6;
    uint64_t v6 = (void *)v11[5];
  }

  if (v6) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = [v5 copy];
  }
  _Block_object_dispose(&v10, 8);

  return v7;
}

void sub_186AE9240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10642(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__10643(uint64_t a1)
{
}

void __CUTXTDataCreateWithDictionary_block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  CFMutableStringRef v13 = *(void **)(v10 + 40);
  uint64_t v11 = (id *)(v10 + 40);
  id v12 = v13;
  id v14 = v7;
  id v15 = v8;
  id v16 = v9;
  unsigned __int8 v28 = 0;
  [v16 appendBytes:&v28 length:1];
  uint64_t v17 = [v16 length];
  if (!v17)
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5B8LL);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_17:
    id v12 = v26;
    goto LABEL_12;
  }

  unint64_t v18 = (const char *)[v14 UTF8String];
  size_t v19 = strlen(v18);
  char v20 = v19;
  if (v19 > (v28 ^ 0xFFuLL))
  {
LABEL_16:
    NSErrorWithOSStatusF((const char *)0xFFFFE5A9LL);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }

  [v16 appendBytes:v18 length:v19];
  v28 += v20;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (v28 != 255)
    {
      [v16 appendBytes:"=" length:1];
      ++v28;
      unsigned int v21 = (const char *)[v15 UTF8String];
      size_t v22 = strlen(v21);
      char v23 = v22;
      if (v22 <= (v28 ^ 0xFFuLL))
      {
        [v16 appendBytes:v21 length:v22];
        unsigned __int8 v24 = v28 + v23;
        unsigned __int8 v28 = v24;
LABEL_10:
        *(_BYTE *)([v16 mutableBytes] + v17 - 1) = v24;
        goto LABEL_12;
      }
    }

    goto LABEL_16;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v15 BOOLValue])
  {
    unsigned __int8 v24 = v28;
    goto LABEL_10;
  }

  uint64_t v25 = (objc_class *)objc_opt_class();
  NSStringFromClass(v25);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  NSErrorWithOSStatusF((const char *)0xFFFFE59CLL);
  id v12 = (id)objc_claimAutoreleasedReturnValue();

LABEL_12:
  objc_storeStrong(v11, v12);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)) {
    *a4 = 1;
  }
}

void sub_186AE953C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CUTXTDictionaryCreateWithTXTData(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = (_BYTE *)[v4 bytes];
  uint64_t v6 = [v4 length];
  id v7 = objc_alloc_init(MEMORY[0x189603FC8]);
  if (v6)
  {
    id v8 = &v5[v6];
    uint64_t v9 = MEMORY[0x189604A88];
    while (1)
    {
      uint64_t v11 = v5 + 1;
      uint64_t v10 = *v5;
      if (v8 - (v5 + 1) < v10) {
        break;
      }
      uint64_t v12 = (uint64_t)&v5[v10 + 1];
      if (*v5)
      {
        ++v5;
        while (1)
        {
          int v13 = *v5;
          BOOL v14 = v13 != 61;
          if (v13 == 61) {
            break;
          }
          ++v5;
          if (!--v10)
          {
            BOOL v14 = 1;
            id v5 = (_BYTE *)v12;
            break;
          }
        }
      }

      else
      {
        BOOL v14 = 1;
        ++v5;
      }

      id v15 = (void *)[objc_alloc(NSString) initWithBytes:v11 length:v5 - v11 encoding:4];
      if (!v15)
      {
        if (a3)
        {
          NSErrorWithOSStatusF((const char *)0xFFFFE5AALL);
          size_t v19 = (void *)objc_claimAutoreleasedReturnValue();
          id v15 = 0LL;
          goto LABEL_24;
        }

        id v15 = 0LL;
LABEL_26:

        goto LABEL_27;
      }

      if (v14)
      {
        [v7 setObject:v9 forKeyedSubscript:v15];
      }

      else
      {
        id v16 = (void *)[objc_alloc(NSString) initWithBytes:v5 + 1 length:v12 - (void)(v5 + 1) encoding:4];
        if (!v16)
        {
          if (a3)
          {
            NSErrorWithOSStatusF((const char *)0xFFFFE5AALL);
            size_t v19 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_24:
            *a3 = v19;
          }

          goto LABEL_26;
        }

        [v7 setObject:v16 forKeyedSubscript:v15];

        id v5 = (_BYTE *)v12;
      }

      if (v5 == v8) {
        goto LABEL_16;
      }
    }

    if (a3)
    {
      NSErrorWithOSStatusF((const char *)0xFFFFE5A2LL);
      uint64_t v17 = 0LL;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }

void sub_186AE9768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSArrayGetNSUUIDAtIndex(void *a1, uint64_t a2, int *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    [v5 objectAtIndexedSubscript:a2];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        id v7 = v7;
        int v8 = 0;
        uint64_t v9 = v7;
      }

      else
      {
        CFTypeID v10 = CFGetTypeID(v7);
        if (v10 == CFUUIDGetTypeID())
        {
          CFUUIDBytes v12 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
          uint64_t v9 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:&v12];
          int v8 = 0;
        }

        else
        {
          uint64_t v9 = 0LL;
          int v8 = -6756;
        }
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      int v8 = -6727;
    }
  }

  else
  {
    id v7 = 0LL;
    uint64_t v9 = 0LL;
    int v8 = -6705;
  }

  if (a3) {
    *a3 = v8;
  }

  return v9;
}

void sub_186AE990C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSArrayGetValueAtIndexOfClass(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  id v6 = a1;
  id v7 = v6;
  if (v6)
  {
    [v6 objectAtIndexedSubscript:a2];
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        id v8 = v8;
        int v9 = 0;
        CFTypeID v10 = v8;
      }

      else
      {
        CFTypeID v10 = 0LL;
        int v9 = -6756;
      }
    }

    else
    {
      CFTypeID v10 = 0LL;
      int v9 = -6727;
    }
  }

  else
  {
    id v8 = 0LL;
    CFTypeID v10 = 0LL;
    int v9 = -6705;
  }

  if (a4) {
    *a4 = v9;
  }

  return v10;
}

void sub_186AE99F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NSArrayValidateClasses(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v25 = a3;
  id v8 = a4;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v10)
  {
    int v24 = a2;
    uint64_t v11 = *(void *)v31;
    while (1)
    {
      uint64_t v12 = 0LL;
LABEL_4:
      if (*(void *)v31 != v11) {
        objc_enumerationMutation(v9);
      }
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      id v13 = v8;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (!v14) {
        break;
      }
      uint64_t v15 = *(void *)v27;
LABEL_8:
      uint64_t v16 = 0LL;
      while (1)
      {
        if (*(void *)v27 != v15) {
          objc_enumerationMutation(v13);
        }
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          break;
        }
        if (v14 == ++v16)
        {
          uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
          if (v14) {
            goto LABEL_8;
          }
          goto LABEL_18;
        }
      }

      if (++v12 != v10) {
        goto LABEL_4;
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
      uint64_t v17 = 1LL;
      if (!v10) {
        goto LABEL_22;
      }
    }

void sub_186AE9C60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id NSDataCompress(void *a1, char a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 length];
  uInt v7 = v6;
  if (v6)
  {
    id v8 = (void *)[objc_alloc(MEMORY[0x189603FB8]) initWithLength:0x4000];
    memset(&v21.next_out, 0, 88);
    v21.avail_out = v7;
    v21.next_in = (Bytef *)[v5 bytes];
    id v9 = v8;
    v21.next_out = (Bytef *)objc_msgSend(v9, "mutableBytes", v21.next_in, v7, 0, 0, *(void *)&v21.avail_out);
    if ((a2 & 2) != 0) {
      int v10 = 9;
    }
    else {
      int v10 = -1;
    }
    if ((a2 & 1) != 0) {
      int v11 = 15;
    }
    else {
      int v11 = 31;
    }
    uint64_t v12 = (const char *)deflateInit2_(&v21, v10, 8, v11, 8, 0, "1.2.12", 112);
    if ((_DWORD)v12)
    {
      NSErrorWithOSStatusF(v12);
      char v20 = (void *)objc_claimAutoreleasedReturnValue();
      id v18 = v20;
      id v17 = 0LL;
      if (a3 && v20)
      {
        id v18 = v20;
        id v17 = 0LL;
        *a3 = v18;
      }
    }

    else
    {
      do
      {
        uLong total_out = v21.total_out;
        if (total_out >= [v9 length]) {
          [v9 increaseLengthBy:0x4000];
        }
        id v14 = v9;
        uint64_t v15 = [v14 mutableBytes];
        v21.next_out = (Bytef *)(v15 + v21.total_out);
        int v16 = [v14 length];
        v21.avail_out = v16 - LODWORD(v21.total_out);
        deflate(&v21, 4);
      }

      while (!v21.avail_out);
      deflateEnd(&v21);
      [v14 setLength:v21.total_out];
      id v17 = (id)[objc_alloc(MEMORY[0x189603F48]) initWithData:v14];
      id v18 = 0LL;
      id v9 = v14;
    }
  }

  else
  {
    id v9 = 0LL;
    id v17 = objc_alloc_init(MEMORY[0x189603F48]);
    id v18 = 0LL;
  }

  return v17;
}

void sub_186AE9ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDataDecompress(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  unint64_t v5 = [v4 length];
  if (v5)
  {
    if (v5 >= 0x8000) {
      uint64_t v6 = 0x4000LL;
    }
    else {
      uint64_t v6 = v5 >> 1;
    }
    uInt v7 = (void *)[objc_alloc(MEMORY[0x189603FB8]) initWithLength:v5];
    id v8 = v4;
    v18.avail_in = objc_msgSend( v8,  "length",  objc_msgSend(v8, "bytes"),  (unsigned __int128)0,  (unsigned __int128)0,  (unsigned __int128)0,  (unsigned __int128)0,  (unsigned __int128)0,  (unsigned __int128)0,  0);
    v18.uLong total_out = 0LL;
    id v9 = (const char *)inflateInit2_(&v18, 47, "1.2.12", 112);
    if ((_DWORD)v9) {
      goto LABEL_15;
    }
    while (1)
    {
      uLong total_out = v18.total_out;
      if (total_out >= [v7 length]) {
        [v7 increaseLengthBy:v6];
      }
      id v11 = v7;
      uint64_t v12 = [v11 mutableBytes];
      v18.next_out = (Bytef *)(v12 + v18.total_out);
      int v13 = [v11 length];
      v18.avail_out = v13 - LODWORD(v18.total_out);
      id v9 = (const char *)inflate(&v18, 2);
      if ((_DWORD)v9 == 1) {
        break;
      }
      if ((_DWORD)v9) {
        goto LABEL_15;
      }
    }

    id v9 = (const char *)inflateEnd(&v18);
    if ((_DWORD)v9)
    {
LABEL_15:
      NSErrorWithOSStatusF(v9);
      id v17 = (void *)objc_claimAutoreleasedReturnValue();
      id v15 = v17;
      id v14 = 0LL;
      if (a3 && v17)
      {
        id v15 = v17;
        id v14 = 0LL;
        *a3 = v15;
      }

      id v11 = v7;
    }

    else
    {
      [v11 setLength:v18.total_out];
      id v14 = (id)[objc_alloc(MEMORY[0x189603F48]) initWithData:v11];
      id v15 = 0LL;
    }
  }

  else
  {
    id v11 = 0LL;
    id v14 = objc_alloc_init(MEMORY[0x189603F48]);
    id v15 = 0LL;
  }

  return v14;
}

void sub_186AEA0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDataWithHex(char *a1, int64_t a2, char a3, char **a4, int *a5)
{
  uint64_t v12 = 0LL;
  int v6 = HexToDataCopy(a1, a2, a3, &v12, &v11, a4);
  if (v6)
  {
    int v9 = v6;
    uInt v7 = v12;
    goto LABEL_8;
  }

  uInt v7 = v12;
  [MEMORY[0x189603F48] dataWithBytesNoCopy:v12 length:v11];
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    int v9 = -6728;
LABEL_8:
    if (v7) {
      free(v7);
    }
    id v8 = 0LL;
    if (a5) {
      goto LABEL_4;
    }
    return v8;
  }

  int v9 = 0;
  if (a5) {
LABEL_4:
  }
    *a5 = v9;
  return v8;
}

void NSDecodeNSArrayOfClassIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v7 = a2;
  id v25 = v6;
  if ([v6 containsValueForKey:v7])
  {
    uint64_t v8 = objc_msgSend(MEMORY[0x189604010], "setWithObjects:", objc_opt_class(), a3, 0);
    [v25 decodeObjectOfClasses:v8 forKey:v7];
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    char v23 = (void *)v8;
    unint64_t v11 = (uint64_t *)MEMORY[0x189603A60];
    if ((isKindOfClass & 1) == 0)
    {
      uint64_t v12 = (void *)MEMORY[0x189603F70];
      int v13 = (objc_class *)objc_opt_class();
      NSStringFromClass(v13);
      id v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v12 raise:*v11, @"bad array type for key %@, class %@", v7, v14 format];
    }

    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v15 = v9;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v27;
      uint64_t v18 = *v11;
      do
      {
        for (uint64_t i = 0LL; i != v16; ++i)
        {
          if (*(void *)v27 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            [MEMORY[0x189603F70] raise:v18, @"bad array element type for key %@ : %@", v7, v20 format];
          }
        }

        uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }

      while (v16);
    }

    z_stream v21 = *a4;
    *a4 = v15;
    id v22 = v15;
  }
}

void sub_186AEA414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void NSDecodeNSDictionaryOfClassesIfPresent(void *a1, void *a2, uint64_t a3, uint64_t a4, void **a5)
{
  id v8 = a1;
  id v9 = a2;
  uint64_t v26 = 0LL;
  __int128 v27 = &v26;
  uint64_t v28 = 0x2020000000LL;
  char v29 = 0;
  if ([v8 containsValueForKey:v9])
  {
    objc_msgSend(MEMORY[0x189604010], "setWithObjects:", objc_opt_class(), a3, a4, 0);
    int v10 = (void *)objc_claimAutoreleasedReturnValue();
    [v8 decodeObjectOfClasses:v10 forKey:v9];
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    int v13 = (void *)MEMORY[0x189603A60];
    if ((isKindOfClass & 1) == 0)
    {
      id v14 = (void *)MEMORY[0x189603F70];
      id v15 = (objc_class *)objc_opt_class();
      NSStringFromClass(v15);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
      [v14 raise:*MEMORY[0x189603A60], @"bad dictionary type for key %@, %@", v9, v16 format];

      int v13 = (void *)MEMORY[0x189603A60];
    }

    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = __NSDecodeNSDictionaryOfClassesIfPresent_block_invoke;
    v21[3] = &unk_189F33488;
    uint64_t v24 = a3;
    id v17 = v9;
    id v22 = v17;
    char v23 = &v26;
    uint64_t v25 = a4;
    [v11 enumerateKeysAndObjectsUsingBlock:v21];
    if (*((_BYTE *)v27 + 24)) {
      [MEMORY[0x189603F70] raise:*v13, @"bad element type for key %@", v17 format];
    }
    uint64_t v18 = *a5;
    *a5 = v11;
    id v19 = v11;
  }

  _Block_object_dispose(&v26, 8);
}

void sub_186AEA694( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __NSDecodeNSDictionaryOfClassesIfPresent_block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8 = a2;
  id v7 = a3;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    [MEMORY[0x189603F70] raise:*MEMORY[0x189603A60], @"bad key element type for key %@ : %@", *(void *)(a1 + 32), v8 format];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    [MEMORY[0x189603F70] raise:*MEMORY[0x189603A60], @"bad value element type for key %@ : %@ -> %@", *(void *)(a1 + 32), v8, v7 format];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_186AEA7D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void NSDecodeNSSetOfClassIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v7 = a2;
  uint64_t v25 = v6;
  if ([v6 containsValueForKey:v7])
  {
    uint64_t v8 = objc_msgSend(MEMORY[0x189604010], "setWithObjects:", objc_opt_class(), a3, 0);
    [v25 decodeObjectOfClasses:v8 forKey:v7];
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    char v23 = (void *)v8;
    unint64_t v11 = (uint64_t *)MEMORY[0x189603A60];
    if ((isKindOfClass & 1) == 0)
    {
      uint64_t v12 = (void *)MEMORY[0x189603F70];
      int v13 = (objc_class *)objc_opt_class();
      NSStringFromClass(v13);
      id v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v12 raise:*v11, @"bad set type for key %@, %@", v7, v14 format];
    }

    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v15 = v9;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v27;
      uint64_t v18 = *v11;
      do
      {
        for (uint64_t i = 0LL; i != v16; ++i)
        {
          if (*(void *)v27 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            [MEMORY[0x189603F70] raise:v18, @"bad set element type for key %@ : %@", v7, v20 format];
          }
        }

        uint64_t v16 = [v15 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }

      while (v16);
    }

    z_stream v21 = *a4;
    *a4 = v15;
    id v22 = v15;
  }
}

void sub_186AEAA4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void NSDecodeObjectIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v11 = a1;
  id v7 = a2;
  if ([v11 containsValueForKey:v7])
  {
    [v11 decodeObjectOfClass:a3 forKey:v7];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x189603F70] raise:*MEMORY[0x189603A60], @"bad type for key %@", v7 format];
    }
    id v9 = *a4;
    *a4 = v8;
    id v10 = v8;
  }
}

void sub_186AEAB74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t NSDecodeSInt64RangedIfPresent(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  id v9 = a1;
  id v10 = a2;
  uint64_t v11 = [v9 containsValueForKey:v10];
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = [v9 decodeInt64ForKey:v10];
    uint64_t v13 = v12;
    if (v12 < a3 || v12 > a4) {
      [MEMORY[0x189603F70] raise:*MEMORY[0x189603A60], @"Key '%@', value (%lld) out-of-range (%lld - %lld)", v10, v12, a3, a4 format];
    }
    *a5 = v13;
  }

  return v11;
}

void sub_186AEAC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void NSDecodeStandardContainerIfPresent(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v19 = a1;
  id v6 = a2;
  if ([v19 containsValueForKey:v6])
  {
    uint64_t v18 = (void *)MEMORY[0x189604010];
    uint64_t v17 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = objc_opt_class();
    objc_msgSend(v18, "setWithObjects:", v17, v7, v8, v9, v10, v11, v12, objc_opt_class(), 0);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v19 decodeObjectOfClasses:v13 forKey:v6];
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      [MEMORY[0x189603F70] raise:*MEMORY[0x189603A60], @"bad type for key %@ : %@", v6, v14 format];
    }
    id v15 = *a4;
    *a4 = v14;
    id v16 = v14;
  }
}

void sub_186AEAE50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

id NSDictionaryGetNSArrayOfClass(void *a1, void *a2, uint64_t a3, int *a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v6 = a1;
  id v7 = a2;
  [v6 objectForKeyedSubscript:v7];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    id v13 = 0LL;
    int v14 = -6727;
    if (!a4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_14:
    id v13 = 0LL;
    int v14 = -6756;
    if (!a4) {
      goto LABEL_16;
    }
LABEL_15:
    *a4 = v14;
    goto LABEL_16;
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v9 = v8;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0LL; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v9);
        }
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {

          goto LABEL_14;
        }
      }

      uint64_t v10 = [v9 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

  id v13 = v9;
  int v14 = 0;
  if (a4) {
    goto LABEL_15;
  }
LABEL_16:

  return v13;
}

void sub_186AEB010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDictionaryGetNSUUID(void *a1, void *a2, int *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  if (v5)
  {
    [v5 objectForKeyedSubscript:v6];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        id v7 = v7;
        int v8 = 0;
        id v9 = v7;
      }

      else
      {
        CFTypeID v10 = CFGetTypeID(v7);
        if (v10 == CFUUIDGetTypeID())
        {
          CFUUIDBytes v12 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
          id v9 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:&v12];
          int v8 = 0;
        }

        else
        {
          id v9 = 0LL;
          int v8 = -6756;
        }
      }
    }

    else
    {
      id v9 = 0LL;
      int v8 = -6727;
    }
  }

  else
  {
    id v7 = 0LL;
    id v9 = 0LL;
    int v8 = -6705;
  }

  if (a3) {
    *a3 = v8;
  }

  return v9;
}

void sub_186AEB19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSDictionaryGetValueOfClass(void *a1, void *a2, uint64_t a3, int *a4)
{
  id v6 = a1;
  id v7 = a2;
  if (v6)
  {
    [v6 objectForKeyedSubscript:v7];
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        id v8 = v8;
        int v9 = 0;
        CFTypeID v10 = v8;
      }

      else
      {
        CFTypeID v10 = 0LL;
        int v9 = -6756;
      }
    }

    else
    {
      CFTypeID v10 = 0LL;
      int v9 = -6727;
    }
  }

  else
  {
    id v8 = 0LL;
    CFTypeID v10 = 0LL;
    int v9 = -6705;
  }

  if (a4) {
    *a4 = v9;
  }

  return v10;
}

void sub_186AEB294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NSDictionaryValidateClasses(void *a1, int a2, void *a3, void *a4, void *a5)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v35 = a3;
  id v10 = a4;
  id v36 = a5;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id v11 = v9;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v51 count:16];
  if (!v12)
  {
    uint64_t v25 = 1LL;
    goto LABEL_35;
  }

  int v34 = a2;
  uint64_t v13 = *(void *)v46;
  while (2)
  {
    uint64_t v14 = 0LL;
    while (2)
    {
      if (*(void *)v46 != v13) {
        objc_enumerationMutation(v11);
      }
      uint64_t v15 = *(void *)(*((void *)&v45 + 1) + 8 * v14);
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      id v16 = v10;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v41 objects:v50 count:16];
      if (!v17)
      {
LABEL_28:

        if (!v34)
        {
          uint64_t v20 = 0LL;
          goto LABEL_34;
        }

        __int128 v26 = (void *)MEMORY[0x189603F70];
        __int128 v27 = (objc_class *)objc_opt_class();
        NSStringFromClass(v27);
        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue();
        [v16 allObjects];
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "componentsJoinedByString:", @", ");
        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue();
        [v26 raise:*MEMORY[0x189603A60], @"'%@' dictionary contained unexpected key type %@, allowed types: %@", v35, v28, v30 format];
        uint64_t v20 = 0LL;
LABEL_32:

LABEL_34:
        uint64_t v25 = 0LL;
        goto LABEL_35;
      }

      uint64_t v18 = *(void *)v42;
LABEL_8:
      uint64_t v19 = 0LL;
      while (1)
      {
        if (*(void *)v42 != v18) {
          objc_enumerationMutation(v16);
        }
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          break;
        }
        if (v17 == ++v19)
        {
          uint64_t v17 = [v16 countByEnumeratingWithState:&v41 objects:v50 count:16];
          if (v17) {
            goto LABEL_8;
          }
          goto LABEL_28;
        }
      }

      [v11 objectForKeyedSubscript:v15];
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      id v21 = v36;
      uint64_t v22 = [v21 countByEnumeratingWithState:&v37 objects:v49 count:16];
      if (!v22)
      {
LABEL_30:

        if (!v34) {
          goto LABEL_34;
        }
        uint64_t v31 = (void *)MEMORY[0x189603F70];
        __int128 v32 = (objc_class *)objc_opt_class();
        NSStringFromClass(v32);
        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue();
        [v21 allObjects];
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "componentsJoinedByString:", @", ");
        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue();
        [v31 raise:*MEMORY[0x189603A60], @"'%@' dictionary contained unexpected value type %@, allowed types: %@", v35, v28, v30 format];
        goto LABEL_32;
      }

      uint64_t v23 = *(void *)v38;
LABEL_17:
      uint64_t v24 = 0LL;
      while (1)
      {
        if (*(void *)v38 != v23) {
          objc_enumerationMutation(v21);
        }
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          break;
        }
        if (v22 == ++v24)
        {
          uint64_t v22 = [v21 countByEnumeratingWithState:&v37 objects:v49 count:16];
          if (v22) {
            goto LABEL_17;
          }
          goto LABEL_30;
        }
      }

      if (++v14 != v12) {
        continue;
      }
      break;
    }

    uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v51 count:16];
    uint64_t v25 = 1LL;
    if (v12) {
      continue;
    }
    break;
  }

void sub_186AEB654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id NSErrorF(void *a1, const char *a2)
{
  id v3 = a1;
  id v4 = v3;
  if ((_DWORD)a2)
  {
    NSErrorV(v3, a2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

void sub_186AEB784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorF_safe(void *a1, const char *a2)
{
  id v3 = a1;
  id v4 = v3;
  if ((_DWORD)a2)
  {
    NSErrorV(v3, a2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

void sub_186AEB804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorV_safe(void *a1, const char *a2)
{
  return (id)objc_claimAutoreleasedReturnValue();
}

id NSErrorNestedF(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if ((_DWORD)a2)
  {
    NSErrorNestedV(v5, a2, v6);
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

void sub_186AEB8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorNestedV(void *a1, const char *a2, void *a3)
{
  v25[4] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a3;
  if ((_DWORD)a2)
  {
    ErrorString = DebugGetErrorStringEx(v5, (int)a2, 0LL, 0LL);
    uint64_t v8 = NSPrintV();
    id v9 = (__CFString *)v8;
    if (*ErrorString)
    {
      uint64_t v20 = ErrorString;
      uint64_t v21 = v8;
      uint64_t v10 = NSPrintF();
    }

    else
    {
      uint64_t v20 = a2;
      uint64_t v21 = v8;
      uint64_t v10 = NSPrintF();
    }

    uint64_t v12 = (void *)v10;
    id v13 = objc_alloc(MEMORY[0x189607870]);
    if (v5) {
      uint64_t v14 = v5;
    }
    else {
      uint64_t v14 = (__CFString *)*MEMORY[0x189607670];
    }
    uint64_t v15 = &stru_189F34A78;
    if (v9) {
      uint64_t v15 = v9;
    }
    if (v6)
    {
      v24[0] = @"cuErrorDesc";
      v24[1] = @"cuErrorMsg";
      v25[0] = v12;
      v25[1] = v15;
      uint64_t v16 = *MEMORY[0x189607798];
      v24[2] = *MEMORY[0x1896075E0];
      v24[3] = v16;
      v25[2] = v12;
      v25[3] = v6;
      uint64_t v17 = objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v25, v24, 4, v20, v21);
    }

    else
    {
      v22[0] = @"cuErrorDesc";
      v22[1] = @"cuErrorMsg";
      v23[0] = v12;
      v23[1] = v15;
      v22[2] = *MEMORY[0x1896075E0];
      v23[2] = v12;
      uint64_t v17 = objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v23, v22, 3, v20, v21);
    }

    uint64_t v18 = (void *)v17;
    id v11 = (void *)[v13 initWithDomain:v14 code:(int)a2 userInfo:v17];
  }

  else
  {
    id v11 = 0LL;
  }

  return v11;
}

void sub_186AEBAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorNestedF_safe(void *a1, const char *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if ((_DWORD)a2)
  {
    NSErrorNestedV(v5, a2, v6);
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

void sub_186AEBBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id NSErrorNestedV_safe(void *a1, const char *a2, void *a3)
{
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t NSPredicateMatches(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v7) {
    uint64_t v8 = [v5 evaluateWithObject:v6 substitutionVariables:v7];
  }
  else {
    uint64_t v8 = [v5 evaluateWithObject:v6];
  }
  uint64_t v9 = v8;

  return v9;
}

id NSRandomData(size_t a1, void *a2)
{
  if (a1 && (id v4 = malloc(a1)) != 0LL)
  {
    id v5 = v4;
    RandomBytes(v4, a1);
    uint64_t v6 = [MEMORY[0x189603F48] _newZeroingDataWithBytesNoCopy:v5 length:a1 deallocator:*MEMORY[0x189607470]];
    if (v6)
    {
      id v7 = (void *)v6;
      id v8 = 0LL;
      goto LABEL_5;
    }

    NSErrorWithOSStatusF((const char *)0xFFFFE5A9LL);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    free(v5);
  }

  else
  {
    NSErrorWithOSStatusF((const char *)0xFFFFE5A9LL);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
  }

  id v7 = 0LL;
  if (a2 && v8)
  {
    id v8 = v8;
    id v7 = 0LL;
    *a2 = v8;
  }

id NSStringWithMACAddress(uint64_t a1)
{
  uint64_t v1 = 0LL;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v2 = v8;
  do
  {
    if (v2 == v8)
    {
      id v3 = v8;
    }

    else
    {
      _BYTE *v2 = 58;
      id v3 = v2 + 1;
    }

    unint64_t v4 = *(unsigned __int8 *)(a1 + v1);
    uint64_t v5 = v1 + 1;
    _BYTE *v3 = a0123456789abcd_0[v4 >> 4];
    char v6 = a0123456789abcd_0[v4 & 0xF];
    uint64_t v2 = v3 + 2;
    v3[1] = v6;
    uint64_t v1 = v5;
  }

  while (v5 != 6);
  _BYTE *v2 = 0;
  return (id)[objc_alloc(NSString) initWithCString:v8 encoding:1];
}

uint64_t HIDButtonsCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = malloc(0x28uLL);
  if (!v4) {
    return 4294960568LL;
  }
  uint64_t v5 = v4;
  uint64_t result = 0LL;
  *uint64_t v5 = HIDButtonsCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_186B4B137;
  *((void *)v5 + 4) = 0xC000810195087500LL;
  *a1 = v5;
  *a2 = 40LL;
  return result;
}

uint64_t HIDDPadCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = (char *)malloc(0x27uLL);
  if (!v4) {
    return 4294960568LL;
  }
  uint64_t v5 = v4;
  uint64_t result = 0LL;
  *(_OWORD *)uint64_t v5 = HIDDPadCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_186B4B15F;
  *(void *)(v5 + 31) = 0xC001810195028107LL;
  *a1 = v5;
  *a2 = 39LL;
  return result;
}

_BYTE *HIDDPadFillReport( _BYTE *result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9)
{
  *uint64_t result = a7 | (2 * a9);
  result[1] = (8 * a3) | (4 * a2) | (16 * a4) | (32 * a5) | (2 * a6) | a8 | (a9 << 6);
  return result;
}

uint64_t HIDKnobCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = (char *)malloc(0x46uLL);
  if (!v4) {
    return 4294960568LL;
  }
  uint64_t v5 = v4;
  uint64_t result = 0LL;
  *((_OWORD *)v5 + 2) = xmmword_186B4B196;
  *((_OWORD *)v5 + 3) = unk_186B4B1A6;
  *(void *)(v5 + 62) = 0xC00681019508757FLL;
  *(_OWORD *)uint64_t v5 = HIDKnobCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_186B4B186;
  *a1 = v5;
  *a2 = 70LL;
  return result;
}

_BYTE *HIDKnobFillReport(_BYTE *result, char a2, char a3, char a4, char a5, char a6, char a7)
{
  *uint64_t result = a2 | (2 * a3) | (4 * a4);
  result[1] = a5;
  result[2] = a6;
  result[3] = a7;
  return result;
}

uint64_t HIDPointingCreateDescriptor(void *a1, void *a2)
{
  unint64_t v4 = malloc(0x3EuLL);
  if (!v4) {
    return 4294960568LL;
  }
  uint64_t v5 = v4;
  uint64_t result = 0LL;
  *uint64_t v5 = HIDPointingCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_186B4B1CC;
  void v5[2] = xmmword_186B4B1DC;
  *(_OWORD *)((char *)v5 + 46) = *(__int128 *)((char *)&xmmword_186B4B1DC + 14);
  *a1 = v5;
  *a2 = 62LL;
  return result;
}

double HIDPointingFillReport(uint64_t a1, char a2, double a3, double a4)
{
  int v4 = (int)(a3 * 32767.0 + 0.0);
  double result = a4 * 32767.0 + 0.0;
  *(_BYTE *)a1 = a2;
  *(_WORD *)(a1 + 1) = v4;
  *(_WORD *)(a1 + 3) = (int)result;
  return result;
}

uint64_t HIDSimpleFillReport(char *a1, int a2, int a3, int a4)
{
  uint64_t v4 = 4294960591LL;
  if (a2 == 12)
  {
    switch(a3)
    {
      case 176:
        goto LABEL_16;
      case 177:
        goto LABEL_14;
      case 178:
      case 179:
      case 180:
        return v4;
      case 181:
LABEL_7:
        char v5 = 5;
        goto LABEL_27;
      case 182:
LABEL_15:
        char v5 = 6;
        goto LABEL_27;
      default:
        if (a3 == 205)
        {
LABEL_17:
          char v5 = 4;
          goto LABEL_27;
        }

        if (a3 == 547) {
          goto LABEL_18;
        }
        break;
    }
  }

  else if (a2 == 11)
  {
    if (a3 <= 175)
    {
      switch(a3)
      {
        case ' ':
LABEL_18:
          char v5 = 1;
          break;
        case '!':
LABEL_16:
          char v5 = 2;
          break;
        case '&':
LABEL_14:
          char v5 = 3;
          break;
        default:
          return v4;
      }

uint64_t HIDTelephonyCreateDescriptor(void *a1, void *a2)
{
  uint64_t v4 = (char *)malloc(0x33uLL);
  if (!v4) {
    return 4294960568LL;
  }
  char v5 = v4;
  uint64_t result = 0LL;
  *(_DWORD *)(v5 + 47) = -1073708799;
  *(_OWORD *)char v5 = HIDTelephonyCreateDescriptor_kDescriptorTemplate;
  *((_OWORD *)v5 + 1) = unk_186B4B20A;
  *((_OWORD *)v5 + 2) = xmmword_186B4B21A;
  *a1 = v5;
  *a2 = 51LL;
  return result;
}

uint64_t HIDTrackpadCreateDescriptor(void *a1, void *a2)
{
  uint64_t v4 = malloc(0x8EuLL);
  if (!v4) {
    return 4294960568LL;
  }
  char v5 = v4;
  uint64_t result = 0LL;
  void v5[6] = xmmword_186B4B28D;
  v5[7] = unk_186B4B29D;
  *(_OWORD *)((char *)v5 + 126) = unk_186B4B2AB;
  void v5[2] = xmmword_186B4B24D;
  v5[3] = unk_186B4B25D;
  int8x16_t v5[4] = xmmword_186B4B26D;
  double v5[5] = unk_186B4B27D;
  *char v5 = HIDTrackpadCreateDescriptor_kDescriptorTemplate;
  v5[1] = unk_186B4B23D;
  *a1 = v5;
  *a2 = 142LL;
  return result;
}

void HIDTrackpadFillReport( uint64_t a1, size_t __n, void *__src, char a4, unsigned int a5, const void *a6, char a7, char a8, __int16 a9, __int16 a10)
{
  int v14 = __n;
  *(_BYTE *)a1 = a8;
  *(_WORD *)(a1 + 1) = a9;
  *(_WORD *)(a1 + 3) = a10;
  memcpy((void *)(a1 + 5), __src, __n);
  bzero((void *)(a1 + (v14 + 5)), 4 - v14);
  *(_BYTE *)(a1 + 9) = 1;
  *(_BYTE *)(a1 + 10) = v14;
  *(_BYTE *)(a1 + 11) = a4;
  memcpy((void *)(a1 + 12), a6, a5);
  bzero((void *)(a1 + a5 + 12), (int)(4 - a5));
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 17) = a5;
  *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = a7;
}

uint64_t HIDRegisterOverrideDescriptor(unsigned __int16 *a1, const UInt8 *a2, CFIndex a3)
{
  if ((gHIDOverrides || (gHIDOverrides = (uint64_t)CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250])) != 0)
    && (v6 = *a1, unint64_t v7 = a1[1], (v8 = CFDataCreate(0LL, a2, a3)) != 0LL))
  {
    CFDataRef v9 = v8;
    CFDictionarySetValue((CFMutableDictionaryRef)gHIDOverrides, (const void *)((v6 << 16) | v7), v8);
    CFRelease(v9);
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 4294960568LL;
  }

  pthread_mutex_unlock(&gHIDOverrideLock);
  return v10;
}

uint64_t HIDDeregisterOverrideDescriptor(unsigned __int16 *a1)
{
  if (gHIDOverrides) {
    CFDictionaryRemoveValue( (CFMutableDictionaryRef)gHIDOverrides,  (const void *)((*a1 << 16) | (unint64_t)a1[1]));
  }
  pthread_mutex_unlock(&gHIDOverrideLock);
  return 0LL;
}

uint64_t HIDCopyOverrideDescriptor(unsigned __int16 *a1, void *a2, void *a3)
{
  size_t v9 = 0LL;
  pthread_mutex_lock(&gHIDOverrideLock);
  if (!gHIDOverrides)
  {
    unint64_t v7 = 0LL;
    goto LABEL_5;
  }

  Value = (const __CFData *)CFDictionaryGetValue( (CFDictionaryRef)gHIDOverrides,  (const void *)((*a1 << 16) | (unint64_t)a1[1]));
  if (!Value)
  {
    unint64_t v7 = 0LL;
    size_t v9 = 0LL;
LABEL_5:
    unsigned int v10 = -6727;
    goto LABEL_6;
  }

  unint64_t v7 = CFCopyData(Value, &v9, &v10);
LABEL_6:
  pthread_mutex_unlock(&gHIDOverrideLock);
  *a2 = v7;
  *a3 = v9;
  return v10;
}

uint64_t _HIDBrowserGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHIDBrowserCFTypeID TypeID = result;
  return result;
}

void _HIDBrowserFinalize(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)(a1 + 96);
  if (v2)
  {
    pthread_mutex_destroy(v2);
    *(void *)(a1 + 96) = 0LL;
  }

  id v3 = *(dispatch_object_s **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 16) = 0LL;
  }

uint64_t HIDBrowserCreate(uint64_t *a1)
{
  if (gHIDBrowserInitOnce != -1) {
    dispatch_once_f(&gHIDBrowserInitOnce, 0LL, (dispatch_function_t)_HIDBrowserGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v3 = Instance;
  *(void *)(Instance + 136) = 0LL;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  uint64_t v4 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  *(void *)(v3 + 16) = MEMORY[0x1895F8AE0];
  dispatch_retain(v4);
  uint64_t v5 = pthread_mutex_init((pthread_mutex_t *)(v3 + 32), 0LL);
  if ((_DWORD)v5)
  {
    CFRelease((CFTypeRef)v3);
  }

  else
  {
    *(void *)(v3 + 96) = v3 + 32;
    *(_BYTE *)(v3 + 104) = 1;
    *a1 = v3;
  }

  return v5;
}

void *HIDBrowserCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, int *a4)
{
  if (!CFEqual(cf1, @"devices"))
  {
    if (!CFEqual(cf1, @"hidRaw"))
    {
      Copy = 0LL;
      int v10 = -6727;
      goto LABEL_11;
    }

    size_t v9 = (CFTypeRef *)MEMORY[0x189604DE8];
    if (!*(_BYTE *)(a1 + 104)) {
      size_t v9 = (CFTypeRef *)MEMORY[0x189604DE0];
    }
    Copy = (void *)*v9;
    CFRetain(*v9);
    goto LABEL_10;
  }

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  unint64_t v7 = *(const __CFArray **)(a1 + 24);
  if (v7)
  {
    Copy = CFArrayCreateCopy(0LL, v7);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
    if (!Copy) {
      goto LABEL_15;
    }
LABEL_10:
    int v10 = 0;
    goto LABEL_11;
  }

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  Copy = CFArrayCreate(0LL, 0LL, 0LL, MEMORY[0x189605228]);
  if (Copy) {
    goto LABEL_10;
  }
LABEL_15:
  int v10 = -6728;
LABEL_11:
  if (a4) {
    *a4 = v10;
  }
  return Copy;
}

uint64_t HIDBrowserSetProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, const __CFString *a4)
{
  if (!CFEqual(cf1, @"hidRaw")) {
    return 4294960582LL;
  }
  unint64_t v6 = CFGetInt64(a4, (int *)&v8);
  uint64_t result = v8;
  if (!v8) {
    *(_BYTE *)(a1 + 104) = v6 != 0;
  }
  return result;
}

void HIDBrowserSetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(dispatch_object_s **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HIDBrowserSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 12_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 136) = a3;
  return result;
}

uint64_t HIDBrowserStart(dispatch_queue_t *a1)
{
  return 0LL;
}

void _HIDBrowserStart(uint64_t a1)
{
  kern_return_t v9;
  char v10;
  const void *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v16;
  CFIndex v17;
  CFIndex j;
  const void *v19;
  io_iterator_t v20;
  void (*v21)(uint64_t, void, void);
  if (*(_BYTE *)(a1 + 104))
  {
    uint64_t v2 = IONotificationPortCreate(*MEMORY[0x1896086A8]);
    *(void *)(a1 + 112) = v2;
    if (!v2)
    {
      int v10 = -44;
      goto LABEL_4;
    }

    IONotificationPortSetDispatchQueue(v2, *(dispatch_queue_t *)(a1 + 16));
    unint64_t v7 = *(IONotificationPort **)(a1 + 112);
    unsigned int v8 = IOServiceMatching("IOHIDDevice");
    size_t v9 = IOServiceAddMatchingNotification( v7,  "IOServiceFirstMatch",  v8,  (IOServiceMatchingCallback)_HIDBrowserAttachHandler,  (void *)a1,  (io_iterator_t *)(a1 + 120));
    int v10 = v9;
    if (v9) {
      goto LABEL_4;
    }
  }

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  id v11 = *(const void **)(a1 + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 24) = 0LL;
  }

  *(void *)(a1 + 24) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(void *)(a1 + 24))
  {
    int v10 = -72;
LABEL_4:
    if (gLogCategory_HIDUtils <= 50
      && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
    {
      LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"void _HIDBrowserStart(void *)",  0x32u,  (uint64_t)"### HID browser start failed: %#m\n",  v3,  v4,  v5,  v6,  v10);
    }

    _HIDBrowserStop(a1);
    return;
  }

  pthread_mutex_lock(&gVirtualHIDLock);
  if (gVirtualHIDDevices)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices);
    if (Count >= 1)
    {
      id v13 = Count;
      for (uint64_t i = 0LL; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, i);
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), ValueAtIndex);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
      }
    }
  }

  pthread_mutex_unlock(&gVirtualHIDLock);
  if (*(void *)(a1 + 128))
  {
    uint64_t v16 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (v16 >= 1)
    {
      uint64_t v17 = v16;
      for (uint64_t j = 0LL; j != v17; ++j)
      {
        uint64_t v19 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), j);
        (*(void (**)(uint64_t, const void *, void))(a1 + 128))(2LL, v19, *(void *)(a1 + 136));
      }
    }
  }

  uint64_t v20 = *(_DWORD *)(a1 + 120);
  if (v20) {
    _HIDBrowserAttachHandler(a1, v20);
  }
  uint64_t v21 = *(void (**)(uint64_t, void, void))(a1 + 128);
  if (v21) {
    v21(4LL, 0LL, *(void *)(a1 + 136));
  }
  CFRelease((CFTypeRef)a1);
}

uint64_t _HIDBrowserAttachHandler(uint64_t a1, io_iterator_t iterator)
{
  runLoopMode = (const __CFString *)*MEMORY[0x1896051A8];
  uint64_t v4 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  while (1)
  {
    uint64_t result = IOIteratorNext(iterator);
    if (!(_DWORD)result) {
      return result;
    }
    io_service_t v6 = result;
    if (gHIDDeviceInitOnce != -1) {
      dispatch_once_f(&gHIDDeviceInitOnce, 0LL, (dispatch_function_t)_HIDDeviceGetTypeID);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v12 = Instance;
    if (!Instance)
    {
LABEL_33:
      char v15 = -72;
      goto LABEL_10;
    }

    *(void *)(Instance + 152) = 0LL;
    *(_OWORD *)(Instance + 136) = 0u;
    *(_OWORD *)(Instance + 120) = 0u;
    *(_OWORD *)(Instance + 104) = 0u;
    *(_OWORD *)(Instance + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(Instance + 72) = 0u;
    *(_OWORD *)(Instance + 56) = 0u;
    *(_OWORD *)(Instance + 40) = 0u;
    *(_OWORD *)(Instance + 24) = 0u;
    *(void *)(Instance + 16) = v4;
    dispatch_retain(v4);
    if (a1) {
      CFRetain((CFTypeRef)a1);
    }
    *(void *)(v12 + 24) = a1;
    id v13 = IOHIDDeviceCreate(0LL, v6);
    *(void *)(v12 + 32) = v13;
    if (!v13)
    {
      char v15 = -44;
      goto LABEL_10;
    }

    IOReturn v14 = IOHIDDeviceOpen(v13, 0);
    char v15 = v14;
    if (v14)
    {
LABEL_10:
      if (gLogCategory_HIDUtils <= 50
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
      {
        LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"OSStatus _HIDDeviceCreateWithService(HIDDeviceRef *, HIDBrowserRef, io_object_t)",  0x32u,  (uint64_t)"### Add HID device failed: %#m\n",  v8,  v9,  v10,  v11,  v15);
      }

      CFRelease((CFTypeRef)v12);
      IOObjectRelease(v6);
    }

    else
    {
      *(_BYTE *)(v12 + 40) = 1;
      int Property = (const __CFString *)IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), @"Product");
      if (!Property) {
        int Property = @"?";
      }
      *(void *)(v12 + 104) = Property;
      CFRetain(Property);
      uint64_t v17 = (const __CFString *)IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), @"MaxInputReportSize");
      if (v17)
      {
        int64_t v18 = CFGetInt64(v17, 0LL);
        *(void *)(v12 + 56) = v18;
      }

      else
      {
        int64_t v18 = *(void *)(v12 + 56);
      }

      if (v18 <= 0)
      {
        *(void *)(v12 + 56) = 32LL;
        int64_t v18 = 32LL;
      }

      uint64_t v19 = malloc(v18);
      *(void *)(v12 + 4_Block_object_dispose(va, 8) = v19;
      if (!v19) {
        goto LABEL_33;
      }
      CFTypeRef v20 = IOHIDDeviceGetProperty(*(IOHIDDeviceRef *)(v12 + 32), @"ReportDescriptor");
      if (!v20)
      {
        char v15 = -89;
        goto LABEL_10;
      }

      CFTypeRef v21 = v20;
      CFRetain(v20);
      *(void *)(v12 + 120) = v21;
      RandomBytes((void *)(v12 + 136), 0x10uLL);
      *(_BYTE *)(v12 + 142) = *(_BYTE *)(v12 + 142) & 0xF | 0x40;
      *(_BYTE *)(v12 + 144) = *(_BYTE *)(v12 + 144) & 0x3F | 0x80;
      uint64_t v22 = *(__IOHIDDevice **)(v12 + 32);
      Main = CFRunLoopGetMain();
      IOHIDDeviceScheduleWithRunLoop(v22, Main, runLoopMode);
      if (a1) {
        IOHIDDeviceRegisterRemovalCallback( *(IOHIDDeviceRef *)(v12 + 32),  (IOHIDCallback)_HIDBrowserDetachHandler,  (void *)v12);
      }
      IOObjectRelease(v6);
      if (gLogCategory_HIDUtils <= 30
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x1Eu)))
      {
        LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"void _HIDBrowserAttachHandler(void *, io_iterator_t)",  0x1Eu,  (uint64_t)"Attached HID device %#U (%-3d byte reports): %@\n",  v24,  v25,  v26,  v27,  v12 - 120);
      }

      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), (const void *)v12);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
      __int128 v28 = *(void (**)(uint64_t, uint64_t, void))(a1 + 128);
      if (v28) {
        v28(2LL, v12, *(void *)(a1 + 136));
      }
      CFRelease((CFTypeRef)v12);
    }
  }

void _HIDBrowserStop(uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 120);
  if (v2)
  {
    IOObjectRelease(v2);
    *(_DWORD *)(a1 + 120) = 0;
  }

  uint64_t v3 = *(IONotificationPort **)(a1 + 112);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *(void *)(a1 + 112) = 0LL;
  }

  uint64_t v4 = *(void (**)(uint64_t, void, void))(a1 + 128);
  if (v4) {
    v4(1LL, 0LL, *(void *)(a1 + 136));
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  uint64_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0LL;
  }

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  CFRelease((CFTypeRef)a1);
}

uint64_t _HIDDeviceGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHIDDeviceCFTypeID TypeID = result;
  return result;
}

CFIndex _HIDBrowserDetachHandler( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1[3];
  if (gLogCategory_HIDUtils <= 30
    && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x1Eu)))
  {
    LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"void _HIDBrowserDetachHandler(void *, IOReturn, void *)",  0x1Eu,  (uint64_t)"Detached HID device %#U: %@\n",  a5,  a6,  a7,  a8,  (_BYTE)a1 - 120);
  }

  uint64_t v10 = *(void (**)(uint64_t, void *, void))(v9 + 128);
  if (v10) {
    v10(3LL, a1, *(void *)(v9 + 136));
  }
  uint64_t v11 = *(const __CFArray **)(v9 + 24);
  v14.size_t length = CFArrayGetCount(v11);
  v14.location = 0LL;
  CFIndex result = CFArrayGetFirstIndexOfValue(v11, v14, a1);
  if ((result & 0x8000000000000000LL) == 0)
  {
    CFIndex v13 = result;
    pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 96));
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v9 + 24), v13);
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 96));
  }

  return result;
}

void _HIDDeviceFinalize(uint64_t a1)
{
  io_object_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0LL;
  }

  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v3 = *(__IOHIDDevice **)(a1 + 32);
    Main = CFRunLoopGetMain();
    IOHIDDeviceUnscheduleFromRunLoop(v3, Main, (CFStringRef)*MEMORY[0x1896051A8]);
    IOHIDDeviceRegisterRemovalCallback(*(IOHIDDeviceRef *)(a1 + 32), 0LL, (void *)a1);
    IOHIDDeviceClose(*(IOHIDDeviceRef *)(a1 + 32), 0);
    *(_BYTE *)(a1 + 40) = 0;
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 32) = 0LL;
  }

  io_service_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  *(void *)(a1 + 56) = 0LL;
  unint64_t v7 = *(const void **)(a1 + 88);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v8 = *(const void **)(a1 + 96);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t v9 = *(const void **)(a1 + 104);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 104) = 0LL;
  }

  uint64_t v10 = *(const void **)(a1 + 112);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 112) = 0LL;
  }

  uint64_t v11 = *(const void **)(a1 + 120);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 120) = 0LL;
  }

  uint64_t v12 = *(const void **)(a1 + 128);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  }

  CFIndex v13 = *(const void **)(a1 + 152);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 152) = 0LL;
  }

  CFRange v14 = *(dispatch_object_s **)(a1 + 16);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(a1 + 16) = 0LL;
  }

void HIDBrowserStop(dispatch_queue_t *a1)
{
}

void HIDBrowserStopDevices(dispatch_queue_t *a1)
{
}

void _HIDBrowserStopDevices(CFTypeRef cf)
{
  io_object_t v2 = (const __CFArray *)*((void *)cf + 3);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0LL; i != v4; ++i)
      {
        ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 3), i);
        CFRetain(ValueAtIndex);
        dispatch_async_f(ValueAtIndex[2], ValueAtIndex, (dispatch_function_t)_HIDDeviceStop);
      }
    }
  }

  CFRelease(cf);
}

void _HIDDeviceStop(void *context)
{
  if (*((_BYTE *)context + 64))
  {
    *((_BYTE *)context + 64) = 0;
    io_object_t v2 = (__IOHIDDevice *)*((void *)context + 4);
    if (v2) {
      IOHIDDeviceRegisterInputReportCallback(v2, *((uint8_t **)context + 6), *((void *)context + 7), 0LL, context);
    }
    uint64_t v3 = (void (*)(void, uint64_t, void, void, void, void))*((void *)context + 9);
    if (v3) {
      v3(0LL, 1LL, 0LL, 0LL, 0LL, *((void *)context + 10));
    }
    CFRelease(context);
  }

  CFRelease(context);
}

uint64_t HIDDeviceCreateVirtual(void *a1, const __CFDictionary *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (gHIDDeviceInitOnce != -1) {
    dispatch_once_f(&gHIDDeviceInitOnce, 0LL, (dispatch_function_t)_HIDDeviceGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v5 = (void *)Instance;
  *(_OWORD *)(Instance + 136) = 0u;
  io_service_t v6 = (_BYTE *)(Instance + 136);
  *(void *)(Instance + 152) = 0LL;
  *(_OWORD *)(Instance + 104) = 0u;
  *(_OWORD *)(Instance + 120) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  unint64_t v7 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  *((void *)v6 - 15) = MEMORY[0x1895F8AE0];
  dispatch_retain(v7);
  RandomBytes(v6, 0x10uLL);
  v6[6] = v6[6] & 0xF | 0x40;
  v6[8] = v6[8] & 0x3F | 0x80;
  if (!a2)
  {
LABEL_24:
    uint64_t result = 0LL;
    *a1 = v5;
    return result;
  }

  unint64_t Int64 = CFDictionaryGetInt64(a2, @"countryCode", (int *)&v24);
  if (!v24) {
    v5[11] = CFNumberCreateInt64(Int64);
  }
  Value = (__CFString *)CFDictionaryGetValue(a2, @"displayUUID");
  if (!Value)
  {
    unsigned int v24 = -6727;
    goto LABEL_10;
  }

  unsigned int v24 = CFGetUUIDEx(Value, 0LL, (uint64_t)v28);
  if (v24
    || (snprintf( __str,  0x25uLL,  "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",  v28[0],  v28[1],  v28[2],  v28[3],  v28[4],  v28[5],  v28[6],  v28[7],  v28[8],  v28[9],  v28[10],  v28[11],  v28[12],  v28[13],  v28[14],  v28[15]),  CFStringRef v10 = CFStringCreateWithCString(0LL, __str, 0x8000100u),  (v5[12] = v10) != 0LL))
  {
LABEL_10:
    CFTypeID TypeID = CFStringGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(a2, @"name", TypeID, 0LL);
    if (TypedValue)
    {
      CFIndex v13 = TypedValue;
      CFRetain(TypedValue);
      v5[13] = v13;
    }

    unint64_t v14 = CFDictionaryGetInt64(a2, @"productID", (int *)&v24);
    if (!v24) {
      v5[14] = CFNumberCreateInt64(v14);
    }
    char v15 = (const __CFData *)CFDictionaryGetValue(a2, @"hidDescriptor");
    if (v15)
    {
      CFIndex length = 0LL;
      uint64_t v16 = (const UInt8 *)CFCopyData(v15, (size_t *)&length, &v26);
      if (!v26)
      {
        uint64_t v17 = (UInt8 *)v16;
        CFDataRef v18 = CFDataCreate(0LL, v16, length);
        free(v17);
        if (v18) {
          v5[15] = v18;
        }
      }
    }

    unint64_t v19 = CFDictionaryGetInt64(a2, @"sampleRate", (int *)&v24);
    if (v24 || (CFNumberRef v20 = CFNumberCreateInt64(v19), (v5[16] = v20) != 0LL))
    {
      CFTypeRef v21 = (__CFString *)CFDictionaryGetValue(a2, @"uuid");
      if (v21) {
        CFGetUUIDEx(v21, 0LL, (uint64_t)v6);
      }
      unint64_t v22 = CFDictionaryGetInt64(a2, @"vendorID", (int *)&v24);
      if (!v24) {
        v5[19] = CFNumberCreateInt64(v22);
      }
      goto LABEL_24;
    }
  }

  unsigned int v24 = -6700;
  CFRelease(v5);
  return v24;
}

void HIDDeviceSetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  CFIndex v4 = *(dispatch_object_s **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HIDDeviceSetEventHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 72) = a2;
  *(void *)(result + 80) = a3;
  return result;
}

CFStringRef HIDDeviceCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (CFEqual(cf1, @"countryCode"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 88);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  if (CFEqual(cf1, @"displayUUID"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 96);
    if (!v7) {
      goto LABEL_30;
    }
    goto LABEL_9;
  }

  if (CFEqual(cf1, @"name"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 104);
    goto LABEL_9;
  }

  if (CFEqual(cf1, @"productID"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 112);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  if (CFEqual(cf1, @"hidDescriptor"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 120);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  if (CFEqual(cf1, @"sampleRate"))
  {
    CFStringRef v7 = *(CFStringRef *)(a1 + 128);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  if (!CFEqual(cf1, @"uuid"))
  {
    if (!CFEqual(cf1, @"vendorID"))
    {
      CFStringRef v7 = 0LL;
LABEL_30:
      int v8 = -6727;
      goto LABEL_11;
    }

    CFStringRef v7 = *(CFStringRef *)(a1 + 152);
    if (!v7) {
      goto LABEL_10;
    }
LABEL_9:
    CFRetain(v7);
LABEL_10:
    int v8 = 0;
    goto LABEL_11;
  }

  UUIDtoCStringFlags((_BYTE *)(a1 + 136), 16LL, 0LL, 0, cStr, 0LL);
  CFStringRef v7 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  if (v7) {
    goto LABEL_10;
  }
  int v8 = -6728;
LABEL_11:
  if (a4) {
    *a4 = v8;
  }
  return v7;
}

uint64_t HIDDeviceSetProperty(void *a1, CFTypeRef cf1, uint64_t a3, const __CFString *a4)
{
  if (CFEqual(cf1, @"countryCode"))
  {
    unint64_t v7 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (v30) {
      return result;
    }
    CFNumberRef Int64 = CFNumberCreateInt64(v7);
    if (Int64)
    {
      CFNumberRef v10 = Int64;
      uint64_t v11 = (const void *)a1[11];
      if (v11) {
        CFRelease(v11);
      }
      uint64_t result = 0LL;
      a1[11] = v10;
      return result;
    }

    return 4294960596LL;
  }

  if (CFEqual(cf1, @"displayUUID"))
  {
    if (!a4)
    {
LABEL_11:
      CFIndex v13 = (const void *)a1[12];
      if (v13) {
        CFRelease(v13);
      }
      uint64_t result = 0LL;
      a1[12] = a4;
      return result;
    }

    CFTypeID v12 = CFGetTypeID(a4);
    if (v12 == CFStringGetTypeID())
    {
      CFRetain(a4);
      goto LABEL_11;
    }

    return 4294960540LL;
  }

  if (CFEqual(cf1, @"name"))
  {
    if (a4)
    {
      CFTypeID v14 = CFGetTypeID(a4);
      if (v14 != CFStringGetTypeID()) {
        return 4294960540LL;
      }
      CFRetain(a4);
    }

    char v15 = (const void *)a1[13];
    if (v15) {
      CFRelease(v15);
    }
    uint64_t result = 0LL;
    a1[13] = a4;
  }

  else if (CFEqual(cf1, @"productID"))
  {
    unint64_t v16 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (v30) {
      return result;
    }
    CFNumberRef v17 = CFNumberCreateInt64(v16);
    if (!v17) {
      return 4294960596LL;
    }
    CFNumberRef v18 = v17;
    unint64_t v19 = (const void *)a1[14];
    if (v19) {
      CFRelease(v19);
    }
    uint64_t result = 0LL;
    a1[14] = v18;
  }

  else if (CFEqual(cf1, @"hidDescriptor"))
  {
    if (a4)
    {
      CFTypeID v20 = CFGetTypeID(a4);
      if (v20 != CFDataGetTypeID()) {
        return 4294960540LL;
      }
      CFRetain(a4);
    }

    CFTypeRef v21 = (const void *)a1[15];
    if (v21) {
      CFRelease(v21);
    }
    uint64_t result = 0LL;
    a1[15] = a4;
  }

  else if (CFEqual(cf1, @"sampleRate"))
  {
    unint64_t v22 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (v30) {
      return result;
    }
    CFNumberRef v23 = CFNumberCreateInt64(v22);
    if (!v23) {
      return 4294960596LL;
    }
    CFNumberRef v24 = v23;
    uint64_t v25 = (const void *)a1[16];
    if (v25) {
      CFRelease(v25);
    }
    uint64_t result = 0LL;
    a1[16] = v24;
  }

  else
  {
    if (!CFEqual(cf1, @"vendorID")) {
      return 4294960582LL;
    }
    unint64_t v26 = CFGetInt64(a4, (int *)&v30);
    uint64_t result = v30;
    if (!v30)
    {
      CFNumberRef v27 = CFNumberCreateInt64(v26);
      if (!v27) {
        return 4294960596LL;
      }
      CFNumberRef v28 = v27;
      uint64_t v29 = (const void *)a1[19];
      if (v29) {
        CFRelease(v29);
      }
      uint64_t result = 0LL;
      a1[19] = v28;
    }
  }

  return result;
}

uint64_t HIDDevicePostReport(dispatch_queue_t *a1, const void *a2, size_t a3)
{
  io_service_t v6 = (dispatch_queue_t **)malloc(a3 + 16);
  if (!v6) {
    return 4294960568LL;
  }
  unint64_t v7 = v6;
  CFRetain(a1);
  *unint64_t v7 = a1;
  v7[1] = (dispatch_queue_t *)a3;
  memcpy(v7 + 2, a2, a3);
  dispatch_async_f(a1[2], v7, (dispatch_function_t)_HIDDevicePostReport);
  return 0LL;
}

void _HIDDevicePostReport(void *a1)
{
  io_object_t v2 = (void *)*a1;
  uint64_t v3 = *(void (**)(void, uint64_t, void, void *, void, void))(*a1 + 72LL);
  if (v3) {
    v3(*a1, 2LL, 0LL, a1 + 2, a1[1], v2[10]);
  }
  CFRelease(v2);
  free(a1);
}

uint64_t HIDDeviceStart(dispatch_queue_t *a1)
{
  return 0LL;
}

void _HIDDeviceStart(void *context)
{
  if (*((_BYTE *)context + 40)) {
    IOHIDDeviceRegisterInputReportCallback( *((IOHIDDeviceRef *)context + 4),  *((uint8_t **)context + 6),  *((void *)context + 7),  (IOHIDReportCallback)_HIDDeviceHandleReport,  context);
  }
  *((_BYTE *)context + 64) = 1;
}

uint64_t _HIDDeviceHandleReport( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = result;
  if (gLogCategory_HIDUtils <= 9)
  {
    if (gLogCategory_HIDUtils != -1
      || (uint64_t result = _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 9u), (_DWORD)result))
    {
      uint64_t result = LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"void _HIDDeviceHandleReport(void *, IOReturn, void *, IOHIDReportType, uint32_t, uint8_t *, CFIndex)",  9u,  (uint64_t)"HID report for %#U: %.3H\n",  a5,  a6,  a7,  a8,  v11 - 120);
    }
  }

  CFTypeID v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v11 + 72);
  if (v12) {
    return v12(v11, 2LL, a2, a6, a7, *(void *)(v11 + 80));
  }
  return result;
}

void HIDDeviceStop(dispatch_queue_t *a1)
{
}

uint64_t HIDRegisterDevice(void *a1)
{
  CFMutableDataRef Mutable = (__CFArray *)gVirtualHIDDevices;
  if (gVirtualHIDDevices
    || (CFMutableDataRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]), (gVirtualHIDDevices = (uint64_t)Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, a1);
    if (gLogCategory_HIDUtils <= 50
      && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
    {
      LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"OSStatus HIDRegisterDevice(HIDDeviceRef)",  0x32u,  (uint64_t)"Registered HID %''@, %#U\n",  v3,  v4,  v5,  v6,  a1[13]);
    }

    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 4294960568LL;
  }

  pthread_mutex_unlock(&gVirtualHIDLock);
  return v7;
}

uint64_t HIDDeregisterDevice(void *a1)
{
  if (!gVirtualHIDDevices) {
    goto LABEL_12;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i < Count; ++i)
    {
      if (CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, i) == a1)
      {
        if (gLogCategory_HIDUtils <= 50
          && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
        {
          LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"OSStatus HIDDeregisterDevice(HIDDeviceRef)",  0x32u,  (uint64_t)"Deregistered HID %''@, %#U\n",  v4,  v5,  v6,  v7,  a1[13]);
        }

        CFArrayRemoveValueAtIndex((CFMutableArrayRef)gVirtualHIDDevices, i--);
        --Count;
      }
    }
  }

  if (!Count)
  {
LABEL_12:
    if (gVirtualHIDDevices)
    {
      CFRelease((CFTypeRef)gVirtualHIDDevices);
      gVirtualHIDDevices = 0LL;
    }
  }

  pthread_mutex_unlock(&gVirtualHIDLock);
  return 0LL;
}

uint64_t HIDPostReport(__CFString *a1, const void *a2, size_t a3)
{
  char v5 = (char)a1;
  v16[2] = *MEMORY[0x1895F89C0];
  uint64_t result = CFGetUUIDEx(a1, 0LL, (uint64_t)v16);
  if (!(_DWORD)result)
  {
    pthread_mutex_lock(&gVirtualHIDLock);
    if (gVirtualHIDDevices && (CFIndex Count = CFArrayGetCount((CFArrayRef)gVirtualHIDDevices), Count >= 1))
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0LL;
      while (1)
      {
        ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex((CFArrayRef)gVirtualHIDDevices, v9);
        if ((dispatch_queue_t)v16[0] == ValueAtIndex[17] && v16[1] == (void)ValueAtIndex[18]) {
          break;
        }
        if (v8 == ++v9) {
          goto LABEL_10;
        }
      }

      HIDDevicePostReport(ValueAtIndex, a2, a3);
      pthread_mutex_unlock(&gVirtualHIDLock);
      return 0LL;
    }

    else
    {
LABEL_10:
      pthread_mutex_unlock(&gVirtualHIDLock);
      if (gLogCategory_HIDUtils <= 50
        && (gLogCategory_HIDUtils != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HIDUtils, 0x32u)))
      {
        LogPrintF( (uint64_t)&gLogCategory_HIDUtils,  (uint64_t)"OSStatus HIDPostReport(CFStringRef, const void *, size_t)",  0x32u,  (uint64_t)"### Post HID report for %@ not found\n",  v12,  v13,  v14,  v15,  v5);
      }

      return 4294960569LL;
    }
  }

  return result;
}

uint64_t _HTTPClientGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPClientCFTypeID TypeID = result;
  return result;
}

void _HTTPClientFinalize(uint64_t a1)
{
  io_object_t v2 = *(dispatch_object_s **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 72) = 0LL;
  }

  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  }

  char v5 = *(void **)(a1 + 152);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 152) = 0LL;
  }

  uint64_t v6 = *(void (**)(void))(a1 + 472);
  if (v6) {
    v6(*(void *)(a1 + 456));
  }
  int v7 = *(_DWORD *)(a1 + 176);
  if ((v7 & 0x80000000) == 0)
  {
    if (close(v7) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + 176) = -1;
  }

  CFIndex v8 = *(void **)(a1 + 232);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 232) = 0LL;
  }

  HTTPClientAuthorization_Free((void *)(a1 + 248));
}

uint64_t HTTPClientCreate(uint64_t *a1)
{
  if (gHTTPClientInitOnce != -1) {
    dispatch_once_f(&gHTTPClientInitOnce, 0LL, (dispatch_function_t)_HTTPClientGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v3 = Instance;
  bzero((void *)(Instance + 24), 0x210uLL);
  *(_DWORD *)(v3 + 176) = -1;
  uint64_t v4 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  *(void *)(v3 + 16) = MEMORY[0x1895F8AE0];
  dispatch_retain(v4);
  RandomBytes((void *)(v3 + 160), 4uLL);
  uint64_t result = 0LL;
  *(_DWORD *)(v3 + 160) = *(unsigned __int16 *)(v3 + 162) << 16;
  *(_BYTE *)(v3 + 136) = 1;
  *(void *)(v3 + 96) = &gLogCategory_HTTPClientCore;
  *(void *)(v3 + 480) = SocketTransportRead;
  *(void *)(v3 + 48_Block_object_dispose(va, 8) = SocketTransportWriteV;
  *(void *)(v3 + 544) = v3 + 536;
  *(_DWORD *)(v3 + 24_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(v3 + 252) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 28_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 36_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_DWORD *)(v3 + 416) = 0;
  *a1 = v3;
  return result;
}

uint64_t HTTPClientCreateWithSocket(uint64_t *a1, int a2)
{
  uint64_t result = HTTPClientCreate(&v6);
  if (!(_DWORD)result)
  {
    uint64_t v5 = v6;
    *(_DWORD *)(v6 + 176) = a2;
    *a1 = v5;
  }

  return result;
}

void HTTPClientInvalidate(dispatch_queue_t *a1)
{
}

void _HTTPClientInvalidate( const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _HTTPClientErrorHandler( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 164) != 9)
  {
    CFNumberRef v10 = *(int **)(a1 + 96);
    if (*v10 <= 90)
    {
      if (*v10 != -1)
      {
LABEL_4:
        LogPrintF( (uint64_t)v10,  (uint64_t)"void _HTTPClientErrorHandler(HTTPClientRef, OSStatus)",  0x5Au,  (uint64_t)"### Error: CID 0x%08X, Peer %s, %#m\n",  a5,  a6,  a7,  a8,  *(_DWORD *)(a1 + 160));
        goto LABEL_6;
      }

      if (_LogCategory_Initialize((uint64_t)v10, 0x5Au))
      {
        CFNumberRef v10 = *(int **)(a1 + 96);
        goto LABEL_4;
      }
    }
  }

uint64_t HTTPClientGetClientID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t HTTPClientGetPeerAddress(uint64_t a1, sockaddr *a2, socklen_t a3, void *a4)
{
  socklen_t v6 = a3;
  if (getpeername(*(_DWORD *)(a1 + 176), a2, &v6))
  {
    if (!*__error()) {
      return 4294960596LL;
    }
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return result;
    }
  }

  uint64_t result = 0LL;
  if (a4) {
    *a4 = v6;
  }
  return result;
}

uint64_t HTTPClientGetSelfAddress(uint64_t a1, sockaddr *a2, socklen_t a3, void *a4)
{
  socklen_t v6 = a3;
  if (getsockname(*(_DWORD *)(a1 + 176), a2, &v6))
  {
    if (!*__error()) {
      return 4294960596LL;
    }
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return result;
    }
  }

  uint64_t result = 0LL;
  if (a4) {
    *a4 = v6;
  }
  return result;
}

__n128 HTTPClientSetDebugDelegate(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[28].n128_u64[0] = a2[1].n128_u64[0];
  a1[27] = result;
  return result;
}

uint64_t HTTPClientGetDelegateContext(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

__n128 HTTPClientSetDelegate(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 64) = *(void *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v3;
  return result;
}

uint64_t HTTPClientSetDestination(uint64_t a1, char *__s1, int a3)
{
  uint64_t v5 = strdup(__s1);
  if (!v5) {
    return 4294960568LL;
  }
  socklen_t v6 = v5;
  int v7 = *(void **)(a1 + 72);
  if (v7) {
    free(v7);
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 80) = a3;
  return result;
}

void HTTPClientSetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    __int128 v3 = a2;
  }
  else {
    __int128 v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(dispatch_object_s **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HTTPClientSetFlags(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 84) = *(_DWORD *)(result + 84) & ~a3 | a3 & a2;
  return result;
}

_DWORD *HTTPClientSetKeepAlive(_DWORD *result, int a2, int a3)
{
  result[28] = a2;
  result[29] = a2;
  result[30] = a3;
  return result;
}

_DWORD *HTTPClientSetKeepAliveEx(_DWORD *result, int a2, int a3, int a4)
{
  result[28] = a2;
  result[29] = a3;
  result[30] = a4;
  return result;
}

uint64_t HTTPClientSetConnectionLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t HTTPClientSetLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

uint64_t _HTTPClientSetProperty(uint64_t a1, CFTypeRef cf1, const __CFString *a3)
{
  if (CFEqual(cf1, @"allowedAuthSchemes"))
  {
    int v6 = CFGetInt64(a3, 0LL);
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
    return result;
  }

  if (CFEqual(cf1, @"ipv6DelayNanos"))
  {
    unint64_t v8 = CFGetInt64(a3, 0LL);
    uint64_t result = 0LL;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v8;
    return result;
  }

  if (CFEqual(cf1, @"password"))
  {
    if (!a3)
    {
      uint64_t v14 = 0LL;
LABEL_14:
      uint64_t v11 = *(void **)(a1 + 128);
      if (v11) {
        free(v11);
      }
      uint64_t result = 0LL;
      *(void *)(a1 + 12_Block_object_dispose(va, 8) = v14;
      return result;
    }

    CFTypeID v9 = CFGetTypeID(a3);
    if (v9 == CFStringGetTypeID())
    {
      uint64_t v14 = 0LL;
      if (CFStringGetLength(a3) >= 1)
      {
        uint64_t result = CFStringCopyUTF8CString(a3, &v14);
        if ((_DWORD)result) {
          return result;
        }
      }

      goto LABEL_14;
    }

    return 4294960540LL;
  }

  if (CFEqual(cf1, @"rfc2617DigestAuth"))
  {
    unint64_t v10 = CFGetInt64(a3, 0LL);
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 136) = v10 != 0;
    return result;
  }

  if (!CFEqual(cf1, @"username")) {
    return 4294960582LL;
  }
  if (a3)
  {
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 != CFStringGetTypeID()) {
      return 4294960540LL;
    }
    uint64_t v14 = 0LL;
    if (CFStringGetLength(a3) >= 1)
    {
      uint64_t result = CFStringCopyUTF8CString(a3, &v14);
      if ((_DWORD)result) {
        return result;
      }
    }
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  uint64_t v13 = *(void **)(a1 + 152);
  if (v13) {
    free(v13);
  }
  uint64_t result = 0LL;
  *(void *)(a1 + 152) = v14;
  return result;
}

uint64_t HTTPClientSetQoS(uint64_t result, int a2)
{
  *(_DWORD *)(result + 140) = a2;
  return result;
}

uint64_t HTTPClientSetTimeout(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 144) = a2;
  uint64_t result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) == 0)
  {
    char v4 = a2;
    uint64_t result = SocketSetTCPTimeout(result, a2);
    if ((_DWORD)result)
    {
      uint64_t result = *(void *)(a1 + 96);
      if (*(int *)result <= 60)
      {
        if (*(_DWORD *)result != -1) {
          return LogPrintF( result,  (uint64_t)"void HTTPClientSetTimeout(HTTPClientRef, int)",  0x3Cu,  (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n",  v5,  v6,  v7,  v8,  v4);
        }
        uint64_t result = _LogCategory_Initialize(result, 0x3Cu);
        if ((_DWORD)result)
        {
          uint64_t result = *(void *)(a1 + 96);
          return LogPrintF( result,  (uint64_t)"void HTTPClientSetTimeout(HTTPClientRef, int)",  0x3Cu,  (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n",  v5,  v6,  v7,  v8,  v4);
        }
      }
    }
  }

  return result;
}

uint64_t HTTPClientSetTransportDelegate(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 456;
  uint64_t v5 = *(void (**)(void))(a1 + 472);
  if (v5) {
    v5(*(void *)v4);
  }
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  *(void *)(v4 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(_BYTE *)(a1 + 496) = 1;
  ++*(_DWORD *)(a1 + 500);
  uint64_t result = *(unsigned int *)(a1 + 176);
  if ((result & 0x80000000) == 0)
  {
    CFTypeID v9 = *(uint64_t (**)(void))(a1 + 464);
    if (v9) {
      return v9();
    }
  }

  return result;
}

uint64_t HTTPClientDetach( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[63]) {
    return 4294960575LL;
  }
  a1[63] = a2;
  a1[64] = a3;
  a1[65] = a4;
  a1[66] = a5;
  CFTypeID v9 = (int *)a1[12];
  if (*v9 > 30) {
    return 0LL;
  }
  if (*v9 != -1)
  {
LABEL_4:
    LogPrintF( (uint64_t)v9,  (uint64_t)"OSStatus HTTPClientDetach(HTTPClientRef, HTTPClientDetachHandler_f, void *, void *, void *)",  0x1Eu,  (uint64_t)"Detaching client for %s\n",  a5,  a6,  a7,  a8,  a1[9]);
    return 0LL;
  }

  uint64_t result = _LogCategory_Initialize((uint64_t)v9, 0x1Eu);
  if ((_DWORD)result)
  {
    CFTypeID v9 = (int *)a1[12];
    goto LABEL_4;
  }

  return result;
}

uint64_t HTTPClientSendBinaryBytes( dispatch_queue_t *a1, char a2, char a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0LL;
  if (a5 >> 16) {
    return 4294960553LL;
  }
  uint64_t v20 = HTTPMessageCreate((uint64_t *)&cf);
  CFTypeRef v21 = cf;
  if ((_DWORD)v20) {
    goto LABEL_3;
  }
  if ((a2 & 1) != 0)
  {
    *((void *)cf + 1065) = a4;
    *((void *)v21 + 1066) = a5;
  }

  else
  {
    uint64_t v20 = HTTPMessageSetBodyLength(cf, a5);
    if ((_DWORD)v20)
    {
LABEL_3:
      if (!v21) {
        return v20;
      }
      goto LABEL_13;
    }

    if (a5) {
      memmove(*((void **)v21 + 1065), a4, a5);
    }
  }

  *((_BYTE *)v21 + 24) = 36;
  *((_BYTE *)v21 + 25) = a3;
  *((_BYTE *)v21 + 26) = BYTE1(a5);
  *((_BYTE *)v21 + 27) = a5;
  *((void *)v21 + 1027) = 4LL;
  if (a6)
  {
    *((void *)v21 + 1213) = a6;
    *((void *)v21 + 1209) = a7;
    *((void *)v21 + 1214) = _HTTPClientSendBinaryCompletion;
  }

  uint64_t v20 = HTTPClientSendMessage(a1, (uint64_t)v21, v14, v15, v16, v17, v18, v19);
LABEL_13:
  CFRelease(v21);
  return v20;
}

uint64_t _HTTPClientSendBinaryCompletion(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 9704))(*(unsigned int *)(a1 + 9648), *(void *)(a1 + 9672));
}

uint64_t HTTPClientSendMessage( dispatch_queue_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a2 + 8216))
  {
    *(_DWORD *)(a2 + 9624) = 0;
LABEL_9:
    CFRetain((CFTypeRef)a2);
    CFRetain(a1);
    *(void *)(a2 + 9656) = a1;
    dispatch_async_f(a1[2], (void *)a2, (dispatch_function_t)_HTTPClientSendMessage);
    return 0LL;
  }

  uint64_t v10 = a2 + 24;
  if (*(_BYTE *)(a2 + 8512)) {
    HTTPHeader_SetField((char *)(a2 + 24), "Connection", (uint64_t)"close", a4, a5, a6, a7, a8, v13);
  }
  uint64_t result = HTTPHeader_Commit(a2 + 24);
  if (!(_DWORD)result)
  {
    *(void *)(a2 + 9584) = v10;
    *(void *)(a2 + 9592) = *(void *)(a2 + 8216);
    *(_DWORD *)(a2 + 9624) = 1;
    uint64_t v12 = *(void *)(a2 + 8528);
    if (v12)
    {
      *(void *)(a2 + 9600) = *(void *)(a2 + 8520);
      *(void *)(a2 + 960_Block_object_dispose(va, 8) = v12;
      *(_DWORD *)(a2 + 9624) = 2;
    }

    *(void *)(a2 + 9616) = a2 + 9584;
    goto LABEL_9;
  }

  return result;
}

void _HTTPClientSendMessage( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 9656);
  *(void *)(a1 + 16) = 0LL;
  **(void **)(v8 + 544) = a1;
  *(void *)(v8 + 544) = a1 + 16;
  _HTTPClientRunStateMachine((char *)v8, a2, a3, a4, a5, a6, a7, a8);
  CFRelease((CFTypeRef)v8);
}

void _HTTPClientRunStateMachine( char *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (uint64_t *)(cf + 536);
  uint64_t v11 = (uint64_t *)(cf + 424);
  uint64_t v12 = cf + 248;
  uint64_t v141 = *MEMORY[0x1895F89C0];
  uint64_t v13 = cf + 168;
LABEL_2:
  while (2)
  {
    for (int i = *((_DWORD *)cf + 41); ; int i = 0)
    {
      if (i != 2)
      {
        switch(i)
        {
          case 0:
            uint64_t v19 = *v10;
            if (!*v10)
            {
              if (*((void *)cf + 63))
              {
                uint64_t v24 = 4294960573LL;
                goto LABEL_207;
              }

              if ((cf[84] & 0x10) != 0)
              {
                if (*((void *)cf + 30))
                {
                  int v20 = 7;
                  goto LABEL_88;
                }

                if (cf[192])
                {
                  cf[192] = 0;
                  dispatch_resume(*((dispatch_object_t *)cf + 23));
                }
              }

              return;
            }

            if ((*((_DWORD *)cf + 44) & 0x80000000) == 0)
            {
              if (*((void *)cf + 23))
              {
                int v20 = 2;
                goto LABEL_88;
              }

              CFRetain(cf);
              _HTTPClientConnectHandler(*((unsigned int *)cf + 44), 0LL, (uint64_t)cf, v111, v112, v113, v114, v115);
              return;
            }

            uint64_t v109 = *(void *)(v19 + 9632);
            if (v109 == -1)
            {
              int v110 = *(_DWORD *)(v19 + 9640);
              if (v110 < 1)
              {
                int v116 = *((_DWORD *)cf + 36);
                BOOL v117 = v116 < 1;
                uint64_t v118 = 1000000000LL * v116;
                if (v117) {
                  uint64_t v109 = -1LL;
                }
                else {
                  uint64_t v109 = v118;
                }
              }

              else
              {
                uint64_t v109 = 1000000000LL * v110;
              }
            }

            unsigned int v119 = *((_DWORD *)cf + 21) & 0xF | (16 * ((*((_DWORD *)cf + 21) >> 5) & 0x1F)) & 0xFFFFE7FF | (((*((_DWORD *)cf + 21) >> 10) & 3) << 11);
            unsigned __int128 v120 = (int *)*((void *)cf + 12);
            if (*v120 > 50) {
              goto LABEL_226;
            }
            if (*v120 != -1) {
              goto LABEL_224;
            }
            if (_LogCategory_Initialize((uint64_t)v120, 0x32u))
            {
              unsigned __int128 v120 = (int *)*((void *)cf + 12);
LABEL_224:
              LogPrintF( (uint64_t)v120,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Connect start: CID 0x%08X, Peer %s, Flags 0x%X, TimeoutNs %llu\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
            }

LABEL_226:
            uint64_t v140 = 0LL;
            __int128 v139 = 0u;
            __int128 v138 = 0u;
            __int128 v137 = 0u;
            uint64_t v124 = *((void *)cf + 9);
            int v125 = *((_DWORD *)cf + 20);
            unsigned int v126 = v119;
            uint64_t v127 = v109;
            uint64_t v128 = -1LL;
            uint64_t v129 = 0LL;
            uint64_t v130 = 0LL;
            uint64_t v131 = _HTTPClientConnectHandler;
            uint64_t v132 = cf;
            uint64_t v121 = *((void *)cf + 13);
            uint64_t v133 = *((void *)cf + 2);
            uint64_t v134 = v121;
            uint64_t v135 = *((void *)cf + 11);
            uint64_t v136 = 152LL;
            uint64_t v34 = AsyncConnection_ConnectEx(v13, (uint64_t)&v124);
            if ((_DWORD)v34) {
              goto LABEL_227;
            }
            CFRetain(cf);
            *((_DWORD *)cf + 41) = 1;
            return;
          case 1:
            return;
          case 3:
            uint64_t v21 = *v10;
            if (!*v10) {
              goto LABEL_206;
            }
            uint64_t v22 = HTTPMessageWriteMessage( *v10,  *((uint64_t (**)(uint64_t, uint64_t))cf + 61),  *((void *)cf + 57));
            uint64_t v23 = _HTTPClientHandleIOError((uint64_t)cf, v22, 0);
            if ((_DWORD)v23 == 35) {
              return;
            }
            uint64_t v24 = v23;
            if ((_DWORD)v23) {
              goto LABEL_207;
            }
            uint64_t v25 = v13;
            LogHTTP( *((void *)cf + 12),  *((int **)cf + 12),  (unsigned __int8 *)(v21 + 24),  *(void *)(v21 + 8216),  *(void *)(v21 + 8520),  *(void *)(v21 + 8528),  a7,  a8);
            unsigned int v30 = (int *)*((void *)cf + 12);
            if (*v30 > 50) {
              goto LABEL_110;
            }
            if (*v30 != -1) {
              goto LABEL_23;
            }
            if (_LogCategory_Initialize((uint64_t)v30, 0x32u))
            {
              unsigned int v30 = (int *)*((void *)cf + 12);
LABEL_23:
              LogPrintF( (uint64_t)v30,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Request written: CID 0x%08X, Header %zu bytes, Body %zu bytes\n",  v26,  v27,  v28,  v29,  *((_DWORD *)cf + 40));
            }

  __int16 *v8 = v26;
  return appended;
}

LABEL_74:
            int v60 = (int *)*((void *)cf + 12);
            if (*v60 > 50) {
              goto LABEL_145;
            }
            if (*v60 != -1) {
              goto LABEL_76;
            }
            if (_LogCategory_Initialize((uint64_t)v60, 0x32u))
            {
              int v60 = (int *)*((void *)cf + 12);
LABEL_76:
              LogPrintF( (uint64_t)v60,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Response received: CID 0x%08X, Header %zu bytes, Body %zu bytes, Status %d\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
            }

            if (*(_DWORD *)(v31 + 8456) != 401) {
              goto LABEL_153;
            }
            if (!*((_DWORD *)cf + 6)) {
              goto LABEL_153;
            }
            if (!*((void *)cf + 19)) {
              goto LABEL_153;
            }
            if (!*((void *)cf + 16)) {
              goto LABEL_153;
            }
            uint64_t v93 = *(void *)(v31 + 9560);
            if (!v93) {
              goto LABEL_153;
            }
            uint64_t v94 = *(void *)(v31 + 9560);
            *(_DWORD *)(v94 + 8476) = -6721;
            *((_DWORD *)cf + 62) = *((_DWORD *)cf + 6);
            *((void *)cf + 34) = v94;
            *((void *)cf + 35) = v37;
            cf[252] = cf[136] == 0;
            uint64_t v95 = *((void *)cf + 16);
            *((void *)cf + 32) = *((void *)cf + 19);
            *((void *)cf + 33) = v95;
LABEL_145:
            if (!HTTPHeader_Commit(*(void *)(v31 + 9560)))
            {
              memcpy((void *)(v31 + 24), *(const void **)(v31 + 9560), *(void *)(*(void *)(v31 + 9560) + 0x2000LL));
              uint64_t v101 = *(void *)(*(void *)(v31 + 9560) + 0x2000LL);
              *(void *)(v31 + 8216) = v101;
              uint64_t v102 = *(void **)(v31 + 9552);
              if (v102)
              {
                free(v102);
                uint64_t v101 = *(void *)(v31 + 8216);
              }

              uint64_t v103 = *(void *)(v31 + 9568);
              *(void *)(v31 + 9552) = v103;
              *(void *)(v31 + 8520) = v103;
              uint64_t v104 = *(void *)(v31 + 9576);
              *(void *)(v31 + 852_Block_object_dispose(va, 8) = v104;
              *(_OWORD *)(v31 + 956_Block_object_dispose(va, 8) = 0u;
              *(void *)(v31 + 9584) = v37;
              *(void *)(v31 + 9592) = v101;
              *(_DWORD *)(v31 + 9624) = 1;
              if (v104)
              {
                *(void *)(v31 + 9600) = v103;
                *(void *)(v31 + 960_Block_object_dispose(va, 8) = v104;
                *(_DWORD *)(v31 + 9624) = 2;
              }

              *(void *)(v31 + 9616) = v31 + 9584;
              *((_DWORD *)cf + 41) = 2;
            }

            else
            {
LABEL_153:
              *((_DWORD *)cf + 41) = 6;
            }

            uint64_t v13 = v36;
            uint64_t v8 = v32;
            break;
          case 5:
            uint64_t v123 = 0LL;
            uint64_t v40 = (*((uint64_t (**)(uint64_t *, uint64_t, uint64_t *, void))cf + 60))( &v124,  16LL,  &v123,  *((void *)cf + 57));
            int v41 = _HTTPClientHandleIOError((uint64_t)cf, v40, 1);
            if (v41 == 35) {
              return;
            }
            int v42 = v41;
            char v43 = v123;
            if (!v123) {
              goto LABEL_105;
            }
            __int128 v44 = (int *)*((void *)cf + 12);
            if (*v44 > 50) {
              goto LABEL_105;
            }
            if (*v44 != -1) {
              goto LABEL_39;
            }
            if (_LogCategory_Initialize((uint64_t)v44, 0x32u))
            {
              __int128 v44 = (int *)*((void *)cf + 12);
              char v43 = v123;
LABEL_39:
              LogPrintF( (uint64_t)v44,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"### Read %zu bytes after connection close\n",  a5,  a6,  a7,  a8,  v43);
            }

  if (v9) {
    free(v9);
  }
  return v7;
}

LABEL_130:
            uint64_t v82 = *v10;
            if (!*v10) {
              goto LABEL_206;
            }
            uint64_t v83 = *(void *)(v82 + 16);
            *uint64_t v10 = v83;
            if (!v83) {
              *((void *)cf + 6_Block_object_dispose(va, 8) = v10;
            }
            *(_DWORD *)(v82 + 964_Block_object_dispose(va, 8) = 0;
            uint64_t v84 = *(void (**)(uint64_t))(v82 + 9712);
            if (v84) {
              v84(v82);
            }
            CFRelease((CFTypeRef)v82);
            _HTTPClientErrorHandler((uint64_t)cf, 4294960544LL, v85, v86, v87, v88, v89, v90);
            goto LABEL_177;
          case 6:
            uint64_t v45 = *v10;
            if (!*v10) {
              goto LABEL_206;
            }
            if (!*(_BYTE *)(v45 + 8512))
            {
              uint64_t v58 = *(void *)(v45 + 16);
              *uint64_t v10 = v58;
              if (!v58) {
                *((void *)cf + 6_Block_object_dispose(va, 8) = v10;
              }
              *(_DWORD *)(v45 + 964_Block_object_dispose(va, 8) = 0;
              uint64_t v59 = *(void (**)(uint64_t))(v45 + 9712);
              if (v59) {
                v59(v45);
              }
              CFRelease((CFTypeRef)v45);
              goto LABEL_175;
            }

            shutdown(*((_DWORD *)cf + 44), 1);
            int v20 = 5;
LABEL_88:
            *((_DWORD *)cf + 41) = v20;
            goto LABEL_2;
          case 7:
            int v46 = *((_DWORD *)cf + 40) + 1;
            *((_DWORD *)cf + 40) = v46;
            __int128 v47 = (int *)*((void *)cf + 12);
            if (*v47 > 50) {
              goto LABEL_82;
            }
            if (*v47 != -1) {
              goto LABEL_45;
            }
            if (_LogCategory_Initialize((uint64_t)v47, 0x32u))
            {
              __int128 v47 = (int *)*((void *)cf + 12);
              int v46 = *((_DWORD *)cf + 40);
LABEL_45:
              LogPrintF( (uint64_t)v47,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Event start: CID 0x%08X, Peer %s\n",  a5,  a6,  a7,  a8,  v46);
            }

LABEL_82:
            uint64_t v62 = (dispatch_object_s *)*((void *)cf + 28);
            if (v62)
            {
              dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
              dispatch_release(v62);
              *((void *)cf + 2_Block_object_dispose(va, 8) = 0LL;
            }

            dispatch_source_t v63 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *((dispatch_queue_t *)cf + 2));
            *((void *)cf + 2_Block_object_dispose(va, 8) = v63;
            if (!v63) {
              goto LABEL_229;
            }
            CFRetain(cf);
            dispatch_set_context(*((dispatch_object_t *)cf + 28), cf);
            dispatch_source_set_event_handler_f( *((dispatch_source_t *)cf + 28),  (dispatch_function_t)_HTTPClientTimerFiredHandler);
            dispatch_source_set_cancel_handler_f( *((dispatch_source_t *)cf + 28),  (dispatch_function_t)_HTTPClientTimerCanceledHandler);
            uint64_t v64 = (dispatch_source_s *)*((void *)cf + 28);
            dispatch_time_t v65 = dispatch_time(0LL, 1000000000LL * *((int *)cf + 36));
            dispatch_source_set_timer(v64, v65, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
            dispatch_resume(*((dispatch_object_t *)cf + 28));
LABEL_87:
            int v20 = 8;
            goto LABEL_88;
          case 8:
            uint64_t v48 = *v11;
            if (*v11) {
              goto LABEL_49;
            }
            uint64_t v34 = HTTPMessageCreate(v11);
            if ((_DWORD)v34) {
              goto LABEL_227;
            }
            uint64_t v48 = *((void *)cf + 53);
            *(_DWORD *)(v48 + 976_Block_object_dispose(va, 8) = *((_DWORD *)cf + 125);
LABEL_49:
            int v49 = v8;
            *(void *)(v48 + 8224) = *((void *)cf + 29);
            *(void *)(v48 + 8232) = *((void *)cf + 30);
            uint64_t v50 = HTTPMessageReadMessageEx( v48,  *((uint64_t (**)(void *, size_t, unint64_t *, uint64_t))cf + 60),  *((void *)cf + 57));
            uint64_t v34 = _HTTPUpdateExtraData((uint64_t)cf, *(void **)(v48 + 8224), *(void *)(v48 + 8232));
            if ((_DWORD)v34)
            {
LABEL_227:
              uint64_t v24 = v34;
              goto LABEL_207;
            }

            *(void *)(v48 + 8232) = 0LL;
            uint64_t v51 = _HTTPClientHandleIOError((uint64_t)cf, v50, 1);
            if ((_DWORD)v51 == 35)
            {
              if (*(void *)(v48 + 8216)) {
                return;
              }
              unsigned __int128 v107 = (int *)*((void *)cf + 12);
              if (*v107 <= 40)
              {
                if (*v107 != -1) {
                  goto LABEL_202;
                }
                if (_LogCategory_Initialize((uint64_t)v107, 0x28u))
                {
                  unsigned __int128 v107 = (int *)*((void *)cf + 12);
LABEL_202:
                  LogPrintF( (uint64_t)v107,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x28u,  (uint64_t)"### Ignoring spurious readability notification\n",  a5,  a6,  a7,  a8,  v122);
                }
              }

              uint64_t v108 = (dispatch_object_s *)*((void *)cf + 28);
              if (v108)
              {
                dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
                dispatch_release(v108);
                *((void *)cf + 2_Block_object_dispose(va, 8) = 0LL;
              }

              *((_DWORD *)cf + 41) = 0;
              return;
            }

            uint64_t v24 = v51;
            if ((_DWORD)v51) {
              goto LABEL_207;
            }
            LogHTTP( *((void *)cf + 12),  *((int **)cf + 12),  (unsigned __int8 *)(v48 + 24),  *(void *)(v48 + 8216),  *(void *)(v48 + 8520),  *(void *)(v48 + 8528),  a7,  a8);
            uint64_t v52 = (void (*)(uint64_t, void, void, void, void))*((void *)cf + 56);
            if (v52) {
              v52( v48 + 24,  *(void *)(v48 + 8216),  *(void *)(v48 + 8520),  *(void *)(v48 + 8528),  *((void *)cf + 54));
            }
            if (*(void *)(v48 + 8216) == 4LL && *(_BYTE *)(v48 + 24) == 36)
            {
              uint64_t v53 = (int *)*((void *)cf + 12);
              uint64_t v8 = v49;
              if (*v53 <= 50)
              {
                if (*v53 != -1) {
                  goto LABEL_58;
                }
                if (_LogCategory_Initialize((uint64_t)v53, 0x32u))
                {
                  uint64_t v53 = (int *)*((void *)cf + 12);
LABEL_58:
                  LogPrintF( (uint64_t)v53,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Binary received 2: CID 0x%08X, Header %zu bytes, Body %zu bytes\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
                }
              }

              uint64_t v97 = (void (*)(void, void, void, void))*((void *)cf + 6);
              if (v97) {
                v97( *(unsigned __int8 *)(v48 + 8480),  *(void *)(v48 + 8520),  *(void *)(v48 + 8528),  *((void *)cf + 4));
              }
              goto LABEL_173;
            }

            uint64_t v8 = v49;
            if ((cf[84] & 0x10) != 0)
            {
              uint64_t v68 = 0LL;
              uint64_t v69 = *(void *)(v48 + 8448);
              while (v69 != v68)
              {
                if (++v68 == 10) {
                  goto LABEL_141;
                }
              }

              if (aEvent10[v69]) {
                goto LABEL_78;
              }
LABEL_141:
              uint64_t v92 = (int *)*((void *)cf + 12);
              if (*v92 <= 50)
              {
                if (*v92 != -1) {
                  goto LABEL_143;
                }
                if (_LogCategory_Initialize((uint64_t)v92, 0x32u))
                {
                  uint64_t v92 = (int *)*((void *)cf + 12);
LABEL_143:
                  LogPrintF( (uint64_t)v92,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Event received 2: CID 0x%08X, Header %zu bytes, Body %zu bytes\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
                }
              }

              uint64_t v99 = (void (*)(uint64_t, void))*((void *)cf + 7);
              if (v99) {
                v99(v48, *((void *)cf + 4));
              }
              goto LABEL_173;
            }

        uint64_t v66 = (int8x16_t *)TLV8CopyCoalesced(a2, v12, 5, &v169, (int *)&GroupInfoTLV);
        dispatch_time_t v65 = (unsigned __int8 *)v66;
        if (GroupInfoTLV) {
          goto LABEL_83;
        }
        uint64_t v69 = v169;
        if (v169 <= 0xF)
        {
          uint64_t v26 = 0;
          uint64_t v156 = -6743;
          goto LABEL_276;
        }

        v169 -= 16LL;
        dispatch_source_t v70 = &v66[-1].u8[v69];
        GroupInfoTLV = _chacha20_poly1305_decrypt_all( (_DWORD *)(a1 + 414),  "PV-Msg03",  8LL,  0LL,  0LL,  v66,  v169,  v66,  (uint64_t)v70,  16LL);
        if (GroupInfoTLV)
        {
          size_t v75 = *(int **)(a1 + 16);
          if (*v75 <= 50)
          {
            if (*v75 == -1)
            {
              size_t v75 = *(int **)(a1 + 16);
            }

            LogPrintF( (uint64_t)v75,  (uint64_t)"OSStatus _VerifyServerM3(PairingSessionRef, const uint8_t *const, const uint8_t *const, uint8_t * *, size_t *, Boolean *, Boolean *)",  0x32u,  (uint64_t)"### Pair-verify server bad auth tag\n",  v71,  v72,  v73,  v74,  v161);
          }

LABEL_173:
            if (*v11)
            {
              CFRelease((CFTypeRef)*v11);
              *uint64_t v11 = 0LL;
            }

LABEL_175:
            unsigned __int128 v100 = (dispatch_object_s *)*((void *)cf + 28);
            if (v100)
            {
              dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
              dispatch_release(v100);
              *((void *)cf + 2_Block_object_dispose(va, 8) = 0LL;
            }

LABEL_177:
            *((_DWORD *)cf + 41) = 0;
            goto LABEL_2;
          case 9:
            uint64_t v105 = (int *)*((void *)cf + 12);
            if (*v105 > 90) {
              goto LABEL_204;
            }
            if (*v105 != -1) {
              goto LABEL_195;
            }
            if (_LogCategory_Initialize((uint64_t)v105, 0x5Au))
            {
              uint64_t v105 = (int *)*((void *)cf + 12);
LABEL_195:
              LogPrintF( (uint64_t)v105,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x5Au,  (uint64_t)"### Error state: CID 0x%08X\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
            }

LABEL_204:
            uint64_t v24 = 4294960587LL;
            goto LABEL_207;
          default:
            signed __int128 v106 = (int *)*((void *)cf + 12);
            if (*v106 > 90) {
              goto LABEL_206;
            }
            if (*v106 != -1) {
              goto LABEL_198;
            }
            if (_LogCategory_Initialize((uint64_t)v106, 0x5Au))
            {
              signed __int128 v106 = (int *)*((void *)cf + 12);
LABEL_198:
              LogPrintF( (uint64_t)v106,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x5Au,  (uint64_t)"### Bad state: CID 0x%08X, State %d\n",  a5,  a6,  a7,  a8,  *((_DWORD *)cf + 40));
            }

            goto LABEL_206;
        }

        goto LABEL_2;
      }

      uint64_t v15 = (dispatch_object_s *)*((void *)cf + 28);
      if (v15)
      {
        dispatch_source_cancel(*((dispatch_source_t *)cf + 28));
        dispatch_release(v15);
        *((void *)cf + 2_Block_object_dispose(va, 8) = 0LL;
      }

      uint64_t v16 = *v10;
      if (!*v10)
      {
LABEL_206:
        uint64_t v24 = 4294960534LL;
        goto LABEL_207;
      }

      if (*(_DWORD *)(v16 + 9624)) {
        break;
      }
      *(_DWORD *)(v16 + 8456) = 200;
      uint64_t v17 = *(void *)(v16 + 16);
      *uint64_t v10 = v17;
      if (!v17) {
        *((void *)cf + 6_Block_object_dispose(va, 8) = v10;
      }
      *(_DWORD *)(v16 + 964_Block_object_dispose(va, 8) = 0;
      uint64_t v18 = *(void (**)(uint64_t))(v16 + 9712);
      if (v18) {
        v18(v16);
      }
      CFRelease((CFTypeRef)v16);
      *((_DWORD *)cf + 41) = 0;
    }

    uint64_t v54 = v8;
    *(_DWORD *)(v16 + 976_Block_object_dispose(va, 8) = *((_DWORD *)cf + 125);
    int v55 = *(_DWORD *)(v16 + 9644);
    if (v55 <= 0) {
      int v55 = *((_DWORD *)cf + 36);
    }
    int v56 = *((_DWORD *)cf + 40) + 1;
    *((_DWORD *)cf + 40) = v56;
    int v57 = (int *)*((void *)cf + 12);
    if (*v57 <= 50)
    {
      if (*v57 != -1) {
        goto LABEL_63;
      }
      if (_LogCategory_Initialize((uint64_t)v57, 0x32u))
      {
        int v57 = (int *)*((void *)cf + 12);
        int v56 = *((_DWORD *)cf + 40);
LABEL_63:
        LogPrintF( (uint64_t)v57,  (uint64_t)"void _HTTPClientRunStateMachine(HTTPClientRef)",  0x32u,  (uint64_t)"Request start: CID 0x%08X, Peer %s, TimeoutSecs %d\n",  a5,  a6,  a7,  a8,  v56);
      }
    }

    if (v55 < 1)
    {
LABEL_103:
      *((_DWORD *)cf + 41) = 3;
      uint64_t v8 = v54;
      continue;
    }

    break;
  }

  dispatch_source_t v70 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *((dispatch_queue_t *)cf + 2));
  *((void *)cf + 2_Block_object_dispose(va, 8) = v70;
  if (v70)
  {
    CFRetain(cf);
    dispatch_set_context(*((dispatch_object_t *)cf + 28), cf);
    dispatch_source_set_event_handler_f( *((dispatch_source_t *)cf + 28),  (dispatch_function_t)_HTTPClientTimerFiredHandler);
    dispatch_source_set_cancel_handler_f( *((dispatch_source_t *)cf + 28),  (dispatch_function_t)_HTTPClientTimerCanceledHandler);
    uint64_t v71 = (dispatch_source_s *)*((void *)cf + 28);
    dispatch_time_t v72 = dispatch_time(0LL, 1000000000LL * v55);
    dispatch_source_set_timer(v71, v72, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    dispatch_resume(*((dispatch_object_t *)cf + 28));
    goto LABEL_103;
  }

LABEL_229:
  uint64_t v24 = 4294960596LL;
LABEL_207:
  _HTTPClientErrorHandler((uint64_t)cf, v24, a3, a4, a5, a6, a7, a8);
}

void _HTTPClientConnectHandler( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  int v10 = a1;
  if (!(_DWORD)a2)
  {
    if (*(void *)(a3 + 536))
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, void))(a3 + 464);
      if (v11)
      {
        uint64_t v9 = v11(a1, *(void *)(a3 + 456));
        if ((_DWORD)v9) {
          goto LABEL_5;
        }
      }

      else if (!*(_BYTE *)(a3 + 496))
      {
        *(void *)(a3 + 456) = (int)a1;
      }

      int v13 = *(_DWORD *)(a3 + 112);
      if (v13 >= 1)
      {
        int v14 = *(_DWORD *)(a3 + 120);
        if (v14 >= 1) {
          SocketSetKeepAliveEx(v10, v13, *(_DWORD *)(a3 + 116), v14);
        }
      }

      int v15 = *(_DWORD *)(a3 + 140);
      if (v15) {
        SocketSetQoS(v10, v15);
      }
      int v16 = *(_DWORD *)(a3 + 144);
      if (v16 < 1) {
        goto LABEL_28;
      }
      uint64_t v21 = *(int **)(a3 + 96);
      if (*v21 > 60) {
        goto LABEL_28;
      }
      if (*v21 == -1)
      {
        if (!_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
        {
LABEL_28:
          if ((*(_BYTE *)(a3 + 85) & 0x10) != 0)
          {
            int v38 = 1;
            if (setsockopt(v10, 0xFFFF, 4131, &v38, 4u))
            {
              if (*__error())
              {
                int v26 = *__error();
                if (!v26) {
                  goto LABEL_38;
                }
              }

              else
              {
                LOBYTE(v26) = -44;
              }

              uint64_t v27 = *(int **)(a3 + 96);
              if (*v27 <= 60)
              {
                if (*v27 == -1)
                {
                  uint64_t v27 = *(int **)(a3 + 96);
                }

                LogPrintF( (uint64_t)v27,  (uint64_t)"void _HTTPClientConnectHandler(SocketRef, OSStatus, void *)",  0x3Cu,  (uint64_t)"### Set SO_NOADDRERR failed: %#m",  v22,  v23,  v24,  v25,  v26);
              }
            }
          }

void _HTTPClientTimerFiredHandler( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t _HTTPClientHandleIOError(uint64_t a1, uint64_t a2, int a3)
{
  if ((int)a2 <= -6767)
  {
    if ((_DWORD)a2 != -6775)
    {
      if ((_DWORD)a2 != -6774) {
        return a2;
      }
LABEL_8:
      if (*(_BYTE *)(a1 + 192))
      {
        *(_BYTE *)(a1 + 192) = 0;
        uint64_t v4 = (dispatch_object_t *)(a1 + 184);
LABEL_14:
        dispatch_resume(*v4);
        return 35LL;
      }

      return 35LL;
    }

uint64_t _HTTPUpdateExtraData(uint64_t a1, void *__src, size_t __size)
{
  if (__size)
  {
    __int128 v6 = *(void **)(a1 + 232);
    if (*(void *)(a1 + 240) == __size)
    {
LABEL_5:
      memmove(v6, __src, __size);
      uint64_t result = 0LL;
      *(void *)(a1 + 240) = __size;
      return result;
    }

    __int128 v6 = realloc(v6, __size);
    if (v6)
    {
      *(void *)(a1 + 232) = v6;
      goto LABEL_5;
    }

    return 4294960568LL;
  }

  else
  {
    uint64_t v8 = *(void **)(a1 + 232);
    if (v8)
    {
      free(v8);
      *(void *)(a1 + 232) = 0LL;
    }

    uint64_t result = 0LL;
    *(void *)(a1 + 240) = 0LL;
  }

  return result;
}

uint64_t _HTTPClientReadHandler(uint64_t a1)
{
  *(_BYTE *)(a1 + 192) = 1;
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 9644);
    if (v3 >= 1)
    {
      uint64_t v4 = *(dispatch_source_s **)(a1 + 224);
      if (v4)
      {
        dispatch_time_t v5 = dispatch_time(0LL, 1000000000LL * v3);
        dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      }
    }
  }

  if ((*(_BYTE *)(a1 + 84) & 0x10) != 0 && !v2 && !*(_DWORD *)(a1 + 164)) {
    *(_DWORD *)(a1 + 164) = 7;
  }
  return _HTTPClientRunStateMachine((CFTypeRef)a1);
}

void _HTTPClientCancelHandler(_DWORD *cf)
{
  int v2 = cf[45] - 1;
  cf[45] = v2;
  if (!v2)
  {
    int v3 = (void (*)(uint64_t, void, void, void))*((void *)cf + 63);
    uint64_t v4 = cf[44];
    if (v3)
    {
      v3(v4, *((void *)cf + 64), *((void *)cf + 65), *((void *)cf + 66));
    }

    else
    {
      if ((v4 & 0x80000000) != 0) {
        goto LABEL_5;
      }
      if (close(v4) && *__error()) {
        __error();
      }
    }

    cf[44] = -1;
  }

uint64_t _HTTPClientWriteHandler(uint64_t a1)
{
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 1;
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 9644);
    if (v3 >= 1)
    {
      uint64_t v4 = *(dispatch_source_s **)(a1 + 224);
      if (v4)
      {
        dispatch_time_t v5 = dispatch_time(0LL, 1000000000LL * v3);
        dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      }
    }
  }

  return _HTTPClientRunStateMachine((CFTypeRef)a1);
}

uint64_t _HTTPClientSocketEventsHandler(void *a1)
{
  uint64_t result = a1[27];
  if (!result) {
    return result;
  }
  unsigned int data = dispatch_source_get_data((dispatch_source_t)result);
  char v8 = data;
  uint64_t v9 = (data >> 4) & 0x800 | (((data >> 8) & 1) << 10);
  uint64_t result = a1[12];
  if (*(int *)result <= 50)
  {
    if (*(_DWORD *)result != -1)
    {
LABEL_4:
      uint64_t result = LogPrintF( result,  (uint64_t)"void _HTTPClientSocketEventsHandler(void *)",  0x32u,  (uint64_t)"Socket events: raw 0x%llX, flags %#{flags}",  v4,  v5,  v6,  v7,  v8);
      goto LABEL_6;
    }

    uint64_t result = _LogCategory_Initialize(result, 0x32u);
    if ((_DWORD)result)
    {
      uint64_t result = a1[12];
      goto LABEL_4;
    }
  }

uint64_t HTTPClientSendMessageSync(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0LL);
  if (!v4) {
    return 4294960568LL;
  }
  uint64_t v11 = v4;
  *(void *)(a2 + 9664) = v4;
  *(void *)(a2 + 9712) = _HTTPClientSendMessageSyncCompletion;
  uint64_t v12 = HTTPClientSendMessage(a1, a2, v5, v6, v7, v8, v9, v10);
  if (!(_DWORD)v12)
  {
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v12 = *(unsigned int *)(a2 + 9648);
    if (!(_DWORD)v12)
    {
      int v13 = *(_DWORD *)(a2 + 8456);
      unsigned int v14 = v13 - 200;
      unsigned int v15 = v13 + 200000;
      if (v14 >= 0x64) {
        uint64_t v12 = v15;
      }
      else {
        uint64_t v12 = 0LL;
      }
    }
  }

  dispatch_release(v11);
  return v12;
}

uint64_t _HTTPClientSendMessageSyncCompletion(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9664));
}

uint64_t _HTTPMessageGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPMessageCFTypeID TypeID = result;
  return result;
}

void _HTTPMessageFinalize(void *a1)
{
  uint64_t v2 = (void *)a1[1195];
  if (v2)
  {
    free(v2);
    a1[1195] = 0LL;
  }

  int v3 = (void *)a1[1196];
  if (v3)
  {
    free(v3);
    a1[1196] = 0LL;
  }

  a1[1197] = 0LL;
  dispatch_semaphore_t v4 = (const void *)a1[1215];
  if (v4)
  {
    _Block_release(v4);
    a1[1215] = 0LL;
  }

  uint64_t v5 = (void *)a1[1218];
  if (v5)
  {
    free(v5);
    a1[1218] = 0LL;
  }

int *HTTPMessageReset(uint64_t a1)
{
  uint64_t v2 = a1 + 8504;
  *(void *)(a1 + 8216) = 0LL;
  *(_BYTE *)(a1 + 8504) = 0;
  *(_DWORD *)(a1 + 850_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 8520) = a1 + 8552;
  *(void *)(a1 + 852_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 8544) = 0LL;
  int v3 = *(void **)(a1 + 9552);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 9552) = 0LL;
  }

  *(void *)(a1 + 9632) = -1LL;
  if (*(_BYTE *)(v2 + 1228))
  {
    int v4 = *(_DWORD *)(a1 + 9728);
    if ((v4 & 0x80000000) == 0 && close(v4) && *__error()) {
      __error();
    }
  }

  *(_DWORD *)(a1 + 972_Block_object_dispose(va, 8) = -1;
  *(_BYTE *)(v2 + 122_Block_object_dispose(va, 8) = 0;
  uint64_t result = (int *)*(unsigned int *)(a1 + 9752);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }

    *(_DWORD *)(a1 + 9752) = -1;
  }

  return result;
}

uint64_t HTTPMessageCreate(uint64_t *a1)
{
  if (gHTTPMessageInitOnce != -1) {
    dispatch_once_f(&gHTTPMessageInitOnce, 0LL, (dispatch_function_t)_HTTPMessageGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v3 = Instance;
  bzero((void *)(Instance + 16), 0x2620uLL);
  *(_DWORD *)(v3 + 972_Block_object_dispose(va, 8) = -1;
  *(_DWORD *)(v3 + 9752) = -1;
  *(void *)(v3 + 8536) = 16000000LL;
  HTTPMessageReset(v3);
  uint64_t result = 0LL;
  *a1 = v3;
  return result;
}

void *HTTPMessageCopy(uint64_t a1, _DWORD *a2)
{
  CFTypeRef cf = 0LL;
  int v4 = HTTPMessageCreate((uint64_t *)&cf);
  uint64_t v5 = cf;
  if (!v4)
  {
    memcpy((char *)cf + 24, (const void *)(a1 + 24), *(void *)(a1 + 8216));
    v5[1027] = *(void *)(a1 + 8216);
    int v6 = HTTPHeader_Parse((uint64_t)(v5 + 3));
    if (!v6)
    {
      int v6 = HTTPMessageSetBodyLength(v5, *(void *)(a1 + 8528));
      if (!v6)
      {
        memcpy((void *)v5[1065], *(const void **)(a1 + 8520), *(void *)(a1 + 8528));
        if (!a2) {
          return v5;
        }
        goto LABEL_8;
      }
    }

    goto LABEL_6;
  }

  int v6 = v4;
  if (cf)
  {
LABEL_6:
    CFRelease(v5);
    uint64_t v5 = 0LL;
  }

  if (a2) {
LABEL_8:
  }
    *a2 = v6;
  return v5;
}

uint64_t HTTPMessageSetBodyLength(void *a1, size_t __size)
{
  int v4 = (void *)a1[1194];
  if (v4)
  {
    free(v4);
    a1[1194] = 0LL;
  }

  if (__size <= 0x3E8)
  {
    uint64_t v5 = a1 + 1069;
LABEL_6:
    uint64_t result = 0LL;
    a1[1065] = v5;
    a1[1066] = __size;
    return result;
  }

  uint64_t v5 = malloc(__size);
  a1[1194] = v5;
  if (v5) {
    goto LABEL_6;
  }
  return 4294960568LL;
}

uint64_t HTTPMessageInitRequest( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_InitRequestV(a1 + 24, a2, a3, a4, (uint64_t)&a9, a6, a7, a8);
}

uint64_t HTTPMessageInitResponse( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitResponseEx(a1 + 24, a2, a3, 0LL, a4, a6, a7, a8);
}

uint64_t HTTPMessageGetHeaderField( uint64_t a1, char *a2, const char **a3, size_t *a4, const char **a5, void *a6)
{
  return HTTPGetHeaderField((char *)(a1 + 24), *(void *)(a1 + 8216), a2, a3, a4, a5, a6, 0LL);
}

uint64_t HTTPMessageSetHeaderField( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_SetFieldV((char *)(a1 + 24), a2, a3, (uint64_t)&a9);
}

uint64_t HTTPMessageSetHeaderField_safe( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_SetFieldV((char *)(a1 + 24), a2, a3, (uint64_t)&a9);
}

uint64_t HTTPMessageReadMessageEx( uint64_t a1, uint64_t (*a2)(void *, size_t, unint64_t *, uint64_t), uint64_t a3)
{
  int v6 = (char *)(a1 + 24);
  uint64_t v7 = (_BYTE *)(a1 + 8504);
  if (*(_BYTE *)(a1 + 8504)) {
    goto LABEL_2;
  }
  uint64_t result = HTTPReadHeader(a1 + 24, a2, a3);
  if ((_DWORD)result) {
    return result;
  }
  *uint64_t v7 = 1;
  if (*(void *)(a1 + 9744))
  {
    int v36 = *(_DWORD *)(a1 + 9752);
    if ((v36 & 0x80000000) == 0)
    {
      if (close(v36) && *__error()) {
        __error();
      }
      *(_DWORD *)(a1 + 9752) = -1;
    }

    while (1)
    {
      int v37 = open(*(const char **)(a1 + 9744), 1538, 384LL);
      *(_DWORD *)(a1 + 9752) = v37;
      if ((v37 & 0x80000000) == 0) {
        break;
      }
      if (!*__error()) {
        return 4294960596LL;
      }
      uint64_t result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result) {
          return result;
        }
        break;
      }
    }
  }

  size_t v38 = *(void *)(a1 + 8216);
  if (v38 == -1LL) {
    size_t v38 = strlen(v6);
  }
  int v39 = HTTPGetHeaderField(v6, v38, "Transfer-Encoding", 0LL, 0LL, (const char **)&v67, &v66, 0LL);
  if (v39)
  {
LABEL_114:
    *(_DWORD *)(a1 + 850_Block_object_dispose(va, 8) = v39 == 0;
    size_t v52 = *(void *)(a1 + 8488);
    if ((*(_DWORD *)(a1 + 9752) & 0x80000000) != 0)
    {
      if (v52 > *(void *)(a1 + 8536)) {
        return 4294960553LL;
      }
      size_t v63 = *(void *)(a1 + 8488);
    }

    else
    {
      *(void *)(a1 + 9760) = v52;
      if (v52 >= 0x100000) {
        size_t v52 = 0x100000LL;
      }
      size_t v63 = v52;
      *(void *)(a1 + 8536) = v52;
    }

    uint64_t result = HTTPMessageSetBodyLength((void *)a1, v52);
    if (!(_DWORD)result) {
      goto LABEL_2;
    }
    return result;
  }

  if (v66 < 1) {
    goto LABEL_113;
  }
  uint64_t v40 = v67;
  int v41 = &v67[v66];
  int v42 = &v67[v66];
  uint64_t v43 = MEMORY[0x1895F8770];
  while (2)
  {
    if (v40 >= v41) {
      goto LABEL_84;
    }
    int64_t v44 = v42 - v40;
    uint64_t v45 = v40 + 1;
    while (1)
    {
      uint64_t v46 = *(v45 - 1);
      if (*(v45 - 1) < 0) {
        break;
      }
      if ((*(_DWORD *)(v43 + 4 * v46 + 60) & 0x4000) == 0) {
        goto LABEL_83;
      }
LABEL_81:
      uint64_t v67 = v45++;
      if (!--v44)
      {
        uint64_t v40 = v42;
        goto LABEL_84;
      }
    }

    if (__maskrune(v46, 0x4000uLL)) {
      goto LABEL_81;
    }
LABEL_83:
    uint64_t v40 = v67;
LABEL_84:
    __int128 v47 = v40;
    if (v40 < v41)
    {
      __int128 v47 = v40;
      do
      {
        LOBYTE(__nbyte) = *v47;
        if ((__nbyte & 0x80) != 0)
        {
          int v48 = __maskrune(__nbyte, 0x4000uLL);
          __int128 v47 = v67;
          if (v48) {
            break;
          }
        }

        else if ((*(_DWORD *)(v43 + 4LL * __nbyte + 60) & 0x4000) != 0)
        {
          break;
        }

        uint64_t v67 = ++v47;
      }

      while (v47 < v41);
    }

    if (strnicmpx((unsigned __int8 *)v40, v47 - v40, "chunked"))
    {
      uint64_t v40 = v67;
      if (v67 < v41)
      {
        uint64_t v49 = v42 - v67;
        uint64_t v50 = v67 + 1;
        while (1)
        {
          uint64_t v51 = *(v50 - 1);
          if (*(v50 - 1) < 0)
          {
            if (!__maskrune(v51, 0x4000uLL))
            {
LABEL_102:
              uint64_t v40 = v67;
              break;
            }
          }

          else if ((*(_DWORD *)(v43 + 4 * v51 + 60) & 0x4000) == 0)
          {
            goto LABEL_102;
          }

          uint64_t v67 = v50++;
          if (!--v49)
          {
            uint64_t v40 = v42;
            break;
          }
        }
      }

      if (v40 < v41 && *v40 == 59)
      {
        uint64_t v67 = v40 + 1;
        while (!HTTPParseParameter(v67, v41, 0LL, 0LL, 0LL, 0LL, (char *)&__nbyte, &v67)
        uint64_t v40 = v67;
      }

      if (v40 < v41 && *v40 == 44) {
        uint64_t v67 = ++v40;
      }
      if (v40 >= v41)
      {
LABEL_113:
        int v39 = -6727;
        goto LABEL_114;
      }

      continue;
    }

    break;
  }

  *(_DWORD *)(a1 + 850_Block_object_dispose(va, 8) = 1;
LABEL_2:
  int v8 = *(_DWORD *)(a1 + 8508);
  if (v8)
  {
    while (1)
    {
      switch(v8)
      {
        case 1:
          uint64_t result = HTTPReadLine(v6, (uint64_t (*)(void))a2, a3, &v67, &v66);
          if ((_DWORD)result) {
            return result;
          }
          unint64_t v15 = v64;
          if (v64)
          {
            if ((*(_DWORD *)(a1 + 9752) & 0x80000000) != 0)
            {
              unint64_t v31 = *(void *)(a1 + 8528);
              size_t v32 = v31 + v64;
              if (v31 + v64 <= v31) {
                return 4294960553LL;
              }
              uint64_t v33 = (void *)(a1 + 8552);
              if (v32 >= 0x3E9)
              {
                unint64_t v34 = realloc(*(void **)(a1 + 9552), v32);
                if (!v34) {
                  return 4294960568LL;
                }
                uint64_t v33 = v34;
                if (!*(void *)(a1 + 9552))
                {
                  size_t v35 = *(void *)(a1 + 8544);
                  if (v35) {
                    memmove(v34, *(const void **)(a1 + 8520), v35);
                  }
                }

                *(void *)(a1 + 9552) = v33;
              }

              *(void *)(a1 + 8520) = v33;
              *(void *)(a1 + 852_Block_object_dispose(va, 8) = v32;
            }

            else
            {
              if (v64 >= 0x100000) {
                size_t v16 = 0x100000LL;
              }
              else {
                size_t v16 = v64;
              }
              if (v16 > *(void *)(a1 + 8536))
              {
                uint64_t result = HTTPMessageSetBodyLength((void *)a1, v16);
                if ((_DWORD)result) {
                  return result;
                }
                *(void *)(a1 + 8536) = v16;
              }

              *(void *)(a1 + 9760) = v15;
            }

            int v17 = 2;
          }

          else
          {
            int v17 = 4;
          }

uint64_t HTTPMessageWriteMessage(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = a1 + 9616;
  uint64_t v7 = a1 + 9624;
  uint64_t result = a2(a1 + 9616, a1 + 9624);
  if ((_DWORD)result) {
    return result;
  }
  if ((*(_DWORD *)(a1 + 9728) & 0x80000000) != 0) {
    return 0LL;
  }
  while (2)
  {
    uint64_t v9 = *(void *)(a1 + 9736);
    if (v9 < 1) {
      return 0LL;
    }
    if (v9 >= *(void *)(a1 + 8536)) {
      size_t v10 = *(void *)(a1 + 8536);
    }
    else {
      size_t v10 = *(void *)(a1 + 9736);
    }
    while (1)
    {
      ssize_t v11 = read(*(_DWORD *)(a1 + 9728), *(void **)(a1 + 8520), v10);
      if (v11 > 0) {
        break;
      }
      if (!*__error()) {
        return 4294960596LL;
      }
      uint64_t result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result) {
          return result;
        }
        break;
      }
    }

    *(void *)(a1 + 9736) -= v11;
    *(void *)(a1 + 9584) = *(void *)(a1 + 8520);
    *(void *)(a1 + 9592) = v11;
    *(_DWORD *)(a1 + 9624) = 1;
    *(void *)(a1 + 9616) = a1 + 9584;
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v6, v7, a3);
    if (!(_DWORD)result) {
      continue;
    }
    break;
  }

  return result;
}

uint64_t HTTPMessageSetBody(uint64_t a1, uint64_t a2, const void *a3, size_t __size)
{
  uint64_t result = *(unsigned int *)(a1 + 8500);
  if (!(_DWORD)result)
  {
    uint64_t result = HTTPMessageSetBodyLength((void *)a1, __size);
    if ((_DWORD)result)
    {
      if (!*(_DWORD *)(a1 + 8500)) {
        *(_DWORD *)(a1 + 8500) = result;
      }
    }

    else
    {
      if (a3)
      {
        uint64_t v14 = *(void **)(a1 + 8520);
        if (v14 != a3) {
          memmove(v14, a3, __size);
        }
      }

      HTTPHeader_SetField((char *)(a1 + 24), "Content-Length", (uint64_t)"%zu", v9, v10, v11, v12, v13, __size);
      if (a2) {
        HTTPHeader_SetField((char *)(a1 + 24), "Content-Type", (uint64_t)"%s", v15, v16, v17, v18, v19, a2);
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t HTTPMessageSetBodyFileDescriptor(uint64_t a1, int a2, unint64_t a3, uint64_t a4, char a5)
{
  if (fstat(a2, &v23))
  {
    if (!*__error()) {
      return 4294960596LL;
    }
    uint64_t result = *__error();
    if ((_DWORD)result) {
      return result;
    }
  }

  if (a3 || (v23.st_mode & 0xF000) == 0x8000)
  {
    off_t v16 = lseek(a2, a3, (a3 >> 62) & 2);
    if (v16 == -1)
    {
      if (!*__error()) {
        return 4294960596LL;
      }
      uint64_t result = *__error();
      if ((_DWORD)result) {
        return result;
      }
      off_t v16 = -1LL;
    }
  }

  else
  {
    off_t v16 = 0LL;
  }

  if (a4 >= 0) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = v23.st_size - v16;
  }
  HTTPHeader_SetField((char *)(a1 + 24), "Content-Length", (uint64_t)"%lld", v10, v11, v12, v13, v14, v17);
  if (v17 >= 0x100000) {
    size_t v18 = 0x100000LL;
  }
  else {
    size_t v18 = v17;
  }
  if (v18 > 0x3E8)
  {
    size_t v20 = realloc(*(void **)(a1 + 9552), v18);
    if (!v20) {
      return 4294960568LL;
    }
    uint64_t v19 = v20;
    *(void *)(a1 + 9552) = v20;
  }

  else
  {
    uint64_t v19 = (void *)(a1 + 8552);
  }

  *(void *)(a1 + 8520) = v19;
  *(void *)(a1 + 8536) = v18;
  if (v18)
  {
    ssize_t v21 = read(a2, v19, v18);
    if (v21 > 0)
    {
LABEL_25:
      *(void *)(a1 + 852_Block_object_dispose(va, 8) = v21;
      v17 -= v21;
      goto LABEL_28;
    }

    if (*__error())
    {
      uint64_t result = *__error();
      if ((_DWORD)result) {
        return result;
      }
      goto LABEL_25;
    }

    return 4294960596LL;
  }

  *(void *)(a1 + 852_Block_object_dispose(va, 8) = 0LL;
LABEL_28:
  if (*(_BYTE *)(a1 + 9732))
  {
    int v22 = *(_DWORD *)(a1 + 9728);
    if ((v22 & 0x80000000) == 0)
    {
      if (close(v22))
      {
        if (*__error()) {
          __error();
        }
      }
    }
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 972_Block_object_dispose(va, 8) = a2;
  *(_BYTE *)(a1 + 9732) = a5;
  *(void *)(a1 + 9736) = v17;
  return result;
}

uint64_t HTTPMessageSetBodyFilePath(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  do
  {
    int v8 = open(a2, 0);
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v9 = HTTPMessageSetBodyFileDescriptor(a1, v8, a3, a4, 1);
      if ((_DWORD)v9 && close(v8))
      {
        if (*__error()) {
          __error();
        }
      }

      return v9;
    }

    if (!*__error()) {
      return 4294960596LL;
    }
    uint64_t v9 = *__error();
  }

  while ((_DWORD)v9 == 4);
  if (!(_DWORD)v9) {
    return HTTPMessageSetBodyFileDescriptor(a1, v8, a3, a4, 1);
  }
  return v9;
}

void HTTPMessageSetCompletionBlock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v4 = _Block_copy(aBlock);
  }
  else {
    int v4 = 0LL;
  }
  uint64_t v5 = *(const void **)(a1 + 9720);
  if (v5) {
    _Block_release(v5);
  }
  *(void *)(a1 + 9720) = v4;
  uint64_t v6 = _HTTPMessageCompletionHandler;
  if (!aBlock) {
    uint64_t v6 = 0LL;
  }
  *(void *)(a1 + 9712) = v6;
}

void _HTTPMessageCompletionHandler(uint64_t a1)
{
  uint64_t v1 = *(void (***)(void, void))(a1 + 9720);
  *(void *)(a1 + 9720) = 0LL;
  v1[2](v1, a1);
  _Block_release(v1);
}

uint64_t HTTPMessageSetReceiveFilePath(uint64_t a1, char *__s1)
{
  uint64_t v3 = strdup(__s1);
  if (!v3) {
    return 4294960568LL;
  }
  int v4 = v3;
  uint64_t v5 = *(void **)(a1 + 9744);
  if (v5) {
    free(v5);
  }
  *(void *)(a1 + 9744) = v4;
  int v6 = *(_DWORD *)(a1 + 9752);
  if (v6 < 0) {
    return 0LL;
  }
  if (close(v6))
  {
    if (*__error()) {
      __error();
    }
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 9752) = -1;
  return result;
}

CFMutableDictionaryRef HTTPMessageCreateDictionary(uint64_t a1, char a2, int *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (Mutable)
  {
    if ((a2 & 2) != 0)
    {
      uint64_t v9 = (char *)(a1 + 24);
      uint64_t v17 = (char *)(a1 + 24);
      uint64_t v10 = a1 + 24 + *(void *)(a1 + 8216);
      while (!HTTPGetHeaderField( v9,  v10 - (void)v9,  0LL,  (const char **)&v16,  (size_t *)&v15,  &v14,  &v13,  &v17))
      {
        CFStringRef v11 = CFStringCreateWithBytes(0LL, v16, v15, 0x8000100u, 0);
        if (!v11)
        {
          CFRelease(Mutable);
          CFMutableDictionaryRef Mutable = 0LL;
          int v7 = -6742;
          goto LABEL_4;
        }

        CFStringRef v12 = v11;
        CFDictionarySetCString(Mutable, v11, v14, v13);
        CFRelease(v12);
        uint64_t v9 = v17;
      }
    }

    int v7 = 0;
  }

  else
  {
    int v7 = -6728;
  }

uint64_t HTTPMessageGetOrCopyFormVariable( unint64_t *a1, unsigned __int8 *a2, void *a3, size_t *a4, char **a5)
{
  uint64_t result = URLGetOrCopyVariable(a1[1045], (_BYTE *)(a1[1045] + a1[1046]), a2, a3, a4, a5, 0LL);
  if ((_DWORD)result) {
    return URLGetOrCopyVariable(a1[1065], (_BYTE *)(a1[1065] + a1[1066]), a2, a3, a4, a5, 0LL);
  }
  return result;
}

uint64_t _HTTPServerGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPServerCFTypeID TypeID = result;
  return result;
}

void _HTTPServerFinalize(void *a1)
{
  uint64_t v2 = (void (*)(void *, void))a1[17];
  if (v2) {
    v2(a1, a1[15]);
  }
  uint64_t v3 = (dispatch_object_s *)a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0LL;
  }

  int v4 = (void *)a1[10];
  if (v4)
  {
    free(v4);
    a1[10] = 0LL;
  }

  uint64_t v5 = (void *)a1[11];
  if (v5)
  {
    free(v5);
    a1[11] = 0LL;
  }

uint64_t HTTPServerCreate(void *a1, _OWORD *a2)
{
  if (gHTTPServerInitOnce != -1) {
    dispatch_once_f(&gHTTPServerInitOnce, 0LL, (dispatch_function_t)_HTTPServerGetTypeID);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v5 = Instance;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Instance[1] = 0u;
  HTTPServerSetDispatchQueue((uint64_t)Instance, 0LL);
  *((void *)v5 + 3) = &gLogCategory_HTTPServerCore;
  __int128 v7 = a2[1];
  __int128 v6 = a2[2];
  *(_OWORD *)((char *)v5 + 120) = *a2;
  *(_OWORD *)((char *)v5 + 152) = v6;
  *(_OWORD *)((char *)v5 + 136) = v7;
  __int128 v8 = a2[3];
  __int128 v9 = a2[4];
  __int128 v10 = a2[5];
  *(_OWORD *)((char *)v5 + 216) = a2[6];
  *(_OWORD *)((char *)v5 + 200) = v10;
  *(_OWORD *)((char *)v5 + 184) = v9;
  *(_OWORD *)((char *)v5 + 16_Block_object_dispose(va, 8) = v8;
  CFStringRef v11 = (uint64_t (*)(_OWORD *, void))*((void *)v5 + 16);
  if (v11 && (uint64_t v12 = v11(v5, *((void *)v5 + 15)), (_DWORD)v12))
  {
    uint64_t v13 = v12;
    CFRelease(v5);
  }

  else
  {
    uint64_t v13 = 0LL;
    *a1 = v5;
  }

  return v13;
}

void HTTPServerSetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  int v4 = *(dispatch_object_s **)(a1 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 16) = v3;
}

uint64_t HTTPServerSetLogging(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t _HTTPServerControl(uint64_t a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, uint64_t a5)
{
  if (CFEqual(cf1, @"startServer"))
  {
    *(void *)((char *)&v29 + 4) = -1LL;
    if (*(_BYTE *)(a1 + 240))
    {
      LODWORD(v29) = 16777343;
      uint64_t v10 = ServerSocketOpenEx2( 2,  1,  6,  &v29,  0,  *(_DWORD *)(a1 + 236),  (unsigned int *)(a1 + 48),  -1,  0,  (int *)&v29 + 2);
    }

    else
    {
      uint64_t v10 = ServerSocketPairOpen(1, 6, *(_DWORD *)(a1 + 236), (int *)(a1 + 48), -1, (int *)&v29 + 2, (int *)&v29 + 1);
    }

    uint64_t v11 = v10;
    if ((_DWORD)v10) {
      goto LABEL_8;
    }
    int v13 = DWORD2(v29);
    if ((DWORD2(v29) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 232)) {
        SocketSetP2P(SDWORD2(v29), 1);
      }
      uint64_t v14 = calloc(1uLL, 0x18uLL);
      if (!v14) {
        goto LABEL_42;
      }
      CFIndex v15 = v14;
      dispatch_source_t v16 = dispatch_source_create(MEMORY[0x1895F8B60], v13, 0LL, *(dispatch_queue_t *)(a1 + 16));
      if (!v16) {
        goto LABEL_38;
      }
      uint64_t v17 = v16;
      CFRetain((CFTypeRef)a1);
      *(void *)CFIndex v15 = v17;
      v15[2] = v13;
      *((void *)v15 + 2) = a1;
      *(void *)(a1 + 32) = v15;
      dispatch_set_context(v17, v15);
      dispatch_source_set_event_handler_f(v17, (dispatch_function_t)_HTTPServerAcceptConnection);
      dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)_HTTPServerListenerCanceled);
      dispatch_resume(v17);
      DWORD2(v29) = -1;
    }

    int v18 = DWORD1(v29);
    if ((DWORD1(v29) & 0x80000000) != 0)
    {
LABEL_31:
      int v22 = *(uint64_t (**)(uint64_t, void, const __CFString *, void, void, void))(a1 + 144);
      if (v22)
      {
        uint64_t v11 = v22(a1, 0LL, @"startServer", 0LL, 0LL, *(void *)(a1 + 120));
        if ((_DWORD)v11) {
          goto LABEL_8;
        }
      }

      CFRetain((CFTypeRef)a1);
      *(_BYTE *)(a1 + 64) = 1;
      unint64_t v27 = *(int **)(a1 + 24);
      if (*v27 > 40) {
        goto LABEL_41;
      }
      if (*v27 == -1)
      {
        unint64_t v27 = *(int **)(a1 + 24);
      }

      LogPrintF( (uint64_t)v27,  (uint64_t)"OSStatus _HTTPServerStart(HTTPServerRef)",  0x28u,  (uint64_t)"Listening on port %d\n",  v23,  v24,  v25,  v26,  *(_DWORD *)(a1 + 48));
LABEL_41:
      uint64_t v11 = 0LL;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 232)) {
      SocketSetP2P(SDWORD1(v29), 1);
    }
    uint64_t v19 = calloc(1uLL, 0x18uLL);
    if (v19)
    {
      CFIndex v15 = v19;
      dispatch_source_t v20 = dispatch_source_create(MEMORY[0x1895F8B60], v18, 0LL, *(dispatch_queue_t *)(a1 + 16));
      if (v20)
      {
        ssize_t v21 = v20;
        CFRetain((CFTypeRef)a1);
        *(void *)CFIndex v15 = v21;
        v15[2] = v18;
        *((void *)v15 + 2) = a1;
        *(void *)(a1 + 40) = v15;
        dispatch_set_context(v21, v15);
        dispatch_source_set_event_handler_f(v21, (dispatch_function_t)_HTTPServerAcceptConnection);
        dispatch_source_set_cancel_handler_f(v21, (dispatch_function_t)_HTTPServerListenerCanceled);
        dispatch_resume(v21);
        DWORD1(v29) = -1;
        goto LABEL_31;
      }

void _HTTPServerAcceptConnection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v23 = 0LL;
  uint64_t v10 = *(int **)(v9 + 24);
  if (*v10 <= 30)
  {
    if (*v10 != -1)
    {
LABEL_3:
      LogPrintF( (uint64_t)v10,  (uint64_t)"void _HTTPServerAcceptConnection(void *)",  0x1Eu,  (uint64_t)"Accepting connection: socket=%d",  a5,  a6,  a7,  a8,  *(_DWORD *)(a1 + 8));
      goto LABEL_5;
    }

    if (_LogCategory_Initialize((uint64_t)v10, 0x1Eu))
    {
      uint64_t v10 = *(int **)(v9 + 24);
      goto LABEL_3;
    }
  }

void _HTTPServerListenerCanceled(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error()) {
      __error();
    }
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = -1;
  }

  CFRelease(*(CFTypeRef *)(a1 + 16));
  free((void *)a1);
}

void _HTTPServerStop(CFTypeRef cf)
{
  int v2 = (dispatch_object_s *)*((void *)cf + 9);
  if (v2)
  {
    dispatch_source_cancel(*((dispatch_source_t *)cf + 9));
    dispatch_release(v2);
    *((void *)cf + 9) = 0LL;
  }

  uint64_t v3 = (dispatch_source_t *)*((void *)cf + 4);
  if (v3)
  {
    dispatch_source_t v4 = *v3;
    if (*v3)
    {
      dispatch_source_cancel(*v3);
      dispatch_release(v4);
      **((void **)cf + 4) = 0LL;
    }

    *((void *)cf + 4) = 0LL;
  }

  uint64_t v5 = (dispatch_source_t *)*((void *)cf + 5);
  if (v5)
  {
    dispatch_source_t v6 = *v5;
    if (*v5)
    {
      dispatch_source_cancel(*v5);
      dispatch_release(v6);
      **((void **)cf + 5) = 0LL;
    }

    *((void *)cf + 5) = 0LL;
  }

  while (1)
  {
    uint64_t v7 = *((void *)cf + 7);
    if (!v7) {
      break;
    }
    _HTTPServerCloseConnection(v7);
  }

  if (*((_BYTE *)cf + 64))
  {
    __int128 v8 = (void (*)(CFTypeRef, void, const __CFString *, void, void, void))*((void *)cf + 18);
    if (v8) {
      v8(cf, 0LL, @"stopServer", 0LL, 0LL, *((void *)cf + 15));
    }
    *((_BYTE *)cf + 64) = 0;
    CFRelease(cf);
  }

void _HTTPServerCloseConnection(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  dispatch_source_t v4 = (void *)(v2 + 56);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3)
  {
    if (v3 == a1)
    {
LABEL_6:
      *dispatch_source_t v4 = *(void *)(a1 + 16);
    }

    else
    {
      while (1)
      {
        uint64_t v5 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
        if (!v3) {
          break;
        }
        if (v3 == a1)
        {
          dispatch_source_t v4 = (void *)(v5 + 16);
          goto LABEL_6;
        }
      }
    }
  }

  HTTPConnectionStop(a1);
  if (*(_BYTE *)(a1 + 229))
  {
    if (!*(void *)(a1 + 376))
    {
      uint64_t v10 = *(int **)(v2 + 24);
      if (*v10 <= 30)
      {
        if (*v10 == -1)
        {
          uint64_t v10 = *(int **)(v2 + 24);
        }

        LogPrintF( (uint64_t)v10,  (uint64_t)"void _HTTPServerCloseConnection(HTTPConnectionRef, void *)",  0x1Eu,  (uint64_t)"Closing  connection from %##a to %##a\n",  v6,  v7,  v8,  v9,  a1);
      }
    }
  }

void HTTPConnectionStop(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(a1 + 200);
  if (v2) {
    BOOL v3 = *(void *)(a1 + 216) != 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  if ((*(_DWORD *)(a1 + 136) & 0x80000000) != 0 || *(void *)(a1 + 376))
  {
    if (!v2) {
      goto LABEL_10;
    }
  }

  else
  {
    shutdown(*(_DWORD *)(a1 + 136), 1);
    uint64_t v2 = *(dispatch_source_s **)(a1 + 200);
    if (!v2) {
      goto LABEL_10;
    }
  }

  dispatch_source_cancel(v2);
  if (*(_BYTE *)(a1 + 208))
  {
    dispatch_resume(*(dispatch_object_t *)(a1 + 200));
    *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 200));
  *(void *)(a1 + 200) = 0LL;
LABEL_10:
  dispatch_source_t v4 = *(dispatch_source_s **)(a1 + 216);
  if (v4)
  {
    dispatch_source_cancel(v4);
    if (*(_BYTE *)(a1 + 224))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 216));
      *(_BYTE *)(a1 + 224) = 0;
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 216));
    *(void *)(a1 + 216) = 0LL;
  }

  if (v3)
  {
    uint64_t v5 = *(void (**)(uint64_t, void))(a1 + 72);
    if (v5) {
      v5(a1, *(void *)(a1 + 40));
    }
  }

void _HTTPServerUpdateTimeoutTimer(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 244) && *(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 72))
    {
      dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1895F8B78], 0LL, 0LL, *(dispatch_queue_t *)(a1 + 16));
      *(void *)(a1 + 72) = v2;
      if (v2)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_set_context(*(dispatch_object_t *)(a1 + 72), (void *)a1);
        dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 72),  (dispatch_function_t)_HTTPServerTimeoutHandler);
        dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a1 + 72),  (dispatch_function_t)_HTTPServerTimeoutCanceled);
        unsigned int v3 = *(_DWORD *)(a1 + 244);
        dispatch_source_t v4 = *(dispatch_source_s **)(a1 + 72);
        dispatch_time_t v5 = dispatch_time(0LL, 1000000000LL * v3);
        dispatch_source_set_timer(v4, v5, 1000000000LL * v3, 250000000LL * v3);
        dispatch_resume(*(dispatch_object_t *)(a1 + 72));
      }
    }
  }

  else
  {
    uint64_t v6 = *(dispatch_object_s **)(a1 + 72);
    if (v6)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
      dispatch_release(v6);
      *(void *)(a1 + 72) = 0LL;
    }
  }

uint64_t _HTTPServerTimeoutHandler(void *a1)
{
  uint64_t result = mach_absolute_time();
  uint64_t v7 = a1[7];
  if (v7)
  {
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *(void *)(v7 + 16);
      if (v8 - *(void *)(v7 + 408) >= a1[31]) {
        break;
      }
LABEL_9:
      uint64_t v7 = v9;
      if (!v9) {
        return result;
      }
    }

    uint64_t v10 = (int *)a1[3];
    if (*v10 <= 50)
    {
      if (*v10 == -1)
      {
        uint64_t v10 = (int *)a1[3];
      }

      LogPrintF( (uint64_t)v10,  (uint64_t)"void _HTTPServerTimeoutHandler(void *)",  0x32u,  (uint64_t)"Timing out connection %##a -> %##a\n",  v3,  v4,  v5,  v6,  v7);
    }

uint64_t HTTPConnectionCreate(uint64_t *a1, uint64_t a2, int a3, void *a4)
{
  size_t v8 = *(void *)a2 + 400LL;
  if (gHTTPConnectionInitOnce != -1) {
    dispatch_once_f(&gHTTPConnectionInitOnce, 0LL, (dispatch_function_t)_HTTPConnectionGetTypeID);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294960568LL;
  }
  uint64_t v10 = Instance;
  bzero((void *)(Instance + 16), v8);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  __int128 v12 = *(_OWORD *)(a2 + 64);
  __int128 v13 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 80) = v11;
  *(_OWORD *)(v10 + 96) = v12;
  *(_OWORD *)(v10 + 64) = v13;
  if (!*(void *)(v10 + 48)) {
    *(void *)(v10 + 4_Block_object_dispose(va, 8) = "HTTP/1.1";
  }
  *(void *)(v10 + 40_Block_object_dispose(va, 8) = mach_absolute_time();
  if (a4)
  {
    uint64_t v14 = a4[3];
    *(_DWORD *)(v10 + 136) = -1;
    uint64_t v15 = (_DWORD *)(v10 + 136);
    *(void *)(v10 + 12_Block_object_dispose(va, 8) = v14;
    *(void *)(v10 + 352) = SocketTransportRead;
    *(void *)(v10 + 360) = SocketTransportWriteV;
    CFRetain(a4);
    *(void *)(v10 + 24) = a4;
  }

  else
  {
    *(_DWORD *)(v10 + 136) = -1;
    uint64_t v15 = (_DWORD *)(v10 + 136);
    *(void *)(v10 + 12_Block_object_dispose(va, 8) = &gLogCategory_HTTPServerCore;
    *(void *)(v10 + 352) = SocketTransportRead;
    *(void *)(v10 + 360) = SocketTransportWriteV;
  }

  uint64_t v16 = HTTPMessageCreate((uint64_t *)(v10 + 296));
  if (!(_DWORD)v16)
  {
    uint64_t v16 = HTTPMessageCreate((uint64_t *)(v10 + 304));
    if (!(_DWORD)v16)
    {
      *(void *)(v10 + 320) = v10 + 312;
      *(_DWORD *)(v10 + 136) = a3;
      if (a4)
      {
        int v18 = (void (*)(void *, uint64_t, uint64_t, void))a4[21];
        if (v18)
        {
          if (*(void *)(v10 + 32)) {
            uint64_t v19 = v10 + 416;
          }
          else {
            uint64_t v19 = 0LL;
          }
          v18(a4, v10, v19, a4[15]);
        }
      }

      int v20 = *(uint64_t (**)(uint64_t, void))(v10 + 56);
      if (!v20 || (uint64_t v21 = v20(v10, *(void *)(v10 + 40)), !(_DWORD)v21))
      {
        uint64_t v16 = 0LL;
        *a1 = v10;
        return v16;
      }

      uint64_t v16 = v21;
      *uint64_t v15 = -1;
    }
  }

  CFRelease((CFTypeRef)v10);
  return v16;
}

void HTTPConnectionSetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (dispatch_object_s *)MEMORY[0x1895F8AE0];
  }
  dispatch_retain(v3);
  uint64_t v4 = *(dispatch_object_s **)(a1 + 120);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 120) = v3;
}

uint64_t HTTPConnectionStart(uint64_t a1)
{
  if (!*(void *)(a1 + 120)) {
    HTTPConnectionSetDispatchQueue(a1, MEMORY[0x1895F8AE0]);
  }
  int v2 = *(_DWORD *)(a1 + 136);
  int v15 = 1;
  setsockopt(v2, 0xFFFF, 4130, &v15, 4u);
  SocketSetNonBlocking(*(_DWORD *)(a1 + 136), 1);
  socklen_t v17 = 28;
  if (getsockname(*(_DWORD *)(a1 + 136), (sockaddr *)(a1 + 228), &v17) && *__error()) {
    __error();
  }
  socklen_t v17 = 28;
  if (getpeername(*(_DWORD *)(a1 + 136), (sockaddr *)(a1 + 256), &v17) && *__error()) {
    __error();
  }
  SocketGetInterfaceInfo( *(_DWORD *)(a1 + 136),  0LL,  (char *)(a1 + 140),  (unsigned int *)(a1 + 160),  a1 + 164,  (_DWORD *)(a1 + 172),  (int *)(a1 + 176),  (void *)(a1 + 184),  0LL,  a1 + 192);
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 != 4 && v3 != 64 && v3 != 128) {
    SocketSetP2P(*(_DWORD *)(a1 + 136), 0);
  }
  int v16 = 1;
  if (setsockopt(*(_DWORD *)(a1 + 136), 6, 1, &v16, 4u))
  {
    if (*__error()) {
      uint64_t v4 = *__error();
    }
    else {
      uint64_t v4 = 4294960596LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t v5 = *(uint64_t (**)(void, void))(a1 + 336);
  if (v5)
  {
    uint64_t v4 = v5(*(unsigned int *)(a1 + 136), *(void *)(a1 + 328));
    if ((_DWORD)v4) {
      goto LABEL_26;
    }
    int v10 = *(_DWORD *)(a1 + 136);
  }

  else
  {
    int v10 = *(_DWORD *)(a1 + 136);
    if (!*(_BYTE *)(a1 + 368)) {
      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v10;
    }
  }

  dispatch_source_t v11 = dispatch_source_create(MEMORY[0x1895F8B60], v10, 0LL, *(dispatch_queue_t *)(a1 + 120));
  *(void *)(a1 + 200) = v11;
  if (!v11
    || (CFRetain((CFTypeRef)a1),
        dispatch_set_context(*(dispatch_object_t *)(a1 + 200), (void *)a1),
        dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 200),  (dispatch_function_t)_HTTPConnectionReadHandler),  dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a1 + 200),  (dispatch_function_t)_HTTPConnectionCancelHandler),  dispatch_resume(*(dispatch_object_t *)(a1 + 200)),  dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1895F8B90], *(int *)(a1 + 136), 0LL, *(dispatch_queue_t *)(a1 + 120)),  (*(void *)(a1 + 216) = v12) == 0LL))
  {
    uint64_t v4 = 4294960596LL;
    goto LABEL_26;
  }

  CFRetain((CFTypeRef)a1);
  dispatch_set_context(*(dispatch_object_t *)(a1 + 216), (void *)a1);
  dispatch_source_set_event_handler_f( *(dispatch_source_t *)(a1 + 216),  (dispatch_function_t)_HTTPConnectionWriteHandler);
  dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(a1 + 216),  (dispatch_function_t)_HTTPConnectionCancelHandler);
  *(_BYTE *)(a1 + 224) = 1;
  if ((_DWORD)v4)
  {
LABEL_26:
    __int128 v13 = *(int **)(a1 + 128);
    if (!v13 || *v13 > 90) {
      goto LABEL_31;
    }
    if (*v13 == -1)
    {
      __int128 v13 = *(int **)(a1 + 128);
    }

    LogPrintF( (uint64_t)v13,  (uint64_t)"OSStatus HTTPConnectionStart(HTTPConnectionRef)",  0x5Au,  (uint64_t)"### HTTP connection start failed: %#m\n",  v6,  v7,  v8,  v9,  v4);
LABEL_31:
    HTTPConnectionStop(a1);
  }

  return v4;
}

void _HTTPConnectionReadHandler(uint64_t a1)
{
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 1;
  _HTTPConnectionRunStateMachine(a1, v2, v3, v4, v5, v6, v7, v8);
}

void _HTTPConnectionWriteHandler(uint64_t a1)
{
  *(_BYTE *)(a1 + 224) = 1;
  _HTTPConnectionRunStateMachine(a1, v2, v3, v4, v5, v6, v7, v8);
}

void _HTTPConnectionRunStateMachine( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1 + 312;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 288))
    {
      case 0:
        uint64_t v10 = *(void *)(a1 + 296);
        uint64_t Message = HTTPMessageReadMessageEx( v10,  *(uint64_t (**)(void *, size_t, unint64_t *, uint64_t))(a1 + 352),  *(void *)(a1 + 328));
        int v12 = _HTTPConnectionHandleIOError(a1, Message, 1);
        if (v12 == 35) {
          return;
        }
        char v13 = v12;
        if (v12) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40_Block_object_dispose(va, 8) = mach_absolute_time();
        LogHTTP( *(void *)(a1 + 128),  *(int **)(a1 + 128),  (unsigned __int8 *)(v10 + 24),  *(void *)(v10 + 8216),  *(void *)(v10 + 8520),  *(void *)(v10 + 8528),  v14,  v15);
        if (*(void *)(v10 + 8216) == 4LL
          && *(_BYTE *)(v10 + 24) == 36
          && (int v16 = *(uint64_t (**)(uint64_t, void, void, void, void))(a1 + 104)) != 0LL)
        {
          int v17 = v16( a1,  *(unsigned __int8 *)(v10 + 8480),  *(void *)(v10 + 8520),  *(void *)(v10 + 8528),  *(void *)(a1 + 40));
          if (v17) {
            goto LABEL_42;
          }
          HTTPMessageReset(*(void *)(a1 + 296));
        }

        else
        {
          int v17 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 88))(a1, v10, *(void *)(a1 + 40));
          if (v17)
          {
LABEL_42:
            char v13 = v17;
            goto LABEL_33;
          }

          if (!*(_DWORD *)(a1 + 288))
          {
            *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 1;
            return;
          }
        }

        continue;
      case 1:
        return;
      case 2:
        uint64_t v18 = HTTPMessageWriteMessage( *(void *)(a1 + 304),  *(uint64_t (**)(uint64_t, uint64_t))(a1 + 360),  *(void *)(a1 + 328));
        int v19 = _HTTPConnectionHandleIOError(a1, v18, 0);
        if (v19 == 35) {
          return;
        }
        char v13 = v19;
        if (v19) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40_Block_object_dispose(va, 8) = mach_absolute_time();
        int v20 = *(void (**)(void))(*(void *)(a1 + 304) + 9712LL);
        if (v20)
        {
          v20();
          *(void *)(*(void *)(a1 + 304) + 9712LL) = 0LL;
        }

        uint64_t v21 = *(void *)(a1 + 296);
        if (*(_BYTE *)(v21 + 8496) && !*(void *)(a1 + 376))
        {
          HTTPMessageReset(v21);
          HTTPMessageReset(*(void *)(a1 + 304));
          *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 3;
          continue;
        }

        char v13 = -96;
LABEL_33:
        uint64_t v28 = *(int **)(a1 + 128);
        if (v28 && *v28 <= 50)
        {
          if (*v28 != -1) {
            goto LABEL_36;
          }
          if (_LogCategory_Initialize((uint64_t)v28, 0x32u))
          {
            uint64_t v28 = *(int **)(a1 + 128);
LABEL_36:
            LogPrintF( (uint64_t)v28,  (uint64_t)"void _HTTPConnectionRunStateMachine(HTTPConnectionRef)",  0x32u,  (uint64_t)"HTTP connection closing: %#m\n",  a5,  a6,  a7,  a8,  v13);
          }
        }

        HTTPConnectionStop(a1);
        __int128 v29 = *(void (**)(uint64_t, void))(a1 + 112);
        if (v29) {
          v29(a1, *(void *)(a1 + 40));
        }
        return;
      case 3:
        if (*(void *)v9)
        {
          LogHTTP( *(void *)(a1 + 128),  *(int **)(a1 + 128),  (unsigned __int8 *)(*(void *)v9 + 24LL),  *(void *)(*(void *)v9 + 8216LL),  *(void *)(*(void *)v9 + 8520LL),  *(void *)(*(void *)v9 + 8528LL),  a7,  a8);
          *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 4;
        }

        else
        {
          *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
        }

        continue;
      case 4:
        int v22 = *(void **)(a1 + 312);
        uint64_t v23 = HTTPMessageWriteMessage( (uint64_t)v22,  *(uint64_t (**)(uint64_t, uint64_t))(a1 + 360),  *(void *)(a1 + 328));
        int v24 = _HTTPConnectionHandleIOError(a1, v23, 0);
        if (v24 == 35) {
          return;
        }
        char v13 = v24;
        if (v24) {
          goto LABEL_33;
        }
        *(void *)(a1 + 40_Block_object_dispose(va, 8) = mach_absolute_time();
        uint64_t v25 = v22[2];
        *(void *)(a1 + 312) = v25;
        if (!v25) {
          *(void *)(a1 + 320) = v9;
        }
        uint64_t v26 = v22[1215];
        if (v26)
        {
          (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v22);
        }

        else
        {
          unint64_t v27 = (void (*)(void *))v22[1214];
          if (v27) {
            v27(v22);
          }
        }

        HTTPMessageReset((uint64_t)v22);
        CFRelease(v22);
        *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 3;
        continue;
      default:
        char v13 = -106;
        goto LABEL_33;
    }
  }

uint64_t _HTTPConnectionHandleIOError(uint64_t a1, uint64_t a2, int a3)
{
  if ((int)a2 <= -6767)
  {
    if ((_DWORD)a2 != -6775)
    {
      if ((_DWORD)a2 != -6774) {
        return a2;
      }
LABEL_8:
      if (*(_BYTE *)(a1 + 208))
      {
        *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 0;
        uint64_t v4 = (dispatch_object_t *)(a1 + 200);
LABEL_14:
        dispatch_resume(*v4);
        return 35LL;
      }

      return 35LL;
    }

uint64_t _HTTPConnectionGetTypeID()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gHTTPConnectionCFTypeID TypeID = result;
  return result;
}

int *_HTTPConnectionFinalize(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t, void))(a1 + 64);
  if (v2) {
    v2(a1, *(void *)(a1 + 40));
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v4 = *(dispatch_object_s **)(a1 + 120);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 120) = 0LL;
  }

  uint64_t v5 = *(const void **)(a1 + 296);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 296) = 0LL;
  }

  uint64_t v6 = *(const void **)(a1 + 304);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 304) = 0LL;
  }

  while (1)
  {
    uint64_t v7 = *(void **)(a1 + 312);
    if (!v7) {
      break;
    }
    *(void *)(a1 + 312) = v7[2];
    CFRelease(v7);
  }

  uint64_t v8 = *(void (**)(void))(a1 + 344);
  if (v8) {
    v8(*(void *)(a1 + 328));
  }
  uint64_t v9 = *(uint64_t (**)(int *, void, void, void))(a1 + 376);
  uint64_t result = (int *)*(unsigned int *)(a1 + 136);
  if (v9)
  {
    uint64_t result = (int *)v9(result, *(void *)(a1 + 384), *(void *)(a1 + 392), *(void *)(a1 + 400));
LABEL_17:
    *(_DWORD *)(a1 + 136) = -1;
    return result;
  }

  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }

    goto LABEL_17;
  }

  return result;
}

uint64_t _HTTPServerSetProperty(uint64_t a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, const __CFString *a5)
{
  if (CFEqual(cf1, @"loopbackOnly"))
  {
    unint64_t v10 = CFGetInt64(a5, 0LL);
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 240) = v10 != 0;
    return result;
  }

  if (CFEqual(cf1, @"p2p"))
  {
    BOOL v12 = CFGetInt64(a5, 0LL) != 0;
    *(_DWORD *)(a1 + 232) = v12;
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      int v14 = *(_DWORD *)(v13 + 8);
      if ((v14 & 0x80000000) == 0) {
        SocketSetP2P(v14, v12);
      }
    }

    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      int v16 = *(_DWORD *)(v15 + 8);
      if ((v16 & 0x80000000) == 0) {
        SocketSetP2P(v16, *(_DWORD *)(a1 + 232));
      }
    }

    return 0LL;
  }

  if (CFEqual(cf1, @"password"))
  {
    if (!a5)
    {
      int v24 = 0LL;
LABEL_24:
      int v19 = *(void **)(a1 + 80);
      if (v19) {
        free(v19);
      }
      uint64_t result = 0LL;
      *(void *)(a1 + 80) = v24;
      return result;
    }

    CFTypeID v17 = CFGetTypeID(a5);
    if (v17 == CFStringGetTypeID())
    {
      int v24 = 0LL;
      if (CFStringGetLength(a5) >= 1)
      {
        uint64_t result = CFStringCopyUTF8CString(a5, &v24);
        if ((_DWORD)result) {
          return result;
        }
      }

      goto LABEL_24;
    }

    return 4294960540LL;
  }

  if (CFEqual(cf1, @"realm"))
  {
    if (a5)
    {
      CFTypeID v18 = CFGetTypeID(a5);
      if (v18 != CFStringGetTypeID()) {
        return 4294960540LL;
      }
      int v24 = 0LL;
      if (CFStringGetLength(a5) >= 1)
      {
        uint64_t result = CFStringCopyUTF8CString(a5, &v24);
        if ((_DWORD)result) {
          return result;
        }
      }
    }

    else
    {
      int v24 = 0LL;
    }

    int v22 = *(void **)(a1 + 88);
    if (v22) {
      free(v22);
    }
    uint64_t result = 0LL;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v24;
  }

  else if (CFEqual(cf1, @"timeoutSecs"))
  {
    unsigned int v20 = CFGetInt64(a5, &v25);
    *(_DWORD *)(a1 + 244) = v20;
    uint64_t v21 = v20;
    if (SecondsToUpTicks_sOnce != -1) {
      dispatch_once_f( &SecondsToUpTicks_sOnce,  &SecondsToUpTicks_sMultiplier,  (dispatch_function_t)_SecondsToUpTicksInit);
    }
    uint64_t result = 0LL;
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = SecondsToUpTicks_sMultiplier * v21;
  }

  else
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, const __CFString *, void))(a1 + 160);
    if (v23) {
      return v23(a1, a2, cf1, a4, a5, *(void *)(a1 + 120));
    }
    else {
      return 4294960582LL;
    }
  }

  return result;
}

_OWORD *HTTPConnectionSetDelegate(_OWORD *result, _OWORD *a2)
{
  __int128 v2 = a2[3];
  __int128 v3 = a2[4];
  __int128 v4 = a2[2];
  result[3] = a2[1];
  result[2] = *a2;
  result[5] = v2;
  result[6] = v3;
  result[4] = v4;
  if (!*((void *)result + 6)) {
    *((void *)result + 6) = "HTTP/1.1";
  }
  return result;
}

uint64_t HTTPConnectionSetTimeout(uint64_t a1, int a2)
{
  uint64_t result = *(unsigned int *)(a1 + 136);
  if ((result & 0x80000000) == 0)
  {
    char v4 = a2;
    uint64_t result = SocketSetTCPTimeout(result, a2);
    if ((_DWORD)result)
    {
      uint64_t result = *(void *)(a1 + 128);
      if (*(int *)result <= 60)
      {
        if (*(_DWORD *)result != -1) {
          return LogPrintF( result,  (uint64_t)"void HTTPConnectionSetTimeout(HTTPConnectionRef, int)",  0x3Cu,  (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n",  v5,  v6,  v7,  v8,  v4);
        }
        uint64_t result = _LogCategory_Initialize(result, 0x3Cu);
        if ((_DWORD)result)
        {
          uint64_t result = *(void *)(a1 + 128);
          return LogPrintF( result,  (uint64_t)"void HTTPConnectionSetTimeout(HTTPConnectionRef, int)",  0x3Cu,  (uint64_t)"### Set TCP timeout to %d seconds failed: %#m\n",  v5,  v6,  v7,  v8,  v4);
        }
      }
    }
  }

  return result;
}

void HTTPConnectionStopAsync(dispatch_queue_t *a1)
{
}

void _HTTPConnectionStopAsync( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (int *)a1[16];
  if (v9 && *v9 <= 30)
  {
    if (*v9 == -1)
    {
      uint64_t v9 = (int *)a1[16];
    }

    LogPrintF( (uint64_t)v9,  (uint64_t)"void _HTTPConnectionStopAsync(void *)",  0x1Eu,  (uint64_t)"HTTP connection stop async\n",  a5,  a6,  a7,  a8,  v10);
  }

uint64_t HTTPConnectionDetach( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[47]) {
    return 4294960575LL;
  }
  a1[47] = a2;
  a1[48] = a3;
  a1[49] = a4;
  a1[50] = a5;
  uint64_t v9 = *(int **)(a1[3] + 24LL);
  if (*v9 > 30) {
    return 0LL;
  }
  if (*v9 != -1)
  {
LABEL_4:
    LogPrintF( (uint64_t)v9,  (uint64_t)"OSStatus HTTPConnectionDetach(HTTPConnectionRef, HTTPConnectionDetachHandler_f, void *, void *, void *)",  0x1Eu,  (uint64_t)"Detaching connection %##a -> %##a\n",  a5,  a6,  a7,  a8,  (char)a1);
    return 0LL;
  }

  uint64_t result = _LogCategory_Initialize((uint64_t)v9, 0x1Eu);
  if ((_DWORD)result)
  {
    uint64_t v9 = *(int **)(a1[3] + 24LL);
    goto LABEL_4;
  }

  return result;
}

uint64_t HTTPConnectionSetTransportDelegate(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 328;
  uint64_t v5 = *(void (**)(void))(a1 + 344);
  if (v5) {
    v5(*(void *)v4);
  }
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  *(void *)(v4 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(_BYTE *)(a1 + 36_Block_object_dispose(va, 8) = 1;
  uint64_t result = *(unsigned int *)(a1 + 136);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(a1 + 336);
    if (v9) {
      return v9();
    }
  }

  return result;
}

uint64_t HTTPConnectionGetNextURLSegmentEx( uint64_t a1, void *a2, int a3, unint64_t *a4, void *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11 = a2[1049];
  unint64_t v12 = a2[1050];
  if (v11 < v12 && *(_BYTE *)v11 != 47)
  {
    uint64_t v13 = 0LL;
    int v14 = (_BYTE *)a2[1050];
    while (~v11 + v12 != v13)
    {
      int v15 = *(unsigned __int8 *)(v11 + v13++ + 1);
      if (v15 == 47)
      {
        int v14 = (_BYTE *)(v11 + v13);
        break;
      }
    }

    if (v14 != (_BYTE *)v11)
    {
      *a4 = v11;
      *a5 = &v14[-v11];
      else {
        int v16 = v14 + 1;
      }
      a2[1049] = v16;
      uint64_t v17 = 1LL;
      goto LABEL_14;
    }
  }

  if (!a3)
  {
    uint64_t v21 = *(int **)(a1 + 128);
    if (*v21 > 60) {
      goto LABEL_20;
    }
    if (*v21 == -1)
    {
      if (!_LogCategory_Initialize((uint64_t)v21, 0x3Cu))
      {
LABEL_20:
        int v18 = HTTPConnectionSendSimpleResponseEx2(a1, 400LL, 4294960592LL, 0LL, 0LL, 0LL, a7, a8);
        uint64_t v17 = 0LL;
        uint64_t v19 = 0LL;
        if (v18) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }

      uint64_t v21 = *(int **)(a1 + 128);
    }

    LogPrintF( (uint64_t)v21,  (uint64_t)"Boolean HTTPConnectionGetNextURLSegmentEx(HTTPConnectionRef, HTTPMessageRef, Boolean, const char **, size _t *, OSStatus *)",  0x3Cu,  (uint64_t)"### Bad URL segment: '%.*s'\n",  (uint64_t)a5,  (uint64_t)a6,  a7,  a8,  a2[1034]);
    goto LABEL_20;
  }

  uint64_t v17 = 0LL;
LABEL_14:
  int v18 = 0;
  uint64_t v19 = v17;
LABEL_15:
  *a6 = v18;
  return v19;
}

uint64_t HTTPConnectionSendSimpleResponseEx2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited = HTTPConnectionInitResponseEx(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)inited
    || (uint64_t inited = HTTPMessageSetBody(*(void *)(a1 + 304), a4, a5, a6), (_DWORD)inited)
    || (uint64_t inited = HTTPConnectionSendResponse(a1), (_DWORD)inited))
  {
    uint64_t v17 = *(int **)(a1 + 128);
    if (*v17 <= 60)
    {
      if (*v17 == -1)
      {
        uint64_t v17 = *(int **)(a1 + 128);
      }

      LogPrintF( (uint64_t)v17,  (uint64_t)"OSStatus HTTPConnectionSendSimpleResponseEx2(HTTPConnectionRef, const char *, HTTPStatus, OSStatus, con st char *, const void *, size_t)",  0x3Cu,  (uint64_t)"### Response failed: %#m\n",  v12,  v13,  v14,  v15,  inited);
    }
  }

  return inited;
}

uint64_t HTTPConnectionInitResponseEx( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  HTTPHeader_InitResponseEx(*(void *)(a1 + 304) + 24LL, *(const char **)(a1 + 48), a2, 0LL, a3, a6, a7, a8);
  time_t v9 = time(0LL);
  char v10 = HTTPMakeDateString(v9, v18, 0x40uLL);
  if (*v10) {
    HTTPHeader_SetField( (char *)(*(void *)(a1 + 304) + 24LL),  "Date",  (uint64_t)"%s",  v11,  v12,  v13,  v14,  v15,  (uint64_t)v10);
  }
  int v16 = *(uint64_t (**)(uint64_t, void, void))(a1 + 96);
  if (!v16 || (uint64_t result = v16(a1, *(void *)(a1 + 304), *(void *)(a1 + 40)), !(_DWORD)result))
  {
    uint64_t result = 0LL;
    *(void *)(*(void *)(a1 + 304) + 8528LL) = 0LL;
  }

  return result;
}

uint64_t HTTPConnectionSendResponse(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 304);
  uint64_t v5 = HTTPHeader_Commit(v2 + 24);
  if (!(_DWORD)v5)
  {
    LogHTTP( *(void *)(a1 + 128),  *(int **)(a1 + 128),  (unsigned __int8 *)(v2 + 24),  *(void *)(v2 + 8216),  *(void *)(v2 + 8520),  *(void *)(v2 + 8528),  v3,  v4);
    *(void *)(v2 + 9584) = v2 + 24;
    *(void *)(v2 + 9592) = *(void *)(v2 + 8216);
    *(_DWORD *)(v2 + 9624) = 1;
    uint64_t v13 = *(void *)(v2 + 8528);
    if (v13)
    {
      *(void *)(v2 + 9600) = *(void *)(v2 + 8520);
      *(void *)(v2 + 960_Block_object_dispose(va, 8) = v13;
      *(_DWORD *)(v2 + 9624) = 2;
    }

    *(void *)(v2 + 9616) = v2 + 9584;
    int v14 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 2;
    if (v14 == 1) {
      _HTTPConnectionRunStateMachine(a1, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  return v5;
}

uint64_t HTTPConnectionSendBinaryBytes( dispatch_queue_t *a1, char a2, char a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0LL;
  if (a5 >> 16) {
    return 4294960553LL;
  }
  uint64_t v14 = HTTPMessageCreate((uint64_t *)&cf);
  uint64_t v15 = cf;
  if ((_DWORD)v14) {
    goto LABEL_3;
  }
  if ((a2 & 1) != 0)
  {
    *((void *)cf + 1065) = a4;
    v15[1066] = a5;
  }

  else
  {
    uint64_t v14 = HTTPMessageSetBodyLength(cf, a5);
    if ((_DWORD)v14)
    {
LABEL_3:
      if (!v15) {
        return v14;
      }
      goto LABEL_13;
    }

    if (a5) {
      memmove((void *)v15[1065], a4, a5);
    }
  }

  *((_BYTE *)v15 + 24) = 36;
  *((_BYTE *)v15 + 25) = a3;
  *((_BYTE *)v15 + 26) = BYTE1(a5);
  *((_BYTE *)v15 + 27) = a5;
  v15[1027] = 4LL;
  if (a6)
  {
    v15[1213] = a6;
    v15[1209] = a7;
    v15[1214] = _HTTPConnectionSendBinaryCompletion;
  }

  uint64_t v14 = HTTPConnectionSendEvent(a1, v15);
LABEL_13:
  CFRelease(v15);
  return v14;
}

uint64_t _HTTPConnectionSendBinaryCompletion(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 9704))(*(unsigned int *)(a1 + 9648), *(void *)(a1 + 9672));
}

uint64_t HTTPConnectionSendEvent(dispatch_queue_t *a1, void *a2)
{
  uint64_t v4 = HTTPHeader_Commit((uint64_t)(a2 + 3));
  if (!(_DWORD)v4)
  {
    a2[1207] = a1;
    CFRetain(a1);
    CFRetain(a2);
    dispatch_async_f(a1[15], a2, (dispatch_function_t)_HTTPConnectionSendEvent);
  }

  return v4;
}

void _HTTPConnectionSendEvent( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = 0LL;
  uint64_t v8 = *(void *)(a1 + 9656);
  *(void *)(a1 + 9584) = a1 + 24;
  *(void *)(a1 + 9592) = *(void *)(a1 + 8216);
  *(_DWORD *)(a1 + 9624) = 1;
  uint64_t v9 = *(void *)(a1 + 8528);
  if (v9)
  {
    *(void *)(a1 + 9600) = *(void *)(a1 + 8520);
    *(void *)(a1 + 960_Block_object_dispose(va, 8) = v9;
    *(_DWORD *)(a1 + 9624) = 2;
  }

  *(void *)(a1 + 9616) = a1 + 9584;
  **(void **)(v8 + 320) = a1;
  *(void *)(v8 + 320) = a1 + 16;
  if (!*(_DWORD *)(v8 + 288))
  {
    *(_DWORD *)(v8 + 28_Block_object_dispose(va, 8) = 3;
    _HTTPConnectionRunStateMachine(v8, a2, a3, a4, a5, a6, a7, a8);
  }

  CFRelease((CFTypeRef)v8);
}

uint64_t HTTPServer_Create(void *a1, __int128 *a2)
{
  size_t v3 = *(void *)a2;
  if (v3 < 0xE0 || *((void *)a2 + 1) >> 8 < 0x443uLL) {
    return 4294960553LL;
  }
  if (!*((void *)a2 + 8)) {
    return 4294960591LL;
  }
  uint64_t v5 = calloc(1uLL, v3);
  if (!v5) {
    return 4294960568LL;
  }
  uint64_t v6 = v5;
  uint64_t result = 0LL;
  __int128 v8 = *a2;
  __int128 v9 = a2[2];
  v6[1] = a2[1];
  void v6[2] = v9;
  *uint64_t v6 = v8;
  __int128 v10 = a2[3];
  __int128 v11 = a2[4];
  __int128 v12 = a2[5];
  *((void *)v6 + 12) = *((void *)a2 + 12);
  *((_DWORD *)v6 + 36) = -1;
  *((_DWORD *)v6 + 42) = -1;
  *((void *)v6 + 27) = &gLogCategory_HTTPServerConnections;
  _BYTE v6[4] = v11;
  void v6[5] = v12;
  v6[3] = v10;
  *a1 = v6;
  return result;
}

void HTTPServer_Delete(void *a1)
{
  uint64_t v2 = (void (*)(void *))a1[2];
  if (v2) {
    v2(a1);
  }
  free(a1);
}

uint64_t HTTPServer_Stop(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 136);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 136));
    dispatch_release(v2);
    *(void *)(a1 + 136) = 0LL;
  }

  size_t v3 = *(dispatch_object_s **)(a1 + 160);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 160));
    dispatch_release(v3);
    *(void *)(a1 + 160) = 0LL;
  }

  if (*(void *)(a1 + 112))
  {
    *(void *)(a1 + 120) = dispatch_semaphore_create(0LL);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 112), (void *)a1, (dispatch_function_t)__HTTPServer_StopAllConnections);
    dispatch_release(*(dispatch_object_t *)(a1 + 112));
    uint64_t v4 = *(dispatch_semaphore_s **)(a1 + 120);
    if (v4)
    {
      dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(a1 + 120));
      *(void *)(a1 + 120) = 0LL;
    }

    *(void *)(a1 + 112) = 0LL;
  }

  uint64_t v5 = *(void (**)(uint64_t))(a1 + 32);
  if (v5) {
    v5(a1);
  }
  return 0LL;
}

void __HTTPServer_StopAllConnections(uint64_t a1)
{
  for (int i = *(uint64_t ***)(a1 + 184); i; int i = (uint64_t **)*i)
  {
    NetSocket_Cancel((uint64_t)i[3]);
    dispatch_source_cancel((dispatch_source_t)i[19]);
  }

uint64_t HTTPServer_Start(uint64_t a1)
{
  handle[0] = -1LL;
  dispatch_queue_t v2 = dispatch_queue_create("HTTPServer", 0LL);
  *(void *)(a1 + 112) = v2;
  if (!v2)
  {
    uint64_t v12 = 4294960568LL;
LABEL_31:
    HTTPServer_Stop(a1);
    return v12;
  }

  dispatch_set_context(v2, (void *)a1);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(a1 + 112), (dispatch_function_t)__HTTPServer_Finalizer);
  int v3 = *(_DWORD *)(a1 + 128);
  else {
    int v5 = -v3;
  }
  uint64_t v6 = ServerSocketPairOpen(1, 6, v5, (int *)(a1 + 128), *(_DWORD *)(a1 + 84), (int *)handle + 1, (int *)handle);
  int v11 = HIDWORD(handle[0]);
  if ((_DWORD)v6)
  {
    uint64_t v12 = v6;
    if ((handle[0] & 0x8000000000000000LL) != 0) {
      goto LABEL_26;
    }
    goto LABEL_13;
  }

  if ((handle[0] & 0x8000000000000000LL) == 0)
  {
    uint64_t v12 = __HTTPServer_SetupListener(a1, HIDWORD(handle[0]), (_DWORD *)(a1 + 136));
    if ((_DWORD)v12)
    {
LABEL_13:
      if (close(v11) && *__error()) {
        __error();
      }
      goto LABEL_26;
    }
  }

  if ((handle[0] & 0x80000000) == 0)
  {
    uint64_t v12 = __HTTPServer_SetupListener(a1, LODWORD(handle[0]), (_DWORD *)(a1 + 160));
    if ((_DWORD)v12) {
      goto LABEL_26;
    }
    LODWORD(handle[0]) = -1;
  }

  if (gLogCategory_HTTPServer <= 40
    && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x28u)))
  {
    LogPrintF( (uint64_t)&gLogCategory_HTTPServer,  (uint64_t)"OSStatus HTTPServer_Start(HTTPServerOldRef)",  0x28u,  (uint64_t)"Listening on port %d\n",  v7,  v8,  v9,  v10,  *(_DWORD *)(a1 + 128));
  }

  uint64_t v13 = *(uint64_t (**)(uint64_t))(a1 + 24);
  if (v13) {
    uint64_t v12 = v13(a1);
  }
  else {
    uint64_t v12 = 0LL;
  }
LABEL_26:
  if ((handle[0] & 0x80000000) == 0 && close(handle[0]) && *__error()) {
    __error();
  }
  if ((_DWORD)v12) {
    goto LABEL_31;
  }
  return v12;
}

dispatch_semaphore_s *__HTTPServer_Finalizer(uint64_t a1)
{
  uint64_t result = *(dispatch_semaphore_s **)(a1 + 120);
  if (result) {
    return (dispatch_semaphore_s *)dispatch_semaphore_signal(result);
  }
  return result;
}

uint64_t __HTTPServer_SetupListener(uint64_t a1, uintptr_t handle, _DWORD *a3)
{
  unsigned int v4 = handle;
  int v6 = *(_DWORD *)(a1 + 88);
  if (v6) {
    SocketSetQoS(v4, v6);
  }
  if (*(_BYTE *)(a1 + 104)) {
    SocketSetP2P(v4, 1);
  }
  dispatch_source_t v7 = dispatch_source_create(MEMORY[0x1895F8B60], v4, 0LL, *(dispatch_queue_t *)(a1 + 112));
  *(void *)a3 = v7;
  if (!v7) {
    return 4294960596LL;
  }
  a3[2] = v4;
  *((void *)a3 + 2) = a1;
  dispatch_set_context(v7, a3);
  dispatch_set_finalizer_f(*(dispatch_object_t *)a3, (dispatch_function_t)__HTTPServer_ListenerFinalizer);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)a3, (dispatch_function_t)__HTTPServer_AcceptConnection);
  dispatch_resume(*(dispatch_object_t *)a3);
  return 0LL;
}

int *__HTTPServer_ListenerFinalizer(uint64_t a1)
{
  uint64_t result = (int *)*(unsigned int *)(a1 + 8);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (int *)close((int)result);
    if ((_DWORD)result)
    {
      uint64_t result = __error();
      if (*result) {
        uint64_t result = __error();
      }
    }

    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = -1;
  }

  return result;
}

void __HTTPServer_AcceptConnection(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = calloc(1uLL, *(void *)(v2 + 8));
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3;
    int v5 = (char *)(v3 + 34910);
    v3[1] = v2;
    int v6 = *(_DWORD *)(v2 + 192);
    *(_DWORD *)(v2 + 192) = v6 + 1;
    *((_DWORD *)v3 + 4) = v6 + 1;
    if (v6 == -1) {
      *(_DWORD *)(v2 + 192) = 1;
    }
    dispatch_retain(*(dispatch_object_t *)(v2 + 112));
    *(_OWORD *)int v5 = *(_OWORD *)(v2 + 200);
    socklen_t v33 = 28;
    int v7 = accept(*(_DWORD *)(a1 + 8), (sockaddr *)(v4 + 60), &v33);
    if (v7 < 0 && (!*__error() || *__error())) {
      goto LABEL_32;
    }
    int v32 = 1;
    setsockopt(v7, 0xFFFF, 4130, &v32, 4u);
    SocketSetNonBlocking(v7, 1);
    int v8 = *(_DWORD *)(v2 + 88);
    if (v8) {
      SocketSetQoS(v7, v8);
    }
    if (v7 < 0 || NetSocket_Create(&v34))
    {
      close(v7);
LABEL_32:
      __HTTPServer_RemoveConnection(v4, v9, v10, v11, v12, v13, v14, v15);
      return;
    }

    uint64_t v16 = v34;
    *(_DWORD *)(v34 + 4) = v7;
    *(void *)(v4 + 24) = v16;
    *(void *)(v16 + 112) = *((void *)v5 + 1);
    socklen_t v33 = 28;
    if (getsockname(v7, (sockaddr *)(v4 + 32), &v33) && (!*__error() || *__error())) {
      goto LABEL_32;
    }
    SocketGetInterfaceInfo( v7,  0LL,  (char *)(v4 + 88),  (unsigned int *)(v4 + 108),  v4 + 116,  (_DWORD *)(v4 + 112),  (int *)(v4 + 124),  (void *)(v4 + 128),  0LL,  v4 + 136);
    int v17 = *(_DWORD *)(v4 + 136);
    if (v17 != 4 && v17 != 64 && v17 != 128) {
      SocketSetP2P(v7, 0);
    }
    int v18 = (uint64_t *)(v2 + 184);
    do
    {
      uint64_t v19 = v18;
      int v18 = (uint64_t *)*v18;
    }

    while (v18);
    *uint64_t v19 = v4;
    LODWORD(v34) = 1;
    if (setsockopt(v7, 6, 1, &v34, 4u)
      && (!*__error() || *__error())
      && gLogCategory_HTTPServer <= 60
      && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x3Cu)))
    {
      LogPrintF( (uint64_t)&gLogCategory_HTTPServer,  (uint64_t)"void __HTTPServer_AcceptConnection(void *)",  0x3Cu,  (uint64_t)"### set TCP_NODELAY failed on sock %d: %#m\n",  v20,  v21,  v22,  v23,  v7);
    }

    dispatch_queue_t v24 = dispatch_queue_create("HTTPServerConnection", 0LL);
    *(void *)(v4 + 144) = v24;
    if (!v24) {
      goto LABEL_32;
    }
    dispatch_set_context(v24, (void *)v4);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(v4 + 144), (dispatch_function_t)__HTTPServer_FinalizeConnection);
    int v25 = *(unsigned int (**)(uint64_t))(v2 + 40);
    if (v25)
    {
      if (v25(v4)) {
        goto LABEL_32;
      }
    }

    *(_BYTE *)(v4 + 20) = 1;
    dispatch_source_t v26 = dispatch_source_create(MEMORY[0x1895F8B60], v7, 0LL, *(dispatch_queue_t *)(v4 + 144));
    *(void *)(v4 + 152) = v26;
    if (!v26) {
      goto LABEL_32;
    }
    dispatch_set_context(v26, (void *)v4);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v4 + 152), (dispatch_function_t)__HTTPServer_ReadHandler);
    dispatch_source_set_cancel_handler_f( *(dispatch_source_t *)(v4 + 152),  (dispatch_function_t)__HTTPServer_CancelHandler);
    dispatch_resume(*(dispatch_object_t *)(v4 + 152));
    unint64_t v31 = *(int **)(v2 + 216);
    if (*v31 <= 40)
    {
      if (*v31 != -1)
      {
LABEL_37:
        LogPrintF( (uint64_t)v31,  (uint64_t)"void __HTTPServer_AcceptConnection(void *)",  0x28u,  (uint64_t)"Accepted connection from %##a to %##a \n",  v27,  v28,  v29,  v30,  v4 + 60);
        return;
      }

      if (_LogCategory_Initialize((uint64_t)v31, 0x28u))
      {
        unint64_t v31 = *(int **)(v2 + 216);
        goto LABEL_37;
      }
    }
  }

void __HTTPServer_FinalizeConnection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 33))
  {
    uint64_t v10 = *(int **)(v9 + 216);
    if (*v10 <= 40)
    {
      if (*v10 != -1)
      {
LABEL_4:
        LogPrintF( (uint64_t)v10,  (uint64_t)"void __HTTPServer_FinalizeConnection(void *)",  0x28u,  (uint64_t)"Closing  connection from %##a to %##a\n",  a5,  a6,  a7,  a8,  a1 + 60);
        goto LABEL_6;
      }

      if (_LogCategory_Initialize((uint64_t)v10, 0x28u))
      {
        uint64_t v10 = *(int **)(v9 + 216);
        goto LABEL_4;
      }
    }
  }

void __HTTPServer_ReadHandler(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 21))
  {
    uint64_t v2 = *(_DWORD **)(a1 + 24);
    if (v2 && *v2 == 1853058915) {
      int v3 = v2[1];
    }
    else {
      int v3 = -1;
    }
    memset(&v17, 0, sizeof(v17));
    if (__darwin_check_fd_set_overflow(v3, &v17, 0)) {
      *(__int32_t *)((char *)v17.fds_bits + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v3;
    }
    v16.tv_sec = 0LL;
    v16.tv_usec = 0;
    int v4 = v3 + 1;
    while (1)
    {
      int v5 = select(v4, &v17, 0LL, 0LL, &v16);
      if (v5 > 0) {
        break;
      }
      if (!v5) {
        return;
      }
      if (!*__error())
      {
        LOBYTE(v10) = -44;
        goto LABEL_21;
      }

      int v10 = *__error();
      if (v10 != 4)
      {
        if (v10 == -6722) {
          return;
        }
        if (v10) {
          goto LABEL_21;
        }
        break;
      }
    }
  }

  int v11 = NetSocket_HTTPReadHeader(*(void *)(a1 + 24), a1 + 160, 0xFFFFFFFFLL);
  LOBYTE(v10) = v11;
  if (!v11)
  {
    LogHTTP( *(void *)(a1 + 279280),  *(int **)(a1 + 279288),  (unsigned __int8 *)(a1 + 160),  *(void *)(a1 + 8352),  0LL,  0LL,  v8,  v9);
    int v12 = *(unsigned __int8 *)(a1 + 8632);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 64LL))(a1);
    LOBYTE(v10) = v13;
    if (!v13)
    {
      if (!v12)
      {
LABEL_19:
        NetSocket_Disconnect(*(void *)(a1 + 24), 3u);
        goto LABEL_25;
      }

      int v14 = HTTPHeader_Parse(a1 + 139720);
      LOBYTE(v10) = v14;
      if (!v14)
      {
        if (*(_BYTE *)(a1 + 148192)) {
          return;
        }
        goto LABEL_19;
      }
    }
  }

void __HTTPServer_CancelHandler(void *context)
{
  uint64_t v2 = context[1];
  int v3 = *(void (**)(void *))(v2 + 56);
  if (v3)
  {
    v3(context);
    uint64_t v2 = context[1];
  }

  dispatch_async_f(*(dispatch_queue_t *)(v2 + 112), context, (dispatch_function_t)__HTTPServer_RemoveConnection);
}

void __HTTPServer_RemoveConnection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)(*(void *)(a1 + 8) + 184LL);
  while (1)
  {
    int v10 = v9;
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      break;
    }
    if (v9 == (void *)a1)
    {
      *int v10 = *(void *)a1;
      break;
    }
  }

  int v11 = *(dispatch_object_s **)(a1 + 144);
  if (v11)
  {
    dispatch_release(v11);
    int v12 = *(dispatch_source_s **)(a1 + 152);
    if (v12)
    {
      dispatch_source_cancel(v12);
      dispatch_release(*(dispatch_object_t *)(a1 + 152));
    }
  }

  else
  {
    __HTTPServer_FinalizeConnection(a1, a2, a3, a4, a5, a6, a7, a8);
  }

uint64_t HTTPServer_GetNextURLSegment( void *a1, unint64_t *a2, void *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = a1[1066];
  unint64_t v11 = a1[1067];
  if (v10 >= v11 || *(_BYTE *)v10 == 47) {
    goto LABEL_26;
  }
  uint64_t v12 = 0LL;
  int v13 = (_BYTE *)a1[1067];
  while (~v10 + v11 != v12)
  {
    int v14 = *(unsigned __int8 *)(v10 + v12++ + 1);
    if (v14 == 47)
    {
      int v13 = (_BYTE *)(v10 + v12);
      break;
    }
  }

  if (v13 == (_BYTE *)v10)
  {
LABEL_26:
    if (a1[1051])
    {
      if (gLogCategory_HTTPServer <= 50
        && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x32u)))
      {
        LogPrintF( (uint64_t)&gLogCategory_HTTPServer,  (uint64_t)"Boolean HTTPServer_GetNextURLSegment(HTTPServerConnectionRef, const char **, size_t *, OSStatus *)",  0x32u,  (uint64_t)"### HTTP URL segment not found: '%.*s %.*s'\n",  a5,  a6,  a7,  a8,  a1[1048]);
      }
    }

    else if (gLogCategory_HTTPServer <= 60 {
           && (gLogCategory_HTTPServer != -1 || _LogCategory_Initialize((uint64_t)&gLogCategory_HTTPServer, 0x3Cu)))
    }
    {
      LogPrintF( (uint64_t)&gLogCategory_HTTPServer,  (uint64_t)"Boolean HTTPServer_GetNextURLSegment(HTTPServerConnectionRef, const char **, size_t *, OSStatus *)",  0x3Cu,  (uint64_t)"### Corrupt HTTP request:\n%.*s\n",  a5,  a6,  a7,  a8,  a1[1044]);
    }

    int v15 = HTTPServer_SendStatusResponse((uint64_t)a1, 400LL, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    uint64_t v17 = 0LL;
  }

  else
  {
    int v15 = 0;
    *a2 = v10;
    *a3 = &v13[-v10];
    else {
      timeval v16 = v13 + 1;
    }
    a1[1066] = v16;
    uint64_t v17 = 1LL;
  }

  *a4 = v15;
  return v17;
}

uint64_t HTTPServer_SendStatusResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = HTTPServer_InitResponse(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"0", v10, v11, v12, v13, v14, v17);
    uint64_t result = HTTPHeader_Commit(a1 + 139720);
    if (!(_DWORD)result)
    {
      LogHTTP( *(void *)(a1 + 279280),  *(int **)(a1 + 279288),  (unsigned __int8 *)(a1 + 139720),  *(void *)(a1 + 147912),  0LL,  0LL,  v15,  v16);
      return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32LL))();
    }
  }

  return result;
}

uint64_t HTTPServer_InitResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v10 = (char *)(a1 + 139720);
  HTTPHeader_InitResponseEx(a1 + 139720, "HTTP/1.1", a2, 0LL, 0LL, a6, a7, a8);
  time_t v11 = time(0LL);
  uint64_t v12 = HTTPMakeDateString(v11, v20, 0x40uLL);
  if (*v12) {
    HTTPHeader_SetField(v10, "Date", (uint64_t)"%s", v13, v14, v15, v16, v17, (uint64_t)v12);
  }
  int v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 72LL);
  if (!v18) {
    return 0LL;
  }
  uint64_t result = v18(a1, a2);
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t HTTPServer_GetOrCopyFormVariable( unint64_t *a1, unsigned __int8 *a2, void *a3, size_t *a4, char **a5)
{
  uint64_t result = URLGetOrCopyVariable(a1[1062], (_BYTE *)(a1[1062] + a1[1063]), a2, a3, a4, a5, 0LL);
  if ((_DWORD)result) {
    return URLGetOrCopyVariable((unint64_t)(a1 + 1080), (_BYTE *)a1 + a1[17464] + 8640, a2, a3, a4, a5, 0LL);
  }
  return result;
}

uint64_t HTTPServer_SendSimpleResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = HTTPServer_InitResponse(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a3) {
      HTTPHeader_SetField((char *)(a1 + 139720), "Content-Type", (uint64_t)"%s", v13, v14, v15, v16, v17, a3);
    }
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"%zu", v13, v14, v15, v16, v17, a5);
    uint64_t result = HTTPHeader_Commit(a1 + 139720);
    if (!(_DWORD)result)
    {
      LogHTTP( *(void *)(a1 + 279280),  *(int **)(a1 + 279288),  (unsigned __int8 *)(a1 + 139720),  *(void *)(a1 + 147912),  a4,  a5,  v18,  v19);
      return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40LL))();
    }
  }

  return result;
}

uint64_t HTTPServer_SendUnauthorizedResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = HTTPServer_InitResponse(a1, 401LL, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    HTTPHeader_SetField((char *)(a1 + 139720), "Content-Length", (uint64_t)"0", v11, v12, v13, v14, v15, v23);
    HTTPHeader_SetField( (char *)(a1 + 139720),  "WWW-Authenticate",  (uint64_t)"Digest realm=%s, nonce=%s%s",  v16,  v17,  v18,  v19,  v20,  a2);
    uint64_t result = HTTPHeader_Commit(a1 + 139720);
    if (!(_DWORD)result)
    {
      LogHTTP( *(void *)(a1 + 279280),  *(int **)(a1 + 279288),  (unsigned __int8 *)(a1 + 139720),  *(void *)(a1 + 147912),  0LL,  0LL,  v21,  v22);
      return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32LL))();
    }
  }

  return result;
}

uint64_t HTTPHeader_InitRequest( uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitRequestF(a1, a4, a2, (uint64_t)"%s", a5, a6, a7, a8, a3);
}

uint64_t HTTPHeader_InitRequestF( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_InitRequestV(a1, a2, a3, a4, (uint64_t)&a9, a6, a7, a8);
}

uint64_t HTTPHeader_InitRequestV( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[0] = a5;
  v17[1] = a5;
  if (a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = "HTTP/1.1";
  }
  unsigned int v10 = SNPrintF(a1, 0x2000LL, "%s%n %n%V%n %s\r\n", a4, a5, a6, a7, a8, a3, &v16, &v15, a4, v17, &v14, v9);
  if (v10 - 0x2000 < 0xFFFFE001)
  {
    uint64_t result = 4294960545LL;
  }

  else
  {
    unsigned int v11 = v10;
    uint64_t result = 0LL;
    *(void *)(a1 + 8216) = a1;
    *(void *)(a1 + 8224) = v16;
    uint64_t v13 = v15;
    *(void *)(a1 + 8240) = a1 + v15;
    *(void *)(a1 + 824_Block_object_dispose(va, 8) = v14 - v13;
    *(void *)(a1 + 0x2000) = v11;
  }

  *(_DWORD *)(a1 + 8476) = result;
  return result;
}

uint64_t HTTPHeader_InitResponse( uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return HTTPHeader_InitResponseEx(a1, a2, a3, a4, 0LL, a6, a7, a8);
}

uint64_t HTTPHeader_InitResponseEx( uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    unsigned int v11 = a2;
  }
  else {
    unsigned int v11 = "HTTP/1.1";
  }
  if (a4)
  {
    if ((_DWORD)a5)
    {
LABEL_6:
      unsigned int v12 = SNPrintF(a1, 0x2000LL, "%s %u %s (%d)\r\n", (uint64_t)a4, a5, a6, a7, a8, v11, a3, a4, a5);
      goto LABEL_9;
    }
  }

  else
  {
    a4 = HTTPGetReasonPhrase(a3);
    if ((_DWORD)a5) {
      goto LABEL_6;
    }
  }

  unsigned int v12 = SNPrintF(a1, 0x2000LL, "%s %u %s\r\n", (uint64_t)a4, a5, a6, a7, a8, v11, a3, a4);
LABEL_9:
  if (v12 - 0x2000 < 0xFFFFE001)
  {
    uint64_t v13 = 4294960545LL;
  }

  else
  {
    uint64_t v13 = 0LL;
    *(void *)(a1 + 0x2000) = v12;
  }

  *(_DWORD *)(a1 + 8476) = v13;
  return v13;
}

uint64_t HTTPHeader_Commit(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8476);
  if (!(_DWORD)v1)
  {
    uint64_t v2 = *(void *)(a1 + 0x2000);
    if (v2 == 4)
    {
      if (*(_BYTE *)a1 == 36)
      {
LABEL_8:
        uint64_t v1 = 0LL;
        *(_DWORD *)(a1 + 8476) = -6721;
        return v1;
      }
    }

    else
    {
      if (!v2) {
        return 4294960551LL;
      }
    }

    *(_WORD *)(a1 + v2) = 2573;
    uint64_t v3 = v2 + 2;
    *(_BYTE *)(a1 + v3) = 0;
    *(void *)(a1 + 0x2000) = v3;
    goto LABEL_8;
  }

  return v1;
}

uint64_t HTTPHeader_Uncommit(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8476) != -6721) {
    return 4294960587LL;
  }
  uint64_t v1 = *(void *)(a1 + 0x2000);
  if (*(_BYTE *)(v1 + a1 - 4) != 13) {
    return 4294960554LL;
  }
  if (*(_BYTE *)(v1 + a1 - 3) != 10) {
    return 4294960554LL;
  }
  uint64_t v2 = v1 - 2;
  if (*(_BYTE *)(a1 + v1 - 2) != 13 || *(_BYTE *)(v1 + a1 - 1) != 10) {
    return 4294960554LL;
  }
  uint64_t v3 = 0LL;
  *(void *)(a1 + 0x2000) = v2;
  *(_DWORD *)(a1 + 8476) = 0;
  return v3;
}

uint64_t HTTPHeader_SetField( char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_SetFieldV(a1, a2, a3, (uint64_t)&a9);
}

uint64_t HTTPHeader_SetFieldV(char *__s, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t result = *((unsigned int *)__s + 2119);
  if (!(_DWORD)result)
  {
    uint64_t v6 = *((void *)__s + 1024);
    if ((unint64_t)(v6 - 0x2000) < 0xFFFFFFFFFFFFE003LL)
    {
      uint64_t result = 4294960551LL;
      goto LABEL_19;
    }

    if (HTTPGetHeaderField(__s, *((void *)__s + 1024), a2, &v28, 0LL, 0LL, 0LL, &v27))
    {
      uint64_t v26 = v29;
      int v14 = SNPrintF((uint64_t)&__s[v6], 0x2000 - v6, "%s: %V\r\n", v9, v10, v11, v12, v13, a2, a3, &v26);
      if (v14 >= 1 && v14 < 0x2000 - (int)v6)
      {
        unsigned int v16 = v14;
        uint64_t result = 0LL;
        *((void *)__s + 1024) += v16;
        return result;
      }

      goto LABEL_17;
    }

    uint64_t v26 = v29;
    int v17 = MemPrintF(0LL, 0LL, "%s: %V\r\n", v9, v10, v11, v12, v13, (uint64_t)a2);
    if (v17 < 1)
    {
      uint64_t result = 4294960579LL;
LABEL_19:
      if (!*((_DWORD *)__s + 2119)) {
        *((_DWORD *)__s + 2119) = result;
      }
      return result;
    }

    unint64_t v23 = v6 - (v27 - v28) + v17;
    if (v23 >> 13)
    {
LABEL_17:
      uint64_t result = 4294960545LL;
      goto LABEL_19;
    }

    unint64_t v24 = v17;
    uint64_t v25 = v28 - __s;
    if (v27 - v28 != v17) {
      memmove((void *)&v28[v17], v27, v6 - (v27 - __s) + 1);
    }
    uint64_t v26 = v29;
    MemPrintF( (uint64_t (*)(unsigned __int8 *, int64_t, void))&__s[v25],  (uint64_t (*)(unsigned __int8 *, int64_t, void))v24,  "%s: %V\r\n",  v18,  v19,  v20,  v21,  v22,  (uint64_t)a2);
    uint64_t result = 0LL;
    *((void *)__s + 1024) = v23;
  }

  return result;
}

uint64_t HTTPGetHeaderField( char *__s, int64_t a2, char *a3, const char **a4, size_t *a5, const char **a6, void *a7, char **a8)
{
  int64_t v14 = a2;
  int v15 = __s;
  if (a2 == -1)
  {
    int64_t v14 = strlen(__s);
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    size_t v16 = 0LL;
    goto LABEL_6;
  }

  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  size_t v16 = strlen(a3);
LABEL_6:
  if (v14 < 1) {
    return 4294960569LL;
  }
  socklen_t v33 = a8;
  int v17 = &v15[v14];
  while (1)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = v15;
    uint64_t v20 = v15;
    while (1)
    {
      int v21 = *v20;
      if (v21 == 10 || v21 == 13) {
        break;
      }
      ++v20;
      ++v18;
      if (v20 >= v17) {
        return 4294960569LL;
      }
    }

    if (v21 == 13) {
      int v15 = v20 + 1;
    }
    else {
      int v15 = v20;
    }
    if (v15 < v17 && *v15 == 10) {
      ++v15;
    }
    if (!a3) {
      break;
    }
    if (v20 - v19 > v16 && v19[v16] == 58 && !strncasecmp(v19, a3, v16)) {
      goto LABEL_34;
    }
LABEL_30:
    if (v15 >= v17) {
      return 4294960569LL;
    }
  }

  if (v19 >= v20) {
    goto LABEL_30;
  }
  unint64_t v23 = v19;
  while (*v23 != 58)
  {
    ++v23;
    if (!--v18) {
      goto LABEL_30;
    }
  }

  size_t v16 = v23 - v19;
LABEL_34:
  uint64_t v25 = &v19[v16 + 1];
  if (v25 < v20)
  {
    while (1)
    {
      int v26 = *(unsigned __int8 *)v25;
      if (v26 != 32 && v26 != 9) {
        break;
      }
      if (++v25 >= v20)
      {
        uint64_t v25 = v20;
        break;
      }
    }
  }

  while (v15 < v17)
  {
    int v28 = *v15;
    if (v28 != 32 && v28 != 9) {
      break;
    }
    uint64_t v30 = v15 + 1;
    do
    {
      uint64_t v20 = v30;
      if (v30 >= v17)
      {
        int v15 = v30;
        goto LABEL_58;
      }

      int v31 = *v30++;
    }

    while (v31 != 13 && v31 != 10);
    if (v31 == 13) {
      int v15 = v20 + 1;
    }
    else {
      int v15 = v20;
    }
LABEL_58:
    if (v15 < v17 && *v15 == 10) {
      ++v15;
    }
  }

  if (a4) {
    *a4 = v19;
  }
  if (a5) {
    *a5 = v16;
  }
  if (a6) {
    *a6 = v25;
  }
  if (a7) {
    *a7 = v20 - v25;
  }
  uint64_t result = 0LL;
  if (v33) {
    *socklen_t v33 = v15;
  }
  return result;
}

uint64_t HTTPHeader_SetField_safe( char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return HTTPHeader_SetFieldV(a1, a2, a3, (uint64_t)&a9);
}

uint64_t HTTPHeader_Parse(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 0x2000);
  if (v1 >> 13) {
    return 4294960591LL;
  }
  *(void *)(a1 + 8216) = "";
  *(void *)(a1 + 8224) = 0LL;
  uint64_t v3 = (_BYTE *)(a1 + 8456);
  *(_DWORD *)(a1 + 8232) = 0;
  *(void *)(a1 + 8240) = "";
  int v4 = (void *)(a1 + 8248);
  *(void *)(a1 + 840_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 824_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_OWORD *)(a1 + 8280) = 0u;
  *(_OWORD *)(a1 + 8296) = 0u;
  *(_OWORD *)(a1 + 8312) = 0u;
  *(_OWORD *)(a1 + 832_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 8344) = 0u;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_OWORD *)(a1 + 8376) = 0u;
  *(_OWORD *)(a1 + 8392) = 0u;
  *(void *)(a1 + 8416) = "";
  *(void *)(a1 + 8424) = 0LL;
  *(_DWORD *)(a1 + 8432) = -1;
  *(void *)(a1 + 8440) = "";
  *(void *)(a1 + 844_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 8456) = 0;
  *(void *)(a1 + 8464) = 0LL;
  *(_BYTE *)(a1 + 8472) = 0;
  if (!v1) {
    return 4294960554LL;
  }
  if (v1 == 4 && *(_BYTE *)a1 == 36)
  {
    uint64_t result = 0LL;
    _BYTE *v3 = *(_BYTE *)(a1 + 1);
    *(void *)(a1 + 8464) = __rev16(*(unsigned __int16 *)(a1 + 2));
    *(void *)(a1 + 8216) = a1;
    *(void *)(a1 + 8224) = 1LL;
    return result;
  }

  uint64_t v6 = 0LL;
  uint64_t v7 = (void *)(a1 + 8424);
  int v8 = a1 + 8464;
  unint64_t v9 = a1 + v1;
  unint64_t v10 = v1 - 1;
  while (1)
  {
    int v11 = *(unsigned __int8 *)(a1 + v6);
    if (v11 == 32) {
      break;
    }
    if (v11 == 47)
    {
      *(void *)(a1 + 8416) = a1;
      int64_t v14 = (unsigned __int8 *)(a1 + v6 + 2);
      do
      {
        if ((unint64_t)(v14 - 1) >= v9)
        {
          *(void *)(a1 + 8424) = &v14[-a1 - 1];
          return 4294960554LL;
        }

        size_t v16 = v14 - 1;
        int v15 = *(v14++ - 1);
      }

      while (v15 != 32);
      *(void *)(a1 + 8424) = &v16[-a1];
      int v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >= v9)
      {
        *(_DWORD *)(a1 + 8432) = 0;
      }

      else
      {
        unsigned __int8 v18 = *v17;
        if ((*v17 - 48) <= 9u)
        {
          int v19 = 0;
          while (1)
          {
            int v19 = 10 * v19 + v18 - 48;
            unsigned __int8 v20 = *v14++;
            unsigned __int8 v18 = v20;
            if ((v20 - 48) > 9u)
            {
              size_t v16 = v14 - 2;
              int v17 = v14 - 1;
              goto LABEL_49;
            }
          }

          *(_DWORD *)(a1 + 8432) = v19;
          *(void *)(a1 + 8440) = v9;
          int v17 = (unsigned __int8 *)(a1 + v1);
          int v26 = (unsigned __int8 *)(a1 + v1);
          goto LABEL_66;
        }

        int v19 = 0;
LABEL_49:
        *(_DWORD *)(a1 + 8432) = v19;
        if (v18 == 32) {
          int v17 = v16 + 2;
        }
      }

      *(void *)(a1 + 8440) = v17;
      int v26 = v17;
      if ((unint64_t)v17 >= v9)
      {
LABEL_66:
        *(void *)(a1 + 844_Block_object_dispose(va, 8) = v26 - v17;
        return 4294960554LL;
      }

      int v26 = (unsigned __int8 *)(v1 + a1);
      uint64_t v27 = v1 + a1 - (void)v17;
      unint64_t v23 = v17;
      while (1)
      {
        int v28 = *v23;
        if (v28 == 10 || v28 == 13) {
          break;
        }
        ++v23;
        if (!--v27) {
          goto LABEL_66;
        }
      }

      uint64_t v7 = (void *)(a1 + 8448);
      goto LABEL_60;
    }

    ++v6;
    if (a1 + v6 >= v9) {
      return 4294960554LL;
    }
  }

  int v37 = a1 + 8464;
  *(void *)(a1 + 8216) = a1;
  uint64_t v39 = v6;
  *(void *)(a1 + 8224) = v6;
  uint64_t v12 = (char *)(a1 + v6 + 1);
  if (strnicmpx((unsigned __int8 *)a1, v6, "GET"))
  {
    if (strnicmpx((unsigned __int8 *)a1, v6, "POST"))
    {
      if (strnicmpx((unsigned __int8 *)a1, v6, "PUT"))
      {
        int v13 = 4;
      }

      else
      {
        int v13 = 3;
      }
    }

    else
    {
      int v13 = 2;
    }
  }

  else
  {
    int v13 = 1;
  }

  *(_DWORD *)(a1 + 8232) = v13;
LABEL_31:
  *(void *)(a1 + 8240) = v12;
  if ((unint64_t)v12 >= v9)
  {
    unint64_t v9 = (unint64_t)v12;
LABEL_37:
    *int v4 = v9 - (void)v12;
    return 4294960554LL;
  }

  unint64_t v21 = v10 - v6;
  uint64_t v22 = v12;
  while (*v22 != 32)
  {
    ++v22;
    if (!--v21) {
      goto LABEL_37;
    }
  }

  *(void *)(a1 + 824_Block_object_dispose(va, 8) = v22 - v12;
  int v17 = (unsigned __int8 *)(v22 + 1);
  URLParseComponents(v12, v22, (char **)(a1 + 8256), 0LL);
  *(void *)(a1 + 8416) = v17;
  if ((unint64_t)v17 >= v9)
  {
    unint64_t v9 = (unint64_t)v17;
LABEL_47:
    *uint64_t v7 = v9 - (void)v17;
    return 4294960554LL;
  }

  unint64_t v23 = v17;
  int v8 = v37;
  while (1)
  {
    int v24 = *v23;
    if (v24 == 10 || v24 == 13) {
      break;
    }
  }

uint64_t HTTPScanFHeaderValue( char *a1, int64_t a2, char *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t result = HTTPGetHeaderField(a1, a2, a3, 0LL, 0LL, (const char **)&v12, &v11, 0LL);
  if (!(_DWORD)result) {
    return VSNScanF(v12, v11, a4, &a9);
  }
  return result;
}

uint64_t HTTPParseParameter( char *a1, char *a2, char **a3, void *a4, char **a5, void *a6, char *a7, char **a8)
{
  if (a1 >= a2) {
    return 4294960544LL;
  }
  size_t v11 = a1;
  int64_t v12 = a2 - a1;
  uint64_t v13 = MEMORY[0x1895F8770];
  do
  {
    uint64_t v14 = *v11;
    if (*v11 < 0)
    {
      if (!__maskrune(v14, 0x4000uLL))
      {
LABEL_9:
        int v15 = v11;
        while (1)
        {
          int v16 = *v15;
          ++v15;
          if (!--v12) {
            goto LABEL_13;
          }
        }
      }
    }

    else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
    {
      goto LABEL_9;
    }

    ++v11;
    --v12;
  }

  while (v12);
  size_t v11 = a2;
LABEL_13:
  int v15 = a2;
LABEL_14:
  if (v15 >= a2)
  {
    unsigned __int8 v20 = 0LL;
    int v17 = 0LL;
    unsigned __int8 v18 = v15;
    goto LABEL_55;
  }

  int v17 = (char *)(a2 - v15);
  unsigned __int8 v18 = v15;
  while (1)
  {
    uint64_t v19 = *v18;
    if ((*v18 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v13 + 4 * v19 + 60) & 0x4000) == 0) {
        break;
      }
      goto LABEL_20;
    }

    if (!__maskrune(v19, 0x4000uLL)) {
      break;
    }
LABEL_20:
    ++v18;
    if (!--v17)
    {
      unsigned __int8 v20 = 0LL;
LABEL_22:
      unsigned __int8 v18 = a2;
      goto LABEL_55;
    }
  }

  unint64_t v21 = v18 + 1;
  if (*v18 == 61)
  {
    do
    {
      unsigned __int8 v20 = v21;
      if (v21 >= a2)
      {
        unsigned __int8 v18 = v21;
        int v17 = v21;
        goto LABEL_47;
      }

      uint64_t v22 = *v21;
      if (*v21 < 0) {
        int v23 = __maskrune(v22, 0x4000uLL);
      }
      else {
        int v23 = *(_DWORD *)(v13 + 4 * v22 + 60) & 0x4000;
      }
      --v17;
      unint64_t v21 = v20 + 1;
    }

    while (v23);
    if (*v20 == 34)
    {
      if (++v20 >= a2) {
        return 4294960554LL;
      }
      int v17 = v20;
      uint64_t result = 4294960554LL;
      while (*v17 != 34 || *(v17 - 1) == 92)
      {
        if (++v17 >= a2) {
          return result;
        }
      }

      unsigned __int8 v18 = v17 + 1;
    }

    else
    {
      unsigned __int8 v18 = v20;
      while (1)
      {
        int v25 = *v18;
        ++v18;
        if (!--v17)
        {
          unsigned __int8 v18 = a2;
          int v17 = a2;
          goto LABEL_47;
        }
      }

      int v17 = v18;
    }

const char *HTTPMakeDateString(time_t a1, char *a2, size_t a3)
{
  time_t v8 = a1;
  int v5 = gmtime_r(&v8, &v7);
  if (!v5) {
    return "";
  }
  *a2 = 0;
  strftime(a2, a3, "%a, %d %b %Y %H:%M:%S GMT", v5);
  return a2;
}

uint64_t HTTPParseByteRangeRequest(char *__s, int64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a2 == -1) {
    a2 = strlen(__s);
  }
  if (*(_DWORD *)__s != 1702132066 || *((_WORD *)__s + 2) != 15731) {
    return 4294960540LL;
  }
  if (a2 < 7) {
    return 4294960546LL;
  }
  if (__s[6] == 45)
  {
    if ((unint64_t)a2 >= 8)
    {
      uint64_t v8 = 0LL;
      unint64_t v9 = 7LL;
      while (1)
      {
        int v10 = __s[v9];
        uint64_t v8 = (v10 - 48) + 10 * v8;
        if (a2 == ++v9)
        {
          unint64_t v9 = a2;
          break;
        }
      }

      if (v9 >= 8)
      {
        uint64_t v11 = -v8;
LABEL_32:
        uint64_t v17 = -1LL;
        goto LABEL_33;
      }
    }

    return 4294960559LL;
  }

  uint64_t v11 = 0LL;
  unint64_t v12 = 6LL;
  while (1)
  {
    int v13 = __s[v12];
    uint64_t v11 = (v13 - 48) + 10 * v11;
    if (a2 == ++v12)
    {
      unint64_t v12 = a2;
      break;
    }
  }

  if (v12 < 7) {
    return 4294960559LL;
  }
  if (v13 != 45) {
    return 4294960554LL;
  }
  unint64_t v14 = v12 + 1;
  uint64_t v15 = 0LL;
  while (1)
  {
    int v16 = __s[v14];
    uint64_t v15 = (v16 - 48) + 10 * v15;
    if (a2 == ++v14)
    {
      unint64_t v14 = a2;
      break;
    }
  }

  if (v14 < 7) {
    return 4294960559LL;
  }
  if (v11 <= v15)
  {
    uint64_t v17 = v15 + 1;
LABEL_33:
    uint64_t result = 0LL;
    *a3 = v11;
    *a4 = v17;
    return result;
  }

  return 4294960586LL;
}

uint64_t HTTPParseCacheControlHeader(char *__s, size_t a2, uint64_t a3)
{
  __sa = __s;
  if (a2 == -1LL) {
    a2 = strlen(__s);
  }
  int v5 = &__s[a2];
  while (!HTTPGetHeaderField(__sa, v5 - __sa, "Cache-Control", 0LL, 0LL, (const char **)&v8, &v7, &__sa))
  {
    uint64_t result = HTTPParseCacheControlValue(v8, v7, a3);
    if ((_DWORD)result) {
      return result;
    }
  }

  return 0LL;
}

uint64_t HTTPParseCacheControlValue(char *__s, size_t a2, uint64_t a3)
{
  int v4 = __s;
  uint64_t v22 = __s;
  if (a2 == -1LL) {
    a2 = strlen(__s);
  }
  int v5 = &v4[a2];
  while (1)
  {
    if (!strnicmpx((unsigned __int8 *)v21, v20, "no-cache"))
    {
      *(_BYTE *)a3 = 1;
      goto LABEL_13;
    }

    if (!strnicmpx((unsigned __int8 *)v21, v20, "s-maxage"))
    {
      *(void *)(a3 + 16) = v17;
    }

uint64_t HTTPParseRTPInfo(char *a1, int64_t a2, _WORD *a3, _DWORD *a4)
{
  uint64_t result = HTTPGetHeaderField(a1, a2, "RTP-Info", 0LL, 0LL, (const char **)&v29, &v28, 0LL);
  if (!(_DWORD)result)
  {
    char v7 = 0;
    char v8 = 0;
    __int16 v9 = 0;
    int v10 = 0;
    uint64_t v11 = v29;
    uint64_t v12 = &v29[v28];
    while (!HTTPParseParameter(v11, v12, &v27, &v26, &v25, &v24, 0LL, &v29))
    {
      if (strnicmpx((unsigned __int8 *)v27, v26, "seq"))
      {
        if (!strnicmpx((unsigned __int8 *)v27, v26, "rtptime"))
        {
          char v8 = 1;
          int v10 = v23;
        }
      }

      else
      {
        __int16 v9 = v23;
        char v7 = 1;
      }

      uint64_t v11 = v29;
    }

    if (a3)
    {
      if ((v7 & 1) == 0) {
        return 4294960569LL;
      }
      *a3 = v9;
    }

    if (a4) {
      uint64_t result = 4294960569LL;
    }
    else {
      uint64_t result = 0LL;
    }
    if (((a4 != 0LL) & v8) == 1)
    {
      uint64_t result = 0LL;
      *a4 = v10;
    }
  }

  return result;
}

uint64_t HTTPMakeTimedNonce( const void *a1, CC_LONG a2, const void *a3, CC_LONG a4, _BYTE *a5, unint64_t a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a6) {
    return 4294960591LL;
  }
  time_t v14 = time(0LL);
  CC_LONG v20 = SNPrintF((uint64_t)data, 64LL, "%u", v15, v16, v17, v18, v19, v14);
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, data, v20);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a1, a2);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a3, a4);
  uint64_t v21 = &data[v20];
  *uint64_t v21 = 32;
  CC_MD5_Final((unsigned __int8 *)v21 + 1, &c);
  uint64_t result = Base64EncodeEx(data, (int)(v20 + 17), 0, a5, a6, &v24);
  if (!(_DWORD)result)
  {
    uint64_t v23 = v24;
    a5[v24] = 0;
    uint64_t result = 0LL;
    if (a7) {
      *a7 = v23;
    }
  }

  return result;
}

uint64_t HTTPVerifyTimedNonce( char *a1, size_t a2, unsigned int a3, const void *a4, CC_LONG a5, const void *a6, CC_LONG a7)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t result = Base64Decode(a1, a2, data, 64LL, &v22);
  if (!(_DWORD)result)
  {
    int v13 = time(0LL);
    if (v22 < 1) {
      return 4294960554LL;
    }
    int v14 = 0;
    uint64_t v15 = &data[v22];
    uint64_t v16 = data;
    while (1)
    {
      int v17 = *v16;
      int v14 = v17 - 48 + 10 * v14;
      if (++v16 >= v15) {
        return 4294960554LL;
      }
    }

    if (v17 == 32)
    {
      if (v13 - v14 > a3)
      {
        return 4294960574LL;
      }

      else
      {
        uint64_t v18 = v16 + 1;
        uint64_t v22 = v15 - (v16 + 1);
        if (v22 == 16)
        {
          uint64_t v19 = v16 - data;
          CC_MD5_Init(&c);
          CC_MD5_Update(&c, data, v19);
          CC_MD5_Update(&c, ":", 1u);
          CC_MD5_Update(&c, a4, a5);
          CC_MD5_Update(&c, ":", 1u);
          CC_MD5_Update(&c, a6, a7);
          CC_MD5_Final(md, &c);
          if (*(void *)md == *v18 && v24 == v18[1]) {
            return 0LL;
          }
          else {
            return 4294960563LL;
          }
        }

        else
        {
          return 4294960553LL;
        }
      }
    }

    else
    {
      return 4294960554LL;
    }
  }

  return result;
}

double HTTPClientAuthorization_Init(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0;
  return result;
}

void HTTPClientAuthorization_Free(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    free(v2);
    a1[5] = 0LL;
  }

  a1[6] = 0LL;
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    free(v3);
    a1[7] = 0LL;
  }

  a1[8] = 0LL;
  int v4 = (void *)a1[9];
  if (v4)
  {
    free(v4);
    a1[9] = 0LL;
  }

  a1[10] = 0LL;
  int v5 = (void *)a1[11];
  if (v5)
  {
    free(v5);
    a1[11] = 0LL;
  }

  a1[12] = 0LL;
  uint64_t v6 = (void *)a1[13];
  if (v6)
  {
    free(v6);
    a1[13] = 0LL;
  }

  a1[14] = 0LL;
  char v7 = (void *)a1[15];
  if (v7)
  {
    free(v7);
    a1[15] = 0LL;
  }

  a1[16] = 0LL;
  char v8 = (void *)a1[17];
  if (v8)
  {
    free(v8);
    a1[17] = 0LL;
  }

  a1[18] = 0LL;
  __int16 v9 = (void *)a1[19];
  if (v9)
  {
    free(v9);
    a1[19] = 0LL;
  }

  a1[20] = 0LL;
}

uint64_t HTTPClientAuthorization_Apply(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 4294960591LL;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3 || !*(void *)(v1 + 8224) || !*(void *)(v1 + 8248)) {
    return 4294960591LL;
  }
  if (*(_DWORD *)(v3 + 8432) != 401)
  {
    uint64_t result = *(unsigned int *)(a1 + 168);
    switch((_DWORD)result)
    {
      case 0:
        return result;
      case 1:
        return _HTTPAddBasicAuth(a1);
      case 2:
        return _HTTPAddDigestAuth(a1);
    }

    return 4294960591LL;
  }

  HTTPClientAuthorization_Free((void *)a1);
  if (HTTPGetHeaderField( *(char **)(a1 + 32),  *(void *)(*(void *)(a1 + 32) + 0x2000LL),  "WWW-Authenticate",  0LL,  0LL,  (const char **)&v24,  &v23,  0LL)) {
    return 4294960554LL;
  }
  int64_t v6 = v23;
  int v5 = v24;
  char v7 = &v24[v23];
  char v8 = v24;
  if (v23 >= 1)
  {
    char v8 = v24;
    while (1)
    {
      int v9 = *v8;
      ++v8;
      if (!--v6)
      {
        char v8 = v7;
        break;
      }
    }
  }

  uint64_t v22 = v8;
  int v10 = strndup(v5, v8 - v5);
  if (!v10) {
    return 4294960568LL;
  }
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v8 - v5;
  while (!HTTPParseParameter(v8, v7, &v21, &v20, &v24, &v23, 0LL, &v22))
  {
    uint64_t v11 = strndup(v24, v23);
    if (!v11) {
      return 4294960568LL;
    }
    uint64_t v12 = v11;
    if (strnicmpx((unsigned __int8 *)v21, v20, "realm"))
    {
      if (strnicmpx((unsigned __int8 *)v21, v20, "nonce"))
      {
        if (strnicmpx((unsigned __int8 *)v21, v20, "qop"))
        {
          if (strnicmpx((unsigned __int8 *)v21, v20, "algorithm"))
          {
            if (strnicmpx((unsigned __int8 *)v21, v20, "domain"))
            {
              if (strnicmpx((unsigned __int8 *)v21, v20, "opaque"))
              {
                if (strnicmpx((unsigned __int8 *)v21, v20, "stale"))
                {
                  free(v12);
                }

                else
                {
                  int64_t v19 = v23;
                  *(void *)(a1 + 152) = v12;
                  *(void *)(a1 + 160) = v19;
                }
              }

              else
              {
                int64_t v18 = v23;
                *(void *)(a1 + 104) = v12;
                *(void *)(a1 + 112) = v18;
              }
            }

            else
            {
              int64_t v17 = v23;
              *(void *)(a1 + 72) = v12;
              *(void *)(a1 + 80) = v17;
            }
          }

          else
          {
            int64_t v16 = v23;
            *(void *)(a1 + 40) = v12;
            *(void *)(a1 + 4_Block_object_dispose(va, 8) = v16;
          }
        }

        else
        {
          int64_t v15 = v23;
          *(void *)(a1 + 136) = v12;
          *(void *)(a1 + 144) = v15;
        }
      }

      else
      {
        int64_t v14 = v23;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v12;
        *(void *)(a1 + 96) = v14;
      }
    }

    else
    {
      int64_t v13 = v23;
      *(void *)(a1 + 120) = v12;
      *(void *)(a1 + 12_Block_object_dispose(va, 8) = v13;
    }

    char v8 = v22;
  }

  return _HTTPAddDigestAuth(a1);
}

uint64_t _HTTPAddDigestAuth(uint64_t a1)
{
  v14[5] = *(const char **)MEMORY[0x1895F89C0];
  if ((*(_BYTE *)a1 & 2) == 0) {
    return 4294960561LL;
  }
  uint64_t v2 = *(const char **)(a1 + 8);
  if (!v2) {
    return 4294960542LL;
  }
  uint64_t v3 = *(const char **)(a1 + 16);
  if (!v3) {
    return 4294960542LL;
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8432LL) != 401) {
    goto LABEL_10;
  }
  uint64_t v13 = 0LL;
  v14[0] = 0LL;
  HTTPGetHeaderField( *(char **)(a1 + 24),  *(void *)(*(void *)(a1 + 24) + 0x2000LL),  "Authorization",  0LL,  0LL,  v14,  &v13,  0LL);
  uint64_t result = HTTPHeader_Uncommit(*(void *)(a1 + 24));
  if (!(_DWORD)result)
  {
    uint64_t v2 = *(const char **)(a1 + 8);
    uint64_t v3 = *(const char **)(a1 + 16);
LABEL_10:
    CC_LONG v5 = strlen(v2);
    CC_LONG v6 = strlen(v3);
    if (*(_BYTE *)(a1 + 4)) {
      char v7 = "0123456789ABCDEF";
    }
    else {
      char v7 = "0123456789abcdef";
    }
    _HTTPMakeAuthDigest( v2,  v5,  v3,  v6,  *(const void **)(*(void *)(a1 + 24) + 8216LL),  *(void *)(*(void *)(a1 + 24) + 8224LL),  *(const void **)(*(void *)(a1 + 24) + 8240LL),  *(void *)(*(void *)(a1 + 24) + 8248LL),  *(const void **)(a1 + 120),  *(void *)(a1 + 128),  *(const void **)(a1 + 88),  *(void *)(a1 + 96),  (uint64_t)v7,  v14);
    uint64_t result = HTTPHeader_SetField( *(char **)(a1 + 24),  "Authorization",  (uint64_t)"Digest username=%s, realm=%.*s, nonce=%.*s, uri=%.*s, response=%s",  v8,  v9,  v10,  v11,  v12,  *(void *)(a1 + 8));
    if (!(_DWORD)result) {
      *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = 2;
    }
  }

  return result;
}

uint64_t _HTTPAddBasicAuth(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 1) == 0) {
    return 4294960561LL;
  }
  if (!*(void *)(a1 + 8) || !*(void *)(a1 + 16)) {
    return 4294960542LL;
  }
  int64_t v18 = 0LL;
  ASPrintF((void **)&v18);
  uint64_t v2 = v18;
  if (!v18) {
    return 4294960568LL;
  }
  uint64_t v3 = Base64EncodeCopyEx(v18, 0xFFFFFFFFFFFFFFFFLL, 0, &v17, 0LL);
  free(v2);
  if ((_DWORD)v3) {
    return v3;
  }
  int64_t v16 = 0LL;
  CC_LONG v5 = v17;
  ASPrintF((void **)&v16);
  free(v5);
  uint64_t v11 = v16;
  if (!v16) {
    return 4294960568LL;
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 8432LL) == 401)
  {
    uint64_t v14 = 0LL;
    int64_t v15 = 0LL;
    HTTPGetHeaderField( *(char **)(a1 + 24),  *(void *)(*(void *)(a1 + 24) + 0x2000LL),  "Authorization",  0LL,  0LL,  &v15,  &v14,  0LL);
    uint64_t v12 = 0LL;
    while (v14 != v12)
    {
      int v13 = v11[v12];
      ++v12;
      if (!v13) {
        goto LABEL_18;
      }
    }

    if (!v11[v14])
    {
LABEL_18:
      uint64_t v3 = 4294960542LL;
      goto LABEL_19;
    }

uint64_t _HTTPMakeAuthDigest( const void *a1, CC_LONG a2, const void *a3, CC_LONG a4, const void *a5, CC_LONG a6, const void *a7, CC_LONG a8, const void *a9, CC_LONG a10, const void *a11, CC_LONG a12, uint64_t a13, _BYTE *a14)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a1, a2);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a9, a10);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a3, a4);
  CC_MD5_Final(md, &c);
  uint64_t v21 = 0LL;
  uint64_t v22 = __s;
  do
  {
    unint64_t v23 = md[v21];
    *uint64_t v22 = *(_BYTE *)(a13 + (v23 >> 4));
    v22[1] = *(_BYTE *)(a13 + (v23 & 0xF));
    v22 += 2;
    ++v21;
  }

  while (v21 != 16);
  *uint64_t v22 = 0;
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a5, a6);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a7, a8);
  CC_MD5_Final(md, &c);
  uint64_t v24 = 0LL;
  int v25 = data;
  do
  {
    unint64_t v26 = md[v24];
    *int v25 = *(_BYTE *)(a13 + (v26 >> 4));
    v25[1] = *(_BYTE *)(a13 + (v26 & 0xF));
    v25 += 2;
    ++v24;
  }

  while (v24 != 16);
  *int v25 = 0;
  CC_MD5_Init(&c);
  CC_LONG v27 = strlen(__s);
  CC_MD5_Update(&c, __s, v27);
  CC_MD5_Update(&c, ":", 1u);
  CC_MD5_Update(&c, a11, a12);
  CC_MD5_Update(&c, ":", 1u);
  CC_LONG v28 = strlen(data);
  CC_MD5_Update(&c, data, v28);
  uint64_t result = CC_MD5_Final(md, &c);
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    unint64_t v31 = md[i];
    *a14 = *(_BYTE *)(a13 + (v31 >> 4));
    a14[1] = *(_BYTE *)(a13 + (v31 & 0xF));
    a14 += 2;
  }

  *a14 = 0;
  return result;
}

uint64_t HTTPVerifyAuthorization(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  __s = 0LL;
  if (!*(_DWORD *)a1) {
    return 200LL;
  }
  if (HTTPGetHeaderField( *(char **)(a1 + 64),  *(void *)(a1 + 72),  "Authorization",  0LL,  0LL,  (const char **)&v48,  &v47,  0LL)) {
    return 401LL;
  }
  uint64_t v3 = v47;
  uint64_t v2 = (unsigned __int8 *)v48;
  int v4 = &v48[v47];
  CC_LONG v5 = v48;
  if (v47 >= 1)
  {
    CC_LONG v5 = v48;
    while (1)
    {
      int v6 = *v5;
      ++v5;
      if (!--v3)
      {
        CC_LONG v5 = v4;
        break;
      }
    }
  }

  uint64_t v46 = v5;
  if (strnicmpx(v2, v5 - (char *)v2, "Basic"))
  {
    if ((*(_BYTE *)a1 & 2) != 0)
    {
      *(void *)(a1 + 112) = 0LL;
      *(void *)(a1 + 120) = 0LL;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      while (!HTTPParseParameter(v46, v4, &v43, &v42, &v48, &v47, 0LL, &v46))
      {
        if (strnicmpx((unsigned __int8 *)v43, v42, "username"))
        {
          if (strnicmpx((unsigned __int8 *)v43, v42, "realm"))
          {
            if (strnicmpx((unsigned __int8 *)v43, v42, "nonce"))
            {
              if (strnicmpx((unsigned __int8 *)v43, v42, "uri"))
              {
                if (strnicmpx((unsigned __int8 *)v43, v42, "response"))
                {
                  if (strnicmpx((unsigned __int8 *)v43, v42, "algorithm"))
                  {
                    if (strnicmpx((unsigned __int8 *)v43, v42, "cnonce"))
                    {
                      if (strnicmpx((unsigned __int8 *)v43, v42, "opaque"))
                      {
                        if (strnicmpx((unsigned __int8 *)v43, v42, "qop"))
                        {
                          if (!strnicmpx((unsigned __int8 *)v43, v42, "nc"))
                          {
                            uint64_t v10 = v47;
                            *(void *)(a1 + 272) = v48;
                            *(void *)(a1 + 280) = v10;
                          }
                        }

                        else
                        {
                          uint64_t v19 = v47;
                          *(void *)(a1 + 256) = v48;
                          *(void *)(a1 + 264) = v19;
                        }
                      }

                      else
                      {
                        uint64_t v18 = v47;
                        *(void *)(a1 + 240) = v48;
                        *(void *)(a1 + 24_Block_object_dispose(va, 8) = v18;
                      }
                    }

                    else
                    {
                      uint64_t v17 = v47;
                      *(void *)(a1 + 224) = v48;
                      *(void *)(a1 + 232) = v17;
                    }
                  }

                  else
                  {
                    uint64_t v16 = v47;
                    *(void *)(a1 + 20_Block_object_dispose(va, 8) = v48;
                    *(void *)(a1 + 216) = v16;
                  }
                }

                else
                {
                  uint64_t v15 = v47;
                  *(void *)(a1 + 192) = v48;
                  *(void *)(a1 + 200) = v15;
                }
              }

              else
              {
                uint64_t v14 = v47;
                *(void *)(a1 + 176) = v48;
                *(void *)(a1 + 184) = v14;
              }
            }

            else
            {
              uint64_t v13 = v47;
              *(void *)(a1 + 160) = v48;
              *(void *)(a1 + 16_Block_object_dispose(va, 8) = v13;
            }
          }

          else
          {
            uint64_t v12 = v47;
            *(void *)(a1 + 144) = v48;
            *(void *)(a1 + 152) = v12;
          }
        }

        else
        {
          uint64_t v11 = v47;
          *(void *)(a1 + 112) = v48;
          *(void *)(a1 + 120) = v11;
        }
      }

      size_t v20 = *(void *)(a1 + 168);
      if (!v20) {
        return 400LL;
      }
      uint64_t v21 = *(unsigned int (**)(uint64_t))(a1 + 48);
      if (v21)
      {
        if (!v21(a1)) {
          return 401LL;
        }
      }

      else
      {
        CC_LONG v28 = *(const void **)(a1 + 16);
        if (!v28) {
          return 500LL;
        }
        uint64_t v29 = *(void *)(a1 + 24);
        if (!v29) {
          return 500LL;
        }
        int v30 = HTTPVerifyTimedNonce( *(char **)(a1 + 160),  v20,  0x78u,  "YjM5ODQ4MDE0MmI3YTI4ZmQ1MzdjNGIxMDVmNzYxMDg=",  0x2Cu,  v28,  v29);
        if (v30)
        {
          if (v30 == -6722) {
            *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 1;
          }
          return 401LL;
        }
      }

      int64_t v44 = 0LL;
      unint64_t v31 = *(const char **)(a1 + 8);
      if (v31) {
        goto LABEL_54;
      }
      int v32 = *(uint64_t (**)(uint64_t, void **))(a1 + 32);
      if (v32)
      {
        uint64_t v33 = v32(a1, &v44);
        if ((_DWORD)v33 != 200) {
          return v33;
        }
        unint64_t v31 = (const char *)v44;
LABEL_54:
        CC_LONG v34 = strlen(v31);
        _HTTPMakeAuthDigest( *(const void **)(a1 + 112),  *(void *)(a1 + 120),  v31,  v34,  *(const void **)(a1 + 80),  *(void *)(a1 + 88),  *(const void **)(a1 + 96),  *(void *)(a1 + 104),  *(const void **)(a1 + 144),  *(void *)(a1 + 152),  *(const void **)(a1 + 160),  *(void *)(a1 + 168),  (uint64_t)"0123456789abcdef",  v49);
        if (v44) {
          free(v44);
        }
        if (strnicmpx(*(unsigned __int8 **)(a1 + 192), *(void *)(a1 + 200), v49))
        {
          *(_BYTE *)(a1 + 289) = 1;
          return 401LL;
        }

        return 200LL;
      }

      return 500LL;
    }

    return 401LL;
  }

  if ((*(_BYTE *)a1 & 1) == 0) {
    return 401LL;
  }
  int v8 = Base64DecodeCopy(v46, v4 - v5, &__s, 0LL);
  uint64_t v9 = __s;
  if (v8 || (uint64_t v22 = strchr(__s, 58)) == 0LL)
  {
    uint64_t v7 = 400LL;
  }

  else
  {
    *uint64_t v22 = 0;
    unint64_t v23 = (unsigned __int8 *)(v22 + 1);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v22 + 1 - v9;
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = v22 + 1;
    size_t v24 = strlen(v22 + 1);
    *(void *)(a1 + 136) = v24;
    int64_t v44 = 0LL;
    int v25 = *(unsigned __int8 **)(a1 + 8);
    if (v25)
    {
      size_t v26 = v24;
      CC_LONG v27 = 0LL;
      goto LABEL_62;
    }

    uint64_t v35 = *(uint64_t (**)(uint64_t, void **))(a1 + 32);
    if (v35)
    {
      uint64_t v36 = v35(a1, &v44);
      if ((_DWORD)v36 == 200)
      {
        CC_LONG v27 = v44;
        unint64_t v23 = *(unsigned __int8 **)(a1 + 128);
        size_t v26 = *(void *)(a1 + 136);
        int v25 = (unsigned __int8 *)v44;
LABEL_62:
        int v37 = v25;
        size_t v38 = v26;
        while (1)
        {
          if (!v38)
          {
            BOOL v40 = v25[v26] == 0;
            goto LABEL_69;
          }

          int v39 = *v37;
          if (*v23 != v39) {
            break;
          }
          ++v37;
          ++v23;
          --v38;
          if (!v39)
          {
            BOOL v40 = 1;
            goto LABEL_69;
          }
        }

        BOOL v40 = 0;
LABEL_69:
        if (v27) {
          free(v27);
        }
        if (v40)
        {
          uint64_t v7 = 200LL;
        }

        else
        {
          *(_BYTE *)(a1 + 289) = 1;
          uint64_t v7 = 401LL;
        }

        goto LABEL_74;
      }

      uint64_t v7 = v36;
    }

    else
    {
      uint64_t v7 = 500LL;
    }
  }

uint64_t HTTPReadHeader( uint64_t a1, uint64_t (*a2)(void *, size_t, unint64_t *, uint64_t), uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 0x2000);
  uint64_t v7 = (_BYTE *)a1;
  do
  {
    while (1)
    {
LABEL_2:
      int v8 = (void *)(a1 + v6);
      size_t v9 = *(void *)(a1 + 8208);
      unint64_t v16 = v9;
      size_t v10 = 0x2000 - v6;
      if (v9)
      {
        if (v9 > v10) {
          return 4294960591LL;
        }
        memmove(v8, *(const void **)(a1 + 8200), v9);
        *(void *)(a1 + 820_Block_object_dispose(va, 8) = 0LL;
      }

      else
      {
        unint64_t v16 = 0x2000 - v6;
        if (v6 == 0x2000) {
          return 4294960533LL;
        }
        uint64_t result = a2(v8, v10, &v16, a3);
        if ((_DWORD)result) {
          return result;
        }
        size_t v9 = v16;
      }

      *(void *)(a1 + 0x2000) += v9;
      v6 += v9;
      unint64_t v16 = v6;
      if (v6)
      {
        if (*(_BYTE *)a1 == 36) {
          break;
        }
      }

      unint64_t v14 = a1 + v6;
LABEL_13:
      if ((unint64_t)v7 < v14)
      {
        while (1)
        {
          if (*v7 != 10)
          {
            ++v7;
            goto LABEL_13;
          }

          unint64_t v16 = v14 - (void)v7;
          uint64_t v12 = v7 + 1;
          int v13 = v7[1];
          if (v13 == 13)
          {
            if (v7[2] == 10)
            {
              uint64_t v15 = v7 + 3;
              goto LABEL_26;
            }
          }

          else if (v13 == 10)
          {
            goto LABEL_29;
          }

          ++v7;
          if ((unint64_t)v12 >= v14)
          {
            uint64_t v7 = v12;
            goto LABEL_2;
          }
        }

        if (v14 - (void)v7 == 2 && v7[1] == 10)
        {
LABEL_29:
          uint64_t v15 = v7 + 2;
          goto LABEL_26;
        }
      }
    }
  }

  while (v6 < 4);
  unint64_t v14 = a1 + v6;
  uint64_t v15 = (_BYTE *)(a1 + 4);
LABEL_26:
  *(void *)(a1 + 0x2000) = &v15[-a1];
  uint64_t result = HTTPHeader_Parse(a1);
  if (!(_DWORD)result)
  {
    *(void *)(a1 + 8200) = v15;
    *(void *)(a1 + 820_Block_object_dispose(va, 8) = v14 - (void)v15;
  }

  return result;
}